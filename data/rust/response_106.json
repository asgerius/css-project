[{"tags": ["vector", "rust", "ffi"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1484756257, "post_id": 41724186, "comment_id": 70643242, "body": "Gonna be stealing some of this for addition to the Omnibus ^_^."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1484759696, "post_id": 41724186, "comment_id": 70645648, "body": "@Shepmaster: Feel free :)"}, {"owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "edited": false, "score": 0, "creation_date": 1484762104, "post_id": 41724186, "comment_id": 70646968, "body": "Right and it also seems to be consistent with C++ which has capacity and len too - <code>resize</code> does not alter capacity and there and <code>shrink_to_fit</code> is an unbinding request - just like here - so probably passing the capacity along is the best way. Thanks."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 8, "last_activity_date": 1484755965, "creation_date": 1484755965, "answer_id": 41724186, "question_id": 41723826, "link": "https://stackoverflow.com/questions/41723826/what-is-the-correct-way-to-convert-a-vec-for-ffi-without-reallocation/41724186#41724186", "title": "What is the correct way to convert a Vec for FFI without reallocation?", "body": "<p>The reason is relatively simple.</p>\n\n<p>Modern memory allocators will segregate allocations in \"sized\" slabs, where each slab is responsible for dealing with a given range of sizes. For example:</p>\n\n<ul>\n<li>8 bytes slab: anything from 1 to 8 bytes</li>\n<li>16 bytes slab: anything from 9 to 16 bytes</li>\n<li>24 bytes slab: anything from 17 to 24 bytes</li>\n<li>...</li>\n</ul>\n\n<p>When you allocate memory, you ask for a given size, the allocator finds the right slab, gets a chunk from it, and returns your pointer.</p>\n\n<p>When you deallocate memory... how do you expect the allocator to find the right slab? There are 2 solutions:</p>\n\n<ul>\n<li>the allocator has a way to search for the slab that contains your range of memory, somehow, which involves either a linear search through the slabs or some kind of global look-up table or ...</li>\n<li><em>you</em> tell the allocator what was the size of the allocated block</li>\n</ul>\n\n<p>It's obvious here that the C interface (<code>free</code>, <code>realloc</code>) is rather sub-par, and therefore Rust wishes to use the more efficient interface instead, the one where the onus is on the caller.</p>\n\n<hr>\n\n<p>So, you have two choices:</p>\n\n<ol>\n<li>Pass the capacity</li>\n<li>Ensure that the length and the capacity are equal </li>\n</ol>\n\n<p>As you realized, (2) may require a <em>new</em> allocation, which is quite undesirable. (1) can be implemented either by passing the capacity the whole way, or stash it at some point then retrieve it when you need it.</p>\n\n<p>That's it. You have to evaluate your trade-offs.</p>\n"}], "owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 380, "favorite_count": 1, "accepted_answer_id": 41724186, "answer_count": 1, "score": 7, "last_activity_date": 1484815791, "creation_date": 1484754998, "last_edit_date": 1484815791, "question_id": 41723826, "link": "https://stackoverflow.com/questions/41723826/what-is-the-correct-way-to-convert-a-vec-for-ffi-without-reallocation", "title": "What is the correct way to convert a Vec for FFI without reallocation?", "body": "<p>I need to pass a <code>Vec</code> of elements across the FFI. Experimenting, I came across a few interesting points. I started with giving the FFI all 3: <code>ptr</code>, <code>len</code> and <code>capacity</code> so that I could reconstruct the <code>Vec</code> to destroy it later:</p>\n\n<pre><code>let ptr = vec.as_mut_ptr();\nlet len = vec.len();\nlet cap = vec.capacity();\nmem::forget(vec);\nextern_fn(ptr, len, cap);\n\n// ...\n\npub unsafe extern \"C\" fn free(ptr: *mut u8, len: usize, cap: usize) {\n    let _ = Vec::from_raw_parts(ptr, len, cap);\n}\n</code></pre>\n\n<p>I wanted to get rid of <code>capacity</code> as it's useless to my frontend; it's just so that I can reconstruct my vector to free the memory.</p>\n\n<p><code>Vec::shrink_to_fit()</code> is tempting as it seems to eliminate the need of dealing with capacity. Unfortunately, the documentation on it does not guarantee that it'll make <code>len == capacity</code>, hence I assume that during <code>from_raw_parts()</code> will likely trigger Undefined Behavior.</p>\n\n<p><code>into_boxed_slice()</code> seems to have a guarantee that it's going to make <code>len == capacity</code> from the <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.into_boxed_slice\" rel=\"nofollow noreferrer\">docs</a>, so I used that next. <strong><em>Please correct me if I'm wrong</em></strong>. The problem is that it does not seem to guarantee no-reallocation. Here is a simple program:</p>\n\n<pre><code>fn main() {\n    let mut v = Vec::with_capacity(1000);\n    v.push(100u8);\n    v.push(110);\n    let ptr_1 = v.as_mut_ptr();\n    let mut boxed_slice = v.into_boxed_slice();\n    let ptr_2 = boxed_slice.as_mut_ptr();\n    let ptr_3 = Box::into_raw(boxed_slice);\n    println!(\"{:?}. {:?}. {:?}\", ptr_1, ptr_2, ptr_3);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?code=fn%20main()%20%7B%0A%20%20%20%20let%20mut%20v%20%3D%20Vec%3A%3Awith_capacity(1000)%3B%0A%20%20%20%20v.push(100u8)%3B%0A%20%20%20%20v.push(110)%3B%0A%20%20%20%20let%20ptr_1%20%3D%20v.as_mut_ptr()%3B%0A%20%20%20%20let%20mut%20boxed_slice%20%3D%20v.into_boxed_slice()%3B%0A%20%20%20%20let%20ptr_2%20%3D%20boxed_slice.as_mut_ptr()%3B%0A%20%20%20%20let%20ptr_3%20%3D%20Box%3A%3Ainto_raw(boxed_slice)%3B%0A%20%20%20%20println!(%22%7B%3A%3F%7D.%20%7B%3A%3F%7D.%20%7B%3A%3F%7D%22%2C%20ptr_1%2C%20ptr_2%2C%20ptr_3)%3B%0A%7D&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">In the playground</a>, It prints:</p>\n\n<pre><code>rustc 1.14.0 (e8a012324 2016-12-16)\n0x7fdc9841b000. 0x7fdc98414018. 0x7fdc98414018\n</code></pre>\n\n<p>This is not good if it has to find new memory instead of being able to shed off extra capacity without causing a copy.</p>\n\n<p>Is there any other way I can pass my vector across the FFI (to C) and not pass capacity? It seems <code>into_boxed_slice()</code> is what I need, but why does it involve re-allocation and copying data?</p>\n"}, {"tags": ["rust", "musl"], "answers": [{"comments": [{"owner": {"reputation": 2384, "user_id": 3553432, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/fb2106952e54afdb0d370799f988ba25?s=128&d=identicon&r=PG", "display_name": "nikoss", "link": "https://stackoverflow.com/users/3553432/nikoss"}, "edited": false, "score": 0, "creation_date": 1583101507, "post_id": 41723906, "comment_id": 106993522, "body": "cross does not support openssl"}], "tags": [], "owner": {"reputation": 10672, "user_id": 321731, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/88e60659e997d36af3ff348b3251e1a6?s=128&d=identicon&r=PG", "display_name": "tshepang", "link": "https://stackoverflow.com/users/321731/tshepang"}, "is_accepted": true, "score": 2, "last_activity_date": 1494529982, "last_edit_date": 1494529982, "creation_date": 1484755219, "answer_id": 41723906, "question_id": 41723327, "link": "https://stackoverflow.com/questions/41723327/how-to-build-an-executable-that-depends-on-curl-for-x86-64-unknown-linux-musl/41723906#41723906", "title": "How to build an executable that depends on curl for x86_64-unknown-linux-musl", "body": "<p>I gave in and ended up using <a href=\"https://github.com/japaric/cross\" rel=\"nofollow noreferrer\">cross</a>:</p>\n\n<pre><code>cargo install cross\ncross build --target=x86_64-unknown-linux-musl\n</code></pre>\n\n<p>This was just too easy, and you will find the executable in <code>target/x86_64-unknown-linux-musl/debug</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 216, "user_id": 4781931, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/07a8e2106cc003b3434c830371593a68?s=128&d=identicon&r=PG&f=1", "display_name": "Beno&#238;t Faucon", "link": "https://stackoverflow.com/users/4781931/beno%c3%aet-faucon"}, "is_accepted": false, "score": 2, "last_activity_date": 1498233324, "creation_date": 1498233324, "answer_id": 44725581, "question_id": 41723327, "link": "https://stackoverflow.com/questions/41723327/how-to-build-an-executable-that-depends-on-curl-for-x86-64-unknown-linux-musl/44725581#44725581", "title": "How to build an executable that depends on curl for x86_64-unknown-linux-musl", "body": "<p>The <code>curl</code> crate depends (directly or indirectly) on the two crates libz-sys and openssl-sys.\nA crate whose name ends in \"-sys\" is generally a set of FFI (foreign function interface) bindings to a native C library.</p>\n\n<p>Building such a \"-sys\" crate requires linking to the native library. If your target is x86_64-unknown-linux-musl, then you must link to a native library built against musl, not glic. However, most of the packages you will find in the repositories of your distribution provide libraries built against glibc.</p>\n\n<p>The solution is to build yourself the libraries you need, linking to musl instead of glibc.</p>\n\n<p>I don't have access to a Debian installation, but on Ubuntu 16.04 this looks like this for OpenSSL:</p>\n\n<pre><code># this package provides the \"musl-gcc\" wrapper\napt-get install musl-tools \n# you will also need these, if they are not installed yet\napt-get install pkg-config xutils-dev build-essential\n\n# Download and build OpenSSL against musl\nVERS=1.0.2j\nexport CC=musl-gcc\nexport MUSL_PREFIX=/usr/local/musl\nexport C_INCLUDE_PATH=\"$MUSL_PREFIX/include/\"\ncurl -O https://www.openssl.org/source/openssl-$VERS.tar.gz\ntar xvzf openssl-$VERS.tar.gz\ncd openssl-$VERS\n\n./config --prefix \"$MUSL_PREFIX\"\nmake depend\nmake\nsudo make install\n\nexport OPENSSL_DIR=/usr/local/musl/\nexport OPENSSL_STATIC=1\n</code></pre>\n\n<p>Once you have one the same for libz (I haven't tried to built it), you should then be able to build your crate:</p>\n\n<pre><code> cargo build --target=x86_64-unknown-linux-musl\n</code></pre>\n\n<p>and the resulting binary will be in <code>target/x86_64-unknown-linux-musl/debug/&lt;binary_name&gt;</code></p>\n\n<p>The  <a href=\"https://github.com/japaric/cross\" rel=\"nofollow noreferrer\">cross</a> tool does basically this, but inside a Docker container as to keep your host machine clean.</p>\n\n<p>The binary produced by this build should be statically linked, and not depend even on glibc. This also means that it will be bigger* and that you will need to take care yourself of upgrading any dependency (especially OpenSSL) if a security issue is found in one of them.</p>\n\n<p>*You may want to use <code>strip</code> on the released binary.</p>\n"}], "owner": {"reputation": 10672, "user_id": 321731, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/88e60659e997d36af3ff348b3251e1a6?s=128&d=identicon&r=PG", "display_name": "tshepang", "link": "https://stackoverflow.com/users/321731/tshepang"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1887, "favorite_count": 0, "accepted_answer_id": 41723906, "answer_count": 2, "score": 5, "last_activity_date": 1498233324, "creation_date": 1484753580, "last_edit_date": 1494526549, "question_id": 41723327, "link": "https://stackoverflow.com/questions/41723327/how-to-build-an-executable-that-depends-on-curl-for-x86-64-unknown-linux-musl", "title": "How to build an executable that depends on curl for x86_64-unknown-linux-musl", "body": "<p>I am on an amd64 Debian machine, and am trying to build a x86_64-unknown-linux-musl executable. I have this in my Cargo.toml:</p>\n\n<pre><code>[dependencies]\ncurl = \"0.4\"\n</code></pre>\n\n<p>When I run <code>cargo build --target=x86_64-unknown-linux-musl</code> I get\nthis:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: failed to run custom build command for `libz-sys v1.0.10`\nprocess didn't exit successfully: `/tmp/foo/target/debug/build/libz-sys-c20da5f29c41e515/build-script-build` (exit code: 101)\n--- stdout\nOPT_LEVEL = Some(\"0\")\nPROFILE = Some(\"debug\")\nTARGET = Some(\"x86_64-unknown-linux-musl\")\ndebug=true opt-level=0\nHOST = Some(\"x86_64-unknown-linux-gnu\")\nTARGET = Some(\"x86_64-unknown-linux-musl\")\nTARGET = Some(\"x86_64-unknown-linux-musl\")\nHOST = Some(\"x86_64-unknown-linux-gnu\")\nCC_x86_64-unknown-linux-musl = None\nCC_x86_64_unknown_linux_musl = None\nTARGET_CC = None\nCC = None\nHOST = Some(\"x86_64-unknown-linux-gnu\")\nCROSS_COMPILE = None\nTARGET = Some(\"x86_64-unknown-linux-musl\")\nHOST = Some(\"x86_64-unknown-linux-gnu\")\nCFLAGS_x86_64-unknown-linux-musl = None\nCFLAGS_x86_64_unknown_linux_musl = None\nTARGET_CFLAGS = None\nCFLAGS = None\nrunning: \"./configure\" \"--prefix=/tmp/foo/target/x86_64-unknown-linux-musl/debug/build/libz-sys-e109627694e9981e/out\"\nCompiler error reporting is too harsh for ./configure (perhaps remove -Werror).\n** ./configure aborting.\n\n--- stderr\nthread 'main' panicked at 'failed to run successfully: exit code: 1', /home/tshepang/.cargo/registry/src/github.com-1ecc6299db9ec823/libz-sys-1.0.10/build.rs:189\n</code></pre>\n\n<p>When I re-run it:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: failed to run custom build command for `openssl-sys v0.9.6`\nprocess didn't exit successfully: `/tmp/foo/target/debug/build/openssl-sys-ac9c042b062dad1d/build-script-build` (exit code: 101)\n--- stderr\nthread 'main' panicked at '\n\nCould not find directory of OpenSSL installation, and this `-sys` crate cannot\nproceed without this knowledge. If OpenSSL is installed and this crate had\ntrouble finding it,  you can set the `OPENSSL_DIR` environment variable for the\ncompilation process.\n\nIf you're in a situation where you think the directory *should* be found\nautomatically, please open a bug at https://github.com/sfackler/rust-openssl\nand include information about your system as well as this message.\n\n    $HOST = x86_64-unknown-linux-gnu\n    $TARGET = x86_64-unknown-linux-musl\n    openssl-sys = 0.9.6\n</code></pre>\n\n<p>All works well when I build natively, i.e. <code>cargo build --target=x86_64-unknown-linux-gnu</code>.</p>\n\n<p>Searching around, I learned about an environment variable, PKG_CONFIG_ALLOW_CROSS:</p>\n\n<pre><code>PKG_CONFIG_ALLOW_CROSS=true cargo build --target=x86_64-unknown-linux-musl\n</code></pre>\n\n<p>In doing that, I also found that I was missing the Debian package\nnamed <strong>libcurl4-openssl-dev</strong>.</p>\n\n<p>Running <code>ldd target/target/x86_64-unknown-linux-musl/debug/foo</code>\nindicated the executable is dynamically linked, then searching\nfurther, I learned about another environment variable,\nPKG_CONFIG_ALL_STATIC:</p>\n\n<pre><code>PKG_CONFIG_ALL_STATIC=true PKG_CONFIG_ALLOW_CROSS=true cargo build --target=x86_64-unknown-linux-musl\n</code></pre>\n\n<p>That revealed a whole bunch of missing deps, all of which (luckily)\nhad Debian dependencies. But installing all of them did not help, as,\nin the end, I was still sitting with an executable that wasn't\nstatically linked .</p>\n"}, {"tags": ["json", "rust"], "comments": [{"owner": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "edited": false, "score": 0, "creation_date": 1484742178, "post_id": 41718854, "comment_id": 70633192, "body": "can you make your question more explicit? I think it&#39;s somehow implicit in the paragraphs (something like &quot;how to register those conversion functions in serde&quot;), and maybe state what you already tried..?"}, {"owner": {"reputation": 898, "user_id": 1633026, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2e1ad7e90b16b09cf026e49c24d148ba?s=128&d=identicon&r=PG", "display_name": "Andrew Straw", "link": "https://stackoverflow.com/users/1633026/andrew-straw"}, "reply_to_user": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "edited": false, "score": 0, "creation_date": 1484803902, "post_id": 41718854, "comment_id": 70662819, "body": "The question is the title of my post &quot;How to convert serde_json::Value into concrete type implementing Deserialize trait?&quot; and again repeated in the example code &quot;How to convert a serde_json::Value into MyType without encode/decode pass?&quot;"}], "answers": [{"comments": [{"owner": {"reputation": 2675, "user_id": 545475, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/zl64v.jpg?s=128&g=1", "display_name": "Arnavion", "link": "https://stackoverflow.com/users/545475/arnavion"}, "edited": false, "score": 0, "creation_date": 1559758537, "post_id": 41721162, "comment_id": 99523235, "body": "Note that <code>serde_json::Value</code> is itself a <code>serde::Deserializer</code>, so you can also just do <code>&lt;MyType as Deserialize&gt;::deserialize(value)</code> (which is in fact how <code>serde_json::from_value</code> is implemented). This fact is useful when dealing with something that wants a generic deserializer."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 9, "last_activity_date": 1484747324, "creation_date": 1484747324, "answer_id": 41721162, "question_id": 41718854, "link": "https://stackoverflow.com/questions/41718854/how-to-convert-serde-jsonvalue-into-concrete-type-implementing-deserialize-tra/41721162#41721162", "title": "How to convert serde_json::Value into concrete type implementing Deserialize trait?", "body": "<p>You can use the <a href=\"https://docs.serde.rs/serde_json/value/fn.from_value.html\" rel=\"noreferrer\"><code>serde_json::from_value</code></a> function to convert a <code>Value</code> to any type that implements <code>Deserialize</code>:</p>\n\n<pre><code>fn to_my_type(value: serde_json::Value) -&gt; MyType {\n    serde_json::from_value(value).unwrap()\n}\n</code></pre>\n"}], "owner": {"reputation": 898, "user_id": 1633026, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2e1ad7e90b16b09cf026e49c24d148ba?s=128&d=identicon&r=PG", "display_name": "Andrew Straw", "link": "https://stackoverflow.com/users/1633026/andrew-straw"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1648, "favorite_count": 0, "accepted_answer_id": 41721162, "answer_count": 1, "score": 5, "last_activity_date": 1484747324, "creation_date": 1484740751, "question_id": 41718854, "link": "https://stackoverflow.com/questions/41718854/how-to-convert-serde-jsonvalue-into-concrete-type-implementing-deserialize-tra", "title": "How to convert serde_json::Value into concrete type implementing Deserialize trait?", "body": "<p>I am writing a websocket server which deserializes incoming frames into a <code>serde_json::Value</code> and then passes this value to (potentially many) callbacks. I would like the callbacks to convert the <code>serde_json::Value</code> to a new type (e.g. <code>MyType</code> in the example below) without an encode/decode pass. It seems to me that the serde machinery should have enough information to do this (with the possibility of an error if the contained fields and types do not match). In the example below, the function <code>to_my_type()</code> stands in for this callback function. Is is the encode/decode that I want to bypass from this function.</p>\n\n<p>I could of course pass the raw encoded data to each callback, but then each callback will have to do the decoding separately. I want to keep the function signature of the callbacks taking an argument of type <code>serde_json::Value</code> so that different callbacks can get different types but that I can register them all with a common function signature.</p>\n\n<pre><code>#![feature(proc_macro)]\n\n#[macro_use]\nextern crate serde_derive;\nextern crate serde_json;\n\n#[derive(Serialize, Deserialize)]\nstruct MyType {\n    a: bool,\n}\n\nfn as_json(a: &amp;MyType) -&gt; serde_json::Value {\n    let buf = serde_json::to_vec(a).unwrap();\n    serde_json::from_slice::&lt;serde_json::Value&gt;(&amp;buf).unwrap()\n}\n\nfn to_my_type(value: serde_json::Value) -&gt; MyType {\n    // How to convert a serde_json::Value into MyType without encode/decode pass?\n    let buf = serde_json::to_vec(&amp;value).unwrap();\n    serde_json::from_slice::&lt;MyType&gt;(&amp;buf).unwrap()\n}\n\nfn main() {\n    let store = MyType{a: true};\n    let raw_json = as_json(&amp;store);\n    let _store2 = to_my_type(raw_json);\n}\n</code></pre>\n"}, {"tags": ["arrays", "rust", "heap"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1484747591, "post_id": 41710952, "comment_id": 70636966, "body": "See also <a href=\"http://stackoverflow.com/q/25805174/155423\">Creating a fixed-size array on heap in Rust</a>, <a href=\"http://stackoverflow.com/q/30242770/155423\">How to allocate arrays on the heap in Rust 1.0 (beta)?</a> or <a href=\"https://doc.rust-lang.org/stable/book/vectors.html\" rel=\"nofollow noreferrer\"><i>The Rust Programming Language</i> chapter on vectors</a>. I&#39;d <b>highly recommend reading the book</b> as it covers <i>many</i> of these introductory topics."}], "answers": [{"comments": [{"owner": {"reputation": 1994, "user_id": 5344498, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/1b182dd4ec1499db71778be3145a277f?s=128&d=identicon&r=PG&f=1", "display_name": "Sharpiro", "link": "https://stackoverflow.com/users/5344498/sharpiro"}, "edited": false, "score": 0, "creation_date": 1568928018, "post_id": 41711053, "comment_id": 102441599, "body": "How did you figure out the default sizes of a Vec vs a Box?"}, {"owner": {"reputation": 1320, "user_id": 2276009, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/028757e2365b6eaaee9617e4cf8c71a5?s=128&d=identicon&r=PG", "display_name": "csander", "link": "https://stackoverflow.com/users/2276009/csander"}, "edited": false, "score": 1, "creation_date": 1590685325, "post_id": 41711053, "comment_id": 109780679, "body": "A (boxed) slice just stores a pointer to the start of the slice and the length of the slice as a pointer-sized integer. A <code>Vec</code> is a <i>growable</i> array, so it allocates extra space for additional elements. This means that a <code>Vec</code> also has to store the capacity of the allocated buffer (which is at least as large as the length). (So think of a <code>Box&lt;[_]&gt;</code> as 2 pointers and a <code>Vec&lt;_&gt;</code> as 3.)"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 25, "last_activity_date": 1484711559, "creation_date": 1484711559, "answer_id": 41711053, "question_id": 41710952, "link": "https://stackoverflow.com/questions/41710952/allocate-array-onto-heap-with-size-known-at-runtime/41711053#41711053", "title": "Allocate array onto heap with size known at runtime", "body": "<p>Arrays in Rust are fixed-length.  If you want a dynamically-sized array, use <code>Vec</code>.  In this case, the simplest way is with the <a href=\"https://doc.rust-lang.org/std/macro.vec.html\" rel=\"noreferrer\"><code>vec!</code></a> macro:</p>\n\n<pre><code>let size = 1000;\nlet values = vec![0; size];\n</code></pre>\n\n<p>Also, if you're <em>super</em> concerned about <code>Vec</code> being three words long and don't need to resize the storage after it's created, you can explicitly discard the internal capacity, and bring <code>values</code> down to two words on the stack:</p>\n\n<pre><code>let values = values.into_boxed_slice(); // returns a Box&lt;[i32]&gt;.\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 745, "user_id": 1403530, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/bM6iA.png?s=128&g=1", "display_name": "Daniel", "link": "https://stackoverflow.com/users/1403530/daniel"}, "is_accepted": false, "score": 1, "last_activity_date": 1616693534, "creation_date": 1616693534, "answer_id": 66804722, "question_id": 41710952, "link": "https://stackoverflow.com/questions/41710952/allocate-array-onto-heap-with-size-known-at-runtime/66804722#66804722", "title": "Allocate array onto heap with size known at runtime", "body": "<p>In case that the size of the array can be determined at compile time*, you can use a constant like this:</p>\n<pre><code>const size: usize = 1000; // or: = some_const_fn() \nlet values = Box::new([0; size])\n</code></pre>\n<p>* Since Rust 1.46 control flows and loops are supported in <code>const fn</code>.</p>\n"}], "owner": {"reputation": 2088, "user_id": 4281998, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/q8Jvt.png?s=128&g=1", "display_name": "Brady Dean", "link": "https://stackoverflow.com/users/4281998/brady-dean"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6386, "favorite_count": 2, "accepted_answer_id": 41711053, "answer_count": 2, "score": 10, "last_activity_date": 1616693534, "creation_date": 1484710695, "last_edit_date": 1484747406, "question_id": 41710952, "link": "https://stackoverflow.com/questions/41710952/allocate-array-onto-heap-with-size-known-at-runtime", "title": "Allocate array onto heap with size known at runtime", "body": "<p>In C++, I could put an array of 1000 <code>int</code>s onto the heap like this:</p>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>int size = 1000;\nint* values = new int[size];\ndelete[] values;\n</code></pre>\n\n<p>I can't figure out how to do the equivalent in Rust.</p>\n\n<pre><code>let size = 1000;\nlet values = Box::new([0; size]) // error: non-constant path in constant expression\n</code></pre>\n\n<p>To my understanding, Rust forces the size of all arrays to be known at compile time and doesn't let you use expressions when creating arrays.</p>\n"}, {"tags": ["macros", "rust"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1484685185, "post_id": 41705542, "comment_id": 70608409, "body": "Why would one want that? In case of text input it could just be an empty string instead of nothing."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1484689180, "post_id": 41705542, "comment_id": 70610513, "body": "@ljedrz, Text is quite a different case, this is an optional <i>keyword</i>, so its not possible to pass it as an argument so easily. I&#39;m using a macro that acts as an iterator and takes a the name of a variable to declare, this may need to be mutable or not - can post a link to original code - but not sure its needed."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1484689220, "post_id": 41705542, "comment_id": 70610528, "body": "Nah, I can see it now; I guess I&#39;m just not used to relying on macros that much, it&#39;s a whole different class of issues than with regular code."}], "answers": [{"tags": [], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "is_accepted": false, "score": 3, "last_activity_date": 1484688155, "last_edit_date": 1484688155, "creation_date": 1484684115, "answer_id": 41706133, "question_id": 41705542, "link": "https://stackoverflow.com/questions/41705542/how-to-pass-a-blank-empty-argument-to-a-macro-in-rust/41706133#41706133", "title": "How to pass a blank / empty argument to a macro in Rust?", "body": "<p>As far as I know its not possible to pass in blank / empty arguments.</p>\n\n<p>It is possible however to pass in a locally defined macro which optionally adds a prefix.</p>\n\n<p>Working example:</p>\n\n<pre><code>macro_rules! testme {\n    (private $var:ident, $code:block, $var_qual_macro:ident) =&gt; {\n        for i in 0..10 {\n            // imagine this is a lot more code :)\n            let $var_qual_macro!($var) = i;\n            { $code }\n            if $var &gt; 5 {\n                println!(\"over 5\");\n            }\n        }\n    };\n    (mut $var:ident, $code:block) =&gt; {\n        macro_rules! var_qualifier { ($v:ident) =&gt; { mut $v } }\n        testme!(private $var, $code, var_qualifier)\n    };\n    ($var:ident, $code:block) =&gt; {\n        macro_rules! var_qualifier { ($v:ident) =&gt; { $v } }\n        testme!(private $var, $code, var_qualifier)\n    };\n}\n\nfn main() {\n    testme!(mut myvar_mut, {\n        myvar_mut += 10;\n        println!(\"{}\", myvar_mut);\n    });\n    testme!(myvar_immutable, {\n        println!(\"{}\", myvar_immutable);\n    });\n}\n</code></pre>\n\n<p>Take care when nesting macros like this that the name of the macro (<code>var_qualifier</code> in this case) is isn't the same name used inside a different macro since the name will be silently shadowed.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 988, "favorite_count": 0, "answer_count": 1, "score": 4, "last_activity_date": 1484688393, "creation_date": 1484681868, "last_edit_date": 1484688393, "question_id": 41705542, "link": "https://stackoverflow.com/questions/41705542/how-to-pass-a-blank-empty-argument-to-a-macro-in-rust", "title": "How to pass a blank / empty argument to a macro in Rust?", "body": "<p>In some cases you may want to pass in an argument to a macro which is either some text, or <em>nothing</em> (blank space, as if nothing was written).</p>\n\n<p>Given this starting point:</p>\n\n<pre><code>macro_rules! testme {\n    ($var:ident, $code:block) =&gt; {\n        for i in 0..10 {\n            let $var = i;\n            { $code }\n            if $var &gt; 5 {\n                println!(\"over 5\");\n            }\n        }\n    }\n}\n\nfn main() {\n    testme!(myvar, {\n        println!(\"{}\", myvar);\n    });\n\n}\n</code></pre>\n\n<p>We may want <code>var</code> to <em>optionally</em> be mutable, assuming the macro body is larger then in the example above, its best not to duplicate the entire macro.</p>\n\n<pre><code>macro_rules! testme {\n    (private $var:ident, $code:block, $var_qual:tt) =&gt; {\n        for i in 0..10 {\n            // imagine this is a lot more code :)\n            let $var_qual $var = i;\n            { $code }\n            if $var &gt; 5 {\n                println!(\"over 5\");\n            }\n        }\n    };\n    (mut $var:ident, $code:block) =&gt; {\n        testme!(private $var, $code, mut)\n    };\n/*\n    ($var:ident, $code:block) =&gt; {\n        testme!(private $var, $code, )\n        //                          ^ how to pass in a blank argument?\n    };\n*/\n}\n\nfn main() {\n    testme!(mut myvar_mut, {\n        myvar_mut += 10;\n        println!(\"{}\", myvar_mut);\n    });\n/*\n    testme!(myvar_immutable, {\n        println!(\"{}\", myvar_immutable);\n    });\n*/\n}\n</code></pre>\n\n<p>As far as I can tell there is no way to pass in a an empty argument, uncomment the <code>/**/</code> comments to see the error.</p>\n\n<hr>\n\n<p>Is it possible to pass in an empty argument to a macro to make an example like this work?</p>\n"}, {"tags": ["types", "rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 7271, "user_id": 3704831, "user_type": "registered", "accept_rate": 78, "profile_image": "https://i.stack.imgur.com/OFHMz.jpg?s=128&g=1", "display_name": "wogsland", "link": "https://stackoverflow.com/users/3704831/wogsland"}, "edited": false, "score": 0, "creation_date": 1484679049, "post_id": 41704668, "comment_id": 70605261, "body": "@wogsland please continue reading my answer. There are only <b>3</b> sentences in the first paragraph and the <i>third sentence</i> describes that error."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 7271, "user_id": 3704831, "user_type": "registered", "accept_rate": 78, "profile_image": "https://i.stack.imgur.com/OFHMz.jpg?s=128&g=1", "display_name": "wogsland", "link": "https://stackoverflow.com/users/3704831/wogsland"}, "edited": false, "score": 0, "creation_date": 1484679615, "post_id": 41704668, "comment_id": 70605571, "body": "@wogsland As this is a site for professional programmers, I&#39;d hope that the target audience would read the introductory documentation for a language or framework and be able to compose larger solutions out of smaller components. Besides, I <b>linked to an existing answer</b> on how to parse strings; would you prefer that an answerer write <i>all</i> of your code for you?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1484725020, "post_id": 41704668, "comment_id": 70622220, "body": "Quick note: A site for <i>enthusiast</i> and professional programmers ;)"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 0, "last_activity_date": 1484679080, "last_edit_date": 1495542837, "creation_date": 1484678697, "answer_id": 41704668, "question_id": 41704575, "link": "https://stackoverflow.com/questions/41704575/error-reading-calculating-quotient/41704668#41704668", "title": "Error Reading &amp; Calculating Quotient", "body": "<p><em>You</em> don't need to define <code>Option</code>; it's <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html\" rel=\"nofollow noreferrer\">already part of the standard library</a>. Remove the definition and it will get past that error. The next error is that you have a <code>String</code> that you are trying to use as a number <a href=\"https://stackoverflow.com/q/27043268/155423\">without parsing it first</a>.</p>\n\n<p>I'd <strong>strongly recommend</strong> that you go back and read <a href=\"https://doc.rust-lang.org/stable/book/\" rel=\"nofollow noreferrer\"><em>The Rust Programming Language</em></a> again. The first chapters, especially the guessing game, are targeted at exactly this level of introduction.</p>\n"}, {"comments": [{"owner": {"reputation": 7271, "user_id": 3704831, "user_type": "registered", "accept_rate": 78, "profile_image": "https://i.stack.imgur.com/OFHMz.jpg?s=128&g=1", "display_name": "wogsland", "link": "https://stackoverflow.com/users/3704831/wogsland"}, "edited": false, "score": 0, "creation_date": 1484679164, "post_id": 41704694, "comment_id": 70605324, "body": "I tried this fix and the compile errors go away but it gives me the runtime error instead: <code>thread &#39;&lt;main&gt;&#39; panicked at &#39;Expected i32&#39;</code> and dies rather than printing the quotient."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 6, "last_activity_date": 1484724937, "last_edit_date": 1484724937, "creation_date": 1484678801, "answer_id": 41704694, "question_id": 41704575, "link": "https://stackoverflow.com/questions/41704575/error-reading-calculating-quotient/41704694#41704694", "title": "Error Reading &amp; Calculating Quotient", "body": "<p>By default, any Rust application includes <em>the prelude</em>. You can turn it off, but if you do not, it pulls in the <code>::std::option::Option&lt;T&gt;</code> type as well as its variants <code>None</code> and <code>Some</code> into scope.</p>\n\n<p>Unless someone decides to create something using those names, in which case the newly defined items take priority.</p>\n\n<p>Your problem here is that you have only half-shadowed the standard <code>Option</code>:</p>\n\n<ul>\n<li>you defined <code>Option</code>, which takes precedence over <code>::std::option::Option</code></li>\n<li>you did NOT pull <code>None</code> and <code>Some</code> into the same scope (they are nested in the <code>Option</code> scope), whereas <code>::std::option::Option::{None, Some}</code> are there via the prelude</li>\n</ul>\n\n<p>The result is that <code>Option</code> refers to <code>::Option</code> while <code>None</code> and <code>Some</code> refer to <code>::std::option::Option::None</code> and <code>::std::option::Option::Some</code> respectively. It's a mess.</p>\n\n<p>One solution, if you really <em>want</em> the override, is to import <code>None</code> and <code>Some</code> yourself:</p>\n\n<pre><code>enum Option&lt;T&gt; {\n    None,\n    Some(T)\n}\n\nuse Option::{None, Some};\n</code></pre>\n\n<p>The other is NOT to redefine <code>Option</code>.</p>\n\n<p>Once you apply either fix, you'll realize that you are passing strings as arguments to <code>safe_div</code>, you can use <code>.parse().expect(\"Expected i32\")</code> to parse them as integers.</p>\n"}], "owner": {"reputation": 7271, "user_id": 3704831, "user_type": "registered", "accept_rate": 78, "profile_image": "https://i.stack.imgur.com/OFHMz.jpg?s=128&g=1", "display_name": "wogsland", "link": "https://stackoverflow.com/users/3704831/wogsland"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 163, "favorite_count": 0, "accepted_answer_id": 41704694, "answer_count": 2, "score": 0, "last_activity_date": 1484815837, "creation_date": 1484678286, "last_edit_date": 1484815837, "question_id": 41704575, "link": "https://stackoverflow.com/questions/41704575/error-reading-calculating-quotient", "title": "Error Reading &amp; Calculating Quotient", "body": "<p>I'm a Rust novice and trying to read in two numbers and calculate their quotient:</p>\n\n<pre><code>use std::io;\n\nenum Option&lt;T&gt; {\n    None,\n    Some(T),\n}\n\nfn safe_div(n: i32, d: i32) -&gt; Option&lt;i32&gt; {\n    if d == 0 {\n        return None;\n    }\n    return Some(n / d);\n}\n\nfn main() {\n    println!(\"Please input your numerator.\");\n    let mut numerator = String::new();\n    io::stdin()\n        .read_line(&amp;mut numerator)\n        .expect(\"Failed to read line\");\n    println!(\"Please input your denominator.\");\n    let mut denominator = String::new();\n    io::stdin()\n        .read_line(&amp;mut denominator)\n        .expect(\"Failed to read line\");\n    match safe_div(numerator, denominator) {\n        None =&gt; println!(\"Can't divide by zero!\"),\n        Some(v) =&gt; println!(\"Quotient is {}\", v),\n    }\n}\n</code></pre>\n\n<p>but I am getting the following error repeated several times when I try to compile it: </p>\n\n<blockquote>\n  <p>src/safe_div.rs:12:12: 12:21 error: mismatched types:\n   expected <code>Option&lt;i32&gt;</code>,\n      found <code>std::option::Option&lt;i32&gt;</code>\n  (expected enum <code>Option</code>,\n      found enum <code>std::option::Option</code>) [E0308]</p>\n</blockquote>\n\n<p>What am I missing here?</p>\n"}, {"tags": ["rust", "matching", "traits", "trait-objects"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1484678503, "post_id": 41704481, "comment_id": 70604960, "body": "Please explain why this is not a duplicate of <a href=\"http://stackoverflow.com/q/27535289/155423\">Correct way to return an Iterator?</a>"}], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 5, "last_activity_date": 1484678591, "last_edit_date": 1484678591, "creation_date": 1484678376, "answer_id": 41704596, "question_id": 41704481, "link": "https://stackoverflow.com/questions/41704481/match-arms-that-return-iterators/41704596#41704596", "title": "Match arms that return iterators?", "body": "<p>The first reflex when you want to return something that is not <code>Sized</code>, is to <code>Box</code> it (aka, put it on the heap, return a pointer):</p>\n\n<pre><code>let found: Box&lt;Iterator&lt;Item = usize&gt;&gt; = match requirements {\n    Requirements::A =&gt; Box::new(MatchingAs { ainternals: [] }),\n    Requirements::B =&gt; Box::new(MatchingBs { binternals: [] }),\n    Requirements::C =&gt; Box::new(MatchingCs { cinternals: [] }),\n};\n\nfound.any(|m| m == 1)\n</code></pre>\n\n<p>This is not sufficient, here, because now <code>match</code> will complain that you return different types: <code>Box&lt;MatchingAs&gt;</code>, <code>Box&lt;MatchingBs&gt;</code>, ...</p>\n\n<p>However, <code>Box&lt;Concrete&gt;</code> can be cast to <code>Box&lt;Trait&gt;</code> whenever there is an <code>impl Trait for Concrete</code>, so:</p>\n\n<pre><code>let found = match requirements {\n    Requirements::A =&gt; Box::new(MatchingAs { ainternals: [] }) as Box&lt;Iterator&lt;Item = usize&gt;&gt;,\n    Requirements::B =&gt; Box::new(MatchingBs { binternals: [] }) as Box&lt;Iterator&lt;Item = usize&gt;&gt;,\n    Requirements::C =&gt; Box::new(MatchingCs { cinternals: [] }) as Box&lt;Iterator&lt;Item = usize&gt;&gt;,\n};\n\nfound.any(|m| m == 1)\n</code></pre>\n\n<hr>\n\n<p>There is, though, an allocation-less solution: use generics.</p>\n\n<pre><code>fn search&lt;T: Iterator&lt;Item = usize&gt;&gt;(t: T) -&gt; bool {\n    t.any(|m| m == 1)\n}\n</code></pre>\n\n<p>and then apply that function to each branch of the <code>match</code>:</p>\n\n<pre><code>match requirements {\n    Requirements::A =&gt; search(MatchingAs {ainternals: []}),\n    Requirements::B =&gt; search(MatchingBs {binternals: []}),\n    Requirements::C =&gt; search(MatchingCs {cinternals: []}),\n}\n</code></pre>\n\n<p>The trade-off is that it's a bit closer to callback-hell, with a somewhat indirect flow.</p>\n"}], "owner": {"reputation": 6604, "user_id": 318206, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/f30e68fd58551b03172a66098e37db95?s=128&d=identicon&r=PG", "display_name": "Bosh", "link": "https://stackoverflow.com/users/318206/bosh"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 539, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1484679445, "creation_date": 1484677965, "last_edit_date": 1484679445, "question_id": 41704481, "link": "https://stackoverflow.com/questions/41704481/match-arms-that-return-iterators", "title": "Match arms that return iterators?", "body": "<p>I've got some code that attempts to run a match where each branch can return a different type, but <strong>all of these types implement <code>Iterator&lt;Item=usize&gt;</code></strong>. </p>\n\n<pre><code>let found: Iterator&lt;Item = usize&gt; = match requirements {\n    Requirements::A =&gt; MatchingAs { ainternals: [] },\n    Requirements::B =&gt; MatchingBs { binternals: [] },\n    Requirements::C =&gt; MatchingCs { cinternals: [] },\n};\n\nreturn found.any(|m| m == 1)\n</code></pre>\n\n<p>... where <code>MatchingAs</code>, <code>MatchingBs</code>, and <code>MatchingCs</code> all <code>impl</code> <code>std::iter::Iterator&lt;Item = usize&gt;</code>.</p>\n\n<p>I'm hitting a wall with the fact that the <code>Iterator</code> isn't sized: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>    | the trait `std::marker::Sized` is not implemented for `std::iter::Iterator&lt;Item=usize&gt;`\n</code></pre>\n\n<p>Is there a good approach to have match arms return objects with a shared trait, and then rely (only) on the trait in processing the results?</p>\n"}, {"tags": ["unit-testing", "rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1484665919, "post_id": 41700543, "comment_id": 70597147, "body": "Much better with the error message! Would defining the test utilities in a non- <code>#[cfg(test)]</code> guarded module be acceptable? (I am not it is necessary, just checking)"}, {"owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1484666103, "post_id": 41700543, "comment_id": 70597283, "body": "@MatthieuM. That will make it a part of the production binary - which is again not desirable (or did i not understand you ?)"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1484666214, "post_id": 41700543, "comment_id": 70597368, "body": "It depends on your compilation mode (a static binary could strip unused stuff), but yes there is a risk it does make it into the binary so hopefully it can be avoided."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 1, "creation_date": 1484666223, "post_id": 41700543, "comment_id": 70597378, "body": "Can you break the cyclic link by putting some or all of the tests in the test-utils crate, rather than crate-0 depending on test-utils?"}, {"owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "reply_to_user": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1484666397, "post_id": 41700543, "comment_id": 70597504, "body": "@ChrisEmerson maybe i could if i tried hard enough but that will lead to an explosion of crates i need to maintain - as said if this is doable then there are other crates i would like to extend this to. Currently i am using a custom feature for it, which is again not so ideal (causing combinatorial features explosion). Also i would lose the ability to test a crate as the testing would then be in a separate crate - so more elaborate CI setup would be required."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1484666791, "post_id": 41700543, "comment_id": 70597779, "body": "I don&#39;t think I have enough information for any more concrete suggestions. A more complete example of the type of test utilities/tests and explanation of why there are dependencies would help.  I can&#39;t see where any of the tradeoffs might be with this dummy example."}, {"owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "reply_to_user": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1484667210, "post_id": 41700543, "comment_id": 70598061, "body": "@ChrisEmerson here is one place where the actual test-utils is there for e.g <a href=\"https://github.com/maidsafe/safe_client_libs/blob/29975e054e7b3589344a4b09ec594599015c9b73/safe_core/src/utils/test_utils.rs\" rel=\"nofollow noreferrer\">github.com/maidsafe/safe_client_libs/blob/&hellip;</a> . Now i don&#39;t want to move all the tests of <code>safe_core</code> crate out elsewhere just because i need to share that test-utils with other crates. You can imagine it in the given example too where crate-0::test_0 uses many other stuffs from crate-0. And there are many tests. So ideally wouldn&#39;t want to move everything over to a different crate (unless there is no other way)."}], "answers": [{"tags": [], "owner": {"reputation": 752, "user_id": 7496656, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/zMGuk.jpg?s=128&g=1", "display_name": "Jan Zerebecki", "link": "https://stackoverflow.com/users/7496656/jan-zerebecki"}, "is_accepted": true, "score": 3, "last_activity_date": 1487520508, "creation_date": 1487520508, "answer_id": 42329538, "question_id": 41700543, "link": "https://stackoverflow.com/questions/41700543/can-we-share-test-utilites-between-crates/42329538#42329538", "title": "Can we share test utilites between crates?", "body": "<p>Two solutions with sightly different trade-offs:</p>\n\n<h2>Separate Crate for utilities</h2>\n\n<p>Put your test utilities but not your tests in a new crate <code>crate-0-testutils</code>.\nMake <code>crate-0</code> dev-depend on <code>crate-0-testutils</code>; <code>crate-0-testutils</code> depend on <code>crate-0</code>; <code>crate-1</code> dev-depend on <code>crate-0-testutils</code> and depend on crate-0.</p>\n\n<p>This does not create a circular dependency as the dev-dependencies do not get propagated. Because of the dev-dependency your tests in crate-0 can still use what is in crate-0-testutils.</p>\n\n<p>This at most doubles the number of your lib crates if all your creates had such utilities.</p>\n\n<h2>Use a testing-feature across all crates</h2>\n\n<p>Create a feature in the <code>Cargo.toml</code> of<code>crate-0</code> that does not depend on anything:</p>\n\n<pre><code>[features]\ntesting = []\n</code></pre>\n\n<p>And one in <code>crate-1</code> that depends on the above:</p>\n\n<pre><code>testing = [\"crate-0/testing\"]\n</code></pre>\n\n<p>Then make the first tests on each of the crates fail when the feature is not enabled, to make for an easier to understand error:</p>\n\n<pre><code>#[cfg(all(not(feature = \"testing\"),test))]\nmod testusage {\n    #[test]\n    fn panic_without_testing_feature() {\n        panic!(\"Please use the feature testing when running tests.\\n\\nUse: cargo test --features testing\\n\\n\");\n    }\n}\n</code></pre>\n\n<p>Only compile the utilities when the feature is enabled by adding a guard for it:</p>\n\n<pre><code>#[cfg(feature = \"testing\")]\nfn testing_utility() {\n}\n</code></pre>\n\n<p>This only adds one feature in each crate regardless of how many testing features it depends on but has the downside of needing a special invocation of the tests.</p>\n\n<p>Avoid adding this feature in any crate wide dependency declaration. Including the testing-feature from <code>crate-0</code> in the dev-dependency of <code>crate-1</code> where <code>crate-1</code> also has a normal dependency on <code>crate-0</code> results in cargo building <code>crate-0</code> with that feature even for the build target of <code>crate-1</code> even in release mode.</p>\n"}], "owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 497, "favorite_count": 2, "accepted_answer_id": 42329538, "answer_count": 1, "score": 12, "last_activity_date": 1487520508, "creation_date": 1484665688, "last_edit_date": 1484666227, "question_id": 41700543, "link": "https://stackoverflow.com/questions/41700543/can-we-share-test-utilites-between-crates", "title": "Can we share test utilites between crates?", "body": "<p>I have crate-0 that has <code>src/lib.rs</code> as follows:</p>\n\n<pre><code>#[cfg(test)]\npub mod test_utils {\n    pub struct OnlyInTests(pub usize);\n    pub fn helper() -&gt; usize { 999 }\n\n    #[test]\n    fn test_0() { let _ = OnlyInTests(helper()); }\n}\n</code></pre>\n\n<p>I also have crate-1 where I need the testing framework I defined in crate-0:</p>\n\n<pre><code>extern crate crate_0;\n\n#[cfg(test)]\npub mod test_utils {\n    // This will error out - cannot find mod test_utils in crate_0\n    use crate_0::test_utils::{OnlyInTests, helper()};\n\n    #[test]\n    fn test_1() { let _ = OnlyInTests(helper()); }\n}\n</code></pre>\n\n<p>The code here is trivial and can be copy-pasted, but in reality I have complex test utilities which I want to use while testing crate-1.</p>\n\n<p>I cannot separate out the test utilities into a different crate as I would get cyclic dependency error: <code>test_utils</code> would depend on <code>crate-0</code> create stuff and <code>crate-0</code> would depend on <code>test_utils</code> for testing). Nor do I actually want to do this as there are further crates down the line whose testing utilities I would like to use in dependent crates.</p>\n"}, {"tags": ["error-handling", "rust"], "comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1484651858, "post_id": 41694896, "comment_id": 70587317, "body": "If making it look prettier is all you&#39;re after (and panic&#39;ing).. maybe <a href=\"http://play.integer32.com/?gist=462d0e57bedae7a31381cee670ba6688&amp;version=stable\" rel=\"nofollow noreferrer\">something like this would be sufficient for you?</a>"}, {"owner": {"reputation": 127, "user_id": 7429873, "user_type": "registered", "accept_rate": 25, "profile_image": "https://i.stack.imgur.com/v0P5B.jpg?s=128&g=1", "display_name": "GoldenChrysanthem", "link": "https://stackoverflow.com/users/7429873/goldenchrysanthem"}, "reply_to_user": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1484652320, "post_id": 41694896, "comment_id": 70587626, "body": "is there a way to call unwrap_or_else with a panic inside?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 4, "creation_date": 1484660501, "post_id": 41694896, "comment_id": 70593100, "body": "I&#39;m voting to close this question as off-topic because questions about improving code that <b>already works</b> better belong on <a href=\"http://meta.codereview.stackexchange.com/questions/5777/a-guide-to-code-review-for-stack-overflow-users\">Code Review.SE</a>."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1484659197, "post_id": 41696525, "comment_id": 70592208, "body": "You know you shouldn&#39;t call <code>next</code> multiple times on an iterator without checking at each step or fusing it."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1484667462, "post_id": 41696525, "comment_id": 70598217, "body": "You&#39;re right of course. <a href=\"https://github.com/Manishearth/rust-clippy/issues/1448\" rel=\"nofollow noreferrer\">We should clippy that, too</a>"}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 2, "last_activity_date": 1484667414, "last_edit_date": 1484667414, "creation_date": 1484654286, "answer_id": 41696525, "question_id": 41694896, "link": "https://stackoverflow.com/questions/41694896/remove-unwrap-from-vec-pop/41696525#41696525", "title": "Remove unwrap from vec pop", "body": "<p>You can use iterators and <code>match</code> to write a more idiomatic version of your loop body. Instead of collecting into an intermediate <code>Vec</code>, you match on calling <code>iter.next()</code> four times, to extract your four integers. In case one of the <code>iter.next()</code> calls doesn't succeed, you can panic.</p>\n\n<pre><code>    let mut iter = line_iter.split(' ')\n        .map(str::trim)\n        .map(str::parse::&lt;u32&gt;)\n        .map(|s| s.expect(\"could not parse as u32\"))\n        .fuse();\n\n    let tup = match (iter.next(), iter.next(), iter.next(), iter.next()) {\n        (Some(t1), Some(t2), Some(t3), Some(t4)) =&gt; (t1, t2, t3, t4),\n        _ =&gt; panic!(\"line did not contain at least four numbers\"),\n    };\n\n    let mut data_node = Data::new();\n    data_node.load(tup);\n</code></pre>\n\n<p>I would even go as far as to rewrite the entire function:</p>\n\n<pre><code>file_buf.lines()\n    .map(|line_iter| {\n        let mut iter = line_iter.split(' ')\n            .map(str::trim)\n            .map(str::parse::&lt;u32&gt;)\n            .map(|s| s.expect(\"could not parse as u32\"))\n            .fuse();\n\n        let tup = match (iter.next(), iter.next(), iter.next(), iter.next()) {\n            (Some(t1), Some(t2), Some(t3), Some(t4)) =&gt; (t1, t2, t3, t4),\n            _ =&gt; panic!(\"line did not contain at least four numbers\"),\n        };\n\n        let mut data_node = Data::new();\n        data_node.load(tup);\n        data_node\n    })\n    .collect()\n</code></pre>\n\n<p>Even better would be to have the function return a <code>Result</code> that denotes when an error has occurred: </p>\n\n<pre><code>enum MyError {\n    NotAnInt,\n    TooFewNumbers,\n    TooManyNumbers,\n}\n\nfn load_into_vec2(file_buf: String) -&gt; Result&lt;Vec&lt;Data&gt;, MyError&gt; {\n    file_buf.lines()\n        .map(|line_iter| {\n            let mut iter = line_iter.split(' ')\n                .map(str::trim)\n                .map(str::parse::&lt;u32&gt;)\n                .fuse();\n\n            match (iter.next(), iter.next(), iter.next(), iter.next()) {\n                (Some(Ok(t1)), Some(Ok(t2)), Some(Ok(t3)), Some(Ok(t4))) =&gt; if iter.next().is_some() {\n                    Err(MyError::TooManyNumbers)\n                } else {\n                    let mut data_node = Data::new();\n                    data_node.load((t1, t2, t3, t4));\n                    Ok(data_node)\n                },\n                (None, _, _, _) |\n                (_, None, _, _) |\n                (_, _, None, _) |\n                (_, _, _, None) =&gt; Err(MyError::TooFewNumbers),\n                (Some(Err(_)), _, _, _) |\n                (_, Some(Err(_)), _, _) |\n                (_, _, Some(Err(_)), _) |\n                (_, _, _, Some(Err(_))) =&gt; Err(MyError::NotAnInt),\n            }\n        })\n        .collect()\n}\n</code></pre>\n"}], "owner": {"reputation": 127, "user_id": 7429873, "user_type": "registered", "accept_rate": 25, "profile_image": "https://i.stack.imgur.com/v0P5B.jpg?s=128&g=1", "display_name": "GoldenChrysanthem", "link": "https://stackoverflow.com/users/7429873/goldenchrysanthem"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 320, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1484667414, "creation_date": 1484649511, "last_edit_date": 1484661451, "question_id": 41694896, "link": "https://stackoverflow.com/questions/41694896/remove-unwrap-from-vec-pop", "title": "Remove unwrap from vec pop", "body": "<p>This is a function (that works) that produces a vector of things but there is some ugly unwrapping in there as it involves popping another vector.</p>\n\n<pre><code>fn load_into_vec(file_buf: String) -&gt; Vec&lt;Data&gt; {\n\n    let mut data_vec: Vec&lt;Data&gt; = Vec::new();\n\n    for line_iter in file_buf.lines() {\n\n        let mut line_vec: Vec&lt;&amp;str&gt; = line_iter.split(' ').collect();\n\n        let (t1, t2, t3, t4): (u32, u32, u32, u32) =\n        (\n            /** ANOTHER WAY TO WRITE THIS? **/\n            line_vec.pop().unwrap().trim().parse::&lt;u32&gt;().ok().unwrap(),\n            line_vec.pop().unwrap().trim().parse::&lt;u32&gt;().ok().unwrap(),\n            line_vec.pop().unwrap().trim().parse::&lt;u32&gt;().ok().unwrap(),\n            line_vec.pop().unwrap().trim().parse::&lt;u32&gt;().ok().unwrap()\n        );\n\n        let mut data_node = Data::new();\n        data_node.load((t4, t3, t2, t1));\n        data_vec.push(data_node);\n    }\n\n    data_vec\n}\n</code></pre>\n\n<p>Is there was another way to rewrite the above block without using <code>unwrap</code> or to use <code>unwrap</code> in a way that it will not panic if it encounters <code>None</code>?</p>\n"}, {"tags": ["string", "io", "rust"], "comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 1, "creation_date": 1484612022, "post_id": 41686952, "comment_id": 70571278, "body": "The two snippets you&#39;ve provided aren&#39;t really related in any way. Can you provide an <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> for us?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1484612276, "post_id": 41686952, "comment_id": 70571347, "body": "The only specific addition for this question to the linked duplicate is <a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.as_bytes\" rel=\"nofollow noreferrer\"><code>str::as_bytes</code></a>."}, {"owner": {"reputation": 623, "user_id": 1955971, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/f1d7c2842d4d6be9c8f79e1384f284af?s=128&d=identicon&r=PG", "display_name": "Aleksander Fular", "link": "https://stackoverflow.com/users/1955971/aleksander-fular"}, "reply_to_user": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1484612847, "post_id": 41686952, "comment_id": 70571489, "body": "@SimonWhitehead not really sure how snippets were unrelated, I just wanted to show that  you can not create BufReader from &amp;str.  Anyway, thanks to Shepmaster, invoking the &#39;as_bytes()&#39; does the trick."}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1484612977, "post_id": 41686952, "comment_id": 70571522, "body": "@AleksanderFular I was confused given your <code>read_buff</code> example, but the example failing to compile didn&#39;t use <code>read_buff</code> at all. Glad you have your answer though."}, {"owner": {"reputation": 623, "user_id": 1955971, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/f1d7c2842d4d6be9c8f79e1384f284af?s=128&d=identicon&r=PG", "display_name": "Aleksander Fular", "link": "https://stackoverflow.com/users/1955971/aleksander-fular"}, "reply_to_user": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1484613079, "post_id": 41686952, "comment_id": 70571551, "body": "@SimonWhitehead Yep, I guess I was missing the invocation to the read_buff method :). Edited."}], "owner": {"reputation": 623, "user_id": 1955971, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/f1d7c2842d4d6be9c8f79e1384f284af?s=128&d=identicon&r=PG", "display_name": "Aleksander Fular", "link": "https://stackoverflow.com/users/1955971/aleksander-fular"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 46, "favorite_count": 0, "closed_date": 1484612229, "answer_count": 0, "score": 1, "last_activity_date": 1484613045, "creation_date": 1484611164, "last_edit_date": 1484613045, "question_id": 41686952, "link": "https://stackoverflow.com/questions/41686952/method-accepting-either-a-file-buffer-or-a-string", "closed_reason": "Duplicate", "title": "Method accepting either a file buffer or a string", "body": "<p>I am writing a method which would parse content of a file. For testing purposes, I would like to pass a <code>&amp;str</code> to this method.</p>\n\n<p>I was not able to find a way to do this, but there probably is some trait which does this. Maybe a different approach is required?</p>\n\n<p>So far I have this:  </p>\n\n<pre><code>fn read_buff&lt;R: Read&gt;(buffer: BufReader&lt;R&gt;) {}\n</code></pre>\n\n<p>This fails to compile:  </p>\n\n<pre><code>let s = \"str\";\nlet mut reader = BufReader::new(s); // fails to compile.\nread_buff(reader);\n</code></pre>\n\n<p>It would be best if I had access to the methods provided by the <code>BufReader</code> such as <code>read_line</code>.</p>\n"}, {"tags": ["rust", "traits", "borrow-checker"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 3, "creation_date": 1484594867, "post_id": 41682820, "comment_id": 70564404, "body": "Note that you don&#39;t even need to call <code>encrypt</code> to get this error; just attempting to create a standalone mutable reference via <code>borrow_mut</code> would fail."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1484609221, "post_id": 41682820, "comment_id": 70570460, "body": "A <a href=\"http://play.integer32.com/?gist=c36fba752d8b9500d3b1356c4f33dcd1&amp;version=stable\" rel=\"nofollow noreferrer\">code version of ljedrz&#39;s comment</a>."}, {"owner": {"reputation": 148712, "user_id": 19750, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/13b41b2620da0b1e630715e0c91a0b03?s=128&d=identicon&r=PG", "display_name": "Josh Lee", "link": "https://stackoverflow.com/users/19750/josh-lee"}, "edited": false, "score": 2, "creation_date": 1484617382, "post_id": 41682820, "comment_id": 70572553, "body": "There is some discussion at <a href=\"https://users.rust-lang.org/t/trait-objects-and-borrowmut/8520\" rel=\"nofollow noreferrer\">users.rust-lang.org/t/trait-objects-and-borrowmut/8520</a>"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 6, "last_activity_date": 1484697132, "last_edit_date": 1495541844, "creation_date": 1484697132, "answer_id": 41709126, "question_id": 41682820, "link": "https://stackoverflow.com/questions/41682820/how-does-borrowing-boxtrait-contents-work/41709126#41709126", "title": "How does borrowing Box&lt;Trait&gt; contents work?", "body": "<p>Let's start with a change that allows the code to work:</p>\n\n<pre><code>fn encrypt(encryptor: &amp;mut (Foo + 'static)) { }\n</code></pre>\n\n<p>The important difference is the addition of <code>+ 'static</code> to the trait object - the parens are just needed for precedence.</p>\n\n<p>The important thing to recognize is that there <a href=\"https://stackoverflow.com/q/27790168/155423\">are <em>two</em> lifetimes present in <code>&amp;Foo</code></a>:</p>\n\n<ul>\n<li>a lifetime for the reference itself: <code>&amp;'a Foo</code></li>\n<li>a lifetime that represents all the references inside the concrete value that the trait abstracts: <code>&amp;(Foo + 'b)</code>. </li>\n</ul>\n\n<p>If I'm reading the RFCs correctly, this was introduced by <a href=\"https://github.com/rust-lang/rfcs/blob/1f5d3a9512ba08390a2226aa71a5fe9e277954fb/text/0192-bounds-on-object-and-generic-types.md\" rel=\"nofollow noreferrer\">RFC 192</a>, and <a href=\"https://github.com/rust-lang/rfcs/blob/1f5d3a9512ba08390a2226aa71a5fe9e277954fb/text/0599-default-object-bound.md\" rel=\"nofollow noreferrer\">RFC 599</a> specified reasonable defaults for the lifetimes. In this case, the lifetimes <em>should</em> expand like:</p>\n\n<pre><code>fn encrypt(encryptor: &amp;mut Foo) { }\nfn encrypt&lt;'a&gt;(encryptor: &amp;'a mut (Foo + 'a)) { }\n</code></pre>\n\n<p>On the other end of the pipe, we have a <code>Box&lt;Foo&gt;</code>. Expanded by the rules of the RFC, this becomes <code>Box&lt;Foo + 'static&gt;</code>. When we take a borrow of it, and try to pass it to the function, we have an equation to solve:</p>\n\n<ul>\n<li>The lifetime inside the trait object is <code>'static</code>.</li>\n<li>The function takes a reference to a trait object.</li>\n<li>The lifetime of the reference equals the lifetime of references inside the trait object.</li>\n<li>Therefore, the reference to the trait object must be <code>'static</code>. Uh oh!</li>\n</ul>\n\n<p>The <code>Box</code> will be dropped at the end of the block so it certainly isn't static.</p>\n\n<p>The fix with explicit lifetimes allows the lifetime of the reference <em>to</em> the trait object to differ from the lifetime of the references <em>inside</em> the trait object. </p>\n\n<p>If you needed to support a trait object with internal references, an alternate is to do something like:</p>\n\n<pre><code>fn encrypt&lt;'a&gt;(encryptor: &amp;mut (Foo + 'a)) { }\n</code></pre>\n\n<hr>\n\n<p>True credit for this explanation <a href=\"https://github.com/rust-lang/rust/issues/38624#issuecomment-273332870\" rel=\"nofollow noreferrer\">goes to nikomatsakis and his comment on GitHub</a>, I just expanded it a bit.</p>\n"}], "owner": {"reputation": 39993, "user_id": 146622, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/5240a4744cdf2fffb8bd36c0649fcab4?s=128&d=identicon&r=PG", "display_name": "Daniel A.A. Pelsmaeker", "link": "https://stackoverflow.com/users/146622/daniel-a-a-pelsmaeker"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1915, "favorite_count": 3, "answer_count": 1, "score": 12, "last_activity_date": 1484697132, "creation_date": 1484591268, "last_edit_date": 1484661467, "question_id": 41682820, "link": "https://stackoverflow.com/questions/41682820/how-does-borrowing-boxtrait-contents-work", "title": "How does borrowing Box&lt;Trait&gt; contents work?", "body": "<p>I have <a href=\"https://play.rust-lang.org/?gist=0c5143e47f61c4c717a227ca6ffc5a49&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">this minimal example code</a>:</p>\n\n<pre><code>use std::borrow::BorrowMut;\n\ntrait Foo {}\nstruct Bar;\nimpl Foo for Bar {}\n\nfn main() {\n    let mut encryptor: Box&lt;Foo&gt; = Box::new(Bar);\n\n    encrypt(encryptor.borrow_mut());\n}\n\nfn encrypt(encryptor: &amp;mut Foo) { }\n</code></pre>\n\n<p>but it fails with this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: `encryptor` does not live long enough\n  --&gt; src/main.rs:11:1\n   |\n10 |     encrypt(encryptor.borrow_mut());\n   |             --------- borrow occurs here\n11 | }\n   | ^ `encryptor` dropped here while still borrowed\n   |\n   = note: values in a scope are dropped in the opposite order they are created\n</code></pre>\n\n<p>The kind people at #rustbeginners found that I have to dereference the box to get the contents, and then borrow the contents. <a href=\"https://play.rust-lang.org/?gist=7ca3e1df15274b780a3cea80cb186a26&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">Like this</a>:</p>\n\n<pre><code>trait Foo {}\nstruct Bar;\nimpl Foo for Bar {}\n\nfn main() {\n    let mut encryptor: Box&lt;Foo&gt; = Box::new(Bar);\n\n    encrypt(&amp;mut *encryptor);\n}\n\nfn encrypt(encryptor: &amp;mut Foo) { }\n</code></pre>\n\n<hr>\n\n<p>It works, but I don't understand it.</p>\n\n<p>Why do I need to dereference first? What is the error trying to say? Normally it isn't an error that a value is dropped at the end of the function.</p>\n\n<hr>\n\n<p>Apparently it's not just me who doesn't understand how this works; an <a href=\"https://github.com/rust-lang/rust/issues/38624\" rel=\"noreferrer\">issue has been filed</a>.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "is_accepted": true, "score": 8, "last_activity_date": 1484590715, "creation_date": 1484590715, "answer_id": 41682678, "question_id": 41682465, "link": "https://stackoverflow.com/questions/41682465/how-to-convert-a-optionresultt-error-to-an-optiont-without-unwrapping-it/41682678#41682678", "title": "How to convert a Option&lt;Result&lt;T, Error&gt;&gt; to an Option&lt;T&gt; without unwrapping it?", "body": "<p>You can use the <code>ok()</code> and <code>unwrap_or()</code> functions: </p>\n\n<pre><code>fn test() -&gt; Option&lt;Result&lt;u32, ()&gt;&gt; {\n    Some(Ok(1))\n}\n\nfn main() {\n    let x: Option&lt;Result&lt;_, _&gt;&gt; = test();\n    println!(\"{:?}\", x.map(|r| r.ok()).unwrap_or(None));\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 7, "last_activity_date": 1484591340, "last_edit_date": 1484591340, "creation_date": 1484590766, "answer_id": 41682685, "question_id": 41682465, "link": "https://stackoverflow.com/questions/41682465/how-to-convert-a-optionresultt-error-to-an-optiont-without-unwrapping-it/41682685#41682685", "title": "How to convert a Option&lt;Result&lt;T, Error&gt;&gt; to an Option&lt;T&gt; without unwrapping it?", "body": "<p>Instead of creating an <code>Option&lt;Result&lt;T, E&gt;&gt;</code> in the first place, you can combine:</p>\n\n<ol>\n<li><p><a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#method.and_then\" rel=\"noreferrer\"><code>Option::and_then</code></a>, which applies a closure that returns an <code>Option</code> and flattens the result.</p></li>\n<li><p><a href=\"https://doc.rust-lang.org/std/result/enum.Result.html#method.ok\" rel=\"noreferrer\"><code>Result::ok</code></a>, which converts a <code>Result</code> to an <code>Option</code>, discarding the error.</p></li>\n</ol>\n\n\n\n<pre><code>fn main() {\n    let some_option = Some(\"too\".to_owned()); \n    let new_option = some_option.and_then(|x| x.parse::&lt;u8&gt;().ok()); \n}\n</code></pre>\n\n<p>You can use the same two tools to answer your direct question:</p>\n\n<pre><code>fn convert&lt;T, E&gt;(a: Option&lt;Result&lt;T, E&gt;&gt;) -&gt; Option&lt;T&gt; {\n    a.and_then(Result::ok)\n}\n</code></pre>\n"}], "owner": {"reputation": 157, "user_id": 6879615, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/d9e8e439eff6de054928592076c4d3dd?s=128&d=identicon&r=PG&f=1", "display_name": "asteriskTheServer", "link": "https://stackoverflow.com/users/6879615/asterisktheserver"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1713, "favorite_count": 1, "accepted_answer_id": 41682678, "answer_count": 2, "score": 4, "last_activity_date": 1484591340, "creation_date": 1484589868, "last_edit_date": 1484590650, "question_id": 41682465, "link": "https://stackoverflow.com/questions/41682465/how-to-convert-a-optionresultt-error-to-an-optiont-without-unwrapping-it", "title": "How to convert a Option&lt;Result&lt;T, Error&gt;&gt; to an Option&lt;T&gt; without unwrapping it?", "body": "<p>I am trying to find a good way to convert an <code>Option&lt;String&gt;</code> to an <code>Option&lt;i8&gt;</code>. </p>\n\n<p>For example,</p>\n\n<pre><code>use std::str::FromStr;\n\nfn main() {\n    let some_option: Option&lt;String&gt; = Some(\"too\".to_owned()); \n    let new_option: Option&lt;i8&gt; = some_option.map(|x| i8::from_str(x.as_str())); \n}\n</code></pre>\n\n<p>I thought I could use the turbo fish to explicitly cast the type so something like this: </p>\n\n<pre><code>use std::str::FromStr;\n\nfn main() {\n    let some_option: Option&lt;String&gt; = Some(\"too\".to_owned()); \n    let new_option: Option&lt;i8&gt; = some_option.map::&lt;Option&lt;i8&gt;&gt;(|x| i8::from_str(x.as_str())); \n}\n</code></pre>\n\n<p>However, the compiler points out this isn't the correct amount of parameters, so I thought this might work, but it doesn't: </p>\n\n<pre><code>use std::str::FromStr;\n\nfn main() {\n    let some_option: Option&lt;String&gt; = Some(\"too\".to_owned()); \n    let new_option: Option&lt;i8&gt; = some_option.map::&lt;Option&lt;i8&gt;,i8::from_str&gt;(); \n}\n</code></pre>\n"}, {"tags": ["loops", "date", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1484579158, "post_id": 41679239, "comment_id": 70555831, "body": "If you have code that is <b>working</b> but you want it to be improved, that&#39;s a better question for <a href=\"http://meta.codereview.stackexchange.com/questions/5777/a-guide-to-code-review-for-stack-overflow-users\">Code Review.SE</a>."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1484579303, "post_id": 41679239, "comment_id": 70555928, "body": "You seem to have missed the outer year loop."}, {"owner": {"user_type": "does_not_exist", "display_name": "user7425946"}, "edited": false, "score": 0, "creation_date": 1484588835, "post_id": 41679239, "comment_id": 70561453, "body": "This is a snippet. The year was declared earlier in the main function. But you are right, a year loop could be added as an outer loop if the date range included several years."}], "answers": [{"tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 0, "last_activity_date": 1484580033, "creation_date": 1484580033, "answer_id": 41679585, "question_id": 41679239, "link": "https://stackoverflow.com/questions/41679239/loop-over-date-range/41679585#41679585", "title": "Loop over date range", "body": "<p>There might be a crate that already provides such a functionality, but if you would like to implement this on your own, you could introduce a new data type and implement <code>Iterator</code> - that would be the Rust-y way to do it.</p>\n\n<pre><code>struct MyDate {\n    year: usize, // or allow negatives for B.C.\n    month: u8, // or a dedicated Month type limited to 12\n    day: u8  // or a dedicated Day type limited to 31\n}\n\nimpl Iterator for Date {\n    type Item = Date;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Date&gt; {\n        // conditions for incrementing day, month and year\n    }\n}\n</code></pre>\n\n<p>Then you would be able to increment it in a loop using <code>next()</code>.</p>\n"}, {"comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user7425946"}, "edited": false, "score": 1, "creation_date": 1484592905, "post_id": 41680893, "comment_id": 70563474, "body": "mstlr  This works very well. I did not know how to  add a day to a datetime. I still don&#39;t see what the &quot;.expect&quot; does but it won&#39;t run without it."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1484621507, "post_id": 41680893, "comment_id": 70573449, "body": "@joeschmoe2 <code>expect</code> has exactly the same behaviour as <code>unwrap</code>, except that it also lets you specify a custom message if it panics. It&#39;s necessary because <code>checked_add</code> returns an <code>Option&lt;UTC&gt;</code> but the value is assigned to <code>dt</code> which is a plain <code>UTC</code>."}], "tags": [], "owner": {"reputation": 1056, "user_id": 3497181, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0e384ad3cea4b2ccaf03271303a94f1f?s=128&d=identicon&r=PG&f=1", "display_name": "rnstlr", "link": "https://stackoverflow.com/users/3497181/rnstlr"}, "is_accepted": false, "score": 12, "last_activity_date": 1539176150, "last_edit_date": 1539176150, "creation_date": 1484584331, "answer_id": 41680893, "question_id": 41679239, "link": "https://stackoverflow.com/questions/41679239/loop-over-date-range/41680893#41680893", "title": "Loop over date range", "body": "<p>You could use the <a href=\"https://crates.io/crates/chrono\" rel=\"noreferrer\"><code>chrono</code></a> crate for that:</p>\n\n<pre><code>extern crate chrono; // 0.4.6\n\nuse chrono::{Duration, TimeZone, Utc};\n\nfn main() {\n    let dt0 = Utc.ymd(2017, 1, 1);\n    let dt1 = Utc.ymd(2017, 1, 5);\n\n    let mut dt = dt0;\n    while dt &lt;= dt1 {\n        println!(\"{:?}\", dt);\n        dt = dt + Duration::days(1);\n    }\n}\n</code></pre>\n\n<p>This can also be wrapped into an iterator:</p>\n\n<pre><code>extern crate chrono; // 0.4.6\n\nuse chrono::{Date, Duration, TimeZone, Utc};\nuse std::mem;\n\nstruct DateRange(Date&lt;Utc&gt;, Date&lt;Utc&gt;);\n\nimpl Iterator for DateRange {\n    type Item = Date&lt;Utc&gt;;\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        if self.0 &lt;= self.1 {\n            let next = self.0 + Duration::days(1);\n            Some(mem::replace(&amp;mut self.0, next))\n        } else {\n            None\n        }\n    }\n}\n\nfn main() {\n    let dt0 = Utc.ymd(2017, 1, 1);\n    let dt1 = Utc.ymd(2017, 1, 5);\n\n    for dt in DateRange(dt0, dt1) {\n        println!(\"{:?}\", dt);\n    }\n}\n</code></pre>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user7425946"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1092, "favorite_count": 0, "answer_count": 2, "score": 5, "last_activity_date": 1539176150, "creation_date": 1484578779, "last_edit_date": 1484579118, "question_id": 41679239, "link": "https://stackoverflow.com/questions/41679239/loop-over-date-range", "title": "Loop over date range", "body": "<p>In Python3, I can loop over a range of dates like this</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>import datetime\n\ndt0 = datetime.datetime(2017, 1, 1, 0, 0, 0)\ndt1 = datetime.datetime(2017, 1, 5, 0, 0, 0)\ndt = dt0\nwhile dt &lt;= dt1:\n    print(dt.strftime(\"%Y-%m-%d %H:%M:%S\"))\n    dt += datetime.timedelta(days=1)\n</code></pre>\n\n<p>Is there a similar way to loop over dates in Rust?\nI know that I could write a nested loop over the months then the days of the month. Like this:</p>\n\n<pre><code>let days = [1, 2, 3, 4, 5, 6, 7,\n            8, 9, 10, 11, 12, 13, 14, \n            15, 16, 17, 18, 19, 20, 21,\n            22, 23, 24, 25, 26, 27, 28, 29, 30, 31];\nlet months = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nlet months_30_days = [4, 6, 9, 11];\n\nfor month in months.iter() {\n    for day in days.iter() {\n        if month == &amp;2 {\n            if is_leap_year(year) {\n                if day &gt; &amp;29 {\n                    continue;\n                }\n            } else if day &gt; &amp;28 {\n                continue;\n            }\n        } else if months_30_days.contains(&amp;month) &amp;&amp; day &gt; &amp;30 {\n            continue;\n        }\n\n        print!(\"{:04}-{:02}-{:02} \", year, month, day);\n    }\n}\n\nfn is_leap_year(year: i32) -&gt; bool {\n    if year % 100 == 0 {\n        return year % 400 == 0;\n    } else {\n        return year % 4 == 0;\n    }\n}\n</code></pre>\n\n<p>Is there a more Rustic way to do it?</p>\n"}, {"tags": ["rust", "nickel"], "comments": [{"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1484570411, "post_id": 41670585, "comment_id": 70550331, "body": "Could you include a complete example which can be compiled to reproduce this error?  The error does explain the problem, though - it&#39;s expecting a function/closure which takes an <code>&amp;&#39;r mut Response</code> but you&#39;re giving it a closure which doesn&#39;t take any arguments.  Does <code>|_| x+=2</code> work?"}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1484575851, "post_id": 41670585, "comment_id": 70553698, "body": "The &quot;expected tuple&quot; may be a bit confusing.  I&#39;m not sure why it says that, as the expected type is a <code>Response</code> which isn&#39;t a tuple. Full code example would definitely help, as the errors look a bit odd too."}], "answers": [{"tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": false, "score": 2, "last_activity_date": 1484575579, "last_edit_date": 1484575579, "creation_date": 1484574869, "answer_id": 41677981, "question_id": 41670585, "link": "https://stackoverflow.com/questions/41670585/how-to-use-on-send-method-of-nickel-response/41677981#41677981", "title": "How to use &#39;on_send&#39; method of Nickel response?", "body": "<p>I'm not familiar with Nickel, but the error is telling you that your closure implements the trait</p>\n\n<pre><code>std::ops::FnOnce&lt;()&gt;\n</code></pre>\n\n<p>but the argument to <code>on_send</code> needs to be</p>\n\n<pre><code>for&lt;'r&gt; std::ops::FnOnce&lt;(&amp;'r mut nickel::Response&lt;'_, D&gt;,)&gt;\n</code></pre>\n\n<p>Without a complete code example, it's hard to give you a working answer. But the right answer will be something similar to this:</p>\n\n<pre><code>let update = |_| x += 2;\n</code></pre>\n\n<p>You aren't using the tuple argument, so you can mark it unused with <code>_</code>. But you must specify it or else the types do not match up.</p>\n"}], "owner": {"reputation": 493, "user_id": 6502802, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/c8105f9fd1eac6dc7a532a0a65a7fb62?s=128&d=identicon&r=PG&f=1", "display_name": "plailopo", "link": "https://stackoverflow.com/users/6502802/plailopo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 65, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1484575579, "creation_date": 1484547991, "last_edit_date": 1484570092, "question_id": 41670585, "link": "https://stackoverflow.com/questions/41670585/how-to-use-on-send-method-of-nickel-response", "title": "How to use &#39;on_send&#39; method of Nickel response?", "body": "<p>On a nickel web service I would like to execute a function when a response send finishes.\nI've found the 'on_send' method on <a href=\"http://docs.nickel.rs/nickel/struct.Response.html#method.on_send\" rel=\"nofollow noreferrer\">this doc</a>, but I can't get it to build.</p>\n\n<p>I get this error:</p>\n\n<blockquote>\n  <p>type mismatch: the type <code>[closure@src/models/plugins/session.rs:78:22: 78:31 x:_]</code> implements the trait <code>std::ops::FnMut&lt;()&gt;</code>, but the trait <code>for&lt;'r&gt; std::ops::FnMut&lt;(&amp;'r mut nickel::Response&lt;'_, D&gt;,)&gt;</code> is required (expected tuple, found ())</p>\n</blockquote>\n\n<p>and this one</p>\n\n<blockquote>\n  <p>type mismatch: the type <code>[closure@src/models/plugins/session.rs:78:22: 78:31 x:_]</code> implements the trait <code>std::ops::FnOnce&lt;()&gt;</code>, but the trait <code>for&lt;'r&gt; std::ops::FnOnce&lt;(&amp;'r mut nickel::Response&lt;'_, D&gt;,)&gt;</code> is required (expected tuple, found ())</p>\n</blockquote>\n\n<p>My code sample is</p>\n\n<pre><code>let mut x: usize = 1;\nlet update = || x += 2 ;\nres.on_send(update);\n</code></pre>\n\n<p>Where <code>res</code> is <code>&amp;mut Response&lt;'mw, D&gt;</code></p>\n"}, {"tags": ["rust", "traits", "generic-programming"], "comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 2, "creation_date": 1484545040, "post_id": 41669634, "comment_id": 70537894, "body": "<a href=\"https://play.rust-lang.org/?gist=71f451a4a04d61ad613806fd76a2cc96&amp;version=nightly&amp;backtrace=0\" rel=\"nofollow noreferrer\">I typed this up on my tablet on the train on my way home from work</a>. Without a proper setup to Google further thats all I could come up with.. but unfortunately it requires not only the nightly compiler but a deprecated trait since 1.11. Not a great example for you perhaps but shows <i>one way</i> I guess."}, {"owner": {"reputation": 4240, "user_id": 1541330, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9d7b0057ffc24e644c4a30ba599d7753?s=128&d=identicon&r=PG&f=1", "display_name": "U007D", "link": "https://stackoverflow.com/users/1541330/u007d"}, "reply_to_user": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1484545857, "post_id": 41669634, "comment_id": 70538140, "body": "Thank you @SimonWhitehead.  You&#39;re right about not wanting to use deprecated features, but it is still educational to see how you put this together.  For the moment Self::one() does indeed work.  Ultimately I want to add a more flexible method <code>post_inc_by(n: usize)</code> to increment by <code>n</code> rather than just 1, though, so if you have any ideas on that I would be grateful. (I&#39;ve added this to the question.) I&#39;ll work through the implementation you&#39;ve provided, though and see if I can use non-deprecated equivalents.  Thank you!"}], "answers": [{"comments": [{"owner": {"reputation": 4240, "user_id": 1541330, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9d7b0057ffc24e644c4a30ba599d7753?s=128&d=identicon&r=PG&f=1", "display_name": "U007D", "link": "https://stackoverflow.com/users/1541330/u007d"}, "edited": false, "score": 0, "creation_date": 1484580275, "post_id": 41671541, "comment_id": 70556536, "body": "@JohannesMueller: +1 I appreciate the clear step-by-step breakdown, especially why the Copy trait is needed."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 4240, "user_id": 1541330, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9d7b0057ffc24e644c4a30ba599d7753?s=128&d=identicon&r=PG&f=1", "display_name": "U007D", "link": "https://stackoverflow.com/users/1541330/u007d"}, "edited": false, "score": 0, "creation_date": 1484581661, "post_id": 41671541, "comment_id": 70557399, "body": "@bRadGibson FWIW, I think this answer has the best <i>explanation</i> of why you have to implement the trait multiple times, but <a href=\"http://stackoverflow.com/a/41671697/155423\">this answer</a> has the nicer implementation."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 1, "creation_date": 1484583917, "post_id": 41671541, "comment_id": 70558765, "body": "Excellent answer, shows that there&#39;s nothing really magical in the <code>num</code> crate (for this simple purpose). Also, consider using <code>Clone</code> in preference to <code>Copy</code>. It only requires the explicit call to <code>clone</code>, e.g. <code>let tmp = self.clone()</code>, and instantly buys the support for arbitrary-width types, such as <a href=\"http://rust-num.github.io/num/num_bigint/struct.BigInt.html\" rel=\"nofollow noreferrer\"><code>BigInt</code></a>. The primitive types will still work because <code>Copy</code> automatically implies <code>Clone</code>."}, {"owner": {"reputation": 4240, "user_id": 1541330, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9d7b0057ffc24e644c4a30ba599d7753?s=128&d=identicon&r=PG&f=1", "display_name": "U007D", "link": "https://stackoverflow.com/users/1541330/u007d"}, "edited": false, "score": 0, "creation_date": 1484672687, "post_id": 41671541, "comment_id": 70601725, "body": "Nice.  Note that bigint and biguint also don&#39;t implement AddAssign or SubAssign, so there would be a bit more work to get them into the family.  Still, I like the idea and will explore it further.  Thank you!"}], "tags": [], "owner": {"reputation": 187, "user_id": 4591620, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/VlLWi.jpg?s=128&g=1", "display_name": "Johannes Mueller", "link": "https://stackoverflow.com/users/4591620/johannes-mueller"}, "is_accepted": false, "score": 3, "last_activity_date": 1484581445, "last_edit_date": 1484581445, "creation_date": 1484552380, "answer_id": 41671541, "question_id": 41669634, "link": "https://stackoverflow.com/questions/41669634/implementing-a-generic-incrementable-trait-in-rust/41671541#41671541", "title": "Implementing a generic incrementable trait in Rust", "body": "<p>The types that we can increment need to</p>\n\n<ol>\n<li>know the operator and <code>+=</code> (<code>AddAssign</code>)</li>\n<li>define a value for the \"one\"-element</li>\n<li>be copyable as we want to keep the old un-incremented value.</li>\n</ol>\n\n<p>Point 1. and 3. we can assure by using a trait bound, for point 2. we can set up a trait that has the function <code>one() -&gt; self</code>.</p>\n\n<p>So here is a working example:</p>\n\n<pre><code>// We need to know the operator \"+=\"\nuse std::ops::AddAssign;\n\n// The trait needs a type parameter\ntrait Incrementable&lt;T&gt; {\n    fn post_inc(&amp;mut self) -&gt; Self;\n    fn post_inc_by(&amp;mut self, n: T) -&gt; Self;\n}\n\n// We need a trait which tells us the \"one\" value for a type\ntrait Increment {\n    fn one() -&gt; Self;\n}\n\n// We need to implement the Increment trait for every type\n// we want to increment.\nimpl Increment for usize {\n    fn one() -&gt; usize {\n        1\n    }\n}\n\n// Finally we implement the Increment trait generically for all types that\n// * know the operator \"+=\" AddAssign\n// * are copyable\n// * implement our Increment trait, so that we know their \"one\" value\nimpl&lt;T: AddAssign + Increment + Copy&gt; Incrementable&lt;T&gt; for T {\n    fn post_inc(&amp;mut self) -&gt; Self {\n        let tmp = *self;\n        *self += T::one();\n        tmp\n    }\n\n    //\"Overload\" for full generalizability\n    fn post_inc_by(&amp;mut self, n: T) -&gt; Self {\n        let tmp = *self;\n        *self += n;\n        tmp\n    }\n}\n\nfn main() {\n    let mut result = 0;\n    assert!(result.post_inc() == 0);\n    assert!(result == 1);\n\n    assert!(result.post_inc_by(3) == 1);\n    assert!(result == 4);\n}\n</code></pre>\n\n<p>You don't have to write an implementation of <code>Incrementable</code> for each type, but you do have to implement the trait that supplies the <code>one()</code> function. You can't get away without that, because for non numerical types it is not obvious what \"increment by one\" means.</p>\n\n<p>I kept everything in a generic implementation that can be implemented generically. The exception is the <code>T::one()</code>, so no boiler-plate code needed except this one trivial function for each type. </p>\n"}, {"comments": [{"owner": {"reputation": 4240, "user_id": 1541330, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9d7b0057ffc24e644c4a30ba599d7753?s=128&d=identicon&r=PG&f=1", "display_name": "U007D", "link": "https://stackoverflow.com/users/1541330/u007d"}, "edited": false, "score": 2, "creation_date": 1484580935, "post_id": 41671656, "comment_id": 70556955, "body": "+1 for the reference to std implementation.  That is a good idea to look there to see how similar problems have been solved."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 4240, "user_id": 1541330, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9d7b0057ffc24e644c4a30ba599d7753?s=128&d=identicon&r=PG&f=1", "display_name": "U007D", "link": "https://stackoverflow.com/users/1541330/u007d"}, "edited": false, "score": 2, "creation_date": 1484581031, "post_id": 41671656, "comment_id": 70557024, "body": "@bRadGibson I&#39;m not even good with macros, but plenty of things are implemented with them in the <code>std</code> - and if it does it like that, it usually means it&#39;s a good idea :)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1484581092, "post_id": 41671656, "comment_id": 70557066, "body": "Either it&#39;s a good idea, or it&#39;s just the best way we have currently ;-)"}, {"owner": {"reputation": 4240, "user_id": 1541330, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9d7b0057ffc24e644c4a30ba599d7753?s=128&d=identicon&r=PG&f=1", "display_name": "U007D", "link": "https://stackoverflow.com/users/1541330/u007d"}, "edited": false, "score": 1, "creation_date": 1484581961, "post_id": 41671656, "comment_id": 70557604, "body": "Wow--very nice, @ljedrz.  The solution you came up with using the <code>num</code> crate is what I was looking for."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 3, "last_activity_date": 1484581810, "last_edit_date": 1484581810, "creation_date": 1484552911, "answer_id": 41671656, "question_id": 41669634, "link": "https://stackoverflow.com/questions/41669634/implementing-a-generic-incrementable-trait-in-rust/41671656#41671656", "title": "Implementing a generic incrementable trait in Rust", "body": "<p>You could do this with macros, following <a href=\"https://doc.rust-lang.org/stable/src/core/up/src/libcore/ops.rs.html#255-268\" rel=\"nofollow noreferrer\">what the std did</a>:</p>\n\n<pre><code>trait Incrementable {\n    fn post_inc(&amp;mut self) -&gt; Self;\n    fn post_inc_by(&amp;mut self, n: Self) -&gt; Self;\n}\n\nmacro_rules! post_inc_impl {\n    ($($t:ty)*) =&gt; ($(\n        impl Incrementable for $t {\n            fn post_inc(&amp;mut self) -&gt; Self {\n                self.post_inc_by(1 as Self)\n            }\n\n            fn post_inc_by(&amp;mut self, n: Self) -&gt; Self {\n                let tmp = *self;\n                *self += n;\n                tmp\n            }\n        }\n    )*)\n}\n\npost_inc_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n\nfn main() {\n    let mut result = 0;\n    assert!(result.post_inc() == 0);\n    assert!(result == 1);\n\n    assert!(result.post_inc_by(3) == 1);\n    assert!(result == 4);\n}\n</code></pre>\n\n<p>It is possible without macros if you use the <a href=\"https://crates.io/crates/num\" rel=\"nofollow noreferrer\"><code>num</code> crate</a>:</p>\n\n<pre><code>extern crate num;\n\nuse num::Num;\n\ntrait Incrementable&lt;T: Num&gt; {\n    fn post_inc(&amp;mut self) -&gt; Self;\n    fn post_inc_by(&amp;mut self, n: T) -&gt; Self;\n}\n\nimpl&lt;T: Num + std::ops::AddAssign&lt;T&gt; + Copy&gt; Incrementable&lt;T&gt; for T {\n    fn post_inc(&amp;mut self) -&gt; T {\n        let tmp = *self;\n        *self += T::one();\n        tmp\n    }\n\n    fn post_inc_by(&amp;mut self, n: T) -&gt; Self {\n        let tmp = *self;\n        *self += n;\n        tmp\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1484561780, "post_id": 41671697, "comment_id": 70545356, "body": "Nice! I considered this shortly after posting my comment but ... typing code on an Android tablet that is about 4 years old is a terrible terrible experience :D"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 1, "creation_date": 1484561873, "post_id": 41671697, "comment_id": 70545413, "body": "You don&#39;t need <code>Self::one()</code>, <code>self.post_inc_by(1 as Self)</code> would work just as well."}, {"owner": {"reputation": 4240, "user_id": 1541330, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9d7b0057ffc24e644c4a30ba599d7753?s=128&d=identicon&r=PG&f=1", "display_name": "U007D", "link": "https://stackoverflow.com/users/1541330/u007d"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1484579181, "post_id": 41671697, "comment_id": 70555846, "body": "@ljedrz the complier complains when I change <code>Self::one()</code> to <code>1 as Self</code> with &quot;error: non-scalar cast: &#39;i32&#39; as &#39;Self&#39;&quot;&#39;.  Ideas?"}, {"owner": {"reputation": 4240, "user_id": 1541330, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9d7b0057ffc24e644c4a30ba599d7753?s=128&d=identicon&r=PG&f=1", "display_name": "U007D", "link": "https://stackoverflow.com/users/1541330/u007d"}, "edited": false, "score": 0, "creation_date": 1484579959, "post_id": 41671697, "comment_id": 70556337, "body": "@aSpex This is a nice solution, especially the macro for eliminating the need to write all those type-specific implementations, thank you.  Can you explain why in <code>main()</code>, I can write <code>post_inc_by(3)</code>, but in <code>post_inc()</code>, writing <code>post_inc_by(1)</code> gives <code>expected Self, found integral variable</code> compile error?"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 4240, "user_id": 1541330, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9d7b0057ffc24e644c4a30ba599d7753?s=128&d=identicon&r=PG&f=1", "display_name": "U007D", "link": "https://stackoverflow.com/users/1541330/u007d"}, "edited": false, "score": 0, "creation_date": 1484580265, "post_id": 41671697, "comment_id": 70556529, "body": "@bRadGibson this works when you implement it within a macro. I&#39;ll undelete my similar answer so you can see it: <a href=\"http://stackoverflow.com/a/41671656/1870153\">answer</a>."}, {"owner": {"reputation": 4240, "user_id": 1541330, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9d7b0057ffc24e644c4a30ba599d7753?s=128&d=identicon&r=PG&f=1", "display_name": "U007D", "link": "https://stackoverflow.com/users/1541330/u007d"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1484580831, "post_id": 41671697, "comment_id": 70556890, "body": "@ljedrz ah--I tried using it in post_inc(). Unhappy compiler.  Yes, I see aSpex used it in the macro solution above."}, {"owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "reply_to_user": {"reputation": 4240, "user_id": 1541330, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9d7b0057ffc24e644c4a30ba599d7753?s=128&d=identicon&r=PG&f=1", "display_name": "U007D", "link": "https://stackoverflow.com/users/1541330/u007d"}, "edited": false, "score": 0, "creation_date": 1484632023, "post_id": 41671697, "comment_id": 70576253, "body": "@bRadGibson There is no implicit type casting in Rust. So the compiler won&#39;t convert <code>1</code> to the <code>Self</code>. If you try <code>self.post_inc_by(1 as Self)</code> it complains <code>non-scalar cast</code>. <code>Self</code> can be any type which impl <code>Copy</code> and <code>AddAssign</code>. There is no way to bound <code>Self</code> so that <code>1 as Self</code> always been valid."}, {"owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "reply_to_user": {"reputation": 4240, "user_id": 1541330, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9d7b0057ffc24e644c4a30ba599d7753?s=128&d=identicon&r=PG&f=1", "display_name": "U007D", "link": "https://stackoverflow.com/users/1541330/u007d"}, "edited": false, "score": 1, "creation_date": 1484647946, "post_id": 41671697, "comment_id": 70584600, "body": "@bRadGibson Sorry does not work for <code>i8</code>. This is playground link if you interested: <a href=\"https://play.rust-lang.org/?gist=e39a122fe31a006afa23ecc1b63a19ae&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}], "tags": [], "owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "is_accepted": false, "score": 5, "last_activity_date": 1484647858, "last_edit_date": 1484647858, "creation_date": 1484553138, "answer_id": 41671697, "question_id": 41669634, "link": "https://stackoverflow.com/questions/41669634/implementing-a-generic-incrementable-trait-in-rust/41671697#41671697", "title": "Implementing a generic incrementable trait in Rust", "body": "<p><a href=\"https://play.rust-lang.org/?gist=71f451a4a04d61ad613806fd76a2cc96&amp;version=nightly&amp;backtrace=0\" rel=\"nofollow noreferrer\">@Simon Whitehead's example</a> can easily be adapted for stable Rust:</p>\n\n<pre><code>trait Incrementable: Copy + std::ops::AddAssign&lt;Self&gt; {\n    fn one() -&gt; Self;\n\n    fn post_inc(&amp;mut self) -&gt; Self {\n        self.post_inc_by(Self::one())\n    }\n\n    fn post_inc_by(&amp;mut self, n: Self) -&gt; Self {\n        let tmp = *self;\n        *self += n;\n        tmp\n    }\n}\n\nimpl Incrementable for u8  { fn one() -&gt; Self {1} }\nimpl Incrementable for u16 { fn one() -&gt; Self {1} }\nimpl Incrementable for u32 { fn one() -&gt; Self {1} }\nimpl Incrementable for u64 { fn one() -&gt; Self {1} }\nimpl Incrementable for i8  { fn one() -&gt; Self {1} }\nimpl Incrementable for i16 { fn one() -&gt; Self {1} }\nimpl Incrementable for i32 { fn one() -&gt; Self {1} }\nimpl Incrementable for i64 { fn one() -&gt; Self {1} }\nimpl Incrementable for f32 { fn one() -&gt; Self {1.0} }\nimpl Incrementable for f64 { fn one() -&gt; Self {1.0} }\n</code></pre>\n\n<p>While you need to do the implementation for each type, each of them is extremely simple. </p>\n\n<p>You can also use a macro to hide repetitive implementations:</p>\n\n<pre><code>macro_rules! impl_Incrementable{\n    ($($m:ty),*) =&gt; {$( impl Incrementable for $m  { fn one() -&gt; Self { 1 as $m } })*}\n}\n\nimpl_Incrementable!{u8, u16, u32, u64, i8, i16, i32, i64, f32, f64}\n</code></pre>\n"}], "owner": {"reputation": 4240, "user_id": 1541330, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9d7b0057ffc24e644c4a30ba599d7753?s=128&d=identicon&r=PG&f=1", "display_name": "U007D", "link": "https://stackoverflow.com/users/1541330/u007d"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 572, "favorite_count": 0, "accepted_answer_id": 41671656, "answer_count": 3, "score": 3, "last_activity_date": 1484647858, "creation_date": 1484542261, "last_edit_date": 1495541336, "question_id": 41669634, "link": "https://stackoverflow.com/questions/41669634/implementing-a-generic-incrementable-trait-in-rust", "title": "Implementing a generic incrementable trait in Rust", "body": "<p>I'm trying to understand how to implement a generic trait in Rust.</p>\n\n<p>While I've seen a number of examples, the examples are too tied to a specific use (e.g. <a href=\"https://stackoverflow.com/questions/35525505/how-to-restrict-generic-implementation-of-a-trait-in-rust\">genomic mutators</a>) for me to be able to understand at this point in my Rust development.</p>\n\n<p>Instead, here's a simple example based on something fairly universal--incrementing:</p>\n\n<pre><code>trait Incrementable {\n    fn post_inc(&amp;mut self) -&gt; Self;\n    fn post_inc_by(&amp;mut self, n: usize) -&gt; Self;\n}\n\nimpl Incrementable for usize {\n    fn post_inc(&amp;mut self) -&gt; Self {\n        let tmp = *self;\n        *self += 1;\n        tmp\n    }\n\n    //\"Overload\" for full generalizability\n    fn post_inc_by(&amp;mut self, n: usize) -&gt; Self {\n        let tmp = *self;\n        *self += n;\n        tmp\n    }\n}\n\nfn main() {\n    let mut result = 0;\n    assert!(result.post_inc() == 0);\n    assert!(result == 1);\n\n    assert!(result.post_inc_by(3) == 1);\n    assert!(result == 4);\n}\n</code></pre>\n\n<p>The above code works, but is lacking because it isn't generalizable to all numeric types without writing a lot of boilerplate code.</p>\n\n<p>In my attempts to generalize the above code, I've gotten into fights with the type system, borrow checker or been forced down a path of implementing <code>FromPrimitive</code> for every type I want to support in my generic version (effectively putting me back to square one).</p>\n\n<p>Can you help me understand how to implement <code>Incrementable</code> generically,\n such that <code>post_inc()</code> and <code>post_inc_by()</code> work for at least all integer and float types, ideally without having to write an implementation for each type?</p>\n\n<p>I am hoping the answer will help me see how traits, implementations, types and associated types can work together in a more straightforward use case than I've been able to come across.</p>\n\n<p>I'm on Rust 1.16.0.</p>\n"}, {"tags": ["string", "rust"], "comments": [{"owner": {"reputation": 189, "user_id": 3740598, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/bd17ea5ff88f7177567f6a52936d922d?s=128&d=identicon&r=PG&f=1", "display_name": "mrossini", "link": "https://stackoverflow.com/users/3740598/mrossini"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1484560909, "post_id": 41667282, "comment_id": 70544872, "body": "@Shepmaster Please, read the question. Your answer is wrong, I am not asking the same question in the link."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1484575373, "post_id": 41667282, "comment_id": 70553371, "body": "Concatenating strings is concatenating strings..."}, {"owner": {"reputation": 189, "user_id": 3740598, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/bd17ea5ff88f7177567f6a52936d922d?s=128&d=identicon&r=PG&f=1", "display_name": "mrossini", "link": "https://stackoverflow.com/users/3740598/mrossini"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1484594431, "post_id": 41667282, "comment_id": 70564203, "body": "@Shepmaster Yes, concatenating strings is concatenating string, however that was not the question and your answer really did not help, even the link, so if you do not want to help, just don&#39;t."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1484674334, "post_id": 41667282, "comment_id": 70602668, "body": "A question does not have to be exactly the same in order to be marked as duplicate. In this case, the linked question should definitely fulfill all string concatenation needs in Rust. If you do not agree, you should instead explain properly why the suggested question didn&#39;t help. Showing what you have tried so far to solve the problem also helps. You may wish to keep these tips in mind in the future."}, {"owner": {"reputation": 189, "user_id": 3740598, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/bd17ea5ff88f7177567f6a52936d922d?s=128&d=identicon&r=PG&f=1", "display_name": "mrossini", "link": "https://stackoverflow.com/users/3740598/mrossini"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1484727515, "post_id": 41667282, "comment_id": 70623450, "body": "@E_net4 in this case it does not solve the problem, see my answer below for Simon. Linefeed is not a string and Simon second answer was what I was trying to do with and the only thing I found in here. He was able to provide a decent and new answer that solved mu problem instead of wasting everyone time marking an answer as duplicate when it is NOT, despite what you think."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1484740944, "post_id": 41667282, "comment_id": 70632383, "body": "Sure, this is what I (and possibly many other people) would think: a line feed can be turned into a string with little memory footprint: &quot;\\n&quot;, and the duplicate does mention the use of <code>format!()</code>. Nevertheless, you were expected to back your thoughts and misunderstandings into the question. Without that, a duplicate is not only appropriate, but what actually wastes less of everyone&#39;s time."}, {"owner": {"reputation": 1115, "user_id": 8203828, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/IbLcw.png?s=128&g=1", "display_name": "Michele Federici", "link": "https://stackoverflow.com/users/8203828/michele-federici"}, "edited": false, "score": 0, "creation_date": 1542188749, "post_id": 41667282, "comment_id": 93475223, "body": "This is not a duplicate. Many concatenation methods (like <code>format!</code> macro) perform an escaping on the newline characters. This is a specific case"}], "answers": [{"comments": [{"owner": {"reputation": 189, "user_id": 3740598, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/bd17ea5ff88f7177567f6a52936d922d?s=128&d=identicon&r=PG&f=1", "display_name": "mrossini", "link": "https://stackoverflow.com/users/3740598/mrossini"}, "edited": false, "score": 1, "creation_date": 1484727382, "post_id": 41667319, "comment_id": 70623394, "body": "Thanks for that. First solved the problem Second does not work."}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "reply_to_user": {"reputation": 189, "user_id": 3740598, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/bd17ea5ff88f7177567f6a52936d922d?s=128&d=identicon&r=PG&f=1", "display_name": "mrossini", "link": "https://stackoverflow.com/users/3740598/mrossini"}, "edited": false, "score": 0, "creation_date": 1484727540, "post_id": 41667319, "comment_id": 70623460, "body": "&quot;Does not work&quot; - how so?"}, {"owner": {"reputation": 189, "user_id": 3740598, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/bd17ea5ff88f7177567f6a52936d922d?s=128&d=identicon&r=PG&f=1", "display_name": "mrossini", "link": "https://stackoverflow.com/users/3740598/mrossini"}, "edited": false, "score": 0, "creation_date": 1484848496, "post_id": 41667319, "comment_id": 70689536, "body": "For some reason I cannot understand, second suggestion prints just one line as &quot;Hello\\nworld&quot; , while first suggestion prints Hello in one line and world in the second."}, {"owner": {"reputation": 10129, "user_id": 95396, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/3fafc0390e40bf6e659c54dd968b3713?s=128&d=identicon&r=PG", "display_name": "andy boot", "link": "https://stackoverflow.com/users/95396/andy-boot"}, "edited": false, "score": 0, "creation_date": 1516805217, "post_id": 41667319, "comment_id": 83840113, "body": "this is a word for word copy of the second answer here: <a href=\"https://stackoverflow.com/questions/30154541/how-do-i-concatenate-strings\" title=\"how do i concatenate strings\">stackoverflow.com/questions/30154541/&hellip;</a>"}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1516845430, "post_id": 41667319, "comment_id": 83860491, "body": "Yeah I was asked to copy it there Andy."}], "tags": [], "owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "is_accepted": true, "score": 4, "last_activity_date": 1484521886, "last_edit_date": 1484521886, "creation_date": 1484521297, "answer_id": 41667319, "question_id": 41667282, "link": "https://stackoverflow.com/questions/41667282/in-rust-how-do-i-concatenate-one-string-with-a-linefeed-and-then-another-string/41667319#41667319", "title": "In Rust, how do I concatenate one String with a linefeed and then another String?", "body": "<p>There are a couple of ways.</p>\n\n<p>The nicest I have seen is using the <code>join</code> method on an array:</p>\n\n<pre><code>fn main() {\n    let a = \"Hello\";\n    let b = \"world\";\n    let result = [a, b].join(\"\\n\");\n\n    print!(\"{}\", result);\n}\n</code></pre>\n\n<p>Depending on your use case you might also prefer more control:</p>\n\n<pre><code>fn main() {\n    let a = \"Hello\";\n    let b = \"world\";\n    let result = format!(\"{}\\n{}\", a, b);\n\n    print!(\"{}\", result);\n}\n</code></pre>\n\n<p>There are some more manual ways (some of which I believe avoid any allocations at all) but I prefer the above two.</p>\n"}], "owner": {"reputation": 189, "user_id": 3740598, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/bd17ea5ff88f7177567f6a52936d922d?s=128&d=identicon&r=PG&f=1", "display_name": "mrossini", "link": "https://stackoverflow.com/users/3740598/mrossini"}, "delete_vote_count": 1, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 838, "favorite_count": 0, "closed_date": 1484575296, "accepted_answer_id": 41667319, "answer_count": 1, "score": -1, "last_activity_date": 1484521911, "creation_date": 1484521011, "last_edit_date": 1484521911, "question_id": 41667282, "link": "https://stackoverflow.com/questions/41667282/in-rust-how-do-i-concatenate-one-string-with-a-linefeed-and-then-another-string", "closed_reason": "Duplicate", "title": "In Rust, how do I concatenate one String with a linefeed and then another String?", "body": "<p>I have two variables, each containing a string. I want to concatenate both with a linefeed in between them. How do I do that?</p>\n"}, {"tags": ["enums", "rust", "warnings"], "answers": [{"tags": [], "owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "is_accepted": true, "score": 8, "last_activity_date": 1484516957, "creation_date": 1484516957, "answer_id": 41666704, "question_id": 41666595, "link": "https://stackoverflow.com/questions/41666595/how-to-fix-warning-unused-variable-for-enum-with-named-params-in-rust/41666704#41666704", "title": "How to fix &quot;warning: unused variable&quot; for enum with named params in Rust?", "body": "<p>You can use <code>..</code>:</p>\n\n<pre><code>match *self {\n    Tag::Container { .. } =&gt; write!(f, \"{}\", \"container\"),\n</code></pre>\n\n<p>This is covered in the book, specifically under <a href=\"https://doc.rust-lang.org/book/patterns.html#ignoring-bindings\" rel=\"noreferrer\">Ignoring bindings</a> where it is used to ignore the values wrapped in an enum variant:</p>\n\n<pre><code>enum OptionalTuple {\n    Value(i32, i32, i32),\n    Missing,\n}\n\nlet x = OptionalTuple::Value(5, -2, 3);\n\nmatch x {\n    OptionalTuple::Value(..) =&gt; println!(\"Got a tuple!\"),\n    OptionalTuple::Missing =&gt; println!(\"No such luck.\"),\n}\n</code></pre>\n"}], "owner": {"reputation": 15070, "user_id": 388427, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/a43a07bc90818154ff9c8d4af7c23502?s=128&d=identicon&r=PG", "display_name": "Sergey", "link": "https://stackoverflow.com/users/388427/sergey"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 973, "favorite_count": 1, "accepted_answer_id": 41666704, "answer_count": 1, "score": 5, "last_activity_date": 1484521824, "creation_date": 1484516215, "last_edit_date": 1484521824, "question_id": 41666595, "link": "https://stackoverflow.com/questions/41666595/how-to-fix-warning-unused-variable-for-enum-with-named-params-in-rust", "title": "How to fix &quot;warning: unused variable&quot; for enum with named params in Rust?", "body": "<p>I have an enum like:</p>\n\n<pre><code>pub enum Tag&lt;'a&gt; {\n    Container { c: Vec&lt;Tag&lt;'a&gt;&gt; },\n    // ...\n}\n</code></pre>\n\n<p>when I try to match:</p>\n\n<pre><code>impl&lt;'a&gt; Display for Tag&lt;'a&gt; {\n    fn fmt(&amp;self, f: &amp;mut Formatter) -&gt; fmt::Result {\n        match *self {\n            Tag::Container { ref c } =&gt; write!(f, \"{}\", \"container\"),\n            // ...\n        }\n    }\n}\n</code></pre>\n\n<p>I get:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>warning: unused variable: `c`, #[warn(unused_variables)] on by default\n   |\n65 |             Tag::Container{ref c} =&gt; write!(f, \"{}\", \"container\"),\n</code></pre>\n\n<p>and in some other places.  </p>\n\n<p>I tried to use <code>_</code>, just to remove <code>ref c</code> but it all causes errors.  </p>\n"}, {"tags": ["module", "rust", "public", "rust-crates"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 62, "last_activity_date": 1498940713, "last_edit_date": 1498940713, "creation_date": 1484520515, "answer_id": 41667202, "question_id": 41666235, "link": "https://stackoverflow.com/questions/41666235/how-do-i-make-an-rust-item-public-within-a-crate-but-private-outside-it/41667202#41667202", "title": "How do I make an Rust item public within a crate, but private outside it?", "body": "<p>In order for an <a href=\"https://doc.rust-lang.org/reference.html#items\" rel=\"noreferrer\">item</a> to be exported from a library crate, there must be at least one path leading to it in which <em>every</em> component is public. This means that all you need to make an item public within your crate but not exported from the crate (I'll call this \"internal\" from now on, to mimic C# terminology) is to put it in a private module under the crate root.</p>\n\n<p>However, that solution is quite restrictive. What if you'd like to have a module with exported functions <em>and</em> internal functions? In order to export some functions, we need to make the module public, and that mean all public items in that module will be exported as well.</p>\n\n<p>Since <a href=\"https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1180-2017-06-08\" rel=\"noreferrer\">Rust 1.18</a>, there's a solution adapted to this kind of scenario: <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1422-pub-restricted.md\" rel=\"noreferrer\"><code>pub(restricted)</code></a>. This feature lets you specify \"how public\" an item should be. The syntax is pretty flexible (you can make an item visible to a particular module tree instead of the whole crate), but if you want to keep it simple, <code>pub(crate)</code> will make an item accessible anywhere within the crate, but not to other crates (equivalent to <code>internal</code> in C#).</p>\n\n<p>For example, suppose we'd like to have a module <code>util</code> in which <code>foo</code> is exported (as <code>mycrate::util::foo</code>), <code>bar</code> is internal and <code>baz</code> is private to the module. The code might look like this:</p>\n\n<pre><code>pub mod util {\n    pub fn foo() {\n        unimplemented!()\n    }\n\n    pub(crate) fn bar() {\n        unimplemented!()\n    }\n\n    fn baz() {\n        unimplemented!()\n    }\n}\n</code></pre>\n\n<hr>\n\n<p>If you're stuck on pre-1.18 Rust, there's a workaround, but it's a bit clunky. It involves defining all your items in private modules, and reexporting only those that you want to make public (with <code>pub use</code>) in public modules that <em>only</em> contain reexports. Here's what the example above would look like:</p>\n\n<pre><code>pub mod util {\n    pub use util_impl::foo;\n}\n\nmod util_impl {\n    pub fn foo() {\n        unimplemented!()\n    }\n\n    pub fn bar() {\n        unimplemented!()\n    }\n\n    fn baz() {\n        unimplemented!()\n    }\n}\n</code></pre>\n\n<p>Not only is this not easy to read and understand, it doesn't cover all situations where <code>pub</code> can be used. For example, how would you make some fields of an exported struct accessible in other modules in the same crate without also exporting them? The only option would be to expose a wrapper with a single private field whose type is the struct that has public fields; that works fine if you want to hide all fields from other crates, but not if you want to expose some fields <em>and</em> make some other fields internal in the same struct.</p>\n"}], "owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 12718, "favorite_count": 9, "accepted_answer_id": 41667202, "answer_count": 1, "score": 38, "last_activity_date": 1501356931, "creation_date": 1484513780, "last_edit_date": 1495540452, "question_id": 41666235, "link": "https://stackoverflow.com/questions/41666235/how-do-i-make-an-rust-item-public-within-a-crate-but-private-outside-it", "title": "How do I make an Rust item public within a crate, but private outside it?", "body": "<p>I have a crate that has lots of code, so I've split it into multiple files/modules. However, some modules have internal unsafe stuff (e.g. raw pointers) that I need to make public to the different modules, but I don't want to expose to users of my crate. How can I do that?</p>\n\n<p>The only way I can think of is to actually have my crate just be one big module, but then there's no way to split it into different files, other than <a href=\"https://stackoverflow.com/a/35158265/265521\">this solution</a> which <em>seems</em> a bit hacky.</p>\n\n<p>Normally when I come up against a real world problem that the simple examples in the Rust docs don't adequately explain I just copy a popular real world crate, e.g. <a href=\"https://github.com/alexcrichton/git2-rs\" rel=\"noreferrer\">git2-rs</a>, but that just seems to effectively make everything public, including the raw pointers.</p>\n"}, {"tags": ["rust", "borrow-checker"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1484508734, "post_id": 41665345, "comment_id": 70529024, "body": "Putting it in a <code>RefCell</code> wouldn&#39;t work: <code>RefCell</code> simply checks at run-time instead of compile-time but the same underlying check is performed =&gt; <b>Aliasing XOR Mutability</b>. The obvious question is: can&#39;t you just borrow (immutably) the same connection? If a single required borrow is mutable, then you&#39;re out of luck."}, {"owner": {"reputation": 409, "user_id": 2970121, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/d0b21cede510b0bbf986847693a9e075?s=128&d=identicon&r=PG&f=1", "display_name": "njaard", "link": "https://stackoverflow.com/users/2970121/njaard"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1484509211, "post_id": 41665345, "comment_id": 70529173, "body": "Can&#39;t I just move insert_stmt into the lambda somehow so that <code>download_generic</code> keeps it?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1484522100, "post_id": 41665345, "comment_id": 70532924, "body": "Could you use <code>prepare_cached</code> instead of <code>prepare</code> to get a prepared statement within the closure instead? You&#39;d have to pass <code>connection</code> to the closure explicitly to avoid conflicting borrows."}, {"owner": {"reputation": 409, "user_id": 2970121, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/d0b21cede510b0bbf986847693a9e075?s=128&d=identicon&r=PG&f=1", "display_name": "njaard", "link": "https://stackoverflow.com/users/2970121/njaard"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1484588389, "post_id": 41665345, "comment_id": 70561189, "body": "@FrancisGagn&#233; well, that is actually a helpful suggestion and solves my problem in this case, but my question is more of a Rust idiom question; also, using the cache from rusqlite will cause the performance disadvantage of having to look up the query in the cache list."}, {"owner": {"reputation": 13635, "user_id": 547365, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/ddefbca930fdd39846b698bab7ac3146?s=128&d=identicon&r=PG", "display_name": "w.brian", "link": "https://stackoverflow.com/users/547365/w-brian"}, "edited": false, "score": 1, "creation_date": 1484604050, "post_id": 41665345, "comment_id": 70568520, "body": "I&#39;d suggest providing a generic (no non-std deps), minimal reproduction of the issue and use that as your example, or, link to a gist. It would make it easier for others to reproduce your issue and work out solution."}], "answers": [{"comments": [{"owner": {"reputation": 409, "user_id": 2970121, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/d0b21cede510b0bbf986847693a9e075?s=128&d=identicon&r=PG&f=1", "display_name": "njaard", "link": "https://stackoverflow.com/users/2970121/njaard"}, "edited": false, "score": 0, "creation_date": 1485092695, "post_id": 41688009, "comment_id": 70771732, "body": "<code>Connection::prepare</code> accepts a non-mutable <code>&amp;self</code>, and thus I can pass the prepared <code>Statement</code> around along with the <code>Connection</code> itself. Consequently, this problem is trivially solvable."}, {"owner": {"reputation": 32321, "user_id": 173397, "user_type": "registered", "accept_rate": 78, "profile_image": "https://i.stack.imgur.com/pqKT8.jpg?s=128&g=1", "display_name": "pm100", "link": "https://stackoverflow.com/users/173397/pm100"}, "edited": false, "score": 0, "creation_date": 1600216074, "post_id": 41688009, "comment_id": 113015728, "body": "&quot;This is to prevent dangling pointers and data races&quot; actually not. Its a perf decision, it allowed the emission of &#39;no_alias&#39; to the llvm backend. This results in better optimization. Once they chose to say &#39;no_alias&#39; then you had to make sure it was true. In a parallel universe there is a rust lang where they took the opposite decision and allowed aliasing and take the perf hit (just like all other C like languages). You can opt into that perf mode by saying &#39;restrict&#39; in c and c++"}, {"owner": {"reputation": 32321, "user_id": 173397, "user_type": "registered", "accept_rate": 78, "profile_image": "https://i.stack.imgur.com/pqKT8.jpg?s=128&g=1", "display_name": "pm100", "link": "https://stackoverflow.com/users/173397/pm100"}, "reply_to_user": {"reputation": 409, "user_id": 2970121, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/d0b21cede510b0bbf986847693a9e075?s=128&d=identicon&r=PG&f=1", "display_name": "njaard", "link": "https://stackoverflow.com/users/2970121/njaard"}, "edited": false, "score": 0, "creation_date": 1600216147, "post_id": 41688009, "comment_id": 113015738, "body": "@njaard - and what is the trivial solution. I feel this is like fermats last theorm, &quot;I have a solution but this margin is too small&quot;"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 2, "last_activity_date": 1484618911, "creation_date": 1484618911, "answer_id": 41688009, "question_id": 41665345, "link": "https://stackoverflow.com/questions/41665345/borrow-problems-with-compiled-sql-statements/41688009#41688009", "title": "Borrow problems with compiled SQL statements", "body": "<p>By design, Rust prevents you from having an immutable borrow and a mutable borrow on the same object active at the same time. This is to prevent dangling pointers and data races.</p>\n\n<p>In rusqlite's API, some methods on <code>Connection</code> require a mutable <code>self</code>, and some methods only require an immutable <code>self</code>. However, some of the methods that only require an immutable <code>self</code> return objects that keep that borrow active; <code>prepare</code> is an example of this. Therefore, as long as one of these objects stays in scope, Rust will not allow you to take a mutable borrow on the <code>Connection</code>.</p>\n\n<p>There's probably a reason why some methods take <code>self</code> by mutable reference. Requiring a mutable reference ensures the callee that it has exclusive access to that object. If you think that might not be the case for the methods you need to use, or you think there could be another way to solve this, you should report an issue to the library's maintainers.</p>\n\n<p>Regarding <code>prepare</code> specifically, you can work around the conflicting borrows by calling <code>prepare_cached</code> from within the closure instead. In order to do that, you'll have to make <code>download_generic</code> pass the <code>connection</code> back as a parameter to the closure, otherwise you'd have two mutable borrows on <code>connection</code> and that's not allowed.</p>\n"}], "owner": {"reputation": 409, "user_id": 2970121, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/d0b21cede510b0bbf986847693a9e075?s=128&d=identicon&r=PG&f=1", "display_name": "njaard", "link": "https://stackoverflow.com/users/2970121/njaard"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 179, "favorite_count": 0, "accepted_answer_id": 41688009, "answer_count": 1, "score": 5, "last_activity_date": 1484618911, "creation_date": 1484508332, "last_edit_date": 1484522229, "question_id": 41665345, "link": "https://stackoverflow.com/questions/41665345/borrow-problems-with-compiled-sql-statements", "title": "Borrow problems with compiled SQL statements", "body": "<p>My program uses rusqlite to build a database from another data source. The database builds multiple tables in the same manner, so I thought I'd make a reusable function to do so:</p>\n\n<pre><code>fn download_generic&lt;Inserter&gt;(table_name: &amp;str,\n                              connection: &amp;mut rusqlite::Connection,\n                              inserter: &amp;mut Inserter)\n                              -&gt; Result&lt;(), String&gt;\n    where Inserter: FnMut(&amp;str, &amp;json::JsonValue) -&gt; ()\n{}\n</code></pre>\n\n<p><code>inserter</code> is a function that binds the correct values from a previously-prepared statement and does the insertion.</p>\n\n<p>I call it like this:</p>\n\n<pre><code>let mut insert_stmt = connection\n    .prepare(\"insert or replace into categories values(?,?);\")\n    .unwrap();\n\ndownload_generic(\"categories\",\n                 &amp;mut connection,\n                 &amp;mut |uuid, jsonproperties| {\n                     insert_stmt.execute(&amp;[&amp;uuid, &amp;jsonproperties[\"name\"].as_str().unwrap_or(\"\")]);\n                 });\n</code></pre>\n\n<p>However I can't pass <code>&amp;mut connection</code> to <code>download_generic</code> because it's already being borrowed by the <code>insert_stmt</code>. Putting it into a <code>RefCell</code> makes no sense because I shouldn't need runtime overhead to make this work.</p>\n\n<p>I could try making the <code>insert_stmt</code> generated by a lambda that you pass to <code>download_generic</code>, but then I get overwhelmed by having to add lifetime markers everywhere, and it seems unnatural, anyway.</p>\n"}, {"tags": ["generics", "rust", "traits", "type-bounds"], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1484563872, "post_id": 41668402, "comment_id": 70546614, "body": "I wasn&#39;t aware of <code>Unsize</code>, it certainly opens up new doors!"}, {"owner": {"reputation": 271, "user_id": 7421125, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/bhF8l.jpg?s=128&g=1", "display_name": "Gdow", "link": "https://stackoverflow.com/users/7421125/gdow"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1484564913, "post_id": 41668402, "comment_id": 70547188, "body": "Yes, it was deeply hidden in the documentation :) This RFC provides some informations about it : <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0401-coercions.md\" rel=\"nofollow noreferrer\">github.com/rust-lang/rfcs/blob/master/text/0401-coercions.md</a>&zwnj;&#8203;. Thanks a lot for your help :)"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1484846728, "post_id": 41668402, "comment_id": 70688512, "body": "Thanks again for digging up <code>Unsize</code>, enjoy SO ad-free ;)"}, {"owner": {"reputation": 271, "user_id": 7421125, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/bhF8l.jpg?s=128&g=1", "display_name": "Gdow", "link": "https://stackoverflow.com/users/7421125/gdow"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1484857632, "post_id": 41668402, "comment_id": 70694599, "body": "Thanks, that&#39;s very nice :)"}], "tags": [], "owner": {"reputation": 271, "user_id": 7421125, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/bhF8l.jpg?s=128&g=1", "display_name": "Gdow", "link": "https://stackoverflow.com/users/7421125/gdow"}, "is_accepted": true, "score": 4, "last_activity_date": 1484762844, "last_edit_date": 1592644375, "creation_date": 1484531528, "answer_id": 41668402, "question_id": 41664723, "link": "https://stackoverflow.com/questions/41664723/how-to-add-constraint-that-one-generic-type-implements-another-generic-type-in-r/41668402#41668402", "title": "How to add constraint that one generic type implements another generic type in Rust?", "body": "<p>I managed to find an answer: the <a href=\"https://doc.rust-lang.org/std/marker/trait.Unsize.html\" rel=\"nofollow noreferrer\"><code>std::marker::Unsize&lt;T&gt;</code> trait</a>, although not a stable feature in the current version of Rust (1.14.0).</p>\n<blockquote>\n<pre><code>pub trait Unsize&lt;T&gt; where T: ?Sized { }\n</code></pre>\n<p>Types that can be &quot;unsized&quot; to a dynamically-sized type.</p>\n</blockquote>\n<p>This is broader than the &quot;implements&quot; semantic, but it is what I should have been searching for from the beginning, as the generic parameters in the example code can be other things than a struct and a trait or two traits (say sized and unsized arrays).</p>\n<p>The generic example in the question can be written:</p>\n<pre><code>struct FooStruct&lt;A, B&gt;\n    where A: Unsize&lt;B&gt;,\n          B: ?Sized,\n{\n    // ...\n}\n</code></pre>\n<p>And my code :</p>\n<pre><code>impl&lt;S, T&gt; Factory&lt;S&gt; for SingletonFactory&lt;T&gt;\n    where S: ?Sized,\n          T: Unsize&lt;S&gt; + Singleton&lt;T&gt;,\n{\n    // ...\n}\n</code></pre>\n"}], "owner": {"reputation": 271, "user_id": 7421125, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/bhF8l.jpg?s=128&g=1", "display_name": "Gdow", "link": "https://stackoverflow.com/users/7421125/gdow"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 282, "favorite_count": 1, "accepted_answer_id": 41668402, "answer_count": 1, "score": 3, "last_activity_date": 1484762844, "creation_date": 1484504987, "last_edit_date": 1484562164, "question_id": 41664723, "link": "https://stackoverflow.com/questions/41664723/how-to-add-constraint-that-one-generic-type-implements-another-generic-type-in-r", "title": "How to add constraint that one generic type implements another generic type in Rust?", "body": "<p>How can I make something like this work:</p>\n\n<pre><code>struct FooStruct&lt;A, B&gt; where A : B, B : ?Sized {...}\n</code></pre>\n\n<p>I searched for some type marker to tell the compiler that <code>S</code> must be a trait, searched the Rust documentation for some example of this pattern, and couldn't find other people having the same problem. Here is my code:</p>\n\n<pre><code>trait Factory&lt;S&gt; where S : ?Sized {\n    fn create(&amp;mut self) -&gt; Rc&lt;S&gt;;\n}\n\ntrait Singleton&lt;T&gt; {\n    fn create() -&gt; T;\n}\n\nstruct SingletonFactory&lt;T&gt; {\n    instance: Option&lt;Rc&lt;T&gt;&gt;\n}\n\nimpl&lt;S, T&gt; Factory&lt;S&gt; for SingletonFactory&lt;T&gt; where S : ?Sized, T : S + Singleton&lt;T&gt; {\n    fn create(&amp;mut self) -&gt; Rc&lt;S&gt; {\n        if let Some(ref instance_rc) = self.instance {\n            return instance_rc.clone();\n        }\n        let new_instance = Rc::new(T::create());\n        self.instance = Some(new_instance.clone());\n        new_instance\n    }\n}\n</code></pre>\n\n<p>The compiler fails with the following error :</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>      --&gt; src/lib.rs:15:57\n   |\n15 | impl&lt;S, T&gt; Factory&lt;S&gt; for SingletonFactory&lt;T&gt; where T : S + Singleton&lt;T&gt; {\n   |                                                         ^ not a trait\n</code></pre>\n"}, {"tags": ["rust", "closures"], "comments": [{"owner": {"reputation": 432, "user_id": 535416, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c6a5a09a4808d12dbbe050b454696496?s=128&d=identicon&r=PG", "display_name": "Simon Jackson", "link": "https://stackoverflow.com/users/535416/simon-jackson"}, "edited": false, "score": 0, "creation_date": 1484502711, "post_id": 41664325, "comment_id": 70526840, "body": "I&#39;m sorry if this is a duplicate, I&#39;ve read a bunch of similar questions on SO but none have helped me fix it."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1484504152, "post_id": 41664325, "comment_id": 70527381, "body": "You would need to include more code for us to be able to test it. In the meantime, have you seen <a href=\"http://stackoverflow.com/questions/36414576/returning-a-closure-from-a-trait-method-involving-generics-in-rust\">this question</a>? You probably need to wrap the closure in a <code>Box</code>."}, {"owner": {"reputation": 432, "user_id": 535416, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c6a5a09a4808d12dbbe050b454696496?s=128&d=identicon&r=PG", "display_name": "Simon Jackson", "link": "https://stackoverflow.com/users/535416/simon-jackson"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1484508653, "post_id": 41664325, "comment_id": 70529008, "body": "I wasn&#39;t sure it was the same issue since they were trying to return a closure. I was hoping to avoid Boxing it, I was under the impressesion this would make it dynamically dispatched?"}], "answers": [{"comments": [{"owner": {"reputation": 432, "user_id": 535416, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c6a5a09a4808d12dbbe050b454696496?s=128&d=identicon&r=PG", "display_name": "Simon Jackson", "link": "https://stackoverflow.com/users/535416/simon-jackson"}, "edited": false, "score": 1, "creation_date": 1484690606, "post_id": 41667347, "comment_id": 70611187, "body": "Just to clarify, its possible to assign a different AddChildCallback but not a different concrete implementation of Fn(&amp;PropertyTags)?"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 4, "last_activity_date": 1484780628, "last_edit_date": 1484780628, "creation_date": 1484521463, "answer_id": 41667347, "question_id": 41664325, "link": "https://stackoverflow.com/questions/41664325/passing-closure-to-trait-method-expected-type-parameter-found-closure/41667347#41667347", "title": "Passing closure to trait method: expected type parameter, found closure", "body": "<p>The problem is that <code>add_child</code> claims to accept any <code>Renderable&lt;C&gt;</code>, where <code>C</code> can be <em>any</em> type that implements <code>Fn(&amp;PropertyTags)</code>, but then the function tries to give it a specific closure type that might not be the same as <code>C</code>.</p>\n\n<p>In order for this to work, <code>add_child</code>'s signature should look like this:</p>\n\n<pre><code>pub fn add_child&lt;REND&gt;(&amp;mut self, child: &amp;mut REND)\n    where REND: Renderable&lt;AddChildCallback&gt;\n</code></pre>\n\n<p>where <code>AddChildCallback</code> is the name of a concrete type (that implements <code>Fn(&amp;PropertyTags)</code>).</p>\n\n<p>The difficulty here is that on one hand, closure types don't have a name you can use in your Rust code, and on the other hand, implementing <code>Fn</code> manually is unstable, so it requires a nightly compiler.</p>\n\n<p>I'll also note that by making the callback type a type parameter, a <code>Renderable</code> cannot be assigned a callback of a different type after a first callback has been set, as the first callback will determine the concrete type for the <code>Renderable</code>. This might be fine for your usage, I just wanted to make sure you're aware of that.</p>\n\n<p>If you want a solution that works on stable compilers (as of Rust 1.14.0), then you'll have to box the callback. <code>add_child</code>'s signature would then look like this:</p>\n\n<pre><code>pub fn add_child&lt;REND&gt;(&amp;mut self, child: &amp;mut REND)\n    where REND: Renderable&lt;Box&lt;Fn(&amp;PropertyTags)&gt;&gt;\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=07907af49efc9b72744e3742ad057cb8&amp;version=nightly&amp;backtrace=0\" rel=\"nofollow noreferrer\">Here</a> is an updated playground link with an example implementation of <code>Fn</code>. Note that the parameters for <code>call</code>, <code>call_mut</code> and <code>call_once</code> are passed as a tuple, as is required by the trait definition. The code is reproduced below for completeness:</p>\n\n<pre><code>struct RenderableCallback {\n\n}\n\nimpl&lt;'a&gt; Fn&lt;(&amp;'a PropertyTags,)&gt; for RenderableCallback {\n    extern \"rust-call\" fn call(&amp;self, args: (&amp;'a PropertyTags,)) -&gt; Self::Output {\n\n    }\n}\n\nimpl&lt;'a&gt; FnMut&lt;(&amp;'a PropertyTags,)&gt; for RenderableCallback {\n    extern \"rust-call\" fn call_mut(&amp;mut self, args: (&amp;'a PropertyTags,)) -&gt; Self::Output {\n\n    }\n}\n\nimpl&lt;'a&gt; FnOnce&lt;(&amp;'a PropertyTags,)&gt; for RenderableCallback {\n    type Output = ();\n    extern \"rust-call\" fn call_once(self, args: (&amp;'a PropertyTags,)) -&gt; Self::Output {\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 432, "user_id": 535416, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c6a5a09a4808d12dbbe050b454696496?s=128&d=identicon&r=PG", "display_name": "Simon Jackson", "link": "https://stackoverflow.com/users/535416/simon-jackson"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2730, "favorite_count": 1, "accepted_answer_id": 41667347, "answer_count": 1, "score": 4, "last_activity_date": 1484780628, "creation_date": 1484502673, "last_edit_date": 1484508571, "question_id": 41664325, "link": "https://stackoverflow.com/questions/41664325/passing-closure-to-trait-method-expected-type-parameter-found-closure", "title": "Passing closure to trait method: expected type parameter, found closure", "body": "<p>I'm a bit stumped on how to get this working, I've cut it down from the real thing. I wrote a trait:</p>\n\n<pre><code>pub trait Renderable&lt;F: Fn(&amp;PropertyTags)&gt; {\n    fn set_property_changed_callback(&amp;mut self, callback: Option&lt;F&gt;);\n}\n</code></pre>\n\n<p>Which the 'child' parameter of <code>add_child</code> is restricted by and <code>PropertyTags</code> is just an enum. I've included mock implementations of the type of <code>child</code> to demonstrate my usage:</p>\n\n<pre><code>pub struct Child&lt;F: Fn(&amp;PropertyTags)&gt; {\n    property_changed_callback: Option&lt;F&gt;,\n}\n\nimpl&lt;F: Fn(&amp;PropertyTags)&gt; Renderable&lt;F&gt; for Child&lt;F&gt; {\n    fn set_property_changed_callback(&amp;mut self, callback: Option&lt;F&gt;) {\n        self.property_changed_callback = callback;\n    }\n}\n</code></pre>\n\n<p>Then these would be used as:</p>\n\n<pre><code>pub fn add_child&lt;REND, C&gt;(&amp;mut self, child: &amp;mut REND)\n    where C: Fn(&amp;PropertyTags),\n        REND: Renderable&lt;C&gt;\n{\n    let tc = Some(|property_tag: &amp;PropertyTags|{\n            });\n\n    child.set_property_changed_callback(tc);\n}\n</code></pre>\n\n<p>I'm getting the error:</p>\n\n<pre><code>child.set_property_changed_callback(tc);\n   |                                ^^ expected type parameter, found closure\n   |\n   = note: expected type `std::option::Option&lt;C&gt;`\n   = note:    found type `std::option::Option&lt;[closure@src/rendering/mod.rs:74:31: 76:18]&gt;`\n   = help: here are some functions which might fulfill your needs:\n - .take()\n - .unwrap()\n</code></pre>\n\n<p>I've setup a minimal playground example which reproduces the issues here: <a href=\"https://play.rust-lang.org/?gist=bcc8d67f25ac620fe062032d8737954b&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">https://play.rust-lang.org/?gist=bcc8d67f25ac620fe062032d8737954b&amp;version=stable&amp;backtrace=0</a></p>\n"}, {"tags": ["rust", "move", "lifetime"], "comments": [{"owner": {"reputation": 6596, "user_id": 5021321, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/29f10a1b457e63d44e3a221e89e32c17?s=128&d=identicon&r=PG", "display_name": "Eli Sadoff", "link": "https://stackoverflow.com/users/5021321/eli-sadoff"}, "edited": false, "score": 1, "creation_date": 1484501497, "post_id": 41664099, "comment_id": 70526388, "body": "Could you do it with borrowing? Also, why not implement <code>Copy</code>?"}, {"owner": {"reputation": 14451, "user_id": 33499, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17c590aa4c56918b47c7ba5e39dba5d8?s=128&d=identicon&r=PG", "display_name": "wimh", "link": "https://stackoverflow.com/users/33499/wimh"}, "edited": false, "score": 1, "creation_date": 1484501867, "post_id": 41664099, "comment_id": 70526513, "body": "Don&#39;t implement <code>Copy</code>, but read about <a href=\"https://aturon.github.io/ownership/builders.html\" rel=\"nofollow noreferrer\">the builder pattern</a>"}, {"owner": {"reputation": 99, "user_id": 2686218, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/6bcd8aad010afa31d5f84900c51aac85?s=128&d=identicon&r=PG&f=1", "display_name": "stamm", "link": "https://stackoverflow.com/users/2686218/stamm"}, "reply_to_user": {"reputation": 6596, "user_id": 5021321, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/29f10a1b457e63d44e3a221e89e32c17?s=128&d=identicon&r=PG", "display_name": "Eli Sadoff", "link": "https://stackoverflow.com/users/5021321/eli-sadoff"}, "edited": false, "score": 0, "creation_date": 1484511496, "post_id": 41664099, "comment_id": 70529882, "body": "@EliSadoff I&#39;m actually trying to learn how to write good code. I think copying here would be bad because it would take resources unnecessarily."}, {"owner": {"reputation": 99, "user_id": 2686218, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/6bcd8aad010afa31d5f84900c51aac85?s=128&d=identicon&r=PG&f=1", "display_name": "stamm", "link": "https://stackoverflow.com/users/2686218/stamm"}, "reply_to_user": {"reputation": 14451, "user_id": 33499, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17c590aa4c56918b47c7ba5e39dba5d8?s=128&d=identicon&r=PG", "display_name": "wimh", "link": "https://stackoverflow.com/users/33499/wimh"}, "edited": false, "score": 0, "creation_date": 1484511658, "post_id": 41664099, "comment_id": 70529945, "body": "@wimh: the code construction look alike the one I was trying to build, but I didn&#39;t find my answer in it. Thank you for the link, this pages seems full of great things by the way."}], "answers": [{"comments": [{"owner": {"reputation": 99, "user_id": 2686218, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/6bcd8aad010afa31d5f84900c51aac85?s=128&d=identicon&r=PG&f=1", "display_name": "stamm", "link": "https://stackoverflow.com/users/2686218/stamm"}, "edited": false, "score": 0, "creation_date": 1484510681, "post_id": 41664676, "comment_id": 70529662, "body": "Thank you, your second solution actually worked. I did try to use references but I had the same problem because the test suite uses chaining calls. If I understand well, the fact that the returned <code>self</code> from advance for example, was moving the value, but it was never moved back to the <code>fn instructions</code> context ?"}, {"owner": {"reputation": 99, "user_id": 2686218, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/6bcd8aad010afa31d5f84900c51aac85?s=128&d=identicon&r=PG&f=1", "display_name": "stamm", "link": "https://stackoverflow.com/users/2686218/stamm"}, "edited": false, "score": 0, "creation_date": 1484511976, "post_id": 41664676, "comment_id": 70530036, "body": "Looking at the other exercism users, you can actually do it with fold :           instructions.chars().fold(self, |robot, c| {             match c {                 &#39;L&#39; =&gt; robot.turn_left(),                 &#39;R&#39; =&gt; robot.turn_right(),                 &#39;A&#39; =&gt; robot.advance(),                 _ =&gt; panic!(&quot;unexpected char&quot;)             }         })"}, {"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "reply_to_user": {"reputation": 99, "user_id": 2686218, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/6bcd8aad010afa31d5f84900c51aac85?s=128&d=identicon&r=PG&f=1", "display_name": "stamm", "link": "https://stackoverflow.com/users/2686218/stamm"}, "edited": false, "score": 1, "creation_date": 1484514916, "post_id": 41664676, "comment_id": 70530932, "body": "@stamm Yes, that&#39;s exactly the problem. Once you pass a value to a method by value, you can no longer use it. But since your methods return the changed state, you can continue using that if you assign the return value to a variable."}], "tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": true, "score": 6, "last_activity_date": 1484504718, "creation_date": 1484504718, "answer_id": 41664676, "question_id": 41664099, "link": "https://stackoverflow.com/questions/41664099/how-to-prevent-a-value-from-being-moved/41664676#41664676", "title": "How to prevent a value from being moved?", "body": "<blockquote>\n  <p>I think I get the error because advance() returns self ?</p>\n</blockquote>\n\n<p>No, you're getting that error because <code>advance</code> <em>consumes</em> <code>self</code> (and your other methods do, too).</p>\n\n<p>The idiomatic solution to your problem is almost certainly to have your methods take a mutable reference (<code>&amp;mut</code>) to <code>self</code> instead of taking <code>self</code> by value. E.g. the signature <code>pub fn turn_right(mut self) -&gt; Self</code> would become <code>pub fn turn_right(&amp;mut self)</code> (note that the latter does not return anything). You can manipulate the robot's state through the reference, and your <code>instructions</code> function should work fine.</p>\n\n<p>If for some reason you want to continue to have the methods take <code>self</code> by value, you could rewrite <code>instructions</code> as follows:</p>\n\n<pre><code>pub fn instructions(self, instructions: &amp;str) -&gt; Self {\n    let mut robot = self;\n    for instruction in instructions.chars() {\n        robot = match instruction {\n            'A' =&gt; { robot.advance() },\n            'R' =&gt; { robot.turn_right() },\n            'L' =&gt; { robot.turn_left() },\n            _   =&gt; {\n                println!(\"{} is not a valid instruction\", instruction);\n                robot\n            },\n        };\n    }\n    robot\n}\n</code></pre>\n\n<p>I.e. continue passing the robot's state by value, but make sure that the new state is bound to a variable at every loop iteration.\n(I've not tried to compile this code, but the principle should be sound.)</p>\n"}, {"tags": [], "owner": {"reputation": 99, "user_id": 2686218, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/6bcd8aad010afa31d5f84900c51aac85?s=128&d=identicon&r=PG&f=1", "display_name": "stamm", "link": "https://stackoverflow.com/users/2686218/stamm"}, "is_accepted": false, "score": 2, "last_activity_date": 1484512144, "creation_date": 1484512144, "answer_id": 41665939, "question_id": 41664099, "link": "https://stackoverflow.com/questions/41664099/how-to-prevent-a-value-from-being-moved/41665939#41665939", "title": "How to prevent a value from being moved?", "body": "<p>Looking at the other users answers, you can actually do it with fold : </p>\n\n<pre><code>pub fn instructions(self, instructions: &amp;str) -&gt; Self {\n    instructions.chars().fold(self, |robot, c| {\n        match c {\n            'L' =&gt; robot.turn_left(),\n            'R' =&gt; robot.turn_right(),\n            'A' =&gt; robot.advance(),\n            _ =&gt; panic!(\"unexpected char\")\n        }\n    })\n}\n</code></pre>\n\n<p>It seems to keep moving back robot into the scope.</p>\n"}], "owner": {"reputation": 99, "user_id": 2686218, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/6bcd8aad010afa31d5f84900c51aac85?s=128&d=identicon&r=PG&f=1", "display_name": "stamm", "link": "https://stackoverflow.com/users/2686218/stamm"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2272, "favorite_count": 0, "accepted_answer_id": 41664676, "answer_count": 2, "score": 2, "last_activity_date": 1484522558, "creation_date": 1484501357, "last_edit_date": 1484522558, "question_id": 41664099, "link": "https://stackoverflow.com/questions/41664099/how-to-prevent-a-value-from-being-moved", "title": "How to prevent a value from being moved?", "body": "<p>I'm having a lot of fun trying to solve <a href=\"http://exercism.io/exercises/rust/robot-simulator/readme\" rel=\"nofollow noreferrer\">the robot simulator Exercism exercise</a>, but I'm facing a value moving problem for which I don't seem to be able to come up with an elegant solution: </p>\n\n<pre><code>impl Robot {\n    pub fn new(x: isize, y: isize, d: Direction) -&gt; Self {\n        Robot { position: Coordinate { x: x, y: y }, direction: d }\n    }\n\n    pub fn turn_right(mut self) -&gt; Self {\n        match self.direction {\n           // ...\n        };\n        self\n    }\n\n    pub fn turn_left(mut self) -&gt; Self {\n        match self.direction {\n           // ...\n        };\n        self\n    }\n\n    pub fn advance(mut self) -&gt; Self {\n        match self.direction {\n           // ...\n        };\n        self\n    }\n\n    pub fn instructions(self, instructions: &amp;str) -&gt; Self {\n        for instruction in instructions.chars() {\n            match instruction {\n                'A' =&gt; { self.advance(); },\n                'R' =&gt; { self.turn_right(); },\n                'L' =&gt; { self.turn_left(); },\n                _   =&gt; {\n                    println!(\"{} is not a valid instruction\", instruction);\n                },\n            };\n        }\n        self\n    }\n</code></pre>\n\n<p>I get this error : </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>enter code hereerror[E0382]: use of moved value: `self`\n  --&gt; src/lib.rs:60:26\n   |\n60 |                 'A' =&gt; { self.advance(); },\n   |                          ^^^^ value moved here in previous iteration of loop\n   |\n   = note: move occurs because `self` has type `Robot`, which does not implement the `Copy` trait\n\nerror[E0382]: use of moved value: `self`\n  --&gt; src/lib.rs:61:26\n   |\n60 |                 'A' =&gt; { self.advance(); },\n   |                          ---- value moved here\n61 |                 'R' =&gt; { self.turn_right(); },\n   |                          ^^^^ value used here after move\n   |\n   = note: move occurs because `self` has type `Robot`, which does not implement the `Copy` trait\n</code></pre>\n\n<p>I think I get the error because <code>advance()</code> returns <code>self</code>, but I don't understand why the value is still moved as it's used inside a block. Do I really have to implement <code>Copy</code> or am I missing a lifetime use case?</p>\n"}, {"tags": ["rust", "nomenclature"], "answers": [{"comments": [{"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 0, "creation_date": 1484503877, "post_id": 41659746, "comment_id": 70527280, "body": "I always thought &quot;binding&quot; instead of &quot;assignment&quot; had to do with Rust&#39;s ownership semantics. Basically let s =       &quot;foo&quot;.to_string() binds the right hand value to its owner, s."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 1, "last_activity_date": 1484477330, "last_edit_date": 1484477330, "creation_date": 1484473304, "answer_id": 41659746, "question_id": 41659471, "link": "https://stackoverflow.com/questions/41659471/difference-between-variable-bindings-and-variables/41659746#41659746", "title": "Difference between variable bindings and variables?", "body": "<p>A <a href=\"https://doc.rust-lang.org/book/variable-bindings.html\" rel=\"nofollow noreferrer\">variable binding</a> is a <a href=\"https://doc.rust-lang.org/reference.html#statements\" rel=\"nofollow noreferrer\">statement</a> that binds a variable to a name; in the statement</p>\n\n<pre><code>let x = 1;\n</code></pre>\n\n<p>The whole statement is the variable binding and <code>x</code> is the name the variable gets bound to. After this statement you may refer to <code>x</code> as a <em>variable</em> or a <em>binding</em> (but not a <em>variable binding</em>).</p>\n\n<p>The fragment you brought up just emphasizes the fact that in Rust you can do all kinds of stuff with variable bindings since <code>let</code> statements are subject to pattern matching, e.g.</p>\n\n<pre><code>let (a, b, c, s) = (1u8, 2usize, 3i32, \"foo\");\n</code></pre>\n\n<p>Assigns 4 variables of different types at once.</p>\n\n<p><strong>Edit</strong>: there might be a reason why <em>binding</em> is such a popular term with Rust even though <em>variable</em> is a much more established term in programming; since in Rust bindings are immutable by default, it might be weird for people without a programming background to call them <strong>variable</strong>s.</p>\n"}], "owner": {"reputation": 1222, "user_id": 7152817, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/b2b6ef3fc885710cadba2ae10136b473?s=128&d=identicon&r=PG&f=1", "display_name": "D. Ataro", "link": "https://stackoverflow.com/users/7152817/d-ataro"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 786, "favorite_count": 0, "accepted_answer_id": 41659746, "answer_count": 1, "score": 3, "last_activity_date": 1484477330, "creation_date": 1484470946, "last_edit_date": 1484473966, "question_id": 41659471, "link": "https://stackoverflow.com/questions/41659471/difference-between-variable-bindings-and-variables", "title": "Difference between variable bindings and variables?", "body": "<p>Over my time using Rust, I\u2019ve seen some people call them variables whilst others call them variable bindings - or even bindings as a short way of referring to it.</p>\n\n<p>In the Rust book, <a href=\"https://doc.rust-lang.org/book/variable-bindings.html#patterns\" rel=\"nofollow noreferrer\">it\u2019s stated</a>:</p>\n\n<blockquote>\n  <p>In many languages, a variable binding would be called a variable, but Rust\u2019s variable bindings have a few tricks up their sleeves. For example the left-hand side of a let statement is a \u2018pattern\u2019, not a variable name.</p>\n</blockquote>\n\n<p>Later in the book, they go on referring to variable bindings as either bindings or variables. The same I\u2019ve noticed here on <em>Stackoverflow</em> - it seems as though they\u2019e used interchangably.</p>\n\n<p>The question is whether or not there a time when referring to bindings as variables is more correct than the latter? I would assume both are different words for the more correct term - variable bindings - should you follow the words from their book. I\u2019m confused.</p>\n"}, {"tags": ["parsing", "rust"], "answers": [{"tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 2, "last_activity_date": 1484472508, "creation_date": 1484472508, "answer_id": 41659651, "question_id": 41658386, "link": "https://stackoverflow.com/questions/41658386/matching-end-of-line-or-end-of-file-using-nom/41659651#41659651", "title": "Matching end-of-line or end-of-file using nom", "body": "<p>This looks like it's <a href=\"https://github.com/Geal/nom/issues/308\" rel=\"nofollow noreferrer\">this issue in nom</a>, and this <a href=\"https://github.com/Geal/nom/pull/413\" rel=\"nofollow noreferrer\">WIP PR</a>.  Essentially there aren't enough type hints provided by some of the nom macros, so the inference fails.</p>\n\n<p>The suggested workaround is to split some of the sub-parsers into separate parsers to help the type inference, but that didn't work for me when I tried it in this case.</p>\n"}], "owner": {"reputation": 13635, "user_id": 547365, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/ddefbca930fdd39846b698bab7ac3146?s=128&d=identicon&r=PG", "display_name": "w.brian", "link": "https://stackoverflow.com/users/547365/w-brian"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1604, "favorite_count": 0, "accepted_answer_id": 41659651, "answer_count": 1, "score": 3, "last_activity_date": 1484513515, "creation_date": 1484461004, "last_edit_date": 1484513515, "question_id": 41658386, "link": "https://stackoverflow.com/questions/41658386/matching-end-of-line-or-end-of-file-using-nom", "title": "Matching end-of-line or end-of-file using nom", "body": "<p>I'm trying to parse a string using nom that will either be terminated by a newline or will reach end-of-input once consumed. I have the following code which seems like it should compile:</p>\n\n<pre><code>named!(am_implied &lt;AddressingMode&gt;,\n    do_parse!(\n        opt!(space) &gt;&gt;\n        alt!(\n            line_ending |\n            eof!()\n        ) &gt;&gt;\n        (AddressingMode::Implied)\n    )\n);\n</code></pre>\n\n<p>This fails with the following message:</p>\n\n<pre><code>error[E0282]: unable to infer enough type information about `E`\n   --&gt; src/lib.rs:181:1\n    |\n181 | named!(am_implied &lt;AddressingMode&gt;,\n    | ^ cannot infer type for `E`\n    |\n    = note: type annotations or generic parameter binding required\n</code></pre>\n\n<p>I'm led to believe that the above code should compile since following code compiles:</p>\n\n<pre><code>named!(am_implied &lt;AddressingMode&gt;,\n    do_parse!(\n        opt!(space) &gt;&gt;\n        line_ending &gt;&gt;\n        eof!() &gt;&gt;\n        (AddressingMode::Implied)\n    )\n);\n</code></pre>\n\n<p>I'm confused as to why this works when the <code>line_ending</code> and <code>eof!</code> parsers aren't used within an <code>alt!</code> parser, but fails when they are. I'd like to know the correct solution to matching on <code>line_ending</code> or <code>eof!</code>.</p>\n"}, {"tags": ["static", "rust", "volatile"], "comments": [{"owner": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1484429930, "post_id": 41655118, "comment_id": 70509172, "body": "bummer, forgot the <code>mut</code> keyword which is of course crucial in this context. Fixed it and also added the comment where I would call FFI"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 1, "creation_date": 1484431145, "post_id": 41655118, "comment_id": 70509523, "body": "<a href=\"https://www.reddit.com/r/rust/comments/40ewem/what_is_the_rust_equivalent_for_cs_volatile/\" rel=\"nofollow noreferrer\">This reddit thread</a> might be of some help."}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1484491959, "post_id": 41659129, "comment_id": 70523171, "body": "Most notably, <code>std::ptr::read_volatile</code> does NOT setup memory barriers, so does NOT work for cross-thread signalling as the hardware might not do the necessary sync&#39;ing."}, {"owner": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "edited": false, "score": 0, "creation_date": 1484514647, "post_id": 41659129, "comment_id": 70530866, "body": "thank you, I have tried with only <code>AtomicBool</code> and this won&#39;t work, I guess the <code>Arc</code> around it is crucial? Also: how would I give the pointer to the actual bool to C?"}], "tags": [], "owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "is_accepted": false, "score": 2, "last_activity_date": 1484474324, "last_edit_date": 1484474324, "creation_date": 1484468021, "answer_id": 41659129, "question_id": 41655118, "link": "https://stackoverflow.com/questions/41655118/are-static-variables-volatile/41659129#41659129", "title": "Are static variables volatile?", "body": "<p>No, static variables are not volatile.</p>\n\n<p>The proper solution within Rust is to use <a href=\"https://doc.rust-lang.org/std/sync/atomic/struct.AtomicBool.html\" rel=\"nofollow noreferrer\"><code>AtomicBool</code></a>. The following example (from <a href=\"https://doc.rust-lang.org/std/sync/atomic/index.html#examples\" rel=\"nofollow noreferrer\"><code>std::sync::atomic</code></a>) is quite similar to what you want to do:</p>\n\n<pre><code>use std::sync::Arc;\nuse std::sync::atomic::{AtomicUsize, Ordering};\nuse std::thread;\n\nfn main() {\n    let spinlock = Arc::new(AtomicUsize::new(1));\n\n    let spinlock_clone = spinlock.clone();\n    let thread = thread::spawn(move|| {\n        spinlock_clone.store(0, Ordering::SeqCst);\n    });\n\n    // Wait for the other thread to release the lock\n    while spinlock.load(Ordering::SeqCst) != 0 {}\n\n    if let Err(panic) = thread.join() {\n        println!(\"Thread had an error: {:?}\", panic);\n    }\n}\n</code></pre>\n\n<p>You could do it in this way via some callback from the signal handler into Rust.</p>\n\n<p>There are also unsafe functions <a href=\"https://doc.rust-lang.org/std/ptr/fn.read_volatile.html\" rel=\"nofollow noreferrer\"><code>std::ptr::read_volatile</code></a> and <a href=\"https://doc.rust-lang.org/std/ptr/fn.write_volatile.html\" rel=\"nofollow noreferrer\"><code>std::ptr::write_volatile</code></a>, which can be used to directly access memory. Normally these should only be used for accessing hardware registers or for implementing safe abstractions.</p>\n"}], "owner": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 572, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1484498921, "creation_date": 1484428845, "last_edit_date": 1484498921, "question_id": 41655118, "link": "https://stackoverflow.com/questions/41655118/are-static-variables-volatile", "title": "Are static variables volatile?", "body": "<p>I have this Rust program:</p>\n\n<pre><code>use std::{thread, time};\n\nstatic mut c:bool = false;\n\nfn main() {\n    unsafe {\n        // call some FFI program which sets up signals\n        c = false;\n        while !c {\n            thread::sleep(time::Duration::from_millis(10));\n        }\n    }\n}\n</code></pre>\n\n<p>I give the pointer to <code>c</code> to some FFI program who sets up signals which change <code>c</code>. How can I go sure the the compiler doesn't eliminate the <code>while</code> loop as it assumes <code>c</code> is never going to change?</p>\n\n<p>C has a <code>volatile</code> keyword which tells the compiler not to optimize in these examples. How can I tell the Rust compiler the same thing?</p>\n\n<p>(I tried to read the LLVM IR code but was not able to figure out how to understand it).</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 1, "creation_date": 1484427113, "post_id": 41654864, "comment_id": 70508355, "body": "Possible duplicate of <a href=\"http://stackoverflow.com/questions/31609137/why-are-explicit-lifetimes-needed-in-rust\">Why are explicit lifetimes needed in Rust?</a>"}, {"owner": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "edited": false, "score": 0, "creation_date": 1484427471, "post_id": 41654864, "comment_id": 70508475, "body": "yes, <a href=\"http://stackoverflow.com/a/31609892/119861\">this answer</a> in the post Ijedrz links has an example of a code that needs explicit lifetimes"}, {"owner": {"reputation": 1222, "user_id": 7152817, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/b2b6ef3fc885710cadba2ae10136b473?s=128&d=identicon&r=PG&f=1", "display_name": "D. Ataro", "link": "https://stackoverflow.com/users/7152817/d-ataro"}, "edited": false, "score": 0, "creation_date": 1484469487, "post_id": 41654864, "comment_id": 70517137, "body": "Although I totally agree in that the question you have linked me is similar to that of mine, the answer @Francis Gagn&#233; gave me really is a good answer that in my opinion explains it better than the answers to the question you linked me.  I do appreciate your efforts."}], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 4, "last_activity_date": 1484430269, "creation_date": 1484430269, "answer_id": 41655318, "question_id": 41654864, "link": "https://stackoverflow.com/questions/41654864/when-is-it-required-to-use-lifetimes/41655318#41655318", "title": "When is it required to use lifetimes?", "body": "<p>We use <em>lifetime parameters</em> in Rust when a variable (that has some lifetime) refers to another variable with a <em>different</em> lifetime.</p>\n\n<p>Let's consider these two statements:</p>\n\n<pre><code>let i = 42;\nlet ref_i = &amp;i;\n</code></pre>\n\n<p>Here, <code>i</code> has some lifetime, and <code>ref_i</code> has some other lifetime. However, the type of <code>ref_i</code> encodes the lifetime of <code>i</code> (or some approximation of it that is sound); the type of a borrowed pointer is written <code>&amp;'a T</code>, and <code>'a</code> is the lifetime of the pointer's referent.</p>\n\n<p>Borrowed pointers can only refer to a value that has a <em>longer</em> lifetime than the pointer's lifetime. If that was not the case, then the pointer would eventually be <em>dangling</em>, i.e. it would refer to a value that no longer exists. The compiler automatically validates this for you (so long as you don't write <code>unsafe</code> code); that's something that other systems programming languages like C++ don't do. But in order to validate this, <strong>the compiler must know the lifetime of the value that the pointer refers to</strong>; that's why we have lifetime parameters in Rust. Fortunately, the compiler can also infer lifetimes in many situations, so it's transparent in these situations.</p>\n\n<p>By design, Rust will only do local type inference. When compiling a function, the compiler doesn't inspect the body of other functions or other types to verify that the first function is correct; it only looks at their <em>signature</em>. For functions, we have <em>elision rules</em> that dictate when we can omit explicit lifetime parameters and what the compiler will infer them to be. For structs, we always have to mention them explicitly, because we almost always need to correlate the lifetime parameter on the struct with some other item (e.g. the lifetime parameter of a trait in a trait impl, or the return type on a method), and due to the compiler only doing local type inference, we need to encode this correlation explicitly in the signature.</p>\n\n<p>Here's a simple example of a struct that contains a borrow:</p>\n\n<pre><code>struct Wrapper&lt;'a&gt;(&amp;'a str);\n\nimpl&lt;'a&gt; Wrapper&lt;'a&gt; {\n    fn extract(self) -&gt; &amp;'a str {\n        self.0\n    }\n}\n</code></pre>\n\n<p>First, on the struct definition, we need to introduce a lifetime parameter for the string slice. Then, we need to parameterize the <code>impl</code> because <code>Wrapper</code> expects a lifetime parameter (the <code>'a</code> in <code>impl&lt;'a&gt;</code> <strong>defines</strong> the lifetime parameter, the <code>'a</code> in <code>Wrapper&lt;'a&gt;</code> <strong>uses</strong> the lifetime parameter). On <code>extract</code>, we can refer to the <code>'a</code> lifetime parameter defined on the <code>impl</code> so that the function's return type matches the actual type of <code>self.0</code>.</p>\n"}], "owner": {"reputation": 1222, "user_id": 7152817, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/b2b6ef3fc885710cadba2ae10136b473?s=128&d=identicon&r=PG&f=1", "display_name": "D. Ataro", "link": "https://stackoverflow.com/users/7152817/d-ataro"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 710, "favorite_count": 0, "accepted_answer_id": 41655318, "answer_count": 1, "score": 3, "last_activity_date": 1484430269, "creation_date": 1484426920, "question_id": 41654864, "link": "https://stackoverflow.com/questions/41654864/when-is-it-required-to-use-lifetimes", "title": "When is it required to use lifetimes?", "body": "<p>I have read up on lifetimes and understood that every single variable binding has a lifetime. It seems as though, however, that I cannot think of a time you would actually need to use them, considering the compiler does quite a great worl at inferring them when necessary.</p>\n\n<p>The Rust book, I have read. I would like an example that is simple to understand, even for someone like myself!</p>\n"}, {"tags": ["io", "iterator", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1484498630, "post_id": 41653701, "comment_id": 70525317, "body": "Please include the <b>complete error output</b>."}], "answers": [{"comments": [{"owner": {"reputation": 1290, "user_id": 5499871, "user_type": "registered", "profile_image": "https://graph.facebook.com/10206799318615183/picture?type=large", "display_name": "Izaak Weiss", "link": "https://stackoverflow.com/users/5499871/izaak-weiss"}, "edited": false, "score": 0, "creation_date": 1484421457, "post_id": 41653883, "comment_id": 70506471, "body": "When I add the <code>.map(|i| *i)</code>, I get <code>type u8 cannot be dereferenced</code>."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 1290, "user_id": 5499871, "user_type": "registered", "profile_image": "https://graph.facebook.com/10206799318615183/picture?type=large", "display_name": "Izaak Weiss", "link": "https://stackoverflow.com/users/5499871/izaak-weiss"}, "edited": false, "score": 0, "creation_date": 1484421913, "post_id": 41653883, "comment_id": 70506639, "body": "In that case can you include some of your code in the question?"}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 0, "last_activity_date": 1484420991, "creation_date": 1484420991, "answer_id": 41653883, "question_id": 41653701, "link": "https://stackoverflow.com/questions/41653701/how-do-you-write-an-iterator-to-a-file-or-stdout-anything-implementing-write/41653883#41653883", "title": "How do you write an iterator to a File or Stdout (anything implementing Write)?", "body": "<p>The problem is that you want to build a <code>Vec&lt;u8&gt;</code>, but are attempting to create a <code>Vec&lt;&amp;u8&gt;</code>. You can do the following:</p>\n\n<pre><code>fn main() {\n    let array = [1u8, 2, 3];\n    let vector: Vec&lt;u8&gt; = array.iter().map(|i| *i).collect();\n}\n</code></pre>\n\n<p>Note the <code>.map(|i| *i)</code> part that allows to go from <code>&amp;u8</code> references to <code>u8</code> values.</p>\n"}, {"comments": [{"owner": {"reputation": 3443, "user_id": 585725, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/814091b5dcedf578c4151c9012c9f9eb?s=128&d=identicon&r=PG", "display_name": "Shnatsel", "link": "https://stackoverflow.com/users/585725/shnatsel"}, "edited": false, "score": 1, "creation_date": 1495566454, "post_id": 41654104, "comment_id": 75304093, "body": "io::BufWriter can be used to get rid of most of the code here"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 1, "last_activity_date": 1484422270, "creation_date": 1484422270, "answer_id": 41654104, "question_id": 41653701, "link": "https://stackoverflow.com/questions/41653701/how-do-you-write-an-iterator-to-a-file-or-stdout-anything-implementing-write/41654104#41654104", "title": "How do you write an iterator to a File or Stdout (anything implementing Write)?", "body": "<blockquote>\n  <p>It seems odd to me that <code>Write</code> doesn't provide a way of writing with an iterator, when <code>Read</code> provides a <code>bytes()</code> function that returns an iterator. What is the idiomatic way to do this?</p>\n</blockquote>\n\n<p>It does feel inconsistent, indeed, but you can certainly write the equivalent yourself.</p>\n\n<p>Something like:</p>\n\n<pre><code>fn write_all&lt;W: Write, I: Iterator&lt;Item=u8&gt;&gt;(writer: &amp;mut W, iter: I) {\n    const SIZE: usize = 1024;\n\n    let mut buffer = [0u8; SIZE];\n    let mut index = 0;\n\n    for i in iter {\n        buffer[index] = i;\n\n        index += 1;\n        if index == SIZE {\n            writer.write_all(&amp;buffer);\n        }\n    }\n\n    writer.write_all(&amp;buffer[..index]);\n}\n</code></pre>\n\n<p>There are probably ways to make it more idiomatic, and I haven't tested the boundary conditions, but hopefully it should get you going.</p>\n"}], "owner": {"reputation": 1290, "user_id": 5499871, "user_type": "registered", "profile_image": "https://graph.facebook.com/10206799318615183/picture?type=large", "display_name": "Izaak Weiss", "link": "https://stackoverflow.com/users/5499871/izaak-weiss"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 553, "favorite_count": 0, "answer_count": 2, "score": 1, "last_activity_date": 1484498606, "creation_date": 1484419862, "last_edit_date": 1484498606, "question_id": 41653701, "link": "https://stackoverflow.com/questions/41653701/how-do-you-write-an-iterator-to-a-file-or-stdout-anything-implementing-write", "title": "How do you write an iterator to a File or Stdout (anything implementing Write)?", "body": "<p>I have an iterator full of <code>u8</code>'s that I want to write to a file or stdout. Calling <code>io::stdout().write_all(foo)</code> on my iterator gives me an expected type <code>&amp;[u8]</code>, and that I have an iterator type instead. I understand why this doesn't work.</p>\n\n<p>What I don't understand is how to change it so that it does work. At first I tried adding a <code>.collect()</code> to the end of my iterator, but then it says <code>the trait bound &amp;[u8]: std::iter::FromIterator&lt;u8&gt; is not satisfied</code> and <code>a collection of type &amp;[u8] cannot be built from an iterator over elements of type u8</code>.</p>\n\n<p>It seems odd to me that Write doesn't provide a way of writing with an iterator, when Read provides a <code>bytes()</code> function that returns an iterator. What is the idiomatic way to do this?</p>\n\n<p>Here is my main function's contents:</p>\n\n<pre><code>io::stdout().write_all(\n    io::stdin().bytes().map(\n        |x| match x {\n            Ok(b) =&gt; b,\n            _ =&gt; panic!(\"There was an error reading from stdin\"),\n        }\n    ).repeat(3).collect()\n);\n</code></pre>\n"}, {"tags": ["linked-list", "rust"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 7, "creation_date": 1484417011, "post_id": 41653148, "comment_id": 70505088, "body": "<a href=\"http://cglab.ca/~abeinges/blah/too-many-lists/book/\" rel=\"nofollow noreferrer\">obligatory reference (Learning Rust With Entirely Too Many Linked Lists)</a>"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1484417714, "post_id": 41653148, "comment_id": 70505313, "body": "Note that the traditional singly-linked (Cons List) does not memorize the <code>tail</code>. It&#39;s a way to allow appending in O(1), but is not necessary."}, {"owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 0, "creation_date": 1543571841, "post_id": 41653148, "comment_id": 93975677, "body": "@Oliver can you please accept Ijedrzs answer if it answers your question? Else please state what&#39;s missing."}], "answers": [{"tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 3, "last_activity_date": 1484418030, "last_edit_date": 1495542274, "creation_date": 1484417653, "answer_id": 41653325, "question_id": 41653148, "link": "https://stackoverflow.com/questions/41653148/singly-linked-list-in-rust/41653325#41653325", "title": "Singly-Linked List in Rust", "body": "<p>Your issue is that you are attempting to use a value (<code>node</code>) after having moved it; since <code>Box&lt;Node&lt;T&gt;&gt;</code> does not implement <code>Copy</code>, when you use it in the <code>match</code> expression:</p>\n\n<pre><code>match self.tail {\n    None =&gt; self.head = Some(node),\n    Some(ref mut tail) =&gt; tail.append(node),\n}\n</code></pre>\n\n<p><code>node</code> is moved either to <code>self.head</code> or to <code>self.tail</code> and can no longer be used later. Other than reading the obligatory <a href=\"http://cglab.ca/~abeinges/blah/too-many-lists/book/\" rel=\"nofollow noreferrer\">Learning Rust With Entirely Too Many Linked Lists</a> to see the different ways in which you can implement linked lists in Rust, I suggest that you first do some more research in the field of Rust's basic concepts, especially:</p>\n\n<ul>\n<li><a href=\"https://doc.rust-lang.org/book/ownership.html\" rel=\"nofollow noreferrer\">Ownership</a></li>\n<li><a href=\"https://doc.rust-lang.org/book/references-and-borrowing.html\" rel=\"nofollow noreferrer\">References and Borrowing</a></li>\n<li><a href=\"https://stackoverflow.com/questions/30288782/what-are-move-semantics-exactly\">What are move semantics?</a></li>\n</ul>\n"}, {"comments": [{"owner": {"reputation": 3388, "user_id": 1292791, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/D2eE2.jpg?s=128&g=1", "display_name": "prehistoricpenguin", "link": "https://stackoverflow.com/users/1292791/prehistoricpenguin"}, "edited": false, "score": 0, "creation_date": 1617608436, "post_id": 57622777, "comment_id": 118342259, "body": "So it&#39;s a recursive <code>append</code>, it&#39;s non-performant"}], "tags": [], "owner": {"reputation": 517, "user_id": 219355, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/a0e5c3547561a5db7e51f53a188fca5e?s=128&d=identicon&r=PG", "display_name": "debuti", "link": "https://stackoverflow.com/users/219355/debuti"}, "is_accepted": false, "score": 0, "last_activity_date": 1566550234, "creation_date": 1566550234, "answer_id": 57622777, "question_id": 41653148, "link": "https://stackoverflow.com/questions/41653148/singly-linked-list-in-rust/57622777#57622777", "title": "Singly-Linked List in Rust", "body": "<p>You can go with something simpler than that, only using your nodes</p>\n\n<pre><code>use std::fmt;\n\nstruct Payload {\n  id: i32,\n  value: i32,\n}\n\nimpl fmt::Display for Payload {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n        write!(f, \"({}, {})\", self.id, self.value)\n    }\n}\n\nstruct Node&lt;T&gt; {\n    element: T,\n    next: Option&lt;Box&lt;Node&lt;T&gt;&gt;&gt;,\n}\n\nimpl&lt;T&gt; Node&lt;T&gt; where T: std::fmt::Display{\n    fn new(element: T) -&gt; Self {\n        Node {\n            element: element,\n            next: None,\n        }\n    }\n\n    fn append(&amp;mut self, element: T) {\n        match &amp;mut self.next {\n            None =&gt; {let n = Node {\n                        element: element,\n                        next: None,\n                    };\n                    self.next = Some(Box::new(n));\n            },\n            Some(ref mut x) =&gt; x.append(element),\n        }\n    }\n\n    fn list(&amp; self) {\n        println!(\"{}\", self.element);\n        match &amp;self.next {\n            None =&gt; {},\n            Some(x) =&gt; x.list(),\n        }\n    }\n}\n\nfn main(){\n  let mut h = Node::new(Payload {id:1, value:1});\n  h.append(Payload {id:2, value:2});\n  h.append(Payload {id:3, value:3});\n  h.append(Payload {id:4, value:4});\n  h.append(Payload {id:5, value:5});\n  h.list();\n  h.append(Payload {id:6, value:6});\n  h.list();\n}\n</code></pre>\n"}], "owner": {"reputation": 173, "user_id": 3941747, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1481162ed1e28a82e46fa5c3cea87660?s=128&d=identicon&r=PG&f=1", "display_name": "Oliver", "link": "https://stackoverflow.com/users/3941747/oliver"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4536, "favorite_count": 0, "accepted_answer_id": 41653325, "answer_count": 2, "score": 4, "last_activity_date": 1566550234, "creation_date": 1484416579, "last_edit_date": 1484417839, "question_id": 41653148, "link": "https://stackoverflow.com/questions/41653148/singly-linked-list-in-rust", "title": "Singly-Linked List in Rust", "body": "<p>I've been trying to teach myself some Rust lately and wanted to practice a bit by implementing a simple linked list. I took some inspiration from the Rust library's linked list and tried to replicate the parts I already understood. Also I decided to make it singly-linked for now.</p>\n\n<pre><code>struct Node&lt;T&gt; {\n    element: T,\n    next: Option&lt;Box&lt;Node&lt;T&gt;&gt;&gt;,\n}\n\nimpl&lt;T&gt; Node&lt;T&gt; {\n    fn new(element: T) -&gt; Self {\n        Node {\n            element: element,\n            next: None,\n        }\n    }\n\n    fn append(&amp;mut self, element: Box&lt;Node&lt;T&gt;&gt;) {\n        self.next = Some(element);\n    }\n}\n\npub struct LinkedList&lt;T&gt; {\n    head: Option&lt;Box&lt;Node&lt;T&gt;&gt;&gt;,\n    tail: Option&lt;Box&lt;Node&lt;T&gt;&gt;&gt;,\n    len: u32,\n}\n\nimpl&lt;T&gt; LinkedList&lt;T&gt; {\n    pub fn new() -&gt; Self {\n        head: None,\n        tail: None,\n        len: 0,\n    }\n\n    pub fn push(&amp;mut self, element: T) {\n        let node: Box&lt;Node&lt;T&gt;&gt; = Box::new(Node::new(element));\n\n        match self.tail {\n            None =&gt; self.head = Some(node),\n            Some(mut ref tail) =&gt; tail.append(node),\n        }\n        self.tail = Some(node);\n        self.len += 1;\n    }\n\n    pub fn pop(&amp;mut self) -&gt; Option&lt;T&gt; {\n        //not implemented\n    }\n\n    pub fn get(&amp;self, index: u32) -&gt; Option&lt;T&gt; {\n        //not implemented\n    }\n}\n</code></pre>\n\n<p>This is what I've got so far; from what I understand, the problem with this code is that the <code>Box</code> can not have more than one reference to it in order to preserve memory safety.</p>\n\n<p>So when I set the list head to node in</p>\n\n<pre><code>None =&gt; self.head = Some(node),\n</code></pre>\n\n<p>I can't then go ahead and set</p>\n\n<pre><code>self.tail = Some(node);\n</code></pre>\n\n<p>later, am I correct so far in my understanding? What would be the correct way to do this? Do I have to use <code>Shared</code> like in the library or is there a way in which the <code>Box</code> or some other type can be utilized?</p>\n"}, {"tags": ["rust", "rust-macros"], "comments": [{"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 1, "creation_date": 1484430795, "post_id": 41653110, "comment_id": 70509430, "body": "I think that <i>methods</i> are not items at all. When I change <code>fn foo()</code> to <code>fn foo(self)</code>, I get <i>error: expected one of <code>::</code> or <code>:</code>, found <code>)</code></i> (the same error happens if you write that outside a macro)."}], "answers": [{"tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 3, "last_activity_date": 1560932883, "last_edit_date": 1560932883, "creation_date": 1484435665, "answer_id": 41656041, "question_id": 41653110, "link": "https://stackoverflow.com/questions/41653110/is-it-possible-to-use-an-item-arg-passed-to-a-macro-as-a-method/41656041#41656041", "title": "Is it possible to use an item arg passed to a macro as a method?", "body": "<p>The short answer is \"no, you can't use the <code>item</code> matcher for a method\".</p>\n\n<p>According to the <a href=\"https://doc.rust-lang.org/beta/reference.html#items\" rel=\"nofollow noreferrer\">reference</a>, items are the top level things in a crate or module, so functions, types, and so on.  While a <code>struct</code> or <code>impl</code> block is an item, the things inside them aren't.  Even though syntactically, a method definition looks identical to a top level function, that doesn't make it an item.</p>\n\n<p>The way Rust's macro system works is that once a fragment has been parsed as an <code>item</code>, e.g. using <code>$foo:item</code>, it's then forever an <code>item</code>; it's split back into tokens for reparsing once the macro is expanded.</p>\n\n<p>The result of this is that <code>$foo:item</code> can only be in the macro's output in item position, which generally means top-level.</p>\n\n<p>There are a couple of alternatives.  </p>\n\n<p>The simplest is to use the good old <code>tt</code> (token tree) matcher.  A token tree is either a non-bracket token or a sequence of tokens surrounded by balanced brackets; so <code>$(foo:tt)*</code> matches anything.  However, that means it will gobble up commas too, so it's easier to just add braces around each item:</p>\n\n\n\n<pre class=\"lang-rs prettyprint-override\"><code>macro_rules! create_impl {\n\n  ($struct_name:ident, $({ $($function:tt)* }),*) =&gt; {\n      struct $struct_name {\n      }\n\n      impl $struct_name {\n          $($($function)*)*\n      }\n  };\n\n}\n</code></pre>\n\n<p>Then you have to use it with the extra braces:</p>\n\n<pre class=\"lang-rs prettyprint-override\"><code>create_impl!(StructName, { fn foo() -&gt; u32 { return 432 } }, { fn bar() -&gt; u32 { return 765 } });\n</code></pre>\n\n<p>You can also just match the syntax you want directly, rather than delegating to the <code>item</code> matcher:</p>\n\n<pre class=\"lang-rs prettyprint-override\"><code>macro_rules! create_impl2 {\n    ($struct_name:ident, $(fn $fname:ident($($arg:tt)*) -&gt; $t:ty $body:block),*) =&gt; {\n      struct $struct_name {\n      }\n\n      impl $struct_name {\n          $(fn $fname($($arg)*) -&gt; $t $body)*\n      }\n    }\n}\n</code></pre>\n\n<p>Of course since it's explicit, that means that if you want to support functions without a return type, you need to add another case to your macro.</p>\n"}], "owner": {"reputation": 145, "user_id": 844564, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/f94dd76e35de04e243fc26a447080f60?s=128&d=identicon&r=PG", "display_name": "Donald Whyte", "link": "https://stackoverflow.com/users/844564/donald-whyte"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 986, "favorite_count": 0, "accepted_answer_id": 41656041, "answer_count": 1, "score": 3, "last_activity_date": 1560932883, "creation_date": 1484416312, "last_edit_date": 1484498724, "question_id": 41653110, "link": "https://stackoverflow.com/questions/41653110/is-it-possible-to-use-an-item-arg-passed-to-a-macro-as-a-method", "title": "Is it possible to use an item arg passed to a macro as a method?", "body": "<p>I'm trying to create a macro that generates a <code>struct</code> that provides a set of methods that are passed into the macro. For example, calling:</p>\n\n<pre><code>create_impl!(StructName, fn foo() -&gt; u32 { return 432 })\n</code></pre>\n\n<p>should generate an empty struct <code>StructName</code> that provides the method <code>foo()</code>.</p>\n\n<p>My initial attempt at this uses the <code>item</code> macro arg type. However, when I try and use an <code>item</code> in the rule, I get the following compiler error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: expected one of `const`, `default`, `extern`, `fn`, `pub`, `type`, `unsafe`, or `}`, found `fn foo() -&gt; u32 { return 42; }`\n  --&gt; src/lib.rs:40:13\n   |\n40 |           $($function)*\n   |             ^^^^^^^^^\n</code></pre>\n\n<p>Is it possible to use <code>item</code> arguments to define methods in generated structs this way? Is there something I'm missing?</p>\n\n<p>Here's the full macro I've defined:</p>\n\n<pre><code>macro_rules! create_impl {\n\n  ($struct_name:ident, $($function:item),*) =&gt; {\n      struct $struct_name {\n      }\n\n      impl $struct_name {\n          // This is the part that fails.\n          $($function)*\n      }\n  };\n\n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "edited": false, "score": 0, "creation_date": 1484471521, "post_id": 41654852, "comment_id": 70517601, "body": "Thanks so much for you explanation! Especially the paragraph on the lifetime declaration should be emphasised here. It&#39;s noteworthy that the lifetime descriptions on the <code>assert_vec</code> function were suggested by the compiler - probably it was as confused about that as I was ;)."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 2, "last_activity_date": 1484426858, "creation_date": 1484426858, "answer_id": 41654852, "question_id": 41651834, "link": "https://stackoverflow.com/questions/41651834/how-to-declare-a-trait-providing-an-iterator-over-borrowed-items-and-use-it-in-f/41654852#41654852", "title": "How to declare a trait providing an iterator over borrowed items and use it in function parameters?", "body": "<p>Here's a version of your code that \"works\":</p>\n\n<pre><code>pub trait Value: PartialEq&lt;Self&gt; {\n    type Item;\n    fn items&lt;'a&gt;(&amp;'a self) -&gt; Option&lt;Box&lt;Iterator&lt;Item = &amp;'a Self::Item&gt; + 'a&gt;&gt;;\n}\n\n/// An example implementation for a scalar value\nimpl Value for String {\n    type Item = Self;\n    fn items(&amp;self) -&gt; Option&lt;Box&lt;Iterator&lt;Item = &amp;Self&gt;&gt;&gt; {\n        None\n    }\n}\n\nimpl&lt;T&gt; Value for Vec&lt;T&gt;\n    where T: PartialEq\n{\n    type Item = T;\n    fn items&lt;'a&gt;(&amp;'a self) -&gt; Option&lt;Box&lt;Iterator&lt;Item = &amp;'a Self::Item&gt; + 'a&gt;&gt; {\n        Some(Box::new(self.iter()))\n    }\n}\n\nfn main() {\n    fn assert_vec&lt;V&gt;(l: V, r: V)\n        where V: Value\n    {\n        assert!(l != r);\n        assert!(l.items().is_some());\n    }\n\n    let l = vec![\"one\"];\n    let r = vec![\"two\"];\n\n    assert!(l.items().is_some());\n    assert!(l == l);\n\n    assert_vec(l, r);\n}\n</code></pre>\n\n<p>What I changed is that I moved the lifetime parameter from the <code>trait</code> to the <code>items</code> method, and then I changed the return type of <code>items</code> so that the iterator must emit references, so I could attach the correct lifetime.</p>\n\n<p>What was wrong with <code>assert_vec</code>? Consider what the type of the subexpression <code>l</code> should be in the expression <code>l.items()</code>. Based on your definition of the <code>Value</code> trait, that expression had to be of type <code>&amp;'a Vec&lt;String&gt;</code>, where <code>'a</code> here refers to the <code>'a</code> lifetime parameter on <code>assert_vec</code>. However, that expression cannot possibly be of that type, because lifetime parameters always refer to lifetimes that extend beyond the function call, yet <code>l</code> is a local variable, so its lifetime ends when the function returns (therefore it has a shorter lifetime, hence \"<code>l</code> does not live long enough\"). By moving the lifetime on the method instead, the compiler can infer the proper lifetime (the lifetime of the local variable).</p>\n\n<p>Note that my working version of the code <em>forces</em> implementations of <code>Value</code> to return iterators that emit references. Currently, in Rust, there's no way to express <em>if the type is a reference, set its lifetime to X, but if it's not, ignore the lifetime parameter</em>. What we need is <a href=\"https://internals.rust-lang.org/t/blog-post-series-alternative-type-constructors-and-hkt/4300\" rel=\"nofollow noreferrer\">associated type constructors</a> or higher-kinded typed, but unfortunately neither is implemented yet.</p>\n"}], "owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 68, "favorite_count": 0, "accepted_answer_id": 41654852, "answer_count": 1, "score": 1, "last_activity_date": 1484466394, "creation_date": 1484408783, "last_edit_date": 1484466394, "question_id": 41651834, "link": "https://stackoverflow.com/questions/41651834/how-to-declare-a-trait-providing-an-iterator-over-borrowed-items-and-use-it-in-f", "title": "How to declare a trait providing an iterator over borrowed items and use it in function parameters?", "body": "<p>In this code (<a href=\"https://play.rust-lang.org/?code=pub%20trait%20Value%3C%27a%3E%3A%20PartialEq%3CSelf%3E%20%7B%0A%20%20%20%20type%20Item%3B%0A%20%20%20%20fn%20items(%26%27a%20self)%20-%3E%20Option%3CBox%3CIterator%3CItem%20%3D%20Self%3A%3AItem%3E%20%2B%20%27a%3E%3E%3B%0A%7D%0A%0A%2F%2F%2F%20An%20example%20implementation%20for%20a%20scalar%20value%0Aimpl%3C%27a%3E%20Value%3C%27a%3E%20for%20String%20%7B%0A%20%20%20%20type%20Item%20%3D%20Self%3B%0A%20%20%20%20fn%20items(%26self)%20-%3E%20Option%3CBox%3CIterator%3CItem%20%3D%20Self%3E%3E%3E%20%7B%0A%20%20%20%20%20%20%20%20None%0A%20%20%20%20%7D%0A%7D%0A%0Aimpl%3C%27a%2C%20T%3E%20Value%3C%27a%3E%20for%20Vec%3CT%3E%0A%20%20%20%20where%20T%3A%20PartialEq%20%2B%20%27a%0A%7B%0A%20%20%20%20type%20Item%20%3D%20%26%27a%20T%3B%0A%20%20%20%20fn%20items(%26%27a%20self)%20-%3E%20Option%3CBox%3CIterator%3CItem%20%3D%20Self%3A%3AItem%3E%20%2B%20%27a%3E%3E%20%7B%0A%20%20%20%20%20%20%20%20Some(Box%3A%3Anew(self.iter()))%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20fn%20assert_vec%3C%27a%2C%20V%3E(l%3A%20V%2C%20r%3A%20V)%0A%20%20%20%20%20%20%20%20where%20V%3A%20Value%3C%27a%3E%20%2B%20%27a%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20assert!(l%20!%3D%20r)%3B%0A%20%20%20%20%20%20%20%20assert!(l.items().is_some())%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20let%20l%20%3D%20vec!%5B%22one%22%5D%3B%0A%20%20%20%20let%20r%20%3D%20vec!%5B%22two%22%5D%3B%0A%0A%20%20%20%20assert!(l.items().is_some())%3B%0A%20%20%20%20assert!(l%20%3D%3D%20l)%3B%0A%0A%20%20%20%20assert_vec(l%2C%20r)%3B%0A%7D&amp;version=nightly&amp;backtrace=0\" rel=\"nofollow noreferrer\">playground</a>):</p>\n\n<pre><code>pub trait Value&lt;'a&gt;: PartialEq&lt;Self&gt; {\n    type Item;\n    fn items(&amp;'a self) -&gt; Option&lt;Box&lt;Iterator&lt;Item = Self::Item&gt; + 'a&gt;&gt;;\n}\n\n/// An example implementation for a scalar value\nimpl&lt;'a&gt; Value&lt;'a&gt; for String {\n    type Item = Self;\n    fn items(&amp;self) -&gt; Option&lt;Box&lt;Iterator&lt;Item = Self&gt;&gt;&gt; {\n        None\n    }\n}\n\nimpl&lt;'a, T&gt; Value&lt;'a&gt; for Vec&lt;T&gt;\n    where T: PartialEq + 'a\n{\n    type Item = &amp;'a T;\n    fn items(&amp;'a self) -&gt; Option&lt;Box&lt;Iterator&lt;Item = Self::Item&gt; + 'a&gt;&gt; {\n        Some(Box::new(self.iter()))\n    }\n}\n\nfn main() {\n    fn assert_vec&lt;'a, V&gt;(l: V, r: V)\n        where V: Value&lt;'a&gt; + 'a\n    {\n        assert!(l != r);\n        assert!(l.items().is_some());\n    }\n\n    let l = vec![\"one\"];\n    let r = vec![\"two\"];\n\n    assert!(l.items().is_some());\n    assert!(l == l);\n\n    assert_vec(l, r);\n}\n</code></pre>\n\n<p>The purpose of the trait is to (eventually) abstract over scalar values, arrays, associative arrays and nested data structures like <code>rustc_serialize::json::Json</code>. That way, it should be possible to implement a generic algorithm for diffing arbitrary structures efficiently (see <a href=\"https://github.com/Byron/treediff-rs\" rel=\"nofollow noreferrer\">https://github.com/Byron/treediff-rs</a>).</p>\n\n<p>Step by step I reached a point where the trait appears usable (see lines <em>31...</em>), but I am unable to declare a function that can generically use the traits <code>items()</code> method (see lines <em>24...37</em>). The lifetime declarations seem to be broken and prohibit the trait to be used as intended.</p>\n\n<p><strong>How can <a href=\"https://play.rust-lang.org/?code=pub%20trait%20Value%3C%27a%3E%3A%20PartialEq%3CSelf%3E%20%7B%0A%20%20%20%20type%20Item%3B%0A%20%20%20%20fn%20items(%26%27a%20self)%20-%3E%20Option%3CBox%3CIterator%3CItem%20%3D%20Self%3A%3AItem%3E%20%2B%20%27a%3E%3E%3B%0A%7D%0A%0A%2F%2F%2F%20An%20example%20implementation%20for%20a%20scalar%20value%0Aimpl%3C%27a%3E%20Value%3C%27a%3E%20for%20String%20%7B%0A%20%20%20%20type%20Item%20%3D%20Self%3B%0A%20%20%20%20fn%20items(%26self)%20-%3E%20Option%3CBox%3CIterator%3CItem%20%3D%20Self%3E%3E%3E%20%7B%0A%20%20%20%20%20%20%20%20None%0A%20%20%20%20%7D%0A%7D%0A%0Aimpl%3C%27a%2C%20T%3E%20Value%3C%27a%3E%20for%20Vec%3CT%3E%0A%20%20%20%20where%20T%3A%20PartialEq%20%2B%20%27a%0A%7B%0A%20%20%20%20type%20Item%20%3D%20%26%27a%20T%3B%0A%20%20%20%20fn%20items(%26%27a%20self)%20-%3E%20Option%3CBox%3CIterator%3CItem%20%3D%20Self%3A%3AItem%3E%20%2B%20%27a%3E%3E%20%7B%0A%20%20%20%20%20%20%20%20Some(Box%3A%3Anew(self.iter()))%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20fn%20assert_vec%3C%27a%2C%20V%3E(l%3A%20V%2C%20r%3A%20V)%0A%20%20%20%20%20%20%20%20where%20V%3A%20Value%3C%27a%3E%20%2B%20%27a%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20assert!(l%20!%3D%20r)%3B%0A%20%20%20%20%20%20%20%20assert!(l.items().is_some())%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20let%20l%20%3D%20vec!%5B%22one%22%5D%3B%0A%20%20%20%20let%20r%20%3D%20vec!%5B%22two%22%5D%3B%0A%0A%20%20%20%20assert!(l.items().is_some())%3B%0A%20%20%20%20assert!(l%20%3D%3D%20l)%3B%0A%0A%20%20%20%20assert_vec(l%2C%20r)%3B%0A%7D&amp;version=nightly&amp;backtrace=0\" rel=\"nofollow noreferrer\">the code</a> be adjusted to compile?</strong></p>\n"}, {"tags": ["c", "rust", "ffi"], "comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "edited": false, "score": 1, "creation_date": 1484488608, "post_id": 41651700, "comment_id": 70522044, "body": "Note, note sure why this question is marked as too board. - While there may be multiple answers... a way to keep Rust/C definitions in sync seems like a reasonable and well defined question."}], "answers": [{"tags": [], "owner": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "is_accepted": false, "score": 2, "last_activity_date": 1484487300, "last_edit_date": 1484487300, "creation_date": 1484425888, "answer_id": 41654686, "question_id": 41651700, "link": "https://stackoverflow.com/questions/41651700/how-can-code-that-uses-c-ffi-in-rust-keep-in-sync-with-headers/41654686#41654686", "title": "How can code that uses C FFI in Rust keep in sync with headers?", "body": "<h1>Solution 1: bindgen</h1>\n\n<p>The <a href=\"https://github.com/Yamakaky/rust-bindgen\" rel=\"nofollow noreferrer\"><code>bindgen!</code></a> module takes a C header file and generates Rust binding at compile time. Example <a href=\"https://github.com/Yamakaky/rust-bindgen#generate-a-lua-binding-with-the-plugin\" rel=\"nofollow noreferrer\">from the bindgen documentation</a>:</p>\n\n<pre><code>#![feature(plugin)]\n#![plugin(bindgen)]\n\nmod lua_bindings {\n    bindgen!(\"/usr/include/lua.h\", link=\"lua\", builtins=true)\n}\n</code></pre>\n\n<p>It adds <code>clang</code> as a complexity to your code and relies on rust nightly. Unfortunately that makes your project heavy (dependency wise) and bound to rust nightly, but it helps your FFI bindings staying up to date, plus the cross architecture issue boils down to know where the header files are for each architecture.</p>\n\n<p>In my experience bindgen works pretty good, it has some limitations so it won't work for all cases.</p>\n\n<h1>Solution 2: ctest</h1>\n\n<p>Another approach is taken by <a href=\"https://github.com/rust-lang/libc/\" rel=\"nofollow noreferrer\">Libc</a>. Libc consists basically of <em>only</em> FFI bindings for currently 18 supported architectures so it has a quite heavy requirement on correctness of FFI bindings.</p>\n\n<p>In Libc the bindings are done by hand (often with the help of <a href=\"https://github.com/Yamakaky/rust-bindgen#command-line\" rel=\"nofollow noreferrer\">running <code>bindgen</code> in commandline</a>) and then tested against the header files using https://github.com/alexcrichton/ctest</p>\n\n<p>How it works is that you specify all the C headers you want to check against and then the library compares it against the <code>extern fn</code> definitions you specifies in your code and makes sure..</p>\n\n<blockquote>\n  <p>that all function signatures, constant values, struct layout/alignment, type size/alignment, etc, all match their C equivalent (quoted from <a href=\"https://github.com/alexcrichton/ctest#how-it-works\" rel=\"nofollow noreferrer\">the docs</a>)</p>\n</blockquote>\n\n<p>Throw travis into the mix and you can be sure your FFI bindings are correct for every code change across all supported architectures (have a look at <a href=\"https://github.com/rust-lang/libc/pulls\" rel=\"nofollow noreferrer\">libc's pull requests</a> where every pull is automatically run through travis and lets the author correct all errors before the PR is merged).</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 244, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1484489543, "creation_date": 1484408089, "last_edit_date": 1484489543, "question_id": 41651700, "link": "https://stackoverflow.com/questions/41651700/how-can-code-that-uses-c-ffi-in-rust-keep-in-sync-with-headers", "title": "How can code that uses C FFI in Rust keep in sync with headers?", "body": "<p>For code (typically crates) that use FFI to wrap C code,\nhow is it possible to keep Rust definitions and C headers in sync? Or ensure they are matching to begin with?</p>\n\n<p>Are there tools to handle this or is it the responsibility of each developer to manually check this?</p>\n\n<p>Update: To make this more concrete.\nIs there a way to know when:</p>\n\n<ul>\n<li>The member of a struct changes its type.</li>\n<li>A function argument changes its type.</li>\n</ul>\n\n<p>So that any mis-match with the Rust code can warn or fail to compile entirely?</p>\n\n<hr>\n\n<p><em>I ran into a crash in a crate which I suspect is caused by API mismatch which remains reported but unfixed.</em></p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1484406900, "post_id": 41651253, "comment_id": 70501712, "body": "The error clearly states &quot;<code>Self</code> and associated types in struct expressions and patterns are unstable (see issue #37544)&quot; - this question seems redundant."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 1, "creation_date": 1484407576, "post_id": 41651253, "comment_id": 70501892, "body": "@ljedrz as a non-expert - for all I know this is some totally different way to achieve this without <code>Self</code>."}], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 8, "last_activity_date": 1497018001, "last_edit_date": 1497018001, "creation_date": 1484406200, "answer_id": 41651393, "question_id": 41651253, "link": "https://stackoverflow.com/questions/41651253/possible-to-avoid-repeating-struct-name-in-an-impl-functions-body/41651393#41651393", "title": "Possible to avoid repeating struct name in an &#39;impl&#39; functions body?", "body": "<p>Since <strong>Rust 1.16</strong> your code compiles just fine! The <code>Self</code> keyword can now be used in more positions, including struct expressions and <code>impl</code> header.</p>\n\n<p>Relevant links:</p>\n\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/blob/master/RELEASES.md#language-2\" rel=\"nofollow noreferrer\">Changelog for 1.16</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/pull/39282\" rel=\"nofollow noreferrer\">PR stabilizing the feature</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/37544\" rel=\"nofollow noreferrer\">The tracking-issue</a></li>\n<li><a href=\"https://stackoverflow.com/revisions/41651393/1\">My previous answer</a></li>\n</ul>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 305, "favorite_count": 0, "accepted_answer_id": 41651393, "answer_count": 1, "score": 3, "last_activity_date": 1497018001, "creation_date": 1484405433, "last_edit_date": 1484498524, "question_id": 41651253, "link": "https://stackoverflow.com/questions/41651253/possible-to-avoid-repeating-struct-name-in-an-impl-functions-body", "title": "Possible to avoid repeating struct name in an &#39;impl&#39; functions body?", "body": "<p>It's possible to use <code>Self</code> within an <code>impl</code> block:</p>\n\n<pre><code>impl SomeStruct {\n    pub fn new() -&gt; Self {\n        SomeStruct { foo: 1, bar: 1, }\n    }\n}\n</code></pre>\n\n<p>Is there a way to refer to the type within the function body? For example:</p>\n\n<pre><code>impl SomeStruct {\n    pub fn new() -&gt; Self {\n        Self { foo: 1, bar: 1, }\n    //  ^^^^ not recognized, possibly there is some alternative?\n    }\n}\n</code></pre>\n\n<p>This isn't essential, just handy to be able to avoid repeating long struct names when it can be inferred. It may be useful for generated code too.</p>\n"}, {"tags": ["initialization", "rust"], "answers": [{"comments": [{"owner": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "edited": false, "score": 0, "creation_date": 1484427823, "post_id": 41650879, "comment_id": 70508577, "body": "I was aware that <code>uninitialized</code> was dangerous. I&#39;m just using them to let FFI functions write to them. What was new that the let statement actually does a tuple and you can specify this as <code>uninitialized</code> and then the tuple is &quot;disassembled&quot; into three variables. Spooky! :)"}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 1, "creation_date": 1484433203, "post_id": 41650879, "comment_id": 70510103, "body": "Wow, that&#39;s the best documentation for a dangerous function I&#39;ve ever read.  Thanks for the pointer!  (No pun intended)"}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 5, "last_activity_date": 1484402911, "creation_date": 1484402911, "answer_id": 41650879, "question_id": 41650827, "link": "https://stackoverflow.com/questions/41650827/better-way-to-declare-uninitialized-variables/41650879#41650879", "title": "Better way to declare uninitialized variables", "body": "<p>Luckily, tuples are normal types, too. So how about:</p>\n\n<pre><code>let (mut newmask, mut oldmask, mut pendmask) = std::mem::uninitialized();\n</code></pre>\n\n<p>However, it won't get much nicer than this. Your best bet is to combine all your variables into a bigger type (like a tuple or a struct) and un-initialize that. </p>\n\n<p>But it's fine that unsafe things are verbose and annoying to write. Uninitialized variables are really quite dangerous, especially when dealing with <code>Drop</code> types. I am sure you are already aware, but I still want to make sure everyone reads <a href=\"https://doc.rust-lang.org/std/mem/fn.uninitialized.html\" rel=\"nofollow noreferrer\">the documentation of <code>uninitialized()</code></a> to understand all possible pitfalls.</p>\n"}], "owner": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 112, "favorite_count": 0, "accepted_answer_id": 41650879, "answer_count": 1, "score": 1, "last_activity_date": 1484403033, "creation_date": 1484402550, "last_edit_date": 1484403033, "question_id": 41650827, "link": "https://stackoverflow.com/questions/41650827/better-way-to-declare-uninitialized-variables", "title": "Better way to declare uninitialized variables", "body": "<p>Some libc functions, e.g. <a href=\"https://doc.rust-lang.org/libc/x86_64-apple-darwin/libc/fn.sigemptyset.html\" rel=\"nofollow noreferrer\"><code>sigemptyset(set: *mut sigset_t)</code></a> take a pointer to a variable, treat it as uninitialized and initialize it.</p>\n\n<p>I end up with this code:</p>\n\n<pre><code>let mut newmask = std::mem::uninitialized();\nlibc::sigemptyset(&amp;mut newmask);\n</code></pre>\n\n<p>This is ok, but when I have many of those variables I end up with something like this:</p>\n\n<pre><code>let mut newmask = std::mem::uninitialized();\nlet mut oldmask = std::mem::uninitialized();\nlet mut pendmask = std::mem::uninitialized();\n</code></pre>\n\n<p>I could condense it:</p>\n\n<pre><code>use std::mem::unitialized as uninit;\nlet (mut newmask, mut oldmask, mut pendmask) = (uninit(), uninit(), uninit());\n</code></pre>\n\n<p>Is there a nicer way to write this code? For educational purposes I explicitly want to use libc.</p>\n"}, {"tags": ["enums", "rust"], "comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1484385019, "post_id": 41648339, "comment_id": 70495885, "body": "Note, there are some similar questions already - but they are asking about interfacing other languages <i>(making my initial attempts to find this information fail!)</i> - so asked a new question."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1484579689, "post_id": 41648339, "comment_id": 70556159, "body": "While this is marked as a duplicate, the other question is about C++ FFI."}], "answers": [{"tags": [], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "is_accepted": false, "score": 24, "last_activity_date": 1484385263, "last_edit_date": 1484385263, "creation_date": 1484384790, "answer_id": 41648347, "question_id": 41648339, "link": "https://stackoverflow.com/questions/41648339/how-to-specify-the-underlying-type-of-an-enum-in-rust/41648347#41648347", "title": "How to specify the underlying type of an enum in Rust?", "body": "<p>This can be done using the <a href=\"https://doc.rust-lang.org/nomicon/repr-rust.html\" rel=\"noreferrer\">representation (<code>repr</code>)</a>  specifier.</p>\n\n<pre><code>#[repr(u8)]\nenum MyEnum { A = 0, B, C, }\n</code></pre>\n\n<p>Assigned values outside the range of the type will raise a compiler warning.</p>\n"}, {"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1484403028, "post_id": 41650271, "comment_id": 70500452, "body": "Note that Rust <code>enum</code> need NOT be used as a discriminated union (aka tagged union), and can be used as &quot;plain&quot; enums to enumerate a number of related integral values. This is specifically the use case presented by the OP here."}, {"owner": {"reputation": 15, "user_id": 2358702, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/UjzFx.png?s=128&g=1", "display_name": "hpwsue", "link": "https://stackoverflow.com/users/2358702/hpwsue"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1484403467, "post_id": 41650271, "comment_id": 70500570, "body": "@MatthieuM. Are these values (e.g. 0 for A) mutable in the C-like use cases?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1484404760, "post_id": 41650271, "comment_id": 70501000, "body": "<code>MyEnum::A</code> itself is a constant, however the value of a <code>MyEnum</code> can be changed. This is really just a special case of <code>enum</code>, where none of the variants have a payload, and in this case the value of the discriminant can be (1) specified and (2) queried."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1484404899, "post_id": 41650271, "comment_id": 70501053, "body": "Edited the <i>&quot;We might want them&quot;</i> statement. Was indeed vague"}], "tags": [], "owner": {"reputation": 15, "user_id": 2358702, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/UjzFx.png?s=128&g=1", "display_name": "hpwsue", "link": "https://stackoverflow.com/users/2358702/hpwsue"}, "is_accepted": false, "score": -3, "last_activity_date": 1484399018, "creation_date": 1484399018, "answer_id": 41650271, "question_id": 41648339, "link": "https://stackoverflow.com/questions/41648339/how-to-specify-the-underlying-type-of-an-enum-in-rust/41650271#41650271", "title": "How to specify the underlying type of an enum in Rust?", "body": "<p>What do you mean by \"We might want <code>them</code>\"?</p>\n\n<p>The <code>A</code>, <code>B</code>, and <code>C</code> in your program are user-defined value constructors, not a <code>field</code> as known in OOP. Instead, you may specify type for the parameters like shown below.</p>\n\n<pre><code>enum Message {\n    Quit,\n    ChangeColor(i32, i32, i32),\n    Move { x: i32, y: i32 },\n    Write(String),\n}\n</code></pre>\n\n<p>The snippet comes from <a href=\"https://doc.rust-lang.org/book/enums.html\" rel=\"nofollow noreferrer\">https://doc.rust-lang.org/book/enums.html</a>.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4579, "favorite_count": 0, "closed_date": 1484498478, "answer_count": 2, "score": 10, "last_activity_date": 1484498419, "creation_date": 1484384659, "last_edit_date": 1484498419, "question_id": 41648339, "link": "https://stackoverflow.com/questions/41648339/how-to-specify-the-underlying-type-of-an-enum-in-rust", "closed_reason": "Duplicate", "title": "How to specify the underlying type of an enum in Rust?", "body": "<p>Given a simple enum with a few un-typed values, it might be desirable that the size of this enum use a smaller integral type then the default. For example, this provides the ability to store the enum in an array of <code>u8</code>.</p>\n\n<pre><code>enum MyEnum { \n    A = 0,\n    B,\n    C,\n}\n</code></pre>\n\n<p>It's possible to use a <code>u8</code> array and compare them against some constants, but I would like to have the benefit of using enums to ensure all possibilities are handled in a match statement.</p>\n\n<p>How can this be specified so its <code>size_of</code> matches the desired integer type?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 14451, "user_id": 33499, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17c590aa4c56918b47c7ba5e39dba5d8?s=128&d=identicon&r=PG", "display_name": "wimh", "link": "https://stackoverflow.com/users/33499/wimh"}, "is_accepted": true, "score": 2, "last_activity_date": 1484386315, "creation_date": 1484386315, "answer_id": 41648519, "question_id": 41645402, "link": "https://stackoverflow.com/questions/41645402/what-are-the-rust-borrowing-rules-regarding-mutable-internal-references/41648519#41648519", "title": "What are the Rust borrowing rules regarding mutable internal references?", "body": "<p>In the <code>match</code> statement, you borrow <code>self.state</code>. Borrow scopes are lexical, so it is borrowed in the entire <code>match</code> block. When you call <code>self.print()</code>, you need to borrow <code>self</code>. But that is not possible, because part of <code>self</code> is already borrowed. If you move <code>self.print()</code> after the <code>match</code> statement, it will work.</p>\n\n<p>Regarding the lexical borrow scope, you can read more in the second part of <a href=\"http://blog.ezyang.com/2013/12/two-bugs-in-the-borrow-checker-every-rust-developer-should-know-about/\" rel=\"nofollow noreferrer\">Two bugs in the borrow checker every Rust developer should know about</a>. Related issues: <a href=\"https://github.com/rust-lang/rust/issues/6393\" rel=\"nofollow noreferrer\">#6393</a>, <a href=\"https://github.com/rust-lang/rfcs/issues/811\" rel=\"nofollow noreferrer\">#811</a>.</p>\n"}, {"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1484403121, "post_id": 41648525, "comment_id": 70500478, "body": "You could use <code>if let</code> to pattern match rather than <code>match</code> here, though I find <code>match</code> more &quot;future proof&quot;."}, {"owner": {"reputation": 553, "user_id": 395763, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/54f5eda87ee0c28ba55a1523c1c07689?s=128&d=identicon&r=PG", "display_name": "avl_sweden", "link": "https://stackoverflow.com/users/395763/avl-sweden"}, "edited": false, "score": 0, "creation_date": 1532258196, "post_id": 41648525, "comment_id": 89897713, "body": "Why is match more future proof? Isn&#39;t &quot;if let&quot; stable?"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 553, "user_id": 395763, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/54f5eda87ee0c28ba55a1523c1c07689?s=128&d=identicon&r=PG", "display_name": "avl_sweden", "link": "https://stackoverflow.com/users/395763/avl-sweden"}, "edited": false, "score": 1, "creation_date": 1532268332, "post_id": 41648525, "comment_id": 89900267, "body": "@avl_sweden I meant the possibility of the <code>State</code> enum having more variants as the project expands."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 3, "last_activity_date": 1484386673, "last_edit_date": 1484386673, "creation_date": 1484386334, "answer_id": 41648525, "question_id": 41645402, "link": "https://stackoverflow.com/questions/41645402/what-are-the-rust-borrowing-rules-regarding-mutable-internal-references/41648525#41648525", "title": "What are the Rust borrowing rules regarding mutable internal references?", "body": "<p>In order to make your <code>hi</code> function work you just need to move <code>print</code> out of the scope of the mutable borrow introduced in its <code>match</code> expression:</p>\n\n<pre><code>fn hi(&amp;mut self) {\n    match self.state {\n        State::Testing(ref mut buf) =&gt; {\n            buf[0] = 'H' as u8;\n            buf[1] = 'i' as u8;\n            buf[2] = '!' as u8;\n        },\n    }\n    self.print();\n}\n</code></pre>\n\n<p>Your two variants are not equivalent due to the presence of the <code>match</code> block in the second case. I don't know how to directly access the tuple struct in the <code>enum</code> without pattern matching (or if this is even possible right now), but if it was the case, then there would in fact be not much difference and both versions would work.</p>\n"}], "owner": {"reputation": 644, "user_id": 981097, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e587ec2d4ee7f68a7487ec6649f16736?s=128&d=identicon&r=PG", "display_name": "Jeff Hutchins", "link": "https://stackoverflow.com/users/981097/jeff-hutchins"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 196, "favorite_count": 0, "accepted_answer_id": 41648519, "answer_count": 2, "score": 4, "last_activity_date": 1484498156, "creation_date": 1484353216, "last_edit_date": 1484498156, "question_id": 41645402, "link": "https://stackoverflow.com/questions/41645402/what-are-the-rust-borrowing-rules-regarding-mutable-internal-references", "title": "What are the Rust borrowing rules regarding mutable internal references?", "body": "<p>It's not intuitive to me why a program like</p>\n\n<pre><code>#[derive(Debug)]\nstruct Test {\n    buf: [u8; 16],\n}\n\nimpl Test {\n    fn new() -&gt; Test {\n        Test {\n            buf: [0u8; 16],\n        }       \n    }   \n\n    fn hi(&amp;mut self) {\n        self.buf[0] = 'H' as u8; \n        self.buf[1] = 'i' as u8; \n        self.buf[2] = '!' as u8; \n        self.print();\n    }   \n\n    fn print(&amp;self) {\n        println!(\"{:?}\", self);\n    }   \n}\n\nfn main() {\n    Test::new().hi();\n}\n</code></pre>\n\n<p>compiles and runs without any problem, but a program like</p>\n\n<pre><code>#[derive(Debug)]\nenum State {\n    Testing([u8; 16]),\n}\n\n#[derive(Debug)]\nstruct Test {\n    state: State,\n}       \n\nimpl Test {\n    fn new() -&gt; Test {\n        Test {\n            state: State::Testing([0u8; 16]),\n        }\n    }   \n\n    fn hi(&amp;mut self) {\n        match self.state {\n            State::Testing(ref mut buf) =&gt; {\n                buf[0] = 'H' as u8;\n                buf[1] = 'i' as u8;\n                buf[2] = '!' as u8;\n                self.print();\n            },\n        }\n    }\n\n    fn print(&amp;self) {\n        println!(\"{:?}\", self);\n    }\n}\n\nfn main() {\n    Test::new().hi();\n}\n</code></pre>\n\n<p>errors during compilation with an error of </p>\n\n<blockquote>\n  <p>error[E0502]: cannot borrow <code>*self</code> as immutable because\n  <code>self.state.0</code> is also borrowed as mutable</p>\n</blockquote>\n\n<p>Since both programs do essentially the same thing, the second doesn't seem like it would be somehow more unsafe from a memory perspective. I know there must be something about the borrowing and scoping rules that I must be missing, but have no idea what.</p>\n"}, {"tags": ["null", "rust", "undefined-behavior"], "comments": [{"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 1, "creation_date": 1484346993, "post_id": 41643335, "comment_id": 70488830, "body": "Note that (even in C), a null pointer is not necessary a pointer whose value is 0. If the address 0 was a valid value for a pointer on some platform, it could use any other placeholder for its null pointer."}, {"owner": {"reputation": 9586, "user_id": 1000282, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/371832f83b79a41443fa50d3793b0cfd?s=128&d=identicon&r=PG", "display_name": "pepper_chico", "link": "https://stackoverflow.com/users/1000282/pepper-chico"}, "reply_to_user": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 2, "creation_date": 1484347198, "post_id": 41643335, "comment_id": 70488901, "body": "@mcarton I try hard to avoid this misconception when putting up the question, and fail, because each time someone comes to point it. And the endless discussion starts over null pointer not being the value 0. Sorry but the question is not about it, it tries to avoid this interpretation."}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1484350850, "post_id": 41643335, "comment_id": 70490025, "body": "You&#39;ve edited your question to add \u201ca priori to all hardware/OS/architectures it may ever be used for\u201d but that&#39;s the point of the null pointer: it is not set a priori for <i>all</i> hardware/OS/architectures. It is set a priori for <i>a</i> hardware/OS/architecture, but the value can be any value that does not make sense to dereference on that hardware/OS/architecture."}, {"owner": {"reputation": 9586, "user_id": 1000282, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/371832f83b79a41443fa50d3793b0cfd?s=128&d=identicon&r=PG", "display_name": "pepper_chico", "link": "https://stackoverflow.com/users/1000282/pepper-chico"}, "reply_to_user": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1484350993, "post_id": 41643335, "comment_id": 70490059, "body": "@mcarton I edited it in several places trying to avoid that line of thought further. The question is not about which value, whatever it is, the issue is on why require any, for that."}, {"owner": {"reputation": 9586, "user_id": 1000282, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/371832f83b79a41443fa50d3793b0cfd?s=128&d=identicon&r=PG", "display_name": "pepper_chico", "link": "https://stackoverflow.com/users/1000282/pepper-chico"}, "reply_to_user": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1484351868, "post_id": 41643335, "comment_id": 70490267, "body": "@mcarton the address space is set irregular upfront on the language spec (for which reason this question is being asked). It cares that any other address except one (null, whatever it is) can be accessed without limitations imposed by the language (and for consequence the compiler). The platform detail that there will always be an address that can be used for this task is just an assumption, and as such, why have this assumption (it seems completely disposable)?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1484578762, "post_id": 41643335, "comment_id": 70555561, "body": "Regardless of the concrete representation of <code>NULL</code> (zero, -1, etc.), the point of a null pointer is that, by definition, it <i>doesn&#39;t point at a valid value</i>. Therefore, dereferencing a null pointer <b>has to be undefined behavior</b> in Rust. Your particular issue appears to be that the Rust implementation has chosen to equate the value zero and the null pointer, preventing you from dereferencing the pointer of value zero, but that&#39;s not really a question and it&#39;s more of a bug report, if anything."}, {"owner": {"reputation": 9586, "user_id": 1000282, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/371832f83b79a41443fa50d3793b0cfd?s=128&d=identicon&r=PG", "display_name": "pepper_chico", "link": "https://stackoverflow.com/users/1000282/pepper-chico"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1484579344, "post_id": 41643335, "comment_id": 70555954, "body": "@Shepmaster You should read the comments above and then the given references. What you&#39;re saying is negating what&#39;s just above in the comments."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1484579789, "post_id": 41643335, "comment_id": 70556226, "body": "@pepper_chico don&#39;t worry, I read the above. You appear to assume that a null pointer <b>has the same representation</b> as a normal pointer (thus causing it to fall in the same address space), but I&#39;d bet that the reference makes no such assumption. Only the <i>implementation</i> makes that true. The <b>reference</b> doesn&#39;t say that dereferencing the address <code>0</code> or <code>-1</code> is undefined behavior, nor does it say that <code>std::ptr::null()</code> has the value <code>0</code> or <code>-1</code>. The <i>implementation</i> makes the equivalence. Regardless of the concrete value of the null pointer, dereferencing <i>the null pointer</i> <b>must</b> be UB."}, {"owner": {"reputation": 9586, "user_id": 1000282, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/371832f83b79a41443fa50d3793b0cfd?s=128&d=identicon&r=PG", "display_name": "pepper_chico", "link": "https://stackoverflow.com/users/1000282/pepper-chico"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1484580203, "post_id": 41643335, "comment_id": 70556491, "body": "@Shepmaster that&#39;s why I use the word &quot;basically&quot; in one of the links inside one of the references given, specifically: <a href=\"http://nosubstance.me/post/dereferencing-null-pointers/\" rel=\"nofollow noreferrer\">nosubstance.me/post/dereferencing-null-pointers</a>."}, {"owner": {"reputation": 9586, "user_id": 1000282, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/371832f83b79a41443fa50d3793b0cfd?s=128&d=identicon&r=PG", "display_name": "pepper_chico", "link": "https://stackoverflow.com/users/1000282/pepper-chico"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1484580429, "post_id": 41643335, "comment_id": 70556619, "body": "@Shepmaster if you have the rationale for why there must be a pointer that doesn&#39;t point to any value and why this is more important than have uniform access to the address space, and the references to back it , I would just be happy with an answer, that&#39;s why the question is for."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1484580676, "post_id": 41643335, "comment_id": 70556777, "body": "<i>and why this is more important than have uniform access to the address space</i> \u2014 again, you are assuming that a null pointer&#39;s representation <b>must</b> lie in the address space, and nothing in the reference currently forces that to be true. It&#39;s the implementation that chooses to do that, and the existing answer already answers why that is immensely beneficial: it cuts down memory requirements for many usual types. If you cannot understand the benefit of a pointer that doesn&#39;t yet point at valid data, I&#39;m not sure what I can say to convince you that it is useful."}, {"owner": {"reputation": 9586, "user_id": 1000282, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/371832f83b79a41443fa50d3793b0cfd?s=128&d=identicon&r=PG", "display_name": "pepper_chico", "link": "https://stackoverflow.com/users/1000282/pepper-chico"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1484581117, "post_id": 41643335, "comment_id": 70557080, "body": "@Shepmaster I&#39;m not assuming it must, I&#39;m assuming it will, because implementantions are not left with a better implementation choice, afaik. And it seems you&#39;re not reading, if you have the rationale, technical and theoretical backing and references, you can just provide an answer, because that&#39;s why the site is for."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1484581245, "post_id": 41643335, "comment_id": 70557161, "body": "Double check your statement, as it contains a conditional: <i>if I had references</i>. I don&#39;t, so I cannot answer. I&#39;m simply pointing out logical issues with your question as phrased and adding in my own common sense explanations."}, {"owner": {"reputation": 9586, "user_id": 1000282, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/371832f83b79a41443fa50d3793b0cfd?s=128&d=identicon&r=PG", "display_name": "pepper_chico", "link": "https://stackoverflow.com/users/1000282/pepper-chico"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1484581402, "post_id": 41643335, "comment_id": 70557244, "body": "@Shepmaster OK. I hope what I have provided helped to make it more clear. Thanks anyway."}, {"owner": {"reputation": 9586, "user_id": 1000282, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/371832f83b79a41443fa50d3793b0cfd?s=128&d=identicon&r=PG", "display_name": "pepper_chico", "link": "https://stackoverflow.com/users/1000282/pepper-chico"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1484581657, "post_id": 41643335, "comment_id": 70557395, "body": "@Shepmaster <a href=\"http://stackoverflow.com/questions/41643335/why-is-dereferencing-a-null-raw-pointer-undefined-behaviour#comment70491999_41646116\">this reasoning</a> and <a href=\"https://np.reddit.com/r/rust/comments/5nr9jt/a_personal_tale_on_a_special_value_rcpp/dceiwg7/\" rel=\"nofollow noreferrer\">this comment</a> by known Rust dev may serve as counter argumentation. Just want to share, it&#39;s not that I want to continue discussing."}], "answers": [{"comments": [{"owner": {"reputation": 9586, "user_id": 1000282, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/371832f83b79a41443fa50d3793b0cfd?s=128&d=identicon&r=PG", "display_name": "pepper_chico", "link": "https://stackoverflow.com/users/1000282/pepper-chico"}, "edited": false, "score": 1, "creation_date": 1484360964, "post_id": 41646116, "comment_id": 70491999, "body": "Not wanting to argue about it but, I agree it looks consistent, but still just that. There&#39;s no reasoning on how that could affect unsafe raw address space access, if one wished so. I mean, I&#39;m thinking in a context where the implementation would itself rely on such null to construct and provide its features, using it as a tool, but still not disallowing, nor even care, what address is going to be accessed in unsafe mode. On the platforms, yes indeed I agree too, but you can&#39;t stop progress :) and now I&#39;m seeing Rust popping up in kernel/drivers space, unikernels, etc."}], "tags": [], "owner": {"reputation": 11412, "user_id": 617159, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/fc43cf2d76ce0981a21c0e5a817f96f5?s=128&d=identicon&r=PG", "display_name": "Lambda Fairy", "link": "https://stackoverflow.com/users/617159/lambda-fairy"}, "is_accepted": false, "score": 3, "last_activity_date": 1484359915, "creation_date": 1484359915, "answer_id": 41646116, "question_id": 41643335, "link": "https://stackoverflow.com/questions/41643335/why-is-dereferencing-a-null-raw-pointer-undefined-behaviour/41646116#41646116", "title": "Why is dereferencing a null raw pointer undefined behaviour?", "body": "<p>The null pointer is special-cased elsewhere in the language already. For example, <code>Option&lt;Box&lt;T&gt;&gt;</code> (where <code>T: Sized</code>) will use only one word, not two, because a null pointer is used to represent <code>None</code>. Disallowing code that follows null pointers is consistent with this idea.</p>\n\n<p>In a broader sense, Rust has not given as much attention to supporting exotic architectures as C. This is not out of malice, but merely a matter of priorities during its design. The language was built for a <a href=\"https://servo.org/\" rel=\"nofollow noreferrer\">modern web browser</a>, after all &ndash; an application which runs in user mode on x86 or ARM. That's not the kind of use case where these issues would come up. Perhaps if someone brought it up pre-1.0 it could have gone differently.</p>\n"}], "owner": {"reputation": 9586, "user_id": 1000282, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/371832f83b79a41443fa50d3793b0cfd?s=128&d=identicon&r=PG", "display_name": "pepper_chico", "link": "https://stackoverflow.com/users/1000282/pepper-chico"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 927, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1525720995, "creation_date": 1484341128, "last_edit_date": 1525720995, "question_id": 41643335, "link": "https://stackoverflow.com/questions/41643335/why-is-dereferencing-a-null-raw-pointer-undefined-behaviour", "title": "Why is dereferencing a null raw pointer undefined behaviour?", "body": "<p>The <a href=\"https://doc.rust-lang.org/reference.html#behavior-considered-undefined\" rel=\"nofollow noreferrer\">Rust reference</a> states:</p>\n\n<blockquote>\n  <ul>\n  <li>The following is a list of behavior which is forbidden in all Rust code, including within unsafe blocks and unsafe functions:\n  \n  <ul>\n  <li>Dereferencing a null/dangling raw pointer</li>\n  </ul></li>\n  </ul>\n</blockquote>\n\n<p>This question is solely about the null part. There's no inherent reason to require that a definite but unknown address in an address space be made inaccessible. That's my thesis (it's what most implementations of the null pointer do), so why is Rust following in these footsteps since <a href=\"https://stackoverflow.com/a/6793463/1000282/\">it seems merely ancient C cruft</a>?</p>\n\n<p>I've heard several stories (<a href=\"https://www.reddit.com/r/cpp/comments/5noem9/a_personal_tale_on_a_special_value/dcd4uk9/\" rel=\"nofollow noreferrer\">example</a>, <a href=\"https://stackoverflow.com/a/28581547/1000282\">another</a>, <a href=\"https://twitter.com/odinthenerd/status/820414487123607553\" rel=\"nofollow noreferrer\">another</a>) in my career where there was a need to access such a pointer, so why allow the spec (and hence, implementations) to get in the way again?</p>\n\n<p>There's assembly output and a lot of context <a href=\"https://www.reddit.com/r/cpp/comments/5noem9/a_personal_tale_on_a_special_value/\" rel=\"nofollow noreferrer\">in the C++ Reddit thread</a> from which this question stems. It was also brought up in this <a href=\"https://np.reddit.com/r/rust/comments/5nr9jt/a_personal_tale_on_a_special_value_rcpp/dcejn0z/?context=3\" rel=\"nofollow noreferrer\">Rust Reddit thread</a>.</p>\n\n<p>Despite the many \"war stories\" referred above, what is really upsetting for me is not in that realm, but more on the abstract one: making address space access (which is delivered by the hardware) non uniform from a language's specification, a priori to all hardware/OS/architectures it may ever be used for.</p>\n"}, {"tags": ["multithreading", "rust", "rwlock"], "answers": [{"comments": [{"owner": {"reputation": 187, "user_id": 4591620, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/VlLWi.jpg?s=128&g=1", "display_name": "Johannes Mueller", "link": "https://stackoverflow.com/users/4591620/johannes-mueller"}, "edited": false, "score": 0, "creation_date": 1484335438, "post_id": 41641899, "comment_id": 70483807, "body": "I have thought of this and tried your solution. But then it says <code>handler might not live long enough</code>.  But that is not an option anyway because in my real project I don&#39;t setup the thread myself. I just hand in a trait object with the call back function and a library starts the thread."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 187, "user_id": 4591620, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/VlLWi.jpg?s=128&g=1", "display_name": "Johannes Mueller", "link": "https://stackoverflow.com/users/4591620/johannes-mueller"}, "edited": false, "score": 0, "creation_date": 1484335765, "post_id": 41641899, "comment_id": 70483968, "body": "Interesting error, which has nothing to do with the <code>Mutex</code> question: you cannot <a href=\"http://stackoverflow.com/questions/32300132/why-cant-i-store-a-value-and-a-reference-to-that-value-in-the-same-struct\">borrow from a sibling</a>. As for your issue, I&#39;m sorry, but them&#39;s are rule. You cannot lock from a thread, unlock from another thread, and expect things to work: you <i>have</i> to design your program in another way."}, {"owner": {"reputation": 187, "user_id": 4591620, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/VlLWi.jpg?s=128&g=1", "display_name": "Johannes Mueller", "link": "https://stackoverflow.com/users/4591620/johannes-mueller"}, "edited": false, "score": 0, "creation_date": 1484336117, "post_id": 41641899, "comment_id": 70484115, "body": "But it&#39;s the same thread, isn&#39;t it? It&#39;s one thread that keeps calling <code>callback()</code> over and over again. I want it to keep the lock across several of those cycles."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 187, "user_id": 4591620, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/VlLWi.jpg?s=128&g=1", "display_name": "Johannes Mueller", "link": "https://stackoverflow.com/users/4591620/johannes-mueller"}, "edited": false, "score": 2, "creation_date": 1484336571, "post_id": 41641899, "comment_id": 70484354, "body": "@JohannesMueller: Are you sure it is? What if the library uses a thread-pool? What if the current version of the library doesn&#39;t use a thread-pool but the next does (ie, beware of using <code>unsafe</code> to bypass the restriction)? In any case, you currently have the problem that you cannot take a lock on a sibling field, maybe solving <i>that</i> issue will guide you toward another more accommodating design?"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 3, "last_activity_date": 1484335016, "last_edit_date": 1495539949, "creation_date": 1484335016, "answer_id": 41641899, "question_id": 41641721, "link": "https://stackoverflow.com/questions/41641721/acquiring-a-rwlock-for-read-and-keep-it-beyond-the-scope/41641899#41641899", "title": "Acquiring a RwLock for read and keep it beyond the scope", "body": "<p>The problem is: locking and unlocking <em>need</em> to occur on the same thread. This is, for example, a limitation of <a href=\"https://stackoverflow.com/questions/5454746/pthread-mutex-lock-unlock-by-different-threads\">pthread</a>.</p>\n\n<p>Fortunately, the Rust type system is expressive enough to model this: by making <code>RwLockReadGuard</code> be <code>!Send</code>, it prevents locks to be accidentally shared! All hail Rust!</p>\n\n<p>So you <em>can</em> lock and unlock in different callback functions... but on the same thread.</p>\n\n<p>In your example, this is as simple as moving the creation of <code>handler</code> inside the thread. In your real application, it might be a bit more complicated, but rest assured: the compiler will hold your hand along the way ;)</p>\n\n<pre><code>fn main() {\n    let resource = Arc::new(RwLock::new(\"foo\".to_string()));\n\n    let thread = thread::spawn( move || {\n        let handler = Handler {\n                resource: resource,\n                locked_resource: None,\n                counter: 0\n        };\n\n        loop {\n                handler.callback();\n        }\n    });\n}\n</code></pre>\n"}], "owner": {"reputation": 187, "user_id": 4591620, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/VlLWi.jpg?s=128&g=1", "display_name": "Johannes Mueller", "link": "https://stackoverflow.com/users/4591620/johannes-mueller"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 725, "favorite_count": 0, "accepted_answer_id": 41641899, "answer_count": 1, "score": 2, "last_activity_date": 1484497993, "creation_date": 1484334279, "last_edit_date": 1484497993, "question_id": 41641721, "link": "https://stackoverflow.com/questions/41641721/acquiring-a-rwlock-for-read-and-keep-it-beyond-the-scope", "title": "Acquiring a RwLock for read and keep it beyond the scope", "body": "<p>I have a thread that periodically calls a callback function. Depending on the state, the callback function shall acquire an <code>RwLock</code> of a resource shared with other threads and keep the resource locked even beyond the scope of the callback function. It shall then again depending on the state release the resource again in a later callback cycle.</p>\n\n<p>My idea was to put an <code>Option&lt;RwLockReadGuard&lt;T&gt;&gt;</code> into a struct which would be <code>None</code> when the resource is not locked and <code>Some(RwLockReadGuard&lt;T&gt;)</code> when the resource is locked.</p>\n\n<p>Unfortunately, I can't make this work. I have to set up the struct which contains the <code>Option&lt;RwLockReadGuard&lt;T&gt;&gt;</code> outside the thread of the callback function. Even though at the time the struct is moved into the thread the <code>Option</code> is <code>None</code>, the compiler won't let me pass the option because <code>the trait bound ``std::sync::RwLockReadGuard&lt;'_, T&gt;: std::marker::Send`` is not satisfied</code>.</p>\n\n<p>Maybe some code. I hope it's self-explaining enough.</p>\n\n<pre><code>use std::thread;\nuse std::sync::{Arc, RwLock, RwLockReadGuard};\n\n\nstruct Handler&lt;'a&gt; {\n        resource: Arc&lt;RwLock&lt;String&gt;&gt;,\n        locked_resource: Option&lt;RwLockReadGuard&lt;'a, String&gt;&gt;,\n        counter: usize,\n}\n\nimpl&lt;'a&gt; Handler&lt;'a&gt; {\n        fn callback(&amp;'a mut  self) {\n                println!(\"Callback {}\", self.counter);\n                if self.counter == 0 {\n                        println!(\"Locking resource\");\n                        let res = self.resource.read().unwrap();\n                        self.locked_resource = Some(res);\n                }\n\n                self.counter += 1;\n\n                if self.counter == 100 {\n                        println!(\"Releasing resource\");\n                        self.locked_resource = None;\n                }\n\n                if self.counter == 200 {\n                        self.counter = 0;\n                }\n        }\n}\n\n\nfn main() {\n        let resource = Arc::new(RwLock::new(\"foo\".to_string()));\n\n        let handler = Handler {\n                resource: resource.clone(),\n                locked_resource: None,\n                counter: 0\n        };\n\n        // This gives E0277\n        let thread = thread::spawn( move || {\n                loop {\n                        handler.callback();\n                }\n        });\n}\n</code></pre>\n"}, {"tags": ["enums", "rust"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1484321658, "post_id": 41637978, "comment_id": 70475886, "body": "I agree that this a feature which would be useful. Just out of interest: why do you need the number of variants?"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1484321971, "post_id": 41637978, "comment_id": 70476100, "body": "Added explanation of why I was looking for this feature."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1484322219, "post_id": 41637978, "comment_id": 70476247, "body": "To be honest, I find it inconvenient in C and C++ too because then I have to handle the cases in my <code>switch</code> which pollutes my code. In C and C++ I cheat with using a macro for declaring enums (black wizardry...) which also declare a few alternate things including this size which is so useful. I guess a macro would work in Rust too... but I am hoping for something better... (a custom derive could probably do the trick too, I guess...)"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1484384164, "post_id": 41637978, "comment_id": 70495723, "body": "Agree, at least in C/C++ you can use the last element to declare a constant outside the enum, but visually close - so developers adding new members aren&#39;t so likely to forget to update it (added example)."}], "answers": [{"comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1484323079, "post_id": 41638362, "comment_id": 70476801, "body": "Awesome! But I think the proper way (right now) to handle erorrs, such as a non-enum body is to panic. I very much like <a href=\"https://cbreeden.github.io/Macros11/\" rel=\"nofollow noreferrer\">this post</a> to learn Macros 1.1."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1484324467, "post_id": 41638362, "comment_id": 70477725, "body": "Why would we panic on a non-enum? There&#39;s no difference between a single variant enum and a tuple struct."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 2, "creation_date": 1484324899, "post_id": 41638362, "comment_id": 70477995, "body": "Ok, maybe I didn&#39;t think about it enough. But at least <i>I</i> would expect that attaching <code>#[derive(EnumVariantCount)]</code> to a struct definition results in a compile time error."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 2, "creation_date": 1484325618, "post_id": 41638362, "comment_id": 70478480, "body": "Right... the naming is unfortunate. It&#39;s probably a mistake if it&#39;s added to a struct."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 14, "last_activity_date": 1582875912, "last_edit_date": 1582875912, "creation_date": 1484322407, "answer_id": 41638362, "question_id": 41637978, "link": "https://stackoverflow.com/questions/41637978/how-to-get-the-number-of-elements-variants-in-an-enum-as-a-constant-value/41638362#41638362", "title": "How to get the number of elements (variants) in an enum as a constant value?", "body": "<p>You can use <a href=\"https://doc.rust-lang.org/reference/procedural-macros.html\" rel=\"nofollow noreferrer\">procedural macros</a>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>extern crate proc_macro;\nextern crate syn;\n#[macro_use]\nextern crate quote;\n\nuse proc_macro::TokenStream;\n\n#[proc_macro_derive(EnumVariantCount)]\npub fn derive_enum_variant_count(input: TokenStream) -&gt; TokenStream {\n    let syn_item: syn::DeriveInput = syn::parse(input).unwrap();\n    let len = match syn_item.data {\n        syn::Data::Enum(enum_item) =&gt; enum_item.variants.len(),\n        _ =&gt; panic!(\"EnumVariantCount only works on Enums\"),\n    };\n    let expanded = quote! {\n    const LENGTH: usize = #len;\n        };\n    expanded.into()\n}\n</code></pre>\n\n<p>It is left as an excercise to the reader to ensure that this derive macro can be used multiple times within the same module.</p>\n\n<p>To use the macro, just attach <code>#[derive(EnumVariantCount)]</code> to your enum. There should now be a global constant named <code>LENGTH</code>.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5515, "favorite_count": 1, "answer_count": 1, "score": 25, "last_activity_date": 1582875912, "creation_date": 1484321184, "last_edit_date": 1548683901, "question_id": 41637978, "link": "https://stackoverflow.com/questions/41637978/how-to-get-the-number-of-elements-variants-in-an-enum-as-a-constant-value", "title": "How to get the number of elements (variants) in an enum as a constant value?", "body": "<p>Is there a way to extract the number of elements in an enum?</p>\n\n<p>Simple example (with imaginary <code>number_of_elements</code> method):</p>\n\n<pre><code>enum FooBar { A = 0, B, C, };\n\nprintln!(\"Number of items: {}\", FooBar.number_of_elements());\n// \"Number of items: 3\"\n</code></pre>\n\n<p>In C I'd normally do... </p>\n\n<pre><code>enum FooBar { A = 0, B, C, };\n#define FOOBAR_NUMBER_OF_ITEMS (C + 1)\n</code></pre>\n\n<p>However the Rust equivalent to this doesn't work:</p>\n\n<pre><code>enum FooBar { A = 0, B, C, };\nconst FOOBAR_NUMBER_OF_ITEMS: usize = (C as usize) + 1;\n\n// Raises an error:\n//     unimplemented constant expression: enum variants\n</code></pre>\n\n<p>Including the last item in the enum is very inconvenient because matching enums will error if all members aren't accounted for.</p>\n\n<pre><code>enum FooBar { A = 0, B, C, FOOBAR_NUMBER_OF_ITEMS, };\n</code></pre>\n\n<p>Is there a way to get the number of items in an enum as a constant value?</p>\n\n<hr>\n\n<p>Note: even though this isn't directly related to the question, the reason I was wanting this feature is I'm using the <a href=\"https://github.com/rust-unofficial/patterns/blob/master/patterns/builder.md\" rel=\"noreferrer\">builder-pattern</a> to construct a series of actions which only make sense to run once. For this reason I can use a fixed size array the size of the enum.</p>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1484311932, "post_id": 41631944, "comment_id": 70469727, "body": "Another option is to change the interface to accept a closure that gets a reference into the map, which can choose whether to return a copy of the reference, or just inspect it. More details <a href=\"http://stackoverflow.com/a/40853817/1600898\">in this answer</a>."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1484311958, "post_id": 41631944, "comment_id": 70469743, "body": "Note that you can use <code>option.cloned()</code> as a shorthand for <code>option.map(Clone::clone)</code>."}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 10, "last_activity_date": 1484312141, "last_edit_date": 1484312141, "creation_date": 1484301900, "answer_id": 41631944, "question_id": 41630290, "link": "https://stackoverflow.com/questions/41630290/lifetime-issue-with-a-lazy-static-mutable-variable/41631944#41631944", "title": "Lifetime issue with a lazy_static mutable variable", "body": "<p>Rust is correctly preventing a bug here.</p>\n\n<p>Your <code>get_val</code> function is trying to return a reference into <code>HASHMAP</code>, but this isn't safe unless you continue holding the lock, as someone else could otherwise come and modify the map under your feet.</p>\n\n<p>You need to either keep the lock until you return the value (by returning the mutex guard along with the value; for example using <a href=\"http://kimundi.github.io/owning-ref-rs/owning_ref/type.MutexGuardRef.html\" rel=\"noreferrer\"><code>MutexGuardRef</code></a> from the <code>owning_ref</code> crate), or copy the value instead of returning a reference:</p>\n\n<pre><code>pub fn get_val(k: &amp;str) -&gt; Option&lt;Foo&gt; {\n    HASHMAP.lock().unwrap().get(k).cloned()\n}\n</code></pre>\n\n<p>With this implementation <code>Foo</code> would of course need to implement <code>Clone</code>.</p>\n"}], "owner": {"reputation": 493, "user_id": 6502802, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/c8105f9fd1eac6dc7a532a0a65a7fb62?s=128&d=identicon&r=PG&f=1", "display_name": "plailopo", "link": "https://stackoverflow.com/users/6502802/plailopo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1749, "favorite_count": 0, "accepted_answer_id": 41631944, "answer_count": 1, "score": 1, "last_activity_date": 1484312141, "creation_date": 1484296185, "last_edit_date": 1484302737, "question_id": 41630290, "link": "https://stackoverflow.com/questions/41630290/lifetime-issue-with-a-lazy-static-mutable-variable", "title": "Lifetime issue with a lazy_static mutable variable", "body": "<p>I use <code>lazy_static</code> to keep a <code>HashMap</code> in the memory. With two methods I am adding and getting elements, but I am having some problems with lifetimes.</p>\n\n<p>This is my code:</p>\n\n<pre><code>#[macro_use]\nextern crate lazy_static;\n\nuse std::sync::Mutex;\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: Mutex&lt;HashMap&lt;String, Foo&gt;&gt; = Mutex::new({\n        let mut m = HashMap::new();\n        m.insert(\"one\".to_string(), Foo{param1:\"foo1\".to_string(),    param2:\"foo2\".to_string()} );\n        m.insert(\"two\".to_string(), Foo{param1:\"bar1\".to_string(), param2:\"bar2\".to_string()});\n        m\n    });\n}\n\npub struct Foo{\n    param1: String,\n    param2: String,\n}\n\npub fn ins_val(name: String, f: Foo){\n    HASHMAP.lock().unwrap().insert(name, f);\n}\n\npub fn get_val(k: &amp;str) -&gt; Option&lt;&amp;Foo&gt;{\n    HASHMAP.lock().unwrap().get(k)\n}\n</code></pre>\n\n<p>And this is the error:</p>\n\n<pre><code>HASHMAP.lock().unwrap().get(k) \n^^^^^^^^^^^^^^^^^^^^^^^\nreference must be valid for the anonymous lifetime #1 defined on the block\n</code></pre>\n"}, {"tags": ["rust", "parameter-passing", "keyword-argument"], "comments": [{"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 5, "creation_date": 1484300053, "post_id": 41629819, "comment_id": 70462626, "body": "I&#39;ve deleted my answer, but it still seems that the builder pattern can be used more elegantly than shown in the question. If integrated into the API, your caller can use something like: <code>panel.button(&quot;Test&quot;).align(Center).icon(CIRCLE).make()</code>. That is exactly equivalent to Python keyword args (provides default values, allows arbitrary order), and doesn&#39;t look awkward at all."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1484312108, "post_id": 41629819, "comment_id": 70469845, "body": "Agree, I was using the builder style, and was suggested declaring a struct might be an alternative... while Im sure some macro could avoid some of the overhead, it looks non-trivial and even then will be awkward."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1484313634, "post_id": 41629819, "comment_id": 70470720, "body": "Boost.Process (C++) has an interesting abuse of operator overloading. It creates a constant <code>label</code>, and then when you use <code>label = &quot;Test&quot;</code> this in turns create an object similar to what <code>Label { label: &quot;Test&quot; }</code> would do. Boost process combines this with variadic arguments to get a list of such objects, which it then supplements with the defaults. You do end up with <code>panel.button(label = &quot;Test&quot;, align = Center, icon = CIRCLE);</code> calls... however it&#39;s unclear how it would translate in Rust (would have to pick another operator than <code>=</code> and might need to pass an array since no variadics?)."}], "answers": [{"comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 1, "creation_date": 1484295134, "post_id": 41630013, "comment_id": 70460074, "body": "<code>Button = (&quot;button&quot;, Center, Circle).into();</code> looks more like regular function arguments since there are no keywords to name each argument.  How would this work for optional arguments? so it could take both <code>let b: Button = (&quot;button&quot;, Center, Circle).into();</code> and <code>let b: Button = (&quot;button&quot;).into();</code> ?"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1484295488, "post_id": 41630013, "comment_id": 70460211, "body": "I expanded the answer to include this functionality."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1484298557, "post_id": 41630013, "comment_id": 70461738, "body": "Does this mean you would need to declare a  <code>from</code> function for every combination of arguments? Also, if you had 2 or more optional arguments of the same type, not sure how this could be done in a sane way."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1484300162, "post_id": 41630013, "comment_id": 70462692, "body": "You don&#39;t need <code>From</code> implemented for every combination, it depends on your use cases; in my example I only implemented 2 cases and they could suffice, as long as you either fill all details or just the name. Also the optional arguments can have the same type, there is no issue here - a tuple argument allows multiple homogeneous components."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1484312881, "post_id": 41630013, "comment_id": 70470291, "body": "@ljedrz: I am afraid that this solution is offered to the wrong question; this solves <i>overloading</i> (to an extent) but that is orthogonal to named arguments as far as I can see."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1484313461, "post_id": 41630013, "comment_id": 70470631, "body": "@MatthieuM. True (no argument names here), though it is a bit &quot;less awkward&quot; (at least e.g. when writing lots of test cases) than the referenced builder pattern and much easier than a macro simulating named arguments."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 0, "last_activity_date": 1484295412, "last_edit_date": 1484295412, "creation_date": 1484295012, "answer_id": 41630013, "question_id": 41629819, "link": "https://stackoverflow.com/questions/41629819/how-to-best-fake-keyword-style-function-arguments-in-rust/41630013#41630013", "title": "How to best *fake* keyword style function arguments in Rust?", "body": "<p>You can take advantage of the <a href=\"https://doc.rust-lang.org/std/convert/trait.From.html\" rel=\"nofollow noreferrer\"><code>From</code> trait</a>; that way you can drop some of the boilerplate:</p>\n\n<pre><code>use self::Shape::*;\nuse self::Alignment::*;\n\n#[derive(Debug)]\nstruct Button {\n    label: String,\n    align: Option&lt;Alignment&gt;,\n    icon: Option&lt;Shape&gt;,\n}\n\n#[derive(Debug)]\nenum Shape { Circle }\n\n#[derive(Debug)]\nenum Alignment { Center }\n\nimpl From&lt;(&amp;'static str, Alignment, Shape)&gt; for Button {\n    fn from((l, a, i): (&amp;'static str, Alignment, Shape)) -&gt; Self {\n        Button {\n            label: l.to_owned(),\n            align: Some(a),\n            icon: Some(i)\n        }\n    }\n}\n\nfn main() {\n    let b: Button = (\"button\", Center, Circle).into();\n\n    println!(\"{:?}\", b);\n}\n</code></pre>\n\n<p>This implementation will work specifically for <code>(&amp;'static str, Alignment, Shape)</code> tuples; however, you could additionally implement <code>From&lt;&amp;'static str&gt;</code> that would produce a <code>Button</code> with the given <code>label</code> and <code>None</code> for the other components:</p>\n\n<pre><code>impl From&lt;&amp;'static str&gt; for Button {\n    fn from(l: &amp;'static str) -&gt; Self {\n        Button {\n            label: l.to_owned(),\n            align: None,\n            icon: None\n        }\n    }\n}\n\nlet b2: Button = \"button2\".into();\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 4, "last_activity_date": 1484417384, "creation_date": 1484417384, "answer_id": 41653269, "question_id": 41629819, "link": "https://stackoverflow.com/questions/41629819/how-to-best-fake-keyword-style-function-arguments-in-rust/41653269#41653269", "title": "How to best *fake* keyword style function arguments in Rust?", "body": "<p><strong>Disclaimer: I advise against using this solution, because the errors reported are horrid. The cleanest solution, codewise, is most probably the builder pattern.</strong></p>\n\n<hr>\n\n<p>With that out of the way... I whipped together a proof-of-concept demonstrating operator abuse.</p>\n\n<p>Its main advantage over using struct syntax to pass arguments, or using a builder, is that it allows reuse across functions taking different sets of the same parameters.</p>\n\n<p>On the other hand, it does suffer from having to import a whole lot of symbols (each name to be used).</p>\n\n<p>It looks like:</p>\n\n<pre><code>//  Rust doesn't allow overloading `=`, so I picked `&lt;&lt;`.\nfn main() {\n    let p = Panel;\n    p.button(LABEL &lt;&lt; \"Hello\", ALIGNMENT &lt;&lt; Alignment::Center);\n\n    p.button(LABEL &lt;&lt; \"Hello\", Alignment::Left);\n    p.button(Label::new(\"Hello\"), Alignment::Left);\n}\n</code></pre>\n\n<p>Note that the name is really optional, it merely servers as a builder for the argument itself, but if you already have the argument it can be eschewed. This also means that it's probably not worth creating a name for \"obvious\" parameters (<code>Alignment</code> here).</p>\n\n<p>The normal definition of <code>button</code>:</p>\n\n<pre><code>#[derive(Debug)]\nstruct Label(&amp;'static str);\n\n#[derive(Debug)]\nenum Alignment { Left, Center, Right }\n\nstruct Panel;\n\nimpl Panel {\n    fn button(&amp;self, label: Label, align: Alignment) {\n        println!(\"{:?} {:?}\", label, align)\n    }\n}\n</code></pre>\n\n<p>Requires some augmentation:</p>\n\n<pre><code>impl Carrier for Label {\n    type Item = &amp;'static str;\n    fn new(item: &amp;'static str) -&gt; Self { Label(item) }\n}\n\nimpl Carrier for Alignment {\n    type Item = Alignment;\n    fn new(item: Alignment) -&gt; Self { item }\n}\n\nconst LABEL: &amp;'static Argument&lt;Label&gt; = &amp;Argument { _marker: PhantomData };\nconst ALIGNMENT: &amp;'static Argument&lt;Alignment&gt; = &amp;Argument { _marker: PhantomData };\n</code></pre>\n\n<p>And yes, this does mean that you can augment a function/method defined in a 3rd party library.</p>\n\n<p>This is supported by:</p>\n\n<pre><code>trait Carrier {\n    type Item;\n    fn new(item: Self::Item) -&gt; Self;\n}\n\nstruct Argument&lt;C: Carrier&gt; {\n    _marker: PhantomData&lt;*const C&gt;,\n}\n\nimpl&lt;C: Carrier&gt; Argument&lt;C&gt; {\n    fn create&lt;I&gt;(&amp;self, item: I) -&gt; C\n        where I: Into&lt;&lt;C as Carrier&gt;::Item&gt;\n    {\n        &lt;C as Carrier&gt;::new(item.into())\n    }\n}\n\nimpl&lt;R, C&gt; std::ops::Shl&lt;R&gt; for &amp;'static Argument&lt;C&gt;\n    where R: Into&lt;&lt;C as Carrier&gt;::Item&gt;,\n          C: Carrier\n{\n    type Output = C;\n    fn shl(self, rhs: R) -&gt; C {\n        self.create(rhs)\n    }\n}\n</code></pre>\n\n<p>Note that this does NOT address:</p>\n\n<ul>\n<li>out of order argument passing</li>\n<li>optional arguments</li>\n</ul>\n\n<hr>\n\n<p>If a user is patient enough to enumerate all combinations of optional parameters, a solution like @ljedrz is possible:</p>\n\n<pre><code>struct ButtonArgs {\n    label: Label,\n    align: Alignment,\n    icon: Icon,\n}\n\nimpl From&lt;Label&gt; for ButtonArgs {\n    fn from(t: Label) -&gt; ButtonArgs {\n        ButtonArgs { label: t, align: Alignment::Center, icon: Icon::Circle }\n    }\n}\n\nimpl From&lt;(Label, Alignment)&gt; for ButtonArgs {\n    fn from(t: (Label, Alignment)) -&gt; ButtonArgs {\n        ButtonArgs { label: t.0, align: t.1, icon: Icon::Circle }\n    }\n}\n\nimpl From&lt;(Label, Icon)&gt; for ButtonArgs {\n    fn from(t: (Label, Icon)) -&gt; ButtonArgs {\n        ButtonArgs { label: t.0, align: Alignment::Center, icon: t.1 }\n    }\n}\n\nimpl From&lt;(Label, Alignment, Icon)&gt; for ButtonArgs {\n    fn from(t: (Label, Alignment, Icon)) -&gt; ButtonArgs {\n        ButtonArgs { label: t.0, align: t.1, icon: t.2 }\n    }\n}\n\nimpl From&lt;(Label, Icon, Alignment)&gt; for ButtonArgs {\n    fn from(t: (Label, Icon, Alignment)) -&gt; ButtonArgs {\n        ButtonArgs { label: t.0, align: t.2, icon: t.1 }\n    }\n}\n</code></pre>\n\n<p>will then allow all of the following combinations:</p>\n\n<pre><code>fn main() {\n    let p = Panel;\n    p.button( LABEL &lt;&lt; \"Hello\" );\n    p.button((LABEL &lt;&lt; \"Hello\"));\n    p.button((LABEL &lt;&lt; \"Hello\", ALIGNMENT &lt;&lt; Alignment::Left));\n    p.button((LABEL &lt;&lt; \"Hello\", ICON &lt;&lt; Icon::Circle));\n    p.button((LABEL &lt;&lt; \"Hello\", ALIGNMENT &lt;&lt; Alignment::Left, ICON &lt;&lt; Icon::Circle));\n    p.button((LABEL &lt;&lt; \"Hello\", ICON &lt;&lt; Icon::Circle, ALIGNMENT &lt;&lt; Alignment::Left));\n\n    p.button(Label::new(\"Hello\"));\n    p.button((LABEL &lt;&lt; \"Hello\", Alignment::Left, Icon::Circle));\n}\n</code></pre>\n\n<p>The extra set of parentheses is necessary when there is more than one argument.</p>\n\n<p>However there is big downside: the user experience is degraded when using the wrong set of parameters.</p>\n\n<p>The result of calling <code>p.button(\"Hello\");</code> is:</p>\n\n<blockquote>\n<pre><code>error[E0277]: the trait bound `ButtonArgs: std::convert::From&lt;&amp;str&gt;` is not satisfied    --&gt; &lt;anon&gt;:124:7\n    | 124 |     p.button(\"Hello\");\n    |       ^^^^^^ the trait `std::convert::From&lt;&amp;str&gt;` is not implemented for `ButtonArgs`\n    |\n    = help: the following implementations were found:\n    = help:   &lt;ButtonArgs as std::convert::From&lt;Label&gt;&gt;\n    = help:   &lt;ButtonArgs as std::convert::From&lt;(Label, Alignment)&gt;&gt;\n    = help:   &lt;ButtonArgs as std::convert::From&lt;(Label, Icon)&gt;&gt;\n    = help:   &lt;ButtonArgs as std::convert::From&lt;(Label, Alignment, Icon)&gt;&gt;\n    = help: and 1 others\n    = note: required because of the requirements on the impl of `std::convert::Into&lt;ButtonArgs&gt;` for `&amp;str`\n</code></pre>\n</blockquote>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2012, "favorite_count": 0, "answer_count": 2, "score": 11, "last_activity_date": 1484417384, "creation_date": 1484294190, "last_edit_date": 1484299396, "question_id": 41629819, "link": "https://stackoverflow.com/questions/41629819/how-to-best-fake-keyword-style-function-arguments-in-rust", "title": "How to best *fake* keyword style function arguments in Rust?", "body": "<p>I'm interested to have something functionally similar to keyword arguments in Rust, where they're currently not supported.</p>\n\n<p>For languages that provide keyword argument, something like this is common:</p>\n\n<pre><code>panel.button(label=\"Some Button\")\npanel.button(label=\"Test\", align=Center, icon=CIRCLE)\n</code></pre>\n\n<p>I've seen this handled using the builder-pattern, eg:</p>\n\n<pre><code>ui::Button::new().label(\"Some Button\").build(panel)\nui::Button::new().label(\"Test\").align(Center).icon(CIRCLE).build(panel)\n</code></pre>\n\n<p>Which is fine but at times a little awkward compared with keyword arguments in Python.</p>\n\n<hr>\n\n<p>However using struct initialization with <code>impl Default</code> and <code>Option&lt;..&gt;</code> members in Rust could be used to get something very close to something which is in practice similar to writing keyword arguments, eg:</p>\n\n<pre><code>ui::button(ButtonArgs { label: \"Some Button\".to_string(), .. Default::default() } );\n\nui::button(ButtonArgs {\n    label: \"Test\".to_string(),\n    align: Some(Center),\n    icon: Some(Circle),\n    .. Default::default()\n});\n</code></pre>\n\n<p>This works, but has some down-sides in the context of attempting to use as keyword args:</p>\n\n<ul>\n<li>Having to prefix the arguments with the name of the <code>struct</code><br><em>(also needing to explicitly include it in the namespace adds some overhead).</em></li>\n<li>Putting <code>Some(..)</code> around every optional argument is annoying/verbose.</li>\n<li><code>.. Default::default()</code> at the end of every use is a little tedious.</li>\n</ul>\n\n<p>Are there ways to reduce some of these issues, <em>(using macros for example)</em> to make this work more easily as a replacement for keyword access?</p>\n"}, {"tags": ["iterator", "rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 121127, "user_id": 388520, "user_type": "registered", "accept_rate": 51, "profile_image": "https://www.gravatar.com/avatar/dd7cc06b1b1c347e172c6ba532937173?s=128&d=identicon&r=PG", "display_name": "zwol", "link": "https://stackoverflow.com/users/388520/zwol"}, "edited": false, "score": 0, "creation_date": 1484275405, "post_id": 41626484, "comment_id": 70454058, "body": "It&#39;s required in context (see the hyperlink in the question) that <code>operate</code> not consume its argument.  Any other options?  Some way to write the match pattern in the <code>for</code> so it works either way, for instance?"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 121127, "user_id": 388520, "user_type": "registered", "accept_rate": 51, "profile_image": "https://www.gravatar.com/avatar/dd7cc06b1b1c347e172c6ba532937173?s=128&d=identicon&r=PG", "display_name": "zwol", "link": "https://stackoverflow.com/users/388520/zwol"}, "edited": false, "score": 0, "creation_date": 1484275784, "post_id": 41626484, "comment_id": 70454146, "body": "I was working on a solution, hang in there! :) Done!"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1484294697, "post_id": 41626484, "comment_id": 70459882, "body": "Very elegant solution, please stop by more often!"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1484298193, "post_id": 41626484, "comment_id": 70461539, "body": "I can definitely improve this. It was 3 am and I didn&#39;t see the light in time."}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1484298852, "post_id": 41626484, "comment_id": 70461901, "body": "Thank you for this answer @E_net4. I certainly learned something :)"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1484300183, "post_id": 41626484, "comment_id": 70462710, "body": "You&#39;re rather welcome! Give me about half an hour and I&#39;ll give you a slightly better approach. :P"}], "tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": false, "score": 6, "last_activity_date": 1484301876, "last_edit_date": 1484301876, "creation_date": 1484274711, "answer_id": 41626484, "question_id": 41626209, "link": "https://stackoverflow.com/questions/41626209/iterating-generically-over-either-a-map-or-a-vector-of-2-tuples/41626484#41626484", "title": "Iterating generically over either a map or a vector of 2-tuples", "body": "<p>The function provided by <a href=\"https://doc.rust-lang.org/std/iter/trait.IntoIterator.html\" rel=\"nofollow noreferrer\"><code>IntoIterator</code></a> consumes self.</p>\n\n<pre><code>fn into_iter(self) -&gt; Self::IntoIter\n</code></pre>\n\n<p>In order to allow the use of <code>IntoIterator</code> without consuming the collection, both <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html\" rel=\"nofollow noreferrer\"><code>Vec</code></a> and <a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html\" rel=\"nofollow noreferrer\"><code>HashMap</code></a> have implementations of <code>IntoIterator</code> for <code>&amp;'a Vec&lt;T&gt;</code> and <code>&amp;'a HashMap&lt;K,V,S&gt;</code>, respectively. However, they are not quite the same.</p>\n\n<p>For the hash map, each <code>Item</code> is a <code>(&amp;K, &amp;V)</code>, which does not impose a problem because the code effectively assumes the items as 2-sized tuples of keys and values that coerce to <code>&amp;str</code>. And <code>&amp;&amp;str</code> does indeed coerce to <code>&amp;str</code>.\nFor the vector, each <code>Item</code> is a <code>&amp;T</code> (thus <code>&amp;(K, V)</code> in this case), but because the function is expecting <code>(K, V)</code> as the iterating item, it is currently unable to deal with items of <code>&amp;(K, V)</code>.</p>\n\n<p>As it is, the function works if you move the vector, which yields an <code>IntoIterator</code> where <code>Item = (K, V)</code>:</p>\n\n<pre><code>let vc = vec![\n    (\"a\", \"foo\"),\n    (\"b\", \"bar\"),\n    (\"c\", \"baz\")\n];\noperate(vc);\n</code></pre>\n\n<p>But what if we want it to work for both collections without consuming any of them? Well, I just devised two solutions.</p>\n\n<h3>#1</h3>\n\n<p>This one involves hiding the tuple behind a new trait:</p>\n\n<pre><code>/// for stuff that can be turned into a pair of references\ntrait AsRefPair&lt;K, V&gt; {\n    fn as_ref_pair(&amp;self) -&gt; (&amp;K, &amp;V);\n}\n</code></pre>\n\n<p>Implementing it for for <code>&amp;(K,V)</code> and <code>(&amp;K,&amp;V)</code>:</p>\n\n<pre><code>impl&lt;'a, K, V&gt; AsRefPair&lt;K, V&gt; for (&amp;'a K, &amp;'a V) {\n    fn as_ref_pair(&amp;self) -&gt; (&amp;K, &amp;V) {\n        (self.0, self.1)\n    }\n}\n\nimpl&lt;'a, K, V&gt; AsRefPair&lt;K, V&gt; for &amp;'a (K, V) {\n    fn as_ref_pair(&amp;self) -&gt; (&amp;K, &amp;V) {\n        (&amp;self.0, &amp;self.1)\n    }\n}\n</code></pre>\n\n<p>And now this function works:</p>\n\n<pre><code>fn operate&lt;I, T, K, V&gt;(x: I)\n    where I: IntoIterator&lt;Item=T&gt;,\n          T: AsRefPair&lt;K, V&gt;,\n          K: AsRef&lt;str&gt;, V: AsRef&lt;str&gt;\n{\n    for p in x {\n        let (ref k, ref v) = p.as_ref_pair();\n        println!(\"{}: {}\", k.as_ref(), v.as_ref());\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=e2ae034a32e9fb18644cf2785fbe22f3&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground</a>. It might sound a bit crazy at first, but...!</p>\n\n<h3>#2</h3>\n\n<p>In this one, just stop working with tuples... and start working with key-values!</p>\n\n<pre><code>trait KeyValue&lt;K, V&gt; {\n    fn key_value(&amp;self) -&gt; (&amp;K, &amp;V) {\n        (self.key(), self.value())\n    }\n\n    fn key(&amp;self) -&gt; &amp;K;\n    fn value(&amp;self) -&gt; &amp;V;\n}\n\nimpl&lt;K, V&gt; KeyValue&lt;K, V&gt; for (K, V) {\n    fn key(&amp;self) -&gt; &amp;K {\n        &amp;self.0\n    }\n    fn value(&amp;self) -&gt; &amp;V {\n        &amp;self.1\n    }\n}\n\nimpl&lt;'a, K, V&gt; KeyValue&lt;K, V&gt; for &amp;'a (K, V) {\n    fn key(&amp;self) -&gt; &amp;K {\n        &amp;self.0\n    }\n    fn value(&amp;self) -&gt; &amp;V {\n        &amp;self.1\n    }\n}\n\nfn operate&lt;I, T, K, V&gt;(x: I)\n    where I: IntoIterator&lt;Item=T&gt;,\n          T: KeyValue&lt;K, V&gt;,\n          K: AsRef&lt;str&gt;, V: AsRef&lt;str&gt;\n{\n    for p in x {\n        let (ref k, ref v) = p.key_value();\n        println!(\"{}: {}\", k.as_ref(), v.as_ref());\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=4b5530a5b5428c1e78bed9121203cbfc&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground</a>. I find this one a bit more idiomatic.</p>\n"}, {"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1484294779, "post_id": 41628633, "comment_id": 70459916, "body": "Indeed, using iterators is probably the most idiomatic way of doing this as it gives a lot more flexibility (also allows filtering the input, for example)."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1484300650, "post_id": 41628633, "comment_id": 70462997, "body": "I believe <code>Iterator</code> implements <code>IntoIterator</code> trivially, so taking <code>IntoIterator</code> seems more general."}], "tags": [], "owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "is_accepted": false, "score": 2, "last_activity_date": 1484289831, "last_edit_date": 1484289831, "creation_date": 1484288990, "answer_id": 41628633, "question_id": 41626209, "link": "https://stackoverflow.com/questions/41626209/iterating-generically-over-either-a-map-or-a-vector-of-2-tuples/41628633#41628633", "title": "Iterating generically over either a map or a vector of 2-tuples", "body": "<p>If you pass to the function <code>operate()</code> an iterator instead of a reference to vector, you can use <code>Iterator</code> adaptors to convert <code>Iterator::Item</code> to what you need:</p>\n\n<pre><code>operate(vc.iter().map(|&amp;(ref a, ref b)| (a, b)));\n</code></pre>\n"}], "owner": {"reputation": 121127, "user_id": 388520, "user_type": "registered", "accept_rate": 51, "profile_image": "https://www.gravatar.com/avatar/dd7cc06b1b1c347e172c6ba532937173?s=128&d=identicon&r=PG", "display_name": "zwol", "link": "https://stackoverflow.com/users/388520/zwol"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 678, "favorite_count": 2, "answer_count": 2, "score": 3, "last_activity_date": 1484497755, "creation_date": 1484272443, "last_edit_date": 1484497755, "question_id": 41626209, "link": "https://stackoverflow.com/questions/41626209/iterating-generically-over-either-a-map-or-a-vector-of-2-tuples", "title": "Iterating generically over either a map or a vector of 2-tuples", "body": "<p>Because of <a href=\"https://github.com/rust-lang/rust/pull/38856\" rel=\"nofollow noreferrer\">reasons</a>, I want to define a generic function that can iterate over key-value pairs expressed either as a mapping, or as a vector of 2-tuples (or anything else that satisfies <code>IntoIterator&lt;Item=(K, V)&gt;</code>, where <code>K</code> and <code>V</code> are stringy).  Concretely, I want this to work:</p>\n\n<pre><code>use std::collections::HashMap;\n\nfn main() {\n    let vc = vec![\n        (\"a\", \"foo\"),\n        (\"b\", \"bar\"),\n        (\"c\", \"baz\")\n    ];\n    operate(&amp;vc);\n\n    let mut map = HashMap::new();\n    map.insert(\"d\", \"blurf\");\n    map.insert(\"e\", \"quux\");\n    map.insert(\"f\", \"xyzzy\");\n    operate(&amp;map);\n}\n</code></pre>\n\n<p>I've got a definition of <code>operate</code> that works for the HashMap, but not for the vector:</p>\n\n<pre><code>fn operate&lt;I, K, V&gt;(x: I)\n    where I: IntoIterator&lt;Item=(K, V)&gt;,\n          K: AsRef&lt;str&gt;, V: AsRef&lt;str&gt;\n{\n    for (ref k, ref v) in x {\n        println!(\"{}: {}\", k.as_ref(), v.as_ref());\n    }\n}\n</code></pre>\n\n<p>The error message I get is</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0271]: type mismatch resolving `&lt;&amp;std::vec::Vec&lt;(&amp;str, &amp;str)&gt; as std::iter::IntoIterator&gt;::Item == (_, _)`\n  --&gt; test.rs:18:5\n   |\n18 |     operate(&amp;vc);\n   |     ^^^^^^^ expected reference, found tuple\n   |\n   = note: expected type `&amp;(&amp;str, &amp;str)`\n   = note:    found type `(_, _)`\n   = note: required by `operate`\n</code></pre>\n\n<p>and I don't understand it at all.  For one thing, it seems like it's backwards, and for another, why am I only getting an error for the <code>Vec</code> and not the <code>HashMap</code>?</p>\n"}, {"tags": ["parsing", "rust"], "comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1484270694, "post_id": 41625967, "comment_id": 70452937, "body": "Whilst not using nom ... <a href=\"https://github.com/simon-whitehead/rs6502\" rel=\"nofollow noreferrer\">the 6502 emulator, assembler and disassembler crate that I wrote</a> hand-rolls this. Its probably not the best example of parsing in Rust but it certainly manages to do it (NOTE: I am still in a cleanup stage of this - but now the holidays are over its progressing alot slower!). The assembler folder is where it all takes place - its very explicit and quite nested but might help in <i>some</i> way? Of note - I don&#39;t look ahead. I just tokenize it and figure it out as I go. So I&#39;m not sure lookahead is what you&#39;re after?"}, {"owner": {"reputation": 13635, "user_id": 547365, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/ddefbca930fdd39846b698bab7ac3146?s=128&d=identicon&r=PG", "display_name": "w.brian", "link": "https://stackoverflow.com/users/547365/w-brian"}, "reply_to_user": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1484271270, "post_id": 41625967, "comment_id": 70453098, "body": "I guess I&#39;m assuming lookahead is required for what I&#39;m trying to do using nom, or at least the way I&#39;m currently approaching it.  Out of curiosity, is your assembler self contained? I&#39;m really just looking for something simple I can use to create nice and readable unit tests for a NES emulator I&#39;m writing."}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1484271584, "post_id": 41625967, "comment_id": 70453167, "body": "You would have to define &quot;self-contained&quot; for me in this context. Its self-contained in the sense that its all written in Rust. Its... not self-contained in the sense that its not in 1 file - it relies on the types in the <code>lexer.rs</code>, <code>parser.rs</code>, <code>token.rs</code>, <code>assembler.rs</code> files ... etc. It should be simple enough for you to include as a dependency and use - I say that without knowing your specific use case though. The assembler is very limited (currently) when parsing 6502 mnemonic code as input. For example, it doesn&#39;t have fancy macros or conditional constructs like some assemblers do."}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1484271611, "post_id": 41625967, "comment_id": 70453170, "body": "There are lots of example usages in the crate though - I wrote LOTS of unit tests for every part of that crate - down to individual opcodes. So you should be able to eyeball simple usages of it."}, {"owner": {"reputation": 13635, "user_id": 547365, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/ddefbca930fdd39846b698bab7ac3146?s=128&d=identicon&r=PG", "display_name": "w.brian", "link": "https://stackoverflow.com/users/547365/w-brian"}, "reply_to_user": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1484271728, "post_id": 41625967, "comment_id": 70453201, "body": "Self contained in the sense that it&#39;s a separate crate. In any event, I&#39;ll certainly take a look!"}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1484271839, "post_id": 41625967, "comment_id": 70453236, "body": "Well it also contains an emulator ... so technically you could just use the emulator in the crate and have your address bus map the other hardware into the memory mapped in the emulator in my crates&#39; CPU :D Hopefully theres something there that can help you anyway - sorry I can&#39;t really help from the nom side of things anyway."}, {"owner": {"reputation": 13635, "user_id": 547365, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/ddefbca930fdd39846b698bab7ac3146?s=128&d=identicon&r=PG", "display_name": "w.brian", "link": "https://stackoverflow.com/users/547365/w-brian"}, "reply_to_user": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1484272335, "post_id": 41625967, "comment_id": 70453372, "body": "I&#39;ve implemented my own emulator and it&#39;s functionally correct (at least according to the functional test ROM I test against) and recently reworked it to accommodate cycle-granular timing with other components, as opposed to single-stepping and time warping. The need for the assembler is to write tests that assemble a single instruction, execute it, and assert the correct number of cycles was executed. This is necessary since the number of cycles isn no longer taken from a cycle table, but is actually dependent on the number of reads/writes a particular opcode performs."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 1, "creation_date": 1484300492, "post_id": 41625967, "comment_id": 70462910, "body": "One option is using <code>alt!()</code> with the alternatives in the right order - so include the indexed modes before the shorter ones."}, {"owner": {"reputation": 13635, "user_id": 547365, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/ddefbca930fdd39846b698bab7ac3146?s=128&d=identicon&r=PG", "display_name": "w.brian", "link": "https://stackoverflow.com/users/547365/w-brian"}, "edited": false, "score": 0, "creation_date": 1484322560, "post_id": 41625967, "comment_id": 70476477, "body": "I will give this a try. Thanks for the suggestion, it seems like the obvious solution in hindsight."}, {"owner": {"reputation": 13635, "user_id": 547365, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/ddefbca930fdd39846b698bab7ac3146?s=128&d=identicon&r=PG", "display_name": "w.brian", "link": "https://stackoverflow.com/users/547365/w-brian"}, "reply_to_user": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1484461372, "post_id": 41625967, "comment_id": 70515492, "body": "@ChrisEmerson Your suggestion worked--If you want to submit your comment as an answer, I will mark it as such."}], "answers": [{"comments": [{"owner": {"reputation": 13635, "user_id": 547365, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/ddefbca930fdd39846b698bab7ac3146?s=128&d=identicon&r=PG", "display_name": "w.brian", "link": "https://stackoverflow.com/users/547365/w-brian"}, "edited": false, "score": 1, "creation_date": 1484502534, "post_id": 41659538, "comment_id": 70526756, "body": "One thing I should note is that I had to use <code>alt_complete!</code> while ordering the parsers correctly as you stated. Without <code>alt_complete</code>, parsing would fail on some of the memory addressing modes with <code>IResult::Incomplete</code>."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "reply_to_user": {"reputation": 13635, "user_id": 547365, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/ddefbca930fdd39846b698bab7ac3146?s=128&d=identicon&r=PG", "display_name": "w.brian", "link": "https://stackoverflow.com/users/547365/w-brian"}, "edited": false, "score": 0, "creation_date": 1484524586, "post_id": 41659538, "comment_id": 70533441, "body": "Thanks; I&#39;ve added a note.  Let me know if it doesn&#39;t seem right!"}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 2, "last_activity_date": 1484524553, "last_edit_date": 1484524553, "creation_date": 1484471529, "answer_id": 41659538, "question_id": 41625967, "link": "https://stackoverflow.com/questions/41625967/parsing-text-that-requires-lookahead-using-nom/41659538#41659538", "title": "Parsing text that requires lookahead using nom", "body": "<p>One way of doing this is with the <code>alt!()</code> macro.</p>\n\n<p>The idea is have a parser which tries each alternative in sequence.  So if you already have parsers for each of the addressing modes separately, you can combine them into a parser for any of them:</p>\n\n<pre class=\"lang-rs prettyprint-override\"><code>// The sub-parsers all return Operand too.\nnamed!(parse_operand&lt;&amp;str, Operand&gt;,\n    alt!(parse_absolute_indexed |\n         parse_absolute |\n         parse_zeropage_indexed |\n         parse_zeropage |\n         parse_implied));\n</code></pre>\n\n<p>Some notes:</p>\n\n<ul>\n<li>The order may be important; I've put <code>parse_absolute</code> after <code>parse_absolute_indexed</code> since the former would match the initial part of the operand and return too early.</li>\n<li>A variant would be to include the end of line (including comments if applicable) matching into each sub parser.  Then it couldn't match early.</li>\n<li>If you're parsing to the end of the input without a byte/character which terminates the pattern (such as a newline) then you may need to use <code>alt_complete!()</code> instead of <code>alt!()</code>.  The reason for this is that if you try matching <code>ADD $00</code>, the parser which might match <code>ADD $0000</code> has to assume that it might still match if more input arrives, and <code>alt!()</code> won't then skip to the next case.  Using <code>alt_complete!()</code>, or alternatively wrapping the inner matchers in <code>complete!()</code>, is saying that an incomplete match is a non-match.</li>\n</ul>\n\n<p>If the parsers were very complicated it might mean doing extra work (trying each parse in sequence) compared to a parser generated by eg the venerable <code>yacc</code>, but I don't think it's an issue in this case.</p>\n"}], "owner": {"reputation": 13635, "user_id": 547365, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/ddefbca930fdd39846b698bab7ac3146?s=128&d=identicon&r=PG", "display_name": "w.brian", "link": "https://stackoverflow.com/users/547365/w-brian"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1009, "favorite_count": 0, "accepted_answer_id": 41659538, "answer_count": 1, "score": 3, "last_activity_date": 1484524553, "creation_date": 1484270552, "last_edit_date": 1484498838, "question_id": 41625967, "link": "https://stackoverflow.com/questions/41625967/parsing-text-that-requires-lookahead-using-nom", "title": "Parsing text that requires lookahead using nom", "body": "<p><strong>tl;dr</strong>: I'm struggling to find documentation or examples of text parsers that require lookahead using nom. </p>\n\n<p><strong>Long version</strong></p>\n\n<p>I'm using nom to parse 6502 assembly. I'm struggling with creating a parser that can parse the various addressing modes. Any given opcode will have the following format:</p>\n\n<p><code>XXX AM</code></p>\n\n<p>Where <code>XXX</code> is a three-character mnemonic and <code>AM</code> is the operand. The operand can take many forms and is referred to as the \"addressing mode.\"  I've defined an enum for the operands, an enum for the addressing modes, and an <code>OpCode</code> tuple struct containing these values, which is ultimately the result returned when parsing.</p>\n\n<p>The addressing mode can be omitted completely, in which case the addressing mode is <code>Implied</code>, it can have a literal value of <code>A</code>, which is the <code>Accumulator</code> addressing mode. </p>\n\n<p>Many of the addressing modes refer to memory locations, and it's these addressing modes I'm struggling to parse. In particular, if an addressing mode specifies a single byte in the form of <code>$00</code>, it is a <code>ZeroPage</code> addressing mode, whereas an operand specifying two bytes in the form of <code>$0000</code> is an <code>Absolute</code> addressing mode. To complicate the matter, there are indexed variants of these addressing modes in the form of <code>$00,X</code>, <code>$00,Y</code>, <code>$0000,X</code>, etc.</p>\n\n<p>Are there any good examples of existing text parsers that would illustrate the correct way to parse values that all start similarly (<code>$00...</code>) but are differentiated by how they end?  The nom documentation is not very comprehensive, and the best example I've found is the INI parser, which isn't doing anything as complex as I'm trying to accomplish. I've also look at the syn source code, but it's using a lot of custom macros and is a pretty complex beast, making it hard to learn from.</p>\n"}, {"tags": ["rust", "borrow-checker"], "comments": [{"owner": {"reputation": 600, "user_id": 1456184, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/1946ed264c9bc0b7e1c896bec69420cd?s=128&d=identicon&r=PG", "display_name": "doobdargent", "link": "https://stackoverflow.com/users/1456184/doobdargent"}, "edited": false, "score": 0, "creation_date": 1484252746, "post_id": 41622317, "comment_id": 70446015, "body": "<a href=\"http://rosettacode.org/wiki/Knapsack_problem/0-1\" rel=\"nofollow noreferrer\">rosettacode.org/wiki/Knapsack_problem/0-1</a> is the problem I&#39;m trying to solve."}, {"owner": {"reputation": 14451, "user_id": 33499, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17c590aa4c56918b47c7ba5e39dba5d8?s=128&d=identicon&r=PG", "display_name": "wimh", "link": "https://stackoverflow.com/users/33499/wimh"}, "edited": false, "score": 6, "creation_date": 1484253750, "post_id": 41622317, "comment_id": 70446601, "body": "the function <code>take_highest_value_item</code> borrows <code>items</code> and returns one of the items of it. You want to remove it from <code>items</code>, but the item you want to remove is the reason the borrow did not end. The easiest fix is probably change the function <code>take_highest_value_item</code> and remove the item in that function from <code>items</code>. See also <a href=\"http://stackoverflow.com/q/40764938/33499\">How do I return a vector element from a Rust function?</a>"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 3, "creation_date": 1484294413, "post_id": 41622317, "comment_id": 70459777, "body": "I&#39;m pretty sure this example is NOT minimal. And there are dozens of borrowing questions already: how does this question differ from all its predecessors?"}, {"owner": {"reputation": 600, "user_id": 1456184, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/1946ed264c9bc0b7e1c896bec69420cd?s=128&d=identicon&r=PG", "display_name": "doobdargent", "link": "https://stackoverflow.com/users/1456184/doobdargent"}, "reply_to_user": {"reputation": 14451, "user_id": 33499, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17c590aa4c56918b47c7ba5e39dba5d8?s=128&d=identicon&r=PG", "display_name": "wimh", "link": "https://stackoverflow.com/users/33499/wimh"}, "edited": false, "score": 0, "creation_date": 1484482684, "post_id": 41622317, "comment_id": 70520379, "body": "Thank you @wimh, I tried already to do this, but since I&#39;m in a loop, the compiler considers that I use multiple mutable reference (&amp;mut items) at the same time."}], "owner": {"reputation": 600, "user_id": 1456184, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/1946ed264c9bc0b7e1c896bec69420cd?s=128&d=identicon&r=PG", "display_name": "doobdargent", "link": "https://stackoverflow.com/users/1456184/doobdargent"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 141, "favorite_count": 0, "answer_count": 0, "score": 0, "last_activity_date": 1484497546, "creation_date": 1484252662, "last_edit_date": 1484497546, "question_id": 41622317, "link": "https://stackoverflow.com/questions/41622317/ownership-issue-in-a-while-let", "title": "Ownership issue in a &quot;while let&quot;", "body": "<p>The issue happens when I added the code to mutate the <code>items</code> variable.\nThe following code sample does not compile:</p>\n\n<pre><code>#[derive(Debug)]\nstruct Item {\n    value: u16,\n    weight: u16,\n    name: &amp;'static str,\n    //ratio: f32\n}\n\nimpl PartialEq for Item {\n    fn eq(&amp;self, other: &amp;Item) -&gt; bool {\n        self.name == other.name\n    }\n}\n\n#[derive(Debug)]\nstruct KnapSack&lt;'a&gt; {\n    capacity: u16,\n    current: u16,\n    items: Vec&lt;&amp;'a Item&gt;\n}\n\nfn main() {\n    let mut items = vec![\n        Item { name: \"map\", weight: 9, value: 150},\n        Item { name: \"compass\", weight: 13, value: 35},\n        Item { name: \"water\",   weight: 153, value: 200},\n        Item { name: \"sandwich\", weight: 50, value: 160},\n        Item { name: \"glucose\", weight: 15, value: 60},\n        Item { name: \"tin\", weight: 68, value: 45},\n        Item { name: \"banana\", weight: 27, value: 60},\n        Item { name: \"apple\", weight: 39, value: 40},\n        Item { name: \"cheese\", weight: 23, value: 30},\n        Item { name: \"beer\", weight: 52, value: 10},\n        Item { name: \"suntan cream\", weight: 11, value: 70},\n        Item { name: \"camera\", weight: 32, value: 30},\n        Item { name: \"T-shirt\", weight: 24, value: 15},\n        Item { name: \"trousers\", weight: 48, value: 10},\n        Item { name: \"umbrella\", weight: 73, value: 40},\n        Item { name: \"waterproof trousers\", weight: 42, value: 70},\n        Item { name: \"waterproof overclothes\", weight: 43, value: 75},\n        Item { name: \"note-case\", weight: 22, value: 80},\n        Item { name: \"sunglasses\", weight: 7, value: 20},\n        Item { name: \"towel\", weight: 18, value: 12},\n        Item { name: \"socks\", weight: 4, value: 50},\n        Item { name: \"book\", weight: 30, value: 10 },\n    ];\n    let mut knapsack = KnapSack{ capacity: 400, current: 0, items: vec![]};\n\n    while let Some(item_ref) = take_highest_value_item(&amp;items, knapsack.capacity - knapsack.current) {\n        knapsack.current += (*item_ref).weight;\n        knapsack.items.push(item_ref);\n\n        items\n            .iter()\n            .position(|&amp;n| n == *item_ref)\n            .map(|e| items.remove(e));\n    }\n\n    println!(\"Items : {:?}\", knapsack.items);\n}\n\n\n\nfn take_highest_value_item(items: &amp;Vec&lt;Item&gt;, max_weight: u16) -&gt; Option&lt;&amp;Item&gt; {\n    items\n        .iter()\n        .fold(None, |acc, item_ref| {\n            if (*item_ref).weight &gt; max_weight {\n                return acc;\n            }\n\n            match acc {\n                None =&gt;\n                    Some(item_ref),\n                Some(acc_item) =&gt;\n                    if acc_item.value &gt; (*item_ref).value {\n                        acc\n                    } else {\n                        Some(item_ref)\n                    }\n            }  \n        })\n}\n</code></pre>\n\n<p>this is the compiler message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `items` as mutable because it is also borrowed as immutable\n\n\n --&gt; src\\main.rs:58:18\n   |\n51 |     while let Some(item_ref) = take_highest_value_item(&amp;items, knapsack.capacity - knapsack.current) {\n   |                                                         ----- immutable borrow occurs here\n...\n58 |             .map(|e| items.remove(e));\n   |                  ^^^ ----- borrow occurs due to use of `items` in closure\n   |                  |\n   |                  mutable borrow occurs here\n...\n62 | }\n   | - immutable borrow ends here\n\nerror[E0507]: cannot move out of borrowed content\n  --&gt; src\\main.rs:57:24\n   |\n57 |             .position(|&amp;n| n == *item_ref)\n   |                        ^-\n   |                        ||\n   |                        |hint: to prevent move, use `ref n` or `ref mut n`\n   |                        cannot move out of borrowed content\n</code></pre>\n\n<p>Any hint on how to fix it would be awesome! </p>\n"}, {"tags": ["ssl", "https", "rust", "hyper"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1484243829, "post_id": 41619187, "comment_id": 70441167, "body": "Can you show the full error message?"}, {"owner": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "edited": false, "score": 0, "creation_date": 1484245328, "post_id": 41619187, "comment_id": 70441984, "body": "You may want to check out <a href=\"https://stackoverflow.com/questions/41614923/how-to-reach-an-https-site-via-proxy\">this answer</a> that uses the new <code>hyper-native-tls</code> crate."}, {"owner": {"reputation": 8285, "user_id": 93345, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/79c40d2fd90802e59e9b9ee70cc84c5e?s=128&d=identicon&r=PG", "display_name": "steamer25", "link": "https://stackoverflow.com/users/93345/steamer25"}, "edited": false, "score": 0, "creation_date": 1510947523, "post_id": 41619187, "comment_id": 81668796, "body": "For hyper 0.11, the answer is in the documentation under &#39;Client Configuration&#39;: <a href=\"https://hyper.rs/guides/client/configuration/\" rel=\"nofollow noreferrer\">hyper.rs/guides/client/configuration</a> ."}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1484294364, "post_id": 41622547, "comment_id": 70459756, "body": "Interesting, so <code>hyper</code> ensure that you have a TLS-capable client before allowing the <code>https</code> scheme. That&#39;s neat!"}, {"owner": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1484327783, "post_id": 41622547, "comment_id": 70479810, "body": "@MatthieuM. I believe that was a recent change as TLS related code got put into the other crate. This code is using hyper 0.10."}], "tags": [], "owner": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "is_accepted": true, "score": 18, "last_activity_date": 1484309714, "last_edit_date": 1484309714, "creation_date": 1484253527, "answer_id": 41622547, "question_id": 41619187, "link": "https://stackoverflow.com/questions/41619187/hyper-says-invalid-scheme-for-http-for-https-urls/41622547#41622547", "title": "Hyper says &quot;Invalid scheme for Http&quot; for HTTPS URLs", "body": "<p>Try this:</p>\n\n<pre><code>extern crate hyper;\nextern crate hyper_native_tls;\n\nuse hyper::Client;\nuse hyper::net::HttpsConnector;\nuse hyper_native_tls::NativeTlsClient;\n\nfn main() {\n    let ssl = NativeTlsClient::new().unwrap();\n    let connector = HttpsConnector::new(ssl);\n    let client = Client::with_connector(connector);\n    let mut res = client.get(\"https://google.com\").send().unwrap();\n}\n</code></pre>\n\n<p>Mostly taken from <a href=\"https://stackoverflow.com/questions/41614923/how-to-reach-an-https-site-via-proxy\">this answer</a>. What was missing was the <code>Client::with_connector</code> piece.</p>\n"}], "owner": {"reputation": 409, "user_id": 2970121, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/d0b21cede510b0bbf986847693a9e075?s=128&d=identicon&r=PG&f=1", "display_name": "njaard", "link": "https://stackoverflow.com/users/2970121/njaard"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3018, "favorite_count": 1, "accepted_answer_id": 41622547, "answer_count": 1, "score": 11, "last_activity_date": 1484497841, "creation_date": 1484241292, "last_edit_date": 1484497841, "question_id": 41619187, "link": "https://stackoverflow.com/questions/41619187/hyper-says-invalid-scheme-for-http-for-https-urls", "title": "Hyper says &quot;Invalid scheme for Http&quot; for HTTPS URLs", "body": "<p>I have</p>\n\n<pre><code>hyper = \"0.10\"\n</code></pre>\n\n<p>And the following code:</p>\n\n<pre><code>let client = Client::new();\nlet mut res = client.get(\"https://google.com\").send().unwrap();\n</code></pre>\n\n<p>Rust gives me the error message, as if it doesn't have SSL support:</p>\n\n<blockquote>\n  <p>Invalid scheme for Http</p>\n</blockquote>\n\n<p>This is on Rust 1.14.0 on Debian jessie.</p>\n\n<p>How do I get Hyper to connect with SSL to an HTTPS URL?</p>\n"}, {"tags": ["build", "dependencies", "rust", "rust-cargo"], "comments": [{"owner": {"reputation": 30359, "user_id": 255688, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/74b63650ed07d745fd9accf52e4d286b?s=128&d=identicon&r=PG", "display_name": "phimuemue", "link": "https://stackoverflow.com/users/255688/phimuemue"}, "edited": false, "score": 0, "creation_date": 1484239287, "post_id": 41618456, "comment_id": 70438440, "body": "Maybe <code>cargo outdated</code> might be usefull?"}, {"owner": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "edited": false, "score": 0, "creation_date": 1484249504, "post_id": 41618456, "comment_id": 70444189, "body": "The cargo lock file has all this information but I&#39;m not sure at which point in the build process it is generated."}, {"owner": {"reputation": 7882, "user_id": 2722968, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/d0a9ce812892f03b8342c5a60be24632?s=128&d=identicon&r=PG&f=1", "display_name": "user2722968", "link": "https://stackoverflow.com/users/2722968/user2722968"}, "edited": false, "score": 0, "creation_date": 1484253249, "post_id": 41618456, "comment_id": 70446310, "body": "<code>Cargo.lock</code> would be a good source but is it actually sound to parse <code>Cargo.lock</code> in <code>build.rs</code>? Is it guaranteed to be up to date and written to disk before <code>build.rs</code> is run?"}, {"owner": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "edited": false, "score": 0, "creation_date": 1484253594, "post_id": 41618456, "comment_id": 70446514, "body": "That&#39;s something I&#39;m unsure of and wouldn&#39;t really want to rely on :)"}], "answers": [{"tags": [], "owner": {"reputation": 7882, "user_id": 2722968, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/d0a9ce812892f03b8342c5a60be24632?s=128&d=identicon&r=PG&f=1", "display_name": "user2722968", "link": "https://stackoverflow.com/users/2722968/user2722968"}, "is_accepted": false, "score": 1, "last_activity_date": 1484322656, "creation_date": 1484322656, "answer_id": 41638455, "question_id": 41618456, "link": "https://stackoverflow.com/questions/41618456/get-list-of-active-dependencies-and-their-versions-during-cargo-build/41638455#41638455", "title": "Get list of active dependencies and their versions during &quot;cargo build&quot;", "body": "<p>My own answer, solved by parsing <code>Cargo.lock</code>. The following gives us a list of dependencies and dependencies of dependencies - every crate that ended up getting linked somehow (lto besides).</p>\n\n<p>In <code>Cargo.toml</code>:</p>\n\n<pre><code>[package]\nname = \"mycrate\"\nversion = \"0.1.0\"\nauthors = [\"John Doe\"]\nbuild = \"build.rs\"\n\n[build-dependencies]\ntoml = \"0.2\"\n</code></pre>\n\n<p>In <code>build.rs</code>:</p>\n\n<pre><code>extern crate toml;\n\nuse std::env;\nuse std::fs;\nuse std::path;\nuse std::io::{Read, Write};\n\nfn main() {\n    // Read Cargo.lock and de-toml it\n    let mut lock_buf = String::new();\n    fs::File::open(\"Cargo.lock\").unwrap().read_to_string(&amp;mut lock_buf).unwrap();\n    let lock_toml = toml::Parser::new(&amp;lock_buf).parse().unwrap();\n\n    // Get the table of [[package]]s. This is the deep list of dependencies and dependencies of\n    // dependencies.\n    let mut packages = Vec::new();\n    for package in lock_toml.get(\"package\").unwrap().as_slice().unwrap() {\n        let package = package.as_table().unwrap();\n        packages.push((package.get(\"name\").unwrap().as_str().unwrap(),\n                       package.get(\"version\").unwrap().as_str().unwrap()));\n    }\n    packages.sort();\n\n    // Write out the file to be included in the module stub\n    let out_dir = env::var(\"OUT_DIR\").unwrap();\n    let mut versions_file = fs::File::create(&amp;path::Path::new(&amp;out_dir).join(\"versions.include\")).unwrap();\n    versions_file.write(format!(\"pub const BUILD_DEPS: [(&amp;'static str, &amp;'static str); {}] = [\", packages.len()).as_ref()).unwrap();\n    for package in packages {\n        versions_file.write(format!(\"(\\\"{}\\\", \\\"{}\\\"),\\n\", package.0, package.1).as_ref()).unwrap();\n    }\n    versions_file.write(\"];\".as_ref()).unwrap();\n}\n</code></pre>\n\n<p>In <code>src/versions.rs</code>:</p>\n\n<pre><code>//! Information about the build-environment\n\n// More info from env!() and friends go here\n\ninclude!(concat!(env!(\"OUT_DIR\"), \"/versions.include\"));\n</code></pre>\n\n<p>In <code>src/main.rs</code> or wherever needed:</p>\n\n<pre><code>mod versions;\n\nfn main() {\n    println!(\"I was built using {}\", versions::BUILD_DEPS.iter().map(|&amp;(ref pkg, ref ver)| format!(\"{} {}\", pkg, ver)).collect::&lt;Vec&lt;_&gt;&gt;().join(\", \"));\n}\n</code></pre>\n\n<p>Output is then like</p>\n\n<blockquote>\n  <p>I was built using android_glue 0.2.1, bitflags 0.3.3, bitflags 0.4.0,\n  bitflags 0.6.0, bitflags 0.7.0, block 0.1.6, byteorder 0.5.3, bytes\n  0.3.0, cfg-if 0.1.0, cgl 0.1.5, cgmath 0.7.0, clippy 0.0.104 ...</p>\n</blockquote>\n\n<p>Of course, we could build a string-like representation at compile time, having it neatly separated gives the opportunity to parse this information at runtime, though.\nAs far as I can see this works if <code>Cargo.lock</code> is not present: Cargo always generates it before <code>build.rs</code> is run.</p>\n"}], "owner": {"reputation": 7882, "user_id": 2722968, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/d0a9ce812892f03b8342c5a60be24632?s=128&d=identicon&r=PG&f=1", "display_name": "user2722968", "link": "https://stackoverflow.com/users/2722968/user2722968"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 608, "favorite_count": 0, "answer_count": 1, "score": 5, "last_activity_date": 1484497902, "creation_date": 1484239047, "last_edit_date": 1484497902, "question_id": 41618456, "link": "https://stackoverflow.com/questions/41618456/get-list-of-active-dependencies-and-their-versions-during-cargo-build", "title": "Get list of active dependencies and their versions during &quot;cargo build&quot;", "body": "<p>Some crates offer a pub <code>const &amp;str</code>-version string, some do not. To have a general solution, I need a list of all dependencies and their versions as known to and used by <code>cargo build</code> during compilation so I can build my own <code>const &amp;str</code> of <em>This is my own version and all the versions I was compiled with</em>-Debug output.</p>\n\n<p>Is it possible to get a list of all dependencies and their version in <code>build.rs</code> ?</p>\n\n<p><code>Cargo.lock</code> seems to be a good source. Is it actually sound to parse <code>Cargo.lock</code> in <code>build.rs</code>? Is it guaranteed to have been updated to what Cargo actually uses and written to disk? </p>\n"}, {"tags": ["rust", "trait-objects"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1484238306, "post_id": 41618100, "comment_id": 70437785, "body": "There is a dissonance here: <code>Option&lt;T&gt;</code> <i>own</i> the <code>T</code>, whilst <code>Rc&lt;Any&gt;</code> is only one of the <i>co-owners</i> of the object. I can see two ways of handling this: returning <code>None</code> if there are multiple owners or converting the function to convert from <code>&amp;Rc&lt;Any&gt;</code> to <code>Option&lt;&amp;T&gt;</code>. Is the first one really what you want?"}, {"owner": {"reputation": 813, "user_id": 1333945, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/5ba8a397763592097387117373dbb13a?s=128&d=identicon&r=PG", "display_name": "Nathan Ringo", "link": "https://stackoverflow.com/users/1333945/nathan-ringo"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1484238437, "post_id": 41618100, "comment_id": 70437873, "body": "That&#39;s what the <a href=\"https://doc.rust-lang.org/std/rc/struct.Rc.html#method.try_unwrap\" rel=\"nofollow noreferrer\"><code>try_unwrap</code></a> is for -- it ensures that the given <code>Rc</code> is the only owner. &quot;<code>concretify</code>&quot; should return <code>None</code> if either there are multiple owners or if the <code>Any</code> is not <code>T</code>."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1484238682, "post_id": 41618100, "comment_id": 70438060, "body": "Just checking :) In this case, are you okay with <code>None</code> or would you rather return a <code>Result</code> which specify in its <code>Err</code> field whether the issue is a mismatched type or multiple owners?"}, {"owner": {"reputation": 813, "user_id": 1333945, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/5ba8a397763592097387117373dbb13a?s=128&d=identicon&r=PG", "display_name": "Nathan Ringo", "link": "https://stackoverflow.com/users/1333945/nathan-ringo"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1484238771, "post_id": 41618100, "comment_id": 70438115, "body": "If I were a better person, I&#39;d want the <code>Result</code> :) If it&#39;s only possible with a <code>Result</code>, I&#39;ll certainly accept that, but I&#39;m relatively certain that the semantics of the problem are the same, regardless of whether I use <code>Option</code>, <code>Result</code>, or <code>panic!(&quot;something bad happened guys&quot;)</code>"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1484241021, "post_id": 41618100, "comment_id": 70439583, "body": "Yes, it&#39;s only a cosmetic change :)"}], "answers": [{"comments": [{"owner": {"reputation": 813, "user_id": 1333945, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/5ba8a397763592097387117373dbb13a?s=128&d=identicon&r=PG", "display_name": "Nathan Ringo", "link": "https://stackoverflow.com/users/1333945/nathan-ringo"}, "edited": false, "score": 2, "creation_date": 1484242892, "post_id": 41619534, "comment_id": 70440645, "body": "I&#39;m afraid I&#39;m not sure what part of the linked question prevents going from <code>Box&lt;Any&gt;</code> to <code>T</code>; that&#39;s what <a href=\"https://doc.rust-lang.org/std/boxed/struct.Box.html#method.downcast\" rel=\"nofollow noreferrer\"><code>Box&lt;Any&gt;::downcast()</code></a> does. I&#39;m just trying (at this point) to convert <code>Rc&lt;Trait&gt;</code> to <code>Box&lt;Trait&gt;</code>. (Editing question to clarify this)"}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "reply_to_user": {"reputation": 813, "user_id": 1333945, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/5ba8a397763592097387117373dbb13a?s=128&d=identicon&r=PG", "display_name": "Nathan Ringo", "link": "https://stackoverflow.com/users/1333945/nathan-ringo"}, "edited": false, "score": 0, "creation_date": 1484244732, "post_id": 41619534, "comment_id": 70441680, "body": "Hmm, I always forget that part of the <code>Any</code> docs are under <code>Box&lt;Any&gt;</code>!  Good point, it isn&#39;t clear and now I&#39;m less sure; I&#39;ll see if I can improve my answer later."}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": false, "score": 2, "last_activity_date": 1484242463, "last_edit_date": 1592644375, "creation_date": 1484242463, "answer_id": 41619534, "question_id": 41618100, "link": "https://stackoverflow.com/questions/41618100/rctrait-to-optiont/41619534#41619534", "title": "Rc&lt;Trait&gt; to Option&lt;T&gt;?", "body": "<p>I don't think it's possible to implement your <code>concretify</code> function if you're expecting it to move the original value back out of the <code>Rc</code>; see <a href=\"https://stackoverflow.com/questions/40024093/downcast-traits-inside-rc-for-ast-manipulation\">this question</a> for why.</p>\n<p>If you're willing to return a clone, it's straightforward:</p>\n<pre><code>fn concretify&lt;T: Any+Clone&gt;(rc: Rc&lt;Any&gt;) -&gt; Option&lt;T&gt; {\n    rc.downcast_ref().map(Clone::clone)\n}\n</code></pre>\n<p>Here's a test:</p>\n<pre><code>#[derive(Debug,Clone)]\nstruct Foo(u32);\n\n#[derive(Debug,Clone)]\nstruct Bar(i32);\n\nfn main() {\n    let rc_foo: Rc&lt;Any&gt; = Rc::new(Foo(42));\n    let rc_bar: Rc&lt;Any&gt; = Rc::new(Bar(7));\n    \n    let foo: Option&lt;Foo&gt; = concretify(rc_foo);\n    println!(&quot;Got back: {:?}&quot;, foo);\n    let bar: Option&lt;Foo&gt; = concretify(rc_bar);\n    println!(&quot;Got back: {:?}&quot;, bar);\n}\n</code></pre>\n<p>This outputs:</p>\n<blockquote>\n<p>Got back: Some(Foo(42))</p>\n<p>Got back: None</p>\n</blockquote>\n<p><a href=\"https://play.rust-lang.org/?gist=245b4e6077c136b4df75b58a909bb00b&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground</a></p>\n<p>If you want something more &quot;movey&quot;, and creating your values is cheap, you could also make a dummy, use <code>downcast_mut()</code> instead of <code>downcast_ref()</code>, and then <code>std::mem::swap</code> with the dummy.</p>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 3, "last_activity_date": 1484292966, "last_edit_date": 1484292966, "creation_date": 1484248030, "answer_id": 41621011, "question_id": 41618100, "link": "https://stackoverflow.com/questions/41618100/rctrait-to-optiont/41621011#41621011", "title": "Rc&lt;Trait&gt; to Option&lt;T&gt;?", "body": "<p>Unfortunately, it appears that the API of <code>Rc</code> is lacking the necessary method to be able to get ownership of the wrapped type when it is <code>!Sized</code>.</p>\n\n<p>The only method which may return the interior item of a <code>Rc</code> is <code>Rc::try_unwrap</code>, however it returns <code>Result&lt;T, Rc&lt;T&gt;&gt;</code> which requires that <code>T</code> be <code>Sized</code>.</p>\n\n<p>In order to do what you wish, you would need to have a method with a signature: <code>Rc&lt;T&gt; -&gt; Result&lt;Box&lt;T&gt;, Rc&lt;T&gt;&gt;</code>, which would allow <code>T</code> to be <code>!Sized</code>, and from there you could extract <code>Box&lt;Any&gt;</code> and perform the <code>downcast</code> call.</p>\n\n<p>However, this method is impossible due to how <code>Rc</code> is implemented. Here is a stripped down version of <code>Rc</code>:</p>\n\n<pre><code>struct RcBox&lt;T: ?Sized&gt; {\n    strong: Cell&lt;usize&gt;,\n    weak: Cell&lt;usize&gt;,\n    value: T,\n}\n\npub struct Rc&lt;T: ?Sized&gt; {\n    ptr: *mut RcBox&lt;T&gt;,\n    _marker: PhantomData&lt;T&gt;,\n}\n</code></pre>\n\n<p>Therefore, the only <code>Box</code> you can get out of <code>Rc&lt;T&gt;</code> is <code>Box&lt;RcBox&lt;T&gt;&gt;</code>.</p>\n\n<p>Note that the design is severely constrained here:</p>\n\n<ul>\n<li>single-allocation mandates that all 3 elements be in a single <code>struct</code></li>\n<li><code>T: ?Sized</code> mandates that <code>T</code> be the last field</li>\n</ul>\n\n<p>so there is little room for improvement in general.</p>\n\n<hr>\n\n<p>However, in your specific case, it is definitely possible to improve on the generic situation. It does, of course, require <code>unsafe</code> code. And while it works fairly well with <code>Rc</code>, implementing it with <code>Arc</code> would be complicated by the potential data-races.</p>\n\n<p>Oh... and the code is provided as is, no warranty implied ;)</p>\n\n<pre><code>use std::any::Any;\nuse std::{cell, mem, ptr};\nuse std::rc::Rc;\n\nstruct RcBox&lt;T: ?Sized&gt; {\n    strong: cell::Cell&lt;usize&gt;,\n    _weak: cell::Cell&lt;usize&gt;,\n    value: T,\n}\n\nfn concretify&lt;T: Any&gt;(rc: Rc&lt;Any&gt;) -&gt; Option&lt;T&gt; {\n    //  Will be responsible for freeing the memory if there is no other weak\n    //  pointer by the end of this function.\n    let _guard = Rc::downgrade(&amp;rc);\n\n    unsafe {\n        let killer: &amp;RcBox&lt;Any&gt; = {\n            let killer: *const RcBox&lt;Any&gt; = mem::transmute(rc);\n            &amp;*killer \n        };\n\n        if killer.strong.get() != 1 { return None; }\n\n        //  Do not forget to decrement the count if we do take ownership,\n        //  as otherwise memory will not get released.\n        let result = killer.value.downcast_ref().map(|r| {\n            killer.strong.set(0);\n            ptr::read(r as *const T)\n        });\n\n        //  Do not forget to destroy the content of the box if we did not\n        //  take ownership\n        if result.is_none() {\n            let _: Rc&lt;Any&gt; = mem::transmute(killer as *const RcBox&lt;Any&gt;);\n        }\n\n        result\n    }\n}\n\nfn main() {\n    let x: Rc&lt;Any&gt; = Rc::new(1);\n    println!(\"{:?}\", concretify::&lt;i32&gt;(x));\n}\n</code></pre>\n"}], "owner": {"reputation": 813, "user_id": 1333945, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/5ba8a397763592097387117373dbb13a?s=128&d=identicon&r=PG", "display_name": "Nathan Ringo", "link": "https://stackoverflow.com/users/1333945/nathan-ringo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 493, "favorite_count": 0, "accepted_answer_id": 41621011, "answer_count": 2, "score": 2, "last_activity_date": 1484292966, "creation_date": 1484237951, "last_edit_date": 1484243648, "question_id": 41618100, "link": "https://stackoverflow.com/questions/41618100/rctrait-to-optiont", "title": "Rc&lt;Trait&gt; to Option&lt;T&gt;?", "body": "<p>I'm trying to implement a method that looks like:</p>\n\n<pre><code>fn concretify&lt;T: Any&gt;(rc: Rc&lt;Any&gt;) -&gt; Option&lt;T&gt; {\n    Rc::try_unwrap(rc).ok().and_then(|trait_object| {\n        let b: Box&lt;Any&gt; = unimplemented!();\n        b.downcast().ok().map(|b| *b)\n    })\n}\n</code></pre>\n\n<p>However, <code>try_unwrap</code> doesn't work on trait objects (which makes sense, as they're unsized). My next thought was to try to find some function that unwraps <code>Rc&lt;Any&gt;</code> into <code>Box&lt;Any&gt;</code> directly. The closest thing I could find would be</p>\n\n<pre><code>if Rc::strong_count(&amp;rc) == 1 {\n    Some(unsafe {\n        Box::from_raw(Rc::into_raw(rc))\n    })\n} else {\n    None\n}\n</code></pre>\n\n<p>However, <code>Rc::into_raw()</code> appears to require that the type contained in the <code>Rc</code> to be <code>Sized</code>, and I'd ideally not like to have to use <code>unsafe</code> blocks.</p>\n\n<p>Is there any way to implement this?</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=a1e05e1d299c5ecffc9c57600a3f6c5e&amp;version=stable&amp;backtrace=2\" rel=\"nofollow noreferrer\">Playground Link</a>, I'm looking for an implementation of <code>rc_to_box</code> here.</p>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "edited": false, "score": 5, "creation_date": 1484250580, "post_id": 41617830, "comment_id": 70444823, "body": "I don&#39;t have a complete answer for you so I&#39;m just going to leave a comment. 1) The closer analogy for a trait in C# would be an interface. How would you approach solving this with an interface? 2) Can you explain at a higher level what problem you&#39;re trying to solve? Why do implementations of the trait need to hold a piece of immutable data? Why does it need to be immutable?"}, {"owner": {"reputation": 3370, "user_id": 2819650, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/fd1c2520461767f78a63e6cfb6431b1c?s=128&d=identicon&r=PG&f=1", "display_name": "coredump", "link": "https://stackoverflow.com/users/2819650/coredump"}, "edited": false, "score": 2, "creation_date": 1484253886, "post_id": 41617830, "comment_id": 70446681, "body": "Looks like XY problem. What exactly you are trying to do?"}], "answers": [{"comments": [{"owner": {"reputation": 2916, "user_id": 3646096, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/KUofm.jpg?s=128&g=1", "display_name": "M&#225;rio Feroldi", "link": "https://stackoverflow.com/users/3646096/m%c3%a1rio-feroldi"}, "edited": false, "score": 0, "creation_date": 1563039338, "post_id": 41688814, "comment_id": 100573147, "body": "<code>let foo = mut foo;</code> should be <code>let mut foo = foo;</code>"}], "tags": [], "owner": {"reputation": 13635, "user_id": 547365, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/ddefbca930fdd39846b698bab7ac3146?s=128&d=identicon&r=PG", "display_name": "w.brian", "link": "https://stackoverflow.com/users/547365/w-brian"}, "is_accepted": true, "score": 2, "last_activity_date": 1484667389, "last_edit_date": 1495540917, "creation_date": 1484625238, "answer_id": 41688814, "question_id": 41617830, "link": "https://stackoverflow.com/questions/41617830/immutable-data-on-a-trait/41688814#41688814", "title": "Immutable data on a trait", "body": "<p>The short answer to your question is <strong>no</strong>. There is no way to accomplish this in a way analogous to the C# approach. Fortunately, Rust provides better control over mutability than C#.</p>\n\n<p>Understanding how immutability works in Rust and how it differs from languages like C# and Java is important.</p>\n\n<p><strong>Immutability in C#</strong></p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>class Foo {\n   readonly Bar bar = new Bar();\n   uint lives;\n}\n</code></pre>\n\n<p>Some things to note:</p>\n\n<ul>\n<li>Immutability is defined per-field.</li>\n<li>Immutability is shallow. For example, even though the reference to <code>bar</code> is immutable, the values that <code>bar</code> refers to are still mutable.</li>\n<li>Immutability in C# is easily subverted by reflection. There are <a href=\"https://stackoverflow.com/a/6063546/547365\">edge cases</a> where it can be subverted even without reflection.</li>\n</ul>\n\n<p><strong>Immutability in Rust</strong></p>\n\n<pre class=\"lang-rs prettyprint-override\"><code>struct Foo {\n    bar: Bar,\n    lives: u32\n}\n</code></pre>\n\n<p>The first thing to note is that the struct definition says nothing of the immutability of its fields. That's because there is no such thing as field-level mutability in rust. Mutability in Rust is defined on the <em>binding</em> to a value:</p>\n\n<pre class=\"lang-rs prettyprint-override\"><code>// Declare an immutable binding to a Foo\nlet foo = Foo { bar: Bar::new(), lives: 10 };\n\n// Attempting to mutate the value that foo points to is a compile error\nfoo.lives = 5; // compile error!\n\nfoo.bar.baz = 6; // Also a compile error, foo is deeply immutable\n\n// We can redefine the binding to be mutable\nlet foo = mut foo; // foo is now mutable!\n\nfoo.lives = 5; // mutating foo here would be valid\nfoo.bar.baz = 6; // this is also valid, foo is deeply mutable\n</code></pre>\n\n<p>As you can see, mutability in Rust is simpler and less nuanced than in C#: It's the binding to a value that determines if it's mutable, and it's either deeply mutable or deeply immutable<sup>*</sup>.</p>\n\n<p><strong>With all that out of the way, let's try to model your problem in Rust.</strong> </p>\n\n<p>First, we'll define a trait with an equivalent <code>GetNumber()</code> method:</p>\n\n<pre class=\"lang-rs prettyprint-override\"><code>trait Bar {\n    fn number(&amp;self) -&gt; u32;\n}\n</code></pre>\n\n<p>Since <code>number()</code> takes an immutable binding to <code>self</code>, any type that implements <code>Bar</code> will not be able to mutate itself via a call to <code>number()</code>:</p>\n\n<pre class=\"lang-rs prettyprint-override\"><code>struct Foo {\n    number: u32,\n    oranges: u32\n}\n\nimpl Bar for Foo {\n    fn number(&amp;self) -&gt; u32 {\n        self.number += 1; // Compile error. We have an immutable binding to self\n        self.number\n    }\n}\n</code></pre>\n\n<p>As you can see, controlling mutability in Rust is all about controlling how bindings are defined.</p>\n\n<p>Let's introduce a method to our trait that defines a mutable binding to <code>self</code> and update our implementation on <code>Foo</code>:</p>\n\n<pre class=\"lang-rs prettyprint-override\"><code>trait Bar {\n    fn number(&amp;self) -&gt; u32;\n    fn inc_oranges(&amp;mut self);\n}\n\nimpl Bar for Foo {\n    fn number(&amp;self) -&gt; u32 {\n        self.number\n    }\n\n    fn inc_oranges(&amp;mut self) {\n        // We have a mutable reference to self. We can mutate any part of self:\n        self.oranges += 1;\n        self.number += 1; // We can *also* mutate number\n    }\n}\n</code></pre>\n\n<p>This is where you might start favoring the C# approach: In C#, you can declare <code>number</code> as a readonly field while leaving <code>oranges</code> to be mutable, but in Rust, if a trait declares a mutable binding to <code>self</code>, any part of <code>self</code> can be mutated. Fortunately, there is a way around this.</p>\n\n<p><sup>*</sup><strong>Interior mutability</strong></p>\n\n<p>Rust provides a way mutate values that are part of an immutable binding by way of the <a href=\"https://doc.rust-lang.org/std/cell/\" rel=\"nofollow noreferrer\">cell</a> module. To make a long story short, these types allow for mutation while still accommodating the guarantees afforded by using immutable bindings. It does this by moving what would otherwise be a compile-time (zero-cost) check to a runtime check.</p>\n\n<p>Let's put it all together now:</p>\n\n<pre class=\"lang-rs prettyprint-override\"><code>struct Foo {\n    number: u32,\n    orange: Cell(u32) // allow mutation via an immutable binding\n}\n\ntrait Bar {\n    fn number(&amp;self) -&gt; u32;\n    fn inc_oranges(&amp;self); // self is now an immutable binding\n}\n\nimpl Bar for Foo {\n    fn number(&amp;self) -&gt; u32 {\n        self.number\n    }\n\n    fn inc_oranges(&amp;self) {\n\n        // We can mutate oranges via cell functions even though self is immutable\n        let cur_oranges = self.oranges.get();\n        self.oranges.set(cur_oranges + 1);\n\n        self.number += 1; // This would be a compile error\n    }\n}\n</code></pre>\n\n<p>In summary, we can effectively achieve an equivalent to your C# example by way of:</p>\n\n<ul>\n<li>Defining immutable bindings to <code>self</code> on impls</li>\n<li>Using cell types to allow interior mutability on immutable bindings</li>\n</ul>\n\n<p>With all that being said, it wouldn't be idiomatic or performant to model all your types this way. What's more important is knowing when and where it's appropriate to allow mutation, not micro-managing mutation of specific fields via cell types.</p>\n"}], "owner": {"reputation": 2244, "user_id": 1825860, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/b9e1d70a0cbe81683a016e700d3239bf?s=128&d=identicon&r=PG", "display_name": "AlphaModder", "link": "https://stackoverflow.com/users/1825860/alphamodder"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 303, "favorite_count": 0, "accepted_answer_id": 41688814, "answer_count": 1, "score": 2, "last_activity_date": 1484667389, "creation_date": 1484237169, "last_edit_date": 1484497467, "question_id": 41617830, "link": "https://stackoverflow.com/questions/41617830/immutable-data-on-a-trait", "title": "Immutable data on a trait", "body": "<p>I'm trying to define a trait with a method returning some data, but this data must not be changed by the <code>impl</code>, i.e. it can only be set once and remain in that value for the lifetime of the <code>impl</code>. Is there any way to ensure this? </p>\n\n<p>Here's how I would accomplish this in C#, for reference:</p>\n\n<pre><code>public abstract class Foo \n{\n    private readonly uint number;\n\n    public Foo(uint number) { this.number = numbers; }\n\n    public uint GetNumber() { return number; }\n\n}\n</code></pre>\n"}, {"tags": ["rust", "convention", "builder-pattern"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 2, "creation_date": 1484236220, "post_id": 41617182, "comment_id": 70436206, "body": "While I&#39;m not a fan of the builder pattern, I&#39;d just follow the simple approach from the <a href=\"https://doc.rust-lang.org/book/method-syntax.html#builder-pattern\" rel=\"nofollow noreferrer\">Rust book</a>. It&#39;s pretty idiomatic."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1484236410, "post_id": 41617182, "comment_id": 70436351, "body": "Also not <i>especially</i> a fan, coming Python code that used keyword style, eg:  <code>ui.button(label=&quot;Test&quot;, align=&#39;CENTER&#39;)</code> style, so looking for something similar in Rust."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1484292859, "post_id": 41617182, "comment_id": 70459106, "body": "@ideasman42: Rust has <code>Button { label = &quot;Test&quot;, align = &quot;CENTER&quot;, .. Default::default() }</code> syntax :)"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1484293098, "post_id": 41617182, "comment_id": 70459201, "body": "Yes, I strongly considered using this style of syntax... (will ask another question on this infact), btw, wouldn&#39;t it be:  <code>Button { label: &quot;Test&quot;, ....</code> ?"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1484294287, "post_id": 41617182, "comment_id": 70459722, "body": "@MatthieuM. Asked here: <a href=\"http://stackoverflow.com/questions/41629819\">stackoverflow.com/questions/41629819</a>"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1484294316, "post_id": 41617182, "comment_id": 70459733, "body": "@ideasman42: Just upvoted it ;)"}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1484236524, "post_id": 41617304, "comment_id": 70436446, "body": "The book, instead, uses a mutable reference to pass the builder (no lifetime), see <a href=\"https://doc.rust-lang.org/book/method-syntax.html#builder-pattern\" rel=\"nofollow noreferrer\">Builder Pattern</a>. I expect this is for efficiency."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1484237097, "post_id": 41617304, "comment_id": 70436908, "body": "Ah, and interestingly... I <i>also</i> disagree (with both the book and you) on passing <code>&amp;self</code> to <code>build</code>. Put a <code>String</code> in <code>FooBuilder</code>, and you&#39;ll be forced to <code>clone</code> it in <code>build</code>, even if nobody which to reuse the instance of the builder... that&#39;s clearly wasteful."}], "tags": [], "owner": {"reputation": 813, "user_id": 1333945, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/5ba8a397763592097387117373dbb13a?s=128&d=identicon&r=PG", "display_name": "Nathan Ringo", "link": "https://stackoverflow.com/users/1333945/nathan-ringo"}, "is_accepted": false, "score": 2, "last_activity_date": 1484236413, "last_edit_date": 1484236413, "creation_date": 1484235793, "answer_id": 41617304, "question_id": 41617182, "link": "https://stackoverflow.com/questions/41617182/how-to-write-an-idiomatic-build-pattern-with-chained-method-calls-in-rust/41617304#41617304", "title": "How to write an idiomatic build pattern with chained method calls in Rust?", "body": "<p>I've seen the builder pattern mostly implemented by taking ownership of the Builder when modifying it, and by reference for <code>build()</code>. For example,</p>\n\n<pre><code>#[derive(Debug, Eq, PartialEq)]\nstruct Foo {\n    value: usize,\n}\n\nstruct FooBuilder {\n    foos: usize,\n    bars: usize,\n}\n\nimpl FooBuilder {\n    fn new() -&gt; FooBuilder {\n        FooBuilder {\n            foos: 0,\n            bars: 0,\n        }\n    }\n    fn set_foos(mut self, foos: usize) -&gt; FooBuilder {\n        self.foos = foos;\n        self\n    }\n    fn set_bars(mut self, bars: usize) -&gt; FooBuilder {\n        self.bars = bars;\n        self\n    }\n    fn build(&amp;self) -&gt; Foo {\n        Foo {\n            value: self.foos + self.bars,\n        }\n    }\n}\n\nfn main() {\n    let foo = FooBuilder::new()\n        .set_foos(2)\n        .set_bars(3)\n        .build();\n    assert_eq!(foo, Foo { value: 5 });\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?code=%23[derive(Debug%2C%20Eq%2C%20PartialEq)]struct%20Foo%20%7B%20%20%20%20value%3A%20usize%2C%7Dstruct%20FooBuilder%20%7B%20%20%20%20foos%3A%20usize%2C%20%20%20%20bars%3A%20usize%2C%7Dimpl%20FooBuilder%20%7B%20%20%20%20fn%20new()%20-&gt;%20FooBuilder%20%7B%20%20%20%20%20%20%20%20FooBuilder%20%7B%20%20%20%20%20%20%20%20%20%20%20%20foos%3A%200%2C%20%20%20%20%20%20%20%20%20%20%20%20bars%3A%200%2C%20%20%20%20%20%20%20%20%7D%20%20%20%20%7D%20%20%20%20fn%20set_foos(mut%20self%2C%20foos%3A%20usize)%20-&gt;%20FooBuilder%20%7B%20%20%20%20%20%20%20%20self.foos%20%3D%20foos%3B%20%20%20%20%20%20%20%20self%20%20%20%20%7D%20%20%20%20fn%20set_bars(mut%20self%2C%20bars%3A%20usize)%20-&gt;%20FooBuilder%20%7B%20%20%20%20%20%20%20%20self.bars%20%3D%20bars%3B%20%20%20%20%20%20%20%20self%20%20%20%20%7D%20%20%20%20fn%20build(%26self)%20-&gt;%20Foo%20%7B%20%20%20%20%20%20%20%20Foo%20%7B%20%20%20%20%20%20%20%20%20%20%20%20value%3A%20self.foos%20%2B%20self.bars%2C%20%20%20%20%20%20%20%20%7D%20%20%20%20%7D%7Dfn%20main()%20%7B%20%20%20%20let%20foo%20%3D%20FooBuilder%3A%3Anew()%20%20%20%20%20%20%20%20.set_foos(2)%20%20%20%20%20%20%20%20.set_bars(3)%20%20%20%20%20%20%20%20.build()%3B%20%20%20%20assert_eq!(foo%2C%20Foo%20%7B%20value%3A%205%20%7D)%3B%7D&amp;version=stable&amp;backtrace=2\" rel=\"nofollow noreferrer\">Try on Rust Playground</a></p>\n\n<p>This makes chaining simple, while allowing reuse of the builder.</p>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 6, "last_activity_date": 1484237030, "creation_date": 1484237030, "answer_id": 41617772, "question_id": 41617182, "link": "https://stackoverflow.com/questions/41617182/how-to-write-an-idiomatic-build-pattern-with-chained-method-calls-in-rust/41617772#41617772", "title": "How to write an idiomatic build pattern with chained method calls in Rust?", "body": "<p>There are actually <em>two</em> trade-offs:</p>\n\n<ul>\n<li>should the named setter accept <code>self</code> by value or reference?</li>\n<li>should the final <code>build</code> method accept <code>self</code> by value or reference?</li>\n</ul>\n\n<p>My recommendation is:</p>\n\n<ul>\n<li>mutable reference for the setters</li>\n<li>value for the <code>build</code> method</li>\n</ul>\n\n<p>This differs slightly from the <a href=\"https://doc.rust-lang.org/book/method-syntax.html#builder-pattern\" rel=\"noreferrer\">Builder Pattern</a> presented in the Rust Book which uses a reference in <code>build</code>.</p>\n\n<hr>\n\n<p><em>Why passing by mutable reference for the setters?</em></p>\n\n<p>While a compiler <em>may</em> optimize away the moves caused by a call to <code>fn label(self, &amp;str) -&gt; ButtonBuilder</code>, it is not guaranteed.</p>\n\n<p>On the other hand, the mutable reference way is already optimal so that you need not rely on the optimizer.</p>\n\n<hr>\n\n<p><em>Why passing by value for the final <code>build</code>?</em></p>\n\n<p>For builders only composed of <code>Copy</code> fields, there is no difference between <code>build</code> taking <code>self</code> or <code>&amp;self</code>.</p>\n\n<p>However, as soon as the builder contains non-<code>Copy</code> fields, passing <code>&amp;self</code> to <code>build</code> requires deep-cloning these fields.</p>\n\n<p>On the other hand, passing <code>self</code> by value allows <code>build</code> to move the fields, which avoid unnecessary copies.</p>\n\n<p>If one wishes to re-use the builder, then the builder should implement <code>Clone</code>.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2160, "favorite_count": 0, "answer_count": 2, "score": 0, "last_activity_date": 1484237030, "creation_date": 1484235478, "last_edit_date": 1495541829, "question_id": 41617182, "link": "https://stackoverflow.com/questions/41617182/how-to-write-an-idiomatic-build-pattern-with-chained-method-calls-in-rust", "title": "How to write an idiomatic build pattern with chained method calls in Rust?", "body": "<p>Based on the following examples, its possible to write a build-pattern with chained method calls in Rust which either passes by value or by reference (with a lifetime specifier)</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/38158167\">Is it possible to create a macro to implement builder pattern methods?</a></li>\n<li><a href=\"https://stackoverflow.com/q/28000113/432509\">How to overload the &#39;new&#39; method?</a> (top answer)</li>\n<li><a href=\"https://github.com/rust-unofficial/patterns/blob/master/patterns/builder.md\" rel=\"nofollow noreferrer\">https://github.com/rust-unofficial/patterns/blob/master/patterns/builder.md</a></li>\n</ul>\n\n<p>A builder pattern in Rust may look something like this:</p>\n\n<pre><code> ui::Button::new()\n    .label(\"Test\")\n    .align(Align::Center)\n    .build();\n</code></pre>\n\n<p>When writing idiomatic Rust is there a strong preference for one over another?</p>\n\n<p>Is there some good example of how to write this in Rust?</p>\n"}, {"tags": ["rust", "http-proxy", "hyper"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1484229378, "post_id": 41614923, "comment_id": 70431224, "body": "Aren&#39;t all these errors caused by the fact you are trying to print the <code>response</code> in debug mode while it doesn&#39;t implement <code>Debug</code>?"}, {"owner": {"reputation": 10672, "user_id": 321731, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/88e60659e997d36af3ff348b3251e1a6?s=128&d=identicon&r=PG", "display_name": "tshepang", "link": "https://stackoverflow.com/users/321731/tshepang"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1484230461, "post_id": 41614923, "comment_id": 70431963, "body": "I get the same error even if I don&#39;t print anything"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1484230650, "post_id": 41614923, "comment_id": 70432099, "body": "None of the structures on <a href=\"https://docs.rs/hyper-native-tls/0.2.0/hyper_native_tls/\" rel=\"nofollow noreferrer\"><code>hyper_native_tls</code></a> seem to impl <code>Debug</code>, so the behaviour seen on that code would be correct. Please make sure that you are not performing any <code>fmt()</code> and update the question with your findings."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1484231014, "post_id": 41614923, "comment_id": 70432355, "body": "@E_net4: Should probably be an answer. I checked <a href=\"https://docs.rs/hyper/0.10.0/hyper/client/struct.ProxyConfig.html\" rel=\"nofollow noreferrer\"><code>ProxyConfig</code></a> and <a href=\"https://docs.rs/hyper/0.10.0/hyper/client/struct.Client.html#method.with_proxy_config\" rel=\"nofollow noreferrer\"><code>Client</code></a> and neither require <code>Debug</code>, so it seems the OP is shooting himself in the foot... and that the error message isn&#39;t great. Or maybe he&#39;s not using the latest version of hyper (0.10.0) and thus the docs I&#39;m consulting are not good."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1484231394, "post_id": 41614923, "comment_id": 70432607, "body": "@MatthieuM. In a way, that is true. On the other hand, the question is of poor quality and doesn&#39;t refer at all to the use of <code>Debug</code>-formatted output in its phrasing. I&#39;d rather let it either be improved or deleted. I also wonder whether there&#39;s a suitable duplicate."}, {"owner": {"reputation": 10672, "user_id": 321731, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/88e60659e997d36af3ff348b3251e1a6?s=128&d=identicon&r=PG", "display_name": "tshepang", "link": "https://stackoverflow.com/users/321731/tshepang"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1484231771, "post_id": 41614923, "comment_id": 70432904, "body": "I&#39;ve updated the Question @E_net4"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1484232121, "post_id": 41614923, "comment_id": 70433151, "body": "And the error still states &quot;cannot be formatted using <code>:?</code>&quot;?"}, {"owner": {"reputation": 10672, "user_id": 321731, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/88e60659e997d36af3ff348b3251e1a6?s=128&d=identicon&r=PG", "display_name": "tshepang", "link": "https://stackoverflow.com/users/321731/tshepang"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1484232636, "post_id": 41614923, "comment_id": 70433507, "body": "@ljedrz yeah, same error"}], "answers": [{"comments": [{"owner": {"reputation": 10672, "user_id": 321731, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/88e60659e997d36af3ff348b3251e1a6?s=128&d=identicon&r=PG", "display_name": "tshepang", "link": "https://stackoverflow.com/users/321731/tshepang"}, "edited": false, "score": 0, "creation_date": 1484241653, "post_id": 41618808, "comment_id": 70439939, "body": "<a href=\"https://github.com/sfackler/hyper-native-tls/commit/30e9d1574774aa9267ca8d4770f9af21f04edb13\" rel=\"nofollow noreferrer\">github.com/sfackler/hyper-native-tls/commit/&hellip;</a>"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 10672, "user_id": 321731, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/88e60659e997d36af3ff348b3251e1a6?s=128&d=identicon&r=PG", "display_name": "tshepang", "link": "https://stackoverflow.com/users/321731/tshepang"}, "edited": false, "score": 0, "creation_date": 1484258197, "post_id": 41618808, "comment_id": 70448873, "body": "@Tshepang Good job. ;)"}], "tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": true, "score": 4, "last_activity_date": 1484271261, "last_edit_date": 1484271261, "creation_date": 1484240101, "answer_id": 41618808, "question_id": 41614923, "link": "https://stackoverflow.com/questions/41614923/how-to-reach-an-https-site-via-proxy-with-hyper/41618808#41618808", "title": "How to reach an HTTPS site via proxy with Hyper?", "body": "<p>There were some untested conflicts around the crates <code>hyper_native_tls</code> and <code>native_tls</code>.</p>\n\n<p>Currently, there is a restriction on the implementation of <code>SslClient</code> for <code>NativeTlsClient</code> that requires <code>T: Debug</code> (<a href=\"https://github.com/sfackler/hyper-native-tls/blob/master/src/lib.rs#L122\" rel=\"nofollow noreferrer\">code</a>). The code in the question does not compile because <code>TlsStream</code> does not implement Debug, regardless of its parameter type.</p>\n\n<p>At first one could consider removing the aforementioned constraint. But that triggers a few other errors in <code>hyper_native_tls</code>:</p>\n\n<pre><code>error[E0277]: the trait bound `T: std::fmt::Debug` is not satisfied\n   --&gt; src/lib.rs:129:45\n    |\n129 |             Err(e) =&gt; Err(hyper::Error::Ssl(Box::new(e))),\n    |                                             ^^^^^^^^^^^ the trait `std::fmt::Debug` is not implemented for `T`\n    |\n    = help: consider adding a `where T: std::fmt::Debug` bound\n    = note: required because of the requirements on the impl of `std::error::Error` for `native_tls::HandshakeError&lt;T&gt;`\n    = note: required for the cast to the object type `std::error::Error + std::marker::Sync + std::marker::Send + 'static`\n</code></pre>\n\n<p>Going down the rabbit hole, we discover that <a href=\"https://docs.rs/native-tls/0.1.1/native_tls/enum.HandshakeError.html\" rel=\"nofollow noreferrer\"><code>native_tls::HandshakeError</code></a> holds a parameter type <code>S</code> of the stream that was interrupted (in case of this particular error). This became another problem because the type only implements <code>Debug</code> where <code>S: Debug</code>, and according to the <a href=\"https://doc.rust-lang.org/stable/std/error/trait.Error.html\" rel=\"nofollow noreferrer\">Error</a> trait, error types must always implement <code>Debug</code>.</p>\n\n<p>A fix to this particular issue is to provide <code>Debug</code> to <code>TlsStream</code>: </p>\n\n<pre><code>#[derive(Debug, Clone)]\npub struct TlsStream&lt;S&gt;(Arc&lt;Mutex&lt;native_tls::TlsStream&lt;S&gt;&gt;&gt;);\n</code></pre>\n\n<p>The first code snippet still won't compile because <code>ssl</code> is being used after moving, and copying is not tolerated here. The second snippet works by cloning the object, which is unfortunately not implemented for <code>NativeTlsClient</code>. We also cannot derive the implementation because <code>native_tls::TlsConnector</code> does not implement <code>Clone</code> either. As far as this rabbit hole went, it should probably end here before this becomes a debugging report.</p>\n\n<p>I am not entirely sure of what can be done here (aside from not using native TLS at all), but my current advice would be filing an issue in <code>hyper_native_tls_client</code>, explaining that it doesn't work with hyper's client proxy (edit: <a href=\"https://github.com/sfackler/hyper-native-tls/issues/1\" rel=\"nofollow noreferrer\">it's done and fixed!</a>).</p>\n"}], "owner": {"reputation": 10672, "user_id": 321731, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/88e60659e997d36af3ff348b3251e1a6?s=128&d=identicon&r=PG", "display_name": "tshepang", "link": "https://stackoverflow.com/users/321731/tshepang"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2473, "favorite_count": 1, "accepted_answer_id": 41618808, "answer_count": 1, "score": 4, "last_activity_date": 1495772037, "creation_date": 1484229163, "last_edit_date": 1495772037, "question_id": 41614923, "link": "https://stackoverflow.com/questions/41614923/how-to-reach-an-https-site-via-proxy-with-hyper", "title": "How to reach an HTTPS site via proxy with Hyper?", "body": "<p>The following is an attempt to reach an HTTPS site via proxy:</p>\n\n<pre><code>extern crate hyper;\nextern crate hyper_native_tls;\n\nuse hyper::net::HttpsConnector;\nuse hyper::client::{Client, ProxyConfig};\nuse hyper_native_tls::NativeTlsClient;\n\nfn main() {\n    let ssl = NativeTlsClient::new().unwrap();\n    let connector = HttpsConnector::new(ssl);\n\n    let client = Client::with_proxy_config(\n        ProxyConfig::new(\n            \"http\", \"localhost\", 3128, connector, ssl\n        )\n    );\n\n    let response = client.get(\"https://httpbin.org\").send().unwrap();\n    println!(\"{}\", response.headers);\n}\n</code></pre>\n\n<p>I get this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `hyper_native_tls::TlsStream&lt;hyper::net::HttpStream&gt;: std::fmt::Debug` is not satisfied\n  --&gt; src/main.rs:13:9\n   |\n13 |         ProxyConfig::new(\n   |         ^^^^^^^^^^^^^^^^ the trait `std::fmt::Debug` is not implemented for `hyper_native_tls::TlsStream&lt;hyper::net::HttpStream&gt;`\n   |\n   = note: `hyper_native_tls::TlsStream&lt;hyper::net::HttpStream&gt;` cannot be formatted using `:?`; if it is defined in your crate, add `#[derive(Debug)]` or manually implement it\n   = note: required because of the requirements on the impl of `std::fmt::Debug` for `hyper::net::HttpsStream&lt;hyper_native_tls::TlsStream&lt;hyper::net::HttpStream&gt;&gt;`\n   = note: required because of the requirements on the impl of `hyper::net::SslClient&lt;hyper::net::HttpsStream&lt;hyper_native_tls::TlsStream&lt;hyper::net::HttpStream&gt;&gt;&gt;` for `hyper_native_tls::NativeTlsClient`\n   = note: required by `&lt;hyper::client::ProxyConfig&lt;C, S&gt;&gt;::new`\n\nerror[E0277]: the trait bound `hyper_native_tls::TlsStream&lt;hyper::net::HttpStream&gt;: std::fmt::Debug` is not satisfied\n  --&gt; src/main.rs:13:9\n   |\n13 |           ProxyConfig::new(\n   |  _________^ starting here...\n14 | |             \"http\", \"localhost\", 3128, connector, ssl\n15 | |         )\n   | |_________^ ...ending here: the trait `std::fmt::Debug` is not implemented for `hyper_native_tls::TlsStream&lt;hyper::net::HttpStream&gt;`\n   |\n   = note: `hyper_native_tls::TlsStream&lt;hyper::net::HttpStream&gt;` cannot be formatted using `:?`; if it is defined in your crate, add `#[derive(Debug)]` or manually implement it\n   = note: required because of the requirements on the impl of `std::fmt::Debug` for `hyper::net::HttpsStream&lt;hyper_native_tls::TlsStream&lt;hyper::net::HttpStream&gt;&gt;`\n   = note: required because of the requirements on the impl of `hyper::net::SslClient&lt;hyper::net::HttpsStream&lt;hyper_native_tls::TlsStream&lt;hyper::net::HttpStream&gt;&gt;&gt;` for `hyper_native_tls::NativeTlsClient`\n   = note: required by `hyper::client::ProxyConfig`\n\nerror[E0277]: the trait bound `hyper_native_tls::TlsStream&lt;hyper::net::HttpStream&gt;: std::fmt::Debug` is not satisfied\n  --&gt; src/main.rs:12:18\n   |\n12 |     let client = Client::with_proxy_config(\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::fmt::Debug` is not implemented for `hyper_native_tls::TlsStream&lt;hyper::net::HttpStream&gt;`\n   |\n   = note: `hyper_native_tls::TlsStream&lt;hyper::net::HttpStream&gt;` cannot be formatted using `:?`; if it is defined in your crate, add `#[derive(Debug)]` or manually implement it\n   = note: required because of the requirements on the impl of `std::fmt::Debug` for `hyper::net::HttpsStream&lt;hyper_native_tls::TlsStream&lt;hyper::net::HttpStream&gt;&gt;`\n   = note: required because of the requirements on the impl of `hyper::net::SslClient&lt;hyper::net::HttpsStream&lt;hyper_native_tls::TlsStream&lt;hyper::net::HttpStream&gt;&gt;&gt;` for `hyper_native_tls::NativeTlsClient`\n   = note: required by `hyper::Client::with_proxy_config`\n</code></pre>\n\n<p>Here are the Cargo dependencies:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[dependencies]\nhyper = \"0.10\"\nhyper-native-tls = \"0.2\"\n</code></pre>\n\n<p>Things are better using these dependencies:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[dependencies]\nhyper = \"0.10\"\nhyper-openssl = \"0.2\"\n</code></pre>\n\n<p>And this code:</p>\n\n<pre><code>extern crate hyper;\nextern crate hyper_openssl;\n\nuse hyper::net::HttpsConnector;\nuse hyper::client::{Client, ProxyConfig};\nuse hyper_openssl::OpensslClient as TlsClient;\n\nfn main() {\n    let ssl = TlsClient::new().unwrap();\n    let connector = HttpsConnector::new(ssl.clone());\n\n    let client = Client::with_proxy_config(\n        ProxyConfig::new(\n            \"http\", \"localhost\", 3128, connector, ssl\n        )\n    );\n\n    let response = client.get(\"https://httpbin.org\").send().unwrap();\n    println!(\"{:#?}\", response);\n}\n</code></pre>\n\n<p>Output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Response {\n    status: Ok,\n    headers: Headers { Server: nginx, Date: Thu, 12 Jan 2017 15:05:13 GMT, Content-Type: text/html; charset=utf-8, Content-Length: 12150, Connection: keep-alive, Access-Control-Allow-Origin: *, Access-Control-Allow-Credentials: true, },\n    version: Http11,\n    url: \"https://httpbin.org/\",\n    status_raw: RawStatus(\n        200,\n        \"OK\"\n    ),\n    message: Http11Message {\n        is_proxied: false,\n        method: None,\n        stream: Wrapper {\n            obj: Some(\n                Reading(\n                    SizedReader(remaining=12150)\n                )\n            )\n        }\n    }\n}\n</code></pre>\n\n<p>No build failures there, but it doesn't go via the proxy.</p>\n"}, {"tags": ["gtk", "rust"], "comments": [{"owner": {"reputation": 14451, "user_id": 33499, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17c590aa4c56918b47c7ba5e39dba5d8?s=128&d=identicon&r=PG", "display_name": "wimh", "link": "https://stackoverflow.com/users/33499/wimh"}, "edited": false, "score": 1, "creation_date": 1484223700, "post_id": 41610274, "comment_id": 70427413, "body": "remark: The <code>.0</code> syntax is used to access the first field of a <a href=\"http://rustbyexample.com/custom_types/structs.html\" rel=\"nofollow noreferrer\">tuple struct</a>. It does not pass <code>null</code> there. In this case it uses <a href=\"http://gtk-rs.org/docs/glib/translate/struct.Stash.html\" rel=\"nofollow noreferrer\">glib::translate::Stash</a>."}, {"owner": {"reputation": 223, "user_id": 3227347, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/1309abf98d1884d3654114d779f1f46b?s=128&d=identicon&r=PG&f=1", "display_name": "ruimo", "link": "https://stackoverflow.com/users/3227347/ruimo"}, "reply_to_user": {"reputation": 14451, "user_id": 33499, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17c590aa4c56918b47c7ba5e39dba5d8?s=128&d=identicon&r=PG", "display_name": "wimh", "link": "https://stackoverflow.com/users/33499/wimh"}, "edited": false, "score": 0, "creation_date": 1484271277, "post_id": 41610274, "comment_id": 70453100, "body": "Thanks, I found solution."}], "answers": [{"tags": [], "owner": {"reputation": 223, "user_id": 3227347, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/1309abf98d1884d3654114d779f1f46b?s=128&d=identicon&r=PG&f=1", "display_name": "ruimo", "link": "https://stackoverflow.com/users/3227347/ruimo"}, "is_accepted": false, "score": 2, "last_activity_date": 1484497628, "last_edit_date": 1484497628, "creation_date": 1484271315, "answer_id": 41626072, "question_id": 41610274, "link": "https://stackoverflow.com/questions/41610274/how-to-render-an-image-on-cairocontext-in-gtk-rs/41626072#41626072", "title": "How to render an image on cairo::Context in gtk-rs", "body": "<p>I need to use <code>Context.paint()</code> instead of <code>Context.stroke()</code>:</p>\n\n<pre><code>context.set_source_pixbuf(&amp;ws.pix, 0f64, 0f64);\ncontext.paint();  // need to call paint() instead of stroke().\nreturn Inhibit(false);\n</code></pre>\n"}], "owner": {"reputation": 223, "user_id": 3227347, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/1309abf98d1884d3654114d779f1f46b?s=128&d=identicon&r=PG&f=1", "display_name": "ruimo", "link": "https://stackoverflow.com/users/3227347/ruimo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 659, "favorite_count": 1, "answer_count": 1, "score": 3, "last_activity_date": 1484497628, "creation_date": 1484215615, "last_edit_date": 1484215780, "question_id": 41610274, "link": "https://stackoverflow.com/questions/41610274/how-to-render-an-image-on-cairocontext-in-gtk-rs", "title": "How to render an image on cairo::Context in gtk-rs", "body": "<p>I'm trying to render an image (gif/png) on a <code>DrawingArea</code> in gtk-rs. I can read the image file with <code>Pixbuf</code>:</p>\n\n<pre><code>Pixbuf::new_from_file(\"/path/to/img.gif\")\n</code></pre>\n\n<p>But I cannot find a way to render the <code>Pixbuf</code> into <code>cairo::Context</code>. I noticed that <code>gdk::prelude::ContextExt</code> has <code>set_source_pixbuf()</code>:</p>\n\n<p><a href=\"https://docs.rs/crate/gdk/0.1.4/source/src/cairo_interaction.rs\" rel=\"nofollow noreferrer\">https://docs.rs/crate/gdk/0.1.4/source/src/cairo_interaction.rs</a></p>\n\n<p>So I tried to use this:</p>\n\n<pre><code>extern crate gdk;\nuse gdk::prelude::*;\n</code></pre>\n\n<p>...</p>\n\n<pre><code>drawingArea.connect_draw(move |widget, context| {\n    context.set_source_pixbuf(&amp;ws.pix, 0f64, 0f64);\n    context.stroke();\n    return Inhibit(false);\n});\n</code></pre>\n\n<p>But nothing is rendered. The <code>ContextExt</code> seems unimplemented (it seems to specify null to the second parameter of <code>gdk_cairo_set_source_pixbuf</code>)? </p>\n\n<pre><code>fn set_source_pixbuf(&amp;self, pixbuf: &amp;Pixbuf, x: f64, y: f64) {\n    unsafe {\n        ffi::gdk_cairo_set_source_pixbuf(self.to_glib_none().0, pixbuf.to_glib_none().0, x, y);\n    }\n}\n</code></pre>\n\n<p>Is there any other method to render an image on <code>DrawingArea</code>?</p>\n"}, {"tags": ["string", "find", "rust"], "comments": [{"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 1, "creation_date": 1484209462, "post_id": 41608220, "comment_id": 70418071, "body": "Are you compiling with optimisations on? (<code>--release</code> with cargo)"}, {"owner": {"reputation": 7392, "user_id": 1555823, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/2b69fc6d16ff23e3509b2f3602838acd?s=128&d=identicon&r=PG", "display_name": "vladon", "link": "https://stackoverflow.com/users/1555823/vladon"}, "reply_to_user": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1484209575, "post_id": 41608220, "comment_id": 70418135, "body": "@huon of course"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1484226159, "post_id": 41608220, "comment_id": 70429021, "body": "What&#39;s the speed difference if you use <code>&quot;\\t&quot;</code> instead?"}], "answers": [{"comments": [{"owner": {"reputation": 7392, "user_id": 1555823, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/2b69fc6d16ff23e3509b2f3602838acd?s=128&d=identicon&r=PG", "display_name": "vladon", "link": "https://stackoverflow.com/users/1555823/vladon"}, "edited": false, "score": 0, "creation_date": 1484213243, "post_id": 41608774, "comment_id": 70420325, "body": "wow, I can use split on <code>&amp;[u8]</code>, i didn&#39;t know about this, thanks!"}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 7, "last_activity_date": 1484212407, "last_edit_date": 1484212407, "creation_date": 1484211308, "answer_id": 41608774, "question_id": 41608220, "link": "https://stackoverflow.com/questions/41608220/how-to-speed-up-utf-8-string-processing/41608774#41608774", "title": "How to speed up UTF-8 string processing", "body": "<p>As long as your string is ASCII or you don't need to match on UTF-8 scalars (e.g. like in your case, where you search for tabs), you can just treat it as bytes with the <code>as_bytes()</code> method and afterwards operate on <code>u8</code> characters (bytes) instead of <code>char</code>s (UTF-8 scalars). This should be much faster. With <code>&amp;[u8]</code>, which is a <a href=\"https://doc.rust-lang.org/stable/std/primitive.slice.html\" rel=\"nofollow noreferrer\">slice</a>, you can still use methods applicable to <code>&amp;str</code> slices like <code>split()</code>, <code>find()</code>, etc.</p>\n\n<pre><code>let line = String::new();\nlet bytes = line.as_bytes();\n\npub fn parse_tsv(line: &amp;[u8]) {\n    for (i, value) in line.split(|c| *c == b'\\t').enumerate() {\n\n    }\n}\n\nfn main() {\n    let line = String::new();\n    let bytes = line.as_bytes();\n\n    parse_tsv(&amp;bytes)\n}\n</code></pre>\n"}], "owner": {"reputation": 7392, "user_id": 1555823, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/2b69fc6d16ff23e3509b2f3602838acd?s=128&d=identicon&r=PG", "display_name": "vladon", "link": "https://stackoverflow.com/users/1555823/vladon"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 182, "favorite_count": 0, "accepted_answer_id": 41608774, "answer_count": 1, "score": 5, "last_activity_date": 1484212407, "creation_date": 1484209420, "last_edit_date": 1484212315, "question_id": 41608220, "link": "https://stackoverflow.com/questions/41608220/how-to-speed-up-utf-8-string-processing", "title": "How to speed up UTF-8 string processing", "body": "<p>I am parsing tab-separated values:</p>\n\n<pre><code>pub fn parse_tsv(line: &amp;str) -&gt; MyType {\n    for (i, value) in line.split('\\t').enumerate() {\n        // ...\n    }\n    // ...\n}\n</code></pre>\n\n<p><code>perf</code> top contains <code>str.find</code>. When I look in the generated assembly code, there is much work related to UTF-8 coding of the symbols in <code>&amp;str</code>.</p>\n\n<p>And it is relatively veeeery slow. It takes 99% of the execution time.</p>\n\n<p>But to find <code>\\t</code> I can't simply search for one-byte <code>\\t</code> in a UTF-8 string.</p>\n\n<p>What am I doing wrong? What is Rust stdlib doing wrong?</p>\n\n<p>Or maybe in Rust there is a some string library which can represent strings simply by 'u8' bytes? But with all the <code>split()</code>, <code>find()</code>, and other methods?</p>\n"}, {"tags": ["rust", "type-conversion", "traits", "coercion"], "comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1484190488, "post_id": 41604107, "comment_id": 70411267, "body": "I removed my answer because I can&#39;t find the documentation link quick enough. It is my understanding though, that <code>Self</code> in traits is unsized and without explicitly marking your trait as <code>Sized</code> the compiler will see it as unsized and error."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1484203404, "post_id": 41604107, "comment_id": 70415182, "body": "I think making the methods required is the way to go. At least I&#39;ve seen that pattern before. To avoid the duplicate code, you could write a simple macro <code>impl_conversion_functions!()</code> or something like that."}], "answers": [{"comments": [{"owner": {"reputation": 321, "user_id": 2125788, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e803058ed996c51f526c58fa1d4cb8ca?s=128&d=identicon&r=PG", "display_name": "Jake Kiesel", "link": "https://stackoverflow.com/users/2125788/jake-kiesel"}, "edited": false, "score": 0, "creation_date": 1484194932, "post_id": 41604740, "comment_id": 70412333, "body": "That makes sense.  Unfortunately for my particular situation I do need to be able to call these functions on trait objects.  I&#39;ll see if I can find another way"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 8, "last_activity_date": 1484192515, "creation_date": 1484192515, "answer_id": 41604740, "question_id": 41604107, "link": "https://stackoverflow.com/questions/41604107/rust-trait-object-conversion/41604740#41604740", "title": "Rust Trait object conversion", "body": "<p>Dynamically sized types can also implement traits. In particular, when you define an object-safe trait, the compiler also defines a dynamically sized type with the same name as the trait, which lets you use object types such as <code>&amp;Component</code>.</p>\n\n<p>Object types such as <code>&amp;Component</code> or <code>&amp;Any</code> are not just ordinary pointers; they're <strong>fat pointers</strong>. A fat pointer combines a pointer to the data and another piece of data: for object types, it's a pointer to the vtable; for slices, it's the length of the slice.</p>\n\n<p>When casting from a regular pointer (e.g. a <code>&amp;Button</code>) to an object type, the compiler statically knows which vtable to put in the fat pointer (e.g. <code>Button</code>'s vtable for <code>Any</code>). On the other hand, Rust doesn't support casting from an object type to another object type (e.g. from <code>&amp;Component</code> to <code>&amp;Any</code>), because there's not enough data in an object to initialize the new fat pointer. This is why the compiler adds this note to the error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>= note: required for the cast to the object type `std::any::Any + 'static`\n</code></pre>\n\n<p>There are two ways to fix this:</p>\n\n<ol>\n<li><p>Require that all types implementing <code>Component</code> be <code>Sized</code>:</p>\n\n<pre><code>trait Component: Any + Sized {\n    fn as_any(&amp;self) -&gt; &amp;Any {\n        self\n    }\n\n    fn as_any_mut(&amp;mut self) -&gt; &amp;mut Any {\n        self\n    }\n}\n</code></pre>\n\n<p>This has the consequence that you will not be able to use object types such as <code>&amp;Component</code> or <code>Box&lt;Component&gt;</code> at all.</p></li>\n<li><p>Make the <code>as_any</code> and <code>as_any_mut</code> methods only available when <code>Self</code> is <code>Sized</code>:</p>\n\n<pre><code>trait Component: Any {\n    fn as_any(&amp;self) -&gt; &amp;Any\n        where Self: Sized\n    {\n        self\n    }\n\n    fn as_any_mut(&amp;mut self) -&gt; &amp;mut Any\n        where Self: Sized\n    {\n        self\n    }\n}\n</code></pre>\n\n<p>This way, you can still use object types for the trait, but you will not be able to call <code>as_any</code> and <code>as_any_mut</code> on them.</p></li>\n</ol>\n"}, {"tags": [], "owner": {"reputation": 321, "user_id": 2125788, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e803058ed996c51f526c58fa1d4cb8ca?s=128&d=identicon&r=PG", "display_name": "Jake Kiesel", "link": "https://stackoverflow.com/users/2125788/jake-kiesel"}, "is_accepted": true, "score": 5, "last_activity_date": 1484940309, "last_edit_date": 1495540376, "creation_date": 1484939569, "answer_id": 41770806, "question_id": 41604107, "link": "https://stackoverflow.com/questions/41604107/rust-trait-object-conversion/41770806#41770806", "title": "Rust Trait object conversion", "body": "<p>I found what I consider to be a great solution that didn't require new compiler features.</p>\n\n<pre><code>pub trait Component {\n    // ...\n}\n\npub trait ComponentAny: Component + Any {\n    fn as_any(&amp;self) -&gt; &amp;Any;\n    fn as_any_mut(&amp;mut self) -&gt; &amp;mut Any;\n}\n\nimpl&lt;T&gt; ComponentAny for T\n    where T: Component + Any\n{\n    fn as_any(&amp;self) -&gt; &amp;Any {\n        self\n    }\n\n    fn as_any_mut(&amp;mut self) -&gt; &amp;mut Any {\n        self\n    }\n}\n</code></pre>\n\n<p>From here, I just change all my APIs to accept <code>ComponentAny</code> instead of <code>Component</code>.  Because <code>Any</code> is automatically implemented for any <code>'static</code> type, <code>ComponentAny</code> is now automatically implemented for any <code>'static</code> type that implements <code>Component</code>.  Thanks to <a href=\"https://stackoverflow.com/questions/26983355/is-there-a-way-to-combine-multiple-traits-in-order-to-define-a-new-trait\">Is there a way to combine multiple traits in order to define a new trait?</a> for the idea.</p>\n"}], "owner": {"reputation": 321, "user_id": 2125788, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e803058ed996c51f526c58fa1d4cb8ca?s=128&d=identicon&r=PG", "display_name": "Jake Kiesel", "link": "https://stackoverflow.com/users/2125788/jake-kiesel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2491, "favorite_count": 0, "accepted_answer_id": 41770806, "answer_count": 2, "score": 6, "last_activity_date": 1484940309, "creation_date": 1484187725, "last_edit_date": 1484497372, "question_id": 41604107, "link": "https://stackoverflow.com/questions/41604107/rust-trait-object-conversion", "title": "Rust Trait object conversion", "body": "<p>The following code won't compile due to two instances of this error:</p>\n\n<blockquote>\n  <p>error[E0277]: the trait bound <code>Self: std::marker::Sized</code> is not satisfied</p>\n</blockquote>\n\n<p>I don't understand why <code>Sized</code> is required in this instance as both <code>&amp;self</code> and <code>&amp;Any</code> are pointers and the operation does not require knowledge of the size of the structure that implements the trait, it only requires knowledge of the pointer itself and the type it is converting from and to, which it will have because <code>&amp;self</code> is generic when implemented inside a trait.  </p>\n\n<p>I think this may be an instance of the compiler enforcing unnecessary constraints and I've considered filing an issue with the rust-lang GitHub repo but I figured I should probably see if someone here knows something I don't before I go file an issue.</p>\n\n<pre><code>use std::any::Any;\n\ntrait Component: Any {\n    fn as_any(&amp;self) -&gt; &amp;Any {\n        self\n    }\n\n    fn as_any_mut(&amp;mut self) -&gt; &amp;mut Any {\n        self\n    }\n}\n</code></pre>\n\n<p>The alternative to this is to make <code>as_any()</code> and <code>as_any_mut()</code> required functions for the structs that implement this trait, but for those structures the implementation would always be exactly as displayed here down to each individual character, resulting in several instances of identical boilerplate code.</p>\n"}, {"tags": ["generics", "macros", "rust"], "comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1484182995, "post_id": 41603424, "comment_id": 70409379, "body": "I&#39;m not a macro expert (I really want to deep dive into them soon), but <a href=\"https://play.rust-lang.org/?gist=5768f8243eb9e9ba9e52089fb4e8d2fd&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">here is one option you could try</a>. Its a bit weird to look at.. using the lifetime then declaring it. It seems to work though."}], "answers": [{"comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 2, "creation_date": 1484185568, "post_id": 41603527, "comment_id": 70409987, "body": "If you replace <code>$lifetime:tt</code> with <code>$($args:tt)*</code>, it will work for an arbitrary number of generic arguments.  <i>e.g.</i> <code>impl_FooTrait!(Qux&lt;&#39;a, T&gt;, &#39;a, T: &#39;a);</code>"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1484185665, "post_id": 41603527, "comment_id": 70410021, "body": "Also, there <i>is</i> a cleaner-<i>looking</i> way of doing this... but, frankly, it&#39;s so absurd without procedural macros, it&#39;s not worth going into here.  If you&#39;re curious, look at the source for the <code>parse-generics-shim</code> crate, and try not to go mad."}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1484185803, "post_id": 41603527, "comment_id": 70410050, "body": "Oh nice. Thanks @DK I will check that out!"}], "tags": [], "owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "is_accepted": true, "score": 8, "last_activity_date": 1563970937, "last_edit_date": 1563970937, "creation_date": 1484183293, "answer_id": 41603527, "question_id": 41603424, "link": "https://stackoverflow.com/questions/41603424/rust-macro-accepting-type-with-generic-parameters/41603527#41603527", "title": "Rust macro accepting type with generic parameters", "body": "<p>You could use a <code>tt</code> (single token) identifier to accept a lifetime you want in another macro arm (<a href=\"https://play.rust-lang.org/?gist=5768f8243eb9e9ba9e52089fb4e8d2fd&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">playground link</a>)</p>\n\n<pre><code>macro_rules! impl_FooTrait {\n    ($name:ty, $lifetime:tt) =&gt; {\n        impl&lt;$lifetime&gt; $crate::FooTrait for $name {  }\n    };\n    ($name:ty) =&gt; {\n        impl $crate::FooTrait for $name {  }\n    };\n}\n\nstruct Bar(i32);\nimpl_FooTrait!(Bar);\n\nstruct Baz&lt;'a&gt;(&amp;'a i32);\nimpl_FooTrait!(Baz&lt;'a&gt;, 'a); // Use and declare the lifetime during macro invocation\n</code></pre>\n\n<p>Here is <a href=\"https://play.rust-lang.org/?gist=6cf2a3d28bde222af4c74b069486f47a&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">an example that actually implements something</a>.</p>\n\n<p>Its a bit weird to look at I guess. I am interested to see any alternative answers. There is possibly a nicer way to do this; I'm not well versed in macro land yet.</p>\n"}, {"tags": [], "owner": {"reputation": 8176, "user_id": 314345, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/d2c8b7c25f4cd87a65001a2f952c0008?s=128&d=identicon&r=PG", "display_name": "dhardy", "link": "https://stackoverflow.com/users/314345/dhardy"}, "is_accepted": false, "score": 4, "last_activity_date": 1563970856, "last_edit_date": 1563970856, "creation_date": 1535880260, "answer_id": 52135598, "question_id": 41603424, "link": "https://stackoverflow.com/questions/41603424/rust-macro-accepting-type-with-generic-parameters/52135598#52135598", "title": "Rust macro accepting type with generic parameters", "body": "<p>I have a partial solution, though I can't make it work for lifetime parameters.</p>\n\n<pre><code>#[macro_export]\nmacro_rules! impl_trait {\n    // this evil monstrosity matches &lt;A, B: T, C: S+T&gt;\n    ($ty:ident &lt; $( $N:ident $(: $b0:ident $(+$b:ident)* )? ),* &gt;) =&gt;\n    {\n        impl&lt; $( $N $(: $b0 $(+$b)* )? ),* &gt;\n            $crate::path::to::Trait\n            for $ty&lt; $( $N ),* &gt;\n        {\n            // function implementations go here\n        }\n    };\n    // match when no type parameters are present\n    ($ty:ident) =&gt; {\n        impl_trait!($ty&lt;&gt;);\n    };\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=ea4960c2704cd7670fb97a0fbe211dfa\" rel=\"nofollow noreferrer\">Example (play)</a></p>\n"}, {"tags": [], "owner": {"reputation": 61, "user_id": 7766117, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/102b8dae79a37a40e164f84a16a0f1a4?s=128&d=identicon&r=PG", "display_name": "Luro02", "link": "https://stackoverflow.com/users/7766117/luro02"}, "is_accepted": false, "score": 4, "last_activity_date": 1586785116, "creation_date": 1586785116, "answer_id": 61189128, "question_id": 41603424, "link": "https://stackoverflow.com/questions/41603424/rust-macro-accepting-type-with-generic-parameters/61189128#61189128", "title": "Rust macro accepting type with generic parameters", "body": "<p>First of all parsing generics with <code>macro_rules!</code> in a fool proof way is extremely difficult (might be impossible), because patterns do not support mixed repetitions\n(e.g. <code>$( $( $lt:lifetime ) | $( $gen:ident )* )*</code>, which would match either a lifetime (<code>'a</code>) or a generic parameter (<code>T</code>)).</p>\n\n<p>If this is required, you should consider using a <code>proc-macro</code> (you can even put them in expression position by using <code>proc-macro-hack</code>).</p>\n\n<p>Simply putting the code here without an explanation would benefit nobody, so the below goes through all the steps that are required to understand the final declarative macro :)</p>\n\n<hr>\n\n<p>Parsing an input in the form of <code>Hello&lt;'a, 'b&gt;</code> or <code>Hello</code> is relatively simple:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>macro_rules! simple_match {\n    (\n        // name of the struct/enum\n        $name:ident\n        // only one or none `&lt;&gt;`\n        $(&lt;\n            // match one or more lifetimes separated by a comma\n            $( $lt:lifetime ),+\n        &gt;)?\n    ) =&gt; {}\n}\n\nsimple_match!( Hello&lt;'a, 'b, 'static&gt; );\n</code></pre>\n\n<p>One might also have constrained lifetimes (e.g. <code>Hello&lt;'a, 'b: 'a, 'static&gt;</code>), which can not be parsed with the above.</p>\n\n<p>To parse this too, the following pattern would have to be added to the end of <code>$lt:lifetime</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>// optional constraint: 'a: 'b\n$( : $clt:lifetime )?\n</code></pre>\n\n<pre class=\"lang-rust prettyprint-override\"><code>macro_rules! better_match {\n    (\n        // name of the struct/enum\n        $name:ident\n        // only one or none `&lt;&gt;`\n        $(&lt;\n            // match one or more lifetimes separated by a comma\n            $(\n                $lt:lifetime\n                // optional constraint: 'a: 'b\n                $( : $clt:lifetime )?\n            ),+\n        &gt;)?\n    ) =&gt; {}\n}\n\nbetter_match!( Hello&lt;'a, 'b: 'static&gt; );\n</code></pre>\n\n<p>The above is limited to only a single constrained lifetime (<code>Hello&lt;'a: 'b + 'c&gt;</code> would fail to parse). In order to support multiple constrained lifetimes one has to change the pattern to:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>$(\n    : $clt:lifetime\n    // allow `'z: 'a + 'b + 'c`\n    $(+ $dlt:lifetime )*\n)?\n</code></pre>\n\n<p>and that is everything needed for parsing generic lifetimes. One could also try parsing higher ranked lifetimes, but this is would make the pattern even more complex.</p>\n\n<p>So the final macro for parsing lifetimes looks like this</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>macro_rules! lifetimes {\n    ( $name:ident $(&lt; $( $lt:lifetime $( : $clt:lifetime $(+ $dlt:lifetime )* )? ),+ &gt;)? ) =&gt; {}\n}\n\nlifetimes!( Hello&lt;'b, 'a: 'b, 'static, 'c: 'a + 'b&gt; );\n</code></pre>\n\n<hr>\n\n<p>The above macro does only allow lifetimes, which can be fixed by replacing <code>lifetime</code> with <code>tt</code> in the pattern (both lifetimes and generic params can be parsed as a <code>tt</code>):</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>macro_rules! generic {\n    ( $name:ident $(&lt; $( $lt:tt $( : $clt:tt $(+ $dlt:tt )* )? ),+ &gt;)? ) =&gt; {}\n}\n\ngeneric!( Hello&lt;'b, 'a: 'b, 'static, 'c: 'a + 'b&gt; );\ngeneric!( Hello&lt;T: Display, D: Debug + 'static + Display, 'c: 'a + 'b&gt; );\n</code></pre>\n\n<p>Like I mentioned above, I think it is currently impossible to differentiate between a lifetime and a trait bound. If this is required one could do it partially with <code>( $(+ $lt:lifetime )* $(+ $param:ident )* )</code>, but this would not work for unsorted bounds like <code>Hello&lt;'a, T, 'b&gt;</code> or <code>T: 'a + Debug + 'c</code>.</p>\n\n<hr>\n\n<p>The <code>impl_trait</code>-macro would then be written like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::fmt::{Debug, Display};\n\ntrait ExampleTrait {}\n\nstruct Alpha;\nstruct Beta&lt;'b&gt;(&amp;'b usize);\nstruct Gamma&lt;T&gt;(T);\nstruct Delta&lt;'b, 'a: 'static + 'b, T: 'a, D: Debug + Display + 'a&gt; {\n    hello: &amp;'a T,\n    what: &amp;'b D,\n}\n\nmacro_rules! impl_trait {\n    ( $name:ident $(&lt; $( $lt:tt $( : $clt:tt $(+ $dlt:tt )* )? ),+ &gt;)? ) =&gt; {\n        // I split this over multiple lines to make it more readable...\n        // this is essentially just a copy of the above match without the\n        // type annotations\n        impl $(&lt; $( $lt $( : $clt $(+ $dlt )* )? ),+ &gt;)?\n            ExampleTrait\n        for $name\n            // the bounds are not required here\n            $(&lt; $( $lt ),+ &gt;)?\n        {}\n    }\n}\n\nimpl_trait!(Alpha);\nimpl_trait!(Beta&lt;'b&gt;);\nimpl_trait!(Gamma&lt;T&gt;);\nimpl_trait!(Delta&lt;'b, 'a: 'static + 'b, T: 'a, D: Debug + Display + 'a&gt;);\n</code></pre>\n\n<p><em>Note</em>: Paths are not supported (for ex. <code>impl_trait!(Hello&lt;D: std::fmt::Display&gt;)</code></p>\n\n<hr>\n\n<p>The below macro works with multiple structs in a call:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>macro_rules! impl_trait_all {\n    ( $( $name:ident $(&lt; $( $lt:tt $( : $clt:tt $(+ $dlt:tt )* )? ),+ &gt;)? ),+ ) =&gt; {\n        $(\n            // I split this over multiple lines to make it more readable...\n            // this is essentially just a copy of the above match without the\n            // type annotations\n            impl $(&lt; $( $lt $( : $clt $(+ $dlt )* )? ),+ &gt;)?\n                ExampleTrait\n            for $name\n                // the bounds are not required here\n                $(&lt; $( $lt ),+ &gt;)?\n            {}\n        )+\n    }\n}\n\nimpl_trait_all!(\n    Alpha,\n    Beta&lt;'b&gt;,\n    Gamma&lt;T&gt;,\n    Delta&lt;'b, 'a: 'static + 'b, T: 'a, D: Debug + Display + 'a&gt;\n);\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;code=macro_rules!%20simple_match%20%7B%0A%20%20%20%20(%0A%20%20%20%20%20%20%20%20%2F%2F%20name%20of%20the%20struct%2Fenum%0A%20%20%20%20%20%20%20%20%24name%3Aident%0A%20%20%20%20%20%20%20%20%2F%2F%20only%20one%20or%20none%20%60%3C%3E%60%0A%20%20%20%20%20%20%20%20%24(%3C%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20match%20one%20or%20more%20lifetimes%20separated%20by%20a%20comma%0A%20%20%20%20%20%20%20%20%20%20%20%20%24(%20%24lt%3Alifetime%20)%2C%2B%0A%20%20%20%20%20%20%20%20%3E)%3F%0A%20%20%20%20)%20%3D%3E%20%7B%7D%0A%7D%0A%0A%0Amacro_rules!%20better_match%20%7B%0A%20%20%20%20(%0A%20%20%20%20%20%20%20%20%2F%2F%20name%20of%20the%20struct%2Fenum%0A%20%20%20%20%20%20%20%20%24name%3Aident%0A%20%20%20%20%20%20%20%20%2F%2F%20only%20one%20or%20none%20%60%3C%3E%60%0A%20%20%20%20%20%20%20%20%24(%3C%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20match%20one%20or%20more%20lifetimes%20separated%20by%20a%20comma%0A%20%20%20%20%20%20%20%20%20%20%20%20%24(%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24lt%3Alifetime%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20optional%20constraint%3A%20&#39;a%3A%20&#39;b%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24(%20%3A%20%24clt%3Alifetime%20)%3F%0A%20%20%20%20%20%20%20%20%20%20%20%20)%2C%2B%0A%20%20%20%20%20%20%20%20%3E)%3F%0A%20%20%20%20)%20%3D%3E%20%7B%7D%0A%7D%0A%0Amacro_rules!%20even_better_match%20%7B%0A%20%20%20%20(%0A%20%20%20%20%20%20%20%20%2F%2F%20name%20of%20the%20struct%2Fenum%0A%20%20%20%20%20%20%20%20%24name%3Aident%0A%20%20%20%20%20%20%20%20%2F%2F%20only%20one%20or%20none%20%60%3C%3E%60%0A%20%20%20%20%20%20%20%20%24(%3C%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20match%20one%20or%20more%20lifetimes%20separated%20by%20a%20comma%0A%20%20%20%20%20%20%20%20%20%20%20%20%24(%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24lt%3Alifetime%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20optional%20constraint%3A%20&#39;a%3A%20&#39;b%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24(%20%3A%20%24clt%3Alifetime%20%24(%2B%20%24dlt%3Alifetime%20)*%20)%3F%0A%20%20%20%20%20%20%20%20%20%20%20%20)%2C%2B%0A%20%20%20%20%20%20%20%20%3E)%3F%0A%20%20%20%20)%20%3D%3E%20%7B%7D%0A%7D%0A%0Amacro_rules!%20lifetimes%20%7B%0A%20%20%20%20(%20%24name%3Aident%20%24(%3C%20%24(%20%24lt%3Alifetime%20%24(%20%3A%20%24clt%3Alifetime%20%24(%2B%20%24dlt%3Alifetime%20)*%20)%3F%20)%2C%2B%20%3E)%3F%20)%20%3D%3E%20%7B%7D%0A%7D%0A%0Amacro_rules!%20generic%20%7B%0A%20%20%20%20(%20%24name%3Aident%20%24(%3C%20%24(%20%24lt%3Att%20%24(%20%3A%20%24clt%3Att%20%24(%2B%20%24dlt%3Att%20)*%20)%3F%20)%2C%2B%20%3E)%3F%20)%20%3D%3E%20%7B%7D%0A%7D%0A%0Atrait%20ExampleTrait%20%7B%7D%0A%0Amacro_rules!%20impl_trait%20%7B%0A%20%20%20%20(%20%24name%3Aident%20%24(%3C%20%24(%20%24lt%3Att%20%24(%20%3A%20%24clt%3Att%20%24(%2B%20%24dlt%3Att%20)*%20)%3F%20)%2C%2B%20%3E)%3F%20)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20I%20split%20this%20over%20multiple%20lines%20to%20make%20it%20more%20readable...%0A%20%20%20%20%20%20%20%20%2F%2F%20this%20is%20essentially%20just%20a%20copy%20of%20the%20above%20match%20without%20the%0A%20%20%20%20%20%20%20%20%2F%2F%20type%20annotations%0A%20%20%20%20%20%20%20%20impl%20%24(%3C%20%24(%20%24lt%20%24(%20%3A%20%24clt%20%24(%2B%20%24dlt%20)*%20)%3F%20)%2C%2B%20%3E)%3F%0A%20%20%20%20%20%20%20%20%20%20%20%20ExampleTrait%0A%20%20%20%20%20%20%20%20for%20%24name%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20the%20bounds%20are%20not%20required%20here%0A%20%20%20%20%20%20%20%20%20%20%20%20%24(%3C%20%24(%20%24lt%20)%2C%2B%20%3E)%3F%0A%20%20%20%20%20%20%20%20%7B%7D%0A%20%20%20%20%7D%0A%7D%0A%0Amacro_rules!%20impl_trait_all%20%7B%0A%20%20%20%20(%20%24(%20%24name%3Aident%20%24(%3C%20%24(%20%24lt%3Att%20%24(%20%3A%20%24clt%3Att%20%24(%2B%20%24dlt%3Att%20)*%20)%3F%20)%2C%2B%20%3E)%3F%20)%2C%2B%20)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%24(%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20I%20split%20this%20over%20multiple%20lines%20to%20make%20it%20more%20readable...%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20this%20is%20essentially%20just%20a%20copy%20of%20the%20above%20match%20without%20the%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20type%20annotations%0A%20%20%20%20%20%20%20%20%20%20%20%20impl%20%24(%3C%20%24(%20%24lt%20%24(%20%3A%20%24clt%20%24(%2B%20%24dlt%20)*%20)%3F%20)%2C%2B%20%3E)%3F%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ExampleTrait%0A%20%20%20%20%20%20%20%20%20%20%20%20for%20%24name%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20the%20bounds%20are%20not%20required%20here%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24(%3C%20%24(%20%24lt%20)%2C%2B%20%3E)%3F%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%7D%0A%20%20%20%20%20%20%20%20)%2B%0A%20%20%20%20%7D%0A%7D%0A%0Ause%20std%3A%3Afmt%3A%3A%7BDebug%2C%20Display%7D%3B%0A%0Astruct%20Alpha%3B%0Astruct%20Beta%3C&#39;b%3E(%26&#39;b%20usize)%3B%0Astruct%20Gamma%3CT%3E(T)%3B%0Astruct%20Delta%3C&#39;b%2C%20&#39;a%3A%20&#39;static%20%2B%20&#39;b%2C%20T%3A%20&#39;a%2C%20D%3A%20Debug%20%2B%20Display%20%2B%20&#39;a%3E%20%7B%0A%20%20%20%20hello%3A%20%26&#39;a%20T%2C%0A%20%20%20%20what%3A%20%26&#39;b%20D%2C%0A%7D%0A%0A%0Afn%20main()%20%7B%0A%20%20%20%20simple_match!(%20Hello%3C&#39;a%2C%20&#39;b%2C%20&#39;static%3E%20)%3B%0A%20%20%20%20better_match!(%20Hello%3C&#39;a%2C%20&#39;b%3A%20&#39;static%3E%20)%3B%0A%20%20%20%20even_better_match!(%20Hello%3C&#39;a%3A%20&#39;b%20%2B%20&#39;c%3E%20)%3B%0A%20%20%20%20lifetimes!(%20Hello%3C&#39;b%2C%20&#39;a%3A%20&#39;b%2C%20&#39;static%2C%20&#39;c%3A%20&#39;a%20%2B%20&#39;b%3E%20)%3B%0A%20%20%20%20generic!(%20Hello%3C&#39;b%2C%20&#39;a%3A%20&#39;b%2C%20&#39;static%2C%20&#39;c%3A%20&#39;a%20%2B%20&#39;b%3E%20)%3B%0A%20%20%20%20generic!(%20Hello%3CT%3A%20Display%2C%20D%3A%20Debug%20%2B%20&#39;static%20%2B%20Display%2C%20&#39;c%3A%20&#39;a%20%2B%20&#39;b%3E%20)%3B%0A%20%20%20%20%0A%20%20%20%20%2F*%0A%20%20%20%20impl_trait!(Alpha)%3B%0A%20%20%20%20impl_trait!(Beta%3C&#39;b%3E)%3B%0A%20%20%20%20impl_trait!(Gamma%3CT%3E)%3B%0A%20%20%20%20impl_trait!(Delta%3C&#39;b%2C%20&#39;a%3A%20&#39;static%20%2B%20&#39;b%2C%20T%3A%20&#39;a%2C%20D%3A%20Debug%20%2B%20Display%20%2B%20&#39;a%3E)%3B%0A%20%20%20%20*%2F%0A%20%20%20%20%0A%20%20%20%20impl_trait_all!(%0A%20%20%20%20%20%20%20%20Alpha%2C%0A%20%20%20%20%20%20%20%20Beta%3C&#39;b%3E%2C%0A%20%20%20%20%20%20%20%20Gamma%3CT%3E%2C%0A%20%20%20%20%20%20%20%20Delta%3C&#39;b%2C%20&#39;a%3A%20&#39;static%20%2B%20&#39;b%2C%20T%3A%20&#39;a%2C%20D%3A%20Debug%20%2B%20Display%20%2B%20&#39;a%3E%0A%20%20%20%20)%3B%0A%7D%0A\" rel=\"nofollow noreferrer\">Link to playground with all the code</a></p>\n"}], "owner": {"reputation": 813, "user_id": 1333945, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/5ba8a397763592097387117373dbb13a?s=128&d=identicon&r=PG", "display_name": "Nathan Ringo", "link": "https://stackoverflow.com/users/1333945/nathan-ringo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4504, "favorite_count": 2, "accepted_answer_id": 41603527, "answer_count": 3, "score": 10, "last_activity_date": 1586785116, "creation_date": 1484182470, "question_id": 41603424, "link": "https://stackoverflow.com/questions/41603424/rust-macro-accepting-type-with-generic-parameters", "title": "Rust macro accepting type with generic parameters", "body": "<p>I have a macro that implements a trait, <code>impl_Trait!()</code>. Right now, it works for types without generic parameters, but I'm not sure how to add the type parameters to the <code>impl</code> keyword.</p>\n\n<pre><code>macro_rules! impl_FooTrait {\n    ($name:ty) =&gt; {\n        impl $crate::FooTrait for $name { ... }\n    };\n}\n\nstruct Bar(i32);\nimpl_FooTrait!(Bar);\n// All OK\n\nstruct Baz&lt;'a&gt;(&amp;'a i32);\nimpl_FooTrait!(Baz&lt;'a&gt;);\n// use of undeclared lifetime name `'a`\n</code></pre>\n"}]