[{"tags": ["logging", "rust", "rust-cargo"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1451518021, "post_id": 34538397, "comment_id": 56819940, "body": "<i>with non-error log messages stripped out completely</i> \u2014 So it would be completely and totally impossible to opt into seeing &quot;info&quot; level messages, correct?"}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1451518278, "post_id": 34538397, "comment_id": 56820019, "body": "Yes, exactly. Presumably there would also be a (very minor) performance improvement in not having to check a flag at runtime, and not having extra <code>str</code> literals loaded into memory."}], "answers": [{"comments": [{"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1451574290, "post_id": 34539114, "comment_id": 56838052, "body": "Thanks. I agree about not wanting to prevent logging to be turned on in an emergency production situation. But it&#39;s a little inconvenient when I want to quickly turn on an off specific log messages, for just one program, while I&#39;m debugging it."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1451590968, "post_id": 34539114, "comment_id": 56844210, "body": "@PeterHall that&#39;s solvable in a <i>very</i> different way. Check the <a href=\"http://rust-lang-nursery.github.io/log/env_logger/\" rel=\"nofollow noreferrer\">docs for <code>env_logger</code></a> and you can see you can enable different levels for different modules (<code>RUST_LOG=module1=level,module2=level</code>), so you could enable info logging for the one module you are interested in, or even a specific print! I also updated the answer with some more stuff I discovered while source digging, which may be good enough for you."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1451592234, "post_id": 34539114, "comment_id": 56844604, "body": "But... If I had two applications running at the same time, could I enable logging for a module in one application without enabling it in the other?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1451592434, "post_id": 34539114, "comment_id": 56844658, "body": "@PeterHall yeah. You would just set the environment variable when you start each application \u2014 <code>RUST_LOG=my_module=info .&#47;application1; RUST_LOG=my_module=error .&#47;application2</code>. The logging module / level settings are per running instance."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1451653635, "post_id": 34539114, "comment_id": 56855534, "body": "I would like to note that it is very common to at the very least ensure that DEBUG logs never make it into a Release binary. The problem of most logging is that a <i>significant</i> amount of code is required for formatting, and while this code is not dynamically executed in general, it still factors in the decisions the optimizer takes. The presence of logging may inhibit inlining, promotion to registers, etc..."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1451590844, "last_edit_date": 1451590844, "creation_date": 1451519951, "answer_id": 34539114, "question_id": 34538397, "link": "https://stackoverflow.com/questions/34538397/is-it-possible-to-change-the-log-level-for-an-application-at-compile-time/34539114#34539114", "title": "Is it possible to change the log level for an application at compile time?", "body": "<p>I don't believe that the log crate has <strong>exactly</strong> the requested functionality built in. </p>\n\n<p>There is <a href=\"https://github.com/rust-lang-nursery/log/blob/d482c528d9c3349445dabb14de8fe2619b7a1b69/src/lib.rs#L686-L716\" rel=\"nofollow\">a way to statically set the logging level</a>. If you compile the <code>log</code> crate with any of these Cargo features, the log level will be capped at that point:</p>\n\n<ul>\n<li><code>release_max_level_off</code></li>\n<li><code>release_max_level_error</code></li>\n<li><code>release_max_level_warn</code></li>\n<li><code>release_max_level_info</code></li>\n<li><code>release_max_level_debug</code></li>\n<li><code>release_max_level_trace</code></li>\n</ul>\n\n<p>You can drop the <code>release_</code> off for the same functionality in non-release builds.</p>\n\n<p>It's possible that the optimizer will see this static value and remove code that is impossible. If that happens, then you should be good to go!</p>\n\n<p>If you want to be <strong>absolutely certain</strong>, you could approximate it by creating your own conditional compilation with Cargo features. Here's a simple example that will print a value or not, depending on whether the feature is enabled:</p>\n\n<pre><code>#[cfg(not(feature = \"slim\"))]\nmacro_rules! my_info {\n    ($x: expr) =&gt; { println!(\"{:?}\", $x) }\n}\n\n#[cfg(feature = \"slim\")]\nmacro_rules! my_info {\n    ($x: expr) =&gt; { }\n}\n\nfn main() {\n    my_info!(\"Hello, world!\");\n}\n</code></pre>\n\n<p>This has a corresponding stanza in <code>Cargo.toml</code>:</p>\n\n<pre><code>[features]\nslim = []\n</code></pre>\n\n<p>And when you compile / run your program, you can pick which features there are:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ cargo run\n     Running `target/debug/log`\n\"Hello, world!\"\n$ cargo run --features=slim\n     Running `target/debug/log`\n$ \n</code></pre>\n\n<p>Then it's just a matter of wrapping the logger macros in your own conditionally-compiled macros:</p>\n\n<pre><code>#[cfg(not(feature = \"slim\"))]\nmacro_rules! my_info {\n    ($($arg: tt)*) =&gt; { info!($($arg)*) }\n}\n\n#[cfg(feature = \"slim\")]\nmacro_rules! my_info {\n    ($($arg: tt)*) =&gt; { }\n}\n</code></pre>\n\n<p>Running yields:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ RUST_LOG=info cargo run\n     Running `target/debug/log`\nINFO:log: Hello, world!\n$ RUST_LOG=info cargo run --features=slim\n     Running `target/debug/log`\n$\n</code></pre>\n\n<hr>\n\n<p>For a bit of editorial, I disagree with doing this. When something breaks, that's when you <strong>most</strong> want the ability to log something. In the majority of cases, I don't believe that the cost of the check of the boolean would be expensive enough to warrant this. I also doubt that you will have megabytes of text in most cases.</p>\n\n<p>There are always exceptions - maybe you need to log something in a tight loop, or you have to compile to fit on a microcontroller with limited space.</p>\n\n<p>Note that I didn't try to couple stripping out the log messages with the concept of a \"release\" build. I guarantee that there are times you will want a release build with these messages, so it's better to make those two ideas orthogonal.</p>\n"}], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1722, "favorite_count": 3, "accepted_answer_id": 34539114, "answer_count": 1, "score": 8, "last_activity_date": 1451590844, "creation_date": 1451515438, "last_edit_date": 1451534816, "question_id": 34538397, "link": "https://stackoverflow.com/questions/34538397/is-it-possible-to-change-the-log-level-for-an-application-at-compile-time", "title": "Is it possible to change the log level for an application at compile time?", "body": "<p>Rather than rely on environment variables at runtime, I'd like to compile a debug or release version with non-error log messages stripped out completely.</p>\n\n<p>Is it possible to change the log level for an application in the <code>Cargo.toml</code> or via <code>cargo</code>/<code>rustc</code> command line arguments? </p>\n"}, {"tags": ["rust", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 5160, "user_id": 553092, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d161f230b3456d0bfd740154ae16e0a3?s=128&d=identicon&r=PG", "display_name": "Steven", "link": "https://stackoverflow.com/users/553092/steven"}, "edited": false, "score": 3, "creation_date": 1451508043, "post_id": 34536859, "comment_id": 56815698, "body": "I wouldn&#39;t say it&#39;s passed to nothing. The vec is passed into the closure and then dropped."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 5160, "user_id": 553092, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d161f230b3456d0bfd740154ae16e0a3?s=128&d=identicon&r=PG", "display_name": "Steven", "link": "https://stackoverflow.com/users/553092/steven"}, "edited": false, "score": 0, "creation_date": 1451508316, "post_id": 34536859, "comment_id": 56815844, "body": "@Steven great point! That was really sloppy wording on my part. How does it read now?"}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 1, "creation_date": 1451508424, "post_id": 34536859, "comment_id": 56815891, "body": "Comparing your explanation of (1), in (2) why doesn&#39;t the ownership of the <code>Option</code> pass to the <code>and_then</code> call, and then the ownership of the vector pass to the closure?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1451508517, "post_id": 34536859, "comment_id": 56815928, "body": "@PeterHall haha, I was just noticing that and changed it accordingly!"}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1451508657, "post_id": 34536859, "comment_id": 56816003, "body": "Ah, you changed your answer while I was replying. Does <code>clone</code> here actually copy things in memory or will the compiler optimise it to effectively pass the ownership of the vector element back?  Since this was <code>u32</code>s throughout, I was expecting that they would generally be copied instead of referenced."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1451509822, "post_id": 34536859, "comment_id": 56816598, "body": "@PeterHall updated with a weak attempt to answer that. :-)"}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1451510122, "post_id": 34536859, "comment_id": 56816737, "body": "Thanks, this is really helpful"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1451509917, "last_edit_date": 1451509917, "creation_date": 1451507694, "answer_id": 34536859, "question_id": 34535936, "link": "https://stackoverflow.com/questions/34535936/vector-doesnt-live-long-enough-until-i-clone-it/34536859#34536859", "title": "Vector doesn&#39;t live long enough until I clone it", "body": "<p>In the first case, ownership of the <code>Option</code> passes from <code>make_vec</code> to the <code>unwrap</code> call. <code>unwrap</code> <em>consumes</em> the Option and returns the <code>Vec</code>, whose ownership passes to the variable <code>v</code>. The call to <code>last</code> returns a reference into <code>v</code>.</p>\n\n<p>In the second case, ownership of the <code>Option</code> passes from <code>make_vec</code> to the call to <code>and_then</code>. <code>and_then</code> <em>consumes</em> the <code>Option</code>, and passes ownership of the <code>Vec</code> to the closure. The call to <code>last</code> in the closure returns a reference into the <code>Vec</code>. Since the closure owned the vector but is now finished running, the <code>Vec</code> will be dropped. The reference into the <code>Vec</code> would point to memory that is no longer valid, thus the compilation error.</p>\n\n<p>In the third case, ownership of the <code>Option</code> passes from <code>make_vec</code> to the call to <code>and_then</code>. <code>and_then</code> <em>consumes</em> the <code>Option</code>, and passes ownership of the <code>Vec</code> to the closure. The call to <code>last</code> in the closure returns a reference into the <code>Vec</code>. The referred-to item is cloned, which creates a new item that is distinct from the <code>Vec</code>. When the <code>Vec</code> is dropped after the closure, there are no references into it that could cause a problem.</p>\n\n<p>The types of <code>m</code> differ between your cases. The first and second cases would return a <code>Option&lt;&amp;u32&gt;</code> if they both worked. The third case returns a <code>Option&lt;u32&gt;</code>.</p>\n\n<p>There's a fourth option as well:</p>\n\n<pre><code>let r = make_vec();\nlet m = r.as_ref().and_then(|v| v.last());\n</code></pre>\n\n<p>This converts the <code>Option&lt;T&gt;</code> into an <code>Option&lt;&amp;T&gt;</code>. This new <code>Option</code> references the <em>original</em> option and can be consumed by the call to <code>and_then</code>.</p>\n\n<p>There's a fifth option as well! ^_^ If you are just going to throw away the vector, you can be a bit more explicit about the fact that you want to take it anyway:</p>\n\n<pre><code>let m = make_vec().and_then(|v| v.pop());\n</code></pre>\n\n<blockquote>\n  <p>Does clone here actually copy things in memory or will the compiler optimise it to effectively pass the ownership of the vector element back? Since this was u32s throughout, I was expecting that they would generally be copied instead of referenced.</p>\n</blockquote>\n\n<p>Optimizing is a tricky thing, and the only true answer is to look at the optimized output. <strong>I</strong> would assume that anything that is <code>Copy</code> and is \"small enough\" wouldn't really cause a problem. However, I might look at making my code as semantic as possible in order to help the optimizer. I'd probably try to have the <code>pop</code> variant if that code is what you mean.</p>\n"}], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 234, "favorite_count": 0, "accepted_answer_id": 34536859, "answer_count": 1, "score": 1, "last_activity_date": 1451509917, "creation_date": 1451503716, "last_edit_date": 1451507756, "question_id": 34535936, "link": "https://stackoverflow.com/questions/34535936/vector-doesnt-live-long-enough-until-i-clone-it", "title": "Vector doesn&#39;t live long enough until I clone it", "body": "<p>I don't understand why <code>v</code> doesn't live long enough in snippet <code>(2)</code>, but it works in the other cases. If I don't need to <code>clone</code> the variable in <code>(1)</code>, why do I need to clone it to get the second case to work?</p>\n\n<pre><code>fn main() {\n    // (1)\n    let v = make_vec().unwrap();\n    let m = v.last();\n\n    // (2) v doesn't live long enough!\n    let m = make_vec()\n        .and_then(|v| v.last());\n\n    // (3) Fixed!\n    let m = make_vec()\n        .and_then(|v| v.last().cloned());\n}\n\nfn make_vec() -&gt; Option&lt;Vec&lt;u32&gt;&gt; {\n    Some(vec![1, 2, 3])\n}\n</code></pre>\n"}, {"tags": ["rust", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 9778, "user_id": 598057, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/af77229cbfe1a0bff2b5ea064ef3271a?s=128&d=identicon&r=PG", "display_name": "Stanislav Pankevich", "link": "https://stackoverflow.com/users/598057/stanislav-pankevich"}, "edited": false, "score": 0, "creation_date": 1451491321, "post_id": 34532811, "comment_id": 56807110, "body": "Thanks for the prompt answer, now it is working! I still don&#39;t get why not-unwrapped item cannot be shared and vice versa - is there a link to somewhere or simple explanation?"}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "reply_to_user": {"reputation": 9778, "user_id": 598057, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/af77229cbfe1a0bff2b5ea064ef3271a?s=128&d=identicon&r=PG", "display_name": "Stanislav Pankevich", "link": "https://stackoverflow.com/users/598057/stanislav-pankevich"}, "edited": false, "score": 2, "creation_date": 1451491390, "post_id": 34532811, "comment_id": 56807153, "body": "I mean, you <i>could</i> also share it, but you&#39;re not. You&#39;re trying to unwrap it twice."}], "tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": true, "score": 5, "last_activity_date": 1451491327, "last_edit_date": 1451491327, "creation_date": 1451491077, "answer_id": 34532811, "question_id": 34532606, "link": "https://stackoverflow.com/questions/34532606/use-of-moved-value-when-trying-to-use-the-same-resource-two-times/34532811#34532811", "title": "&quot;use of moved value&quot; when trying to use the same resource two times", "body": "<p><code>TempDir::new</code> gives you back a <code>Result&lt;TempDir&gt;</code>. You're trying to unwrap it each time, rather than unwrap it once to get a <code>TempDir</code>, and then share <em>that</em>.</p>\n\n<p>So change</p>\n\n<pre><code>let stage_dir = TempDir::new_in(tmp_dir.as_path(), \"Components-Test\");\n</code></pre>\n\n<p>to </p>\n\n<pre><code>let stage_dir = TempDir::new_in(tmp_dir.as_path(), \"Components-Test\").unwrap();\n</code></pre>\n\n<p>instead.</p>\n"}], "owner": {"reputation": 9778, "user_id": 598057, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/af77229cbfe1a0bff2b5ea064ef3271a?s=128&d=identicon&r=PG", "display_name": "Stanislav Pankevich", "link": "https://stackoverflow.com/users/598057/stanislav-pankevich"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 670, "favorite_count": 0, "accepted_answer_id": 34532811, "answer_count": 1, "score": 1, "last_activity_date": 1499951955, "creation_date": 1451490312, "last_edit_date": 1499951955, "question_id": 34532606, "link": "https://stackoverflow.com/questions/34532606/use-of-moved-value-when-trying-to-use-the-same-resource-two-times", "title": "&quot;use of moved value&quot; when trying to use the same resource two times", "body": "<p>Here's the code:</p>\n\n<pre><code>extern crate tempdir;\n\nuse std::env;\nuse tempdir::*;\n\n#[test]\nfn it_installs_component() {\n    let current_dir = env::current_dir().unwrap();\n    let home_dir = env::home_dir().unwrap();\n    let tmp_dir = env::temp_dir();\n\n    println!(\"The current directory is: {}\", current_dir.display());\n    println!(\"The home directory is: {}\", home_dir.display());\n    println!(\"The temporary directory is: {}\", tmp_dir.display());\n\n    let stage_dir = TempDir::new_in(tmp_dir.as_path(), \"Components-Test\");\n\n    let components_dir = TempDir::new_in(stage_dir.unwrap().path(), \"Components\");\n\n    // This is \"offending line\"\n    // let components_make_dir = TempDir::new_in(stage_dir.unwrap().path(), \"Components.make\");\n\n    println!(\"---- {:?}\", components_dir.unwrap().path());\n    //println!(\"---- {:?}\", components_make_dir.unwrap().path());\n}\n</code></pre>\n\n<p>If the offending line is commented out the code compiles fine. If I uncomment it, I start getting an error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0382]: use of moved value: `stage_dir`\n  --&gt; src/main.rs:21:51\n   |\n18 |         let components_dir = TempDir::new_in(stage_dir.unwrap().path(), \"Components\");\n   |                                              --------- value moved here\n...\n21 |         let components_make_dir = TempDir::new_in(stage_dir.unwrap().path(), \"Components.make\");\n   |                                                   ^^^^^^^^^ value used here after move\n   |\n   = note: move occurs because `stage_dir` has type `std::result::Result&lt;tempdir::TempDir, std::io::Error&gt;`, which does not implement the `Copy` trait\n</code></pre>\n\n<p>I understand the problem is that I move <code>stage_dir</code> when I use it the first time, but I can't see how to share <code>stage_dir</code> between those two sub-folders as I will need to access them both in my test. </p>\n\n<p>I tried playing with <code>&amp;stage_dir</code> but that produced some other warnings even more obscure to me.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 854, "user_id": 3989982, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6941e7388870864da83acedf9e9c7693?s=128&d=identicon&r=PG&f=1", "display_name": "Tibor Benke", "link": "https://stackoverflow.com/users/3989982/tibor-benke"}, "edited": false, "score": 0, "creation_date": 1451487598, "post_id": 34531450, "comment_id": 56805121, "body": "Your question is very similar to this one: <a href=\"http://stackoverflow.com/questions/30218886/how-to-implement-iterator-and-intoiterator-for-a-simple-struct\" title=\"how to implement iterator and intoiterator for a simple struct\">stackoverflow.com/questions/30218886/&hellip;</a>."}, {"owner": {"reputation": 1700, "user_id": 1337526, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/GlCBy.jpg?s=128&g=1", "display_name": "Adam Miller", "link": "https://stackoverflow.com/users/1337526/adam-miller"}, "reply_to_user": {"reputation": 854, "user_id": 3989982, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6941e7388870864da83acedf9e9c7693?s=128&d=identicon&r=PG&f=1", "display_name": "Tibor Benke", "link": "https://stackoverflow.com/users/3989982/tibor-benke"}, "edited": false, "score": 0, "creation_date": 1451487926, "post_id": 34531450, "comment_id": 56805290, "body": "Ah I didn&#39;t know about that question. I didn&#39;t find it when I was searching for what I was thinking of."}, {"owner": {"reputation": 854, "user_id": 3989982, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6941e7388870864da83acedf9e9c7693?s=128&d=identicon&r=PG&f=1", "display_name": "Tibor Benke", "link": "https://stackoverflow.com/users/3989982/tibor-benke"}, "edited": false, "score": 0, "creation_date": 1451488457, "post_id": 34531450, "comment_id": 56805564, "body": "You should have known the solution to find that question :)"}, {"owner": {"reputation": 1700, "user_id": 1337526, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/GlCBy.jpg?s=128&g=1", "display_name": "Adam Miller", "link": "https://stackoverflow.com/users/1337526/adam-miller"}, "reply_to_user": {"reputation": 854, "user_id": 3989982, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6941e7388870864da83acedf9e9c7693?s=128&d=identicon&r=PG&f=1", "display_name": "Tibor Benke", "link": "https://stackoverflow.com/users/3989982/tibor-benke"}, "edited": false, "score": 0, "creation_date": 1451488632, "post_id": 34531450, "comment_id": 56805656, "body": "Rust&#39;s lifetime language is poorly documented and type parameterization  language is wonky. On my end, I have all this impl&lt;this + that + and + the + other&gt;"}], "answers": [{"comments": [{"owner": {"reputation": 1700, "user_id": 1337526, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/GlCBy.jpg?s=128&g=1", "display_name": "Adam Miller", "link": "https://stackoverflow.com/users/1337526/adam-miller"}, "edited": false, "score": 0, "creation_date": 1473657804, "post_id": 34531582, "comment_id": 66209572, "body": "This ends up making a lot of interoperation with other traits very wonky. What I mean by that is that, the data of interest is what the programmer starts out with and wants to focus on, but in the process of conforming to the type checker, they end up making all these ancillary structs that hide behind the scenes of what is otherwise an innocuous set of methods that make up the public interface. Programmers aren&#39;t interested in making all those other structs because that&#39;s fundamentally just noise forced by the language."}, {"owner": {"reputation": 1700, "user_id": 1337526, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/GlCBy.jpg?s=128&g=1", "display_name": "Adam Miller", "link": "https://stackoverflow.com/users/1337526/adam-miller"}, "edited": false, "score": 0, "creation_date": 1473657827, "post_id": 34531582, "comment_id": 66209577, "body": "In addition, that noise has the potential to complicate other tasks when interoperation between traits behind the scenes is required."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 1700, "user_id": 1337526, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/GlCBy.jpg?s=128&g=1", "display_name": "Adam Miller", "link": "https://stackoverflow.com/users/1337526/adam-miller"}, "edited": false, "score": 0, "creation_date": 1473673624, "post_id": 34531582, "comment_id": 66216654, "body": "@AdamMiller This is not pointless boilerplate enforced to ruin your day. Iterators (in the sense used here) are separate from collections <b>in every language I am aware of</b> (though some make it a bit easier to define one-off iterators, like e.g. generators in Python). It is <i>logically</i> necessary because, as I said, you want the ability to have multiple iterator over a collection and not carry the baggage of an iterator when that is not required. [For lack of examples I cannot address your points about &quot;other traits&quot;.]"}, {"owner": {"reputation": 1700, "user_id": 1337526, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/GlCBy.jpg?s=128&g=1", "display_name": "Adam Miller", "link": "https://stackoverflow.com/users/1337526/adam-miller"}, "edited": false, "score": 0, "creation_date": 1473674493, "post_id": 34531582, "comment_id": 66217137, "body": "I don&#39;t disagree - you agree with only half of what I&#39;m addressing. First, it&#39;s correct to isolate other data types from the public interfaces and only reveal the consumer api that is as minimalist as possible. But the problem that I&#39;m identifying is that having so many types to wrangle is turning it into a rodeo. To be honest, for lots of interfaces, I don&#39;t want the type to ever be used again. It seemed to make sense to me to have trait local private fields, where the compiler would use to auto-derive a struct with. Seems less cumbersome to me, but admittedly only sometimes more intuitive."}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": true, "score": 6, "last_activity_date": 1451491040, "last_edit_date": 1451491040, "creation_date": 1451486376, "answer_id": 34531582, "question_id": 34531450, "link": "https://stackoverflow.com/questions/34531450/is-it-possible-to-have-a-variable-local-to-a-trait-implementation/34531582#34531582", "title": "Is it possible to have a variable local to a trait implementation?", "body": "<p>The <code>Iterator</code> should be a separate struct that has a reference to the collection plus any other data it may need (such as this index). The collection object itself should <em>not</em> be an iterator. That would not only require misplaced additional metadata in the collection, it would prevent you from having multiple independent iterators over the collection.</p>\n"}], "owner": {"reputation": 1700, "user_id": 1337526, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/GlCBy.jpg?s=128&g=1", "display_name": "Adam Miller", "link": "https://stackoverflow.com/users/1337526/adam-miller"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2233, "favorite_count": 0, "accepted_answer_id": 34531582, "answer_count": 1, "score": 1, "last_activity_date": 1451491040, "creation_date": 1451485806, "last_edit_date": 1451490992, "question_id": 34531450, "link": "https://stackoverflow.com/questions/34531450/is-it-possible-to-have-a-variable-local-to-a-trait-implementation", "title": "Is it possible to have a variable local to a trait implementation?", "body": "<p>I have a indexable type that I want to iterate over. It consists of some metadata and an array. I need to first iterate over the bytes of the metadata and then to that of the array. From what I understand, the iterator cannot have any storage local to the trait implementation. I think this is very disorganized, and I don't want my data types to be muddled by the need to satisfy extraneous influence.</p>\n\n<pre><code>impl Iterator for IndexableData {\n  type Item = u8\n  let index : isize = 0;\n  fn next(&amp; mut self) -&gt; Option&lt;Item&gt; {\n     if self.index &gt; self.len() { None }\n     if self.index &gt; size_of::&lt;Metadata&gt; {\n       Some (self.data[index - size_of::&lt;Metadata&gt;])\n     } \n     Some (self.metadata[index])\n  }\n}\n</code></pre>\n\n<p>This is what I think the implementation should look like. The <code>index</code> variable <strong>belongs</strong> in the iterator trait. Not my <code>IndexableData</code> type. How can I achieve this?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 6345, "user_id": 483347, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/c2d980bc16657b17b4869229796fcd9d?s=128&d=identicon&r=PG", "display_name": "weberc2", "link": "https://stackoverflow.com/users/483347/weberc2"}, "edited": false, "score": 0, "creation_date": 1452039143, "post_id": 34530848, "comment_id": 56992726, "body": "Why do uncopyable structs ever implement methods that take <code>self</code> by value? Assuming it&#39;s reasonable to call other methods after it, that is..."}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "reply_to_user": {"reputation": 6345, "user_id": 483347, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/c2d980bc16657b17b4869229796fcd9d?s=128&d=identicon&r=PG", "display_name": "weberc2", "link": "https://stackoverflow.com/users/483347/weberc2"}, "edited": false, "score": 0, "creation_date": 1456227643, "post_id": 34530848, "comment_id": 58839586, "body": "@weberc2 skip_while is a method of Iterator, not an inherent method of Chars (so it could not have been implemented to take &amp;self). In general, though, taking self by value does not prevent passing a reference instead (self becomes &amp;self, &amp;self is then passed by value). We do exactly this in this case, using the by_ref adapter."}], "tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": false, "score": 4, "last_activity_date": 1451483433, "creation_date": 1451483433, "answer_id": 34530848, "question_id": 34530567, "link": "https://stackoverflow.com/questions/34530567/cannot-move-out-of-borrowed-content-when-using-skip-while/34530848#34530848", "title": "&quot;cannot move out of borrowed content&quot; when using skip_while()", "body": "<p><a href=\"https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.skip_while\" rel=\"nofollow\">skip_while</a> takes self by value. But <code>chars</code> can't be moved because it's still mutably borrowed by the <code>&amp;mut self</code>. You can use <a href=\"https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.by_ref\" rel=\"nofollow\">by_ref</a> to make sure the value skip_while gets is a reference to a wrapper, instead.</p>\n\n<pre><code>self.chars.by_ref().skip_while(|c| true);\n</code></pre>\n"}], "owner": {"reputation": 261, "user_id": 1942629, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/5faf5fd185d8abe20ba323bd6209737d?s=128&d=identicon&r=PG", "display_name": "ebaklund", "link": "https://stackoverflow.com/users/1942629/ebaklund"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 319, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1451491085, "creation_date": 1451482361, "last_edit_date": 1451491085, "question_id": 34530567, "link": "https://stackoverflow.com/questions/34530567/cannot-move-out-of-borrowed-content-when-using-skip-while", "title": "&quot;cannot move out of borrowed content&quot; when using skip_while()", "body": "<p>I have trouble using a <code>std::iter::Peekable</code>. Why does the following code does not compile?</p>\n\n<pre><code>// rustc 1.7.0-nightly (b4707ebca 2015-12-27)\n\nuse std::iter::*;\n\nstruct Foo&lt;'a&gt; {\n    chars: Peekable&lt;Chars&lt;'a&gt;&gt;,\n}\n\nimpl&lt;'a&gt; Foo&lt;'a&gt; {\n   fn foo(&amp;mut self) {\n       self.chars.next(); // Ok\n       self.chars.skip_while(|c| true); // error: cannot move out of borrowed content [E0507]\n   }\n}\n</code></pre>\n"}, {"tags": ["reference", "rust"], "comments": [{"owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "edited": false, "score": 0, "creation_date": 1451433755, "post_id": 34520784, "comment_id": 56783613, "body": "These work: <code>map.insert((**x).to_owned(), y);</code> and <code>map.insert((*x).to_owned(), y);</code>. I think it has something to do with the fact that Rust cannot insert more than one <code>*</code> in some cases, but I don&#39;t remember when."}], "answers": [{"tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": true, "score": 7, "last_activity_date": 1451476057, "last_edit_date": 1495541270, "creation_date": 1451438197, "answer_id": 34521592, "question_id": 34520784, "link": "https://stackoverflow.com/questions/34520784/str-to-owned-doesnt-result-in-a-string/34521592#34521592", "title": "&amp;&amp;str.to_owned() doesn&#39;t result in a String", "body": "<p>Because <code>ToOwned</code> is implemented <code>for T where T: Clone</code>, and <code>Clone</code> is implemented <code>for &amp;T</code>. You need to roughly understand how pattern matching on <code>&amp;self</code> works when both <code>T</code> and <code>&amp;T</code> are available. Using a pseudo-syntax for exposition,</p>\n\n<h2><code>str \u2192 String</code></h2>\n\n<ul>\n<li><code>str</code> doesn't match <code>&amp;self</code></li>\n<li><code>&amp;str</code> (auto-ref) matches <code>&amp;self</code> with <code>self == str</code></li>\n</ul>\n\n<p>Thus <code>ToOwned&lt;str&gt;</code> kicks in.</p>\n\n<h2><code>&amp;str \u2192 String</code></h2>\n\n<ul>\n<li><code>&amp;str</code> matches <code>&amp;self</code> with <code>self == str</code></li>\n</ul>\n\n<p>Thus <code>ToOwned&lt;str&gt;</code> kicks in.</p>\n\n<h2><code>&amp;&amp;str \u2192 &amp;str</code></h2>\n\n<ul>\n<li><code>&amp;&amp;str</code> matches <code>&amp;self</code> with <code>self == &amp;str</code></li>\n</ul>\n\n<p>Thus <code>ToOwned&lt;&amp;T&gt;</code> kicks in.</p>\n\n<p>Note that in this case, auto-<em>deref</em> can never kick in, since <code>&amp;T</code> will always match in cases where <code>T</code> might, which lowers the complexity a bit. Note also that auto-ref only kicks in once (and once more for each auto-deref'd type).</p>\n\n<p>To copy from <a href=\"https://stackoverflow.com/questions/28519997/what-are-rusts-exact-auto-dereferencing-rules/28552082#28552082\">huon's much better answer than mine</a>,</p>\n\n<blockquote>\n  <p>The core of the algorithm is:</p>\n  \n  <ul>\n  <li>For each <a href=\"https://github.com/rust-lang/rust/blob/b6d91a2bdac45cd919497a24207fab843124d4ba/src/librustc_typeck/check/method/probe.rs#L166-L196\" rel=\"nofollow noreferrer\">each \"dereference step\"</a> <code>U</code> (that is, set <code>U = T</code> and then <code>U = *T</code>, ...)\n  \n  <ol>\n  <li>if there's a method <code>bar</code> where the receiver type (the type of <code>self</code> in the method) matches <code>U</code> exactly , use it (<a href=\"https://github.com/rust-lang/rust/blob/b6d91a2bdac45cd919497a24207fab843124d4ba/src/librustc_typeck/check/method/probe.rs#L793\" rel=\"nofollow noreferrer\">a \"by value method\"</a>)</li>\n  <li>otherwise, add one auto-ref (take <code>&amp;</code> or <code>&amp;mut</code> of the receiver), and, if some method's receiver matches <code>&amp;U</code>, use it (<a href=\"https://github.com/rust-lang/rust/blob/b6d91a2bdac45cd919497a24207fab843124d4ba/src/librustc_typeck/check/method/probe.rs#L798\" rel=\"nofollow noreferrer\">an \"autorefd method\"</a>)</li>\n  </ol></li>\n  </ul>\n</blockquote>\n\n<hr>\n\n<p>FWIW, <code>.into()</code> is normally prettier than <code>.to_owned()</code> (especially when types are implied; oft even when not), <a href=\"https://play.rust-lang.org/?gist=4df3cc2d82462175045a&amp;version=stable\" rel=\"nofollow noreferrer\">so I suggest that here</a>. You still need a manual dereference, though.</p>\n"}], "owner": {"reputation": 30697, "user_id": 31667, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/082b069c287878a1bd5731f44c8f10e7?s=128&d=identicon&r=PG", "display_name": "viraptor", "link": "https://stackoverflow.com/users/31667/viraptor"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 299, "favorite_count": 0, "accepted_answer_id": 34521592, "answer_count": 1, "score": 3, "last_activity_date": 1451476057, "creation_date": 1451432029, "question_id": 34520784, "link": "https://stackoverflow.com/questions/34520784/str-to-owned-doesnt-result-in-a-string", "title": "&amp;&amp;str.to_owned() doesn&#39;t result in a String", "body": "<p>I've got the following code:</p>\n\n<pre><code>use std::collections::HashMap;\nfn main() {\n    let xs: Vec&lt;&amp;str&gt; = vec!(\"a\", \"b\", \"c\", \"d\");\n    let ys: Vec&lt;i32&gt; = vec!(1, 2, 3, 4);\n\n    let mut map: HashMap&lt;String,i32&gt; = HashMap::new();\n    for (x,y) in xs.iter().zip(ys) {\n        map.insert(x.to_owned(), y);\n    }\n    println!(\"{:?}\", map);\n}\n</code></pre>\n\n<p>Which results in error:</p>\n\n<pre><code>&lt;anon&gt;:8:20: 8:32 error: mismatched types:\n expected `collections::string::String`,\n    found `&amp;str`\n(expected struct `collections::string::String`,\n    found &amp;-ptr) [E0308]\n&lt;anon&gt;:8         map.insert(x.to_owned(), y);\n</code></pre>\n\n<p>But it doesn't make sense to me. <code>x</code> should be <code>&amp;&amp;str</code> at this point. So why doesn't <code>&amp;&amp;str.to_owned()</code> automagically <code>Deref</code> the same way <code>x.to_string()</code> does at this point? (Why is <code>x.to_owned()</code> a <code>&amp;str</code>?)</p>\n\n<p>I know I can fix this by either using <code>x.to_string()</code>, or <code>xs.into_iter()</code> instead.</p>\n"}, {"tags": ["operator-overloading", "rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "edited": false, "score": 0, "creation_date": 1451463084, "post_id": 34522056, "comment_id": 56792200, "body": "Thanks for comprehensive answer. I think rust uses some &quot;workaround&quot; for direct calls. When the operator form used that &quot;workaround&quot; does not apply."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "edited": false, "score": 0, "creation_date": 1451491538, "post_id": 34522056, "comment_id": 56807232, "body": "@aSpex FWIW, I don&#39;t think this is actually an <i>answer</i> to your question; it&#39;s just a workaround. I&#39;d hope that someone more knowledgable could actually say why this happens or confirm that it&#39;s a bug or missing implementation. That would be a much better answer."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 4, "last_activity_date": 1451442601, "last_edit_date": 1451442601, "creation_date": 1451441874, "answer_id": 34522056, "question_id": 34520459, "link": "https://stackoverflow.com/questions/34520459/borrowed-value-does-not-last-long-enough-when-defining-operators-for-references/34522056#34522056", "title": "Borrowed value does not last long enough when defining operators for references", "body": "<p>You have this code:</p>\n\n<pre><code>impl&lt;'r&gt; Add for &amp;'r Vector {\n    type Output = Vector;\n\n    fn add(self, _rhs: &amp;'r Vector) -&gt; Vector {\n        Vector(self.0 + _rhs.0, self.1 + _rhs.1, self.2 + _rhs.2)\n    }\n}\n</code></pre>\n\n<p>Which, when expanded out, looks a bit like this:</p>\n\n<pre><code>impl&lt;'r&gt; Add&lt;&amp;'r Vector&gt; for &amp;'r Vector {\n    type Output = Vector;\n\n    fn add(self: &amp;'r Vector, _rhs: &amp;'r Vector) -&gt; Vector {\n        Vector(self.0 + _rhs.0, self.1 + _rhs.1, self.2 + _rhs.2)\n    }\n}\n</code></pre>\n\n<p>That is, you have implemented the trait for two references that can be constrained to have overlapping lifetimes, and the value of <code>'r</code> will be the intersection of those lifetimes. If you allow adding references of two <em>distinct lifetimes</em>, it works:</p>\n\n<pre><code>impl&lt;'r, 's&gt; Add&lt;&amp;'s Vector&gt; for &amp;'r Vector {\n    type Output = Vector;\n\n    fn add(self, rhs: &amp;'s Vector) -&gt; Vector {\n        Vector(self.0 + rhs.0, self.1 + rhs.1, self.2 + rhs.2)\n    }\n}\n</code></pre>\n\n<p>I'l admit that I don't fully understand why calling <code>add</code> directly would be any different though. And as far as I can see, if it's able to create an intersecting lifetime for one direction, I'd expect it to be able to go the other direction.</p>\n\n<hr>\n\n<p>Additionally, you should <strong>not</strong> use <code>_rhs</code> as the variable name here. The preceding underscore is notation for \"this variable is unused\", but you definitely use it.</p>\n"}], "owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 55, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1451442601, "creation_date": 1451430208, "last_edit_date": 1451441907, "question_id": 34520459, "link": "https://stackoverflow.com/questions/34520459/borrowed-value-does-not-last-long-enough-when-defining-operators-for-references", "title": "Borrowed value does not last long enough when defining operators for references", "body": "<p>Why does the borrow checker not like last add operation in this code:</p>\n\n<pre><code>use std::ops::Add;\n\n#[derive(Debug)]\npub struct Vector(f64, f64, f64);\n\nimpl&lt;'r&gt; Add for &amp;'r Vector {\n    type Output = Vector;\n\n    fn add(self, _rhs: &amp;'r Vector) -&gt; Vector {\n        Vector(self.0 + _rhs.0, self.1 + _rhs.1, self.2 + _rhs.2)\n    }\n}\n\nfn main() {\n    let v1 = &amp;Vector(1.0, 2.0, 3.0);\n    let v2 = &amp;Vector(13.0, 12.0, 11.0);\n\n    println!(\"{:?}\", v2.add(v1)); // Ok\n    println!(\"{:?}\", v1.add(v2)); // Ok\n\n    println!(\"{:?}\", v2 + v1); // Ok\n    println!(\"{:?}\", v1 + v2); // error: borrowed value does not live long enough\n}\n</code></pre>\n\n<p>Commenting out the last <code>println!</code> makes this code work, which seems like a compiler bug.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 1, "creation_date": 1451397838, "post_id": 34511432, "comment_id": 56766044, "body": "Why do you want to use <code>Any</code>?"}, {"owner": {"reputation": 8055, "user_id": 166198, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/0bb02d8c845c0efc333fed5e98b99a6c?s=128&d=identicon&r=PG", "display_name": "mrueg", "link": "https://stackoverflow.com/users/166198/mrueg"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1451400351, "post_id": 34511432, "comment_id": 56767400, "body": "This is actually part of a bigger system. Basically, I want a bunch of objects each containing a function that can use some internal state, and the type of the internal state varies.      After thinking about this a bit, it&#39;s obvious that my thinking was too complicated and what I was doing was simply not the Rust way (I&#39;m new to this), but I&#39;d still be interested in why the casting doesn&#39;t work."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 1, "creation_date": 1451409363, "post_id": 34511432, "comment_id": 56772578, "body": "Another problem, besides those described in the answers below, is that it is <i>impossible</i> to write a function which accepts or returns <code>Any</code>. <code>Any</code> is a trait, therefore when it is used in a type position, it means a trait object. <code>fn(Any)</code> is a function which accepts <i>bare</i> trait object. However, bare trait objects are unsized types which can&#39;t be passed by value, so it is just impossible to write a function which would have such signature."}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1451466279, "post_id": 34511432, "comment_id": 56793748, "body": "@VladimirMatveev gooi point, editing my answer to answer that and propose an alternative approach"}], "answers": [{"tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": false, "score": 1, "last_activity_date": 1451398516, "creation_date": 1451398516, "answer_id": 34512874, "question_id": 34511432, "link": "https://stackoverflow.com/questions/34511432/unable-to-cast-generic-type-implementing-any-to-any/34512874#34512874", "title": "Unable to cast generic type implementing Any to Any", "body": "<p>When you write <code>let my_bar = Bar::&lt;f64&gt; { ev: e };</code> you have</p>\n\n<pre><code>my_bar.ev: fn(f64) -&gt; bool\n</code></pre>\n\n<p>You want to cast this to a <code>Bar&lt;Any&gt;</code>, but <code>Bar&lt;Any&gt;</code> has</p>\n\n<pre><code>my_bar.ev: fn(Any) -&gt; bool\n</code></pre>\n\n<p>Obviously you can't do this, since a <code>fn(f64) -&gt; bool</code> can't accept, say, a <code>Vec&lt;i32&gt;</code>, yet <code>Vec&lt;i32&gt;</code> is an <code>Any</code> type! The behaviour doesn't make sense! (Strictly speaking, it primarily doesn't make sense because <code>Any</code> isn't a type, but a trait.)</p>\n\n<p>Perhaps you want to have some type <code>BarAny</code> for which you can write</p>\n\n<pre><code>my_bar_any.downcast_ref::&lt;f64&gt;(): Option&lt;&amp;Bar&lt;f64&gt;&gt;\n</code></pre>\n\n<p>That's sensible, but the <code>Any</code> must be on another level - where <code>BarAny</code> is. In fact, <code>BarAny</code> is just a restricted form of <code>Any</code>:</p>\n\n<pre><code>struct Foo {\n    pub hello: Vec&lt;Box&lt;Any&gt;&gt;\n}\n\nimpl Foo {\n    pub fn add_bar&lt;T: 'static&gt;(&amp;mut self, baz: Bar&lt;T&gt;) {\n        self.hello.push(Box::new(baz));\n    }\n}\n</code></pre>\n\n<p>Note that the box is needed because <code>Any</code> is not sized.</p>\n"}, {"tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": false, "score": 3, "last_activity_date": 1451473324, "last_edit_date": 1451473324, "creation_date": 1451400969, "answer_id": 34513541, "question_id": 34511432, "link": "https://stackoverflow.com/questions/34511432/unable-to-cast-generic-type-implementing-any-to-any/34513541#34513541", "title": "Unable to cast generic type implementing Any to Any", "body": "<p>in general you <em>can</em> cast a <code>Foo&lt;T&gt;</code> to a <code>Foo&lt;Any&gt;</code> (or at least a trait object like <code>&amp;Foo&lt;T&gt;</code> to <code>&amp;Foo&lt;Any&gt;</code>).</p>\n\n<p>I.e. this is legal:</p>\n\n<pre><code>struct Foo&lt;T: ?Sized&gt; { b: T }\n\nfn main() {\n    let b = Foo { b: 32 };\n    let _b2: &amp;Foo&lt;Any&gt; = &amp;b;\n}\n</code></pre>\n\n<p>what is <em>not</em> legal is this:</p>\n\n<pre><code>fn test(a: i32) { println!(\"{}\", a+1); }\nlet t: fn(i32) = test;\n//let t2: fn(Any) = t as fn(Any);\n//                  ^~~~ this is the non-scalar cast\n</code></pre>\n\n<p>And it can't be legal because it would not be type-safe, as in general a function that accepts a <code>i32</code> would not know what to do with a <code>Any</code> (if you called <code>test</code> through <code>t2</code>, how would it perform the <code>a+1</code> in its body?).</p>\n\n<p>That's why, as you say, making <code>ev</code> a <code>fn(Any) -&gt; bool</code> makes your program compile. If you allow the <code>fn</code> to take a <code>Any</code>, your are indeed forcing each <code>ev</code> to contain its downcasting logic, but that is a feature, not a limitation. By the way (thanks @VladimirMatveev for the comment) it would need to be a <code>fn(Box&lt;Any&gt;)</code>, because <code>Any</code>is a trait and you can't store a bare trait; you can only store a reference to it and have a <a href=\"https://doc.rust-lang.org/stable/book/trait-objects.html\" rel=\"nofollow\">trait object</a>.</p>\n\n<p>That said, (while I'm not sure what your real world requirements are) based on your comment...</p>\n\n<blockquote>\n  <p>Basically, I want a bunch of objects each containing a function that\n  can use some internal state, and the type of the internal state varies</p>\n</blockquote>\n\n<p>...why do you want to store the function inside the struct? The usual way to add behavior to different types of environments is to impl a trait for them. I know this may not be what you're trying to do, but please bear with me for a bit, I'll add an example at the end that does store the fn in the struct. \nFor now, note that (wiht the fn out of the struct) you could do this:</p>\n\n<pre><code>// environments are in the structs\nstruct Bar1 {\n    env1: String,\n    env2: i32,\n}\n\nstruct Bar2 {\n    env1: char,\n}\n\n// behavior is in the trait\ntrait Ev {\n    // here I'm moving self in ev to reflect\n    // what the fn does in your example code \n    fn ev(self) -&gt; bool;\n}\n\n// each impl can access the environment of its own struct   \nimpl Ev for Bar1 {\n    fn ev(self) -&gt; bool { (self.env2 == 42) }\n}\n\nimpl Ev for Bar2 {\n    fn ev(self) -&gt; bool { (self.env1 == 'a') }\n}\n\nstruct Foo {\n    // Now we have a Vec of Ev trait objects instead of Any\n    // Ev is a bare trait so we box it\n    pub hello: Vec&lt;Box&lt;Ev&gt;&gt;,\n}\n\nimpl Foo {\n    // a T: Ev is any of Bar1, Bar2...\n    pub fn add_bar&lt;T: Ev + 'static&gt;(&amp;mut self, baz: T) {\n        let baz2: Box&lt;Ev&gt; = Box::new(baz);\n        self.hello.push(baz2); \n    }\n}\n\n// example of use\nfn main() {\n    let mut my_foo = Foo { hello: Vec::new() };\n\n    let my_bar = Bar2 { env1: 'a' };\n    my_foo.add_bar(my_bar);\n}\n</code></pre>\n\n<p>I'm not sure if this can be applied in your real-world scenario. The most notable functional difference even with your example code is that in your case the <em>client</em> of your code can decide what behavior to attach to a specific struct, while with the trait approach you have to decide on one impl for the trait when you create a new <code>Bar</code>.</p>\n\n<p>However, building on the trait approach, if you do need to have the fn inside the struct, you can now do it without it being generic. I.e you can have</p>\n\n<pre><code>struct Bar {\n    env1: u8,\n    // ev is not generit, it explicitly takes a Bar\n    ev: fn(a: &amp;Bar) -&gt; bool\n}\n\n// the trait defers to the fn stored in the struct\nimpl Ev for Bar {\n    fn ev(&amp;self) -&gt; bool { (self.ev)(&amp;self) }\n}\n</code></pre>\n\n<p><a href=\"http://is.gd/Ve7CBu\" rel=\"nofollow\">full example on the playground</a></p>\n"}], "owner": {"reputation": 8055, "user_id": 166198, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/0bb02d8c845c0efc333fed5e98b99a6c?s=128&d=identicon&r=PG", "display_name": "mrueg", "link": "https://stackoverflow.com/users/166198/mrueg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1028, "favorite_count": 0, "answer_count": 2, "score": 1, "last_activity_date": 1451473324, "creation_date": 1451393371, "last_edit_date": 1495541042, "question_id": 34511432, "link": "https://stackoverflow.com/questions/34511432/unable-to-cast-generic-type-implementing-any-to-any", "title": "Unable to cast generic type implementing Any to Any", "body": "<p>I'm trying to store dynamic objects using <code>Any</code>. </p>\n\n<p>My problem is that the <code>add_bar</code> function does not work as I expect. I would think that I could add a <code>Bar&lt;T&gt;</code> where <code>T: Any + 'static</code> to a vector of <code>Bar&lt;Any&gt;</code>, but I get a <em>mismatched types</em> error.</p>\n\n<p>If I follow the suggestion from <a href=\"https://stackoverflow.com/questions/29879372/expected-trait-coreopsfnmut-found-type-parameter\">here</a>, I get a <em>non-scalar cast</em> error.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::any::Any;\n\nstruct Bar&lt;S: ?Sized&gt; {\n    ev: fn(S) -&gt; bool,\n}\n\n// test case\nstruct Foo {\n    pub hello: Vec&lt;Bar&lt;Any&gt;&gt;\n}\n\nimpl Foo {\n    pub fn add_bar&lt;T: Any + 'static&gt;(&amp;mut self, baz: Bar&lt;T&gt;) {\n        let baz2 = baz as Bar&lt;_&gt;; // non-scalar cast\n        self.hello.push(baz2); // without using baz2: mismatched types. expected trait Any, found type parameter\n    }\n}\n\nfn bla() {\n    let mut my_foo = Foo { hello: Vec::new() };\n    fn e(v: f64) -&gt; bool {\n        true\n    }\n    let my_bar = Bar::&lt;f64&gt; { ev: e };\n    my_foo.add_bar::&lt;f64&gt;(my_bar);\n}\n</code></pre>\n\n<p>The only solution so far is to make the <code>ev</code> function take an <code>Any</code> as its argument, but that doesn't seem very elegant because all possible <code>ev</code> functions would have to contain their own downcasting.</p>\n"}, {"tags": ["json", "rust", "iron"], "answers": [{"comments": [{"owner": {"reputation": 43, "user_id": 2943938, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ef8c307c0d2220639a67b34572132f81?s=128&d=identicon&r=PG", "display_name": "chups", "link": "https://stackoverflow.com/users/2943938/chups"}, "edited": false, "score": 0, "creation_date": 1451345174, "post_id": 34502166, "comment_id": 56746453, "body": "Ah that makes sense. Thanks!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1497547102, "last_edit_date": 1497547102, "creation_date": 1451344482, "answer_id": 34502166, "question_id": 34501423, "link": "https://stackoverflow.com/questions/34501423/is-possible-to-post-a-json-file-at-a-router-location-with-the-iron-framework/34502166#34502166", "title": "Is possible to post a JSON file at a router location with the Iron framework?", "body": "<p>You have a misunderstanding of how HTTP POST works, or at least how it works when exposed through Iron and friends. A POST request is sent in a separate part of the request from the URL / path information, and Iron exposes these two concepts separately. </p>\n\n<p>You are using <a href=\"https://github.com/iron/router\" rel=\"nofollow noreferrer\">Iron Router</a> to map paths to functions and to extract simple parameters from the path. You need to <em>also</em> use <a href=\"https://github.com/iron/body-parser\" rel=\"nofollow noreferrer\">Iron Body Parser</a> to extract data from the POST body. It will automatically parse JSON for you, as well as give access to the raw binary data.</p>\n\n<pre><code>extern crate iron;\nextern crate router;\nextern crate mount;\nextern crate bodyparser;\n\nuse iron::prelude::*;\nuse iron::status;\nuse router::Router;\nuse mount::Mount;\n\nfn post_to_documents(req: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\n    match req.extensions.get::&lt;Router&gt;().and_then(|r| r.find(\"json\")) {\n        Some(name) =&gt; println!(\"The name was {:?}\", name),\n        None =&gt; println!(\"There was no name!\"),\n    }\n\n    match req.get::&lt;bodyparser::Json&gt;() {\n        Ok(Some(json_body)) =&gt; println!(\"Parsed body:\\n{:?}\", json_body),\n        Ok(None) =&gt; println!(\"No body\"),\n        Err(err) =&gt; println!(\"Error: {:?}\", err)\n    }\n\n    Ok(Response::with((status::Ok, \"Ok\")))\n}\n\nfn main() {\n    let mut router = Router::new();\n    router.post(\"/documents/post/:json\", post_to_documents, \"new_document\");\n\n    let mut mount = Mount::new();\n    mount.mount(\"/\", router);\n\n    Iron::new(mount).http(\"0.0.0.0:3000\").unwrap();\n}\n</code></pre>\n\n<p>I have a file called <code>input.json</code>:</p>\n\n<pre><code>{\"key\": \"value\"}\n</code></pre>\n\n<p>And I run this command:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>curl -v -i --header \"Content-Type: application/json\" -X POST -d @input.json http://127.0.0.1:3000/documents/post/awesome\n</code></pre>\n\n<p>With this output from the server:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>The name was \"awesome\"\nParsed body:\nObject({\"key\": String(\"value\")})\n</code></pre>\n\n<p>I cannot explain why you are getting a 404 error.</p>\n\n<p>This was done with</p>\n\n<ul>\n<li>bodyparser 0.7.0</li>\n<li>iron 0.5.1</li>\n<li>mount 0.3.0</li>\n<li>router 0.5.1</li>\n</ul>\n"}], "owner": {"reputation": 43, "user_id": 2943938, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ef8c307c0d2220639a67b34572132f81?s=128&d=identicon&r=PG", "display_name": "chups", "link": "https://stackoverflow.com/users/2943938/chups"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 582, "favorite_count": 0, "accepted_answer_id": 34502166, "answer_count": 1, "score": 2, "last_activity_date": 1497547102, "creation_date": 1451340141, "last_edit_date": 1497546792, "question_id": 34501423, "link": "https://stackoverflow.com/questions/34501423/is-possible-to-post-a-json-file-at-a-router-location-with-the-iron-framework", "title": "Is possible to post a JSON file at a router location with the Iron framework?", "body": "<p>I'm using the Iron web framework (for the Rust programming language) in an application and I have a path exposed to POST JSON data at using the <a href=\"https://github.com/iron/router\" rel=\"nofollow noreferrer\">Router crate</a>. </p>\n\n<p>It works but I have to percent encode my JSON data and append it as a string to the end of my HTTP POST request - which works but is a bit tedious and I'd like to eventually POST raw image files. </p>\n\n<p>I'd like to be able to do something along the lines of the following curl command:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>curl -v -i --header \"Content-Type: application/json\" -X POST -d @some_local_json_file.json http://my_server_ip_address:3000/example_path/post/json_object_here\n</code></pre>\n\n<p>I'm currently getting a <code>HTTP/1.1 404 Not Found</code> error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>curl -v -i --header \"Content-Type: application/json\" -X POST -d @some_local_json_file.json http://my_server_ip_address:3000/example_path/post/json\nNote: Unnecessary use of -X or --request, POST is already inferred.\n*   Trying my_server_ip_address...\n* Connected to my_server_ip_address (my_server_ip_address) port 3000 (#0)\n&gt; POST /example_path/post/json HTTP/1.1\n&gt; Host: my_server_ip_address:3000\n&gt; User-Agent: curl/7.45.0\n&gt; Accept: */*\n&gt; Content-Type: application/json\n&gt; Content-Length: 2354\n&gt; Expect: 100-continue\n&gt; \n&lt; HTTP/1.1 100 Continue\nHTTP/1.1 100 Continue\n\n* We are completely uploaded and fine\n&lt; HTTP/1.1 404 Not Found\nHTTP/1.1 404 Not Found\n&lt; Date: Mon, 28 Dec 2015 22:44:03 GMT\nDate: Mon, 28 Dec 2015 22:44:03 GMT\n&lt; Content-Length: 0\nContent-Length: 0\n\n&lt; \n* Connection #0 to host my_server_ip_address left intact\n</code></pre>\n\n<p>The meat of my <code>main</code> function looks like:</p>\n\n<pre><code>fn main() {\n    // create the router\n    let mut router = Router::new();\n\n    router.post(\"/example_path/post/:json\", post_to_documents);\n\n    let mut mount = Mount::new();\n\n    // mount the router\n    mount.mount(\"/\", router);\n\n    Iron::new(mount).http(\"0.0.0.0:3000\").unwrap();\n}\n</code></pre>\n\n<p>And the <code>post_to_documents</code> listed above is along the lines of:</p>\n\n<pre><code>fn post_to_documents(req: &amp;mut Request) -&gt; IronResult&lt;Response&gt;\n{\n    let document_url_encoded = req.extensions.get::&lt;Router&gt;()\n                                             .unwrap()\n                                             .find(\"json\")\n                                             .unwrap_or(\"/\");\n    // Just return Ok\n    Ok(Response::with((status::Ok, \"Ok\")))\n}\n</code></pre>\n\n<p>I want to have the JSON data in the <code>document_url_encoded</code> variable. (I guess it's poorly named since it would not be url/percent encoded in this case)</p>\n"}, {"tags": ["rust", "rotor"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 4, "last_activity_date": 1451317822, "creation_date": 1451317822, "answer_id": 34496544, "question_id": 34496467, "link": "https://stackoverflow.com/questions/34496467/what-does-mean-in-a-match-statement/34496544#34496544", "title": "What does @ mean in a match statement?", "body": "<p>You can use the <a href=\"http://doc.rust-lang.org/book/syntax-index.html\" rel=\"nofollow\">syntax index in the Rust Book</a> to look up bits of syntax.  In this case, it's a <a href=\"http://doc.rust-lang.org/book/patterns.html#bindings\" rel=\"nofollow\">pattern binding</a>, used to bind a specific part of a pattern to a variable.</p>\n\n<p>Here, it's being used to bind the entire value to <code>me</code> if and only if it is an <code>Echo::Server</code> variant.</p>\n"}], "owner": {"reputation": 125, "user_id": 2262126, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/768939c954a89140c8d0c5b975c860f4?s=128&d=identicon&r=PG", "display_name": "Sergey ", "link": "https://stackoverflow.com/users/2262126/sergey"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 92, "favorite_count": 0, "accepted_answer_id": 34496544, "answer_count": 1, "score": 3, "last_activity_date": 1451318067, "creation_date": 1451317515, "last_edit_date": 1451318067, "question_id": 34496467, "link": "https://stackoverflow.com/questions/34496467/what-does-mean-in-a-match-statement", "title": "What does @ mean in a match statement?", "body": "<p>I've started to study <a href=\"https://github.com/tailhook/rotor/\" rel=\"nofollow\">the rotor library</a> and I've <a href=\"https://github.com/tailhook/rotor/blob/55c678afea1dc5bc9ccc7cb4e4b1e4035c08ae47/examples/tcp_echo_server.rs#L61\" rel=\"nofollow\">found the expression</a>:</p>\n\n<pre><code>me @ Echo::Server(..) =&gt; me.accept(),\n</code></pre>\n\n<p>What does this mean and how do I use the <code>@</code> operator? My guess is that it is something like a cast operation, but the Rust book's <a href=\"https://doc.rust-lang.org/book/casting-between-types.html\" rel=\"nofollow\">section about casting</a> doesn't mention it.</p>\n"}, {"tags": ["rust", "web-frameworks", "iron"], "answers": [{"comments": [{"owner": {"reputation": 4408, "user_id": 154680, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/1fe5646f7071126187fbda8c68c526f6?s=128&d=identicon&r=PG", "display_name": "russoue", "link": "https://stackoverflow.com/users/154680/russoue"}, "edited": false, "score": 0, "creation_date": 1451344749, "post_id": 34495387, "comment_id": 56746328, "body": "The code I put in the question is not exactly what I was using, the only difference was <code>auth</code> was static. After making it non-static it just worked. Thanks."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1451312948, "creation_date": 1451312948, "answer_id": 34495387, "question_id": 34489422, "link": "https://stackoverflow.com/questions/34489422/beforemiddleware-implementation-requires-coreopsfn-implementation/34495387#34495387", "title": "BeforeMiddleware implementation requires core::ops::Fn implementation", "body": "<p>This works just fine:</p>\n\n<pre><code>extern crate iron;\n\nuse iron::{Chain, BeforeMiddleware, IronResult, Request, Response, IronError};\nuse iron::status;\n\nstruct Auth;\n\nimpl BeforeMiddleware for Auth {\n    fn before(&amp;self, _: &amp;mut Request) -&gt; IronResult&lt;()&gt; {\n        println!(\"before called\");\n        Ok(())\n    }\n\n    fn catch(&amp;self, _: &amp;mut Request, err: IronError) -&gt; IronResult&lt;()&gt; {\n        println!(\"catch called\");\n        Err(err)\n    }\n}\n\nfn main() {\n    fn hello_world(_: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\n        Ok(Response::with((status::Ok, \"Hello World!\")))\n    }\n\n    let mut c = Chain::new(hello_world);\n    let auth = Auth;\n    c.link_before(auth);\n}\n</code></pre>\n\n<p>This compiles against iron 0.2.6.</p>\n"}], "owner": {"reputation": 4408, "user_id": 154680, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/1fe5646f7071126187fbda8c68c526f6?s=128&d=identicon&r=PG", "display_name": "russoue", "link": "https://stackoverflow.com/users/154680/russoue"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 156, "favorite_count": 0, "accepted_answer_id": 34495387, "answer_count": 1, "score": 0, "last_activity_date": 1451344830, "creation_date": 1451288006, "last_edit_date": 1451344830, "question_id": 34489422, "link": "https://stackoverflow.com/questions/34489422/beforemiddleware-implementation-requires-coreopsfn-implementation", "title": "BeforeMiddleware implementation requires core::ops::Fn implementation", "body": "<p>I am trying to implement the <code>BeforeMiddleware</code> trait for a <code>struct</code> I have. I have written the following code:</p>\n\n<pre><code>impl BeforeMiddleware for Auth {\n    fn before(&amp;self, _: &amp;mut Request) -&gt; IronResult&lt;()&gt; {\n        println!(\"before called\");\n        Ok(())\n    }\n\n    fn catch(&amp;self, _: &amp;mut Request, err: IronError) -&gt; IronResult&lt;()&gt; {\n        println!(\"catch called\");\n        Err(err)\n    }\n}\n</code></pre>\n\n<p>I am getting the following error:</p>\n\n<pre><code>&gt; cargo build\n...\nsrc/handlers/mod.rs:38:11: 38:28 error: the trait `for&lt;'r, 'r, 'r&gt; core::ops::Fn&lt;(&amp;'r mut iron::request::Request&lt;'r, 'r&gt;,)&gt;` is not implemented for the type `auth::Auth` [E0277]\nsrc/handlers/mod.rs:38     chain.link_before(auth);\n                                 ^~~~~~~~~~~~~~~~~\nsrc/handlers/mod.rs:38:11: 38:28 help: run `rustc --explain E0277` to see a detailed explanation\nsrc/handlers/mod.rs:38:11: 38:28 error: the trait `for&lt;'r, 'r, 'r&gt; core::ops::FnOnce&lt;(&amp;'r mut iron::request::Request&lt;'r, 'r&gt;,)&gt;` is not implemented for the type `auth::Auth` [E0277]\nsrc/handlers/mod.rs:38     chain.link_before(auth);\n                                 ^~~~~~~~~~~~~~~~~\nsrc/handlers/mod.rs:38:11: 38:28 help: run `rustc --explain E0277` to see a detailed explanation\nerror: aborting due to 2 previous errors\n...\n</code></pre>\n\n<p>But <a href=\"http://ironframework.io/doc/iron/middleware/struct.Chain.html#method.link_before\" rel=\"nofollow\">the documentation</a> says the <code>link_before</code> function requires a <code>BeforeMiddleware</code> only.</p>\n\n<p>Does anyone know why I am seeing this error and how to fix it?</p>\n\n<p>EDIT:</p>\n\n<p>I was actually using a static <code>auth</code>, after making it non-static the problem went away.</p>\n"}, {"tags": ["error-handling", "rust"], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 5, "last_activity_date": 1451289442, "creation_date": 1451289442, "answer_id": 34489700, "question_id": 34489200, "link": "https://stackoverflow.com/questions/34489200/are-there-any-conventions-for-aggregating-multiple-errors-as-the-causes-of-anoth/34489700#34489700", "title": "Are there any conventions for aggregating multiple errors as the causes of another error?", "body": "<p>There is no convention that I know of, and indeed I have never had the issue of attempting to report multiple errors at once...</p>\n\n<p>... that being said, there are two points that may help you:</p>\n\n<ol>\n<li><p>There is no limitation that the description be a <code>'static</code> <code>String</code>, you are likely confusing <code>&amp;'static str</code> and <code>&amp;str</code>. In <code>fn description(&amp;self) -&gt; &amp;str</code>, the lifetime of <code>str</code> is linked to the lifetime of <code>self</code> (lifetime elision) and therefore an embedded <code>String</code> satisfies the constraints</p></li>\n<li><p><code>Error</code> is an interface to deal with errors uniformly. In this case, indeed, only a single <code>cause</code> was foreseen, however it does not preclude a more specific type to aggregate multiple causes and since <code>Error</code> allows downcasting (<code>Error::is</code>, <code>Error::downcast</code>, ...) the more specific type can be retrieved by the handler and queried in full</p></li>\n</ol>\n\n<p>As such, I would suggest that you create a new concrete type solely dedicated to holding multiple errors (in a <code>Vec&lt;Box&lt;Error&gt;&gt;</code>), and implementing the <code>Error</code> interface. It's up to you to decide on the description and cause it will expose.</p>\n\n<p>A single type will let your clients test more easily for downcasting than having an unknown (and potentially growing as time goes) number of potential downcast targets.</p>\n"}, {"tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": false, "score": 3, "last_activity_date": 1451317908, "last_edit_date": 1451317908, "creation_date": 1451301216, "answer_id": 34492455, "question_id": 34489200, "link": "https://stackoverflow.com/questions/34489200/are-there-any-conventions-for-aggregating-multiple-errors-as-the-causes-of-anoth/34492455#34492455", "title": "Are there any conventions for aggregating multiple errors as the causes of another error?", "body": "<p>expanding a bit on point 1 of Matthieu's good answer.\nThe point where you're likely running into trouble (I know I did when I tried to implement <code>Error</code>) is that you want to have a dynamic <code>description()</code>.</p>\n\n<pre><code>// my own error type\n#[derive(Debug)] struct MyError { value: u8 }\n\nimpl fmt::Display for MyError {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n            write!(f, \"bummer! Got a {}\", self.value)\n    }\n}\n\n// I am now tempted to add the problematic value dynamically\n// into the description, but I run into trouble with lifetimes \n// this DOES NOT COMPILE because the String I'm building\n// goes out of scope and I can't return a reference to it\nimpl error::Error for MyError {\n   fn description(&amp;self) -&gt; &amp;str {\n        &amp;format!(\"can't put a {} here!\", self.value)\n   }\n}\n</code></pre>\n\n<p><strong>solution 1</strong></p>\n\n<p>Don't dynamically build <code>description()</code>. Just use a static str. This is what <a href=\"https://github.com/search?q=%22impl%20error%3A%3AError%20for%22&amp;type=Code\" rel=\"nofollow\">most implementations of Error on github</a> seem to do.\nIf you need to retrieve and display (or log) the value you can always access it from your <code>MyError</code> type. Plus <code>Display</code> (that you must implement for all Error impls) does allow you to create dynamic strings.</p>\n\n<p>I created a <a href=\"https://play.rust-lang.org/?gist=27538b7e468395d3bcc4&amp;version=nightly\" rel=\"nofollow\">contrived example on the playground</a> that shows how to track multiple errors.</p>\n\n<p><strong>solution 2</strong></p>\n\n<p>(what Matthieu is suggesting) you can store the error message in the error itself.</p>\n\n<pre><code>#[derive(Debug)] struct MyError { value: u8, msg: String }\n\nimpl MyError {\n    fn new(value: u8) -&gt; MyError {\n        MyError { value: value, msg: format!(\"I don't like value {}\", value) }\n    }\n}\n\n// now this works because the returned &amp;str has the same lifetime\n// as self\nimpl error::Error for MyError {\n   fn description(&amp;self) -&gt; &amp;str {\n        &amp;self.msg\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 430, "user_id": 149026, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/95f0b91b4553d548d8429e1bb5c70018?s=128&d=identicon&r=PG", "display_name": "Michael", "link": "https://stackoverflow.com/users/149026/michael"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 601, "favorite_count": 0, "accepted_answer_id": 34489700, "answer_count": 2, "score": 4, "last_activity_date": 1451317908, "creation_date": 1451286953, "last_edit_date": 1451310987, "question_id": 34489200, "link": "https://stackoverflow.com/questions/34489200/are-there-any-conventions-for-aggregating-multiple-errors-as-the-causes-of-anoth", "title": "Are there any conventions for aggregating multiple errors as the causes of another error?", "body": "<p>I'm writing a function that iterates over a vector of <code>Result</code> and returns success if they all were successful, or an error if any failed. Limitations in <code>error::Error</code> are frustrating me and I'm not sure how to work around them. Currently I have something like:</p>\n\n<pre><code>let mut errors = Vec::new();            \n\nfor result in results {                             \n     match result {                        \n         Err(err) =&gt; errors.push(err),\n         Ok(success) =&gt; { ... }\n     }                                                                                                                                      \n}\n\nif errors.is_empty() {\n    return Ok(())\nelse {\n    return Err(MyErrorType(errors))\n}\n</code></pre>\n\n<p>The problem with my current approach is that I can only set one error to be the <code>cause</code> of <code>MyErrorType</code>, and my error's <code>description</code> needs to be a static <code>String</code> so I can't include the descriptions of each of the triggering failures. All of the failures are potentially relevant to the caller.</p>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": false, "score": 9, "last_activity_date": 1451247273, "creation_date": 1451247273, "answer_id": 34484405, "question_id": 34484361, "link": "https://stackoverflow.com/questions/34484361/does-cargo-install-have-an-equivalent-update-command/34484405#34484405", "title": "Does cargo install have an equivalent update command?", "body": "<p>Nope. You can discuss it in <a href=\"https://github.com/rust-lang/cargo/issues/2082\">this</a> issue.</p>\n"}, {"comments": [{"owner": {"reputation": 1053, "user_id": 3991562, "user_type": "registered", "accept_rate": 100, "profile_image": "https://graph.facebook.com/100000391593910/picture?type=large", "display_name": "Ben Sandeen", "link": "https://stackoverflow.com/users/3991562/ben-sandeen"}, "edited": false, "score": 2, "creation_date": 1519793922, "post_id": 40982333, "comment_id": 85049551, "body": "Thank you so much for this utility!  It&#39;s fantastic!  And this should be the accepted answer"}, {"owner": {"reputation": 3039, "user_id": 2851815, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/37MCt.png?s=128&g=1", "display_name": "\u043d\u0430\u0431\u0438\u044f\u0447\u043b\u044d\u0432\u044d\u043b\u0438", "link": "https://stackoverflow.com/users/2851815/%d0%bd%d0%b0%d0%b1%d0%b8%d1%8f%d1%87%d0%bb%d1%8d%d0%b2%d1%8d%d0%bb%d0%b8"}, "reply_to_user": {"reputation": 1053, "user_id": 3991562, "user_type": "registered", "accept_rate": 100, "profile_image": "https://graph.facebook.com/100000391593910/picture?type=large", "display_name": "Ben Sandeen", "link": "https://stackoverflow.com/users/3991562/ben-sandeen"}, "edited": false, "score": 1, "creation_date": 1519856717, "post_id": 40982333, "comment_id": 85084582, "body": "@BenSandeen Well, that&#39;s the general treatment answers that are a year late v0v"}, {"owner": {"reputation": 11878, "user_id": 588759, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/216ea4da5cae7be4030b6242ab90631c?s=128&d=identicon&r=PG", "display_name": "rofrol", "link": "https://stackoverflow.com/users/588759/rofrol"}, "edited": false, "score": 1, "creation_date": 1535745664, "post_id": 40982333, "comment_id": 91195224, "body": "needs <code>cmake</code> to be installed"}, {"owner": {"reputation": 3039, "user_id": 2851815, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/37MCt.png?s=128&g=1", "display_name": "\u043d\u0430\u0431\u0438\u044f\u0447\u043b\u044d\u0432\u044d\u043b\u0438", "link": "https://stackoverflow.com/users/2851815/%d0%bd%d0%b0%d0%b1%d0%b8%d1%8f%d1%87%d0%bb%d1%8d%d0%b2%d1%8d%d0%bb%d0%b8"}, "reply_to_user": {"reputation": 11878, "user_id": 588759, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/216ea4da5cae7be4030b6242ab90631c?s=128&d=identicon&r=PG", "display_name": "rofrol", "link": "https://stackoverflow.com/users/588759/rofrol"}, "edited": false, "score": 1, "creation_date": 1535884912, "post_id": 40982333, "comment_id": 91222089, "body": "@rofrol As is clearly outlaid in <a href=\"https://github.com/nabijaczleweli/cargo-update#installation\" rel=\"nofollow noreferrer\">the Installation sexion of the Manpage</a>"}], "tags": [], "owner": {"reputation": 3039, "user_id": 2851815, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/37MCt.png?s=128&g=1", "display_name": "\u043d\u0430\u0431\u0438\u044f\u0447\u043b\u044d\u0432\u044d\u043b\u0438", "link": "https://stackoverflow.com/users/2851815/%d0%bd%d0%b0%d0%b1%d0%b8%d1%8f%d1%87%d0%bb%d1%8d%d0%b2%d1%8d%d0%bb%d0%b8"}, "is_accepted": false, "score": 96, "last_activity_date": 1480967968, "creation_date": 1480967968, "answer_id": 40982333, "question_id": 34484361, "link": "https://stackoverflow.com/questions/34484361/does-cargo-install-have-an-equivalent-update-command/40982333#40982333", "title": "Does cargo install have an equivalent update command?", "body": "<p>There is no such command in vanilla <code>cargo</code> (well, there's <code>cargo install</code> but that's for dependencies), but since <code>cargo</code> supports <a href=\"https://github.com/rust-lang/cargo/wiki/Third-party-cargo-subcommands\">third-party subcommands</a> there is an answer: the <a href=\"https://crates.io/crates/cargo-update\"><code>cargo-update</code> crate</a>.</p>\n\n<p>Install as usual with <code>cargo install cargo-update</code>, then use <code>cargo install-update -a</code> to update all installed packages, for more usage information and examples see the <a href=\"https://cdn.rawgit.com/nabijaczleweli/cargo-update/man/cargo-install-update.1.html\"><code>cargo install-update</code> manpage</a>.</p>\n\n<p><sub>Disclaimer: am author</sub></p>\n"}, {"comments": [{"owner": {"reputation": 506, "user_id": 4247209, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/375ae38623021afce306b37a59c554f9?s=128&d=identicon&r=PG&f=1", "display_name": "David Bailey", "link": "https://stackoverflow.com/users/4247209/david-bailey"}, "edited": false, "score": 0, "creation_date": 1612876950, "post_id": 40982613, "comment_id": 116898524, "body": "In recent versions of <code>cargo</code>, using <code>--force</code> is no longer necessary to update a crate"}], "tags": [], "owner": {"reputation": 13635, "user_id": 547365, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/ddefbca930fdd39846b698bab7ac3146?s=128&d=identicon&r=PG", "display_name": "w.brian", "link": "https://stackoverflow.com/users/547365/w-brian"}, "is_accepted": false, "score": 28, "last_activity_date": 1488047491, "last_edit_date": 1488047491, "creation_date": 1480969178, "answer_id": 40982613, "question_id": 34484361, "link": "https://stackoverflow.com/questions/34484361/does-cargo-install-have-an-equivalent-update-command/40982613#40982613", "title": "Does cargo install have an equivalent update command?", "body": "<p>A solution I've found is to add the <code>--force</code> flag to the install command.  For example <code>cargo install --force clippy</code>.  This will effectively re-install the latest version.</p>\n"}, {"comments": [{"owner": {"reputation": 7686, "user_id": 274972, "user_type": "registered", "accept_rate": 76, "profile_image": "https://i.stack.imgur.com/6T1Bg.jpg?s=128&g=1", "display_name": "Monstieur", "link": "https://stackoverflow.com/users/274972/monstieur"}, "edited": false, "score": 0, "creation_date": 1566398388, "post_id": 56857644, "comment_id": 101645539, "body": "Will this also compile them with nightly?"}, {"owner": {"reputation": 5963, "user_id": 857012, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/LmRqL.png?s=128&g=1", "display_name": "Brian Gordon", "link": "https://stackoverflow.com/users/857012/brian-gordon"}, "edited": false, "score": 1, "creation_date": 1578654576, "post_id": 56857644, "comment_id": 105518230, "body": "This is now stabilized, and the default behavior. You no longer need to use the nightly channel or provide the <code>-Z install-upgrade</code> argument. <a href=\"https://github.com/rust-lang/cargo/pull/7560\" rel=\"nofollow noreferrer\">github.com/rust-lang/cargo/pull/7560</a>"}], "tags": [], "owner": {"reputation": 47215, "user_id": 1832745, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qiqpM.png?s=128&g=1", "display_name": "Nicolai Fr&#246;hlich", "link": "https://stackoverflow.com/users/1832745/nicolai-fr%c3%b6hlich"}, "is_accepted": true, "score": 24, "last_activity_date": 1598463297, "last_edit_date": 1598463297, "creation_date": 1562089365, "answer_id": 56857644, "question_id": 34484361, "link": "https://stackoverflow.com/questions/34484361/does-cargo-install-have-an-equivalent-update-command/56857644#56857644", "title": "Does cargo install have an equivalent update command?", "body": "<p>As of Rust 1.41.0, you can use the following command to update crates to their latest version:</p>\n<pre class=\"lang-none prettyprint-override\"><code>cargo install &lt;crate&gt;\n</code></pre>\n<p>This came from pull request <a href=\"https://github.com/rust-lang/cargo/pull/6798\" rel=\"noreferrer\">#6798 (Add install-upgrade)</a> and was stabilized in <a href=\"https://github.com/rust-lang/cargo/pull/7560\" rel=\"noreferrer\">#7560 (Stabilize install-upgrade)</a>.</p>\n<h3>How does it work?</h3>\n<p>Instead of failing when <code>cargo install</code> detects a package is already installed, it will upgrade if the versions don't match, or do nothing (exit 0) if it is considered &quot;up-to-date&quot;.</p>\n<h3>Forcing an upgrade / re-installation</h3>\n<p>The following command will <strong>always</strong> uninstall, download and compile the latest version of the crate - even if there's no newer version available. Under normal circumstances the <code>install-upgrade</code> feature should be preferred as it does save time and bandwidth if there's no new version of the crate.</p>\n<pre class=\"lang-none prettyprint-override\"><code>cargo install --force &lt;crate&gt;\n</code></pre>\n<h3>Documentation</h3>\n<p>Further information can be found in the GitHub issue <a href=\"https://github.com/rust-lang/cargo/issues/6797\" rel=\"noreferrer\">rust-lang/cargo#6797</a> and <a href=\"https://doc.rust-lang.org/cargo/commands/cargo-install.html?highlight=upgrade#cargo-install\" rel=\"noreferrer\">in the official documentation chapter</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 506, "user_id": 4247209, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/375ae38623021afce306b37a59c554f9?s=128&d=identicon&r=PG&f=1", "display_name": "David Bailey", "link": "https://stackoverflow.com/users/4247209/david-bailey"}, "is_accepted": false, "score": 1, "last_activity_date": 1612455243, "creation_date": 1612455243, "answer_id": 66049504, "question_id": 34484361, "link": "https://stackoverflow.com/questions/34484361/does-cargo-install-have-an-equivalent-update-command/66049504#66049504", "title": "Does cargo install have an equivalent update command?", "body": "<p>Here is a one-liner to update all installed Cargo crates, except those installed from a local folder:</p>\n<pre class=\"lang-sh prettyprint-override\"><code>cargo install $(cargo install --list | egrep '^[a-z0-9_-]+ v[0-9.]+:$' | cut -f1 -d' ')\n</code></pre>\n<p>Explanation:</p>\n<ul>\n<li>List installed packages</li>\n<li>Filter to lines which contain package names and versions, and exclude ones with filesystem paths</li>\n<li>Cut those lines to only include the package name</li>\n<li><code>cargo install</code> with the resulting package names</li>\n</ul>\n"}], "owner": {"reputation": 13635, "user_id": 547365, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/ddefbca930fdd39846b698bab7ac3146?s=128&d=identicon&r=PG", "display_name": "w.brian", "link": "https://stackoverflow.com/users/547365/w-brian"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 16832, "favorite_count": 10, "accepted_answer_id": 56857644, "answer_count": 5, "score": 67, "last_activity_date": 1612455243, "creation_date": 1451246995, "last_edit_date": 1480967397, "question_id": 34484361, "link": "https://stackoverflow.com/questions/34484361/does-cargo-install-have-an-equivalent-update-command", "title": "Does cargo install have an equivalent update command?", "body": "<p>I'd like to update a package that I used <code>cargo install</code> to globally install packages, such as rustfmt or racer. I can't find a way to update an installed package without first deleting it (via <code>cargo uninstall</code>) and then running the install command again. Is there an update command?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 36902, "user_id": 223424, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e97c628a88337b15e76a4690e916a2cd?s=128&d=identicon&r=PG", "display_name": "9000", "link": "https://stackoverflow.com/users/223424/9000"}, "edited": false, "score": 1, "creation_date": 1451191311, "post_id": 34477559, "comment_id": 56696911, "body": "The <code>+</code> is a separator between <a href=\"https://doc.rust-lang.org/reference.html#traits\" rel=\"nofollow noreferrer\">traits</a> which <code>ColumnValue</code> has to implement. <code>&#39;static</code> specifies the lifetime. Have you tried reading <a href=\"https://doc.rust-lang.org/#language-reference\" rel=\"nofollow noreferrer\">the docs</a>?"}], "answers": [{"tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": true, "score": 6, "last_activity_date": 1451191412, "creation_date": 1451191412, "answer_id": 34477644, "question_id": 34477559, "link": "https://stackoverflow.com/questions/34477559/what-is-the-purpose-of-the-operator-in-an-associated-type/34477644#34477644", "title": "What is the purpose of the + operator in an associated type?", "body": "<p>In that context, <code>type X: Y</code> means that <code>X</code> is some type with bounds <code>Y</code>. <code>+</code> is a way of combining bounds such that <code>X</code> must satisfy <em>all</em> of the bounds.</p>\n\n<p>In other words, any <code>impl</code> for <code>Group</code> must have an associated type <code>ColumnValue</code> that is <code>Sized</code> <em>and</em> <code>Clone</code>able <em>and</em> <code>Eq</code>uatable <em>and</em> <code>Hash</code>able <em>and</em> <code>'static</code>.</p>\n\n<p>Thus any code using <code>T: Group</code> knows that anything of type <code>T::ColumnValue</code> can be stored on the stack (<code>Sized</code>), cloned, checked for equality, hashed and does not have a non-<code>'static</code> lifetime requirement.</p>\n"}], "owner": {"reputation": 1508, "user_id": 1304519, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e8850b692b1c4e1d6439f002846a2df8?s=128&d=identicon&r=PG", "display_name": "Kajal Sinha", "link": "https://stackoverflow.com/users/1304519/kajal-sinha"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 87, "favorite_count": 0, "accepted_answer_id": 34477644, "answer_count": 1, "score": 1, "last_activity_date": 1451531707, "creation_date": 1451190449, "last_edit_date": 1451531707, "question_id": 34477559, "link": "https://stackoverflow.com/questions/34477559/what-is-the-purpose-of-the-operator-in-an-associated-type", "title": "What is the purpose of the + operator in an associated type?", "body": "<p>I need to know the purpose of <code>+</code> operator and the <code>'static</code> keyword at the end. I understand <code>'static</code> refers to the lifetime but what purpose it solves in this code.</p>\n\n<pre><code>pub trait Group {\n    type ColumnValue: Sized + Clone + Eq + Hash + 'static;\n\n    // ...methods...\n}\n</code></pre>\n\n<p>I pulled this code text from a <a href=\"https://github.com/nukep/llamadb/blob/b2de13b068ab312faa8b87e9e1ea20a0a72c5c14/src/databasestorage.rs#L14\" rel=\"nofollow\">source file from the llamadb project</a>.</p>\n"}, {"tags": ["rust", "inline-assembly"], "comments": [{"owner": {"reputation": 2896, "user_id": 676939, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/3144b80df26dac0a0eead899fc814a44?s=128&d=identicon&r=PG", "display_name": "Alexandros", "link": "https://stackoverflow.com/users/676939/alexandros"}, "edited": false, "score": 0, "creation_date": 1451242787, "post_id": 34477497, "comment_id": 56709484, "body": "What exactly are you trying to do? Or are you just experimenting?"}], "answers": [{"comments": [{"owner": {"reputation": 4398, "user_id": 1056174, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/GJiNL.jpg?s=128&g=1", "display_name": "Carl Patenaude Poulin", "link": "https://stackoverflow.com/users/1056174/carl-patenaude-poulin"}, "edited": false, "score": 0, "creation_date": 1451282517, "post_id": 34484671, "comment_id": 56718834, "body": "Thanks! Any idea if it&#39;s possible to use this with symbolic names for inputs/outputs? I can&#39;t find any information on the topic, but <a href=\"http://llvm.org/viewvc/llvm-project/cfe/trunk/test/Sema/asm.c?view=markup\" rel=\"nofollow noreferrer\">LLVM seems to support it</a>"}], "tags": [], "owner": {"reputation": 2896, "user_id": 676939, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/3144b80df26dac0a0eead899fc814a44?s=128&d=identicon&r=PG", "display_name": "Alexandros", "link": "https://stackoverflow.com/users/676939/alexandros"}, "is_accepted": true, "score": 6, "last_activity_date": 1451291526, "last_edit_date": 1451291526, "creation_date": 1451249187, "answer_id": 34484671, "question_id": 34477497, "link": "https://stackoverflow.com/questions/34477497/rust-inline-assembly-template-syntax/34484671#34484671", "title": "Rust inline assembly template syntax", "body": "<p>This is what worked for me:</p>\n\n<pre><code>#![feature(asm)]\nfn main() {\n    unsafe {\n        asm!( \"call ${0:c} + ${0:c}\"\n            :\n            : \"i\"(8)\n            : \"memory\"\n            : \"volatile\"\n        )\n    }\n}\n</code></pre>\n\n<p>Here's the relevant <a href=\"http://llvm.org/docs/LangRef.html#asm-template-argument-modifiers\" rel=\"nofollow\">documentation in the LLVM reference</a>. By looking at the output of <code>objdump</code>, we can verify that our inline assembly has been emitted:</p>\n\n<pre><code>0000000000005190 &lt;_ZN4main20hc3048743ecd04f53eaaE&gt;:\n    5190:   e8 7b ae ff ff          callq  10 &lt;_ZN10sys_common11thread_info11THREAD_INFO5__KEY20h20efb688859d2c0dRhsE+0x10&gt;\n    5195:   c3                      retq   \n    5196:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n    519d:   00 00 00 \n</code></pre>\n\n<p>UPDATE: Here's an example of directly calling a function from inline assembly:</p>\n\n<pre><code>#![feature(asm)]\n\nfn called_even_if_mangled() {\n    println!(\"Just a regular function minding its own business\");\n}\n\nfn main() {\n    unsafe {\n        asm!( \"call ${0:c}\"\n            :\n            : \"i\"(called_even_if_mangled)\n            : \"memory\"\n            : \"volatile\", \"alignstack\"\n            // Omit \"alignstack\" and you'll get a segfault because of a\n            // misaligned SSE load on some initialization code regarding\n            // stdin.\n        )\n    }\n}\n</code></pre>\n\n<p>But you should <strong>never ever do such a thing</strong>, unless you have a very good and compelling argument to do so (for example, because you're writing a JIT). I had to spend an hour debugging a mysterious segfault until I realized that I also had to put <code>alignstack</code> in the options section.</p>\n\n<p>You have been warned.</p>\n"}], "owner": {"reputation": 4398, "user_id": 1056174, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/GJiNL.jpg?s=128&g=1", "display_name": "Carl Patenaude Poulin", "link": "https://stackoverflow.com/users/1056174/carl-patenaude-poulin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2285, "favorite_count": 0, "accepted_answer_id": 34484671, "answer_count": 1, "score": 3, "last_activity_date": 1464211661, "creation_date": 1451189342, "last_edit_date": 1464211661, "question_id": 34477497, "link": "https://stackoverflow.com/questions/34477497/rust-inline-assembly-template-syntax", "title": "Rust inline assembly template syntax", "body": "<p>I have the following code in <code>test.s</code>:</p>\n\n<pre><code>call $8 + $8\n</code></pre>\n\n<p>Running <code>nasm test.s</code> compiles successfully. I'd expect the following equivalent Rust code to compile successfully, but it doesn't.</p>\n\n<p>In <code>test.rs</code>:</p>\n\n<pre><code>#![feature(asm)]\nfn main() {\n    unsafe {\n        asm! (\n            \"call $0 + $0\"\n            :\n            : \"i\" (8)\n            : \"memory\"\n            : \"volatile\"\n        )\n    }\n}\n</code></pre>\n\n<p>Output of <code>rustc test.rs</code>:</p>\n\n<pre><code>test.rs:4:9: 10:11 error: &lt;inline asm&gt;:1:12: error: invalid token in expression\n        call $8 + $8\n                  ^\n</code></pre>\n"}, {"tags": ["floating-point", "rust"], "answers": [{"comments": [{"owner": {"reputation": 709, "user_id": 2471708, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/56e762ba61956bdbe5099e0e368daba0?s=128&d=identicon&r=PG", "display_name": "apmccartney", "link": "https://stackoverflow.com/users/2471708/apmccartney"}, "edited": false, "score": 0, "creation_date": 1451174675, "post_id": 34476051, "comment_id": 56694583, "body": "I appreciate the warning!   I understood the algorithm I posted can introduce error; That said, I have the good fortune of working with data representing measurements where seven digits of precision is considered quite good. Any introduced error was not observed during our testing."}, {"owner": {"reputation": 709, "user_id": 2471708, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/56e762ba61956bdbe5099e0e368daba0?s=128&d=identicon&r=PG", "display_name": "apmccartney", "link": "https://stackoverflow.com/users/2471708/apmccartney"}, "edited": false, "score": 0, "creation_date": 1451174986, "post_id": 34476051, "comment_id": 56694624, "body": "Thank you for a reference to the github commit as well. It made for interesting reading."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 709, "user_id": 2471708, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/56e762ba61956bdbe5099e0e368daba0?s=128&d=identicon&r=PG", "display_name": "apmccartney", "link": "https://stackoverflow.com/users/2471708/apmccartney"}, "edited": false, "score": 1, "creation_date": 1451176312, "post_id": 34476051, "comment_id": 56694844, "body": "If you&#39;ve only got 7 digits of precision and need speed, you&#39;d be fine with just parsing the value into an <code>i64</code> and multiplying by a cached power of 10 (calculate the exponent by adding the decimal place to the explicit one). That should be blazingly fast."}, {"owner": {"reputation": 709, "user_id": 2471708, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/56e762ba61956bdbe5099e0e368daba0?s=128&d=identicon&r=PG", "display_name": "apmccartney", "link": "https://stackoverflow.com/users/2471708/apmccartney"}, "edited": false, "score": 0, "creation_date": 1451196036, "post_id": 34476051, "comment_id": 56697587, "body": "I&#39;ve bookmarked this response for future reference.   The application is intended for real time processing, but we&#39;re still in the very early stages of testing under load. If it turns out the file parsing is a bottleneck, I&#39;ll implement this method for comparison."}, {"owner": {"reputation": 709, "user_id": 2471708, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/56e762ba61956bdbe5099e0e368daba0?s=128&d=identicon&r=PG", "display_name": "apmccartney", "link": "https://stackoverflow.com/users/2471708/apmccartney"}, "edited": false, "score": 0, "creation_date": 1465755253, "post_id": 34476051, "comment_id": 63022589, "body": "We ended up using the technique you described in the comments here. Thanks again!"}], "tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": false, "score": 2, "last_activity_date": 1451188920, "last_edit_date": 1451188920, "creation_date": 1451170775, "answer_id": 34476051, "question_id": 34475162, "link": "https://stackoverflow.com/questions/34475162/parsing-floats-in-rust-from-fortran-formats/34476051#34476051", "title": "Parsing floats in Rust from Fortran formats", "body": "<p>Your example in C++ does not give perfectly accurate results, but Rust's float parsing <a href=\"https://github.com/rust-lang/rust/pull/27307\" rel=\"nofollow\">is intended to be perfectly accurate, and as such has slower parsing than you might need</a>.</p>\n\n<p>If you implement approximate parsing manually, it will likely come out a faster than any other technique available. A quick test I did locally suggests you can easily get a factor of 5 over the performance of the standard library's <code>parse</code> method.</p>\n\n<p>If you rather wish to have exact parsing, your C++ code is insufficient. A pre-parse (eg. with Regex) is likely the easiest way to do this, but alternatively you can rip out the code from the standard library and modify that.</p>\n"}, {"comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1451188380, "post_id": 34476286, "comment_id": 56696519, "body": "I mentioned the translating idea but didn&#39;t press it since apmccartney explicitly said it&#39;s too slow. I object to the claim that &quot;it&#39;s not <i>much</i> slower than the naive inaccurate algorithm&quot;; I just whipped up a quick inaccurate test parser and it&#39;s 5x as fast on &quot;33.1453326&quot; (and a few other test cases). If he&#39;s worried about speed here (assuming that he&#39;s not just saying it for the sake of it), it&#39;s hardly equivocal. Adding an <i>extra</i> parse on top of that is just going to exacerbate the difference, as would a little bit of performance tuning."}, {"owner": {"reputation": 709, "user_id": 2471708, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/56e762ba61956bdbe5099e0e368daba0?s=128&d=identicon&r=PG", "display_name": "apmccartney", "link": "https://stackoverflow.com/users/2471708/apmccartney"}, "edited": false, "score": 0, "creation_date": 1451196346, "post_id": 34476286, "comment_id": 56697636, "body": "For the moment, I&#39;ve implemented the &quot;sanest way&quot; suggested by delnan (if only in the hope data will improve in coming years). If this approach proves too expensive, I will likely implement the strategy you suggested in the comments to your response, Veedrac."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1451228424, "post_id": 34476286, "comment_id": 56704917, "body": "@Veedrac From my own benchmarks vs. the old implementation in the standard library (a few months ago), I expected something around 2x as fast for that class of inputs. 5x surprises me, could you put your code in a gist so I can study it?"}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 1, "creation_date": 1451247919, "post_id": 34476286, "comment_id": 56710784, "body": "@delnan It&#39;s not pretty (every time I tried to make it pretty, it ended up slower), but <a href=\"https://gist.github.com/Veedrac/dbb0c07994bc7882098e\" rel=\"nofollow noreferrer\">I&#39;ve finished it up for you</a>. I don&#39;t know how correct it is, since I&#39;ve barely got tests for it, but it seems to mostly work."}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": true, "score": 4, "last_activity_date": 1451173516, "last_edit_date": 1451173516, "creation_date": 1451173050, "answer_id": 34476286, "question_id": 34475162, "link": "https://stackoverflow.com/questions/34475162/parsing-floats-in-rust-from-fortran-formats/34476286#34476286", "title": "Parsing floats in Rust from Fortran formats", "body": "<p>This would have been a comment to Veedrac's answer, but it got a bit long for a comment.</p>\n\n<p>As Veedrac explains, parsing floats accurately is <strong>hard</strong>. The implementation in the standard library is completely accurate and reasonably well optimized. In particular, it's not <em>much</em> slower than the naive inaccurate algorithm for most inputs where the naive algorithm works. You should use it. Full disclaimer: I wrote it.</p>\n\n<p>Where I disagree with Veedrac is how to proceed if you want to reuse that code. Ripping it out from the standard library is a bad idea. It's huge, about 2.5k lines of code, and it still changes/is improved occasionally &mdash; although rarely and mostly in very minor ways. But one day I'll find the time to rewrite the slow path to be better and faster, promised. <strong>If</strong> you rip out this code, you would have to take the <code>core::num::dec2flt</code> module and modify the <code>parse</code> submodule to recognize other exponents. Of course then you won't automatically benefit from future improvements, which is a shame if you're interested in performance.</p>\n\n<p>The sanest way would be translate the other formats to the format supported by Rust. If it's a <code>d</code>, <code>D</code> or a bare <code>+</code> you can simply replace it with an <code>e</code> and pass it on to string . Only in the case <code>1010.1-1</code> you will need to insert an <code>e</code> and shift the exponent part of the string. This should not cost much performance. Float strings are short (at most 20 or so bytes, often much less) and the actual conversion work does a good chunk of work per byte. This is true for your C++ code as well, because <a href=\"http://www.exploringbinary.com/how-glibc-strtod-works/\" rel=\"nofollow\"><code>strtod</code> is accurate in glibc too</a>. Or at least it's trying to be, it can't fix the ad hoc algorithm built around it. In any case, it is trying to .</p>\n\n<p>Another possibility is to use FFI to call C's <code>strtod</code>. Use the <a href=\"https://crates.io/crates/libc\" rel=\"nofollow\">libc crate</a> and call <code>libc::strtod</code>. This requires some contortions to translate from <code>&amp;str</code> to raw pointers to <code>c_char</code>, and it will handle interior 0 bytes badly, but the code you show is not terribly robust anyway. This would allow you to translate your algorithm to Rust with identical performance and semantics and (in)accuracy.</p>\n"}], "owner": {"reputation": 709, "user_id": 2471708, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/56e762ba61956bdbe5099e0e368daba0?s=128&d=identicon&r=PG", "display_name": "apmccartney", "link": "https://stackoverflow.com/users/2471708/apmccartney"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 285, "favorite_count": 0, "accepted_answer_id": 34476286, "answer_count": 2, "score": 3, "last_activity_date": 1451260577, "creation_date": 1451163311, "last_edit_date": 1451260577, "question_id": 34475162, "link": "https://stackoverflow.com/questions/34475162/parsing-floats-in-rust-from-fortran-formats", "title": "Parsing floats in Rust from Fortran formats", "body": "<p>I'm rewriting a C++ parser in Rust for a legacy ASCII data format. Real number values in this format are permitted to be stored in any Fortran recognized format. Unfortunately, Fortran recognizes some formats not recognized by Rust (or most other languages). For example, the value 101.01 might be represented as</p>\n\n<ul>\n<li>101.01</li>\n<li>1.0101E2</li>\n<li>101.01e0</li>\n<li>101.01D0</li>\n<li>101.01d0</li>\n<li>101.01+0</li>\n<li>1010.1-1</li>\n</ul>\n\n<p>The first three are all natively recognized by Rust. The remaining four pose a challenge. In C++, we use the following routine to parse these values:</p>\n\n<pre><code>double parse(const std::string&amp; s){\n  char* p;\n  const double significand = strtod(&amp;s[0], &amp;p);\n  const long exponent = (*p == '\\0') ? \n                          0 : isalpha(*p) ?\n                            strtol(p+1, nullptr) :\n                              strtol(p, nullptr);\n  return significand * pow(10, exponent);\n}\n</code></pre>\n\n<p>After reviewing the Rust documentation, it doesn't appear that the standard library offers partial string parsing in the vein of <code>strtod</code> and <code>strtol</code>. I'd like to avoid taking multiple passes over the string or using regular expressions for performance reasons.</p>\n"}, {"tags": ["struct", "initialization", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1451260319, "post_id": 34473565, "comment_id": 56714210, "body": "Note that you don&#39;t need to state the type of the variable twice. <code>var_name: Type = Type {..}</code> can just be <code>var_name = Type {...}</code>. Type inference is your friend; this isn&#39;t Ye Olde C(++) or Ye Olde Java."}], "answers": [{"tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": true, "score": 4, "last_activity_date": 1451151879, "creation_date": 1451151879, "answer_id": 34473676, "question_id": 34473565, "link": "https://stackoverflow.com/questions/34473565/what-is-the-right-way-to-initialize-a-struct-within-another-struct/34473676#34473676", "title": "What is the right way to initialize a struct within another struct?", "body": "<p>Just embed the literal:</p>\n\n<pre><code>Parent {\n    child: Child {\n        field: 0,\n    },\n};\n</code></pre>\n"}], "owner": {"reputation": 1091, "user_id": 3745005, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/yvS7i.png?s=128&g=1", "display_name": "andrey", "link": "https://stackoverflow.com/users/3745005/andrey"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 63, "favorite_count": 0, "accepted_answer_id": 34473676, "answer_count": 1, "score": 2, "last_activity_date": 1451260232, "creation_date": 1451150895, "last_edit_date": 1451260232, "question_id": 34473565, "link": "https://stackoverflow.com/questions/34473565/what-is-the-right-way-to-initialize-a-struct-within-another-struct", "title": "What is the right way to initialize a struct within another struct?", "body": "<p>What is the right way to do something like this?</p>\n\n<pre><code>struct Child {\n    field: i32,\n}\n\nstruct Parent {\n    child: Child,\n}\n\n...\n\nlet parent: Parent = Parent {\n    child { field: 0 },\n};\n</code></pre>\n\n<p>This does work, but is more verbose than I'd like:</p>\n\n<pre><code>let child: Child = Child {\n    field: 0,\n};\n\nlet parent: Parent = Parent {\n    child: child,\n};\n</code></pre>\n"}, {"tags": ["rust", "traits", "specialization", "generic-function"], "comments": [{"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 1, "creation_date": 1451132859, "post_id": 34471212, "comment_id": 56683979, "body": "Any current specialisation of a generic function is a quirk that probably isn&#39;t actually meant to work (i.e. it&#39;s a bug). <a href=\"https://github.com/rust-lang/rfcs/pull/1210\" rel=\"nofollow noreferrer\">True specialisation</a> is a proposed but not implemented feature."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1451144580, "post_id": 34471212, "comment_id": 56686747, "body": "@huon: Shouldn&#39;t that be an answer, as temporary as it is?"}], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 11, "last_activity_date": 1451160813, "last_edit_date": 1451160813, "creation_date": 1451144757, "answer_id": 34472809, "question_id": 34471212, "link": "https://stackoverflow.com/questions/34471212/how-to-implement-specialized-versions-of-a-generic-function/34472809#34472809", "title": "How to implement specialized versions of a generic function?", "body": "<p>Remember that you <em>always</em> implement a trait <strong>for</strong> something. Therefore, trait implementation must <em>always</em> contain <code>for</code> clause:</p>\n\n<pre><code>impl SomeTrait for Something\n</code></pre>\n\n<p>If there is no <code>for</code>, then it is not a trait implementation. In your case <code>impl Foo&lt;i32&gt;</code> is not an implementation of <code>Foo</code> for <code>i32</code> or whatever you think it is; it is an <em>inherent</em> method declaration clause on the <em>bare trait object type</em> <code>Foo&lt;i32&gt;</code>.</p>\n\n<p>What you actually want is possible to do using <code>Self</code> type parameter:</p>\n\n<pre><code>trait Foo { \n    fn foo(a: Self, b: Self, c: Self); \n}\n\nimpl Foo for i32 {\n    fn foo(a: i32, b: i32, c: i32) {}\n}\n\nimpl Foo for i16 {\n    fn foo(a: i16, b: i16, c: i16) {}\n}\n\nfn main() {\n    Foo::foo(1i32,2,3);\n    Foo::foo(1i16,2,3);\n}\n</code></pre>\n\n<p>This code <a href=\"https://play.rust-lang.org/?gist=9ab30d20d5c6d3a06bf4&amp;version=stable\" rel=\"noreferrer\">works</a>.</p>\n\n<p>Note that now <code>Foo</code> is implemented <strong>for</strong> a certain type. The type a trait is implemented for is available via the implicit <code>Self</code> type parameter, and you can see how it is used in <code>foo()</code> declaration.</p>\n"}], "owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1750, "favorite_count": 0, "accepted_answer_id": 34472809, "answer_count": 1, "score": 3, "last_activity_date": 1451160813, "creation_date": 1451131820, "question_id": 34471212, "link": "https://stackoverflow.com/questions/34471212/how-to-implement-specialized-versions-of-a-generic-function", "title": "How to implement specialized versions of a generic function?", "body": "<p>I'd like to have multiple versions of a function optimized for type of its arguments, and Rust call appropriate one depending on context. </p>\n\n<p>In my case all arguments have the same type, and all are equivalent, so it'd rather avoid having a <code>self</code> argument.</p>\n\n<p>I've <a href=\"http://is.gd/hzjtrp\" rel=\"nofollow\">tried this code</a>:</p>\n\n<pre><code>trait Foo&lt;T&gt; { \n    fn foo(a: T, b: T, c: T); \n}\n\nimpl Foo&lt;i32&gt; {\n    fn foo(a: i32, b: i32, c: i32) {}\n}\n\nimpl Foo&lt;i16&gt; {\n    fn foo(a: i16, b: i16, c: i16) {}\n}\n\nfn main() {\n    Foo::foo(1i32,2,3);\n    Foo::foo(1i16,2,3);\n}\n</code></pre>\n\n<p>but Rust requires type annotations:</p>\n\n<blockquote>\n  <p>error: type annotations required: cannot resolve <code>_ : Foo&lt;i32&gt;</code> [E0283]</p>\n</blockquote>\n\n<p>Can I avoid providing type annotations at the call site? If I have to, how to do it?</p>\n"}, {"tags": ["iterator", "rust", "traits"], "answers": [{"tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 6, "last_activity_date": 1451133164, "creation_date": 1451133164, "answer_id": 34471362, "question_id": 34470995, "link": "https://stackoverflow.com/questions/34470995/how-to-allow-multiple-implementations-of-a-trait-on-various-types-of-intoiterato/34471362#34471362", "title": "How to allow multiple implementations of a trait on various types of IntoIterator items?", "body": "<p>You can not do the generic form directly, which is <a href=\"https://github.com/rust-lang/rust/issues/20400\" rel=\"noreferrer\">issue #20400</a>. You'll have to introduce either a trait that can be used as a bound on <code>T::Item</code> to merge the two implementations, or wrapper types. E.g. the first one might look like:</p>\n\n<pre><code>trait FooIterItem {\n    // behaviours needed for Foo impl\n}\nimpl FooIterItem for u32 { ... }\nimpl FooIterItem for u16 { ... }\n\nimpl&lt;T&gt; Foo for T\n    where T: IntoIterator, T::Item: FooIterItem\n{\n    ...\n}\n</code></pre>\n"}], "owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 256, "favorite_count": 0, "accepted_answer_id": 34471362, "answer_count": 1, "score": 4, "last_activity_date": 1451133164, "creation_date": 1451130035, "question_id": 34470995, "link": "https://stackoverflow.com/questions/34470995/how-to-allow-multiple-implementations-of-a-trait-on-various-types-of-intoiterato", "title": "How to allow multiple implementations of a trait on various types of IntoIterator items?", "body": "<p>Rust doesn't seem to distinguish between different implementations of a trait only if they differ by an associated type.</p>\n\n<p>How can I implement a method on all kinds of collections/iterators, but have specific implementations for each concrete type they contain?</p>\n\n<blockquote>\n  <p>error: conflicting implementations for trait <code>Foo</code> [E0119]</p>\n</blockquote>\n\n<p><a href=\"http://is.gd/995EKa\" rel=\"nofollow\">The code</a>:</p>\n\n<pre><code>trait Foo { fn foo(self); }\n\nimpl&lt;T&gt; Foo for T \n    where T: IntoIterator&lt;Item=u32&gt; \n{\n    fn foo(self) {\n        self.into_iter();\n    }\n}\n\nimpl&lt;T&gt; Foo for T \n    where T: IntoIterator&lt;Item=u16&gt; \n{\n    fn foo(self) {\n        self.into_iter();\n    }\n}\n\nfn main() {\n    vec![0u32].foo();\n    vec![0u16].foo();\n}\n</code></pre>\n"}, {"tags": ["memory-leaks", "rust", "valgrind"], "comments": [{"owner": {"reputation": 854, "user_id": 3989982, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6941e7388870864da83acedf9e9c7693?s=128&d=identicon&r=PG&f=1", "display_name": "Tibor Benke", "link": "https://stackoverflow.com/users/3989982/tibor-benke"}, "edited": false, "score": 0, "creation_date": 1451123389, "post_id": 34469585, "comment_id": 56681961, "body": "I think the article was written for Rust 1.0. What&#39;s your rustc version? Did you try it with rustc <code>1.0</code>?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1451144531, "post_id": 34469585, "comment_id": 56686733, "body": "This is surprising, <code>Rc::strong_count(&amp;...)</code> indicates that both <code>Rc&lt;Bar&gt;</code> and <code>Rc&lt;Foo&gt;</code> have a count of <code>2</code> after the manipulation, so just dropping the stack variables should be enough to have leaked a cycle. I tried looking into the generated LLVM IR but could not extract anything that would explain such a report from the humongous functions generated :/"}, {"owner": {"reputation": 2567, "user_id": 994206, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/699bacad8f85a069dda312cc29e03baa?s=128&d=identicon&r=PG", "display_name": "Mokosha", "link": "https://stackoverflow.com/users/994206/mokosha"}, "edited": false, "score": 0, "creation_date": 1451155600, "post_id": 34469585, "comment_id": 56689897, "body": "I&#39;m using <code>rustc</code> version <code>1.4</code> stable. Edited for clarity."}, {"owner": {"reputation": 854, "user_id": 3989982, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6941e7388870864da83acedf9e9c7693?s=128&d=identicon&r=PG&f=1", "display_name": "Tibor Benke", "link": "https://stackoverflow.com/users/3989982/tibor-benke"}, "edited": false, "score": 0, "creation_date": 1451215215, "post_id": 34469585, "comment_id": 56701457, "body": "Could you try it with Rust 1.0? Maybe this issue was solved in a later version."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1557691556, "last_edit_date": 1557691556, "creation_date": 1451263457, "answer_id": 34486419, "question_id": 34469585, "link": "https://stackoverflow.com/questions/34469585/what-is-a-minimal-example-of-an-rc-dependency-cycle/34486419#34486419", "title": "What is a minimal example of an Rc dependency cycle?", "body": "<p>With the version of Rust you were using, it's most likely that you were using jemalloc, which doesn't always play well with Valgrind (see the linked questions for more information). With modern versions of Rust, the system allocator is used by default and the code you have posted does report memory leaks:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ valgrind --leak-check=full ./test\n==761== Memcheck, a memory error detector\n==761== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==761== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info\n==761== Command: ./test\n==761==\n==761==\n==761== HEAP SUMMARY:\n==761==     in use at exit: 56 bytes in 2 blocks\n==761==   total heap usage: 13 allocs, 11 frees, 2,233 bytes allocated\n==761==\n==761== 56 (32 direct, 24 indirect) bytes in 1 blocks are definitely lost in loss record 2 of 2\n==761==    at 0x4C2FB0F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n==761==    by 0x10BDAB: alloc::alloc::alloc (in /tmp/test)\n==761==    by 0x10BD17: alloc::alloc::exchange_malloc (in /tmp/test)\n==761==    by 0x10C3F6: &lt;alloc::rc::Rc&lt;T&gt;&gt;::new (in /tmp/test)\n==761==    by 0x10BF6F: test::main (in /tmp/test)\n==761==    by 0x10DAF2: std::rt::lang_start::{{closure}} (in /tmp/test)\n==761==    by 0x115CC2: {{closure}} (rt.rs:49)\n==761==    by 0x115CC2: std::panicking::try::do_call (panicking.rs:297)\n==761==    by 0x117BA9: __rust_maybe_catch_panic (lib.rs:87)\n==761==    by 0x11677C: try&lt;i32,closure&gt; (panicking.rs:276)\n==761==    by 0x11677C: catch_unwind&lt;closure,i32&gt; (panic.rs:388)\n==761==    by 0x11677C: std::rt::lang_start_internal (rt.rs:48)\n==761==    by 0x10DAD4: std::rt::lang_start (in /tmp/test)\n==761==    by 0x10C19A: main (in /tmp/test)\n==761==\n==761== LEAK SUMMARY:\n==761==    definitely lost: 32 bytes in 1 blocks\n==761==    indirectly lost: 24 bytes in 1 blocks\n==761==      possibly lost: 0 bytes in 0 blocks\n==761==    still reachable: 0 bytes in 0 blocks\n==761==         suppressed: 0 bytes in 0 blocks\n==761==\n==761== For counts of detected and suppressed errors, rerun with: -v\n==761== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)\n</code></pre>\n\n<p>I am using Valgrind 3.13.0 with Rust 1.34.1 on Ubuntu, but I do not believe that would change the results.</p>\n\n<p>You can also add dummy values to your structs to more easily find them in the output. I used a <code>Box&lt;[u8; 10240]&gt;</code> which stands out pretty well.</p>\n\n<p>As for <em>minimal</em>, I'd model a linked list:</p>\n\n<pre><code>use std::cell::RefCell;\nuse std::rc::Rc;\n\nstruct Node {\n    next: RefCell&lt;Option&lt;Rc&lt;Node&gt;&gt;&gt;,\n}\n\nfn main() {\n    let foo1 = Rc::new(Node {\n        next: RefCell::new(None),\n    });\n    let foo2 = Rc::new(Node {\n        next: RefCell::new(Some(foo1.clone())),\n    });\n    *foo1.next.borrow_mut() = Some(foo2.clone());\n}\n</code></pre>\n\n<p>This program also reports leaks.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/51509314/155423\">Why does Valgrind not detect a memory leak in a Rust program using nightly 1.29.0?</a></li>\n<li><a href=\"https://stackoverflow.com/q/37215574/155423\">Valgrind shows no allocations</a></li>\n</ul>\n"}], "owner": {"reputation": 2567, "user_id": 994206, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/699bacad8f85a069dda312cc29e03baa?s=128&d=identicon&r=PG", "display_name": "Mokosha", "link": "https://stackoverflow.com/users/994206/mokosha"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 246, "favorite_count": 0, "answer_count": 1, "score": 4, "last_activity_date": 1557691556, "creation_date": 1451116982, "last_edit_date": 1557691098, "question_id": 34469585, "link": "https://stackoverflow.com/questions/34469585/what-is-a-minimal-example-of-an-rc-dependency-cycle", "title": "What is a minimal example of an Rc dependency cycle?", "body": "<p>I'm trying to write a Rust program that leaks memory <a href=\"http://smallcultfollowing.com/babysteps/blog/2015/04/29/on-reference-counting-and-leaks/\" rel=\"nofollow noreferrer\">due to cycles with reference counts</a>. The following example, which seems like it should cause a memory leak, does not leak memory according to Valgrind. What gives?</p>\n\n<p><code>test.rs</code>:</p>\n\n<pre><code>use std::cell::RefCell;\nuse std::rc::Rc;\n\nstruct Foo {\n    f: Rc&lt;Bar&gt;,\n}\n\nstruct Bar {\n    b: RefCell&lt;Option&lt;Rc&lt;Foo&gt;&gt;&gt;,\n}\n\nfn main() {\n    let bar = Rc::new(Bar {\n        b: RefCell::new(None),\n    });\n    let foo = Rc::new(Foo { f: bar.clone() });\n    *bar.b.borrow_mut() = Some(foo.clone());\n}\n</code></pre>\n\n<p>Valgrind output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ rustc --version\nrustc 1.4.0 (8ab8581f6 2015-10-27)\n$ rustc -o test test.rs\n$ valgrind test\n==23331== Memcheck, a memory error detector\n==23331== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.\n==23331== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info\n==23331== Command: test\n==23331== \n==23331== \n==23331== HEAP SUMMARY:\n==23331==     in use at exit: 0 bytes in 0 blocks\n==23331==   total heap usage: 37 allocs, 37 frees, 9,078 bytes allocated\n==23331== \n==23331== All heap blocks were freed -- no leaks are possible\n==23331== \n==23331== For counts of detected and suppressed errors, rerun with: -v\n==23331== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n</code></pre>\n"}, {"tags": ["casting", "rust"], "comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 2, "creation_date": 1451098240, "post_id": 34467506, "comment_id": 56678172, "body": "Get rid of the comment and write <code>if c == &#39;\\n&#39; as u8 { break; }</code> instead."}, {"owner": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1451136855, "post_id": 34467506, "comment_id": 56684847, "body": "@Veedrac Thanks for the suggestion. I changed that line to account for all punctuation, whitespaces, etc. It is now <code>if c &gt; 122 || c &lt; 97 { continue; }</code>"}], "answers": [{"tags": [], "owner": {"reputation": 51826, "user_id": 1223693, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/viu9Y.jpg?s=128&g=1", "display_name": "tckmn", "link": "https://stackoverflow.com/users/1223693/tckmn"}, "is_accepted": true, "score": 6, "last_activity_date": 1451089020, "creation_date": 1451089020, "answer_id": 34467526, "question_id": 34467506, "link": "https://stackoverflow.com/questions/34467506/how-to-cast-u8-to-usize/34467526#34467526", "title": "How to cast &amp;u8 to usize", "body": "<p>It's a very simple change\u2014a single character, in fact:</p>\n\n<pre><code>    for &amp;c in s.to_lowercase().as_bytes() {\n        ^\n</code></pre>\n\n<p>You're trying to treat a <em>reference</em> (which is what <code>as_bytes</code> results in) as a regular value, which doesn't work.</p>\n\n<p>You could either do what I did above (change <code>for c in</code> to <code>for &amp;c in</code>) or replace all occurrences of <code>c</code> inside of the <code>for</code> loop with <code>*c</code>; they essentially do the same thing.</p>\n"}], "owner": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3001, "favorite_count": 0, "accepted_answer_id": 34467526, "answer_count": 1, "score": 2, "last_activity_date": 1451089020, "creation_date": 1451088622, "question_id": 34467506, "link": "https://stackoverflow.com/questions/34467506/how-to-cast-u8-to-usize", "title": "How to cast &amp;u8 to usize", "body": "<p>I'm working on some coding challenges in Rust and one of the problems is to determine if a phrase is a pangram. I have seen the following implementation:</p>\n\n<pre><code>// Copy chars into a vector, sort and remove duplicates\nlet mut chars: Vec&lt;char&gt; = pangram.chars().collect();\nchars.sort();\nchars.dedup();\n</code></pre>\n\n<p>This solution, however, is <code>O(nlogn)</code> time because of the sort. I can do it in <code>O(n)</code> time, but I'm running into a problem.</p>\n\n<p>Below is the code I've tried to write:</p>\n\n<pre><code>fn is_pangram(s: String) -&gt; bool {\n    let mut num_seen = 0;\n    let mut seen: [bool; 26] = [false; 26];\n\n    for c in s.to_lowercase().as_bytes() {\n        // ASCII 10 is newline character\n        if c as usize == 10 {\n            break;\n        }\n\n        // Lowercase ASCII is 97 to 122\n        if !seen[122 - c as usize] {\n            seen[122 - c as usize] = true;\n            num_seen += 1;\n        }\n    }\n    return num_seen == 26;\n}\n</code></pre>\n\n<p>I'm getting the following errors:</p>\n\n<blockquote>\n  <p>18:55 $ rustc pangram.rs </p>\n  \n  <p>pangram.rs:10:12: 10:22 error: casting <code>&amp;u8</code> as <code>usize</code> is invalid</p>\n  \n  <p>pangram.rs:10         if c as usize == 10 {\n  pangram.rs:10:12: 10:22 help: cast through a raw pointer first</p>\n  \n  <p>pangram.rs:14:24: 14:34 error: casting <code>&amp;u8</code> as <code>usize</code> is invalid</p>\n  \n  <p>pangram.rs:14         if !seen[122 - c as usize] {\n  pangram.rs:14:24: 14:34 help: cast through a raw pointer first</p>\n  \n  <p>pangram.rs:15:24: 15:34 error: casting <code>&amp;u8</code> as <code>usize</code> is invalid</p>\n  \n  <p>pangram.rs:15             seen[122 - c as usize] = true;</p>\n  \n  <p>pangram.rs:15:24: 15:34 help: cast through a raw pointer first</p>\n  \n  <p>error: aborting due to 3 previous errors </p>\n</blockquote>\n\n<p>I've tried casting <code>c as *mut usize</code> and <code>c as *const usize</code>, but neither worked. How many I make this work?</p>\n"}, {"tags": ["iterator", "rust", "traits", "generic-programming", "generic-collections"], "comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 1, "creation_date": 1451099629, "post_id": 34467346, "comment_id": 56678310, "body": "Note: <code>IntoIterator</code> is in the prelude; you don&#39;t need the <code>std::iter::</code> prefix."}], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 3, "last_activity_date": 1451128538, "last_edit_date": 1451128538, "creation_date": 1451093652, "answer_id": 34467818, "question_id": 34467346, "link": "https://stackoverflow.com/questions/34467346/how-to-implement-a-trait-for-any-iterable-type/34467818#34467818", "title": "How to implement a trait for any iterable type?", "body": "<p>The correct syntax here is <code>impl&lt;T&gt; SomeTrait for T where T: OtherTrait</code>. This works:</p>\n\n<pre><code>trait Foo { fn foo(self); }\n\nimpl&lt;T&gt; Foo for T \n    where T: std::iter::IntoIterator&lt;Item=u32&gt; \n{\n    fn foo(self) {}\n}\n\nfn main() {\n    vec![0u32].foo()\n}\n</code></pre>\n"}], "owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 582, "favorite_count": 0, "accepted_answer_id": 34467818, "answer_count": 1, "score": 2, "last_activity_date": 1451128556, "creation_date": 1451086747, "last_edit_date": 1451128556, "question_id": 34467346, "link": "https://stackoverflow.com/questions/34467346/how-to-implement-a-trait-for-any-iterable-type", "title": "How to implement a trait for any iterable type?", "body": "<p>I'd like to implement a generic method that's callable on any container or iterator that iterates over a specific type, e.g. <code>&amp;[u32]</code>, <code>Vec&lt;u32&gt;</code>, <code>(0..99u32)</code>, etc.</p>\n\n<p><a href=\"http://is.gd/FyPn2I\" rel=\"nofollow\">The following code</a> does not compile:</p>\n\n<pre><code>trait Foo { fn foo(self); }\n\nimpl Foo for std::iter::IntoIterator&lt;Item=u32&gt; {\n    fn foo(self) {}\n}\n</code></pre>\n\n<blockquote>\n  <p>error: the value of the associated type <code>IntoIter</code> (from the trait <code>core::iter::IntoIterator</code>) must be specified [E0191]</p>\n\n<pre><code>impl Foo for std::iter::IntoIterator&lt;Item=u32&gt; {\n</code></pre>\n</blockquote>\n\n<p>What needs to be specified for the <code>IntoIter</code> associated type? (<code>std::iter::IntoIterator&lt;Item=u32,IntoIter=???&gt;</code>)</p>\n\n<p>so that this would work:</p>\n\n<pre><code>vec![0u32].foo()\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 373, "user_id": 5101356, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/afc758f07608f93dfb31bbde7d87b5a6?s=128&d=identicon&r=PG&f=1", "display_name": "poidl", "link": "https://stackoverflow.com/users/5101356/poidl"}, "edited": false, "score": 0, "creation_date": 1451092062, "post_id": 34467447, "comment_id": 56677379, "body": "Thanks, I removed the template parameter, works well. Regarding your second suggestions, the problem is that self is not mutable. I could return a new value, which in principle works, it&#39;s just that the syntax gets inconsistent. Sinc(x=scalar) then doesn&#39;t modify x, whereas sinc(x=slice) does. On the other hand, what I have in the second snippet is also cumbersome, because I have to write sinc(&amp;mut (x=scalar)), but sinc(x=slice). So the &amp;mut is necessary for the scalar but not for the slice."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 373, "user_id": 5101356, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/afc758f07608f93dfb31bbde7d87b5a6?s=128&d=identicon&r=PG&f=1", "display_name": "poidl", "link": "https://stackoverflow.com/users/5101356/poidl"}, "edited": false, "score": 1, "creation_date": 1451097597, "post_id": 34467447, "comment_id": 56678095, "body": "@poidl I&#39;ve made my answer a lot more detailed. Hopefully this explains things better."}, {"owner": {"reputation": 373, "user_id": 5101356, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/afc758f07608f93dfb31bbde7d87b5a6?s=128&d=identicon&r=PG&f=1", "display_name": "poidl", "link": "https://stackoverflow.com/users/5101356/poidl"}, "edited": false, "score": 0, "creation_date": 1451102546, "post_id": 34467447, "comment_id": 56678676, "body": "great, thanks for your time putting this together, I feel like I will learn a lot from this!"}], "tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": true, "score": 4, "last_activity_date": 1451097560, "last_edit_date": 1451097560, "creation_date": 1451087777, "answer_id": 34467447, "question_id": 34467226, "link": "https://stackoverflow.com/questions/34467226/generic-function-for-modifying-scalars-and-slices-in-place/34467447#34467447", "title": "Generic function for modifying scalars and slices in place", "body": "<p>I find it highly unlikely that any differences from the double-indirection won't be inlined away <em>in this case</em>, but you're right that the second is to be preferred.</p>\n\n<p>You have <code>ToSinc&lt;T&gt;</code>, but don't use <code>T</code>. Drop the template parameter.</p>\n\n<p>That said, <code>ToSinc</code> should almost certainly be by-value for <code>f64</code>s:</p>\n\n<pre><code>impl ToSinc for f64 {\n    fn sinc(self) -&gt; Self {\n        ...\n    }\n}\n</code></pre>\n\n<p>You might also want <code>ToSinc for &amp;mut [T] where T: ToSinc</code>.</p>\n\n<hr>\n\n<p>You might well say, \"ah - one of these is by value, and the other by mutable reference; isn't that inconsistent?\"</p>\n\n<p>The answer depends on what you're actually intend the trait to be used as.</p>\n\n<h3>An interface for <code>sinc</code>-able types</h3>\n\n<p>If your interface represents those types that you can run <code>sinc</code> over, as traits of this kind are intended to be used, the goal would be to write functions</p>\n\n<pre><code>fn do_stuff&lt;T: ToSinc&gt;(value: T) { ... }\n</code></pre>\n\n<p>Now note that <strong>the interface is by-value</strong>. <code>ToSinc</code> takes <code>self</code> and returns <code>Self</code>: that is a value-to-value function. In fact, even when <code>T</code> is instantiated to some mutable reference, like <code>&amp;mut [f64]</code>, <strong>the function is unable to observe <em>any</em> mutation to the underlying memory</strong>.</p>\n\n<p>In essence, these functions treat the underlying memory as an allocation source, and to value transformations on the data held in these allocations, much like a <code>Box \u2192 Box</code> operation is a by-value transformation of heap memory. Only the <em>caller</em> is able to observe mutations to the memory, but even then implementations which treat their input as a value type will return a pointer that prevents needing to access the data in this memory. The caller can just treat the source data as opaque in the same way that an allocator is.</p>\n\n<p>Operations which depend on mutability, like writing to buffers, should probably not be using such an interface. Sometimes to support these cases it makes sense to build a mutating basis and a convenient by-value accessor. <a href=\"https://doc.rust-lang.org/std/string/trait.ToString.html\" rel=\"nofollow\"><code>ToString</code></a> is an interesting example of this, as it's just a wrapper over <a href=\"https://doc.rust-lang.org/std/fmt/trait.Display.html\" rel=\"nofollow\"><code>Display</code></a>.</p>\n\n<pre><code>pub trait ToSinc: Sized {\n    fn sinc_in_place(&amp;mut self);\n    fn sinc(mut self) -&gt; Self {\n        self.sinc_in_place();\n        self\n    }\n}\n</code></pre>\n\n<p>where <code>impl</code>s mostly just implement <code>sinc_in_place</code> and users tend to prefer <code>sinc</code>.</p>\n\n<h3>As fakery for ad-hoc overloading</h3>\n\n<p>In this case, one doesn't care if the trait is actually usable generically, or even that it's consistent. <code>sinc(\"foo\")</code> might do a sing and dance, for all we care.</p>\n\n<p>As such, although the trait is needed it should be defined as weakly as possible:</p>\n\n<pre><code>pub trait Sincable {\n    type Out;\n    fn sinc(self) -&gt; Self::Out;\n}\n</code></pre>\n\n<p>Then your function is far more generic:</p>\n\n<pre><code>pub fn sinc&lt;T: Sincable&gt;(val: T) -&gt; T::Out {\n    val.sinc()\n}\n</code></pre>\n\n<p>To implement a by-value function you do</p>\n\n<pre><code>impl Sincable for f64 {\n    type Out = f64;\n    fn sinc(self) -&gt; f64 {\n        0.4324\n    }\n}\n</code></pre>\n\n<p>and a by-mut-reference one is just</p>\n\n<pre><code>impl&lt;'a, T&gt; Sincable for &amp;'a mut [T]\n    where T: Sincable&lt;Out=T&gt; + Copy\n{\n    type Out = ();\n    fn sinc(self) {\n        for i in self {\n            *i = sinc(*i);\n        }\n    }\n}\n</code></pre>\n\n<p>since <code>()</code> is the default empty type. This acts just like an ad-hoc overloading would.</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=5c6302193104f2f48c36&amp;version=stable\" rel=\"nofollow\">Playpen example of emulated ad-hoc overloading.</a></p>\n"}], "owner": {"reputation": 373, "user_id": 5101356, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/afc758f07608f93dfb31bbde7d87b5a6?s=128&d=identicon&r=PG&f=1", "display_name": "poidl", "link": "https://stackoverflow.com/users/5101356/poidl"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 179, "favorite_count": 0, "accepted_answer_id": 34467447, "answer_count": 1, "score": 1, "last_activity_date": 1451259976, "creation_date": 1451085096, "last_edit_date": 1451259976, "question_id": 34467226, "link": "https://stackoverflow.com/questions/34467226/generic-function-for-modifying-scalars-and-slices-in-place", "title": "Generic function for modifying scalars and slices in place", "body": "<p>I don't understand some basics in Rust. I want to compute a function <code>sinc(x)</code>, with <code>x</code> being a scalar or a slice, which modifies the values in place. I can implement methods for both types, calling them with <code>x.sinc()</code>, but I find it more convenient (and easier to read in long formulas) to make a function, e.g. <code>sinc(&amp;mut x)</code>. So how do you do that properly?</p>\n\n<pre><code>pub trait ToSinc&lt;T&gt; {\n    fn sinc(self: &amp;mut Self) -&gt; &amp;mut Self;\n}\n\npub fn sinc&lt;T: ToSinc&lt;T&gt;&gt;(y: &amp;mut T) -&gt; &amp;mut T {\n    y.sinc()\n}\n\nimpl ToSinc&lt;f64&gt; for f64 {\n    fn sinc(self: &amp;mut Self) -&gt; &amp;mut Self {\n        *self = // omitted\n        self\n    }\n}\n\nimpl&lt;'a&gt; ToSinc&lt;&amp;'a mut [f64]&gt; for &amp;'a mut [f64] {\n    fn sinc(self: &amp;mut Self) -&gt; &amp;mut Self {\n        for yi in (**self).iter_mut() { ... }\n        self\n    }\n}\n</code></pre>\n\n<p>This seems to work, but isn't the \"double indirection\"  in the last <code>impl</code> costly? I also thought about doing</p>\n\n<pre><code>pub trait ToSinc&lt;T&gt; {\n    fn sinc(self: Self) -&gt; Self;\n}\n\npub fn sinc&lt;T: ToSinc&lt;T&gt;&gt;(y: T) -&gt; T {\n    y.sinc()\n}\n\nimpl&lt;'a&gt; ToSinc&lt;&amp;'a mut f64&gt; for &amp;'a mut f64 {\n    fn sinc(self) -&gt; Self {\n        *self = ...\n        self\n    }\n}\n\nimpl&lt;'a&gt; ToSinc&lt;&amp;'a mut [f64]&gt; for &amp;'a mut [f64] {\n    fn sinc(self) -&gt; Self {\n        for yi in (*self).iter_mut() { ... }\n        self\n    }\n}\n</code></pre>\n\n<p>This also works, the difference is that if <code>x</code> is a <code>&amp;mut [f64]</code> slice, I can call <code>sinc(x)</code> instead of <code>sinc(&amp;mut x)</code>. So I have the impression there is less indirection going on in the second one, and I think that's good. Am I on the wrong track here?</p>\n"}, {"tags": ["rust", "rust-crates"], "answers": [{"tags": [], "owner": {"reputation": 854, "user_id": 3989982, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6941e7388870864da83acedf9e9c7693?s=128&d=identicon&r=PG&f=1", "display_name": "Tibor Benke", "link": "https://stackoverflow.com/users/3989982/tibor-benke"}, "is_accepted": true, "score": 18, "last_activity_date": 1451059430, "creation_date": 1451059430, "answer_id": 34464310, "question_id": 34463980, "link": "https://stackoverflow.com/questions/34463980/rust-cant-find-crate/34464310#34464310", "title": "Rust can&#39;t find crate", "body": "<p>You have the following problems:</p>\n\n<ol>\n<li><p>you have to use <code>extern crate bitter_oyster;</code> in <code>main.rs</code>, because the produced binary <strong>uses</strong> your crate, the binary is not a part of it.</p></li>\n<li><p>Also, call <code>bitter_oyster::plot::line::test();</code> in <code>main.rs</code> instead of <code>plot::line::test();</code>. <code>plot</code> is a module in the <code>bitter_oyster</code> crate, such as <code>line</code>. You are referring to the <code>test</code> function with its fully qualified name.</p></li>\n<li><p>Make sure, that every module is exported in the fully qualified name. You can make a module public with the <code>pub</code> keyword, like <code>pub mod plot;</code></p></li>\n</ol>\n\n<p>You can find more information about Rust's module system here: <a href=\"https://doc.rust-lang.org/book/crates-and-modules.html\">https://doc.rust-lang.org/book/crates-and-modules.html</a></p>\n\n<p>A working copy of your module structure is as follows:</p>\n\n<p>src/main.rs:</p>\n\n<pre><code>extern crate bitter_oyster;\n\nfn main() {\n    println!(\"----\");\n    bitter_oyster::plot::line::test();\n}\n</code></pre>\n\n<p>src/lib.rs:</p>\n\n<pre><code>pub mod plot;\n</code></pre>\n\n<p>src/plot/mod.rs:</p>\n\n<pre><code>pub mod line;\n</code></pre>\n\n<p>src/plot/line.rs :</p>\n\n<pre><code>pub fn test(){\n    println!(\"Here line\");\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 287228, "user_id": 1240268, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/RN9Mw.jpg?s=128&g=1", "display_name": "Andy Hayden", "link": "https://stackoverflow.com/users/1240268/andy-hayden"}, "edited": false, "score": 3, "creation_date": 1482884128, "post_id": 41353788, "comment_id": 69909553, "body": "Note: googling this error sends you here, so I hope this helps someone else!"}, {"owner": {"reputation": 111, "user_id": 1503446, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5cae48a7d86cb8ecd4d756764c2b6ab1?s=128&d=identicon&r=PG", "display_name": "James Jones", "link": "https://stackoverflow.com/users/1503446/james-jones"}, "edited": false, "score": 1, "creation_date": 1505344909, "post_id": 41353788, "comment_id": 79379751, "body": "How does one determine which version of a crate to specify? Is there always a place to look for release notes that would give a clue?"}, {"owner": {"reputation": 287228, "user_id": 1240268, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/RN9Mw.jpg?s=128&g=1", "display_name": "Andy Hayden", "link": "https://stackoverflow.com/users/1240268/andy-hayden"}, "reply_to_user": {"reputation": 111, "user_id": 1503446, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5cae48a7d86cb8ecd4d756764c2b6ab1?s=128&d=identicon&r=PG", "display_name": "James Jones", "link": "https://stackoverflow.com/users/1503446/james-jones"}, "edited": false, "score": 1, "creation_date": 1505414136, "post_id": 41353788, "comment_id": 79415749, "body": "@JamesJones usually what it says on crates.io will be what you want (the latest) <a href=\"https://crates.io/crates/serde\" rel=\"nofollow noreferrer\">crates.io/crates/serde</a>, you can also see dependencies etc."}], "tags": [], "owner": {"reputation": 287228, "user_id": 1240268, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/RN9Mw.jpg?s=128&g=1", "display_name": "Andy Hayden", "link": "https://stackoverflow.com/users/1240268/andy-hayden"}, "is_accepted": false, "score": 21, "last_activity_date": 1482884216, "last_edit_date": 1482884216, "creation_date": 1482884094, "answer_id": 41353788, "question_id": 34463980, "link": "https://stackoverflow.com/questions/34463980/rust-cant-find-crate/41353788#41353788", "title": "Rust can&#39;t find crate", "body": "<p>If you see this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0463]: can't find crate for `PACKAGE`\n  |\n1 | extern crate PACKAGE;\n  | ^^^^^^^^^^^^^^^^^^^^^ can't find crate\n</code></pre>\n\n<p>it could be that you haven't added the desired crate to the dependencies list in your <code>Cargo.toml</code>:</p>\n\n<pre><code>[dependencies]\nPACKAGE = \"1.2.3\"\n</code></pre>\n\n<p><em>See <a href=\"http://doc.crates.io/specifying-dependencies.html\" rel=\"noreferrer\">specifying dependencies in the Cargo docs</a>.</em></p>\n"}, {"comments": [{"owner": {"reputation": 408, "user_id": 10259813, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-alOmMsQB0es/AAAAAAAAAAI/AAAAAAAAAAA/APUIFaM6E8TX6-Nv7lZ0WMNh4LP5r2ZbEA/mo/photo.jpg?sz=128", "display_name": "sam", "link": "https://stackoverflow.com/users/10259813/sam"}, "edited": false, "score": 2, "creation_date": 1609411993, "post_id": 49762980, "comment_id": 115836739, "body": "This is the case for example when using <code>PY03</code> which required <code>cdylib</code>. To fix this I set <code>crate-type = [&quot;cdylib&quot;, &quot;lib&quot;]</code> which means the library worked for both python compiling and using the crate in other rust libraries."}], "tags": [], "owner": {"reputation": 890, "user_id": 5501815, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6d0b9c93b5d747f3fe91ba62c21c02fa?s=128&d=identicon&r=PG&f=1", "display_name": "Sebastiaan", "link": "https://stackoverflow.com/users/5501815/sebastiaan"}, "is_accepted": false, "score": 17, "last_activity_date": 1523395027, "creation_date": 1523395027, "answer_id": 49762980, "question_id": 34463980, "link": "https://stackoverflow.com/questions/34463980/rust-cant-find-crate/49762980#49762980", "title": "Rust can&#39;t find crate", "body": "<p>To add to the given answers, a library compiled as a <code>cdylib</code> (<a href=\"https://doc.rust-lang.org/reference/linkage.html\" rel=\"noreferrer\">docs</a>) can generate this error when you try to reference it in another project. I solved it by separating the code I wished to reuse in a regular <code>lib</code> project.</p>\n"}], "owner": {"reputation": 2419, "user_id": 2094707, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/69d58eb588b8c86d9d7f3df2da72d2a0?s=128&d=identicon&r=PG", "display_name": "Stein", "link": "https://stackoverflow.com/users/2094707/stein"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 32399, "favorite_count": 3, "accepted_answer_id": 34464310, "answer_count": 3, "score": 28, "last_activity_date": 1523395027, "creation_date": 1451056542, "last_edit_date": 1489792772, "question_id": 34463980, "link": "https://stackoverflow.com/questions/34463980/rust-cant-find-crate", "title": "Rust can&#39;t find crate", "body": "<p>I'm trying to create a module in Rust and then use it from a different file. This is my file structure:</p>\n\n<pre><code>matthias@X1:~/projects/bitter-oyster$ tree\n.\n\u251c\u2500\u2500 Cargo.lock\n\u251c\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 Readme.md\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 liblib.rlib\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 lib.rs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.rs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.rs~\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 plot\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 line.rs\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 mod.rs\n\u2514\u2500\u2500 target\n    \u2514\u2500\u2500 debug\n        \u251c\u2500\u2500 bitter_oyster.d\n        \u251c\u2500\u2500 build\n        \u251c\u2500\u2500 deps\n        \u251c\u2500\u2500 examples\n        \u251c\u2500\u2500 libbitter_oyster.rlib\n        \u2514\u2500\u2500 native\n\n8 directories, 11 files\n</code></pre>\n\n<p>This is Cargo.toml:</p>\n\n<pre><code>[package]\nname = \"bitter-oyster\"\nversion = \"0.1.0\"\nauthors = [\"matthias\"]\n\n[dependencies]\n</code></pre>\n\n<p>This is main.rs:</p>\n\n<pre><code>extern crate plot;\n\nfn main() {\n    println!(\"----\");\n    plot::line::test();\n}\n</code></pre>\n\n<p>This is lib.rs:</p>\n\n<pre><code>mod plot;\n</code></pre>\n\n<p>this is plot/mod.rs</p>\n\n<pre><code>mod line;\n</code></pre>\n\n<p>and this is plot/line.rs</p>\n\n<pre><code>pub fn test(){\n    println!(\"Here line\");\n}\n</code></pre>\n\n<p>When I try to compile my program using: <code>cargo run</code> I get:</p>\n\n<pre><code>   Compiling bitter-oyster v0.1.0 (file:///home/matthias/projects/bitter-oyster)\n/home/matthias/projects/bitter-oyster/src/main.rs:1:1: 1:19 error: can't find crate for `plot` [E0463]\n/home/matthias/projects/bitter-oyster/src/main.rs:1 extern crate plot;\n</code></pre>\n\n<p>How do I compile my program? As far as I can tell from online documentations this should work, but it doesn't.</p>\n"}, {"tags": ["rust", "ownership", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 2340, "user_id": 2250791, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e72d4f734d39c777f543025d36d4de4e?s=128&d=identicon&r=PG", "display_name": "Camden Narzt", "link": "https://stackoverflow.com/users/2250791/camden-narzt"}, "edited": false, "score": 0, "creation_date": 1451018784, "post_id": 34460053, "comment_id": 56662252, "body": "Oh well chalk that up to my foolish expectations of what Path::new would do for me."}], "tags": [], "owner": {"reputation": 5160, "user_id": 553092, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d161f230b3456d0bfd740154ae16e0a3?s=128&d=identicon&r=PG", "display_name": "Steven", "link": "https://stackoverflow.com/users/553092/steven"}, "is_accepted": true, "score": 4, "last_activity_date": 1451018110, "creation_date": 1451018110, "answer_id": 34460053, "question_id": 34460015, "link": "https://stackoverflow.com/questions/34460015/why-doesnt-this-variable-live-long-enough/34460053#34460053", "title": "why doesn&#39;t this variable live long enough?", "body": "<p>Because <code>Path::new(&amp;x)</code> returns an <code>&amp;Path</code> that borrows it's contents from <code>x</code>.</p>\n\n<pre><code>Some(s) =&gt; Some(Path::new(&amp;s.clone())), // Type is Option&lt;&amp;Path&gt;\n// reborrow --------------^\n</code></pre>\n\n<p>What you actually want to do is use a <code>PathBuf</code> (the owned equivalent of <code>Path</code>). <code>PathBuf</code> will take ownership of <code>s</code> instead of borrowing it.</p>\n\n<pre><code>let cfgFilePath = match matches.opt_str(\"c\") {\n    Some(s) =&gt; Some(PathBuf::from(s)),\n    None =&gt; None\n};\n</code></pre>\n"}], "owner": {"reputation": 2340, "user_id": 2250791, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e72d4f734d39c777f543025d36d4de4e?s=128&d=identicon&r=PG", "display_name": "Camden Narzt", "link": "https://stackoverflow.com/users/2250791/camden-narzt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 139, "favorite_count": 0, "accepted_answer_id": 34460053, "answer_count": 1, "score": 3, "last_activity_date": 1451018425, "creation_date": 1451017398, "last_edit_date": 1451018425, "question_id": 34460015, "link": "https://stackoverflow.com/questions/34460015/why-doesnt-this-variable-live-long-enough", "title": "why doesn&#39;t this variable live long enough?", "body": "<p>I'm trying to extract an optional arg from <code>getopts</code>, and getting a borrowed value doesn't live long enough error for the variable <code>s</code>.</p>\n\n<p>code:</p>\n\n<pre><code>let cfgFilePath = match matches.opt_str(\"c\") {\n    Some(s) =&gt; Some(Path::new(&amp;s.clone())),\n    None =&gt; None\n};\n</code></pre>\n\n<p>error:</p>\n\n<pre><code>main.rs:29:36: 29:45 error: borrowed value does not live long enough\nmain.rs:29         Some(s) =&gt; Some(Path::new(&amp;s.clone())),\n                                              ^~~~~~~~~\nmain.rs:31:7: 65:2 note: reference must be valid for the block suffix following statement 10 at 31:6...\nmain.rs:31     };\nmain.rs:32     let tmpdir = Path::new(&amp;matches.opt_str(\"t\").unwrap_or(\"/tmp/\".to_string()));\nmain.rs:33     let name = matches.opt_str(\"n\").unwrap_or_else(||{\nmain.rs:34         print_usage(&amp;program, opts);\nmain.rs:35         panic!(\"error: -n NAME required\");\nmain.rs:36     });\n           ...\n</code></pre>\n\n<p>This happens regardless of <code>.clone()</code>, <code>.to_owned()</code>, <code>.to_str()</code> or anything else I've thought to try.</p>\n"}, {"tags": ["iterator", "rust", "stack-memory"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1451260421, "post_id": 34459976, "comment_id": 56714227, "body": "Duplicate of <a href=\"http://stackoverflow.com/questions/27535289/correct-way-to-return-an-iterator\" title=\"correct way to return an iterator\">stackoverflow.com/questions/27535289/&hellip;</a>."}], "answers": [{"comments": [{"owner": {"reputation": 4870, "user_id": 403875, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/439b8283080e4e2255205993da9de9ca?s=128&d=identicon&r=PG", "display_name": "dspyz", "link": "https://stackoverflow.com/users/403875/dspyz"}, "edited": false, "score": 0, "creation_date": 1451041912, "post_id": 34462306, "comment_id": 56666401, "body": "I&#39;ve never seen that (static F...) before.  Could you point me to where I can find out more about it?"}, {"owner": {"reputation": 4870, "user_id": 403875, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/439b8283080e4e2255205993da9de9ca?s=128&d=identicon&r=PG", "display_name": "dspyz", "link": "https://stackoverflow.com/users/403875/dspyz"}, "edited": false, "score": 0, "creation_date": 1451041998, "post_id": 34462306, "comment_id": 56666416, "body": "Also is there a way to avoid the .zip(repeat()) hack and just save the environment as part of the iterator directly?"}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "reply_to_user": {"reputation": 4870, "user_id": 403875, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/439b8283080e4e2255205993da9de9ca?s=128&d=identicon&r=PG", "display_name": "dspyz", "link": "https://stackoverflow.com/users/403875/dspyz"}, "edited": false, "score": 0, "creation_date": 1451042838, "post_id": 34462306, "comment_id": 56666556, "body": "@dspyz static variables are covered in the <a href=\"https://doc.rust-lang.org/stable/book/const-and-static.html\" rel=\"nofollow noreferrer\">const and static section in the book</a>. F is a static variable with a type of &quot;pointer to function&quot;"}, {"owner": {"reputation": 4870, "user_id": 403875, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/439b8283080e4e2255205993da9de9ca?s=128&d=identicon&r=PG", "display_name": "dspyz", "link": "https://stackoverflow.com/users/403875/dspyz"}, "edited": false, "score": 0, "creation_date": 1451042970, "post_id": 34462306, "comment_id": 56666581, "body": "Is there a way to avoid the zip (repeat ()) hack?"}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "reply_to_user": {"reputation": 4870, "user_id": 403875, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/439b8283080e4e2255205993da9de9ca?s=128&d=identicon&r=PG", "display_name": "dspyz", "link": "https://stackoverflow.com/users/403875/dspyz"}, "edited": false, "score": 1, "creation_date": 1451043353, "post_id": 34462306, "comment_id": 56666645, "body": "@dspyz to hide away the long type (which is after all an implementation detail that clients of your code should not have to care about) you can embed it as the inner type in a struct and impl Iterator on your struct (forwarding the next and size_hint to the ones already implemented on the inner type)"}, {"owner": {"reputation": 854, "user_id": 3989982, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6941e7388870864da83acedf9e9c7693?s=128&d=identicon&r=PG&f=1", "display_name": "Tibor Benke", "link": "https://stackoverflow.com/users/3989982/tibor-benke"}, "edited": false, "score": 0, "creation_date": 1451059815, "post_id": 34462306, "comment_id": 56670594, "body": "@PaoloFalabella What if the closure copies the <code>cutoff</code> value? It&#39;s <code>Copy</code> so you may not need the <code>Repeat</code> trick."}, {"owner": {"reputation": 4870, "user_id": 403875, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/439b8283080e4e2255205993da9de9ca?s=128&d=identicon&r=PG", "display_name": "dspyz", "link": "https://stackoverflow.com/users/403875/dspyz"}, "reply_to_user": {"reputation": 854, "user_id": 3989982, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6941e7388870864da83acedf9e9c7693?s=128&d=identicon&r=PG&f=1", "display_name": "Tibor Benke", "link": "https://stackoverflow.com/users/3989982/tibor-benke"}, "edited": false, "score": 0, "creation_date": 1451062712, "post_id": 34462306, "comment_id": 56671287, "body": "@TiborBenke It&#39;s true the environment must implement Copy (or at least Clone), but the problem here is that there doesn&#39;t seem to be anywhere to store the environment.  FilterMap can only take things which are Sized, which means it can only take a ref (&amp;Fn, but not Fn).  However, this difficulty is not inherent to the problem, but rather to Rust.  If closures each have a unique type, then there&#39;s no reason their environment can&#39;t be sized.  But for that to work, the return type needs to include the closure type as a template parameter to FilterMap."}, {"owner": {"reputation": 4870, "user_id": 403875, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/439b8283080e4e2255205993da9de9ca?s=128&d=identicon&r=PG", "display_name": "dspyz", "link": "https://stackoverflow.com/users/403875/dspyz"}, "edited": false, "score": 0, "creation_date": 1451063027, "post_id": 34462306, "comment_id": 56671351, "body": "Why can&#39;t Rust allow the return-type to be a trait rather than a fully-specified type (fn my_func(...) -&gt; Iterator&lt;usize&gt;) so long as the compiler can infer the full return type?   Note this is different than using a trait object, because the compiler still knows what the full return-type is, it&#39;s just for ease of readability and also allows for using private types in the (unwritten) signature of public functions without having to create a wrapper struct."}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "reply_to_user": {"reputation": 4870, "user_id": 403875, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/439b8283080e4e2255205993da9de9ca?s=128&d=identicon&r=PG", "display_name": "dspyz", "link": "https://stackoverflow.com/users/403875/dspyz"}, "edited": false, "score": 0, "creation_date": 1451065172, "post_id": 34462306, "comment_id": 56671900, "body": "@dspyz there has been a lot of thinking on how to do exactly that, but not yet possible. See <a href=\"https://aturon.github.io/blog/2015/09/28/impl-trait/\" rel=\"nofollow noreferrer\">aturon.github.io/blog/2015/09/28/impl-trait</a> for instance"}], "tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": false, "score": 3, "last_activity_date": 1451152665, "last_edit_date": 1451152665, "creation_date": 1451041513, "answer_id": 34462306, "question_id": 34459976, "link": "https://stackoverflow.com/questions/34459976/how-to-return-the-result-of-a-call-to-filter-map/34462306#34462306", "title": "How to return the result of a call to filter_map", "body": "<p>You were close:</p>\n\n<pre><code>// type alias for the return type (optional, I just find it a bit\n// optically easier to work with). I added:\n// a 'a lifetime parameter that ties the return Iter lifetime to the \n// input slice\n// a 'static lifetime for the function pointer\ntype RetTake&lt;'a&gt; = FilterMap&lt;Zip&lt;slice::Iter&lt;'a, (char, usize)&gt;, \n    Repeat&lt;usize&gt;&gt;, &amp;'static fn((&amp;(char, usize), usize)) -&gt; Option&lt;char&gt;&gt;;\n\nfn take_lt&lt;'a&gt;(vec: &amp;'a[(char, usize)], cutoff: usize) -&gt; RetTake {\n    fn cmp_fun((&amp;(x, a), b): (&amp;(char, usize), usize)) -&gt; Option&lt;char&gt; {\n        if a &lt; b {\n            Some(x)\n        } else {\n            None\n        }\n    }\n\n    // I think this explicit static binding \n    // used not to be necessary, but I now can't get rustc\n    // to give the reference to the function pointer the static lifetime\n    // it needs otherwise \n    static F: fn((&amp;(char, usize), usize)) -&gt; Option&lt;char&gt; = cmp_fun;\n    vec.iter().zip(repeat(cutoff)).filter_map(&amp;F)\n}\n</code></pre>\n\n<p>as an alternative you can create your own struct implementing the iterator logic you need and returning that struct. For instance:</p>\n\n<pre><code>struct CutoffIterator&lt;'a&gt; {\n    iter: slice::Iter&lt;'a, (char, usize)&gt;,\n    cutoff: usize,\n}\n\nimpl&lt;'a&gt; Iterator for CutoffIterator&lt;'a&gt; {\n    type Item = char;\n\n    fn next(&amp;mut self) -&gt; Option&lt;char&gt; {\n        loop {\n            match self.iter.next() {\n                Some(&amp;(x, a)) if a &lt; self.cutoff =&gt; return Some(x),\n                Some(&amp;(_, a)) if a &gt;= self.cutoff =&gt; continue,\n                _ =&gt; return None\n            }\n        }\n    }\n}\n\nfn take_lt2(vec: &amp;[(char, usize)], cutoff: usize) -&gt; CutoffIterator {\n    CutoffIterator { iter: vec.iter(), cutoff: cutoff }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 1, "last_activity_date": 1451530240, "creation_date": 1451530240, "answer_id": 34540336, "question_id": 34459976, "link": "https://stackoverflow.com/questions/34459976/how-to-return-the-result-of-a-call-to-filter-map/34540336#34540336", "title": "How to return the result of a call to filter_map", "body": "<p>Each function has a unique, distinct type, that is compatible with an <code>fn</code> type. This mirrors the fact that closures also have distinct types. This is what the compiler means by <code>found fn item</code>: it didn't find the <code>fn</code> type you specified in the return type, but rather the unique type of the <code>cmp_fun</code> function.</p>\n\n<p><code>fn</code> types are already pointers, so there's no need (at least in your situation) to take a reference to an <code>fn</code>; you can just take an <code>fn</code> directly. By doing this, the compiler will implicitly cast the function to the more general <code>fn</code> type.</p>\n\n<pre><code>fn take_lt&lt;'a&gt;(vec: &amp;'a[(char, usize)], cutoff: usize) -&gt; FilterMap&lt;Zip&lt;slice::Iter&lt;'a, (char, usize)&gt;, Repeat&lt;usize&gt;&gt;, fn((&amp;(char, usize), usize)) -&gt; Option&lt;char&gt;&gt; {\n    fn cmp_fun((&amp;(x, a), b): (&amp;(char, usize), usize)) -&gt; Option&lt;char&gt; {\n        if a &lt; b {\n            Some(x)\n        } else {\n            None\n        }\n    }\n    vec.iter().zip(repeat(cutoff)).filter_map(cmp_fun)\n}\n</code></pre>\n"}], "owner": {"reputation": 4870, "user_id": 403875, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/439b8283080e4e2255205993da9de9ca?s=128&d=identicon&r=PG", "display_name": "dspyz", "link": "https://stackoverflow.com/users/403875/dspyz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 664, "favorite_count": 0, "answer_count": 2, "score": 2, "last_activity_date": 1451530240, "creation_date": 1451016884, "last_edit_date": 1451017496, "question_id": 34459976, "link": "https://stackoverflow.com/questions/34459976/how-to-return-the-result-of-a-call-to-filter-map", "title": "How to return the result of a call to filter_map", "body": "<p>Here I have a vector vec of (char, usize) pairs, and I want to write a function</p>\n\n<pre><code>fn take_lt(&amp;'a vec, cutoff: usize) -&gt; Iterator&lt;'a, char&gt;\n</code></pre>\n\n<p>which returns an iterator over the chars matching values less than cutoff.</p>\n\n<ol>\n<li>Is there a way to do this without the overhead of allocating something to heap (ie boxing up a Fn environment or creating another vector)?</li>\n<li>Is there a way to do this<br>\nwithout having to explicitly write out the hideous associated return\ntype?</li>\n</ol>\n\n<p>After trying this many different ways (a couple of which compiled, but all of which involved heap allocation which I'd like to avoid), I came up with:</p>\n\n<pre><code>use std::iter::repeat;\nuse std::iter::FilterMap;\nuse std::iter::Zip;\nuse std::iter::Repeat;\nuse std::slice;\n\nfn take_lt&lt;'a&gt;(vec: &amp;'a[(char, usize)], cutoff: usize) -&gt; FilterMap&lt;Zip&lt;slice::Iter&lt;'a, (char, usize)&gt;, Repeat&lt;usize&gt;&gt;, &amp;fn((&amp;(char, usize), usize)) -&gt; Option&lt;char&gt;&gt; {\n    fn cmp_fun((&amp;(x, a), b): (&amp;(char, usize), usize)) -&gt; Option&lt;char&gt; {\n        if a &lt; b {\n            Some(x)\n        } else {\n            None\n        }\n    }\n    vec.iter().zip(repeat(cutoff)).filter_map(&amp;cmp_fun)\n}\n</code></pre>\n\n<p>This is close, but I get:</p>\n\n<pre><code>src/lib.rs:15:47: 15:55 error: mismatched types:\n expected `&amp;fn((&amp;(char, usize), usize)) -&gt; core::option::Option&lt;char&gt;`,\n    found `&amp;fn((&amp;(char, usize), usize)) -&gt; core::option::Option&lt;char&gt; {take_lt::cmp_fun}`\n(expected fn pointer,\n    found fn item) [E0308]\nsrc/lib.rs:15     vec.iter().zip(repeat(cutoff)).filter_map(&amp;cmp_fun)\n                                                            ^~~~~~~~\n</code></pre>\n\n<p>A little googling suggests I try casting the function item to a function pointer, as in:</p>\n\n<pre><code>vec.iter().zip(repeat(cutoff)).filter_map(&amp;(cmp_fun as fn((&amp;(char, usize), usize)) -&gt; Option&lt;char&gt;))\n</code></pre>\n\n<p>but that fails with:</p>\n\n<pre><code>src/lib.rs:15:49: 15:103 error: borrowed value does not live long enough\nsrc/lib.rs:15     vec.iter().zip(repeat(cutoff)).filter_map(&amp;(cmp_fun as fn((&amp;(char, usize), usize)) -&gt; Option&lt;char&gt;))\n                                                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nsrc/lib.rs:7:167: 16:2 note: reference must be valid for the lifetime 'a as defined on the block at 7:166...\nsrc/lib.rs: 7 fn take_lt&lt;'a&gt;(vec: &amp;'a[(char, usize)], cutoff: usize) -&gt; FilterMap&lt;Zip&lt;slice::Iter&lt;'a, (char, usize)&gt;, Repeat&lt;usize&gt;&gt;, &amp;fn((&amp;(char, usize), usize)) -&gt; Option&lt;char&gt;&gt; {\nsrc/lib.rs: 8     fn cmp_fun((&amp;(x, a), b): (&amp;(char, usize), usize)) -&gt; Option&lt;char&gt; {\nsrc/lib.rs: 9         if a &lt; b {\nsrc/lib.rs:10             Some(x)\nsrc/lib.rs:11         } else {\nsrc/lib.rs:12             None\n              ...\nsrc/lib.rs:7:167: 16:2 note: ...but borrowed value is only valid for the block at 7:166\nsrc/lib.rs: 7 fn take_lt&lt;'a&gt;(vec: &amp;'a[(char, usize)], cutoff: usize) -&gt; FilterMap&lt;Zip&lt;slice::Iter&lt;'a, (char, usize)&gt;, Repeat&lt;usize&gt;&gt;, &amp;fn((&amp;(char, usize), usize)) -&gt; Option&lt;char&gt;&gt; {\nsrc/lib.rs: 8     fn cmp_fun((&amp;(x, a), b): (&amp;(char, usize), usize)) -&gt; Option&lt;char&gt; {\nsrc/lib.rs: 9         if a &lt; b {\nsrc/lib.rs:10             Some(x)\nsrc/lib.rs:11         } else {\nsrc/lib.rs:12             None\n              ...\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 5160, "user_id": 553092, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d161f230b3456d0bfd740154ae16e0a3?s=128&d=identicon&r=PG", "display_name": "Steven", "link": "https://stackoverflow.com/users/553092/steven"}, "is_accepted": true, "score": 5, "last_activity_date": 1451003842, "creation_date": 1451003842, "answer_id": 34459099, "question_id": 34458999, "link": "https://stackoverflow.com/questions/34458999/lifetimes-issues-when-placing-a-match-with-mutable-references-into-a-function/34459099#34459099", "title": "Lifetimes issues when placing a match with mutable references into a function", "body": "<p><code>Foo::Bar(ref mut v)</code> borrows <code>&amp;mut Vec&lt;T&gt;</code> from <code>foo</code> so it can't outlive foo (which only lives until the end of the function). What you actually want to do is take it (by value) so you should match on <code>Foo::Bar(v)</code>:</p>\n\n<pre><code>fn unpack&lt;'a, T&gt;(foo: Foo&lt;'a, T&gt;) -&gt; &amp;'a mut [T] {\n    match foo {\n        Foo::Bar(v) =&gt; &amp;mut v[..],\n    } \n}\n</code></pre>\n\n<p>Note: Rust will deref <code>v</code> as needed so the following will also work:</p>\n\n<pre><code>fn unpack&lt;'a, T&gt;(foo: Foo&lt;'a, T&gt;) -&gt; &amp;'a mut [T] {\n    match foo {\n        Foo::Bar(v) =&gt; v,\n    } \n}\n</code></pre>\n"}], "owner": {"reputation": 7241, "user_id": 682907, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0d35fd07f04d62298889ca37b389ad9e?s=128&d=identicon&r=PG", "display_name": "Gustav Larsson", "link": "https://stackoverflow.com/users/682907/gustav-larsson"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 46, "favorite_count": 0, "accepted_answer_id": 34459099, "answer_count": 1, "score": 2, "last_activity_date": 1451003842, "creation_date": 1451002200, "question_id": 34458999, "link": "https://stackoverflow.com/questions/34458999/lifetimes-issues-when-placing-a-match-with-mutable-references-into-a-function", "title": "Lifetimes issues when placing a match with mutable references into a function", "body": "<p>Let's say I have this code (it's contrived, since it's heavily simplified):</p>\n\n<pre><code>enum Foo&lt;'a, T&gt; where T: 'a {\n    Bar(&amp;'a mut Vec&lt;T&gt;),\n}\n\nfn main() {\n   let mut v = vec![1, 2];\n   let foo: Foo&lt;isize&gt; = Foo::Bar(&amp;mut v);\n   let a = match foo {\n       Foo::Bar(ref mut v) =&gt; &amp;mut v[..],\n   };\n   a[1] = 10;\n   println!(\"a = {:?}\", a);\n}\n</code></pre>\n\n<p>This works and everyone is happy. However, if I try to clean it up a bit by placing the match statement inside a function, I can't even get the function to compile, let alone put it to work for me. One of my many attempts looks like this:</p>\n\n<pre><code>fn unpack&lt;'a, T&gt;(foo: Foo&lt;'a, T&gt;) -&gt; &amp;'a mut [T] {\n    match foo {\n        Foo::Bar(ref mut v) =&gt; &amp;mut v[..],\n    } \n}\n</code></pre>\n\n<p>I just get the error:</p>\n\n<pre><code>error: `foo.0` does not live long enough\n</code></pre>\n\n<p>I have been trying to change to multiple lifetimes and adding a <code>where</code> clause (just like I had to do to get the Enum to work), but I can't seem to get it to work. My question is simply if it works (and how) or if the only option here is to use a macro.</p>\n"}, {"tags": ["json", "pattern-matching", "rust", "deserialization", "type-mismatch"], "comments": [{"owner": {"reputation": 1488, "user_id": 2417347, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/6be6de9a9f6d32c008ea322627ffacd6?s=128&d=identicon&r=PG", "display_name": "mhristache", "link": "https://stackoverflow.com/users/2417347/mhristache"}, "edited": false, "score": 0, "creation_date": 1457698921, "post_id": 34456849, "comment_id": 59536308, "body": "Did you manage to fix this? If yes, I would highly appreciate some more details. Thanks"}], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 2, "last_activity_date": 1450987683, "creation_date": 1450987683, "answer_id": 34457481, "question_id": 34456849, "link": "https://stackoverflow.com/questions/34456849/difficulty-with-pattern-matching-on-an-instance-of-an-associated-type/34457481#34457481", "title": "Difficulty with pattern matching on an instance of an associated type", "body": "<blockquote>\n  <p>How can I correct this?</p>\n</blockquote>\n\n<p>In general, you would have to choose between being generic or specialized. You cannot pattern match on an associated type because this type can be anything and a generic method should work for any type which satisfies the constraints.</p>\n\n<p>For example, in your case:</p>\n\n<ul>\n<li><code>&lt;D as rustc_serialize::serialize::Decoder&gt;::Error</code> can be <em>anything</em></li>\n<li><code>rustc_serialize::json::DecoderError</code> is but one possibility</li>\n</ul>\n\n<p>So you should normally choose between using some abstract <code>D</code> or specializing the decoding for <code>json</code>.</p>\n\n<hr>\n\n<p>However, since you are implementing <code>Decodable</code> here, you cannot choose NOT to be generic as you do not get to pick the signature.</p>\n\n<p>Furthermore, it appears that <code>rustc_serialize</code> does not support tentative parsing (or at least, its <code>json</code> implementation does not), so I am afraid that you cannot check for nullity (using <code>d.read_nil()</code>) beforehand.</p>\n\n<p>I suppose those limitations can be seen as the reason that this library is being retired in favor of <a href=\"https://crates.io/crates/serde/\" rel=\"nofollow\">serde</a>, and can only encourage you to try it out.</p>\n"}], "owner": {"reputation": 699, "user_id": 3957040, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e88a425a40322e715b799744b3a89898?s=128&d=identicon&r=PG&f=1", "display_name": "Pablo", "link": "https://stackoverflow.com/users/3957040/pablo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 83, "favorite_count": 0, "accepted_answer_id": 34457481, "answer_count": 1, "score": 0, "last_activity_date": 1450987683, "creation_date": 1450983333, "question_id": 34456849, "link": "https://stackoverflow.com/questions/34456849/difficulty-with-pattern-matching-on-an-instance-of-an-associated-type", "title": "Difficulty with pattern matching on an instance of an associated type", "body": "<p>I am relying on <code>rustc_serialize</code> to parse JSON data into a struct, <code>Orders</code>, which represents a <code>Vec</code> of <code>Order</code> structs. The JSON data may have an array or a <code>null</code> value; my intent is to either parse the array of orders normally, if any, or parse the <code>null</code> value as an <code>Orders</code> with an empty <code>Vec</code>. If neither of these is the case, then an error is to be relayed. This is my attempt:</p>\n\n<pre><code>impl Decodable for Orders {\n    fn decode&lt;D: Decoder&gt;(d: &amp;mut D) -&gt; Result&lt;Self, D::Error&gt; {\n        let try = d.read_seq(|d, l| {\n            let mut orders = Vec::new();\n            for _ in 0..l {\n                let order = try!(Decodable::decode(d));\n                orders.push(order);\n            }\n            Ok(Orders(orders))\n        });\n\n        match try {\n            value @ Ok(_) =&gt; value,\n            error @ Err(e) =&gt; match e {\n                ExpectedError(_, x) if &amp;x == \"null\" =&gt; Ok(Orders(Vec::new())),\n                _ =&gt; error,\n            },\n        }\n    } \n}\n</code></pre>\n\n<p>My issue has to do with pattern matching on <code>ExpectedError</code>. The compiler gives me the following error:</p>\n\n<pre><code> expected `&lt;D as rustc_serialize::serialize::Decoder&gt;::Error`,\n    found `rustc_serialize::json::DecoderError`\n(expected associated type,\n    found enum `rustc_serialize::json::DecoderError`) [E0308]\nsrc/api/types/json.rs:125                 ExpectedError(_, x) if &amp;x == \"null\" =&gt; Ok(Orders(Vec::new())),\n                                          ^~~~~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>I am stumped on this one. How can I correct this?</p>\n"}, {"tags": ["rust", "zlib"], "answers": [{"comments": [{"owner": {"reputation": 586, "user_id": 2595915, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/37828cd0104bbc094c6d37dbc667ed84?s=128&d=identicon&r=PG", "display_name": "NeuroXc", "link": "https://stackoverflow.com/users/2595915/neuroxc"}, "edited": false, "score": 0, "creation_date": 1451056928, "post_id": 34461016, "comment_id": 56669865, "body": "Thanks, turns out that was the issue! I never would have guessed that from &quot;version error&quot;."}, {"owner": {"reputation": 78348, "user_id": 1180620, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/FXaAg.jpg?s=128&g=1", "display_name": "Mark Adler", "link": "https://stackoverflow.com/users/1180620/mark-adler"}, "reply_to_user": {"reputation": 586, "user_id": 2595915, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/37828cd0104bbc094c6d37dbc667ed84?s=128&d=identicon&r=PG", "display_name": "NeuroXc", "link": "https://stackoverflow.com/users/2595915/neuroxc"}, "edited": false, "score": 0, "creation_date": 1451060279, "post_id": 34461016, "comment_id": 56670700, "body": "It checks both the version string and the size of the z_stream struct to verify that the header and library match."}], "tags": [], "owner": {"reputation": 78348, "user_id": 1180620, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/FXaAg.jpg?s=128&g=1", "display_name": "Mark Adler", "link": "https://stackoverflow.com/users/1180620/mark-adler"}, "is_accepted": true, "score": 2, "last_activity_date": 1451029622, "creation_date": 1451029622, "answer_id": 34461016, "question_id": 34456403, "link": "https://stackoverflow.com/questions/34456403/rust-libz-sys-crate-z-version-error/34461016#34461016", "title": "Rust libz_sys crate - Z_VERSION_ERROR?", "body": "<p>The third argument of <code>inflateInit_()</code> is the size of the <code>z_stream</code> structure, not the length of the data.</p>\n"}], "owner": {"reputation": 586, "user_id": 2595915, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/37828cd0104bbc094c6d37dbc667ed84?s=128&d=identicon&r=PG", "display_name": "NeuroXc", "link": "https://stackoverflow.com/users/2595915/neuroxc"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 83, "favorite_count": 0, "accepted_answer_id": 34461016, "answer_count": 1, "score": 1, "last_activity_date": 1451029622, "creation_date": 1450980320, "question_id": 34456403, "link": "https://stackoverflow.com/questions/34456403/rust-libz-sys-crate-z-version-error", "title": "Rust libz_sys crate - Z_VERSION_ERROR?", "body": "<p>I'm using the libz_sys crate in a Rust project, and I have the following code (taken out of context):</p>\n\n<pre><code>let mut in_data = data.to_owned();\nlet mut next_out = Vec::with_capacity(in_data.len());\nlet msg = CString::new(\"\").unwrap();\nlet mut state = mem::uninitialized();\nlet mut zstream = libz_sys::z_stream {\n    next_in: in_data.as_mut_ptr(),\n    avail_in: 0,\n    total_in: 0,\n    next_out: next_out.as_mut_ptr(),\n    avail_out: 0,\n    total_out: 0,\n    msg: msg.into_raw(),\n    state: &amp;mut state,\n    zalloc: mem::uninitialized(),\n    zfree: mem::uninitialized(),\n    opaque: mem::uninitialized(),\n    data_type: 0,\n    adler: 0,\n    reserved: 0,\n};\nmatch libz_sys::inflateInit_(&amp;mut zstream, libz_sys::zlibVersion(), data.len() as raw::c_int) {\n    libz_sys::Z_OK =&gt; (),\n    e =&gt; return Err(format!(\"Error decoding idat: Error code {}\", e))\n}\n</code></pre>\n\n<p>However when I run this code, <code>inflateInit_</code> is returning error code -6: Z_VERSION_ERROR, which indicates that the zlib.h version does not match the version of libz being linked against. Does anyone know if this is an expected error with this crate or how to fix it? The libz_sys crate has no documentation, however I can't use a higher-level crate like flate2 because I need the ability to pass compression options to libz. I'm developing on OS X 10.11 and Rust 1.7-nightly, if it's relevant.</p>\n"}]