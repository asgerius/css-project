[{"tags": ["multithreading", "rust", "reference", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 826, "user_id": 542825, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/8450ee8725542418165ffbb0921a7024?s=128&d=identicon&r=PG", "display_name": "Ned Ruggeri", "link": "https://stackoverflow.com/users/542825/ned-ruggeri"}, "edited": false, "score": 1, "creation_date": 1443134300, "post_id": 32751956, "comment_id": 53383118, "body": "Thanks so much for your reply!  My solution was to make the <code>Logger</code> implement <code>Clone</code>, and have a field with type <code>Arc&lt;Mutex&lt;Connection&gt;&gt;</code>. Then the user could pass a clone of the logger to the threaded code.  The user can&#39;t transfer ownership of the <code>Connection</code> to the threaded code (the user needs it for other purposes), so I don&#39;t see that it is possible for the threaded code to conveniently do the <code>Arc</code> and boxing on behalf of the user."}, {"owner": {"reputation": 131, "user_id": 4971709, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c65b02dfd2470b4ffba1dcd69835c4bd?s=128&d=identicon&r=PG&f=1", "display_name": "Brandon Ros", "link": "https://stackoverflow.com/users/4971709/brandon-ros"}, "edited": false, "score": 0, "creation_date": 1593738945, "post_id": 32751956, "comment_id": 110891775, "body": "What do you do if the variable you are trying to pass around can&#39;t implement Clone/Copy? like a USB device handle from the rusb crate"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 131, "user_id": 4971709, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c65b02dfd2470b4ffba1dcd69835c4bd?s=128&d=identicon&r=PG&f=1", "display_name": "Brandon Ros", "link": "https://stackoverflow.com/users/4971709/brandon-ros"}, "edited": false, "score": 0, "creation_date": 1593786610, "post_id": 32751956, "comment_id": 110909554, "body": "@BrandonRos <code>Vec</code> doesn&#39;t implement <code>Copy</code> and <code>Clone</code> isn&#39;t used in these code examples. The code presented here works fine for such types."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 45, "last_activity_date": 1549376180, "last_edit_date": 1549376180, "creation_date": 1443057993, "answer_id": 32751956, "question_id": 32750829, "link": "https://stackoverflow.com/questions/32750829/how-can-i-pass-a-reference-to-a-stack-variable-to-a-thread/32751956#32751956", "title": "How can I pass a reference to a stack variable to a thread?", "body": "<p>The thread support in the standard library allows the created threads to outlive the thread that created them; that's a good thing! However, if you were to pass a reference to a stack-allocated variable to one of these threads, there's no guarantee that the variable will still be valid by the time the thread executes. In other languages, this would allow the thread to access invalid memory, creating a pile of memory safety issues.</p>\n\n<p>Fortunately, we aren't limited to the standard library. At least two crates provide <em>scoped threads</em> \u2014 threads that are guaranteed to exit before a certain scope ends. These can ensure that stack variables will be available for the entire duration of the thread:</p>\n\n<ul>\n<li><a href=\"https://crates.io/crates/crossbeam\" rel=\"noreferrer\">crossbeam</a></li>\n<li><a href=\"https://crates.io/crates/scoped_threadpool\" rel=\"noreferrer\">scoped-threadpool</a></li>\n</ul>\n\n<p>There are also crates that abstract away the low-level details of \"threads\" but allow you to accomplish your goals:</p>\n\n<ul>\n<li><a href=\"https://crates.io/crates/rayon\" rel=\"noreferrer\">rayon</a></li>\n</ul>\n\n<p>Here are examples of each. Each example spawns a number of threads and mutates a local vector in place with no locking, no <code>Arc</code>, and no cloning. Note that the mutation has a <code>sleep</code> call to help verify that the calls are happening in parallel.</p>\n\n<p>You can extend the examples to share a reference to any type which implements <a href=\"https://doc.rust-lang.org/std/marker/trait.Sync.html\" rel=\"noreferrer\"><code>Sync</code></a>, such as a <code>Mutex</code> or an <code>Atomic*</code>. Using these would introduce locking, however.</p>\n\n<h3>scoped-threadpool</h3>\n\n<pre><code>use scoped_threadpool::Pool; // 0.1.9\nuse std::{thread, time::Duration};\n\nfn main() {\n    let mut vec = vec![1, 2, 3, 4, 5];\n    let mut pool = Pool::new(vec.len() as u32);\n\n    pool.scoped(|scoped| {\n        for e in &amp;mut vec {\n            scoped.execute(move || {\n                thread::sleep(Duration::from_secs(1));\n                *e += 1;\n            });\n        }\n    });\n\n    println!(\"{:?}\", vec);\n}\n</code></pre>\n\n<h3>crossbeam</h3>\n\n<pre><code>use crossbeam; // 0.6.0\nuse std::{thread, time::Duration};\n\nfn main() {\n    let mut vec = vec![1, 2, 3, 4, 5];\n\n    crossbeam::scope(|scope| {\n        for e in &amp;mut vec {\n            scope.spawn(move |_| {\n                thread::sleep(Duration::from_secs(1));\n                *e += 1;\n            });\n        }\n    })\n    .expect(\"A child thread panicked\");\n\n    println!(\"{:?}\", vec);\n}\n</code></pre>\n\n<h3>rayon</h3>\n\n<pre><code>use rayon::iter::{IntoParallelRefMutIterator, ParallelIterator}; // 1.0.3\nuse std::{thread, time::Duration};\n\nfn main() {\n    let mut vec = vec![1, 2, 3, 4, 5];\n\n    vec.par_iter_mut().for_each(|e| {\n        thread::sleep(Duration::from_secs(1));\n        *e += 1;\n    });\n\n    println!(\"{:?}\", vec);\n}\n</code></pre>\n\n<blockquote>\n  <p>the client is required to box the connection in an <code>Arc</code> when it is internal to the library that the code is parallelized</p>\n</blockquote>\n\n<p>Perhaps you can hide your parallelism better then? Could you accept the logger and then wrap it in an <code>Arc</code> / <code>Mutex</code> before handing it off to your threads?</p>\n"}], "owner": {"reputation": 826, "user_id": 542825, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/8450ee8725542418165ffbb0921a7024?s=128&d=identicon&r=PG", "display_name": "Ned Ruggeri", "link": "https://stackoverflow.com/users/542825/ned-ruggeri"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 8023, "favorite_count": 17, "answer_count": 1, "score": 42, "last_activity_date": 1615078925, "creation_date": 1443049215, "last_edit_date": 1615078925, "question_id": 32750829, "link": "https://stackoverflow.com/questions/32750829/how-can-i-pass-a-reference-to-a-stack-variable-to-a-thread", "title": "How can I pass a reference to a stack variable to a thread?", "body": "<p>I'm writing a WebSocket server where a web client connects to play chess against a multithreaded computer AI. The WebSocket server wants to pass a <code>Logger</code> object into the AI code. The <code>Logger</code> object is going to pipe down log lines from the AI to the web client. The <code>Logger</code> must contain a reference to the client connection.</p>\n\n<p>I'm confused about how lifetimes interact with threads. I've reproduced the problem with a <code>Wrapper</code> struct parameterized by a type. The <code>run_thread</code> function tries to unwrap the value and log it.</p>\n\n<pre><code>use std::fmt::Debug;\nuse std::thread;\n\nstruct Wrapper&lt;T: Debug&gt; {\n    val: T,\n}\n\nfn run_thread&lt;T: Debug&gt;(wrapper: Wrapper&lt;T&gt;) {\n    let thr = thread::spawn(move || {\n        println!(\"{:?}\", wrapper.val);\n    });\n\n    thr.join();\n}\n\nfn main() {\n    run_thread(Wrapper::&lt;i32&gt; { val: -1 });\n}\n</code></pre>\n\n<p>The <code>wrapper</code> argument lives on the stack, and its lifetime doesn't extend past <code>run_thread</code>'s stack frame, even though the thread will be joined before the stack frame ends. I'd could copy the value off the stack:</p>\n\n<pre><code>use std::fmt::Debug;\nuse std::thread;\n\nstruct Wrapper&lt;T: Debug + Send&gt; {\n    val: T,\n}\n\nfn run_thread&lt;T: Debug + Send + 'static&gt;(wrapper: Wrapper&lt;T&gt;) {\n    let thr = thread::spawn(move || {\n        println!(\"{:?}\", wrapper.val);\n    });\n\n    thr.join();\n}\n\nfn main() {\n    run_thread(Wrapper::&lt;i32&gt; { val: -1 });\n}\n</code></pre>\n\n<p>This will not work if <code>T</code> is a reference to a big object I don't want copied:</p>\n\n<pre><code>use std::fmt::Debug;\nuse std::thread;\n\nstruct Wrapper&lt;T: Debug + Send&gt; {\n    val: T,\n}\n\nfn run_thread&lt;T: Debug + Send + 'static&gt;(wrapper: Wrapper&lt;T&gt;) {\n    let thr = thread::spawn(move || {\n        println!(\"{:?}\", wrapper.val);\n    });\n\n    thr.join();\n}\n\nfn main() {\n    let mut v = Vec::new();\n    for i in 0..1000 {\n        v.push(i);\n    }\n\n    run_thread(Wrapper { val: &amp;v });\n}\n</code></pre>\n\n<p>Which results in:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: `v` does not live long enough\n  --&gt; src/main.rs:22:32\n   |\n22 |     run_thread(Wrapper { val: &amp;v });\n   |                                ^ does not live long enough\n23 | }\n   | - borrowed value only lives until here\n   |\n   = note: borrowed value must be valid for the static lifetime...\n</code></pre>\n\n<p>The only solution I can think of is to use an <code>Arc</code>.</p>\n\n<pre><code>use std::fmt::Debug;\nuse std::sync::Arc;\nuse std::thread;\n\nstruct Wrapper&lt;T: Debug + Send + Sync + 'static&gt; {\n    arc_val: Arc&lt;T&gt;,\n}\n\nfn run_thread&lt;T: Debug + Send + Sync + 'static&gt;(wrapper: &amp;Wrapper&lt;T&gt;) {\n    let arc_val = wrapper.arc_val.clone();\n    let thr = thread::spawn(move || {\n        println!(\"{:?}\", *arc_val);\n    });\n\n    thr.join();\n}\n\nfn main() {\n    let mut v = Vec::new();\n    for i in 0..1000 {\n        v.push(i);\n    }\n\n    let w = Wrapper { arc_val: Arc::new(v) };\n    run_thread(&amp;w);\n\n    println!(\"{}\", (*w.arc_val)[0]);\n}\n</code></pre>\n\n<p>In my real program, it appears that both the <code>Logger</code> and the connection object must be placed in <code>Arc</code> wrappers. It seems annoying that the client is required to box the connection in an <code>Arc</code> when it is internal to the library that the code is parallelized. This is especially annoying because the lifetime of the connection is guaranteed to be greater than the lifetime of the worker threads.</p>\n\n<p>Have I missed something?</p>\n"}, {"tags": ["rust", "libraries", "binaryfiles", "rust-cargo"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 3, "creation_date": 1443076319, "post_id": 32748918, "comment_id": 53349349, "body": "<b>which will be parsed at runtime</b> =&gt; why? Since the data is static, it would be more efficient to store the already parsed data in the binary rather than parse it at run-time. Rust is fairly limited in what it can represent at compile-time (quite unfortunately), however you mention maintaining a <code>.rs</code> file so it seems possible in your case. If this is the case, then I advise using a <code>build.rs</code> file, which is a &quot;build script&quot; in Rust which will allow you to parse the source file(s) and generate <code>.rs</code> files right before building &quot;proper&quot;."}, {"owner": {"reputation": 564, "user_id": 2969020, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5dfbfc8e1b24766f12cb2e0b0873a9c4?s=128&d=identicon&r=PG&f=1", "display_name": "Otobo", "link": "https://stackoverflow.com/users/2969020/otobo"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1443084567, "post_id": 32748918, "comment_id": 53353546, "body": "To be more accurate these data are already parsed and need to move to structs, like <code>HashMap</code>, which can not be initialized (at least not without using <code>lazy_static</code> crate). This is why I need to &quot;parse&quot; them at runtime. Having them in a binary (or text) file makes easier to replace only this file  when I want to update the data. However using <code>build.rs</code> in combination with <code>lazy_static</code> crate sounds like a better alternative and I&#39;ll give it a try. Thanks for the suggestion!"}], "answers": [{"comments": [{"owner": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "edited": false, "score": 7, "creation_date": 1443045857, "post_id": 32749207, "comment_id": 53341096, "body": "If you want text (rather than binary data), and it&#39;s already in utf8 format, can&#39;t you just use <code>include_str!</code>, instead of using <code>include_bytes!</code> and then converting it? <i>i.e.</i> -- <code>let host_str = include_str!(&quot;&#47;etc&#47;hosts&quot;);</code>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "edited": false, "score": 1, "creation_date": 1443046329, "post_id": 32749207, "comment_id": 53341283, "body": "@BenjaminLindley hmm, good point! I saw <code>include!</code> and realized it wasn&#39;t right but skipped right over <code>include_str!</code>."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 14, "last_activity_date": 1443055429, "last_edit_date": 1495542841, "creation_date": 1443041328, "answer_id": 32749207, "question_id": 32748918, "link": "https://stackoverflow.com/questions/32748918/is-there-any-way-to-include-binary-or-text-files-in-a-rust-library/32749207#32749207", "title": "Is there any way to include binary or text files in a Rust library?", "body": "<p>The <a href=\"http://doc.rust-lang.org/std/macro.include_bytes!.html\" rel=\"noreferrer\"><code>include_bytes!</code></a> macro seems close to what you want. It only gives you a reference to a byte array though, so you'd have to do any parsing starting from that:</p>\n\n<pre><code>static HOST_FILE: &amp;'static [u8] = include_bytes!(\"/etc/hosts\");\n\nfn main() {\n    let host_str = std::str::from_utf8(HOST_FILE).unwrap();\n\n    println!(\"Hosts are:\\n{}\", &amp;host_str[..42]);\n}\n</code></pre>\n\n<p>If you have UTF-8 content, you can use <a href=\"http://doc.rust-lang.org/std/macro.include_str!.html\" rel=\"noreferrer\"><code>include_str!</code></a>, as pointed out by <a href=\"https://stackoverflow.com/questions/32748918/is-there-any-way-to-include-binary-or-text-files-in-a-rust-library#comment53341096_32749207\">Benjamin Lindley</a>:</p>\n\n<pre><code>static HOST_FILE: &amp;'static str = include_str!(\"/etc/hosts\");\n\nfn main() {\n    println!(\"Hosts are:\\n{}\", &amp;HOST_FILE[..42]);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 18, "last_activity_date": 1443086267, "creation_date": 1443086267, "answer_id": 32757672, "question_id": 32748918, "link": "https://stackoverflow.com/questions/32748918/is-there-any-way-to-include-binary-or-text-files-in-a-rust-library/32757672#32757672", "title": "Is there any way to include binary or text files in a Rust library?", "body": "<p><em>Disclaimer: I mentioned it in a comment, but let me re-iterate here, as it gives me more space to elaborate.</em></p>\n\n<p>As Shepmaster said, it is possible to include text or binary verbatim in a Rust library/executable using the <code>include_bytes!</code> and <code>include_str!</code> macros.</p>\n\n<p>In your case, however, I would avoid it. By deferring the parsing of the content to run-time:</p>\n\n<ul>\n<li>you allow building a flawed artifact.</li>\n<li>you incur (more) run-time overhead (parsing time).</li>\n<li>you incur (more) space overhead (parsing code).</li>\n</ul>\n\n<p>Rust acknowledges this issue, and offers multiple mechanisms for code generation destined to overcome those limitations:</p>\n\n<ul>\n<li>macros: if the logic can be encoded into a macro, then it can be included in a source file directly</li>\n<li>plugins: powered up macros, which can encode any arbitrary logic and generate elaborate code (see <code>regex!</code>)</li>\n<li><code>build.rs</code>: an independent \"Rust script\" running ahead of the compilation proper whose role is to generate <code>.rs</code> files</li>\n</ul>\n\n<p>In your case, the <code>build.rs</code> script sounds like a good fit:</p>\n\n<ul>\n<li>by moving the parsing code there, you deliver a lighter artifact</li>\n<li>by parsing ahead of time, you deliver a faster artifact</li>\n<li>by parsing ahead of time, you deliver a correct artifact</li>\n</ul>\n\n<p>The result of your parsing can be encoded in different ways, from functions to statics (possibly <code>lazy_static!</code>), as <code>build.rs</code> can generate any valid Rust code.</p>\n\n<p>You can see how to use <code>build.rs</code> in <a href=\"http://doc.crates.io/build-script.html#case-study-code-generation\" rel=\"noreferrer\">the Cargo Documentation</a>; you'll find there how to integrate it with Cargo and how to create files (and more).</p>\n"}], "owner": {"reputation": 564, "user_id": 2969020, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5dfbfc8e1b24766f12cb2e0b0873a9c4?s=128&d=identicon&r=PG&f=1", "display_name": "Otobo", "link": "https://stackoverflow.com/users/2969020/otobo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5385, "favorite_count": 1, "accepted_answer_id": 32757672, "answer_count": 2, "score": 15, "last_activity_date": 1443090771, "creation_date": 1443040249, "last_edit_date": 1495542841, "question_id": 32748918, "link": "https://stackoverflow.com/questions/32748918/is-there-any-way-to-include-binary-or-text-files-in-a-rust-library", "title": "Is there any way to include binary or text files in a Rust library?", "body": "<p>I am trying to create a library and I want to include some binary (or text) files in it that will have data which will be parsed at runtime.</p>\n\n<p>My intention is to have control over these files, update them constantly and change the version of the library in each update.</p>\n\n<p>Is this possible via cargo? If so, how can I access these files from my library?</p>\n\n<p>A workaround I thought of is to include some <code>.rs</code> files with structs and/or constants like <code>&amp;str</code> which will store the data but I find it kind of ugly.</p>\n\n<p><strong>EDIT:</strong></p>\n\n<p>I have changed the accepted answer to the one that fits more my case, however take a look at <a href=\"https://stackoverflow.com/a/32749207/2969020\">Shepmaster's answer</a> as this can be more suitable in your case.</p>\n"}, {"tags": ["websocket", "rust", "elm"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1443032627, "post_id": 32746501, "comment_id": 53334326, "body": "Are you providing the <code>Sec-WebSocket-Key</code> header where appropriate? Additionally, I think those versions are the versions of the <i>libraries</i>, not necessarily the version of the websocket protocol."}, {"owner": {"reputation": 1044, "user_id": 476114, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/18db9bf4cb83fb9c8f30aeb53b3ccfae?s=128&d=identicon&r=PG", "display_name": "Bzzt", "link": "https://stackoverflow.com/users/476114/bzzt"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1443038644, "post_id": 32746501, "comment_id": 53337691, "body": "you know, I have no idea.  I&#39;m taking the rust demo server and testing it with the elm demo client.  The elm client works when it is run against the node.js server that it comes with for testing.  Re the version, all I know at this point is that the version doesn&#39;t match what rust is expecting.  I&#39;ll see if I can get it to print out what its receiving though."}, {"owner": {"reputation": 1044, "user_id": 476114, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/18db9bf4cb83fb9c8f30aeb53b3ccfae?s=128&d=identicon&r=PG", "display_name": "Bzzt", "link": "https://stackoverflow.com/users/476114/bzzt"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1443043994, "post_id": 32746501, "comment_id": 53340379, "body": "Ok, looks like the version that rust is seeing is &#39;none&#39;.  huh."}], "answers": [{"comments": [{"owner": {"reputation": 1044, "user_id": 476114, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/18db9bf4cb83fb9c8f30aeb53b3ccfae?s=128&d=identicon&r=PG", "display_name": "Bzzt", "link": "https://stackoverflow.com/users/476114/bzzt"}, "edited": false, "score": 1, "creation_date": 1443047743, "post_id": 32750269, "comment_id": 53341755, "body": "ok websockets != socket.io.  I guess I was just thinking that&#39;s what they named their websockets library.  I don&#39;t know that I really need socket.io (seeing as I didn&#39;t know what it was haha) so I might go the other direction and find an elm websocket library instead.  I&#39;m not seeing a rust socket.io lib anyway."}], "tags": [], "owner": {"reputation": 21877, "user_id": 131227, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/60e3c03e227b84e2898c29fd711cae5b?s=128&d=identicon&r=PG", "display_name": "z5h", "link": "https://stackoverflow.com/users/131227/z5h"}, "is_accepted": true, "score": 5, "last_activity_date": 1443045810, "creation_date": 1443045810, "answer_id": 32750269, "question_id": 32746501, "link": "https://stackoverflow.com/questions/32746501/elm-websockets-with-a-rust-server/32750269#32750269", "title": "Elm websockets with a Rust server", "body": "<p>It seems socket.io has it's own protocol (see <a href=\"https://github.com/socketio/socket.io-protocol\" rel=\"noreferrer\">https://github.com/socketio/socket.io-protocol</a>). \nIt's confusing because </p>\n\n<blockquote>\n  <p>\"The socket.io protocol can be delivered over a variety of transports.\" </p>\n</blockquote>\n\n<p>Websockets are a possible transport layer for socket.io.\n<a href=\"https://github.com/socketio/socket.io-protocol#transport\" rel=\"noreferrer\">https://github.com/socketio/socket.io-protocol#transport</a></p>\n\n<p>You need to find a rust-socket.io library.</p>\n"}], "owner": {"reputation": 1044, "user_id": 476114, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/18db9bf4cb83fb9c8f30aeb53b3ccfae?s=128&d=identicon&r=PG", "display_name": "Bzzt", "link": "https://stackoverflow.com/users/476114/bzzt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1921, "favorite_count": 1, "accepted_answer_id": 32750269, "answer_count": 1, "score": 4, "last_activity_date": 1443045810, "creation_date": 1443031430, "last_edit_date": 1443032605, "question_id": 32746501, "link": "https://stackoverflow.com/questions/32746501/elm-websockets-with-a-rust-server", "title": "Elm websockets with a Rust server", "body": "<p>I'm wanting to use Elm for my web front end, and Rust for the server.  But, I'm running into an issue where the websockets version from elm-socketio doesn't work with rust-websocket.  As far as I can tell elm-socketio has websockets version \"2.0.0\" (a string I found searching socketio.js that comes with elm-socketio), while rust-websocket has version \"13\".  In Rust an exception happens when the mismatched version is received.  I commented out the version check just to see what would happen, and I get this:</p>\n\n<pre><code>thread '&lt;unnamed&gt;' panicked at 'called `Result::unwrap()` on an `Err` value: RequestError(\"Missing Sec-WebSocket-Key header\")', src/libcore/result.rs:731\n</code></pre>\n\n<p>So I guess my question is can these two be made to work with each other without significant work?  Is there really a version 2.0.0 of websockets, and is that different from <a href=\"https://github.com/miksago/RFC6455/blob/master/protocol.txt\" rel=\"nofollow\">RFC6455</a> which is what rust-websocket refers to (and has version \"13\")?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 373, "user_id": 3949255, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2987c356f74bda70da7d3d1e778b12f8?s=128&d=identicon&r=PG&f=1", "display_name": "Will Fischer", "link": "https://stackoverflow.com/users/3949255/will-fischer"}, "edited": false, "score": 4, "creation_date": 1443017850, "post_id": 32739768, "comment_id": 53324882, "body": "Note that the playground caches output, so if you run the same program twice without changing it, you&#39;ll get the same output. When I click on your playground link and run it, I get the same sequence as you. When I added a space to the end of the last line to force re-running, I got a slightly different sequence."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 4, "last_activity_date": 1443013513, "creation_date": 1443013513, "answer_id": 32740415, "question_id": 32739768, "link": "https://stackoverflow.com/questions/32739768/stdsyncmpscchannel-always-in-the-same-order/32740415#32740415", "title": "std::sync::mpsc::channel always in the same order", "body": "<p>What order would you expect them to be in? For what it's worth, on my machine I ran the same binary twice and got slightly different results.</p>\n\n<p>Ultimately, this comes down to how your operating system decides to schedule threads. You create 10 new threads and then ask the OS to run each of them when convenient. A hypothetical thread scheduler might look like this:</p>\n\n<pre><code>for thread in threads {\n    if thread.runnable() {\n        thread.run_for_a_time_slice();\n    }\n}\n</code></pre>\n\n<p>Where <code>threads</code> stores the threads in the order they were created. It's unlikely that any OS would be this na\u00efve, but it shows the idea.</p>\n\n<p>In your case, every thread is ready to run immediately, and is very short so it can run all the way to completion before the time is up.</p>\n\n<p>Additionally, there might be some fairness being applied to the lock that guards the channel. Perhaps it always lets the first of multiple competing threads submit a value. Unfortunately, the <a href=\"https://github.com/rust-lang/rust/blob/1.3.0/src/libstd/sync/mpsc/mod.rs\" rel=\"nofollow\">implementation</a> of channels is reasonably complex, so I can't immediately say if that's the case or not.</p>\n"}], "owner": {"reputation": 192, "user_id": 4884227, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-K9LdGR0-510/AAAAAAAAAAI/AAAAAAAABTE/wP6cZXxU3Mk/photo.jpg?sz=128", "display_name": "Bpazy", "link": "https://stackoverflow.com/users/4884227/bpazy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 172, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1443013513, "creation_date": 1443011640, "last_edit_date": 1443012859, "question_id": 32739768, "link": "https://stackoverflow.com/questions/32739768/stdsyncmpscchannel-always-in-the-same-order", "title": "std::sync::mpsc::channel always in the same order", "body": "<p>No matter how many times I run the program, it always shows the numbers in the same order:</p>\n\n<pre><code>use std::sync::mpsc::channel;\nuse std::thread;\n\nfn main() {\n    let (tx, rx) = channel();\n    for i in 0 ..10 {\n        let tx = tx.clone();\n        thread::spawn(move || {\n            tx.send(i).unwrap();\n        }); \n    }\n\n    for _ in 0..10 {\n        println!(\"{}\", rx.recv().unwrap());\n    }\n}\n</code></pre>\n\n<p>Code on the <a href=\"http://is.gd/R81g5B\" rel=\"nofollow\">playground</a>. The output is:</p>\n\n<pre><code>6\n7\n8\n5\n9\n4\n3\n2\n1\n0\n</code></pre>\n\n<p>If I rebuild the project, the sequence will change. Is the sequence decided at compile time?</p>\n"}, {"tags": ["inheritance", "struct", "rust"], "comments": [{"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 2, "creation_date": 1443033049, "post_id": 32736170, "comment_id": 53334564, "body": "<a href=\"http://aturon.github.io/blog/2015/09/18/reuse/\" rel=\"nofollow noreferrer\">aturon.github.io/blog/2015/09/18/reuse</a> has a few working examples from Servo if you really need the inheritance."}], "answers": [{"tags": [], "owner": {"reputation": 18185, "user_id": 538551, "user_type": "registered", "accept_rate": 98, "profile_image": "https://www.gravatar.com/avatar/3131e6da7622e8c6a750b97252e910be?s=128&d=identicon&r=PG", "display_name": "beatgammit", "link": "https://stackoverflow.com/users/538551/beatgammit"}, "is_accepted": false, "score": 21, "last_activity_date": 1525931964, "last_edit_date": 1525931964, "creation_date": 1486508828, "answer_id": 42101707, "question_id": 32736170, "link": "https://stackoverflow.com/questions/32736170/what-is-the-best-way-to-inherit-a-struct-in-rust-1-3/42101707#42101707", "title": "What is the best way to inherit a struct in Rust 1.3?", "body": "<p>Short answer, you can't do inheritance with structs.</p>\n\n<p>Instead of inheritance, Rust uses composition. However, you <em>can</em> do inheritance within <a href=\"https://doc.rust-lang.org/book/traits.html\" rel=\"noreferrer\">traits</a>. Traits don't have data, but they can define functions, so you can many of the benefits of inheritance by using them:</p>\n\n<pre><code>trait Foo {\n    fn foo(&amp;self);\n}\n\ntrait FooBar: Foo {\n    fn foobar(&amp;self);\n}\n</code></pre>\n\n<p>An implementor of <code>FooBar</code> <em>must</em> implement <code>foo</code> (unless you provide a default implementation).</p>\n\n<p>One way Rust does specialization is typically through <code>enums</code>, which are very powerful in Rust. One of the Rust developers wrote <a href=\"http://smallcultfollowing.com/babysteps/blog/2015/05/05/where-rusts-enum-shines/\" rel=\"noreferrer\">a good blog series about how Rust approaches these types of problems</a>. I recommend reading through it as well as reading through the official book.</p>\n"}], "owner": {"reputation": 1311, "user_id": 2962931, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/02d80804a403c5e5a5276643e4614733?s=128&d=identicon&r=PG&f=1", "display_name": "bitnick", "link": "https://stackoverflow.com/users/2962931/bitnick"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 15315, "favorite_count": 1, "answer_count": 1, "score": 24, "last_activity_date": 1590461441, "creation_date": 1443001553, "last_edit_date": 1525986169, "question_id": 32736170, "link": "https://stackoverflow.com/questions/32736170/what-is-the-best-way-to-inherit-a-struct-in-rust-1-3", "title": "What is the best way to inherit a struct in Rust 1.3?", "body": "<p>When I compile this with Rust 1.3, the compiler tells me that <code>virtual</code> structs have been removed from the language:</p>\n\n<pre><code>struct Foo: Bar {\n\n}\n</code></pre>\n"}, {"tags": ["path", "rust", "ownership"], "answers": [{"comments": [{"owner": {"reputation": 28407, "user_id": 109618, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/84a4143803eafa1966191c604864a7b5?s=128&d=identicon&r=PG", "display_name": "David J.", "link": "https://stackoverflow.com/users/109618/david-j"}, "edited": false, "score": 0, "creation_date": 1611174097, "post_id": 32730838, "comment_id": 116369545, "body": "<code>Box&lt;Path&gt;</code> is another option. Since it signals immutability, it worth considering too."}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "reply_to_user": {"reputation": 28407, "user_id": 109618, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/84a4143803eafa1966191c604864a7b5?s=128&d=identicon&r=PG", "display_name": "David J.", "link": "https://stackoverflow.com/users/109618/david-j"}, "edited": false, "score": 0, "creation_date": 1613413362, "post_id": 32730838, "comment_id": 117062416, "body": "It is, but I don&#39;t think I&#39;ve ever seen one in all my years of writing Rust."}], "tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": true, "score": 23, "last_activity_date": 1442994865, "last_edit_date": 1442994865, "creation_date": 1442981593, "answer_id": 32730838, "question_id": 32730714, "link": "https://stackoverflow.com/questions/32730714/what-is-the-right-way-to-store-an-immutable-path-in-a-struct/32730838#32730838", "title": "What is the right way to store an immutable Path in a struct?", "body": "<p>This question is almost the same as <code>String</code> vs <code>&amp;str</code> , if that helps. <code>PathBuf</code> is <code>String</code>, <code>&amp;Path</code> is <code>&amp;str</code>. So:</p>\n\n<p>Store a <code>PathBuf</code> if you want the struct to own it. If you don't know what you want, start here.</p>\n\n<p>Store a <code>&amp;Path</code> if you just want a reference to a path. Depending on what you're doing, this may be what you want, but if you don't know, it's probably not correct.</p>\n"}], "owner": {"reputation": 5159, "user_id": 482819, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/241c9426403e040a283f10ae6499ace6?s=128&d=identicon&r=PG", "display_name": "Hernan", "link": "https://stackoverflow.com/users/482819/hernan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3621, "favorite_count": 3, "accepted_answer_id": 32730838, "answer_count": 1, "score": 16, "last_activity_date": 1443013636, "creation_date": 1442980722, "last_edit_date": 1443013636, "question_id": 32730714, "link": "https://stackoverflow.com/questions/32730714/what-is-the-right-way-to-store-an-immutable-path-in-a-struct", "title": "What is the right way to store an immutable Path in a struct?", "body": "<p>The following code works but not sure if it is the right way. A few questions:</p>\n\n<ul>\n<li>Should I use <code>Path</code> or <code>PathBuf</code>?</li>\n<li>Should I use <code>AsRef</code>?</li>\n<li>Do I need <code>PathBuf::from(path)</code> in order to have path owned by the struct?</li>\n</ul>\n\n\n\n<pre><code>use std::fmt;\nuse std::path::PathBuf;\n\nstruct Example {\n    path: PathBuf,\n}\n\nimpl fmt::Display for Example {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        write!(f, \"{}\", self.path.to_str().unwrap())\n    }\n}\n\nimpl Example {\n\n    fn new(path: &amp;PathBuf) -&gt; Example {\n        // Do something here with path.\n        Example {\n            path: PathBuf::from(path),\n        }\n    }\n}\n\nfn main() {\n    let x = Example::new(&amp;PathBuf::from(\"test.png\"));\n    println!(\"{}\", x);\n}\n</code></pre>\n\n<p>Some context: I am trying to have a high-level abstraction over a file that should know its own path. Maybe the design is plain wrong.</p>\n"}, {"tags": ["string", "rust"], "answers": [{"comments": [{"owner": {"reputation": 1459, "user_id": 1667955, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/X2hLR.jpg?s=128&g=1", "display_name": "mbrt", "link": "https://stackoverflow.com/users/1667955/mbrt"}, "edited": false, "score": 0, "creation_date": 1442990277, "post_id": 32724666, "comment_id": 53306441, "body": "It actually works. Can you explain better why <code>&amp;[T]</code> works? The <code>AsRef&lt;str&gt;</code> is clear."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 1459, "user_id": 1667955, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/X2hLR.jpg?s=128&g=1", "display_name": "mbrt", "link": "https://stackoverflow.com/users/1667955/mbrt"}, "edited": false, "score": 3, "creation_date": 1442997920, "post_id": 32724666, "comment_id": 53310701, "body": "@brt You know slices <code>&amp;[T]</code> and only wonder why the function accepts <code>&amp;[T]</code> but <code>main</code> passes in <code>&amp;Vec&lt;T&gt;</code>, right? The answer is <a href=\"http://doc.rust-lang.org/book/deref-coercions.html\" rel=\"nofollow noreferrer\">deref coercions</a>. Because <code>&amp;Vec&lt;T&gt;</code> is a much less general type than <code>&amp;[T]</code> (you can get the latter from many sources that aren&#39;t vectors) it is preferred to write functions to accept <code>&amp;[T]</code> rather than <code>&amp;Vec&lt;T&gt;</code>. For ergonomics, <code>foo(&amp;vec)</code> automatically constructs the slice from the vector."}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": true, "score": 19, "last_activity_date": 1489244518, "last_edit_date": 1489244518, "creation_date": 1442947870, "answer_id": 32724666, "question_id": 32723794, "link": "https://stackoverflow.com/questions/32723794/how-do-i-write-a-function-that-takes-both-owned-and-non-owned-string-collections/32724666#32724666", "title": "How do I write a function that takes both owned and non-owned string collections?", "body": "<p>Although <code>String</code> and <code>&amp;str</code> are very closely related, they are not identical. Here's what your vectors look like in memory:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>v1 ---&gt; [ { 0x7890, // pointer to \"a\" + 7 unused bytes\n            1 }     // length of \"a\"\n          { 0x7898, // pointer to \"b\" + 7 unused bytes\n            1 } ]   // length\n\nv2 ---&gt; [ { 0x1230 // pointer to \"a\" + 7 unused bytes (a different copy)\n            8      // capacity\n            1 }    // length\n          { 0x1238 // pointer ...\n            8      // capacity\n            1 } ]  // length\n</code></pre>\n\n<p>Here each line is the same amount of memory (four or eight bytes depending on pointer size). You can't take the memory of one of these and treat it like the other. The memory layout doesn't match up. The items are of different sized and have different layout. For example, if <code>v1</code> stores its items starting at address <code>X</code> and <code>v2</code> stores its items starting at address <code>Y</code>, then <code>v1[1]</code> is at address <code>X + 8</code> but <code>v2[1]</code> is at address <code>Y + 12</code>.</p>\n\n<p>What you <em>can</em> do is write a generic function like this:</p>\n\n<pre><code>fn my_func&lt;T: AsRef&lt;str&gt;&gt;(list: &amp;[T]) {\n    for s in list {\n        println!(\"{}\", s.as_ref());\n    }\n}\n</code></pre>\n\n<p>Then the compiler can generate appropriate code for both <code>&amp;[String]</code> and <code>&amp;[&amp;str]</code> as well as other types if they implement <code>AsRef&lt;str&gt;</code>.</p>\n"}, {"comments": [{"owner": {"reputation": 1459, "user_id": 1667955, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/X2hLR.jpg?s=128&g=1", "display_name": "mbrt", "link": "https://stackoverflow.com/users/1667955/mbrt"}, "edited": false, "score": 0, "creation_date": 1443102491, "post_id": 32744448, "comment_id": 53365228, "body": "This is actually even better! @delnan actually answers my question, however this version is more generic."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1443024435, "last_edit_date": 1495539987, "creation_date": 1443024435, "answer_id": 32744448, "question_id": 32723794, "link": "https://stackoverflow.com/questions/32723794/how-do-i-write-a-function-that-takes-both-owned-and-non-owned-string-collections/32744448#32744448", "title": "How do I write a function that takes both owned and non-owned string collections?", "body": "<p>To build on <a href=\"https://stackoverflow.com/a/32724666/155423\">delnan's great answer</a>, I want to point out one more level of generics that you can add here. You said:</p>\n\n<blockquote>\n  <p>a collection of strings </p>\n</blockquote>\n\n<p>But there are more types of collections than slices and vectors! In your example, you care about forward-only, one-at-a-time access to the items. This is a perfect example of an <code>Iterator</code>. Below, I've changed your function to accept any type that can be transformed into an iterator. You can then pass many more types of things. I've used a <code>HashSet</code> as an example, but note that you can also pass in <code>v1</code> and <code>v2</code> instead of <code>&amp;v1</code> or <code>&amp;v2</code>, consuming them.</p>\n\n<pre><code>use std::collections::HashSet;\n\nfn my_func&lt;I&gt;(list: I)\n    where I: IntoIterator,\n          I::Item: AsRef&lt;str&gt;,\n{\n    for s in list {\n        println!(\"{}\", s.as_ref());\n    }\n}\n\nfn main() {\n    let v1 = vec![\"a\", \"b\"];\n    let v2 = vec![\"a\".to_owned(), \"b\".to_owned()];\n    let v3 = {\n        let mut set = HashSet::new();\n        set.insert(\"a\");\n        set.insert(\"b\");\n        set.insert(\"a\");\n        set\n    };\n    let v4 = {\n        let mut set = HashSet::new();\n        set.insert(\"a\".to_owned());\n        set.insert(\"b\".to_owned());\n        set.insert(\"a\".to_owned());\n        set\n    };\n\n    my_func(&amp;v1);\n    my_func(v1);\n    my_func(&amp;v2);\n    my_func(v2);\n    my_func(&amp;v3);\n    my_func(v3);\n    my_func(&amp;v4);\n    my_func(v4);\n}\n</code></pre>\n"}], "owner": {"reputation": 1459, "user_id": 1667955, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/X2hLR.jpg?s=128&g=1", "display_name": "mbrt", "link": "https://stackoverflow.com/users/1667955/mbrt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 753, "favorite_count": 2, "accepted_answer_id": 32724666, "answer_count": 2, "score": 11, "last_activity_date": 1489244518, "creation_date": 1442944971, "last_edit_date": 1489244497, "question_id": 32723794, "link": "https://stackoverflow.com/questions/32723794/how-do-i-write-a-function-that-takes-both-owned-and-non-owned-string-collections", "title": "How do I write a function that takes both owned and non-owned string collections?", "body": "<p>I'm having trouble writing a function that takes a collection of strings as parameter. My function looks like this:</p>\n\n<pre><code>type StrList&lt;'a&gt; = Vec&lt;&amp;'a str&gt;;\n\nfn my_func(list: &amp;StrList) {\n    for s in list {\n        println!(\"{}\", s);\n    }\n}\n</code></pre>\n\n<p>All goes well if I pass a <code>Vec&lt;&amp;'a str&gt;</code> to the function, as expected. However, if I pass a <code>Vec&lt;String&gt;</code> the compiler complains:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:13:13\n   |\n13 |     my_func(&amp;v2);\n   |             ^^^ expected &amp;str, found struct `std::string::String`\n   |\n   = note: expected type `&amp;std::vec::Vec&lt;&amp;str&gt;`\n   = note:    found type `&amp;std::vec::Vec&lt;std::string::String&gt;`\n</code></pre>\n\n<p>This is the main used:</p>\n\n<pre><code>fn main() {\n    let v1 = vec![\"a\", \"b\"];\n    let v2 = vec![\"a\".to_owned(), \"b\".to_owned()];\n    my_func(&amp;v1);\n    my_func(&amp;v2);\n}\n</code></pre>\n\n<p>My function is not able to take vectors of owned strings. Conversely, if I change the <code>StrList</code> type into:</p>\n\n<pre><code>type StrList = Vec&lt;String&gt;;\n</code></pre>\n\n<p>The first call fails, and the second works.</p>\n\n<p>A possible solution is to produce a <code>Vec&lt;&amp;'a str&gt;</code> from <code>v2</code> in this way:</p>\n\n<pre><code>let v2_1 : Vec&lt;_&gt; = v2.iter().map(|s| s.as_ref()).collect();\n</code></pre>\n\n<p>But it seems very odd to me. <code>my_func</code> should not care about the ownership of the strings.</p>\n\n<p>What kind of signature should I use for <code>my_func</code> to support both vectors of owned strings and string references?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 8, "creation_date": 1442930740, "post_id": 32712140, "comment_id": 53280478, "body": "If you <code>use std::fmt::{self, Debug, Display}</code>, just calling <code>Debug::fmt(self, f)</code> is simpler."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 66, "last_activity_date": 1442946225, "last_edit_date": 1442946225, "creation_date": 1442910749, "answer_id": 32712140, "question_id": 32710187, "link": "https://stackoverflow.com/questions/32710187/how-do-i-get-an-enum-as-a-string/32712140#32712140", "title": "How do I get an enum as a string?", "body": "<p>Probably the easiest way would be to implement <code>Display</code> by calling into <code>Debug</code>:</p>\n\n<pre><code>impl fmt::Display for Foo {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        write!(f, \"{:?}\", self)\n        // or, alternatively:\n        // fmt::Debug::fmt(self, f)\n    }\n}\n</code></pre>\n\n<p>Then you can use <code>to_string()</code> to get a <code>String</code> representation:</p>\n\n<pre><code>let s: String = Foo::Quux.to_string();\n</code></pre>\n\n<p>If you have many enums which you want to print, you can write a trivial macro to generate the above implementation of <code>Display</code> for each of them.</p>\n\n<p>Unfortunately, in Rust reflective programming is somewhat difficult. There is no standard way, for example, to get a list of all variants of a C-like enum. Almost always you have to abstract the boilerplate with custom-written macros (or finding something on crates.io). Maybe this will change in future if someone would write an RFC and it would get accepted.</p>\n"}, {"comments": [{"owner": {"reputation": 159, "user_id": 6697318, "user_type": "registered", "profile_image": "https://graph.facebook.com/1055566944531970/picture?type=large", "display_name": "Himujjal Upadhyaya", "link": "https://stackoverflow.com/users/6697318/himujjal-upadhyaya"}, "edited": false, "score": 0, "creation_date": 1597255938, "post_id": 50334049, "comment_id": 112076346, "body": "This is the best one I have found. Now, there is another correction that can be done to make macro support both <code>Bar = 0x00</code> and <code>Bar</code> enum types. One with default and other without it. You can change <code>$($variant:ident = $val:expr),*,</code> --&gt; <code>$($variant:ident = $($val:expr)?),*,</code> and <code>$($variant = $val),*</code> --&gt; <code>$($variant:ident = $val:expr),*,</code>. Now it is perfect!"}, {"owner": {"reputation": 20384, "user_id": 220060, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/56533d50fdfceb887852bf50be54678b?s=128&d=identicon&r=PG", "display_name": "nalply", "link": "https://stackoverflow.com/users/220060/nalply"}, "edited": false, "score": 0, "creation_date": 1603706863, "post_id": 50334049, "comment_id": 114110838, "body": "Perhaps you even can use a <code>const fn</code> for <code>fn name()</code>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 20384, "user_id": 220060, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/56533d50fdfceb887852bf50be54678b?s=128&d=identicon&r=PG", "display_name": "nalply", "link": "https://stackoverflow.com/users/220060/nalply"}, "edited": false, "score": 0, "creation_date": 1603724124, "post_id": 50334049, "comment_id": 114119152, "body": "@nalply yes, that should be possible in modern Rust versions."}, {"owner": {"reputation": 441, "user_id": 12427268, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/97125ef4ec657652735661123965f853?s=128&d=identicon&r=PG&f=1", "display_name": "ANimator120", "link": "https://stackoverflow.com/users/12427268/animator120"}, "edited": false, "score": 0, "creation_date": 1618607135, "post_id": 50334049, "comment_id": 118662651, "body": "With the firs solution, what if you wanted to use <code>#[derive(Debug, Clone)]</code> on <code>enum Foo</code>?  <code>enum_str!{#[derive(Debug, Clone)] enum Foo{Bar}}</code> causes  <code>no rules expected this token in macro call</code>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 441, "user_id": 12427268, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/97125ef4ec657652735661123965f853?s=128&d=identicon&r=PG&f=1", "display_name": "ANimator120", "link": "https://stackoverflow.com/users/12427268/animator120"}, "edited": false, "score": 0, "creation_date": 1619113093, "post_id": 50334049, "comment_id": 118813131, "body": "@ANimator120 you&#39;d follow the steps outlined in <a href=\"https://stackoverflow.com/a/33999625/155423\">Generating documentation in macros</a>, which demonstrates how to handle the <code>meta</code> from the <code>derive</code>."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 27, "last_activity_date": 1529811990, "last_edit_date": 1529811990, "creation_date": 1526311892, "answer_id": 50334049, "question_id": 32710187, "link": "https://stackoverflow.com/questions/32710187/how-do-i-get-an-enum-as-a-string/50334049#50334049", "title": "How do I get an enum as a string?", "body": "<p>Since the names of enum variants are fixed, you don't need to allocate a <code>String</code>, a <code>&amp;'static str</code> will suffice. A macro can remove the boilerplate:</p>\n\n<pre><code>macro_rules! enum_str {\n    (enum $name:ident {\n        $($variant:ident = $val:expr),*,\n    }) =&gt; {\n        enum $name {\n            $($variant = $val),*\n        }\n\n        impl $name {\n            fn name(&amp;self) -&gt; &amp;'static str {\n                match self {\n                    $($name::$variant =&gt; stringify!($variant)),*\n                }\n            }\n        }\n    };\n}\n\nenum_str! {\n    enum Foo {\n        Bar = 0x00,\n        Baz = 0x01,\n        Qux = 0x02,\n        //...\n        Quux = 0xFF,\n    }\n}\n\nfn main() {\n    assert_eq!(Foo::Baz.name(), \"Baz\");\n}\n</code></pre>\n\n<p>Even better, you can derive these with a crate like <a href=\"https://crates.io/crates/strum_macros\" rel=\"noreferrer\">strum_macros</a>.</p>\n\n<p>In strum 0.10, you can use <code>AsStaticRef</code> / <code>AsStaticStr</code> to do the exact same code:</p>\n\n<pre><code>extern crate strum; // 0.10.0\n#[macro_use]\nextern crate strum_macros; // 0.10.0\n\nuse strum::AsStaticRef;\n\n#[derive(AsStaticStr)]\nenum Foo {\n    Bar = 0x00,\n    Baz = 0x01,\n    Qux = 0x02,\n    //...\n    Quux = 0xFF,\n}\n\nfn main() {\n    assert_eq!(Foo::Baz.as_static(), \"Baz\");\n}\n</code></pre>\n\n<p>In strum 0.9, the string slice's lifetime is <a href=\"https://github.com/Peternator7/strum/issues/23\" rel=\"noreferrer\">not <code>'static</code> in this case</a>:</p>\n\n<pre><code>#[macro_use]\nextern crate strum_macros; // 0.9.0\n\n#[derive(AsRefStr)]\nenum Foo {\n    Bar = 0x00,\n    Baz = 0x01,\n    Qux = 0x02,\n    //...\n    Quux = 0xFF,\n}\n\nfn main() {\n    assert_eq!(Foo::Baz.as_ref(), \"Baz\");\n}\n</code></pre>\n"}], "owner": {"reputation": 4446, "user_id": 696485, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/4de94e14f977802057b0109d079d95a1?s=128&d=identicon&r=PG", "display_name": "Iskar Jarak", "link": "https://stackoverflow.com/users/696485/iskar-jarak"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 32040, "favorite_count": 4, "accepted_answer_id": 32712140, "answer_count": 2, "score": 51, "last_activity_date": 1583779022, "creation_date": 1442904538, "last_edit_date": 1583779022, "question_id": 32710187, "link": "https://stackoverflow.com/questions/32710187/how-do-i-get-an-enum-as-a-string", "title": "How do I get an enum as a string?", "body": "<p>I have an enum with many values and I'd like to write the name of one of its values to a stream:</p>\n\n<pre><code>enum Foo {\n    Bar = 0x00,\n    Baz = 0x01,\n    Qux = 0x02,\n    // ...\n    Quux = 0xFF,\n}\n</code></pre>\n\n<p>I can derive <code>Debug</code> and do</p>\n\n<pre><code>writer.write(format!(\"I am {:?}\", Foo::Quux).as_bytes())\n</code></pre>\n\n<p>which will output e.g. <code>I am Quux</code>. That's fine, except that</p>\n\n<ul>\n<li>I want to do this for user-facing output, so <code>Debug</code> isn't appropriate</li>\n<li>It would be very helpful to get the enum as a string (rather than writing directly to a stream), because then I can incorporate its length into some wonky formatting calculations I want to do.</li>\n</ul>\n"}, {"tags": ["string", "count", "char", "rust", "monads"], "comments": [{"owner": {"reputation": 41, "user_id": 5360495, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/21813ae28876e9f61ca11b5f6f90021e?s=128&d=identicon&r=PG&f=1", "display_name": "\u0410\u043d\u0434\u0440\u0435\u0439", "link": "https://stackoverflow.com/users/5360495/%d0%90%d0%bd%d0%b4%d1%80%d0%b5%d0%b9"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1442864559, "post_id": 32702386, "comment_id": 53249947, "body": "Identical sequential characters - this. Now I try to implement through a <code>filter_map()</code> using an external variable to store the previous character. The method can not be called elegant."}], "answers": [{"tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": false, "score": 4, "last_activity_date": 1442927935, "creation_date": 1442927935, "answer_id": 32717990, "question_id": 32702386, "link": "https://stackoverflow.com/questions/32702386/iterator-adapter-that-counts-repeated-characters/32717990#32717990", "title": "Iterator adapter that counts repeated characters", "body": "<p>Using <a href=\"https://crates.io/crates/itertools\" rel=\"nofollow\">itertools'</a> <a href=\"https://bluss.github.io/rust-itertools/doc/itertools/trait.Itertools.html#method.coalesce\" rel=\"nofollow\"><code>.coalesce()</code></a> you can do it like this:</p>\n\n<pre><code>// Map each char to an initial count of 1, then merge counts for identical chars\n.map(|c| (c, 1)).coalesce(|(c, n), (d, m)|\n    if c == d { Ok((c, n + m)) } else { Err(((c, n), (d, m))) })\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1442928845, "post_id": 32718099, "comment_id": 53278978, "body": "@ArtemGr aren&#39;t you just implementing <code>Peekable</code> yourself there? Is there a benefit to doing that?"}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 1, "creation_date": 1442929281, "post_id": 32718099, "comment_id": 53279336, "body": "With inlining the difference should be neglible. Without inlining the non-Peekable version might be faster. There might be educational value to see the different implementations of the same thing."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1442944605, "last_edit_date": 1442944605, "creation_date": 1442928237, "answer_id": 32718099, "question_id": 32702386, "link": "https://stackoverflow.com/questions/32702386/iterator-adapter-that-counts-repeated-characters/32718099#32718099", "title": "Iterator adapter that counts repeated characters", "body": "<p>Using only the standard library:</p>\n\n<pre><code>use std::iter::Peekable;\n\nstruct SequentialCount&lt;I&gt;\n    where I: Iterator\n{\n    iter: Peekable&lt;I&gt;,\n}\n\nimpl&lt;I&gt; SequentialCount&lt;I&gt;\n    where I: Iterator\n{\n    fn new(iter: I) -&gt; Self {\n        SequentialCount { iter: iter.peekable() }\n    }\n}\n\nimpl&lt;I&gt; Iterator for SequentialCount&lt;I&gt;\n    where I: Iterator,\n          I::Item: Eq\n{\n    type Item = (I::Item, usize);\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        // Check the next value in the inner iterator\n        match self.iter.next() {\n            // There is a value, so keep it\n            Some(head) =&gt; {\n                // We've seen one value so far\n                let mut count = 1;\n                // Check to see what the next value is without\n                // actually advancing the inner iterator\n                while self.iter.peek() == Some(&amp;head) {\n                    // It's the same value, so go ahead and consume it\n                    self.iter.next();\n                    count += 1;\n                }\n                // The next element doesn't match the current value \n                // complete this iteration \n                Some((head, count))\n            }\n            // The inner iterator is complete, so we are also complete\n            None =&gt; None,\n        }\n    }\n}\n\nfn main() {\n    let s = \"aaaabbbccccc\";\n\n    for (char, count) in SequentialCount::new(s.chars()) {\n        println!(\"{} occurs {} times\", char, count)\n    }\n}\n</code></pre>\n\n<p>Of course, you could do the usual work to create an <em>extension trait</em> to add a method on the iterator:</p>\n\n<pre><code>trait SequentialCountAdapter: Iterator {\n    fn sequential_count(self) -&gt; SequentialCount&lt;Self&gt;\n        where Self: Sized\n    {\n        SequentialCount::new(self)\n    }\n}\n\nimpl&lt;I&gt; SequentialCountAdapter for I where I: Iterator {}\n</code></pre>\n"}], "owner": {"reputation": 41, "user_id": 5360495, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/21813ae28876e9f61ca11b5f6f90021e?s=128&d=identicon&r=PG&f=1", "display_name": "\u0410\u043d\u0434\u0440\u0435\u0439", "link": "https://stackoverflow.com/users/5360495/%d0%90%d0%bd%d0%b4%d1%80%d0%b5%d0%b9"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1696, "favorite_count": 0, "answer_count": 2, "score": 1, "last_activity_date": 1442944605, "creation_date": 1442860838, "last_edit_date": 1442882651, "question_id": 32702386, "link": "https://stackoverflow.com/questions/32702386/iterator-adapter-that-counts-repeated-characters", "title": "Iterator adapter that counts repeated characters", "body": "<p>I have a string like \"aaaabbbccccc\". I would like to create an adapter over a string's <code>chars</code> iterator that yields the counts of identical characters. The output (<code>count</code>) needs to be the number of consecutive identical characters. For instance:</p>\n\n<pre><code>let s = \"aaaabbbccccc\"\nfor count in s.chars().MAGIC() {\n    println!(\"{}\", count)\n}\n// prints: 4, 3, 5\n</code></pre>\n\n<p>Update: This almost works: the past does not consider the letter:</p>\n\n<pre><code>let s = \"aaaabbbcccccdd\".to_string();\nlet mut tt = (s.chars().nth(0).unwrap(), 0);\nfor a in s.chars().filter_map(|x| {\n    if x != tt.0 {\n        tt.0 = x;\n        let tt_temp = tt.1;\n        tt.1 = 1;\n        Some(tt_temp)\n    } else {\n        tt.1 += 1;\n        None\n    }\n}) {\n    println!(\"{:?}\", a);\n}\n</code></pre>\n"}, {"tags": ["floating-point", "rust"], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1442847453, "post_id": 32698345, "comment_id": 53239866, "body": "Why does not the OP&#39;s code compile then? (<a href=\"https://play.rust-lang.org/?gist=10e4887dbc2efe616cd1&amp;version=stable\" rel=\"nofollow noreferrer\">here</a>)"}, {"owner": {"reputation": 1882, "user_id": 1844448, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/78441d7566dfc449add0a5be58c98ef9?s=128&d=identicon&r=PG", "display_name": "Holger", "link": "https://stackoverflow.com/users/1844448/holger"}, "edited": false, "score": 0, "creation_date": 1442847795, "post_id": 32698345, "comment_id": 53240110, "body": "If floating point literals will default to <code>f64</code>, in above code the <code>abs</code> function for <code>f64</code> should be used. But the type is not specified as the <code>_</code> in the error message suggests."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1442847823, "post_id": 32698345, "comment_id": 53240127, "body": "@MatthieuM. good question. I&#39;m not 100% sure, but my guess is that the order of operations doesn&#39;t allow it. I&#39;ve edited to put my current guess."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1442848318, "post_id": 32698345, "comment_id": 53240466, "body": "@Shepmaster: well, without specifications it&#39;s hard to tell then, but it the compiler is not performing the fallback early enough, it sounds like a bug to me..."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 4, "last_activity_date": 1442847792, "last_edit_date": 1442847792, "creation_date": 1442847189, "answer_id": 32698345, "question_id": 32697884, "link": "https://stackoverflow.com/questions/32697884/whats-the-default-floating-point-type/32698345#32698345", "title": "What&#39;s the default floating point type?", "body": "<p><a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0212-restore-int-fallback.md\" rel=\"nofollow\">RFC 212</a> says:</p>\n\n<blockquote>\n  <p>Integer literals whose type is unconstrained will default to <code>i32</code> [...] Floating point literals will default to <code>f64</code>.</p>\n</blockquote>\n\n<p>However, in most cases something is going to restrict the inferred type to a concrete type, such as by passing it to a method or putting it in a struct.</p>\n\n<blockquote>\n  <p>Does it mean that the type is not defined at compile time?</p>\n</blockquote>\n\n<p>The type will <em>always</em> be defined before code is actually written out. However, the concrete type of an integer or floating-point literal hovers in a quantum superposition of types until something forces it one way or the other. If nothing forces it, then it would fall back to the default.</p>\n\n<p>That's what ultimately allows code like this to work:</p>\n\n<pre><code>use std::{f32, f64};\n\nfn main() {\n    let a = -1.0;\n    let b = -1.0;\n\n    println!(\"{:?}\", f32::abs(a));\n    println!(\"{:?}\", f64::abs(b));\n}\n</code></pre>\n\n<p>It might be expected that if the variable is either a <code>f32</code> or an <code>f64</code>, then go ahead and pick one. I don't know the compiler internals to be able to answer concretely, but it appears that the default type fallback comes into play too late to save your code. When method lookup is occurring, it wants to know the type of the variable to find valid matches, but it's not available yet. </p>\n"}], "owner": {"reputation": 1882, "user_id": 1844448, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/78441d7566dfc449add0a5be58c98ef9?s=128&d=identicon&r=PG", "display_name": "Holger", "link": "https://stackoverflow.com/users/1844448/holger"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1103, "favorite_count": 1, "answer_count": 1, "score": 3, "last_activity_date": 1442847792, "creation_date": 1442845954, "last_edit_date": 1442846842, "question_id": 32697884, "link": "https://stackoverflow.com/questions/32697884/whats-the-default-floating-point-type", "title": "What&#39;s the default floating point type?", "body": "<p>If the floating point type is specified on variable <code>a</code>, the <code>abs</code> function can be used. The following example is running:</p>\n\n<pre><code>fn main() {\n    let a = -1.0f64;\n    println!(\"{:?}\", a.abs());\n}\n</code></pre>\n\n<p>It prints <code>1</code> as expected. But if the <code>f64</code> is omitted an error is thrown during compilation as in following example:</p>\n\n<pre><code>fn main() {\n    let a = -1.0;\n    println!(\"{:?}\", a.abs());\n}\n</code></pre>\n\n<p>This version gives following failure:</p>\n\n<pre><code>   Compiling playground v0.1.0 (file:///C:/git/Rust/playground)\nsrc\\main.rs:3:24: 3:29 error: no method named `abs` found for type `_` in the current scope\nsrc\\main.rs:3     println!(\"{:?}\", a.abs());\n                                     ^~~~~\nnote: in expansion of format_args!\n&lt;std macros&gt;:2:25: 2:56 note: expansion site\n&lt;std macros&gt;:1:1: 2:62 note: in expansion of print!\n&lt;std macros&gt;:3:1: 3:54 note: expansion site\n&lt;std macros&gt;:1:1: 3:58 note: in expansion of println!\nsrc\\main.rs:3:5: 3:31 note: expansion site\nsrc\\main.rs:3:24: 3:29 help: items from traits can only be used if the trait is in scope; the following trait is implemented but not in scope, perhaps add a `use` for it:\nsrc\\main.rs:3:24: 3:29 help: candidate #1: use `core::num::Float`\nerror: aborting due to previous error\nCould not compile `playground`.\n\nTo learn more, run the command again with --verbose.\n</code></pre>\n\n<p>This message says the type of <code>a</code> is <code>_</code>. I guess the <code>abs</code> function cannot be used, because it is not clear, what the specific type of <code>a</code> is. Does it mean that the type is not defined at compile time? What is the type used, if no specific float type is declared in Rust?</p>\n"}, {"tags": ["arrays", "vector", "rust", "monads", "slice"], "comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1442839639, "post_id": 32690678, "comment_id": 53234272, "body": "I&#39;d always prefer slicing over <code>skip</code>, even if with the specialization of skip (via nth). Profiling will tell you the answer."}], "answers": [{"comments": [{"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "edited": false, "score": 1, "creation_date": 1443207609, "post_id": 32697231, "comment_id": 53416640, "body": "FWIW, <code>cargo bench</code> results with opt-level 3 for the second one (with k=371_223 and 10mil items):   bench_skip  ... bench:  67,159,746 ns/iter (+/- 4,175,973)  bench_slice ... bench:  67,355,711 ns/iter (+/- 3,690,489)  Source file for reference  <a href=\"https://gist.github.com/Jragonmiris/e52173ba5b0e8c9c3c69\" rel=\"nofollow noreferrer\">gist.github.com/Jragonmiris/e52173ba5b0e8c9c3c69</a>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1442844101, "creation_date": 1442844101, "answer_id": 32697231, "question_id": 32690678, "link": "https://stackoverflow.com/questions/32690678/is-it-more-efficient-to-slice-an-array-or-use-iteratorskip/32697231#32697231", "title": "Is it more efficient to slice an array or use Iterator::skip?", "body": "<p>Let's use this code as an example. It's similar to your example, but a bit simpler:</p>\n\n<pre><code>fn main() {\n    let items = [\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\"];\n    let k = 3;\n\n    let one = items.iter().enumerate().skip(k).map(|(i, v)| (v.len(), i));\n    let two = items[k..].iter().enumerate().map(|(i, v)| (v.len(), i + k));\n\n    // Sanity check that the results are the same\n    let items1: Vec&lt;_&gt; = one.collect();\n    let items2: Vec&lt;_&gt; = two.collect();\n\n    println!(\"{}\", items1 == items2);\n}\n</code></pre>\n\n<p>Which will be more performant is a tricky topic. Rust and LLVM have good optimizations that can make code quite fast.</p>\n\n<p>Based purely on my <em>gut feeling</em>, I would probably use the first one if I knew that I was going to skip just \"a few\" of the items, and the second one if I didn't know how many or if it were a lot.</p>\n\n<p>In the first case, you conceptually have to iterate through all of the items that you want to skip over. It is possible that the optimizer could reduce this down, but it's complicated by the interaction with <code>enumerate</code> and <code>map</code>, so I wouldn't count on it without inspecting assembly.</p>\n\n<p>The second one (<code>items[k..]</code>) uses subslicing, which will be an O(1) operation as it's simply going to index into a chunk of memory. Then you do addition which will also be simple.</p>\n\n<p>However, the only true test is to do some profiling. We will create a large input array and start part way:</p>\n\n<pre><code>fn main() {\n    let items = [\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\"];\n    let items: Vec&lt;_&gt; = items.iter().cycle().take(10_000_000).collect();\n\n    let k = 371_223;\n\n    // let one = items.iter().enumerate().skip(k).map(|(i, v)| (v.len(), i));\n    let two = items[k..].iter().enumerate().map(|(i, v)| (v.len(), i + k));\n\n    // let items1: Vec&lt;_&gt; = one.collect();\n    let items2: Vec&lt;_&gt; = two.collect();\n\n    // println!(\"{}\", items1.len());\n    println!(\"{}\", items2.len());\n}\n</code></pre>\n\n<p>Running that code, compiled with optimizations, has the following times averaged over 10 runs:</p>\n\n<ol>\n<li>153.6ms</li>\n<li>160.1ms</li>\n</ol>\n\n<p>So, contrary to what my <em>gut feeling</em> said, the first version is faster. It's entirely possible that my benchmarking is incorrect, but that's why you should do benchmarking on your real code.</p>\n\n<p>Also, note that this is <em>really fast</em> either way. That's about 15 or 16 <strong>nanoseconds</strong> per item. What's one nanosecond among friends?</p>\n"}], "owner": {"reputation": 33, "user_id": 5358336, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fbae1e6aa25cbf7ecb3e9d72937c0102?s=128&d=identicon&r=PG", "display_name": "\u0418\u0432\u0430\u043d", "link": "https://stackoverflow.com/users/5358336/%d0%98%d0%b2%d0%b0%d0%bd"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 836, "favorite_count": 0, "accepted_answer_id": 32697231, "answer_count": 1, "score": 3, "last_activity_date": 1442883705, "creation_date": 1442824454, "last_edit_date": 1442883705, "question_id": 32690678, "link": "https://stackoverflow.com/questions/32690678/is-it-more-efficient-to-slice-an-array-or-use-iteratorskip", "title": "Is it more efficient to slice an array or use Iterator::skip?", "body": "<p>I want to call a function for each element in a slice <code>[0+k .. n]</code>, where <code>k</code> is an offset and <code>n</code> is the number of elements in the vector. Importantly, I want the index of the element from the original slice.</p>\n\n<p>I have found two ways of doing this:</p>\n\n<ol>\n<li><p>Use <code>enumerate</code> and <code>skip</code> the beginning items</p>\n\n<pre><code>vec.iter().enumerate().skip(k).map(|(i, v)| (f(v), i)).min()\n</code></pre></li>\n<li><p>Take a subslice and add the offset to the index from `enumerate</p>\n\n<pre><code>vec[k..].iter().enumerate().map(|(i, v)| (f(v), i + k)).min()\n</code></pre></li>\n</ol>\n\n<p>In both cases, <code>vec</code> is a vector of strings, and <code>f</code> returns a specific character in the string (<code>v.chars().nth(offset)</code>). Which of these solutions is most efficient?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 2, "creation_date": 1442811380, "post_id": 32687593, "comment_id": 53219478, "body": "It might be worth noting that there&#39;s no &quot;<code>FromStr</code> object&quot; at all.  There is merely a value of some type which <i>implements</i> <code>FromStr</code> (though what that type is, the compiler can&#39;t know)."}], "tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": false, "score": 2, "last_activity_date": 1442811132, "creation_date": 1442811132, "answer_id": 32687593, "question_id": 32687388, "link": "https://stackoverflow.com/questions/32687388/what-can-be-done-with-rusts-generic-fromstr-object/32687593#32687593", "title": "What can be done with Rust&#39;s generic FromStr object?", "body": "<p>It's just not clear what m is here, as there isn't enough information to say. Is it an i32? A u64? Nobody, including Rust, can know.</p>\n\n<p>You need to do something to help figure out what type it is. Either pass it to a function expecting a specific type, or annotate it such that it can be determined what type it should be.</p>\n"}, {"comments": [{"owner": {"reputation": 14050, "user_id": 1858225, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/8afcf8a38024eb5b17c0b0b58ff96d79?s=128&d=identicon&r=PG", "display_name": "Kyle Strand", "link": "https://stackoverflow.com/users/1858225/kyle-strand"}, "edited": false, "score": 0, "creation_date": 1442850256, "post_id": 32690672, "comment_id": 53241706, "body": "That makes sense, though I&#39;m still not quite clear on why the error occurs where it does, and what the full range of possibilities for annotating types is. For instance, I get what looks like a parse error (<code>expected one of...</code>) when I try to annotate the type within the <code>match</code> expression using <code>Ok(m: i32)</code>. All of your examples show modifications  to the statement <i>in which the parse occurs</i>, which doesn&#39;t demonstrate that &quot;the compiler considers the full function at once when inferring types.&quot;"}, {"owner": {"reputation": 14050, "user_id": 1858225, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/8afcf8a38024eb5b17c0b0b58ff96d79?s=128&d=identicon&r=PG", "display_name": "Kyle Strand", "link": "https://stackoverflow.com/users/1858225/kyle-strand"}, "edited": false, "score": 0, "creation_date": 1442850430, "post_id": 32690672, "comment_id": 53241825, "body": "Additionally, if I comment everything out <i>except</i> the <code>parse</code> line, I <i>do</i> get an error indicating that the parse itself must have some kind of type-specification: <code>type annotations required: cannot resolve &#39;&lt;_ as core::str::FromStr&gt;::Err == _&#39;</code> ... so why doesn&#39;t this error show up in the original code?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 14050, "user_id": 1858225, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/8afcf8a38024eb5b17c0b0b58ff96d79?s=128&d=identicon&r=PG", "display_name": "Kyle Strand", "link": "https://stackoverflow.com/users/1858225/kyle-strand"}, "edited": false, "score": 0, "creation_date": 1442853213, "post_id": 32690672, "comment_id": 53243534, "body": "@KyleStrand: I added a 4th example letting inference shine. Note how the type is no longer specified in the <code>parse</code> statement, but instead (1) the fact that <code>m</code> is <code>i32</code> is deduced from it being used in <code>callit(m)</code> where <code>callit</code> is <code>fn(i32) -&gt; ()</code>, (2) as a result the type of <code>foo</code> is deduced to be <code>Result&lt;i32, &lt;i32 as FromStr&gt;::Err&gt;</code> and (3) as a result the type of <code>e</code> is deduced to be <code>&lt;i32 as FromStr&gt;::Err&gt;</code> otherwise known as <code>std::num::ParseIntError</code>. As for getting the error in the <code>parse</code> statement if it&#39;s the only thing you have... well, the error will always appear in code you write."}, {"owner": {"reputation": 14050, "user_id": 1858225, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/8afcf8a38024eb5b17c0b0b58ff96d79?s=128&d=identicon&r=PG", "display_name": "Kyle Strand", "link": "https://stackoverflow.com/users/1858225/kyle-strand"}, "edited": false, "score": 0, "creation_date": 1442854365, "post_id": 32690672, "comment_id": 53244129, "body": "The new example helps. Is it possible to do the annotation explicitly at the point of usage without a function call, though? Also, I&#39;m not confused about why I <i>do</i> get an error when the only line is the parse statement, I&#39;m confused about why I <i>don&#39;t</i> get the same error in the original code, in addition to the error for the line where the &quot;Ok&quot; case is actually used."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 14050, "user_id": 1858225, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/8afcf8a38024eb5b17c0b0b58ff96d79?s=128&d=identicon&r=PG", "display_name": "Kyle Strand", "link": "https://stackoverflow.com/users/1858225/kyle-strand"}, "edited": false, "score": 0, "creation_date": 1442903101, "post_id": 32690672, "comment_id": 53262319, "body": "@KyleStrand: <i>Is it possible to do the annotation explicitly at the point of usage without a function call, though?</i> =&gt; I only know of &quot;rebinding&quot; (ie <code>let foo: i32 = foo;</code>) which cannot be used within an expression. As for the placement of errors... I don&#39;t know whether it&#39;s taste or fate. Taste: the type is only necessary from this point on, so it&#39;s flagged here; Fate: it just so happens to be the point where the error is detected, and nobody spent any particular effort to move it elsewhere (maybe because like me they find it clear enough)."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 9, "last_activity_date": 1442852931, "last_edit_date": 1442852931, "creation_date": 1442824433, "answer_id": 32690672, "question_id": 32687388, "link": "https://stackoverflow.com/questions/32687388/what-can-be-done-with-rusts-generic-fromstr-object/32690672#32690672", "title": "What can be done with Rust&#39;s generic FromStr object?", "body": "<blockquote>\n  <p>Rust's <code>str</code> class has a <code>parse</code> method that returns a <code>FromStr</code> object.</p>\n</blockquote>\n\n<p>Stop right here, this is your error.</p>\n\n<p><code>parse</code> does not return a <code>FromStr</code> object; <code>FromStr</code> is a <code>trait</code> which can be thought of as an <strong>abstract class</strong> if you come from an OO background, and you cannot return an object with an abstract type: it's abstract!</p>\n\n<p>What <code>parse</code> does return, thus, is an instance of some type <code>T</code> which must implement the <code>FromStr</code> interface.</p>\n\n<blockquote>\n  <p>But failing to specify the type does not seem to be an error in itself. Instead, I get an error when trying to print the resulting (generic/unspecified) <code>FromStr</code> object</p>\n</blockquote>\n\n<p>Because there cannot be such generic/unspecific <code>FromStr</code> object. A concrete type must be inferred (from context) or explicitly spelled out, and this type must implement <code>FromStr</code>.</p>\n\n<blockquote>\n  <p>So what is <code>m</code> here?</p>\n</blockquote>\n\n<p>Only you know what it should be, the compiler does not, and thus complain that it does not know what to do :)</p>\n\n<blockquote>\n  <p>Or is the \"unable to infer enough type information\" error actually due to the fact that parse in fact can't be called without a type specifier, and the compiler just doesn't catch the error until the first line where the resulting <code>Ok</code> type is actually used?</p>\n</blockquote>\n\n<p>Basically.</p>\n\n<p>Except that it's not so much that the compiler doesn't catch the error until the first line where the resulting <code>Ok</code> is used, and more that the compiler considers the full function at once when inferring types. From the point of view of the compiler, whether the actual clue to infer the type comes immediately or comes 50 lines down does not matter, it only needs to be present in the current function body.</p>\n\n<p>It might lead to the complaint about the lack of type originating in an odd place from the developer point of view; this is one of the downfalls of type inference. On the other hand, the compiler just cannot know where YOU would prefer to put the annotation. There are after all many possibilities:</p>\n\n<pre><code>// Example 1: immediately specifying the type\nfn main() {\n    let foo = \"3\".parse::&lt;i32&gt;();\n    match foo\n    {\n        Ok(m) =&gt; println!(\"foo: {}\", m),\n        Err(e) =&gt; println!(\"error! {}\", e)\n    }\n}\n\n// Example 2: partially specifying the result type\n// Note: the \"_\" is deduced to be std::num::ParseIntError because\n//       this is how `FromStr::Err` is defined for `i32`.\nfn main() {\n    let foo: Result&lt;i32, _&gt; = \"3\".parse();\n    match foo\n    {\n        Ok(m) =&gt; println!(\"foo: {}\", m),\n        Err(e) =&gt; println!(\"error! {}\", e)\n    }\n}\n\n// Example 3: specifying the result type of unwrapping\nfn doit() -&gt; Result&lt;(), std::num::ParseIntError&gt; {\n    let foo: i32 = try!(\"3\".parse());\n    println!(\"foo: {}\", foo);\n    Ok(())\n}\n\nfn main() {\n    match doit()\n    {\n        Ok(_) =&gt; (),\n        Err(e) =&gt; println!(\"error! {}\", e)\n    }\n}\n\n// Example 4: letting the type be inferred from a function call\nfn callit(f: i32) {\n    println!(\"f: {}\", f);\n}\n\nfn main() {\n    let foo = \"3\".parse();\n    match foo\n    {\n        Ok(m) =&gt; callit(m),\n        Err(e) =&gt; println!(\"error! {}\", e)\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 14050, "user_id": 1858225, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/8afcf8a38024eb5b17c0b0b58ff96d79?s=128&d=identicon&r=PG", "display_name": "Kyle Strand", "link": "https://stackoverflow.com/users/1858225/kyle-strand"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 607, "favorite_count": 0, "accepted_answer_id": 32690672, "answer_count": 2, "score": 1, "last_activity_date": 1442852931, "creation_date": 1442809860, "question_id": 32687388, "link": "https://stackoverflow.com/questions/32687388/what-can-be-done-with-rusts-generic-fromstr-object", "title": "What can be done with Rust&#39;s generic FromStr object?", "body": "<p>Rust's <code>str</code> class has a <code>parse</code> method that returns a <code>FromStr</code> object. <code>parse</code> is templated, and so the type that's being parsed from the <code>str</code> can be manually specified, e.g. <code>\"3\".parse::&lt;i32&gt;()</code> evaluates to (a <code>Result</code> object containing) the 32-bit int <code>3</code>.</p>\n\n<p>But failing to specify the type does not seem to be an error in itself. Instead, I get an error when trying to print the resulting (generic/unspecified) <code>FromStr</code> object:</p>\n\n<pre><code>let foo = \"3\".parse();\nmatch foo\n{\n    Ok(m) =&gt; println!(\"foo: {}\", m),\n    Err(e) =&gt; println!(\"error! {}\", e)\n}\n</code></pre>\n\n<p>This does <strong>not</strong> give an error on the first line; instead, I get the following error:</p>\n\n<pre><code>&lt;anon&gt;:24:12: 24:13 error: unable to infer enough type information about `_`; type annotations or generic parameter binding required [E0282]\n&lt;anon&gt;:24         Ok(m) =&gt; println!(\"foo: {}\", m),\n</code></pre>\n\n<p>(Here, line 24 is the line with the <code>Ok(m)</code>.)</p>\n\n<p>So what is <code>m</code> here? Or is the \"unable to infer enough type information\" error actually due to the fact that <code>parse</code> in fact <em>can't</em> be called without a type specifier, and the compiler just doesn't catch the error until the first line where the resulting <code>Ok</code> type is actually used?</p>\n"}, {"tags": ["rust", "iron"], "comments": [{"owner": {"reputation": 131, "user_id": 3419031, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0960f7469cfa39c201b7acdfa9c8bb02?s=128&d=identicon&r=PG&f=1", "display_name": "stubiklaus", "link": "https://stackoverflow.com/users/3419031/stubiklaus"}, "edited": false, "score": 2, "creation_date": 1442814723, "post_id": 32685853, "comment_id": 53220472, "body": "I was in a Situation where i needed a static module variable that comes out of functions (glium display). My idea was to have a Outer Module with a Controlling Struct, that contains this data. The problem is somehow different, but you could still think about this idea though."}], "answers": [{"comments": [{"owner": {"reputation": 13635, "user_id": 547365, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/ddefbca930fdd39846b698bab7ac3146?s=128&d=identicon&r=PG", "display_name": "w.brian", "link": "https://stackoverflow.com/users/547365/w-brian"}, "edited": false, "score": 0, "creation_date": 1442804216, "post_id": 32686523, "comment_id": 53217798, "body": "So my example was a bit simplified and I couldn&#39;t  get away with an atomic variable in reality. The actual strict I&#39;m using represents an emulated 6502."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 13635, "user_id": 547365, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/ddefbca930fdd39846b698bab7ac3146?s=128&d=identicon&r=PG", "display_name": "w.brian", "link": "https://stackoverflow.com/users/547365/w-brian"}, "edited": false, "score": 2, "creation_date": 1442804422, "post_id": 32686523, "comment_id": 53217837, "body": "@w.brian Then a <a href=\"http://doc.rust-lang.org/std/sync/struct.Mutex.html\" rel=\"nofollow noreferrer\"><code>Mutex</code></a> or a <a href=\"http://doc.rust-lang.org/std/sync/struct.RwLock.html\" rel=\"nofollow noreferrer\"><code>RwLock</code></a> plus an <a href=\"http://doc.rust-lang.org/std/sync/struct.Arc.html\" rel=\"nofollow noreferrer\"><code>Arc</code></a>? Or maybe a <a href=\"http://doc.rust-lang.org/std/sync/mpsc/fn.channel.html\" rel=\"nofollow noreferrer\"><code>channel</code></a>? Two out of the three of those are documented in the book chapter I linked."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 5, "last_activity_date": 1442802805, "creation_date": 1442802805, "answer_id": 32686523, "question_id": 32685853, "link": "https://stackoverflow.com/questions/32685853/what-is-the-idiomatic-alternative-to-static-mutable-data/32686523#32686523", "title": "What is the idiomatic alternative to static mutable data?", "body": "<p>I'd highly recommend reading the entirety of <a href=\"http://doc.rust-lang.org/stable/book/\" rel=\"noreferrer\"><em>The Rust Programming Language</em></a>, especially the <a href=\"http://doc.rust-lang.org/stable/book/concurrency.html\" rel=\"noreferrer\">chapter on concurrency</a>. The Rust community has put a lot of effort into producing high quality documentation to help people out.</p>\n\n<p>In this case, I'd probably just make the <code>Counter</code> struct an Iron <a href=\"http://ironframework.io/doc/iron/middleware/trait.Handler.html\" rel=\"noreferrer\"><code>Handler</code></a>. Then, I'd use an atomic variable inside the struct to hold the count without requiring mutablity:</p>\n\n<pre><code>extern crate iron;\nextern crate mount;\n\nuse std::sync::atomic::{AtomicUsize, Ordering};\n\nuse iron::{Iron, Request, Response, IronResult};\nuse iron::status;\nuse mount::Mount;\n\nstruct Counter {\n    count: AtomicUsize,\n}\n\nimpl Counter {\n    pub fn new() -&gt; Counter {\n        Counter {\n            count: AtomicUsize::new(0),\n        }\n    }\n}\n\nfn main() {\n    let mut mount = Mount::new();\n    mount.mount(\"/api/inc\", Counter::new());\n    println!(\"Server running on http://localhost:3000\");\n    Iron::new(mount).http(\"127.0.0.1:3000\").unwrap();\n}\n\nimpl iron::Handler for Counter {\n    fn handle(&amp;self, _: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\n        let old_count = self.count.fetch_add(1, Ordering::SeqCst);\n\n        let resp = format!(\"{}\", old_count);\n\n        Ok(Response::with((status::Ok, resp)))\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 13635, "user_id": 547365, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/ddefbca930fdd39846b698bab7ac3146?s=128&d=identicon&r=PG", "display_name": "w.brian", "link": "https://stackoverflow.com/users/547365/w-brian"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 830, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1442803845, "creation_date": 1442796663, "last_edit_date": 1442803845, "question_id": 32685853, "link": "https://stackoverflow.com/questions/32685853/what-is-the-idiomatic-alternative-to-static-mutable-data", "title": "What is the idiomatic alternative to static mutable data?", "body": "<p>I'm using the Iron framework to create a simple endpoint.  I have stateful, mutable data that the endpoint needs access to. </p>\n\n<p>Here's some code that shows my intention:</p>\n\n<pre><code>extern crate iron;\nextern crate mount;\n\nuse iron::{Iron, Request, Response, IronResult};\nuse iron::status;\nuse mount::Mount;\n\nstatic mut s_counter: Option&lt;Counter&gt; = None;\n\nstruct Counter {\n    pub count: u8\n}\n\nimpl Counter {\n    pub fn new() -&gt; Counter {\n        Counter {\n            count: 0\n        }\n    }\n\n    pub fn inc(&amp;mut self) {\n        self.count += 1;\n    }\n}\n\nfn main() {\n    unsafe { s_counter = Some(Counter::new()); }\n    let mut mount = Mount::new();\n    mount.mount(\"/api/inc\", inc);\n    println!(\"Server running on http://localhost:3000\");\n    Iron::new(mount).http(\"127.0.0.1:3000\").unwrap();\n}\n\nfn inc(req: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\n    let mut counter: Counter;\n    unsafe {\n        counter = match s_counter {\n            Some(counter) =&gt; counter,\n            None =&gt; { panic!(\"counter not initialized\"); }\n        };\n    }\n    counter.inc();\n    let resp = format!(\"{}\", counter.count);\n    Ok(Response::with((status::Ok, resp)))\n}\n</code></pre>\n\n<p>This code doesn't compile:</p>\n\n<pre><code>error: cannot move out of static item\n</code></pre>\n\n<p>I'm hoping that there is nicer way to do this, not involving any unsafe code or <code>static mut</code>.  My question is, what is the idiomatic way to accomplish this?</p>\n"}, {"tags": ["struct", "rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 165, "user_id": 5357246, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-wnQwBKE9aik/AAAAAAAAAAI/AAAAAAAACFY/Y1j8rRDswRM/photo.jpg?sz=128", "display_name": "Ian Andrews", "link": "https://stackoverflow.com/users/5357246/ian-andrews"}, "edited": false, "score": 0, "creation_date": 1442859519, "post_id": 32685903, "comment_id": 53247108, "body": "Somehow I missed that you could forward declare a binding as is done in #3.  I don&#39;t think that I&#39;ve seen any usage of forward declaring in the Rust book or anywhere else.  Thanks!"}], "tags": [], "owner": {"reputation": 1987, "user_id": 5278682, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/34509cba2b4d128dce294dcf5092d300?s=128&d=identicon&r=PG&f=1", "display_name": "Eli Friedman", "link": "https://stackoverflow.com/users/5278682/eli-friedman"}, "is_accepted": true, "score": 4, "last_activity_date": 1442798258, "last_edit_date": 1442798258, "creation_date": 1442797164, "answer_id": 32685903, "question_id": 32685622, "link": "https://stackoverflow.com/questions/32685622/how-do-i-return-a-new-struct-from-optionunwrap-or/32685903#32685903", "title": "How do I return a new struct from Option::unwrap_or?", "body": "<p>For your precise scenario, you can do something like this:</p>\n\n<pre><code>use std::collections::HashMap;\nstruct Sample {\n    thing : i32\n}\n\nfn main() {\n    let map = HashMap::&lt;char, Sample&gt;::new();\n    let temp = Sample { thing : 0 };\n    let sample = map.get(&amp;'a').unwrap_or(&amp;temp);\n}\n</code></pre>\n\n<p>Often, though, you want something more like this:</p>\n\n<pre><code>use std::collections::HashMap;\n#[derive(Clone)]\nstruct Sample {\n    thing : i32\n}\n\nfn get_sample(map: &amp;HashMap&lt;char, Sample&gt;) -&gt; Sample\n{\n    map.get(&amp;'a').cloned().unwrap_or_else(|| {\n        Sample { thing : 0 }\n    })\n}\n</code></pre>\n\n<p>If you really want to conditionally initialize and take the address of a local variable, it's possible, but can't be written using  <code>unwrap_or</code> or  <code>unwrap_or_else</code>:</p>\n\n<pre><code>use std::collections::HashMap;\nstruct Sample {\n    thing : i32\n}\n\nfn main() {\n    let map = HashMap::&lt;char, Sample&gt;::new();\n    let temp;\n    let sample = match map.get(&amp;'a') {\n        Some(sample) =&gt; sample,\n        None =&gt; {\n            temp = Sample { thing : 0 };\n            &amp;temp\n        }\n    };\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1442803595, "last_edit_date": 1495541650, "creation_date": 1442803595, "answer_id": 32686591, "question_id": 32685622, "link": "https://stackoverflow.com/questions/32685622/how-do-i-return-a-new-struct-from-optionunwrap-or/32686591#32686591", "title": "How do I return a new struct from Option::unwrap_or?", "body": "<p>Note that your question shows you have a root misunderstanding:</p>\n\n<blockquote>\n  <p>How do I return a new struct</p>\n</blockquote>\n\n<p>But then your code says this:</p>\n\n<pre><code>&amp;temp\n</code></pre>\n\n<p>That's a <em>reference</em> to a struct. The problem is that your struct only lives for the duration of the block passed as an argument to <code>unwrap_or</code>. As soon as the block is over, any variables that aren't returned from the block are dropped, invalidating any references to them.</p>\n\n<blockquote>\n  <p>Is there a way to make the temp binding live longer?</p>\n</blockquote>\n\n<p>There is one way to make a binding live longer: move where it is in code. If you move the creation of a variable earlier, its lifetime starts earlier. That's why <a href=\"https://stackoverflow.com/a/32685903/155423\">Eli Friedman's first solution</a> works.</p>\n\n<p>If you change your code to return a struct instead of a reference, then that explains how the second solution works, and better matches how you are modeling the problem. You can't always go from a reference to a non-reference cheaply though, and sometimes it's not even possible.</p>\n"}], "owner": {"reputation": 165, "user_id": 5357246, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-wnQwBKE9aik/AAAAAAAAAAI/AAAAAAAACFY/Y1j8rRDswRM/photo.jpg?sz=128", "display_name": "Ian Andrews", "link": "https://stackoverflow.com/users/5357246/ian-andrews"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 660, "favorite_count": 0, "accepted_answer_id": 32685903, "answer_count": 2, "score": 5, "last_activity_date": 1442803595, "creation_date": 1442794280, "last_edit_date": 1442798999, "question_id": 32685622, "link": "https://stackoverflow.com/questions/32685622/how-do-i-return-a-new-struct-from-optionunwrap-or", "title": "How do I return a new struct from Option::unwrap_or?", "body": "<p>I have a HashMap that uses a <code>char</code> for the key and a <code>struct</code> for the value.</p>\n\n<p>The HashMap's <code>get()</code> method will often be called with keys that are not in the HashMap, so I'd like to use <code>unwrap_or()</code> on the returned Option to create a default <code>struct</code> value.  However, when I attempt to do so, the compiler throws the following error (with <code>temp</code> being the default value that I'm attempting to return):</p>\n\n<pre><code>lib.rs:51:4: 51:8 error: `temp` does not live long enough\n</code></pre>\n\n<p>Here is a small reproducer:</p>\n\n<pre><code>struct Sample {\n    thing: i32\n}\n\nfn do_stuff() {\n    let map = HashMap::&lt;char, Sample&gt;::new();\n\n    let sample = map.get(&amp;'a').unwrap_or({\n        let temp = Sample {\n            thing : 0\n        };\n        &amp;temp\n    });\n}\n</code></pre>\n\n<p>I have two questions:</p>\n\n<ol>\n<li>Is there a way to make the <code>temp</code> binding live longer?</li>\n<li>Is there a better way to do fall back to a default <code>struct</code> when using an Option?</li>\n</ol>\n"}, {"tags": ["reference", "rust", "lifetime"], "answers": [{"tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": false, "score": 21, "last_activity_date": 1442775909, "creation_date": 1442775909, "answer_id": 32683137, "question_id": 32682876, "link": "https://stackoverflow.com/questions/32682876/is-there-any-way-to-return-a-reference-to-a-variable-created-in-a-function/32683137#32683137", "title": "Is there any way to return a reference to a variable created in a function?", "body": "<blockquote>\n  <p>Is there any way to return a reference from a function without arguments?</p>\n</blockquote>\n\n<p>No (except references to static values, but those aren't helpful here).</p>\n\n<p>However, you might want to look at <a href=\"http://doc.rust-lang.org/std/fs/struct.OpenOptions.html#method.create\"><code>OpenOptions::create</code></a>. If you change your first line in <code>main</code> to</p>\n\n<pre><code>let  f = OpenOptions::new().write(true).create(true).open(b\"foo.txt\");\n</code></pre>\n\n<p>the file will be created if it does not yet exist, which should solve your original problem.</p>\n"}, {"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 5, "creation_date": 1442823359, "post_id": 32683309, "comment_id": 53224301, "body": "Note: in C++, returning a  reference to a stack-local variable is Undefined Behavior; if it appears to work, you are just unlucky. In common situations, the compilers should detect the problem and emit a warning."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1442845204, "post_id": 32683309, "comment_id": 53238288, "body": "@MatthieuM. just a warning... how unsafe :-) Although it shows that it&#39;s been a few years since I wrote C for a day job, as I never got to see any of those warnings. Nice to see progress in all camps!"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1442847201, "post_id": 32683309, "comment_id": 53239647, "body": "@Shepmaster: You must have been using an old compiler; I&#39;m still stuck on gcc 4.3.2 and I have it! But yes, only a warning. Most C/C++ compilers take a conservative approach: errors are mandated by the Standard, and the rest is done with warnings (with more or less accuracy ...)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1442847371, "post_id": 32683309, "comment_id": 53239810, "body": "@MatthieuM. We certainly had an older compiler, but maybe not that old. It&#39;s possible that I never tried to return a local variable as a reference, of course, but I don&#39;t know that I could claim to be that good. :-)"}, {"owner": {"reputation": 1887, "user_id": 6510101, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/GlJwX.png?s=128&g=1", "display_name": "D3181", "link": "https://stackoverflow.com/users/6510101/d3181"}, "edited": false, "score": 0, "creation_date": 1556133413, "post_id": 32683309, "comment_id": 98338419, "body": "Could you possibly explain how to use the value returned from Result&lt;File&gt; returned from TryCatch and call the write method? I tried your suggestions but when i unwrap the result using  let inside = self.returnedresultsfile.as_ref().unwrap(); and then match to a file it has the wrong type and produces the &quot;error: no method named <code>Write</code> found for type <code>&amp;std::fs::File</code> in the current scope&quot;. I would really appreciate an explanation of how you can call the write method from the returned value :)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1887, "user_id": 6510101, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/GlJwX.png?s=128&g=1", "display_name": "D3181", "link": "https://stackoverflow.com/users/6510101/d3181"}, "edited": false, "score": 1, "creation_date": 1556148343, "post_id": 32683309, "comment_id": 98343315, "body": "@D3181 there <i>is</i> no method called <code>Write</code>. You are looking for <a href=\"https://doc.rust-lang.org/std/io/trait.Write.html#tymethod.write\" rel=\"nofollow noreferrer\"><code>write</code></a>, and you will need to have the trait in scope. Check out the Rust 1.0 / &quot;write a file&quot; section of <a href=\"https://stackoverflow.com/a/31193386/155423\">What&#39;s the de-facto way of reading and writing files in Rust 1.x?</a>."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 79, "last_activity_date": 1594259132, "last_edit_date": 1594259132, "creation_date": 1442776923, "answer_id": 32683309, "question_id": 32682876, "link": "https://stackoverflow.com/questions/32682876/is-there-any-way-to-return-a-reference-to-a-variable-created-in-a-function/32683309#32683309", "title": "Is there any way to return a reference to a variable created in a function?", "body": "<h1>The question you asked</h1>\n<p>TL;DR: No, you cannot return a reference to a variable that is owned by a function. This applies if you created the variable or if you took ownership of the variable as a function argument.</p>\n<h2>Solutions</h2>\n<p>Instead of trying to return a reference, return an owned object. <code>String</code> instead of <code>&amp;str</code>, <code>Vec&lt;T&gt;</code> instead of <code>&amp;[T]</code>, <code>T</code> instead of <code>&amp;T</code>, etc.</p>\n<p>If you took ownership of the variable via an argument, try taking a (mutable) reference instead and then returning a reference of the same lifetime.</p>\n<p>In rare cases, you can use unsafe code to return the owned value <em>and</em> a reference to it. This has a number of delicate requirements you must uphold to ensure you don't cause undefined behavior or memory unsafety.</p>\n<p>See also:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/43079077/155423\">Proper way to return a new string in Rust</a></li>\n<li><a href=\"https://stackoverflow.com/q/29428227/155423\">Return local String as a slice (&amp;str)</a></li>\n<li><a href=\"https://stackoverflow.com/q/32300132/155423\">Why can&#39;t I store a value and a reference to that value in the same struct?</a></li>\n</ul>\n<h2>Deeper answer</h2>\n<p><a href=\"https://stackoverflow.com/a/32683137/155423\">fjh is absolutely correct</a>, but I want to comment a bit more deeply and touch on some of the other errors with your code.</p>\n<p>Let's start with a smaller example of returning a reference and look at the errors:</p>\n<pre><code>fn try_create&lt;'a&gt;() -&gt; &amp;'a String {\n    &amp;String::new()\n}\n</code></pre>\n<p><strong>Rust 2015</strong></p>\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: borrowed value does not live long enough\n --&gt; src/lib.rs:2:6\n  |\n2 |     &amp;String::new()\n  |      ^^^^^^^^^^^^^ temporary value does not live long enough\n3 | }\n  | - temporary value only lives until here\n  |\nnote: borrowed value must be valid for the lifetime 'a as defined on the function body at 1:15...\n --&gt; src/lib.rs:1:15\n  |\n1 | fn try_create&lt;'a&gt;() -&gt; &amp;'a String {\n  |               ^^\n</code></pre>\n<p><strong>Rust 2018</strong></p>\n<pre class=\"lang-none prettyprint-override\"><code>error[E0515]: cannot return reference to temporary value\n --&gt; src/lib.rs:2:5\n  |\n2 |     &amp;String::new()\n  |     ^-------------\n  |     ||\n  |     |temporary value created here\n  |     returns a reference to data owned by the current function\n</code></pre>\n<blockquote>\n<p>Is there any way to return a reference from a function without arguments?</p>\n</blockquote>\n<p>Technically &quot;yes&quot;, but for what you want, &quot;no&quot;.</p>\n<p>A reference points to an existing piece of memory. In a function with no arguments, the only things that could be referenced are global constants (which have the lifetime <code>&amp;'static</code>) and local variables. I'll ignore globals for now.</p>\n<p>In a language like C or C++, you could actually take a reference to a local variable and return it. However, as soon as the function returns, there's <strong>no guarantee</strong> that the memory that you are referencing continues to be what you thought it was. It might stay what you expect for a while, but eventually the memory will get reused for something else. As soon as your code looks at the memory and tries to interpret a username as the amount of money left in the user's bank account, problems will arise!</p>\n<p>This is what Rust's lifetimes prevent - you aren't allowed to use a reference beyond how long the referred-to value is valid at its current memory location.</p>\n<p>See also:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/36706429/155423\">Is it possible to return either a borrowed or owned type in Rust?</a></li>\n<li><a href=\"https://stackoverflow.com/q/50345139/155423\">Why can I return a reference to a local literal but not a variable?</a></li>\n</ul>\n<h1>Your actual problem</h1>\n<p>Look at the documentation for <a href=\"https://doc.rust-lang.org/std/fs/struct.OpenOptions.html#method.open\" rel=\"noreferrer\"><code>OpenOptions::open</code></a>:</p>\n<pre><code>fn open&lt;P: AsRef&lt;Path&gt;&gt;(&amp;self, path: P) -&gt; Result&lt;File&gt;\n</code></pre>\n<p>It returns a <code>Result&lt;File&gt;</code>, so I don't know how you'd expect to return an <code>OpenOptions</code> or a reference to one. Your function would work if you rewrote it as:</p>\n<pre><code>fn trycreate() -&gt; File {\n    OpenOptions::new()\n        .write(true)\n        .open(&quot;foo.txt&quot;)\n        .expect(&quot;Couldn't open&quot;)\n}\n</code></pre>\n<p>This uses <a href=\"https://doc.rust-lang.org/std/result/enum.Result.html#method.expect\" rel=\"noreferrer\"><code>Result::expect</code></a> to panic with a useful error message. Of course, panicking in the guts of your program isn't super useful, so it's recommended to propagate your errors back out:</p>\n<pre><code>fn trycreate() -&gt; io::Result&lt;File&gt; {\n    OpenOptions::new().write(true).open(&quot;foo.txt&quot;)\n}\n</code></pre>\n<p><code>Option</code> and <code>Result</code> have lots of nice methods to deal with chained error logic. Here, you can use <a href=\"https://doc.rust-lang.org/std/result/enum.Result.html#method.or_else\" rel=\"noreferrer\"><code>or_else</code></a>:</p>\n<pre><code>let f = OpenOptions::new().write(true).open(&quot;foo.txt&quot;);\nlet mut f = f.or_else(|_| trycreate()).expect(&quot;failed at creating&quot;);\n</code></pre>\n<p>I'd also return the <code>Result</code> from <code>main</code>. All together, including fjh's suggestions:</p>\n<pre><code>use std::{\n    fs::OpenOptions,\n    io::{self, Write},\n};\n\nfn main() -&gt; io::Result&lt;()&gt; {\n    let mut f = OpenOptions::new()\n        .create(true)\n        .write(true)\n        .append(true)\n        .open(&quot;foo.txt&quot;)?;\n\n    f.write_all(b&quot;test1\\n&quot;)?;\n    f.write_all(b&quot;test2\\n&quot;)?;\n\n    Ok(())\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 6, "creation_date": 1568226971, "post_id": 57894943, "comment_id": 102211278, "body": "<code>return</code> at the end of a block like that is not idiomatic."}, {"owner": {"reputation": 2964, "user_id": 7134134, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/fzCCW.jpg?s=128&g=1", "display_name": "snnsnn", "link": "https://stackoverflow.com/users/7134134/snnsnn"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1568227217, "post_id": 57894943, "comment_id": 102211368, "body": "First answer is unnecessarily verbose, second one is not elaborate enough. return is chosen for the emphasis."}, {"owner": {"reputation": 2837, "user_id": 1427563, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/sdqnK.png?s=128&g=1", "display_name": "jla", "link": "https://stackoverflow.com/users/1427563/jla"}, "edited": false, "score": 3, "creation_date": 1579659906, "post_id": 57894943, "comment_id": 105836950, "body": "Despite the non-idiomatic <code>return</code> I found this answer to have the clearest explanation."}], "tags": [], "owner": {"reputation": 2964, "user_id": 7134134, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/fzCCW.jpg?s=128&g=1", "display_name": "snnsnn", "link": "https://stackoverflow.com/users/7134134/snnsnn"}, "is_accepted": false, "score": 9, "last_activity_date": 1568226928, "last_edit_date": 1568226928, "creation_date": 1568226701, "answer_id": 57894943, "question_id": 32682876, "link": "https://stackoverflow.com/questions/32682876/is-there-any-way-to-return-a-reference-to-a-variable-created-in-a-function/57894943#57894943", "title": "Is there any way to return a reference to a variable created in a function?", "body": "<p>References are pointers. Once functions are executed, they are popped off the execution stack and resources are de-allocated.</p>\n\n<p>For the following example, <code>x</code> is dropped at the end of the block. After that point, the reference <code>&amp;x</code> will be pointing to some garbage data. Basically it is a dangling pointer. The Rust compiler does not permit such a thing since it is not safe.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn run() -&gt; &amp;u32 {\n    let x: u32 = 42;\n\n    return &amp;x;\n} // x is dropped here\n\nfn main() {\n    let x = run();\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 1345, "user_id": 4602592, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c460b75b83a158f064e3301d901e3269?s=128&d=identicon&r=PG", "display_name": "navigaid", "link": "https://stackoverflow.com/users/4602592/navigaid"}, "is_accepted": false, "score": 5, "last_activity_date": 1601823813, "last_edit_date": 1601823813, "creation_date": 1601823035, "answer_id": 64196091, "question_id": 32682876, "link": "https://stackoverflow.com/questions/32682876/is-there-any-way-to-return-a-reference-to-a-variable-created-in-a-function/64196091#64196091", "title": "Is there any way to return a reference to a variable created in a function?", "body": "<p>This is an elaboration on <a href=\"https://stackoverflow.com/a/57894943/4602592\">snnsnn's answer</a>, which briefly explained the problem without being too specific.</p>\n<p>Rust doesn't allow return a reference to a variable created in a function. Is there a workaround? Yes, simply put that variable in a <a href=\"https://doc.rust-lang.org/std/boxed/struct.Box.html\" rel=\"noreferrer\">Box</a> then return it. Example:</p>\n<pre><code>fn run() -&gt; Box&lt;u32&gt; {\n    let x: u32 = 42;\n    return Box::new(x);\n} \n\nfn main() {\n    println!(&quot;{}&quot;, run());\n}\n</code></pre>\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=a4fbb88cfbdd5e5459b883895d043d63\" rel=\"noreferrer\">code in rust playground</a></p>\n<p>As a rule of thumb, to avoid similar problems in Rust, return an owned object (Box, Vec, String, ...) instead of reference to a variable:</p>\n<ul>\n<li><code>Box&lt;T&gt;</code> instead of <code>&amp;T</code></li>\n<li><code>Vec&lt;T&gt;</code> instead of <code>&amp;[T]</code></li>\n<li><code>String</code> instead of <code>&amp;str</code></li>\n</ul>\n<p>For other types, refer to <a href=\"http://cosmic.mearie.org/2014/01/periodic-table-of-rust-types/\" rel=\"noreferrer\">The Periodic Table of Rust Types</a> to figure out which owned object to use.</p>\n<p>Of course, in this example you can simply return the value (<code>T</code> instead of <code>&amp;T</code> or <code>Box&lt;T&gt;</code>)</p>\n<pre><code>fn run() -&gt; u32 {\n    let x: u32 = 42;\n    return x;\n} \n</code></pre>\n"}], "owner": {"reputation": 903, "user_id": 5356755, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/570f3672a55a694a790e5231623f434e?s=128&d=identicon&r=PG", "display_name": "Nex", "link": "https://stackoverflow.com/users/5356755/nex"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 32060, "favorite_count": 16, "answer_count": 4, "score": 72, "last_activity_date": 1601823813, "creation_date": 1442774096, "last_edit_date": 1475176144, "question_id": 32682876, "link": "https://stackoverflow.com/questions/32682876/is-there-any-way-to-return-a-reference-to-a-variable-created-in-a-function", "title": "Is there any way to return a reference to a variable created in a function?", "body": "<p>I want to write a program that will write a file in 2 steps.\nIt is likely that the file may not exist before the program is run. The filename is fixed.</p>\n\n<p>The problem is that <code>OpenOptions.new().write()</code> can fail. In that case, I want to call a custom function <code>trycreate()</code>. The idea is to create the file instead of opening it and return a handle. Since the filename is fixed, <code>trycreate()</code> has no arguments and I cannot set a lifetime of the returned value.</p>\n\n<p>How can I resolve this problem?</p>\n\n<pre><code>use std::io::Write;\nuse std::fs::OpenOptions;\nuse std::path::Path;\n\nfn trycreate() -&gt; &amp;OpenOptions {\n    let f = OpenOptions::new().write(true).open(\"foo.txt\");\n    let mut f = match f {\n        Ok(file)  =&gt; file,\n        Err(_)  =&gt; panic!(\"ERR\"),\n    };\n    f\n}\n\nfn main() {\n    {\n        let f = OpenOptions::new().write(true).open(b\"foo.txt\");\n        let mut f = match f {\n            Ok(file)  =&gt; file,\n            Err(_)  =&gt; trycreate(\"foo.txt\"),\n        };\n        let buf = b\"test1\\n\";\n        let _ret = f.write(buf).unwrap();\n    }\n    println!(\"50%\");\n    {\n        let f = OpenOptions::new().append(true).open(\"foo.txt\");\n        let mut f = match f {\n            Ok(file)  =&gt; file,\n            Err(_)  =&gt; panic!(\"append\"),\n        };\n        let buf = b\"test2\\n\";\n        let _ret = f.write(buf).unwrap();\n    }\n    println!(\"Ok\");\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "edited": false, "score": 0, "creation_date": 1442841784, "post_id": 32678845, "comment_id": 53235816, "body": "Have you considered a build script? I don&#39;t know if they would be applicable to you (if this is a library, you&#39;re kind of out of luck)"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1442777161, "post_id": 32679095, "comment_id": 53211390, "body": "<i>have a macro somewhere</i> \u2014 I don&#39;t see a macro in your example, and I can&#39;t figure out how one would play in here. Could you expand that bit a little more? Also, what about concepts like <code>#[test]</code>, which you annotate a function with and then it gets magically run from the test main. Would it be possible to do something similar as a user?"}, {"owner": {"reputation": 396, "user_id": 2047097, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/029787cf14150922927942fba8f531d3?s=128&d=identicon&r=PG", "display_name": "Spack", "link": "https://stackoverflow.com/users/2047097/spack"}, "edited": false, "score": 0, "creation_date": 1442816970, "post_id": 32679095, "comment_id": 53221338, "body": "<i>No there&#39;s no way you can do something similar.</i> - Using <a href=\"https://doc.rust-lang.org/stable/book/compiler-plugins.html\" rel=\"nofollow noreferrer\">compiler plugins</a>, but it&#39;s not yet stable if I understood correctly."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 6, "last_activity_date": 1442811966, "last_edit_date": 1442811966, "creation_date": 1442750175, "answer_id": 32679095, "question_id": 32678845, "link": "https://stackoverflow.com/questions/32678845/how-can-i-statically-register-structures-at-compile-time/32679095#32679095", "title": "How can I statically register structures at compile time?", "body": "<p>You can't.</p>\n\n<p>One of the conscious design choices with Rust is \"no code before <code>main</code>\", thus there is no support for this sort of thing.  Fundamentally, you need to have code somewhere that you explicitly call that registers the applets.</p>\n\n<p>Rust programs that need to do something like this will just list all the possible implementations explicitly and construct a single, static array of them.  Something like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub const APPLETS: &amp;'static [Applet] = [\n    Applet { name: \"foo\", call: ::applets::foo::foo_call },\n    Applet { name: \"bar\", call: ::applets::bar::bar_call },\n];\n</code></pre>\n\n<p>(Sometimes, the repetitive elements can be simplified with macros, <em>i.e.</em> in this example, you could change it so that the name is only mentioned once.)</p>\n\n<p><em>Theoretically</em>, you could do it by doing what languages like D do behind the scenes, but would be platform-specific and probably require messing with linker scripts and/or modifying the compiler.</p>\n\n<p><em>Aside</em>: What about <code>#[test]</code>?  <code>#[test]</code> is magic and handled by the compiler.  The short version is: it does the job of finding all the tests in a crate and building said giant list, which is then used by the test runner which effectively <em>replaces</em> your <code>main</code> function.  No, there's no way you can do anything similar.</p>\n"}, {"comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 1, "creation_date": 1442753557, "post_id": 32679326, "comment_id": 53203647, "body": "I <i>knew</i> there was a linker section for this, but damned if I could find what it was called.  Of course, as you say, this is <i>horribly</i> non-portable..."}], "tags": [], "owner": {"reputation": 6841, "user_id": 1190965, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/3e74ed8e572542a718df5f15ead40581?s=128&d=identicon&r=PG", "display_name": "nodakai", "link": "https://stackoverflow.com/users/1190965/nodakai"}, "is_accepted": false, "score": 3, "last_activity_date": 1442772847, "last_edit_date": 1442772847, "creation_date": 1442751467, "answer_id": 32679326, "question_id": 32678845, "link": "https://stackoverflow.com/questions/32678845/how-can-i-statically-register-structures-at-compile-time/32679326#32679326", "title": "How can I statically register structures at compile time?", "body": "<p>This is not a direct answer to your question but just FYI... For ELF binaries, I could achieve something similar to GCC's <code>__attribute__((constructor))</code> with</p>\n\n<pre><code>fn init() { ... }\n#[link_section = \".init_array\"]\nstatic INIT: fn() = init;\n</code></pre>\n\n<p>This is obviously a deviation from Rust's design philosophies.  (Portability and what @DK calls \"no code before <code>main</code>\" principle.)</p>\n\n<p><code>INIT</code> can also be an Rust array.  You might need to pay more attention to alignments.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 0, "last_activity_date": 1612967011, "last_edit_date": 1612967011, "creation_date": 1565294030, "answer_id": 57419729, "question_id": 32678845, "link": "https://stackoverflow.com/questions/32678845/how-can-i-statically-register-structures-at-compile-time/57419729#57419729", "title": "How can I statically register structures at compile time?", "body": "<p>You can.</p>\n<p>You need to use the <a href=\"https://crates.io/crates/inventory\" rel=\"nofollow noreferrer\">inventory crate</a>. This is <strong>limited to Linux, macOS, iOS, FreeBSD, Android, and Windows</strong> at the moment.</p>\n<p>You need to use <a href=\"https://docs.rs/inventory/0.1.9/inventory/macro.submit.html\" rel=\"nofollow noreferrer\"><code>inventory::submit</code></a> to add it to a global registry, <a href=\"https://docs.rs/inventory/0.1.9/inventory/macro.collect.html\" rel=\"nofollow noreferrer\"><code>inventory::collect</code></a> to build the registry, and <a href=\"https://docs.rs/inventory/0.1.9/inventory/type.iter.html\" rel=\"nofollow noreferrer\"><code>inventory::iter</code></a> to iterate over the registry:</p>\n<pre><code>use inventory; // 0.1.9\nuse std::{collections::BTreeMap, env};\n\nstruct Applet {\n    name: &amp;'static str,\n    call: fn(),\n}\n\n// Add something to the registry\n\nfn foo_call() {\n    println!(&quot;Foo&quot;);\n}\ninventory::submit!(Applet {\n    name: &quot;foo&quot;,\n    call: foo_call\n});\n\n// Build the registry\n\ninventory::collect!(Applet);\n\nfn main() {\n    let args: Vec&lt;String&gt; = env::args().collect();\n\n    let mut registry = BTreeMap::new();\n\n    // Access the registry\n    for applet in inventory::iter::&lt;Applet&gt; {\n        registry.insert(applet.name, applet);\n    }\n\n    if let Some(applet) = registry.get(&amp;args[1].as_ref()) {\n        (applet.call)();\n    }\n}\n</code></pre>\n<p>Running it shows how it works:</p>\n<pre class=\"lang-none prettyprint-override\"><code>$ cargo run foo\nFoo\n\n$ cargo run bar\n</code></pre>\n"}], "owner": {"reputation": 396, "user_id": 2047097, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/029787cf14150922927942fba8f531d3?s=128&d=identicon&r=PG", "display_name": "Spack", "link": "https://stackoverflow.com/users/2047097/spack"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 800, "favorite_count": 0, "accepted_answer_id": 32679095, "answer_count": 3, "score": 0, "last_activity_date": 1612967011, "creation_date": 1442748414, "last_edit_date": 1442777249, "question_id": 32678845, "link": "https://stackoverflow.com/questions/32678845/how-can-i-statically-register-structures-at-compile-time", "title": "How can I statically register structures at compile time?", "body": "<p>I'm looking for the right method to statically register structures at compile time.</p>\n\n<p>The origin of this requirement is to have a bunch of <em>applets</em> with dedicated tasks so that if I run <code>myprog foo</code>, it will call the <code>foo</code> applet.</p>\n\n<p>So I started by defining an <code>Applet</code> structure:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct Applet {\n    name: &amp;str,\n    call: fn(),\n}\n</code></pre>\n\n<p>Then I can define my <code>foo</code> applet this way:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn foo_call() {\n    println!(\"Foo\");\n}\nlet foo_applet = Applet { name: \"foo\", call: foo_call };\n</code></pre>\n\n<p>Now I would like to register this applet so that my <code>main</code> function can call it if available:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::env;\n\nfn main() {\n    let args: Vec&lt;String&gt; = env::args().collect();\n\n    match AppletRegistry.get(args[1]) {\n        Some(x) =&gt; x.call(),\n        _ =&gt; (),\n    }\n}\n</code></pre>\n\n<p>The whole deal is about how <code>AppletRegistry</code> should be implemented so that I can list all the available applets preferably at compile time.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 53905, "user_id": 2864740, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/e7a05a144f218bde07b659bc98e1ca7d?s=128&d=identicon&r=PG&f=1", "display_name": "user2864740", "link": "https://stackoverflow.com/users/2864740/user2864740"}, "edited": false, "score": 14, "creation_date": 1442738507, "post_id": 32677420, "comment_id": 53199755, "body": "&quot;Deterministic object lifetimes&quot;. Similar as C++."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 53905, "user_id": 2864740, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/e7a05a144f218bde07b659bc98e1ca7d?s=128&d=identicon&r=PG&f=1", "display_name": "user2864740", "link": "https://stackoverflow.com/users/2864740/user2864740"}, "edited": false, "score": 0, "creation_date": 1442783570, "post_id": 32677420, "comment_id": 53213433, "body": "@user2864740 That guide is well out of date. The modern replacement would probably be <a href=\"http://doc.rust-lang.org/book/references-and-borrowing.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/book/references-and-borrowing.html</a>."}], "answers": [{"comments": [{"owner": {"reputation": 53905, "user_id": 2864740, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/e7a05a144f218bde07b659bc98e1ca7d?s=128&d=identicon&r=PG&f=1", "display_name": "user2864740", "link": "https://stackoverflow.com/users/2864740/user2864740"}, "edited": false, "score": 4, "creation_date": 1442738820, "post_id": 32677458, "comment_id": 53199823, "body": "While using the stack is handy, deterministic object lifetimes can still be handled if all values were &#39;created on the heap&#39;. Thus it is an implementation detail; not necessarily a language strategy."}, {"owner": {"reputation": 4916, "user_id": 84955, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/02c302300a3e15ec64cb26cb42748a36?s=128&d=identicon&r=PG&f=1", "display_name": "Swiss", "link": "https://stackoverflow.com/users/84955/swiss"}, "reply_to_user": {"reputation": 53905, "user_id": 2864740, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/e7a05a144f218bde07b659bc98e1ca7d?s=128&d=identicon&r=PG&f=1", "display_name": "user2864740", "link": "https://stackoverflow.com/users/2864740/user2864740"}, "edited": false, "score": 2, "creation_date": 1442739105, "post_id": 32677458, "comment_id": 53199875, "body": "You keep using that word. I do not think it means what you think it means."}, {"owner": {"reputation": 53905, "user_id": 2864740, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/e7a05a144f218bde07b659bc98e1ca7d?s=128&d=identicon&r=PG&f=1", "display_name": "user2864740", "link": "https://stackoverflow.com/users/2864740/user2864740"}, "edited": false, "score": 0, "creation_date": 1442739336, "post_id": 32677458, "comment_id": 53199938, "body": "Means <a href=\"http://programmers.stackexchange.com/questions/240767/why-is-there-no-deterministic-object-destruction-in-java\">what I wish to express</a>; being the opposite of non-deterministic lifetimes. Make an offer for a better phrase."}, {"owner": {"reputation": 8604, "user_id": 1004781, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/dn2vE.png?s=128&g=1", "display_name": "rix", "link": "https://stackoverflow.com/users/1004781/rix"}, "edited": false, "score": 0, "creation_date": 1442740077, "post_id": 32677458, "comment_id": 53200128, "body": "Thanks for the answer, i&#39;ve give the points to the first one simply because it was submitted first.  The information is just as useful and valid."}, {"owner": {"reputation": 4916, "user_id": 84955, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/02c302300a3e15ec64cb26cb42748a36?s=128&d=identicon&r=PG&f=1", "display_name": "Swiss", "link": "https://stackoverflow.com/users/84955/swiss"}, "reply_to_user": {"reputation": 53905, "user_id": 2864740, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/e7a05a144f218bde07b659bc98e1ca7d?s=128&d=identicon&r=PG&f=1", "display_name": "user2864740", "link": "https://stackoverflow.com/users/2864740/user2864740"}, "edited": false, "score": 0, "creation_date": 1442740141, "post_id": 32677458, "comment_id": 53200147, "body": "@user2864740 Deterministic object lifetimes refers to being able to tell exactly when the object&#39;s memory will be cleared once its destructor has been called. It has nothing to do with how that destructor is called in the first place. You keep bringing up the same term repeatedly even though it has no direct significance to the question."}, {"owner": {"reputation": 88126, "user_id": 1329652, "user_type": "registered", "accept_rate": 41, "profile_image": "https://www.gravatar.com/avatar/fa4ef026ee4be15d3dbacc95f1773d03?s=128&d=identicon&r=PG&f=1", "display_name": "Kuba hasn&#39;t forgotten Monica", "link": "https://stackoverflow.com/users/1329652/kuba-hasnt-forgotten-monica"}, "edited": false, "score": 0, "creation_date": 1593621022, "post_id": 32677458, "comment_id": 110847300, "body": "I wish people forgot that there was any stack, because, like, most of what is &quot;on the stack&quot; is not on the stack at all. So it&#39;s silly. I have several 50k LOC C code projects that use automatic local variables, and the only things that go on the stack are return addresses. In fact, there&#39;s a special verification step before linking that terminates the build if anything but return addresses ever reaches the stack. So, in general, stack is not only an abstraction, but an unnecessary one."}, {"owner": {"reputation": 789, "user_id": 12291742, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/V1ofq.png?s=128&g=1", "display_name": "Ekrem Din&#231;el", "link": "https://stackoverflow.com/users/12291742/ekrem-din%c3%a7el"}, "reply_to_user": {"reputation": 88126, "user_id": 1329652, "user_type": "registered", "accept_rate": 41, "profile_image": "https://www.gravatar.com/avatar/fa4ef026ee4be15d3dbacc95f1773d03?s=128&d=identicon&r=PG&f=1", "display_name": "Kuba hasn&#39;t forgotten Monica", "link": "https://stackoverflow.com/users/1329652/kuba-hasnt-forgotten-monica"}, "edited": false, "score": 0, "creation_date": 1610284989, "post_id": 32677458, "comment_id": 116078500, "body": "@Kubahasn&#39;tforgottenMonica I don&#39;t really understand your example. May you elaborate? How your automatic local variables are not in the stack?"}], "tags": [], "owner": {"reputation": 4916, "user_id": 84955, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/02c302300a3e15ec64cb26cb42748a36?s=128&d=identicon&r=PG&f=1", "display_name": "Swiss", "link": "https://stackoverflow.com/users/84955/swiss"}, "is_accepted": false, "score": 6, "last_activity_date": 1442738535, "creation_date": 1442738535, "answer_id": 32677458, "question_id": 32677420, "link": "https://stackoverflow.com/questions/32677420/what-does-rust-have-instead-of-a-garbage-collector/32677458#32677458", "title": "What does Rust have instead of a garbage collector?", "body": "<p>With a language where you must manually manage memory, the distinction between the stack and the heap becomes critical. Every time you call a function, enough space is allocated on the stack for all variables contained within the scope of that function. When the function returns, the stack frame associated with that function is \"popped\" off the stack, and the memory is freed for future use.</p>\n\n<p>From a practical standpoint, this inadvertent memory cleaning is used as a means of automatic memory storage that will be cleared at the end of the function's scope.</p>\n\n<p>There is more information available here:\n<a href=\"https://doc.rust-lang.org/book/the-stack-and-the-heap.html\" rel=\"noreferrer\">https://doc.rust-lang.org/book/the-stack-and-the-heap.html</a></p>\n"}, {"comments": [{"owner": {"reputation": 1564, "user_id": 2152200, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ba0b08f62368852ce8d8466d4a4e87b0?s=128&d=identicon&r=PG", "display_name": "Ayonix", "link": "https://stackoverflow.com/users/2152200/ayonix"}, "reply_to_user": {"reputation": 53905, "user_id": 2864740, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/e7a05a144f218bde07b659bc98e1ca7d?s=128&d=identicon&r=PG&f=1", "display_name": "user2864740", "link": "https://stackoverflow.com/users/2864740/user2864740"}, "edited": false, "score": 0, "creation_date": 1442739988, "post_id": 32677591, "comment_id": 53200108, "body": "By allocating memory when introducing variables and freeing memory when the memory is no longer needed? I don&#39;t really know what you want to say with that. Maybe we have different opinions on what a GC is then."}, {"owner": {"reputation": 1564, "user_id": 2152200, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ba0b08f62368852ce8d8466d4a4e87b0?s=128&d=identicon&r=PG", "display_name": "Ayonix", "link": "https://stackoverflow.com/users/2152200/ayonix"}, "edited": false, "score": 1, "creation_date": 1442740091, "post_id": 32677591, "comment_id": 53200135, "body": "His question is how Rust&#39;s approach differs from a typical GC. So I explained what a GC is and how Rust does it without a GC."}, {"owner": {"reputation": 5417, "user_id": 1823524, "user_type": "registered", "accept_rate": 64, "profile_image": "https://i.stack.imgur.com/uScxd.jpg?s=128&g=1", "display_name": "Amomum", "link": "https://stackoverflow.com/users/1823524/amomum"}, "edited": false, "score": 0, "creation_date": 1442868442, "post_id": 32677591, "comment_id": 53251959, "body": "Was I wrong in thinking that if you create an object simply with &#39;let&#39;, it would be created on the stack? And no garbage collection would be necesary? If a doesn&#39;t allocate something in it&#39;s ctor, of course."}, {"owner": {"reputation": 1564, "user_id": 2152200, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ba0b08f62368852ce8d8466d4a4e87b0?s=128&d=identicon&r=PG", "display_name": "Ayonix", "link": "https://stackoverflow.com/users/2152200/ayonix"}, "edited": false, "score": 1, "creation_date": 1442869442, "post_id": 32677591, "comment_id": 53252490, "body": "<a href=\"https://doc.rust-lang.org/book/the-stack-and-the-heap.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/book/the-stack-and-the-heap.html</a> explains it pretty well. Yes, many things are in the stack but let alone is no sufficient indicator (see Box). I left that out for the sake of simplicity, since the question was asking generally though"}, {"owner": {"reputation": 5417, "user_id": 1823524, "user_type": "registered", "accept_rate": 64, "profile_image": "https://i.stack.imgur.com/uScxd.jpg?s=128&g=1", "display_name": "Amomum", "link": "https://stackoverflow.com/users/1823524/amomum"}, "edited": false, "score": 0, "creation_date": 1442910437, "post_id": 32677591, "comment_id": 53266408, "body": "@Ayonix thanks, I just wanted to check my sanity, that in Rust we need explicitly call some kind of new() to allocate on heap."}, {"owner": {"reputation": 1115, "user_id": 890016, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/BO6bH.png?s=128&g=1", "display_name": "Mario Carneiro", "link": "https://stackoverflow.com/users/890016/mario-carneiro"}, "reply_to_user": {"reputation": 5417, "user_id": 1823524, "user_type": "registered", "accept_rate": 64, "profile_image": "https://i.stack.imgur.com/uScxd.jpg?s=128&g=1", "display_name": "Amomum", "link": "https://stackoverflow.com/users/1823524/amomum"}, "edited": false, "score": 1, "creation_date": 1468402481, "post_id": 32677591, "comment_id": 64108698, "body": "@Amomum Actually Rust doesn&#39;t have any anointed <code>new()</code> function like C, they are just static functions, and in particular something like <code>let x = MyStruct::new()</code> creates its object on the stack. The <i>real</i> indicator of heap allocation is <code>Box::new()</code> (or any of the structures that depend on Box)."}, {"owner": {"reputation": 7347, "user_id": 172274, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/886b1c9637f9742ff1074d6605a6df7e?s=128&d=identicon&r=PG", "display_name": "still_dreaming_1", "link": "https://stackoverflow.com/users/172274/still-dreaming-1"}, "edited": false, "score": 1, "creation_date": 1490382237, "post_id": 32677591, "comment_id": 73104078, "body": "What other languages handle memory management in a similar way to Rust?"}, {"owner": {"reputation": 113, "user_id": 9916589, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/16088a62b64c1764112cc587f3a8cc24?s=128&d=identicon&r=PG&f=1", "display_name": "J Winnie", "link": "https://stackoverflow.com/users/9916589/j-winnie"}, "reply_to_user": {"reputation": 7347, "user_id": 172274, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/886b1c9637f9742ff1074d6605a6df7e?s=128&d=identicon&r=PG", "display_name": "still_dreaming_1", "link": "https://stackoverflow.com/users/172274/still-dreaming-1"}, "edited": false, "score": 0, "creation_date": 1598580271, "post_id": 32677591, "comment_id": 112511908, "body": "@still_dreaming_1 I don&#39;t think any other languages do. This novel approach to memory management is kind of Rust&#39;s specialty.  Although Zig doesn&#39;t have a GC either and has some safety guarantees: <a href=\"https://ziglang.org/\" rel=\"nofollow noreferrer\">ziglang.org</a>"}], "tags": [], "owner": {"reputation": 1564, "user_id": 2152200, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ba0b08f62368852ce8d8466d4a4e87b0?s=128&d=identicon&r=PG", "display_name": "Ayonix", "link": "https://stackoverflow.com/users/2152200/ayonix"}, "is_accepted": true, "score": 84, "last_activity_date": 1442740168, "last_edit_date": 1442740168, "creation_date": 1442739596, "answer_id": 32677591, "question_id": 32677420, "link": "https://stackoverflow.com/questions/32677420/what-does-rust-have-instead-of-a-garbage-collector/32677591#32677591", "title": "What does Rust have instead of a garbage collector?", "body": "<p>Garbage collection is typically used periodically or on demand, like if the heap is close to full or above some threshold. It then looks for unused variables and frees their memory, depending on the <a href=\"https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)\">algorithm</a>.</p>\n\n<p>Rust would know when the variable gets out of scope or its lifetime ends at compile time and thus insert the corresponding LLVM/assembly instructions to free the memory.</p>\n\n<p>Rust also allows some kind of garbage collection, like <a href=\"https://doc.rust-lang.org/std/sync/struct.Arc.html\">atomic reference counting</a> though.</p>\n"}, {"comments": [{"owner": {"reputation": 46453, "user_id": 13924, "user_type": "registered", "accept_rate": 45, "profile_image": "https://i.stack.imgur.com/rRkqv.jpg?s=128&g=1", "display_name": "J D", "link": "https://stackoverflow.com/users/13924/j-d"}, "edited": false, "score": 2, "creation_date": 1465080604, "post_id": 32678736, "comment_id": 62753417, "body": "&quot;Languages with a Garbage Collector periodically scan the memory (one way or another)&quot;. Many do but that is not true in general. Real-time garbage collectors scan incrementally rather than periodically. Reference counting languages like Mathematica don&#39;t scan at all."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 46453, "user_id": 13924, "user_type": "registered", "accept_rate": 45, "profile_image": "https://i.stack.imgur.com/rRkqv.jpg?s=128&g=1", "display_name": "J D", "link": "https://stackoverflow.com/users/13924/j-d"}, "edited": false, "score": 0, "creation_date": 1465123363, "post_id": 32678736, "comment_id": 62761787, "body": "@JonHarrop: I do not count reference-counting as a complete Garbage Collection mechanism since it must be supplemented to avoid leaking cycles. As for the incremental/periodic difference, it may my poor command of English, but I fail to see how periodic does not cover the incremental case... I think that the &quot;(one way or another)&quot; bit adequately conveys that many varied approaches exist. In any case, if you have a better way of succinctly describing Garbage Collection, please suggest away. I have, however, no intention of launching myself in a full-blown explanation: I am unqualified for it."}, {"owner": {"reputation": 46453, "user_id": 13924, "user_type": "registered", "accept_rate": 45, "profile_image": "https://i.stack.imgur.com/rRkqv.jpg?s=128&g=1", "display_name": "J D", "link": "https://stackoverflow.com/users/13924/j-d"}, "edited": false, "score": 3, "creation_date": 1465143880, "post_id": 32678736, "comment_id": 62768034, "body": "&quot;I do not count reference-counting as a complete Garbage Collection mechanism since it must be supplemented to avoid leaking cycles&quot;. RC is conventionally regarded as a form of GC. In Mathematica and Erlang, for example, cycles cannot be created by design so RC does not leak. For a high-level perspective, see &quot;A unified theory of garbage collection&quot; <a href=\"https://www.cs.virginia.edu/~cs415/reading/bacon-garbage.pdf\" rel=\"nofollow noreferrer\">cs.virginia.edu/~cs415/reading/bacon-garbage.pdf</a>"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 46453, "user_id": 13924, "user_type": "registered", "accept_rate": 45, "profile_image": "https://i.stack.imgur.com/rRkqv.jpg?s=128&g=1", "display_name": "J D", "link": "https://stackoverflow.com/users/13924/j-d"}, "edited": false, "score": 0, "creation_date": 1465148472, "post_id": 32678736, "comment_id": 62769588, "body": "@JonHarrop: True, if no cycle is possible then RC cannot leak."}, {"owner": {"reputation": 46453, "user_id": 13924, "user_type": "registered", "accept_rate": 45, "profile_image": "https://i.stack.imgur.com/rRkqv.jpg?s=128&g=1", "display_name": "J D", "link": "https://stackoverflow.com/users/13924/j-d"}, "edited": false, "score": 3, "creation_date": 1465330460, "post_id": 32678736, "comment_id": 62854085, "body": "&quot;I fail to see how periodic does not cover the incremental case&quot;.  Stop the world algorithms would be regarded as periodic whereas tricolor marking is regarded as incremental, for example. They are opposites in this context."}, {"owner": {"reputation": 3469, "user_id": 2574612, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/4b008a3d7ce933943329e84c1dbe6db7?s=128&d=identicon&r=PG", "display_name": "Nicholas Pipitone", "link": "https://stackoverflow.com/users/2574612/nicholas-pipitone"}, "reply_to_user": {"reputation": 46453, "user_id": 13924, "user_type": "registered", "accept_rate": 45, "profile_image": "https://i.stack.imgur.com/rRkqv.jpg?s=128&g=1", "display_name": "J D", "link": "https://stackoverflow.com/users/13924/j-d"}, "edited": false, "score": 2, "creation_date": 1600291765, "post_id": 32678736, "comment_id": 113045125, "body": "@JD You&#39;re going way too deep. His explanation doesn&#39;t have to do with the internals of how GCs work, only the differences between GC and non-GC languages. The differentiation that you&#39;re trying to make is based on the implementation of GCs themselves. The differentiation that he&#39;s trying to make is between GCs in the abstract. There&#39;s no need to delve 500 words into the semantic meaning of &quot;periodic&quot; in this context."}, {"owner": {"reputation": 3469, "user_id": 2574612, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/4b008a3d7ce933943329e84c1dbe6db7?s=128&d=identicon&r=PG", "display_name": "Nicholas Pipitone", "link": "https://stackoverflow.com/users/2574612/nicholas-pipitone"}, "edited": false, "score": 1, "creation_date": 1600292140, "post_id": 32678736, "comment_id": 113045240, "body": "Abstractly, we normally consider langauges like C++/Rust that use RAII/RC as non-garbage-collecting. And languages such as Java/Python/C# to be garbage collecting (Even if it uses RC as an underlying implementation). The core difference is that in C++/Rust, the RC is explicit, and it&#39;s virtually a 5-line wrapper around calling malloc and free yourself. When in a GC language, it&#39;s abstracted from view, and classes are passed by reference rather than by value. (And the language specification rarely mentioned whether or not its RC or Mark-and-sweep, that&#39;s normally an implementation detail)"}, {"owner": {"reputation": 789, "user_id": 12291742, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/V1ofq.png?s=128&g=1", "display_name": "Ekrem Din&#231;el", "link": "https://stackoverflow.com/users/12291742/ekrem-din%c3%a7el"}, "reply_to_user": {"reputation": 46453, "user_id": 13924, "user_type": "registered", "accept_rate": 45, "profile_image": "https://i.stack.imgur.com/rRkqv.jpg?s=128&g=1", "display_name": "J D", "link": "https://stackoverflow.com/users/13924/j-d"}, "edited": false, "score": 0, "creation_date": 1610284511, "post_id": 32678736, "comment_id": 116078364, "body": "@JD The link is broken. Can you give a documentation etc. on how the design of those languages makes it impossible to create a reference cycle?"}, {"owner": {"reputation": 46453, "user_id": 13924, "user_type": "registered", "accept_rate": 45, "profile_image": "https://i.stack.imgur.com/rRkqv.jpg?s=128&g=1", "display_name": "J D", "link": "https://stackoverflow.com/users/13924/j-d"}, "edited": false, "score": 0, "creation_date": 1610364604, "post_id": 32678736, "comment_id": 116100445, "body": "Here&#39;s a new link to the &quot;Unified Theory of Garbage Collection&quot; paper <a href=\"https://researcher.watson.ibm.com/researcher/files/us-bacon/Bacon04Unified.pdf\" rel=\"nofollow noreferrer\">researcher.watson.ibm.com/researcher/files/us-bacon/&hellip;</a>"}, {"owner": {"reputation": 46453, "user_id": 13924, "user_type": "registered", "accept_rate": 45, "profile_image": "https://i.stack.imgur.com/rRkqv.jpg?s=128&g=1", "display_name": "J D", "link": "https://stackoverflow.com/users/13924/j-d"}, "edited": false, "score": 0, "creation_date": 1610365165, "post_id": 32678736, "comment_id": 116100709, "body": "For Erlang&#39;s design I recommend finding an Erlang group and asking them for the best references."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 48, "last_activity_date": 1530654710, "last_edit_date": 1530654710, "creation_date": 1442747678, "answer_id": 32678736, "question_id": 32677420, "link": "https://stackoverflow.com/questions/32677420/what-does-rust-have-instead-of-a-garbage-collector/32678736#32678736", "title": "What does Rust have instead of a garbage collector?", "body": "<p>The basic idea of managing resources (including memory) in a program, whatever the strategy, is that the resources tied to unreachable \"objects\" can be reclaimed. Beyond memory, those resources can be mutex locks, file handles, sockets, database connections...</p>\n\n<p>Languages with a garbage collector periodically scan the memory (one way or another) to find unused objects, release the resources associated with them, and finally release the memory used by those objects.</p>\n\n<p>Rust does not have a GC, how does it manage?</p>\n\n<p>Rust has ownership. Using an <a href=\"https://en.wikipedia.org/wiki/Substructural_type_system#Affine_type_systems\" rel=\"noreferrer\">affine type system</a>, it tracks which variable is still holding onto an object and, when such a variable goes out of scope, calls its destructor. You can see the affine type system in effect pretty easily:</p>\n\n<pre><code>fn main() {\n    let s: String = \"Hello, World!\".into();\n    let t = s;\n    println!(\"{}\", s);\n}\n</code></pre>\n\n<p>Yields:</p>\n\n<pre><code>&lt;anon&gt;:4:24: 4:25 error: use of moved value: `s` [E0382]\n&lt;anon&gt;:4         println!(\"{}\", s);\n\n&lt;anon&gt;:3:13: 3:14 note: `s` moved here because it has type `collections::string::String`, which is moved by default\n&lt;anon&gt;:3         let t = s;\n                     ^\n</code></pre>\n\n<p>which perfectly illustrates that at any point in time, at the language level, the ownership is tracked.</p>\n\n<p>This ownership works recursively: if you have a <code>Vec&lt;String&gt;</code> (i.e., a dynamic array of strings), then each <code>String</code> is owned by the <code>Vec</code> which itself is owned by a variable or another object, etc... thus, when a variable goes out of scope, it recursively frees up all resources it held, even indirectly. In the case of the <code>Vec&lt;String&gt;</code> this means:</p>\n\n<ol>\n<li>Releasing the memory buffer associated to each <code>String</code></li>\n<li>Releasing the memory buffer associated to the <code>Vec</code> itself</li>\n</ol>\n\n<p>Thus, thanks to the ownership tracking, the lifetime of ALL the program objects is strictly tied to one (or several) function variables, which will ultimately go out of scope (when the block they belong to ends).</p>\n\n<p><em>Note: this is a bit optimistic, using reference counting (<code>Rc</code> or <code>Arc</code>) it is possible to form cycles of references and thus cause memory leaks, in which case the resources tied to the cycle might never be released.</em></p>\n"}], "owner": {"reputation": 8604, "user_id": 1004781, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/dn2vE.png?s=128&g=1", "display_name": "rix", "link": "https://stackoverflow.com/users/1004781/rix"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 44996, "favorite_count": 25, "accepted_answer_id": 32677591, "answer_count": 3, "score": 107, "last_activity_date": 1542328121, "creation_date": 1442738251, "last_edit_date": 1542328121, "question_id": 32677420, "link": "https://stackoverflow.com/questions/32677420/what-does-rust-have-instead-of-a-garbage-collector", "title": "What does Rust have instead of a garbage collector?", "body": "<p>I understand Rust doesn't have a garbage collector and am wondering how memory is freed up when a binding goes out of scope.</p>\n\n<p>So in this example, I understand that Rust reclaims the memory allocated to 'a' when it goes out of scope.</p>\n\n<pre><code>{\n    let a = 4\n}\n</code></pre>\n\n<p>The problem I am having with this, is firstly how this happens, and secondly isn't this a sort of garbage collection?  How does it differ from 'typical' garbage collection?</p>\n"}, {"tags": ["casting", "rust"], "answers": [{"comments": [{"owner": {"reputation": 721, "user_id": 849083, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/35090cb157e7b2e7b5fed3a7bd5ab105?s=128&d=identicon&r=PG", "display_name": "David Williams", "link": "https://stackoverflow.com/users/849083/david-williams"}, "edited": false, "score": 0, "creation_date": 1442746211, "post_id": 32677761, "comment_id": 53201688, "body": "Thanks for your answer. The behaviour of (e.g) &#39;let i: i32 = some_float as i32&#39; is well defined and I would simply expect to apply this operation to each of the four members (as shown in my as_i32x4() function).  From what you have said, it seems that From/Into would be most appropriate, or possibly ApproxFrom/ApproxInto.  Thanks again!"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 721, "user_id": 849083, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/35090cb157e7b2e7b5fed3a7bd5ab105?s=128&d=identicon&r=PG", "display_name": "David Williams", "link": "https://stackoverflow.com/users/849083/david-williams"}, "edited": false, "score": 0, "creation_date": 1442749769, "post_id": 32677761, "comment_id": 53202638, "body": "@DavidWilliams: Actually, it <i>really</i> isn&#39;t.  What&#39;s <code>std::f32::NAN as i32</code>?  There&#39;s no answer that makes sense, and what you get changes depending on your optimisation level.  You can even use this to violate memory safety <i>without</i> <code>unsafe</code> code.  See <a href=\"https://github.com/rust-lang/rust/issues/10184#issuecomment-139858153\" rel=\"nofollow noreferrer\">Issue 10184</a>.  This is actually partly <i>why</i> I wrote <code>conv</code>: to define a set of conversions that were, at minimum, <i>well defined</i> and consistent."}, {"owner": {"reputation": 721, "user_id": 849083, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/35090cb157e7b2e7b5fed3a7bd5ab105?s=128&d=identicon&r=PG", "display_name": "David Williams", "link": "https://stackoverflow.com/users/849083/david-williams"}, "edited": false, "score": 0, "creation_date": 1442768330, "post_id": 32677761, "comment_id": 53208409, "body": "Thanks, that&#39;s an interesting bug. Still, this ability to cast between int/float with &#39;as&#39; already exists in Rust (regardless of what that behavior is), would it not make sense to allow this &#39;accepted&#39; behavior to be extended to sets of ints/floats? As a programmer I know which numbers to not try and convert (maybe, and I can imagine only one element may fail to convert, what then?). And even if not, it&#39;s really a flaw in my specific use case - in general are there not cases where it would make sense to allow the user to overload &#39;as&#39; for certain types? Anyway, great feedback."}, {"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "edited": false, "score": 0, "creation_date": 1442944639, "post_id": 32677761, "comment_id": 53289867, "body": "For <code>AsMut</code> and <code>AsRef</code>, the Rustonomicon claims that two types, even if they are identical, <b>cannot</b> be trusted to have the same binary layout (though in practice they should be expected to). Is this wrong or does implementing those traits convince rustc to make them the same or something? <a href=\"https://doc.rust-lang.org/nightly/nomicon/repr-rust.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/nightly/nomicon/repr-rust.html</a>"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "edited": false, "score": 0, "creation_date": 1442986995, "post_id": 32677761, "comment_id": 53305002, "body": "@Jsor: It&#39;s not wrong: you should <i>usually</i> only implement <code>AsRef</code>/<code>AsMut</code> when you <i>know</i> you&#39;ll have the same binary layout.  As in, either the exact same type (<i>i.e.</i> you&#39;re <code>AsRef&lt;i32&gt;</code>-ing a struct to one of its fields which is an <code>i32</code>, <i>or</i> you&#39;ve used <code>repr</code> attributes to control the layout."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 6, "last_activity_date": 1442740935, "creation_date": 1442740935, "answer_id": 32677761, "question_id": 32677388, "link": "https://stackoverflow.com/questions/32677388/how-can-i-overload-the-as-operator-for-custom-types/32677761#32677761", "title": "How can I overload the &#39;as&#39; operator for custom types?", "body": "<p>You cannot overload <code>as</code>.</p>\n\n<p>If you want to express \"conversion\" in some reasonably standard fashion, you'll want to implement one or more of the traits you indicated.  Specifically:</p>\n\n<ul>\n<li><code>AsMut</code>/<code>AsRef</code>: pointers of this type and some other type are safely interchangeable (exactly the same binary layout and invariants).</li>\n<li><code>From</code>/<code>Into</code>: it is possible to convert between this type and some other type without possibility of failure or additional context (both types are the same \"thing\", just expressed/encoded/typed differently).</li>\n</ul>\n\n<p>To be honest, I'm not entirely sure <em>what</em> semantics you're expecting.  There is also the <a href=\"https://crates.io/crates/conv\" rel=\"noreferrer\"><code>conv</code></a> crate that defines some additional traits:</p>\n\n<blockquote>\n  <p><em>Disclaimer</em>: I am the author of the aforementioned <code>conv</code> crate.</p>\n</blockquote>\n\n<ul>\n<li><code>ApproxFrom</code>/<code>ApproxInto</code>: values of one type can be converted to some other type via one or more approximation schemes.</li>\n<li><code>ValueFrom</code>/<code>ValueInto</code>: values of one type can <em>mostly</em> be converted without loss of information to some other type (<em>i.e.</em> there is a possibility of failure).</li>\n<li><code>TryFrom</code>/<code>TryInto</code>: values of one type can <em>potentially</em> be converted to some other type <em>somehow</em> (<em>i.e.</em> best-effort conversions).</li>\n</ul>\n\n<p>Depending on what you're trying to do, <code>ApproxFrom</code>/<code>ApproxInto</code> make the most sense for converting values (you may need to do rounding), with <code>AsMut</code>/<code>AsRef</code> being defensible if you're trying to do float\u2194integer tricks.</p>\n"}], "owner": {"reputation": 721, "user_id": 849083, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/35090cb157e7b2e7b5fed3a7bd5ab105?s=128&d=identicon&r=PG", "display_name": "David Williams", "link": "https://stackoverflow.com/users/849083/david-williams"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 858, "favorite_count": 0, "accepted_answer_id": 32677761, "answer_count": 1, "score": 2, "last_activity_date": 1442740935, "creation_date": 1442737995, "question_id": 32677388, "link": "https://stackoverflow.com/questions/32677388/how-can-i-overload-the-as-operator-for-custom-types", "title": "How can I overload the &#39;as&#39; operator for custom types?", "body": "<p>I have two simple classes representing four ints and four floats. I would like to overload the 'as' operator so that I can easily convert one to the other. This should be done by converting each of the elements individually. So far I have:</p>\n\n<pre><code>#[derive(Copy, Clone)]\npub struct i32x4 {\n    pub x: i32,\n    pub y: i32,\n    pub z: i32,\n    pub w: i32\n}\n\n#[derive(Copy, Clone)]\npub struct f32x4 {\n    pub x: f32,\n    pub y: f32,\n    pub z: f32,\n    pub w: f32\n}\n\nimpl f32x4 {    \n    pub fn as_i32x4(&amp;mut self) -&gt; i32x4 {\n        i32x4{x: self.x as i32, y: self.y as i32, z: self.z as i32, w: self.w as i32}\n    }\n}\n</code></pre>\n\n<p>This lets me do:</p>\n\n<pre><code>let mut f = f32x4{x: 0.0, y: 0.0, z: 0.0, w: 0.0};\nlet i = f.as_i32x4(); // &lt;-- Using my conversion function\n</code></pre>\n\n<p>But I want to do:</p>\n\n<pre><code>let mut f = f32x4{x: 0.0, y: 0.0, z: 0.0, w: 0.0};\nlet i = f as i32x4; // &lt;-- Using the 'as' operator\n</code></pre>\n\n<p>Which gives:</p>\n\n<blockquote>\n  <p>error: non-scalar cast: <code>simd::f32x4</code> as <code>simd::i32x4</code></p>\n</blockquote>\n\n<p>Is it possible to get the syntax I am hoping for? I found some traits (AsRef, AsMut, From, Into) in '<a href=\"https://doc.rust-lang.org/std/convert/index.html\" rel=\"nofollow\">std::convert</a>' but it's not quite clear to me if they are what I want?</p>\n\n<p>Thanks!</p>\n\n<p>P.S. I am aware there is real SIMD functionality in the pipeline, but it's not stable yet so I'm just working round/emulating this with my own classes. And learning, obviously ;-)</p>\n"}, {"tags": ["pipe", "rust", "iron"], "answers": [{"comments": [{"owner": {"reputation": 1906, "user_id": 38820, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/a572775f003705896160fa44c4d26291?s=128&d=identicon&r=PG", "display_name": "Wes", "link": "https://stackoverflow.com/users/38820/wes"}, "edited": false, "score": 0, "creation_date": 1442789913, "post_id": 32676709, "comment_id": 53215086, "body": "I get, &quot;the trait <code>iron::response::WriteBody</code> is not implemented for the type <code>Box&lt;pipe::PipeReader&gt;</code> [E0277]&quot; on the &quot;Box::new(Box::new(read))&quot;. <a href=\"https://gist.github.com/wezm/a45b751a62c44a878623\" rel=\"nofollow noreferrer\">I tried extracting the the inner box</a> but it then complains that, &quot;Send` is not implemented for the type <code>std::io::Read</code>&quot;."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 1906, "user_id": 38820, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/a572775f003705896160fa44c4d26291?s=128&d=identicon&r=PG", "display_name": "Wes", "link": "https://stackoverflow.com/users/38820/wes"}, "edited": false, "score": 0, "creation_date": 1442803347, "post_id": 32676709, "comment_id": 53217625, "body": "See my rewritten answer."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 1, "last_activity_date": 1442803323, "last_edit_date": 1442803323, "creation_date": 1442732216, "answer_id": 32676709, "question_id": 32676277, "link": "https://stackoverflow.com/questions/32676277/connect-function-that-takes-write-to-function-that-takes-read/32676709#32676709", "title": "Connect function that takes Write to function that takes Read", "body": "<p>You cannot use the <code>impl</code> for <code>Box&lt;Read&gt;</code> here, because Rust cannot guarantee that it implements <code>Send</code>. If you had a <code>Box&lt;Read + Send&gt;</code>, that would be the case, though. Unfortunately, while <code>Box&lt;Read&gt;</code> implements <code>WriteBody</code>, <code>Box&lt;Read + Send&gt;</code> does not, so you cannot use this type.</p>\n\n<p>Looking at the source code for <code>WriteBody</code> and its implementations, there is <a href=\"https://github.com/iron/iron/blob/8da9dc088f8b88c1c0505e27fa95979bf8d21104/src/response.rs#L80-L86\" rel=\"nofollow\">a commented out implementation</a> that would implement <code>WriteBody</code> for all types that implement <code>Read</code>, but it does not compile as of now (as the comment says, this requires specialization, which is hopefully coming to the language soon).</p>\n\n<p>You could submit a pull request to Iron to add an <code>impl</code> for <code>WriteBody</code> on <code>Box&lt;Read + Send&gt;</code>; then, you could use that type (<a href=\"http://is.gd/p9Twau\" rel=\"nofollow\">demo</a>). Another option is to define a wrapper struct for <code>PipeReader</code> and implement <code>WriteBody</code> yourself (possibly based on <a href=\"https://github.com/iron/iron/blob/8da9dc088f8b88c1c0505e27fa95979bf8d21104/src/response.rs#L74-L78\" rel=\"nofollow\">the implementation for <code>Box&lt;Read&gt;</code></a>).</p>\n"}, {"comments": [{"owner": {"reputation": 1906, "user_id": 38820, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/a572775f003705896160fa44c4d26291?s=128&d=identicon&r=PG", "display_name": "Wes", "link": "https://stackoverflow.com/users/38820/wes"}, "edited": false, "score": 0, "creation_date": 1442790752, "post_id": 32683495, "comment_id": 53215250, "body": "Thanks, that helped. A cursor was actually what I tried initially before trying the pipe but I had trouble working out how to populate the buffer. Looking at your code, turns out this is as simple as passing the buffer to the image save function and the then the populated buffer can simply be passed to Response::with and it all works: <a href=\"https://gist.github.com/wezm/acf394cdb6dad315589f\" rel=\"nofollow noreferrer\">gist.github.com/wezm/acf394cdb6dad315589f</a>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 0, "last_activity_date": 1442777957, "creation_date": 1442777957, "answer_id": 32683495, "question_id": 32676277, "link": "https://stackoverflow.com/questions/32676277/connect-function-that-takes-write-to-function-that-takes-read/32683495#32683495", "title": "Connect function that takes Write to function that takes Read", "body": "<p>If you are OK with buffering everything in memory (and I think that's what is already happening), you can just use a <code>Vec&lt;u8&gt;</code> plus a <a href=\"http://doc.rust-lang.org/std/io/struct.Cursor.html\" rel=\"nofollow\"><code>Cursor</code></a>:</p>\n\n<pre><code>use std::io::{self, Read, Write, Cursor};\nuse std::borrow::BorrowMut;\n\nfn writer&lt;W&gt;(mut w: W) -&gt; io::Result&lt;()&gt;\n    where W: Write\n{\n    writeln!(w, \"I am the writer\")\n}\n\nfn reader&lt;R&gt;(mut r: R) -&gt; io::Result&lt;String&gt;\n    where R: Read\n{\n    let mut s = String::new();\n    try!(r.read_to_string(&amp;mut s));\n    Ok(s)\n}\n\nfn inner_main() -&gt; io::Result&lt;()&gt; {\n    let mut buffer = vec![];\n\n    try!(writer(&amp;mut buffer));\n    let s = try!(reader(Cursor::new(buffer.borrow_mut())));\n\n    println!(\"Got &gt;&gt;{}&lt;&lt;\", s);\n\n    Ok(())\n}\n\nfn main() {\n    inner_main().unwrap();\n}\n</code></pre>\n\n<p><code>Cursor</code> keeps track of how far you are in a buffer, so that you always read or write without re-reading or overwriting existing data.</p>\n"}], "owner": {"reputation": 1906, "user_id": 38820, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/a572775f003705896160fa44c4d26291?s=128&d=identicon&r=PG", "display_name": "Wes", "link": "https://stackoverflow.com/users/38820/wes"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 106, "favorite_count": 0, "accepted_answer_id": 32676709, "answer_count": 2, "score": 3, "last_activity_date": 1442803323, "creation_date": 1442728626, "question_id": 32676277, "link": "https://stackoverflow.com/questions/32676277/connect-function-that-takes-write-to-function-that-takes-read", "title": "Connect function that takes Write to function that takes Read", "body": "<p>I am exploring the <a href=\"http://ironframework.io\" rel=\"nofollow\">Iron web framework for Rust</a> and have created a small handler that will read an image derived from the request URL, resize it and then deliver the result. From what I can tell an <a href=\"http://ironframework.io/doc/iron/response/struct.Response.html\" rel=\"nofollow\">Iron Response</a> can be built from a several different types, including types that implement the <a href=\"http://ironframework.io/doc/iron/response/trait.WriteBody.html\" rel=\"nofollow\">Read trait</a>.</p>\n\n<p>The <a href=\"http://www.piston.rs/image/image/enum.DynamicImage.html#method.save\" rel=\"nofollow\">save function</a> in the <a href=\"https://crates.io/crates/image\" rel=\"nofollow\">image crate</a> takes a type that implements the <a href=\"https://doc.rust-lang.org/stable/std/io/trait.Write.html\" rel=\"nofollow\">Write trait</a>.</p>\n\n<p>It feels like these two functions should be able to be hooked up such that the writer writes to a buffer that the reader reads from. I found the <a href=\"https://crates.io/crates/pipe\" rel=\"nofollow\">pipe crate</a>, which seems to implement this behaviour but I'm having trouble getting the <code>Read</code> end of the pipe into something that Iron will accept.</p>\n\n<p>A slightly simplified version of my function:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn artwork(req: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\n    let mut filepath = PathBuf::from(\"artwork/sample.png\");\n\n    let img = match image::open(&amp;filepath) {\n        Ok(img) =&gt; img,\n        Err(e) =&gt; return Err(IronError::new(e, status::InternalServerError))\n    };\n\n    let (mut read, mut write) = pipe::pipe();\n\n    thread::spawn(move || {\n        let thumb = img.resize(128, 128, image::FilterType::Triangle);\n        thumb.save(&amp;mut write, image::JPEG).unwrap();\n    });\n\n    let mut res = Response::new();\n    res.status = Some(iron::status::Ok);\n    res.body = Some(Box::new(read));\n\n    Ok(res)\n}\n</code></pre>\n\n<p>The error I'm receiving:</p>\n\n<pre><code>src/main.rs:70:21: 70:35 error: the trait `iron::response::WriteBody` is not implemented for the type `pipe::PipeReader` [E0277]\nsrc/main.rs:70     res.body = Some(Box::new(read));\n                                   ^~~~~~~~~~~~~~\n</code></pre>\n\n<p><a href=\"http://arcnmx.github.io/pipe-rs/pipe/struct.PipeReader.html\" rel=\"nofollow\">PipeReader</a> implements <code>Read</code> and <a href=\"http://ironframework.io/doc/iron/response/trait.WriteBody.html\" rel=\"nofollow\">WriteBody</a> is implemented for <code>Read</code> so I feel this should work. I also tried:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let reader: Box&lt;Read&gt; = Box::new(read);\n\nlet mut res = Response::new();\nres.status = Some(iron::status::Ok);\nres.body = Some(reader);\n</code></pre>\n\n<p>but this gives the error:</p>\n\n<pre><code>src/main.rs:72:21: 72:27 error: mismatched types:\n expected `Box&lt;iron::response::WriteBody + Send&gt;`,\n    found `Box&lt;std::io::Read&gt;`\n(expected trait `iron::response::WriteBody`,\n    found trait `std::io::Read`) [E0308]\nsrc/main.rs:72     res.body = Some(reader);\n                                   ^~~~~~\n</code></pre>\n\n<p>How can I hook up the <code>save</code> function to the Iron response body?</p>\n"}, {"tags": ["file-io", "rust"], "answers": [{"tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": true, "score": 24, "last_activity_date": 1442718732, "last_edit_date": 1442718732, "creation_date": 1442714956, "answer_id": 32675033, "question_id": 32674905, "link": "https://stackoverflow.com/questions/32674905/pass-string-to-function-taking-read-trait/32675033#32675033", "title": "Pass string to function taking Read trait", "body": "<p>To find out what implements a trait, go to <a href=\"https://doc.rust-lang.org/std/io/trait.Read.html#implementors\" rel=\"noreferrer\">the bottom of the page for that trait</a>.</p>\n\n<p>In this case, the most promising looking implementers are <code>&amp;'a [u8]</code> and <code>Cursor&lt;Vec&lt;u8&gt;&gt;</code>.</p>\n\n<p>You can obtain a <code>&amp;[u8]</code> from a <code>&amp;str</code> or <code>String</code> by calling <a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.as_bytes\" rel=\"noreferrer\"><code>as_bytes()</code></a>, taking note of automatic dereferencing and <a href=\"https://doc.rust-lang.org/std/ops/trait.Deref.html\" rel=\"noreferrer\"><code>Deref</code></a> on <code>String</code>s. Alternatively, you could use a byte literal if you are only using the ASCII subset.</p>\n"}], "owner": {"reputation": 152698, "user_id": 745, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/edf857d71f672d8f411ef6b8376316b8?s=128&d=identicon&r=PG", "display_name": "dbr", "link": "https://stackoverflow.com/users/745/dbr"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3410, "favorite_count": 2, "accepted_answer_id": 32675033, "answer_count": 1, "score": 14, "last_activity_date": 1442718732, "creation_date": 1442713174, "question_id": 32674905, "link": "https://stackoverflow.com/questions/32674905/pass-string-to-function-taking-read-trait", "title": "Pass string to function taking Read trait", "body": "<p>I want to call this function in a 3rd party library (<a href=\"https://github.com/eminence/xmltree-rs\" rel=\"noreferrer\">xmltree-rs</a>):</p>\n\n<pre><code>pub fn parse&lt;R: Read&gt;(r: R) -&gt; Element {\n</code></pre>\n\n<p>The expected use case is to give it a file, like so:</p>\n\n<pre><code>let e: Element = Element::parse(File::open(\"tests/data/01.xml\").unwrap());\n</code></pre>\n\n<p>However I have a <code>String</code> which I want to pass, vaguely like this:</p>\n\n<pre><code>xmltree::Element::parse(\"&lt;example&gt;blah&lt;/example&gt;\".to_owned());\n</code></pre>\n\n<p>However this, of course, gives an error:</p>\n\n<pre><code>error: the trait `std::io::Read` is not implemented for the type `collections::string::String` [E0277]\n</code></pre>\n\n<p>How would I do this, short of writing a temporary file? (e.g in Python I would use the <a href=\"https://docs.python.org/2/library/stringio.html#StringIO.StringIO\" rel=\"noreferrer\">StringIO module</a> to wrap the string in a file-like object)</p>\n"}, {"tags": ["struct", "reference", "rust", "lifetime"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 2, "last_activity_date": 1442717819, "creation_date": 1442717819, "answer_id": 32675305, "question_id": 32674398, "link": "https://stackoverflow.com/questions/32674398/trying-to-split-out-self-referential-data-into-a-seperate-struct/32675305#32675305", "title": "Trying to split out self-referential data into a seperate struct", "body": "<p>You can make it compile by forcing the <code>Cache</code> and the <code>Parent</code> to have the same lifetime by defining them in the same <code>let</code> binding.</p>\n\n<pre><code>fn main() {\n    let (cache, mut p);\n    cache = Cache { children: Vec::new() };\n    p = Parent { cache: RefCell::new(cache) };\n    let obj = p.create_object();\n\n    let c1 = Child { parent: &amp;p, data: 1 };\n    p.cache.borrow_mut().children.push(c1);\n}\n</code></pre>\n\n<p>Here, we're essentially declaring a destructured tuple and then initializing it. We cannot initialize the tuple directly on the <code>let</code> binding:</p>\n\n<pre><code>    let (cache, mut p) = (Cache { children: Vec::new() }, Parent { cache: RefCell::new(cache) });\n</code></pre>\n\n<p>because the initializer for <code>p</code> references <code>cache</code>, but that name is not defined until the end of the <code>let</code> statement. The separate initialization works because the compiler tracks which variables are initialized; if you swap the order of the assignments, you'll get a compiler error:</p>\n\n<pre><code>&lt;anon&gt;:31:38: 31:43 error: use of possibly uninitialized variable: `cache` [E0381]\n&lt;anon&gt;:31     p = Parent { cache: RefCell::new(cache) };\n</code></pre>\n"}], "owner": {"reputation": 1126, "user_id": 2046365, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/Fs6fE.jpg?s=128&g=1", "display_name": "neon64", "link": "https://stackoverflow.com/users/2046365/neon64"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 73, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1442717819, "creation_date": 1442707410, "last_edit_date": 1495542585, "question_id": 32674398, "link": "https://stackoverflow.com/questions/32674398/trying-to-split-out-self-referential-data-into-a-seperate-struct", "title": "Trying to split out self-referential data into a seperate struct", "body": "<p>I want to be able to store a struct called <code>Child</code> inside a <code>Parent</code>, where the <code>Child</code> contains a reference back to the parent.</p>\n\n<p>It works if I have the <code>Child</code> structs directly inside the parent like this:</p>\n\n<pre><code>struct Parent&lt;'s&gt; {\n    cache: RefCell&lt;Vec&lt;Child&lt;'s&gt;&gt;&gt;\n}\n</code></pre>\n\n<p>But if I move the <code>Vec</code> into a separate struct, then it will fail to compile with lifetime errors.</p>\n\n<pre><code>struct Parent&lt;'s&gt; {\n    cache: RefCell&lt;Cache&lt;'s&gt;&gt;\n}\n\nstruct Cache&lt;'s&gt; {\n    children: Vec&lt;Child&lt;'s&gt;&gt;\n}\n</code></pre>\n\n<p><strong>It is possible to make this example work with the separate structs?</strong></p>\n\n<p>Here's the <a href=\"http://is.gd/5BiZnj\" rel=\"nofollow noreferrer\">full working code</a>, which compiles fine. When move the <code>children</code> into the separate struct then it <a href=\"http://is.gd/Kpijfh\" rel=\"nofollow noreferrer\">fails</a>.</p>\n\n<p><strong>My analysis of the problem:</strong></p>\n\n<p>When <code>Parent</code> contains <code>children</code> directly, <code>'s</code> is the same lifetime as the scope of the <code>Parent</code> struct itself, thus I can call methods that take <code>&amp;'s self</code> on <code>Parent</code>.</p>\n\n<p>When <code>Parent</code> contains <code>Cache</code> which contains <code>children</code>, <code>'s</code> is the same lifetime as the scope of the <code>Cache</code> struct, which is created before <code>Parent</code>, thus it is impossible to call methods on <code>Parent</code> that take <code>&amp;'s self</code>. Attempting to do so gives the error</p>\n\n<pre><code>&lt;anon&gt;:33:15: 33:16 error: `p` does not live long enough\n&lt;anon&gt;:33     let obj = p.create_object();\n                        ^\n&lt;anon&gt;:30:48: 38:2 note: reference must be valid for the block suffix following statement 0 at 30:47...\n&lt;anon&gt;:30     let cache = Cache { children: Vec::new() }; // the lifetime `'s` is essentially from this line to the end of the program\n&lt;anon&gt;:31     let mut p = Parent { cache: RefCell::new(cache) }; // although the Parent instance was created here, 's still refers to the lifetime before it\n&lt;anon&gt;:32     // this fails because p doesn't live long enough\n&lt;anon&gt;:33     let obj = p.create_object();\n</code></pre>\n\n<p>I need a way of shortening <code>'s</code> to the scope of <code>Parent</code>, not the scope of the <code>Cache</code>.</p>\n\n<p><strong>Disclaimer:</strong>\nThis question is very similar to one I asked earlier (<a href=\"https://stackoverflow.com/questions/32579518/rust-lifetime-error-with-self-referencing-struct?noredirect=1#comment53014063_32579518\">https://stackoverflow.com/questions/32579518/rust-lifetime-error-with-self-referencing-struct?noredirect=1#comment53014063_32579518</a>) that was marked as duplicate. I've read through the answer and I believe I'm beyond that as I <strong>can</strong> get the lifetimes of references right (as shown in my first example). I'm asking this (now slightly different) question again because I now have a concrete example that works, and one that doesn't work. I'm sure that what can be done with one struct can be done with two, right?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 0, "creation_date": 1442692489, "post_id": 32672508, "comment_id": 53190802, "body": "Re 1: <code>&amp;str</code> is <code>Copy</code>, calling a method with <code>self</code> receiver will just copy the reference and not consume anything. (If you see <code>&amp;self</code> methods in standard library string methods, that&#39;s because those traits are implemented for <code>str</code>, not <code>&amp;str</code>)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1442710269, "post_id": 32672508, "comment_id": 53194803, "body": "Please note that you should only <a href=\"http://meta.stackexchange.com/questions/39223/one-post-with-multiple-questions-or-multiple-posts\">ask one question per question</a>"}], "answers": [{"comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 2, "creation_date": 1442724385, "post_id": 32674587, "comment_id": 53196927, "body": "I think you mean &quot;whoever owns either the trait <code>IntoIterator</code> or the type <code>&amp;str</code> decides to implement <code>IntoIterator</code> for <code>&amp;str</code>?&quot;.  In this example, there is already an implementation of <code>IntoChars</code> for <code>&amp;str</code>."}, {"owner": {"reputation": 5222, "user_id": 818420, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/6a3ae1214b4d2450f85a2039c38af7f1?s=128&d=identicon&r=PG", "display_name": "Toni C&#225;rdenas", "link": "https://stackoverflow.com/users/818420/toni-c%c3%a1rdenas"}, "edited": false, "score": 0, "creation_date": 1442768317, "post_id": 32674587, "comment_id": 53208407, "body": "So, if I understand correctly, although <i>currently</i> there is no conflict, Rust prevents this just in case in the future the &quot;owner&quot; of <code>&amp;str</code> decides to implement <code>IntoIterator&lt;Item = char&gt;</code> and provoke the conflict. Makes sense. Thanks!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1442756933, "last_edit_date": 1442756933, "creation_date": 1442709268, "answer_id": 32674587, "question_id": 32672508, "link": "https://stackoverflow.com/questions/32672508/take-any-type-that-can-yield-a-char-iterator-plus-str/32674587#32674587", "title": "Take any type that can yield a char iterator, plus &amp;str", "body": "<p>Let's look at your two implementations, which I've rewritten in the more verbose form:</p>\n\n<pre><code>impl&lt;T&gt; IntoChars for T\n    where T: IntoIterator&lt;Item = char&gt;\n\nimpl&lt;'a&gt; IntoChars for &amp;'a str\n</code></pre>\n\n<p>What should the compiler do when whoever owns either the trait <code>IntoIterator</code> or the type <code>&amp;str</code> decides to implement <code>IntoIterator</code> for <code>&amp;str</code>? All of the sudden, you'd have <em>conflicting implementations</em> for the same trait; There are two ways that <code>IntoChars</code> would be implemented for <code>&amp;str</code>.</p>\n\n<p>Other keywords for this problem are <em>trait coherence</em> and <em>orphan rules</em>.</p>\n\n<p>To be able to compile this, you'd need <a href=\"https://github.com/rust-lang/rfcs/pull/1210\" rel=\"nofollow\"><em>impl specialization</em></a>, which is an RFC that has not been accepted yet.</p>\n"}], "owner": {"reputation": 5222, "user_id": 818420, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/6a3ae1214b4d2450f85a2039c38af7f1?s=128&d=identicon&r=PG", "display_name": "Toni C&#225;rdenas", "link": "https://stackoverflow.com/users/818420/toni-c%c3%a1rdenas"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 105, "favorite_count": 0, "accepted_answer_id": 32674587, "answer_count": 1, "score": 1, "last_activity_date": 1442756933, "creation_date": 1442691961, "last_edit_date": 1442702696, "question_id": 32672508, "link": "https://stackoverflow.com/questions/32672508/take-any-type-that-can-yield-a-char-iterator-plus-str", "title": "Take any type that can yield a char iterator, plus &amp;str", "body": "<p>I want to write a function <code>tokenize</code> that takes <code>char</code>s from an iterator. Like this:</p>\n\n<pre><code>fn tokenize&lt;F: IntoIterator&lt;Item=char&gt;&gt;(file: F)\n</code></pre>\n\n<p>If I want to use a <code>&amp;str</code> with this function, I can do it like this:</p>\n\n<pre><code>tokenize(\"foo\".chars())\n</code></pre>\n\n<p>That works OK. </p>\n\n<p>Now, I'd like to avoid that <code>.chars()</code> specifically for type <code>&amp;str</code>, since I know that, if I'm given a <code>&amp;str</code>, I can make it what I want by calling <code>.chars()</code>.</p>\n\n<p>I tried declaring a new trait, <code>IntoChars</code>, and implement it for <code>&amp;str</code>:</p>\n\n<pre><code>trait IntoChars {\n    type T: Iterator&lt;Item=char&gt;;\n    fn into_chars(&amp;self) -&gt; Self::T;\n}\n\nimpl&lt;'a&gt; IntoChars for &amp;'a str {\n    type T = Chars&lt;'a&gt;;\n    fn into_chars(&amp;self) -&gt; Self::T {\n        self.chars()\n    }\n}\n</code></pre>\n\n<p>If then I make my function like this:</p>\n\n<pre><code>tokenize&lt;F: IntoChars&gt;(file: F)\n</code></pre>\n\n<p>it works. Nice! But I want to implement <code>IntoChars</code> also for <em>any</em> type that can give me chars, ie. is <code>IntoIterator&lt;Item=char&gt;</code>.</p>\n\n<pre><code>impl&lt;T: IntoIterator&lt;Item=char&gt;&gt; IntoChars for T {\n    type T = T::IntoIter;\n    fn into_chars(self) -&gt; Self::T {\n        self.into_iter()\n    }\n}\n</code></pre>\n\n<p>That doesn't work. For two reasons:</p>\n\n<ol>\n<li><code>IntoIter::into_iter</code> takes a <code>self</code>, but <code>IntoChars::into_chars</code> takes a <code>&amp;self</code>. This is specifically because I don't want to consume <code>&amp;str</code> when calling its <code>into_chars</code> method unnecessarily. Is there any way to achieve both?</li>\n<li>OK, let's say that I make <code>IntoChars::into_chars</code> take a <code>self</code>. This still doesn't work; I get: <code>error: conflicting implementations for trait `IntoChars` [E0119]</code>. But if I remove the <code>impl&lt;'a&gt; IntoChars for &amp;'a str</code>, I get <code>error: the trait `core::iter::Iterator` is not implemented for the type `&amp;str`</code>. Why is is conflicting then?</li>\n</ol>\n\n<p>Any way I can achieve this?</p>\n"}, {"tags": ["json", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1442709414, "post_id": 32670612, "comment_id": 53194643, "body": "Note that the Rust style is 4-space indents."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1442710220, "post_id": 32670612, "comment_id": 53194793, "body": "Could you explain why you did not also annotate <code>MyEnum</code> with <code>#[derive(RustcDecodable, RustcEncodable)]</code>? Could you also explain why you want to have the field <code>val3: BTreeMap&lt;i64, Json&gt;</code>, specifically what that might represent?"}, {"owner": {"user_type": "does_not_exist", "display_name": "user266003"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1442750984, "post_id": 32670612, "comment_id": 53202971, "body": "@Shepmaster, 1) Ok 2) no, I can&#39;t explain. I want just to solve it."}], "answers": [{"comments": [{"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 0, "creation_date": 1442779577, "post_id": 32671968, "comment_id": 53212187, "body": "It doesn&#39;t look ridiculous and awfully difficult to understand in the code example in the <a href=\"https://github.com/serde-rs/serde\" rel=\"nofollow noreferrer\">repo</a>... Maybe you have tried an older version with poor ergonomics?"}, {"owner": {"reputation": 1706, "user_id": 4255842, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/b0d7dfd98472547776f7d23112d000f5?s=128&d=identicon&r=PG&f=1", "display_name": "Pyfisch", "link": "https://stackoverflow.com/users/4255842/pyfisch"}, "reply_to_user": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 0, "creation_date": 1442855297, "post_id": 32671968, "comment_id": 53244727, "body": "Using serde is actually very simple. Writing a lib to support another format requires writing a lot of code but everything is really needed and serde feels well designed."}], "tags": [], "owner": {"reputation": 1706, "user_id": 4255842, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/b0d7dfd98472547776f7d23112d000f5?s=128&d=identicon&r=PG&f=1", "display_name": "Pyfisch", "link": "https://stackoverflow.com/users/4255842/pyfisch"}, "is_accepted": false, "score": 1, "last_activity_date": 1442688450, "creation_date": 1442688450, "answer_id": 32671968, "question_id": 32670612, "link": "https://stackoverflow.com/questions/32670612/fromjson-and-tojson-for-my-own-structure/32671968#32671968", "title": "FromJson and ToJson for my own structure", "body": "<p>Probably you shouldn't use rustc_serialize. It is not well designed and slow, only very few formats are supported. <a href=\"https://github.com/serde-rs/serde\" rel=\"nofollow\">Serde</a> is the recommended crate for serialization and deserialization. It works on on both stable and nightly.</p>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user266003"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 174, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1442688450, "creation_date": 1442680344, "question_id": 32670612, "link": "https://stackoverflow.com/questions/32670612/fromjson-and-tojson-for-my-own-structure", "title": "FromJson and ToJson for my own structure", "body": "<p>I can't make my struct encodable/decodable:</p>\n\n<pre><code>enum MyEnum {\n  Enum1,\n  Enum2,\n  Enum3,\n}\n\n#[derive(RustcDecodable, RustcEncodable)]\npub struct MyStruct {\n  val1: MyEnum,\n  val2: i32,\n  val3 : BTreeMap&lt;i64, Json&gt;,\n}\n</code></pre>\n\n<p>The errors are:</p>\n\n<pre><code>the trait `rustc_serialize::serialize::Decodable` is not implemented for the type `rustc_serialize::json::Json`\nthe trait `rustc_serialize::serialize::Decodable` is not implemented for the type `rustc_serialize::json::MyEnum`\n</code></pre>\n\n<p>I'm confused of what I need to implement? </p>\n\n<p>Instead of <code>RustcEncodable</code> I need to implement <code>ToJson#to_json</code>. \nBut what about <code>RustcDecodable</code>? There's no trait <code>FromJson#from_json</code></p>\n\n<p>In the documentation it says <code>rustc_serialize::Decodable/Encodable</code> \nBut would I need <code>Decodable</code> if there's <code>ToJson#to_json</code>?</p>\n\n<p>Anyway, the question is how to make my own struct encodable to and decodable from JSON? </p>\n"}, {"tags": ["rust", "githooks", "tty"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1442667386, "post_id": 32665889, "comment_id": 53182411, "body": "What kind of hook? There seems to be tricks with <a href=\"http://stackoverflow.com/q/3417896/155423\">commit message hooks</a>, for example."}], "answers": [{"comments": [{"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1442659881, "post_id": 32665985, "comment_id": 53180214, "body": "You should also possibly <code>thread::sleep(..)</code> a bit in your loop, otherwise this may busy-wait if the read_line doesn&#39;t block."}, {"owner": {"reputation": 2231, "user_id": 4465497, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/vibwv.png?s=128&g=1", "display_name": "XAMPPRocky", "link": "https://stackoverflow.com/users/4465497/xampprocky"}, "reply_to_user": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1442666913, "post_id": 32665985, "comment_id": 53182256, "body": "Like I said I&#39;ve never had it not block, on both windows and OSX. Also from the documentation it doesn&#39;t say that if it doesn&#39;t block once, it won&#39;t block the next time."}, {"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1442669735, "post_id": 32665985, "comment_id": 53183140, "body": "Fair enough, but nowhere does it guarantee that it will block at all. In that case, your program will just spin in the loop until someone kills it."}], "tags": [], "owner": {"reputation": 2231, "user_id": 4465497, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/vibwv.png?s=128&g=1", "display_name": "XAMPPRocky", "link": "https://stackoverflow.com/users/4465497/xampprocky"}, "is_accepted": false, "score": 2, "last_activity_date": 1442667594, "last_edit_date": 1442667594, "creation_date": 1442651009, "answer_id": 32665985, "question_id": 32665889, "link": "https://stackoverflow.com/questions/32665889/stdin-read-line-does-not-wait-for-user-input-when-called-from-a-git-hook/32665985#32665985", "title": "stdin read_line does not wait for user input when called from a git hook", "body": "<p>Are you testing the function on the <a href=\"https://play.rust-lang.org/\" rel=\"nofollow\">Rust Playground</a>? Running this program in a terminal seems to work fine. That being said, there is <strong>no guarantee</strong> that stdin will block, but you could change the function to check if the string is empty or not, and only return once it is isn't.</p>\n\n<pre><code>use std::io;\n\nfn main() {\n    println!(\"{:?}\", confirm());\n}\n\nfn confirm() -&gt; String {\n    loop {\n        let mut answer = String::new();\n\n        io::stdin().read_line(&amp;mut answer)\n                   .ok()\n                   .expect(\"Failed to read line\");\n\n        if !answer.is_empty() &amp;&amp; answer != \"\\n\" &amp;&amp; answer != \"\\r\\n\" {\n            return answer\n        }\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1442675453, "last_edit_date": 1495539907, "creation_date": 1442668425, "answer_id": 32668650, "question_id": 32665889, "link": "https://stackoverflow.com/questions/32665889/stdin-read-line-does-not-wait-for-user-input-when-called-from-a-git-hook/32668650#32668650", "title": "stdin read_line does not wait for user input when called from a git hook", "body": "<p>Assuming that the problem is that your git commit hook is running in an <a href=\"https://stackoverflow.com/q/3417896/155423\">non-interactive environment</a>, you can follow the advice laid out in that question and directly open <code>/dev/tty</code>. Unlike STDIN, we don't treat it as a magical global variable and instead we pass it into the places we need:</p>\n\n<pre><code>use std::io::{self, BufRead, BufReader};\nuse std::fs::File;\n\ntype Tty = BufReader&lt;File&gt;;\n\nfn open_tty() -&gt; io::Result&lt;Tty&gt; {\n    let f = try!(File::open(\"/dev/tty\"));\n    Ok(BufReader::new(f))\n}\n\nfn confirm(tty: &amp;mut Tty) -&gt; io::Result&lt;String&gt; {\n    let mut answer = String::new();\n    try!(tty.read_line(&amp;mut answer));\n    Ok(answer)\n}\n\nfn inner_main() -&gt; io::Result&lt;()&gt; {\n    let mut tty = try!(open_tty());\n    let answer = try!(confirm(&amp;mut tty));\n\n    println!(\"The answer was: {}\", answer);\n\n    Ok(())\n}\n\nfn main() {\n    inner_main().unwrap()\n}\n</code></pre>\n\n<p><strong>Note</strong> that this will not be platform independent. Specifically, this is very unlikely to work on Windows!</p>\n\n<p>I've also gone ahead and allowed the <code>io::Result</code> to propagate throughout the program, only panicking at the outermost shell.</p>\n"}], "owner": {"reputation": 213, "user_id": 995092, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/d8bb719c0436d573b607286db77c6262?s=128&d=identicon&r=PG", "display_name": "nicompte", "link": "https://stackoverflow.com/users/995092/nicompte"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1065, "favorite_count": 0, "accepted_answer_id": 32668650, "answer_count": 2, "score": 2, "last_activity_date": 1442675453, "creation_date": 1442650302, "last_edit_date": 1442675359, "question_id": 32665889, "link": "https://stackoverflow.com/questions/32665889/stdin-read-line-does-not-wait-for-user-input-when-called-from-a-git-hook", "title": "stdin read_line does not wait for user input when called from a git hook", "body": "<p>I'm an absolute Rust beginner trying to build a simple confirmation function (yes or no), but I can't get the user to type anything, the function just keeps looping without waiting for user input:</p>\n\n<pre><code>\"\"\n\"\"\n\"\"\netc.  \n</code></pre>\n\n<p>is the result of the simplified version below.</p>\n\n<pre><code>use std::process;\nuse std::io;\n\npub fn confirm() {\n  loop {\n    let mut answer = String::new();\n\n    io::stdin().read_line(&amp;mut answer)\n      .ok()\n      .expect(\"Failed to read line\");\n\n    println!(\"{:?}\", answer);\n  }\n}\n</code></pre>\n\n<p>I've built my function around the <a href=\"http://doc.rust-lang.org/book/guessing-game.html\" rel=\"nofollow\">guessing game</a> example, and the rest of my program does nothing much, just reading a file and printing text.</p>\n\n<p>Perhaps is due to the way my program (a git hook) is launched?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 1, "creation_date": 1442650727, "post_id": 32665878, "comment_id": 53177672, "body": "Have you tried using serde? <a href=\"https://github.com/serde-rs/serde\" rel=\"nofollow noreferrer\">github.com/serde-rs/serde</a>"}, {"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 1, "creation_date": 1442653026, "post_id": 32665878, "comment_id": 53178257, "body": "So why are you using RustcDecodable instead of Decodable?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1442667091, "post_id": 32665878, "comment_id": 53182309, "body": "Note that the Rust style is 4-space indents."}, {"owner": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "reply_to_user": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1442672303, "post_id": 32665878, "comment_id": 53184016, "body": "@llogiq, because in the documentation they use it"}, {"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1442672435, "post_id": 32665878, "comment_id": 53184066, "body": "@AlexanderSupertramp Not in the serde docs I linked above. But it doesn&#39;t matter. In fact looking into the auto-<code>derive</code> handling code, both are synonymous."}, {"owner": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "reply_to_user": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1442673776, "post_id": 32665878, "comment_id": 53184600, "body": "@llogiq, I&#39;m not talking about serde."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 8, "last_activity_date": 1442667079, "creation_date": 1442667079, "answer_id": 32668420, "question_id": 32665878, "link": "https://stackoverflow.com/questions/32665878/serializedecodable-is-not-implemented-for-the-type-str/32668420#32668420", "title": "serialize::Decodable is not implemented for the type `&amp;str`", "body": "<p>If you check out the documentation for <a href=\"http://doc.rust-lang.org/num/rustc_serialize/trait.Decodable.html\"><code>Decodable</code></a>, you can see a list of all the base types that can be decoded to. You'll notice that <code>&amp;str</code> is not in the list. This is the root cause of your error.</p>\n\n<p>Perusing that list shows that you can never decode to a borrowed type. <em>If</em> decoding to a string slice were possible, then the decoded struct would forever be tied to the lifetime of the input string and chances are that entire classes of decoders would become impossible \u2014 think of a decoder that directly reads from a file or a network stream, where the entire input data is never fully read in memory.</p>\n\n<p>To fix it, switch your struct to own the data:</p>\n\n<pre><code>#[derive(RustcDecodable)]\nstruct MyStruct {\n    aa: Option&lt;String&gt;,\n    bb: Option&lt;u64&gt;,\n}\n</code></pre>\n\n<p>Alternatively, you can use a <a href=\"http://doc.rust-lang.org/std/borrow/enum.Cow.html\"><code>Cow</code></a> to express that sometimes the data is owned, and sometimes it is borrowed:</p>\n\n<pre><code>#[derive(RustcDecodable)]\nstruct MyStruct&lt;'a&gt; {\n    aa: Option&lt;Cow&lt;'a, str&gt;&gt;,\n    bb: Option&lt;u64&gt;,\n}\n</code></pre>\n"}], "owner": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 480, "favorite_count": 0, "accepted_answer_id": 32668420, "answer_count": 1, "score": 1, "last_activity_date": 1442667079, "creation_date": 1442650262, "question_id": 32665878, "link": "https://stackoverflow.com/questions/32665878/serializedecodable-is-not-implemented-for-the-type-str", "title": "serialize::Decodable is not implemented for the type `&amp;str`", "body": "<p>I have a structure I want to be able to decode from json:</p>\n\n<pre><code>#[derive(RustcDecodable)]\nstruct MyStruct&lt;'a&gt; {\n  aa: Option&lt;&amp;'a str&gt;,\n  bb: Option&lt;u64&gt;,\n}\n</code></pre>\n\n<p>It doesn't compile:</p>\n\n<pre><code>error: the trait `rustc_serialize::serialize::Decodable` is not implemented for the type `&amp;str` [E0277]\nsrc/my_file.rs:31 #[derive(RustcDecodable)]\n</code></pre>\n\n<p>Why is that and how to fix it?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 4, "creation_date": 1442648005, "post_id": 32665342, "comment_id": 53177007, "body": "You&#39;re comparing a string to an integer."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 9, "creation_date": 1442665475, "post_id": 32665342, "comment_id": 53181790, "body": "Just read <a href=\"http://doc.rust-lang.org/book/guessing-game.html\" rel=\"nofollow noreferrer\">the documentation</a> for <b>one more paragraph</b> and it&#39;s explained: <i>Whew! This is a big error. The core of it is that we have \u2018mismatched types\u2019.</i>"}], "answers": [{"tags": [], "owner": {"reputation": 2231, "user_id": 4465497, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/vibwv.png?s=128&g=1", "display_name": "XAMPPRocky", "link": "https://stackoverflow.com/users/4465497/xampprocky"}, "is_accepted": false, "score": 0, "last_activity_date": 1442826213, "creation_date": 1442826213, "answer_id": 32691200, "question_id": 32665342, "link": "https://stackoverflow.com/questions/32665342/guessing-game-in-rust-1-3-0/32691200#32691200", "title": "guessing game in Rust 1.3.0", "body": "<p>User input from <code>stdin</code> is a String. While the number you got from <code>rand</code> is a <code>u32</code>. Try using <code>to_string</code> on <code>secret_number</code>.</p>\n\n<p><code>match guess.cmp(&amp;secret_number.to_string())\n</code></p>\n"}], "owner": {"reputation": 17, "user_id": 5352969, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/28b97dc75cc9111f1a1842199b9663c8?s=128&d=identicon&r=PG&f=1", "display_name": "yangbo", "link": "https://stackoverflow.com/users/5352969/yangbo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 231, "favorite_count": 0, "answer_count": 1, "score": -2, "last_activity_date": 1442826213, "creation_date": 1442646401, "last_edit_date": 1442647968, "question_id": 32665342, "link": "https://stackoverflow.com/questions/32665342/guessing-game-in-rust-1-3-0", "title": "guessing game in Rust 1.3.0", "body": "<p>The guessing game's problem</p>\n\n<pre><code>extern crate rand;\n\nuse std::io;\n\nuse std::cmp::Ordering;\n\nuse rand::Rng;\n\n\n\nfn main() {\n\n    println!(\"Guess the number!\");\n\n    let secret_number = rand::thread_rng().gen_range(1, 101);\n\n\n    println!(\"The secret number is: {}\", secret_number);\n\n    println!(\"Please input your guess.\");\n\n    let mut guess = String::new();\n\n    io::stdin().read_line(&amp;mut guess)\n        .ok()\n        .expect(\"failed to read line\");\n\n    println!(\"You guessed: {}\", guess);\n\n    match guess.cmp(&amp;secret_number) {\n        Ordering::Less    =&gt; println!(\"Too small!\"),\n        Ordering::Greater =&gt; println!(\"Too big!\"),\n        Ordering::Equal   =&gt; println!(\"You win!\"),\n    }\n}\n</code></pre>\n\n<p>But this is giving me an error:</p>\n\n<pre><code>src\\main.rs:26:21: 26:35 error: mismatched types:\n expected `&amp;collections::string::String`,\n    found `&amp;_`\n(expected struct `collections::string::String`,\n    found integral variable) [E0308]\nsrc\\main.rs:26     match guess.cmp(&amp;secret_number) {\n                                   ^~~~~~~~~~~~~~\n</code></pre>\n\n<p>What's causing this, and how can I fix it?</p>\n"}, {"tags": ["udp", "buffer", "rust", "mio"], "answers": [{"comments": [{"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "edited": false, "score": 0, "creation_date": 1442653713, "post_id": 32664849, "comment_id": 53178444, "body": "I&#39;ve run into this exact problem and ended up with the same solution, but I can&#39;t say that I like it, since this will break whenever <code>mio</code> updates its <code>bytes</code> dependency. I wonder if there is a more robust solution to this."}], "tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": true, "score": 2, "last_activity_date": 1442642705, "creation_date": 1442642705, "answer_id": 32664849, "question_id": 32663870, "link": "https://stackoverflow.com/questions/32663870/working-with-udp-using-mio-and-getting-an-error-mutbuf-is-not-implemented-for-t/32664849#32664849", "title": "Working with UDP using mio and getting an error &quot;MutBuf is not implemented for the type MutSliceBuf&quot;", "body": "<p>Using Cargo with</p>\n\n<pre><code>[dependencies]\nmio = \"*\"\nbytes = \"*\"\n</code></pre>\n\n<p>this runs for me. Using the Github dependency,</p>\n\n<pre><code>[dependencies.mio]\ngit = \"https://github.com/carllerche/mio.git\"\n</code></pre>\n\n<p>gives the error you mention.</p>\n\n<p>Strangely, version 0.4 depends on</p>\n\n<pre><code>bytes = \"0.2.11\"\n</code></pre>\n\n<p>whereas master depends on</p>\n\n<pre><code>git = \"https://github.com/carllerche/bytes\"\nrev = \"7edb577d0a\"\n</code></pre>\n\n<p>which is only version 0.2.10. Strange.</p>\n\n<p>The problem is that you end up getting <em>two</em> <code>bytes</code> dependencies compiled, so the error is more like</p>\n\n<pre><code>the trait `mio::bytes::buf::MutBuf` is not implemented for the type `self::bytes::buf::slice::MutSliceBuf&lt;'_&gt;`\n</code></pre>\n\n<p>The simplest way I see to fix this is to just use both packages from <code>crates.io</code>.</p>\n\n<pre><code>[dependencies]\nmio = \"*\"\nbytes = \"*\"\n</code></pre>\n\n<p>Another way is to use</p>\n\n<pre><code>[dependencies.bytes]\ngit = \"https://github.com/carllerche/bytes\"\nrev = \"7edb577d0a\"\n</code></pre>\n\n<p>in your own <code>Cargo.toml</code>, such that you share versions.</p>\n"}], "owner": {"reputation": 342, "user_id": 3234005, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/bb120170630529f0cbddede1e6d4576b?s=128&d=identicon&r=PG&f=1", "display_name": "user3234005", "link": "https://stackoverflow.com/users/3234005/user3234005"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 162, "favorite_count": 0, "accepted_answer_id": 32664849, "answer_count": 1, "score": 1, "last_activity_date": 1442642705, "creation_date": 1442633335, "question_id": 32663870, "link": "https://stackoverflow.com/questions/32663870/working-with-udp-using-mio-and-getting-an-error-mutbuf-is-not-implemented-for-t", "title": "Working with UDP using mio and getting an error &quot;MutBuf is not implemented for the type MutSliceBuf&quot;", "body": "<p>For learning purposes I am currently trying to write small program which will implement echo-server for UDP packets which will work on a certain set of ports (say 10000-60000). So as it wouldn't be so good to spam 50k threads for this I need to use asynchronous IO and mio is excellent match for this task. But I've got a problem right from the start with this code:</p>\n\n<pre><code>extern crate mio;\nextern crate bytes;\nuse mio::udp::*;\nuse bytes::MutSliceBuf;\n\nfn main() {\n    let addr = \"127.0.0.1:10000\".parse().unwrap();\n\n    let socket = UdpSocket::bound(&amp;addr).unwrap();\n\n    let mut buf = [0; 128];\n    socket.recv_from(&amp;mut MutSliceBuf::wrap(&amp;mut buf));\n}\n</code></pre>\n\n<p>It is almost full copypaste from of mio's test_udp_socket.rs.But while mio's tests successfully pass through, then I try to compile this code I am getting following error:</p>\n\n<pre><code>src/main.rs:12:12: 12:55 error: the trait `bytes::buf::MutBuf` is not implemented for the type `bytes::buf::slice::MutSliceBuf&lt;'_&gt;` [E0277]\nsrc/main.rs:12     socket.recv_from(&amp;mut MutSliceBuf::wrap(&amp;mut buf));\n                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nsrc/main.rs:12:12: 12:55 help: run `rustc --explain E0277` to see a detailed explanation\n</code></pre>\n\n<p>But examining code of src/buf/slice.rs from bytes crate (local copy of it too) we can clearly see what this trait was implemented:</p>\n\n<pre><code>impl&lt;'a&gt; MutBuf for MutSliceBuf&lt;'a&gt; {\n    fn remaining(&amp;self) -&gt; usize {\n        self.bytes.len() - self.pos\n    }\n\n    fn advance(&amp;mut self, mut cnt: usize) {\n        cnt = cmp::min(cnt, self.remaining());\n        self.pos += cnt;\n    }\n\n    unsafe fn mut_bytes&lt;'b&gt;(&amp;'b mut self) -&gt; &amp;'b mut [u8] {\n        &amp;mut self.bytes[self.pos..]\n    }\n}\n</code></pre>\n\n<p>It's probably something trivial, but I can't find it... What could be a problem which causes this error?</p>\n\n<p>I am using rustc 1.3.0 (9a92aaf19 2015-09-15), crates mio and bytes is gotten straight from github.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1442630406, "post_id": 32663478, "comment_id": 53173388, "body": "Note that the Rust style is 4-space indents."}, {"owner": {"reputation": 1154, "user_id": 2718447, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/beb3947f85f2dcb663e9566b48c60a1c?s=128&d=identicon&r=PG", "display_name": "anjruu", "link": "https://stackoverflow.com/users/2718447/anjruu"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1442630981, "post_id": 32663478, "comment_id": 53173493, "body": "@Shepmaster Didn&#39;t know that, thanks! That&#39;s going to be a little annoying to get used to... Guess it&#39;s finally time to figure out rustfmt."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 15, "last_activity_date": 1545278635, "last_edit_date": 1545278635, "creation_date": 1442630363, "answer_id": 32663590, "question_id": 32663478, "link": "https://stackoverflow.com/questions/32663478/do-copy-semantics-in-rust-literally-become-a-copy-in-memory/32663590#32663590", "title": "Do copy semantics in Rust literally become a copy in memory?", "body": "<blockquote>\n  <p>The question is what the emitted assembly does</p>\n</blockquote>\n\n<p>There's no need to guess; you can just look. Let's use this code:</p>\n\n<pre><code>use std::ops::Add;\n\n#[derive(Copy, Clone, Debug)]\nstruct Num(i32);\n\nimpl Add for Num {\n    type Output = Num;\n\n    fn add(self, rhs: Num) -&gt; Num {\n        Num(self.0 + rhs.0)\n    }\n}\n\n#[inline(never)]\nfn example() -&gt; Num {\n    let a = Num(0);\n    let b = Num(1);\n    let c = a + b;\n    let d = a + b;\n    c + d\n}\n\nfn main() {\n    println!(\"{:?}\", example());\n}\n</code></pre>\n\n<p>Paste it into the <a href=\"https://play.rust-lang.org/\" rel=\"nofollow noreferrer\">Rust Playground</a>, then select the Release mode and view the LLVM IR:</p>\n\n<p><img src=\"https://i.stack.imgur.com/ugbdC.png\" width=\"342\" alt=\"release mode\" />\n<img src=\"https://i.stack.imgur.com/qdjqX.png\" width=\"352\" alt=\"LLVM IR\"/></p>\n\n<p>Search through the result to see the definition of the <code>example</code> function:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>; playground::example\n; Function Attrs: noinline norecurse nounwind nonlazybind readnone uwtable\ndefine internal fastcc i32 @_ZN10playground7example17h60e923840d8c0cd0E() unnamed_addr #2 {\nstart:\n  ret i32 2\n}\n</code></pre>\n\n<p>That's right, this was completely and totally evaluated at compile time and simplified all the way down to a simple constant. Compilers are pretty good nowadays.</p>\n\n<p>Maybe you want to try something not quite as hardcoded?</p>\n\n<pre><code>#[inline(never)]\nfn example(a: Num, b: Num) -&gt; Num {\n    let c = a + b;\n    let d = a + b;\n    c + d\n}\n\nfn main() {\n    let something = std::env::args().count();\n    println!(\"{:?}\", example(Num(something as i32), Num(1)));\n}\n</code></pre>\n\n<p>Produces</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>; playground::example\n; Function Attrs: noinline norecurse nounwind nonlazybind readnone uwtable\ndefine internal fastcc i32 @_ZN10playground7example17h73d4138fe5e9856fE(i32 %a) unnamed_addr #3 {\nstart:\n  %0 = shl i32 %a, 1\n  %1 = add i32 %0, 2\n  ret i32 %1\n}\n</code></pre>\n\n<p>Oops, the compiler saw that we we basically doing (x + 1) * 2, so it did some tricky optimizations here to get to 2x + 2. Let's try something harder... </p>\n\n<pre><code>#[inline(never)]\nfn example(a: Num, b: Num) -&gt; Num {\n    a + b\n}\n\nfn main() {\n    let something = std::env::args().count() as i32;\n    let another = std::env::vars().count() as i32;\n    println!(\"{:?}\", example(Num(something), Num(another)));\n}\n</code></pre>\n\n<p>Produces</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>; playground::example\n; Function Attrs: noinline norecurse nounwind nonlazybind readnone uwtable\ndefine internal fastcc i32 @_ZN10playground7example17h73d4138fe5e9856fE(i32 %a, i32 %b) unnamed_addr #3 {\nstart:\n  %0 = add i32 %b, %a\n  ret i32 %0\n}\n</code></pre>\n\n<p>A simple <code>add</code> instruction. </p>\n\n<p>The real takeaway from this is:</p>\n\n<ol>\n<li>Look at the generated assembly for your cases. Even similar-looking code might optimize differently.</li>\n<li>Perform micro and macro benchmarking. You never know exactly how the code will play out in the big picture.  Maybe all your cache will be blown, but your micro benchmarks will be stellar.</li>\n</ol>\n\n<blockquote>\n  <p>is the Rust compiler smart enough to know that in this case, it's not necessary to do that copying?</p>\n</blockquote>\n\n<p>As you just saw, the Rust compiler <strong>plus</strong> LLVM are pretty smart. In general, it is <em>possible</em> to elide copies when it knows that the operand isn't needed. Whether it will work in your case or not is tough to answer.</p>\n\n<p>Even if it did, you might not want to be passing large items via the stack as it's always <em>possible</em> that it will need to be copied.</p>\n\n<p>And note that you don't have to implement copy for the value, you can choose to only allow it via references:</p>\n\n<pre><code>impl&lt;'a, 'b&gt; Add&lt;&amp;'b Num&gt; for &amp;'a Num {\n    type Output = Num;\n\n    fn add(self, rhs: &amp;'b Num) -&gt; Num {\n        Num(self.0 + rhs.0)\n    }\n}\n</code></pre>\n\n<p>In fact, you may want to implement both ways of adding them, and maybe all 4 permutations of value / reference!</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1442665729, "post_id": 32664563, "comment_id": 53181863, "body": "Great points! If OP&#39;s matrix is heap-allocated via <code>Vec</code>, then you cannot implement <code>Copy</code> for it anyway, so the problem solves itself."}], "tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": false, "score": 6, "last_activity_date": 1447219826, "last_edit_date": 1592644375, "creation_date": 1442640086, "answer_id": 32664563, "question_id": 32663478, "link": "https://stackoverflow.com/questions/32663478/do-copy-semantics-in-rust-literally-become-a-copy-in-memory/32664563#32664563", "title": "Do copy semantics in Rust literally become a copy in memory?", "body": "<blockquote>\n<p>If the Rust compiler isn't smart enough, and actually does the copying like a function with a argument passed by value in C++, how do you avoid the performance overhead in cases where it matters?</p>\n<p>The context is I am implementing a matrix class (just to learn), and if I have a 100x100 matrix, I really don't want to be invoking two copies every time I try to do a multiply or add.</p>\n</blockquote>\n<p><strong>All</strong> of Rust's implicit copies (be them from moves or actual <code>Copy</code> types) are a <strong>shallow</strong> <code>memcpy</code>. If you heap allocate, only the pointers and such are copied. Unlike C++, passing a vector by value will only copy three pointer-sized values.</p>\n<p>To copy heap memory, an explicit copy must be made, normally by calling <code>.clone()</code>, implemented with <code>#[derive(Clone)]</code> or <code>impl Clone</code>.</p>\n<p><a href=\"https://stackoverflow.com/a/31171431/1763356\">I've talked in more detail about this elsewhere.</a></p>\n<p>Shepmaster points out that shallow copies are often messed with a lot by the compiler - generally only heap memory and massive stack values cause problems.</p>\n"}], "owner": {"reputation": 1154, "user_id": 2718447, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/beb3947f85f2dcb663e9566b48c60a1c?s=128&d=identicon&r=PG", "display_name": "anjruu", "link": "https://stackoverflow.com/users/2718447/anjruu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 671, "favorite_count": 0, "accepted_answer_id": 32663590, "answer_count": 2, "score": 3, "last_activity_date": 1545278635, "creation_date": 1442629229, "last_edit_date": 1442629821, "question_id": 32663478, "link": "https://stackoverflow.com/questions/32663478/do-copy-semantics-in-rust-literally-become-a-copy-in-memory", "title": "Do copy semantics in Rust literally become a copy in memory?", "body": "<p>Let's say I have the following struct in Rust:</p>\n\n<pre><code>struct Num {\n  pub num: i32;\n}\n\nimpl Num {\n  pub fn new(x: i32) -&gt; Num {\n    Num { num: x }\n  }\n}\n\nimpl Clone for Num {\n  fn clone(&amp;self) -&gt; Num {\n    Num { num: self.num }\n  }\n}\n\nimpl Copy for Num { }\n\nimpl Add&lt;Num&gt; for Num {\n  type Output = Num;\n  fn add(self, rhs: Num) -&gt; Num {\n    Num { num: self.num + rhs.num }\n  }\n}\n</code></pre>\n\n<p>And then I have the following code snippet:</p>\n\n<pre><code>let a = Num::new(0);\nlet b = Num::new(1);\nlet c = a + b;\nlet d = a + b;\n</code></pre>\n\n<p>This works because <code>Num</code> is marked as <code>Copy</code>. Otherwise, the second addition would be a compilation error, since <code>a</code> and <code>b</code> had already been moved into the <code>add</code> function during the first addition (I think).</p>\n\n<p>The question is what the emitted assembly does. When the <code>add</code> function is called, are two copies of the arguments made into the new stack frame, or is the Rust compiler smart enough to know that in this case, it's not necessary to do that copying?</p>\n\n<p>If the Rust compiler isn't smart enough, and actually does the copying like a function with a argument passed by value in C++, how do you avoid the performance overhead in cases where it matters? </p>\n\n<p>The context is I am implementing a matrix class (just to learn), and if I have a 100x100 matrix, I really don't want to be invoking two copies every time I try to do a multiply or add.</p>\n"}, {"tags": ["rust", "ld-preload"], "comments": [{"owner": {"reputation": 13359, "user_id": 489590, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/e16b3d117fa188c4dbdafb8dc27a4df0?s=128&d=identicon&r=PG&f=1", "display_name": "Brian Cain", "link": "https://stackoverflow.com/users/489590/brian-cain"}, "edited": false, "score": 1, "creation_date": 1442612508, "post_id": 32661158, "comment_id": 53169280, "body": "I suspect <a href=\"http://stackoverflow.com/a/27826181/489590\">this and similar answers</a> will be satisfactory."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1442614701, "post_id": 32661158, "comment_id": 53170052, "body": "<i>lazy_static! doesn&#39;t allow for mutable structures</i> \u2014 just put a <code>Mutex</code> or equivalent in there. I updated the linked question with an example; you can mark this question as a duplicate of that one if it&#39;s good enough for you."}], "owner": {"reputation": 13359, "user_id": 489590, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/e16b3d117fa188c4dbdafb8dc27a4df0?s=128&d=identicon&r=PG&f=1", "display_name": "Brian Cain", "link": "https://stackoverflow.com/users/489590/brian-cain"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 35, "favorite_count": 0, "closed_date": 1442778106, "answer_count": 0, "score": 0, "last_activity_date": 1442614088, "creation_date": 1442611025, "last_edit_date": 1442614088, "question_id": 32661158, "link": "https://stackoverflow.com/questions/32661158/file-scope-mutable-static-hashset-vec-etc", "closed_reason": "Duplicate", "title": "file-scope mutable static HashSet/Vec/etc", "body": "<p>I'd like to create C-linkage functions to intercept my program's calls via <code>LD_PRELOAD</code> but I'm implementing the interception functions in Rust.</p>\n\n<p>I have no problem creating the <code>pub extern fn</code> to intercept the calls but I'd like to read/write from the program's global state somewhere since I can't alter the signature of the functions I'm intercepting to accept the metadata.  I don't need heap allocation necessarily, I could live with some large statically initialized pool of <code>HashSet</code> or <code>Vec</code> entries.  But I do need to be able to add and remove elements of the collection during the program's run.</p>\n\n<p>I recognize that this pattern is contrary to many Rust design goals and yet it seems like a legitimate use case to me.</p>\n\n<p>I'm brand new to Rust, so I'm hoping that there's an <code>unsafe</code> option out there to do this.</p>\n\n<p>If it's useful to see code examples:</p>\n\n<pre><code>static mut foo Vec&lt;c_int&gt; = Vec::new();\n</code></pre>\n\n<p>...fails because you can't have <code>static</code> storage that requires a destructor, or does heap allocations.  And <code>lazy_static!</code> doesn't allow for <code>mut</code>able structures.</p>\n\n<p>Ideally I'd prefer a <code>HashSet&lt;c_int&gt;</code>.  If I can't get that to work, I suppose I could try a <code>Vec::from_elem(100, 0)</code>.  That's not ideal since I'll need to nominate some kind of sentry value, but if it works I think I'd be satisfied.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1442582622, "post_id": 32652760, "comment_id": 53152815, "body": "Also of interest is this <a href=\"https://www.reddit.com/r/rust/comments/3fg0xr/how_do_i_find_the_max_value_in_a_vecf64/\" rel=\"nofollow noreferrer\">Reddit discussion</a>"}, {"owner": {"reputation": 1362, "user_id": 1349525, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/LXJ8Y.jpg?s=128&g=1", "display_name": "Dark_Daiver", "link": "https://stackoverflow.com/users/1349525/dark-daiver"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1442583378, "post_id": 32652760, "comment_id": 53153349, "body": "@Shepmaster solution from this post works for me but looks a little ugly =(  Should i delete my question?"}, {"owner": {"reputation": 1362, "user_id": 1349525, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/LXJ8Y.jpg?s=128&g=1", "display_name": "Dark_Daiver", "link": "https://stackoverflow.com/users/1349525/dark-daiver"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1442583771, "post_id": 32652760, "comment_id": 53153636, "body": "@Shepmaster One additional question - what about performance of our solution?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1442583856, "post_id": 32652760, "comment_id": 53153691, "body": "I wouldn&#39;t expect either solution to be drastically different from the other, performance-wise."}, {"owner": {"reputation": 1362, "user_id": 1349525, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/LXJ8Y.jpg?s=128&g=1", "display_name": "Dark_Daiver", "link": "https://stackoverflow.com/users/1349525/dark-daiver"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1442584011, "post_id": 32652760, "comment_id": 53153828, "body": "I just take NonNan struct from <a href=\"http://stackoverflow.com/a/28248065/1349525\">stackoverflow.com/a/28248065/1349525</a> add function val to unwrap float value and call it this way: v2.iter().map(|&amp;x| NonNan::new(x).unwrap()).max().unwrap().val()"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1442689472, "post_id": 32652760, "comment_id": 53189889, "body": "itertools&#39; <code>fold1</code> can help, but it&#39;s a bit method-noisy too: <code>.iter().cloned().fold1(f32::max).unwrap()</code>"}, {"owner": {"reputation": 1362, "user_id": 1349525, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/LXJ8Y.jpg?s=128&g=1", "display_name": "Dark_Daiver", "link": "https://stackoverflow.com/users/1349525/dark-daiver"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1442729230, "post_id": 32652760, "comment_id": 53197806, "body": "@bluss looks nice but my compiler (rustc 1.2.0) cannot find fold1 for iterator. But v2.iter().cloned().fold(v2[0], f32::max) works for me. If you want i can try to reopen question."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1442747477, "post_id": 32652760, "comment_id": 53201992, "body": "Right, it&#39;s not in std but in itertools, a separate crate."}, {"owner": {"reputation": 1362, "user_id": 1349525, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/LXJ8Y.jpg?s=128&g=1", "display_name": "Dark_Daiver", "link": "https://stackoverflow.com/users/1349525/dark-daiver"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1442755284, "post_id": 32652760, "comment_id": 53204145, "body": "@bluss I miss this. Everything seems to work. Thank you!"}], "owner": {"reputation": 1362, "user_id": 1349525, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/LXJ8Y.jpg?s=128&g=1", "display_name": "Dark_Daiver", "link": "https://stackoverflow.com/users/1349525/dark-daiver"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 890, "favorite_count": 0, "closed_date": 1442583686, "answer_count": 0, "score": 0, "last_activity_date": 1442582406, "creation_date": 1442581443, "last_edit_date": 1442582406, "question_id": 32652760, "link": "https://stackoverflow.com/questions/32652760/is-there-any-way-to-find-the-maximum-value-from-an-array-of-f32", "closed_reason": "Duplicate", "title": "Is there any way to find the maximum value from an array of f32?", "body": "<p>I am trying to take the maximum value from an array of <code>f32</code>:</p>\n\n<pre><code>let v: [f32; 5] = [1.0, 2.0, 3.0, 4.0, 5.0];    \nlet res = v.iter().max().unwrap();\n</code></pre>\n\n<p>But the trait <code>Ord</code> is not implemented for <code>f32</code> and I can't implement it because </p>\n\n<blockquote>\n  <p>only traits defined in the current crate can be implemented for arbitrary types [E0117] </p>\n</blockquote>\n\n<p>I know about <code>PartialOrd</code>, but I cannot figure out how to use it in this situation.</p>\n\n<p>I am sure that my collection is not empty and it does not contain <code>NaN</code> or infinity.</p>\n\n<p>Is there any way to take max value from a f32 collection except by writing own wrappers or an imperative function like this?</p>\n\n<pre><code>fn maxf32(arr: &amp;[f32; 5]) -&gt; f32 {\n    let mut res = arr[0];\n    for &amp;x in arr {\n        if x &gt; res {\n            res = x;\n        }\n    }\n    res\n}\n</code></pre>\n"}, {"tags": ["ssh", "rust"], "answers": [{"comments": [{"owner": {"reputation": 3031, "user_id": 576488, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/6394f70dd009d4d16bb2c969c82c2ff1?s=128&d=identicon&r=PG", "display_name": "SBSTP", "link": "https://stackoverflow.com/users/576488/sbstp"}, "edited": false, "score": 0, "creation_date": 1442599855, "post_id": 32644610, "comment_id": 53163222, "body": "The one you linked is a fork original is here: <a href=\"https://github.com/alexcrichton/ssh2-rs\" rel=\"nofollow noreferrer\">github.com/alexcrichton/ssh2-rs</a>"}], "tags": [], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "is_accepted": true, "score": 4, "last_activity_date": 1442608576, "last_edit_date": 1442608576, "creation_date": 1442554830, "answer_id": 32644610, "question_id": 32641699, "link": "https://stackoverflow.com/questions/32641699/connect-ssh-command-to-stdout/32644610#32644610", "title": "Connect SSH command to stdout", "body": "<p>You probably want to take a look at the <a href=\"https://github.com/alexcrichton/ssh2-rs\" rel=\"nofollow\">ssh2-rs</a> crate; the docs have a good <a href=\"http://alexcrichton.com/ssh2-rs/ssh2/index.html#run-a-command\" rel=\"nofollow\">example</a> of what you're trying to accomplish.</p>\n\n<p>The gist of it is that you get a <em>channel_session</em> object, which has methods to read the outputs from the SSH console (copied from the docs here):</p>\n\n<pre><code>let mut channel = sess.channel_session().unwrap();\nchannel.exec(\"ls\").unwrap();\nlet mut s = String::new();\nchannel.read_to_string(&amp;mut s).unwrap();\n</code></pre>\n"}], "owner": {"reputation": 78, "user_id": 2554579, "user_type": "registered", "profile_image": "https://graph.facebook.com/100001267298913/picture?type=large", "display_name": "Matthew Sullivan", "link": "https://stackoverflow.com/users/2554579/matthew-sullivan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1042, "favorite_count": 0, "accepted_answer_id": 32644610, "answer_count": 1, "score": 2, "last_activity_date": 1442804242, "creation_date": 1442533552, "last_edit_date": 1442804242, "question_id": 32641699, "link": "https://stackoverflow.com/questions/32641699/connect-ssh-command-to-stdout", "title": "Connect SSH command to stdout", "body": "<p>I am creating a command-line tool that dynamically finds a server from our cluster, then based on the cluster retrieves the appropriate private key held in an Amazon s3 bucket and copies it to a tempfile locally to connect to the server.</p>\n\n<p>How would I SSH into an IP address and then allow the user to interact with the SSH session?</p>\n\n<p>This example would open a ssh session to a machine in the cluster named \"platform\":</p>\n\n<pre><code>company_name ssh:platform\n</code></pre>\n\n<p>I've done this before in Ruby like so:</p>\n\n<pre><code>exec(\"ssh -i #{private_key_file.path} -R 52698:localhost:52698 core@#{platform_ip}\")\n</code></pre>\n"}, {"tags": ["compiler-construction", "rust", "rust-compiler-plugin"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1442544494, "post_id": 32643002, "comment_id": 53134226, "body": "Thanks! Unfortunately, I&#39;d like to be able to use this for types that I can&#39;t modify to add an annotation to, such as types in other crates or the standard library."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1442552911, "post_id": 32643002, "comment_id": 53136407, "body": "@Shepmaster: I wouldn&#39;t wait.  You just can&#39;t do what you&#39;re asking.  Generally, when I&#39;m writing macros to generate code that has to interact with other types, I either have many variations of the macro to deal with different types, or just pass the necessary information in to the macro by hand."}], "tags": [], "owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "is_accepted": true, "score": 4, "last_activity_date": 1442544178, "last_edit_date": 1495539943, "creation_date": 1442544178, "answer_id": 32643002, "question_id": 32641466, "link": "https://stackoverflow.com/questions/32641466/when-writing-a-syntax-extension-can-i-look-up-information-about-types-other-tha/32643002#32643002", "title": "When writing a syntax extension, can I look up information about types other than the annotated type?", "body": "<p>Type information is not available for a syntax extensions. They are available to lint plugins.</p>\n\n<p>However, you can write another decorator for your <code>impl Monster</code> to get the type by yourself.</p>\n\n<p>For instance:</p>\n\n<pre><code>#![feature(plugin_registrar, rustc_private)]\n\nextern crate rustc;\nextern crate syntax;\n\nuse rustc::plugin::Registry;\nuse syntax::ast::MetaItem;\nuse syntax::ast::Item_::ItemImpl;\nuse syntax::ast::MetaItem_::{MetaList, MetaWord};\nuse syntax::codemap::Span;\nuse syntax::ext::base::{Annotatable, ExtCtxt};\nuse syntax::ext::base::Annotatable::Item;\nuse syntax::ext::base::SyntaxExtension::MultiDecorator;\nuse syntax::parse::token::intern;\n\nuse std::collections::hash_map::HashMap;\nuse std::collections::hash_set::HashSet;\nuse std::mem;\n\ntype Structs = HashMap&lt;String, HashSet&lt;String&gt;&gt;;\n\nfn singleton() -&gt; &amp;'static mut Structs {\n    static mut hash_set: *mut Structs = 0 as *mut Structs;\n\n    let set: Structs = HashMap::new();\n    unsafe {\n        if hash_set == 0 as *mut Structs {\n            hash_set = mem::transmute(Box::new(set));\n        }\n        &amp;mut *hash_set\n    }\n}\n\nfn expand_attack(cx: &amp;mut ExtCtxt, sp: Span, meta_item: &amp;MetaItem, _: &amp;Annotatable, _: &amp;mut FnMut(Annotatable)) {\n    let structs = singleton();\n    if let MetaList(_, ref items) = meta_item.node {\n        if let MetaWord(ref word) = items[0].node {\n            let struct_name = word.to_string();\n            if let Some(ref methods) = structs.get(&amp;struct_name) {\n                if let Some(method_name) = methods.iter().next() {\n                    cx.span_warn(sp, &amp;format!(\"{}.{}()\", struct_name, method_name));\n                    // TODO: generate the impl.\n                }\n            }\n        }\n    }\n}\n\nfn expand_register(_: &amp;mut ExtCtxt, _: Span, _: &amp;MetaItem, item: &amp;Annotatable, _: &amp;mut FnMut(Annotatable)) {\n    let mut structs = singleton();\n\n    if let &amp;Annotatable::Item(ref item) = item {\n        let name = item.ident.to_string();\n        if let ItemImpl(_, _, _, _, _, ref items) = item.node {\n            let mut methods = HashSet::new();\n            for item in items {\n                methods.insert(item.ident.to_string());\n            }\n            structs.insert(name, methods);\n        }\n    }\n}\n\n#[plugin_registrar]\npub fn plugin_register(reg: &amp;mut Registry) {\n    reg.register_syntax_extension(intern(\"attack\"), MultiDecorator(Box::new(expand_attack)));\n    reg.register_syntax_extension(intern(\"register\"), MultiDecorator(Box::new(expand_register)));\n}\n</code></pre>\n\n<p>And then, you can use it:</p>\n\n<pre><code>#[register]\nimpl Monster {\n    fn health(&amp;self) -&gt; u8 { self.health }\n}\n</code></pre>\n\n<p>This is similar to what I did in this <a href=\"https://stackoverflow.com/questions/32555589/is-there-a-clean-way-to-have-a-global-mutable-state-in-a-rust-plugin\">question</a> and I am still looking for a better way to share this global mutable state (<code>singleton</code>).</p>\n"}], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 163, "favorite_count": 1, "accepted_answer_id": 32643002, "answer_count": 1, "score": 3, "last_activity_date": 1442590275, "creation_date": 1442532016, "last_edit_date": 1442590275, "question_id": 32641466, "link": "https://stackoverflow.com/questions/32641466/when-writing-a-syntax-extension-can-i-look-up-information-about-types-other-tha", "title": "When writing a syntax extension, can I look up information about types other than the annotated type?", "body": "<p>I would like to write a syntax extension that combines information from a related type when generating a new function. As a nonsense example, pretend I have this code:</p>\n\n<pre><code>struct Monster {\n    health: u8,\n}\n\nimpl Monster {\n    fn health(&amp;self) { self.health }\n}\n\n#[attack(Monster)]\nstruct Player {\n    has_weapon: true,\n}\n</code></pre>\n\n<p>I'd like the <code>attack</code> attribute to be expanded to a function that knows about the methods of <code>Monster</code>. A simple example would be</p>\n\n<pre><code>impl Player {\n    fn attack_monster(m: &amp;Monster) {\n        println!(\"{}\", m.health());\n    }\n}\n</code></pre>\n\n<p>Specifically, I'd like to be able to get the function signatures of the inherent methods of a type. I'd also be OK with being able to the function signatures of a trait. The important distinction is that my extension does <strong>not</strong> know ahead of time which type or trait to look up - it would be provided by the user as an argument to the annotation.</p>\n\n<p>I currently have a syntax extension that decorates a type, as I want to add methods. To that end, I have implemented a <code>MultiItemDecorator</code>. After looking at the parameters to the <code>expand</code> function, I've been unable to figure out any way of looking up a type or a trait, only ways of generating brand-new types or traits:</p>\n\n<pre><code>trait MultiItemDecorator {\n    fn expand(&amp;self,\n              ctx: &amp;mut ExtCtxt,\n              sp: Span,\n              meta_item: &amp;MetaItem,\n              item: &amp;Annotatable,\n              push: &amp;mut FnMut(Annotatable));\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 1, "creation_date": 1442525688, "post_id": 32634634, "comment_id": 53129313, "body": "Irrelevant nit: <code>peek</code> returns <code>Option&lt;&amp;String&gt;</code> so the pattern <code>Some(ref e)</code> needlessly makes <code>e: &amp;&amp;String</code>. Just write <code>Some(e)</code>."}], "answers": [{"tags": [], "owner": {"reputation": 918, "user_id": 388040, "user_type": "registered", "accept_rate": 63, "profile_image": "https://www.gravatar.com/avatar/de1ad56f8a7b7167491f7f07f66013d9?s=128&d=identicon&r=PG", "display_name": "Kreisquadratur", "link": "https://stackoverflow.com/users/388040/kreisquadratur"}, "is_accepted": false, "score": 9, "last_activity_date": 1501591741, "last_edit_date": 1501591741, "creation_date": 1442505489, "answer_id": 32634902, "question_id": 32634634, "link": "https://stackoverflow.com/questions/32634634/how-can-i-peek-into-a-vector-and-pop-if-a-condition-is-met/32634902#32634902", "title": "How can I peek into a vector and pop if a condition is met?", "body": "<p>Borrows are lexical, so <code>v</code> has the life-time of the whole function. If one can reduce the scope, one can use <code>last()</code> and <code>pop()</code>. One way to do this is a functional-style map:</p>\n\n<pre><code>let mut v: Vec&lt;String&gt; = vec![\"foo\".to_string()];\nif v.last().map_or(false, check) {\n    v.pop()\n} else {\n    None\n}\n</code></pre>\n"}], "owner": {"reputation": 918, "user_id": 388040, "user_type": "registered", "accept_rate": 63, "profile_image": "https://www.gravatar.com/avatar/de1ad56f8a7b7167491f7f07f66013d9?s=128&d=identicon&r=PG", "display_name": "Kreisquadratur", "link": "https://stackoverflow.com/users/388040/kreisquadratur"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3002, "favorite_count": 1, "answer_count": 1, "score": 9, "last_activity_date": 1501591741, "creation_date": 1442504673, "last_edit_date": 1501591714, "question_id": 32634634, "link": "https://stackoverflow.com/questions/32634634/how-can-i-peek-into-a-vector-and-pop-if-a-condition-is-met", "title": "How can I peek into a vector and pop if a condition is met?", "body": "<p>I want to retrieve an element from a vector if a condition on that element is true.</p>\n\n<pre><code>fn draw() -&gt; Option&lt;String&gt; {\n    let mut v: Vec&lt;String&gt; = vec![\"foo\".to_string()];\n    let t: Option&lt;String&gt;;\n    let o = v.last();\n\n    // t and v are actually a fields in a struct\n    // so their lifetimes will continue outside of draw().\n\n    match o {\n        Some(ref e) =&gt; {\n            if check(e) {\n                t = v.pop();\n                t.clone()\n            } else {\n                None\n            }\n        }\n        None =&gt; None,\n    }\n}\n\nfn check(e: &amp;String) -&gt; bool {\n    true\n}\n\nfn main() {}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=2f10be4f48247026a508f3e6679b533f&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a></p>\n\n<p>This results in the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n  --&gt; src/main.rs:12:21\n   |\n4  |     let o = v.last();\n   |             - immutable borrow occurs here\n...\n12 |                 t = v.pop();\n   |                     ^ mutable borrow occurs here\n...\n20 | }\n   | - immutable borrow ends here\n</code></pre>\n\n<p>Which I sort of understand, however I don't see a way to end the borrow (without using <code>clone()</code>).</p>\n"}, {"tags": ["rust", "rust-compiler-plugin"], "answers": [{"comments": [{"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1442589370, "post_id": 32628403, "comment_id": 53157518, "body": "What about: <a href=\"https://internals.rust-lang.org/t/pre-rfc-stablized-syntax-extensions-sort-of/2259/12\" rel=\"nofollow noreferrer\">internals.rust-lang.org/t/&hellip;</a> ? Was there an effort to allow syntax extension exporting?"}, {"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "reply_to_user": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1442591916, "post_id": 32628403, "comment_id": 53159160, "body": "Yes, but it seems to be a) stalled, and b) severely limited."}], "tags": [], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "is_accepted": true, "score": 7, "last_activity_date": 1442486639, "creation_date": 1442486639, "answer_id": 32628403, "question_id": 32627051, "link": "https://stackoverflow.com/questions/32627051/running-compiler-plugins-on-stable/32628403#32628403", "title": "Running compiler plugins on stable", "body": "<p>Not yet; compiler plugins rely on an <code>unstable</code> API that is very much in flux. While it's impossible to foretell when the APIs stabilize, I think we'll see a good number of Rust versions before those APIs can be declared stable.</p>\n\n<p>A good workaround for things that only need ASTs is to use <a href=\"https://crates.io/crates/syntex_syntax\" rel=\"noreferrer\">syntex</a> and build your own program independent of rustc.</p>\n"}], "owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 531, "favorite_count": 0, "accepted_answer_id": 32628403, "answer_count": 1, "score": 6, "last_activity_date": 1442486639, "creation_date": 1442482620, "question_id": 32627051, "link": "https://stackoverflow.com/questions/32627051/running-compiler-plugins-on-stable", "title": "Running compiler plugins on stable", "body": "<p>The thing I'm trying to make requires plugin compiler, because I need error reporting at compile time, however I'd like for it to run on Rust stable and not just nightly.</p>\n\n<p>Is there a way to run compiler plugins on stable Rust?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 2496, "user_id": 117361, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0c0319b9236bfd4b39af7729ff99383a?s=128&d=identicon&r=PG&f=1", "display_name": "andygavin", "link": "https://stackoverflow.com/users/117361/andygavin"}, "edited": false, "score": 0, "creation_date": 1442500972, "post_id": 32626513, "comment_id": 53115252, "body": "Thanks. Do you have an example of the crate macros?"}, {"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "reply_to_user": {"reputation": 2496, "user_id": 117361, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0c0319b9236bfd4b39af7729ff99383a?s=128&d=identicon&r=PG&f=1", "display_name": "andygavin", "link": "https://stackoverflow.com/users/117361/andygavin"}, "edited": false, "score": 1, "creation_date": 1442519650, "post_id": 32626513, "comment_id": 53126240, "body": "@andygavin No, sorry, I haven&#39;t actually used it yet. But <a href=\"https://danielkeep.github.io/rust-custom-derive/doc/custom_derive/index.html\" rel=\"nofollow noreferrer\">the docs</a> have an example."}], "tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": true, "score": 12, "last_activity_date": 1486076457, "last_edit_date": 1486076457, "creation_date": 1442480945, "answer_id": 32626513, "question_id": 32626316, "link": "https://stackoverflow.com/questions/32626316/is-it-possible-to-add-your-own-derivable-traits-or-are-these-fixed-by-the-compi/32626513#32626513", "title": "Is it possible to add your own derivable traits, or are these fixed by the compiler?", "body": "<p>A small number of derivable traits are <a href=\"https://github.com/rust-lang/rust/blob/1.15.0/src/libsyntax_ext/deriving/mod.rs#L333-L358\" rel=\"noreferrer\">hard-coded in the compiler</a>. </p>\n\n<p>Rust 1.15 stabilized <a href=\"https://doc.rust-lang.org/stable/book/procedural-macros.html\" rel=\"noreferrer\">procedural macros</a> which allow for the creation of custom <code>derive</code> attributes. If you need to support stable versions of Rust before 1.15, there is a <a href=\"https://crates.io/crates/custom_derive\" rel=\"noreferrer\">crate</a> that uses macro hackery to derive custom traits.</p>\n"}, {"tags": [], "owner": {"reputation": 2159, "user_id": 2570866, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/719063be2f6f7ca6be51df7833a26c25?s=128&d=identicon&r=PG", "display_name": "JelteF", "link": "https://stackoverflow.com/users/2570866/jeltef"}, "is_accepted": false, "score": 5, "last_activity_date": 1486063467, "last_edit_date": 1486063467, "creation_date": 1485773366, "answer_id": 41934011, "question_id": 32626316, "link": "https://stackoverflow.com/questions/32626316/is-it-possible-to-add-your-own-derivable-traits-or-are-these-fixed-by-the-compi/41934011#41934011", "title": "Is it possible to add your own derivable traits, or are these fixed by the compiler?", "body": "<p>The release of Rust 1.15 allows custom traits to be derived. They easiest way to do this is by using the <a href=\"https://github.com/dtolnay/syn\" rel=\"nofollow noreferrer\">syn</a> and <a href=\"https://github.com/dtolnay/quote\" rel=\"nofollow noreferrer\">quote</a> crates. </p>\n"}], "owner": {"reputation": 2496, "user_id": 117361, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0c0319b9236bfd4b39af7729ff99383a?s=128&d=identicon&r=PG&f=1", "display_name": "andygavin", "link": "https://stackoverflow.com/users/117361/andygavin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2520, "favorite_count": 3, "accepted_answer_id": 32626513, "answer_count": 2, "score": 10, "last_activity_date": 1486076457, "creation_date": 1442480245, "last_edit_date": 1485785053, "question_id": 32626316, "link": "https://stackoverflow.com/questions/32626316/is-it-possible-to-add-your-own-derivable-traits-or-are-these-fixed-by-the-compi", "title": "Is it possible to add your own derivable traits, or are these fixed by the compiler?", "body": "<p>The <code>derive</code> attribute allows certain traits to be automatically implemented for data structures. The reference gives the example:</p>\n\n<pre><code>#[derive(PartialEq, Clone)]\nstruct Foo&lt;T&gt; {\n   a: i32,\n   b: T\n}\n</code></pre>\n\n<p>Is it possible to add your own derivable traits, or are these fixed by the compiler?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 5, "creation_date": 1442487564, "post_id": 32626391, "comment_id": 53106630, "body": "It&#39;s probably worth explaining why the error occurs and why the modified code fixes it."}, {"owner": {"reputation": 4408, "user_id": 154680, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/1fe5646f7071126187fbda8c68c526f6?s=128&d=identicon&r=PG", "display_name": "russoue", "link": "https://stackoverflow.com/users/154680/russoue"}, "edited": false, "score": 0, "creation_date": 1442505289, "post_id": 32626391, "comment_id": 53118232, "body": "Thanks. Doest the lifetime have to be <code>static</code> in this case?"}, {"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "reply_to_user": {"reputation": 4408, "user_id": 154680, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/1fe5646f7071126187fbda8c68c526f6?s=128&d=identicon&r=PG", "display_name": "russoue", "link": "https://stackoverflow.com/users/154680/russoue"}, "edited": false, "score": 1, "creation_date": 1442511681, "post_id": 32626391, "comment_id": 53121860, "body": "@russoue Yes. The point of this bound is that the trait object cannot be allowed to outlive anything it references. The <code>&#39;static</code> bound means that the object cannot have any non-static references."}, {"owner": {"reputation": 4408, "user_id": 154680, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/1fe5646f7071126187fbda8c68c526f6?s=128&d=identicon&r=PG", "display_name": "russoue", "link": "https://stackoverflow.com/users/154680/russoue"}, "edited": false, "score": 0, "creation_date": 1442521855, "post_id": 32626391, "comment_id": 53127433, "body": "@fjh Thanks. If I understood it correctly, having the <code>static</code> lifetime means an object lives as long as the program runs. In that case, how do I add an <code>Account</code> to the vector which has longer lifetime than an instance of <code>Accounts</code> but shorter than <code>static</code>? Is it not possible?"}, {"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "reply_to_user": {"reputation": 4408, "user_id": 154680, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/1fe5646f7071126187fbda8c68c526f6?s=128&d=identicon&r=PG", "display_name": "russoue", "link": "https://stackoverflow.com/users/154680/russoue"}, "edited": false, "score": 1, "creation_date": 1442523143, "post_id": 32626391, "comment_id": 53128081, "body": "@russoue I&#39;m actually not sure. It might be possible by adding a lifetime parameter to <code>Accounts</code>. I&#39;m a bit out of my depth here and I&#39;m not near a computer so I can&#39;t experiment right now. I&#39;ll play around with it later and let you know if I find out."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 4, "creation_date": 1442523171, "post_id": 32626391, "comment_id": 53128095, "body": "<code>&#39;static</code> does not mean &quot;an object lives as long as the program&quot;. In trait bounds <code>&#39;static</code> (or any other lifetime bound) means that the type must not contain references with lifetimes shorter than the specified one. Note that <i>absence</i> of references qualifies too - therefore, every type which does not contain references inside it (or, in other words, which does not have any type parameters) satisfies any lifetime bound."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1442649543, "post_id": 32626391, "comment_id": 53177393, "body": "Oh, I made a silly mistake, sorry. Of course, &quot;type parameters&quot; should be read as &quot;lifetime parameters&quot;."}], "tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": true, "score": 3, "last_activity_date": 1442480539, "creation_date": 1442480539, "answer_id": 32626391, "question_id": 32625583, "link": "https://stackoverflow.com/questions/32625583/parameter-type-may-not-live-long-enough/32626391#32626391", "title": "Parameter type may not live long enough", "body": "<p>The compiler's suggestion actually works. If you write <code>add_account</code> as follows:</p>\n\n<pre><code>fn add_account&lt;A: Account + 'static&gt;(&amp;mut self, account: A) {\n    self.accounts.push(Box::new(account));\n}\n</code></pre>\n\n<p>your code compiles. (Incidentally, you need <code>&amp;mut self</code>, not <code>&amp;self</code> here)</p>\n"}, {"comments": [{"owner": {"reputation": 3480, "user_id": 2686821, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/5dd46afe4f5a75f2667569582b20ac9b?s=128&d=identicon&r=PG&f=1", "display_name": "soupybionics", "link": "https://stackoverflow.com/users/2686821/soupybionics"}, "edited": false, "score": 2, "creation_date": 1514532454, "post_id": 32644068, "comment_id": 83007063, "body": "Could you please elaborate on what you mean by <code>Vec&lt;Box&lt;Account&gt;&gt; in this context is equivalent to Vec&lt;Box&lt;Account + &#39;static&gt;&gt;</code> ?  I mean, what in the code above indicates that it is equivalent to <code>Vec&lt;Box&lt;Account + &#39;static&gt;&gt;</code> ?"}, {"owner": {"reputation": 1987, "user_id": 5278682, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/34509cba2b4d128dce294dcf5092d300?s=128&d=identicon&r=PG&f=1", "display_name": "Eli Friedman", "link": "https://stackoverflow.com/users/5278682/eli-friedman"}, "reply_to_user": {"reputation": 3480, "user_id": 2686821, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/5dd46afe4f5a75f2667569582b20ac9b?s=128&d=identicon&r=PG&f=1", "display_name": "soupybionics", "link": "https://stackoverflow.com/users/2686821/soupybionics"}, "edited": false, "score": 3, "creation_date": 1514658411, "post_id": 32644068, "comment_id": 83043482, "body": "Every trait object has an associated lifetime; if you don&#39;t specify a lifetime, the compiler infers it using some simple rules.  <a href=\"https://doc.rust-lang.org/book/second-edition/ch19-02-advanced-lifetimes.html#trait-object-lifetimes\" rel=\"nofollow noreferrer\">doc.rust-lang.org/book/second-edition/&hellip;</a> has a general description; <a href=\"https://github.com/rust-lang/rfcs/blob/8ee535b4fcc8bb22c121ad19a36414f1259397c0/text/0599-default-object-bound.md\" rel=\"nofollow noreferrer\">github.com/rust-lang/rfcs/blob/&hellip;</a> has the rationale."}], "tags": [], "owner": {"reputation": 1987, "user_id": 5278682, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/34509cba2b4d128dce294dcf5092d300?s=128&d=identicon&r=PG&f=1", "display_name": "Eli Friedman", "link": "https://stackoverflow.com/users/5278682/eli-friedman"}, "is_accepted": false, "score": 10, "last_activity_date": 1442551759, "creation_date": 1442551759, "answer_id": 32644068, "question_id": 32625583, "link": "https://stackoverflow.com/questions/32625583/parameter-type-may-not-live-long-enough/32644068#32644068", "title": "Parameter type may not live long enough", "body": "<p>I'll try to give a more thorough answer: the issue has to do with the definition of the <code>accounts</code> member of <code>Accounts</code>.  <code>Vec&lt;Box&lt;Account&gt;&gt;</code> in this context is equivalent to <code>Vec&lt;Box&lt;Account + 'static&gt;&gt;</code>, i.e. the box can't contain any references to data on the stack.  On the other hand, the declaration of <code>add_account</code> doesn't restrict the lifetime of the type: it's equivalent to <code>fn add_account&lt;'a, A: Account + 'a&gt;(&amp;self, account: A) {</code>.</p>\n\n<p>The solution is to make sure the type A lives long enough.  The simplest approach is to just add the <code>A: 'static</code> bound suggested in the error message (<code>fn add_account&lt;A: Account + 'static&gt;(&amp;self, account: A) {</code>).</p>\n\n<p>If you don't want to copy the Account data, you can do something more complicated, like this:</p>\n\n<pre><code>struct Accounts&lt;'a&gt; {\n    accounts: Vec&lt;&amp;'a Account + 'a&gt;\n}\n\nimpl&lt;'a&gt; Accounts&lt;'a&gt; {\n    fn new() -&gt; Accounts&lt;'a&gt; {\n        Accounts { accounts: Vec::new() }\n    }\n\n    fn add_account&lt;A: Account + 'a&gt;(&amp;mut self, account: &amp;'a A) {\n        self.accounts.push(Box::new(account));\n    }\n}\n</code></pre>\n\n<p>At this point, though, you have a data structure which is probably more general than you actually need.</p>\n"}], "owner": {"reputation": 4408, "user_id": 154680, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/1fe5646f7071126187fbda8c68c526f6?s=128&d=identicon&r=PG", "display_name": "russoue", "link": "https://stackoverflow.com/users/154680/russoue"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2718, "favorite_count": 1, "accepted_answer_id": 32626391, "answer_count": 2, "score": 3, "last_activity_date": 1512749065, "creation_date": 1442478012, "last_edit_date": 1512749065, "question_id": 32625583, "link": "https://stackoverflow.com/questions/32625583/parameter-type-may-not-live-long-enough", "title": "Parameter type may not live long enough", "body": "<p>I have a simple program where I am trying to implement a polymorphic account type:</p>\n\n<pre><code>enum AccountType {\n    INVALID,\n    TYPE1,\n    TYPE2,\n}\n\ntrait Account {\n    fn get_name(&amp;self) -&gt; String;\n    fn get_type(&amp;self) -&gt; AccountType;\n}\n\nstruct Accounts {\n    accounts: Vec&lt;Box&lt;Account&gt;&gt;,\n}\n\nimpl Accounts {\n    fn new() -&gt; Accounts {\n        let accs: Vec&lt;Box&lt;Account&gt;&gt; = Vec::new();\n        Accounts { accounts: accs }\n    }\n\n    fn add_account&lt;A: Account&gt;(&amp;self, account: A) {\n        self.accounts.push(Box::new(account));\n    }\n}\n\nfn main() {\n    let accounts = Accounts::new();\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=2c29133bb6a525d955d35bff96a5feea&amp;version=stable\" rel=\"nofollow noreferrer\">Rust Playground</a>)</p>\n\n<p>When I compile it, I see the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0310]: the parameter type `A` may not live long enough\n  --&gt; src/main.rs:23:28\n   |\n22 |     fn add_account&lt;A: Account&gt;(&amp;self, account: A) {\n   |                    -- help: consider adding an explicit lifetime bound `A: 'static`...\n23 |         self.accounts.push(Box::new(account));\n   |                            ^^^^^^^^^^^^^^^^^\n   |\nnote: ...so that the type `A` will meet its required lifetime bounds\n  --&gt; src/main.rs:23:28\n   |\n23 |         self.accounts.push(Box::new(account));\n   |                            ^^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>I have tried adding lifetimes to the type but could not find the right way to do it. Please let me know if this is not the right way to do polymorphism in Rust.</p>\n"}, {"tags": ["compiler-errors", "rust", "rust-cargo"], "comments": [{"owner": {"reputation": 91, "user_id": 5344643, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-xTf85D1lDqI/AAAAAAAAAAI/AAAAAAAABXM/vF9r8Glznf4/photo.jpg?sz=128", "display_name": "Vin&#237;cios Freitas", "link": "https://stackoverflow.com/users/5344643/vin%c3%adcios-freitas"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1442455766, "post_id": 32621383, "comment_id": 53093273, "body": "I&#39;ve added the informations on the post, thanks for your concern!"}, {"owner": {"reputation": 91, "user_id": 5344643, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-xTf85D1lDqI/AAAAAAAAAAI/AAAAAAAABXM/vF9r8Glznf4/photo.jpg?sz=128", "display_name": "Vin&#237;cios Freitas", "link": "https://stackoverflow.com/users/5344643/vin%c3%adcios-freitas"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1442456846, "post_id": 32621383, "comment_id": 53093512, "body": "Thanks @Shepmaster! Building the Cargo.lock again solved the issue, the reference for &#39;num&#39; in the old one was indeed for an older version."}], "answers": [{"comments": [{"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "edited": false, "score": 1, "creation_date": 1442508655, "post_id": 32621772, "comment_id": 53120211, "body": "Small note: cargo update updates all crates, cargo update -p crate upgrades that particular crate, which might be safer."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1442457488, "creation_date": 1442457488, "answer_id": 32621772, "question_id": 32621383, "link": "https://stackoverflow.com/questions/32621383/cargo-fails-to-compile-num/32621772#32621772", "title": "Cargo fails to compile &#39;num&#39;", "body": "<h3>The short answer</h3>\n\n<p>Your Cargo.lock file contains a reference to an old version of a crate (a <strong>very</strong> old one, in this case). Run <code>cargo update</code> to get the newest version.</p>\n\n<h3>Why</h3>\n\n<p>When building your code, you communicate your desired version restrictions to Cargo using the <strong>Cargo.toml</strong> file. This lets you say things like \"at least this version\" or \"only this exact version\" or \"any bug fix to this version\".</p>\n\n<p>Cargo takes your restrictions and the currently available versions and computes the newest set of versions that fits or tells you if it couldn't. It then saves all of that data into the <strong>Cargo.lock</strong> file.</p>\n\n<p>The Cargo.lock file sticks around so that versions of libraries aren't changing willy-nilly under you. You can run <code>cargo update</code> to redo the process and get the newest versions.</p>\n\n<p>If you are producing a library, that's where the story ends. If you are producing a binary, you should check in the lockfile to source control, as that's how you communicate to other users of the code exactly what versions should be used. When you deploy releases of your code, you can then be sure that the same versions are being used in production as development.</p>\n"}], "owner": {"reputation": 91, "user_id": 5344643, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-xTf85D1lDqI/AAAAAAAAAAI/AAAAAAAABXM/vF9r8Glznf4/photo.jpg?sz=128", "display_name": "Vin&#237;cios Freitas", "link": "https://stackoverflow.com/users/5344643/vin%c3%adcios-freitas"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 203, "favorite_count": 0, "accepted_answer_id": 32621772, "answer_count": 1, "score": 1, "last_activity_date": 1442457488, "creation_date": 1442454496, "last_edit_date": 1442455645, "question_id": 32621383, "link": "https://stackoverflow.com/questions/32621383/cargo-fails-to-compile-num", "title": "Cargo fails to compile &#39;num&#39;", "body": "<p>I'm trying to use the crate 'num' in my project in Rust (I'm a total newbie to this language), so my Cargo.toml is now:</p>\n\n<pre><code>[package]\n\nname = \"hello_world\"\nversion = \"0.0.1\"\nauthors = [ \"Vini\" ]\n\n[dependencies]\n\ntime = \"*\"\nnum = \"*\"\n</code></pre>\n\n<p>but when I run:</p>\n\n<pre><code>cargo run\n</code></pre>\n\n<p>I get this compile error:</p>\n\n<pre><code>/.cargo/registry/src/github.com-0a35038f75765ae4/num-0.0.6/src/bigint.rs:66:16: 66:19 error: expected identifier, found keyword `mod`\n\n/.cargo/registry/src/github.com-0a35038f75765ae4/num-0.0.6/src/bigint.rs:66 use std::str::{mod, FromStr};\n\n                                                                                           ^~~\n\n/.cargo/registry/src/github.com-0a35038f75765ae4/num-0.0.6/src/bigint.rs:80:27: 80:28 error: expected one of `(`, `+`, `::`, `;`, `&lt;`, or `]`, found `,`\n\n/.cargo/registry/src/github.com-0a35038f75765ae4/num-0.0.6/src/bigint.rs:80 static ZERO_VEC: [BigDigit, ..1] = [ZERO_BIG_DIGIT];\n                                                                                                      ^\nCould not compile `num`.\n</code></pre>\n\n<p>I have no idea what this actually means, am I using cargo wrong? Is this version of 'num' incompatible with cargo?</p>\n\n<p>I have cargo version:</p>\n\n<pre><code>cargo 0.4.0-nightly (15b497b 2015-07-08) (built 2015-07-10)\n</code></pre>\n\n<p>and rust compiler:</p>\n\n<pre><code>rustc 1.2.0 (082e47636 2015-08-03)\n</code></pre>\n"}]