[{"tags": ["rust", "ffi"], "answers": [{"comments": [{"owner": {"reputation": 1479, "user_id": 4450817, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/566922fb80a38c57d6a0db0be0f42f3b?s=128&d=identicon&r=PG&f=1", "display_name": "Vaelden", "link": "https://stackoverflow.com/users/4450817/vaelden"}, "edited": false, "score": 0, "creation_date": 1425555734, "post_id": 28869557, "comment_id": 46015946, "body": "Oh I didn&#39;t think about that, thanks! Though if I am correct malloc has a pretty dumb realloc function, that just does a malloc / copy / free whereas jemalloc can realloc in place. So a growable type implemented in malloc could imply several copies during reallocations, which means that it might be both more convenient and faster to use a classic String, and then do a single malloc / copy. I guess I will need to do some tests!"}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1425595679, "post_id": 28869557, "comment_id": 46039572, "body": "Or you might use a rope and malloc later. Crates.io have a couple ropes."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1425596700, "post_id": 28869557, "comment_id": 46040025, "body": "@ArtemGr wouldn&#39;t a rope involve allocations on the Rust side, thus requiring a second allocation via malloc later?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1479, "user_id": 4450817, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/566922fb80a38c57d6a0db0be0f42f3b?s=128&d=identicon&r=PG&f=1", "display_name": "Vaelden", "link": "https://stackoverflow.com/users/4450817/vaelden"}, "edited": false, "score": 0, "creation_date": 1425611712, "post_id": 28869557, "comment_id": 46044472, "body": "@Vaelden I don&#39;t think that <code>realloc</code> has a &quot;dumb&quot; implementation, and it&#39;s probably hard to globally characterize <code>realloc</code> - it wouldn&#39;t surprise me if every platform has different implementations, and you can always do some linker trickery to replace <code>malloc</code> and friends with a custom library at runtime. I agree that profiling is the right solution if you are that worried about performance though!"}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1425687184, "post_id": 28869557, "comment_id": 46078719, "body": "@Shepmaster Sure. It&#39;s the most efficient way to build a string, though, since it avoids the copying during the realloc. There is a curious comment here - <a href=\"https://github.com/servo/servo/wiki/Workweek-encoding\" rel=\"nofollow noreferrer\">github.com/servo/servo/wiki/Workweek-encoding</a> - &quot;<i>kmc: Does SM use ropes? zwarich: Everyone does.</i>&quot;  ; ) Not to mention that it&#39;s more memory-efficient that way, avoiding any prolonged use of the extra memory at the end of the buffer."}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1425688687, "post_id": 28869557, "comment_id": 46079085, "body": "Forgot to mention that to simply build a string a deque might be even better than a rope. But then it&#39;s more low-level implementing string building over a deque, a rope already has the right methods. Come to think of it, a large string might be build over an mmap memory, though it becames a trade-off choosing a large-enough memory size unless there&#39;s &quot;huge pages&quot; or something. The mmap address might then be passed to C as is."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1425526691, "creation_date": 1425526691, "answer_id": 28869557, "question_id": 28866103, "link": "https://stackoverflow.com/questions/28866103/c-library-freeing-a-pointer-coming-from-rust/28869557#28869557", "title": "C library freeing a pointer coming from Rust", "body": "<p>It might require some annoying work on your part, but what about exposing a type that implements <a href=\"http://doc.rust-lang.org/std/io/trait.Write.html\" rel=\"nofollow\"><code>Write</code></a>, but is backed by memory allocated via <code>malloc</code>? Then, your client can use the <code>write!</code> macro (and friends) instead of allocating a <code>String</code>.</p>\n\n<p>Here's how it currently works with <code>Vec</code>:</p>\n\n<pre><code>let mut v = Vec::new();\nwrite!(&amp;mut v, \"hello, world\");\n</code></pre>\n\n<p>You would \"just\" need to implement the two methods and then you would have a stream-like interface. </p>\n"}], "owner": {"reputation": 1479, "user_id": 4450817, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/566922fb80a38c57d6a0db0be0f42f3b?s=128&d=identicon&r=PG&f=1", "display_name": "Vaelden", "link": "https://stackoverflow.com/users/4450817/vaelden"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1161, "favorite_count": 2, "accepted_answer_id": 28869557, "answer_count": 1, "score": 3, "last_activity_date": 1425526691, "creation_date": 1425507237, "last_edit_date": 1425512197, "question_id": 28866103, "link": "https://stackoverflow.com/questions/28866103/c-library-freeing-a-pointer-coming-from-rust", "title": "C library freeing a pointer coming from Rust", "body": "<p>I want to do Rust bindings to a C library which requires a callback, and this callback must return a C-style <code>char*</code> pointer to the C library which will then free it.\nThe callback must be in some sense exposed to the user of my library (probably using closures), and I want to provide a Rust interface as convenient as possible (meaning accepting a <code>String</code> output if possible).</p>\n\n<p>However, the C library complains when trying to <code>free()</code> a pointer coming from memory allocated by Rust, probably because Rust uses jemalloc and the C library uses malloc.</p>\n\n<p>So currently I can see two workarounds using <code>libc::malloc()</code>, but both of them have disadvantages:</p>\n\n<ul>\n<li>Give the user of the library a slice that he must fill (inconvenient, and imposes length restrictions)</li>\n<li>Take his <code>String</code> output, copy it to an array allocated by malloc, and then free the <code>String</code> (useless copy and allocation)</li>\n</ul>\n\n<p>Can anybody see a better solution?</p>\n\n<p>Here is an equivalent of the interface of the C library, and the implementation of the ideal case (if the C library could free a String allocated in Rust)</p>\n\n<pre><code>extern crate libc;\nuse std::ffi::CString;\nuse libc::*;\nuse std::mem;\n\nextern \"C\" {\n    // The second parameter of this function gets passed as an argument of my callback\n    fn need_callback(callback: extern fn(arbitrary_data: *mut c_void) -&gt; *mut c_char,\n                     arbitrary_data: *mut c_void);\n}\n\n// This function must return a C-style char[] that will be freed by the C library\nextern fn my_callback(arbitrary_data: *mut c_void) -&gt; *mut c_char {\n    unsafe {\n        let mut user_callback: *mut &amp;'static mut FnMut() -&gt; String = mem::transmute(arbitrary_data); //'\n        let user_string = (*user_callback)();\n        let c_string = CString::new(user_string).unwrap();\n        let ret: *mut c_char = mem::transmute(c_string.as_ptr());\n        mem::forget(c_string); // To prevent deallocation by Rust\n        ret\n    }\n}\n\npub fn call_callback(mut user_callback: &amp;mut FnMut() -&gt; String) {\n    unsafe {\n        need_callback(my_callback, mem::transmute(&amp;mut user_callback));\n    }\n}\n</code></pre>\n\n<p>The C part would be equivalent to this:</p>\n\n<pre><code>#include &lt;stdlib.h&gt;\ntypedef char* (*callback)(void *arbitrary_data);\nvoid need_callback(callback cb, void *arbitrary_data) {\n    char *user_return = cb(arbitrary_data);\n    free(user_return); // Complains as the pointer has been allocated with jemalloc\n}\n</code></pre>\n"}, {"tags": ["enums", "pattern-matching", "rust"], "answers": [{"tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": false, "score": 5, "last_activity_date": 1425472643, "creation_date": 1425472643, "answer_id": 28854712, "question_id": 28851989, "link": "https://stackoverflow.com/questions/28851989/how-can-i-pattern-match-a-vect-inside-an-enum-field-without-nesting-matches/28854712#28854712", "title": "How can I pattern-match a Vec&lt;T&gt; inside an enum field without nesting matches?", "body": "<p>It's not possible to do this directly, unfortunately. However, there is desire to possibly add \"<code>Deref</code> patterns\", which would allow pattern matching through any types which implement <code>Deref</code> or <code>DerefMut</code>, e.g. one could match on the <code>T</code> inside a <code>Box&lt;T&gt;</code>, or on the <code>[T]</code> \"inside\" a <code>Vec&lt;T&gt;</code>.</p>\n"}], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 315, "favorite_count": 0, "answer_count": 1, "score": 5, "last_activity_date": 1425479181, "creation_date": 1425464676, "last_edit_date": 1425479181, "question_id": 28851989, "link": "https://stackoverflow.com/questions/28851989/how-can-i-pattern-match-a-vect-inside-an-enum-field-without-nesting-matches", "title": "How can I pattern-match a Vec&lt;T&gt; inside an enum field without nesting matches?", "body": "<p>Pattern-matching a <code>Vec&lt;T&gt;</code> can be done by using either <code>&amp;v[..]</code> or <code>v.as_slice()</code>.</p>\n\n<pre><code>let x = vec![1, 2, 3];\nmatch &amp;x[..] {\n    [] =&gt; println!(\"empty\"),\n    [_] =&gt; println!(\"one\"),\n    [..] =&gt; println!(\"many\"),\n}\n</code></pre>\n\n<p>If I have an enum with a field that contains the <code>Vec</code> I want to match on, I need to create a nested match inside the outer match arm:</p>\n\n<pre><code>enum Test {\n    Many(Vec&lt;u8&gt;),\n    Text(String),\n}\n\nfn main() {\n    let x = Test::Many(vec![1, 2, 3]);\n    match x {\n        Test::Text(s) =&gt; println!(\"{}\", s),\n        Test::Many(v) =&gt; match &amp;v[..] {\n            [] =&gt; println!(\"empty\"),\n            [_] =&gt; println!(\"one\"),\n            [..] =&gt; println!(\"many\"),\n        }\n    }\n}\n</code></pre>\n\n<p>What I would like to be able to do, is to match directly on the <code>Vec</code> as in the following example:</p>\n\n<pre><code>match x {\n    Test::Text(s) =&gt; println!(\"{}\", s),\n    Test::Many([]) =&gt; println!(\"empty\"),\n    Test::Many([_]) =&gt; println!(\"one\"),\n    Test::Many([..]) =&gt; println!(\"many\"),\n}\n</code></pre>\n\n<p>I am guessing it was possible before <a href=\"https://github.com/rust-lang/rust/pull/12244/files#diff-ca04b724f2df29e92436ba8d2e09e18bL12\" rel=\"nofollow\">unique vectors got removed</a>? Or am I missing some magic using <code>ref</code> that can solve this?</p>\n"}, {"tags": ["concurrency", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1425478993, "post_id": 28848814, "comment_id": 45979637, "body": "For pedantry and terminology&#39;s sake, <code>&amp;T</code> is a <i>reference</i> to a <code>T</code>. Rust also has <code>*T</code>, which is a <i>raw pointer</i>, which is why it&#39;s useful to disambiguate the terms."}, {"owner": {"reputation": 3753, "user_id": 4936, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/a4852818d512c2ed472bdb0ec3e21102?s=128&d=identicon&r=PG", "display_name": "ujh", "link": "https://stackoverflow.com/users/4936/ujh"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1425479657, "post_id": 28848814, "comment_id": 45980067, "body": "Thanks, I&#39;ve updated the question to use reference instead of pointer."}], "answers": [{"tags": [], "owner": {"reputation": 1296, "user_id": 110080, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d1f1c20467562fc1d8c8aa0d328def62?s=128&d=identicon&r=PG", "display_name": "Skade", "link": "https://stackoverflow.com/users/110080/skade"}, "is_accepted": true, "score": 3, "last_activity_date": 1425455306, "creation_date": 1425455306, "answer_id": 28849048, "question_id": 28848814, "link": "https://stackoverflow.com/questions/28848814/dynamic-dispatch-and-threads/28849048#28849048", "title": "Dynamic dispatch and threads", "body": "<p>The reason is that any S1 is <code>Sync</code>, but T doesn't carry that information. You have to make sure that <code>pointer</code> is <code>Sync</code> even in the absence of the info that it is S1. There are multiple ways to do this:</p>\n\n<p>Make the trait always <code>Sync</code>:</p>\n\n<pre><code>trait T : Sync {\n    fn func(&amp;self);\n}\n</code></pre>\n\n<p>Make the Pointer <code>T+Sync</code>:</p>\n\n<pre><code>fn main() {\n    let pointer: &amp;(T + Sync) = &amp;S1::new();\n    thread::scoped(|| pointer );\n}\n</code></pre>\n\n<p>Use the actual type as the type of the pointer, either by stating it or by inference (this doesn't fit the question, but I want to document it for clarity):</p>\n\n<pre><code>fn main() {\n    let pointer: &amp;S1 = &amp;S1::new();\n    thread::scoped(|| pointer );\n}\n\nfn main() {\n    let pointer = &amp;S1::new();\n    thread::scoped(|| pointer );\n}\n</code></pre>\n"}], "owner": {"reputation": 3753, "user_id": 4936, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/a4852818d512c2ed472bdb0ec3e21102?s=128&d=identicon&r=PG", "display_name": "ujh", "link": "https://stackoverflow.com/users/4936/ujh"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 218, "favorite_count": 0, "accepted_answer_id": 28849048, "answer_count": 1, "score": 2, "last_activity_date": 1425479619, "creation_date": 1425454313, "last_edit_date": 1425479619, "question_id": 28848814, "link": "https://stackoverflow.com/questions/28848814/dynamic-dispatch-and-threads", "title": "Dynamic dispatch and threads", "body": "<p>I'm currently playing around with concurrency in Rust and I've run into the following problem. Given a reference that doesn't have a concrete type, but one that uses dynamic dispatch it seems that it's not possible to call any function on it in a different thread. Here's a minimal example:</p>\n\n<pre><code>use std::thread;\n\ntrait T {\n    fn func(&amp;self);\n}\n\nstruct S1;\n\nimpl S1 {\n    pub fn new() -&gt; S1 {\n        S1\n    }\n}\n\nimpl T for S1 {\n    fn func(&amp;self) {}\n}\n\nfn main() {\n    let reference: &amp;T = &amp;S1::new();\n    thread::scoped(|| reference );\n}\n</code></pre>\n\n<p>Trying to compile this leads to the following error:</p>\n\n<pre><code>uh@macaron:~$ rustc test.rs\ntest.rs:21:5: 21:19 error: the trait `core::marker::Sync` is not implemented for the type `T` [E0277]\ntest.rs:21     thread::scoped(|| reference );\n               ^~~~~~~~~~~~~~\ntest.rs:21:5: 21:19 note: `T` cannot be shared between threads safely\ntest.rs:21     thread::scoped(|| reference );\n               ^~~~~~~~~~~~~~\ntest.rs:21:5: 21:19 error: the trait `core::marker::Sync` is not implemented for the type `T` [E0277]\ntest.rs:21     thread::scoped(|| reference );\n               ^~~~~~~~~~~~~~\ntest.rs:21:5: 21:19 note: `T` cannot be shared between threads safely\ntest.rs:21     thread::scoped(|| reference );\n               ^~~~~~~~~~~~~~\nerror: aborting due to 2 previous errors\n</code></pre>\n\n<p>I would have naively assumed that this would work as <code>S1</code> doesn't even have any data that could prevent it from being shared. So I assume I'm just setting it up wrong. Am I thinking correctly here and if so how do I get this to compile?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 3313, "user_id": 1535283, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ca8a8e4326ecde562aad35781a0e4e2a?s=128&d=identicon&r=PG", "display_name": "Scott Olson", "link": "https://stackoverflow.com/users/1535283/scott-olson"}, "is_accepted": true, "score": 3, "last_activity_date": 1425446415, "creation_date": 1425446415, "answer_id": 28847166, "question_id": 28845351, "link": "https://stackoverflow.com/questions/28845351/can-you-restrict-a-generic-to-t-where-t-is-a-trait-implemented-by-self/28847166#28847166", "title": "Can you restrict a generic to T where T is a trait implemented by Self?", "body": "<p>I don't believe it's possible to be generic over traits right now (and I haven't heard any plans to make it so), so <code>Foo: T</code> with a generic <code>T</code> will not be valid.</p>\n\n<p>When you use a trait name in a position where a type is expected, it's treated as a trait object type rather than a trait. Thus, <code>foo.as_trait::&lt;Valid&gt;()</code> instantiates the type variable <code>T</code> as the trait object type <code>Valid</code> (which is allowed since you specified <code>?Sized</code>). Then, in <code>Self: T</code>, <code>T</code> is a type rather than a trait, so it's the wrong kind of thing.</p>\n\n<p>The compiler will tell you the same thing in fewer words:</p>\n\n<pre><code>&lt;anon&gt;:9:53: 9:54 error: `T` is not a trait\n&lt;anon&gt;:9     fn as_trait&lt;T: ?Sized&gt;(&amp;self) -&gt; &amp;T where Self: T {\n                                                             ^\n</code></pre>\n"}], "owner": {"reputation": 25893, "user_id": 353820, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/32b29e1dc23c2c5abe0283ab7b9541d3?s=128&d=identicon&r=PG", "display_name": "Doug", "link": "https://stackoverflow.com/users/353820/doug"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 257, "favorite_count": 0, "accepted_answer_id": 28847166, "answer_count": 1, "score": 3, "last_activity_date": 1425446415, "creation_date": 1425433700, "last_edit_date": 1425435391, "question_id": 28845351, "link": "https://stackoverflow.com/questions/28845351/can-you-restrict-a-generic-to-t-where-t-is-a-trait-implemented-by-self", "title": "Can you restrict a generic to T where T is a trait implemented by Self?", "body": "<p>For example, is there some way of doing this:</p>\n\n<pre><code>use std::marker::PhantomFn;\n\ntrait Valid : PhantomFn&lt;Self&gt;  {}\ntrait Invalid : PhantomFn&lt;Self&gt;  {}\n\nstruct Foo;\n\nimpl Foo {\n    fn as_trait&lt;T: ?Sized&gt;(&amp;self) -&gt; &amp;T where Self: T {\n        return self as &amp;T;\n    }\n}\n\nimpl Valid for Foo {}\n\nfn main() {\n  let foo = Foo;\n\n  // Should return a trait reference &amp;Valid\n  let _ = foo.as_trait::&lt;Valid&gt;();\n\n  // Should fail to compile because Invalid is not implemented for Foo\n  let _ = foo.as_trait::&lt;Invalid&gt;(); \n}\n</code></pre>\n\n<p>i.e. restrict a generic to be only for traits where the trait is implemented on Self.</p>\n"}, {"tags": ["rust", "lex", "lexical-analysis", "dfa"], "answers": [{"tags": [], "owner": {"reputation": 5175, "user_id": 4370109, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/UcQgO.jpg?s=128&g=1", "display_name": "Brian Tompsett - \u6c64\u83b1\u6069", "link": "https://stackoverflow.com/users/4370109/brian-tompsett-%e6%b1%a4%e8%8e%b1%e6%81%a9"}, "is_accepted": false, "score": 2, "last_activity_date": 1429980896, "last_edit_date": 1495539862, "creation_date": 1429873026, "answer_id": 29845701, "question_id": 28844877, "link": "https://stackoverflow.com/questions/28844877/how-much-buffering-does-table-driven-lexing-require/29845701#29845701", "title": "How much buffering does table-driven lexing require?", "body": "<p>This has the potential to be a question that is too broad or generates answers containing too much opinion, which is not a <a href=\"https://stackoverflow.com/help/how-to-ask\">good attribute of an SO question</a>. Its very much a portmanteau of a question, asking about the implementation of existing lexer generator algorithms, the programming of finite automata, the lexical requirements of a shell language and the characteristics of Rust programs and probably a few more topics besides.</p>\n\n<p>First, lets deal with the question about the capabilities of tool generated lexers. Let's consider one of the most commonly available, <code>flex</code> the GNU lexer generator. The answer is <strong>yes</strong>; it can build you a lexer that does what you want. It is sufficiently flexible and contains enough different features to do the jobs (as do other similar tools). Will it be easy and straightforward? Not necessarily. The tool enables you to use the built in reading and finite state automata, but you can provide your own input routines, write your own state machine, or even handle the difficult bits within pieces of self-written code (in <strong>C</strong> or C++). There are plenty of examples of how to achieve this in the manual, tutorial web sites, tutorial videos, text books and <a href=\"https://stackoverflow.com/questions/tagged/flex-lexer?sort=active\">questions here on SO</a>.</p>\n\n<p>How does that help you when coding in Rust, as flex generates code in <strong>C</strong> or C++? We need a Rust based lexer. Once can do a literature search and see what is available. Wikipedia is good for lists, and has a <a href=\"http://en.wikipedia.org/wiki/Lexical_analysis#List_of_lexer_generators\" rel=\"nofollow noreferrer\">list of available parser and lexer generator tools</a>. However,  none of these generate Rust. There are such tools in Rust, however:</p>\n\n<ul>\n<li><a href=\"https://github.com/LeoTestard/RustLex/\" rel=\"nofollow noreferrer\">RustLex: lexical analysers generator for Rust</a></li>\n<li><a href=\"http://www.reddit.com/r/rust/comments/2qewc0/racc_rust_another_compilercompiler/\" rel=\"nofollow noreferrer\">RACC - Rust Another Compiler-Compiler</a></li>\n</ul>\n\n<p>As both of these are experimental works-in-progress you'll need to evaluate them for yourself.</p>\n\n<p>Another alternative is to make your own version of an open source tool (like <code>flex</code>) to work with Rust. This could be done in two ways:</p>\n\n<ol>\n<li>You could post-process the output of <code>flex</code> to convert the <strong>C</strong> code to Rust code and then compile it.</li>\n<li>You could amend the code for the tool to generate Rust instead of <strong>C</strong>. (It does not need to be written in Rust itself for you to achieve what you desire.)</li>\n</ol>\n\n<p>These approaches has been done several times to enable the targeting of other new languages. There are, as a result, <a href=\"http://en.wikipedia.org/wiki/Comparison_of_parser_generators\" rel=\"nofollow noreferrer\">a whole raft of compiler generator tools for a myriad of languages</a>.</p>\n\n<p>The next question is the size and nature of your hand written lexer code. <a href=\"http://en.wikipedia.org/wiki/Automata-based_programming\" rel=\"nofollow noreferrer\">There are standardised and recognised ways of programming finite state automata in any language. Experienced programmers would should know the pattern</a>:</p>\n\n<pre><code>while ( NOT &lt;&lt;EOF&gt;&gt; ) {\n  switch ( next_symbol() ) {\n\n     case state_symbol[1]: \n              ....\n             break;\n\n      case state_symbol[2]:\n              ....\n              break;\n\n       default:\n             error(diagnostic);\n  }\n}\n</code></pre>\n\n<p>Which can even be done functionally as:</p>\n\n<pre><code>action[state_symbol[next_symbol()]];\n</code></pre>\n\n<p>It is possible to hand-write quite a compact and efficient regular language parsing FSA to do the lexing, but it is a matter of experience in the language and the algorithms.</p>\n\n<p>Your wide and imprecise question has resulted in a wide and imprecise answer: Yes, everything is possible, and <strong>No</strong> it is not dependent on buffering and backtracking.</p>\n"}], "owner": {"reputation": 3142, "user_id": 2474792, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/327964b28dd74fd6bbbe669aac4edf04?s=128&d=identicon&r=PG", "display_name": "Demi", "link": "https://stackoverflow.com/users/2474792/demi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 401, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1466548029, "creation_date": 1425430339, "last_edit_date": 1466548029, "question_id": 28844877, "link": "https://stackoverflow.com/questions/28844877/how-much-buffering-does-table-driven-lexing-require", "title": "How much buffering does table-driven lexing require?", "body": "<p>I am writing a POSIX shell implementation in Rust. This comes with some rather awkward requirements:</p>\n\n<ul>\n<li>Input must be read line by line. If input is from a non-seekable source, that means that input must be read one byte at a time.</li>\n<li>Backslash-newline, when unquoted, is line continuation. It is _not_ a token separator, and ideally should be taken care of prior to lexing.</li>\n</ul>\n\n<p>Both of these requirements can be easily dealt with if the lexer reads one character at a time and allows rules to set internal state that can be queried by the lexer's source of characters (Rust does not allow the C solution of stuffing the state in global variables). My current lexer does just that. However, it is 398 lines of highly repetitive code, including some (inadequate) tests. This code begs to be auto-generated.</p>\n\n<p>Auto-generated lexers usually use a table-driven design based on finite automata. I am not very familiar with this, and am wondering if lookahead is inherent in this design or is usually not used. If no lookahead is usually used, then I can probably modify an existing lexer generator to do what I want; otherwise, I am probably stuck with hand-written code. </p>\n"}, {"tags": ["rust", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 522, "user_id": 153612, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ba347a31bc66bb2654de01850e914021?s=128&d=identicon&r=PG", "display_name": "Ta Thanh Dinh", "link": "https://stackoverflow.com/users/153612/ta-thanh-dinh"}, "edited": false, "score": 0, "creation_date": 1491135250, "post_id": 28843960, "comment_id": 73410311, "body": "we should use <code>#[derive(Copy, Clone)]</code> since <code>Copy</code> has <code>Clone</code> as the supertrait (as explained in <a href=\"http://stackoverflow.com/questions/30782836/the-trait-clone-is-is-not-implemented-when-deriving-the-trait-copy-for-enum\">this answer</a>)"}, {"owner": {"reputation": 14973, "user_id": 128186, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/46c330659979615fe50c46f5f553b39f?s=128&d=identicon&r=PG", "display_name": "Arjan", "link": "https://stackoverflow.com/users/128186/arjan"}, "reply_to_user": {"reputation": 522, "user_id": 153612, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ba347a31bc66bb2654de01850e914021?s=128&d=identicon&r=PG", "display_name": "Ta Thanh Dinh", "link": "https://stackoverflow.com/users/153612/ta-thanh-dinh"}, "edited": false, "score": 0, "creation_date": 1491208453, "post_id": 28843960, "comment_id": 73432815, "body": "@TaThanhDinh Thanks, fixed. Not sure if that was the case when I answered this question."}, {"owner": {"user_type": "does_not_exist", "display_name": "user1115652"}, "edited": false, "score": 0, "creation_date": 1529661771, "post_id": 28843960, "comment_id": 88965770, "body": "I just ran into this, except, the enum is defined in another crate, so no deriving anything for it from my end, what can I do?"}], "tags": [], "owner": {"reputation": 14973, "user_id": 128186, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/46c330659979615fe50c46f5f553b39f?s=128&d=identicon&r=PG", "display_name": "Arjan", "link": "https://stackoverflow.com/users/128186/arjan"}, "is_accepted": true, "score": 12, "last_activity_date": 1491208374, "last_edit_date": 1491208374, "creation_date": 1425424969, "answer_id": 28843960, "question_id": 28843931, "link": "https://stackoverflow.com/questions/28843931/get-an-enum-field-from-a-struct-cannot-move-out-of-borrowed-content/28843960#28843960", "title": "Get an enum field from a struct: cannot move out of borrowed content", "body": "<blockquote>\n  <p>I'm still in the everything is copied by value mindset, where it is\n  perfectly legal to do self.color as that would get me a copy of Color.\n  Apparently, I am wrong. I found some other questions about this same\n  error on SO, but no solution to my issue.</p>\n</blockquote>\n\n<p>Anything that can be copied in rust must be explicitly mared with a trait <code>Copy</code>. <code>Copy</code> was implicit in the past but that was changed (<a href=\"https://github.com/rust-lang/rfcs/blob/2860ed8ead4335f6d9a4ea285f041a61839dbeb4/active/0000-opt-in-v2.md\" rel=\"nofollow noreferrer\">rfc</a>).</p>\n\n<blockquote>\n  <p>As I understand it, the field is owned by whomever owns the Display.\n  Since I only borrowed a reference to the Display, I don't own it.\n  Extracting color attempts to transfer ownership of the Color to me,\n  which is not possible since I don't own the Display. Is this correct?</p>\n</blockquote>\n\n<p>Yes. When you encounter this error there are three possible solutions:</p>\n\n<ul>\n<li>Derive the trait <code>Copy</code> for the type (if appropriate)</li>\n<li>Use/derive <code>Clone</code> (<code>self.color.clone()</code>)</li>\n<li>Return a reference</li>\n</ul>\n\n<p>To solve this you derive <code>Copy</code> for <code>Color</code>:</p>\n\n<pre><code>#[derive(Copy, Clone)]\npub enum Color {\n    Blue         = 0x1,\n    Red          = 0x4,\n}\n</code></pre>\n\n<p>This is the same as:</p>\n\n<pre><code>impl Copy for Color {}\n</code></pre>\n"}], "owner": {"reputation": 39993, "user_id": 146622, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/5240a4744cdf2fffb8bd36c0649fcab4?s=128&d=identicon&r=PG", "display_name": "Daniel A.A. Pelsmaeker", "link": "https://stackoverflow.com/users/146622/daniel-a-a-pelsmaeker"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2142, "favorite_count": 1, "accepted_answer_id": 28843960, "answer_count": 1, "score": 10, "last_activity_date": 1491208374, "creation_date": 1425424847, "question_id": 28843931, "link": "https://stackoverflow.com/questions/28843931/get-an-enum-field-from-a-struct-cannot-move-out-of-borrowed-content", "title": "Get an enum field from a struct: cannot move out of borrowed content", "body": "<p>I'm new to Rust and trying to wrap my head around the ownership/borrowing concept. Now I have reduced my code to this minimal code sample that gives a compile error.</p>\n\n<pre><code>pub struct Display {\n    color: Color,\n}\n\npub enum Color {\n    Blue         = 0x1,\n    Red          = 0x4,\n}\n\nimpl Display {\n    fn get_color_value(&amp;self) -&gt; u16 {\n        self.color as u16\n    }\n}\n</code></pre>\n\n<blockquote>\n<pre><code>src/display.rs:12:9: 12:13 error: cannot move out of borrowed content\nsrc/display.rs:12         self.color as u16\n                          ^~~~\nerror: aborting due to previous error\nCould not compile.\n</code></pre>\n</blockquote>\n\n<p>I'm still in the <em>everything is copied by value</em> mindset, where it is perfectly legal to do <code>self.color</code> as that would get me a copy of <code>Color</code>. Apparently, I am wrong. I found some other questions about this same error on SO, but no solution to my issue.</p>\n\n<p>As I understand it, the field is owned by whomever owns the <code>Display</code>. Since I only borrowed a\nreference to the <code>Display</code>, I don't own it. Extracting <code>color</code> attempts to transfer ownership of\nthe <code>Color</code> to me, which is not possible since I don't own the <code>Display</code>. Is this correct?</p>\n\n<p>How do I solve it?</p>\n"}, {"tags": ["rust", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 1284, "user_id": 844382, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/6b4d6446799865faa5e43488a565b894?s=128&d=identicon&r=PG", "display_name": "hyperman", "link": "https://stackoverflow.com/users/844382/hyperman"}, "edited": false, "score": 0, "creation_date": 1425392508, "post_id": 28834009, "comment_id": 45937751, "body": "Suppose I remove the line self.dummy+=1;  so there is only 1 mutable alias - can I get this to work?"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1425392615, "post_id": 28834009, "comment_id": 45937834, "body": "you can only have one mutable reference OR any number of immutable references. no other combinations are possible"}, {"owner": {"reputation": 1284, "user_id": 844382, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/6b4d6446799865faa5e43488a565b894?s=128&d=identicon&r=PG", "display_name": "hyperman", "link": "https://stackoverflow.com/users/844382/hyperman"}, "edited": false, "score": 0, "creation_date": 1425550644, "post_id": 28834009, "comment_id": 46012729, "body": "Basically, as I understand you guys, I have to use Rc+RefCell and take some overhead, or enter the unsafe world.  I&#39;ll try to go with Rc+RefCell for now, performance isn&#39;t that critical here.  As I&#39;m fighting with Rc now, there might be a followup stackoverflow issue in the near future, but I&#39;ll try some more on myself first."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1425559056, "post_id": 28834009, "comment_id": 46017784, "body": "or the third version (see my answer) is to separate the vector of children from the other data."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1425392867, "last_edit_date": 1425392867, "creation_date": 1425392104, "answer_id": 28834009, "question_id": 28833622, "link": "https://stackoverflow.com/questions/28833622/borrow-checker-on-parent-child-relation/28834009#28834009", "title": "Borrow checker on parent-child relation", "body": "<blockquote>\n  <p>and the mutable/immutable words in the error are not relevant</p>\n</blockquote>\n\n<p>I'm not sure why you think this. Mutability is <em>very</em> important in Rust! For example, while you are allowed multiple references to immutable data at the same time, you are only allowed to have a single reference to mutable data at a time.</p>\n\n<p>First, you need to fix the mutability of <code>parent</code>:</p>\n\n<pre><code>let mut parent = // ...\n</code></pre>\n\n<p>Then, you will get an error from the line:</p>\n\n<pre><code>parent.child.use_parent(&amp;mut parent);\n</code></pre>\n\n<p>When you run this line, you are implicitly mutably borrowing <code>parent</code> and <code>child</code>. This is done so that you can call <code>use_parent</code>, which requires a <code>&amp;mut self</code>.</p>\n\n<p>However, you are <em>also</em> trying to get a second mutable reference as the argument! This is a no-no, because if you were allowed to have multiple <em>aliasing</em> mutable references, the compiler wouldn't be able to track it and make sure that you don't break the memory-safety guarantees.</p>\n\n<blockquote>\n  <p>Suppose I remove the line <code>self.dummy+=1;</code> so there is only 1 mutable alias - can I get this to work?</p>\n</blockquote>\n\n<p>Let's look at some variations of the function signature</p>\n\n<pre><code>fn use_parent(&amp;self, parent: &amp;mut Parent)\n// cannot borrow `parent` as mutable because `parent.child` is also borrowed as immutable\n\nfn use_parent(&amp;mut self, parent: &amp;Parent)\n// cannot borrow `parent` as immutable because `parent.child` is also borrowed as mutable\n\nfn use_parent(&amp;self, parent: &amp;Parent)\n// OK\n</code></pre>\n\n<p>As I mentioned earlier, if you have a mutable reference to something, you aren't allowed to have <em>any</em> other references to that same thing (mutable or not).</p>\n\n<p>Also, note that <strong>it doesn't matter</strong> what the body of the method is! Rust only checks the signature of a called function to verify if it's safe to borrow something.</p>\n\n<p>So how do you try to solve your problem? Ultimately, you are trying to do something that is very difficult for the compiler to prove safe. You want a <em>graph</em> of mutable links. I'd highly suggest reading the <a href=\"http://doc.rust-lang.org/std/rc/index.html\" rel=\"nofollow\">module documentation for Rc</a> which has an example of exactly this parent-child relationship.</p>\n"}, {"comments": [{"owner": {"reputation": 1284, "user_id": 844382, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/6b4d6446799865faa5e43488a565b894?s=128&d=identicon&r=PG", "display_name": "hyperman", "link": "https://stackoverflow.com/users/844382/hyperman"}, "edited": false, "score": 0, "creation_date": 1425392792, "post_id": 28834180, "comment_id": 45937973, "body": "Unfortunately, the solution applies to this simplified problem, but not to my actual problem.  Parent has a vector of children, which might have deeple nested grand children.  I can&#39;t just say self.child,"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 1284, "user_id": 844382, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/6b4d6446799865faa5e43488a565b894?s=128&d=identicon&r=PG", "display_name": "hyperman", "link": "https://stackoverflow.com/users/844382/hyperman"}, "edited": false, "score": 0, "creation_date": 1425394707, "post_id": 28834180, "comment_id": 45939397, "body": "then instead of passing a <code>&amp;mut Parent</code> pass a <code>&amp;mut i32</code> to <code>parent.used</code>. see playpen: <a href=\"http://is.gd/SbJJik\" rel=\"nofollow noreferrer\">is.gd/SbJJik</a>"}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 1, "last_activity_date": 1425559112, "last_edit_date": 1425559112, "creation_date": 1425392561, "answer_id": 28834180, "question_id": 28833622, "link": "https://stackoverflow.com/questions/28833622/borrow-checker-on-parent-child-relation/28834180#28834180", "title": "Borrow checker on parent-child relation", "body": "<p>You are getting the error message for a different reason. You have a non-mutable variable <code>parent</code> and are trying to create a <code>&amp;mut</code> to it. Fixing that you get</p>\n\n<pre><code>let mut parent = Parent {\n    used: 0,\n    child: Child {\n        dummy: 1\n    }\n};\nparent.child.use_parent(&amp;mut parent);\n</code></pre>\n\n<p>and the corresponding error</p>\n\n<pre><code>&lt;anon&gt;:31:34: 31:40 error: cannot borrow `parent` as mutable more than once at a time\n&lt;anon&gt;:31     parent.child.use_parent(&amp;mut parent);\n                                           ^~~~~~\n&lt;anon&gt;:31:5: 31:17 note: previous borrow of `parent.child` occurs here; the mutable borrow prevents subsequent moves, borrows, or modification of `parent.child` until the borrow ends\n&lt;anon&gt;:31     parent.child.use_parent(&amp;mut parent);\n              ^~~~~~~~~~~~\n&lt;anon&gt;:31:41: 31:41 note: previous borrow ends here\n&lt;anon&gt;:31     parent.child.use_parent(&amp;mut parent);\n                                                 ^\n</code></pre>\n\n<hr>\n\n<p>You almost drew the right conclusion.</p>\n\n<blockquote>\n  <p>I have to prove that Child doesn't disappear when it modifies Parent</p>\n</blockquote>\n\n<p>Not quite. You have to prove that you will never have two <code>&amp;mut</code> or one <code>&amp;mut</code> and a <code>&amp;</code> to the child. If you had a <code>&amp;mut</code> to the parent you could use it to get a <code>&amp;mut</code> to the child. Therefor, if you had a <code>&amp;mut</code> to the parent and a <code>&amp;mut</code> to the child, you could get two <code>&amp;mut</code> to the child.</p>\n\n<hr>\n\n<p>The only solution I see is to move the <code>use</code> function to the <code>Parent</code> type and access the <code>child</code> through <code>self</code>.</p>\n\n<pre><code>impl Parent { \n    fn use_parent(&amp;mut self) {\n        // use both child and parent\n        self.used += self.child.dummy;\n        self.child.dummy += 1;\n    }\n}\n</code></pre>\n\n<hr>\n\n<p>Addressing your comment:</p>\n\n<blockquote>\n  <p>Unfortunately, the solution applies to this simplified problem, but not to my actual problem. Parent has a vector of children, which might have deeple nested grand children. I can't just say self.child</p>\n</blockquote>\n\n<p>Since you shouldn't modify your vector (and can't, Rust protects you), because that would invalidate the reference to the child, you can pass those parts to the function that you need, but none of the parts that are direct parents of the child.</p>\n\n<pre><code>impl Child { \n    fn use_parent(&amp;mut self, used: &amp;mut i32) {\n        // use both child and parent\n        *used += self.dummy;\n        self.dummy += 1;\n    }\n}\n\nfn main() {\n    let mut parent = Parent {\n        used: 0,\n        child: Child {\n            dummy: 1\n        }\n    };\n    // although both point to elements of the same structure\n    // it is guaranteed at compile-time that they point to\n    // non-overlapping parts\n    let child = &amp;mut parent.child;\n    let used = &amp;mut parent.used;\n    child.use_parent(used);\n}\n</code></pre>\n\n<p>unfortunatly i don't see a way to prove that <code>use_parent</code>'s parameters point to parts of the same <code>Parent</code> object. Maybe that could be done with lifetimes, I'm not sure, but I would be immensly interested in that. Note: <code>Rc</code> has the same issue.</p>\n"}], "owner": {"reputation": 1284, "user_id": 844382, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/6b4d6446799865faa5e43488a565b894?s=128&d=identicon&r=PG", "display_name": "hyperman", "link": "https://stackoverflow.com/users/844382/hyperman"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1078, "favorite_count": 1, "accepted_answer_id": 28834009, "answer_count": 2, "score": 4, "last_activity_date": 1425559112, "creation_date": 1425390973, "last_edit_date": 1425391764, "question_id": 28833622, "link": "https://stackoverflow.com/questions/28833622/borrow-checker-on-parent-child-relation", "title": "Borrow checker on parent-child relation", "body": "<p>I have the code below producing the error message marked in its comments.  I think I understand the message: I want to borrow parent two times: once for finding its child, and once as an argument to the child (and the mutable/immutable words in the error are not relevant). I have to prove that <code>Child</code> doesn't disappear when it modifies <code>Parent</code>. But I don't know how to do this. I could <code>Rc&lt;Child&gt;</code> everything but that seams wasteful, so I hope adding some lifetimes would do the trick.</p>\n\n<pre><code>struct Parent {\n    used: i32,\n    child: Child,\n}\n\nstruct Child {\n    dummy: i32,\n}\n\nimpl Child { \n    fn use_parent(&amp;mut self, parent: &amp;mut Parent) {\n        // use both child and parent\n        parent.used += self.dummy;\n        self.dummy += 1;\n    }\n}\nfn main() {\n    let parent = Parent {\n        used: 0,\n        child: Child {\n            dummy: 1\n        }\n    };\n    //Error: cannot borrow immutable local variable `parent` as mutable\n    parent.child.use_parent(&amp;mut parent);\n}\n</code></pre>\n"}, {"tags": ["static", "rust", "mutability"], "answers": [{"comments": [{"owner": {"reputation": 6604, "user_id": 318206, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/f30e68fd58551b03172a66098e37db95?s=128&d=identicon&r=PG", "display_name": "Bosh", "link": "https://stackoverflow.com/users/318206/bosh"}, "edited": false, "score": 1, "creation_date": 1425416508, "post_id": 28825271, "comment_id": 45952729, "body": "Thanks! This answers both of my questions very clearly. I especially like the Context struct pattern, with methods <code>impl</code>&#39;d on. That feels more idiomatic."}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 11, "last_activity_date": 1425363289, "creation_date": 1425363289, "answer_id": 28825271, "question_id": 28824992, "link": "https://stackoverflow.com/questions/28824992/parsing-data-into-a-module-level-mutable-static-variable/28825271#28825271", "title": "Parsing data into a module-level mutable static variable", "body": "<p>You can use <a href=\"https://crates.io/crates/lazy_static\"><code>lazy_static</code></a> for this purpose:</p>\n\n<pre><code>lazy_static! {\n    static ref defs: Vec&lt;String&gt; = {\n        let mut init = vec![\"One\".to_string(), \"Two\".to_string()];\n        // init.push(...); etc. etc.\n        init\n    }\n}\n</code></pre>\n\n<p>That initialises a vector on the first access, and it is immutable after that. If you wish to modify it later, wrapping it in a <code>std::sync::Mutex</code> is a good first step.</p>\n\n<blockquote>\n  <p>Are there other patterns I should be considering to support this use case? Passing explicit references to the state vector is possible, but would clutter up a very large number of function signatures that all need access to this state.</p>\n</blockquote>\n\n<p>One pattern to consider is creating a context object that stores all the info the functions need, e.g.</p>\n\n<pre><code>struct Context {\n    defs: Vec&lt;String&gt;\n}\n</code></pre>\n\n<p>and then passing around <code>Context</code> ensures everyone knows what they need to know. You can even consider putting all/many/some of the functions as methods on <code>Context</code>, e.g.</p>\n\n<pre><code>impl Context {\n    fn foo(&amp;self) {\n        if self.defs.len() &gt; 10 {\n             println!(\"lots of defs\");\n        }\n    }\n    // ...\n}\n</code></pre>\n\n<p>This pattern is especially good if you need to modify the context (automatically ensures thread safety), and/or if you wish to have several independent instances in a single process.</p>\n"}], "owner": {"reputation": 6604, "user_id": 318206, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/f30e68fd58551b03172a66098e37db95?s=128&d=identicon&r=PG", "display_name": "Bosh", "link": "https://stackoverflow.com/users/318206/bosh"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2599, "favorite_count": 1, "accepted_answer_id": 28825271, "answer_count": 1, "score": 7, "last_activity_date": 1425363289, "creation_date": 1425361891, "last_edit_date": 1495542728, "question_id": 28824992, "link": "https://stackoverflow.com/questions/28824992/parsing-data-into-a-module-level-mutable-static-variable", "title": "Parsing data into a module-level mutable static variable", "body": "<p>I have a set of functions within a module that need access to some shared initialization-time state. Effectively I'd like to model this with a static mutable vector like:</p>\n\n<pre><code>static mut defs: Vec&lt;String&gt; = vec![];\n\nfn initialize() {\n    defs.push(\"One\".to_string());\n    defs.push(\"Two\".to_string()); \n}\n</code></pre>\n\n<p>(Example: <a href=\"http://is.gd/TyNQVv\" rel=\"nofollow noreferrer\">http://is.gd/TyNQVv</a>, fails with \"mutable statics are not allowed to have destructors\".)</p>\n\n<p>My question is similar to <a href=\"https://stackoverflow.com/questions/19605132/is-it-possible-to-use-global-variables-in-rust\">Is it possible to use global variables in Rust?</a>, but uses a <code>Vec</code> (i.e. a type with destructor), so the <code>Option</code>-based solution to that question doesn't seem to apply. Namely, this fails with the same error as my first attempt:</p>\n\n<pre><code>static mut defs: Option&lt;Vec&lt;String&gt;&gt; = None;\n\nfn initialize() {\n    let init_defs = vec![];\n    init_defs.push(\"One\".to_string());\n    init_defs.push(\"Two\".to_string()); \n    defs = Some(init_defs);\n}\n</code></pre>\n\n<ol>\n<li><p>Is there a way to get access to a static (\"global\") vector that is populated at initialization time and visible at runtime?</p></li>\n<li><p>Are there other patterns I should be considering to support this use case? Passing explicit references to the state vector is possible, but would clutter up a very large number of function signatures that all need access to this state.</p></li>\n</ol>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 3291, "user_id": 2009336, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/b3686d192de55109f7fc65c3aadee8cd?s=128&d=identicon&r=PG&f=1", "display_name": "mjkaufer", "link": "https://stackoverflow.com/users/2009336/mjkaufer"}, "edited": false, "score": 0, "creation_date": 1425356652, "post_id": 28823992, "comment_id": 45919198, "body": "Thanks for the clarification!"}], "tags": [], "owner": {"reputation": 287982, "user_id": 69755, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/6aa87e056bd2ee342fbd56eb2110603c?s=128&d=identicon&r=PG", "display_name": "Brian Campbell", "link": "https://stackoverflow.com/users/69755/brian-campbell"}, "is_accepted": true, "score": 29, "last_activity_date": 1587793745, "last_edit_date": 1587793745, "creation_date": 1425356120, "answer_id": 28823992, "question_id": 28823901, "link": "https://stackoverflow.com/questions/28823901/what-must-i-cast-an-u8-to-in-able-to-use-it-as-an-index-in-my-vector/28823992#28823992", "title": "What must I cast an `u8` to in able to use it as an index in my vector?", "body": "<p>Indices are of type <code>usize</code>; <code>usize</code> is used for sizes of collections, or indices into collections. It represents the native pointer size on your architecture.</p>\n\n<p>This is what you need to use for this to work properly:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>println!(\"{}\", vec2d[usize::from(row)][usize::from(col)]);\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 9, "user_id": 13752964, "user_type": "unregistered", "profile_image": "https://www.gravatar.com/avatar/ddb503dae3ced2838f1c5a3460128a59?s=128&d=identicon&r=PG", "display_name": "Lcol", "link": "https://stackoverflow.com/users/13752964/lcol"}, "is_accepted": false, "score": 0, "last_activity_date": 1592269327, "last_edit_date": 1592269327, "creation_date": 1592267294, "answer_id": 62399119, "question_id": 28823901, "link": "https://stackoverflow.com/questions/28823901/what-must-i-cast-an-u8-to-in-able-to-use-it-as-an-index-in-my-vector/62399119#62399119", "title": "What must I cast an `u8` to in able to use it as an index in my vector?", "body": "<p>You should cast it as a <code>usize</code>, which I find more readable than\n of <code>your_vector[index_u8]</code> use <code>your_vector[index_u8 as usize]</code></p>\n\n<p>I personally find <code>x as usize</code> to be more readable than <code>usize::from(x)</code>, but this is just my preference.\nIn your case:\n<code>println!(\u201c{}\u201d, vec2d[row as usize][col as usize]);</code></p>\n\n<p>This occurs because v[i] is really parsed as <code>*(&amp;v + i)</code>, or the value at (the memory address of the vector + the index). Because <code>&amp;v</code> is a memory address, i, the index, must also be a memory address type. Rust represents memory addresses of the type <code>usize</code>. </p>\n\n<p>I know this has already been answered but I just prefer <code>x as usize</code> to <code>usize::from(x)</code>. The decision is yours. </p>\n"}], "owner": {"reputation": 3291, "user_id": 2009336, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/b3686d192de55109f7fc65c3aadee8cd?s=128&d=identicon&r=PG&f=1", "display_name": "mjkaufer", "link": "https://stackoverflow.com/users/2009336/mjkaufer"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 8207, "favorite_count": 0, "accepted_answer_id": 28823992, "answer_count": 2, "score": 16, "last_activity_date": 1592269327, "creation_date": 1425355486, "last_edit_date": 1526398430, "question_id": 28823901, "link": "https://stackoverflow.com/questions/28823901/what-must-i-cast-an-u8-to-in-able-to-use-it-as-an-index-in-my-vector", "title": "What must I cast an `u8` to in able to use it as an index in my vector?", "body": "<p>I have a 2D vector in Rust which I am trying to index with a dynamic <code>u8</code> variable. An example of what I'm trying to do is below:</p>\n\n<pre><code>fn main() {\n    let mut vec2d: Vec&lt;Vec&lt;u8&gt;&gt; = Vec::new();\n\n    let row: u8 = 1;\n    let col: u8 = 2;\n\n    for i in 0..4 {\n        let mut rowVec: Vec&lt;u8&gt; = Vec::new();\n        for j in 0..4 {\n            rowVec.push(j as u8);\n        }\n        vec2d.push(rowVec);\n    }\n\n    println!(\"{}\", vec2d[row][col]);\n}\n</code></pre>\n\n<p>However, I get the error </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: the trait `core::ops::Index&lt;u8&gt;` is not implemented for the type `collections::vec::Vec&lt;collections::vec::Vec&lt;u8&gt;&gt;` [E0277]\n</code></pre>\n\n<p>In later versions of Rust, I get</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `u8: std::slice::SliceIndex&lt;[std::vec::Vec&lt;u8&gt;]&gt;` is not satisfied\n  --&gt; src/main.rs:15:20\n   |\n15 |     println!(\"{}\", vec2d[row][col]);\n   |                    ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `std::slice::SliceIndex&lt;[std::vec::Vec&lt;u8&gt;]&gt;` is not implemented for `u8`\n   = note: required because of the requirements on the impl of `std::ops::Index&lt;u8&gt;` for `std::vec::Vec&lt;std::vec::Vec&lt;u8&gt;&gt;`\n</code></pre>\n\n<p>What must I cast the <code>u8</code> to in able to use it as an index in my vector?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 287982, "user_id": 69755, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/6aa87e056bd2ee342fbd56eb2110603c?s=128&d=identicon&r=PG", "display_name": "Brian Campbell", "link": "https://stackoverflow.com/users/69755/brian-campbell"}, "edited": false, "score": 0, "creation_date": 1425402875, "post_id": 28823788, "comment_id": 45945116, "body": "What platform are you on? And what is the corresponding function in other languages that you are thinking of?"}], "answers": [{"comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 3, "creation_date": 1425362838, "post_id": 28824036, "comment_id": 45921078, "body": "<code>\\u{8}</code> gets you backspace. That Rust does not recognise <code>\\b</code> as a valid escape is not strange at all; it is not one of the absolutely standard escapes, though it is common."}], "tags": [], "owner": {"reputation": 96, "user_id": 137725, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6b6d84bb9dc5ab4a6e56caf00473afe0?s=128&d=identicon&r=PG&f=1", "display_name": "yarduddles", "link": "https://stackoverflow.com/users/137725/yarduddles"}, "is_accepted": false, "score": 1, "last_activity_date": 1425356424, "creation_date": 1425356424, "answer_id": 28824036, "question_id": 28823788, "link": "https://stackoverflow.com/questions/28823788/how-do-i-clear-the-current-line-of-stdout/28824036#28824036", "title": "How do I clear the current line of stdout?", "body": "<p>Utilizing the ASCII code for backspace is one option, for example:</p>\n\n<pre><code>print!(\"12345\");\nprint!(\"{}\", (8u8 as char));\n</code></pre>\n\n<p>This will end up outputting \"1234\" after the 5 is removed as a result of printing the backspace character (ascii code 8). Strangely, Rust does not recognize \\b as a valid character escape.</p>\n"}, {"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 9, "last_activity_date": 1425362722, "creation_date": 1425362722, "answer_id": 28825156, "question_id": 28823788, "link": "https://stackoverflow.com/questions/28823788/how-do-i-clear-the-current-line-of-stdout/28825156#28825156", "title": "How do I clear the current line of stdout?", "body": "<p>On an ANSI terminal (almost everything except Command Prompt on Windows), <code>\\r</code> will return the cursor to the start of the current line, allowing you to write something else on top of it (new content or whitespace to erase what you have already written).</p>\n\n<pre><code>print!(\"\\r\")\n</code></pre>\n\n<p>There is nothing available in the standard library to do this in a platform-neutral manner.</p>\n"}], "owner": {"reputation": 3008, "user_id": 3204951, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/8aca84582c72a22e9cb5245571103d92?s=128&d=identicon&r=PG", "display_name": "Nate Mara", "link": "https://stackoverflow.com/users/3204951/nate-mara"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4509, "favorite_count": 0, "accepted_answer_id": 28825156, "answer_count": 2, "score": 8, "last_activity_date": 1455227815, "creation_date": 1425354716, "last_edit_date": 1425391626, "question_id": 28823788, "link": "https://stackoverflow.com/questions/28823788/how-do-i-clear-the-current-line-of-stdout", "title": "How do I clear the current line of stdout?", "body": "<p>I'm trying to make a status indicator in Rust that prints to stdout. In other languages, I've used a function that clears the current line of stdout while leaving the others untouched. I can't seem to find a Rust equivalent. Is there one? Here's a small example of what I'm looking for</p>\n\n<pre><code>for i in 0..1000 {\n    stdio::print(format!(\"{}\", i).as_slice));\n    stdio::clear();\n}\n</code></pre>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 3031, "user_id": 576488, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/6394f70dd009d4d16bb2c969c82c2ff1?s=128&d=identicon&r=PG", "display_name": "SBSTP", "link": "https://stackoverflow.com/users/576488/sbstp"}, "edited": false, "score": 0, "creation_date": 1425338147, "post_id": 28820901, "comment_id": 45914245, "body": "I wanted to return a read-only list. I guess what I&#39;d need is an OwnedSlice, but that&#39;s probably just Vec. I can&#39;t return an iterator, because I want it to be indexable."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "reply_to_user": {"reputation": 3031, "user_id": 576488, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/6394f70dd009d4d16bb2c969c82c2ff1?s=128&d=identicon&r=PG", "display_name": "SBSTP", "link": "https://stackoverflow.com/users/576488/sbstp"}, "edited": false, "score": 1, "creation_date": 1425340940, "post_id": 28820901, "comment_id": 45915131, "body": "Since the <code>Vec</code> (or whatever) contains <code>&amp;Elements</code> the actual contents of the list is as read-only as it would be with a <code>&amp;[]</code>. Returning a <code>Vec</code> rather than a <code>&amp;[]</code> effectively just allows the user to modify the length of that vector (e.g. <code>push</code>/<code>pop</code> elements from it), restricting that is usually unnecessary especially in Rust, where <code>Vec</code>s etc. are uniquely owned, so changing a <code>Vec</code> doesn&#39;t change any values anywhere else."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "reply_to_user": {"reputation": 3031, "user_id": 576488, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/6394f70dd009d4d16bb2c969c82c2ff1?s=128&d=identicon&r=PG", "display_name": "SBSTP", "link": "https://stackoverflow.com/users/576488/sbstp"}, "edited": false, "score": 0, "creation_date": 1425341063, "post_id": 28820901, "comment_id": 45915179, "body": "Also, you can return an iterator: if the user absolutely needs to randomly-access it more than once, then they can manually <code>.collect()</code>. If they only wish to iterate in order, or index randomly once (possible via <code>nth</code>) then returning the iterator is likely to be more efficient, as the elements will only be generated on demand. Of course, if the structure is <i>usually</i> randomly-accessed, then requiring <code>collect</code> will just make things more verbose. (I just realised I made a mistake with the iterator suggestion as written. Fixing.)"}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 4, "last_activity_date": 1425341190, "last_edit_date": 1425341190, "creation_date": 1425336529, "answer_id": 28820901, "question_id": 28820781, "link": "https://stackoverflow.com/questions/28820781/extend-lifetime-of-variable/28820901#28820901", "title": "Extend lifetime of variable", "body": "<p>You can't forcibly extend a value's lifetime; you just have to return the full <code>Vec</code>. If I may ask, why do you want to return the slice itself? It is almost always unnecessary, since a <code>Vec</code> can be cheaply (both in the sense of easy syntax and low-overhead at runtime) coerced to a slice.</p>\n\n<p>Alternatively, you could return the iterator:</p>\n\n<pre><code>use std::iter;\n\npub fn find&lt;'a&gt;(&amp;'a self, name: &amp;str) -&gt; Box&lt;Iterator&lt;Item = &amp;'a Element&gt; + 'a&gt; {\n    Box::new(self.iter_elements()\n       .filter(move |&amp;elem| elem.name.borrow().local_name == name))\n}\n</code></pre>\n\n<p>For now, you will have to use an iterator trait object, since closure have types that are unnameable.</p>\n\n<p>NB. I had to change the <code>filter</code> closure to capture-by-move (the <code>move</code> keyword) to ensure that it can be returned, or else the <code>name</code> variable would just passed into the closure pointer into <code>find</code>'s stack frame, and hence would be restricted from leaving <code>find</code>.</p>\n"}], "owner": {"reputation": 3031, "user_id": 576488, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/6394f70dd009d4d16bb2c969c82c2ff1?s=128&d=identicon&r=PG", "display_name": "SBSTP", "link": "https://stackoverflow.com/users/576488/sbstp"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1967, "favorite_count": 1, "accepted_answer_id": 28820901, "answer_count": 1, "score": 6, "last_activity_date": 1425341190, "creation_date": 1425335905, "question_id": 28820781, "link": "https://stackoverflow.com/questions/28820781/extend-lifetime-of-variable", "title": "Extend lifetime of variable", "body": "<p>I'm trying to return a slice from a vector which is built inside my function. Obviously this doesn't work because <code>v</code>'s lifetime expires too soon. I'm wondering if there's a way to extend <code>v</code>'s lifetime. I want to return a plain slice, not a vector.</p>\n\n<pre><code>pub fn find&lt;'a&gt;(&amp;'a self, name: &amp;str) -&gt; &amp;'a[&amp;'a Element] {\n    let v: Vec&lt;&amp;'a Element&gt; = self.iter_elements().filter(|&amp;elem| elem.name.borrow().local_name == name).collect();\n    v.as_slice()\n}\n</code></pre>\n"}, {"tags": ["multithreading", "rust"], "answers": [{"comments": [{"owner": {"reputation": 1479, "user_id": 4450817, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/566922fb80a38c57d6a0db0be0f42f3b?s=128&d=identicon&r=PG&f=1", "display_name": "Vaelden", "link": "https://stackoverflow.com/users/4450817/vaelden"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1425323384, "post_id": 28816987, "comment_id": 45906782, "body": "Oh I see it makes sense. Thanks for the clarification!"}, {"owner": {"reputation": 7587, "user_id": 116834, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/a3ee59b76d1593605ffb5be0ddca035b?s=128&d=identicon&r=PG", "display_name": "Drew", "link": "https://stackoverflow.com/users/116834/drew"}, "edited": false, "score": 0, "creation_date": 1425346999, "post_id": 28816987, "comment_id": 45916870, "body": "This works for the question as posed, but there are cases where merely implementing Clone doesn&#39;t seem to be good enough--<a href=\"https://gist.github.com/drewcrawford/c88d478088d8de412dcf\" rel=\"nofollow noreferrer\">when the type in question is a generic parameter, for example</a>"}, {"owner": {"reputation": 1479, "user_id": 4450817, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/566922fb80a38c57d6a0db0be0f42f3b?s=128&d=identicon&r=PG&f=1", "display_name": "Vaelden", "link": "https://stackoverflow.com/users/4450817/vaelden"}, "reply_to_user": {"reputation": 7587, "user_id": 116834, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/a3ee59b76d1593605ffb5be0ddca035b?s=128&d=identicon&r=PG", "display_name": "Drew", "link": "https://stackoverflow.com/users/116834/drew"}, "edited": false, "score": 1, "creation_date": 1425371698, "post_id": 28816987, "comment_id": 45924844, "body": "@Drew the problem you encounter with generic parameter is, as the compiler tells you, that the lifetime of your reference is too short, and you should just add a &#39;static lifetime bound as the thread::spawn function requires. This came recently with the changes to Send, which does not imply &#39;static any more, in order to allow scoped threads (see example below by @Shepmaster)."}], "tags": [], "owner": {"reputation": 1479, "user_id": 4450817, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/566922fb80a38c57d6a0db0be0f42f3b?s=128&d=identicon&r=PG&f=1", "display_name": "Vaelden", "link": "https://stackoverflow.com/users/4450817/vaelden"}, "is_accepted": true, "score": 4, "last_activity_date": 1425321356, "creation_date": 1425321356, "answer_id": 28816987, "question_id": 28816426, "link": "https://stackoverflow.com/questions/28816426/copying-a-struct-for-use-on-another-thread/28816987#28816987", "title": "Copying a struct for use on another thread", "body": "<p>I think your issue is simply because your structure does not derive the <code>Clone</code> trait. You can get your second example to compile and run by adding a <code>#[derive(Clone)]</code> before your struct's definition.</p>\n\n<p>What I don't understand in the compiler behaviour here is what <code>.clone()</code> function it tried to use here. Your structure indeed did not implement the <code>Clone</code> trait so should not by default have a <code>.clone()</code> function.</p>\n\n<p><a href=\"http://is.gd/q5YTVL\" rel=\"nofollow\">playpen</a></p>\n\n<p>You may also want to consider in your function taking <code>self</code> <em>by value</em>, and let your caller decide whether it should make a clone, or just a move.</p>\n"}, {"comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 1, "creation_date": 1425328355, "post_id": 28817871, "comment_id": 45909546, "body": "I was confused about why this works at first. Turns out <code>JoinGuard</code> has a lifetime parameter and lifetime elision makes it the same as the unnamed lifetime of the <code>&amp;self</code> parameter. Which is nice, but comes with a caveat: The borrow lasts until the <code>JoinGuard</code> is dropped. One must be aware of this, and it also complicates the calling code more than the other answer."}, {"owner": {"reputation": 7587, "user_id": 116834, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/a3ee59b76d1593605ffb5be0ddca035b?s=128&d=identicon&r=PG", "display_name": "Drew", "link": "https://stackoverflow.com/users/116834/drew"}, "edited": false, "score": 1, "creation_date": 1425345997, "post_id": 28817871, "comment_id": 45916590, "body": "Unfortunately, the method signature is specified by a trait.  I could of course modify it to add a JoinGuard as a return parameter, but the other implementations of this function don&#39;t need one..."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1425324363, "creation_date": 1425324363, "answer_id": 28817871, "question_id": 28816426, "link": "https://stackoverflow.com/questions/28816426/copying-a-struct-for-use-on-another-thread/28817871#28817871", "title": "Copying a struct for use on another thread", "body": "<p>As an alternative solution, you could use <a href=\"http://doc.rust-lang.org/std/thread/fn.scoped.html\" rel=\"nofollow\"><code>thread::scoped</code></a> and maintain a handle to the thread. This allows the thread to hold a reference, without the need to copy it in:</p>\n\n<pre><code>#![feature(old_io,std_misc)]\n\nuse std::thread::{self,JoinGuard};\nuse std::old_io::timer;\nuse std::time::duration::Duration;\n\nstruct MyData {\n    x: i32,\n}\n\n// returns immediately\nimpl MyData {\n    fn foo(&amp;self) -&gt; JoinGuard&lt;()&gt; { \n        thread::scoped(move || { \n            timer::sleep(Duration::milliseconds(300));\n            println!(\"{:?}\", self.x); //consider a very long operation\n            timer::sleep(Duration::milliseconds(300));\n        })\n    }\n}\n\nfn main() {\n    let d = MyData { x: 42 };\n    let _thread = d.foo();\n    println!(\"I'm so fast!\");\n}\n</code></pre>\n"}], "owner": {"reputation": 7587, "user_id": 116834, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/a3ee59b76d1593605ffb5be0ddca035b?s=128&d=identicon&r=PG", "display_name": "Drew", "link": "https://stackoverflow.com/users/116834/drew"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1778, "favorite_count": 0, "accepted_answer_id": 28816987, "answer_count": 2, "score": 2, "last_activity_date": 1425324363, "creation_date": 1425319128, "question_id": 28816426, "link": "https://stackoverflow.com/questions/28816426/copying-a-struct-for-use-on-another-thread", "title": "Copying a struct for use on another thread", "body": "<p>I have a struct:</p>\n\n<pre><code>struct MyData {\n    x: i32\n}\n</code></pre>\n\n<p>I want to asynchronously start a long operation on this struct.</p>\n\n<p>My first attempt was this:</p>\n\n<pre><code>fn foo(&amp;self) { //should return immediately\n    std::thread::Thread::spawn(move || { \n        println!(\"{:?}\",self.x); //consider a very long operation\n    });\n}\n</code></pre>\n\n<p>Clearly the compiler <code>cannot infer an appropriate lifetime due to conflicting requirements</code> because <code>self</code> may be on the stack frame and thus cannot be guaranteed to exist by the time the operation is running on a different stack frame.</p>\n\n<p>To solve this, I attempted to make a copy of <code>self</code> and provide that copy to the new thread:</p>\n\n<pre><code>fn foo(&amp;self) { //should return immediately\n    let clone = self.clone();\n    std::thread::Thread::spawn(move || { \n        println!(\"{:?}\",clone.x); //consider a very long operation\n    });\n}\n</code></pre>\n\n<p>I think that does not compile because now <code>clone</code> is on the stack frame which is similar to before.  I also tried to do the <code>clone</code> inside the thread, and that does not compile either, I think for similar reasons.</p>\n\n<p>Then I decided maybe I could use a <code>channel</code> to push the copied data into the thread, on the theory that perhaps <code>channel</code> can magically move (copy?) stack-allocated data between threads, which is suggested by <a href=\"http://doc.rust-lang.org/std/sync/mpsc/fn.channel.html#example\" rel=\"nofollow\">this example in the documentation</a>.  However the compiler cannot infer a lifetime for this either:</p>\n\n<pre><code>fn foo(&amp;self) { //should return immediately\n    let (tx, rx) = std::sync::mpsc::channel();\n    tx.send(self.clone());\n    std::thread::Thread::spawn(move || { \n        println!(\"{:?}\",rx.recv().unwrap().x); //consider a very long operation\n    });\n}\n</code></pre>\n\n<p>Finally, I decided to just copy my struct onto the heap explicitly, and pass an Arc into the thread.  But not even here can the compiler figure out a lifetime:</p>\n\n<pre><code>fn foo(&amp;self) { //should return immediately\n    let arc = std::sync::Arc::new(self.clone());\n    std::thread::Thread::spawn(move || { \n        println!(\"{:?}\",arc.clone().x); //consider a very long operation\n    });\n}\n</code></pre>\n\n<p>Okay borrow checker, I give up.  How do I get a copy of <code>self</code> onto my new thread?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1425308920, "post_id": 28812052, "comment_id": 45897871, "body": "A concrete type plus a bound doesn&#39;t really make sense. The type will either support the trait (in which case you can just accept the trait) or it won&#39;t. You can&#39;t have one type both implement a trait and not, during the same compilation. Perhaps you can explain more about what you want to do? In which way do you care that you have a <code>u32</code>?"}, {"owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "edited": false, "score": 1, "creation_date": 1425316661, "post_id": 28812052, "comment_id": 45903078, "body": "What do you mean exactly by &quot;annotate function arguments&quot; ? What could you annotate more than the type of the argument ?"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1425329934, "last_edit_date": 1495542037, "creation_date": 1425329934, "answer_id": 28819315, "question_id": 28812052, "link": "https://stackoverflow.com/questions/28812052/how-can-i-add-a-marker-to-a-concrete-type/28819315#28819315", "title": "How can I add a Marker to a concrete type?", "body": "<p>Rust does have annotations, they can be applied to items like <code>struct</code>s or <code>fn</code>s or <code>mod</code>s:</p>\n\n<pre><code>#[test]\nfn what() {}\n</code></pre>\n\n<p>However, if you use your own:</p>\n\n<pre><code>#[my_attr]\nfn what() {}\n</code></pre>\n\n<p>You get an error:</p>\n\n<pre><code>error: The attribute `my_attr` is currently unknown to the the compiler and may have meaning added to it in the future\nhelp: add #![feature(custom_attribute)] to the crate attributes to enable\n</code></pre>\n\n<p>You also cannot add annotations to an argument:</p>\n\n<pre><code>fn what(#[my_attr] a: u8) {}\n</code></pre>\n\n<p>Has the error</p>\n\n<pre><code>error: unexpected token: `#`\n</code></pre>\n\n<p>All that being said, I agree with <a href=\"https://stackoverflow.com/questions/28812052/how-can-i-add-a-marker-to-a-concrete-type#comment45903078_28812052\">Levans' sentiment</a> - use types to encode information.</p>\n\n<p>The most common argument annotation I know of in Java is <code>@Nullable</code>. In Rust, this has standard library support, not relying on external metadata. You use a special type to indicate that a value can be not present - <code>Option</code>:</p>\n\n<pre><code>fn what(a: Option&lt;u8&gt;) {}\n</code></pre>\n\n<p>You can also build your own types to indicate semantics. Maybe you have an application that deals with distances? Create a type that represents that:</p>\n\n<pre><code>struct Meters(i32);\n</code></pre>\n"}], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 129, "favorite_count": 0, "accepted_answer_id": 28819315, "answer_count": 1, "score": 0, "last_activity_date": 1425329934, "creation_date": 1425306032, "last_edit_date": 1425325568, "question_id": 28812052, "link": "https://stackoverflow.com/questions/28812052/how-can-i-add-a-marker-to-a-concrete-type", "title": "How can I add a Marker to a concrete type?", "body": "<p>I'm currently exploring Rust and am stumped by the following issue:</p>\n\n<p>Let's say I want to \"annotate\" a function argument with a MarkerTrait (i.e. making the trait an annotation to the):</p>\n\n<pre><code>use std::marker::MarkerTrait;\n\npub trait X: MarkerTrait { }\n\npub trait MyInterface {\n    fn foo(&amp;self, bar: u32+ X) -&gt; u32;\n}\n\n// make this compile in the playpen\nfn main() { }\n</code></pre>\n\n<p>The compiler as of now will reject this with the following: message:</p>\n\n<pre><code>&lt;anon&gt;:6:25: 6:28 error: expected a reference to a trait [E0172]\n&lt;anon&gt;:6     fn foo(&amp;self, bar : u32 + X) -&gt; u32;\n                                 ^~~\n</code></pre>\n\n<p>Is this a bug or intentional? If it's intentional, what workaround should I use to add the desired information to my code? Are there other ways to annotate function arguments that e.g. a lint could pick up?</p>\n\n<p>Edit: OK, it appears I'm asking the wrong question. In java, function arguments can be annotated. How would I do something similar in Rust?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1425611840, "post_id": 28804235, "comment_id": 46044498, "body": "You may wish to comment on current answers to explain why they don&#39;t have enough detail - then answerers have the possibility of building on them or revising them."}, {"owner": {"reputation": 25893, "user_id": 353820, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/32b29e1dc23c2c5abe0283ab7b9541d3?s=128&d=identicon&r=PG", "display_name": "Doug", "link": "https://stackoverflow.com/users/353820/doug"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1425611982, "post_id": 28804235, "comment_id": 46044526, "body": "@Shepmaster What do you mean? The only current answer is &#39;I guess its not possible&#39;. That&#39;s neither authoritative (why is it categorically impossible?) nor a solution to my problem."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1425612193, "post_id": 28804235, "comment_id": 46044566, "body": "Answering <i>why is it categorically impossible</i> sounds like an enhancement to the answer, if the author chooses to add it. If it truly is impossible to do via macros, but it <i>is</i> possible to do via a compiler plugin, then that is one way to solve your problem. Sometimes problems can&#39;t be solved within certain constraints. ^_^ I don&#39;t know if that&#39;s the case here, though."}], "answers": [{"tags": [], "owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "is_accepted": false, "score": 0, "last_activity_date": 1425526756, "last_edit_date": 1425526756, "creation_date": 1425307467, "answer_id": 28812521, "question_id": 28804235, "link": "https://stackoverflow.com/questions/28804235/how-can-i-remove-the-use-of-block-from-my-macro-to-make-it-more-usable/28812521#28812521", "title": "How can I remove the use of &#39;block&#39; from my macro to make it more usable?", "body": "<p>I guess it is impossible with <code>syntax_rules!</code>. You can't use simple <code>$($ps:tt)*</code> syntax, because constructions like <code>T::U32_(&amp;foo.x)</code> will be parsed incorrectly. And you can't use patterns like <code>($x:item $($ps:tt)*)</code> with macro recursion on second part, because <code>syntax_rules!</code> parser requires unambiguity (as noted in <a href=\"http://doc.rust-lang.org/book/advanced-macros.html#syntactic-requirements\" rel=\"nofollow\">the book</a>). It forces you to introduce some delimiter tokens in your DSL, for example, comma: <code>query!(T::U32_(&amp;foo.x), &gt;, T::U32(0))</code>, but it's obviously uglier than your block syntax.</p>\n\n<p>Possibly there is an option to take advantage of a <a href=\"http://doc.rust-lang.org/book/plugins.html\" rel=\"nofollow\">compiler plugin</a>, but I'd prefer to build that eDSL using algebraic data types (in any case you will interpret it in runtime).</p>\n"}, {"comments": [{"owner": {"reputation": 25893, "user_id": 353820, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/32b29e1dc23c2c5abe0283ab7b9541d3?s=128&d=identicon&r=PG", "display_name": "Doug", "link": "https://stackoverflow.com/users/353820/doug"}, "edited": false, "score": 0, "creation_date": 1425620055, "post_id": 28892230, "comment_id": 46046218, "body": "For anyone else who finds this, you can add support for references in the expression using traits, like this: <a href=\"http://is.gd/uhRN4S\" rel=\"nofollow noreferrer\">is.gd/uhRN4S</a>"}, {"owner": {"reputation": 25893, "user_id": 353820, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/32b29e1dc23c2c5abe0283ab7b9541d3?s=128&d=identicon&r=PG", "display_name": "Doug", "link": "https://stackoverflow.com/users/353820/doug"}, "edited": false, "score": 0, "creation_date": 1425620194, "post_id": 28892230, "comment_id": 46046249, "body": "Fwiw, it&#39;s still slightly problematic that :tt resolves &amp;foo as two tokens, so it doesn&#39;t seem like it&#39;s possible to directly insert references (eg. (&amp;a &gt; 0)) but since it works with identifiers I&#39;m happy enough with it as is~"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1425615144, "creation_date": 1425615144, "answer_id": 28892230, "question_id": 28804235, "link": "https://stackoverflow.com/questions/28804235/how-can-i-remove-the-use-of-block-from-my-macro-to-make-it-more-usable/28892230#28892230", "title": "How can I remove the use of &#39;block&#39; from my macro to make it more usable?", "body": "<p>This seems to work:</p>\n\n<pre><code>#![feature(trace_macros)]\n\n#[derive(Debug)]\nenum Item {\n    Value(u8),\n    LParen,\n    RParen,\n    And,\n    Or,\n    LessThan,\n    GreaterThan,\n    LessThanEqual,\n    Equal,\n}\n\nmacro_rules! query0(\n    ( ( $( $v:tt )* ) ) =&gt; ({\n        let mut result = vec![Item::LParen];\n        $( result.extend(query0!($v)) );*;\n        result.push(Item::RParen);\n        result\n    });\n    ( || )      =&gt; ( vec![Item::Or] );\n    ( &amp;&amp; )      =&gt; ( vec![Item::And] );\n    ( &lt; )       =&gt; ( vec![Item::LessThan] );\n    ( &gt; )       =&gt; ( vec![Item::GreaterThan] );\n    ( &lt;= )      =&gt; ( vec![Item::LessThanEqual] );\n    ( == )      =&gt; ( vec![Item::Equal] );\n    ( $v:expr ) =&gt; ( vec![Item::Value($v)] );\n);\n\nmacro_rules! query(\n    ( $( $v:tt )* ) =&gt; ({\n        let mut result = vec![];\n        $( result.extend(query0!( $v )) );*;\n        result\n    });\n);\n\nfn main() {\n    //trace_macros!(true);\n\n    let a = query!(5);\n    println!(\"{:?}\", a);\n\n    let b = query!((1 &lt; 3) == 5);\n    println!(\"{:?}\", b);\n\n    let c = query!((42 &gt; 0) || \n                   ((13 == 13) &amp;&amp; (12 &lt;= 99)));\n    println!(\"{:?}\", c);\n}\n</code></pre>\n\n<p>(<a href=\"http://is.gd/8gXK2F\" rel=\"nofollow\">playpen link</a>)</p>\n\n<p>Let me know what parts are most interesting and I can explain those (after I've had a bit of sleep... ^_^).</p>\n"}], "owner": {"reputation": 25893, "user_id": 353820, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/32b29e1dc23c2c5abe0283ab7b9541d3?s=128&d=identicon&r=PG", "display_name": "Doug", "link": "https://stackoverflow.com/users/353820/doug"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 207, "favorite_count": 0, "accepted_answer_id": 28892230, "answer_count": 2, "score": 1, "last_activity_date": 1425615144, "creation_date": 1425279580, "question_id": 28804235, "link": "https://stackoverflow.com/questions/28804235/how-can-i-remove-the-use-of-block-from-my-macro-to-make-it-more-usable", "title": "How can I remove the use of &#39;block&#39; from my macro to make it more usable?", "body": "<p>I've written this macro to expand arbitrary terms into a token list for parsing, which allows me to do this:</p>\n\n<pre><code>let q = query!({T::U32_(&amp;foo.x)} &gt; {T::U32(0)});\n// [U32_(100), Greater, U32(0)]\n\nlet q = query!({T::U32_(&amp;foo.x)} != {T::U32_(&amp;bar)});\n// [U32_(100), NotEqual, U32_(10)]\n\nlet q = query!(\n  ({T::U32_(&amp;foo.x)} &gt; {T::U32(0)}) || \n  (({T::U32_(&amp;bar)} == {T::U32(1)}) &amp;&amp; ({T::U32_(&amp;bar)} &lt;= {T::U32(10)}))\n);\n// [Left, U32_(100), Greater, U32(0), Right, Or, Left, Left, U32_(10), \n//  Equal, U32(1), Right, And, Left, U32_(10), LesserEquals, U32(10),\n//  Right, Right]\n</code></pre>\n\n<p>However, I find the syntax annoying; notice how each enum has to sit in its own <code>{ ... }</code> block to correctly expand into the final vec. I would much prefer this:</p>\n\n<pre><code>let q = query!(T::U32_(&amp;foo.x) &gt; T::U32(0));\n\nlet q = query!(T::U32_(&amp;foo.x) != T::U32_(&amp;bar));\n\nlet q = query!(\n   (T::U32_(&amp;foo.x) &gt; T::U32(0)) || \n  ((T::U32_(&amp;bar) == T::U32(1)) &amp;&amp; (T::U32_(&amp;bar) &lt;= T::U32(10)))\n);\n</code></pre>\n\n<p>I've been reading macro examples all day trying to figure this one out, but I can't figure out if there's a valid combination of tokens that will let me do this.</p>\n\n<p>Help! How can I do this?</p>\n\n<p>Full macro code on playpen: <a href=\"http://is.gd/VM71VQ\" rel=\"nofollow\">http://is.gd/VM71VQ</a></p>\n\n<pre><code>#![feature(trace_macros)]\n#![allow(dead_code)]\n\n#[derive(Debug)]\nenum T&lt;'a&gt; {\n  Left,\n  Right,\n  Equal,\n  NotEqual,\n  And,\n  Or,\n  Greater,\n  Lesser,\n  GreaterEquals,\n  LesserEquals,\n  U32(u32),\n  U32_(&amp;'a u32),\n}\n\nmacro_rules! query(\n\n  // Expand an inner block into its tokens\n  ( EXPAND_BLOCK $x:block ) =&gt; (vec!( $x ));\n\n  // Expand (\n  ( ( ) =&gt; (vec!(T::Left));\n\n  // Expand )\n  ( ) ) =&gt; (vec!( T::Right ));\n\n  // Expand &amp;&amp;\n  ( &amp;&amp; ) =&gt; (vec!( T::And ));\n\n  // Expand &gt;\n  ( &gt; ) =&gt; (vec!( T::Greater ));\n\n  // Expand &lt;\n  ( &lt; ) =&gt; (vec!( T::Lesser ));\n\n  // Expand &gt;=\n  ( &gt;= ) =&gt; (vec!( T::GreaterEquals ));\n\n  // Expand &gt;\n  ( &lt;= ) =&gt; (vec!( T::LesserEquals ));\n\n  // Expand ==\n  ( == ) =&gt; (vec!( T::Equal ));\n\n  // Expand !=\n  ( != ) =&gt; (vec!( T::NotEqual ));\n\n  // Expand ||\n  ( || ) =&gt; (vec!( T::Or ));\n\n  // Expand ( ... ) into Left, query!(...), Right\n  (( $($ps:tt)* )) =&gt; {\n    {\n      let mut rtn:Vec&lt;T&gt; = Vec::new();\n      rtn.push(T::Left);\n      for item in query!($($ps)*).into_iter() {\n        rtn.push(item);\n      }\n      rtn.push(T::Right);\n      rtn\n    }\n  };\n\n  // Expand a syntax tree parent into it's immediate child elements\n  // ie. { ... } into query!(...)\n  ({ $($ps:tt)* }) =&gt; {\n    query!(EXPAND_BLOCK { $($ps)* })\n  };\n\n  // Top level expansion into a query using syntax tree rules\n  ($($ps:tt)*) =&gt; {\n    {\n      let mut rtn:Vec&lt;T&gt; = Vec::new();\n      $(\n        for item in query!($ps).into_iter() {\n          rtn.push(item);\n        }\n      )*\n      rtn\n    }\n  };\n);\n\nstruct Expr {\n  x: u32\n}\n\nfn main() {\n  let foo = Expr { x: 100u32 };\n  let bar = 10;\n\n  // trace_macros!(true);\n\n  let q = query!({T::U32_(&amp;foo.x)} &gt; {T::U32(0)});\n  println!(\"{:?}\", q);\n\n  let q = query!({T::U32_(&amp;foo.x)} != {T::U32_(&amp;bar)});\n  println!(\"{:?}\", q);\n\n  let q = query!(\n    ({T::U32_(&amp;foo.x)} &gt; {T::U32(0)}) || \n    (({T::U32_(&amp;bar)} == {T::U32(1)}) &amp;&amp; ({T::U32_(&amp;bar)} &lt;= {T::U32(10)}))\n  );\n  println!(\"{:?}\", q);\n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 20407, "user_id": 1017941, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/yocPw.jpg?s=128&g=1", "display_name": "Hauleth", "link": "https://stackoverflow.com/users/1017941/hauleth"}, "is_accepted": false, "score": 4, "last_activity_date": 1425252010, "creation_date": 1425252010, "answer_id": 28800477, "question_id": 28800121, "link": "https://stackoverflow.com/questions/28800121/what-do-i-have-to-do-to-solve-a-use-of-moved-value-error/28800477#28800477", "title": "What do I have to do to solve a &quot;use of moved value&quot; error?", "body": "<p>You move value of <code>primes</code> to the function <code>vectorIsPrime</code> (BTW Rust use <code>snake_case</code> by convention). You have other options, but the best one is to borrow vector instead of moving it:</p>\n\n<pre><code>fn vector_is_prime(num: u64, p: &amp;Vec&lt;u64&gt;) -&gt; bool { \u2026 }\n</code></pre>\n\n<p>And then passing reference to it:</p>\n\n<pre><code>vector_is_prime(num, &amp;primes)\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 3291, "user_id": 2009336, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/b3686d192de55109f7fc65c3aadee8cd?s=128&d=identicon&r=PG&f=1", "display_name": "mjkaufer", "link": "https://stackoverflow.com/users/2009336/mjkaufer"}, "edited": false, "score": 0, "creation_date": 1425253231, "post_id": 28800493, "comment_id": 45875054, "body": "Why does <code>i</code> in <code>for &amp;i in p{</code> require an <code>&amp;</code> in front of it? The code throws a compile error without it, and I&#39;m curious as to why."}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "reply_to_user": {"reputation": 3291, "user_id": 2009336, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/b3686d192de55109f7fc65c3aadee8cd?s=128&d=identicon&r=PG&f=1", "display_name": "mjkaufer", "link": "https://stackoverflow.com/users/2009336/mjkaufer"}, "edited": false, "score": 2, "creation_date": 1425257786, "post_id": 28800493, "comment_id": 45876185, "body": "@mjkaufer, it means that <code>i</code> is a reference, and so therefore, in the loop, i will be the value, rather than a reference. if you leave it out, you&#39;d need *i&#39;s when doing the comparisons."}, {"owner": {"reputation": 997, "user_id": 527160, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/hAFLq.png?s=128&g=1", "display_name": "fr1550n", "link": "https://stackoverflow.com/users/527160/fr1550n"}, "edited": false, "score": 0, "creation_date": 1594719924, "post_id": 28800493, "comment_id": 111217199, "body": "The prime testing condition in vector_is_prime is incorrect, it should be: <code>if num &gt; i &amp;&amp; num % i == 0</code>"}], "tags": [], "owner": {"reputation": 1479, "user_id": 4450817, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/566922fb80a38c57d6a0db0be0f42f3b?s=128&d=identicon&r=PG&f=1", "display_name": "Vaelden", "link": "https://stackoverflow.com/users/4450817/vaelden"}, "is_accepted": true, "score": 69, "last_activity_date": 1554651843, "last_edit_date": 1554651843, "creation_date": 1425252146, "answer_id": 28800493, "question_id": 28800121, "link": "https://stackoverflow.com/questions/28800121/what-do-i-have-to-do-to-solve-a-use-of-moved-value-error/28800493#28800493", "title": "What do I have to do to solve a &quot;use of moved value&quot; error?", "body": "<p>With the current definition of your function <code>vectorIsPrime()</code>, the function specifies that it requires ownership of the parameter because you pass it <em>by value</em>.</p>\n\n<p>When a function requires a parameter by value, the compiler will check if the value can be copied by checking if it implements the trait <code>Copy</code>.</p>\n\n<ul>\n<li>If it does, the value is copied (with a memcpy) and given to the function, and you can still continue to use your original value.</li>\n<li>If it doesn't, then the value is moved to the given function, and the caller cannot use it afterwards</li>\n</ul>\n\n<p>That is the meaning of the error message you have.</p>\n\n<p>However, most functions do not require ownership of the parameters: they can work on \"borrowed references\", which means they do not actually own the value (and cannot for example put it in a container or destroy it).</p>\n\n<pre><code>fn main() {\n    let mut count: u32 = 1;\n    let mut num: u64 = 1;\n    let mut primes: Vec&lt;u64&gt; = Vec::new();\n    primes.push(2);\n\n    while count &lt; 10001 {\n        num += 2;\n        if vector_is_prime(num, &amp;primes) {\n            count += 1;\n            primes.push(num);\n        }\n    }\n}\n\nfn vector_is_prime(num: u64, p: &amp;[u64]) -&gt; bool {\n    for &amp;i in p {\n        if num &gt; i &amp;&amp; num % i != 0 {\n            return false;\n        }\n    }\n    true\n}\n</code></pre>\n\n<p>The function <code>vector_is_prime()</code> now specifies that it only needs a <em>slice</em>, i.e. a borrowed pointer to an array (including its size) that you can obtain from a vector using the borrow operator <code>&amp;</code>.</p>\n\n<p>For more information about ownership, I invite you to read the part of the book dealing with <a href=\"https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html\" rel=\"noreferrer\">ownership</a>.</p>\n"}, {"comments": [{"owner": {"reputation": 3291, "user_id": 2009336, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/b3686d192de55109f7fc65c3aadee8cd?s=128&d=identicon&r=PG&f=1", "display_name": "mjkaufer", "link": "https://stackoverflow.com/users/2009336/mjkaufer"}, "edited": false, "score": 0, "creation_date": 1425253197, "post_id": 28800551, "comment_id": 45875043, "body": "One minor detail: When iterating, it seems that, as @Vaelden wrote, the iterating variable, <code>i</code>, needs to be written as <code>&amp;i</code>."}, {"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "reply_to_user": {"reputation": 3291, "user_id": 2009336, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/b3686d192de55109f7fc65c3aadee8cd?s=128&d=identicon&r=PG&f=1", "display_name": "mjkaufer", "link": "https://stackoverflow.com/users/2009336/mjkaufer"}, "edited": false, "score": 0, "creation_date": 1425253491, "post_id": 28800551, "comment_id": 45875130, "body": "@mjkaufer: That&#39;s one possibility, yes. Another would be to dereference <code>i</code> where you use it."}, {"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "reply_to_user": {"reputation": 3291, "user_id": 2009336, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/b3686d192de55109f7fc65c3aadee8cd?s=128&d=identicon&r=PG&f=1", "display_name": "mjkaufer", "link": "https://stackoverflow.com/users/2009336/mjkaufer"}, "edited": false, "score": 0, "creation_date": 1425253879, "post_id": 28800551, "comment_id": 45875242, "body": "Iterating over a borrowed slice gives you borrowed elements. Doing it differently would require the element type to be <code>Copy</code> or <code>Clone</code>. If you use <code>&amp;i</code> in the for loop, <code>i</code> will be a copy of a vector&#39;s element."}], "tags": [], "owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "is_accepted": false, "score": 47, "last_activity_date": 1425253279, "last_edit_date": 1425253279, "creation_date": 1425252613, "answer_id": 28800551, "question_id": 28800121, "link": "https://stackoverflow.com/questions/28800121/what-do-i-have-to-do-to-solve-a-use-of-moved-value-error/28800551#28800551", "title": "What do I have to do to solve a &quot;use of moved value&quot; error?", "body": "<p>Rust is, as I would say, a \u201cvalue-oriented\u201d language. This means that if you define primes like this</p>\n\n<pre><code>let primes: Vec&lt;u64&gt; = \u2026\n</code></pre>\n\n<p>it is not a reference to a vector. It is practically a variable that stores a <em>value</em> of type <code>Vec&lt;u64&gt;</code> just like any <code>u64</code> variable stores a <code>u64</code> value. This means that if you pass it to a function defined like this</p>\n\n<pre><code>fn vec_is_prime(num: u64, vec: Vec&lt;u64&gt;) -&gt; bool { \u2026 }\n</code></pre>\n\n<p>the function will get its own <code>u64</code> value and its own <code>Vec&lt;u64&gt;</code> value.</p>\n\n<p>The difference between <code>u64</code> and <code>Vec&lt;u64&gt;</code> however is that a <code>u64</code> value can be easily copied to another place while a <code>Vec&lt;u64&gt;</code> value can only <em>move</em> to another place easily. If you want to give the <code>vec_is_prime</code> function its own <code>Vec&lt;u64&gt;</code> value while keeping one for yourself in main, you have to duplicate it, somehow. That's what's <code>clone()</code> is for. The reason you have to be explicit here is because this operation is not cheap. That's one nice thing about Rust: It's not hard to spot expensive operations. So, you <em>could</em> call the function like this</p>\n\n<pre><code>if vec_is_prime(num, primes.clone()) { \u2026\n</code></pre>\n\n<p>but that's not really what you want, actually. The function does not need its own a <code>Vec&lt;64&gt;</code> value. It just needs to borrow it for a short while. Borrowing is much more efficient and applicable in this case:</p>\n\n<pre><code>fn vec_is_prime(num: u64, vec: &amp;Vec&lt;u64&gt;) -&gt; bool { \u2026\n</code></pre>\n\n<p>Invoking it now requires the \u201cborrowing operator\u201d:</p>\n\n<pre><code>if vec_is_prime(num, &amp;primes) { \u2026\n</code></pre>\n\n<p>Much better. But we can still improve it. If a function wants to borrow a <code>Vec&lt;T&gt;</code> just for the purpose of reading it, it's better to take a <code>&amp;[T]</code> instead:</p>\n\n<pre><code>fn vec_is_prime(num: u64, vec: &amp;[u64]) -&gt; bool { \u2026\n</code></pre>\n\n<p>It's just more general. Now, you can lend a certain portion of a Vec to the function or something else entirely (not necessarily a <code>Vec</code>, as long as this something stores its values consecutively in memory, like a static lookup table). What's also nice is that due to coersion rules you don't need to alter anything at the call site. You can still call this function with <code>&amp;primes</code> as argument.</p>\n\n<p>For <code>String</code> and <code>&amp;str</code> the situation is the same. <code>String</code> is for storing string values in the sense that a variable of this type <em>owns</em> that value. <code>&amp;str</code> is for borrowing them.</p>\n"}], "owner": {"reputation": 3291, "user_id": 2009336, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/b3686d192de55109f7fc65c3aadee8cd?s=128&d=identicon&r=PG&f=1", "display_name": "mjkaufer", "link": "https://stackoverflow.com/users/2009336/mjkaufer"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 49289, "favorite_count": 11, "accepted_answer_id": 28800493, "answer_count": 3, "score": 73, "last_activity_date": 1554651843, "creation_date": 1425249828, "last_edit_date": 1554651711, "question_id": 28800121, "link": "https://stackoverflow.com/questions/28800121/what-do-i-have-to-do-to-solve-a-use-of-moved-value-error", "title": "What do I have to do to solve a &quot;use of moved value&quot; error?", "body": "<p>I'm trying to compute the 10,001st prime in Rust (Project Euler 7), and as a part of this, my method to check whether or not an integer is prime references a vector:</p>\n\n<pre><code>fn main() {\n    let mut count: u32 = 1;\n    let mut num: u64 = 1;\n    let mut primes: Vec&lt;u64&gt; = Vec::new();\n    primes.push(2);\n\n    while count &lt; 10001 {\n        num += 2;\n        if vectorIsPrime(num, primes) {\n            count += 1;\n            primes.push(num);\n        }\n    }\n}\n\nfn vectorIsPrime(num: u64, p: Vec&lt;u64&gt;) -&gt; bool {\n    for i in p {\n        if num &gt; i &amp;&amp; num % i != 0 {\n            return false;\n        }\n    }\n\n    true\n}\n</code></pre>\n\n<p>When I try to reference the vector, I get the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0382]: use of moved value: `primes`\n --&gt; src/main.rs:9:31\n  |\n9 |         if vectorIsPrime(num, primes) {\n  |                               ^^^^^^ value moved here, in previous iteration of loop\n  |\n  = note: move occurs because `primes` has type `std::vec::Vec&lt;u64&gt;`, which does not implement the `Copy` trait\n</code></pre>\n\n<p>What do I have to do to <code>primes</code> in order to be able to access it within the <code>vectorIsPrime</code> function?</p>\n"}, {"tags": ["reference", "rust", "traits"], "answers": [{"tags": [], "owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "is_accepted": false, "score": 7, "last_activity_date": 1549595230, "last_edit_date": 1549595230, "creation_date": 1425254809, "answer_id": 28800849, "question_id": 28799372, "link": "https://stackoverflow.com/questions/28799372/when-should-i-not-implement-a-trait-for-references-to-implementors-of-that-trait/28800849#28800849", "title": "When should I not implement a trait for references to implementors of that trait?", "body": "<blockquote>\n  <p>when shouldn't I implement this? Asked another way, why doesn't the compiler automatically implement this for me? Since it currently doesn't, I assume there must be cases where having this implementation would be disadvantageous.</p>\n</blockquote>\n\n<p>As an example, the <a href=\"http://doc.rust-lang.org/std/default/index.html\" rel=\"nofollow noreferrer\"><code>Default</code></a> trait immediately came to mind.</p>\n\n<pre><code>pub trait Default {\n    fn default() -&gt; Self;\n}\n</code></pre>\n\n<p>I could implement it for <code>T</code>, but there is no way to automatically implement it for <code>&amp;T</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 4, "last_activity_date": 1549595286, "last_edit_date": 1549595286, "creation_date": 1425268137, "answer_id": 28802420, "question_id": 28799372, "link": "https://stackoverflow.com/questions/28799372/when-should-i-not-implement-a-trait-for-references-to-implementors-of-that-trait/28802420#28802420", "title": "When should I not implement a trait for references to implementors of that trait?", "body": "<p>The particular trait you are writing here only takes <code>self</code> by reference, and that is the only reason it is possible to write the additional implementation you did.</p>\n\n<p>For this reason, taking the parameter to <code>runner()</code> by value is probably undesirable; you should instead be taking it by reference. This guideline can apply generally: if it is possible to implement the trait for a reference then rather than wondering \u201cshould I implement it?\u201d you should wonder \u201cwhy <em>would</em> I implement it?\u201d for the only cases where you would use it should probably be altered to take the object by reference in the first place.</p>\n"}], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2226, "favorite_count": 3, "accepted_answer_id": 28802420, "answer_count": 2, "score": 17, "last_activity_date": 1549595286, "creation_date": 1425245607, "last_edit_date": 1549595178, "question_id": 28799372, "link": "https://stackoverflow.com/questions/28799372/when-should-i-not-implement-a-trait-for-references-to-implementors-of-that-trait", "title": "When should I not implement a trait for references to implementors of that trait?", "body": "<p>If I have a trait, and a function that accepts a generic type constrained to that type, everything works fine. If I try to pass in a reference to that type, I get a compilation error.</p>\n\n<pre><code>trait Trait {\n    fn hello(&amp;self) -&gt; u32;\n}\n\nstruct Struct(u32);\n\nimpl Trait for Struct {\n    fn hello(&amp;self) -&gt; u32 {\n        self.0\n    }\n}\n\nfn runner&lt;T: Trait&gt;(t: T) {\n    println!(\"{}\", t.hello())\n}\n\nfn main() {\n    let s = Struct(42);\n\n    // Works\n    runner(s);\n\n    // Doesn't work\n    runner(&amp;s);\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `&amp;Struct: Trait` is not satisfied\n  --&gt; src/main.rs:24:5\n   |\n24 |     runner(&amp;s);\n   |     ^^^^^^ the trait `Trait` is not implemented for `&amp;Struct`\n   |\n   = help: the following implementations were found:\n             &lt;Struct as Trait&gt;\nnote: required by `runner`\n  --&gt; src/main.rs:13:1\n   |\n13 | fn runner&lt;T: Trait&gt;(t: T) {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>I can fix the issue by implementing the trait for any reference to a type that implements the trait:</p>\n\n<pre><code>impl&lt;'a, T&gt; Trait for &amp;'a T\nwhere\n    T: Trait,\n{\n    fn hello(&amp;self) -&gt; u32 {\n        (*self).hello()\n    }\n}\n</code></pre>\n\n<p>The piece of information that I'm missing is when <strong>shouldn't</strong> I implement this? Asked another way, why doesn't the compiler automatically implement this for me? Since it currently doesn't, I assume there must be cases where having this implementation would be disadvantageous. </p>\n"}, {"tags": ["loops", "rust"], "answers": [{"comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 2, "creation_date": 1425260167, "post_id": 28798072, "comment_id": 45876727, "body": "That RFC is for something quite different from what was attempted here; I can confidently say that the summation of each iteration to yield the loop expression&#39;s result is never going to happen."}, {"owner": {"reputation": 16556, "user_id": 839689, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/eed3ee2db841be15bdb120f3ff38f02e?s=128&d=identicon&r=PG", "display_name": "Nayuki", "link": "https://stackoverflow.com/users/839689/nayuki"}, "edited": false, "score": 0, "creation_date": 1568307166, "post_id": 28798072, "comment_id": 102242084, "body": "Note that this was released in <a href=\"https://blog.rust-lang.org/2017/07/20/Rust-1.19.html\" rel=\"nofollow noreferrer\">Rust 1.19 (2017-07-20)</a>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 12, "last_activity_date": 1528900304, "last_edit_date": 1528900304, "creation_date": 1425238270, "answer_id": 28798072, "question_id": 28798036, "link": "https://stackoverflow.com/questions/28798036/can-a-while-loop-evaluate-to-a-value/28798072#28798072", "title": "Can a while loop evaluate to a value?", "body": "<p>No. The value of a <code>while</code> loop is always <code>()</code>, the unit type.</p>\n\n<p><a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1624-loop-break-value.md\" rel=\"noreferrer\">RFC 1624</a> did enhance <code>loop</code> loops to be able to break with a value:</p>\n\n<pre><code>let x = loop {\n    break 42;\n};\nprintln!(\"{}\", x);\n</code></pre>\n"}], "owner": {"reputation": 3291, "user_id": 2009336, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/b3686d192de55109f7fc65c3aadee8cd?s=128&d=identicon&r=PG&f=1", "display_name": "mjkaufer", "link": "https://stackoverflow.com/users/2009336/mjkaufer"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1534, "favorite_count": 0, "accepted_answer_id": 28798072, "answer_count": 1, "score": 3, "last_activity_date": 1528900304, "creation_date": 1425238072, "last_edit_date": 1528900288, "question_id": 28798036, "link": "https://stackoverflow.com/questions/28798036/can-a-while-loop-evaluate-to-a-value", "title": "Can a while loop evaluate to a value?", "body": "<p>I'm learning Rust and today I stumbled upon being able to assign variables through <code>if</code>/<code>else</code> expressions. For instance:</p>\n\n<pre><code>let y = 5;\n\nlet x = if y &gt; 20 { 20 } else { y };\n</code></pre>\n\n<p>Is there some way to do this with a <code>while</code> loop? I tried:</p>\n\n<pre><code>fn main() {\n    let mut n = 0;\n\n    let mut num = 0;\n\n    num += while n &lt; 10 {\n        n += 1;\n        5\n    };\n}\n</code></pre>\n\n<p>with the hope that <code>num</code> would eventually be equal to 50, with the while loop incrementing <code>num</code> by five each iteration, but I get the following error</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n --&gt; src/main.rs:8:9\n  |\n8 |         5\n  |         ^ expected (), found integral variable\n  |\n  = note: expected type `()`\n             found type `{integer}`\n\nerror[E0277]: cannot add-assign `()` to `{integer}`\n --&gt; src/main.rs:6:9\n  |\n6 |     num += while n &lt; 10 {\n  |         ^^ no implementation for `{integer} += ()`\n  |\n  = help: the trait `std::ops::AddAssign&lt;()&gt;` is not implemented for `{integer}`\n</code></pre>\n\n<p>Naturally, I could put the <code>num += 5</code> inside the while loop, but that takes the fun out of it.</p>\n\n<p>This is my first day with Rust, so I don't even know if it's possible to do what I have in mind. Is this indeed possible? Am I making a syntax error?</p>\n\n<p>This is another version of the code I'm trying to run, but also fails to work:</p>\n\n<pre><code>fn main() {\n    let mut num = 0;\n\n    num += while num &lt; 50 {\n        5\n    };\n}\n</code></pre>\n"}, {"tags": ["iterator", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1425229964, "post_id": 28796331, "comment_id": 45867351, "body": "For readability-sake, I&#39;d highly recommend not mixing the inline trait constraints <code>&lt;A: Foo&gt;</code> with the <code>where</code> clause. Once it&#39;s long or complicated, move wholesale to the <code>where</code> clause. My preference is to <i>always</i> use the <code>where</code> clause."}], "answers": [{"comments": [{"owner": {"reputation": 2189, "user_id": 1477992, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/22e212e1defd6cf572fe11aa79f1dace?s=128&d=identicon&r=PG", "display_name": "le_me", "link": "https://stackoverflow.com/users/1477992/le-me"}, "edited": false, "score": 0, "creation_date": 1425231293, "post_id": 28796724, "comment_id": 45867900, "body": "Thanks a lot! you can explain this a lot better than the compiler haha ;) Generics are the hardest part of rust for me, but I&#39;ve learned a lot today thanks to you!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1500497947, "last_edit_date": 1500497947, "creation_date": 1425231042, "answer_id": 28796724, "question_id": 28796331, "link": "https://stackoverflow.com/questions/28796331/how-do-i-pass-a-function-pointer-recursively/28796724#28796724", "title": "How do I pass a function pointer recursively?", "body": "<p>The last error indicates that <em>you don't have an <code>Iterator</code></em>. <code>Iterator</code> is only implemented for your struct under certain conditions, and you aren't meeting them. The second error explains why.</p>\n\n<blockquote>\n  <p>the trait <code>for&lt;'r&gt; Fn&lt;(&amp;'r mut IntoIter&lt;IR&gt;,)&gt;</code> is not implemented for the type <code>F</code></p>\n</blockquote>\n\n<p>So, why does the compiler think this won't work? Let's look at your constraints:</p>\n\n<pre><code>impl&lt;I, F&gt; Iterator for ApplyRecursive&lt;I, F&gt;\nwhere\n    I: Iterator&lt;Item = IR&gt;\n    F: Fn(&amp;mut Peekable&lt;I&gt;) -&gt; Option&lt;I::Item&gt;,\n</code></pre>\n\n<p>This structure refers to a <em>concrete</em> type <code>I</code> that implements <code>Iterator</code>. Then <code>F</code> is a <em>concrete</em> type that accepts a mutable reference to the <strong>same</strong> concrete type as <code>I</code>. However, you try to use your function (specialized for whatever type it happens to be) on the concrete type <code>IntoIter</code> - but this might be a <strong>different</strong> concrete type!</p>\n\n<p>The easiest fix is to remove the generics here:</p>\n\n<pre><code>impl&lt;F&gt; Iterator for ApplyRecursive&lt;vec::IntoIter&lt;IR&gt;, F&gt;\nwhere\n    F: Fn(&amp;mut vec::IntoIter&lt;IR&gt;) -&gt; Option&lt;IR&gt;,\n{\n    type Item = IR;\n\n    fn next(&amp;mut self) -&gt; Option&lt;IR&gt; {\n</code></pre>\n\n<p>This unlocks a whole other slew of errors about mutability, accessing private fields, and exporting private types, but I think it gets over this hump.</p>\n\n<p>Alternatively, we can change <code>F</code> to accept a <em>trait object</em>, and not worry about specializing it:</p>\n\n<pre><code>pub trait CustomIter: Iterator {\n    fn apply_recursive&lt;F&gt;(self, f: F) -&gt; ApplyRecursive&lt;Self, F&gt;\n    where\n        F: Fn(&amp;mut Iterator&lt;Item = Self::Item&gt;) -&gt; Option&lt;Self::Item&gt;,\n        Self: Sized,\n        Self::Item: Clone,\n    {\n        ApplyRecursive { iter: self.peekable(), f: f }\n    }\n}\n\nimpl&lt;I, F&gt; Iterator for ApplyRecursive&lt;I, F&gt;\nwhere\n    I: Iterator&lt;Item = IR&gt;,\n    F: Fn(&amp;mut Iterator&lt;Item = IR&gt;) -&gt; Option&lt;IR&gt;,\n{\n    type Item = I::Item;\n\n    fn next(&amp;mut self) -&gt; Option&lt;IR&gt; {\n</code></pre>\n"}], "owner": {"reputation": 2189, "user_id": 1477992, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/22e212e1defd6cf572fe11aa79f1dace?s=128&d=identicon&r=PG", "display_name": "le_me", "link": "https://stackoverflow.com/users/1477992/le-me"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 136, "favorite_count": 0, "accepted_answer_id": 28796724, "answer_count": 1, "score": 0, "last_activity_date": 1500497947, "creation_date": 1425229079, "last_edit_date": 1500497685, "question_id": 28796331, "link": "https://stackoverflow.com/questions/28796331/how-do-i-pass-a-function-pointer-recursively", "title": "How do I pass a function pointer recursively?", "body": "<p>I want to write an <code>Iterator</code> adaptor which applies a function recursively to its underlying <code>Iterator</code>. Recursively because the variant  <code>IR::Loop</code> includes a <code>Vec&lt;IR&gt;</code>, of which an iterator should also be passed to the function.</p>\n\n<p>The function should take an <code>&amp;mut Iterator&lt;Item = IR&gt;</code> and use it to compute the next value of the iterator, (like <a href=\"https://docs.rs/itertools/0.6.1/itertools/trait.Itertools.html#method.batching\" rel=\"nofollow noreferrer\"><code>itertools::batching</code></a>).</p>\n\n<pre><code>use std::iter::Peekable;\n\n#[derive(Clone)]\nenum IR {\n    OperationA,\n    OperationB,\n    Loop(Vec&lt;IR&gt;),\n}\n\npub trait MyItertools: Iterator {\n    fn apply_recursive&lt;F: Fn(&amp;mut Peekable&lt;Self&gt;) -&gt; Option&lt;Self::Item&gt;&gt;(\n        self,\n        f: F,\n    ) -&gt; ApplyRecursive&lt;Self, F&gt;\n    where\n        Self: Sized,\n        Self::Item: Clone,\n    {\n        ApplyRecursive {\n            iter: self.peekable(),\n            f: f,\n        }\n    }\n}\n\nimpl&lt;T: ?Sized&gt; MyItertools for T\nwhere\n    T: Iterator,\n{\n}\n\n//applies a function recursively to some Iterator with Item=IR\n#[derive(Clone)]\nstruct ApplyRecursive&lt;I, F&gt;\nwhere\n    I: Iterator,\n    I::Item: Clone,\n{\n    iter: Peekable&lt;I&gt;,\n    f: F,\n}\n\nimpl&lt;I: Iterator&lt;Item = IR&gt;, F&gt; Iterator for ApplyRecursive&lt;I, F&gt;\nwhere\n    F: Fn(&amp;mut Peekable&lt;I&gt;)\n       -&gt; Option&lt;I::Item&gt;,\n{\n    type Item = I::Item;\n\n    fn next(&amp;mut self) -&gt; Option&lt;I::Item&gt; {\n        match self.iter.peek() {\n            Some(&amp;IR::Loop(code)) =&gt; {\n                self.iter.next(); //advance the iterator\n                let code: Vec&lt;IR&gt; = code.into_iter().apply_recursive(self.f).collect();\n\n                Some(IR::Loop(code))\n            }\n            Some(x) =&gt; (self.f)(&amp;mut self.iter),\n            None =&gt; None,\n        }\n    }\n\n    fn size_hint(&amp;self) -&gt; (usize, Option&lt;usize&gt;) {\n        self.iter.size_hint()\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=485034f9e4f717cd5f9f018a54d729b6&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a></p>\n\n<p>What am I doing wrong? I don't even understand the error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `for&lt;'r&gt; F: std::ops::Fn&lt;(&amp;'r mut std::iter::Peekable&lt;std::vec::IntoIter&lt;IR&gt;&gt;,)&gt;` is not satisfied\n  --&gt; src/main.rs:54:54\n   |\n54 |                 let code: Vec&lt;IR&gt; = code.into_iter().apply_recursive(self.f).collect();\n   |                                                      ^^^^^^^^^^^^^^^ the trait `for&lt;'r&gt; std::ops::Fn&lt;(&amp;'r mut std::iter::Peekable&lt;std::vec::IntoIter&lt;IR&gt;&gt;,)&gt;` is not implemented for `F`\n   |\n   = help: consider adding a `where for&lt;'r&gt; F: std::ops::Fn&lt;(&amp;'r mut std::iter::Peekable&lt;std::vec::IntoIter&lt;IR&gt;&gt;,)&gt;` bound\n\nerror[E0277]: the trait bound `for&lt;'r&gt; F: std::ops::FnOnce&lt;(&amp;'r mut std::iter::Peekable&lt;std::vec::IntoIter&lt;IR&gt;&gt;,)&gt;` is not satisfied\n  --&gt; src/main.rs:54:54\n   |\n54 |                 let code: Vec&lt;IR&gt; = code.into_iter().apply_recursive(self.f).collect();\n   |                                                      ^^^^^^^^^^^^^^^ the trait `for&lt;'r&gt; std::ops::FnOnce&lt;(&amp;'r mut std::iter::Peekable&lt;std::vec::IntoIter&lt;IR&gt;&gt;,)&gt;` is not implemented for `F`\n   |\n   = help: consider adding a `where for&lt;'r&gt; F: std::ops::FnOnce&lt;(&amp;'r mut std::iter::Peekable&lt;std::vec::IntoIter&lt;IR&gt;&gt;,)&gt;` bound\n\nerror: no method named `collect` found for type `ApplyRecursive&lt;std::vec::IntoIter&lt;IR&gt;, F&gt;` in the current scope\n  --&gt; src/main.rs:54:78\n   |\n54 |                 let code: Vec&lt;IR&gt; = code.into_iter().apply_recursive(self.f).collect();\n   |                                                                              ^^^^^^^\n   |\n   = note: the method `collect` exists but the following trait bounds were not satisfied: `F : std::ops::Fn&lt;(&amp;mut std::iter::Peekable&lt;std::vec::IntoIter&lt;IR&gt;&gt;,)&gt;`, `ApplyRecursive&lt;std::vec::IntoIter&lt;IR&gt;, F&gt; : std::iter::Iterator`\n   = help: items from traits can only be used if the trait is implemented and in scope; the following trait defines an item `collect`, perhaps you need to implement it:\n   = help: candidate #1: `std::iter::Iterator`\n</code></pre>\n"}, {"tags": ["http", "rust"], "answers": [{"comments": [{"owner": {"reputation": 1327, "user_id": 3656414, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/e61d1247b5d7ea2f20d4b7371d671dc7?s=128&d=identicon&r=PG&f=1", "display_name": "rapidclock", "link": "https://stackoverflow.com/users/3656414/rapidclock"}, "edited": false, "score": 0, "creation_date": 1576914467, "post_id": 28795650, "comment_id": 105053885, "body": "Can you elaborate on the <code>Connection:close</code>? I cannot seem to find any reference to it. Is it part of the standard library?"}, {"owner": {"reputation": 1327, "user_id": 3656414, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/e61d1247b5d7ea2f20d4b7371d671dc7?s=128&d=identicon&r=PG&f=1", "display_name": "rapidclock", "link": "https://stackoverflow.com/users/3656414/rapidclock"}, "edited": false, "score": 1, "creation_date": 1576914844, "post_id": 28795650, "comment_id": 105053948, "body": "Edit: nvm - I understand that <code>Connection : close</code> is the header included in the request for HTTP 1.1 to avoid(turn off) persistent connections."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1425225567, "last_edit_date": 1495539804, "creation_date": 1425225567, "answer_id": 28795650, "question_id": 28795609, "link": "https://stackoverflow.com/questions/28795609/why-is-a-raw-http-request-extremely-slow/28795650#28795650", "title": "Why is a raw HTTP request extremely slow?", "body": "<p>It's because you are using HTTP 1.1, which <a href=\"https://stackoverflow.com/a/247026/155423\">allows <em>persistent connections</em></a>. 30 seconds is probably the timeout of the server on the other end.</p>\n\n<p>Switch to HTTP 1.0 or properly close the connection, perhaps by using the header <code>Connection: close</code>. Doing either of these reduces the run time to ~170ms, without enabling any compile-time optimizations (which probably don't do much here anyway).</p>\n"}], "owner": {"reputation": 303, "user_id": 3746744, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/3d11ccaf78e2f250cad2f9562656fca9?s=128&d=identicon&r=PG&f=1", "display_name": "user3746744", "link": "https://stackoverflow.com/users/3746744/user3746744"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 496, "favorite_count": 1, "accepted_answer_id": 28795650, "answer_count": 1, "score": 1, "last_activity_date": 1425225691, "creation_date": 1425225335, "last_edit_date": 1425225691, "question_id": 28795609, "link": "https://stackoverflow.com/questions/28795609/why-is-a-raw-http-request-extremely-slow", "title": "Why is a raw HTTP request extremely slow?", "body": "<p>When I try to send HTTP request packets using sockets it is extremely slow. It takes about 30 seconds to get a reply whereas in any other language with the same base code it takes 1 second.</p>\n\n<pre><code>use std::old_io::BufferedStream;\nuse std::old_io::TcpStream;\n\nfn main() {\n    let mut reddit = BufferedStream::new(TcpStream::connect(\"reddit.com:80\").unwrap());\n    reddit.write_all(format!(\"GET / HTTP/1.1{0}User-Agent: curl/7.22.0 (i686-pc-linux-gnu) libcurl/7.22.0 zlib/1.2.3.4 libidn/1.23 librtmp/2.3{0}Host: www.reddit.com{0}Accept: */*{0}{0}\", \"\\r\\n\").as_bytes());\n    reddit.flush();\n    let reply = reddit.read_to_string().unwrap();\n    println!(\"{}\", reply);\n}\n</code></pre>\n\n<p>Is this a bug in Rust?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "is_accepted": true, "score": 1, "last_activity_date": 1425217047, "creation_date": 1425217047, "answer_id": 28794148, "question_id": 28793406, "link": "https://stackoverflow.com/questions/28793406/how-do-you-write-a-macro-with-chainable-tokens/28794148#28794148", "title": "How do you write a macro with chainable tokens?", "body": "<p>It seems that it's impossible to capture arbitrary symbols matches during macroexpand: as the language reference says, \"valid designators are item, block, stmt, pat, expr, ty (type), ident, path, tt\". So the best I could suggest is to use \"ident\"-valid tokens, like \"and\"/\"or\" instead of \"&amp;&amp;\"/\"||\", for example:</p>\n\n\n\n<pre><code>macro_rules! query_op(\n  ( and ) =&gt; { \"T::And\" };\n  ( or ) =&gt; { \"T::Or\" };\n  ( $e:ident ) =&gt; { concat!(\"T::Expr(\", stringify!($e), \")\") };\n);\n\nmacro_rules! query(\n ( $( $x:ident )* ) =&gt; {\n   {\n     let mut temp_vec = Vec::new();\n     $(temp_vec.push(query_op!($x));)*\n     temp_vec\n    }\n  };\n);\n\nfn main() {\n  let q = query!(Expr1 or Expr2 and Expr3 or Expr4);\n  println!(\"{:?}\", q);\n}\n</code></pre>\n\n<p>Outputs:</p>\n\n<pre><code>[\"T::Expr(Expr1)\", \"T::Or\", \"T::Expr(Expr2)\", \"T::And\", \"T::Expr(Expr3)\", \"T::Or\", \"T::Expr(Expr4)\"]\n</code></pre>\n"}], "owner": {"reputation": 25893, "user_id": 353820, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/32b29e1dc23c2c5abe0283ab7b9541d3?s=128&d=identicon&r=PG", "display_name": "Doug", "link": "https://stackoverflow.com/users/353820/doug"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 266, "favorite_count": 1, "accepted_answer_id": 28794148, "answer_count": 1, "score": 1, "last_activity_date": 1425217047, "creation_date": 1425212116, "question_id": 28793406, "link": "https://stackoverflow.com/questions/28793406/how-do-you-write-a-macro-with-chainable-tokens", "title": "How do you write a macro with chainable tokens?", "body": "<p>I'm not really sure how to phrase this, so the question title is pretty rubbish, but here's what I'm trying to do:</p>\n\n<p>I can write this macro:</p>\n\n<pre><code>macro_rules! op(\n  ( $v1:ident &amp;&amp; $v2:ident ) =&gt; { Op::And($v1, $v2) };\n  ( $v1:ident || $v2:ident ) =&gt; { Op::Or($v1, $v2) };\n);\n</code></pre>\n\n<p>Which I can use like this:</p>\n\n<pre><code>let _ = op!(Expr || Expr);\nlet _ = op!(Expr &amp;&amp; Expr);\n</code></pre>\n\n<p>What I want to do is to write an arbitrary sequence of tokens like this:</p>\n\n<pre><code>let _ = op!(Expr || Expr || Expr &amp;&amp; Expr || Expr);\n</code></pre>\n\n<p>Which resolves into a Vec of tokens, like:</p>\n\n<pre><code>vec!(T::Expr(e1), T::Or, T::Expr(e2), T::Or, ...) \n</code></pre>\n\n<p>I can write a vec! like macro:</p>\n\n<pre><code>macro_rules! query(\n ( $( $x:expr ),* ) =&gt; {\n   {\n     let mut temp_vec = Vec::new();\n     $(temp_vec.push($x);)*\n     temp_vec\n    }\n  };\n);\n</code></pre>\n\n<p>...but I can't see how to convert the arbitrary symbols (eg. &amp;&amp;) into tokens as the macro runs.</p>\n\n<p>Is this possible somehow?</p>\n\n<p>playpen link: <a href=\"http://is.gd/I9F5YV\" rel=\"nofollow\">http://is.gd/I9F5YV</a></p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 471, "user_id": 1204992, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/7ea79d59662f7180c29da5a1be5a9284?s=128&d=identicon&r=PG", "display_name": "Ferio", "link": "https://stackoverflow.com/users/1204992/ferio"}, "edited": false, "score": 0, "creation_date": 1425219121, "post_id": 28793872, "comment_id": 45863507, "body": "<code>FnMut</code> doesn\u2019t work because it borrows it\u2019s environment which is often not static and thus not sendable. I think I found a better solution for now: <code>let handler: Box&lt;Invoke&lt;&amp;Type&gt;&gt; = unsafe{mem::transmute(handler)}; handler.invoke(self)</code>"}, {"owner": {"reputation": 471, "user_id": 1204992, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/7ea79d59662f7180c29da5a1be5a9284?s=128&d=identicon&r=PG", "display_name": "Ferio", "link": "https://stackoverflow.com/users/1204992/ferio"}, "edited": false, "score": 0, "creation_date": 1425219615, "post_id": 28793872, "comment_id": 45863659, "body": "But I have no idea what implications this cast has. I hope calling <code>FnOnce</code> will be possible soon."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 471, "user_id": 1204992, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/7ea79d59662f7180c29da5a1be5a9284?s=128&d=identicon&r=PG", "display_name": "Ferio", "link": "https://stackoverflow.com/users/1204992/ferio"}, "edited": false, "score": 1, "creation_date": 1425221679, "post_id": 28793872, "comment_id": 45864358, "body": "@Ferio: if you need to transmute, it\u2019s wrong. It <i>might</i> function correctly, but you\u2019re definitely asking for trouble and have broken the rules."}, {"owner": {"reputation": 471, "user_id": 1204992, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/7ea79d59662f7180c29da5a1be5a9284?s=128&d=identicon&r=PG", "display_name": "Ferio", "link": "https://stackoverflow.com/users/1204992/ferio"}, "edited": false, "score": 0, "creation_date": 1425226374, "post_id": 28793872, "comment_id": 45866067, "body": "I don\u2019t know why I have to transmute. In principle it should work with <code>as</code>, but I guess <code>FnOnce</code> is still missing some support\u2026"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1425294847, "post_id": 28793872, "comment_id": 45889232, "body": "@Feno: if you don\u2019t know what you are transmuting from and to, <i>do not on any account do it</i>. In your particular case, you\u2019re transmuting from <code>&amp;&#39;_ Type</code> to <code>&amp;&#39;static Type</code>, which could lead to use-after-free bugs."}, {"owner": {"reputation": 471, "user_id": 1204992, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/7ea79d59662f7180c29da5a1be5a9284?s=128&d=identicon&r=PG", "display_name": "Ferio", "link": "https://stackoverflow.com/users/1204992/ferio"}, "edited": false, "score": 0, "creation_date": 1425387656, "post_id": 28793872, "comment_id": 45934461, "body": "But without <code>for&lt;&#39;a&gt;</code> it would have been the only option, \u201eDon\u2019t do it!\u201c is not an option in that case."}, {"owner": {"reputation": 471, "user_id": 1204992, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/7ea79d59662f7180c29da5a1be5a9284?s=128&d=identicon&r=PG", "display_name": "Ferio", "link": "https://stackoverflow.com/users/1204992/ferio"}, "edited": false, "score": 0, "creation_date": 1425388950, "post_id": 28793872, "comment_id": 45935325, "body": "To clarify, the cast I mentioned in the comment is <code>Box&lt;FnOnce(&amp;Type) + Send&gt;</code> to  <code>Box&lt;Invoke&lt;&amp;Type&gt;&gt;</code>. This is why I was confused because one should be able to cast this without <code>transmute</code>. I didn\u2019t claim it\u2019s a good solution but it is better than casting some <code>&#39;static</code> away."}], "tags": [], "owner": {"reputation": 25893, "user_id": 353820, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/32b29e1dc23c2c5abe0283ab7b9541d3?s=128&d=identicon&r=PG", "display_name": "Doug", "link": "https://stackoverflow.com/users/353820/doug"}, "is_accepted": false, "score": 0, "last_activity_date": 1425215133, "creation_date": 1425215133, "answer_id": 28793872, "question_id": 28792072, "link": "https://stackoverflow.com/questions/28792072/how-to-replace-proc-with-unboxed-closures/28793872#28793872", "title": "How to replace proc with unboxed closures?", "body": "<p>The simple answer is, use:</p>\n\n<pre><code>Handle(Box&lt;FnMut(&amp;Type) + Send&gt;)\n</code></pre>\n\n<p>The more complex answer is, as per <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/run-pass/unboxed-closures-prelude.rs\" rel=\"nofollow\">https://github.com/rust-lang/rust/blob/master/src/test/run-pass/unboxed-closures-prelude.rs</a>, you can't invoke a <code>Box&lt;FnOnce(...)&gt;</code>, only a Sized F where F: FnOnce&lt;...></p>\n\n<p>...no idea why, but I presume its because it moves the value as the trait consumes self; quite strange.</p>\n"}, {"comments": [{"owner": {"reputation": 471, "user_id": 1204992, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/7ea79d59662f7180c29da5a1be5a9284?s=128&d=identicon&r=PG", "display_name": "Ferio", "link": "https://stackoverflow.com/users/1204992/ferio"}, "edited": false, "score": 0, "creation_date": 1425226439, "post_id": 28795055, "comment_id": 45866093, "body": "Thunk has the same problem as my solution. You have to supply a lifetime and I\u2019m using a channel. See Vaeldens answer. The mysterious <code>for</code> is the solution."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 471, "user_id": 1204992, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/7ea79d59662f7180c29da5a1be5a9284?s=128&d=identicon&r=PG", "display_name": "Ferio", "link": "https://stackoverflow.com/users/1204992/ferio"}, "edited": false, "score": 1, "creation_date": 1425226897, "post_id": 28795055, "comment_id": 45866283, "body": "@Ferio I&#39;m glad you got your problem solved! I have to admit that I don&#39;t understand <i>why</i> you can&#39;t supply a lifetime, but that&#39;s something I&#39;ll have to run into for myself sometime! ^_^"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 471, "user_id": 1204992, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/7ea79d59662f7180c29da5a1be5a9284?s=128&d=identicon&r=PG", "display_name": "Ferio", "link": "https://stackoverflow.com/users/1204992/ferio"}, "edited": false, "score": 0, "creation_date": 1425228357, "post_id": 28795055, "comment_id": 45866752, "body": "@Ferio Ah - <b>channels</b>! I think that&#39;s an important enough distinction to add to your original question. When you said &quot;send the enum to another thread&quot;, I just assumed you meant when <i>starting</i> the thread."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1425223340, "last_edit_date": 1425223340, "creation_date": 1425222242, "answer_id": 28795055, "question_id": 28792072, "link": "https://stackoverflow.com/questions/28792072/how-to-replace-proc-with-unboxed-closures/28795055#28795055", "title": "How to replace proc with unboxed closures?", "body": "<p>What about using <a href=\"http://doc.rust-lang.org/nightly/std/thunk/struct.Thunk.html\" rel=\"nofollow\"><code>Thunk</code></a>?</p>\n\n<pre><code>#![feature(std_misc)]\n\nuse std::thunk::Thunk;\n\nstruct Type;\n\nenum Message&lt;'a&gt; { //'\n    Handle(Thunk&lt;'a, &amp;'a Type, u8&gt;)\n}\n\npub fn main() {\n    let a = Type;\n    let handler = Message::Handle(Thunk::with_arg(move |_| 42));\n    let res = match handler {\n        Message::Handle(f) =&gt; f.invoke((&amp;a))\n    };\n    println!(\"{}\", res);\n}\n</code></pre>\n\n<p>(<a href=\"http://is.gd/qe0uqb\" rel=\"nofollow\">playpen link</a>)</p>\n\n<blockquote>\n  <p>In order to be able to send the enum to another thread I have to use 'static and later mem::transmute to cast the lifetime.</p>\n</blockquote>\n\n<p>Since <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0458-send-improvements.md\" rel=\"nofollow\">RFC 458</a> landed, <a href=\"http://doc.rust-lang.org/std/thread/fn.scoped.html\" rel=\"nofollow\"><code>thread::scoped</code></a> can accept closures (and <code>Fn*</code> traits) that have a non-<code>'static</code> lifetime. The caveat is that you have to ensure that the thread exits before the lifetime expires - otherwise you'd have a reference to invalid memory!</p>\n\n<p>Using <code>mem::transmute</code> lets you ignore that, but at the cost of your program crashing when that memory is no longer valid.</p>\n"}, {"comments": [{"owner": {"reputation": 471, "user_id": 1204992, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/7ea79d59662f7180c29da5a1be5a9284?s=128&d=identicon&r=PG", "display_name": "Ferio", "link": "https://stackoverflow.com/users/1204992/ferio"}, "edited": false, "score": 1, "creation_date": 1425226240, "post_id": 28795237, "comment_id": 45866015, "body": "Thank you! But I think this guy is not documented yet\u2026 :("}, {"owner": {"reputation": 1479, "user_id": 4450817, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/566922fb80a38c57d6a0db0be0f42f3b?s=128&d=identicon&r=PG&f=1", "display_name": "Vaelden", "link": "https://stackoverflow.com/users/4450817/vaelden"}, "reply_to_user": {"reputation": 471, "user_id": 1204992, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/7ea79d59662f7180c29da5a1be5a9284?s=128&d=identicon&r=PG", "display_name": "Ferio", "link": "https://stackoverflow.com/users/1204992/ferio"}, "edited": false, "score": 0, "creation_date": 1425230292, "post_id": 28795237, "comment_id": 45867490, "body": "You can find some information on the for syntax in the corresponding RFC on github (I haven&#39;t found any other documentation on it): <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0387-higher-ranked-trait-bounds.md\" rel=\"nofollow noreferrer\">github.com/rust-lang/rfcs/blob/master/text/&hellip;</a>"}, {"owner": {"reputation": 471, "user_id": 1204992, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/7ea79d59662f7180c29da5a1be5a9284?s=128&d=identicon&r=PG", "display_name": "Ferio", "link": "https://stackoverflow.com/users/1204992/ferio"}, "edited": false, "score": 0, "creation_date": 1425231431, "post_id": 28795237, "comment_id": 45867959, "body": "It\u2019s also a bit surprising that one has to annotate the type of the argument when constructing the closure."}], "tags": [], "owner": {"reputation": 1479, "user_id": 4450817, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/566922fb80a38c57d6a0db0be0f42f3b?s=128&d=identicon&r=PG&f=1", "display_name": "Vaelden", "link": "https://stackoverflow.com/users/4450817/vaelden"}, "is_accepted": true, "score": 2, "last_activity_date": 1425223245, "creation_date": 1425223245, "answer_id": 28795237, "question_id": 28792072, "link": "https://stackoverflow.com/questions/28792072/how-to-replace-proc-with-unboxed-closures/28795237#28795237", "title": "How to replace proc with unboxed closures?", "body": "<p>The solution in your case is to use the <code>for</code> keyword, which allows you to specify an \"anonymous\" lifetime for your input parameter.</p>\n\n<pre><code>#![feature(box_syntax)]\n#![feature(std_misc)]\n\nuse std::thunk::Invoke;\n\nstruct Type;\n\nenum Message {\n    Handle(Box&lt;for &lt;'r&gt; Invoke&lt;(&amp;'r Type)&gt; + Send&gt;)\n}\n\npub fn main() {\n    let a = Type;\n    let handler = Message::Handle(box move |_: &amp;Type| {});\n    match handler {\n        Message::Handle(f) =&gt; f.invoke(&amp;a)\n    }\n}\n</code></pre>\n\n<p><a href=\"http://is.gd/2qkyt6\" rel=\"nofollow\">playpen link</a></p>\n\n<p>Also I think the major problem when using your <code>transmute()</code> trick would be if your function was returning or storing a reference to a part of the input structure: the compiler would have assigned the 'static lifetime to this reference, whereas it would obviously be a mistake, and may lead to memory corruption.</p>\n\n<p>You can find more information about closures and why the <code>Invoke</code> trait is currently needed in <a href=\"http://smallcultfollowing.com/babysteps/blog/2014/11/26/purging-proc/\" rel=\"nofollow\">this blog post</a> (note: the part about specifying the closure type explicitly is now outdated, the compiler now infers it).</p>\n"}], "owner": {"reputation": 471, "user_id": 1204992, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/7ea79d59662f7180c29da5a1be5a9284?s=128&d=identicon&r=PG", "display_name": "Ferio", "link": "https://stackoverflow.com/users/1204992/ferio"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 217, "favorite_count": 0, "accepted_answer_id": 28795237, "answer_count": 3, "score": 2, "last_activity_date": 1425223340, "creation_date": 1425203007, "last_edit_date": 1425222472, "question_id": 28792072, "link": "https://stackoverflow.com/questions/28792072/how-to-replace-proc-with-unboxed-closures", "title": "How to replace proc with unboxed closures?", "body": "<p>I\u2019m struggling a bit with replacing proc. Using <code>Invoke</code> works but I have to specify a lifetime. In order to be able to send the enum to another thread I have to use <code>'static</code> and later <code>mem::transmute</code> to cast the lifetime. Not very appealing.</p>\n\n<p>On the other hand using <code>FnOnce</code> gives me this error:</p>\n\n<pre><code>&lt;anon&gt;:24:32: 24:33 error: cannot move a value of type for&lt;'r&gt; core::ops::FnOnce(&amp;'r Type) + Send: the size of for&lt;'r&gt; core::ops::FnOnce(&amp;'r Type) + Send cannot be statically determined [E0161]\n</code></pre>\n\n<p>How can I properly replace proc?</p>\n\n<pre><code>#![feature(box_syntax)]\n#![feature(std_misc)]\n\nuse std::mem;\nuse std::thunk::Invoke;\n\nstruct Type;\n\nenum Message {\n    Handle(Box&lt;Invoke&lt;(&amp;'static Type)&gt; + Send&gt;) //'\n}\nenum Message2 {\n    Handle(Box&lt;FnOnce(&amp;Type) + Send&gt;)\n}\n\npub fn main() {\n    let a = Type;\n    let handler = Message::Handle(box move |_| {});\n    let handler2 = Message2::Handle(box move |_| {});\n    match handler {\n        Message::Handle(f) =&gt; f.invoke(unsafe {mem::transmute(&amp;a)})\n    }\n    match handler2 {\n        Message2::Handle(f) =&gt; f(&amp;a)\n    }\n}\n</code></pre>\n"}, {"tags": ["pointers", "rust"], "comments": [{"owner": {"reputation": 12970, "user_id": 85170, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/xIbjh.jpg?s=128&g=1", "display_name": "CookieOfFortune", "link": "https://stackoverflow.com/users/85170/cookieoffortune"}, "reply_to_user": {"reputation": 41558, "user_id": 3204551, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/91bb06155f79d40ffecdf124deecb001?s=128&d=identicon&r=PG&f=1", "display_name": "Deduplicator", "link": "https://stackoverflow.com/users/3204551/deduplicator"}, "edited": false, "score": 0, "creation_date": 1425156985, "post_id": 28786758, "comment_id": 45849561, "body": "@Deduplicator Sorry, that&#39;s reasonable."}, {"owner": {"reputation": 12970, "user_id": 85170, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/xIbjh.jpg?s=128&g=1", "display_name": "CookieOfFortune", "link": "https://stackoverflow.com/users/85170/cookieoffortune"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1425162886, "post_id": 28786758, "comment_id": 45851268, "body": "@Shepmaster I have updated the description with the desired behavior."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1425163062, "post_id": 28786758, "comment_id": 45851335, "body": "Sorry, I wasn&#39;t clear. <i>Why</i> do you want to have multiple mutable references to the same variable? Doing so is straight-up not allowed in Rust, but maybe the problem you are trying to solve with mutable aliases <i>is</i> solvable in Rust, if we look at the problem in a different way."}, {"owner": {"reputation": 12970, "user_id": 85170, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/xIbjh.jpg?s=128&g=1", "display_name": "CookieOfFortune", "link": "https://stackoverflow.com/users/85170/cookieoffortune"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1425163453, "post_id": 28786758, "comment_id": 45851442, "body": "@Shepmaster Say I have a type like HashMap&lt;int, **HashSet&lt;int&gt;&gt;, I wish to enforce a property of this structure so that each map key contains a reference to the set to which the key belongs. Now, I wish to implement a Merge function that will merge two of the sets. But I want this to update all the keys of both sets to point to the new merged one."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1425163938, "post_id": 28786758, "comment_id": 45851580, "body": "Maybe I&#39;m misunderstanding, but &quot;each map key contains a reference to the set&quot; - isn&#39;t that what a HashMap <i>does</i>? Keeps a relation between the key and the value?"}, {"owner": {"reputation": 12970, "user_id": 85170, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/xIbjh.jpg?s=128&g=1", "display_name": "CookieOfFortune", "link": "https://stackoverflow.com/users/85170/cookieoffortune"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1425164268, "post_id": 28786758, "comment_id": 45851678, "body": "@Shepmaster The idea is that given a member of one of the sets, I can quickly determine which set it belongs to and the size of the set. If I merge sets, I will have to update the keys to point to the new set. Using a double pointer analog will allow me to do this immediately."}, {"owner": {"reputation": 12970, "user_id": 85170, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/xIbjh.jpg?s=128&g=1", "display_name": "CookieOfFortune", "link": "https://stackoverflow.com/users/85170/cookieoffortune"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1425175764, "post_id": 28786758, "comment_id": 45854096, "body": "@Shepmaster Well I figured it out creating a kind of virtual heap with another array.Anyways I&#39;ll pick your answer."}], "answers": [{"comments": [{"owner": {"reputation": 12970, "user_id": 85170, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/xIbjh.jpg?s=128&g=1", "display_name": "CookieOfFortune", "link": "https://stackoverflow.com/users/85170/cookieoffortune"}, "edited": false, "score": 0, "creation_date": 1425161601, "post_id": 28787321, "comment_id": 45850855, "body": "I don&#39;t think it would work with this: int a = 1; int b = 2; int *list[] = { &amp;a, &amp;a, &amp;b, &amp;b };"}, {"owner": {"reputation": 12970, "user_id": 85170, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/xIbjh.jpg?s=128&g=1", "display_name": "CookieOfFortune", "link": "https://stackoverflow.com/users/85170/cookieoffortune"}, "edited": false, "score": 0, "creation_date": 1425162200, "post_id": 28787321, "comment_id": 45851050, "body": "What about using Rc and RefCell?"}, {"owner": {"reputation": 12970, "user_id": 85170, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/xIbjh.jpg?s=128&g=1", "display_name": "CookieOfFortune", "link": "https://stackoverflow.com/users/85170/cookieoffortune"}, "edited": false, "score": 0, "creation_date": 1425162569, "post_id": 28787321, "comment_id": 45851165, "body": "Ok, so the operation is inherently unsafe."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1425162427, "last_edit_date": 1425162427, "creation_date": 1425160060, "answer_id": 28787321, "question_id": 28786758, "link": "https://stackoverflow.com/questions/28786758/how-would-i-write-this-c-function-in-rust/28787321#28787321", "title": "How would I write this C function in Rust?", "body": "<h3>Answer for modified question</h3>\n\n<p>Rust <a href=\"http://doc.rust-lang.org/nightly/book/pointers.html#references\" rel=\"nofollow\">does not allow</a> you to have multiple mutable references (<em>aliasing</em>) to the same item. This means you'd never be able to run the equivalent of your third line:</p>\n\n<pre><code>fn main() {\n    let mut a = 1;\n    let vals = &amp;[&amp;mut a, &amp;mut a];\n}\n</code></pre>\n\n<p>This fails with:</p>\n\n<pre><code>cannot borrow `a` as mutable more than once at a time\n</code></pre>\n\n<blockquote>\n  <p>What about using Rc and RefCell?</p>\n</blockquote>\n\n<p><a href=\"http://doc.rust-lang.org/nightly/std/rc/struct.Rc.html\" rel=\"nofollow\"><code>Rc</code></a> doesn't let us mutate the value:</p>\n\n<blockquote>\n  <p>A reference-counted pointer type over an <strong>immutable value</strong>.</p>\n</blockquote>\n\n<p>(Emphasis mine)</p>\n\n<p><a href=\"http://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html#method.borrow_mut\" rel=\"nofollow\"><code>RefCell::borrow_mut</code></a> won't allow multiple concurrent borrows:</p>\n\n<blockquote>\n  <p>Panics if the value is currently borrowed.</p>\n</blockquote>\n\n<h3>Answer for original question</h3>\n\n<p>It's basically the same. I picked a <code>u8</code> cause it's easier to type. :-)</p>\n\n<pre><code>fn replace(v: &amp;mut [&amp;mut u8], a: usize, b: usize) {\n    *v[a] = *v[b]\n}\n\nfn main() {\n    let mut vals = vec![1,2,3,4];\n    {\n        let mut val_refs: Vec&lt;&amp;mut u8&gt; = vals.iter_mut().collect();\n        replace(&amp;mut val_refs, 0, 3);\n    }\n    println!(\"{:?}\", vals);\n}\n</code></pre>\n\n<p>(<a href=\"http://is.gd/iDnIzh\" rel=\"nofollow\">playpen link</a>)</p>\n\n<p>Rust does do boundary-checking, so if you call with an index bigger than the slice, the program will panic and you don't get memory corruption.</p>\n"}], "owner": {"reputation": 12970, "user_id": 85170, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/xIbjh.jpg?s=128&g=1", "display_name": "CookieOfFortune", "link": "https://stackoverflow.com/users/85170/cookieoffortune"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 109, "favorite_count": 0, "accepted_answer_id": 28787321, "answer_count": 1, "score": 1, "last_activity_date": 1425162833, "creation_date": 1425156782, "last_edit_date": 1425162833, "question_id": 28786758, "link": "https://stackoverflow.com/questions/28786758/how-would-i-write-this-c-function-in-rust", "title": "How would I write this C function in Rust?", "body": "<p>How would I write the function below in Rust? Is there a way to write <code>replace()</code> safely or is the operation inherently unsafe? <code>list</code> does not have to be an array, a vector would work as well. It's the replacement operation that I'm interested in.</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>void replace(int *list[], int a, int b) {\n    *list[a] = *list[b];\n}\n</code></pre>\n\n<p>I would like the following behavior:</p>\n\n<pre><code>int a = 1;\nint b = 2;\nint *list[] = { &amp;a, &amp;a, &amp;b, &amp;b };\n\n*list[0] = 3;        // list has pointers to values: [3, 3, 2, 2]\nreplace(list, 2, 0); // list has pointers to values: [3, 3, 3, 3]\n*list[0] = 4;        // list has pointers to values: [4, 4, 4, 4]\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 22448, "user_id": 1870481, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/478e3c60bf48e069b2f79bddd202d600?s=128&d=identicon&r=PG", "display_name": "michas", "link": "https://stackoverflow.com/users/1870481/michas"}, "edited": false, "score": 1, "creation_date": 1425127111, "post_id": 28781581, "comment_id": 45840252, "body": "Ok, the point is, that <code>find</code> actually returns one of its values, while <code>fold</code> always returns a new (composed) value. Thanks."}, {"owner": {"reputation": 4251, "user_id": 1381550, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/da00aeca59e2404304c442ade1391802?s=128&d=identicon&r=PG", "display_name": "Attila Szeremi", "link": "https://stackoverflow.com/users/1381550/attila-szeremi"}, "edited": false, "score": 0, "creation_date": 1524827360, "post_id": 28781581, "comment_id": 87138521, "body": "Wouldn&#39;t that make it really inefficient to fold iterables of large structs then? I&#39;m quite new to Rust."}], "tags": [], "owner": {"reputation": 14792, "user_id": 33466, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/875830cc22c375f52b150dfce6a39e21?s=128&d=identicon&r=PG", "display_name": "Ms2ger", "link": "https://stackoverflow.com/users/33466/ms2ger"}, "is_accepted": true, "score": 5, "last_activity_date": 1425125737, "creation_date": 1425125737, "answer_id": 28781581, "question_id": 28781446, "link": "https://stackoverflow.com/questions/28781446/why-does-the-fold-method-give-the-actual-element-instead-of-a-reference/28781581#28781581", "title": "Why does the fold method give the actual element instead of a reference?", "body": "<p>The issue is somewhat hard to explain with integers, since they are <code>Copy</code>, so compare:</p>\n\n<pre><code>let v = vec![\"a\".to_string(), \"b\".to_string()];\nlet result = v.into_iter().find(|s| s.starts_with(\"b\"));\nresult == Some(\"b\".to_string())\n\nlet v = vec![\"a\".to_string(), \"b\".to_string()];\nlet result = v.into_iter().fold(\"\".to_string(), |a, s| s + &amp;a);\nresult == \"ba\".to_string()\n</code></pre>\n\n<p>In the first case, the <code>String</code> needs to be returned to the caller, so we can't have the closure destroy it (which would happen if it was passed by value). In the second, the values are no longer used after the call to the closure, so they can be passed to the closure by value (which allows us to consume the <code>String</code> when we append to it).</p>\n"}], "owner": {"reputation": 22448, "user_id": 1870481, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/478e3c60bf48e069b2f79bddd202d600?s=128&d=identicon&r=PG", "display_name": "michas", "link": "https://stackoverflow.com/users/1870481/michas"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 269, "favorite_count": 0, "accepted_answer_id": 28781581, "answer_count": 1, "score": 5, "last_activity_date": 1425131627, "creation_date": 1425124789, "last_edit_date": 1425131627, "question_id": 28781446, "link": "https://stackoverflow.com/questions/28781446/why-does-the-fold-method-give-the-actual-element-instead-of-a-reference", "title": "Why does the fold method give the actual element instead of a reference?", "body": "<p>According to the <a href=\"http://doc.rust-lang.org/nightly/book/iterators.html\" rel=\"nofollow\">rust book</a> for iterators there are consumers like <code>find</code> and <code>fold</code>.</p>\n\n<p>They are used as:</p>\n\n<pre><code>let greater_than_forty_two = (0..100).find(|x| *x &gt; 42);\n</code></pre>\n\n<p>and </p>\n\n<pre><code>let sum = (1..4).fold(0, |sum, x| sum + x);\n</code></pre>\n\n<p>In both cases <code>x</code> is the current value. However in the first case <code>x</code> is a reference and in the second case it is the element itself.</p>\n\n<p>As far as I understood from the <code>for</code> loop, it has to be a reference to avoid owner problems. But shouldn't there be the same owner problem in the fold case?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 0, "creation_date": 1425116521, "post_id": 28778547, "comment_id": 45837576, "body": "If you&#39;re going to have <i>two</i> binary heaps, you would need two binary heaps in any language, and need to fill both with their own (references) to the structs/objects. What&#39;s the problem?"}, {"owner": {"reputation": 5549, "user_id": 775982, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/87058ec6a2d1628e392fc444e8c159df?s=128&d=identicon&r=PG", "display_name": "Caspar", "link": "https://stackoverflow.com/users/775982/caspar"}, "edited": false, "score": 0, "creation_date": 1425130988, "post_id": 28778547, "comment_id": 45841332, "body": "@delnan The problem was not having 2 heaps, but that each heap needs to use different orderings for the same type. Since afaik Rust enforces a 1:1 mapping between types and traits (including between my struct and <code>Ord</code>), it wasn&#39;t clear to me how I should handle that."}], "answers": [{"comments": [{"owner": {"reputation": 5549, "user_id": 775982, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/87058ec6a2d1628e392fc444e8c159df?s=128&d=identicon&r=PG", "display_name": "Caspar", "link": "https://stackoverflow.com/users/775982/caspar"}, "edited": false, "score": 1, "creation_date": 1425131503, "post_id": 28782048, "comment_id": 45841476, "body": "Nice, I was not expecting wrapping types to be free at runtime. Is this is documented anywhere or guaranteed by something? All I could find in the Rust reference was <a href=\"http://doc.rust-lang.org/reference.html#structures\" rel=\"nofollow noreferrer\">&quot;the precise memory layout of a structure is not specified&quot;</a>."}, {"owner": {"reputation": 5549, "user_id": 775982, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/87058ec6a2d1628e392fc444e8c159df?s=128&d=identicon&r=PG", "display_name": "Caspar", "link": "https://stackoverflow.com/users/775982/caspar"}, "edited": false, "score": 0, "creation_date": 1425132040, "post_id": 28782048, "comment_id": 45841641, "body": "Thinking about it a little more, if I wanted to turn say a <code>Vec&lt;MyStruct&gt;</code> into a <code>Vec&lt;WrapperStruct&gt;</code> to subsequently sort by <code>WrapperStruct</code>&#39;s impl of <code>Ord</code>, the <code>map</code> (or even <code>map_in_place()</code>) wouldn&#39;t be free, would it? (or is the map optimised away because it can be proved to be a &quot;bit-wise identity function&quot;?)"}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "reply_to_user": {"reputation": 5549, "user_id": 775982, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/87058ec6a2d1628e392fc444e8c159df?s=128&d=identicon&r=PG", "display_name": "Caspar", "link": "https://stackoverflow.com/users/775982/caspar"}, "edited": false, "score": 2, "creation_date": 1425135438, "post_id": 28782048, "comment_id": 45842560, "body": "Yeah, strictly speaking the layout of structs isn&#39;t specified, but there&#39;s no sensible change that can be made to a single-field enum: reordering fields does nothing if there&#39;s only one field. (I suppose the compiler could, like, insert unnecessary leading padding or something, but that&#39;s a little peculiar. Maybe as a tool for fuzzing <code>unsafe</code> code?) An iterator-based <code>map</code> would not optimise way, <code>map_in_place</code> has a chance to, but I haven&#39;t checked (and it is a small chance)."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "reply_to_user": {"reputation": 5549, "user_id": 775982, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/87058ec6a2d1628e392fc444e8c159df?s=128&d=identicon&r=PG", "display_name": "Caspar", "link": "https://stackoverflow.com/users/775982/caspar"}, "edited": false, "score": 0, "creation_date": 1425135519, "post_id": 28782048, "comment_id": 45842585, "body": "(For the <code>sort</code> case specifically, you can use <code>.sort_by</code>, e.g. <code>.sort_by(|a, b| Wrap(a).cmp(Wrap(b))</code> would work. Of course would could also just define a normal comparator function for doing the sorting.)"}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 2, "last_activity_date": 1425128893, "creation_date": 1425128893, "answer_id": 28782048, "question_id": 28778547, "link": "https://stackoverflow.com/questions/28778547/how-do-i-select-different-stdcmpord-or-other-trait-implementations-for-a-g/28782048#28782048", "title": "How do I select different std::cmp::Ord (or other trait) implementations for a given type?", "body": "<p>There's no way to have two different implementations of the same trait for a single type, e.g. this hypothetical scheme <em>doesn't</em> work</p>\n\n<pre><code>struct MyType { ... }\nmod foo {\n    impl Ord for MyType { ... } // A\n\n    // everything in here uses the A implementation\n}\nmod bar {\n    impl Ord for MyType { ... } // B\n\n    // everything in here uses the B implementation\n}\n</code></pre>\n\n<p>If you want different behaviours with <code>BinaryHeap</code> you do have to just use wrapper types, however, wrapper types are not wasteful, since there is no additional indirection or memory use, <code>struct Foo { data: T }</code> and <code>T</code> are same, other than the nominal type name (no matter what type <code>T</code> is).</p>\n"}], "owner": {"reputation": 5549, "user_id": 775982, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/87058ec6a2d1628e392fc444e8c159df?s=128&d=identicon&r=PG", "display_name": "Caspar", "link": "https://stackoverflow.com/users/775982/caspar"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 907, "favorite_count": 0, "accepted_answer_id": 28782048, "answer_count": 1, "score": 5, "last_activity_date": 1425128893, "creation_date": 1425102100, "question_id": 28778547, "link": "https://stackoverflow.com/questions/28778547/how-do-i-select-different-stdcmpord-or-other-trait-implementations-for-a-g", "title": "How do I select different std::cmp::Ord (or other trait) implementations for a given type?", "body": "<p>I'm trying to use <code>std::collections::BinaryHeap</code> with a custom struct. In order to do so, I have to have my struct implement the <code>std::cmp::Ord</code> trait, but what I need is 2 <code>BinaryHeap</code>s of the same structs but ordered differently.</p>\n\n<p>Is there a way to define 2 Ord implementations &amp; pick which <code>Ord</code> gets used, or some other way to specify an alternate ordering?</p>\n\n<p>I think I could define 2 different wrapping structs which keep a reference to the original custom struct and have an implementation of <code>Ord</code> for each of them, but it seems quite wasteful to have to construct potentially a lot of instances of such wrapping structs.</p>\n\n<p>In Pyhton/Java I'd provide a sorting function/Comparator, but there seems no facility like that. In Scala, I can define a compile-time only type to select the right implicit Ordering implementation; it feels like Rust supports something similar, but I haven't been able to work it out.</p>\n"}, {"tags": ["rust", "ascii"], "answers": [{"comments": [{"owner": {"reputation": 1776, "user_id": 4435175, "user_type": "registered", "accept_rate": 68, "profile_image": "https://i.stack.imgur.com/UCpoD.gif?s=128&g=1", "display_name": "Vega", "link": "https://stackoverflow.com/users/4435175/vega"}, "edited": false, "score": 0, "creation_date": 1425099264, "post_id": 28778118, "comment_id": 45834174, "body": "Thank you very much for this detailed answer: I barely understand 90% of the context  but my Rust knowledge is extremly small so I will reread it tomorrow when I sleeped enough. I tried your new fold(), but it didn&#39;t change anything? Result should be 5832 from 9*9*8*9: <a href=\"http://is.gd/UZ5asw\" rel=\"nofollow noreferrer\">is.gd/UZ5asw</a>"}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "reply_to_user": {"reputation": 1776, "user_id": 4435175, "user_type": "registered", "accept_rate": 68, "profile_image": "https://i.stack.imgur.com/UCpoD.gif?s=128&g=1", "display_name": "Vega", "link": "https://stackoverflow.com/users/4435175/vega"}, "edited": false, "score": 0, "creation_date": 1425099710, "post_id": 28778118, "comment_id": 45834251, "body": "Ah: including the number in that way is also including the newline characters <code>\\n</code> and the spaces. Suffixing each line in `` will ensure that the newline and the leading spaces don&#39;t appear in the actual runtime string: <a href=\"http://is.gd/eiq292\" rel=\"nofollow noreferrer\">is.gd/eiq292</a>"}, {"owner": {"reputation": 1776, "user_id": 4435175, "user_type": "registered", "accept_rate": 68, "profile_image": "https://i.stack.imgur.com/UCpoD.gif?s=128&g=1", "display_name": "Vega", "link": "https://stackoverflow.com/users/4435175/vega"}, "edited": false, "score": 0, "creation_date": 1425101280, "post_id": 28778118, "comment_id": 45834542, "body": "My IDE did that formatting due to the 80 line limit, didn&#39;t know it would include the spaces + newline to while splitting the number. Learned a lot about Rust today, big thanks :). By the way, what would be your way for including the number without having to deal with the spaces &amp; \\n? My first thought was via      &quot;static&quot;  but I didn&#39;t know the variable type for a bytestring and so I did it in the main function, letting the compiler doing the type stuff."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "reply_to_user": {"reputation": 1776, "user_id": 4435175, "user_type": "registered", "accept_rate": 68, "profile_image": "https://i.stack.imgur.com/UCpoD.gif?s=128&g=1", "display_name": "Vega", "link": "https://stackoverflow.com/users/4435175/vega"}, "edited": false, "score": 0, "creation_date": 1425101743, "post_id": 28778118, "comment_id": 45834634, "body": "You could put the number into an external file (e.g. <code>number.txt</code>) and load it with the <code>include_bytes!(&quot;number.txt&quot;)</code> macro, which will load the number at compile time into a <code>&amp;[u8]</code> array (you may have to be careful about a trailing <code>\\n</code> in the file). A byte string has type <code>&amp;&#39;static [u8]</code>."}, {"owner": {"reputation": 1776, "user_id": 4435175, "user_type": "registered", "accept_rate": 68, "profile_image": "https://i.stack.imgur.com/UCpoD.gif?s=128&g=1", "display_name": "Vega", "link": "https://stackoverflow.com/users/4435175/vega"}, "edited": false, "score": 0, "creation_date": 1425127891, "post_id": 28778118, "comment_id": 45840471, "body": "Neat, a simple &quot;let readnumbers = include_bytes!(&quot;task08 numbers.txt&quot;);&quot; works :). Doesn&#39;t seem to include a \\n, test with windows(4) shows the anticipated result."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "reply_to_user": {"reputation": 1776, "user_id": 4435175, "user_type": "registered", "accept_rate": 68, "profile_image": "https://i.stack.imgur.com/UCpoD.gif?s=128&g=1", "display_name": "Vega", "link": "https://stackoverflow.com/users/4435175/vega"}, "edited": false, "score": 0, "creation_date": 1425128628, "post_id": 28778118, "comment_id": 45840661, "body": "(Sorry to bug you, but don&#39;t forget to upvote/accept if the answer is correct. :) )"}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 3, "last_activity_date": 1425097974, "creation_date": 1425097974, "answer_id": 28778118, "question_id": 28777933, "link": "https://stackoverflow.com/questions/28777933/normalise-ascii-numbers-to-digit-numbers/28778118#28778118", "title": "Normalise ASCII numbers to digit numbers", "body": "<p>Looking at <a href=\"http://doc.rust-lang.org/nightly/core/iter/trait.IteratorExt.html#method.fold\" rel=\"nofollow\">the signature of <code>fold</code></a>, we can see that it takes two arguments:</p>\n\n<pre><code>fn fold&lt;B, F&gt;(self, init: B, f: F) -&gt; B\n   where F: FnMut(B, Self::Item) -&gt; B\n</code></pre>\n\n<p><code>init</code>, which is of some arbitrary type <code>B</code>, and <code>f</code>, which is a closure that takes a <code>B</code> value and an element from the iterator, in order to compute a new <code>B</code> value. The whole function returns a <code>B</code>. The types are strongly suggestive of what happens: the closure <code>f</code> is repeatedly called on successive elements of the iterator, passing the computed <code>B</code> value into the next <code>f</code> call. Checking <a href=\"https://github.com/rust-lang/rust/blob/e233987ce1de88a48db2ce612019ba644d3cf5dd/src/libcore/iter.rs#L607-L626\" rel=\"nofollow\">the implementation</a> confirms this suspicion:</p>\n\n<pre><code>let mut accum = init;\nfor x in self {\n    accum = f(accum, x);\n}\naccum\n</code></pre>\n\n<p>It runs through the iterator, passing the accumulated state into the closure in order to compute the next state.</p>\n\n<p>First things first, lets put the type on the <code>fold</code> call:</p>\n\n<pre><code>let product = sequence.iter().fold(1, |a: u64, &amp;b: &amp;u8| a * (b as u64));\n</code></pre>\n\n<p>That is, the <code>B</code> type we want is <code>u64</code> (that's what our final product will be), and the item type of the iterator is <code>&amp;u8</code>, a reference to a byte.</p>\n\n<p>Now, we can manually inline the definition of <code>fold</code> to compute <code>product</code> to try to clarify the desired behaviour (I'm ignoring the normalisation for now):</p>\n\n<pre><code>let mut accum = 1;\nfor x in sequence.iter() {\n    accum = { // the closure\n        let a: u64 = accum;\n        let &amp;b: &amp;u8 = x;\n        a * b as u64\n    }\n}\nlet product = accum;\n</code></pre>\n\n<p>Simplifying:</p>\n\n<pre><code>let mut product = 1;\nfor &amp;b in sequence.iter() {\n    product = product * (b as u64)\n}\n</code></pre>\n\n<p>Hopefully this makes it clearer what needs to happen: <code>b</code> runs across each byte, and so it is the value that needs adjustment, to bring the ASCII encoded value down to the expected 0..10 range.</p>\n\n<p>So, you were right with:</p>\n\n<pre><code>a * ((b as u64) -b'0')\n</code></pre>\n\n<p>However, the details mean that fails to compile, with a type error: <code>b'0'</code> has type <code>u8</code>, but <code>b as u64</code> as type <code>u64</code>, and it's not legal to use <code>-</code> with <code>u64</code> and <code>u8</code>. Moving the normalisation to happen before the <code>u64</code> cast will ensure this works ok, since then you're subtracting <code>b</code> (which is a <code>u8</code>) and a <code>u8</code>:</p>\n\n<pre><code>product * (b - b'0') as u64\n</code></pre>\n\n<p>All in all, the <code>fold</code> might look clearer (and actually work) as:</p>\n\n<pre><code>let product = sequence.iter()\n    .fold(1, |prod, &amp;byte| prod * (byte - b'0') as u64);\n</code></pre>\n\n<p>(I apologise for giving you such confusing code on IRC.)</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 0, "last_activity_date": 1425134474, "creation_date": 1425134474, "answer_id": 28782942, "question_id": 28777933, "link": "https://stackoverflow.com/questions/28777933/normalise-ascii-numbers-to-digit-numbers/28782942#28782942", "title": "Normalise ASCII numbers to digit numbers", "body": "<p>As an alternative to <code>fold</code>, you can use <a href=\"http://doc.rust-lang.org/std/iter/trait.IteratorExt.html#tymethod.map\" rel=\"nofollow\"><code>map</code></a> and <a href=\"http://doc.rust-lang.org/std/iter/trait.MultiplicativeIterator.html#tymethod.product\" rel=\"nofollow\"><code>MultiplicativeIterator::product</code></a>. I find that the two steps help make it clearer what is happening.</p>\n\n<pre><code>#![feature(core)]\n\nuse std::iter::MultiplicativeIterator;\n\nfn main() {\n    let number = b\"123456\";\n    for sequence in number.windows(6) {\n        let product = sequence.iter().map(|v| (v - b'0') as u64).product();\n        println!(\"product of {:?} is {}\", sequence, product);\n    }\n}\n</code></pre>\n\n<p>You could even choose to split up the resizing from <code>u8</code> to <code>u64</code>:</p>\n\n<pre><code>sequence.iter().map(|v| v - b'0').map(|v| v as u64).product();\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 16020, "user_id": 9716597, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7f97c613dca0b157b40551a0d756abeb?s=128&d=identicon&r=PG&f=1", "display_name": "L. F.", "link": "https://stackoverflow.com/users/9716597/l-f"}, "is_accepted": false, "score": 0, "last_activity_date": 1608808423, "creation_date": 1608808423, "answer_id": 65437544, "question_id": 28777933, "link": "https://stackoverflow.com/questions/28777933/normalise-ascii-numbers-to-digit-numbers/65437544#65437544", "title": "Normalise ASCII numbers to digit numbers", "body": "<p>Nowadays, an alternative is <a href=\"https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.product\" rel=\"nofollow noreferrer\"><code>product</code></a> + <a href=\"https://doc.rust-lang.org/stable/std/primitive.char.html#method.to_digit\" rel=\"nofollow noreferrer\"><code>to_digit</code></a>: (<a href=\"https://docs.rs/itertools/0.9.0/itertools\" rel=\"nofollow noreferrer\"><code>itertools</code></a> was used to print the contents of the iterator)</p>\n<pre><code>use {itertools::Itertools, std::char};\n\nfn main() {\n    let number = b&quot;123456&quot;;\n\n    let sequence = number\n        .iter()\n        .map(|&amp;c| u64::from(char::from(c).to_digit(10).expect(&quot;not a digit&quot;)));\n    let product: u64 = sequence.clone().product();\n    println!(&quot;product of {:?} is {}&quot;, sequence.format(&quot;, &quot;), product);\n}\n</code></pre>\n<p>(<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=6034ef3c4c748805ac22c37117920974\" rel=\"nofollow noreferrer\">playground</a>)</p>\n"}], "owner": {"reputation": 1776, "user_id": 4435175, "user_type": "registered", "accept_rate": 68, "profile_image": "https://i.stack.imgur.com/UCpoD.gif?s=128&g=1", "display_name": "Vega", "link": "https://stackoverflow.com/users/4435175/vega"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 520, "favorite_count": 0, "accepted_answer_id": 28778118, "answer_count": 3, "score": 2, "last_activity_date": 1608808423, "creation_date": 1425095812, "last_edit_date": 1608782526, "question_id": 28777933, "link": "https://stackoverflow.com/questions/28777933/normalise-ascii-numbers-to-digit-numbers", "title": "Normalise ASCII numbers to digit numbers", "body": "<p><a href=\"https://play.rust-lang.org/?code=%23!%5Bfeature(asm%2C%20simd%2C%20thread_local%2C%20unsafe_destructor)%5D%0A%23!%5Bfeature(core%2C%20libc%2C%20collections%2C%20std_misc%2C%20io%2C%20path)%5D%0A%23!%5Ballow(dead_code%2C%20unused_variables)%5D%0A%23!%5Ballow(unused_features)%5D%0A%0Aextern%20crate%20libc%3B%0A%0Astatic%20VERSION%3A%20%26%27static%20str%20%3D%20%22rustc%201.0.0-nightly%20(4db0b3246%202015-02-25)%20(built%202015-02-26)%22%3B%0A%0Afn%20show%3CT%3A%20std%3A%3Afmt%3A%3ADebug%3E(e%3A%20T)%20%7B%20println!(%22%7B%3A%3F%7D%22%2C%20e)%20%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20show(%7B%0A%20%20%20%20%20%20%20%20let%20number%20%3D%20b%22122222%22%3B%0A%20%20%20%20%20%20%20%20for%20sequence%20in%20number.windows(6)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20let%20product%20%3D%20sequence.iter().fold(1%2C%20%7Ca%2C%20%26b%7C%20a%20*%20(b%20as%20u64))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20println!(%22product%20of%20%7B%3A%3F%7D%20is%20%7B%7D%22%2C%20sequence%2C%20product)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D)%3B%0A%7D\" rel=\"nofollow noreferrer\">Running example on play.rust-lang.org</a></p>\n<pre><code>fn main() {\n    show({\n        let number = b&quot;123456&quot;;\n        for sequence in number.windows(6) {\n            let product = sequence.iter().fold(1, |a, &amp;b| a * (b as u64));\n            println!(&quot;product of {:?} is {}&quot;, sequence, product);\n        }\n    });\n}\n</code></pre>\n<p>Instead of having an output like &quot;product of [49, 50, 51, 52, 53, 54] is 15312500000&quot; I need the normal numbers in the brackets and the normalized result for the product.\nTrying around with <code>- b'0'</code> to subtract the 48 to get the normal digits in line 5 doesn't work, i.e.</p>\n<pre><code>a * ((b as u64) -b'0')\n</code></pre>\n<p>or</p>\n<pre><code>(a - b'0') * (b as u64)\n</code></pre>\n<p>Seems I'm missing something here, for example I have no idea what exactly are the 'a' and 'b' values in the fold(). Can anyone enlighten me? :)</p>\n"}, {"tags": ["iterator", "rust", "traits", "borrow-checker"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1425088729, "last_edit_date": 1495539813, "creation_date": 1425088374, "answer_id": 28777209, "question_id": 28776630, "link": "https://stackoverflow.com/questions/28776630/implementing-a-cautious-take-while-using-peekable/28777209#28777209", "title": "Implementing a &quot;cautious&quot; take_while using Peekable", "body": "<p>This was a tricky one! I'll lead with the meat of the code, then attempt to explain it (if I understand it...). It's also the ugly, unsugared version, as I wanted to reduce incidental complexity.</p>\n\n<pre><code>use std::iter::Peekable;\n\nfn main() {\n    let mut chars = \"abcdefg.\".chars().peekable();\n\n    let abc: String = CautiousTakeWhile{inner: chars.by_ref(), condition: |&amp;x| x != 'd'}.collect();\n    let defg: String = CautiousTakeWhile{inner: chars.by_ref(), condition: |&amp;x| x != '.'}.collect();\n    println!(\"{}, {}\", abc, defg);\n}\n\nstruct CautiousTakeWhile&lt;'a, I, P&gt; //'\n    where I::Item: 'a, //'\n          I: Iterator + 'a, //'\n          P: FnMut(&amp;I::Item) -&gt; bool,\n{\n    inner: &amp;'a mut Peekable&lt;I&gt;, //'\n    condition: P,\n}\n\nimpl&lt;'a, I, P&gt; Iterator for CautiousTakeWhile&lt;'a, I, P&gt;\n    where I::Item: 'a, //'\n          I: Iterator + 'a, //'\n          P: FnMut(&amp;I::Item) -&gt; bool\n{\n    type Item = I::Item;\n\n    fn next(&amp;mut self) -&gt; Option&lt;I::Item&gt; {\n        let return_next =\n            match self.inner.peek() {\n                Some(ref v) =&gt; (self.condition)(v),\n                _ =&gt; false,\n            };\n        if return_next { self.inner.next() } else { None }\n    }\n}\n</code></pre>\n\n<p>Actually, <a href=\"https://stackoverflow.com/a/28777216/155423\">Rodrigo seems to have a good explanation</a>, so I'll defer to that, unless you'd like me to explain something specific.</p>\n"}, {"comments": [{"owner": {"reputation": 6604, "user_id": 318206, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/f30e68fd58551b03172a66098e37db95?s=128&d=identicon&r=PG", "display_name": "Bosh", "link": "https://stackoverflow.com/users/318206/bosh"}, "edited": false, "score": 0, "creation_date": 1425091171, "post_id": 28777216, "comment_id": 45832963, "body": "Thanks @rodrigo! I&#39;ve incorporated your first suggestion to produce a working example at <a href=\"http://is.gd/NalTYL\" rel=\"nofollow noreferrer\">is.gd/NalTYL</a>. But when I try to bring the typing into the struct, as in  <a href=\"http://is.gd/6c64vf\" rel=\"nofollow noreferrer\">is.gd/6c64vf</a>, I get <code>error: the trait *core::clone::Clone* is not implemented for the type *&amp;mut core::iter::Peekable&lt;T&gt;*</code>, which I can&#39;t seem to overcome by adding <code>+ Clone</code> to the trait bounds in line 43."}, {"owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "reply_to_user": {"reputation": 6604, "user_id": 318206, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/f30e68fd58551b03172a66098e37db95?s=128&d=identicon&r=PG", "display_name": "Bosh", "link": "https://stackoverflow.com/users/318206/bosh"}, "edited": false, "score": 0, "creation_date": 1425091670, "post_id": 28777216, "comment_id": 45833048, "body": "@Bosh. Not sure, but I think that a mutable pointer cannot be cloned. Your variant accepts the <code>Clone</code> probably because <code>Peekable</code> implents <code>Clone</code> explicitly. Maybe you can do the same, but the code would need some refactoring..."}, {"owner": {"reputation": 6604, "user_id": 318206, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/f30e68fd58551b03172a66098e37db95?s=128&d=identicon&r=PG", "display_name": "Bosh", "link": "https://stackoverflow.com/users/318206/bosh"}, "edited": false, "score": 1, "creation_date": 1425092512, "post_id": 28777216, "comment_id": 45833187, "body": "Great. I stopped deriving from <code>Clone</code> and cleaned up timelines:  <a href=\"http://is.gd/ljjJAE\" rel=\"nofollow noreferrer\">is.gd/ljjJAE</a> .  Thanks again for your help + explanations!"}, {"owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "reply_to_user": {"reputation": 6604, "user_id": 318206, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/f30e68fd58551b03172a66098e37db95?s=128&d=identicon&r=PG", "display_name": "Bosh", "link": "https://stackoverflow.com/users/318206/bosh"}, "edited": false, "score": 0, "creation_date": 1425093156, "post_id": 28777216, "comment_id": 45833307, "body": "@Bosh: Glad to help, I learned a lot too. It looks that your original version accepted the <code>#[derive(clone]</code> because for parametric types the compiler accepts the directive if it cannot prove that it will never work. But then, it may silently fail to do so in a specific type. For example <code>#derive(Clone)] struct X&lt;T&gt;(T);</code> will compile, but the actual <code>X::clone()</code> will be available only if <code>T</code> is clonable."}], "tags": [], "owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "is_accepted": true, "score": 5, "last_activity_date": 1425089741, "last_edit_date": 1425089741, "creation_date": 1425088433, "answer_id": 28777216, "question_id": 28776630, "link": "https://stackoverflow.com/questions/28776630/implementing-a-cautious-take-while-using-peekable/28777216#28777216", "title": "Implementing a &quot;cautious&quot; take_while using Peekable", "body": "<p>The funny thing with <code>by_ref()</code> is that it returns a mutable reference to itself:</p>\n\n<pre><code>pub trait IteratorExt: Iterator + Sized {\n    fn by_ref(&amp;mut self) -&gt; &amp;mut Self { self }\n}\n</code></pre>\n\n<p>It works because the <code>Iterator</code> trait is implemented for the <em>mutable pointer to Iterator</em> type. Smart!</p>\n\n<pre><code>impl&lt;'a, I&gt; Iterator for &amp;'a mut I where I: Iterator, I: ?Sized { ... }\n</code></pre>\n\n<p>The standard <code>take_while</code> function works because it uses the trait <code>Iterator</code>, that is automatically resolved to <code>&amp;mut Peekable&lt;T&gt;</code>.</p>\n\n<p>But your  code does not work because <code>Peekable</code> is a struct, not a trait, so your <code>CautiousTakeWhileable</code> must specify the type, and you are trying to take ownership of it, but you cannot, because you have a mutable pointer.</p>\n\n<p>Solution, do not take a <code>Peekable&lt;T&gt;</code> but <code>&amp;mut Peekable&lt;T&gt;</code>. You will need to specify the lifetime too:</p>\n\n<pre><code>impl &lt;'a, T: Iterator, P&gt; Iterator for CautiousTakeWhile&lt;&amp;'a mut Peekable&lt;T&gt;, P&gt;\nwhere P: FnMut(&amp;T::Item) -&gt; bool {\n     //...\n}\n\nimpl &lt;'a, T: Iterator&gt; CautiousTakeWhileable for &amp;'a mut Peekable&lt;T&gt; {\n    fn cautious_take_while&lt;P&gt;(self, f: P) -&gt; CautiousTakeWhile&lt;&amp;'a mut Peekable&lt;T&gt;, P&gt;\n     where P: FnMut(&amp;T::Item) -&gt; bool {\n        CautiousTakeWhile{inner: self, condition: f,}\n    }\n}\n</code></pre>\n\n<p>A curious side effect of this solution is that now <code>by_ref</code> is not needed, because <code>cautious_take_while()</code> takes a mutable reference, so it does not steal ownership. The <code>by_ref()</code> call is needed for <code>take_while()</code> because it can take either <code>Peekable&lt;T&gt;</code> or <code>&amp;mut Peekable&lt;T&gt;</code>, and it defaults to the first one. With the <code>by_ref()</code> call it will resolve to the second one. </p>\n\n<p>And now that I finally understand it, I think it might be a good idea to change the definition of <code>struct CautiousTakeWhile</code> to include the peekable bit into the struct itself. The difficulty is that the lifetime has to be specified manually, if I'm right. Something like:</p>\n\n<pre><code>struct CautiousTakeWhile&lt;'a, T: Iterator + 'a, P&gt; \n    where T::Item : 'a {\n    inner: &amp;'a mut Peekable&lt;T&gt;,\n    condition: P,\n}\ntrait CautiousTakeWhileable&lt;'a, T&gt;: Iterator {\n    fn cautious_take_while&lt;P&gt;(self, P) -&gt; CautiousTakeWhile&lt;'a, T, P&gt; where\n        P: FnMut(&amp;Self::Item) -&gt; bool;\n}\n</code></pre>\n\n<p>and the rest is more or less straightforward.</p>\n"}], "owner": {"reputation": 6604, "user_id": 318206, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/f30e68fd58551b03172a66098e37db95?s=128&d=identicon&r=PG", "display_name": "Bosh", "link": "https://stackoverflow.com/users/318206/bosh"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 614, "favorite_count": 0, "accepted_answer_id": 28777216, "answer_count": 2, "score": 5, "last_activity_date": 1425089741, "creation_date": 1425083469, "last_edit_date": 1425088800, "question_id": 28776630, "link": "https://stackoverflow.com/questions/28776630/implementing-a-cautious-take-while-using-peekable", "title": "Implementing a &quot;cautious&quot; take_while using Peekable", "body": "<p>I'd like to use <code>Peekable</code> as the basis for a new <code>cautious_take_while</code> operation that acts like  <code>take_while</code> from <code>IteratorExt</code> but without consuming the first failed item. (There's a side question of whether this is a good idea, and whether there are better ways to accomplish this goal in Rust -- I'd be happy for hints in that direction, but mostly I'm trying to understand where my code is breaking).</p>\n\n<p>The API I'm trying to enable is basically:</p>\n\n<pre><code>let mut chars = \"abcdefg.\".chars().peekable();\n\nlet abc : String = chars.by_ref().cautious_take_while(|&amp;x| x != 'd');\nlet defg : String = chars.by_ref().cautious_take_while(|&amp;x| x != '.');\n\n// yielding (abc = \"abc\", defg = \"defg\")\n</code></pre>\n\n<p>I've taken a crack at <a href=\"http://is.gd/KwppAN\" rel=\"nofollow\">creating a MCVE here</a>, but I'm getting:</p>\n\n<blockquote>\n  <p>:10:5: 10:19 error: cannot move out of borrowed content\n  :10     chars.by_ref().cautious_take_while(|&amp;x| x != '.');</p>\n</blockquote>\n\n<p>As far as I can tell, I'm following the same pattern as Rust's own <code>TakeWhile</code> in terms of my function signatures, but I'm seeing different different behavior from the borrow checker. Can someone point out what I'm doing wrong?</p>\n"}, {"tags": ["arrays", "loops", "rust"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1425110518, "post_id": 28776276, "comment_id": 45836304, "body": "Please include the code in the question; a playpen link in addition is OK, but not by itself. (I can&#39;t fix it right now as I can&#39;t select the code on a mobile device in playpen to paste it here.)"}, {"owner": {"reputation": 1776, "user_id": 4435175, "user_type": "registered", "accept_rate": 68, "profile_image": "https://i.stack.imgur.com/UCpoD.gif?s=128&g=1", "display_name": "Vega", "link": "https://stackoverflow.com/users/4435175/vega"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1425128018, "post_id": 28776276, "comment_id": 45840502, "body": "Will do in my next question, got it sorted out with the explanation fom Pothead and Shepmaster (Code in the comment of Potheads explanation). Would post the code in the comment here but without code formatting that would get really messy :(."}], "answers": [{"comments": [{"owner": {"reputation": 1776, "user_id": 4435175, "user_type": "registered", "accept_rate": 68, "profile_image": "https://i.stack.imgur.com/UCpoD.gif?s=128&g=1", "display_name": "Vega", "link": "https://stackoverflow.com/users/4435175/vega"}, "edited": false, "score": 0, "creation_date": 1425083630, "post_id": 28776558, "comment_id": 45831338, "body": "That .... makes sense. Got the array thing sorted out, running code under: <a href=\"http://is.gd/QkZapx\" rel=\"nofollow noreferrer\">is.gd/QkZapx</a>. Thanks :)."}, {"owner": {"reputation": 1776, "user_id": 4435175, "user_type": "registered", "accept_rate": 68, "profile_image": "https://i.stack.imgur.com/UCpoD.gif?s=128&g=1", "display_name": "Vega", "link": "https://stackoverflow.com/users/4435175/vega"}, "edited": false, "score": 0, "creation_date": 1425084352, "post_id": 28776558, "comment_id": 45831519, "body": "Commented code so that I don&#39;t forget why I need to dereference in the second loop: <a href=\"http://is.gd/Yqf32x\" rel=\"nofollow noreferrer\">is.gd/Yqf32x</a>"}], "tags": [], "owner": {"reputation": 118, "user_id": 4207988, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fg6fh.png?s=128&g=1", "display_name": "El&#228;m&#228;&#228;ns&#228; Kyll&#228;stynyt", "link": "https://stackoverflow.com/users/4207988/el%c3%a4m%c3%a4%c3%a4ns%c3%a4-kyll%c3%a4stynyt"}, "is_accepted": true, "score": 1, "last_activity_date": 1425083133, "last_edit_date": 1425083133, "creation_date": 1425082908, "answer_id": 28776558, "question_id": 28776276, "link": "https://stackoverflow.com/questions/28776276/fill-an-array-let-x-1-11-iterate-over-it-multiple-times-in-different-func/28776558#28776558", "title": "Fill an array &quot;let x = [1..11], iterate over it multiple times in different functions?", "body": "<p>I'm new to Rust myself so my explanation might be incorrect or outdated, but it looks like that the issue is caused by a type mismatch.</p>\n\n<pre><code>fn sum_square(v: &amp;[i64; 10]) -&gt; i64 {\n    let mut sum: i64 = 0;\n    for x in v {\n        sum += x * x;\n    }\n    return sum;\n}\n</code></pre>\n\n<p>Here <code>x</code> has type <code>&amp;i64</code>. It is a reference to the value inside the array. Multiplying or applying any other operator on <code>x</code> causes it to dereference - i.e. <code>x*x</code> now has type <code>i64</code>.</p>\n\n<pre><code>fn square_sum(v: &amp;[i64; 10]) -&gt; i64{\n    let mut sum: i64 = 0;\n    for x in v {\n        sum += x;\n    }\n    return sum*sum;\n}\n</code></pre>\n\n<p>Here <code>x</code> also has type <code>&amp;i64</code>, but this time it won't get dereferenced. A correct solution would look like this:</p>\n\n<pre><code>fn square_sum(v: &amp;[i64; 10]) -&gt; i64{\n    let mut sum: i64 = 0;\n    for x in v {\n        // alternatively sum = x + sum works, but sum = sum + x doesn't.\n        sum += *x;\n    }\n    return sum*sum;\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 1776, "user_id": 4435175, "user_type": "registered", "accept_rate": 68, "profile_image": "https://i.stack.imgur.com/UCpoD.gif?s=128&g=1", "display_name": "Vega", "link": "https://stackoverflow.com/users/4435175/vega"}, "edited": false, "score": 0, "creation_date": 1425083796, "post_id": 28776660, "comment_id": 45831383, "body": "I thought &amp;v would be the reference to the array v? Now I&#39;m confused.  To 2. I&#39;m not sure I understand that 100%. To 3. - I like explicit return statements, makes it easier to spot where I return values.  4. just what I searched, thanks :)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1776, "user_id": 4435175, "user_type": "registered", "accept_rate": 68, "profile_image": "https://i.stack.imgur.com/UCpoD.gif?s=128&g=1", "display_name": "Vega", "link": "https://stackoverflow.com/users/4435175/vega"}, "edited": false, "score": 0, "creation_date": 1425084364, "post_id": 28776660, "comment_id": 45831523, "body": "@Vega In my code, <code>v</code> is no longer an <i>array</i> - it&#39;s a <i>slice</i>. Arrays have a length set at <i>compile-time</i>, while slices are determined at <i>runtime</i>. I tried to add some more detail as well."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1425136875, "last_edit_date": 1495539805, "creation_date": 1425083633, "answer_id": 28776660, "question_id": 28776276, "link": "https://stackoverflow.com/questions/28776276/fill-an-array-let-x-1-11-iterate-over-it-multiple-times-in-different-func/28776660#28776660", "title": "Fill an array &quot;let x = [1..11], iterate over it multiple times in different functions?", "body": "<p>Pothead Grandma has a reasonable explanation, but I wanted to also include some other details.</p>\n\n<pre><code>fn square_sum(v: &amp;[i64]) -&gt; i64 { // 1\n    let mut sum = 0;\n    for &amp;x in v { // 2\n        sum += x;\n    }\n    sum * sum // 3\n}\n\nfn main() {\n    let v: Vec&lt;_&gt; = (1..11).collect(); // 4\n    let diff = sum_square(&amp;v) - square_sum(&amp;v); //5\n    println!(\"{}\", diff);\n}\n</code></pre>\n\n<ol>\n<li>We accept a <em>slice</em> of numbers, instead of a <em>reference</em> to an array. A slice is just a chunk of values and how many values there are.</li>\n<li>We bind to a reference variable, so <code>x</code> will be implicitly dereferenced. This means that instead of having to always say <code>*x</code> to get to the value of the variable, we can use <code>x</code> to get to the value.</li>\n<li>No need for an explicit <code>return</code> statement. Explicit returns are useful when you return <em>early</em> from a method, but if a function returns a value, then the last statement of the function is the return value.</li>\n<li>Use a range and <a href=\"http://doc.rust-lang.org/std/iter/trait.IteratorExt.html#tymethod.collect\" rel=\"nofollow noreferrer\"><code>collect</code></a> it into a <code>Vec</code>. <code>collect</code> takes an iterator and makes a collection (in this case a <code>Vec</code>).</li>\n<li>We take a reference to the <code>Vec</code>. Rust has <a href=\"https://stackoverflow.com/q/28519997/155423\">auto-dereferencing rules</a>, and <code>&amp;Vec&lt;T&gt;</code> <a href=\"http://doc.rust-lang.org/std/vec/struct.Vec.html#method.deref\" rel=\"nofollow noreferrer\">will dereference to</a> <code>&amp;[T]</code>.</li>\n</ol>\n\n<p>In the spirit of showing a more Rust-like way of solving this problem, I'll also show <a href=\"http://doc.rust-lang.org/std/iter/trait.IteratorExt.html#tymethod.fold\" rel=\"nofollow noreferrer\"><code>fold</code></a> and <a href=\"http://doc.rust-lang.org/std/iter/trait.IteratorExt.html#tymethod.map\" rel=\"nofollow noreferrer\"><code>map</code></a>:</p>\n\n<pre><code>fn sum_square(v: &amp;[i64]) -&gt; i64 {\n    v.iter().map(|i| i * i).fold(0, |accumulator, i| accumulator + i)\n}\n\nfn square_sum(v: &amp;[i64]) -&gt; i64 {\n    let sum = v.iter().fold(0, |accumulator, &amp;i| accumulator + i);\n    sum * sum\n}\n</code></pre>\n\n<p>Or using <a href=\"http://doc.rust-lang.org/std/iter/trait.AdditiveIterator.html\" rel=\"nofollow noreferrer\"><code>AdditiveIterator</code></a>:</p>\n\n<pre><code>use std::iter::AdditiveIterator;\n\nfn sum_square(v: &amp;[i64]) -&gt; i64 {\n    v.iter().map(|i| i * i).sum()\n}\n\nfn square_sum(v: &amp;[i64]) -&gt; i64 {\n    let sum: i64 = v.iter().cloned().sum();\n    sum * sum\n}\n</code></pre>\n"}], "owner": {"reputation": 1776, "user_id": 4435175, "user_type": "registered", "accept_rate": 68, "profile_image": "https://i.stack.imgur.com/UCpoD.gif?s=128&g=1", "display_name": "Vega", "link": "https://stackoverflow.com/users/4435175/vega"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 199, "favorite_count": 0, "accepted_answer_id": 28776558, "answer_count": 2, "score": 1, "last_activity_date": 1425190113, "creation_date": 1425081006, "last_edit_date": 1425190113, "question_id": 28776276, "link": "https://stackoverflow.com/questions/28776276/fill-an-array-let-x-1-11-iterate-over-it-multiple-times-in-different-func", "title": "Fill an array &quot;let x = [1..11], iterate over it multiple times in different functions?", "body": "<p>I'm searching an easy, not bloated solution for an easy problem.</p>\n\n<p>Code (<a href=\"http://is.gd/k3ccYb\" rel=\"nofollow\">playpen</a>):</p>\n\n<pre><code>use std::ops::Range;\n\n// Sum of square numbers from 1 to 10 # 1^2 + 2^2 + 3^2 ...\nfn sum_square(v: &amp;[i64; 10]) -&gt; i64 {\n    let mut sum: i64 = 0;\n    for x in v {\n        sum += x * x;\n    }\n    return sum;\n}\n\n\n// Square sum of the added numbers from 1 to 10 # (1+2+3+...)^2\nfn square_sum(v: &amp;[i64; 10]) -&gt; i64{\n    let mut sum: i64 = 0;\n    for x in v {\n        sum += x;\n    }\n    return sum*sum;\n}\n\nfn main() {\n    let v: [i64; 10] = [1,2,3,4,5,6,7,8,9,10];\n    let diff = sum_square(&amp;v) - square_sum(&amp;v);\n    println!(\"{}\", diff);\n}\n</code></pre>\n\n<p>I have an array in the main function, filled with numbers from 1-10 (yes I know [1..11] doesn't work, but what's the best solution? Using \"range\" is out of question, I want an array without having to type each number).\nNow I need to iterate over this array multiple times (here 2x) in different functions.</p>\n\n<p>I don't want to use .copy() (because I don't want to move), I want to borrow the array to the functions like explained here: <a href=\"http://imgur.com/xMDVpoC\" rel=\"nofollow\">http://imgur.com/xMDVpoC</a></p>\n\n<pre><code>fn main() {\n    let v: [i64; 10] = [1..11];\n    let diff = sum_square(&amp;v) - square_sum(&amp;v);\n    println!(\"{}\", diff);\n}\n</code></pre>\n\n<p>Two functions, each iterating over this array. So I just use a</p>\n\n<pre><code>fn sum_square(v: &amp;[i64; 10]) -&gt; i64 {\n    let mut sum: i64 = 0;\n    for x in v {\n        sum += x * x;\n    }\n    return sum;\n}\n</code></pre>\n\n<p>Seems to work.\nIf I use the second function</p>\n\n<pre><code>// Square sum of the added numbers from 1 to 10 # (1+2+3+...)^2\nfn square_sum(v: &amp;[i64; 10]) -&gt; i64{\n    let mut sum: i64 = 0;\n    for x in v {\n    sum += x;\n    }\n    return sum*sum;\n}\n</code></pre>\n\n<p>I get an error: type mismatch resolving <code>&lt;core::slice::Iter&lt;'_, i64&gt; as core::iter::Iterator&gt;::Item == i64</code>:</p>\n"}, {"tags": ["iterator", "closures", "rust", "lifetime"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1425080997, "post_id": 28774496, "comment_id": 45830631, "body": "This question was cross-posted to the <a href=\"http://www.reddit.com/r/rust/comments/2xearb/returning_an_iterator/\" rel=\"nofollow noreferrer\">Rust Reddit</a>."}, {"owner": {"reputation": 2105, "user_id": 870079, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/58fd7fa8ab09a8a4c7b204f67e3f818e?s=128&d=identicon&r=PG", "display_name": "heinrich5991", "link": "https://stackoverflow.com/users/870079/heinrich5991"}, "edited": false, "score": 1, "creation_date": 1425214263, "post_id": 28774496, "comment_id": 45861981, "body": "As a side note, using platform-dependent integers like <code>usize</code> when not needed is discouraged, use <code>i32</code> or <code>u32</code> instead."}], "answers": [{"comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user1949917"}, "edited": false, "score": 0, "creation_date": 1425078694, "post_id": 28775063, "comment_id": 45829951, "body": "Per the guys on the Rust reddit, the issue with the [items] can also be fixed using a vec instead of an array. I found that option preferable to this."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1425080959, "post_id": 28775063, "comment_id": 45830624, "body": "That certainly will work, but it has different semantics. If you use a <code>Vec</code>, then the values will be located on the heap. Then, you can convert the <code>Vec</code> to an iterator which will consume the <code>Vec</code> and the iterator will return <code>usize</code> instead of <code>&amp;usize</code>."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1425074387, "creation_date": 1425074387, "answer_id": 28775063, "question_id": 28774496, "link": "https://stackoverflow.com/questions/28774496/conflicting-lifetime-requirement-for-iterator-returned-from-function/28775063#28775063", "title": "Conflicting lifetime requirement for iterator returned from function", "body": "<p>You have two conflicting issues, so let break down a few representative pieces:</p>\n\n<pre><code>[3usize, 4, 2, 1].iter()\n    .map(|n| n * 2)\n    .filter(|n| n % 2 == 0))\n</code></pre>\n\n<p>Here, we create an array in the stack frame of the method, then get an iterator to it. Since we aren't allowed to consume the array, the iterator item is <code>&amp;usize</code>. We then map from the <code>&amp;usize</code> to a <code>usize</code>. Then we filter against a <code>&amp;usize</code> - we aren't allowed to consume the filtered item, otherwise the iterator wouldn't have it to return!</p>\n\n<p>The problem here is that we are ultimately rooted to the stack frame of the function. We can't return this iterator, because the array won't exist after the call returns!</p>\n\n<p>To work around this for now, let's just make it static. Now we can focus on the issue with <code>even</code>. </p>\n\n<p><code>filter</code> takes a closure. Closures capture any variable used that isn't provided as an argument to the closure. By default, these variables are captured by reference. However, <code>even</code> is again a variable located on the stack frame. This time however, we can give it to the closure by using the <code>move</code> keyword. Here's everything put together:</p>\n\n<pre><code>fn main() {\n    for n in values(true) {\n        println!(\"{}\", n);\n    }\n}\n\nstatic ITEMS: [usize; 4] = [3, 4, 2, 1];\n\nfn values(even: bool) -&gt; Box&lt;Iterator&lt;Item=usize&gt;&gt; {\n    Box::new(ITEMS.iter()\n        .map(|n| n * 2)\n        .filter(move |n| if even {\n            n % 2 == 0\n        } else {\n            true\n        }))\n}\n</code></pre>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user1949917"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 124, "favorite_count": 0, "accepted_answer_id": 28775063, "answer_count": 1, "score": 1, "last_activity_date": 1425074387, "creation_date": 1425072075, "question_id": 28774496, "link": "https://stackoverflow.com/questions/28774496/conflicting-lifetime-requirement-for-iterator-returned-from-function", "title": "Conflicting lifetime requirement for iterator returned from function", "body": "<p>This may be a duplicate. I don't know. I couldn't understand the other answers well enough to know that. :)</p>\n\n<p>Rust version: rustc 1.0.0-nightly (b47aebe3f 2015-02-26) (built 2015-02-27)</p>\n\n<p>Basically, I'm passing a bool to this function that's supposed to build an iterator that filters one way for true and another way for false. Then it kind of craps itself because it doesn't know how to keep that boolean value handy, I guess. I don't know. There are actually multiple lifetime problems here, which is discouraging because this is a <em>really</em> common pattern for me, since I come from a .NET background.</p>\n\n<pre><code>fn main() {\n    for n in values(true) {\n        println!(\"{}\", n);\n    }\n}\n\nfn values(even: bool) -&gt; Box&lt;Iterator&lt;Item=usize&gt;&gt; {\n    Box::new([3usize, 4, 2, 1].iter()\n        .map(|n| n * 2)\n        .filter(|n| if even {\n            n % 2 == 0\n        } else {\n            true\n        }))\n}\n</code></pre>\n\n<p>Is there a way to make this work?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1425048548, "post_id": 28767108, "comment_id": 45814252, "body": "Please consider creating a <a href=\"http://stackoverflow.com/help/mcve\">MCVE</a> when asking questions. This helps you understand the specific parts of the problem, and also helps answerers understand it quicker. Here&#39;s an <a href=\"http://is.gd/CbhAHY\" rel=\"nofollow noreferrer\">example for this case</a>."}, {"owner": {"reputation": 454, "user_id": 2340672, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2f310ac7326625ce5f21de2937300b30?s=128&d=identicon&r=PG", "display_name": "azgult", "link": "https://stackoverflow.com/users/2340672/azgult"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1425054179, "post_id": 28767108, "comment_id": 45817802, "body": "Thanks for the hint, I&#39;ll bear it in mind in the future. (I don&#39;t ask questions too often, so I&#39;m somewhat awkward at it)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1425054270, "post_id": 28767108, "comment_id": 45817861, "body": "No worries! We all have to start somewhere. ^_^"}], "answers": [{"comments": [{"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "edited": false, "score": 1, "creation_date": 1425070926, "post_id": 28768891, "comment_id": 45826651, "body": "I&#39;m not sure it&#39;s really a bug, because the borrow checked makes no claims that it has no false positives, but it is undesirable behavior. There is an issue for it, but it hasn&#39;t really gotten much attention. <a href=\"https://github.com/rust-lang/rust/issues/17462\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/17462</a>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1483405119, "last_edit_date": 1483405119, "creation_date": 1425051811, "answer_id": 28768891, "question_id": 28767108, "link": "https://stackoverflow.com/questions/28767108/borrow-pointer-errors-recursively-traversing-tree/28768891#28768891", "title": "Borrow pointer errors recursively traversing tree", "body": "<p>This seems to be a weakness of the borrow checker, and is perhaps a bug. The problem is that you are borrowing <code>at</code> in the match and then modifying it. Unfortunately, the compiler doesn't see that the <code>at</code> inside the loop and outside the loop are conceptually different. We can make them explicitly different, however:</p>\n\n<pre><code>enum AVLTree {\n    Tree(Box&lt;AVLTree&gt;),\n    Empty,\n}\n\nimpl AVLTree {\n    fn insert_element(&amp;mut self) {\n        let mut at = self;\n        loop {\n            let tmp_at = at; // Main change\n            match tmp_at {\n                &amp;mut AVLTree::Tree(ref mut left) =&gt; {\n                    at = &amp;mut **left;\n                }\n                &amp;mut AVLTree::Empty =&gt; unreachable!()\n            }\n        }\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>Here, we transfer the mutable borrow from <code>at</code> to <code>tmp_at</code>, then transfer it to <code>left</code>, then transfer it back to <code>at</code>.</p>\n\n<p>A prettier option may be to use a new scope:</p>\n\n<pre><code>fn insert_element(&amp;mut self) {\n    let mut at = self;\n    loop {\n        match {at} { // Main change\n            &amp;mut AVLTree::Tree(ref mut left) =&gt; {\n                at = &amp;mut **left;\n            }\n            &amp;mut AVLTree::Empty =&gt; unreachable!(),\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 454, "user_id": 2340672, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2f310ac7326625ce5f21de2937300b30?s=128&d=identicon&r=PG", "display_name": "azgult", "link": "https://stackoverflow.com/users/2340672/azgult"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 749, "favorite_count": 1, "closed_date": 1520887489, "accepted_answer_id": 28768891, "answer_count": 1, "score": 4, "last_activity_date": 1483405119, "creation_date": 1425046384, "last_edit_date": 1474379071, "question_id": 28767108, "link": "https://stackoverflow.com/questions/28767108/borrow-pointer-errors-recursively-traversing-tree", "closed_reason": "Duplicate", "title": "Borrow pointer errors recursively traversing tree", "body": "<p>To learn Rust, I am implementing an AVL tree/dictionary. To insert a new element, I descend into the tree until I find a node where it could be inserted. Unfortunately it complains about several issues with borrowing pointers, and I'm having trouble deciphering them.</p>\n\n<p>I've highlighted where and which errors occur.</p>\n\n<pre><code>enum AVLTree&lt;T, U&gt; {\n    Tree(T, U, Box&lt;AVLTree&lt;T, U&gt;&gt;, Box&lt;AVLTree&lt;T, U&gt;&gt;),\n    Empty,\n}\n\nimpl&lt;T, U&gt; AVLTree&lt;T, U&gt;\n    where T: PartialOrd + PartialEq + Copy,\n          U: Copy\n{\n    fn insert_element(&amp;mut self, key: T, val: U) {\n        let new_node = AVLTree::Tree(key, val, Box::new(AVLTree::Empty), Box::new(AVLTree::Empty));\n\n        if let AVLTree::Empty = *self {\n            *self = new_node;\n            return;\n        }\n\n        let mut at = self;\n        loop {\n            match at {\n                &amp;mut AVLTree::Tree(key2, _, ref mut left, ref mut right) =&gt; {\n                    //                      ^~~~~~~~~~~~\n                    // error: cannot borrow `at.2` as mutable more than once at a time\n                    //                                    ^~~~~~~~~~~~~\n                    // error: cannot borrow `at.3` as mutable more than once at a time\n                    if key &lt; key2 {\n                        if let AVLTree::Empty = **left {\n                            *left = Box::new(new_node);\n                            break;\n                        }\n                        at = &amp;mut **left;\n                        // error: cannot assign to `at` because it is borrowed\n                    } else {\n                        if let AVLTree::Empty = **right {\n                            *right = Box::new(new_node);\n                            break;\n                        }\n                        at = &amp;mut **right;\n                        // error: cannot assign to `at` because it is borrowed\n                    }\n                }\n                &amp;mut AVLTree::Empty =&gt; unreachable!(),\n            }\n        }\n        // Do something\n    }\n}\n</code></pre>\n\n<p>Why is deconstructing <code>at</code> borrowing it? Why is the compiler complaining about multiple mutable borrows when this should never happen? How could this code be written instead to avoid such errors?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1425047237, "post_id": 28766975, "comment_id": 45813513, "body": "Please consider removing example code that is not directly relevant to your question (see <a href=\"http://stackoverflow.com/help/mcve\">MCVE</a>). Specifically the implementation of <code>Add</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1425048169, "post_id": 28766975, "comment_id": 45814052, "body": "You may also be interested in <a href=\"http://stackoverflow.com/q/28283641/155423\">What is the preferred way to implement the Add trait efficiently for Vector type</a>."}], "answers": [{"tags": [], "owner": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "is_accepted": false, "score": 0, "last_activity_date": 1425047273, "creation_date": 1425047273, "answer_id": 28767365, "question_id": 28766975, "link": "https://stackoverflow.com/questions/28766975/adding-two-numbers-without-cloning-both/28767365#28767365", "title": "Adding two numbers without cloning both", "body": "<p>Seems not to be possible at the moment. The reason is a missing += operator overload.</p>\n\n<p>But clone() on primitive types seems to be just a noop so it actually doesn't matter, I guess.</p>\n"}, {"tags": [], "owner": {"reputation": 118, "user_id": 4207988, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fg6fh.png?s=128&g=1", "display_name": "El&#228;m&#228;&#228;ns&#228; Kyll&#228;stynyt", "link": "https://stackoverflow.com/users/4207988/el%c3%a4m%c3%a4%c3%a4ns%c3%a4-kyll%c3%a4stynyt"}, "is_accepted": true, "score": 3, "last_activity_date": 1425071339, "creation_date": 1425071339, "answer_id": 28774299, "question_id": 28766975, "link": "https://stackoverflow.com/questions/28766975/adding-two-numbers-without-cloning-both/28774299#28774299", "title": "Adding two numbers without cloning both", "body": "<p>There appears to be no available way to overload \"+=\" operator. However, you can avoid using exclipt \"clone\" if you replace Clone trait with Copy (however, you can use them together if needed):</p>\n\n<pre><code>impl&lt;N: Copy + Add&lt;Output = N&gt;&gt; Vec3&lt;N&gt; {\n    pub fn add(&amp;mut self, v: &amp;Vec3&lt;N&gt;){\n        self.x = self.x + v.x;\n        self.y = self.y + v.y;\n        self.z = self.z + v.z;\n    }\n}\n</code></pre>\n\n<p>Notice how you don't have to call \"clone\" at all!</p>\n\n<p>This is a direct quote from Rust's documentation:</p>\n\n<blockquote>\n  <h2>When should my type be Copy?</h2>\n  \n  <p>Generally speaking, if your type can implement Copy, it should. There's one important thing to consider though: if you think your type may not be able to implement Copy in the future, then it might be prudent to not implement Copy. This is because removing Copy is a breaking change: that second example would fail to compile if we made Foo non-Copy. </p>\n</blockquote>\n\n<p>You can find more information about Copy trait <a href=\"http://doc.rust-lang.org/std/marker/trait.Copy.html\" rel=\"nofollow\">here</a>.</p>\n"}], "owner": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 366, "favorite_count": 0, "accepted_answer_id": 28774299, "answer_count": 2, "score": 0, "last_activity_date": 1425071339, "creation_date": 1425046001, "question_id": 28766975, "link": "https://stackoverflow.com/questions/28766975/adding-two-numbers-without-cloning-both", "title": "Adding two numbers without cloning both", "body": "<pre><code>use std::ops::Add;\n#[derive(Debug)]\npub struct Vec3&lt;N&gt;{\n    x: N,\n    y: N,\n    z: N\n}\nimpl&lt;N&gt; Vec3&lt;N&gt;{\n    pub fn new(x: N, y: N , z: N) -&gt; Vec3&lt;N&gt;{\n        Vec3{x:x,y:y,z:z}\n    }\n}\nimpl&lt;N : Clone + Add&lt;Output=N&gt;&gt; Vec3&lt;N&gt;{\n    pub fn  add(&amp;mut self,v: &amp;Vec3&lt;N&gt;){\n        self.x = self.x.clone() + v.x.clone();\n        self.y = self.y.clone() + v.y.clone();\n        self.z = self.z.clone() + v.z.clone();\n    }\n}\nimpl&lt;N: Add&lt;Output=N&gt;&gt; Add for Vec3&lt;N&gt;{\n    type Output = Vec3&lt;N&gt;;\n    fn add(self, v: Vec3&lt;N&gt;) -&gt; Vec3&lt;N&gt;{\n        Vec3{x: self.x + v.x\n            ,y: self.y + v.y \n            ,z: self.z + v.z} \n    }\n}\n</code></pre>\n\n<p>This allows me to write.</p>\n\n<pre><code>mod vec3;\nuse vec3::*;\nfn main() {\n    let mut v1 = Vec3::&lt;f32&gt;::new(1.0,2.0,3.0);\n    let v2 = Vec3::&lt;f32&gt;::new(1.0,2.0,3.0);\n    v1.add(&amp;v2);\n    let v3 = v1 + v2;\n\n    println!(\"{:?}\", v3);\n}\n</code></pre>\n\n<p>This <code>let v3 = v1 + v2;</code> consumes v1 and v2. But that is probably not always wanted, so I added another add function  with the signature <code>pub fn  add(&amp;mut self,v: &amp;Vec3&lt;N&gt;)</code> </p>\n\n<p>My problem is with this code snippet</p>\n\n<pre><code>impl&lt;N : Clone + Add&lt;Output=N&gt;&gt; Vec3&lt;N&gt;{\n    pub fn  add(&amp;mut self,v: &amp;Vec3&lt;N&gt;){\n        self.x = self.x.clone() + v.x.clone();\n        self.y = self.y.clone() + v.y.clone();\n        self.z = self.z.clone() + v.z.clone();\n    }\n}\n</code></pre>\n\n<p>I needed to clone the values of both vectors in order to avoid a move. But I really wanted to write it like this</p>\n\n<p><code>self.x = self.x + v.x.clone();</code> or <code>self.x += v.x.clone();</code> I don't see why I would have to clone both values.</p>\n\n<p>How could this be done?</p>\n"}, {"tags": ["rust", "ffi"], "comments": [{"owner": {"reputation": 647, "user_id": 4523058, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/a975dc9f5de333ddaf78b50c048548ec?s=128&d=identicon&r=PG", "display_name": "urubi", "link": "https://stackoverflow.com/users/4523058/urubi"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1425363688, "post_id": 28758246, "comment_id": 45921393, "body": "Please see my comment on the accepted answer. I&#39;ve postponed marking the answer as accepted until I was confident that my implementation did not cause invalid memory operations."}], "answers": [{"comments": [{"owner": {"reputation": 647, "user_id": 4523058, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/a975dc9f5de333ddaf78b50c048548ec?s=128&d=identicon&r=PG", "display_name": "urubi", "link": "https://stackoverflow.com/users/4523058/urubi"}, "edited": false, "score": 2, "creation_date": 1425363375, "post_id": 28760362, "comment_id": 45921276, "body": "Hi, Thank you for the detailed response. It helped me get to an acceptable solution to the problem: To get a c-friendly pointer (self-contained) from a <code>Vec&lt;T&gt;</code>, I used the method outlined along with the age-old C trick of packing the necessary metadata before the data, and returning the correctly-offset pointer to the C caller. Dropping the memory is done by reversing the procedure."}], "tags": [], "owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "is_accepted": true, "score": 8, "last_activity_date": 1425026346, "last_edit_date": 1425026346, "creation_date": 1425025080, "answer_id": 28760362, "question_id": 28758246, "link": "https://stackoverflow.com/questions/28758246/how-can-i-convert-a-vect-into-a-c-friendly-mut-t/28760362#28760362", "title": "How can I convert a Vec&lt;T&gt; into a C-friendly *mut T?", "body": "<p>A <code>Vec&lt;T&gt;</code> is described by 3 values:</p>\n\n<ul>\n<li>A pointer to its first element, that can be obtained with <a href=\"http://doc.rust-lang.org/std/slice/trait.SliceExt.html#tymethod.as_mut_ptr\" rel=\"noreferrer\"><code>.as_mut_ptr()</code></a></li>\n<li>A length, that can be obtained with <a href=\"http://doc.rust-lang.org/collections/vec/struct.Vec.html#method.len\" rel=\"noreferrer\"><code>.len()</code></a></li>\n<li>A capacity, that can be obtained with <a href=\"http://doc.rust-lang.org/collections/vec/struct.Vec.html#method.capacity\" rel=\"noreferrer\"><code>.capacity()</code></a></li>\n</ul>\n\n<p>In terms of a C array, the capacity is the size of memory allocated, while the length is the number of elements actually contained in the array. Both are counting in number of <code>T</code>. You normally would need to provide these 3 values to your C code.</p>\n\n<p>If you want them to be equals, you can use <a href=\"http://doc.rust-lang.org/collections/vec/struct.Vec.html#method.shrink_to_fit\" rel=\"noreferrer\"><code>.shrink_to_fit()</code></a> on the vector to reduce its capacity as near as its size as possible depending on the allocator.</p>\n\n<p>If you give back the ownership of the <code>Vec&lt;T&gt;</code> to your C code, don't forget to call <code>std::mem::forget(v)</code> on it once you have retrieved the 3 values described before, to avoid having its destructor running at the end of the function.</p>\n\n<p>Afterwards, you can create back a <code>Vec</code> from these 3 values using <a href=\"http://doc.rust-lang.org/collections/vec/struct.Vec.html#method.from_raw_parts\" rel=\"noreferrer\"><code>from_raw_parts(..)</code></a> like this:</p>\n\n<pre><code>let v = unsafe { Vec::&lt;T&gt;::from_raw_parts(ptr, length, capacity) };\n</code></pre>\n\n<p>and when its destructor will run the memory will be correctly freed. Be careful, the 3 values need to be correct for deallocation of memory to be correct. It's not very important for a <code>Vec&lt;u8&gt;</code>, but the destructor of <code>Vec</code> will run the destructor of all data it contains according to its <code>length</code>.</p>\n"}], "owner": {"reputation": 647, "user_id": 4523058, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/a975dc9f5de333ddaf78b50c048548ec?s=128&d=identicon&r=PG", "display_name": "urubi", "link": "https://stackoverflow.com/users/4523058/urubi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1465, "favorite_count": 1, "accepted_answer_id": 28760362, "answer_count": 1, "score": 5, "last_activity_date": 1425345512, "creation_date": 1425015378, "last_edit_date": 1425345512, "question_id": 28758246, "link": "https://stackoverflow.com/questions/28758246/how-can-i-convert-a-vect-into-a-c-friendly-mut-t", "title": "How can I convert a Vec&lt;T&gt; into a C-friendly *mut T?", "body": "<p>I have a Rust library that returns a <code>u8</code> array to a C caller via FFI. The library also handles dropping the array after the client is done with it. The library has no state, so the client needs to own the array until it is passed back to the library for freeing.</p>\n\n<p>Using <code>box::from_raw</code> and <code>boxed::into_raw</code> would be nice, but I couldn't manage to work out how to convert the array into the return type.</p>\n"}, {"tags": ["polymorphism", "rust", "traits"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1424978833, "post_id": 28751001, "comment_id": 45784055, "body": "possible duplicate of <a href=\"http://stackoverflow.com/questions/28589764/returning-and-using-a-generic-type-with-match\">Returning and using a generic type with match</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1424978938, "post_id": 28751001, "comment_id": 45784126, "body": "Note that the Rust style is 4-space indents."}, {"owner": {"reputation": 6604, "user_id": 318206, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/f30e68fd58551b03172a66098e37db95?s=128&d=identicon&r=PG", "display_name": "Bosh", "link": "https://stackoverflow.com/users/318206/bosh"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1424985907, "post_id": 28751001, "comment_id": 45787946, "body": "It&#39;s a very similar question to &quot;Returning and using a generic type with match,&quot; but the solution isn&#39;t quite what I was asking about. Specifically, I&#39;m trying to learn whether it&#39;s possible to avoid repeating the &quot;parse-then-store&quot; logic in every branch."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1424986354, "post_id": 28751001, "comment_id": 45788126, "body": "Your last example seems to cover that - return an enum (for example) that covers all the cases then encapsulate the shared logic within the methods of that enum."}], "answers": [{"comments": [{"owner": {"reputation": 6604, "user_id": 318206, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/f30e68fd58551b03172a66098e37db95?s=128&d=identicon&r=PG", "display_name": "Bosh", "link": "https://stackoverflow.com/users/318206/bosh"}, "edited": false, "score": 0, "creation_date": 1425019216, "post_id": 28754370, "comment_id": 45798234, "body": "Thanks! The trait object approach is exactly what I was looking for. This works beautifully."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 6604, "user_id": 318206, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/f30e68fd58551b03172a66098e37db95?s=128&d=identicon&r=PG", "display_name": "Bosh", "link": "https://stackoverflow.com/users/318206/bosh"}, "edited": false, "score": 0, "creation_date": 1425047768, "post_id": 28754370, "comment_id": 45813812, "body": "@Bosh that&#39;s a shame, because it does mean that this question <b>is a duplicate</b>. Trait objects are <a href=\"http://stackoverflow.com/a/28590148/155423\">the third example in the linked question</a>"}, {"owner": {"reputation": 6604, "user_id": 318206, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/f30e68fd58551b03172a66098e37db95?s=128&d=identicon&r=PG", "display_name": "Bosh", "link": "https://stackoverflow.com/users/318206/bosh"}, "edited": false, "score": 0, "creation_date": 1425052735, "post_id": 28754370, "comment_id": 45816935, "body": "I don&#39;t quite agree -- trait objects were key for both questions, but my question was about how to abstract logic into these trait objects, and <a href=\"http://stackoverflow.com/questions/28589764/returning-and-using-a-generic-type-with-match/28590148#28590148\" title=\"returning and using a generic type with match\">stackoverflow.com/questions/28589764/&hellip;</a> didn&#39;t get at that. Of course, if I were familiar enough with Rust, I might have been able to build on the other answer -- but of course I&#39;m not. As a Rust newbie, it&#39;s hard for me to  generalize and apply these techniques in different contexts. So again: thanks :-)"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1425047817, "last_edit_date": 1495542511, "creation_date": 1424991172, "answer_id": 28754370, "question_id": 28751001, "link": "https://stackoverflow.com/questions/28751001/keeping-dry-in-rust-match-expressions/28754370#28754370", "title": "Keeping DRY in rust match expressions", "body": "<p>Ok, I'll try to answer your question:</p>\n\n<blockquote>\n  <p>[is it] possible to avoid repeating the \"parse-then-store\" logic in every branch</p>\n</blockquote>\n\n<p>The answer is yes, but you will need to abstract out the parts that are unique and extract out the parts that are common. I changed your problem a bit to have an easier example. Here, we parse just a single integer, based on what shape type it is.</p>\n\n<p>We create a new struct <code>Foo</code> that holds the concept of \"change a <code>u32</code> into some type and then keep a list of them\". To do that, we introduce two generic pieces - <code>T</code>, the type of thing we are holding, and <code>F</code>, a way of converting a <code>u32</code> into that type.</p>\n\n<p>To allow for some flexibility, I also created and implemented a trait <code>ShapeMatcher</code>. This allows us to get a reference to a specific instance of <code>Foo</code> in a generic way - a <em>trait object</em>. If you don't need that, you could just inline the trait back into <code>Foo</code> and also inline the <code>match_it</code> call into the branches of the <code>if</code>. This is further described in <a href=\"https://stackoverflow.com/q/28589764/155423\">Returning and using a generic type with match</a>.</p>\n\n<pre><code>#[derive(Debug)]\nstruct Circle(u32);\n#[derive(Debug)]\nstruct Square(u32);\n\nstruct Foo&lt;T, F&gt; {\n    db: Vec&lt;T&gt;,\n    matcher: F,\n}\n\nimpl&lt;T, F&gt; Foo&lt;T, F&gt;\n    where F: Fn(u32) -&gt; T\n{\n    fn new(f: F) -&gt; Foo&lt;T, F&gt; { Foo { db: Vec::new(), matcher: f } }\n}\n\ntrait ShapeMatcher {\n    fn match_it(&amp;mut self, v: u32);\n}\n\nimpl&lt;T, F&gt; ShapeMatcher for Foo&lt;T, F&gt;\n    where F: Fn(u32) -&gt; T\n{\n    fn match_it(&amp;mut self, v: u32) {\n        let x = (self.matcher)(v);\n        self.db.push(x);\n    }\n}\n\nfn main() {\n    let mut circle_matcher = Foo::new(Circle);\n    let mut square_matcher = Foo::new(Square);\n\n    for &amp;(shape, value) in &amp;[(\"circle\", 5),(\"circle\", 42),(\"square\", 9)] { \n        let matcher: &amp;mut ShapeMatcher =\n            if shape == \"circle\" { &amp;mut circle_matcher }\n            else                 { &amp;mut square_matcher };\n\n        matcher.match_it(value);\n    }\n\n    println!(\"{:?}\", circle_matcher.db);\n    println!(\"{:?}\", square_matcher.db);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "is_accepted": false, "score": 0, "last_activity_date": 1425001566, "creation_date": 1425001566, "answer_id": 28756154, "question_id": 28751001, "link": "https://stackoverflow.com/questions/28751001/keeping-dry-in-rust-match-expressions/28756154#28756154", "title": "Keeping DRY in rust match expressions", "body": "<p>Another option for avoiding boilerplate code would be some kind of macro-powered embedded domain specific language (eDSL). It is not always the best idea (especially in Rust), but sometimes this method is more expressive for tasks like yours. For example, consider a syntax:</p>\n\n<pre><code>    shapes_parse! { \n        inspecting line; { \n            Circle into circle_db,\n            Square into square_db,\n            Triangle into triangle_db\n        }\n    }\n</code></pre>\n\n<p>which expands in the following code:</p>\n\n<pre><code>    match line[0] {\n        \"Circle\" =&gt; { circle_db.push(Circle::parse(&amp;line[1..])); },\n        \"Square\" =&gt; { square_db.push(Square::parse(&amp;line[1..])); },\n        \"Triangle\" =&gt; { triangle_db.push(Triangle::parse(&amp;line[1..])); },\n        other =&gt; panic!(\"Unexpected type: {}\", other),\n    }\n</code></pre>\n\n<p>using this macro:</p>\n\n<pre><code>macro_rules! shapes_parse {\n    ( inspecting $line:expr; { $($name:ident into $db:expr),* } ) =&gt; {\n        match $line[0] {\n            $( stringify!($name) =&gt; { $db.push($name::parse(&amp;$line[1..])); } )+\n            other =&gt; panic!(\"Unexpected shape: {}\", other),\n        }\n    };\n}\n</code></pre>\n\n<p><a href=\"http://is.gd/Jk5iOo\" rel=\"nofollow\">workining example on playpen</a></p>\n"}], "owner": {"reputation": 6604, "user_id": 318206, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/f30e68fd58551b03172a66098e37db95?s=128&d=identicon&r=PG", "display_name": "Bosh", "link": "https://stackoverflow.com/users/318206/bosh"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 251, "favorite_count": 0, "accepted_answer_id": 28754370, "answer_count": 2, "score": 0, "last_activity_date": 1425047817, "creation_date": 1424978508, "last_edit_date": 1424985661, "question_id": 28751001, "link": "https://stackoverflow.com/questions/28751001/keeping-dry-in-rust-match-expressions", "title": "Keeping DRY in rust match expressions", "body": "<p>As a simplified, self-contained example, let's say I'm parsing an input file full of shape definitions:</p>\n\n<pre><code>// shapes.txt\nCircle: radius 1, color blue\nSquare: edge 5, color red\nTriangle: edge 2 , color black\nTriangle: edge 2 , color white\n</code></pre>\n\n<p>I want to parse these into structs like:</p>\n\n<pre><code>struct Circle {\n    radius: i32,\n    color: String\n}\n\nstruct Square {\n    edge: i32,\n    color: String\n}\n\nstruct Triangle {\n    edge: i32,\n    color: String\n}\n</code></pre>\n\n<p>I'd like to parse these into a set of shape-specific vectors like:</p>\n\n<pre><code>CircleDb: Vec&lt;Circle&gt;;\nTriangleDb: Vec&lt;Triangle&gt;;\nSquareDb: Vec&lt;Square&gt;;\n</code></pre>\n\n<p>... using a match block like:</p>\n\n<pre><code>match inputFile.nextWord() {\n    \"Circle\" =&gt; {\n        Circle c = parseCircle(inputFile);\n        CircleDb.push(c);\n    },\n    \"Square\" =&gt; {\n        Square s = parseSquare(inputFile);\n        SquareDb.push(s);\n    },\n    \"Triangle\" =&gt; {\n        Triangle t = parseTriangle(inputFile);\n        TriangleDb.push(t);\n    },\n}\n</code></pre>\n\n<p>Now, imagine that instead of 3 kinds of shapes, I've got 10 or 15. So I don't want to repeat the same sequence of <code>x=parseX(inputFile); XDb.push(x);</code> within each branch. I'd rather say something like:</p>\n\n<pre><code>let myMatcher = match inputFile.nextWord() {\n    \"Circle\" =&gt; CircleMatcher,\n    \"Square\" =&gt; SquareMatcher,\n    \"Triangle\" =&gt; TriangleMatcher,\n};\nmyMatcher.store(myMatcher.parse(inputFile));\n</code></pre>\n\n<p>But I can't figure out any consistent way to define a <code>Matcher</code> struct/type/trait/whatever without violating constraints of the type checker. Is it possible to do this kind of dynamic thing? Is it a good idea? I'd love to get a sense of some good patterns here.</p>\n\n<p>Thanks!</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1425031577, "post_id": 28748852, "comment_id": 45804126, "body": "@Shepmaster I think this should be the answer"}], "answers": [{"comments": [{"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1425199373, "post_id": 28767899, "comment_id": 45858329, "body": "Thanks for that answer. Following links from there it looks like there are harder problems underneath before that would get fixed: <a href=\"https://github.com/rust-lang/rust/pull/19434\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/pull/19434</a>  But I confess I haven&#39;t understood it all yet!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1425048803, "creation_date": 1425048803, "answer_id": 28767899, "question_id": 28748852, "link": "https://stackoverflow.com/questions/28748852/operator-overloading-involving-complex-and-float-values/28767899#28767899", "title": "Operator overloading involving complex and float values", "body": "<p>This should be allowed, but there's an <a href=\"https://github.com/rust-lang/rust/issues/19035\" rel=\"nofollow\">outstanding issue</a> that prevents built-in types (<code>u8</code>, <code>f32</code>, etc) from being used on the left-hand side of the operation when a custom implementation is in play.</p>\n\n<p>The suggested workaround for now is to put the custom type on the left-hand side and the built-in type on the right.</p>\n"}], "owner": {"reputation": 20104, "user_id": 500314, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9FRoh.jpg?s=128&g=1", "display_name": "Kipton Barros", "link": "https://stackoverflow.com/users/500314/kipton-barros"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 350, "favorite_count": 1, "accepted_answer_id": 28767899, "answer_count": 1, "score": 2, "last_activity_date": 1427915636, "creation_date": 1424971517, "last_edit_date": 1427915636, "question_id": 28748852, "link": "https://stackoverflow.com/questions/28748852/operator-overloading-involving-complex-and-float-values", "title": "Operator overloading involving complex and float values", "body": "<p><strong>Update</strong>: This bug has been fixed by <a href=\"https://github.com/rust-lang/rust/pull/23673\" rel=\"nofollow\">https://github.com/rust-lang/rust/pull/23673</a> . The code below now works.</p>\n\n<hr>\n\n<p>In math and numerical programming, it is expected that complex numbers interoperate seamlessly with real (floating point) values. Is it possible in Rust to define a <code>struct Complex&lt;T: Float&gt;</code> that allows symmetric math operations involving values of type <code>T</code>?</p>\n\n<p>For example, one can define the operator <code>*</code> for inputs <code>(Complex&lt;T&gt;, Complex&lt;T&gt;)</code> and <code>(Complex&lt;T&gt;, T)</code> as follows:</p>\n\n<pre><code>use std::ops::Mul;\nuse std::num::Float;\n\n#[derive(Copy, Debug)]\npub struct Complex&lt;T: Float&gt; {\n    pub re: T, pub im: T\n}\n\nimpl&lt;T: Float&gt; Complex&lt;T&gt; {\n    pub fn new(re: T, im: T) -&gt; Complex&lt;T&gt; {\n        Complex { re: re, im: im }\n    }\n}\n\nimpl&lt;T: Float&gt; Mul&lt;Complex&lt;T&gt;&gt; for Complex&lt;T&gt; {\n    type Output = Complex&lt;T&gt;;\n\n    fn mul(self, other: Complex&lt;T&gt;) -&gt; Complex&lt;T&gt; {\n        Complex::new(self.re * other.re - self.im * other.im,\n                     self.re * other.im + self.im * other.re)\n    }\n}\n\nimpl&lt;T: Float&gt; Mul&lt;T&gt; for Complex&lt;T&gt; {\n    type Output = Complex&lt;T&gt;;\n\n    fn mul(self, other: T) -&gt; Complex&lt;T&gt; {\n        Complex::new(self.re * other, self.im * other)\n    }\n}\n</code></pre>\n\n<p>Is it possible to overload <code>*</code> to also work on the inputs <code>(T, Complex&lt;T&gt;)</code>? For example, the following <em>doesn't</em> work:</p>\n\n<pre><code>impl Mul&lt;Complex&lt;f64&gt;&gt; for f64 {\n    type Output = Complex&lt;f64&gt;;\n    fn mul(self, other: Complex&lt;f64&gt;) -&gt; Complex&lt;f64&gt; {\n        Complex::new(self * other.re, self * other.im)\n    }\n}\n\nfn main() {\n    let x = Complex::new(1.0, 1.0);\n    let y = x*x;\n    let z = x*4.0;\n    let w = 4.0*x;\n}\n</code></pre>\n\n<p>I get the error message:</p>\n\n<pre><code> error: mismatched types:\n expected `_`,\n    found `Complex&lt;_&gt;`\n(expected floating-point variable,\n    found struct `Complex`) [E0308]\nsrc/main.rs:61     let w = 4.0*x;\n                           ^\n</code></pre>\n\n<p>In Scala, one might work around this problem with an implicit conversion from <code>T</code> to <code>Complex&lt;T&gt;</code>. Are there similar tricks in Rust? Is there a better way to define an efficient, generalized <code>*</code> operation? Thanks.</p>\n"}, {"tags": ["datetime", "rust"], "answers": [{"comments": [{"owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "edited": false, "score": 0, "creation_date": 1425017823, "post_id": 28756464, "comment_id": 45797765, "body": "Thanks ! Would you adjust your answer to state that <code>with_timezone</code> is the way to do it to answer the question ? I&#39;d be glad to greenlight it then. Cheers"}], "tags": [], "owner": {"reputation": 456, "user_id": 225272, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/960gX.png?s=128&g=1", "display_name": "Kang Seonghoon", "link": "https://stackoverflow.com/users/225272/kang-seonghoon"}, "is_accepted": true, "score": 7, "last_activity_date": 1425023668, "last_edit_date": 1425023668, "creation_date": 1425003672, "answer_id": 28756464, "question_id": 28747694, "link": "https://stackoverflow.com/questions/28747694/how-do-i-convert-a-chrono-datetimeutc-instance-to-datetimelocal/28756464#28756464", "title": "How do I convert a chrono `DateTime&lt;UTC&gt;` instance to `DateTime&lt;Local&gt;`?", "body": "<p>Oops, thank you for reporting. This is a bug and registered as the issue <a href=\"https://github.com/lifthrasiir/rust-chrono/issues/26\" rel=\"noreferrer\">#26</a>. This should be fixed in Chrono 0.2.3.</p>\n\n<p>Besides from the bug, <code>utc.with_timezone(&amp;Local)</code> is indeed a correct way to convert to the local time. There is an important identity that <code>utc.with_timezone(&amp;Local).with_timezone(&amp;UTC)</code> should be equal to <code>utc</code> (except for the exceptional case, where the local time zone has been changed).</p>\n"}, {"tags": [], "owner": {"reputation": 4195, "user_id": 6882497, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/yMbwv.jpg?s=128&g=1", "display_name": "Akiner Alkan", "link": "https://stackoverflow.com/users/6882497/akiner-alkan"}, "is_accepted": false, "score": 4, "last_activity_date": 1566968574, "last_edit_date": 1566968574, "creation_date": 1564637855, "answer_id": 57302410, "question_id": 28747694, "link": "https://stackoverflow.com/questions/28747694/how-do-i-convert-a-chrono-datetimeutc-instance-to-datetimelocal/57302410#57302410", "title": "How do I convert a chrono `DateTime&lt;UTC&gt;` instance to `DateTime&lt;Local&gt;`?", "body": "<p>Starting with chrono 0.4.7 you can convert them between with using from trait in a simpler way:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use chrono::prelude::*;\n\nfn main() {\n    let utc = Utc::now();\n    let local = Local::now();\n    let converted: DateTime&lt;Local&gt; = DateTime::from(utc);\n}\n</code></pre>\n"}], "owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5221, "favorite_count": 0, "accepted_answer_id": 28756464, "answer_count": 2, "score": 8, "last_activity_date": 1566968574, "creation_date": 1424968257, "last_edit_date": 1515856168, "question_id": 28747694, "link": "https://stackoverflow.com/questions/28747694/how-do-i-convert-a-chrono-datetimeutc-instance-to-datetimelocal", "title": "How do I convert a chrono `DateTime&lt;UTC&gt;` instance to `DateTime&lt;Local&gt;`?", "body": "<p>My goal is to convert <code>utc</code> into <code>loc</code>:</p>\n\n<pre><code>use chrono::{Local, UTC, TimeZone};\n\nlet utc = chrono::UTC::now();\nlet loc = chrono::Local::now();\n\nprintln!(\"{:?}\", utc);\nprintln!(\"{:?}\", loc);\n\nprintln!(\"{:?}\", utc.with_timezone(&amp;Local));\nprintln!(\"{:?}\", Local.from_utc_datetime(&amp;utc.naive_local()));\n</code></pre>\n\n<p>... which produced the following output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>2015-02-26T16:22:27.873593Z\n2015-02-26T17:22:27.873663+01:00\n2015-02-26T15:22:27.873593+00:00\n2015-02-26T15:22:27.873593+00:00\n</code></pre>\n\n<p>The <code>loc</code> time shown in the second row is what I want to see when converting <code>utc</code>.</p>\n\n<p>How do I properly convert a <code>DateTime&lt;UTC&gt;</code> instance to <code>DateTime&lt;Local&gt;</code>?</p>\n\n<h3>Meta</h3>\n\n<p>I am using <a href=\"https://crates.io/crates/chrono/0.2.2\" rel=\"noreferrer\">chrono 0.2.2</a>. In the <a href=\"https://lifthrasiir.github.io/rust-chrono/chrono/datetime/struct.DateTime.html#method.from_utc\" rel=\"noreferrer\"><code>DateTime.from_utc</code></a> method it's even telling me I should use the <code>TimeZone</code> trait. However, I am missing something.</p>\n"}, {"tags": ["rust", "sailfish-os", "mer"], "answers": [{"tags": [], "owner": {"reputation": 23, "user_id": 2907828, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fea7fba2ae4a49beb4be7cb438bb8028?s=128&d=identicon&r=PG&f=1", "display_name": "EricW", "link": "https://stackoverflow.com/users/2907828/ericw"}, "is_accepted": false, "score": 0, "last_activity_date": 1427833500, "creation_date": 1427833500, "answer_id": 29377889, "question_id": 28737318, "link": "https://stackoverflow.com/questions/28737318/how-do-i-know-what-languages-compile-to-armv7hl/29377889#29377889", "title": "How do I know what languages compile to ARMv7hl?", "body": "<p>If you don't want to use <em>any</em> QML and C++, <a href=\"https://together.jolla.com/question/78324/questionpure-c-sailfish-documentation/\" rel=\"nofollow\">the answer is probably no</a>. But if you fancy writing some kind of wrapper like <a href=\"http://thp.io/2011/pyotherside/\" rel=\"nofollow\">pyotherside</a>, it seems doable.</p>\n"}, {"tags": [], "owner": {"reputation": 1370, "user_id": 2797066, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/n7U7h.jpg?s=128&g=1", "display_name": "enedil", "link": "https://stackoverflow.com/users/2797066/enedil"}, "is_accepted": false, "score": 1, "last_activity_date": 1439394001, "creation_date": 1439394001, "answer_id": 31969812, "question_id": 28737318, "link": "https://stackoverflow.com/questions/28737318/how-do-i-know-what-languages-compile-to-armv7hl/31969812#31969812", "title": "How do I know what languages compile to ARMv7hl?", "body": "<p>You can't really avoid Qt, but with C++ that trick is possible.\nThere was a thread on <a href=\"https://lists.sailfishos.org/pipermail/devel/2015-August/006389.html\" rel=\"nofollow\">Devel mailing list</a>. All you need is to find good Qt5 bindings for Rust. <a href=\"https://github.com/cyndis/qmlrs\" rel=\"nofollow\">These</a> look promising.</p>\n"}], "owner": {"reputation": 1177, "user_id": 1192492, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c7d7ea7ed7cdf742ebc2c9445b9928c3?s=128&d=identicon&r=PG", "display_name": "Shawn McCool", "link": "https://stackoverflow.com/users/1192492/shawn-mccool"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 211, "favorite_count": 0, "answer_count": 2, "score": 1, "last_activity_date": 1439394001, "creation_date": 1424938316, "last_edit_date": 1424966408, "question_id": 28737318, "link": "https://stackoverflow.com/questions/28737318/how-do-i-know-what-languages-compile-to-armv7hl", "title": "How do I know what languages compile to ARMv7hl?", "body": "<p>I would like to program SailfishOS applications. But, I would prefer not to use QML, C++, or Python.</p>\n\n<p>I'd like to use something like Rust. But, I'm not sure how to know what options I really have.</p>\n\n<p>What kind of things should I know to be able to determine what compilers will create binaries for ARMv7hl?</p>\n"}]