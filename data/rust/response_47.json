[{"tags": ["rust", "compiler-optimization", "integer-overflow"], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1449128650, "post_id": 34054833, "comment_id": 55874229, "body": "Note: to get a good speed-up but still have meaningful stacktraces you might want to use <code>opt-level = 1</code> only. Each function body will get optimized, however in general there is no (or little) inlining. Of course it&#39;s not as fast..."}, {"owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "edited": false, "score": 0, "creation_date": 1486556779, "post_id": 34054833, "comment_id": 71394778, "body": "For inlining there&#39;s <code>#[inline(never)]</code> and <code>#[inline(always)]</code> (of course use carefully only if you notice compiler doesn&#39;t do a good job, because overuse of these attributes can backfire)."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 19, "last_activity_date": 1539796352, "last_edit_date": 1539796352, "creation_date": 1449097660, "answer_id": 34054833, "question_id": 34054669, "link": "https://stackoverflow.com/questions/34054669/how-to-compile-and-run-an-optimized-rust-program-with-overflow-checking-enabled/34054833#34054833", "title": "How to compile and run an optimized Rust program with overflow checking enabled", "body": "<p>You can compile in release mode <a href=\"https://doc.rust-lang.org/cargo/reference/manifest.html#the-profile-sections\" rel=\"noreferrer\">with overflow checks enabled</a>:</p>\n\n<pre><code>[profile.release]\noverflow-checks = true\n</code></pre>\n\n<p>This passes <code>-C overflow-checks=true</code> to the compiler. In earlier versions of Rust, <code>overflow-checks</code> was part of the <code>debug-assertions</code> switch, so you may need to use that in certain cases.</p>\n\n<p>Other times, the easiest thing might be to <a href=\"https://stackoverflow.com/q/29818084/155423\">build in test or dev mode with optimizations</a>:</p>\n\n<pre><code>[profile.dev]\nopt-level = 3\n</code></pre>\n"}], "owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 8934, "favorite_count": 4, "accepted_answer_id": 34054833, "answer_count": 1, "score": 14, "last_activity_date": 1539796352, "creation_date": 1449096856, "question_id": 34054669, "link": "https://stackoverflow.com/questions/34054669/how-to-compile-and-run-an-optimized-rust-program-with-overflow-checking-enabled", "title": "How to compile and run an optimized Rust program with overflow checking enabled", "body": "<p>I'm writing a program that's quite compute heavy, and it's annoyingly slow to run in debug mode.</p>\n\n<p>My program is also plagued by integer overflows, because I'm reading data from <code>u8</code> arrays and <code>u8</code> type spreads to unexpected places via type inference, and Rust prefers to overflow rather than to promote integers to larger types.</p>\n\n<p>Building in release mode disables overflow checks:</p>\n\n<pre><code>cargo run --release\n</code></pre>\n\n<p>How can I build Rust executable with optimizations <em>and</em> runtime overflow checks enabled as well?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1449082496, "post_id": 34050460, "comment_id": 55855881, "body": "Note that the Rust style is 4-space indents. Additionally, the type annotation isn&#39;t needed, spaces come after commas, and you usually would see <code>for x in &amp;collection</code>. <a href=\"http://is.gd/NnGUDw\" rel=\"nofollow noreferrer\">Example</a>."}, {"owner": {"reputation": 20458, "user_id": 122087, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/431c64e3e3fd0c892ad2a7e4150cf63e?s=128&d=identicon&r=PG", "display_name": "Paul A Jungwirth", "link": "https://stackoverflow.com/users/122087/paul-a-jungwirth"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1449082790, "post_id": 34050460, "comment_id": 55856068, "body": "Can you explain why <code>for row in &amp;grid</code> lets me leave off the <code>.iter()</code>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1449083485, "post_id": 34050460, "comment_id": 55856445, "body": "Make sure you are familiar with <a href=\"http://doc.rust-lang.org/stable/book\" rel=\"nofollow noreferrer\"><i>The Rust Programming Language</i></a> sections on <a href=\"http://doc.rust-lang.org/stable/book/iterators.html\" rel=\"nofollow noreferrer\">iterators</a> and <a href=\"http://doc.rust-lang.org/stable/book/loops.html\" rel=\"nofollow noreferrer\">loops</a>. The missing piece is that the <code>for</code> loop expression must adhere to <a href=\"https://doc.rust-lang.org/std/iter/trait.IntoIterator.html\" rel=\"nofollow noreferrer\"><code>IntoIterator</code></a>, which is automatically called. You&#39;ll note that <code>IntoIterator</code> is implemented for references to arrays and slices."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1449083897, "post_id": 34050460, "comment_id": 55856690, "body": "FWIW, I&#39;ve <a href=\"https://github.com/rust-lang/rust/pull/30169\" rel=\"nofollow noreferrer\">submitted a PR</a> that clarifies that <code>IntoIterator</code> is used for <code>for</code> loops."}, {"owner": {"reputation": 20458, "user_id": 122087, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/431c64e3e3fd0c892ad2a7e4150cf63e?s=128&d=identicon&r=PG", "display_name": "Paul A Jungwirth", "link": "https://stackoverflow.com/users/122087/paul-a-jungwirth"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1449084318, "post_id": 34050460, "comment_id": 55856952, "body": "So you&#39;re saying a trait can be implemented for a reference to <code>T</code> but not for <code>T</code> itself? That is a new concept to me. Really?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1449084504, "post_id": 34050460, "comment_id": 55857063, "body": "<i>a trait can be implemented for a reference to <code>T</code> but not for <code>T</code> itself</i> \u2014 yup, they are different types."}], "answers": [{"comments": [{"owner": {"reputation": 20458, "user_id": 122087, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/431c64e3e3fd0c892ad2a7e4150cf63e?s=128&d=identicon&r=PG", "display_name": "Paul A Jungwirth", "link": "https://stackoverflow.com/users/122087/paul-a-jungwirth"}, "edited": false, "score": 0, "creation_date": 1449082258, "post_id": 34050528, "comment_id": 55855747, "body": "Thanks! So a follow-up question: I can&#39;t say <code>for row in grid</code> (no <code>.iter()</code>), but I <i>can</i> say <code>for &amp;v in row</code>. Why is <code>.iter()</code> optional in the second line but not the first?"}, {"owner": {"reputation": 182, "user_id": 865226, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/df65dfe294994d2280a742d961eb0abc?s=128&d=identicon&r=PG", "display_name": "SeanTater", "link": "https://stackoverflow.com/users/865226/seantater"}, "reply_to_user": {"reputation": 20458, "user_id": 122087, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/431c64e3e3fd0c892ad2a7e4150cf63e?s=128&d=identicon&r=PG", "display_name": "Paul A Jungwirth", "link": "https://stackoverflow.com/users/122087/paul-a-jungwirth"}, "edited": false, "score": 0, "creation_date": 1449082953, "post_id": 34050528, "comment_id": 55856163, "body": "Because you can Copy an array rather than making a reference to it, as long as the contents of the array also implement Copy. i32 implements Copy, but Optional doesn&#39;t, so you can copy an [i32; 2] without any extra syntax but not an [Optional&lt;i32&gt;; 2]."}, {"owner": {"reputation": 20458, "user_id": 122087, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/431c64e3e3fd0c892ad2a7e4150cf63e?s=128&d=identicon&r=PG", "display_name": "Paul A Jungwirth", "link": "https://stackoverflow.com/users/122087/paul-a-jungwirth"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1449083769, "post_id": 34050528, "comment_id": 55856618, "body": "I&#39;m talking about the inner loop in the original code (with <code>Optional</code>). Why is <code>.iter()</code> required for the outer loop but not the inner loop? I think @Shepmaster answered it above by saying that <code>IntoIterator</code> is implemented by references to arrays but not arrays. Does that sound right?"}], "tags": [], "owner": {"reputation": 182, "user_id": 865226, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/df65dfe294994d2280a742d961eb0abc?s=128&d=identicon&r=PG", "display_name": "SeanTater", "link": "https://stackoverflow.com/users/865226/seantater"}, "is_accepted": false, "score": 1, "last_activity_date": 1449082856, "last_edit_date": 1449082856, "creation_date": 1449081743, "answer_id": 34050528, "question_id": 34050460, "link": "https://stackoverflow.com/questions/34050460/type-mismatch-while-looping-over-a-2d-array/34050528#34050528", "title": "&quot;type mismatch&quot; while looping over a 2D array", "body": "<p>Simple. You're just missing that <code>v</code> is a reference.</p>\n\n<pre><code>pub fn main() {\n  let grid: [[Option&lt;i32&gt;;2];2] = [\n    [Some(1),Some(2)],\n    [None,Some(4)],\n  ];\n\n  for row in grid.iter() {\n    for &amp;v in row.iter() {\n      match v {\n        Some(x) =&gt; print!(\"{}\", x),\n        None =&gt; print!(\" \"),\n      }\n    }\n    print!(\"\\n\");\n  }\n\n  // Keep in mind that i32 is Copy (but Option is not)\n  // and an Array of X is Copy if X is Copy,\n  // So there is no need to borrow v here, as follows:\n  let grid2: [[i32;2];2] = [\n    [1,2],\n    [0,4],\n  ];\n\n  for row in grid2.iter() {\n    for v in row.iter() {\n      print!(\"{}\", v);\n    }\n    print!(\"\\n\");\n  }\n}\n</code></pre>\n"}], "owner": {"reputation": 20458, "user_id": 122087, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/431c64e3e3fd0c892ad2a7e4150cf63e?s=128&d=identicon&r=PG", "display_name": "Paul A Jungwirth", "link": "https://stackoverflow.com/users/122087/paul-a-jungwirth"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 350, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1449082856, "creation_date": 1449081452, "last_edit_date": 1449081818, "question_id": 34050460, "link": "https://stackoverflow.com/questions/34050460/type-mismatch-while-looping-over-a-2d-array", "title": "&quot;type mismatch&quot; while looping over a 2D array", "body": "<p>I can't get this code to compile:</p>\n\n<pre><code>fn main() {\n  let grid: [[Option&lt;i32&gt;;2];2] = [\n    [Some(1),Some(2)],\n    [None,Some(4)],\n  ];\n\n  for row in grid.iter() {\n    for v in row.iter() {\n      match v {\n        Some(x) =&gt; print!(\"{}\", x),\n        None =&gt; print!(\" \"),\n      }\n    }\n    print!(\"\\n\");\n  }\n}\n</code></pre>\n\n<p>I get this error message</p>\n\n<pre><code>   Compiling array-2d v0.1.0 (file:///Users/paul/src/test/rust/array-2d)\nsrc/main.rs:8:5: 13:6 error: type mismatch resolving `&lt;core::slice::Iter&lt;'_, core::option::Option&lt;i32&gt;&gt; as core::iter::Iterator&gt;::Item == core::option::Option&lt;_&gt;`:\n expected &amp;-ptr,\n    found enum `core::option::Option` [E0271]\nsrc/main.rs: 8     for v in row.iter() {\nsrc/main.rs: 9       match v {\nsrc/main.rs:10         Some(x) =&gt; print!(\"{}\", x),\nsrc/main.rs:11         None =&gt; print!(\" \"),\nsrc/main.rs:12       }\nsrc/main.rs:13     }\nsrc/main.rs:8:5: 13:6 note: in this expansion of for loop expansion\nsrc/main.rs:7:3: 15:4 note: in this expansion of for loop expansion\nsrc/main.rs:8:5: 13:6 help: run `rustc --explain E0271` to see a detailed explanation\nerror: aborting due to previous error\nCould not compile `array-2d`.\n</code></pre>\n\n<p>Can someone interpret that to tell me what I'm doing wrong?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1449067662, "post_id": 34038129, "comment_id": 55845709, "body": "I assume there is some reason you don&#39;t want to go ahead and add a reference to the <code>Parent</code> in the <code>Child</code>?"}], "answers": [{"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 11, "last_activity_date": 1449048657, "last_edit_date": 1449048657, "creation_date": 1449045780, "answer_id": 34038233, "question_id": 34038129, "link": "https://stackoverflow.com/questions/34038129/how-do-i-enforce-parent-child-struct-lifetime/34038233#34038233", "title": "How do I enforce parent-child struct lifetime?", "body": "<p>You had the right idea with <code>PhantomData</code>. You add a lifetime parameter and a <code>PhantomData</code> field to <code>Child</code>. The <code>PhantomData</code> generic parameter is what you want to emulate in the struct. In this case you want <code>Child</code> to act as if it contains a <code>&amp;Parent</code>.</p>\n\n<pre><code>struct Child&lt;'a&gt; {\n    parent: PhantomData&lt;&amp;'a Parent&gt;,\n}\n\nimpl Parent {\n    fn get_child&lt;'a&gt;(&amp;'a self) -&gt; Child&lt;'a&gt; {\n        Child {\n            parent: PhantomData,\n        }\n    }\n}\n</code></pre>\n\n<p>You also need to modify the <code>test</code> function to have a generic argument, otherwise you don't see your requested <code>doesn't live long enough</code> error,\nbecause the <code>Child needs a lifetime</code> error occurs first.</p>\n\n<pre><code>fn test&lt;'a&gt;() -&gt; Child&lt;'a&gt; {\n    let p = Parent;\n    p.get_child()\n}\n</code></pre>\n\n<p><a href=\"http://is.gd/LiWGl6\" rel=\"noreferrer\">Try it out in the Playground</a></p>\n"}], "owner": {"reputation": 149, "user_id": 5443000, "user_type": "registered", "profile_image": "https://graph.facebook.com/10207825667257183/picture?type=large", "display_name": "Peter Bertok", "link": "https://stackoverflow.com/users/5443000/peter-bertok"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1013, "favorite_count": 0, "answer_count": 1, "score": 9, "last_activity_date": 1449048657, "creation_date": 1449045443, "question_id": 34038129, "link": "https://stackoverflow.com/questions/34038129/how-do-i-enforce-parent-child-struct-lifetime", "title": "How do I enforce parent-child struct lifetime?", "body": "<p>I'm writing wrapper code for an external C library, and I'm trying to convince the Rust compiler to enforce external lifetime restrictions that are not reflected in the Rust code itself. For example, one type of \"opaque handle\" can return a child handle that is only valid for the lifetime of the parent handle.</p>\n\n<p>I experimented with <code>std::marker::PhantomData</code>, but I couldn't convince the compiler to return the expected error.</p>\n\n<p>In other words, I'd like the following block of code fail to compile:</p>\n\n<pre><code>struct Parent;\n\nstruct Child; // Note that there is no reference to the parent struct\n\nimpl Parent {\n    fn get_child( &amp;self ) -&gt; Child {\n        Child\n    }\n}\n\n// I'd like this to complain with \"p does not live long enough\"\nfn test() -&gt; Child {\n    let p = Parent;\n    p.get_child()\n}\n\nfn main() {\n    let c = test();\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1449066908, "post_id": 34036521, "comment_id": 55845133, "body": "I note that you are using a hand-unrolled version of a dot product, which looks awfully similar to the version <a href=\"https://users.rust-lang.org/t/how-to-zip-two-slices-efficiently/2048/12?u=shepmaster\" rel=\"nofollow noreferrer\">posted by Bluss in the Rust user&#39;s forum</a>. I&#39;d suggest talking to Bluss and creating a crate to maintain this shared code."}, {"owner": {"reputation": 756, "user_id": 3466751, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/ed487cce2c6293f15343927fd615119e?s=128&d=identicon&r=PG&f=1", "display_name": "user124784", "link": "https://stackoverflow.com/users/3466751/user124784"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1449071970, "post_id": 34036521, "comment_id": 55849072, "body": "It is indeed the same. I&#39;m perfectly happy to create a crate and people can look at my source code too - however right now I don&#39;t think I&#39;m bringing anything new or special to the table :)"}], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 8, "last_activity_date": 1449039455, "creation_date": 1449039455, "answer_id": 34036680, "question_id": 34036521, "link": "https://stackoverflow.com/questions/34036521/explicitly-stating-the-type-of-vector-length-for-references/34036680#34036680", "title": "Explicitly stating the type of vector length for references", "body": "<p>The problem as stated <em>does not exist</em>.  The error the above code produces is:</p>\n\n<pre><code>&lt;anon&gt;:3:16: 3:18 error: mismatched types:\n expected `collections::vec::Vec&lt;f32&gt;`,\n    found `&amp;_`\n(expected struct `collections::vec::Vec`,\n    found &amp;-ptr) [E0308]\n&lt;anon&gt;:3     pub fn dot(&amp;u: Vec&lt;f32&gt;, &amp;v: Vec&lt;f32&gt;) -&gt; f32 {\n                        ^~\n&lt;anon&gt;:3:16: 3:18 help: see the detailed explanation for E0308\n</code></pre>\n\n<p><code>&amp;u: Vec&lt;f32&gt;</code> cannot work; this says that <code>u</code> should be bound to the contents of a pointer... which is impossible given the parameter is of type <code>Vec&lt;f32&gt;</code>.  I suspect you <em>meant</em> to say <code>u: &amp;Vec&lt;f32&gt;</code>.</p>\n\n<p>But you shouldn't do that, <em>either</em>.  There's effectively no reason to <em>ever</em> pass a <code>&amp;Vec&lt;_&gt;</code> when you can just pass a <code>&amp;[_]</code> instead, which will work for more types.  So what you <em>really</em> want is <code>u: &amp;[f32]</code>.</p>\n\n<p>Once you fix both arguments, the code compiles with no errors.</p>\n"}], "owner": {"reputation": 756, "user_id": 3466751, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/ed487cce2c6293f15343927fd615119e?s=128&d=identicon&r=PG&f=1", "display_name": "user124784", "link": "https://stackoverflow.com/users/3466751/user124784"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 206, "favorite_count": 0, "accepted_answer_id": 34036680, "answer_count": 1, "score": 1, "last_activity_date": 1449066694, "creation_date": 1449038787, "last_edit_date": 1449066694, "question_id": 34036521, "link": "https://stackoverflow.com/questions/34036521/explicitly-stating-the-type-of-vector-length-for-references", "title": "Explicitly stating the type of vector length for references", "body": "<p>I'm trying to get my head around Rust and I'm being faced with a probably obvious error.</p>\n\n<p>I have found a method which computes the dot product of two vectors and I want to implement it so that I do not need to consume the vectors to do so. Right now it looks like the following:</p>\n\n<pre><code>pub fn dot(&amp;u: Vec&lt;f32&gt;, &amp;v: Vec&lt;f32&gt;) -&gt; f32 {\n        let len = cmp::min(u.len(), v.len());\n        let mut xs = &amp;u[..len];\n        let mut ys = &amp;v[..len];\n\n        let mut s = 0.;\n        let (mut p0, mut p1, mut p2, mut p3, mut p4, mut p5, mut p6, mut p7) =\n            (0., 0., 0., 0., 0., 0., 0., 0.);\n\n        while xs.len() &gt;= 8 {\n            p0 += xs[0] * ys[0];\n            p1 += xs[1] * ys[1];\n            p2 += xs[2] * ys[2];\n            p3 += xs[3] * ys[3];\n            p4 += xs[4] * ys[4];\n            p5 += xs[5] * ys[5];\n            p6 += xs[6] * ys[6];\n            p7 += xs[7] * ys[7];\n\n            xs = &amp;xs[8..];\n            ys = &amp;ys[8..];\n        }\n        s += p0 + p4;\n        s += p1 + p5;\n        s += p2 + p6;\n        s += p3 + p7;\n\n        for i in 0..xs.len() {\n            s += xs[i] * ys[i];\n        }\n        s\n    }\n</code></pre>\n\n<p>The problem occurs in the first line of the function body: the compiler cannot infer the type of <code>u.len()</code> as <code>u</code> is a reference.</p>\n\n<p>How can I work around this? Is it possible to explicitly state the type?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1449006892, "post_id": 34030455, "comment_id": 55817287, "body": "Thank you for producing an MCVE!"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1449006867, "creation_date": 1449006867, "answer_id": 34030919, "question_id": 34030455, "link": "https://stackoverflow.com/questions/34030455/how-can-i-use-a-type-with-a-lifetime-as-the-error-argument-to-ioerrornew/34030919#34030919", "title": "How can I use a type with a lifetime as the `error` argument to io::Error::new?", "body": "<p>Let's look at the signature of <a href=\"http://doc.rust-lang.org/std/io/struct.Error.html#method.new\" rel=\"nofollow\"><code>io::Error::new</code></a>:</p>\n\n<pre><code>fn new&lt;E&gt;(kind: ErrorKind, error: E) -&gt; Error \n    where E: Into&lt;Box&lt;Error + Send + Sync&gt;&gt;\n</code></pre>\n\n<p>This states that <code>error</code> can be any type, so long as that type implements the trait <code>Into&lt;Box&lt;Error + Send + Sync&gt;&gt;</code>. That trait means that the type can be converted into a <em>boxed trait object</em>. The trait object itself must implement the traits <code>Error</code>, <code>Send</code> and <code>Sync</code>. What's non-obvious is that by default, trait objects also have a <code>'static</code> lifetime bound (there's rationale for this, but it does seem to trip people up).</p>\n\n<p>Let's try to do that conversion ourselves:</p>\n\n<pre><code>fn bad_str_err(desc: &amp;str) -&gt; io::Error {\n    let err = BadString::new(desc);\n    let foo: Box&lt;Error + Send + Sync + 'static&gt; = err.into();\n}\n</code></pre>\n\n<p>And we get the same error \u2014 \"cannot infer an appropriate lifetime for automatic coercion due to conflicting requirements\". So our problem lies in the ability to convert to this trait object.</p>\n\n<p><a href=\"http://doc.rust-lang.org/std/marker/trait.Send.html\" rel=\"nofollow\"><code>Send</code></a> and <a href=\"http://doc.rust-lang.org/std/marker/trait.Sync.html\" rel=\"nofollow\"><code>Sync</code></a> are two key traits that help guide the compiler to know which types are safe to send / share between threads. In order for something to be safely shared across threads, it cannot \"disappear\" while another thread has it. This is a type of bug that Rust helps prevent at compile time.</p>\n\n<p>In this case, you are tying to use a <em>string slice</em> (<code>&amp;str</code>), but that slice doesn't own the underlying memory, it just references it. As soon as that memory goes out of scope, any references need to become invalid. This is another thing that Rust prevents at compile time.</p>\n\n<p>In this case, the simplest thing to do is to not use a reference:</p>\n\n<pre><code>use std::error::Error;\nuse std::{fmt, io};\n\n#[derive(Debug)]\npub struct BadString {\n    desc: String,\n}\n\nimpl BadString {\n    pub fn new(desc: &amp;str) -&gt; BadString {\n        BadString { desc: desc.into() }\n    }\n}\n\nimpl Error for BadString {\n    fn description(&amp;self) -&gt; &amp;str { &amp;self.desc }\n}\n\nimpl fmt::Display for BadString {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        f.write_str(self.description())\n    }\n}\n\nfn bad_str_err(desc: &amp;str) -&gt; io::Error {\n    let err = BadString::new(desc);\n    io::Error::new(io::ErrorKind::Other, err)\n}\n\nfn main() {}\n</code></pre>\n\n<p>A <code>String</code> owns the underlying memory, so it can safely be transferred across thread boundaries and doesn't need to worry about any other object being freed accidentally.</p>\n"}], "owner": {"reputation": 2106, "user_id": 916384, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/38055799f271a72b7d50d91c322ce561?s=128&d=identicon&r=PG", "display_name": "franza", "link": "https://stackoverflow.com/users/916384/franza"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 52, "favorite_count": 0, "accepted_answer_id": 34030919, "answer_count": 1, "score": 3, "last_activity_date": 1449006867, "creation_date": 1449005049, "last_edit_date": 1449005845, "question_id": 34030455, "link": "https://stackoverflow.com/questions/34030455/how-can-i-use-a-type-with-a-lifetime-as-the-error-argument-to-ioerrornew", "title": "How can I use a type with a lifetime as the `error` argument to io::Error::new?", "body": "<p>I am trying to create a custom error type to use in my Rust project by implementing <code>std::error::Error</code>. I've also created a small shortcut function to create <code>std::io::Error</code>. Unfortunately, I'm stuck with lifetimes so I'm asking some help:</p>\n\n<pre><code>use std::error::Error;\nuse std::fmt;\nuse std::io;\n\n#[derive(Debug)]\npub struct BadString&lt;'a&gt; {\n    desc: &amp;'a str,\n}\n\nimpl&lt;'a&gt; BadString&lt;'a&gt; {\n    pub fn new(desc: &amp;str) -&gt; BadString {\n        BadString{ desc: desc }\n    }\n}\n\nimpl&lt;'a&gt; Error for BadString&lt;'a&gt; {\n    fn description(&amp;self) -&gt; &amp;str { &amp;self.desc }\n}\n\nimpl&lt;'a&gt; fmt::Display for BadString&lt;'a&gt; {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        f.write_str(self.description())\n    }\n}\n\nfn bad_str_err(desc: &amp;str) -&gt; io::Error {\n    let err = BadString::new(desc);\n    io::Error::new(io::ErrorKind::Other, err)\n}\n\nfn main() {\n\n}\n</code></pre>\n\n<p><a href=\"http://is.gd/oVDdml\" rel=\"nofollow\">playground</a></p>\n\n<p>This reports the error:</p>\n\n<pre><code>&lt;anon&gt;:27:30: 27:34 error: cannot infer an appropriate lifetime for automatic coercion due to conflicting requirements\n&lt;anon&gt;:27     let err = BadString::new(desc);\n                                       ^~~~\n&lt;anon&gt;:28:5: 28:46 note: first, the lifetime cannot outlive the call at 28:4...\n&lt;anon&gt;:28     io::Error::new(io::ErrorKind::Other, err)\n              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n&lt;anon&gt;:28:42: 28:45 note: ...so that argument is valid for the call\n&lt;anon&gt;:28     io::Error::new(io::ErrorKind::Other, err)\n                                                   ^~~\n&lt;anon&gt;:27:30: 27:34 note: but, the lifetime must be valid for the expression at 27:29...\n&lt;anon&gt;:27     let err = BadString::new(desc);\n                                       ^~~~\n&lt;anon&gt;:27:30: 27:34 note: ...so that auto-reference is valid at the time of borrow\n&lt;anon&gt;:27     let err = BadString::new(desc);\n                                       ^~~~\nerror: aborting due to previous error\nplaypen: application terminated with error code 101\n</code></pre>\n\n<p>I am not sure how to fix that so it will compile.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "edited": false, "score": 2, "creation_date": 1449000222, "post_id": 34028324, "comment_id": 55813510, "body": "A nicer (or at least different) workaround is to define a newtype around the element type and implement your desired <code>Ord</code> instance on that."}, {"owner": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "reply_to_user": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "edited": false, "score": 0, "creation_date": 1449000698, "post_id": 34028324, "comment_id": 55813790, "body": "True, although then you have your code littered with <code>map</code>s to and from the custom type (which of course compile away to nothing).  Still, decent idea.  I wonder if it would be possible to create a wrapper type for that pattern, where you pass the custom type constructor the source type and the comparator."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1449036064, "post_id": 34028324, "comment_id": 55826973, "body": "@thirtythreeforty, what do you mean by an O(log n) operation becoming O(n log n)? (I can&#39;t see an operation that is O(log n) other than, say, a single tree operation, but nothing that involves building a list will be O(log n).)"}, {"owner": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "reply_to_user": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1449036158, "post_id": 34028324, "comment_id": 55827016, "body": "@huon oh, that&#39;s true. Duh.  Well that makes me feel a little better about the way I&#39;m doing it now."}], "answers": [{"comments": [{"owner": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "edited": false, "score": 2, "creation_date": 1449072360, "post_id": 34037318, "comment_id": 55849355, "body": "Great!  Now that you mention the various traits, this might even end up being cleaner from a type perspective than C++&#39;s approach."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 14, "last_activity_date": 1526054623, "last_edit_date": 1526054623, "creation_date": 1449042296, "answer_id": 34037318, "question_id": 34028324, "link": "https://stackoverflow.com/questions/34028324/how-do-i-use-a-custom-comparator-function-with-btreeset/34037318#34037318", "title": "How do I use a custom comparator function with BTreeSet?", "body": "<p>Custom comparators currently do not exist in the Rust standard collections. The idiomatic way to solve the issue is to define a <a href=\"https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#using-the-newtype-pattern-for-type-safety-and-abstraction\" rel=\"noreferrer\"><em>newtype</em></a>:</p>\n\n<pre><code>struct Wrapper(Wrapped);\n</code></pre>\n\n<p>You can then define a custom <a href=\"https://doc.rust-lang.org/std/cmp/trait.Ord.html\" rel=\"noreferrer\"><code>Ord</code></a> implementation for <code>Wrapper</code> with exactly the semantics you want.</p>\n\n<p>Furthermore, since you have a newtype, you can also easily implement other traits to facilitate conversion:</p>\n\n<ul>\n<li><a href=\"https://doc.rust-lang.org/std/convert/trait.From.html\" rel=\"noreferrer\"><code>convert::From</code></a> can be implemented, giving you <a href=\"https://doc.rust-lang.org/std/convert/trait.Into.html\" rel=\"noreferrer\"><code>convert::Into</code></a> for free</li>\n<li><a href=\"https://doc.rust-lang.org/std/ops/trait.Deref.html\" rel=\"noreferrer\"><code>ops::Deref&lt;Target = Wrapped&gt;</code></a> can be implemented, reducing the need for mapping due to auto-deref</li>\n</ul>\n\n<p>Note that accessing the wrapped entity is syntactically lightweight as it's just two characters: <code>.0</code>.</p>\n"}], "owner": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1697, "favorite_count": 1, "accepted_answer_id": 34037318, "answer_count": 1, "score": 15, "last_activity_date": 1526054623, "creation_date": 1448997458, "last_edit_date": 1526052713, "question_id": 34028324, "link": "https://stackoverflow.com/questions/34028324/how-do-i-use-a-custom-comparator-function-with-btreeset", "title": "How do I use a custom comparator function with BTreeSet?", "body": "<p>In C++, it is possible to customize the code <a href=\"http://en.cppreference.com/w/cpp/container/set\" rel=\"noreferrer\"><code>std::set</code></a> uses to sort its arguments.  By default it uses <a href=\"http://en.cppreference.com/w/cpp/utility/functional/less\" rel=\"noreferrer\"><code>std::less</code></a>, but that can be changed with the <a href=\"http://en.cppreference.com/w/cpp/concept/Compare\" rel=\"noreferrer\"><code>Compare</code></a> template parameter.</p>\n\n<p>Rust's <a href=\"https://doc.rust-lang.org/std/collections/struct.BTreeSet.html\" rel=\"noreferrer\"><code>BTreeSet</code></a> uses the <a href=\"https://doc.rust-lang.org/std/cmp/trait.Ord.html\" rel=\"noreferrer\"><code>Ord</code></a> trait to sort the type.  I don't know of a way to override this behavior -- it's built into the type constraint of the type stored by the container.</p>\n\n<p>However, it often makes sense to build a list of items that are sorted by some locally-useful metric that nevertheless is not the best way to <em>always</em> compare the items by.  Or, suppose I would like to sort items of a <code>use</code>d type; in this case, it's impossible to implement <code>Ord</code> myself for the type, even if I want to.</p>\n\n<p>The workaround is of course to build a plain old <code>Vec</code> of the items and <code>sort</code> it afterward.  But in my opinion, this is not as clean as automatically ordering them on insertion.</p>\n\n<p>Is there a way to use alternative comparators with Rust's container types?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 400, "user_id": 716769, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/448f9df88102c83808f2cf401ecc1b51?s=128&d=identicon&r=PG", "display_name": "Bogdan Mart", "link": "https://stackoverflow.com/users/716769/bogdan-mart"}, "edited": false, "score": 0, "creation_date": 1585316336, "post_id": 34023369, "comment_id": 107723535, "body": "@BogdanMart this code compiles fine on Windows 10 with Rust 1.42.0."}, {"owner": {"reputation": 400, "user_id": 716769, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/448f9df88102c83808f2cf401ecc1b51?s=128&d=identicon&r=PG", "display_name": "Bogdan Mart", "link": "https://stackoverflow.com/users/716769/bogdan-mart"}, "edited": false, "score": 0, "creation_date": 1585434410, "post_id": 34023369, "comment_id": 107759133, "body": "I&#39;m really sorry for this. I was bit confused after struggling with the compiler at that time. And stack overflow don&#39;t allow me to retract my downvote when I realized that  I was wrong. But I&#39;ve asked my friend to upvote to compensate for my failure. Sorry again."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 9, "last_activity_date": 1528209961, "last_edit_date": 1528209961, "creation_date": 1448981810, "answer_id": 34023369, "question_id": 34023250, "link": "https://stackoverflow.com/questions/34023250/whats-the-correct-way-to-convert-from-str-to-osstr/34023369#34023369", "title": "What&#39;s the correct way to convert from &amp;str to OsStr?", "body": "<p>Use <a href=\"http://doc.rust-lang.org/std/ffi/struct.OsStr.html#method.new\" rel=\"nofollow noreferrer\"><code>OsStr::new</code></a>:</p>\n\n<pre><code>use std::ffi::OsStr;\n\nfn main() {\n    let a_string: &amp;str = \"Hello world\";\n    let an_os_str: &amp;OsStr = OsStr::new(a_string);\n    println!(\"{:?}\", an_os_str);\n}\n</code></pre>\n\n<p>Note that the explicit type specification is not necessary, I'm just including it for educational purposes.</p>\n\n<p>In your specific case:</p>\n\n<pre><code>let options: Vec&lt;_&gt; = optstr.split(\",\").map(OsStr::new).collect();\nfuse::mount(&amp;options)\n</code></pre>\n\n<p>It's actually rather rare to need to do this explicitly, however. Most of the time, functions accept a type that implements <code>AsRef&lt;OsStr&gt;</code>. This would allow you to pass more types without having to think about it. You may want to consider asking the maintainer or submitting a patch to the library to make it more generic.</p>\n"}], "owner": {"reputation": 17165, "user_id": 320220, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/kqywB.jpg?s=128&g=1", "display_name": "beerbajay", "link": "https://stackoverflow.com/users/320220/beerbajay"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2889, "favorite_count": 0, "accepted_answer_id": 34023369, "answer_count": 1, "score": 3, "last_activity_date": 1528209961, "creation_date": 1448981501, "last_edit_date": 1528209768, "question_id": 34023250, "link": "https://stackoverflow.com/questions/34023250/whats-the-correct-way-to-convert-from-str-to-osstr", "title": "What&#39;s the correct way to convert from &amp;str to OsStr?", "body": "<p>I'm working with <a href=\"https://github.com/zargony/rust-fuse\" rel=\"nofollow noreferrer\">rust-fuse</a>, which takes mount options as a <code>&amp;[&amp;std::ffi::os_str::OsStr]</code>. It appears that I should be splitting my incoming comma-separated options string, which I'm doing like so:</p>\n\n<pre><code>mod fuse {\n    use std::ffi::OsStr;\n\n    pub fn mount(options: &amp;[&amp;OsStr]) {}\n}\n\nfn example(optstr: &amp;str) {\n    let mut options: &amp;[&amp;str] = &amp;[];\n    if optstr != \"\" {\n        options = optstr.split(\",\").collect::&lt;Vec&lt;_&gt;&gt;().as_slice();\n    }\n    fuse::mount(options)\n}\n</code></pre>\n\n<p>Which gives the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:12:17\n   |\n12 |     fuse::mount(options)\n   |                 ^^^^^^^ expected struct `std::ffi::OsStr`, found str\n   |\n   = note: expected type `&amp;[&amp;std::ffi::OsStr]`\n              found type `&amp;[&amp;str]`\n</code></pre>\n\n<p>I was under the impression that all <code>&amp;str</code>s were also <code>OsStr</code>s, but I'm new to Rust, so I guess that's wrong. </p>\n"}, {"tags": ["rust", "metaprogramming", "monads"], "answers": [{"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 6, "last_activity_date": 1448972922, "creation_date": 1448972922, "answer_id": 34020463, "question_id": 34018234, "link": "https://stackoverflow.com/questions/34018234/is-there-a-way-to-convince-rust-that-a-particular-associated-type-is-the-same-as/34020463#34020463", "title": "Is there a way to convince Rust that a particular associated type is the same as a concrete type?", "body": "<p>This is most likely a bug (either <a href=\"https://github.com/rust-lang/rust/issues/28828\" rel=\"noreferrer\">this one</a> or <a href=\"https://github.com/rust-lang/rust/issues/28895\" rel=\"noreferrer\">that one</a>, I'm not sure). Until it's fixed, I can only think of doing some custom unsafe trickery. Here's a transmute function that does the size equality checks at runtime.</p>\n\n<pre><code>unsafe fn runtime_transmute&lt;T, U&gt;(t: T) -&gt; U {\n    assert_eq!(std::mem::size_of::&lt;T&gt;(), std::mem::size_of::&lt;U&gt;());\n    std::ptr::read(&amp;t as *const _ as *const _)\n}\n</code></pre>\n\n<p>now you can replace your <code>None</code> value with</p>\n\n<pre><code>unsafe { runtime_transmute(None::&lt;T&gt;) }\n</code></pre>\n"}], "owner": {"reputation": 1392, "user_id": 241272, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/bd8e5e584cacee7ca12424d19a5a1b0c?s=128&d=identicon&r=PG", "display_name": "Steve", "link": "https://stackoverflow.com/users/241272/steve"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 320, "favorite_count": 0, "accepted_answer_id": 34020463, "answer_count": 1, "score": 5, "last_activity_date": 1448972922, "creation_date": 1448966114, "question_id": 34018234, "link": "https://stackoverflow.com/questions/34018234/is-there-a-way-to-convince-rust-that-a-particular-associated-type-is-the-same-as", "title": "Is there a way to convince Rust that a particular associated type is the same as a concrete type?", "body": "<p>Given the following traits and implementations:</p>\n\n<pre><code>trait Wrapper&lt;Type&gt; {\n    type Inner : Wrapped&lt;Type&gt;;\n    fn bind&lt;B, F&gt;(self, f: F) -&gt; &lt;B as Wrapped&lt;Type&gt;&gt;::Outer\n        where B: Wrapped&lt;Type&gt;, F: Fn(Self::Inner) -&gt; &lt;B as Wrapped&lt;Type&gt;&gt;::Outer;\n}\n\ntrait Wrapped&lt;Type&gt; {\n    type Outer : Wrapper&lt;Type&gt;;\n}\n\nstruct Opt;\n\nimpl&lt;T&gt; Wrapped&lt;Opt&gt; for T {\n    type Outer = Option&lt;T&gt;;\n}\n\nimpl&lt;T&gt; Wrapper&lt;Opt&gt; for Option&lt;T&gt; {\n    type Inner = T;\n    fn bind&lt;B, F&gt;(self, f: F) -&gt; &lt;B as Wrapped&lt;Opt&gt;&gt;::Outer\n        where B: Wrapped&lt;Opt&gt;, F: Fn(Self::Inner) -&gt; &lt;B as Wrapped&lt;Opt&gt;&gt;::Outer {\n        match self {\n            Some(a) =&gt; f(a),\n            None =&gt; None,  // *** fails to compile\n        }\n    }\n}\n</code></pre>\n\n<p>It's obvious to a human that the type <code>&lt;B as Wrapped&lt;Opt&gt;&gt;::Outer</code> must always be <code>Option&lt;B&gt;</code>, but <code>rustc</code> can't seem to figure this out:</p>\n\n<pre><code>src/main.rs:47:21: 47:25 error: mismatched types:\n expected `&lt;B as Wrapped&lt;Opt&gt;&gt;::Outer`,\n    found `core::option::Option&lt;_&gt;`\n(expected associated type,\n    found enum `core::option::Option`) [E0308]\nsrc/main.rs:47             None =&gt; None,\n                                   ^~~~\n</code></pre>\n\n<p>Is there any way to convince it that this is safe?  I'd even settle for an <code>unsafe</code> solution, but <code>mem::transmute</code> is also not allowed since it can't prove that the types are the same size and aligned (even though there's only one real type involved and not even any newtype wrappers that could mess up alignment).</p>\n"}, {"tags": ["rust", "borrow-checker"], "comments": [{"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "edited": false, "score": 0, "creation_date": 1448917143, "post_id": 34007692, "comment_id": 55771680, "body": "Do you need <code>tmp</code> outside of the if-block? If you don&#39;t, then you could make sure that the borrow ends before re-assigning <code>file</code>."}, {"owner": {"reputation": 109, "user_id": 5377817, "user_type": "registered", "accept_rate": 80, "profile_image": "https://lh4.googleusercontent.com/--tH3CFcFKpo/AAAAAAAAAAI/AAAAAAAACKU/lFVjvmgCTqs/photo.jpg?sz=128", "display_name": "Tenzin Rigden", "link": "https://stackoverflow.com/users/5377817/tenzin-rigden"}, "reply_to_user": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "edited": false, "score": 0, "creation_date": 1448981466, "post_id": 34007692, "comment_id": 55801363, "body": "I do. The idea is that I am writing data in the loop and the if block is to change the output file. The if block is meant for me to determine if I should change <code>file</code>."}], "answers": [{"comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1448965158, "post_id": 34017508, "comment_id": 55791076, "body": "Here&#39;s some info on possible non-lexical scopes: <a href=\"https://github.com/rust-lang/rfcs/issues/811\" rel=\"nofollow noreferrer\">github.com/rust-lang/rfcs/issues/811</a>"}], "tags": [], "owner": {"reputation": 38714, "user_id": 45668, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/d4288118e4836464de401d53b60466dd?s=128&d=identicon&r=PG", "display_name": "Malcolm", "link": "https://stackoverflow.com/users/45668/malcolm"}, "is_accepted": false, "score": 7, "last_activity_date": 1448963987, "creation_date": 1448963987, "answer_id": 34017508, "question_id": 34007692, "link": "https://stackoverflow.com/questions/34007692/cannot-move-out-of-variable-because-it-is-borrowed-when-rotating-variables/34017508#34017508", "title": "&quot;cannot move out of variable because it is borrowed&quot; when rotating variables", "body": "<p>As <a href=\"https://doc.rust-lang.org/std/mem/fn.drop.html\">the <code>std::mem::drop</code> documentation</a> says, </p>\n\n<blockquote>\n  <p>While this does call the argument's implementation of <code>Drop</code>, it will not release any borrows, as borrows are based on lexical scope.</p>\n</blockquote>\n\n<p>So even if you call <code>drop</code>, <code>file</code> will remain borrowed nonetheless.</p>\n"}, {"tags": [], "owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "is_accepted": false, "score": 3, "last_activity_date": 1449078075, "last_edit_date": 1449078075, "creation_date": 1449002853, "answer_id": 34029822, "question_id": 34007692, "link": "https://stackoverflow.com/questions/34007692/cannot-move-out-of-variable-because-it-is-borrowed-when-rotating-variables/34029822#34029822", "title": "&quot;cannot move out of variable because it is borrowed&quot; when rotating variables", "body": "<p>Dropping <code>tmp</code> does not \"release the borrow\" of <code>file</code> because borrowing is lexically scoped. It's \"active\" as long as the program execution is within the lexical scope that contains <code>tmp</code> even if you drop it. What you intended to do might be possible in the future if/once \"non-lexical scopes\" are supported. Until then, you can make it work with <code>RefCell</code>:</p>\n\n<pre><code>use std::cell::RefCell;\nuse std::io::{ self, Write };\n\n/// wraps a reference to a RefCell&lt;W&gt;\nstruct RefCellWriteRef&lt;'a, W: 'a&gt;(&amp;'a RefCell&lt;W&gt;);\n\n/// implement Write for when W is Write\nimpl&lt;'a, W: Write + 'a&gt; Write for RefCellWriteRef&lt;'a, W&gt; {\n    fn write(&amp;mut self, buf: &amp;[u8]) -&gt; io::Result&lt;usize&gt; {\n        let mut w = self.0.borrow_mut();\n        w.write(buf)\n    }\n    fn flush(&amp;mut self) -&gt; io::Result&lt;()&gt; {\n        let mut w = self.0.borrow_mut();\n        w.flush()\n    }\n}\n\nfn main() {\n    let file: RefCell&lt;Vec&lt;u8&gt;&gt; = RefCell::new(Vec::new());\n    // use RefCellWriteRef(&amp;file) instead of &amp;mut file\n    let mut tmp = RefCellWriteRef(&amp;file); \n    for iter in 0..10 {\n        if iter == 5 {\n            drop(tmp);\n            file.borrow_mut().clear(); // like opening a new file\n            tmp = RefCellWriteRef(&amp;file);\n        }\n        tmp.write(b\"foo\").unwrap();\n    }\n    drop(tmp);\n    println!(\"{}\", file.borrow().len()); // should print 15\n}\n</code></pre>\n\n<p>The trick here is that given a shared reference to a <code>RefCell&lt;T&gt;</code> you can (eventually) get a <code>&amp;mut T</code> via <code>borrow_mut()</code>. The compile-time borrow checker is pleased because we only use a shared reference on the surface and it's OK to share <code>file</code> like that. Mutable aliasing is avoided by checking at runtime whether the internal <code>T</code> has already been mutably borrowed.</p>\n"}], "owner": {"reputation": 109, "user_id": 5377817, "user_type": "registered", "accept_rate": 80, "profile_image": "https://lh4.googleusercontent.com/--tH3CFcFKpo/AAAAAAAAAAI/AAAAAAAACKU/lFVjvmgCTqs/photo.jpg?sz=128", "display_name": "Tenzin Rigden", "link": "https://stackoverflow.com/users/5377817/tenzin-rigden"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 782, "favorite_count": 0, "answer_count": 2, "score": 6, "last_activity_date": 1458058200, "creation_date": 1448916387, "last_edit_date": 1458058200, "question_id": 34007692, "link": "https://stackoverflow.com/questions/34007692/cannot-move-out-of-variable-because-it-is-borrowed-when-rotating-variables", "title": "&quot;cannot move out of variable because it is borrowed&quot; when rotating variables", "body": "<p>I am writing a program that writes to a file and rotates the file it's writing to every now and then. When I check to rotate the file, I can't seem to change the file since it is borrowed by my struct. Even if I <code>drop</code> the instance of the struct, I can't seem to regain ownership of the file to rename it.\nHere is my <a href=\"https://play.rust-lang.org/?gist=fdb0eaf06e7e4f67c15e&amp;version=stable\" rel=\"nofollow\">example</a>:</p>\n\n<pre><code>use std::fs::File;\nuse std::io::{Write};\nuse std::mem::{drop};\n\npub struct FileStruct&lt;W: Write&gt; {\n    pub writer: Option&lt;W&gt;,\n}\n\nimpl &lt;W: Write&gt; FileStruct&lt;W&gt; {\n    pub fn new(writer: W) -&gt; FileStruct&lt;W&gt; {\n        FileStruct {\n            writer: Some(writer),\n        }\n    }\n}\n\nfn main() {\n    let mut file = File::create(\"tmp.txt\").unwrap();\n    let mut tmp = FileStruct::new(&amp;mut file);\n    loop {\n        if true { //will be time based if check\n            drop(tmp);\n            drop(file);\n            file = File::create(\"tmp2.txt\").unwrap();\n            tmp = FileStruct::new(&amp;mut file);\n        }\n        // write to file\n    }\n}\n</code></pre>\n\n<p>I know I can get this to work by moving the file creation into the <code>new</code> function call of <code>FileStruct</code> instead of having an intermediate variable, <code>file</code>, but I would like to know why this method where I forcibly drop all the variables where all the variables references should be returned doesn't work.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 5885, "user_id": 1036017, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d979bbbad7e4d9533f5d592dda0a150d?s=128&d=identicon&r=PG", "display_name": "RajV", "link": "https://stackoverflow.com/users/1036017/rajv"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1448898483, "post_id": 34002147, "comment_id": 55760597, "body": "Hi, I saw that answer before posting. It is the same question. But the answer is more of a work around. Incidentally &quot;It can not be done right now in Rust&quot; will be a good answer to these questions."}, {"owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "edited": false, "score": 0, "creation_date": 1448906258, "post_id": 34002147, "comment_id": 55765562, "body": "Hi @RajV, what you&#39;re trying to do is reuse code through inheritance. Rust (and the community) has decided that this is generally not a good idea. The answer you saw is not a &quot;work around&quot; that&#39;s the idiomatic way to do this. You&#39;ll probably find this thread (<a href=\"https://users.rust-lang.org/t/oop-how-to-override/1980/4\" rel=\"nofollow noreferrer\">users.rust-lang.org/t/oop-how-to-override/1980/4</a>) helpful as well as the linked wikipedia article on composition over inheritance."}, {"owner": {"reputation": 373, "user_id": 361640, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a26c2ab786845a33302f62df06125e9e?s=128&d=identicon&r=PG", "display_name": "nielsle", "link": "https://stackoverflow.com/users/361640/nielsle"}, "edited": false, "score": 0, "creation_date": 1448906400, "post_id": 34002147, "comment_id": 55765639, "body": "If you want a workaround then it might be prettier to add two separate methods to the trait. <code>pub trait MyTrait { fn do_it_default(&amp;self) { ....}  fn do_it(&amp;self){self.do_it_default() }}</code>"}, {"owner": {"reputation": 5885, "user_id": 1036017, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d979bbbad7e4d9533f5d592dda0a150d?s=128&d=identicon&r=PG", "display_name": "RajV", "link": "https://stackoverflow.com/users/1036017/rajv"}, "reply_to_user": {"reputation": 373, "user_id": 361640, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a26c2ab786845a33302f62df06125e9e?s=128&d=identicon&r=PG", "display_name": "nielsle", "link": "https://stackoverflow.com/users/361640/nielsle"}, "edited": false, "score": 0, "creation_date": 1448912843, "post_id": 34002147, "comment_id": 55769257, "body": "@nielsle yeah, that&#39;s the approach I finally went with."}, {"owner": {"reputation": 5885, "user_id": 1036017, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d979bbbad7e4d9533f5d592dda0a150d?s=128&d=identicon&r=PG", "display_name": "RajV", "link": "https://stackoverflow.com/users/1036017/rajv"}, "reply_to_user": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "edited": false, "score": 0, "creation_date": 1448912857, "post_id": 34002147, "comment_id": 55769267, "body": "Hi @Wesley, as I understand things, inheritance via composition applies to struct inheritance where data/state reuse is the goal. Reuse of trait methods is a slightly different topic. I have seen discussion (RFC 1210) about making it easier to reuse a default method. <a href=\"http://stackoverflow.com/a/31462293/1036017\">stackoverflow.com/a/31462293/1036017</a>"}, {"owner": {"reputation": 1053, "user_id": 4247851, "user_type": "registered", "accept_rate": 40, "profile_image": "https://i.stack.imgur.com/W4hFQ.png?s=128&g=1", "display_name": "Shanavas M", "link": "https://stackoverflow.com/users/4247851/shanavas-m"}, "edited": false, "score": 0, "creation_date": 1558852501, "post_id": 34002147, "comment_id": 99232178, "body": "another nice approach <a href=\"https://stackoverflow.com/a/56311216/4247851\">stackoverflow.com/a/56311216/4247851</a>"}], "owner": {"reputation": 5885, "user_id": 1036017, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d979bbbad7e4d9533f5d592dda0a150d?s=128&d=identicon&r=PG", "display_name": "RajV", "link": "https://stackoverflow.com/users/1036017/rajv"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 577, "favorite_count": 0, "closed_date": 1448899735, "answer_count": 0, "score": 2, "last_activity_date": 1448897503, "creation_date": 1448897503, "question_id": 34002147, "link": "https://stackoverflow.com/questions/34002147/how-to-call-default-trait-method", "closed_reason": "Duplicate", "title": "How to call default trait method?", "body": "<p>How can a <code>struct</code> implement a trait method but also call the default version of that method?</p>\n\n<pre><code>pub trait MyTrait {\n    fn do_it(&amp;self) {\n        println!(\"I am doing it the default way.\");\n    }\n}\n\npub struct MyStruct;\n\nimpl MyTrait for MyStruct {\n    fn do_it(&amp;self) {\n        println!(\"Doing it my way.\");\n        //Call default method\n        self.MyTrait::do_it(); //Not worky\n    }\n}\n\nfn main() {\n    let m = MyStruct;\n\n    m.do_it();\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1448895798, "post_id": 34001546, "comment_id": 55758888, "body": "<i>without having to assign a type to T</i> \u2014 Why don&#39;t you want to assign a concrete type to <code>T</code>?"}, {"owner": {"reputation": 377, "user_id": 2336635, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/cbfc14fbc9cc55e700e3635609edd45e?s=128&d=identicon&r=PG", "display_name": "Wim V", "link": "https://stackoverflow.com/users/2336635/wim-v"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1448896235, "post_id": 34001546, "comment_id": 55759141, "body": "Well I meant in the case of F1 I don&#39;t need the type T so it seems pointless to do so. If there is no way to do this I can live with assigning a type to T in all cases."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1448896237, "post_id": 34001546, "comment_id": 55759143, "body": "You can specify a default value for <code>T</code>, but it seems to be buggy with inference: <a href=\"http://is.gd/kX0awA\" rel=\"nofollow noreferrer\">This</a> doesn&#39;t work, but <a href=\"http://is.gd/7WU1qN\" rel=\"nofollow noreferrer\">this</a> does."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1448896611, "post_id": 34001546, "comment_id": 55759372, "body": "Ah, that&#39;s just a not yet stable feature: <a href=\"https://github.com/rust-lang/rust/issues/29101\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/29101</a>, works now: <a href=\"http://is.gd/GIiHHP\" rel=\"nofollow noreferrer\">is.gd/GIiHHP</a>"}, {"owner": {"reputation": 377, "user_id": 2336635, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/cbfc14fbc9cc55e700e3635609edd45e?s=128&d=identicon&r=PG", "display_name": "Wim V", "link": "https://stackoverflow.com/users/2336635/wim-v"}, "edited": false, "score": 0, "creation_date": 1448897090, "post_id": 34001546, "comment_id": 55759680, "body": "Thanks for the answer but default is not what I was looking for. I followed Shepmaster adivce and solved it like this <a href=\"http://is.gd/lz8TRr\" rel=\"nofollow noreferrer\">is.gd/lz8TRr</a>"}], "answers": [{"comments": [{"owner": {"reputation": 642, "user_id": 2626490, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/7c9fda048420a5139f7ed90cc03e708a?s=128&d=identicon&r=PG", "display_name": "mpiccolo", "link": "https://stackoverflow.com/users/2626490/mpiccolo"}, "edited": false, "score": 1, "creation_date": 1451371454, "post_id": 34001711, "comment_id": 56753288, "body": "Did not know you could type annotate None.  This just saved me a big headache!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1448897553, "last_edit_date": 1448897553, "creation_date": 1448896145, "answer_id": 34001711, "question_id": 34001546, "link": "https://stackoverflow.com/questions/34001546/unable-to-infer-enough-type-information-about-type-annotations-or-generic-par/34001711#34001711", "title": "Unable to infer enough type information about _; type annotations or generic parameter binding required", "body": "<p><em>Enum variants</em> do not have their own type. There is only the type of the enum itself. Check out this example:</p>\n\n<pre><code>enum Thing&lt;T&gt; {\n    One,\n    Two(T),\n}\n\nfn main() {\n    let a = Thing::One;\n    let b = Thing::Two(true);\n}\n</code></pre>\n\n<p>The type of <code>b</code> is a <code>Thing&lt;bool&gt;</code>. The type has no mention of <code>Two</code>. The same thing needs to happen for <code>a</code>, but there's nothing that the compiler can use to infer the value of <code>T</code>, so you have to provide it explicitly:</p>\n\n<pre><code>let a = Thing::One::&lt;u8&gt;;\n</code></pre>\n\n<p>And an even-smaller example is to use an enum that is built-in and very familiar \u2014 <code>Option</code>:</p>\n\n<pre><code>fn main() {\n    // let a = None;\n    let a = None::&lt;u8&gt;;\n    let b = Some(true);\n}\n</code></pre>\n\n<blockquote>\n  <p>I don't need the type T so it seems pointless to do so.</p>\n</blockquote>\n\n<p>Let's dive in a bit deeper. An enum takes up the space of the max of all the variants (plus a wee bit to tell them apart):</p>\n\n<pre><code>enum Foo {\n    One(u64),\n    Two(u8),\n}\n\nfn main() {\n    println!(\"{}\", std::mem::size_of::&lt;u64&gt;());\n    // 8\n    println!(\"{}\", std::mem::size_of::&lt;u8&gt;());\n    // 1\n    println!(\"{}\", std::mem::size_of::&lt;Foo&gt;());\n    // 16\n}\n</code></pre>\n\n<p>Also, all variants of the same enum take up the same amount of space:</p>\n\n<pre><code>fn main() {\n    let a = Some(true);\n    let b = None::&lt;bool&gt;;\n\n    println!(\"{}\", std::mem::size_of_val(&amp;a));\n    // 2\n    println!(\"{}\", std::mem::size_of_val(&amp;b));\n    // 2\n}\n</code></pre>\n\n<p>This helps lead us to the realization that <strong>not all <code>None</code>s are the same</strong>:</p>\n\n<pre><code>fn main() {\n    let a = None::&lt;u8&gt;;\n    println!(\"{}\", std::mem::size_of_val(&amp;a));\n    // 2\n\n    let b = None::&lt;u64&gt;;\n    println!(\"{}\", std::mem::size_of_val(&amp;b));\n    // 16\n}\n</code></pre>\n\n<p>Thus it <em>is</em> important to know exactly what kind of <code>None</code> you have. This extends to every kind of enum and variant.</p>\n"}], "owner": {"reputation": 377, "user_id": 2336635, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/cbfc14fbc9cc55e700e3635609edd45e?s=128&d=identicon&r=PG", "display_name": "Wim V", "link": "https://stackoverflow.com/users/2336635/wim-v"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 700, "favorite_count": 0, "accepted_answer_id": 34001711, "answer_count": 1, "score": 4, "last_activity_date": 1448897553, "creation_date": 1448895666, "last_edit_date": 1448896361, "question_id": 34001546, "link": "https://stackoverflow.com/questions/34001546/unable-to-infer-enough-type-information-about-type-annotations-or-generic-par", "title": "Unable to infer enough type information about _; type annotations or generic parameter binding required", "body": "<pre><code>trait Bar {\n    fn bar(&amp;self);\n}\nenum Foo&lt;T: Bar&gt; {\n    F1,\n    F2(T)\n}\nstruct Something;\nimpl Bar for Something {\n    fn bar(&amp;self) {\n    }\n}\nfn main() {\n    let a = Foo::F2(Something); //&lt;== this works fine.\n    let b = Foo::F1; //&lt;== gives a compilation error.\n}\n</code></pre>\n\n<p>Compilation error E0282: Unable to infer enough type information about <code>_</code>; type annotations or generic parameter binding required.</p>\n\n<p>I understand why the compiler is complaining but can't seem to figure out how to do this without having to assign a type to T in the F1 case.</p>\n"}, {"tags": ["rust", "mio"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1448894487, "post_id": 34001114, "comment_id": 55757990, "body": "Welcome to Stack Overflow! It is expected that you <a href=\"http://stackoverflow.com/help/how-to-ask\">show that you tried something</a>, whether it is a (<b>minimal</b>) snippet of code that doesn&#39;t work or links to research you have done. SO isn&#39;t a service where people write code for you."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 2, "creation_date": 1448894945, "post_id": 34001114, "comment_id": 55758290, "body": "Related <a href=\"https://users.rust-lang.org/t/mio-can-anyone-explain-me-mio-with-diagram-please/3822\" rel=\"nofollow noreferrer\">post</a> from you on users.rust-lang.org. Have you checked out the examples in the mio-repository? There&#39;s the <a href=\"https://github.com/carllerche/mio/blob/master/test/test_echo_server.rs\" rel=\"nofollow noreferrer\">echo server example</a>. It&#39;s self-contained and can probably be used as a starting point."}, {"owner": {"reputation": 373, "user_id": 361640, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a26c2ab786845a33302f62df06125e9e?s=128&d=identicon&r=PG", "display_name": "nielsle", "link": "https://stackoverflow.com/users/361640/nielsle"}, "edited": false, "score": 0, "creation_date": 1449335277, "post_id": 34001114, "comment_id": 55966427, "body": "AFAICS, The echo server example is event based with all events originating at the client. The server can only send messages in response to a client message. I don&#39;t think this model works well for an IRC server or a computer game, so it doesn&#39;t probably cover Harrys example.   Is it possible to separate a net::TcpStream in to a Sender and a Receiver that can be connected to mio separately?  Or do you need two TcpConnections? (If someone has an answer, please write it here. I would also like to know.)"}, {"owner": {"reputation": 373, "user_id": 361640, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a26c2ab786845a33302f62df06125e9e?s=128&d=identicon&r=PG", "display_name": "nielsle", "link": "https://stackoverflow.com/users/361640/nielsle"}, "edited": false, "score": 0, "creation_date": 1449404571, "post_id": 34001114, "comment_id": 55983641, "body": "Reply to self. mio-websockets seems to be aimed at the usecase. See this example from rust-chat.  <a href=\"https://github.com/nbaksalyar/rust-chat/blob/master/src/main.rs\" rel=\"nofollow noreferrer\">github.com/nbaksalyar/rust-chat/blob/master/src/main.rs</a>"}, {"owner": {"reputation": 43, "user_id": 5588583, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b5224a46f1a91323f9d40524f12d96f4?s=128&d=identicon&r=PG&f=1", "display_name": "M Harry", "link": "https://stackoverflow.com/users/5588583/m-harry"}, "edited": false, "score": 0, "creation_date": 1449666867, "post_id": 34001114, "comment_id": 56105623, "body": "i have tried to refer that echo server example. but i get problem when i tried to access event of SERVER B (TcpStream)."}], "owner": {"reputation": 43, "user_id": 5588583, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b5224a46f1a91323f9d40524f12d96f4?s=128&d=identicon&r=PG&f=1", "display_name": "M Harry", "link": "https://stackoverflow.com/users/5588583/m-harry"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 432, "favorite_count": 1, "answer_count": 0, "score": 0, "last_activity_date": 1448894606, "creation_date": 1448894297, "last_edit_date": 1448894606, "question_id": 34001114, "link": "https://stackoverflow.com/questions/34001114/how-can-i-create-a-tcpsocket-and-tcpstream-in-the-same-mio-event-loop", "title": "How can I create a TcpSocket and TcpStream in the same MIO event loop?", "body": "<p>Can I create the same server as <code>Server</code> or <code>Client</code> with different sockets?</p>\n\n<p>Like <code>A -&gt;  B -&gt;  C</code></p>\n\n<p>Here, A is a client of server B, B is a server to A but a client of server C.</p>\n\n<p>How can I register both of these in the same <a href=\"https://github.com/carllerche/mio\" rel=\"nofollow\">MIO</a> <a href=\"https://wycats.gitbooks.io/mio-book/content/the_event_loop/README.html\" rel=\"nofollow\">event_loop</a>?</p>\n"}, {"tags": ["macros", "rust"], "comments": [{"owner": {"reputation": 7166, "user_id": 479905, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/4f1b1eb37c5c280e2db98abbaace9f86?s=128&d=identicon&r=PG", "display_name": "Arne", "link": "https://stackoverflow.com/users/479905/arne"}, "edited": false, "score": 1, "creation_date": 1450718195, "post_id": 33999341, "comment_id": 56543343, "body": "generated documentation has no informational value, because it is generated. make a section in your documentation that describes the pattern, but don&#39;t bloat your documentation."}, {"owner": {"reputation": 35031, "user_id": 1889329, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/57bec3f0b9c5879cdd9d9fa2e8629318?s=128&d=identicon&r=PG&f=1", "display_name": "IInspectable", "link": "https://stackoverflow.com/users/1889329/iinspectable"}, "reply_to_user": {"reputation": 7166, "user_id": 479905, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/4f1b1eb37c5c280e2db98abbaace9f86?s=128&d=identicon&r=PG", "display_name": "Arne", "link": "https://stackoverflow.com/users/479905/arne"}, "edited": false, "score": 0, "creation_date": 1591985547, "post_id": 33999341, "comment_id": 110272017, "body": "@arn This is not strictly the case. The comments may be coming from a different source, like a <a href=\"https://docs.microsoft.com/en-us/windows/win32/midl/com-dcom-and-type-libraries\" rel=\"nofollow noreferrer\">COM TypeLib</a>. In other words: They can be authored by humans but still need to be written by a tool."}], "answers": [{"comments": [{"owner": {"reputation": 1884, "user_id": 78264, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/184b96c136e7aa7b05b8e1539f345c70?s=128&d=identicon&r=PG", "display_name": "dnaq", "link": "https://stackoverflow.com/users/78264/dnaq"}, "edited": false, "score": 0, "creation_date": 1448895323, "post_id": 33999625, "comment_id": 55758554, "body": "Thanks. That solves my problem. I knew that doc-comments were translated to attributes, but I didn&#39;t realize that I could match on them in the macro definition."}, {"owner": {"reputation": 756, "user_id": 3662167, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4bbd2ecd016e674470b4de5f1620c88f?s=128&d=identicon&r=PG", "display_name": "Erich Gubler", "link": "https://stackoverflow.com/users/3662167/erich-gubler"}, "edited": false, "score": 0, "creation_date": 1536952935, "post_id": 33999625, "comment_id": 91623452, "body": "The example&#39;s definition link is broken -- can we get it fixed?"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 756, "user_id": 3662167, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4bbd2ecd016e674470b4de5f1620c88f?s=128&d=identicon&r=PG", "display_name": "Erich Gubler", "link": "https://stackoverflow.com/users/3662167/erich-gubler"}, "edited": false, "score": 1, "creation_date": 1537203995, "post_id": 33999625, "comment_id": 91689868, "body": "@ErichGubler fixed"}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 46, "last_activity_date": 1559585886, "last_edit_date": 1559585886, "creation_date": 1448889616, "answer_id": 33999625, "question_id": 33999341, "link": "https://stackoverflow.com/questions/33999341/generating-documentation-in-macros/33999625#33999625", "title": "Generating documentation in macros", "body": "<p>It is possible to capture doc comments in macro invocations. It is not widely-known, but Rust documentation is actually represented as a special kind of attribute on an item. For example:</p>\n\n<pre><code>/// Some documentation comment\npub fn function() {}\n\n// is equivalent to\n\n#[doc=\"Some documentation comment\"]\npub fn function() {}\n</code></pre>\n\n<p>And it <em>is</em> possible to capture attributes in macros. There are already several macros which use this ability, the most used probably being <a href=\"https://docs.rs/bitflags/1.0.4/bitflags/macro.bitflags.html\" rel=\"noreferrer\"><code>bitflags!</code></a>:</p>\n\n<pre><code>macro_rules! bitflags {\n    (\n        $(#[$outer:meta])*\n        pub struct $BitFlags:ident: $T:ty {\n            $(\n                $(#[$inner:ident $($args:tt)*])*\n                const $Flag:ident = $value:expr;\n            )+\n        }\n    ) =&gt; { /* ... */ };\n    // ...\n}\n</code></pre>\n\n<p>Note the <code>$(#[$outer:meta])*</code> and <code>$(#[$inner:meta])*</code> parts of the pattern. These capture all attributes placed before the respective item in the pattern. If you write a doc comment there, it will be converted to the doc attribute and will be passed to rustdoc, as usual.</p>\n\n<p>The following is an example from the <a href=\"https://docs.rs/quick-error/1.2.2/quick_error/\" rel=\"noreferrer\"><code>quick_error</code></a> crate which also uses this approach:</p>\n\n<pre><code>quick_error! {\n    #[derive(Debug)]\n    pub enum SomeError {\n        /// IO Error\n        Io(err: io::Error) {}\n        /// Arbitrary system error\n        Sys(errno: nix::Errno) {}\n    }\n}\n</code></pre>\n\n<p>It does work \u2014 <a href=\"https://docs.rs/ejdb/0.4.0/ejdb/types/enum.Error.html\" rel=\"noreferrer\">here</a> is an example of the structure generated by <code>quick_error</code> macro, and <a href=\"https://docs.rs/ejdb/0.4.0/src/ejdb/types.rs.html#69-109\" rel=\"noreferrer\">here</a> is its definition.</p>\n"}], "owner": {"reputation": 1884, "user_id": 78264, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/184b96c136e7aa7b05b8e1539f345c70?s=128&d=identicon&r=PG", "display_name": "dnaq", "link": "https://stackoverflow.com/users/78264/dnaq"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4971, "favorite_count": 4, "accepted_answer_id": 33999625, "answer_count": 1, "score": 31, "last_activity_date": 1559585886, "creation_date": 1448888654, "last_edit_date": 1448893869, "question_id": 33999341, "link": "https://stackoverflow.com/questions/33999341/generating-documentation-in-macros", "title": "Generating documentation in macros", "body": "<p>I have a couple of macros to reduce boilerplate when defining certain tuple-structs of the form:</p>\n\n<pre><code>macro_rules! new_type (($name:ident, $bytes:expr) =&gt; (\n    pub struct $name(pub [u8; $bytes]);\n    // some common operations on $name\n));\n</code></pre>\n\n<p>However, I would also like to document these new structs. The best thing would be if I could write my documentation right before my macro invocation.</p>\n\n<pre><code>/// A certain type\nnew_type!(CertainType, 42);\n</code></pre>\n\n<p>However, Rust won't generate documentation for <code>CertainType</code> when this happens.</p>\n\n<p>Another (not as flexible) alternative would be to do something like:</p>\n\n<pre><code>macro_rules! new_type (($name:ident, $bytes:expr) =&gt; (\n    /// Some more generic documentation for $name \n    pub struct $name(pub [u8; $bytes]);\n    // some common operations on $name\n));\n</code></pre>\n\n<p>However, when doing that the Rust macro system doesn't expand the token <code>$name</code> in the documentation comment. The only alternative left is to write very generic documentation in the macro, but that would lead to my library being a lot worse documented than it could be.</p>\n\n<p>What are your recommendations for handling this? The best solution for me would be to be able to write specific documentation for each macro invocation, but if that's not possible I would be grateful for hints on how to expand tokens in documentation comments.</p>\n"}, {"tags": ["rust", "borrow-checker"], "comments": [{"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "edited": false, "score": 1, "creation_date": 1448998275, "post_id": 33988960, "comment_id": 55812404, "body": "You might find the multiarray crate useful. It supports 2D arrays and allows you to create column and row views (shared and mutable) which double as iterator."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "reply_to_user": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "edited": false, "score": 0, "creation_date": 1448998361, "post_id": 33988960, "comment_id": 55812462, "body": "Thanks @sellibitze. I&#39;ll check out out, but I&#39;m learning and trying to write these things from scratch for now"}], "answers": [{"comments": [{"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1448837231, "post_id": 33989035, "comment_id": 55733856, "body": "I was intending to remove <code>rows</code> and <code>cols</code>,  and just expose iterators."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1448837454, "post_id": 33989035, "comment_id": 55733920, "body": "If I use <code>self.rows().into_iter()</code> it actually works. I had previously tried this, but couldn&#39;t find a stable supported version of <code>IntoIter</code>, which I have now found in <code>std::vec</code>."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1448837788, "post_id": 33989035, "comment_id": 55734029, "body": "And I see your point. <code>into_iter</code> is only working because of the <code>Copy</code> constraint - which is mainly there because of previous wild stabs in this direction."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 1, "last_activity_date": 1448836934, "creation_date": 1448836934, "answer_id": 33989035, "question_id": 33988960, "link": "https://stackoverflow.com/questions/33988960/borrowed-value-doesnt-live-long-enough-trying-to-expose-iterators-instead-of-c/33989035#33989035", "title": "Borrowed value doesn&#39;t live long enough, trying to expose iterators instead of concrete Vec representations of the data", "body": "<p>Iterators only contain borrowed references to the original data structure; they don't take ownership of it. Therefore, a vector must live longer than an iterator on that vector.</p>\n\n<p><code>rows</code> and <code>cols</code> allocate and return a new <code>Vec</code>. <code>rows_iter</code> and <code>cols_iter</code> are trying to return an iterator on a temporary <code>Vec</code>. This <code>Vec</code> will be deallocated before <code>rows_iter</code> or <code>cols_iter</code> return. That means that an iterator on that <code>Vec</code> must be deallocated before the function returns. However, you're trying to return the iterator from the function, which would make the iterator live longer than the end of the function.</p>\n\n<p>There is simply no way to make <code>rows_iter</code> and <code>cols_iter</code> compile as is. I believe these methods are simply unnecessary, since you already provide the public <code>rows</code> and <code>cols</code> methods.</p>\n"}, {"comments": [{"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1448949941, "post_id": 33993188, "comment_id": 55782900, "body": "You are right about the implementation. My plan was to write something simple that works, then improve it. A custom iterator will probably be better - and might not have the problems that I ran into here."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 2, "last_activity_date": 1448867437, "creation_date": 1448867437, "answer_id": 33993188, "question_id": 33988960, "link": "https://stackoverflow.com/questions/33988960/borrowed-value-doesnt-live-long-enough-trying-to-expose-iterators-instead-of-c/33993188#33993188", "title": "Borrowed value doesn&#39;t live long enough, trying to expose iterators instead of concrete Vec representations of the data", "body": "<p>You can use the method <code>into_iter</code> which returns <code>std::vec::IntoIter</code>. The function <code>iter</code> usually only borrows the data source iterated over. <code>into_iter</code> has ownership of the data source. Thus the vector will live as long as the actual data.</p>\n\n<pre><code>pub fn cols_iter( &amp;self ) -&gt; std::vec::IntoIter&lt;Vec&lt;Item&gt;&gt; {\n    self.cols().intoiter()\n}\n</code></pre>\n\n<p>However, I think that the design of your Grid type could be improved a lot. Always cloning a vector is not a good thing (to name one issue).</p>\n"}], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 515, "favorite_count": 0, "answer_count": 2, "score": 1, "last_activity_date": 1448867437, "creation_date": 1448836441, "last_edit_date": 1448839265, "question_id": 33988960, "link": "https://stackoverflow.com/questions/33988960/borrowed-value-doesnt-live-long-enough-trying-to-expose-iterators-instead-of-c", "title": "Borrowed value doesn&#39;t live long enough, trying to expose iterators instead of concrete Vec representations of the data", "body": "<p>I have a struct representing a grid of data, and accessors for the rows and columns. I'm trying to add accessors for the rows and columns which return iterators instead of Vec.</p>\n\n<pre><code>use std::slice::Iter;\n\n#[derive(Debug)]\npub struct Grid&lt;Item : Copy&gt; {\n    raw : Vec&lt;Vec&lt;Item&gt;&gt;\n}\n\nimpl &lt;Item : Copy&gt; Grid &lt;Item&gt;\n{\n    pub fn new( data: Vec&lt;Vec&lt;Item&gt;&gt; ) -&gt; Grid&lt;Item&gt; {\n        Grid{ raw : data }\n    }\n    pub fn width( &amp;self ) -&gt; usize {\n        self.rows()[0].len()\n    }\n    pub fn height( &amp;self ) -&gt; usize {\n        self.rows().len()\n    }\n    pub fn rows( &amp;self ) -&gt; Vec&lt;Vec&lt;Item&gt;&gt; {\n        self.raw.to_owned()\n    }\n    pub fn cols( &amp;self ) -&gt; Vec&lt;Vec&lt;Item&gt;&gt; {\n        let mut cols = Vec::new();\n        for i in 0..self.height() {\n            let col = self.rows().iter()\n                        .map( |row| row[i] )\n                        .collect::&lt;Vec&lt;Item&gt;&gt;();\n            cols.push(col);\n        }\n        cols\n    }\n\n    pub fn rows_iter( &amp;self ) -&gt; Iter&lt;Vec&lt;Item&gt;&gt; {\n        // LIFETIME ERROR HERE\n        self.rows().iter()\n    }\n\n    pub fn cols_iter( &amp;self ) -&gt; Iter&lt;Vec&lt;Item&gt;&gt; {\n        // LIFETIME ERROR HERE\n        self.cols().iter()\n    }\n}\n</code></pre>\n\n<p>Both functions <code>rows_iter</code> and <code>cols_iter</code> have the same problem: <code>error: borrowed value does not live long enough</code>. I've tried a lot of things, but pared it back to the simplest thing to post here.</p>\n"}, {"tags": ["rust", "immutability", "mutable", "borrowing"], "answers": [{"comments": [{"owner": {"reputation": 49, "user_id": 5106547, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ace690d3cfd76bc43694c6c6b8577cea?s=128&d=identicon&r=PG", "display_name": "WebTogz", "link": "https://stackoverflow.com/users/5106547/webtogz"}, "edited": false, "score": 0, "creation_date": 1448819379, "post_id": 33985272, "comment_id": 55727350, "body": "Thank you! Your solution is exactly what I&#39;m thinking... I&#39;m trying to make an optimized solution to this problem, but with my &quot;level&quot; in Rust, it&#39;s really hard :-/"}, {"owner": {"reputation": 373, "user_id": 361640, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a26c2ab786845a33302f62df06125e9e?s=128&d=identicon&r=PG", "display_name": "nielsle", "link": "https://stackoverflow.com/users/361640/nielsle"}, "edited": false, "score": 0, "creation_date": 1448906919, "post_id": 33985272, "comment_id": 55765934, "body": "In situations like this you often need a specialized collection. I believe that <code>VecDeque</code> can solve the problem, (but I may be wrong)  <a href=\"https://doc.rust-lang.org/std/collections/struct.VecDeque.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/collections/struct.VecDeque.html</a>  Alternatively you can use channels   <a href=\"https://doc.rust-lang.org/std/sync/mpsc/\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/sync/mpsc</a>"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 6, "last_activity_date": 1448815637, "creation_date": 1448815637, "answer_id": 33985272, "question_id": 33985018, "link": "https://stackoverflow.com/questions/33985018/cannot-borrow-x-as-mutable-because-it-is-also-borrowed-as-immutable/33985272#33985272", "title": "Cannot borrow `*x` as mutable because it is also borrowed as immutable", "body": "<p>You're trying to do something fundamentally impossible.</p>\n\n<p>When you call <code>get_pareto_front_offline</code>, you pass a re-borrowing of <code>neighborhood</code> into that function.  This re-borrow <em>must</em> be maintained in order for <code>pareto_front</code> to remain valid.  In other words, as long as <code>pareto_front</code> exists, the compiler will <em>not</em> allow you to access <code>neighborhood</code> in any fashion whatsoever.</p>\n\n<p>This is a good thing, because you then proceed to try and clear our <code>neighborhood</code>, which would almost <em>certainly</em> invalidate <code>pareto_front</code>, likely leading to use-after-free and corrupting your program's state.</p>\n\n<p>It's not clear what it is you're attempting to do; but you <em>cannot</em> do it this way.</p>\n\n<p>As an aside, even if it compiled, that loop would probably never finish running: your termination condition (<code>pareto_front == vec![]</code>) will never be satisfied because you never modify <code>pareto_front</code>; it'll either stop immediately, or run forever.</p>\n\n<p>The simplest way to get out from under borrowing problems is to make copies of things, so that you don't <em>need</em> a long-lived borrow; if <code>get_pareto_front_offline</code> returned a <code>Vec&lt;(Vec&lt;u32&gt;, (u32, u32))&gt;</code> instead, you wouldn't have this issue.  That, or modify to code to not touch <code>neighborhood</code> once you call <code>get_pareto_front_offline</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "is_accepted": false, "score": 3, "last_activity_date": 1449079599, "creation_date": 1449079599, "answer_id": 34049897, "question_id": 33985018, "link": "https://stackoverflow.com/questions/33985018/cannot-borrow-x-as-mutable-because-it-is-also-borrowed-as-immutable/34049897#34049897", "title": "Cannot borrow `*x` as mutable because it is also borrowed as immutable", "body": "<p>In this case the compiler helped you avoid a use-after-free error by not accepting the code. The problem can be reduced to this piece of code:</p>\n\n<pre><code>fn main() {\n    let mut v = vec![0,1,2,3];\n    let r = &amp;v[2];\n    v.push(5);\n    println!(\"{}\", *r); // oops\n}\n</code></pre>\n\n<p>A Vec has a length and a capacity. If length equals capacity it means that there is no space left in the buffer for a new element. In such a case <code>push</code> involves moving all the elements to a new buffer that is big enough to store new data. But this action would invalidate the reference <code>r</code> because <code>r</code> still stores the old and now invalid address of the 3rd vector element. This is exactly the kind of error Rust is trying to prevent with the borrowing rules and the borrow checker.</p>\n\n<p>But if you just add new stuff to the vector, it won't change the order of the elements that were already in there. Maybe you could just replace some references to Vec elements with indices which stay the same regardless of where the Vec elements are stored.</p>\n\n<p>Some aside suggestions: Prefer <code>&amp;[T]</code> over <code>&amp;Vec&lt;T&gt;</code> for function arguments. It's more flexible. Also, <code>pareto_front == vec![]</code> can be replaced with <code>pareto_front.is_empty()</code>.</p>\n"}], "owner": {"reputation": 49, "user_id": 5106547, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ace690d3cfd76bc43694c6c6b8577cea?s=128&d=identicon&r=PG", "display_name": "WebTogz", "link": "https://stackoverflow.com/users/5106547/webtogz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2628, "favorite_count": 1, "answer_count": 2, "score": 4, "last_activity_date": 1449079599, "creation_date": 1448814184, "last_edit_date": 1448894059, "question_id": 33985018, "link": "https://stackoverflow.com/questions/33985018/cannot-borrow-x-as-mutable-because-it-is-also-borrowed-as-immutable", "title": "Cannot borrow `*x` as mutable because it is also borrowed as immutable", "body": "<p>I'm making a Combinatory Optimization project to learn Rust and I've got a problem I cannot resolve myself...</p>\n\n<p>I've got 2 functions :</p>\n\n<pre><code>pub fn get_pareto_front_offline&lt;'a&gt;(scheduling_jobs: &amp;'a Vec&lt;Vec&lt;u32&gt;&gt;, costs_vector: &amp;'a Vec&lt;(u32, u32)&gt;) -&gt; Vec&lt;(&amp;'a Vec&lt;u32&gt;, &amp;'a (u32, u32))&gt; {\n    // ...\n}\n</code></pre>\n\n<p>and</p>\n\n<pre><code>pub fn pareto_approach_offline&lt;'a&gt;(list_of_jobs: &amp;'a mut Vec&lt;Vec&lt;u32&gt;&gt;, neighborhood: &amp;'a mut Vec&lt;Vec&lt;u32&gt;&gt;, costs: &amp;'a Vec&lt;(u32, u32)&gt;) -&gt; Vec&lt;(&amp;'a Vec&lt;u32&gt;, &amp;'a (u32, u32))&gt; {\n    let pareto_front = get_pareto_front_offline(neighborhood, costs);\n\n    loop {\n        if pareto_front == vec![] {\n            break;\n        }\n\n        neighborhood.clear();\n\n        for front in pareto_front.iter() {\n            neighborhood.push((front.0).clone());\n        }\n    }\n\n    pareto_front\n}\n</code></pre>\n\n<p>I've got a problem because the compiler tells me:</p>\n\n<pre><code>cannot borrow '*neighborhood' as mutable because it is also borrowed as immutableat line 15 col 9\ncannot borrow '*neighborhood' as mutable because it is also borrowed as immutableat line 19 col 13\n</code></pre>\n"}, {"tags": ["generics", "rust", "traits"], "answers": [{"tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": true, "score": 5, "last_activity_date": 1527774166, "last_edit_date": 1527774166, "creation_date": 1448751463, "answer_id": 33977420, "question_id": 33976810, "link": "https://stackoverflow.com/questions/33976810/how-can-i-express-a-trait-bound-on-a-type-parameter-for-another-generic-types-t/33977420#33977420", "title": "How can I express a trait bound on a type parameter for another generic type&#39;s trait bound?", "body": "<p>This was confusing initially because I didn't understand which <code>Err</code> it was referring to - and thought it was the error type parameter for <code>Result</code>. Once I figured out that <code>FromStr</code> has its own <code>Err</code> type parameter, I just had to work out how to express that constraint. And here it is:</p>\n\n<pre><code>fn parse_row&lt;T&gt;(text: String) -&gt; Result&lt;Vec&lt;T&gt;, String&gt;\nwhere\n    T: Copy + Debug + FromStr,\n    T::Err: Display,\n{\n    text.split(\" \")\n        .map(|s| s.to_owned()\n            .parse::&lt;T&gt;()\n            .map_err(|e| e.to_string())\n        )\n        .collect()\n}\n</code></pre>\n"}], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1611, "favorite_count": 0, "accepted_answer_id": 33977420, "answer_count": 1, "score": 5, "last_activity_date": 1527774166, "creation_date": 1448747349, "last_edit_date": 1527774146, "question_id": 33976810, "link": "https://stackoverflow.com/questions/33976810/how-can-i-express-a-trait-bound-on-a-type-parameter-for-another-generic-types-t", "title": "How can I express a trait bound on a type parameter for another generic type&#39;s trait bound?", "body": "<p>I'm trying to improve some existing code I to make it more generic, by adding a type variable in place of a concrete type.</p>\n\n<p>The original code looked like this:</p>\n\n<pre><code>fn parse_row(text: String) -&gt; Result&lt;Vec&lt;u32&gt;, String&gt; {\n    text.split(\" \")\n        .map(|s| s.to_owned()\n            .parse::&lt;u32&gt;()\n            .map_err(|e| e.to_string())\n        )\n        .collect()\n}\n</code></pre>\n\n<p>And here is the generic version:</p>\n\n<pre><code>fn parse_row&lt;T&gt;(text: String) -&gt; Result&lt;Vec&lt;T&gt;, String&gt;\nwhere\n    T: Copy + Debug + FromStr + Display,\n{\n    text.split(\" \")\n        .map(|s| s.to_owned()\n            .parse::&lt;T&gt;()\n            .map_err(|e| e.to_string())\n        )\n        .collect()\n}\n</code></pre>\n\n<p>The error I get is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0599]: no method named `to_string` found for type `&lt;T as std::str::FromStr&gt;::Err` in the current scope\n --&gt; src/main.rs:7:28\n  |\n7 |             .map_err(|e| e.to_string())\n  |                            ^^^^^^^^^\n  |\n  = note: the method `to_string` exists but the following trait bounds were not satisfied:\n          `&lt;T as std::str::FromStr&gt;::Err : std::string::ToString`\n</code></pre>\n\n<p><code>&lt;T as core::str::FromStr&gt;::Err</code> is referring to the type parameter associated with <code>T</code>'s <code>FromStr</code> implementation, but how can I express that this type \u2014 that I can't actually know \u2014 has the <code>Display</code> trait?</p>\n"}, {"tags": ["reference", "rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1448890643, "post_id": 33971087, "comment_id": 55755372, "body": "Congratulations on managing the port, beating OCaml on functional style code mean that you did something right!"}, {"owner": {"reputation": 7711, "user_id": 382050, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/5d52382ed0c80cf1f28aad49f8b270ec?s=128&d=identicon&r=PG&f=1", "display_name": "ttsiodras", "link": "https://stackoverflow.com/users/382050/ttsiodras"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1448959736, "post_id": 33971087, "comment_id": 55787632, "body": "@MatthieuM. Thanks! I was hoping there&#39;s a cleaner way to handle the functional chains  (i.e. <code>.iter().map(...).iter().filter() ... .iter().find(...)</code>) without introducing an extra level of reference at every step - but it seems I can&#39;t avoid it."}], "answers": [{"comments": [{"owner": {"reputation": 7711, "user_id": 382050, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/5d52382ed0c80cf1f28aad49f8b270ec?s=128&d=identicon&r=PG&f=1", "display_name": "ttsiodras", "link": "https://stackoverflow.com/users/382050/ttsiodras"}, "edited": false, "score": 0, "creation_date": 1448959940, "post_id": 33971297, "comment_id": 55787748, "body": "Thanks for your feedback! Does <code>iter().cloned()</code> have a performance impact? I mean, does it actually allocate &quot;clones&quot;? Also, I believe <code>into_iter()</code> will definitely have a performance impact, since it&#39;s moving semantics will mutate the source vector.  I think the best is your third suggestion - using the &quot;automatic dereference as many times as needed&quot; - must read up on that."}, {"owner": {"reputation": 7711, "user_id": 382050, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/5d52382ed0c80cf1f28aad49f8b270ec?s=128&d=identicon&r=PG&f=1", "display_name": "ttsiodras", "link": "https://stackoverflow.com/users/382050/ttsiodras"}, "edited": false, "score": 0, "creation_date": 1448960700, "post_id": 33971297, "comment_id": 55788217, "body": "BTW, any thoughts on why Rust chose not to have the functional operators (map, filter, etc) as part of the collections, and needs the <code>.iter()</code> first (which introduces an extra level of &quot;reference-indirection&quot; at each step)....?"}, {"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "reply_to_user": {"reputation": 7711, "user_id": 382050, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/5d52382ed0c80cf1f28aad49f8b270ec?s=128&d=identicon&r=PG&f=1", "display_name": "ttsiodras", "link": "https://stackoverflow.com/users/382050/ttsiodras"}, "edited": false, "score": 1, "creation_date": 1448988597, "post_id": 33971297, "comment_id": 55806681, "body": "@ttsiodras As for performance: None of it should really matter. Cloning a tuple of type <code>(u32, i32)</code> is very cheap. Don&#39;t let the word &quot;clone&quot; scare you. :-) For simpe &quot;plain old data types&quot; cloning and copying are basically the same. But some types cannot be copied because they are more complicated. Only in those cases, I would worry about cloning."}, {"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "reply_to_user": {"reputation": 7711, "user_id": 382050, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/5d52382ed0c80cf1f28aad49f8b270ec?s=128&d=identicon&r=PG&f=1", "display_name": "ttsiodras", "link": "https://stackoverflow.com/users/382050/ttsiodras"}, "edited": false, "score": 3, "creation_date": 1448989431, "post_id": 33971297, "comment_id": 55807262, "body": "@ttsiodras There are many different kinds of ways you could iterate over a collection (<code>iter</code>, <code>iter_mut</code>, <code>into_iter</code>, <code>drain</code>). Each have their uses and there isn&#39;t really a &quot;right&quot; way to do this. I guess, that&#39;s why you have to be specific."}, {"owner": {"reputation": 3885, "user_id": 652528, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/a580420b66f89e76e1fb9a368f785b3f?s=128&d=identicon&r=PG", "display_name": "geckos", "link": "https://stackoverflow.com/users/652528/geckos"}, "edited": false, "score": 1, "creation_date": 1577280866, "post_id": 33971297, "comment_id": 105134737, "body": "Rust is an amazing experience on software engineering"}], "tags": [], "owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "is_accepted": true, "score": 21, "last_activity_date": 1448715740, "last_edit_date": 1448715740, "creation_date": 1448713599, "answer_id": 33971297, "question_id": 33971087, "link": "https://stackoverflow.com/questions/33971087/why-does-the-argument-for-the-find-closure-need-two-ampersands/33971297#33971297", "title": "Why does the argument for the find closure need two ampersands?", "body": "<p>This here</p>\n\n<pre><code>moves_and_scores.iter()\n</code></pre>\n\n<p>gives you an iterator over <em>borrowed</em> vector elements. If you follow the API doc what type this is, you'll notice that it's just the iterator for a borrowed slice and this implements <code>Iterator</code> with <code>Item=&amp;T</code> where <code>T</code> is <code>(u32, i32)</code> in your case.</p>\n\n<p>Then, you use <code>find</code> which takes a predicate which takes a <code>&amp;Item</code> as parameter. Sice <code>Item</code> already is a reference in your case, the predicate has to take a <code>&amp;&amp;(u32, i32)</code>.</p>\n\n<pre><code>pub trait Iterator {\n    ...\n    fn find&lt;P&gt;(&amp;mut self, predicate: P) -&gt; Option&lt;Self::Item&gt;\n    where P: FnMut(&amp;Self::Item) -&gt; bool {...}\n    ...            ^\n</code></pre>\n\n<p>It was probably defined like <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.find\">this</a> because it's only supposed to inspect the item and return a bool. This does not require the item being passed by value.</p>\n\n<p>If you want an iterator over <code>(u32, i32)</code> you could write</p>\n\n<pre><code>moves_and_scores.iter().cloned()\n</code></pre>\n\n<p><code>cloned()</code> converts the iterator from one with an <code>Item</code> type <code>&amp;T</code> to one with an <code>Item</code> type <code>T</code> if <code>T</code> is <code>Clone</code>. Another way to do it would be to use <code>into_iter()</code> instead of <code>iter()</code>.</p>\n\n<pre><code>moves_and_scores.into_iter()\n</code></pre>\n\n<p>The difference between the two is that the first option clones the borrowed elements while the 2nd one consumes the vector and moves the elements out of it.</p>\n\n<p>By writing the lambda like this</p>\n\n<pre><code>|&amp;&amp;(_, score)| score == target_score\n</code></pre>\n\n<p>you destructure the \"double reference\" and create a local copy of the <code>i32</code>. This is allowed since <code>i32</code> is a simple type that is <code>Copy</code>.</p>\n\n<p>Instead of destructuring the parameter of your predicate you could also write</p>\n\n<pre><code>|move_and_score| move_and_score.1 == target_score\n</code></pre>\n\n<p>because the dot operator automatically dereferences as many times as needed.</p>\n"}], "owner": {"reputation": 7711, "user_id": 382050, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/5d52382ed0c80cf1f28aad49f8b270ec?s=128&d=identicon&r=PG&f=1", "display_name": "ttsiodras", "link": "https://stackoverflow.com/users/382050/ttsiodras"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2840, "favorite_count": 0, "accepted_answer_id": 33971297, "answer_count": 1, "score": 18, "last_activity_date": 1448893367, "creation_date": 1448711925, "last_edit_date": 1448893367, "question_id": 33971087, "link": "https://stackoverflow.com/questions/33971087/why-does-the-argument-for-the-find-closure-need-two-ampersands", "title": "Why does the argument for the find closure need two ampersands?", "body": "<p>I have been playing with Rust by <a href=\"https://github.com/ttsiodras/Score4/tree/master/Rust\" rel=\"noreferrer\">porting my Score4 AI engine</a> to it - basing the work on my functional-style implementation in OCaml. I specifically wanted to see how Rust fares with functional-style code.</p>\n\n<p>The end result: It works, and it's very fast - much faster than OCaml. It almost touches the speed of imperative-style C/C++ - which is really cool.</p>\n\n<p>There's a thing that troubles me, though \u2014 why do I need two ampersands in the last line of this code?</p>\n\n<pre><code>let moves_and_scores: Vec&lt;_&gt; = moves_and_boards\n    .iter()\n    .map(|&amp;(column,board)| (column, score_board(&amp;board)))\n    .collect();\nlet target_score = if maximize_or_minimize { \n    ORANGE_WINS \n} else { \n    YELLOW_WINS \n};\nif let Some(killer_move) = moves_and_scores.iter()\n    .find(|&amp; &amp;(_,score)| score==target_score) {\n         ...\n</code></pre>\n\n<p>I added them is because the compiler errors \"guided\" me to it; but I am trying to understand why... I used the trick mentioned elsewhere in Stack Overflow to \"ask\" the compiler to tell me what type something is:</p>\n\n<pre><code>let moves_and_scores: Vec&lt;_&gt; = moves_and_boards\n    .iter()\n    .map(|&amp;(column,board)| (column, score_board(&amp;board)))\n    .collect();\nlet () = moves_and_scores;\n</code></pre>\n\n<p>...which caused this error:</p>\n\n<pre><code>src/main.rs:108:9: 108:11 error: mismatched types:\n expected `collections::vec::Vec&lt;(u32, i32)&gt;`,\n    found `()`\n(expected struct `collections::vec::Vec`,\n    found ()) [E0308]\nsrc/main.rs:108     let () = moves_and_scores;\n</code></pre>\n\n<p>...as I expected, <code>moves_and_scores</code> is a vector of tuples: <code>Vec&lt;(u32, i32)&gt;</code>. But then, in the immediate next line, <code>iter()</code> and <code>find()</code> force me to use the hideous double ampersands in the closure parameter:</p>\n\n<pre><code>if let Some(killer_move) = moves_and_scores.iter()\n    .find(|&amp; &amp;(_,score)| score==target_score) {\n</code></pre>\n\n<p>Why does the <code>find</code> closure need two ampersands? I could see why it may need one (pass the tuple by reference to save time/space) but why two? Is it because of the <code>iter</code>?  That is, is the <code>iter</code> creating references, and then <code>find</code> expects a reference on each input, so a reference on a reference?</p>\n\n<p>If this is so, isn't this, arguably, a rather ugly design flaw in Rust? </p>\n\n<p>In fact, I would expect <code>find</code> and <code>map</code> and all the rest of the functional primitives to be parts of the collections themselves. Forcing me to <code>iter()</code> to do any kind of functional-style work seems burdensome, and even more so if it forces this kind of \"double ampersands\" in every possible functional chain.</p>\n\n<p>I am hoping I am missing something obvious - any help/clarification most welcome.</p>\n"}, {"tags": ["arrays", "casting", "rust", "unsafe"], "answers": [{"comments": [{"owner": {"reputation": 355, "user_id": 4417079, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/73dl7.jpg?s=128&g=1", "display_name": "Shien", "link": "https://stackoverflow.com/users/4417079/shien"}, "edited": false, "score": 0, "creation_date": 1448697019, "post_id": 33968938, "comment_id": 55694934, "body": "Well, yeah, that&#39;s what I have right now, but I was curious about micro-optimisations, and in any case, can&#39;t you use <code>#[cfg(target_endian = &quot;...&quot;)]</code> to check for byte order?"}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 355, "user_id": 4417079, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/73dl7.jpg?s=128&g=1", "display_name": "Shien", "link": "https://stackoverflow.com/users/4417079/shien"}, "edited": false, "score": 0, "creation_date": 1448703951, "post_id": 33968938, "comment_id": 55696445, "body": "@Shien Normally you can get the bitshifting to be near-optimal. I wouldn&#39;t worry about it for most use-cases."}, {"owner": {"reputation": 1699, "user_id": 783825, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/cce2622c5ccd49a3cbf2007491ab1075?s=128&d=identicon&r=PG", "display_name": "Neikos", "link": "https://stackoverflow.com/users/783825/neikos"}, "edited": false, "score": 0, "creation_date": 1448711377, "post_id": 33968938, "comment_id": 55698494, "body": "I don&#39;t see how your answer does care for byte order either."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 1699, "user_id": 783825, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/cce2622c5ccd49a3cbf2007491ab1075?s=128&d=identicon&r=PG", "display_name": "Neikos", "link": "https://stackoverflow.com/users/783825/neikos"}, "edited": false, "score": 8, "creation_date": 1448712522, "post_id": 33968938, "comment_id": 55698797, "body": "@Neikos The function above doesn&#39;t <i>have</i> to account for byte order because it&#39;s not written in a way that depends on it."}, {"owner": {"reputation": 1699, "user_id": 783825, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/cce2622c5ccd49a3cbf2007491ab1075?s=128&d=identicon&r=PG", "display_name": "Neikos", "link": "https://stackoverflow.com/users/783825/neikos"}, "edited": false, "score": 0, "creation_date": 1448715225, "post_id": 33968938, "comment_id": 55699515, "body": "But you called it &#39;portable&#39; yourself. So that seems to be case though."}, {"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "reply_to_user": {"reputation": 1699, "user_id": 783825, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/cce2622c5ccd49a3cbf2007491ab1075?s=128&d=identicon&r=PG", "display_name": "Neikos", "link": "https://stackoverflow.com/users/783825/neikos"}, "edited": false, "score": 5, "creation_date": 1448718778, "post_id": 33968938, "comment_id": 55700490, "body": "@Neikos The goal is to store an u16 number in little endian format into a byte array (note the function&#39;s name with the <code>le</code> suffix). This is exactly what&#39;s happening here regardless of whether you are on a little or big endian machine. So, it&#39;s portable."}, {"owner": {"reputation": 30739, "user_id": 1804599, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/v91P3.jpg?s=128&g=1", "display_name": "rightfold", "link": "https://stackoverflow.com/users/1804599/rightfold"}, "edited": false, "score": 0, "creation_date": 1492211346, "post_id": 33968938, "comment_id": 73899776, "body": "This does not answer the question."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 12, "last_activity_date": 1448696515, "creation_date": 1448696515, "answer_id": 33968938, "question_id": 33968870, "link": "https://stackoverflow.com/questions/33968870/temporarily-transmute-u8-to-u16/33968938#33968938", "title": "Temporarily transmute [u8] to [u16]", "body": "<p>The obvious, safe and portable way is to just use math.</p>\n\n<pre><code>fn set_u16_le(a: &amp;mut [u8], v: u16) {\n    a[0] = v as u8;\n    a[1] = (v &gt;&gt; 8) as u8;\n}\n</code></pre>\n\n<p>If you want a higher-level interface, there's the <a href=\"https://crates.io/crates/byteorder\" rel=\"noreferrer\"><code>byteorder</code></a> crate which is designed to do this.</p>\n\n<p>You should definitely <em>not</em> use <code>transmute</code> to turn a <code>[u8]</code> into a <code>[u16]</code>, because that doesn't guarantee <em>anything</em> about the byte order.</p>\n"}, {"comments": [{"owner": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "edited": false, "score": 0, "creation_date": 1525460547, "post_id": 33971848, "comment_id": 87380377, "body": "To check the alignment one could use <code>assert!((p as usize) % std::mem::align_of::&lt;Target&gt;() == 0);</code>"}], "tags": [], "owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "is_accepted": true, "score": 6, "last_activity_date": 1525455637, "last_edit_date": 1525455637, "creation_date": 1448717173, "answer_id": 33971848, "question_id": 33968870, "link": "https://stackoverflow.com/questions/33968870/temporarily-transmute-u8-to-u16/33971848#33971848", "title": "Temporarily transmute [u8] to [u16]", "body": "<p><a href=\"https://stackoverflow.com/a/33968938/155423\">As DK suggests</a>, you probably shouldn't really use <code>unsafe</code> code to reinterpret the memory... but you can if you want to.</p>\n\n<p>If you really want to go that route, you should be aware of a couple of gotchas:</p>\n\n<ul>\n<li>You could have an alignment problem. If you just take a <code>&amp;mut [u8]</code> from somewhere and convert it to a <code>&amp;mut [u16]</code>, it could refer to some memory region that is not properly <em>aligned</em> to be accessed as a <code>u16</code>. Depending on what computer you run this code on, such an unaligned memory access might be illegal. In this case, the program would probably abort somehow. For example, the CPU could generate some kind of signal which the operating system responds to in order to kill the process.</li>\n<li>It'll be non-portable. Even without the alignment issue, you'll get different results on different machines (little- versus big-endian machines).</li>\n</ul>\n\n<p>If you can switch it around (creating a <code>u16</code> array and temporarily dealing with it on a byte level), you would solve the potential memory alignment problem:</p>\n\n<pre><code>/// warning: The resulting byte view is system-specific\nunsafe fn raw_byte_access(s16: &amp;mut [u16]) -&gt; &amp;mut [u8] {\n    use std::slice;\n    slice::from_raw_parts_mut(s16.as_mut_ptr() as *mut u8, s16.len() * 2)\n}\n</code></pre>\n\n<p>On a big-endian machine, this function will not do what you want; you want a little-endian byte order. You can only use this as an optimization for little-endian machines and need to stick with a solution like DK's for big- or mixed-endian machines.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 5, "last_activity_date": 1563922495, "creation_date": 1563922495, "answer_id": 57173180, "question_id": 33968870, "link": "https://stackoverflow.com/questions/33968870/temporarily-transmute-u8-to-u16/57173180#57173180", "title": "Temporarily transmute [u8] to [u16]", "body": "<p><a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.align_to\" rel=\"noreferrer\"><code>slice::align_to</code></a> and <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.align_to_mut\" rel=\"noreferrer\"><code>slice::align_to_mut</code></a> are stable as of Rust 1.30. These functions handle the alignment concerns that <a href=\"https://stackoverflow.com/a/33971848/155423\">sellibitze</a> brings up.</p>\n\n<p>The big- and little- endian problems are still yours to worry about. You may be able to use methods like <a href=\"https://doc.rust-lang.org/std/primitive.u16.html#method.to_le\" rel=\"noreferrer\"><code>u16::to_le</code></a> to help with that. I don't have access to a big-endian computer to test with, however.</p>\n\n<pre><code>fn example(blob: &amp;mut [u8; 16], value: u16) {\n   // I copied this example from Stack Overflow without providing \n   // rationale why my specific case is safe.\n   let (head, body, tail) = unsafe { blob.align_to_mut::&lt;u16&gt;() };\n\n   // This example simply does not handle the case where the input data\n   // is misaligned such that there are bytes that cannot be correctly\n   // reinterpreted as u16.\n   assert!(head.is_empty());\n   assert!(tail.is_empty());\n\n   body[0] = value\n}\n\nfn main() {\n   let mut data = [0; 16];\n   example(&amp;mut data, 500);\n   println!(\"{:?}\", data);\n}\n</code></pre>\n"}], "owner": {"reputation": 355, "user_id": 4417079, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/73dl7.jpg?s=128&g=1", "display_name": "Shien", "link": "https://stackoverflow.com/users/4417079/shien"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5585, "favorite_count": 3, "accepted_answer_id": 33971848, "answer_count": 3, "score": 9, "last_activity_date": 1563922495, "creation_date": 1448695822, "last_edit_date": 1448893019, "question_id": 33968870, "link": "https://stackoverflow.com/questions/33968870/temporarily-transmute-u8-to-u16", "title": "Temporarily transmute [u8] to [u16]", "body": "<p>I have a <code>[u8; 16384]</code> and a <code>u16</code>. How would I \"temporarily transmute\" the array so I can set the two <code>u8</code>s at once, the first to the least significant byte and the second to the most significant byte?</p>\n"}, {"tags": ["windows", "module", "rust"], "answers": [{"comments": [{"owner": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "edited": false, "score": 1, "creation_date": 1448741974, "post_id": 33971047, "comment_id": 55708312, "body": "Thanks, this worked for me. Also, in order to use anything from modules, don&#39;t you need to use <code>pub</code>?"}, {"owner": {"reputation": 1699, "user_id": 783825, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/cce2622c5ccd49a3cbf2007491ab1075?s=128&d=identicon&r=PG", "display_name": "Neikos", "link": "https://stackoverflow.com/users/783825/neikos"}, "reply_to_user": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "edited": false, "score": 0, "creation_date": 1448761769, "post_id": 33971047, "comment_id": 55713467, "body": "Not if you are in the same crate, pub is used to export parts of your crate so that others can access it. Check out: <a href=\"https://doc.rust-lang.org/reference.html#visibility-and-privacy\" rel=\"nofollow noreferrer\">doc.rust-lang.org/reference.html#visibility-and-privacy</a>"}], "tags": [], "owner": {"reputation": 1699, "user_id": 783825, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/cce2622c5ccd49a3cbf2007491ab1075?s=128&d=identicon&r=PG", "display_name": "Neikos", "link": "https://stackoverflow.com/users/783825/neikos"}, "is_accepted": true, "score": 5, "last_activity_date": 1448730103, "last_edit_date": 1448730103, "creation_date": 1448711729, "answer_id": 33971047, "question_id": 33968344, "link": "https://stackoverflow.com/questions/33968344/access-functions-from-sub-module-from-other-sub-module/33971047#33971047", "title": "Access functions from sub-module from other sub-module", "body": "<p>If I understood correctly your files look like this:</p>\n\n<pre><code>lib -\n    |- lib.rs\n    |- main.rs\n    |- modules -\n               |- mod.rs\n               |- functions.rs\n               |- network.rs\n</code></pre>\n\n<p>From what you wrote in <code>network.rs</code> you should be able to use <code>modules::functions</code> however it seems you did not include it in modules/mod.rs</p>\n\n<p>So add a line with <code>mod functions;</code> to modules/mod.rs.</p>\n"}], "owner": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 109, "favorite_count": 0, "accepted_answer_id": 33971047, "answer_count": 1, "score": 2, "last_activity_date": 1448730103, "creation_date": 1448691535, "question_id": 33968344, "link": "https://stackoverflow.com/questions/33968344/access-functions-from-sub-module-from-other-sub-module", "title": "Access functions from sub-module from other sub-module", "body": "<p>I am trying to split my program into a library that contains multiple sub-modules with structs and functions, and a main file that uses all of it. I want to have a sub-module that contains useful functions that aren't needed anywhere else but other sub-modules. However, I am having difficulties importing this sub-module into the other one. The cargo project is called eant_rust. My lib.rs and main.rs files are in the src directory. I have a folder called modules that the lib.rs file imports from. Inside the modules folder is a mod.rs file the two sub-modules I am having trouble with.</p>\n\n<p>lib.rs:</p>\n\n<pre><code>pub mod modules;\n</code></pre>\n\n<p>main.rs:</p>\n\n<pre><code>extern crate eant_rust;\n\nfn main() {}\n</code></pre>\n\n<p>mod.rs (inside modules folder with the two sub-modules):</p>\n\n<pre><code>pub mod network;\n</code></pre>\n\n<p>functions.rs (one sub-module):</p>\n\n<pre><code>pub fn reverse() {}\npub fn sum_vec() {}\n</code></pre>\n\n<p>network.rs (the other one):</p>\n\n<pre><code>use modules::functions;\nfunctions::reverse();\nfunctions::sum_vec();\n</code></pre>\n\n<p>When I try to compile I get the following error:\nerror: unresolved import <code>modules::functions</code>. There is no <code>functions</code> in <code>modules</code>.</p>\n"}, {"tags": ["plugins", "rust", "internals"], "answers": [{"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 2, "last_activity_date": 1448638359, "creation_date": 1448638359, "answer_id": 33960604, "question_id": 33960186, "link": "https://stackoverflow.com/questions/33960186/how-to-get-a-tuple-out-of-a-constval/33960604#33960604", "title": "How to get a tuple out of a ConstVal?", "body": "<p>If you look at the code for the constant evaluation of the <code>ExprTupField</code> expression (indexing into tuples), you can see how to extract a specific field:</p>\n\n<pre><code>if let hir::ExprTup(ref fields) = tcx.map.expect_expr(tup_id).node {\n    if index.node &lt; fields.len() {\n        return eval_const_expr_partial(tcx, &amp;fields[index.node], base_hint, fn_args)\n    } else {\n        signal!(e, TupleIndexOutOfBounds);\n    }\n} else {\n    unreachable!()\n}\n</code></pre>\n\n<p><code>fields</code> is a <code>Vec&lt;P&lt;Expr&gt;&gt;</code>. So you can iterate over that <code>Vec</code> and call <code>eval_const_expr_partial</code> on it to obtain a <code>ConstVal</code> of the tuple field.</p>\n\n<p>Note that you will get into trouble if the tuple was created in a <code>const fn</code>: <a href=\"https://github.com/rust-lang/rust/issues/29928\" rel=\"nofollow\">https://github.com/rust-lang/rust/issues/29928</a></p>\n"}], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 53, "favorite_count": 0, "accepted_answer_id": 33960604, "answer_count": 1, "score": 1, "last_activity_date": 1448638359, "creation_date": 1448636814, "question_id": 33960186, "link": "https://stackoverflow.com/questions/33960186/how-to-get-a-tuple-out-of-a-constval", "title": "How to get a tuple out of a ConstVal?", "body": "<p>With current nightlies, one can use <code>rustc::middle::const_eval_partial(..)</code> to get a <code>Result&lt;ConstVal, _&gt;</code>. However, that <code>ConstVal</code> is a <code>Tuple { node: NodeId }</code> for tuple values. How can I get the contents of this tuple?</p>\n\n<p>Example code (here a minimal lint to use as compiler plugin):</p>\n\n<pre><code>use rustc::lint::*;\nuse syntax::ptr::P;\nuse rustc_front::hir::*;\nuse rustc::middle::const_eval::ConstVal::Tuple;\nuse rustc::middle::const_eval::eval_const_expr_partial;\nuse rustc::middle::const_eval::EvalHint::ExprTypeChecked;\n\ndeclare_lint! { pub TEST_LINT, Warn, \"Just a test, ignore this\" }\n\n#[derive(Copy,Clone)]\npub struct TestLint;\n\nimpl LintPass for TestLint {\n    fn get_lints(&amp;self) -&gt; LintArray {\n        lint_array!TEST_LINT)\n    }\n}\n\nimpl LateLintPass for BitMask {\n    fn check_expr(&amp;mut self, cx: &amp;LateContext, e: &amp;Expr) {\n        let res = eval_const_expr_partial(cx.tcx, expr, ExprTypeChecked, None);\n        if let Ok(Tuple(node_id))) = res {\n            // ... how to get the parts of the tuple?\n        }\n    }\n}\n</code></pre>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"tags": [], "owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "is_accepted": false, "score": 2, "last_activity_date": 1448583891, "creation_date": 1448583891, "answer_id": 33948760, "question_id": 33948293, "link": "https://stackoverflow.com/questions/33948293/unresolved-import-maybe-a-missing-extern-when-extern-declaration-exists/33948760#33948760", "title": "&quot;unresolved import -- maybe a missing extern&quot; When extern declaration exists", "body": "<p>You need to put the <code>extern crate rand;</code> line in you <code>main.rs</code> and/or <code>lib.rs</code> file. No need to put it in the other files.</p>\n\n<p>Perhaps it is related to <a href=\"https://github.com/rust-lang/rust/issues/27626\" rel=\"nofollow\">this bug</a>.</p>\n"}, {"comments": [{"owner": {"reputation": 4655, "user_id": 1513559, "user_type": "registered", "accept_rate": 46, "profile_image": "https://i.stack.imgur.com/NIt1y.jpg?s=128&g=1", "display_name": "Ben Pious", "link": "https://stackoverflow.com/users/1513559/ben-pious"}, "edited": false, "score": 0, "creation_date": 1448599049, "post_id": 33950291, "comment_id": 55659241, "body": "This is the answer I arrived at a few hours ago; thanks for posting (and for pointing out where in that book/tutorial this was stated, I actually read it before posting the question and didn&#39;t realize that it had the solution the whole time). I didn&#39;t mean to imply that the compiler was wrong, just that I didn&#39;t understand exactly what had changed from the one file scenario to the many."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 20, "last_activity_date": 1448598616, "creation_date": 1448598616, "answer_id": 33950291, "question_id": 33948293, "link": "https://stackoverflow.com/questions/33948293/unresolved-import-maybe-a-missing-extern-when-extern-declaration-exists/33950291#33950291", "title": "&quot;unresolved import -- maybe a missing extern&quot; When extern declaration exists", "body": "<p>To quote from the <a href=\"http://doc.rust-lang.org/book/crates-and-modules.html\">Crates and Modules chapter of the Rust book</a>:</p>\n\n<blockquote>\n  <p>[...] <code>use</code> declarations are absolute paths, starting from your crate root. <code>self</code> makes that path relative to your current place in the hierarchy instead.</p>\n</blockquote>\n\n<p>The compiler is correct; there is no such thing as <code>rand</code>, because you've put it inside a module, so the correct path to it would be <code>GameState::ballstate::rand</code>, or <code>self::rand</code> from within the <code>GameState::ballstate</code> module.</p>\n\n<p>You need to either move <code>extern crate rand;</code> to the root module <em>or</em> use <code>self::rand</code> within the <code>GameState::ballstate</code> module.</p>\n"}], "owner": {"reputation": 4655, "user_id": 1513559, "user_type": "registered", "accept_rate": 46, "profile_image": "https://i.stack.imgur.com/NIt1y.jpg?s=128&g=1", "display_name": "Ben Pious", "link": "https://stackoverflow.com/users/1513559/ben-pious"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 11580, "favorite_count": 1, "accepted_answer_id": 33950291, "answer_count": 2, "score": 18, "last_activity_date": 1450717700, "creation_date": 1448579732, "last_edit_date": 1450717700, "question_id": 33948293, "link": "https://stackoverflow.com/questions/33948293/unresolved-import-maybe-a-missing-extern-when-extern-declaration-exists", "title": "&quot;unresolved import -- maybe a missing extern&quot; When extern declaration exists", "body": "<p>I have a small project which built with no issues when it was all in one big .rs file. I wanted to make it easier to work with, so I broke it up into modules, and the project is now structured like this:</p>\n\n<pre><code>\u251c\u2500\u2500 GameState\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ballstate.rs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 collidable.rs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 gamestate.rs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mod.rs\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 playerstate.rs\n\u251c\u2500\u2500 lib.rs\n\u2514\u2500\u2500 main.rs\n</code></pre>\n\n<p>In <code>ballstate.rs</code>, I need to use the <code>rand</code> crate. Here's an abbreviated version of the file:</p>\n\n<pre><code>extern crate rand;\n\npub struct BallState {\n    dir: Point,         \n    frame: BoundingBox  \n}                     \n\nimpl BallState {\n    fn update_dir(&amp;mut self) {\n        use rand::*;                                                                                                                                                                    \n        let mut rng = rand::thread_rng();                                                                      \n        self.dir.x = if rng.gen() { Direction::Forwards.as_float() } else { Direction::Backwards.as_float()  };\n        self.dir.y = if rng.gen()  { Direction::Forwards.as_float() } else { Direction::Backwards.as_float() };\n    }                                                                                                        \n}\n</code></pre>\n\n<p>However, when I run <code>cargo build</code> from the top level directory, I get the following error: </p>\n\n<blockquote>\n  <p>GameState/ballstate.rs:42:9: 42:13 error: unresolved import <code>rand::*</code>. Maybe a missing <code>extern crate rand</code>?</p>\n</blockquote>\n\n<p>When I just had the extern crate declaration in my main.rs file, this worked. What's changed now that it's in a separate module? </p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "is_accepted": true, "score": 6, "last_activity_date": 1448567002, "creation_date": 1448567002, "answer_id": 33945990, "question_id": 33945682, "link": "https://stackoverflow.com/questions/33945682/how-can-i-pass-a-function-with-2-parameters-as-a-parameter-to-a-function/33945990#33945990", "title": "How can I pass a function with 2 parameters as a parameter to a function?", "body": "<p>You can use a generic method, because <code>Fn</code> is a trait:</p>\n\n<pre><code>fn apply_bin&lt;F&gt;(&amp;mut self, op: F) -&gt; Result&lt;i32, String&gt;\n    where F: Fn(i32, i32)\n{\n}\n</code></pre>\n\n<p>(this is static dispatch)</p>\n\n<p>You can also use dynamic dispatch:</p>\n\n<pre><code>fn apply_bin(&amp;mut self, op: &amp;Fn(i32, i32)) -&gt; Result&lt;i32, String&gt;\n{\n}\n</code></pre>\n\n<p>There is more info in the <a href=\"https://doc.rust-lang.org/stable/book/closures.html#taking-closures-as-arguments\">book</a>.</p>\n"}], "owner": {"reputation": 5638, "user_id": 987706, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/f9c778f2ae5f4b5fde46d5f1720b4a7c?s=128&d=identicon&r=PG", "display_name": "The Oddler", "link": "https://stackoverflow.com/users/987706/the-oddler"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 92, "favorite_count": 0, "accepted_answer_id": 33945990, "answer_count": 1, "score": 3, "last_activity_date": 1448895197, "creation_date": 1448565509, "last_edit_date": 1448895197, "question_id": 33945682, "link": "https://stackoverflow.com/questions/33945682/how-can-i-pass-a-function-with-2-parameters-as-a-parameter-to-a-function", "title": "How can I pass a function with 2 parameters as a parameter to a function?", "body": "<p>I have the following:</p>\n\n<pre><code>fn apply_bin(&amp;mut self, op: Fn(i32,i32)) -&gt; Result&lt;i32, String&gt; {\n\n}\n</code></pre>\n\n<p>but I'm getting the error: </p>\n\n<pre><code>&lt;anon&gt;:75:29: 75:31 error: the trait `core::marker::Sized` is not implemented for the type `core::ops::Fn(i32, i32) + 'static` [E0277]\n&lt;anon&gt;:75     fn apply_bin(&amp;mut self, op: Fn(i32,i32)) -&gt; Result&lt;i32, String&gt; {\n                                      ^~\n</code></pre>\n\n<p>Why is this and how do I fix it?</p>\n"}, {"tags": ["input", "console", "pattern-matching", "rust"], "answers": [{"comments": [{"owner": {"reputation": 664, "user_id": 1311246, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/3e694fb8d3a88e7d8680a0a58b1b43a6?s=128&d=identicon&r=PG", "display_name": "0x0me", "link": "https://stackoverflow.com/users/1311246/0x0me"}, "edited": false, "score": 0, "creation_date": 1448566575, "post_id": 33945286, "comment_id": 55650736, "body": "Thank you, that was one problem. The other one is that I have to flush the output stream in order to get some prompt on the console. So I need to add <code>io::stdout::flush()</code> after the print as well."}], "tags": [], "owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "is_accepted": true, "score": 2, "last_activity_date": 1448563919, "last_edit_date": 1448563919, "creation_date": 1448563598, "answer_id": 33945286, "question_id": 33945061, "link": "https://stackoverflow.com/questions/33945061/read-input-in-pattern-match-branch/33945286#33945286", "title": "Read input in pattern match branch", "body": "<p>You need to use <code>read_line()</code>:</p>\n\n<pre><code>fn main() {\n    use std::io::{self,Read};\n\n    let arg : Option&lt;String&gt; = None; // Does not terminate\n    //let arg : Option&lt;String&gt; = Some(\"Some arg\".to_string()); // works well printing 'Some arg'\n    println!(\"Checking for password\");\n\n    let password = match arg {\n        Some(val) =&gt; val.to_string(),\n        None =&gt; {\n            print!(\"Password:\");\n            let mut buffer = String::new();\n            io::stdin().read_line(&amp;mut buffer).unwrap();\n            buffer\n        }\n    };\n\n    println!(\"password is {}\", password);\n}\n</code></pre>\n\n<p>The <code>read_to_string()</code> function reads until end of file.\nYour program does indeed read input, but you need to send it the <code>EOF</code> character (<code>Ctrl-D</code> on Linux) for it to continue executing.</p>\n"}], "owner": {"reputation": 664, "user_id": 1311246, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/3e694fb8d3a88e7d8680a0a58b1b43a6?s=128&d=identicon&r=PG", "display_name": "0x0me", "link": "https://stackoverflow.com/users/1311246/0x0me"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 50, "favorite_count": 1, "accepted_answer_id": 33945286, "answer_count": 1, "score": 0, "last_activity_date": 1448563919, "creation_date": 1448562403, "question_id": 33945061, "link": "https://stackoverflow.com/questions/33945061/read-input-in-pattern-match-branch", "title": "Read input in pattern match branch", "body": "<p>My program should read some parameters from the command line. If someone does not provide an optional password parameter the program should ask for it. Therefore the corresponding field is modeled as an <code>Option</code> type.</p>\n\n<p>This works well if the parameter is provided from the command line ( option having the value of <code>Some(\"...\")</code>, but the branch matching the <code>None</code> case does not ask for input.</p>\n\n<p>The simplified program looks like</p>\n\n<pre><code>fn main() {\n    use std::io::{self,Read};\n\n    let arg : Option&lt;String&gt; = None; // Does not terminate\n    //let arg : Option&lt;String&gt; = Some(\"Some arg\".to_string()); // works well printing 'Some arg'\n    println!(\"Checking for password\");\n\n\n    let password = match arg {\n        Some(val) =&gt; val.to_string(),\n        None =&gt; {\n            print!(\"Password:\");\n         let mut buffer = String::new();\n         io::stdin().read_to_string(&amp;mut buffer).unwrap();\n         buffer\n        }\n    };\n\n    println!(\"password is {}\", password);\n}\n</code></pre>\n\n<p>Running the program preinitialized with <code>Some(\"Some arg\")</code> prints the string \"password is Some arg\" to the console as expected, but switching to the None does nothing, even not terminating the program.</p>\n\n<p>Could you spot my mistake or give me some advice? I am using rustc verison <code>rustc 1.4.0 (8ab8581f6 2015-10-27)</code>. Thanks in advance.</p>\n"}, {"tags": ["compiler-errors", "closures", "rust"], "answers": [{"comments": [{"owner": {"reputation": 1086, "user_id": 2111533, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/db1096a59107ffe4dce1bcfd648048fb?s=128&d=identicon&r=PG&f=1", "display_name": "Jan", "link": "https://stackoverflow.com/users/2111533/jan"}, "edited": false, "score": 0, "creation_date": 1448562864, "post_id": 33945063, "comment_id": 55649239, "body": "For this case it would work I guess but the data won&#39;t always be the same. I always want to use the <code>default_data</code> as my &quot;skeleton&quot; though. I guess I would run into problems as soon as I need the data to be different in the same closure (imagine displaying some user&#39;s &quot;dashboard&quot;, the info would be personalized and not equal for all users)."}, {"owner": {"reputation": 1086, "user_id": 2111533, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/db1096a59107ffe4dce1bcfd648048fb?s=128&d=identicon&r=PG&f=1", "display_name": "Jan", "link": "https://stackoverflow.com/users/2111533/jan"}, "edited": false, "score": 0, "creation_date": 1448563075, "post_id": 33945063, "comment_id": 55649322, "body": "I think I came up with something: since I need to create new BTreeMaps anyway, I could just make a function that always inserts the data into the TreeMap. Guess that would be the easiest way, unless someone else comes up with a better solution."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 1086, "user_id": 2111533, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/db1096a59107ffe4dce1bcfd648048fb?s=128&d=identicon&r=PG&f=1", "display_name": "Jan", "link": "https://stackoverflow.com/users/2111533/jan"}, "edited": false, "score": 0, "creation_date": 1448568032, "post_id": 33945063, "comment_id": 55651282, "body": "Yes, I&#39;d say that would be the most natural way to do it - a function like <code>fn make_default_data() -&gt; BTreeMap&lt;String, String&gt;</code>."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 2, "last_activity_date": 1448562406, "creation_date": 1448562406, "answer_id": 33945063, "question_id": 33944411, "link": "https://stackoverflow.com/questions/33944411/closures-use-of-moved-value/33945063#33945063", "title": "Closures - use of moved value", "body": "<p>It seems that you're okay with cloning this <code>default_data</code> before sending it to each thread, right? Then you just need to clone it <em>outside</em> of the closure:</p>\n\n<pre><code>let mut router = Router::new();\nlet default_data = BTreeMap::new();\ndefault_data.insert(\"test\".to_owned(), \"data\".to_owned());\n\n{\n    let mut new_data = default_data.clone();\n    router.get(\"/\", move |_| {\n        new_data.insert(\"test2\".to_owned(), \"some other data\".to_owned());\n        Ok(Response::with((status::Ok, new_data.get(\"test2\".to_owned()).unwrap())))\n    });\n}\n\n{\n    let mut new_data = default_data.clone();\n    router.get(\"/test\", move |_| {\n        new_data.insert(\"test2\".to_owned(), \"some other data again\".to_owned());\n        Ok(Response::with((status::Ok, new_data.get(\"test\".to_owned()).unwrap())))\n    });\n}\n</code></pre>\n"}], "owner": {"reputation": 1086, "user_id": 2111533, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/db1096a59107ffe4dce1bcfd648048fb?s=128&d=identicon&r=PG&f=1", "display_name": "Jan", "link": "https://stackoverflow.com/users/2111533/jan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 567, "favorite_count": 0, "accepted_answer_id": 33945063, "answer_count": 1, "score": 0, "last_activity_date": 1448562406, "creation_date": 1448559535, "question_id": 33944411, "link": "https://stackoverflow.com/questions/33944411/closures-use-of-moved-value", "title": "Closures - use of moved value", "body": "<p>I am currently trying to work with the <a href=\"https://github.com/iron/iron\" rel=\"nofollow\">iron</a> framework. I am using their middleware <a href=\"https://github.com/iron/router\" rel=\"nofollow\">router</a>. My problem now is that I have a variable called <code>default_data</code> which i want to use by default. From earlier research, I know that I have to use the <code>move</code> keyword in my closures. This however yields a problem with my <code>default_data</code> variable which gets unavailable for any other closures after the first one has been added to the router.</p>\n\n<p>This is roughly how the part of my code looks like:</p>\n\n<pre><code>let mut router = Router::new();\nlet default_data = std::collections::BTreeMap::&lt;String, String&gt;::new();\ndefault_data.insert(\"test\".to_string(), \"data\".to_string());\n\nrouter.get(\"/\", move |_| {\n  let mut new_data = default_data.clone();\n  new_data.insert(\"test2\".to_string(), \"some other data\".to_string());\n  Ok(Response::with((status::Ok, new_data.get(\"test2\".to_string()).unwrap())))\n}\n\nrouter.get(\"/test\", move |_| {\n  let mut new_data = default_data.clone();\n  new_data.insert(\"test2\".to_string(), \"some other data again\".to_string());\n  Ok(Response::with((status::Ok, new_data.get(\"test\".to_string()).unwrap())))\n}\n</code></pre>\n\n<p>The Error I get is <code>E0382</code>, <code>capture of moved value: 'some_data'</code>. I kind of know the problem but I dont really know how to solve this one. Im still pretty new to rust.</p>\n"}, {"tags": ["opencv", "rust", "rust-cargo"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1448552305, "post_id": 33941897, "comment_id": 55643822, "body": "sounds like undefined behavior, you should report a bug in the <code>opencv</code> crate."}, {"owner": {"reputation": 314, "user_id": 711221, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/6c9b41a3ca04ba7f8ff2d4ded3eeda59?s=128&d=identicon&r=PG", "display_name": "Knovour", "link": "https://stackoverflow.com/users/711221/knovour"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1448554610, "post_id": 33941897, "comment_id": 55645221, "body": "@ker So it&#39;s not rust problem about passing str or what?"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1448555005, "post_id": 33941897, "comment_id": 55645460, "body": "Knovour: no, it&#39;s definitely a library issue. If you get odd behavior in safe code, the issue is in the unsafe code. since your only unsafe code is the one in the opencv crate, it must be there."}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 1, "creation_date": 1450721353, "post_id": 33941897, "comment_id": 56544978, "body": "It&#39;s fixed, we should close the question as &quot;the problem can no longer be reproduced&quot;."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1451574179, "creation_date": 1451574179, "answer_id": 34548140, "question_id": 33941897, "link": "https://stackoverflow.com/questions/33941897/weird-behavior-in-rust-with-opencv/34548140#34548140", "title": "Weird behavior in Rust with OpenCV", "body": "<p>This bug was <a href=\"https://github.com/kali/opencv-rust/issues/12\" rel=\"nofollow\">reported</a> and <a href=\"https://github.com/kali/opencv-rust/commit/a3309d45917ae0081a93dd920611d629deae2930\" rel=\"nofollow\">fixed</a>. Version 0.2.2 should now work.</p>\n"}], "owner": {"reputation": 314, "user_id": 711221, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/6c9b41a3ca04ba7f8ff2d4ded3eeda59?s=128&d=identicon&r=PG", "display_name": "Knovour", "link": "https://stackoverflow.com/users/711221/knovour"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 807, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1451574179, "creation_date": 1448550738, "last_edit_date": 1451573883, "question_id": 33941897, "link": "https://stackoverflow.com/questions/33941897/weird-behavior-in-rust-with-opencv", "title": "Weird behavior in Rust with OpenCV", "body": "<p>I am trying Rust (ver 1.4.0) these days, and coding with <a href=\"https://github.com/kali/opencv-rust\" rel=\"nofollow\">opencv-rust</a> library.</p>\n\n<p>I wrote some code like this.</p>\n\n<pre><code>extern crate opencv;\n\nuse self::opencv::highgui;\nuse self::opencv::core::Mat;\n\nfn main() {\n    load(\"image/test4.jpg\");\n}\n\nfn load(path: &amp;str) {\n    let src: Mat = highgui::imread(path, 1).unwrap();\n\n    if src.empty().unwrap() {\n        println!(\"Img load error\");\n    }\n    else {\n        println!(\"Img load success\");\n    }\n}\n</code></pre>\n\n<p>When I run <code>cargo run</code> it shows <code>Img load error</code>.</p>\n\n<p>However, when I added a <code>println!</code> at first line in <code>load</code> function like</p>\n\n<pre><code>fn load(path: &amp;str) {\n    println!(\"whatever\");\n    let src: Mat = highgui::imread(path, 1).unwrap();\n\n    if src.empty().unwrap() {\n        println!(\"Img load error\");\n    }\n    else {\n        println!(\"Img load success\");\n    }\n}\n</code></pre>\n\n<p>It shows <code>Img load success</code>.</p>\n\n<p>But when I change it to other code like <code>let a: i32 = 1;</code>, it shows <code>Img load error</code> again.</p>\n\n<p>I have no idea what's going on.</p>\n\n<p>System info:</p>\n\n<ul>\n<li>OS: Manjaro Linux</li>\n<li>Kernel: 4.3.0</li>\n</ul>\n"}, {"tags": ["multithreading", "closures", "rust", "lifetime"], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": false, "score": 7, "last_activity_date": 1448546689, "last_edit_date": 1448546689, "creation_date": 1448545201, "answer_id": 33940177, "question_id": 33938547, "link": "https://stackoverflow.com/questions/33938547/cannot-call-a-function-in-a-spawned-thread-because-it-does-not-fulfill-the-requ/33940177#33940177", "title": "Cannot call a function in a spawned thread because it &quot;does not fulfill the required lifetime&quot;", "body": "<p>Your closure captures a string slice, therefore its environment has lifetime no longer than that of this slice, but <a href=\"http://doc.rust-lang.org/std/thread/fn.spawn.html\" rel=\"noreferrer\"><code>thread::spawn()</code></a> requires its argument to have static lifetime:</p>\n\n<pre><code>pub fn spawn&lt;F, T&gt;(f: F) -&gt; JoinHandle&lt;T&gt; \n    where F: FnOnce() -&gt; T, \n          F: Send + 'static, \n          T: Send + 'static\n</code></pre>\n\n<p>(note the <code>F: 'static</code> requirement)</p>\n\n<p>This is necessary because when the thread spawned by <code>thread::spawn()</code> gets to run, the string from which the slice is taken may already be destroyed. Rust has actually prevented an error in your code!</p>\n\n<p>There are several ways to fix it.</p>\n\n<p>1) The simplest way would be to clone the string for each thread:</p>\n\n<pre><code>fn start(host: &amp;str) {\n    {\n        let host = host.to_owned();\n        thread::spawn(move || testf(&amp;host));\n    }\n    {\n        let host = host.to_owned();\n        thread::spawn(move || testf(&amp;host));\n    }\n}\n</code></pre>\n\n<p>This way each thread receives its own copy of the string which will be destroyed when the thread itself finishes.</p>\n\n<p>2) If you know that your threads should finish before <code>start()</code> function ends, you can use a third-party librariy like <a href=\"https://github.com/aturon/crossbeam\" rel=\"noreferrer\">crossbeam</a> to pass references into spawned threads:</p>\n\n<pre><code>extern crate crossbeam;\n\nfn start(host: &amp;str) {\n    crossbeam::scope(|scope| {\n        scope.spawn(move || testf(host));\n        scope.spawn(move || testf(host));\n    });\n}\n</code></pre>\n\n<p>This way <code>start()</code> will wait until both threads spawns in <code>scoped()</code> has finished before returning, making sure that whatever string <code>host</code> points to won't be destroyed prematurely.</p>\n\n<p>Previously such functionality was included in the standard library, but the way it was implemented <a href=\"https://github.com/rust-lang/rust/pull/24385\" rel=\"noreferrer\">was found to be unsound</a>, so it was deprecated; a proper replacement for this functionality is yet to be added back into the standard library.</p>\n\n<p>3) Even another alternative would be to use <code>Arc&lt;String&gt;</code> to share the string between threads, but this would require more significant changes outside of <code>start()</code>:</p>\n\n<pre><code>use std::sync::Arc;\n\nfn start(host: Arc&lt;String&gt;) {\n    {\n        let host = host.clone();\n        thread::spawn(move || testf(&amp;host));\n    }\n    {\n        let host = host.clone();\n        thread::spawn(move || testf(&amp;host));\n    }\n}\n</code></pre>\n\n<p>With this approach you need to keep your string inside an <code>Arc</code> (which is an \"atomically reference counted\" pointer), so this requires you to change the code which calls <code>start()</code>. Cloning is probably better. Of course, if you want to share not <code>&amp;str</code> but <code>&amp;SomeStruct</code> where <code>SomeStruct</code> is large and/or not cloneable, there is no way to avoid scoping xor <code>Arc</code>.</p>\n"}, {"comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 1, "creation_date": 1448546751, "post_id": 33940682, "comment_id": 55640326, "body": "Note that this would work only if you always pass string literals to your <code>start()</code> function. It won&#39;t work, for example, here: <code>let s: String = &quot;host&quot;.to_owned(); start(&amp;s);</code>."}], "tags": [], "owner": {"reputation": 993, "user_id": 4541287, "user_type": "registered", "accept_rate": 14, "profile_image": "https://www.gravatar.com/avatar/64f22664ee95fd0770558a2d2daeb879?s=128&d=identicon&r=PG&f=1", "display_name": "Bogdan Ruzhitskiy", "link": "https://stackoverflow.com/users/4541287/bogdan-ruzhitskiy"}, "is_accepted": false, "score": 0, "last_activity_date": 1448546698, "creation_date": 1448546698, "answer_id": 33940682, "question_id": 33938547, "link": "https://stackoverflow.com/questions/33938547/cannot-call-a-function-in-a-spawned-thread-because-it-does-not-fulfill-the-requ/33940682#33940682", "title": "Cannot call a function in a spawned thread because it &quot;does not fulfill the required lifetime&quot;", "body": "<p>Declaration of thread::spawn function tried to tell me about my problem :)</p>\n\n<pre><code>pub fn spawn&lt;F, T&gt;(f: F) -&gt; JoinHandle&lt;T&gt; where F: FnOnce() -&gt; T, F: Send + 'static, T: Send + 'static\n</code></pre>\n\n<p>so, I can fix that using (host: &amp;'static str) insted of (host: &amp;str)</p>\n\n<pre><code>fn testf(host: &amp;str) {}\n\nfn start(host: &amp;'static str) {\n    thread::spawn(move || testf(host));\n    thread::spawn(move || testf(host));\n}\n</code></pre>\n\n<p>it works great for me</p>\n"}], "owner": {"reputation": 993, "user_id": 4541287, "user_type": "registered", "accept_rate": 14, "profile_image": "https://www.gravatar.com/avatar/64f22664ee95fd0770558a2d2daeb879?s=128&d=identicon&r=PG&f=1", "display_name": "Bogdan Ruzhitskiy", "link": "https://stackoverflow.com/users/4541287/bogdan-ruzhitskiy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1810, "favorite_count": 0, "answer_count": 2, "score": 1, "last_activity_date": 1448895592, "creation_date": 1448540325, "last_edit_date": 1448895592, "question_id": 33938547, "link": "https://stackoverflow.com/questions/33938547/cannot-call-a-function-in-a-spawned-thread-because-it-does-not-fulfill-the-requ", "title": "Cannot call a function in a spawned thread because it &quot;does not fulfill the required lifetime&quot;", "body": "<p>I can run this code</p>\n\n<pre><code>fn testf(host: &amp;str) {}\n\nfn start(host: &amp;str) {\n    testf(host);\n    testf(host);\n}\n</code></pre>\n\n<p>but for some reason, I can't run this one:</p>\n\n<pre><code>fn testf(host: &amp;str) {}\n\nfn start(host: &amp;str) {\n    thread::spawn(move || testf(host));\n    thread::spawn(move || testf(host));\n}\n</code></pre>\n\n<p>because of the following error</p>\n\n<pre><code>src/server.rs:30:5: 30:18 error: the type `[closure@src/server.rs:30:19: 30:38 host:&amp;str]` does not fulfill the required lifetime\nsrc/server.rs:30     thread::spawn(move || testf(host));\n                     ^~~~~~~~~~~~~\nnote: type must outlive the static lifetime\nerror: aborting due to previous error\n</code></pre>\n\n<p>Can somebody explain me, what is wrong with it and how to fix it?</p>\n"}, {"tags": ["c", "rust", "ffi"], "answers": [{"comments": [{"owner": {"reputation": 95, "user_id": 979802, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/711e1097e582cd1738dc2c6b1d9feeea?s=128&d=identicon&r=PG", "display_name": "deadc0de", "link": "https://stackoverflow.com/users/979802/deadc0de"}, "edited": false, "score": 0, "creation_date": 1448535846, "post_id": 33929480, "comment_id": 55633499, "body": "Thanks! I don&#39;t quite understand how to get it working with the c_void and how to &quot;leak&quot; the TraitObject.  I can&#39;t really/don&#39;t want to change the C side - and would wanna use as little overhead/indirection as possible. Maybe what I want is not easily achievable. (PS: I can pass extra arguments into the real C function, so maybe I can pass the type down to rust? )"}], "tags": [], "owner": {"reputation": 13948, "user_id": 283342, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e3ef6dbec3a443e7cda5b5624311ca08?s=128&d=identicon&r=PG&f=1", "display_name": "Adrian", "link": "https://stackoverflow.com/users/283342/adrian"}, "is_accepted": false, "score": 4, "last_activity_date": 1448504659, "last_edit_date": 1448504659, "creation_date": 1448503368, "answer_id": 33929480, "question_id": 33929079, "link": "https://stackoverflow.com/questions/33929079/rust-ffi-passing-trait-object-as-context-to-call-callbacks-on/33929480#33929480", "title": "Rust FFI passing trait object as context to call callbacks on", "body": "<p>Rust trait objects such as <code>Box&lt;Foo&gt;</code> are double the size of a normal pointer, so you can't use <code>void *</code> to represent them. See <a href=\"https://doc.rust-lang.org/std/raw/struct.TraitObject.html\" rel=\"nofollow\"><code>std::raw::TraitObject</code></a> for more information. Here is a working version of your code:</p>\n\n<p>program.c:</p>\n\n<pre><code>#include &lt;dlfcn.h&gt;\n#include &lt;stdio.h&gt;\n\nstruct rs_trait_obj {\n    void *data;\n    void *vtable;\n};\n\nstruct rs_trait_obj global_ctx;\n\nvoid c_function(struct rs_trait_obj ctx) {\n    printf(\"Called c_function\\n\");\n    global_ctx = ctx;\n}\n\nint main(void) {\n    void *thing = dlopen(\"thing/target/debug/libthing.dylib\", RTLD_NOW | RTLD_GLOBAL);\n    if (!thing) {\n        printf(\"error: %s\\n\", dlerror());\n        return 1;\n    }\n    void (*rust_function)(void) = dlsym(thing, \"rust_function\");\n    void (*rust_cb)(struct rs_trait_obj) = dlsym(thing, \"rust_cb\");\n    printf(\"rust_function = %p\\n\", rust_function);\n    rust_function();\n\n  rust_cb(global_ctx);\n}\n</code></pre>\n\n<p>lib.rs:</p>\n\n<pre><code>#![feature(raw)]\n\nextern crate libc;\n\nuse std::raw::TraitObject;\nuse std::mem;\n\npub trait Foo {\n    fn callback(&amp;self);\n}\n\nextern {\n    fn c_function(context: TraitObject);\n}\n\npub struct MyFoo;\nimpl Foo for MyFoo {\n    fn callback(&amp;self) {\n        println!(\"callback on trait\");\n    }\n}\n\n#[no_mangle]\npub extern fn rust_cb(context: TraitObject) {\n    unsafe {\n        let cb: Box&lt;Foo&gt; = mem::transmute(context);\n        cb.callback();\n    }\n}\n\n#[no_mangle]\npub extern fn rust_function() {\n    println!(\"Called rust_function\");\n    let tmp: Box&lt;Foo&gt; = Box::new(MyFoo);\n    unsafe {\n        c_function(mem::transmute(tmp));\n    }\n}\n</code></pre>\n\n<p>This will only work on nightly rustc (because of the <code>#![feature(raw)]</code>) and will also give a warning because <code>TraitObject</code> isn't FFI-safe. If you want something that will work on stable, you can define some struct of an appropriate size like this and use it instead of <code>TraitObject</code>:</p>\n\n<pre><code>#[repr(C)]\nstruct FFITraitObject {\n    data: usize,\n    vtable: usize,\n}\n</code></pre>\n\n<p>Another option, of course, would just be to use <code>Box&lt;Foo&gt;</code> in place of <code>TraitObject</code>, but then you would still get a warning:</p>\n\n<pre><code>extern crate libc;\n\npub trait Foo {\n    fn callback(&amp;self);\n}\n\nextern {\n    fn c_function(context: Box&lt;Foo&gt;);\n}\n\npub struct MyFoo;\nimpl Foo for MyFoo {\n    fn callback(&amp;self) {\n        println!(\"callback on trait\");\n    }\n}\n\n#[no_mangle]\npub extern fn rust_cb(context: Box&lt;Foo&gt;) {\n    context.callback();\n}\n\n#[no_mangle]\npub extern fn rust_function() {\n    println!(\"Called rust_function\");\n    let tmp: Box&lt;Foo&gt; = Box::new(MyFoo);\n    unsafe {\n        c_function(tmp);\n    }\n}\n</code></pre>\n\n<p>If you really want to use a <code>void *</code>, you could consider leaking the <code>TraitObject</code> as well as the <code>MyFoo</code> and use two levels of indirection.</p>\n"}, {"comments": [{"owner": {"reputation": 95, "user_id": 979802, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/711e1097e582cd1738dc2c6b1d9feeea?s=128&d=identicon&r=PG", "display_name": "deadc0de", "link": "https://stackoverflow.com/users/979802/deadc0de"}, "edited": false, "score": 0, "creation_date": 1448571107, "post_id": 33944373, "comment_id": 55652457, "body": "Awesome, thank you! I think I understand it now. Don&#39;t know why, but I&#39;m finding it quite hard to get my head around all that stuff coming from C :("}, {"owner": {"reputation": 834, "user_id": 1569755, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/8b2ab6a039c6845ce04c4f495f3802bb?s=128&d=identicon&r=PG", "display_name": "Benni", "link": "https://stackoverflow.com/users/1569755/benni"}, "edited": false, "score": 0, "creation_date": 1576536655, "post_id": 33944373, "comment_id": 104924574, "body": "<code>rust_function</code> doesn&#39;t have to be pub extern, or does it?"}], "tags": [], "owner": {"reputation": 13948, "user_id": 283342, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e3ef6dbec3a443e7cda5b5624311ca08?s=128&d=identicon&r=PG&f=1", "display_name": "Adrian", "link": "https://stackoverflow.com/users/283342/adrian"}, "is_accepted": true, "score": 5, "last_activity_date": 1448559330, "creation_date": 1448559330, "answer_id": 33944373, "question_id": 33929079, "link": "https://stackoverflow.com/questions/33929079/rust-ffi-passing-trait-object-as-context-to-call-callbacks-on/33944373#33944373", "title": "Rust FFI passing trait object as context to call callbacks on", "body": "<p>So, if you need to represent the <code>Foo</code> as a <code>void *</code>, you can use this:</p>\n\n<pre><code>extern crate libc;\n\npub trait Foo {\n    fn callback(&amp;self);\n}\n\nextern {\n    fn c_function(context: *mut libc::c_void);\n}\n\npub struct MyFoo;\nimpl Foo for MyFoo {\n    fn callback(&amp;self) {\n        println!(\"callback on trait\");\n    }\n}\n\n#[no_mangle]\npub extern fn rust_cb(context: *mut Box&lt;Foo&gt;) {\n    unsafe {\n        let cb: Box&lt;Box&lt;Foo&gt;&gt; = Box::from_raw(context);\n        cb.callback();\n    }\n}\n\n#[no_mangle]\npub extern fn rust_function() {\n    println!(\"Called rust_function\");\n    let tmp: Box&lt;Box&lt;Foo&gt;&gt; = Box::new(Box::new(MyFoo));\n    unsafe {\n        c_function(Box::into_raw(tmp) as *mut Box&lt;Foo&gt; as *mut libc::c_void);\n    }\n}\n</code></pre>\n\n<p>I think you may be misunderstanding what a trait object is. A trait object is a type that is the size of two pointers (so, 128 bits on a 64-bit system). In this example, <code>Foo</code> is not a trait object, it is a dynamically sized type (i.e. a type which has a variable size, such as <code>str</code>). <code>Box&lt;Foo&gt;</code> is a trait object. <code>Box&lt;Box&lt;Foo&gt;&gt;</code> is neither a trait object or a dynamically sized type, it is a type that has the same size as a pointer, which is why we need to use it here since we want to convert it into a <code>void *</code>.</p>\n\n<p>I call it \"leaking\" because when you call <code>Box::into_raw</code>, you are leaking the memory of whatever is in the box, which means that that you are responsible for making sure the destructor (the <code>Drop</code> implementation) gets called.</p>\n"}], "owner": {"reputation": 95, "user_id": 979802, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/711e1097e582cd1738dc2c6b1d9feeea?s=128&d=identicon&r=PG", "display_name": "deadc0de", "link": "https://stackoverflow.com/users/979802/deadc0de"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1913, "favorite_count": 2, "accepted_answer_id": 33944373, "answer_count": 2, "score": 5, "last_activity_date": 1448571153, "creation_date": 1448500270, "last_edit_date": 1448571153, "question_id": 33929079, "link": "https://stackoverflow.com/questions/33929079/rust-ffi-passing-trait-object-as-context-to-call-callbacks-on", "title": "Rust FFI passing trait object as context to call callbacks on", "body": "<p>Okay, I'm trying to achieve the following:</p>\n\n<ol>\n<li>C calls into rust</li>\n<li>rust calls back into c and registers a callback on a user defined trait object</li>\n<li>c calls into rust with the context</li>\n<li>rust calls the callback on the context (trait object)</li>\n</ol>\n\n<p>I've been playing around with it quite a bit. I got quite far, but still not quite there.</p>\n\n<p>The C bit:</p>\n\n<pre><code>#include &lt;dlfcn.h&gt;\n#include &lt;stdio.h&gt;\n\nvoid *global_ctx;\n\nvoid c_function(void* ctx) {\n    printf(\"Called c_function\\n\");\n    global_ctx = ctx;\n}\n\nint main(void) {\n    void *thing = dlopen(\"thing/target/debug/libthing.dylib\", RTLD_NOW | RTLD_GLOBAL);\n    if (!thing) {\n        printf(\"error: %s\\n\", dlerror());\n        return 1;\n    }\n    void (*rust_function)(void) = dlsym(thing, \"rust_function\");\n    void (*rust_cb)(void*) = dlsym(thing, \"rust_cb\");\n    printf(\"rust_function = %p\\n\", rust_function);\n    rust_function();\n\n    rust_cb(global_ctx);\n}\n</code></pre>\n\n<p>The rust bit:</p>\n\n<pre><code>extern crate libc;\n\n\npub trait Foo {\n    fn callback(&amp;self);\n}\n\nextern {\n    fn c_function(context: *mut libc::c_void);\n}\n\npub struct MyFoo;\nimpl Foo for MyFoo {\n    fn callback(&amp;self) {\n        println!(\"callback on trait\");\n    }\n}\n\n#[no_mangle]\npub extern fn rust_cb(context: *mut Foo) {\n    unsafe {\n        let cb:Box&lt;Foo&gt; = Box::from_raw(context);\n        cb.callback();\n    }\n}\n\n#[no_mangle]\npub extern fn rust_function() {\n    println!(\"Called rust_function\");\n    let tmp = Box::new(MyFoo);\n    unsafe {\n        c_function(Box::into_raw(tmp) as *const Foo as *mut libc::c_void);\n    }\n}\n</code></pre>\n\n<p>The issue:</p>\n\n<ul>\n<li>My program segfaults when I try to call \"callback\" on the trait object in \"rust_cb\"</li>\n</ul>\n\n<p>One Solution:\n - Change the function signature of \"rust_cb\" to </p>\n\n<pre><code>pub extern fn rust_cb(context: *mut MyFoo)\n</code></pre>\n\n<p>but that's not what I want, as I'm trying to create a safe wrapper that only knows the trait of the listener</p>\n\n<p>Any help appreciated</p>\n\n<p>PS: my assumption is that it segfaults, because the compiler doesn't know the offset of callback on the trait Foo, it needs the actual object to determine where it is. but then i have no idea how to work around that</p>\n"}]