[{"tags": ["multithreading", "rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1478103670, "post_id": 40384274, "comment_id": 68021564, "body": "For hindsights into <code>Send</code> and <code>Sync</code>, you might want to read <a href=\"http://stackoverflow.com/questions/28387421/what-are-examples-of-types-that-implement-only-one-of-send-and-sync\" title=\"what are examples of types that implement only one of send and sync\">stackoverflow.com/questions/28387421/&hellip;</a>"}], "answers": [{"tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": true, "score": 27, "last_activity_date": 1478191436, "last_edit_date": 1478191436, "creation_date": 1478103503, "answer_id": 40384792, "question_id": 40384274, "link": "https://stackoverflow.com/questions/40384274/rust-mpscsender-cannot-be-shared-between-threads/40384792#40384792", "title": "Rust mpsc::Sender cannot be shared between threads?", "body": "<p>Sender cannot be <em>shared</em> between threads, but it can be <em>sent</em>!</p>\n\n<p>It implements the trait <code>Send</code> but not <code>Sync</code> (Sync: Safe to access shared reference to <code>Sender</code> across threads).</p>\n\n<p>The design of channels intends that you <code>.clone()</code> the sender and pass it as a value to a thread (for each thread you have). You are missing the <code>move</code> keyword on the thread's closure, which instructs the closure to capture variables by taking ownership of them.</p>\n\n<p>If you must share a single channel endpoint between several threads, it must be wrapped in a mutex. <code>Mutex&lt;Sender&lt;T&gt;&gt;</code> <em>is</em> <code>Sync + Send where T: Send</code>.</p>\n\n<p>Interesting implementation note: The channel starts out for use as a stream where it has a single producer. The internal data structures are upgraded to a multi-producer implementation the first time a sender is cloned.</p>\n"}, {"tags": [], "owner": {"reputation": 522, "user_id": 6070255, "user_type": "registered", "profile_image": "https://graph.facebook.com/1700571903515060/picture?type=large", "display_name": "Aunmag", "link": "https://stackoverflow.com/users/6070255/aunmag"}, "is_accepted": false, "score": 0, "last_activity_date": 1608285063, "creation_date": 1608285063, "answer_id": 65354846, "question_id": 40384274, "link": "https://stackoverflow.com/questions/40384274/rust-mpscsender-cannot-be-shared-between-threads/65354846#65354846", "title": "Rust mpsc::Sender cannot be shared between threads?", "body": "<p>You may use <a href=\"https://doc.rust-lang.org/std/sync/mpsc/struct.SyncSender.html\" rel=\"nofollow noreferrer\">std::sync::mpsc::SyncSender</a> from the standard library. The diffrenece is that it implements the <code>Sync</code> trait but it will may block if there is no space in the internal buffer while sending a message.</p>\n<p>For more information:</p>\n<ul>\n<li><a href=\"https://doc.rust-lang.org/std/sync/mpsc/fn.channel.html\" rel=\"nofollow noreferrer\">std::sync::mpsc::channel</a></li>\n<li><a href=\"https://doc.rust-lang.org/std/sync/mpsc/fn.sync_channel.html\" rel=\"nofollow noreferrer\">std::sync::mpsc::sync_channel</a></li>\n</ul>\n"}], "owner": {"reputation": 2324, "user_id": 2272652, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/vKcw7.jpg?s=128&g=1", "display_name": "Christian Grabowski", "link": "https://stackoverflow.com/users/2272652/christian-grabowski"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 9299, "favorite_count": 0, "accepted_answer_id": 40384792, "answer_count": 2, "score": 16, "last_activity_date": 1608285063, "creation_date": 1478101972, "last_edit_date": 1478105911, "question_id": 40384274, "link": "https://stackoverflow.com/questions/40384274/rust-mpscsender-cannot-be-shared-between-threads", "title": "Rust mpsc::Sender cannot be shared between threads?", "body": "<p>I thought the whole purpose of a channel was to share data between threads.  I have this code, <a href=\"http://rustbyexample.com/std_misc/channels.html\" rel=\"noreferrer\">based on this example</a>:</p>\n\n<pre><code>let tx_thread = tx.clone();\nlet ctx = self;\nthread::spawn(|| {\n    ...\n    let result = ctx.method()\n    tx_thread.send((String::from(result), someOtherString)).unwrap();\n})\n</code></pre>\n\n<p>Where <code>tx</code> is a <code>mpsc::Sender&lt;(String, String)&gt;</code></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `std::sync::mpsc::Sender&lt;(std::string::String, std::string::String)&gt;: std::marker::Sync` is not satisfied\n   --&gt; src/my_module/my_file.rs:137:9\n    |\n137 |         thread::spawn(|| {\n    |         ^^^^^^^^^^^^^\n    |\n    = note: `std::sync::mpsc::Sender&lt;(std::string::String, std::string::String)&gt;` cannot be shared between threads safely\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&amp;std::sync::mpsc::Sender&lt;(std::string::String, std::string::String)&gt;`\n    = note: required because it appears within the type `[closure@src/my_module/my_file.rs:137:23: 153:10 res:&amp;&amp;str, ctx:&amp;&amp;my_module::my_submodule::Reader, tx_thread:&amp;std::sync::mpsc::Sender&lt;(std::string::String, std::string::String)&gt;]`\n    = note: required by `std::thread::spawn`\n</code></pre>\n\n<p>I'm confused where I went wrong.  Unless I'm looking in the wrong place and my issue is actually my use of <code>let ctx = self;</code>?</p>\n"}, {"tags": ["windows", "qt", "cmake", "rust", "qt5"], "answers": [{"comments": [{"owner": {"reputation": 13260, "user_id": 6612932, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/Q3mwe.jpg?s=128&g=1", "display_name": "rgmt", "link": "https://stackoverflow.com/users/6612932/rgmt"}, "reply_to_user": {"reputation": 9987, "user_id": 3809375, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/EA10l.png?s=128&g=1", "display_name": "BPL", "link": "https://stackoverflow.com/users/3809375/bpl"}, "edited": false, "score": 0, "creation_date": 1478090320, "post_id": 40379428, "comment_id": 68012069, "body": "@BPL I edited my answer. Just replace the paths with <code>C:&#47;Qt&#47;5.7&#47;msvc2015_64&#47;lib&#47;cmake&#47;Qt5Core</code> for <code>Qt5Core_DIR</code>, and so on for <code>Qt5Gui_DIR</code> and <code>Qt5Widgets_DIR</code>. Always prefer &quot;/&quot; to the native &quot;\\&quot; in paths. CMake may interpret them as escaping characters."}, {"owner": {"reputation": 13260, "user_id": 6612932, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/Q3mwe.jpg?s=128&g=1", "display_name": "rgmt", "link": "https://stackoverflow.com/users/6612932/rgmt"}, "reply_to_user": {"reputation": 9987, "user_id": 3809375, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/EA10l.png?s=128&g=1", "display_name": "BPL", "link": "https://stackoverflow.com/users/3809375/bpl"}, "edited": false, "score": 0, "creation_date": 1478092384, "post_id": 40379428, "comment_id": 68013436, "body": "Your attempt <code>cmake -D Qt5_DIR=C:&#47;Qt&#47;5.7&#47;msvc2015_64&#47;lib&#47;cmake&#47;Qt5 -D Qt5Gui_DIR=C:&#47;Qt&#47;5.7&#47;msvc2015_64&#47;lib&#47;cmake&#47;Qt5Gui -D Qt5Widgets_DIR=C:&#47;Qt&#47;5.7&#47;msvc2015_64&#47;lib&#47;cmake&#47;Qt5Widgets -G &quot;Sublime Text 2 - Ninja&quot; ..</code> is the right one. qt.inline is ill formed: the file <code>qversionnumber.cxx</code> listed in <code>src&#47;core&#47;mod.cmake</code> is indeed missing. There is a branch in the repo without that file listed: change your repo to this branch using <code>git checkout qt5.5</code> in a git bash"}, {"owner": {"reputation": 13260, "user_id": 6612932, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/Q3mwe.jpg?s=128&g=1", "display_name": "rgmt", "link": "https://stackoverflow.com/users/6612932/rgmt"}, "reply_to_user": {"reputation": 9987, "user_id": 3809375, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/EA10l.png?s=128&g=1", "display_name": "BPL", "link": "https://stackoverflow.com/users/3809375/bpl"}, "edited": false, "score": 0, "creation_date": 1478092461, "post_id": 40379428, "comment_id": 68013501, "body": "This should be a branch made for Qt5.5 and you have Qt5.7: it may fail. If it fails, get back to the master branch and remove the line adding <code>qversionnumber.cxx</code> in <code>src&#47;core&#47;mod.cmake</code> (hoping there will be no more error after that), or install Qt5.5"}, {"owner": {"reputation": 9987, "user_id": 3809375, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/EA10l.png?s=128&g=1", "display_name": "BPL", "link": "https://stackoverflow.com/users/3809375/bpl"}, "edited": false, "score": 0, "creation_date": 1478095740, "post_id": 40379428, "comment_id": 68015829, "body": "I&#39;ve forked this project <a href=\"https://github.com/brupelo/qt.inline\" rel=\"nofollow noreferrer\">here</a>. After commenting some unexisting autogenerated wrapper files and commenting some specific compiler stuff I got the Sublime Project using <code>cmake -D Qt5Core_DIR=C:\\\\Qt\\\\5.7\\\\msvc2015_64\\\\lib\\\\cmake\\\\Qt5Core -D Qt5Gui_DIR=C:\\\\Qt\\\\5.7\\\\msvc2015_64\\\\lib\\\\cmake\\\\Qt5Gui -D Qt5Widgets_DIR=C:\\\\Qt\\\\5.7\\\\msvc2015_64\\\\lib\\\\cmake\\\\Qt5Widg&zwnj;&#8203;\u200c\u200bets -G &quot;Sublime Text 2 - Ninja&quot; ..</code>. Problem comes when I try to build it, here&#39;s the <a href=\"https://bpaste.net/show/2a6fd5072a96\" rel=\"nofollow noreferrer\">log</a>"}, {"owner": {"reputation": 13260, "user_id": 6612932, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/Q3mwe.jpg?s=128&g=1", "display_name": "rgmt", "link": "https://stackoverflow.com/users/6612932/rgmt"}, "reply_to_user": {"reputation": 9987, "user_id": 3809375, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/EA10l.png?s=128&g=1", "display_name": "BPL", "link": "https://stackoverflow.com/users/3809375/bpl"}, "edited": false, "score": 0, "creation_date": 1478119513, "post_id": 40379428, "comment_id": 68030599, "body": "I looked the corresponding code and how the cmake project is configured. It seems qt.inline is not compatible with visual :/"}, {"owner": {"reputation": 9987, "user_id": 3809375, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/EA10l.png?s=128&g=1", "display_name": "BPL", "link": "https://stackoverflow.com/users/3809375/bpl"}, "edited": false, "score": 0, "creation_date": 1478120225, "post_id": 40379428, "comment_id": 68030956, "body": "In the meantime I&#39;ve switched to this another <a href=\"https://github.com/rust-qt\" rel=\"nofollow noreferrer\">alternative</a>, it works out of the box. It takes 5500s to be built on debug mode and 1873s in release mode. Now i&#39;m trying to figure out how to vendor it for not rebuilding over and over. I guess I&#39;ll validate your answer, let&#39;s consider it helped out to create the *.sublime-project, even if building it was a nightmare ;-)"}], "tags": [], "owner": {"reputation": 13260, "user_id": 6612932, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/Q3mwe.jpg?s=128&g=1", "display_name": "rgmt", "link": "https://stackoverflow.com/users/6612932/rgmt"}, "is_accepted": true, "score": 1, "last_activity_date": 1478090180, "last_edit_date": 1478090180, "creation_date": 1478088004, "answer_id": 40379428, "question_id": 40379270, "link": "https://stackoverflow.com/questions/40379270/how-to-use-qt-with-rust/40379428#40379428", "title": "How to use Qt with Rust?", "body": "<p><a href=\"https://github.com/kitech/qt.inline\" rel=\"nofollow noreferrer\">qt.inline</a> depends on Qt. Assuming you installed Qt in your system, the errors suggest you didn't specify where Qt is installed.</p>\n\n<p>On a \"normal\" project using <code>find_package(Qt5 ...)</code>, you would have done:</p>\n\n<pre><code>cmake .. -D Qt5_DIR=/path/to/qt -G \"Sublime Text 2 - Ninja\"\n</code></pre>\n\n<p>Where <code>/path/to/qt</code> is the directory in your Qt install containing <code>Qt5Config.cmake</code>. Given <code>&lt;prefix&gt;</code> is the root dir of your Qt install, this should be something like <code>&lt;prefix&gt;/lib/cmake/Qt5</code>.</p>\n\n<p>qt.inline is more specific and <a href=\"https://github.com/kitech/qt.inline/blob/master/CMakeLists.txt#L16\" rel=\"nofollow noreferrer\">ask explicitly</a> for specific modules of Qt, namely <code>Qt5Core</code>, <code>Qt5Gui</code> and <code>Qt5Widgets</code>. So use the same procedure with these modules:</p>\n\n<pre><code>cmake -D Qt5Core_DIR=/path/to/Qt5CoreConfig.cmake\n      -D Qt5Gui_DIR=/path/to/Qt5GuiConfig.cmake\n      -D Qt5Widgets_DIR=/path/to/Qt5WidgetsConfig.cmake\n      ...\n</code></pre>\n"}], "owner": {"reputation": 9987, "user_id": 3809375, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/EA10l.png?s=128&g=1", "display_name": "BPL", "link": "https://stackoverflow.com/users/3809375/bpl"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2321, "favorite_count": 0, "accepted_answer_id": 40379428, "answer_count": 1, "score": 0, "last_activity_date": 1521226436, "creation_date": 1478087454, "last_edit_date": 1521226436, "question_id": 40379270, "link": "https://stackoverflow.com/questions/40379270/how-to-use-qt-with-rust", "title": "How to use Qt with Rust?", "body": "<p>Today I've decided to learn Rust and I was wondering how hard is to use Qt with Rust. The first Google results gave me <a href=\"https://github.com/kitech/qt.rs\" rel=\"nofollow noreferrer\">qt.rs</a>, so I've decided to give it a shot.</p>\n\n<p>My Qt installation lives in <code>C:\\Qt\\5.7\\</code> and <code>Qt5Config.cmake</code> lives in <code>C:\\Qt\\5.7\\msvc2015_64\\lib\\cmake\\Qt5</code></p>\n\n<p>What I've tried is:</p>\n\n<ul>\n<li><code>git clone https://github.com/kitech/qt.inline.git</code></li>\n<li><code>cd qt.inline &amp;&amp; mkdir build</code></li>\n<li><code>cmake -D Qt5_DIR=C:\\Qt\\5.7\\msvc2015_64\\lib\\cmake\\Qt5 -G \"Sublime Text 2 - Ninja\" ..</code></li>\n<li><code>cmake -D Qt5Core_DIR=C:\\\\Qt\\\\5.7\\\\msvc2015_64\\\\lib\\\\cmake\\\\Qt5Core -D Qt5Gui_DIR=C:\\\\Qt\\\\5.7\\\\msvc2015_64\\\\lib\\\\cmake\\\\Qt5Gui -D Qt5Widgets_DIR=C:\\\\Qt\\\\5.7\\\\msvc2015_64\\\\lib\\\\cmake\\\\Qt5Widgets -G \"Sublime Text 2 - Ninja\" ..</code></li>\n<li><code>cmake -D CMAKE_PREFIX_PATH=C:\\\\Qt\\\\5.7\\\\msvc2015_64\\\\ -G \"Sublime Text 2 - Ninja\" ..</code></li>\n</ul>\n\n<p>but the result was a bunch of errors:</p>\n\n<p><a href=\"https://i.stack.imgur.com/0l3Dq.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/0l3Dq.png\" alt=\"enter image description here\"></a></p>\n\n<p>I've also tried other Qt folders like {<code>C:\\Qt\\5.7\\msvc2015_64\\lib\\cmake</code>, <code>C:\\Qt\\5.7\\msvc2015_64\\lib</code>, <code>C:\\Qt\\5.7\\msvc2015_64</code>, <code>C:\\Qt\\5.7\\</code>, <code>C:\\Qt</code>} with the same luck.</p>\n\n<p>How could I solve this one?</p>\n\n<p>What would Rust's equivalent to Python's pyqt/pyside be? Is there any \"official\" Qt Rust package?</p>\n"}, {"tags": ["compilation", "rust", "borrow-checker"], "comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 0, "creation_date": 1478083165, "post_id": 40372763, "comment_id": 68007700, "body": "Aside: <code>Option&lt;Vec&gt;</code> seems fishy, a <code>Vec</code> can already be empty so wrapping it in an <code>Option</code> that you then assert shouldn&#39;t exist seems pretty useless. Even if <code>None</code> and <code>Some(empty_vec)</code> really do mean something different, that&#39;s a rather confusing distinction."}], "answers": [{"tags": [], "owner": {"reputation": 988, "user_id": 6090592, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3d5e40fcf8c369f36d04406528df52f2?s=128&d=identicon&r=PG&f=1", "display_name": "Djzin", "link": "https://stackoverflow.com/users/6090592/djzin"}, "is_accepted": true, "score": 5, "last_activity_date": 1478069857, "creation_date": 1478069857, "answer_id": 40374064, "question_id": 40372763, "link": "https://stackoverflow.com/questions/40372763/i-dont-understand-how-borrowing-works/40374064#40374064", "title": "I don&#39;t understand how borrowing works", "body": "<p>The reason your code requires ownership of the KDTree is because you are calling <code>Option::expect</code> and <code>Option::unwrap</code>. The docs for these can be found <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap\" rel=\"nofollow noreferrer\">here</a>.</p>\n\n<pre><code>impl&lt;T&gt; Option&lt;T&gt; {\n    fn unwrap(self) -&gt; T {\n        ...\n    }\n}\n</code></pre>\n\n<p>So when you are calling unwrap (or expect) the compiler rightly complains that you are taking the elements of your struct by value. To fix this, use the <code>Option::as_ref</code> <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#method.as_ref\" rel=\"nofollow noreferrer\">method</a>.</p>\n\n<pre><code>impl&lt;T&gt; Option&lt;T&gt; {\n    fn as_ref(&amp;self) -&gt; Option&lt;&amp;T&gt; {\n        ...\n    }\n}\n</code></pre>\n\n<p>This will turn a reference to an option into an optional reference, which does not require ownership. You can see this in the signature of the function - it takes <code>&amp;self</code> rather than <code>self</code>.</p>\n\n<pre><code>pub fn direct_samples(&amp;self) -&gt; Vec&lt;u32&gt; {\n    assert!(self.objects.is_some());\n    let mut direct_samples = Vec::new();\n    for (i, object) in self.objects.as_ref()\n        .expect(\"Expected tree to have objects\")\n        .iter()\n        .enumerate() {\n        if object.material().emittance &gt; 0f32 {\n            direct_samples.push(i as u32);\n        }\n    }\n    if self.left.is_some() {\n        direct_samples.extend(self.left.as_ref().unwrap().direct_samples());\n    }\n    if self.right.is_some() {\n        direct_samples.extend(self.right.as_ref().unwrap().direct_samples());\n    }\n    direct_samples\n}\n</code></pre>\n\n<blockquote>\n  <p>Do I need to implement Copy on my KDTree? Won't this use a lot of cpu/memory to copy the entire thing?</p>\n</blockquote>\n\n<p>You can't implement <code>Copy</code> on your <code>KDTree</code> because it contains heap-allocated memory (boxes) - <code>Copy</code> means that your type can be copied just by copying its bytes, but that can't happen without invalidating single ownership in this case.</p>\n"}], "owner": {"reputation": 1550, "user_id": 2731457, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/211467698cabb34f3d73c1c5ea6a0f0a?s=128&d=identicon&r=PG&f=1", "display_name": "Kyranstar", "link": "https://stackoverflow.com/users/2731457/kyranstar"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 85, "favorite_count": 0, "accepted_answer_id": 40374064, "answer_count": 1, "score": -2, "last_activity_date": 1478069857, "creation_date": 1478062648, "question_id": 40372763, "link": "https://stackoverflow.com/questions/40372763/i-dont-understand-how-borrowing-works", "title": "I don&#39;t understand how borrowing works", "body": "<p>I'm trying to write a kd-tree implementation, but I keep getting the error <code>cannot move out of borrowed content.</code></p>\n\n<p>This is my KDTree struct</p>\n\n<pre><code>pub struct KDTree {\n    pub bounding_box: Aabb,\n    pub axis: Option&lt;Axis&gt;,\n    left: Option&lt;Box&lt;KDTree&gt;&gt;,\n    right: Option&lt;Box&lt;KDTree&gt;&gt;,\n    pub objects: Option&lt;Vec&lt;Box&lt;Geometry&gt;&gt;&gt;,\n}\n</code></pre>\n\n<p>This method, however, throws that error. </p>\n\n<pre><code>pub fn direct_samples(&amp;self) -&gt; Vec&lt;u32&gt; {\n    assert!(self.objects.is_some());\n    let mut direct_samples = Vec::new();\n    for (i, object) in self.objects\n        .expect(\"Expected tree to have objects\")\n        .iter()\n        .enumerate() {\n        if object.material().emittance &gt; 0f32 {\n            direct_samples.push(i as u32);\n        }\n    }\n    if self.left.is_some() {\n        direct_samples.extend(self.left.unwrap().direct_samples());\n    }\n    if self.right.is_some() {\n        direct_samples.extend(self.right.unwrap().direct_samples());\n    }\n    direct_samples\n}\n</code></pre>\n\n<p>I understand that if I change the parameter to <code>self</code> instead of <code>&amp;self</code>, it should work, but then when I call it, it gives the error <code>use of moved value.</code></p>\n\n<pre><code>pub fn from_objects(objects: Vec&lt;Box&lt;Geometry&gt;&gt;) -&gt; Scene {\n    let tree = KDTree::from_objects(objects);\n\n    Scene {\n        camera: Camera::new(),\n        objects: tree,\n        direct_samples: tree.direct_samples(),\n    }\n}\n</code></pre>\n\n<p>Do I need to implement Copy on my KDTree? Won't this use a lot of cpu/memory to copy the entire thing?</p>\n"}, {"tags": ["sorting", "rust"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1478037727, "post_id": 40369255, "comment_id": 67992217, "body": "By multiple keys, do you mean multiple sorting criteria (each being of descending priority)?"}, {"owner": {"reputation": 1498, "user_id": 6844327, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9fWJl.jpg?s=128&g=1", "display_name": "HiDefender", "link": "https://stackoverflow.com/users/6844327/hidefender"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1478038025, "post_id": 40369255, "comment_id": 67992351, "body": "@E_net4 Yes. If the tuple was (x, y), then sort with x and break ties with y. Except in this case I want descending order for x."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478038825, "post_id": 40369255, "comment_id": 67992646, "body": "Your example works just fine for the appropriate implementations of <code>foo</code>, <code>reverse</code>, and <code>bar</code>."}], "answers": [{"comments": [{"owner": {"reputation": 1498, "user_id": 6844327, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9fWJl.jpg?s=128&g=1", "display_name": "HiDefender", "link": "https://stackoverflow.com/users/6844327/hidefender"}, "edited": false, "score": 0, "creation_date": 1478097783, "post_id": 40369685, "comment_id": 68017292, "body": "Thanks. So <code>sort_by</code> is more powerful than <code>sort_by_key</code>: <code>sort_by</code> can do everything that <code>sort_by_key</code> can do, but <code>sort_by_key</code> cannot do everything <code>sort_by</code> can do. What&#39;s the advantage of using <code>sort_by_key</code>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1498, "user_id": 6844327, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9fWJl.jpg?s=128&g=1", "display_name": "HiDefender", "link": "https://stackoverflow.com/users/6844327/hidefender"}, "edited": false, "score": 0, "creation_date": 1478099036, "post_id": 40369685, "comment_id": 68018241, "body": "@HiDefender it&#39;s way simpler for extremely common cases. It may even work for your case, as I linked to in the other question."}, {"owner": {"reputation": 1498, "user_id": 6844327, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9fWJl.jpg?s=128&g=1", "display_name": "HiDefender", "link": "https://stackoverflow.com/users/6844327/hidefender"}, "edited": false, "score": 0, "creation_date": 1478103831, "post_id": 40369685, "comment_id": 68021664, "body": "Once again, thank you. Two more questions: 1. You pass <code>&amp;b.len()</code> in the second compare. Why does cmp() not support passing ownership, only borrowing? 2. Is it necessary for your struct to have <code>[derive(Debug)]</code>? Couldn&#39;t it be sorted without that?"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 1498, "user_id": 6844327, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9fWJl.jpg?s=128&g=1", "display_name": "HiDefender", "link": "https://stackoverflow.com/users/6844327/hidefender"}, "edited": false, "score": 1, "creation_date": 1478196652, "post_id": 40369685, "comment_id": 68066947, "body": "@HiDefender the comparison operator doesn&#39;t need ownership of the right-hand member, so it just borrows. It doesn&#39;t depend on whether it&#39;s cheaper to move or pass a reference (even though it might sound like it is from a C++ programmer&#39;s perspective). Also, you wouldn&#39;t need <code>#[derive(Debug)]</code> but it&#39;s recommended that all types implement this trait."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 10, "last_activity_date": 1524191760, "last_edit_date": 1524191760, "creation_date": 1478039777, "answer_id": 40369685, "question_id": 40369255, "link": "https://stackoverflow.com/questions/40369255/reverse-specific-key-when-sorting-with-multiple-keys/40369685#40369685", "title": "Reverse specific key when sorting with multiple keys", "body": "<p>You can use <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.sort_by\" rel=\"noreferrer\"><code>sort_by</code></a> paired with <a href=\"https://doc.rust-lang.org/std/cmp/enum.Ordering.html#method.reverse\" rel=\"noreferrer\"><code>Ordering::reverse</code></a> instead of <code>sort_by_key</code>.</p>\n\n<pre><code>use std::cmp::Ordering;\n\n#[derive(Debug)]\nstruct Foo(&amp;'static str, u8);\n\nimpl Foo {\n    fn name(&amp;self) -&gt; &amp;str { self.0 }\n    fn len(&amp;self) -&gt; u8 { self.1 }\n}\n\nfn main() {\n    let mut vec = vec![Foo(\"alpha\", 1), Foo(\"beta\", 2), Foo(\"beta\", 1)];\n\n    vec.sort_by(|a, b| {\n        match a.name().cmp(b.name()).reverse() {\n            Ordering::Equal =&gt; a.len().cmp(&amp;b.len()),\n            other =&gt; other,\n        }\n    });\n\n    println!(\"{:?}\", vec);\n}\n</code></pre>\n\n<p>This sorts in reverse alphabetical order, then ties are sorted in ascending numerical order:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[Foo(\"beta\", 1), Foo(\"beta\", 2), Foo(\"alpha\", 1)]\n</code></pre>\n\n<p>Since Rust 1.17 (via <a href=\"https://github.com/rust-lang/rfcs/issues/1677\" rel=\"noreferrer\">RFC 1677</a>), you can write it like this:</p>\n\n<pre><code>vec.sort_by(|a, b| {\n    a.name().cmp(b.name()).reverse()\n        .then(a.len().cmp(&amp;b.len()))\n});\n</code></pre>\n\n<p>If you have something that can naturally be negated / inverted, you can <a href=\"https://stackoverflow.com/q/40274792/155423\">simply negate the key</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": false, "score": 2, "last_activity_date": 1478042480, "last_edit_date": 1478042480, "creation_date": 1478040586, "answer_id": 40369809, "question_id": 40369255, "link": "https://stackoverflow.com/questions/40369255/reverse-specific-key-when-sorting-with-multiple-keys/40369809#40369809", "title": "Reverse specific key when sorting with multiple keys", "body": "<p>Here's a similar approach to the problem: create a function for chaining multiple orderings:</p>\n\n<pre><code>/// chain two orderings: the first one gets more priority\nfn chain_ordering(o1: Ordering, o2: Ordering) -&gt; Ordering {\n    match o1 {\n        Ordering::Equal =&gt; o2,\n        _ =&gt; o1,\n    }\n}\n</code></pre>\n\n<p>Then use <code>sort_by</code>, possibly with pattern matching, to produce the ordering of each key:</p>\n\n<pre><code>#[derive(Debug, PartialEq)]\nstruct HeroSkill(&amp;'static str, &amp;'static str);\n\nfn main() {\n    // a vector of hero names and super powers\n    let mut v = vec![\n        HeroSkill(\"Bob\", \"X\"),\n        HeroSkill(\"Bob\", \"Y\"),\n        HeroSkill(\"Alice\", \"X\")\n    ];\n\n    // sort by name, then by super power, where Y is more powerful than X\n    v.sort_by(|&amp;HeroSkill(name1, power1), &amp;HeroSkill(name2, power2)| {\n        chain_ordering(name1.cmp(name2), power1.cmp(power2).reverse())\n    });\n\n    assert_eq!(v, vec![\n        HeroSkill(\"Alice\", \"X\"),\n        HeroSkill(\"Bob\", \"Y\"),\n        HeroSkill(\"Bob\", \"X\")\n    ]);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=33ea6a3a3ebedc49234be16a85df3399&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground</a></p>\n"}, {"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 7, "last_activity_date": 1562607183, "last_edit_date": 1562607183, "creation_date": 1478222153, "answer_id": 40413845, "question_id": 40369255, "link": "https://stackoverflow.com/questions/40369255/reverse-specific-key-when-sorting-with-multiple-keys/40413845#40413845", "title": "Reverse specific key when sorting with multiple keys", "body": "<p>Since Rust 1.19, the <a href=\"https://doc.rust-lang.org/std/cmp/struct.Reverse.html\" rel=\"nofollow noreferrer\"><code>std::cmp::Reverse</code></a> struct wraps a value and implements <code>PartialOrd</code> and <code>Ord</code> by calling <code>partial_cmp</code> and <code>cmp</code> with swapped arguments in order to return the reversed order. Just wrap the key to sort in descending order:</p>\n\n<pre><code>vec.sort_by_key(|k| (Reverse(foo(k)), bar(k)));\n</code></pre>\n\n<p>Before Rust 1.19, you can use the <a href=\"https://crates.io/crates/revord\" rel=\"nofollow noreferrer\"><code>revord</code></a> crate (<a href=\"https://docs.rs/revord/\" rel=\"nofollow noreferrer\">documentation</a>) which provides the struct <code>RevOrd</code> which provides the same benefit::</p>\n\n<pre><code>vec.sort_by_key(|k| (RevOrd(foo(k)), bar(k)));\n</code></pre>\n"}], "owner": {"reputation": 1498, "user_id": 6844327, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9fWJl.jpg?s=128&g=1", "display_name": "HiDefender", "link": "https://stackoverflow.com/users/6844327/hidefender"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3440, "favorite_count": 1, "accepted_answer_id": 40369685, "answer_count": 3, "score": 7, "last_activity_date": 1562607183, "creation_date": 1478037274, "last_edit_date": 1480865875, "question_id": 40369255, "link": "https://stackoverflow.com/questions/40369255/reverse-specific-key-when-sorting-with-multiple-keys", "title": "Reverse specific key when sorting with multiple keys", "body": "<p>When sorting with multiple keys, how can I reverse the order of an individual key? For example:</p>\n\n<pre><code>vec.sort_by_key(|k| (foo(k).reverse(), bar(k)));\n</code></pre>\n"}, {"tags": ["generics", "struct", "rust", "dereference"], "comments": [{"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1478039003, "post_id": 40368148, "comment_id": 67992711, "body": "Unlike some other languages, unfortunately Rust doesn&#39;t (yet) have higher kinded types, so type parameters have to be concrete types.  However in this case I agree with @Shepmaster that you don&#39;t need it."}], "answers": [{"comments": [{"owner": {"reputation": 1155, "user_id": 4641854, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/ebe283afcbdb0e4a9d1f20e26e969de1?s=128&d=identicon&r=PG", "display_name": "jeromefroe", "link": "https://stackoverflow.com/users/4641854/jeromefroe"}, "edited": false, "score": 0, "creation_date": 1478034559, "post_id": 40368217, "comment_id": 67990827, "body": "Awesome, thanks for the help! Going to try this out now. I would think this would be a more common technique as a way to quickly get a generic struct that can be thread safe or not depending on your needs, do you see this a lot?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1478033068, "last_edit_date": 1478033068, "creation_date": 1478032538, "answer_id": 40368217, "question_id": 40368148, "link": "https://stackoverflow.com/questions/40368148/create-a-struct-that-is-generic-over-another-generic-struct/40368217#40368217", "title": "Create a struct that is generic over another generic struct", "body": "<p>That syntax doesn't make sense, but this version compiles:</p>\n\n<pre><code>use std::ops::Deref;\nuse std::rc::Rc;\nuse std::sync::Arc;\n\nstruct Foo&lt;T&gt; {\n    val: T,\n    other: i32,\n}\n\nimpl&lt;T&gt; Foo&lt;T&gt;\n    where T: Deref&lt;Target = i32&gt;\n{\n    pub fn new(val: T, other: i32) -&gt; Self {\n        Foo {\n            val: val,\n            other: other,\n        }\n    }\n}\n\nfn main() {\n    let foo = Foo::new(Rc::new(0), 0);\n    let foo = Foo::new(Arc::new(0), 0);\n}\n</code></pre>\n\n<p>Note how the trait bounds read: <code>T: Deref&lt;Target = i32&gt;</code> \"Any <code>T</code> that implements <code>Deref</code> with a <code>Target</code> of an <code>i32</code>\".</p>\n\n<p>You can then implement methods that dereference <code>val</code>:</p>\n\n<pre><code>fn sum(&amp;self) -&gt; i32 {\n    *self.val + self.other\n}\n</code></pre>\n\n<hr>\n\n<p>In general, the concept of something like </p>\n\n<pre><code>struct Foo&lt;T&gt; {\n    val: T&lt;i32&gt;,\n}\n</code></pre>\n\n<p>Wouldn't prove useful. Just because something is parameterized over a <code>i32</code> doesn't mean you can <em>do</em> anything with that <code>i32</code>. Likewise, a type could be parameterized with something besides an <code>i32</code> (or not at all) and still give you access to an <code>i32</code>.</p>\n"}], "owner": {"reputation": 1155, "user_id": 4641854, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/ebe283afcbdb0e4a9d1f20e26e969de1?s=128&d=identicon&r=PG", "display_name": "jeromefroe", "link": "https://stackoverflow.com/users/4641854/jeromefroe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 83, "favorite_count": 0, "accepted_answer_id": 40368217, "answer_count": 1, "score": 2, "last_activity_date": 1478033068, "creation_date": 1478032242, "last_edit_date": 1478032384, "question_id": 40368148, "link": "https://stackoverflow.com/questions/40368148/create-a-struct-that-is-generic-over-another-generic-struct", "title": "Create a struct that is generic over another generic struct", "body": "<p>I am trying to create a struct in Rust that is itself generic with respect to other generic structs. That's pretty confusing so hopefully this example will makes things clearer:</p>\n\n<pre><code>use std::ops::Deref;\nuse std::rc::Rc;\n\nstruct Foo&lt;T: Deref&gt; {\n    val: T&lt;i32&gt;,\n    other: i32,\n}\n\nimpl&lt;T&gt; Foo&lt;T&gt; {\n    pub fn new(&amp;self, val: T&lt;i32&gt;, other: i32) -&gt; Self {\n        Foo {val: val, other: other}\n    }\n}\n\nfn main() {\n    let foo = Foo::new(Rc::new(0), 0);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=6657bbdae3d2b59461bdba5045d3d8b7&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">playground</a></p>\n\n<p>I would like to be able to create a <code>Foo</code> object by calling <code>new</code> with either <code>Rc&lt;i32&gt;</code> objects or <code>Arc&lt;i32&gt;</code> objects depending on whether I need thread safety or not. I get the following error when I try this though: <code>error[E0109]: type parameters are not allowed on this type</code>, as the compiler complains about the <code>i32</code> in <code>val: T&lt;i32&gt;,</code>. Is this possible in Rust? If so, can I safely call methods on <code>i32</code> assuming it will auto dereference it?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1478030068, "last_edit_date": 1478030068, "creation_date": 1478028571, "answer_id": 40367290, "question_id": 40367208, "link": "https://stackoverflow.com/questions/40367208/ambiguous-associated-type-error-when-pattern-matching-over-a-hashmapentry-e/40367290#40367290", "title": "&quot;ambiguous associated type&quot; error when pattern matching over a HashMap::Entry (Error code E0223)", "body": "<p>There is a simple typo. Refer to <a href=\"https://doc.rust-lang.org/std/collections/hash_map/enum.Entry.html\" rel=\"nofollow noreferrer\">the documentation for <code>Entry</code></a>:</p>\n\n<pre><code>std::collections::hash_map::Entry\n</code></pre>\n\n<p>You want to use something like</p>\n\n<pre><code>match hash_map.entry(key) {\n    std::collections::hash_map::Entry::Vacant(entry) =&gt; (),\n    std::collections::hash_map::Entry::Occupied(entry) =&gt; (),\n}\n</code></pre>\n\n<p>Although it's normally </p>\n\n<pre><code>use std::collections::hash_map::Entry;\n\nmatch hash_map.entry(key) {\n    Entry::Vacant(entry) =&gt; (),\n    Entry::Occupied(entry) =&gt; (),\n}\n</code></pre>\n\n<hr>\n\n<p>This unlocks many other errors in the code:</p>\n\n<ol>\n<li>You cannot insert a vector because you've declared the hashmap as having a <code>i32</code> as the value.</li>\n<li>There are mismatches with comparing references</li>\n<li>There are attempts to push a value onto an iterator.</li>\n<li>There is missing mutability.</li>\n</ol>\n\n<p>Note that often you don't even need to match on <code>Entry</code> explicitly. Seems like the code should be</p>\n\n<pre><code>pub fn stack_overflow_example(hash_map: &amp;mut HashMap&lt;i32, Vec&lt;i32&gt;&gt;) {\n    let mut numbers_affected = 0;\n\n    let numbers = hash_map.entry(1).or_insert_with(Vec::new);\n\n    for number in numbers.iter_mut() {\n        if *number &lt; 10 {\n            *number += 1;\n\n            numbers_affected += 1;\n        }\n    }\n\n    if numbers_affected == 0 {\n        numbers.push(1)\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 53, "user_id": 5851894, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/445e0929104c9681a163828eb1a838c7?s=128&d=identicon&r=PG&f=1", "display_name": "J.F.", "link": "https://stackoverflow.com/users/5851894/j-f"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 768, "favorite_count": 0, "accepted_answer_id": 40367290, "answer_count": 1, "score": 4, "last_activity_date": 1478030068, "creation_date": 1478028207, "last_edit_date": 1478028419, "question_id": 40367208, "link": "https://stackoverflow.com/questions/40367208/ambiguous-associated-type-error-when-pattern-matching-over-a-hashmapentry-e", "title": "&quot;ambiguous associated type&quot; error when pattern matching over a HashMap::Entry (Error code E0223)", "body": "<p>I'm using a <code>HashMap</code> to store some important data, and I want to be able to look for a certain key, insert a value for it if it doesn't exist, and do stuff to the value if the key was found.</p>\n\n<p>I stripped down the code to a minimal reproduction of the error, I'm not really trying to increment numbers. I do want to use the <code>HashMap::Entry</code> capabilities, iterating over all keys/values is not an alternative.</p>\n\n<pre><code>use std::collections::HashMap;\n\npub fn stack_overflow_example() -&gt; bool {\n    let hash_map: HashMap&lt;i32, i32&gt; = HashMap::new();\n    let key = 1;\n\n    match hash_map.entry(key) {\n        HashMap::Entry::Vacant(entry) =&gt; entry.insert(vec![1]),\n        HashMap::Entry::Occupied(entry) =&gt; {\n            let mut numbers = entry.into_mut().iter_mut();\n            let mut numbers_affected = 0;\n\n            for number in numbers {\n                if number &lt; 10 {\n                    number = number + 1;\n\n                    numbers_affected += 1;\n                }\n            }\n\n            if numbers_affected == 0 {\n                numbers.push(1)\n            }\n        }\n    }\n\n    true\n}\n</code></pre>\n\n<p>I get this error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0223]: ambiguous associated type\n --&gt; src/main.rs:8:9\n  |\n8 |         HashMap::Entry::Vacant(entry) =&gt; entry.insert(vec![1]),\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ambiguous associated type\n  |\n  = note: specify the type using the syntax `&lt;std::collections::HashMap&lt;_, _, _&gt; as Trait&gt;::Entry`\n\nerror[E0223]: ambiguous associated type\n --&gt; src/main.rs:9:9\n  |\n9 |         HashMap::Entry::Occupied(entry) =&gt; {\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ambiguous associated type\n  |\n  = note: specify the type using the syntax `&lt;std::collections::HashMap&lt;_, _, _&gt; as Trait&gt;::Entry`\n</code></pre>\n\n<p>I tried doing what it says, but when I put those changes in, I can't put <code>(entry)</code> after <code>Vacant</code> and <code>Occupied</code>. Here is the error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: unexpected `(` after qualified path\n --&gt; src/main.rs:8:69\n  |\n8 |         &lt;std::collections::HashMap&lt;_, _, _&gt; as Trait&gt;::Entry::Vacant(entry) =&gt; entry.insert(vec![1]),\n  |                                                                     ^\n</code></pre>\n\n<p>Should I really use 'Trait' literally? I don't know. Should I replace the underscores with the relevant types? Likely, yes, but I still get the same error.</p>\n"}, {"tags": ["macros", "rust"], "comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1478171227, "post_id": 40367127, "comment_id": 68049770, "body": "Why is this question marked to close as: <code>Questions seeking debugging help</code>, this is a general question about flow control (with answers showing how it can be done)."}], "answers": [{"comments": [{"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 1, "creation_date": 1478129906, "post_id": 40367252, "comment_id": 68034787, "body": "A brilliant idea. I&#39;ve posted an answer that extracts the not-pretty testing to a separate macro, allowing for a reasonably readable definition of <code>loop_over_items</code>."}], "tags": [], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "is_accepted": false, "score": 1, "last_activity_date": 1486264988, "last_edit_date": 1486264988, "creation_date": 1478028377, "answer_id": 40367252, "question_id": 40367127, "link": "https://stackoverflow.com/questions/40367127/how-to-wrap-a-do-while-style-loop-in-a-macro-maintaining-continue-flow-contro/40367252#40367252", "title": "How to wrap a do-while style loop in a macro, maintaining &#39;continue&#39; flow control?", "body": "<p>Adding this answer to show it's possible to detect continue/break within an unknown code-block, however it's not <em>pretty</em>.</p>\n\n<pre><code>macro_rules! loop_over_items {\n    ($item:expr, $iter:ident, $code:block) =&gt; {\n        {\n            let first = $item.first;\n            let mut $iter = first;\n            loop {\n\n                {\n                    let mut loop_state = false;\n                    loop {\n                        if loop_state == true {\n                            break;  // continue found in 'code'\n                        }\n                        loop_state = false;\n                        $code\n                        if loop_state {}  // quiet unused warning\n                        loop_state = true;\n                        break;\n                    }\n                    if loop_state == false {\n                        break;  // break in 'code'\n                    }\n                }\n\n                $iter = $iter.next;\n                if (first != $iter) {\n                    break;\n                }\n            }\n        }\n    }\n}\n</code></pre>\n\n<hr>\n\n<p>Note, I'm curious to know some impacts of using this method:</p>\n\n<ul>\n<li>Are break/continue checks are optimized away in the case they aren't used in the <code>body</code> passed into the macro <em>(it should be possible)</em>.</li>\n<li>When the logic to detect break/continue applies - is it roughly as efficient as using continue/break in a while loop <em>(the do-while style means its not going to be exactly the same)</em>.</li>\n<li>When break/continue isn't used in the code-block, these checks are optimized out entirely for release builds, so this macro can be used without adding unnecessary overhead.</li>\n</ul>\n\n<p><a href=\"https://gitlab.com/ideasman42/bmesh-rs/blob/master/intern/bmesh/src/bmesh_iter_macros.rs\" rel=\"nofollow noreferrer\">See real-world use of this example.</a></p>\n"}, {"tags": [], "owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "is_accepted": true, "score": 1, "last_activity_date": 1478170406, "last_edit_date": 1495541809, "creation_date": 1478129855, "answer_id": 40391573, "question_id": 40367127, "link": "https://stackoverflow.com/questions/40367127/how-to-wrap-a-do-while-style-loop-in-a-macro-maintaining-continue-flow-contro/40391573#40391573", "title": "How to wrap a do-while style loop in a macro, maintaining &#39;continue&#39; flow control?", "body": "<p>To expand on the idea in <a href=\"https://stackoverflow.com/a/40367252/1600898\">ideasman42's own answer</a>, the logic of executing a loop iteration while testing whether it contained <code>break</code> or <code>continue</code> can itself be encapsulated in a macro:</p>\n\n<pre><code>enum LoopIteration {\n    Normal,\n    Break,\n    Continue,\n}\n\nmacro_rules! exec_iteration {\n    ($code: block) =&gt; {{\n        let mut _state = LoopIteration::Normal;\n        loop {\n            if let LoopIteration::Break = _state {\n                // got back here after having preparing for break - it\n                // means a continue happened\n                _state = LoopIteration::Continue;\n                break;\n            }\n            // prepare for break\n            _state = LoopIteration::Break;\n            $code;\n            // neither break nor continue occurred\n            _state = LoopIteration::Normal;\n            break;\n        }\n        _state\n    }}\n}\n</code></pre>\n\n<p>With that in place, a general do-while macro with support for <code>break</code> and <code>continue</code> can be written as follows:</p>\n\n<pre><code>macro_rules! do_while {\n    ($code: block, $test: expr) =&gt; {{\n        loop {\n            match exec_iteration!($code) {\n                LoopIteration::Normal =&gt; (),\n                LoopIteration::Break =&gt; break,\n                LoopIteration::Continue =&gt; continue,\n            }\n\n            if !$test {\n                break;\n            }\n        }\n    }}\n}\n</code></pre>\n\n<p>The above is not very useful because we could have simply embedded the <code>$code</code> in the loop with the same effect. But when implementing a macro like <code>loop_over_items</code>, there is now a way to move to the next item after <code>$code</code> even if it uses <code>continue</code>:</p>\n\n<pre><code>macro_rules! loop_over_items {\n    ($item:expr, $iter:ident, $code:block) =&gt; {{\n        let first = $item.first;\n        let mut $iter = first;\n        loop {\n            if let LoopIteration::Break = exec_iteration!($code) {\n                break\n            }\n            // Advance the iterator before proceeding, even if\n            // \"continue\" was used\n            $iter = $iter.next;\n            if first != $iter {\n                break;\n            }\n        }\n    }}\n}\n</code></pre>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 390, "favorite_count": 0, "accepted_answer_id": 40391573, "answer_count": 2, "score": 3, "last_activity_date": 1486264988, "creation_date": 1478027837, "last_edit_date": 1478171117, "question_id": 40367127, "link": "https://stackoverflow.com/questions/40367127/how-to-wrap-a-do-while-style-loop-in-a-macro-maintaining-continue-flow-contro", "title": "How to wrap a do-while style loop in a macro, maintaining &#39;continue&#39; flow control?", "body": "<p>In Rust, a do-while style loop can be written:</p>\n\n<pre><code>loop {\n    something();\n\n    if !test() {\n        break;\n    }\n}\n</code></pre>\n\n<p>Note that the purpose of using the do-while form instead of <code>while test() { something() }</code>, is that <code>test()</code> may need to run <em>after</em> <code>something()</code>.</p>\n\n<p>This works, but when the logic is wrapped in a macro, it's less obvious what happens when <code>continue</code> is used. It will skip the test, potentially entering an infinite loop:</p>\n\n<pre><code>macro_rules! loop_over_items {\n    ($item:expr, $iter:ident, $code:block) =&gt; {\n        {\n            let first = $item.first;\n            let mut $iter = first;\n            loop {\n                $code\n                $iter = $iter.next;\n                if (first != $iter) {\n                    break;\n                }\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>This works in a basic case:</p>\n\n<pre><code>loop_over_items!(item, iter_elem, {\n    code_to_run;\n});\n</code></pre>\n\n<p>But this may enter an infinite loop which isn't very obvious at first glance:</p>\n\n<pre><code>loop_over_items!(item, iter_elem, {\n    if some_test() {\n        continue;\n    }\n    code_to_run;\n});\n</code></pre>\n\n<p>What would be a good method in Rust to write a macro that supports use of <code>continue</code> skipping the logic after <code>$code</code>?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 1699, "user_id": 783825, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/cce2622c5ccd49a3cbf2007491ab1075?s=128&d=identicon&r=PG", "display_name": "Neikos", "link": "https://stackoverflow.com/users/783825/neikos"}, "edited": false, "score": 4, "creation_date": 1478026033, "post_id": 40366586, "comment_id": 67986514, "body": "Why not <code>loop { &#47;* code *&#47; if test() { break; } }</code> ?"}, {"owner": {"reputation": 10707, "user_id": 6650102, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/boCIP.jpg?s=128&g=1", "display_name": "Aurora0001", "link": "https://stackoverflow.com/users/6650102/aurora0001"}, "edited": false, "score": 9, "creation_date": 1478026110, "post_id": 40366586, "comment_id": 67986548, "body": "I have to say I think this is a horrible hack (<a href=\"https://gist.github.com/huonw/8435502\" rel=\"nofollow noreferrer\">link for those who haven&#39;t seen it before</a>). The first set of braces aren&#39;t actually the while loop body - they&#39;re the <b>condition</b>, which is why you can&#39;t break out. <code>while { break } {}</code> doesn&#39;t make any sense, which is why this syntax is probably more harmful than helpful."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 1699, "user_id": 783825, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/cce2622c5ccd49a3cbf2007491ab1075?s=128&d=identicon&r=PG", "display_name": "Neikos", "link": "https://stackoverflow.com/users/783825/neikos"}, "edited": false, "score": 0, "creation_date": 1478026217, "post_id": 40366586, "comment_id": 67986586, "body": "@Neikos, When the loop is defined in a macro, with the code body passed in as an argument, using <code>continue</code> causes a non-obvious infinite loop, since the break never runs."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 10707, "user_id": 6650102, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/boCIP.jpg?s=128&g=1", "display_name": "Aurora0001", "link": "https://stackoverflow.com/users/6650102/aurora0001"}, "edited": false, "score": 2, "creation_date": 1478090361, "post_id": 40366586, "comment_id": 68012092, "body": "@Aurora0001 One man&#39;s hack is another man&#39;s pattern. :) I&#39;ve seen this style used in various Lisp dialects that lacked native do-while (e.g. Emacs Lisp), and it&#39;s readable once you get used to it. I would agree that, once <code>break</code> and <code>continue</code> become needed, that it is probably a better idea to switch to <code>loop</code> with custom-placed break logic."}, {"owner": {"reputation": 10707, "user_id": 6650102, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/boCIP.jpg?s=128&g=1", "display_name": "Aurora0001", "link": "https://stackoverflow.com/users/6650102/aurora0001"}, "reply_to_user": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 2, "creation_date": 1478111160, "post_id": 40366586, "comment_id": 68026106, "body": "@user4815162342, perhaps so, but in my opinion it&#39;s much better to be &#39;defensive&#39; and assume that the programmer reading your code isn&#39;t as smart as you, and won&#39;t notice the pattern. I definitely wouldn&#39;t have known what was happening without it being pointed out and thinking about it."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1478112925, "post_id": 40366586, "comment_id": 68027049, "body": "Clearly this isn&#39;t something to use for the common case to write readable code. Better use these kinds of tricks like <code>unsafe</code>, its last resort when there are no better options. And after looking into this, it seems like there probably are better options nearly every time."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 10707, "user_id": 6650102, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/boCIP.jpg?s=128&g=1", "display_name": "Aurora0001", "link": "https://stackoverflow.com/users/6650102/aurora0001"}, "edited": false, "score": 3, "creation_date": 1478120889, "post_id": 40366586, "comment_id": 68031321, "body": "@Aurora0001 I agree about defensiveness - as they say, &quot;write code as if the next maintainer is a lunatic who knows where you live.&quot;  On the other hand, some very useful idioms look like garbage when first encountered, but one learns to recognize, use, and even appreciate them after a while. (Rust has its fair share of features that look strange at first, such as the use of <code>;</code> to determine whether a value is returned.) Rust is still a young language, and it remains to be seen which patterns will be judged sufficiently useful by the community to be recognized as idioms."}], "answers": [{"comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 3, "creation_date": 1478079975, "post_id": 40374707, "comment_id": 68005676, "body": "The reason I can&#39;t use this logic is <code>test</code> is false when entering the loop for the first time, added this as a note in the question."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 2, "last_activity_date": 1478091777, "last_edit_date": 1478091777, "creation_date": 1478072519, "answer_id": 40374707, "question_id": 40366586, "link": "https://stackoverflow.com/questions/40366586/how-to-break-out-of-a-do-while-style-loop-in-rust/40374707#40374707", "title": "How to break out of a do-while style loop in Rust?", "body": "<p>You are overthinking this.</p>\n\n<p>Let's build a truth table:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>+-------------+--------+--------+\n| something() | test() | Result |\n+-------------+--------+--------+\n|    true     |  true  |  stop  |\n+-------------+--------+--------+\n|    true     |  false |  stop  |\n+-------------+--------+--------+\n|    false    |  true  |  go on |\n+-------------+--------+--------+\n|    false    |  false |  stop  |\n+-------------+--------+--------+\n</code></pre>\n\n<p>Thus, this can be written as:</p>\n\n<pre><code>while !something() &amp;&amp; test {}\n</code></pre>\n\n<p>There is no need for a <code>break</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "is_accepted": false, "score": 5, "last_activity_date": 1478091760, "last_edit_date": 1478091760, "creation_date": 1478089919, "answer_id": 40380039, "question_id": 40366586, "link": "https://stackoverflow.com/questions/40366586/how-to-break-out-of-a-do-while-style-loop-in-rust/40380039#40380039", "title": "How to break out of a do-while style loop in Rust?", "body": "<p>As mentioned in the comments, it is important to understand how this pattern works. It is not a special form of <code>while</code>, it simply abuses the loop test to do things normally done in the body. Since <code>break</code> and <code>continue</code> don't belong in the loop test (unless the loop is part of another loop, in which case they will compile, but break/continue the <em>outer</em> loop), Rust rejects them.</p>\n\n<p>A straightforward way to emulate <code>break</code> with the above pattern is by moving the test code to a closure from which one can exit with <code>return</code>:</p>\n\n<pre><code>while (|| {\n    if something() {\n        return false // break\n    }\n    test()\n})() {}\n</code></pre>\n\n<p><code>continue</code> can be emulated the same way, simply by returning <code>true</code> from the closure.</p>\n\n<p>It would probably possible to make the intention clearer if this were expressed as a macro.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2654, "favorite_count": 4, "answer_count": 2, "score": 3, "last_activity_date": 1486264766, "creation_date": 1478025894, "last_edit_date": 1495540900, "question_id": 40366586, "link": "https://stackoverflow.com/questions/40366586/how-to-break-out-of-a-do-while-style-loop-in-rust", "title": "How to break out of a do-while style loop in Rust?", "body": "<p>Rust allows a kind of do-while loop eg:</p>\n\n<p>So the C style:</p>\n\n<pre><code>do {\n    something();\n} while (test());\n</code></pre>\n\n<p>Can be written in Rust as:</p>\n\n<pre><code>while {\n    something();\n    test()\n}{}\n</code></pre>\n\n<p>However there is a problem using break in this case:</p>\n\n<p>So this C style:</p>\n\n<pre><code>do {\n    if (something()) {\n        break;\n    }\n} while (test());\n</code></pre>\n\n<p>Can't be written in Rust as:</p>\n\n<pre><code>while {\n    if (something()) {\n        break;\n    }\n    test()\n}{}\n</code></pre>\n\n<p>Fails to compile with <code>cannot break outside of a loop</code>.</p>\n\n<p>Is there a way to break out of this form of while loop?</p>\n\n<hr>\n\n<p><strong>Note 1)</strong> the reason to use:<br><code>do {...} while test()</code> flow control instead of<br><code>while test() {...}</code> is in this case <code>test()</code> will be <code>false</code> when entering the loop initially.</p>\n\n<p><strong>Note 2)</strong> When using  <code>while {...}</code> flow control: calling <code>continue</code> in the body of the code will skip the <code>break</code> check at the end.</p>\n\n<p>See related question: <a href=\"https://stackoverflow.com/questions/40367127\">How to wrap a do-while style loop in a macro, maintaining &#39;continue&#39; flow control?</a></p>\n"}, {"tags": ["memory", "enums", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1478022689, "post_id": 40365336, "comment_id": 67984694, "body": "The same way it stores enum values anywhere else, FWIW."}], "answers": [{"tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": true, "score": 9, "last_activity_date": 1478022433, "creation_date": 1478022433, "answer_id": 40365660, "question_id": 40365336, "link": "https://stackoverflow.com/questions/40365336/how-does-rust-store-enum-values-in-arrays/40365660#40365660", "title": "How does Rust store enum values in arrays?", "body": "<p>All variants of an enum use the same amount of memory (in case of your <code>Foo</code> type, 16 bytes, at least on my machine). The size of the enum's values is determined by its largest variant (<code>One</code>, in your example).</p>\n\n<p>Therefore, the values can be stored in the array directly.</p>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 8, "last_activity_date": 1478071925, "creation_date": 1478071925, "answer_id": 40374539, "question_id": 40365336, "link": "https://stackoverflow.com/questions/40365336/how-does-rust-store-enum-values-in-arrays/40374539#40374539", "title": "How does Rust store enum values in arrays?", "body": "<p>Rust being a systems programming language, you can just ask it!</p>\n\n<pre><code>use std::mem;\n\nenum Foo {\n    One(i32, i32, i32),\n    Two { x: i32, y: i32 },\n}\n\nfn main() {\n    println!(\"{}\", mem::size_of::&lt;Foo&gt;());\n}\n</code></pre>\n\n<p>This <a href=\"https://play.rust-lang.org/?gist=134907b78de71cad77aa5c3e196fdb7d&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">prints 16</a> on the playground.</p>\n\n<p>And note that I did not specify whether I talked about <code>One</code> or <code>Two</code>, because it does not matter. <code>Foo</code> has a unique size.</p>\n\n<hr>\n\n<p>As a rule of thumb, you might want to avoid storing a very large variant. One solution, if a single variant is much bigger than the other, is to reach out to <code>Box</code>.</p>\n"}], "owner": {"reputation": 1136, "user_id": 5147158, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/7f5a49ac25a325cbd8293c5c6793c40f?s=128&d=identicon&r=PG&f=1", "display_name": "Peter Lenkefi", "link": "https://stackoverflow.com/users/5147158/peter-lenkefi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1216, "favorite_count": 0, "accepted_answer_id": 40365660, "answer_count": 2, "score": 5, "last_activity_date": 1478071925, "creation_date": 1478021210, "last_edit_date": 1478022659, "question_id": 40365336, "link": "https://stackoverflow.com/questions/40365336/how-does-rust-store-enum-values-in-arrays", "title": "How does Rust store enum values in arrays?", "body": "<p>The following is valid Rust:</p>\n\n<pre><code>enum Foo {\n    One(i32, i32, i32),\n    Two { x: i32, y: i32 },\n}\n\nfn main() {\n    let x: [Foo; 2] = [Foo::One(1, 2, 3), Foo::Two { x: 1, y: 2 }];\n}\n</code></pre>\n\n<p>How does Rust store this? The first element is 12 bytes while the second one is 8 (plus a tag byte in the beginning I guess). Does it only store references to the elements in the array?</p>\n"}, {"tags": ["rust", "traits"], "answers": [{"tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 2, "last_activity_date": 1477997350, "creation_date": 1477997350, "answer_id": 40358556, "question_id": 40358470, "link": "https://stackoverflow.com/questions/40358470/how-to-add-a-sized-supertrait-to-a-rust-trait/40358556#40358556", "title": "How to add a Sized supertrait to a Rust trait?", "body": "<p>It's quite simple: change the first line to:</p>\n\n<pre><code>pub trait FullOps : Sized {\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=cb3e897258b6c40829a1adb17c95b19d&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground link</a></p>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 4, "last_activity_date": 1477997371, "creation_date": 1477997371, "answer_id": 40358564, "question_id": 40358470, "link": "https://stackoverflow.com/questions/40358470/how-to-add-a-sized-supertrait-to-a-rust-trait/40358564#40358564", "title": "How to add a Sized supertrait to a Rust trait?", "body": "<p>A \"super trait\" is just a bound, really.</p>\n\n<p>You can place a bound either at trait level or method level. Here, you are advised to place it at trait level:</p>\n\n<pre><code>pub trait FullOps: Sized {\n    fn full_mul(self, other: Self, carry: Self) -&gt; (Self, Self);\n}\n</code></pre>\n\n<p>The other solution would be to place it at method level:</p>\n\n<pre><code>pub trait FullOps {\n    fn full_mul(self, other: Self, carry: Self) -&gt; (Self, Self)\n        where Self: Sized;\n}\n</code></pre>\n"}], "owner": {"reputation": 1835, "user_id": 6292577, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/gqMCP.jpg?s=128&g=1", "display_name": "rityzmon", "link": "https://stackoverflow.com/users/6292577/rityzmon"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 132, "favorite_count": 0, "accepted_answer_id": 40358556, "answer_count": 2, "score": 0, "last_activity_date": 1477997371, "creation_date": 1477997068, "question_id": 40358470, "link": "https://stackoverflow.com/questions/40358470/how-to-add-a-sized-supertrait-to-a-rust-trait", "title": "How to add a Sized supertrait to a Rust trait?", "body": "<p>At <a href=\"https://github.com/rust-lang/rust/issues/33242\" rel=\"nofollow noreferrer\">this issue page for Rust</a>, it gives the following example code for <code>core::num::bignum::FullOps</code>:</p>\n\n<pre><code>pub trait FullOps {\n    ...\n    fn full_mul(self, other: Self, carry: Self) -&gt; (Self /*carry*/, Self);\n    ...\n}\n</code></pre>\n\n<p>Then it says that:</p>\n\n<blockquote>\n  <p>Here the function <code>full_mul</code> returns a <code>(Self, Self)</code> tuple, which is only\n  well-formed when the <code>Self</code>-type is <code>Sized</code> - for that and other reasons,\n  the trait only makes sense when <code>Self</code> is <code>Sized</code>. The solution in this\n  case and most others is to add the missing <code>Sized</code> supertrait.</p>\n</blockquote>\n\n<p>How does one add the missing <code>Sized</code> supertrait?</p>\n"}, {"tags": ["generics", "rust"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 5, "creation_date": 1477985483, "post_id": 40355768, "comment_id": 67964930, "body": "Unrelated, but I&#39;m interested: what university? I will delete this comment after you answered ;-)"}, {"owner": {"reputation": 1135, "user_id": 3754101, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/D1eNN.jpg?s=128&g=1", "display_name": "enaJ", "link": "https://stackoverflow.com/users/3754101/enaj"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1478027708, "post_id": 40355768, "comment_id": 67987359, "body": "Not a problem, UC-Davis undergraduate CS class."}], "answers": [{"tags": [], "owner": {"reputation": 1699, "user_id": 783825, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/cce2622c5ccd49a3cbf2007491ab1075?s=128&d=identicon&r=PG", "display_name": "Neikos", "link": "https://stackoverflow.com/users/783825/neikos"}, "is_accepted": false, "score": 1, "last_activity_date": 1477988915, "creation_date": 1477988915, "answer_id": 40356436, "question_id": 40355768, "link": "https://stackoverflow.com/questions/40355768/when-do-you-take-input-as-t-or-t-in-a-rust-generic-function/40356436#40356436", "title": "When do you take input as T or &amp;T in a Rust generic function?", "body": "<p>This is not a question of generics but a question of borrowing and ownership. If you want your input to be moved into function then you use <code>T</code>, otherwise if you just want to borrow it you use <code>&amp;T</code> or <code>&amp;mut T</code>.</p>\n\n<p><a href=\"https://doc.rust-lang.org/book/ownership.html\" rel=\"nofollow\">Relevant book section</a></p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478003777, "post_id": 40356470, "comment_id": 67973509, "body": "I disagree with <i>most of the time you&#39;ll want to take <code>&amp;T</code></i>. If a trait is <a href=\"http://stackoverflow.com/q/28799372/155423\">implemented for all references to items of that type</a>, then there&#39;s no reason to add <i>more</i> indirection."}, {"owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478017382, "post_id": 40356470, "comment_id": 67981462, "body": "@Shepmaster good point (I wanted to mention it along with <code>Copy</code> but forgot). But then again I haven&#39;t seen a lot of impls for <code>&amp;T</code> compared to <code>T</code>. What do you think about the Rust Book&#39;s example consuming <code>T</code> just to print its area?"}], "tags": [], "owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "is_accepted": true, "score": 5, "last_activity_date": 1478003709, "last_edit_date": 1478003709, "creation_date": 1477989072, "answer_id": 40356470, "question_id": 40355768, "link": "https://stackoverflow.com/questions/40355768/when-do-you-take-input-as-t-or-t-in-a-rust-generic-function/40356470#40356470", "title": "When do you take input as T or &amp;T in a Rust generic function?", "body": "<blockquote>\n  <p>Can anyone help compare when implementing a generic function, when do we pass a input as <code>x: &amp;T</code> and when <code>x: T</code>?</p>\n</blockquote>\n\n<p>It's the same as when you would accept <code>x: Foo</code> and <code>x: &amp;Foo</code>. Taking a <code>x: Foo</code> gives the function the ownership of of <code>x</code>, and (unless <code>x</code> is <code>Copy</code>) the caller will not be able to use it again.</p>\n\n<p>In the Rust Book example, <code>print_area</code> takes the ownership of <code>circle</code>, so you cannot use <code>circle</code> after the <code>print_area(circle);</code> line. For example, the following:</p>\n\n<pre><code>fn main() {\n    // ...\n    print_area(c);\n    print_area(c);\n}\n</code></pre>\n\n<p>throws this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0382]: use of moved value: `c`\n  --&gt; &lt;anon&gt;:29:16\n   |\n28 |     print_area(c);\n   |                - value moved here\n29 |     print_area(c);\n   |                ^ value used here after move\n   |\n   = note: move occurs because `c` has type `Circle`, which does not implement the `Copy` trait\n</code></pre>\n\n<p>In my experience, most of the time you'll want to take <code>: &amp;T</code> (like your Professor's note). Only when you need the ownership of the struct would you need to use <code>: T</code>. The Rust Book probably uses <code>: T</code> for simplicity.</p>\n"}], "owner": {"reputation": 1135, "user_id": 3754101, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/D1eNN.jpg?s=128&g=1", "display_name": "enaJ", "link": "https://stackoverflow.com/users/3754101/enaj"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 480, "favorite_count": 0, "accepted_answer_id": 40356470, "answer_count": 2, "score": 2, "last_activity_date": 1478003709, "creation_date": 1477985319, "last_edit_date": 1478003679, "question_id": 40355768, "link": "https://stackoverflow.com/questions/40355768/when-do-you-take-input-as-t-or-t-in-a-rust-generic-function", "title": "When do you take input as T or &amp;T in a Rust generic function?", "body": "<p>My class notes have code that implements the <code>HasArea</code> trait and prints the area, similar to the Rust Book example. The professor's note is as following:</p>\n\n<pre><code>trait HasArea&lt;T&gt; {\n    fn area(&amp; self) -&gt; T,\n}\n\nfn print&lt;T: Display, S: HasArea&lt;T&gt;&gt;(s: &amp;S) {\n    println!(\"\", s.area());  // println sth must impl Display trait\n}\n\nstruct Circle {\n    x: T,\n    y: T,\n    r: T,\n}\n\nimpl &lt;T: Copy + Mul &lt;Output = T&gt;&gt;\n    HasArea&lt;T&gt; for Circle&lt;T&gt;  \n{\n    fn area(&amp;self) -&gt; T {\n        self.r * self.r\n    }\n}\n</code></pre>\n\n<p>Comparing that to the Rust Book, which uses <code>shape: T</code> as input:</p>\n\n<pre><code>trait HasArea {\n    fn area(&amp;self) -&gt; f64;\n}\n\nstruct Circle {\n    x: f64,\n    y: f64,\n    radius: f64,\n}\n\nimpl HasArea for Circle {\n    fn area(&amp;self) -&gt; f64 {\n        std::f64::consts::PI * (self.radius * self.radius)\n    }\n}\n\nfn print_area&lt;T: HasArea&gt;(shape: T) {\n    println!(\"This shape has an area of {}\", shape.area());\n}\n\nfn main() {\n    let c = Circle {\n        x: 0.0f64,\n        y: 0.0f64,\n        radius: 1.0f64,\n    };\n\n    print_area(c);\n}\n</code></pre>\n\n<p>I am not sure why the professor uses <code>s: &amp;S</code>, while the Rust Book uses <code>shape: T</code>. Can anyone help compare when implementing a generic function, when do we pass a input as <code>x: &amp;T</code> and when <code>x: T</code>?</p>\n"}, {"tags": ["rust", "traits", "self"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1477991428, "post_id": 40355371, "comment_id": 67967288, "body": "You may be interested in <a href=\"http://stackoverflow.com/questions/32304595/whats-the-difference-between-self-and-self\">What is the difference between <code>self</code> and <code>Self</code></a>."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1477992621, "post_id": 40355371, "comment_id": 67967882, "body": "The question about <code>self.radius</code> is slightly different than the question about itself (it&#39;s about ownership and <code>Copy</code>). I suggest you edit it out to focus on what <code>self</code> is about here since that&#39;s the most difficult (and novel) part, whereas we already have plenty of questions about ownership."}], "answers": [{"comments": [{"owner": {"reputation": 1135, "user_id": 3754101, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/D1eNN.jpg?s=128&g=1", "display_name": "enaJ", "link": "https://stackoverflow.com/users/3754101/enaj"}, "edited": false, "score": 0, "creation_date": 1478017766, "post_id": 40357164, "comment_id": 67981699, "body": "So self.radius is like Circle.radius, since radius is f64 so it implement Copy trait. Correct?"}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "reply_to_user": {"reputation": 1135, "user_id": 3754101, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/D1eNN.jpg?s=128&g=1", "display_name": "enaJ", "link": "https://stackoverflow.com/users/3754101/enaj"}, "edited": false, "score": 1, "creation_date": 1478019136, "post_id": 40357164, "comment_id": 67982563, "body": "Yes, <code>self</code> is a reference to a <code>Circle</code>, since it&#39;s a method on <code>Circle</code>, so <code>self.radius</code> is an <code>f64</code>."}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 6, "last_activity_date": 1477992155, "creation_date": 1477992155, "answer_id": 40357164, "question_id": 40355371, "link": "https://stackoverflow.com/questions/40355371/understanding-the-self-parameter-in-the-context-of-trait-implementations/40357164#40357164", "title": "Understanding the &#39;self&#39; parameter in the context of trait implementations", "body": "<p>You're mostly right.</p>\n\n<p>The way I think of it is that in a method signature, <code>self</code> is a shorthand:</p>\n\n<pre><code>impl S {\n    fn foo(self) {}      // equivalent to fn foo(self: S)\n    fn foo(&amp;self) {}     // equivalent to fn foo(self: &amp;S)\n    fn foo(&amp;mut self) {} // equivalent to fn foo(self: &amp;mut S)\n}\n</code></pre>\n\n<p>It's not <em>actually</em> equivalent since <code>self</code> is a keyword and there are some special rules (for example for lifetime elision), but it's pretty close.</p>\n\n<p>Back to your example:</p>\n\n<pre><code>impl HasArea for Circle {\n    fn area(&amp;self) -&gt; f64 {   // like fn area(self: &amp;Circle) -&gt; ... \n        std::f64::consts::PI * (self.radius * self.radius)\n    }\n}\n</code></pre>\n\n<p>The <code>self</code> in the body is of type <code>&amp;Circle</code>.  You can't move out of a reference, so <code>self.radius</code> can't be a move even once.  In this case <code>radius</code> implements <code>Copy</code>, so it's just copied out instead of moved.  If it were a more complex type which didn't implement <code>Copy</code> then this would be an error.</p>\n"}, {"comments": [{"owner": {"reputation": 1135, "user_id": 3754101, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/D1eNN.jpg?s=128&g=1", "display_name": "enaJ", "link": "https://stackoverflow.com/users/3754101/enaj"}, "edited": false, "score": 0, "creation_date": 1478017912, "post_id": 40357272, "comment_id": 67981783, "body": "&quot;Note that if the type of the parameter is &amp;Circle then it follows that in all its uses in the method it is &amp;Circle. Rust has static typing (and no flow-dependent typing) so the type of a given binding does not change during its lifetime.&quot;   So, self.radius is like &amp;Circle.radius??"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 1135, "user_id": 3754101, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/D1eNN.jpg?s=128&g=1", "display_name": "enaJ", "link": "https://stackoverflow.com/users/3754101/enaj"}, "edited": false, "score": 1, "creation_date": 1478019524, "post_id": 40357272, "comment_id": 67982806, "body": "@enaJ: <code>self.radius</code> is <code>f64</code> yes, which is a <code>Copy</code> type."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 5, "last_activity_date": 1551945486, "last_edit_date": 1551945486, "creation_date": 1477992537, "answer_id": 40357272, "question_id": 40355371, "link": "https://stackoverflow.com/questions/40355371/understanding-the-self-parameter-in-the-context-of-trait-implementations/40357272#40357272", "title": "Understanding the &#39;self&#39; parameter in the context of trait implementations", "body": "<p>You are mostly correct.</p>\n\n<hr>\n\n<p>There is a neat trick to let the compiler tell you the type of variables rather than trying to infer them: <code>let () = ...;</code>.</p>\n\n<p>Using <a href=\"https://play.rust-lang.org/?gist=0f55a50d3e5a298875e9c295c95a8ee2&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">the Playground</a> I get for the 1st case:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>9 |         let () = self;\n  |             ^^ expected &amp;Self, found ()\n</code></pre>\n\n<p>and for the 2nd case:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>16 |         let () = self;\n   |             ^^ expected &amp;Circle, found ()\n</code></pre>\n\n<hr>\n\n<p>The first case is actually special, because <code>HasArea</code> is not a type, it's a trait.</p>\n\n<p>So what is <code>self</code>? It's nothing <em>yet</em>.</p>\n\n<p>Said another way, it poses for <em>any possible concrete type</em> that may implement <code>HasArea</code>. And thus the only guarantee we have about this trait is that it provides <em>at least</em> the interface of <code>HasArea</code>.</p>\n\n<p>The key point is that you can place additional bounds. For example you could say:</p>\n\n<pre><code>trait HasArea: Debug {\n    fn area(&amp;self) -&gt; f64;\n}\n</code></pre>\n\n<p>And in this case, <code>Self: HasArea + Debug</code>, meaning that <code>self</code> provides <em>both</em> the interfaces of <code>HasArea</code> and <code>Debug</code>.</p>\n\n<hr>\n\n<p>The second and third cases are much easier: we know the <em>exact concrete type</em> for which the <code>HasArea</code> trait is implemented. It's <code>Circle</code>.</p>\n\n<p>Therefore, the type of <code>self</code> in the <code>fn area(&amp;self)</code> method is <code>&amp;Circle</code>.</p>\n\n<p>Note that if the type of the parameter is <code>&amp;Circle</code> then it follows that in all its uses in the method it is <code>&amp;Circle</code>. Rust has static typing (and no flow-dependent typing) so the type of a given binding does not change during its lifetime.</p>\n\n<hr>\n\n<p>Things can get more complicated, however.</p>\n\n<p>Imagine that you have two traits:</p>\n\n<pre><code>struct Segment(Point, Point);\n\nimpl Segment {\n    fn length(&amp;self) -&gt; f64;\n}\n\ntrait Segmentify {\n    fn segmentify(&amp;self) -&gt; Vec&lt;Segment&gt;;\n}\n\ntrait HasPerimeter {\n    fn has_perimeter(&amp;self) -&gt; f64;\n}\n</code></pre>\n\n<p>Then, you can implement <code>HasPerimeter</code> automatically for all shapes that can be broken down in a sequence of segments.</p>\n\n<pre><code>impl&lt;T&gt; HasPerimeter for T\n    where T: Segmentify\n{\n    // Note: there is a \"functional\" implementation if you prefer\n    fn has_perimeter(&amp;self) -&gt; f64 {\n        let mut total = 0.0;\n        for s in self.segmentify() { total += s.length(); }\n        total\n    }\n}\n</code></pre>\n\n<p>What is the type of <code>self</code> here? It's <code>&amp;T</code>.</p>\n\n<p>What's <code>T</code>? Any type that implements <code>Segmentify</code>.</p>\n\n<p>And therefore, all we know about <code>T</code> is that it implements <code>Segmentify</code> and <code>HasPerimeter</code>, and nothing else (we could not use <code>println(\"{:?}\", self);</code> because <code>T</code> is not guaranteed to implement <code>Debug</code>).</p>\n"}], "owner": {"reputation": 1135, "user_id": 3754101, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/D1eNN.jpg?s=128&g=1", "display_name": "enaJ", "link": "https://stackoverflow.com/users/3754101/enaj"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 548, "favorite_count": 0, "accepted_answer_id": 40357164, "answer_count": 2, "score": 5, "last_activity_date": 1551945486, "creation_date": 1477983364, "last_edit_date": 1478003879, "question_id": 40355371, "link": "https://stackoverflow.com/questions/40355371/understanding-the-self-parameter-in-the-context-of-trait-implementations", "title": "Understanding the &#39;self&#39; parameter in the context of trait implementations", "body": "<p>When implementing a trait, we often use the keyword <code>self</code>, a sample is as follows. I want to understand the representation of the many uses of <code>self</code> in this code sample. </p>\n\n<pre><code>struct Circle {\n    x: f64,\n    y: f64,\n    radius: f64,\n}\n\ntrait HasArea {\n    fn area(&amp;self) -&gt; f64;          // first self: &amp;self is equivalent to &amp;HasArea\n}\n\nimpl HasArea for Circle {\n    fn area(&amp;self) -&gt; f64 {         //second self: &amp;self is equivalent to &amp;Circle\n        std::f64::consts::PI * (self.radius * self.radius) // third:self\n    }\n}\n</code></pre>\n\n<p>My understanding is: </p>\n\n<ol>\n<li>The first <code>self</code>: <code>&amp;self</code> is equivalent to <code>&amp;HasArea</code>. </li>\n<li>The second <code>self</code>: <code>&amp;self</code> is equivalent to <code>&amp;Circle</code>. </li>\n<li>Is the third <code>self</code> representing <code>Circle</code>? If so, if <code>self.radius</code> was used twice, will that cause a move problem?</li>\n</ol>\n\n<p>Additionally, more examples to show the different usage of the <code>self</code> keyword in varying context would be greatly appreciated. </p>\n"}, {"tags": ["rust", "rustdoc"], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1477991307, "post_id": 40354789, "comment_id": 67967224, "body": "What of the fact that the methods are grouped per <code>impl</code>? It&#39;s implicit but is already some form of grouping."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1477992028, "post_id": 40354789, "comment_id": 67967585, "body": "@MatthieuM. That <i>does</i> work for methods (since you can attach docs to <code>impl</code>s), but it doesn&#39;t help for free functions, types, or constants."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1477992668, "post_id": 40354789, "comment_id": 67967909, "body": "Yes, better than nothing :)"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 3, "last_activity_date": 1477992094, "last_edit_date": 1477992094, "creation_date": 1477979551, "answer_id": 40354789, "question_id": 40354691, "link": "https://stackoverflow.com/questions/40354691/is-it-possible-to-group-sections-of-an-api-with-rustdoc/40354789#40354789", "title": "Is it possible to group sections of an API with rustdoc?", "body": "<p>No.</p>\n\n<p>Would be nice, but sadly no.</p>\n\n<p><strong>Edit</strong>: As noted by Matthieu M., you <em>can</em> add doc comments to individual <code>impl</code> blocks, but that doesn't solve the general case.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 213, "favorite_count": 0, "accepted_answer_id": 40354789, "answer_count": 1, "score": 3, "last_activity_date": 1553435226, "creation_date": 1477979012, "last_edit_date": 1553435226, "question_id": 40354691, "link": "https://stackoverflow.com/questions/40354691/is-it-possible-to-group-sections-of-an-api-with-rustdoc", "title": "Is it possible to group sections of an API with rustdoc?", "body": "<p>Is it possible to group sections of an API? related functions, types or constants for example.</p>\n\n<p>Doxygen for example supports <a href=\"http://www.doxygen.nl/manual/grouping.html\" rel=\"nofollow noreferrer\">grouping like this</a>:</p>\n\n<pre><code>/** \\name Some API Grouping\n * \\{ */\n\n// code //\n\n/* \\} */\n</code></pre>\n\n<p>Is rustdoc capable of something similar?</p>\n"}, {"tags": ["struct", "rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 1835, "user_id": 6292577, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/gqMCP.jpg?s=128&g=1", "display_name": "rityzmon", "link": "https://stackoverflow.com/users/6292577/rityzmon"}, "edited": false, "score": 0, "creation_date": 1477991745, "post_id": 40355407, "comment_id": 67967431, "body": "Thanks. I think S3 is what I&#39;m looking for, but how does that declaration make the struct sized so that the compiler doesn&#39;t complain?"}, {"owner": {"reputation": 41983, "user_id": 866732, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/f09f0253204000d6083ed1de21afc6fd?s=128&d=identicon&r=PG", "display_name": "WiSaGaN", "link": "https://stackoverflow.com/users/866732/wisagan"}, "reply_to_user": {"reputation": 1835, "user_id": 6292577, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/gqMCP.jpg?s=128&g=1", "display_name": "rityzmon", "link": "https://stackoverflow.com/users/6292577/rityzmon"}, "edited": false, "score": 0, "creation_date": 1477993183, "post_id": 40355407, "comment_id": 67968169, "body": "@rityzmon, it&#39;s because <code>A1</code> and <code>A2</code> will be actual types when instantiated which are sized although trait <code>A</code> is not. You&#39;ll have to specify type <code>A1</code> and <code>A2</code> when you use the generic struct in your code. That&#39;s how (and when) the compiler knows the size of your types, because you literally tell the compiler what exactly those types are."}, {"owner": {"reputation": 1835, "user_id": 6292577, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/gqMCP.jpg?s=128&g=1", "display_name": "rityzmon", "link": "https://stackoverflow.com/users/6292577/rityzmon"}, "edited": false, "score": 0, "creation_date": 1477995984, "post_id": 40355407, "comment_id": 67969651, "body": "Thanks. And how would I use the same technique if I want to return a tuple of traits from a function? One specific problem I&#39;m trying to figure out is <code>trait T { fn func(&amp;self, x: &amp;Self) -&gt; (Self, Self); }</code>. The single function in the trait takes another object of the same type, and returns two more objects of the same type."}, {"owner": {"reputation": 41983, "user_id": 866732, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/f09f0253204000d6083ed1de21afc6fd?s=128&d=identicon&r=PG", "display_name": "WiSaGaN", "link": "https://stackoverflow.com/users/866732/wisagan"}, "reply_to_user": {"reputation": 1835, "user_id": 6292577, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/gqMCP.jpg?s=128&g=1", "display_name": "rityzmon", "link": "https://stackoverflow.com/users/6292577/rityzmon"}, "edited": false, "score": 0, "creation_date": 1477998230, "post_id": 40355407, "comment_id": 67970764, "body": "@rityzmon, since you need <code>Self</code> to be a sized type so that it can be used in a tuple, you just need to declare <code>T</code> to be <code>std::marker::Sized</code> in your trait declaration. Here is an example: <a href=\"https://play.rust-lang.org/?gist=00374c64cacb8ad774d41f1457bb62cb&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}], "tags": [], "owner": {"reputation": 41983, "user_id": 866732, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/f09f0253204000d6083ed1de21afc6fd?s=128&d=identicon&r=PG", "display_name": "WiSaGaN", "link": "https://stackoverflow.com/users/866732/wisagan"}, "is_accepted": true, "score": 7, "last_activity_date": 1477984967, "last_edit_date": 1477984967, "creation_date": 1477983575, "answer_id": 40355407, "question_id": 40354679, "link": "https://stackoverflow.com/questions/40354679/possible-to-have-a-struct-tuple-of-traits-in-rust/40355407#40355407", "title": "Possible to have a struct/tuple of traits in Rust?", "body": "<p>You've already identified the problem of type being not sized, so you just need to turn it into sized type.</p>\n\n<p>If you don't own the objects, you may use reference.</p>\n\n<pre><code>struct S1&lt;'a&gt; {\n    a: &amp;'a A,\n    b: &amp;'a A,\n}\n</code></pre>\n\n<p>You can use two lifetimes instead of one if they are different.</p>\n\n<pre><code>struct S1&lt;'a, 'b&gt; {\n    a: &amp;'a A,\n    b: &amp;'b A,\n}\n</code></pre>\n\n<p>If you want to own the objects, you may use <code>Box</code>.</p>\n\n<pre><code>struct S2 {\n    a: Box&lt;A&gt;,\n    b: Box&lt;A&gt;,\n}\n</code></pre>\n\n<p>Further, if you know the concrete type at compile time, and you just want to write generic code, you can write generic struct too</p>\n\n<pre><code>struct S3&lt;A1: A, A2: A&gt; {\n    a: A1,\n    b: A2,\n}\n</code></pre>\n\n<p>In <code>S3</code>, each <code>A1</code> or <code>A2</code> represents a concrete type that implements trait <code>A</code> when you instantiate it in your code.</p>\n"}], "owner": {"reputation": 1835, "user_id": 6292577, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/gqMCP.jpg?s=128&g=1", "display_name": "rityzmon", "link": "https://stackoverflow.com/users/6292577/rityzmon"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 588, "favorite_count": 0, "accepted_answer_id": 40355407, "answer_count": 1, "score": 2, "last_activity_date": 1477984967, "creation_date": 1477978963, "question_id": 40354679, "link": "https://stackoverflow.com/questions/40354679/possible-to-have-a-struct-tuple-of-traits-in-rust", "title": "Possible to have a struct/tuple of traits in Rust?", "body": "<p>I understand this is illegal in Rust:</p>\n\n<pre><code>trait A { }\nstruct S { a: A, b: A }\n</code></pre>\n\n<p>The reason is that all members except the last one must be sized, and a trait is not sized.</p>\n\n<p>Does this mean it is impossible to have a struct/tuple of traits? How would I return a pair of values from a function and I only know that they implement a certain trait?</p>\n"}, {"tags": ["sorting", "rust"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 7, "last_activity_date": 1477972256, "creation_date": 1477972256, "answer_id": 40353906, "question_id": 40353883, "link": "https://stackoverflow.com/questions/40353883/is-there-a-way-to-provide-multiple-keys-for-tie-breaking-when-sorting/40353906#40353906", "title": "Is there a way to provide multiple keys for tie-breaking when sorting?", "body": "<p>You can use a tuple:</p>\n\n<pre><code>vec.sort_by_key(|k| (foo(k), bar(k)));\n</code></pre>\n\n<p>Tuples with 0 to 12 fields implement <a href=\"https://doc.rust-lang.org/stable/std/cmp/trait.Ord.html\" rel=\"noreferrer\"><code>Ord</code></a>.</p>\n"}], "owner": {"reputation": 1498, "user_id": 6844327, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9fWJl.jpg?s=128&g=1", "display_name": "HiDefender", "link": "https://stackoverflow.com/users/6844327/hidefender"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 368, "favorite_count": 0, "accepted_answer_id": 40353906, "answer_count": 1, "score": 2, "last_activity_date": 1478003527, "creation_date": 1477972056, "last_edit_date": 1478003527, "question_id": 40353883, "link": "https://stackoverflow.com/questions/40353883/is-there-a-way-to-provide-multiple-keys-for-tie-breaking-when-sorting", "title": "Is there a way to provide multiple keys for tie-breaking when sorting?", "body": "<p>Is there any built in way to provide multiple keys for tie-breaking in sort? Something like:</p>\n\n<p><code>vec.sort_by_key(|k| foo(k), bar(k));</code></p>\n\n<p>Where <code>foo(k)</code> is the 1st key, and <code>bar(k)</code> is the 2nd (tie-breaking) key?</p>\n"}, {"tags": ["pattern-matching", "rust", "move"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 5, "last_activity_date": 1477969719, "creation_date": 1477969719, "answer_id": 40353604, "question_id": 40353047, "link": "https://stackoverflow.com/questions/40353047/why-is-this-struct-not-moved-after-pattern-matching/40353604#40353604", "title": "Why is this struct not moved after pattern matching?", "body": "<p>What matters is not the type of the value being matched, but rather the type of each value being bound on each match arm.</p>\n\n<p>In your struct <code>Point</code>, the fields <code>x</code> and <code>y</code> are of type <code>i32</code>. This type implements <code>Copy</code>, so Rust will copy values of this type instead of moving them \u2013 this means that the original value is still considered valid. Since all the values being bound on the match arm implement <code>Copy</code>, it's not necessary to invalidate <code>origin</code>. Field access works similarly: <code>origin.x</code> doesn't invalidate <code>origin</code> when <code>origin.x</code> implements <code>Copy</code>!</p>\n\n<p>Now, if the fields were of a type that doesn't implement <code>Copy</code> (say, <code>String</code>), then that's a different story. Rust is forced to move each <code>String</code> from the field to the binding in the match arm. As a result, the fields in <code>origin</code> are invalidated. Since we can't use a value with invalidated fields, then the whole struct is invalidated as well.</p>\n\n<p>Let's spice things up a little. Consider the following code:</p>\n\n<pre><code>struct Point {\n    x: i32,\n    y: String,\n}\n\nlet origin = Point { x: 0, y: \"zero\".to_string() };\n\nmatch origin {\n    Point { x: x1, y: _ } =&gt; println!(\"({},...)\", x1),\n}\n\nmatch origin {\n    Point { x: x1, y: _ } =&gt; println!(\"({},...)\", x1),\n}\n\nmatch origin {\n    Point { x: _, y: y1 } =&gt; println!(\"(...,{})\", y1),\n}\n\nmatch origin {\n    Point { x: _, y: y1 } =&gt; println!(\"(...,{})\", y1),\n}\n</code></pre>\n\n<p>Here, we're using the placeholder pattern (<code>_</code>) to say we're not interested in the value of a certain field. We could also use a wildcard pattern (<code>..</code>, as in <code>Point { x: x1, .. }</code>) to ignore all the fields that are not named in the struct pattern. In either case, it has the effect of <strong>not moving the ignored field(s)</strong>.</p>\n\n<p>In the first two matches, we only bind the <code>x</code> field, which is of type <code>i32</code>. Since <code>i32</code> implements <code>Copy</code>, <code>origin</code> is not invalidated, even though neither <code>origin</code> nor <code>origin.y</code> are copyable (<code>origin.y</code> just stays where it is).</p>\n\n<p>In the third match, we only bind the <code>y</code> field, which is of type <code>String</code>. Since <code>String</code> doesn't implement <code>Copy</code>, <code>origin.y</code> is moved into <code>y1</code>, so <code>origin</code> is invalidated. This causes compiler errors on the fourth match, as it tries to use <code>origin</code> after it has been invalidated:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0382]: use of partially moved value: `origin`\n  --&gt; &lt;anon&gt;:21:11\n   |\n18 |         Point { x: _, y: y1 } =&gt; println!(\"(...,{})\", y1),\n   |                          -- value moved here\n...\n21 |     match origin {\n   |           ^^^^^^ value used here after move\n   |\n   = note: move occurs because `origin.y` has type `std::string::String`, which does not implement the `Copy` trait\n\nerror[E0382]: use of moved value: `origin.y`\n  --&gt; &lt;anon&gt;:22:26\n   |\n18 |         Point { x: _, y: y1 } =&gt; println!(\"(...,{})\", y1),\n   |                          -- value moved here\n...\n22 |         Point { x: _, y: y1 } =&gt; println!(\"(...,{})\", y1),\n   |                          ^^ value used here after move\n   |\n   = note: move occurs because `origin.y` has type `std::string::String`, which does not implement the `Copy` trait\n</code></pre>\n"}], "owner": {"reputation": 1135, "user_id": 3754101, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/D1eNN.jpg?s=128&g=1", "display_name": "enaJ", "link": "https://stackoverflow.com/users/3754101/enaj"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 330, "favorite_count": 0, "accepted_answer_id": 40353604, "answer_count": 1, "score": 2, "last_activity_date": 1477969719, "creation_date": 1477964722, "last_edit_date": 1495542800, "question_id": 40353047, "link": "https://stackoverflow.com/questions/40353047/why-is-this-struct-not-moved-after-pattern-matching", "title": "Why is this struct not moved after pattern matching?", "body": "<p>Based on <a href=\"https://stackoverflow.com/questions/30562985/preventing-move-semantics-during-pattern-matching\">Preventing move semantics during pattern matching</a>, my understanding is when I do a <code>match</code> on a struct, if not using a reference to do the match, the struct will be moved since it is not a primitive type. To test this, I implemented the following: </p>\n\n<pre><code>struct Point {\n    x: i32,\n    y: i32,\n}\n\nlet origin = Point { x: 0, y: 0 };\n\nmatch origin {\n    Point { x: x1, y: y1 } =&gt; println!(\"({},{})\", x1, y1),\n}\n\n// to check if the origin has been moved, and it seems not, why ?? \nmatch origin {\n    Point { x: x1, y: y1 } =&gt; println!(\"({},{})\", x1, y1),\n}\n</code></pre>\n\n<p>The output is <code>(0,0) (0,0)</code>, which means the original struct is still there. Shouldn't it have been moved after the first <code>match</code>? </p>\n"}, {"tags": ["iterator", "rust"], "answers": [{"comments": [{"owner": {"reputation": 403, "user_id": 1560426, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/480e86de381613d779d04419e46d1707?s=128&d=identicon&r=PG", "display_name": "Ian D. Scott", "link": "https://stackoverflow.com/users/1560426/ian-d-scott"}, "edited": false, "score": 0, "creation_date": 1477962233, "post_id": 40352633, "comment_id": 67959860, "body": "Ah, I see, thanks! I suppose what I was confused by is the fact that the functions all deal with <code>String</code> rather than <code>&amp;str</code>, so it seems like it should be moving the values. But that is not the case since the closures aren&#39;t returning the actual values, but rather iterators that are later lazily evaluated, and those iterators contain references to the original object."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 403, "user_id": 1560426, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/480e86de381613d779d04419e46d1707?s=128&d=identicon&r=PG", "display_name": "Ian D. Scott", "link": "https://stackoverflow.com/users/1560426/ian-d-scott"}, "edited": false, "score": 2, "creation_date": 1477962448, "post_id": 40352633, "comment_id": 67959907, "body": "@IanD.Scott While <code>chars</code> can be called on a <code>String</code>, note that it takes <code>&amp;self</code> (a reference) and that it&#39;s actually implemented via <code>Deref</code>, meaning that the implementation is actually on <code>str</code>. Thus <code>&amp;self</code> =&gt; <code>&amp;str</code>."}, {"owner": {"reputation": 13693, "user_id": 352708, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/68dcad0efb04cad998822cc57112eb7c?s=128&d=identicon&r=PG", "display_name": "Slava Semushin", "link": "https://stackoverflow.com/users/352708/slava-semushin"}, "edited": false, "score": 2, "creation_date": 1478091384, "post_id": 40352633, "comment_id": 68012757, "body": "Thank you for the <code>let () = x;</code> trick for determining the variable type!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 13693, "user_id": 352708, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/68dcad0efb04cad998822cc57112eb7c?s=128&d=identicon&r=PG", "display_name": "Slava Semushin", "link": "https://stackoverflow.com/users/352708/slava-semushin"}, "edited": false, "score": 0, "creation_date": 1478091620, "post_id": 40352633, "comment_id": 68012894, "body": "@SlavaSemushin <a href=\"http://stackoverflow.com/q/21747136/155423\">How do I print the type of a variable in Rust?</a>."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1553307897, "last_edit_date": 1553307897, "creation_date": 1477961168, "answer_id": 40352633, "question_id": 40352488, "link": "https://stackoverflow.com/questions/40352488/why-does-flat-map-with-chars-not-work-with-stdiolines-but-does-with-a/40352633#40352633", "title": "Why does .flat_map() with .chars() not work with std::io::Lines, but does with a vector of Strings?", "body": "<p>Start by figuring out what the type of the closure's variable is:</p>\n\n<pre><code>let mut chars = lines.flat_map(|x| {\n    let () = x;\n    x.unwrap().chars()\n});\n</code></pre>\n\n<p>This shows it's a <code>Result&lt;String, io::Error&gt;</code>. After <code>unwrap</code>ping it, it will be a <code>String</code>.</p>\n\n<p>Next, look at <a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.chars\" rel=\"nofollow noreferrer\"><code>str::chars</code></a>:</p>\n\n<pre><code>fn chars(&amp;self) -&gt; Chars\n</code></pre>\n\n<p>And the <a href=\"https://doc.rust-lang.org/std/str/struct.Chars.html\" rel=\"nofollow noreferrer\">definition of <code>Chars</code></a>:</p>\n\n<pre><code>pub struct Chars&lt;'a&gt; {\n    // some fields omitted\n}\n</code></pre>\n\n<p>From that, we can tell that calling <code>chars</code> on a string returns an iterator that has a <em>reference</em> to the string.</p>\n\n<p>Whenever we have a reference, we know that the reference cannot outlive the thing that it is borrowed from. In this case, <code>x.unwrap()</code> is the owner. The next thing to check is where that ownership <em>ends</em>. In this case, the closure owns the <code>String</code>, so at the end of the closure, the value is dropped and any references are invalidated. </p>\n\n<p>Except the code tried to return a <code>Chars</code> that still referred to the string. Oops. Thanks to Rust, the code didn't segfault!</p>\n\n<p>The difference with the example that works is all in the ownership. In that case, the strings are owned by a vector outside of the loop and they do not get dropped before the iterator is consumed. Thus there are no lifetime issues.</p>\n\n<p>What this code really wants is an <code>into_chars</code> method on <code>String</code>. That iterator could take ownership of the value and return characters.</p>\n\n<hr>\n\n<p>Not the maximum efficiency, but a good start:</p>\n\n<pre><code>struct IntoChars {\n    s: String,\n    offset: usize,\n}\n\nimpl IntoChars {\n    fn new(s: String) -&gt; Self {\n        IntoChars { s: s, offset: 0 }\n    }\n}\n\nimpl Iterator for IntoChars {\n    type Item = char;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        let remaining = &amp;self.s[self.offset..];\n\n        match remaining.chars().next() {\n            Some(c) =&gt; {\n                self.offset += c.len_utf8();\n                Some(c)\n            }\n            None =&gt; None,\n        }\n    }\n}\n\nuse std::io::BufRead;\n\nfn main() {\n    let stdin = std::io::stdin();\n    let lines = stdin.lock().lines();\n    let chars = lines.flat_map(|x| IntoChars::new(x.unwrap()));\n\n    for c in chars {\n        println!(\"{}\", c);\n    }\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/43952104/155423\">How can I store a Chars iterator in the same struct as the String it is iterating on?</a></li>\n<li><a href=\"https://stackoverflow.com/q/47193584/155423\">Is there an owned version of String::chars?</a></li>\n</ul>\n"}], "owner": {"reputation": 403, "user_id": 1560426, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/480e86de381613d779d04419e46d1707?s=128&d=identicon&r=PG", "display_name": "Ian D. Scott", "link": "https://stackoverflow.com/users/1560426/ian-d-scott"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 374, "favorite_count": 0, "accepted_answer_id": 40352633, "answer_count": 1, "score": 5, "last_activity_date": 1553307897, "creation_date": 1477959966, "last_edit_date": 1495542805, "question_id": 40352488, "link": "https://stackoverflow.com/questions/40352488/why-does-flat-map-with-chars-not-work-with-stdiolines-but-does-with-a", "title": "Why does .flat_map() with .chars() not work with std::io::Lines, but does with a vector of Strings?", "body": "<p>I am trying to iterate over characters in stdin. The <code>Read.chars()</code> method achieves this goal, but is unstable. The obvious alternative is to use <code>Read.lines()</code> with a <code>flat_map</code> to convert it to a character iterator.</p>\n\n<p>This seems like it should work, but doesn't, resulting in <code>borrowed value does not live long enough</code> errors.</p>\n\n<pre><code>use std::io::BufRead;\n\nfn main() {\n    let stdin = std::io::stdin();\n    let mut lines = stdin.lock().lines();\n    let mut chars = lines.flat_map(|x| x.unwrap().chars());\n}\n</code></pre>\n\n<p>This is mentioned in <a href=\"https://stackoverflow.com/questions/35385703/read-file-character-by-character-in-rust/37189758\">Read file character-by-character in Rust</a>, but it does't really explain why.</p>\n\n<p>What I am particularly confused about is how this differs from the example in the <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.flat_map\" rel=\"nofollow noreferrer\">documentation for <code>flat_map</code></a>, which uses <code>flat_map</code> to apply <code>.chars()</code> to a vector of strings. I don't really see how that should be any different. The main difference I see is that my code needs to call <code>unwrap()</code> as well, but changing the last line to the following does not work either: </p>\n\n<pre><code>let mut chars = lines.map(|x| x.unwrap());\nlet mut chars = chars.flat_map(|x| x.chars());\n</code></pre>\n\n<p>It fails on the second line, so the issue doesn't appear to be the <code>unwrap</code>.</p>\n\n<p>Why does this last line not work, when the very similar line in the documentation doesn't? Is there any way to get this to work?</p>\n"}, {"tags": ["rust", "borrowing"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1477954850, "post_id": 40351321, "comment_id": 67958101, "body": "Can&#39;t find appropriate duplicate at the moment, but it exists. Split up your type into more fine-grained types and move the methods to those. Then you can call <code>self.thing1.fn1(...)</code> <code>self.thing2.fn2(...)</code>."}, {"owner": {"reputation": 580, "user_id": 704969, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b74f4dcc07a2089e5994f578c3b4d2f1?s=128&d=identicon&r=PG", "display_name": "GregoryComer", "link": "https://stackoverflow.com/users/704969/gregorycomer"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1477955209, "post_id": 40351321, "comment_id": 67958206, "body": "Can I do that if I&#39;m referencing self.input in both locations?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1477958092, "post_id": 40351321, "comment_id": 67958956, "body": "Have to see code to be sure, but I believe so. If you do <code>self.thing1.fn(self.input)</code> and <code>self.thing2.fn(self.input)</code>, for example. Short version is that borrow checking stops at the function boundary. Inside one function, it can see that <code>self.thing1</code> and <code>self.input</code> are disjoint, but if you borrow <code>self.input</code> in one function and call another method on `self, then it assumes that method could do anything, including invalidate your mutable reference."}, {"owner": {"reputation": 1106, "user_id": 161659, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/jKJ7J.jpg?s=128&g=1", "display_name": "Sebastian Ullrich", "link": "https://stackoverflow.com/users/161659/sebastian-ullrich"}, "edited": false, "score": 1, "creation_date": 1477968764, "post_id": 40351321, "comment_id": 67961150, "body": "You can circumvent your specific problem by using a <a href=\"http://stackoverflow.com/questions/28776630/implementing-a-cautious-take-while-using-peekable\">more cautious take_while</a>"}, {"owner": {"reputation": 580, "user_id": 704969, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b74f4dcc07a2089e5994f578c3b4d2f1?s=128&d=identicon&r=PG", "display_name": "GregoryComer", "link": "https://stackoverflow.com/users/704969/gregorycomer"}, "edited": false, "score": 0, "creation_date": 1477972552, "post_id": 40351321, "comment_id": 67961871, "body": "Thanks. It looks like that&#39;s what I need."}], "owner": {"reputation": 580, "user_id": 704969, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b74f4dcc07a2089e5994f578c3b4d2f1?s=128&d=identicon&r=PG", "display_name": "GregoryComer", "link": "https://stackoverflow.com/users/704969/gregorycomer"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 142, "favorite_count": 0, "closed_date": 1501886694, "answer_count": 0, "score": 0, "last_activity_date": 1477954726, "creation_date": 1477951762, "last_edit_date": 1477954726, "question_id": 40351321, "link": "https://stackoverflow.com/questions/40351321/multiple-self-borrows", "closed_reason": "Duplicate", "title": "Multiple self borrows", "body": "<p>I'm learning Rust and am trying to write a simple lexer. I have a function <code>next_token</code> in an <code>impl</code> block that reads the next token from an input character iterator. However, the code will not build because of multiple borrows of self. How do I get around this?</p>\n\n<pre><code>struct Lexer&lt;'a&gt; {\n    input: Peekable&lt;Chars&lt;'a&gt;&gt;\n}\n\n...\n\nimpl&lt;'a&gt; Lexer&lt;'a&gt; {\n    pub fn create(input: &amp;str) -&gt; Lexer {\n        Lexer { input: input.chars().peekable() }\n    }\n\n    fn next_token(&amp;mut self) -&gt; Option&lt;Token&gt; {\n        match self.input.by_ref().peek() {\n            Some(c) if c.is_alphabetic() || *c == '_' =&gt; { // Identifier or keyword\n                let literal = self.input.take_while(|&amp;ch| {\n                    match self.input.peek() {\n                        Some(inner_c) =&gt; inner_c.is_alphanumeric() || *inner_c == '_',\n                        None =&gt; false\n                    }\n                }).collect::&lt;String&gt;();\n                if let Some(keyword) = check_keyword(&amp;literal) { // Literal is a keyword\n                    return Some(Token { literal: literal, token_type: keyword });\n                } else { // Literal is identifier\n                    return Some(Token { literal: literal, token_type: TokenType::Identifier });\n                };\n            },\n            ... // Other cases\n        }\n    }\n}\n</code></pre>\n\n<p>The error I am getting:</p>\n\n<blockquote>\n  <p>error[E0507]: cannot move out of borrowed content    -->\n  lexer.rs:110:20\n      | 110 |                                   let literal = self.input.take_while(|&amp;ch| {\n      |                                                 ^^^^ cannot move out of borrowed content</p>\n  \n  <p>error[E0500]: closure requires unique access to <code>self</code> but\n  <code>self.input</code> is already borrowed    --> lexer.rs:110:42\n      | 108 |                   match self.input.by_ref().peek() {\n      |                         ---------- borrow occurs here 109 |                           Some(c) if c.is_alphabetic() || *c == '_' => { // Identifier or\n  keyword 110 |                                   let literal =\n  self.input.take_while(|&amp;ch| {\n      |                                                         ^^^^^ closure construction occurs here 111 |<br>\n  match self.input.peek() {\n      |                            ---- borrow occurs due to use of <code>self</code> in closure ... 139 |                   }\n      |                   - borrow ends here</p>\n</blockquote>\n"}, {"tags": ["memory-management", "rust", "traits"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1477929065, "post_id": 40345320, "comment_id": 67945767, "body": "The same reason you&#39;d write code at any other time - when you need to do something that isn&#39;t the default behavior. In this case, the default behavior is recursively calling <code>drop</code> on all the contained items."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 3, "creation_date": 1477931016, "post_id": 40345320, "comment_id": 67947008, "body": "Note that in the book&#39;s scenario, what generally happens is that one day you handle a slightly bigger list than usual, things blow up, and looking at the memory dump you realize that there is an unbounded recursion here that needs fixing. Then you implement <code>Drop</code> yourself."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1484313492, "post_id": 40345320, "comment_id": 70470648, "body": "@Shepmaster: it\u2019s not the <i>default</i> behaviour, it\u2019s the <i>only</i> behaviour. Implementing <code>Drop</code> is all about doing something else <i>as well</i>. (OK, so you can mutate <code>self</code> to change what will happen with the contained objects, so you can make something which effectively prevents <code>Drop</code> from happening by wrapping an <code>Option</code> and replacing some value with <code>None</code>, but I maintain my position.)"}], "owner": {"reputation": 514, "user_id": 1375259, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/yuWQ9.jpg?s=128&g=1", "display_name": "Chakravarthy Raghunandan", "link": "https://stackoverflow.com/users/1375259/chakravarthy-raghunandan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 79, "favorite_count": 0, "answer_count": 0, "score": 2, "last_activity_date": 1477928958, "creation_date": 1477927662, "last_edit_date": 1477928958, "question_id": 40345320, "link": "https://stackoverflow.com/questions/40345320/when-should-i-write-an-implementation-of-the-drop-trait-for-a-type", "title": "When should I write an implementation of the Drop trait for a type?", "body": "<p>I am going through <a href=\"http://cglab.ca/~abeinges/blah/too-many-lists/book/\" rel=\"nofollow\">the too many lists book</a> which explains the basics of Rust by writing some linked lists. In <a href=\"http://cglab.ca/~abeinges/blah/too-many-lists/book/first-drop.html\" rel=\"nofollow\">this chapter</a>, the author explains why we might want to implement the <code>Drop</code> trait for our custom type stating that the automatic handling of the destructor is <strong>bad</strong> for that type.</p>\n\n<p>That's all well and good, but why and when should I implement the <code>Drop</code> trait for my own custom types? I wouldn't have guessed it was even needed for the above scenario (as mentioned in the book). When should I let Rust handle the destructors on it's own?</p>\n"}, {"tags": ["sockets", "tcp", "rust"], "answers": [{"comments": [{"owner": {"reputation": 2301, "user_id": 1236990, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/cc856652c4db97f4eacc9bffa6540ece?s=128&d=identicon&r=PG", "display_name": "varagrawal", "link": "https://stackoverflow.com/users/1236990/varagrawal"}, "edited": false, "score": 0, "creation_date": 1477934100, "post_id": 40345782, "comment_id": 67948731, "body": "Thanks @kennytm, I figured out that issue before you answered and didn&#39;t get the time to update my question. It was exactly as you mentioned, setting my IP as 0.0.0.0 now has my server working. Thanks again for your answer."}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1477958419, "post_id": 40345782, "comment_id": 67959035, "body": "<code>Result::expect</code> will screw the line reported. Thus <code>if let Err (err) = ... {panic! (&quot;message, {}&quot;, err)}</code> is often more helpful when the error actually happens."}, {"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "reply_to_user": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1477970787, "post_id": 40345782, "comment_id": 67961521, "body": "@ArtemGr Hopefully someone will push forward <a href=\"https://internals.rust-lang.org/t/rfrfc-better-option-result-error-messages\" rel=\"nofollow noreferrer\">internals.rust-lang.org/t/&hellip;</a> so <code>expect</code>&#39;s line number is correct. But with a unique-enough message it should not be hard to find our which <code>expect</code> is going wrong."}], "tags": [], "owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "is_accepted": true, "score": 7, "last_activity_date": 1477931252, "last_edit_date": 1495541956, "creation_date": 1477929047, "answer_id": 40345782, "question_id": 40345168, "link": "https://stackoverflow.com/questions/40345168/unable-to-connect-to-tcp-server-from-external-machine/40345782#40345782", "title": "Unable to connect to TCP Server from external machine", "body": "<pre><code>let listener = TcpListener::bind(\"127.0.0.1:6009\").unwrap();\n</code></pre>\n\n<p>If you bind to <code>127.0.0.1:xxxx</code>, the socket can only listen from the localhost interface. To allow external connections, bind to <code>0.0.0.0</code> instead, so that it can accept connections from all network interfaces.</p>\n\n<pre><code>let listener = TcpListener::bind(\"0.0.0.0:6009\").unwrap();\n</code></pre>\n\n<p>See <a href=\"https://stackoverflow.com/questions/35988808/why-would-i-bind-on-a-different-server-than-127-0-0-1\">Why would I bind on a different server than 127.0.0.1?</a> for detail.</p>\n\n<hr>\n\n<p>BTW, (1)</p>\n\n<pre><code>// not idiomatic\nlet _ = match stream.read(&amp;mut buf) {\n    Err(e) =&gt; panic!(\"Got an error: {}\", e),\n    Ok(m) =&gt; m,\n};\n</code></pre>\n\n<p>You could use <a href=\"https://doc.rust-lang.org/std/result/enum.Result.html#method.expect\" rel=\"nofollow noreferrer\"><code>Result::expect</code></a> for this.</p>\n\n<pre><code>// better\nstream.read(&amp;mut buf).expect(\"Got an error\");\n</code></pre>\n\n<p>(2)</p>\n\n<pre><code>// not idiomatic\nmatch stream.write(\"This works!\".as_bytes()) {\n    Err(e) =&gt; panic!(\"Read-Server: Error writing to stream {}\", e),\n    Ok(_) =&gt; (),\n}\n</code></pre>\n\n<p>instead of <code>\"aaa\".as_bytes()</code> you could simply write <code>b\"aaa\"</code>.</p>\n\n<pre><code>// better\nstream.write(b\"This works!\").expect(\"Read-Server: Error writing to stream\");\n</code></pre>\n"}], "owner": {"reputation": 2301, "user_id": 1236990, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/cc856652c4db97f4eacc9bffa6540ece?s=128&d=identicon&r=PG", "display_name": "varagrawal", "link": "https://stackoverflow.com/users/1236990/varagrawal"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 359, "favorite_count": 0, "accepted_answer_id": 40345782, "answer_count": 1, "score": 1, "last_activity_date": 1477931252, "creation_date": 1477927171, "last_edit_date": 1477929136, "question_id": 40345168, "link": "https://stackoverflow.com/questions/40345168/unable-to-connect-to-tcp-server-from-external-machine", "title": "Unable to connect to TCP Server from external machine", "body": "<p>I have written a basic TCP server in Rust but I am unable to access it from a different computer on the same network. It is not a network problem since I also wrote a similar Python TCP server and the test client is able to connect to that server successfully.</p>\n\n<pre><code>use std::io::{Read, Write};\nuse std::net::{TcpListener, TcpStream};\nuse std::thread;\nuse std::str;\n\nfn handle_read(mut stream: TcpStream) {\n    let mut buf;\n    // clear out the buffer so we don't send garbage\n    buf = [0; 512];\n\n    // Read and discard any data from the client since this is a read only server.\n    let _ = match stream.read(&amp;mut buf) {\n        Err(e) =&gt; panic!(\"Got an error: {}\", e),\n        Ok(m) =&gt; m,\n    };\n\n    println!(\"Got some data\");\n\n    // Write back the response to the TCP stream\n    match stream.write(\"This works!\".as_bytes()) {\n        Err(e) =&gt; panic!(\"Read-Server: Error writing to stream {}\", e),\n        Ok(_) =&gt; (),\n    }\n\n}\n\npub fn read_server() {\n    // Create TCP server\n    let listener = TcpListener::bind(\"127.0.0.1:6009\").unwrap();\n    println!(\"Read server listening on port 6009 started, ready to accept\");\n\n    // Wait for incoming connections and respond accordingly\n    for stream in listener.incoming() {\n        match stream {\n            Err(_) =&gt; {\n                println!(\"Got an error\");\n            }\n            Ok(stream) =&gt; {\n\n                println!(\"Received a connection\");\n                // Spawn a new thread to respond to the connection request\n                thread::spawn(move || {\n                    handle_read(stream);\n\n                });\n\n            }    \n        }\n\n    }\n}\n\nfn main() {\n    read_server();\n}\n</code></pre>\n"}, {"tags": ["memory-management", "rust", "runtime", "panic"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1477925292, "last_edit_date": 1477925292, "creation_date": 1477924491, "answer_id": 40344335, "question_id": 40344223, "link": "https://stackoverflow.com/questions/40344223/what-happens-to-stack-heap-allocated-types-when-a-runtime-panic-occurs/40344335#40344335", "title": "What happens to stack/heap allocated types when a runtime panic occurs?", "body": "<p>By default, the stack will be unwound and destructors are run. You can prove this for yourself:</p>\n\n<pre><code>struct Noisy;\n\nimpl Drop for Noisy {\n    fn drop(&amp;mut self) {\n        println!(\"Dropping!\");\n    }\n}\n\nfn main() {\n    let _on_stack = Noisy;\n    let _on_heap = Box::new(Noisy);\n\n    panic!(\"Oh no!\");\n}\n</code></pre>\n\n<p>This will print:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Dropping!\nDropping!\n</code></pre>\n\n<p>Note that there's no real difference in stack or heap here. Any heap-allocated item is going to have <em>something</em> on the stack pointing to it. When the handle on the stack goes out of scope, it cleans up the heap resources.</p>\n\n<hr>\n\n<p>The stack is unwound until it exits from the current thread (if it's the main thread, the program exits). It's also possible to use <a href=\"https://doc.rust-lang.org/std/panic/fn.catch_unwind.html\" rel=\"nofollow\"><code>catch_unwind</code></a>. Beware using this though:</p>\n\n<blockquote>\n  <p>It is <strong>not</strong> recommended to use this function for a general try/catch mechanism. [...] Note that this function may <strong>not catch all panics</strong> in Rust. </p>\n</blockquote>\n\n<p>Note that I said <em>by default</em>. You can also compile with an option whereby panics translate directly into aborting the process. At that point, the process is over and no more destructors will be run.</p>\n\n<p>If you panic in a destructor, then it's also game over: the process will be aborted.</p>\n"}], "owner": {"reputation": 514, "user_id": 1375259, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/yuWQ9.jpg?s=128&g=1", "display_name": "Chakravarthy Raghunandan", "link": "https://stackoverflow.com/users/1375259/chakravarthy-raghunandan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 83, "favorite_count": 0, "accepted_answer_id": 40344335, "answer_count": 1, "score": 2, "last_activity_date": 1477925292, "creation_date": 1477924113, "last_edit_date": 1477924333, "question_id": 40344223, "link": "https://stackoverflow.com/questions/40344223/what-happens-to-stack-heap-allocated-types-when-a-runtime-panic-occurs", "title": "What happens to stack/heap allocated types when a runtime panic occurs?", "body": "<p>What happens to the types that are allocated on the heap or stack before a panic occurs? Is a destructor called so that the types are deallocated? Do they linger around in the memory waiting to be overwritten by some other process? Or is it something else entirely?</p>\n\n<p>I've no idea since I'm new to Rust and systems programming in general.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "is_accepted": true, "score": 4, "last_activity_date": 1477926980, "last_edit_date": 1477926980, "creation_date": 1477925005, "answer_id": 40344516, "question_id": 40343801, "link": "https://stackoverflow.com/questions/40343801/what-is-the-main-difference-between-implicit-and-explicit-case-analysis/40344516#40344516", "title": "What is the main difference between implicit and explicit case analysis?", "body": "<p>In the book, <strong>case analysis</strong> means performing a computation by directly analyzing each case of an <code>enum</code>, such as using the <code>match</code> or <code>if let</code> expression. An extreme example given from the book is</p>\n\n<pre><code>fn file_path_ext_explicit(file_path: &amp;str) -&gt; Option&lt;&amp;str&gt; {\n    match file_name(file_path) {    // &lt;-- case analysis\n        None =&gt; None,\n        Some(name) =&gt; match extension(name) {   // &lt;-- another case analysis\n            None =&gt; None,\n            Some(ext) =&gt; Some(ext),\n        }\n    }\n}\n</code></pre>\n\n<p><strong>Explicit case analysis</strong> just means using \"case analysis\" explicitly.</p>\n\n<p>There is no \"implicit case analysis\". The book suggests to <em>abstract away</em> commonly used case-analysis patterns into composable methods or macros, perhaps that's what you're thinking of. </p>\n\n<p>For instance, we could hide the case-analysis (<code>match</code> expression) in an <code>and_then</code> method on <code>Option&lt;T&gt;</code>:</p>\n\n<pre><code>fn and_then&lt;F, T, A&gt;(option: Option&lt;T&gt;, f: F) -&gt; Option&lt;A&gt;\n        where F: FnOnce(T) -&gt; Option&lt;A&gt; {\n    match option {   // &lt;-- case analysis moved into here\n        None =&gt; None,\n        Some(value) =&gt; f(value),\n    }\n}\n</code></pre>\n\n<p>the <code>file_path_ext_explicit</code> function could then be simplified to</p>\n\n<pre><code>fn file_path_ext(file_path: &amp;str) -&gt; Option&lt;&amp;str&gt; {\n    // no `match` expressions\n    file_name(file_path).and_then(extension)\n}\n</code></pre>\n\n<p>which expresses the intent of the function more clearly and less prone to logical mistakes.</p>\n"}], "owner": {"reputation": 4962, "user_id": 231441, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/P2kt4.png?s=128&g=1", "display_name": "zzeroo", "link": "https://stackoverflow.com/users/231441/zzeroo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 130, "favorite_count": 0, "accepted_answer_id": 40344516, "answer_count": 1, "score": 1, "last_activity_date": 1477926980, "creation_date": 1477922686, "last_edit_date": 1477926836, "question_id": 40343801, "link": "https://stackoverflow.com/questions/40343801/what-is-the-main-difference-between-implicit-and-explicit-case-analysis", "title": "What is the main difference between implicit and explicit case analysis?", "body": "<p>While reading the <a href=\"https://doc.rust-lang.org/book/error-handling.html#working-with-multiple-error-types\" rel=\"nofollow\">chapter on error handling in the book</a>, I wondered what the opposite of the often-mentioned \"explicit case analysis\" would be. I know and understand that this code sample uses explicit case analysis:</p>\n\n<pre><code>fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n    match *self {\n        CliError::Io(ref err) =&gt; write!(f, \"IO error: {}\", err),\n        CliError::Parse(ref err) =&gt; write!(f, \"Parse error: {}\", err),\n    }\n}\n</code></pre>\n\n<p>But what is implicit case analysis?</p>\n"}, {"tags": ["rust", "match"], "comments": [{"owner": {"reputation": 41983, "user_id": 866732, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/f09f0253204000d6083ed1de21afc6fd?s=128&d=identicon&r=PG", "display_name": "WiSaGaN", "link": "https://stackoverflow.com/users/866732/wisagan"}, "edited": false, "score": 1, "creation_date": 1477898449, "post_id": 40337822, "comment_id": 67930450, "body": "<code>ref</code> means &quot;taking a reference of&quot;. It is not a type."}, {"owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "edited": false, "score": 1, "creation_date": 1477898817, "post_id": 40337822, "comment_id": 67930552, "body": "See this blog post <a href=\"http://xion.io/post/code/rust-patterns-ref.html\" rel=\"nofollow noreferrer\">xion.io/post/code/rust-patterns-ref.html</a>. There is all you need to know about <code>ref</code> and <code>&amp;</code>."}, {"owner": {"reputation": 1135, "user_id": 3754101, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/D1eNN.jpg?s=128&g=1", "display_name": "enaJ", "link": "https://stackoverflow.com/users/3754101/enaj"}, "edited": false, "score": 0, "creation_date": 1477899510, "post_id": 40337822, "comment_id": 67930755, "body": "Thanks, that are very helpful!"}], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 10, "last_activity_date": 1477899755, "creation_date": 1477899755, "answer_id": 40338202, "question_id": 40337822, "link": "https://stackoverflow.com/questions/40337822/match-a-struct-using-reference/40338202#40338202", "title": "Match a struct using reference", "body": "<p><code>ref</code> is not a normal part of the pattern that \"strips away\" something from the value, but is a modifier of the name binding, like <code>mut</code>. It instructs the name to bind to a reference to the value instead of the value directly.</p>\n\n<p>Let's see what type <code>a</code> has in each case:</p>\n\n<pre><code>match &amp;x {\n    ref a =&gt; {\n        let () = a;\n    }\n}\nmatch x {\n    ref b =&gt; {\n        let () = b;\n    }\n}\n</code></pre>\n\n<p>The <code>let () = a;</code> is a trick to find out the type of <code>a</code>. And indeed the compiler tells us:</p>\n\n<pre><code>   |\n7  |             let () = a;\n   |                 ^^ expected &amp;&amp;Foo, found ()\n\n[...]\n   |\n12 |             let () = b;\n   |                 ^^ expected &amp;Foo, found ()\n</code></pre>\n\n<p>So in the first case, we have reference to a reference, namely <code>&amp;&amp;Foo</code>. This is because we're matching on the expression <code>&amp;x</code> (type: <code>&amp;Foo</code>) and then tell the compiler to bind the name \"by reference\". </p>\n"}], "owner": {"reputation": 1135, "user_id": 3754101, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/D1eNN.jpg?s=128&g=1", "display_name": "enaJ", "link": "https://stackoverflow.com/users/3754101/enaj"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 566, "favorite_count": 0, "accepted_answer_id": 40338202, "answer_count": 1, "score": 2, "last_activity_date": 1477899824, "creation_date": 1477897511, "last_edit_date": 1477899824, "question_id": 40337822, "link": "https://stackoverflow.com/questions/40337822/match-a-struct-using-reference", "title": "Match a struct using reference", "body": "<p>To match a struct while preventing a move, I want to use a reference to do the match. So the following code will do the job: </p>\n\n<pre><code>struct Foo(i32);\n\nfn main() {\n    let x = Foo(1);\n    match &amp;x {\n        ref a =&gt; println!(\"hello\"),\n    }\n    println!(\"{}\", x.0);\n}\n</code></pre>\n\n<p>But I am surprised to find that the following code also works, which actually matched a struct (<code>x</code>) with a reference (<code>ref a</code>). But, shouldn't it be a type mismatch here?</p>\n\n<pre><code>struct Foo(i32);\n\nfn main() {\n    let x = Foo(1);\n    match x {\n        ref a =&gt; println!(\"hello\")\n    }\n    println!(\"{}\", x.0);\n}\n</code></pre>\n"}, {"tags": ["android", "rust"], "owner": {"reputation": 7560, "user_id": 1034749, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/2022f0caae119ed6232cf370bb9d9d3a?s=128&d=identicon&r=PG", "display_name": "fghj", "link": "https://stackoverflow.com/users/1034749/fghj"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 293, "favorite_count": 2, "answer_count": 0, "score": 16, "last_activity_date": 1587410652, "creation_date": 1477897369, "last_edit_date": 1587410652, "question_id": 40337799, "link": "https://stackoverflow.com/questions/40337799/what-changed-in-rust-begin-unwind-from-rust-1-11-to-1-12", "title": "What changed in rust_begin_unwind from Rust 1.11 to 1.12?", "body": "<p>During the 1.12 beta, I built and ran code this for Android without problems:</p>\n\n<pre><code>[package]\nname = \"android\"\nversion = \"0.1.0\"\nauthors = [\"Author &lt;mail@email.com&gt;\"]\nbuild = \"build.rs\"\n\n[lib]\nname = \"mylib\"\ncrate-type = [\"cdylib\"]\n</code></pre>\n\n<p>I use rustup and <code>rustup target add arm-linux-androideabi</code>.</p>\n\n<p>Now when I load my Rust 1.12 library from Java code I get:</p>\n\n<blockquote>\n  <p>java.lang.UnsatisfiedLinkError: dlopen failed: cannot locate symbol \"rust_begin_unwind\"</p>\n</blockquote>\n\n<p>To temporarily fix this, I <a href=\"https://users.rust-lang.org/t/linking-for-android/7218\">need a workaround</a>:</p>\n\n<pre><code>#[allow(unused_variables)]\n#[no_mangle]\npub extern\nfn rust_begin_unwind(fmt: ::std::fmt::Arguments, file: &amp;'static str, line: u32) -&gt; ! {\n    loop {}\n}\n</code></pre>\n\n<ol>\n<li>Why did unwinding become unavailable on the Android platform?</li>\n<li>How to fix this properly? When debugging, I want to see the full stack trace\nin the Android IDE log window.</li>\n</ol>\n"}, {"tags": ["macros", "rust"], "answers": [{"comments": [{"owner": {"reputation": 128, "user_id": 4012426, "user_type": "registered", "profile_image": "https://graph.facebook.com/100000105441681/picture?type=large", "display_name": "Hutch Moore", "link": "https://stackoverflow.com/users/4012426/hutch-moore"}, "edited": false, "score": 0, "creation_date": 1596485190, "post_id": 40337536, "comment_id": 111820962, "body": "It&#39;s just too bad you can&#39;t seem to use <code>stringify</code> in attributes."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 19, "last_activity_date": 1577965966, "last_edit_date": 1577965966, "creation_date": 1477895573, "answer_id": 40337536, "question_id": 40337462, "link": "https://stackoverflow.com/questions/40337462/how-do-i-create-a-rust-macro-to-define-a-string-variable-with-the-value-of-its-o/40337536#40337536", "title": "How do I create a Rust macro to define a String variable with the value of its own identifier?", "body": "<p>You want <a href=\"https://doc.rust-lang.org/std/macro.stringify.html\" rel=\"noreferrer\"><code>stringify!</code></a>:</p>\n\n<pre><code>macro_rules! str_var {\n    ($name:ident) =&gt; {\n        let $name = String::from(stringify!($name));\n    };\n}\n\nfn main() {\n    str_var!(foo);\n    println!(\"foo: {:?}\", foo);\n}\n</code></pre>\n"}], "owner": {"reputation": 1271, "user_id": 897956, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/910d6b81ae077c4af8d627a7cdab6520?s=128&d=identicon&r=PG", "display_name": "qinsoon", "link": "https://stackoverflow.com/users/897956/qinsoon"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2773, "favorite_count": 0, "accepted_answer_id": 40337536, "answer_count": 1, "score": 13, "last_activity_date": 1577965966, "creation_date": 1477895059, "last_edit_date": 1477917581, "question_id": 40337462, "link": "https://stackoverflow.com/questions/40337462/how-do-i-create-a-rust-macro-to-define-a-string-variable-with-the-value-of-its-o", "title": "How do I create a Rust macro to define a String variable with the value of its own identifier?", "body": "<p>I want to write a macro to define something like below:</p>\n\n<pre><code>let FOO: String = \"FOO\".to_string();\n</code></pre>\n\n<p>It is possible for me to have a macro:</p>\n\n<pre><code>macro_rules! my_macro {\n    ($name: ident, $val: expr) =&gt; {\n        let $name: String = $val.to_string();\n    }\n}\n</code></pre>\n\n<p>and use it as <code>my_macro!(FOO, \"FOO\");</code></p>\n\n<p>However, this is a bit redundant. I expect to have something like <code>my_macro!(FOO)</code>, and it can expand and use the <code>$name</code> as identifier, but also in the string value.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "is_accepted": false, "score": 5, "last_activity_date": 1477917535, "last_edit_date": 1495541233, "creation_date": 1477890814, "answer_id": 40336915, "question_id": 40336735, "link": "https://stackoverflow.com/questions/40336735/how-to-generate-a-compilation-error-when-pointer-types-differ-in-rust/40336915#40336915", "title": "How to generate a compilation error when pointer types differ in Rust?", "body": "<p>A simple way to ensure types match is to assign them to a dummy value, within a block that never executes.</p>\n\n<pre><code>macro_rules! check_type_pair {\n    ($a:expr, $b:expr) =&gt; {\n        if false {\n            let _type_check = if false {$a} else {$b};\n        }\n    }\n}\n</code></pre>\n\n<p>Then within a macro you can simply add:</p>\n\n<pre><code>check_type_pair!($arg_1, $arg_2);\n</code></pre>\n\n<hr>\n\n<p><a href=\"https://stackoverflow.com/a/40311034/432509\">See example usage</a>.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 54, "favorite_count": 1, "answer_count": 1, "score": 4, "last_activity_date": 1477917535, "creation_date": 1477889430, "last_edit_date": 1495541233, "question_id": 40336735, "link": "https://stackoverflow.com/questions/40336735/how-to-generate-a-compilation-error-when-pointer-types-differ-in-rust", "title": "How to generate a compilation error when pointer types differ in Rust?", "body": "<p>We may want to ensure two types are compatible, especially when writing macros.\nTo check that two arguments are the same type for example.</p>\n\n<p>How to best ensure types are compatible?</p>\n\n<hr>\n\n<p><a href=\"https://stackoverflow.com/questions/1292532\">Similar to this C question, but for Rust.</a></p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 173, "user_id": 3896861, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3e1c46e91635c821f60650f6db19b1af?s=128&d=identicon&r=PG&f=1", "display_name": "Will Murphy", "link": "https://stackoverflow.com/users/3896861/will-murphy"}, "edited": false, "score": 0, "creation_date": 1477876278, "post_id": 40335111, "comment_id": 67925953, "body": "So the warning is telling me that I&#39;m ignoring the return value from <code>writeln!</code>, and the <code>try!</code> makes the warning go away, because <code>try!</code> will look at <code>writeln!</code>&#39;s return value to check whether the Result was successful?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 173, "user_id": 3896861, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3e1c46e91635c821f60650f6db19b1af?s=128&d=identicon&r=PG&f=1", "display_name": "Will Murphy", "link": "https://stackoverflow.com/users/3896861/will-murphy"}, "edited": false, "score": 1, "creation_date": 1477877533, "post_id": 40335111, "comment_id": 67926199, "body": "That&#39;s correct. <code>try!</code> will cause the function to <code>return</code> if the result is an <code>Err</code>."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 3, "last_activity_date": 1477873592, "creation_date": 1477873592, "answer_id": 40335111, "question_id": 40335020, "link": "https://stackoverflow.com/questions/40335020/why-does-adding-try-to-writeln-stop-an-unused-code-compiler-warning/40335111#40335111", "title": "Why does adding try! to writeln! stop an unused-code compiler warning?", "body": "<p><code>write!</code> and <code>writeln!</code> call a method named <code>write_fmt</code> on the first argument passed to the macro. This usually corresponds to the method from the <a href=\"https://doc.rust-lang.org/stable/std/io/trait.Write.html#method.write_fmt\" rel=\"nofollow\"><code>std::io::Write</code></a> or the <a href=\"https://doc.rust-lang.org/stable/std/fmt/trait.Write.html#method.write_fmt\" rel=\"nofollow\"><code>std::fmt::Write</code></a> trait (which require that you <code>use</code> the trait first), or from the <a href=\"https://doc.rust-lang.org/stable/std/fmt/struct.Formatter.html#method.write_fmt\" rel=\"nofollow\"><code>std::fmt::Formatter</code></a> struct.</p>\n\n<p>You'll notice that they all return a <a href=\"https://doc.rust-lang.org/stable/std/result/enum.Result.html\" rel=\"nofollow\"><code>Result</code></a>. <code>Result</code> has the <code>#[must_use]</code> attribute, which is what triggers the \"unused result which must be used\" warning.</p>\n\n<p><code>print!</code> and <code>println!</code>, on the other hand, just return <code>()</code>.</p>\n"}], "owner": {"reputation": 173, "user_id": 3896861, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3e1c46e91635c821f60650f6db19b1af?s=128&d=identicon&r=PG&f=1", "display_name": "Will Murphy", "link": "https://stackoverflow.com/users/3896861/will-murphy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 433, "favorite_count": 0, "accepted_answer_id": 40335111, "answer_count": 1, "score": 2, "last_activity_date": 1477873592, "creation_date": 1477872573, "question_id": 40335020, "link": "https://stackoverflow.com/questions/40335020/why-does-adding-try-to-writeln-stop-an-unused-code-compiler-warning", "title": "Why does adding try! to writeln! stop an unused-code compiler warning?", "body": "<p>I'm following along the <a href=\"http://rustbyexample.com/primitives/tuples.html\" rel=\"nofollow\">Rust by Example Docs</a>,\nand I got a compiler warning that I don't understand. </p>\n\n<p>Consider this code: </p>\n\n<pre><code>use std::fmt::{self, Display};\n\nstruct Matrix(f32, f32, f32, f32);\n\nimpl Display for Matrix  {\n    fn fmt(&amp;self, f : &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        try!(writeln!(f, \" ( {:.2}, {:.2} ) \", self.0, self.1));\n        write!(f, \" ( {:.2}, {:.2} ) \", self.2, self.3)\n    }\n}\n\nfn main() {\n    let m = Matrix(1f32,2f32,3f32,4f32); \n    print!(\"{}\", m);\n}\n</code></pre>\n\n<p>This compiles without error and works fine, but if we remove the <code>try!</code> from the first <code>writeln!</code>, so that the line becomes</p>\n\n<pre><code>writeln!(f, \" ( {:.2}, {:.2} ) \", self.0, self.1); \n</code></pre>\n\n<p>I get this compiler warning:</p>\n\n<pre><code>&lt;std macros&gt;:2:1: 2:54 warning: unused result which must be used, #[warn(unused_must_use)] on by default\n&lt;std macros&gt;:2 $ dst . write_fmt ( format_args ! ( $ ( $ arg ) * ) ) )\n</code></pre>\n\n<p>Why is that? What is the compiler trying to tell me? Does <code>writeln!</code> return some sort of error object that the <code>try!</code> is checking? </p>\n\n<p>I found the source for the <code>writeln!</code> macro here: <a href=\"https://github.com/rust-lang/rust/blob/36d746718086dfcc12f73562b1996daf2f8ba643/src/libcore/macros.rs#L396\" rel=\"nofollow\">https://github.com/rust-lang/rust/blob/36d746718086dfcc12f73562b1996daf2f8ba643/src/libcore/macros.rs#L396</a>\nbut I don't yet understand it well enough yet to answer my own question. </p>\n\n<p>rustc --version gives me <code>rustc 1.10.0 (cfcb716cf 2016-07-03)</code>, if that's relevant.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1477851964, "post_id": 40332112, "comment_id": 67919291, "body": "What do you mean by &quot;complex internals&quot;?"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1477854202, "post_id": 40332112, "comment_id": 67919990, "body": "Having to declare a new type and implement all binary operators (clarified in question)."}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 4, "creation_date": 1477854993, "post_id": 40332112, "comment_id": 67920207, "body": "Either you can do it manually, or you can use the widely used <i>bitflags</i> crate. I&#39;m not sure why you would expect there is a better way to do it than what <i>bitflags</i> does internally."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1477886426, "post_id": 40332112, "comment_id": 67927862, "body": "Ok. <i>doing it manually</i>, is fine, just wanting to avoid a lot of tedious repetition for every type, added a macro which implements bitflag operators so each definition can be 2 lines only."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1479580931, "post_id": 40336386, "comment_id": 68622510, "body": "The more this answer is edited, the closer it comes to the <a href=\"https://crates.io/crates/bitflags\" rel=\"nofollow noreferrer\">normal bitflags crate</a> with the 300 lines of code that you oh-so dreaded."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1479582072, "post_id": 40336386, "comment_id": 68622887, "body": "There is still a distinction between typed integers (which happen to only expose boolean operators), and an API that introduces its own methods for bitflag definition and manipulation. Both are valid, but for now I rather use a type-safe int approach. It&#39;s far less complicated then the bitflags create and &lt; 60 SLOC, so not really adding significant maintenance overhead."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1479584962, "post_id": 40336386, "comment_id": 68623724, "body": "I don&#39;t understand the difference you are trying to explain. Bitflags (a) <a href=\"https://github.com/rust-lang-nursery/bitflags/blob/4f5f288b15dbd673f6861f5fefab034eb76a5203/src/lib.rs#L201-L203\" rel=\"nofollow noreferrer\">creates a unique type, just as this code does</a>, making it type-safe, (b) is zero-overhead as it&#39;s a newtype of an integer, (c) allows access to the underlying value via <code>bits</code>, (d) uses a single macro that can create multiple types. Having each method be 2 lines is meaningless; there&#39;s the same amount of complexity and now line numbers in errors are useless. This appears as Not Invented Here syndrome."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1479585032, "post_id": 40336386, "comment_id": 68623751, "body": "Actually, the 2 lines per implementation is a <b>negative</b> as there&#39;s no documentation and no <code>#[inline]</code> annotation."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1479591526, "post_id": 40336386, "comment_id": 68625612, "body": "The 2 lines on its own wasn&#39;t a down side, I was just wanting to avoid unnecessary repetition. Added <code>[#inline]</code>."}], "tags": [], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "is_accepted": false, "score": 3, "last_activity_date": 1479591396, "last_edit_date": 1479591396, "creation_date": 1477886323, "answer_id": 40336386, "question_id": 40332112, "link": "https://stackoverflow.com/questions/40332112/how-to-declare-typed-bitflags-in-rust/40336386#40336386", "title": "How to declare typed bitflags in Rust?", "body": "<p>Posting answer which uses a macro as one possible solution to the question.</p>\n\n<p>Example usage:</p>\n\n<pre><code>struct_bitflag_impl!(pub struct MyFlag(pub u8));\npub struct MyFlag(u8);\nstruct_bitflag_impl!(MyFlag);\n\npub struct MyOtherFlag(u32);\nstruct_bitflag_impl!(MyOtherFlag);\n</code></pre>\n\n<ul>\n<li>Type-safe.</li>\n<li>Zero overhead compared with plain integer types.</li>\n<li>Underlying value is accessible from <code>value.0</code> if needed.</li>\n<li>Uses a single macro: <code>struct_bitflag_impl</code> which can be re-used and applied to multiple struct types.<br>Each declaration is only 2 lines.</li>\n</ul>\n\n<p>The macro:</p>\n\n<pre><code>/// Implements bitflag operators for integer struct, eg:\n/// ```\n/// pub struct MyFlag(u8);\n/// struct_bitflag_impl!(MyFlag);\n/// ```\nmacro_rules! struct_bitflag_impl {\n    ($p:ident) =&gt; {\n        // Possible additions:\n        // * left/right shift.\n        // * Deref to forward methods to the underlying type.\n\n        impl ::std::ops::BitAnd for $p {\n            type Output = $p;\n            fn bitand(self, _rhs: $p) -&gt; $p { $p(self.0 &amp; _rhs.0) }\n        }\n        impl ::std::ops::BitOr for $p {\n            type Output = $p;\n            fn bitor(self, _rhs: $p) -&gt; $p { $p(self.0 | _rhs.0) }\n        }\n        impl ::std::ops::BitXor for $p {\n            type Output = $p;\n            fn bitxor(self, _rhs: $p) -&gt; $p { $p(self.0 ^ _rhs.0) }\n        }\n\n        impl ::std::ops::Not for $p {\n            type Output = $p;\n            fn not(self) -&gt; $p { $p(!self.0) }\n        }\n\n        impl ::std::ops::BitAndAssign for $p {\n            fn bitand_assign(&amp;mut self, _rhs: $p) { self.0 &amp;= _rhs.0; }\n        }\n        impl ::std::ops::BitOrAssign for $p {\n            fn bitor_assign(&amp;mut self, _rhs: $p) { self.0 |= _rhs.0; }\n        }\n        impl ::std::ops::BitXorAssign for $p {\n            fn bitxor_assign(&amp;mut self, _rhs: $p) { self.0 ^= _rhs.0; }\n        }\n\n        // Other operations needed to be generally usable.\n        impl PartialEq for $p {\n            fn eq(&amp;self, other: &amp;$p) -&gt; bool { self.0 == other.0 }\n        }\n\n        impl Copy for $p { }\n        impl Clone for $p {\n            fn clone(&amp;self) -&gt; $p { $p(self.0) }\n        }\n    }\n}\n</code></pre>\n\n<hr>\n\n<p>For an alternative variation on this macro that supports <code>derive</code> which is needed so constants of this type can be used in a <code>match</code> statement can be written.</p>\n\n<p>This also avoids having to define Copy &amp; Clone.</p>\n\n<pre><code>struct_bitflag_impl!(pub struct MyFlag(pub u8));\n</code></pre>\n\n<p>The macro:</p>\n\n<pre><code>macro_rules! struct_bitflag_impl {\n    // pub/pub\n    (pub struct $name:ident ( pub $t:tt ) ) =&gt; {\n        #[derive(PartialEq, Eq, Copy, Clone, Debug)]\n        pub struct $name(pub $t);\n        _struct_bitflag_gen_impls!($name, $t);\n    };\n    // private/pub\n    (struct $name:ident ( pub $t:tt ) ) =&gt; {\n        #[derive(PartialEq, Eq, Copy, Clone, Debug)]\n        struct $name(pub $t);\n        _struct_bitflag_gen_impls!($name, $t);\n    };\n    // pub/private\n    (pub struct $name:ident ( $t:tt ) ) =&gt; {\n        #[derive(PartialEq, Eq, Copy, Clone, Debug)]\n        struct $name($t);\n        _struct_bitflag_gen_impls!($name, $t);\n    };\n    // private/private\n    (struct $name:ident ( $t:tt ) ) =&gt; {\n        #[derive(PartialEq, Eq, Copy, Clone, Debug)]\n        struct $name($t);\n        _struct_bitflag_gen_impls!($name, $t);\n    }\n}\n\nmacro_rules! _struct_bitflag_gen_impls {\n    ($t:ident, $t_base:ident) =&gt; {\n        impl ::std::ops::BitAnd for $t {\n            type Output = $t;\n            #[inline]\n            fn bitand(self, _rhs: $t) -&gt; $t { $t(self.0 &amp; _rhs.0) }\n        }\n        impl ::std::ops::BitOr for $t {\n            type Output = $t;\n            #[inline]\n            fn bitor(self, _rhs: $t) -&gt; $t { $t(self.0 | _rhs.0) }\n        }\n        impl ::std::ops::BitXor for $t {\n            type Output = $t;\n            #[inline]\n            fn bitxor(self, _rhs: $t) -&gt; $t { $t(self.0 ^ _rhs.0) }\n        }\n\n        impl ::std::ops::Not for $t {\n            type Output = $t;\n            #[inline]\n            fn not(self) -&gt; $t { $t(!self.0) }\n        }\n\n        impl ::std::ops::BitAndAssign for $t {\n            #[inline]\n            fn bitand_assign(&amp;mut self, _rhs: $t) { self.0 &amp;= _rhs.0; }\n        }\n        impl ::std::ops::BitOrAssign for $t {\n            #[inline]\n            fn bitor_assign(&amp;mut self, _rhs: $t) { self.0 |= _rhs.0; }\n        }\n        impl ::std::ops::BitXorAssign for $t {\n            #[inline]\n            fn bitxor_assign(&amp;mut self, _rhs: $t) { self.0 ^= _rhs.0; }\n        }\n\n        /// Support for comparing with the base type, allows comparison with 0.\n        ///\n        /// This is used in typical expressions, eg: `if (a &amp; FLAG) != 0 { ... }`\n        /// Having to use MyFlag(0) all over is too inconvenient.\n        impl PartialEq&lt;$t_base&gt; for $t {\n            #[inline]\n            fn eq(&amp;self, other: &amp;$t_base) -&gt; bool { self.0 == *other }\n        }\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1477916534, "post_id": 40339639, "comment_id": 67938166, "body": "Since its possible not to use vectors, Having to use them for flags seems like unnecessary overhead. It may not matter in some cases - but would prefer to have something that compiles down to primitive int types."}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user6555228"}, "is_accepted": false, "score": 1, "last_activity_date": 1477906771, "creation_date": 1477906771, "answer_id": 40339639, "question_id": 40332112, "link": "https://stackoverflow.com/questions/40332112/how-to-declare-typed-bitflags-in-rust/40339639#40339639", "title": "How to declare typed bitflags in Rust?", "body": "<p>You could (I don't know if it is in any way idiomatic) just use Rust's enums :</p>\n\n<pre><code>pub enum MyFlags {\n    Meaning1,\n    Meaning2,\n    Meaning3,\n    ...,\n    MeaningX\n}\n</code></pre>\n\n<p>This way you have a clear meaning for your flags. Once done, you can write some helper functions around this enum for Rust-to-C conversion.</p>\n\n<pre><code>fn to_u32(flag: &amp;MyFlags) -&gt; u32 {\n    match flag {\n        &amp;MyFlags::Meaning1 =&gt; return (1 &lt;&lt; 0),\n        &amp;MyFlags::Meaning2 =&gt; return (1 &lt;&lt; 1),\n        &amp;MyFlags::Meaning3 =&gt; return (1 &lt;&lt; 2),\n        &amp;MyFlags::MeaningX =&gt; return (1 &lt;&lt; 3),\n    }\n}\n\nfn to_bitflags_flags(flags: &amp;Vec&lt;MyFlags&gt;) -&gt; u32 {\n    let mut bitflags = 0u32;\n\n    for flag in flags {\n        bitflags |= to_u32(flag);\n    }\n    return bitflags;\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 4036, "user_id": 667457, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/33f9a9233b25c8230f5b5edb38493842?s=128&d=identicon&r=PG", "display_name": "Jeff Burdges", "link": "https://stackoverflow.com/users/667457/jeff-burdges"}, "is_accepted": false, "score": 0, "last_activity_date": 1477942469, "creation_date": 1477942469, "answer_id": 40349301, "question_id": 40332112, "link": "https://stackoverflow.com/questions/40332112/how-to-declare-typed-bitflags-in-rust/40349301#40349301", "title": "How to declare typed bitflags in Rust?", "body": "<p>You should know that <code>type</code> creates a type alias in Rust, not a new type, so you <code>MyFlag</code> and <code>MyOtherFlag</code> have the same type.</p>\n\n<p>If these <em>flags</em> are named but not indexed, and they are not too numerous, then you could just stick a bunch of <code>bool</code> types into a struct.</p>\n\n<pre><code>#[repr(packed)]\nstruct MyFlags {\n    a: bool,\n    b: bool\n}\n</code></pre>\n\n<p>In fact, each <code>bool</code> requires a <code>u8</code> even with <code>#[repr(packed)]</code>.  I donno if that originates with supporting references to individual <code>bool</code>s, but they take a <code>u8</code> without <code>#[repr(packed)]</code> too, so not sure.  I'd think an RFC or issue could be filed about that though give <a href=\"https://github.com/rust-lang/rfcs/pull/1240\" rel=\"nofollow\">1240</a>.  If wasting a <code>u8</code> per flag like this works, then it's likely syntax compatible with bitfields whenever they land.</p>\n\n<p>If you need indexing into the flags, then you'd need some messy or fancy solution in C too.</p>\n\n<p>If you want bitfields with values larger than bool, there are a variety of ways to hack this together along the lines of the previous two comments.  And some bitfield crates.  You'll find several more discussed in the Rust RFC discussion threads <a href=\"https://github.com/rust-lang/rfcs/issues/314\" rel=\"nofollow\">314</a> and <a href=\"https://github.com/rust-lang/rfcs/pull/1449\" rel=\"nofollow\">1449</a> on adding bitfield support to Rust.  In this case, I'd do it however you like for now, but maybe plan on switching it to bitfields whenever they eventually land.  </p>\n"}, {"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 1, "last_activity_date": 1477960479, "creation_date": 1477960479, "answer_id": 40352544, "question_id": 40332112, "link": "https://stackoverflow.com/questions/40332112/how-to-declare-typed-bitflags-in-rust/40352544#40352544", "title": "How to declare typed bitflags in Rust?", "body": "<p>There is an unstable <a href=\"https://doc.rust-lang.org/stable/collections/enum_set/struct.EnumSet.html\" rel=\"nofollow\"><code>EnumSet</code></a> collection in the standard library that works with the also unstable <a href=\"https://doc.rust-lang.org/stable/collections/enum_set/trait.CLike.html\" rel=\"nofollow\"><code>CLike</code></a> trait. It works like this: you define an enum, whose members take a bit number (<em>not</em> a mask!) as their value, and <code>EnumSet</code> uses the bit at the position designated by the enum value to store whether the enum member is part of the set or not. At runtime, an <code>EnumSet</code> is represented by a single <code>usize</code>. <code>EnumSet</code> is parameterized on the enum type, so sets based on different enums will not have the same type.</p>\n\n<pre><code>#![feature(collections)]\n#![feature(enumset)]\n\nextern crate collections;\n\nuse collections::enum_set::{CLike, EnumSet};\nuse std::mem;\n\n#[derive(Clone, Copy, Debug)]\n#[repr(usize)]\nenum MyFlag {\n    Foo,\n    Bar,\n}\n\nimpl CLike for MyFlag {\n    fn to_usize(&amp;self) -&gt; usize {\n        *self as usize\n    }\n\n    fn from_usize(v: usize) -&gt; MyFlag {\n        unsafe { mem::transmute(v) }\n    }\n}\n\nfn main() {\n    let mut flags = EnumSet::new();\n    flags.insert(MyFlag::Foo);\n    flags.insert(MyFlag::Bar);\n    println!(\"{:?}\", flags);\n}\n</code></pre>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2391, "favorite_count": 0, "answer_count": 4, "score": 0, "last_activity_date": 1479591396, "creation_date": 1477851394, "last_edit_date": 1479578352, "question_id": 40332112, "link": "https://stackoverflow.com/questions/40332112/how-to-declare-typed-bitflags-in-rust", "title": "How to declare typed bitflags in Rust?", "body": "<p>It's possible to declare flags in Rust - similar to how it would be done in C.</p>\n\n<pre><code>pub const FOO: u32 = (1 &lt;&lt; 0);\npub const BAR: u32 = (1 &lt;&lt; 1);\n\nlet flag: u32 = (FOO | BAR);\n</code></pre>\n\n<p>This works well, however it's not type-safe - making it possible to accidentally mix up flag usage.</p>\n\n<p>Is it possible to define a type that can be used to avoid accidental invalid flag use?</p>\n\n<p>For example:</p>\n\n<pre><code>pub type MyOtherFlag = u32;\npub type MyFlag = u32;\npub const FOO: MyFlag = (1 &lt;&lt; 0);\npub const BAR: MyFlag = (1 &lt;&lt; 1);\n\nlet flag: MyOtherFlag = (FOO | BAR);\n//        ^^^^^^^^^^^ I'd like this to raise a type error to avoid\n//                    confusion between MyOtherFlag and MyFlag.\n//                    Currently it doesn't since\n//                    type aliases aren't seen as distinct types.\n</code></pre>\n\n<p>... where mixing in other flag-types will raise an error?</p>\n\n<p>Can this be done with Rust's type system without the overhead of defining a lot of complex internals? Specifically, I mean large macros or types which need to implement binary operators. The bitflags crate has over 300 lines of code for example.</p>\n\n<p>I am aware of the bitflags crate, but would like to know if this can be achieved with Rust's type-system, without having to implement operators which are already available for the underlying type.</p>\n"}, {"tags": ["parsing", "rust"], "answers": [{"tags": [], "owner": {"reputation": 988, "user_id": 6090592, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3d5e40fcf8c369f36d04406528df52f2?s=128&d=identicon&r=PG&f=1", "display_name": "Djzin", "link": "https://stackoverflow.com/users/6090592/djzin"}, "is_accepted": true, "score": 1, "last_activity_date": 1477855700, "last_edit_date": 1477855700, "creation_date": 1477853701, "answer_id": 40332464, "question_id": 40331573, "link": "https://stackoverflow.com/questions/40331573/nom-parser-to-unescape-string/40332464#40332464", "title": "Nom Parser To Unescape String", "body": "<p>It looks like the way to use the nom library is using the macro combinators. A quick browse of the <a href=\"https://github.com/Geal/nom\" rel=\"nofollow\">source code</a> gives some <a href=\"https://github.com/Geal/nom/blob/master/tests/json.rs\" rel=\"nofollow\">nice</a> <a href=\"https://github.com/Geal/nom/blob/master/tests/ini.rs\" rel=\"nofollow\">examples</a> of parsers, including parsing of strings with escape characters. This is what I came up with:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[macro_use]\nextern crate nom;\n\nuse nom::*;\n\nnamed!(string&lt; Vec&lt;u8&gt; &gt;, delimited!(\n    tag!(\"@\"),\n    fold_many0!(\n        alt!(\n            is_not!(b\"@\") |\n            map!(\n                complete!(tag!(\"@@\")),\n                |_| &amp;b\"@\"[..]\n            )\n        ),\n        Vec::new(),\n        |mut acc: Vec&lt;u8&gt;, bytes: &amp;[u8]| {\n            acc.extend(bytes);\n            acc\n        }\n    ),\n    tag!(\"@\")\n));\n\n#[test]\nfn it_works() {\n    assert_eq!(string(b\"@string@\"), IResult::Done(&amp;b\"\"[..], b\"string\".to_vec()));\n    assert_eq!(string(b\"@string with @@ escapes@\"), IResult::Done(&amp;b\"\"[..], b\"string with @ escapes\".to_vec()));\n    assert_eq!(string(b\"@invalid string\"), IResult::Incomplete(Needed::Size(16)));\n}\n</code></pre>\n\n<p>As you can see, I simply copy the bytes into a vector using <code>Vec::extend</code> - you could be more sophisticated here and return a <code>Cow</code> byte slice if you wanted.</p>\n\n<p>The <code>escaped!</code> macro does not appear to be of use in this case unfortunately, as it can't seem to work when the terminator is the same as the escape character (which is actually a pretty common case).</p>\n"}], "owner": {"reputation": 10651, "user_id": 167935, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/583358786e336bb14a400ca17722ec3b?s=128&d=identicon&r=PG", "display_name": "Laurence", "link": "https://stackoverflow.com/users/167935/laurence"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 956, "favorite_count": 0, "accepted_answer_id": 40332464, "answer_count": 1, "score": 1, "last_activity_date": 1477865805, "creation_date": 1477847758, "last_edit_date": 1477865805, "question_id": 40331573, "link": "https://stackoverflow.com/questions/40331573/nom-parser-to-unescape-string", "title": "Nom Parser To Unescape String", "body": "<p>I'm writing a <a href=\"https://github.com/Geal/nom\" rel=\"nofollow\" title=\"Nom\">Nom</a> parser for <a href=\"https://www.gnu.org/software/rcs/manual/html_node/File-format.html#File-format\" rel=\"nofollow\" title=\"RCS\">RCS</a>. RCS Files tend to be ISO-8859-1 encoded. One of the grammar productions is for a String. This is <code>@</code>-delimited and literal <code>@</code> symbols are escaped as <code>@@</code>.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>@A String@ -&gt; A String\n@A @@ String@ -&gt; A @ String\n</code></pre>\n\n<p>I have a working function (see end). <code>IResult</code> is from Nom, you either return the parsed thing, plus the rest of the unparsed input, or an <code>Error</code>/<code>Incomplete</code>. <code>Cow</code> is used to return a reference built on the original input slice if no unescaping was required, or an owned string if it was.</p>\n\n<p>Are there any built in Nom macros that could have helped with this parse?</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[macro_use]\nextern crate nom;\nuse std::str;\nuse std::borrow::Cow;\nuse nom::*;\n\n/// Parse an RCS String\nfn string&lt;'a&gt;(input: &amp;'a[u8]) -&gt; IResult&lt;&amp;'a[u8], Cow&lt;'a, str&gt;&gt; {\n    let len = input.len();\n    if len &lt; 1 {\n        return IResult::Incomplete(Needed::Unknown);\n    }\n    if input[0] != b'@' {\n        return IResult::Error(Err::Code(ErrorKind::Custom(0)));\n    }\n    // start of current chunk. Chunk is a piece of unescaped input\n    let mut start = 1;\n    // current char index in input\n    let mut i = start;\n    // FIXME only need to allocate if input turned out to need unescaping\n    let mut s: String = String::new();\n    // Was the input escaped?\n    let mut escaped = false;\n    while i &lt; len {\n        // Check for end delimiter\n        if input[i] == b'@' {\n            // if there's another @ then it is an escape sequence\n            if i + 1 &lt; len &amp;&amp; input[i + 1] == b'@' {\n                // escaped @\n                i += 1; // want to include the first @ in the output\n                s.push_str(str::from_utf8(&amp;input[start .. i]).unwrap());\n                start = i + 1;\n                escaped = true;\n            } else {\n                // end of string\n                let result = if escaped {\n                    s.push_str(str::from_utf8(&amp;input[start .. i]).unwrap());\n                    Cow::Owned(s)\n                } else {\n                    Cow::Borrowed(str::from_utf8(&amp;input[1 .. i]).unwrap())\n                };\n                return IResult::Done(&amp;input[i + 1 ..], result);\n            }\n        }\n        i += 1;\n    }\n    IResult::Incomplete(Needed::Unknown)\n}\n</code></pre>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 20, "last_activity_date": 1529523851, "last_edit_date": 1529523851, "creation_date": 1477819496, "answer_id": 40327630, "question_id": 40325690, "link": "https://stackoverflow.com/questions/40325690/what-is-lifetime-elision-in-very-simple-terms/40327630#40327630", "title": "What is lifetime elision in very simple terms?", "body": "<p>An item signature is the bit which gives the name and types of your function, i.e. everything you need to call it (without needing to know how it's implemented); for example:</p>\n\n<pre><code>fn foo(x: u32) -&gt; u32;\n</code></pre>\n\n<p>Here's another which takes a <code>&amp;str</code> reference:</p>\n\n<pre><code>fn bar&lt;'a&gt;(s: &amp;'a str) -&gt; &amp;'a str;\n</code></pre>\n\n<p>In Rust, all references have an attached lifetime; this is part of the type.  The above <code>bar</code> function says more than just \"this function takes a reference to a string and returns another one\".  It says \"this function takes a string reference, and returns another <em>which is valid for as long as the one it's given</em>.  This is an important part of Rust's ownership system.</p>\n\n<p>However, it's annoying and a pain to specify these lifetimes every time, so Rust has \"lifetime elision\" (i.e. \"not explicitly writing them out\").  All that means is that for a few very common cases, you can leave the lifetime annotations out and Rust will implicitly add them for you.  This is purely a convenience for programmers so that they don't have to write so many lifetimes in \"obvious\" cases.</p>\n\n<p>The rules are listed in <a href=\"https://doc.rust-lang.org/book/first-edition/lifetimes.html\" rel=\"noreferrer\">the book</a>, but for completeness they are:</p>\n\n<ol>\n<li>Every lifetime in the function parameters which isn't otherwise specified is different. For example:</li>\n</ol>\n\n\n\n<pre><code>fn f(x: &amp;T, y: &amp;U)\n</code></pre>\n\n<p>means:</p>\n\n<pre><code>fn f&lt;'a, 'b&gt;(x: &amp;'a T, y: &amp;'b U)\n</code></pre>\n\n<p>i.e. there's no automatic link between those lifetimes.</p>\n\n<ol start=\"2\">\n<li>If there's only one input lifetime, it's used for every output lifetime. For example:</li>\n</ol>\n\n\n\n<pre><code>struct U&lt;'a&gt; {}  // struct with a lifetime parameter\n\nfn f(x: &amp;T) -&gt; &amp;U\n</code></pre>\n\n<p>becomes:</p>\n\n<pre><code>fn f&lt;'a&gt;(x: &amp;'a T) -&gt; &amp;'a U&lt;'a&gt;\n</code></pre>\n\n<ol start=\"3\">\n<li>Otherwise, if there are multiple input lifetimes but one of them is <code>&amp;self</code> or <code>&amp;mut self</code> (i.e. it's a method), then all the elided output lifetimes get the same as <code>self</code>. This covers the common case that a method returns a reference to one of its fields. For example:</li>\n</ol>\n\n\n\n<pre><code>impl S {\n    fn get_my_item(&amp;self, key: &amp;str) -&gt; &amp;str {}\n}\n</code></pre>\n\n<p>becomes:</p>\n\n<pre><code>fn get_my_item&lt;'a,'b&gt;(&amp;'a self, key: &amp;'b str) -&gt; &amp;'a str  // use the self lifetime\n</code></pre>\n\n<p>The documentation has some more examples.</p>\n"}], "owner": {"reputation": 131, "user_id": 5928016, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/d4421e2cf8807f9be273f99fd5ff9490?s=128&d=identicon&r=PG&f=1", "display_name": "davis", "link": "https://stackoverflow.com/users/5928016/davis"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1260, "favorite_count": 5, "accepted_answer_id": 40327630, "answer_count": 1, "score": 10, "last_activity_date": 1529523851, "creation_date": 1477796640, "last_edit_date": 1529523721, "question_id": 40325690, "link": "https://stackoverflow.com/questions/40325690/what-is-lifetime-elision-in-very-simple-terms", "title": "What is lifetime elision in very simple terms?", "body": "<p>From <a href=\"https://doc.rust-lang.org/book/first-edition/lifetimes.html#lifetime-elision\" rel=\"noreferrer\">the Rust documentation</a>:</p>\n\n<blockquote>\n  <p>Rust supports powerful local type inference in the bodies of functions, but it deliberately does not perform any reasoning about types for item signatures. However, for ergonomic reasons, a very restricted secondary inference algorithm called \u201clifetime elision\u201d does apply when judging lifetimes. Lifetime elision is concerned solely with inferring lifetime parameters using three easily memorizable and unambiguous rules. This means lifetime elision acts as a shorthand for writing an item signature, while not hiding away the actual types involved as full local inference would if applied to it.</p>\n</blockquote>\n\n<p>I don't understand what this means. What are item signatures? What does \"infer lifetime parameters\" mean? Some examples or analogies would be helpful.</p>\n"}, {"tags": ["binding", "scope", "rust"], "answers": [{"comments": [{"owner": {"reputation": 339851, "user_id": 149392, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7a561ec0875fcbbe3066ea8fe288ec77?s=128&d=identicon&r=PG", "display_name": "sepp2k", "link": "https://stackoverflow.com/users/149392/sepp2k"}, "edited": false, "score": 0, "creation_date": 1477777248, "post_id": 40323730, "comment_id": 67903424, "body": "&quot;it introduces a second binding that shadows the first one for the rest of the block&quot; Isn&#39;t that what &quot;rebind&quot; means?"}, {"owner": {"reputation": 1135, "user_id": 3754101, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/D1eNN.jpg?s=128&g=1", "display_name": "enaJ", "link": "https://stackoverflow.com/users/3754101/enaj"}, "edited": false, "score": 0, "creation_date": 1477785782, "post_id": 40323730, "comment_id": 67905177, "body": "Hi Francis, thank for your inputs. Could you also explain what the functionality of x = 12?"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 11, "last_activity_date": 1585665021, "last_edit_date": 1585665021, "creation_date": 1477775594, "answer_id": 40323730, "question_id": 40323500, "link": "https://stackoverflow.com/questions/40323500/what-is-the-difference-between-a-let-rebinding-and-a-standard-assignment/40323730#40323730", "title": "What is the difference between a let-rebinding and a standard assignment?", "body": "<p>The second <code>let x</code> introduces a second binding that <em>shadows</em> the first one for the rest of the block. That is, there are two variables named <code>x</code>, but you can only access the second one within the block statement after the <code>let x = 12;</code> statement. These two variables don't need to have the same type!</p>\n\n<p>Then, after the block statement, the second <code>x</code> is out of scope, so you access the first <code>x</code> again.</p>\n\n<p>However, if you write <code>x = 12;</code> instead, that's an assignment expression: the value in <code>x</code> is overwritten. This doesn't introduce a new variable, so the type of the value being assigned must be compatible with the variable's type.</p>\n\n<p>This difference is important if you write a loop. For example, consider this function:</p>\n\n<pre><code>fn fibonacci(mut n: u32) -&gt; u64 {\n    if n == 0 {\n        return 1;\n    }\n\n    let mut a = 1;\n    let mut b = 1;\n\n    loop {\n        if n == 1 {\n            return b;\n        }\n\n        let next = a + b;\n        a = b;\n        b = next;\n        n -= 1;\n    }\n}\n</code></pre>\n\n<p>This function reassigns variables, so that each iteration of the loop can operate on the values assigned on the preceding iteration.</p>\n\n<p>However, you might be tempted to write the loop like this:</p>\n\n<pre><code>loop {\n    if n == 1 {\n        return b;\n    }\n\n    let (a, b) = (b, a + b);\n    n -= 1;\n}\n</code></pre>\n\n<p>This doesn't work, because the <code>let</code> statement introduces new variables, and these variables will go out of scope before the next iteration begins. On the next iteration, <code>(b, a + b)</code> will still use the original values.</p>\n"}], "owner": {"reputation": 1135, "user_id": 3754101, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/D1eNN.jpg?s=128&g=1", "display_name": "enaJ", "link": "https://stackoverflow.com/users/3754101/enaj"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 415, "favorite_count": 1, "accepted_answer_id": 40323730, "answer_count": 1, "score": 4, "last_activity_date": 1585665021, "creation_date": 1477773906, "last_edit_date": 1477815561, "question_id": 40323500, "link": "https://stackoverflow.com/questions/40323500/what-is-the-difference-between-a-let-rebinding-and-a-standard-assignment", "title": "What is the difference between a let-rebinding and a standard assignment?", "body": "<p>In Rust, in order to change the value of a mutable variable, what is the difference in <code>let x = 12</code> or <code>x = 12</code> in the following sample code?  </p>\n\n<pre><code>fn main() {\n    let mut x: i32 = 8;\n    {\n        println!(\"{}\", x); \n        let x = 12;  // what if change to x = 12\n        println!(\"{}\", x); \n    }\n    println!(\"{}\", x); \n    let x =  42;\n    println!(\"{}\", x); \n}\n</code></pre>\n\n<p>The output is <code>8, 12, 8, 42</code>.  If I change <code>let x = 12</code> to <code>x = 12</code> ...</p>\n\n<pre><code>fn main() {\n    let mut x: i32 = 8;\n    {\n        println!(\"{}\", x); \n        x = 12; \n        println!(\"{}\", x); \n    }\n    println!(\"{}\", x); \n    let x =  42;\n    println!(\"{}\", x); \n}\n</code></pre>\n\n<p>The output is <code>8, 12, 12, 42</code>. </p>\n\n<p>I understand that Rust uses let to do variable binding, so the <code>let x = 12</code> is a variable rebinding and the binding is only valid inside a scope. But how to explain the functionality of <code>x = 12</code> and the corresponding scope? Is that a type of variable binding? </p>\n"}, {"tags": ["error-handling", "rust"], "answers": [{"comments": [{"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1477767326, "post_id": 40322414, "comment_id": 67900742, "body": "Good questions; I didn&#39;t want to go into specific usage examples to avoid making the question too long. Specifically, I would like to report all failures and continue processing. E.g. consider a function that counts files in subdirectories (<a href=\"http://pastebin.com/XvzYZbsM\" rel=\"nofollow noreferrer\">python</a>). The <a href=\"http://pastebin.com/HFKHq54T\" rel=\"nofollow noreferrer\">rust version</a> panics on every error, and I would like it to log the error on stderr and continue counting, like the Python one does."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1477767440, "post_id": 40322414, "comment_id": 67900791, "body": "@user4815162342: In this case you&#39;ll need pattern-matching in a <code>for</code> loop, and appending to a collection of <code>PathBuf</code> for the processing and another of <code>Error</code> for the issues."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 1, "creation_date": 1477769349, "post_id": 40322414, "comment_id": 67901351, "body": "You can use <a href=\"https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.partition\" rel=\"nofollow noreferrer\"><code>partition</code></a> to split the <code>Ok</code>s and the <code>Err</code>s into two collections, or <a href=\"https://docs.rs/itertools/%2A/itertools/trait.Itertools.html#method.partition_map\" rel=\"nofollow noreferrer\"><code>partition_map</code></a> from itertools if you want to remove the <code>Result</code> layer from both collections."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1477769594, "post_id": 40322414, "comment_id": 67901414, "body": "@FrancisGagn&#233;: It does not mesh with the Op&#39;s <code>todos.extend</code> though, as it creates a new collection rather than extending an existing one. <code>partition_map</code> looks pretty neat (but suffers from the same issue)."}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 3, "creation_date": 1477782428, "post_id": 40322414, "comment_id": 67904551, "body": "And if someone wants to stop on the first failure, then <a href=\"http://stackoverflow.com/questions/26368288/how-do-i-stop-iteration-and-return-an-error-when-iteratormap-returns-a-result\" title=\"how do i stop iteration and return an error when iteratormap returns a result\">stackoverflow.com/questions/26368288/&hellip;</a>"}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1477836936, "post_id": 40322414, "comment_id": 67914995, "body": "@ArtemGr Looks very useful and concise to boot, thanks! After getting used to exceptions in Python and C++, it&#39;s takes time to learn the rust way of propagating error state, and such tools are indispensable."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1477916374, "post_id": 40322414, "comment_id": 67938082, "body": "I&#39;ve posted a separate response based on combining <code>filter_map</code> with <code>Result::map_err</code> and <code>Result::ok</code> to ensure each error is logged rather than silently ignored. I&#39;m not sure how idiomatic the new code is, but it feels significantly more elegant than previous attempts."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 3, "last_activity_date": 1522748290, "last_edit_date": 1522748290, "creation_date": 1477766494, "answer_id": 40322414, "question_id": 40322300, "link": "https://stackoverflow.com/questions/40322300/alternative-to-the-try-operator-suited-to-iterator-mapping/40322414#40322414", "title": "Alternative to the try (?) operator suited to iterator mapping", "body": "<blockquote>\n  <p>How would one avoid the use of <code>unwrap</code> in a closure, like in this example?</p>\n</blockquote>\n\n<p>Well, it really depends on what you wish to do upon failure.</p>\n\n<ul>\n<li>should failure be reported to the user or be silent</li>\n<li>if reported, should <em>one</em> failure be reported or all?</li>\n<li>if a failure occur, should it interrupt processing?</li>\n</ul>\n\n<p>For example, you could perfectly decide to silently ignore all failures and just skip the entries that fail. In this case, the <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.filter_map\" rel=\"nofollow noreferrer\"><code>Iterator::filter_map</code></a> combined with <a href=\"https://doc.rust-lang.org/1.9.0/std/result/enum.Result.html#method.ok\" rel=\"nofollow noreferrer\"><code>Result::ok</code></a> is exactly what you are asking for.</p>\n\n<pre><code>let dir = fs::read_dir(&amp;filename)?;\nlet todos.extend(dir.filter_map(Result::ok));\n</code></pre>\n\n<p>The <code>Iterator</code> interface is full of goodies, it's definitely worth perusing when looking for tidier code.</p>\n"}, {"tags": [], "owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "is_accepted": false, "score": 1, "last_activity_date": 1607886247, "last_edit_date": 1607886247, "creation_date": 1477915967, "answer_id": 40341958, "question_id": 40322300, "link": "https://stackoverflow.com/questions/40322300/alternative-to-the-try-operator-suited-to-iterator-mapping/40341958#40341958", "title": "Alternative to the try (?) operator suited to iterator mapping", "body": "<p>Here is a solution based on <code>filter_map</code> suggested by <a href=\"https://stackoverflow.com/users/147192/matthieu-m\">Matthieu</a>. It calls <code>Result::map_err</code> to ensure the error is &quot;caught&quot; and logged, sending it further to <code>Result::ok</code> and <code>filter_map</code> to remove it from iteration:</p>\n<pre><code>fn log_error(e: io::Error) {\n    eprintln!(&quot;{}&quot;, e);\n}\n\n(|| {\n    let dir = fs::read_dir(&amp;filename)?;\n    todo.extend(dir\n                .filter_map(|res| res.map_err(log_error).ok()))\n                .map(|dirent| dirent.path()));\n})().unwrap_or_else(log_error)\n</code></pre>\n"}], "owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 190, "favorite_count": 0, "accepted_answer_id": 40322414, "answer_count": 2, "score": 0, "last_activity_date": 1607886247, "creation_date": 1477765859, "last_edit_date": 1502887806, "question_id": 40322300, "link": "https://stackoverflow.com/questions/40322300/alternative-to-the-try-operator-suited-to-iterator-mapping", "title": "Alternative to the try (?) operator suited to iterator mapping", "body": "<p>In the process of learning Rust, I am getting acquainted with error propagation and the choice between <code>unwrap</code> and the <code>?</code> operator. After writing some prototype code that only uses <code>unwrap()</code>, I would like to remove <code>unwrap</code> from reusable parts, where panicking on every error is inappropriate.</p>\n\n<p>How would one avoid the use of <code>unwrap</code> in a closure, like in this example?</p>\n\n<pre><code>// todo is VecDeque&lt;PathBuf&gt;\nlet dir = fs::read_dir(&amp;filename).unwrap();\ntodo.extend(dir.map(|dirent| dirent.unwrap().path()));\n</code></pre>\n\n<p>The first <code>unwrap</code> can be easily changed to <code>?</code>, as long as the containing function returns <code>Result&lt;(), io::Error&gt;</code> or similar. However, the second <code>unwrap</code>, the one in <code>dirent.unwrap().path()</code>, cannot be changed to <code>dirent?.path()</code> because the closure must return a <code>PathBuf</code>, not a <code>Result&lt;PathBuf, io::Error&gt;</code>.</p>\n\n<p>One option is to change <code>extend</code> to an explicit loop:</p>\n\n<pre><code>let dir = fs::read_dir(&amp;filename)?;\nfor dirent in dir {\n    todo.push_back(dirent?.path());\n}\n</code></pre>\n\n<p>But that feels wrong - the original <code>extend</code> was elegant and clearly reflected the intention of the code. (It might also have been more efficient than a sequence of <code>push_back</code>s.) How would an experienced Rust developer express error checking in such code?</p>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 522, "user_id": 6843935, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/yjoXd.jpg?s=128&g=1", "display_name": "Sergey Potekhin", "link": "https://stackoverflow.com/users/6843935/sergey-potekhin"}, "edited": false, "score": 0, "creation_date": 1477841413, "post_id": 40320158, "comment_id": 67916227, "body": "Well, the problem is that I&#39;ve removed Parity folder with rm -rf :( So now, when I&#39;m running cargo clean, there is an error &quot;could not fnid &#39;Cargo.toml&#39;&quot;"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 522, "user_id": 6843935, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/yjoXd.jpg?s=128&g=1", "display_name": "Sergey Potekhin", "link": "https://stackoverflow.com/users/6843935/sergey-potekhin"}, "edited": false, "score": 0, "creation_date": 1477864779, "post_id": 40320158, "comment_id": 67923308, "body": "@SergeyPotekhin If you&#39;ve deleted the project directory, you&#39;ve already done the equivalent of <code>cargo clean</code> and more. The global cache is probably your next place to look"}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 18, "last_activity_date": 1477848505, "last_edit_date": 1477848505, "creation_date": 1477751737, "answer_id": 40320158, "question_id": 40320124, "link": "https://stackoverflow.com/questions/40320124/how-can-i-clean-cargo-stuff/40320158#40320158", "title": "How can I clean cargo stuff?", "body": "<p>Cargo places all temporary build files into the <code>target/</code> directory. Sometimes, if not already present, Cargo also creates a <code>Cargo.lock</code> file. The directory can be removed by executing:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>cargo clean\n</code></pre>\n\n<p>Cargo also saves the package index and the source code of dependencies globally in <code>~/.cargo/registry/</code>.</p>\n"}], "owner": {"reputation": 522, "user_id": 6843935, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/yjoXd.jpg?s=128&g=1", "display_name": "Sergey Potekhin", "link": "https://stackoverflow.com/users/6843935/sergey-potekhin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6904, "favorite_count": 1, "answer_count": 1, "score": 10, "last_activity_date": 1477864699, "creation_date": 1477751482, "last_edit_date": 1477864699, "question_id": 40320124, "link": "https://stackoverflow.com/questions/40320124/how-can-i-clean-cargo-stuff", "title": "How can I clean cargo stuff?", "body": "<p>I tried to install Parity (an Ethereum client) on my CHIP computer (similar to a Raspberry Pi with 4GB memory). I cloned the repository and ran</p>\n\n<pre><code>cargo build --release\n</code></pre>\n\n<p>After a while I noticed that  about 40% of the memory was used and I stopped the installation process. There was only 20% used before, so now I want to clean all of this Rust stuff. How can I do that?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 35314, "user_id": 344347, "user_type": "registered", "accept_rate": 33, "profile_image": "https://www.gravatar.com/avatar/1d83837bce9d9a2656c4f5704d40c430?s=128&d=identicon&r=PG", "display_name": "Pavel Strakhov", "link": "https://stackoverflow.com/users/344347/pavel-strakhov"}, "is_accepted": true, "score": 4, "last_activity_date": 1533056738, "last_edit_date": 1533056738, "creation_date": 1477746414, "answer_id": 40319390, "question_id": 40319313, "link": "https://stackoverflow.com/questions/40319313/dereferencing-boxed-struct-and-moving-its-field-causes-it-to-be-moved/40319390#40319390", "title": "Dereferencing boxed struct and moving its field causes it to be moved", "body": "<p>You can only move out of a box once:</p>\n\n<pre><code>struct S;\n\nfn main() {\n    let x = Box::new(S);\n    let val: S = *x;\n    let val2: S = *x; // &lt;-- use of moved value: `*x`\n}\n</code></pre>\n\n<p>In the first function, you moved the value out of the box and assigned it to the <code>node</code> variable. This allows you to move different fields out of it. Even if one field is moved, other fields are still available. Equivalent to this:</p>\n\n<pre><code>struct S1 {\n    a: S2,\n    b: S2,\n}\nstruct S2;\n\nfn main() {\n    let x = Box::new(S1 { a: S2, b: S2 });\n\n    let tmp: S1 = *x;\n    let a = tmp.a;\n    let b = tmp.b;\n}\n</code></pre>\n\n<p>In the second function, you move the value to the temporary <code>(*boxed_node)</code> and then move a field out of it. The temporary value is destroyed immediately after the end of the expression, along with its other fields. The box doesn't have the data anymore, and you don't have a variable to take the other field from. Equivalent to this:</p>\n\n<pre><code>struct S1 {\n    a: S2,\n    b: S2,\n}\nstruct S2;\n\nfn main() {\n    let x = Box::new(S1 { a: S2, b: S2 });\n\n    let tmp: S1 = *x;\n    let a = tmp.a;\n\n    let tmp: S1 = *x; // &lt;-- use of moved value: `*x`\n    let b = tmp.b;\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1563836276, "last_edit_date": 1563836276, "creation_date": 1535066490, "answer_id": 51995508, "question_id": 40319313, "link": "https://stackoverflow.com/questions/40319313/dereferencing-boxed-struct-and-moving-its-field-causes-it-to-be-moved/51995508#51995508", "title": "Dereferencing boxed struct and moving its field causes it to be moved", "body": "<p>Some good news is that <a href=\"https://stackoverflow.com/q/50251487/155423\">non-lexical lifetimes</a> will allow your original code to work:</p>\n\n<pre><code>pub struct Stack&lt;T&gt; {\n    head: Option&lt;Box&lt;Node&lt;T&gt;&gt;&gt;,\n    len: usize,\n}\n\nstruct Node&lt;T&gt; {\n    element: T,\n    next: Option&lt;Box&lt;Node&lt;T&gt;&gt;&gt;,\n}\n\nimpl&lt;T&gt; Stack&lt;T&gt; {\n    pub fn pop_no_longer_causes_error(&amp;mut self) -&gt; Option&lt;T&gt; {\n        self.head.take().map(|boxed_node| {\n            self.head = (*boxed_node).next;\n            (*boxed_node).element\n        })\n    }\n}\n</code></pre>\n\n<p>NLL enhances the borrow checker to better track the moves of variables. </p>\n"}], "owner": {"reputation": 1729, "user_id": 3859522, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/fe4a78465ab98520ed124337edad97c8?s=128&d=identicon&r=PG&f=1", "display_name": "Dulguun Otgon", "link": "https://stackoverflow.com/users/3859522/dulguun-otgon"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 552, "favorite_count": 0, "accepted_answer_id": 40319390, "answer_count": 2, "score": 1, "last_activity_date": 1563836276, "creation_date": 1477745823, "last_edit_date": 1533052523, "question_id": 40319313, "link": "https://stackoverflow.com/questions/40319313/dereferencing-boxed-struct-and-moving-its-field-causes-it-to-be-moved", "title": "Dereferencing boxed struct and moving its field causes it to be moved", "body": "<p>Dereferencing a boxed struct and moving its field causes it to be moved, but doing it in another way works just fine. I don't understand the difference between these two <code>pop</code> functions. How does one fail when the other one doesn't?</p>\n\n<pre><code>pub struct Stack&lt;T&gt; {\n    head: Option&lt;Box&lt;Node&lt;T&gt;&gt;&gt;,\n    len: usize,\n}\nstruct Node&lt;T&gt; {\n    element: T,\n    next: Option&lt;Box&lt;Node&lt;T&gt;&gt;&gt;,\n}\n\nimpl&lt;T&gt; Stack&lt;T&gt; {\n    pub fn pop(&amp;mut self) -&gt; Option&lt;T&gt; {\n        self.head.take().map(|boxed_node| {\n            let node = *boxed_node;\n            self.head = node.next;\n            node.element\n        })\n    }\n\n    pub fn pop_causes_error(&amp;mut self) -&gt; Option&lt;T&gt; {\n        self.head.take().map(|boxed_node| {\n            self.head = (*boxed_node).next;\n            (*boxed_node).element\n        })\n    }\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0382]: use of moved value: `boxed_node`\n  --&gt; src/main.rs:22:13\n   |\n21 |             self.head = (*boxed_node).next;\n   |                         ------------------ value moved here\n22 |             (*boxed_node).element\n   |             ^^^^^^^^^^^^^^^^^^^^^ value used here after move\n   |\n   = note: move occurs because `boxed_node.next` has type `std::option::Option&lt;std::boxed::Box&lt;Node&lt;T&gt;&gt;&gt;`, which does not implement the `Copy` trait\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1477735221, "post_id": 40317860, "comment_id": 67892071, "body": "Raw pointers don&#39;t use <code>ops::Deref</code>. It seems like the ability to unsafely deref a pointer is somehow compiler internal. So I guess it&#39;s not possible to get this unsafe unwrap behavior in a generic context. You could write a custom trait and use an own method to deref, instead of using the operator..."}, {"owner": {"reputation": 35314, "user_id": 344347, "user_type": "registered", "accept_rate": 33, "profile_image": "https://www.gravatar.com/avatar/1d83837bce9d9a2656c4f5704d40c430?s=128&d=identicon&r=PG", "display_name": "Pavel Strakhov", "link": "https://stackoverflow.com/users/344347/pavel-strakhov"}, "edited": false, "score": 1, "creation_date": 1477745779, "post_id": 40317860, "comment_id": 67894571, "body": "I think declaring <code>ptr</code> as a pointer is the right way. You can always convert between <code>*const T</code> and <code>*mut T</code> using <code>as</code>. And if you really want a distinction, you can use a enum with two variants or a trait with two structs that implement it."}], "answers": [{"tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": false, "score": 2, "last_activity_date": 1477768912, "last_edit_date": 1477768912, "creation_date": 1477751246, "answer_id": 40320088, "question_id": 40317860, "link": "https://stackoverflow.com/questions/40317860/how-to-declare-a-generic-type-that-is-a-raw-pointer/40320088#40320088", "title": "How to declare a generic type that is a raw pointer?", "body": "<p>I'm not convinced this is worth doing, but if you're sure then you can just write a trait:</p>\n\n<pre><code>pub trait RawPtr: Sized {\n    type Value;\n\n    fn as_const(self) -&gt; *const Self::Value {\n        self.as_mut() as *const _\n    }\n\n    fn as_mut(self) -&gt; *mut Self::Value {\n        self.as_const() as *mut _\n    }\n}\n\nimpl&lt;T&gt; RawPtr for *const T {\n    type Value = T;\n    fn as_const(self) -&gt; Self { self }\n}\n\nimpl&lt;T&gt; RawPtr for *mut T {\n    type Value = T;\n    fn as_mut(self) -&gt; Self { self }\n}\n</code></pre>\n\n<p>Your can then require <code>P: RawPtr</code> when implementing functions:</p>\n\n<pre><code>pub struct Ptr&lt;P&gt; {\n    ptr: P\n}\n\nimpl&lt;P: RawPtr&gt; Ptr&lt;P&gt; {\n    unsafe fn get(self) -&gt; P::Value\n        where P::Value: Copy\n    {\n        *self.ptr.as_const()\n    }\n}\n</code></pre>\n\n<p>Additionally, it's possible to define methods that are only available when <code>P</code> is a mutable pointer:</p>\n\n<pre><code>impl&lt;T&gt; Ptr&lt;*mut T&gt; {\n    unsafe fn get_mut(&amp;mut self) -&gt; *mut T {\n        self.ptr\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 657, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1477768912, "creation_date": 1477734528, "last_edit_date": 1495540096, "question_id": 40317860, "link": "https://stackoverflow.com/questions/40317860/how-to-declare-a-generic-type-that-is-a-raw-pointer", "title": "How to declare a generic type that is a raw pointer?", "body": "<p>Given a struct that wraps a pointer,</p>\n\n<pre><code>pub struct Ptr&lt;T&gt; {\n    ptr: T\n}\n</code></pre>\n\n<p>Is it possible to declare that <code>T</code> must be a raw pointer type? eg <code>*mut SomeStruct</code> or <code>*const SomeStruct</code>.</p>\n\n<p>Without this, I'm unable to perform operations like <code>&amp;*self.ptr</code> within a method, since Rust doesn't know <code>ptr</code> can be treated like a pointer.</p>\n\n<hr>\n\n<p>Note that this can be made to work:</p>\n\n<pre><code>pub struct Ptr&lt;T&gt; {\n    ptr: *mut T\n}\n</code></pre>\n\n<p>But in that case, it hard-codes <code>*mut</code>, where we might want <code>*const</code> in other cases.</p>\n\n<p>See: <a href=\"https://stackoverflow.com/a/40303713/432509\">this answer</a> to give some context.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1477732650, "post_id": 40317564, "comment_id": 67891651, "body": "FYI: there is <a href=\"https://doc.rust-lang.org/std/mem/fn.size_of_val.html\" rel=\"nofollow noreferrer\"><code>mem::size_of_val()</code></a>, so you don&#39;t need to write this <code>test()</code> function. It returns 0, too."}, {"owner": {"reputation": 889, "user_id": 1879192, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/54f9ed64051a86b03fe99f82805ac6d5?s=128&d=identicon&r=PG", "display_name": "Thierry", "link": "https://stackoverflow.com/users/1879192/thierry"}, "edited": false, "score": 2, "creation_date": 1477739688, "post_id": 40317564, "comment_id": 67893170, "body": "Since you use the term &quot;stack space&quot; instead of &quot;stack size&quot; in the title, I&#39;m wondering: are you asking about the size required to store the closure, or the size required to execute it? I.e., is Lukas&#39; answer correct, or are you wondering by how much the stack pointer is in-/decreased when calling the closure?"}, {"owner": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "reply_to_user": {"reputation": 889, "user_id": 1879192, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/54f9ed64051a86b03fe99f82805ac6d5?s=128&d=identicon&r=PG", "display_name": "Thierry", "link": "https://stackoverflow.com/users/1879192/thierry"}, "edited": false, "score": 0, "creation_date": 1477743769, "post_id": 40317564, "comment_id": 67894082, "body": "@Thierry I realize now that my phrasing was too confusing and I updated the question."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1477746577, "post_id": 40317564, "comment_id": 67894758, "body": "That doesn&#39;t really help me understand, tbh :/. So is my answer correct or are you talking about the stack space the closure needs to <i>run in</i>?"}, {"owner": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1477747073, "post_id": 40317564, "comment_id": 67894883, "body": "@LukasKalbertodt Yes the stack space that the closure needs to run, sorry for being so confusing."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1477748180, "post_id": 40317564, "comment_id": 67895160, "body": "I think it&#39;s pretty impossible. First of: you can&#39;t know the total amount of stack needed to run the closure. This is undecidable in the general case, e.g. <code>if turing_machine() { do_recursion(); }</code>. If you&#39;re in luck you can find out the size of the initial stack frame of the closure, but probably not in safe Rust. And I don&#39;t think that will help you. So yes, allocating a few MB is probably the solution you should go with... I think."}], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 4, "last_activity_date": 1477747955, "last_edit_date": 1477747955, "creation_date": 1477734009, "answer_id": 40317805, "question_id": 40317564, "link": "https://stackoverflow.com/questions/40317564/is-it-possible-to-query-the-stack-space-of-a-closure/40317805#40317805", "title": "Is it possible to query the stack space of a closure?", "body": "<p><em>I misunderstood the question, so the following text does not really answer OP's question!</em></p>\n\n<hr>\n\n<p><strong>Yes</strong>, you can measure the size of a closure. The sizes are just a bit confusing sometimes. Let's test all kinds of closures:</p>\n\n<pre><code>let constant = || 27;\nlet no_capture = |x: i32| 27 + x;\n\nlet a = vec![3];\nlet immut_capture = || a[0] + 27;\nlet immut_capture_arg = |x: i32| a[0] + x;\n\nlet mut b = vec![3];\nlet mut c = vec![3];\nlet mut_capture = || { b[0] += 27; b[0] };\nlet mut_capture_arg = |x: i32| { c[0] += x; c[0] };\n\nlet mut d = vec![3];\nlet mut e = vec![3];\nlet move_capture = move || { d[0] += 27; d.into_boxed_slice() };\nlet move_capture_arg = move |x: i32| { e[0] += x; e.into_boxed_slice() };\n</code></pre>\n\n<p>When I print their sizes with <a href=\"https://doc.rust-lang.org/std/mem/fn.size_of_val.html\" rel=\"nofollow\"><code>std::mem::size_of_val</code></a> (which is roughly equivalent to your hand-written <code>test()</code> function), I get the following results:</p>\n\n<pre><code>constant -&gt; 0\nno_capture -&gt; 0\nimmut_capture -&gt; 8\nimmut_capture_arg -&gt; 8\nmut_capture -&gt; 8\nmut_capture_arg -&gt; 8\nmove_capture -&gt; 24\nmove_capture_arg -&gt; 24\n</code></pre>\n\n<p>You can try it yourself with <a href=\"https://play.rust-lang.org/?gist=2c8ae6ab6ae375f1b2119d716771b625&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">this code on playground</a>.</p>\n\n<hr>\n\n<h3>So whats up with those results?</h3>\n\n<p>A closure is a type that saves its environment \u2013 either by reference or by value. Mutable and immutable reference to sized data have the same size, namely <code>size_of::&lt;usize&gt;()</code>, usually 8. This explains the size of the closures that capture the outer variable by reference.</p>\n\n<p>The move closures on the other hand, capture their environment by value, which means that they have to save the environment inside themselves. So it's no surprise that their sizes are equal to <code>size_of::&lt;Vec&lt;_&gt;&gt;()</code>.</p>\n\n<p>What about the closures with size 0? Since they are not capturing any environment, they could be ordinary <code>fn</code>-functions, too. And I guess that Rust turns them into <code>fn</code>-functions. And in fact, if we try to print the size of an <code>fn</code>-item (not a function pointer!) like this:</p>\n\n<pre><code>fn foo(x: i32) -&gt; i32 { x +  27 }\nprintln!(\"{}\", std::mem::size_of_val(&amp;foo));\n</code></pre>\n\n<p>... we get 0!</p>\n"}], "owner": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 159, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1477747955, "creation_date": 1477731868, "last_edit_date": 1477743664, "question_id": 40317564, "link": "https://stackoverflow.com/questions/40317564/is-it-possible-to-query-the-stack-space-of-a-closure", "title": "Is it possible to query the stack space of a closure?", "body": "<pre><code>fn test&lt;T&gt;(t: T) {\n    println!(\"size of: {}\", std::mem::size_of::&lt;T&gt;());\n}\nfn main() {\n    let f = || {\n        let i1: i32 = 0;\n        let i2: i32 = 0;\n        let i3: i32 = 0;\n        i1 + i2 + i3\n    };\n    test(f) // prints \"size of: 0\"\n}\n</code></pre>\n\n<p>A non move closure always seems to prints that the size is 0 probably because it is just inlined.</p>\n\n<p>A move closure gets bigger with every variable that it captures but I wonder if it is possible to query the stack space that a closure requires?</p>\n\n<p>Update:</p>\n\n<p>I want to create something like a <code>Coroutine&lt;F&gt;</code>. I need to know the size of <code>F</code> for it to be executed. I currently allocate 1mb per coroutine which is way too much. So I was wondering if it would be possible to determine the actual size that I need to allocate.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 0, "last_activity_date": 1477717555, "last_edit_date": 1477717555, "creation_date": 1477693291, "answer_id": 40313980, "question_id": 40312273, "link": "https://stackoverflow.com/questions/40312273/string-to-vector-of-parsed-values/40313980#40313980", "title": "String to vector of parsed values", "body": "<ol>\n<li><p><code>&lt;T as FromStr&gt;</code> is unnecessary; you can just use <code>T</code>.  It's used to refer specifically to <code>T</code>'s implementation of the <code>FromStr</code> trait.  In this case, the code isn't ambiguous enough to need that level of clarification.</p>\n\n<p><code>&lt;T as FromStr&gt;::Err</code> is referring to the <a href=\"https://doc.rust-lang.org/std/str/trait.FromStr.html#associatedtype.Err\" rel=\"nofollow\"><code>Err</code> type associated with <code>FromStr</code></a> -- if the conversion fails, what is the error type?</p>\n\n<p><code>where &lt;T as FromStr&gt;::Err: Debug</code> requires that, whatever <code>T::Err</code> is, it has to implement the <code>Debug</code> trait.  This clause is not necessary with your current code: I removed it and it was fine.  In a previous iteration of your code, you probably used either <a href=\"https://doc.rust-lang.org/stable/std/result/enum.Result.html#method.unwrap\" rel=\"nofollow\"><code>unwrap</code></a> or <a href=\"https://doc.rust-lang.org/stable/std/result/enum.Result.html#method.expect\" rel=\"nofollow\"><code>expect</code></a> instead of <a href=\"https://doc.rust-lang.org/stable/std/result/enum.Result.html#method.ok\" rel=\"nofollow\"><code>ok</code></a>.  Both <code>unwrap</code> and <code>expect</code> require that the <code>Result</code>'s error type (which is <code>&lt;T as FromStr&gt;::Err</code> here) implements <code>Debug</code> (you can see this in the documentation: the methods are defined in an <code>impl</code> block with <code>where E: Debug</code>), as the debug representation will be used in the panic message if the <code>Result</code> is an <code>Err</code>.</p></li>\n<li><p>Well, you can get rid of the <code>&lt;T as FromStr&gt;::Err: Debug</code> clause.  Beyond that, I don't see what you could remove without changing what the function does.</p></li>\n<li><p>Unless you returned it or stored it somewhere else, yes.  That's how ownership works.</p></li>\n<li><p>No.</p></li>\n<li><p>You should almost <em>never</em> use <code>&amp;String</code>; <code>&amp;str</code> works with more types.  The only thing <code>&amp;String</code> gives you in addition is access to <code>String::capacity</code> which isn't really useful when reading.</p></li>\n</ol>\n"}], "owner": {"reputation": 1729, "user_id": 3859522, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/fe4a78465ab98520ed124337edad97c8?s=128&d=identicon&r=PG&f=1", "display_name": "Dulguun Otgon", "link": "https://stackoverflow.com/users/3859522/dulguun-otgon"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 273, "favorite_count": 0, "accepted_answer_id": 40313980, "answer_count": 1, "score": 1, "last_activity_date": 1477717633, "creation_date": 1477684089, "last_edit_date": 1477717633, "question_id": 40312273, "link": "https://stackoverflow.com/questions/40312273/string-to-vector-of-parsed-values", "title": "String to vector of parsed values", "body": "<p>With lot of compiler errors and documentation browsing I came up with this function.</p>\n\n<pre><code>use std::io;\nuse std::io::Read;\nuse std::str::FromStr;\nuse std::fmt::Debug;\n\nfn parse_vec&lt;T&gt;(a: &amp;String) -&gt; Vec&lt;T&gt;\n    where T: FromStr, &lt;T as FromStr&gt;::Err: Debug {\n\n    a.split_whitespace()\n         .filter_map(|word| word.parse().ok())\n         .collect()\n}\n\nfn main() {\n    let mut all_input = String::new();\n    io::stdin().read_to_string(&amp;mut all_input)\n        .expect(\"io::stdin().read_to_string(&amp;mut all_input) error\");\n\n    let v: Vec&lt;i32&gt; = parse_vec(&amp;all_input);\n    println!(\"{}\", v[0] + v[1]);\n    println!(\"{}\", all_input);\n}\n</code></pre>\n\n<ol>\n<li>What does <code>&lt;T as FromStr&gt;::Err: Debug</code> mean? It's there because compiler suggested it. I don't know what it is.</li>\n<li>Can the function <code>parse_vec</code> be shortened?</li>\n<li>If I change <code>parse_vec</code> to take ownership of the string <code>fn parse_vec&lt;T&gt;(a: String) -&gt; Vec&lt;T&gt;</code> would the memory of <code>all_input</code> string be freed after <code>parse_vec</code> finishes?</li>\n<li>Is there a way to do this without intermediate string for reading input?</li>\n</ol>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1477677764, "post_id": 40310483, "comment_id": 67878640, "body": "Have you tried converting the pointer to a byte pointer?"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1477677934, "post_id": 40310483, "comment_id": 67878738, "body": "tried but cast isn&#39;t allowed - <code>casting `&amp;MyStruct` as `*const u8` is invalid</code>."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1477677974, "post_id": 40310483, "comment_id": 67878758, "body": "Glad to know I am not the only one who tried :D"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 2, "creation_date": 1477716747, "post_id": 40310483, "comment_id": 67889227, "body": "If you want to convert a borrowed pointer to a raw byte pointer, you have to do two casts in a row: <code>let x: &amp;T; x as *const T as *const u8</code>."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1580335023, "post_id": 40310851, "comment_id": 106068126, "body": "This is wrong; <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2582-raw-reference-mir-operator.md\" rel=\"nofollow noreferrer\">taking a reference of a value derived from a null pointer is undefined behavior</a>: <i>references must be aligned and dereferencable, even when they are created and never used.</i> (From <a href=\"https://stackoverflow.com/users/3007411/kaz-wesley\">Kaz Wesley</a>)"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 1, "creation_date": 1580338798, "post_id": 40310851, "comment_id": 106069286, "body": "In that case, does a &#39;right&#39; answer exist? Or is the only solution <i>&#39;technically undefined&#39;</i>, but <i>&#39;working in practice&#39;</i>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1580341643, "post_id": 40310851, "comment_id": 106070023, "body": "@ideasman42 that&#39;s correct, but there&#39;s support in nightly for doing it The Right Way (I&#39;m hoping that the non-answer answer below is updated to show that)."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1580371373, "post_id": 40310851, "comment_id": 106077261, "body": "@Shepmaster: Ah! Seems like the rules are shifting, or more accurately that uncertain code patterns are now ruled out. I&#39;ve put a disclaimer while I think about it."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 10, "last_activity_date": 1580374787, "last_edit_date": 1580374787, "creation_date": 1477678033, "answer_id": 40310851, "question_id": 40310483, "link": "https://stackoverflow.com/questions/40310483/how-to-get-pointer-offset-in-bytes/40310851#40310851", "title": "How to get pointer offset in bytes?", "body": "<p><strong>TL;DR: This answer invokes Undefined Behavior, according to <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2582-raw-reference-mir-operator.md\" rel=\"nofollow noreferrer\">RFC-2582</a>.</strong></p>\n\n<blockquote>\n  <p>In particular, references must be aligned and <strong>dereferencable</strong>, even when they are created and never used.</p>\n</blockquote>\n\n<p><em>There are also discussions that field accesses themselves impose extra requirements not solved by the proposed <code>&amp;raw</code>, due to usage of <code>getelementptr inbounds</code>, see <strong><code>offsetof</code> woes</strong> at the bottom of the RFC.</em></p>\n\n<hr>\n\n<p>From the <a href=\"https://stackoverflow.com/questions/38819569/get-pointer-to-outer-struct-from-pointer-to-member-in-rust\">answer</a> I linked to your previous question:</p>\n\n<pre><code>macro_rules! offset_of {\n    ($ty:ty, $field:ident) =&gt; {\n        //  Undefined Behavior: dereferences a null pointer.\n        //  Undefined Behavior: accesses field outside of valid memory area.\n        unsafe { &amp;(*(0 as *const $ty)).$field as *const _ as usize }\n    }\n}\n\nfn main() {\n    let p: *const Baz = 0x1248 as *const _;\n    let p2: *const Foo = ((p as usize) - offset_of!(Foo, memberB)) as *const _;\n    println!(\"{:p}\", p2);\n}\n</code></pre>\n\n<p>We can see on the computation of <code>p2</code> that a pointer can be converted painless to an integer (<code>usize</code> here), on which arithmetic is performed, and then the result is cast back to a pointer.</p>\n\n<p><code>isize</code> and <code>usize</code> are the universal byte-sized pointer types :)</p>\n\n<hr>\n\n<p>Were <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2582-raw-reference-mir-operator.md\" rel=\"nofollow noreferrer\">RFC-2582</a> to be accepted, this implementation of <code>offset_of!</code> is my best shot:</p>\n\n<pre><code>macro_rules! offset_of {\n    ($ty:ty, $field:ident) =&gt; {\n        unsafe {\n            //  Create correctly sized storage.\n            //\n            //  Note: `let zeroed: $ty = ::std::mem::zeroed();` is incorrect,\n            //        a zero pattern is not always a valid value.\n            let buffer = ::std::mem::MaybeUninit::&lt;$ty&gt;::uninit();\n\n            //  Create a Raw reference to the storage:\n            //  - Alignment does not matter, though is correct here.\n            //  - It safely refers to uninitialized storage.\n            //\n            //  Note: using `&amp;raw const *(&amp;buffer as *const _ as *const $ty)`\n            //        is incorrect, it creates a temporary non-raw reference.\n            let uninit: &amp;raw const %ty = ::std::mem::transmute(&amp;buffer);\n\n            //  Create a Raw reference to the field:\n            //  - Alignment does not matter, though is correct here.\n            //  - It points within the memory area.\n            //  - It safely refers to uninitialized storage.\n            let field = &amp;raw const uninit.$field;\n\n            //  Compute the difference between pointers.\n            (field as *const _ as usize) - (uninit as *const_ as usize)\n        }\n    }\n}\n</code></pre>\n\n<p>I have commented each step with the reasons I believe they are sound, and why some alternatives are not -- something I encourage heavily in unsafe code -- and hopefully not missed anything.</p>\n"}, {"tags": [], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "is_accepted": false, "score": 1, "last_activity_date": 1477899686, "last_edit_date": 1477899686, "creation_date": 1477678858, "answer_id": 40311034, "question_id": 40310483, "link": "https://stackoverflow.com/questions/40310483/how-to-get-pointer-offset-in-bytes/40311034#40311034", "title": "How to get pointer offset in bytes?", "body": "<p>Thanks to @Matthieu M.'s answer, this can be done using pointer offsets, heres a reusable macro:</p>\n\n<pre><code>macro_rules! offset_of {\n    ($ty:ty, $field:ident) =&gt; {\n        &amp;(*(0 as *const $ty)).$field as *const _ as usize\n    }\n}\n\nmacro_rules! check_type_pair {\n    ($a:expr, $b:expr) =&gt; {\n        if false {\n            let _type_check = if false {$a} else {$b};\n        }\n    }\n}\n\nmacro_rules! parent_of_mut {\n    ($child:expr, $ty:ty, $field:ident) =&gt; {\n        {\n            check_type_pair!(&amp;(*(0 as *const $ty)).$field, &amp;$child);\n            let offset = offset_of!($ty, $field);\n            &amp;mut *(((($child as *mut _) as usize) - offset) as *mut $ty)\n        }\n    }\n}\n\nmacro_rules! parent_of {\n    ($child:expr, $ty:ty, $field:ident) =&gt; {\n        {\n            check_type_pair!(&amp;(*(0 as *const $ty)).$field, &amp;$child);\n            let offset = offset_of!($ty, $field);\n            &amp;*(((($child as *const _) as usize) - offset) as *const $ty)\n        }\n    }\n}\n</code></pre>\n\n<p>This way, when we have a field in a struct, we can get the parent struct like this:</p>\n\n<pre><code>fn some_method(&amp;self) {\n    // Where 'self' is ParentStruct.field,\n    // access ParentStruct instance.\n    let parent = unsafe { parent_of!(self, ParentStruct, field) };\n}\n</code></pre>\n\n<p>The macro <code>check_type_pair</code> helps avoid simple mistakes where <code>self</code> and <code>ParentStruct.field</code> aren't the same type. However its not foolproof when two different members in a struct have the same type.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1480, "favorite_count": 2, "accepted_answer_id": 40310851, "answer_count": 2, "score": 7, "last_activity_date": 1580374787, "creation_date": 1477676442, "last_edit_date": 1477917500, "question_id": 40310483, "link": "https://stackoverflow.com/questions/40310483/how-to-get-pointer-offset-in-bytes", "title": "How to get pointer offset in bytes?", "body": "<p>While raw pointers in Rust have the <a href=\"https://doc.rust-lang.org/std/primitive.pointer.html#method.offset\" rel=\"nofollow\"><code>offset</code></a> method, this only increments by the size of the pointer. How can I get access to the pointer in bytes?</p>\n\n<p>Something like this in C:</p>\n\n<pre><code>var_offset = (typeof(var))((char *)(var) + offset);\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 0, "creation_date": 1477674677, "post_id": 40309915, "comment_id": 67877205, "body": "If having to create an instance of the struct is acceptable, you can do <code>&amp;foo.bar as *const _ as usize - &amp;foo as *const _ as usize</code> to get the offset of the field <code>bar</code>."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 2, "creation_date": 1484467679, "post_id": 40309915, "comment_id": 70516744, "body": "The question this is marked as a duplicate of doesn&#39;t provide a convenient replacement for <code>offsetof</code>, nor should it - since its asking a related but different question."}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 1244, "favorite_count": 0, "closed_date": 1477674606, "answer_count": 0, "score": 3, "last_activity_date": 1477674283, "creation_date": 1477674283, "question_id": 40309915, "link": "https://stackoverflow.com/questions/40309915/how-to-get-the-offset-of-a-struct-member-in-rust-offsetof", "closed_reason": "Duplicate", "title": "How to get the offset of a struct member in Rust? (offsetof)", "body": "<p>C has <code>offsetof</code>, is there some way to do this in Rust?</p>\n\n<p>Even though the order may change between compilations (unless <code>repr(C)</code> is used), for a given complication it should be possible to access the offset of a <code>struct</code> member at compile time.</p>\n\n<p>Whats the best way find this offset in Rust?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1477673686, "post_id": 40309585, "comment_id": 67876648, "body": "The only solution is to rewrite the code in a way that circumvents the issue. A few more details about what <code>Node</code> is and what you expect to get as the output of this function would be invaluable (edit them in the question)."}, {"owner": {"reputation": 2904, "user_id": 1180822, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cdc598c880c2d88f2831b6618e1db4b5?s=128&d=identicon&r=PG", "display_name": "Ross", "link": "https://stackoverflow.com/users/1180822/ross"}, "edited": false, "score": 1, "creation_date": 1477674207, "post_id": 40309585, "comment_id": 67876919, "body": "This won&#39;t be the correct terminology (I&#39;m a a rust novice at best), but it looks to me like your <code>cur_node_borrowed</code> is holding ownership of the the mutable borrow of <code>cur_node</code>.  So when you get down to the bottom, you&#39;re trying to mutate <code>cur_node</code> again while <code>cur_node_borrowed</code> is in scope.  Pushing <code>cur_node_borrowed</code> out of scope - thus losing the mutable borrow - should let you assign to cur_node again. (I just don&#39;t know the best way for you to do that, sorry). Hope this points you in the right direction."}, {"owner": {"reputation": 5824, "user_id": 29502, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/1418ba3d9ca124ff55e11f8050682aa6?s=128&d=identicon&r=PG", "display_name": "Newtang", "link": "https://stackoverflow.com/users/29502/newtang"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1477683874, "post_id": 40309585, "comment_id": 67881565, "body": "@MatthieuM, I added my Node implementation. The goal is to return a vector of Nodes, based on the largest values of children. I removed it for brevity."}], "answers": [{"tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 3, "last_activity_date": 1560110136, "last_edit_date": 1560110136, "creation_date": 1477689304, "answer_id": 40313301, "question_id": 40309585, "link": "https://stackoverflow.com/questions/40309585/cannot-assign-to-variable-because-it-is-borrowed/40313301#40313301", "title": "Cannot assign to variable because it is borrowed", "body": "<p>As the comments have said, you will need to restructure the code to make sure there is no borrow at the point where you want to assign to <code>cur_node</code>.  When dealing with <code>Rc</code> you can also often get away with a few extra <code>.clone()</code>, but that's cheating (and a little less efficient) :-).</p>\n\n<p>Here's one way that compiles, taking advantage of Rust's <a href=\"https://doc.rust-lang.org/nightly/reference/expressions/block-expr.html\" rel=\"nofollow noreferrer\">blocks-are-expressions</a> feature:</p>\n\n<pre><code>fn naive_largest_path(root: Rc&lt;RefCell&lt;Node&gt;&gt;) {\n\n    let mut cur_node = root.clone();\n\n    while cur_node.borrow().has_children() {\n        cur_node = {\n            let cur_node_borrowed = cur_node.borrow();\n\n            let lc = cur_node_borrowed.left_child.as_ref().unwrap();\n\n            let left_child = cur_node_borrowed.left_child.as_ref().unwrap();\n            let right_child = cur_node_borrowed.right_child.as_ref().unwrap();\n\n\n\n            let left_val = left_child.borrow().value;\n            let right_val = right_child.borrow().value;\n\n\n            if left_val &gt; right_val {\n                left_child.clone()\n            } else {\n                right_child.clone()\n            }\n        };\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 5824, "user_id": 29502, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/1418ba3d9ca124ff55e11f8050682aa6?s=128&d=identicon&r=PG", "display_name": "Newtang", "link": "https://stackoverflow.com/users/29502/newtang"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3420, "favorite_count": 0, "accepted_answer_id": 40313301, "answer_count": 1, "score": 3, "last_activity_date": 1560110136, "creation_date": 1477673035, "last_edit_date": 1477838767, "question_id": 40309585, "link": "https://stackoverflow.com/questions/40309585/cannot-assign-to-variable-because-it-is-borrowed", "title": "Cannot assign to variable because it is borrowed", "body": "<p>I'm trying to re-assign a variable in a loop, but I keep running into <code>cannot assign to `cur_node` because it is borrowed</code>. Below I commented out the loop for simplicity, and it's the same problem. How do I handle this? </p>\n\n<pre><code>fn naive_largest_path(root: Rc&lt;RefCell&lt;Node&gt;&gt;) {\n    let mut cur_node = root.clone();\n    let cur_node_borrowed = cur_node.borrow();\n\n    // while cur_node_borrowed.has_children() {\n        let lc = cur_node_borrowed.left_child.as_ref().unwrap();\n\n        let left_child = cur_node_borrowed.left_child.as_ref().unwrap();\n        let right_child = cur_node_borrowed.right_child.as_ref().unwrap();\n\n        let left_val = left_child.borrow().value;\n        let right_val = right_child.borrow().value;\n\n        if left_val &gt; right_val {\n            cur_node = left_child.clone();\n        } else {\n            cur_node = right_child.clone();\n        }\n    // }\n}\n\nstruct Node {\n    value: i32,\n    row_num: i32,\n    position_in_row: i32,\n    left_child: Option&lt;Rc&lt;RefCell&lt;Node&gt;&gt;&gt;,\n    right_child: Option&lt;Rc&lt;RefCell&lt;Node&gt;&gt;&gt;,\n}\n\nimpl Node {\n    fn new(val: i32, row: i32, pos_in_row: i32) -&gt; Rc&lt;RefCell&lt;Node&gt;&gt; {\n        Rc::new(RefCell::new(Node {\n            value: val,\n            row_num: row,\n            position_in_row: pos_in_row,\n            left_child: None,\n            right_child: None,\n        }))\n    }\n\n    fn has_children(&amp;self) -&gt; bool {\n        self.left_child.is_some() || self.right_child.is_some()\n    }\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1477661527, "post_id": 40306170, "comment_id": 67869474, "body": "Looks like <a href=\"https://github.com/rust-lang/rust/issues/19680\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/19680</a>, looks to me like a usability bug."}, {"owner": {"reputation": 22825, "user_id": 992687, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/0Da71.png?s=128&g=1", "display_name": "The Unfun Cat", "link": "https://stackoverflow.com/users/992687/the-unfun-cat"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1477661595, "post_id": 40306170, "comment_id": 67869524, "body": "If that fixes it, should I let the q stand? Will check back after the weekend, gotta run :)"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1477661696, "post_id": 40306170, "comment_id": 67869607, "body": "Certainly, a clear question on StackOverflow may be easier to find and a clear answer may be able to elaborate more."}], "answers": [{"tags": [], "owner": {"reputation": 22825, "user_id": 992687, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/0Da71.png?s=128&g=1", "display_name": "The Unfun Cat", "link": "https://stackoverflow.com/users/992687/the-unfun-cat"}, "is_accepted": true, "score": 7, "last_activity_date": 1478528734, "creation_date": 1478528734, "answer_id": 40467547, "question_id": 40306170, "link": "https://stackoverflow.com/questions/40306170/error-cannot-satisfy-dependencies-so-std-only-shows-up-once/40467547#40467547", "title": "error: cannot satisfy dependencies so `std` only shows up once", "body": "<p>Thanks to Matthieu M. for pointing me to the correct <a href=\"https://github.com/rust-lang/rust/issues/19680\" rel=\"noreferrer\">github issue</a>!</p>\n\n<p>The fix was to put the following in my <code>Cargo.toml</code>:</p>\n\n<pre><code>crate-type = [\"rlib\", \"dylib\"]\n</code></pre>\n\n<p>If you are using <code>rustc</code> the option</p>\n\n<pre><code>-C prefer-dynamic\n</code></pre>\n\n<p>should fix your problem.</p>\n"}], "owner": {"reputation": 22825, "user_id": 992687, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/0Da71.png?s=128&g=1", "display_name": "The Unfun Cat", "link": "https://stackoverflow.com/users/992687/the-unfun-cat"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1030, "favorite_count": 2, "accepted_answer_id": 40467547, "answer_count": 1, "score": 8, "last_activity_date": 1478528734, "creation_date": 1477661420, "last_edit_date": 1495540123, "question_id": 40306170, "link": "https://stackoverflow.com/questions/40306170/error-cannot-satisfy-dependencies-so-std-only-shows-up-once", "title": "error: cannot satisfy dependencies so `std` only shows up once", "body": "<p>This is an error I get when I try to run <code>cargo test</code> in a project. What does it mean? How do I fix it? </p>\n\n<p>I can try to update with more details, but I could not reproduce it with a minimal example, unfortunately...</p>\n\n<p>Full error:</p>\n\n<pre><code>cargo test\n   Compiling ranges v0.1.0 (file:///Users/user/code/rust-project)\nerror: cannot satisfy dependencies so `std` only shows up once\n  |\n  = help: having upstream crates all available in one format will likely make this go away\n\nerror: cannot satisfy dependencies so `core` only shows up once\n  |\n  = help: having upstream crates all available in one format will likely make this go away\n\nerror: cannot satisfy dependencies so `collections` only shows up once\n  |\n  = help: having upstream crates all available in one format will likely make this go away\n\nerror: cannot satisfy dependencies so `rustc_unicode` only shows up once\n  |\n  = help: having upstream crates all available in one format will likely make this go away\n\nerror: cannot satisfy dependencies so `alloc` only shows up once\n  |\n  = help: having upstream crates all available in one format will likely make this go away\n\nerror: cannot satisfy dependencies so `rand` only shows up once\n  |\n  = help: having upstream crates all available in one format will likely make this go away\n\nerror: cannot satisfy dependencies so `libc` only shows up once\n  |\n  = help: having upstream crates all available in one format will likely make this go away\n\nerror: cannot satisfy dependencies so `unwind` only shows up once\n  |\n  = help: having upstream crates all available in one format will likely make this go away\n\nerror: cannot satisfy dependencies so `panic_unwind` only shows up once\n  |\n  = help: having upstream crates all available in one format will likely make this go away\n\nerror: cannot link together two allocators: alloc_jemalloc and alloc_system\n\nerror: aborting due to 10 previous errors\n</code></pre>\n\n<p>It happens during the compilation step when I try to run tests that use the crate through an <code>extern crate</code>, like here: <a href=\"https://stackoverflow.com/questions/40305337/how-do-i-access-files-in-the-src-directory-from-files-in-my-tests-directory/40305523#40305523\">How do I access files in the src directory from files in my tests directory?</a></p>\n\n<p>On OS X, <code>rustc 1.12.0 (3191fbae9 2016-09-23)</code></p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 22825, "user_id": 992687, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/0Da71.png?s=128&g=1", "display_name": "The Unfun Cat", "link": "https://stackoverflow.com/users/992687/the-unfun-cat"}, "edited": false, "score": 0, "creation_date": 1477658667, "post_id": 40305337, "comment_id": 67867775, "body": "Have also tried <code>use (super|self|src)::int_rle</code> in the <code>tests&#47;test_int_rle.rs</code> file."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1477658978, "post_id": 40305337, "comment_id": 67867973, "body": "A module DOES NOT have automatic access to the symbols its parents have access to. Have you tried moving <code>use int_rle;</code> after <code>mod tests {</code> ?"}, {"owner": {"reputation": 22825, "user_id": 992687, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/0Da71.png?s=128&g=1", "display_name": "The Unfun Cat", "link": "https://stackoverflow.com/users/992687/the-unfun-cat"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1477658998, "post_id": 40305337, "comment_id": 67867983, "body": "This question deals with files in different folders, but I cannot get it to work: <a href=\"http://stackoverflow.com/questions/20922091/how-do-you-use-parent-module-imports-in-rust?noredirect=1&amp;lq=1\" title=\"how do you use parent module imports in rust\">stackoverflow.com/questions/20922091/&hellip;</a> (see my comments to the answer)."}], "answers": [{"comments": [{"owner": {"reputation": 1417, "user_id": 2977291, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/66afbccc6043392125ac0f0de57ccfa7?s=128&d=identicon&r=PG&f=1", "display_name": "paholg", "link": "https://stackoverflow.com/users/2977291/paholg"}, "reply_to_user": {"reputation": 22825, "user_id": 992687, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/0Da71.png?s=128&g=1", "display_name": "The Unfun Cat", "link": "https://stackoverflow.com/users/992687/the-unfun-cat"}, "edited": false, "score": 0, "creation_date": 1477659662, "post_id": 40305523, "comment_id": 67868405, "body": "Sorry, I should have specified that then imports need to be made from the crate name."}, {"owner": {"reputation": 22825, "user_id": 992687, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/0Da71.png?s=128&g=1", "display_name": "The Unfun Cat", "link": "https://stackoverflow.com/users/992687/the-unfun-cat"}, "edited": false, "score": 0, "creation_date": 1477659740, "post_id": 40305523, "comment_id": 67868456, "body": "<code>Use of undeclared type or module int_rle</code> in the body of the test function."}, {"owner": {"reputation": 22825, "user_id": 992687, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/0Da71.png?s=128&g=1", "display_name": "The Unfun Cat", "link": "https://stackoverflow.com/users/992687/the-unfun-cat"}, "edited": false, "score": 0, "creation_date": 1477659849, "post_id": 40305523, "comment_id": 67868499, "body": "I think <code>pub use min..::int_rle</code> fixed it if I use <code>super::int_rle::IntRle</code> in the tests module :) Can you confirm, then change your answer and I will upvote and accept?"}], "tags": [], "owner": {"reputation": 1417, "user_id": 2977291, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/66afbccc6043392125ac0f0de57ccfa7?s=128&d=identicon&r=PG&f=1", "display_name": "paholg", "link": "https://stackoverflow.com/users/2977291/paholg"}, "is_accepted": true, "score": 9, "last_activity_date": 1477660065, "last_edit_date": 1477660065, "creation_date": 1477659052, "answer_id": 40305523, "question_id": 40305337, "link": "https://stackoverflow.com/questions/40305337/how-do-i-access-files-in-the-src-directory-from-files-in-my-tests-directory/40305523#40305523", "title": "How do I access files in the src directory from files in my tests directory?", "body": "<p>The files <code>src/int_rle.rs</code> and <code>src/lib.rs</code> form your library, and together are called a <em>crate</em>.</p>\n\n<p>Your tests and examples folders are not considered part of the crate. This is good, because when someone uses your library, they don't need your tests, they just need your library.</p>\n\n<p>You can fix your issue by adding the line <code>extern crate minimal_example_test_directories;</code> to the top of <code>tests/test_int_rle.rs</code>.</p>\n\n<p>You can read more about Rust's crate and module structure in the book, <a href=\"https://doc.rust-lang.org/book/crates-and-modules.html\" rel=\"noreferrer\">here</a>.</p>\n\n<p>This should be a working version of your test file:</p>\n\n<pre><code>// tests/test_int_rle.rs\nextern crate minimal_example_test_directories;\n\npub use minimal_example_test_directories::int_rle;\n\n#[cfg(test)]\nmod tests {\n    #[test]\n    fn it_works() {\n        super::int_rle::IntRle { values: vec![1, 2, 3] };\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 22825, "user_id": 992687, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/0Da71.png?s=128&g=1", "display_name": "The Unfun Cat", "link": "https://stackoverflow.com/users/992687/the-unfun-cat"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2436, "favorite_count": 0, "accepted_answer_id": 40305523, "answer_count": 1, "score": 3, "last_activity_date": 1477660065, "creation_date": 1477658404, "last_edit_date": 1495541960, "question_id": 40305337, "link": "https://stackoverflow.com/questions/40305337/how-do-i-access-files-in-the-src-directory-from-files-in-my-tests-directory", "title": "How do I access files in the src directory from files in my tests directory?", "body": "<p>I have a project layout that looks like the following:</p>\n\n<pre><code>src/\n    int_rle.rs\n    lib.rs\ntests/\n    test_int_rle.rs\n</code></pre>\n\n<p>The project compiles with <code>cargo build</code>, but I am unable to run the test with <code>cargo test</code>. I get the error</p>\n\n<pre><code>error[E0432]: unresolved import `int_rle`. There is no `int_rle` in the crate root\n --&gt; tests/test_int_rle.rs:1:5\n  |\n1 | use int_rle;\n  |     ^^^^^^^\n\nerror[E0433]: failed to resolve. Use of undeclared type or module `int_rle`\n --&gt; tests/test_int_rle.rs:7:9\n  |\n7 |         int_rle::IntRle { values: vec![1, 2, 3] }\n  |         ^^^^^^^^^^^^^^^ Use of undeclared type or module `int_rle`\n\nerror: aborting due to 2 previous errors\n\nerror: Could not compile `minimal_example_test_directories`.\n</code></pre>\n\n<p>My code:</p>\n\n<pre><code>// src/lib.rs\npub mod int_rle;\n\n// src/int_rle.rs\n\n#[derive(Debug, PartialEq)]\npub struct IntRle {\n    pub values: Vec&lt;i32&gt;,\n}\n\n// tests/test_int_rle.rs\nuse int_rle;\n\n#[cfg(test)]\nmod tests {\n    #[test]\n    fn it_works() {\n        int_rle::IntRle { values: vec![1, 2, 3] }\n    }\n}\n\n// Cargo.toml\n[package]\nname = \"minimal_example_test_directories\"\nversion = \"0.1.0\"\nauthors = [\"Johann Gambolputty de von Ausfern ... von Hautkopft of Ulm\"]\n\n[dependencies]\n</code></pre>\n\n<p>Related: <a href=\"https://stackoverflow.com/questions/17340985/how-do-i-compile-a-multi-file-crate-in-rust\">How do I compile a multi-file crate in Rust?</a> (how to do it if the test and source files are in the same folder.)</p>\n"}, {"tags": ["rust", "code-completion"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1477656193, "post_id": 40304629, "comment_id": 67866275, "body": "<i>I don&#39;t suspect any problem with Racer</i> =&gt; Racer is a godsend, but it&#39;s still rather limited in its understanding of the type system AFAIK (there&#39;s work in progress on the Rust Language Server which will be a Racer on steroids). From my own understanding of strings, I&#39;d suspect you hit a limitation here."}, {"owner": {"reputation": 26154, "user_id": 5436257, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/iGuaK.jpg?s=128&g=1", "display_name": "Joe Clay", "link": "https://stackoverflow.com/users/5436257/joe-clay"}, "edited": false, "score": 2, "creation_date": 1477659176, "post_id": 40304629, "comment_id": 67868086, "body": "Relevant Racer issue: <a href=\"https://github.com/phildawes/racer/issues/443\" rel=\"nofollow noreferrer\">github.com/phildawes/racer/issues/443</a> - it&#39;s in the works!"}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 1, "creation_date": 1477659638, "post_id": 40304629, "comment_id": 67868394, "body": "btw, <code>text</code> in your example is a <code>&amp;&#39;static str</code>, not a <code>String</code> (so I&#39;m not sure that Racer suggestions aside, your code would compile). In the general case, due to type inference, adding type hints would probably help Racer anyway to search methods on the right type"}], "owner": {"reputation": 1929, "user_id": 539972, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/a06770429504c24cfeded0a38576007f?s=128&d=identicon&r=PG", "display_name": "Verax", "link": "https://stackoverflow.com/users/539972/verax"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 122, "favorite_count": 0, "answer_count": 0, "score": 1, "last_activity_date": 1477658994, "creation_date": 1477656030, "last_edit_date": 1477658994, "question_id": 40304629, "link": "https://stackoverflow.com/questions/40304629/rust-strings-with-racer-code-completion", "title": "Rust Strings with Racer Code Completion", "body": "<p>If I declare a string literal as:</p>\n\n<pre><code>let text = \"this is text\";\ntext.  // Racer returns no completion options\n</code></pre>\n\n<p>Racer doesn't return any completion options after type <code>text.</code></p>\n\n<p>However, if I declare a string literal as:</p>\n\n<pre><code>let text: String = \"this is text\";\ntext.  // Racer returns many completion options\n</code></pre>\n\n<p>Racer will return completion options after typing <code>text.</code></p>\n\n<p>I don't suspect any problem with Racer, but rather my understanding of Rust strings.  Can someone explain to me why Racer doesn't return any completion options for the first example, and how I might be able to see what methods are available to <code>text</code>?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1477650481, "post_id": 40302760, "comment_id": 67863338, "body": "Have you tried the wrapper method approach? I&#39;m also very curious about that edge case."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1477650547, "post_id": 40302760, "comment_id": 67863386, "body": "@E_net4, I didn&#39;t try it yet (not sure how it would be written), but seems like the most promising solution."}, {"owner": {"reputation": 1686, "user_id": 1217063, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/xRgTZ.jpg?s=128&g=1", "display_name": "ampron", "link": "https://stackoverflow.com/users/1217063/ampron"}, "edited": false, "score": 0, "creation_date": 1477651027, "post_id": 40302760, "comment_id": 67863630, "body": "It is incorrect to say that &quot;[pointers in Rust] don&#39;t need to be checked against NULL&quot;.  References have that property (can&#39;t be null), which is why the borrow checker is applied to them (to prevent dangling references).  Pointers, on the other hand can be null, but the safety check for them is that they cannot be dereferenced outside of an <code>unsafe</code> block."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 1686, "user_id": 1217063, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/xRgTZ.jpg?s=128&g=1", "display_name": "ampron", "link": "https://stackoverflow.com/users/1217063/ampron"}, "edited": false, "score": 2, "creation_date": 1477651100, "post_id": 40302760, "comment_id": 67863667, "body": "@ampron Very true. However, I believe the question is to be interpreted as &quot;they don&#39;t have to be checked in my use case&quot;."}, {"owner": {"reputation": 1686, "user_id": 1217063, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/xRgTZ.jpg?s=128&g=1", "display_name": "ampron", "link": "https://stackoverflow.com/users/1217063/ampron"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1477651919, "post_id": 40302760, "comment_id": 67864081, "body": "@E_net4 I agree"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 1, "creation_date": 1477652147, "post_id": 40302760, "comment_id": 67864207, "body": "Updated question to avoid confusion, I meant in this particular case. (maybe delete last 3 comments to avoid noise)"}], "answers": [{"tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": false, "score": 1, "last_activity_date": 1478443590, "last_edit_date": 1478443590, "creation_date": 1477651835, "answer_id": 40303520, "question_id": 40302760, "link": "https://stackoverflow.com/questions/40302760/convenient-access-to-members-of-raw-pointers/40303520#40303520", "title": "Convenient access to members of raw pointers?", "body": "<p>Wrapper methods can indeed improve readability of that code. Just by following <a href=\"https://doc.rust-lang.org/book/raw-pointers.html#references-and-raw-pointers\" rel=\"nofollow noreferrer\">The Book</a>:</p>\n\n<pre><code>struct MyLink {\n    link: *mut MyLink,\n    pub n: i32,\n}\n\nimpl MyLink {\n    pub unsafe fn link(&amp;self) -&gt; &amp;MyLink {\n        &amp;*self.link\n    }\n\n    pub unsafe fn mut_link(&amp;mut self) -&gt; &amp;mut MyLink {\n        &amp;mut *self.link\n    }\n}\n</code></pre>\n\n<p>Whether to mark the method prototype as <code>unsafe</code> or not is up to your particular case, but the implementation must be in an unsafe block: fetching a reference from a pointer, even without dereferencing, is not safe.</p>\n\n<p>Using it:</p>\n\n<pre><code>unsafe {\n    let mut l1 = MyLink {\n        link: 0 as *mut MyLink,\n        n: 4,\n    };\n\n    let mut l2 = MyLink {\n        link: &amp;mut l1 as *mut MyLink,\n        n: 3,\n    };\n    let n1 = l2.n;\n    let n2 = l2.link().n;\n    println!(\"{} -&gt; {}\", n1, n2);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=c6cf42d5f5c6a3a6c82b1d45acc3add7&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Gist</a></p>\n"}, {"comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1477652721, "post_id": 40303713, "comment_id": 67864484, "body": "does this add any overhead to release builds, compared with using a raw pointer?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 1, "creation_date": 1477652778, "post_id": 40303713, "comment_id": 67864518, "body": "@ideasman42: it should not, after optimizations. The methods are trivial enough to be inlined. If this worries you, you can slap <code>#[inline(always)]</code> on top of <code>deref</code> and <code>deref_mut</code>."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1477652873, "post_id": 40303713, "comment_id": 67864566, "body": "Great, this is what I&#39;d assume, also interested to know how <code>MyLink { link: Ptr::new(1 as *mut _) };</code> could be written a little more compact, I guess macros could work as a last resort."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1477652945, "post_id": 40303713, "comment_id": 67864599, "body": "@ideasman42: with a constructor function accepting <code>*mut MyLink</code> :)"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1477668275, "post_id": 40303713, "comment_id": 67873802, "body": "The non-null assertion does not seem to have any utility; the property is not used anywhere, and there are other ways than null for a pointer to be wild and wrong."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1477668466, "post_id": 40303713, "comment_id": 67873953, "body": "@bluss: While I agree there are other ways for a pointer to be invalid than being null, null is certainly the easiest to catch, so I see no harm in catching at least <i>some</i> issues. As for not being used anywhere, isn&#39;t forming a reference from a null or dangling pointer incorrect? I have the feeling I should mark <code>Ptr::new</code> as <code>unsafe</code>."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1477668770, "post_id": 40303713, "comment_id": 67874131, "body": "Sure, of course that&#39;s incorrect and there&#39;s no assertion that can make it safe. I feel it should be a debug assertion if it&#39;s not used to ensure an invariant."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 4, "last_activity_date": 1478442926, "last_edit_date": 1478442926, "creation_date": 1477652564, "answer_id": 40303713, "question_id": 40302760, "link": "https://stackoverflow.com/questions/40302760/convenient-access-to-members-of-raw-pointers/40303713#40303713", "title": "Convenient access to members of raw pointers?", "body": "<p>If this is a recurring situation in your code, I'd just create a generic wrapper.</p>\n\n<pre><code>#[repr(C)]\n#[derive(Hash)]\nstruct Ptr&lt;T&gt; {\n    ptr: *mut T\n}\n\nimpl&lt;T&gt; Ptr&lt;T&gt; {\n    pub unsafe fn new(ptr: *mut T) -&gt; Ptr&lt;T&gt; {\n        debug_assert!(!ptr.is_null());\n        Ptr { ptr: ptr }\n    }\n\n    #[inline(always)]\n    pub fn as_pointer(&amp;self) -&gt; *mut T {\n        self.ptr\n    }\n}\n\nimpl&lt;T&gt; Deref for Ptr&lt;T&gt; {\n    type Target = T;\n\n    #[inline(always)]\n    fn deref(&amp;self) -&gt; &amp;T {\n        unsafe { &amp;*self.ptr }\n    }\n}\n\nimpl&lt;T&gt; DerefMut for Ptr&lt;T&gt; {\n    #[inline(always)]\n    fn deref_mut(&amp;mut self) -&gt; &amp;mut T {\n        unsafe { &amp;mut *self.ptr }\n    }\n}\n\nimpl&lt;T&gt; Copy for Ptr&lt;T&gt; { }\nimpl&lt;T&gt; Clone for Ptr&lt;T&gt; {\n    #[inline(always)]\n    fn clone(&amp;self) -&gt; Ptr&lt;T&gt; { *self }\n}\n\nimpl&lt;T&gt; PartialEq for Ptr&lt;T&gt; {\n    fn eq(&amp;self, other: &amp;Ptr&lt;T&gt;) -&gt; bool {\n        self.ptr == other.ptr\n    }\n}\n</code></pre>\n\n<p>We assert upon construction that the <code>ptr</code> is effectively not null, so we do not have to check again when dereferencing.</p>\n\n<p>Then we let the language check for <code>Deref</code>/<code>DerefMut</code> when calling a method or accessing an attribute:</p>\n\n<pre><code>struct MyLink {\n    link: Ptr&lt;MyLink&gt;,\n}\n\nfn main() {\n    let mut link = MyLink { link: unsafe { Ptr::new(1 as *mut _) } };\n    let next = MyLink { link: unsafe { Ptr::new(&amp;mut link as *mut _) } };\n    let _ = next.link;\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "is_accepted": false, "score": 1, "last_activity_date": 1477653649, "creation_date": 1477653649, "answer_id": 40303970, "question_id": 40302760, "link": "https://stackoverflow.com/questions/40302760/convenient-access-to-members-of-raw-pointers/40303970#40303970", "title": "Convenient access to members of raw pointers?", "body": "<p>You can implement custom method for raw pointers in exactly the same way as for any other Rust type:</p>\n\n<pre><code>trait WickedRef&lt;T&gt;{\n    unsafe fn wicked_ref&lt;'x&gt;(self) -&gt; &amp;'x T;\n}\n\nimpl&lt;T&gt; WickedRef&lt;T&gt; for *mut T{\n    unsafe fn wicked_ref&lt;'x&gt;(self) -&gt; &amp;'x T{\n        &amp;*self\n    }    \n}\n\nroot.link.wicked_ref().link.wicked_ref()\n</code></pre>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1033, "favorite_count": 1, "accepted_answer_id": 40303713, "answer_count": 3, "score": 2, "last_activity_date": 1478443590, "creation_date": 1477649098, "last_edit_date": 1477839559, "question_id": 40302760, "link": "https://stackoverflow.com/questions/40302760/convenient-access-to-members-of-raw-pointers", "title": "Convenient access to members of raw pointers?", "body": "<p>The notation for accessing nested members of raw pointers for instances we know don't need to be checked against NULL can be rather awkward:</p>\n\n<pre><code>struct MyLink {\n    link: *mut MyLink,\n}\n</code></pre>\n\n\n\n<pre><code>let var = *(*(*(*root).link).link).link;\n</code></pre>\n\n<p>Can raw pointer's struct members be accessed without having to explicitly de-reference each time? Maybe by using methods like <code>root.link().link().link()</code> or by wrapping the type?</p>\n\n<p>While idiomatic Rust avoids this, there are exceptional cases where it isn't so easy to avoid. <code>Rc</code> has memory overhead, borrow checker causes problems for inter-linking members, C-API may require pointers... etc.</p>\n"}, {"tags": ["macros", "rust", "metaprogramming", "rust-macros"], "answers": [{"comments": [{"owner": {"reputation": 4825, "user_id": 181894, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/e734b1b426a713c8a0a7cfe6713e86e3?s=128&d=identicon&r=PG", "display_name": "Tomas", "link": "https://stackoverflow.com/users/181894/tomas"}, "edited": false, "score": 1, "creation_date": 1532209086, "post_id": 40303308, "comment_id": 89889891, "body": "Why would <code>println!</code> not use <code>expr</code> instead? Aren&#39;t the parameters all expressions?"}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "reply_to_user": {"reputation": 4825, "user_id": 181894, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/e734b1b426a713c8a0a7cfe6713e86e3?s=128&d=identicon&r=PG", "display_name": "Tomas", "link": "https://stackoverflow.com/users/181894/tomas"}, "edited": false, "score": 0, "creation_date": 1532211859, "post_id": 40303308, "comment_id": 89890427, "body": "@Tomas no, they can also be <a href=\"https://doc.rust-lang.org/std/fmt/index.html#named-parameters\" rel=\"nofollow noreferrer\">named parameters like <code>foo=expr</code></a> to replace all the <code>&quot;{foo}&quot;</code>s."}], "tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": true, "score": 43, "last_activity_date": 1565717084, "last_edit_date": 1565717084, "creation_date": 1477650979, "answer_id": 40303308, "question_id": 40302026, "link": "https://stackoverflow.com/questions/40302026/what-does-the-tt-metavariable-type-mean-in-rust-macros/40303308#40303308", "title": "What does the tt metavariable type mean in Rust macros?", "body": "<p>That's a notion introduced to ensure that whatever is in a macro invocation correctly matches <code>()</code>, <code>[]</code> and <code>{}</code> pairs. <code>tt</code> will match any single token <strong>or</strong> any pair of parenthesis/brackets/braces <em>with their content</em>.</p>\n\n<p>For example, for the following program:</p>\n\n<pre><code>fn main() {\n    println!(\"Hello world!\");\n}\n</code></pre>\n\n<p>The token trees would be:</p>\n\n<ul>\n<li><code>fn</code></li>\n<li><code>main</code></li>\n<li><code>()</code>\n\n<ul>\n<li>\u2205</li>\n</ul></li>\n<li><code>{ println!(\"Hello world!\"); }</code>\n\n<ul>\n<li><code>println</code></li>\n<li><code>!</code></li>\n<li><code>(\"Hello world!\")</code>\n\n<ul>\n<li><code>\"Hello world!\"</code></li>\n</ul></li>\n<li><code>;</code></li>\n</ul></li>\n</ul>\n\n<p>Each one forms a tree where simple tokens (<code>fn</code>, <code>main</code> etc.) are leaves, and anything surrounded by <code>()</code>, <code>[]</code> or <code>{}</code> has a subtree. Note that <code>(</code> does not appear alone in the token tree: it's not possible to match <code>(</code> without matching the corresponding <code>)</code>.</p>\n\n<p>For example:</p>\n\n<pre><code>macro_rules! {\n    (fn $name:ident $params:tt $body:tt) =&gt; { /* \u2026 */ }\n}\n</code></pre>\n\n<p>would match the above function with <code>$name \u2192 main</code>, <code>$params \u2192 ()</code>, <code>$body \u2192 { println!(\"Hello world!\"); }</code>.</p>\n\n<p>Token tree is the least demanding metavariable type: it matches anything. It's often used in macros which have a \u201cdon't really care\u201d part, and especially in macros which have a \u201chead\u201d and a \u201ctail\u201d part. For example, the <code>println!</code> macros have a branch matching <code>($fmt:expr, $($arg:tt)*)</code> where <code>$fmt</code> is the format string, and <code>$($arg:tt)*</code> means \u201call the rest\u201d and is just forwarded to <code>format_args!</code>. Which means that <code>println!</code> does not need to know the actual format and do complicated matching with it.</p>\n"}], "owner": {"reputation": 2779, "user_id": 2037422, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/fbe43538cf41cb5974a7bf75b7f9d843?s=128&d=identicon&r=PG", "display_name": "Pavel Davydov", "link": "https://stackoverflow.com/users/2037422/pavel-davydov"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5107, "favorite_count": 2, "accepted_answer_id": 40303308, "answer_count": 1, "score": 26, "last_activity_date": 1565717084, "creation_date": 1477646691, "last_edit_date": 1477649542, "question_id": 40302026, "link": "https://stackoverflow.com/questions/40302026/what-does-the-tt-metavariable-type-mean-in-rust-macros", "title": "What does the tt metavariable type mean in Rust macros?", "body": "<p>I'm reading a book about Rust, and start playing with <a href=\"https://doc.rust-lang.org/book/macros.html\" rel=\"noreferrer\">Rust macros</a>. All metavariable types are explained there and have examples, except the last one \u2013 <code>tt</code>. According to the book, it is a \u201ca single token tree\u201d. I'm curious, what is it and what is it used for? Can you please provide an example?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1477651544, "post_id": 40301864, "comment_id": 67863873, "body": "Have you measured the performance impact of either strategy? Before worrying about &quot;optimal&quot;, I&#39;d check whether the baseline is good enough."}, {"owner": {"reputation": 233, "user_id": 4389564, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/iHnQR.png?s=128&g=1", "display_name": "Month", "link": "https://stackoverflow.com/users/4389564/month"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1477654060, "post_id": 40301864, "comment_id": 67865175, "body": "I&#39;m afraid all &#39;artificial&#39; tests that I&#39;ve comed up with (like adding a billion or so pairs of vectors) are not conclusive. They provide near equal results for all three strategies. I suspect this is because of the simplicity of the test: the compiler optimizes it each time to almost the same result. The question is whether will it hold when applied to something that is not so easy for compiler to optimize."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1477654585, "post_id": 40301864, "comment_id": 67865453, "body": "Indeed micro-benchmarks being optimized may indeed not always translate into real word optimizations. However I was not talking about micro-benchmarks specifically. My advice about writing code is always to first start with idiomatic code (strongly compile-time checked, unit-tested, ...) and then profile. <i>If</i> the profiler points at an area where a micro-optimization is worth it, then try it out (Rust touts fearless refactoring after all!), however the biggest optimization gains generally come from algorithmic changes."}, {"owner": {"reputation": 233, "user_id": 4389564, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/iHnQR.png?s=128&g=1", "display_name": "Month", "link": "https://stackoverflow.com/users/4389564/month"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1477655092, "post_id": 40301864, "comment_id": 67865702, "body": "This is a logic that I&#39;m usually is trying to follow =) However, I&#39;m still a bit new to Rust, so I&#39;m not always sure which code can be considered ideomatic (or, as in this question, whether or not the desired effect can be achived within the ideomatic means). I have a C/C++ background, and there I&#39;ve always considered questions like that (reference, copy, or const T&amp; a parameter) to be something basic and straightforward rather than a &#39;micro-optimization&#39;."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1477655253, "post_id": 40301864, "comment_id": 67865782, "body": "C++ is a bit different here because of the copy constructor, so that a copy in C++ can be very costly. And also because the const-ness is only skin-deep. On the other hand, Rust&#39;s <code>&amp;T</code> has transitive constness and a copy in Rust is guaranteed to be a simple bitwise (shallow) copy."}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 5, "creation_date": 1477651461, "post_id": 40302494, "comment_id": 67863833, "body": "<i>you should design all your methods in a way that they accept references</i> =&gt; I&#39;d first check the IR. Compilers do not pass large types by value, they actually pass references to temporary copies (because registers), and if the called function is inlined the optimizer might simply elide the temporary copy and directly refer to the original. In which case, while you semantically pass by copy, at assembly level you are passing by immutable reference."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 9, "last_activity_date": 1477654040, "last_edit_date": 1477654040, "creation_date": 1477648280, "answer_id": 40302494, "question_id": 40301864, "link": "https://stackoverflow.com/questions/40301864/overloading-the-add-operator-without-copying-the-operands/40302494#40302494", "title": "Overloading the Add-operator without copying the operands", "body": "<blockquote>\n  <p>Is there a way to overload the '+' operator in such a way that</p>\n  \n  <ol>\n  <li>It accepts its arguments as references instead of copying or moving them;</li>\n  <li>It allows to write just <code>u = x + y</code> instead of <code>u = &amp;x + &amp;y</code>?</li>\n  </ol>\n</blockquote>\n\n<p><strong>No</strong>, there is no way to do that. Rust greatly values explicitness and hardly converts between types automatically.</p>\n\n<p>However, the solution to your problem is simple: <strong>just <code>#[derive(Copy)]</code></strong>. I can assure you that 24 bytes are not a lot. Computers these days love to crunch a lot of data at once instead of working on little chunks of data. </p>\n\n<hr>\n\n<p>Apart from that, <a href=\"https://doc.rust-lang.org/std/marker/trait.Copy.html\" rel=\"noreferrer\"><code>Copy</code></a> is not really about the performance overhead of copying/cloning:</p>\n\n<blockquote>\n  <p>Types that can be copied by simply copying bits (i.e. <code>memcpy</code>).</p>\n</blockquote>\n\n<p>And <a href=\"https://doc.rust-lang.org/std/marker/trait.Copy.html#when-should-my-type-be-copy\" rel=\"noreferrer\">later in the documentation</a>:</p>\n\n<blockquote>\n  <p>Generally speaking, if your type can implement <code>Copy</code>, it should. </p>\n</blockquote>\n\n<p>Your type <code>Vector3d</code> can be copied by just copying bits, so it should implement <code>Copy</code> (by just <code>#[derive()]</code>ing it).</p>\n\n<p>The performance overhead is a different question. If you have a type that can (and thus does) implement <code>Copy</code>, but you still think the type is too big (again: 24 bytes aren't!), <s>you should design all your methods in a way that they accept references</s> (it's not that easy; please read Matthieu's comment). This also includes the <code>Add</code> impl. And if you want to pass something to a function by reference, the programmer shall explicitly write it. That's what Rust's philosophy would say anyway.</p>\n"}], "owner": {"reputation": 233, "user_id": 4389564, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/iHnQR.png?s=128&g=1", "display_name": "Month", "link": "https://stackoverflow.com/users/4389564/month"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 603, "favorite_count": 2, "accepted_answer_id": 40302494, "answer_count": 1, "score": 7, "last_activity_date": 1477654040, "creation_date": 1477646187, "last_edit_date": 1495542801, "question_id": 40301864, "link": "https://stackoverflow.com/questions/40301864/overloading-the-add-operator-without-copying-the-operands", "title": "Overloading the Add-operator without copying the operands", "body": "<p>I'm writing an application in Rust that will have to use vector arithmetic intensively and I stumbled upon a problem of designing operator overload for a structure type.</p>\n\n<p>So I have a vector structure like that:</p>\n\n<pre><code>struct Vector3d {\n    pub x: f64,\n    pub y: f64,\n    pub z: f64,\n}\n</code></pre>\n\n<p>and I want to be able to write something like that:</p>\n\n<pre><code>let x = Vector3d {x:  1.0, y: 0.0, z: 0.0};\nlet y = Vector3d {x: -1.0, y: 0.0, z: 0.0};\n\nlet u = x + y;\n</code></pre>\n\n<p>As far as I can see, there are three different ways to do it:</p>\n\n<ol>\n<li><p>Implement <code>std::ops::Add</code> trait for <code>Vector3d</code> directly. That works, but this trait's method signature is:</p>\n\n<pre><code>fn add(self, other: Vector3d)\n</code></pre></li>\n</ol>\n\n<p>So it will invalidate its arguments after usage (because it moves them) which is undesirable in my case since many vectors will be used in multiple expressions.</p>\n\n<ol start=\"2\">\n<li><p>Implement <code>Add</code> trait for <code>Vector3d</code> and also implement the <code>Copy</code> trait. This works, but I feel iffy on that since <code>Vector3d</code> isn't exactly a lightweight thing (24 bytes at least) that can be copied quickly, especially when there are many calls to arithmetic functions. </p></li>\n<li><p>Implement <code>Add</code> for references to <code>Vector3d</code>, as suggested <a href=\"https://stackoverflow.com/questions/28005134/how-do-i-implement-the-add-trait-for-a-reference-to-a-struct#\">here</a>. This works, but in order to apply the operator, I will have to write </p>\n\n<pre><code>let u = &amp;x + &amp;y;\n</code></pre></li>\n</ol>\n\n<p>I don't like this notation because it doesn't exactly looks like its mathematic equivalent, just <code>u = x + y</code>.</p>\n\n<p>I'm not sure which variant is optimal. So, the question is: is there a way to overload the '+' operator in such a way that</p>\n\n<ol>\n<li>It accepts its arguments as references instead of copying or moving them;</li>\n<li>It allows to write just <code>u = x + y</code> instead of <code>u = &amp;x + &amp;y</code>?  </li>\n</ol>\n"}, {"tags": ["types", "rust"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 3, "creation_date": 1477645551, "post_id": 40301422, "comment_id": 67860760, "body": "Now I&#39;m wondering, if someone actively decided that raw pointers shouldn&#39;t impl <code>Default</code> or if the impl was just forgotten..."}, {"owner": {"reputation": 1279, "user_id": 4299078, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/85e4a1e6895c608aa595b2480d15fb27?s=128&d=identicon&r=PG&f=1", "display_name": "AndreyT", "link": "https://stackoverflow.com/users/4299078/andreyt"}, "edited": false, "score": 0, "creation_date": 1502135640, "post_id": 40301422, "comment_id": 78069405, "body": "I have create an issue: <a href=\"https://github.com/rust-lang/rust/issues/43722\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/43722</a>"}], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 6, "last_activity_date": 1477645083, "creation_date": 1477645083, "answer_id": 40301522, "question_id": 40301422, "link": "https://stackoverflow.com/questions/40301422/how-to-implement-default-for-a-raw-pointer/40301522#40301522", "title": "How to implement `Default` for a raw pointer?", "body": "<blockquote>\n  <p>Is there a way to declare Default for the raw pointer?</p>\n</blockquote>\n\n<p><strong>No</strong>, currently there isn't. Either the trait or the type needs to be defined in the crate, in which the trait-impl is written (so called \"orphan rules\").</p>\n\n<p>However, you don't need to manually implement <code>Default</code> for all of your types containing a pointer. You can create a new type, which wraps a raw pointer and does implement <code>Default</code>. Then you can just use this new type in all of your structs and simply derive <code>Default</code>.</p>\n\n<pre><code>struct ZeroedMutPtr&lt;T&gt;(pub *mut T);\n\nimpl&lt;T&gt; Default for ZeroedMutPtr&lt;T&gt; { ... } \n</code></pre>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 550, "favorite_count": 0, "accepted_answer_id": 40301522, "answer_count": 1, "score": 5, "last_activity_date": 1477645083, "creation_date": 1477644706, "last_edit_date": 1477645053, "question_id": 40301422, "link": "https://stackoverflow.com/questions/40301422/how-to-implement-default-for-a-raw-pointer", "title": "How to implement `Default` for a raw pointer?", "body": "<p>When using raw points in a struct, Rust doesn't allow to derive from Default.</p>\n\n<p>eg: </p>\n\n<pre><code>#[derive(Default)]\nstruct Foo {\n    bar: *mut Foo,\n    baz: usize,\n}\n</code></pre>\n\n<p>Reports</p>\n\n<pre><code>error[E0277]: the trait bound `*mut Foo: std::default::Default` is not satisfied\n</code></pre>\n\n<p>I tried this but it doesn't work:</p>\n\n<pre><code>impl Default for *mut Foo {\n    fn default() -&gt; *mut Foo {\n        ptr::null_mut()\n    }\n}\n</code></pre>\n\n<p>This gives an error:</p>\n\n<pre><code>impl doesn't use types inside crate\n</code></pre>\n\n<p>Is there a way to declare <code>Default</code> for the raw pointer?</p>\n\n<p>Otherwise I'll have to write explicit <code>default</code> functions for any <code>struct</code> which contains a raw pointer, OK in this example, but for larger structs it can be tedious, so I'd like to be able to avoid it in some cases.</p>\n"}, {"tags": ["hashmap", "rust", "borrow-checker", "rwlock"], "comments": [{"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 0, "creation_date": 1477641045, "post_id": 40299671, "comment_id": 67858516, "body": "In addition to the map resizing, someone else could simply delete the entry you&#39;re holding a reference to."}, {"owner": {"reputation": 1155, "user_id": 4641854, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/ebe283afcbdb0e4a9d1f20e26e969de1?s=128&d=identicon&r=PG", "display_name": "jeromefroe", "link": "https://stackoverflow.com/users/4641854/jeromefroe"}, "reply_to_user": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 0, "creation_date": 1477673139, "post_id": 40299671, "comment_id": 67876387, "body": "You&#39;re exactly right! For my use case I don&#39;t need to ever delete a key, but of course the compiler doesn&#39;t know that."}], "answers": [{"comments": [{"owner": {"reputation": 1155, "user_id": 4641854, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/ebe283afcbdb0e4a9d1f20e26e969de1?s=128&d=identicon&r=PG", "display_name": "jeromefroe", "link": "https://stackoverflow.com/users/4641854/jeromefroe"}, "edited": false, "score": 0, "creation_date": 1477673761, "post_id": 40300374, "comment_id": 67876687, "body": "Thanks for the feedback, this is extremely helpful! I think I will take the approach of using an <code>Arc</code> to start because I want to be able to create multiple references to the value that can live well past the <code>MutexGuard</code>. For my use case I don&#39;t need to delete any values in the <code>HashMap</code> once they are inserted so I wonder if an <code>Arc</code> might be more heavyweight than I need. I wonder if there is a way to store pointers to the values in the <code>HashMap</code> and then use lifetimes to tell the compiler that the reference is valid as long as the <code>HashMap</code> is in scope. More digging for me it seems!"}, {"owner": {"reputation": 1155, "user_id": 4641854, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/ebe283afcbdb0e4a9d1f20e26e969de1?s=128&d=identicon&r=PG", "display_name": "jeromefroe", "link": "https://stackoverflow.com/users/4641854/jeromefroe"}, "edited": false, "score": 0, "creation_date": 1477752387, "post_id": 40300374, "comment_id": 67896308, "body": "I worked on this a little more this morning, and came up with a <a href=\"https://play.rust-lang.org/?gist=a1d8df52c3a66f7b6a89a6b448a0a89e&amp;version=nightly&amp;backtrace=0\" rel=\"nofollow noreferrer\">different solution</a> that uses <code>Shared</code> pointers instead of <code>Arc</code>. It requires <code>unsafe</code> code and nightly Rust but I think it&#39;s pretty interesting nonetheless. I haven&#39;t run any benchmarks yet but I think it should be a little faster."}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 7, "last_activity_date": 1477640611, "creation_date": 1477640611, "answer_id": 40300374, "question_id": 40299671, "link": "https://stackoverflow.com/questions/40299671/trying-to-return-reference-from-rwlock-borrowed-value-does-not-live-long-enoug/40300374#40300374", "title": "Trying to return reference from RwLock, &quot;borrowed value does not live long enough&quot; Error", "body": "<p>You're correct that you can't return a reference to something which outlives the <code>MutexGuard</code>, because that would lead to a possibly dangling pointer.  </p>\n\n<p>Wrapping the contents in a <code>Box</code> won't help, though!  A <code>Box</code> is an owned pointer and apart from the redirection behaves like the contained value as far as reference lifetime goes.  After all, if you returned a reference to it, someone else might remove it from the <code>HashMap</code> and de-allocate it.</p>\n\n<p>Depending on what you want to do with the reference, I can think of a couple of options:</p>\n\n<ol>\n<li><p>Instead of <code>Box</code>ing the values, wrap them in <code>Arc</code>.  You would clone the <code>Arc</code> when taking from the <code>HashMap</code>, and multiple references can live at the same time.</p></li>\n<li><p>You could also return the <code>MutexGuard</code> along with the reference; see <a href=\"https://stackoverflow.com/questions/40095383/how-to-return-reference-to-a-sub-value-of-a-value-that-is-under-a-mutex/40103840\">this question</a>, which would work well if you just want to operate on the value and then drop the reference relatively soon.  This would keep the mutex held until you're finished with it.</p></li>\n</ol>\n"}], "owner": {"reputation": 1155, "user_id": 4641854, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/ebe283afcbdb0e4a9d1f20e26e969de1?s=128&d=identicon&r=PG", "display_name": "jeromefroe", "link": "https://stackoverflow.com/users/4641854/jeromefroe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 893, "favorite_count": 2, "accepted_answer_id": 40300374, "answer_count": 1, "score": 3, "last_activity_date": 1477640611, "creation_date": 1477637781, "last_edit_date": 1495540837, "question_id": 40299671, "link": "https://stackoverflow.com/questions/40299671/trying-to-return-reference-from-rwlock-borrowed-value-does-not-live-long-enoug", "title": "Trying to return reference from RwLock, &quot;borrowed value does not live long enough&quot; Error", "body": "<p>I've been working on my first Rust project recently but have hit a snag. I am using a <code>HashMap</code> mapping <code>String</code>s to <code>AtomicUsize</code> integers. The <code>HashMap</code> is protected by a <code>RwLock</code> to allow for concurrent access. I would like to be able to return references to <code>AtomicUsize</code> values in the <code>HashMap</code>, however if I try to return these references to the caller past the lifetime of the <code>RwLockWriteGuard</code> I get an error that <code>borrowed value does not live long enough</code>. I've reproduced a minimal example below and put the same example on the Rust playground <a href=\"https://play.rust-lang.org/?gist=702834ff6edf0e01ad2ada1592b43f90&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">here</a>.</p>\n\n<pre><code>use std::collections::HashMap;\nuse std::sync::RwLock;\nuse std::sync::atomic::{AtomicUsize, Ordering};\n\nstruct Bar {\n    val: AtomicUsize\n}\n\nimpl Bar {\n    pub fn new() -&gt; Self {\n        Bar { val: AtomicUsize::new(0) }\n    }\n}\n\nstruct Foo {\n    map: RwLock&lt;HashMap&lt;String, Bar&gt;&gt;\n}\n\n\nimpl Foo {\n    pub fn get(&amp;self, key: String) -&gt; &amp;Bar {\n        self.map.write().unwrap().entry(key).or_insert(Bar::new())\n    }\n}\n\nfn main() {\n    let foo = Foo {map: RwLock::new(HashMap::new())};\n    let bar = foo.get(\"key\".to_string());\n}\n</code></pre>\n\n<p>The error I get occurs on the line:</p>\n\n<pre><code>self.map.write().unwrap().entry(key).or_insert(Bar::new())\n</code></pre>\n\n<p>And is because the borrowed value does not live long enough. I've read a few other posts that discuss this error, this <a href=\"https://stackoverflow.com/questions/32083065/borrow-data-out-of-a-mutex-borrowed-value-does-not-live-long-enough\">one</a> in particular was especially relevant. After reading it over, I can gather that a value returned from a mutex must have a lifetime less than that of the mutex, which would seem to rule out completely what I'm trying to do. I can see why this should be impossible, because if we have a pointer into the Hashmap and another inserts values into the mutex which cause it to be resized, then we will have a dangling pointer. </p>\n\n<p>My question, then, is twofold. Firstly, I'm just curious if I understand the problem correctly or if there is another reason why I'm disallowed from doing what I tried to do? And my second question is if there is perhaps another way to accomplish what I am trying to do without <code>Box</code> the atomic integers and storing those in the <code>HashMap</code>? Such an approach seems like it should work to me because we can return a pointer to the <code>Boxed</code> value which would always be valid. However it seems like this approach would be inefficient because it would require an extra layer of pointer indirection and an extra allocation. Thanks!  </p>\n"}, {"tags": ["rust", "hyper"], "comments": [{"owner": {"reputation": 33796, "user_id": 45525, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/TKzgD.png?s=128&g=1", "display_name": "Synesso", "link": "https://stackoverflow.com/users/45525/synesso"}, "edited": false, "score": 0, "creation_date": 1477606313, "post_id": 40294929, "comment_id": 67848348, "body": "(In response to a deleted comment...) Yes I did [try <code>&amp;zs</code>]. Results in <code>trait &#39;&amp;&amp;mut [u8]: std::io::Read&#39; not satisfied</code>."}, {"owner": {"reputation": 1699, "user_id": 783825, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/cce2622c5ccd49a3cbf2007491ab1075?s=128&d=identicon&r=PG", "display_name": "Neikos", "link": "https://stackoverflow.com/users/783825/neikos"}, "edited": false, "score": 0, "creation_date": 1477606586, "post_id": 40294929, "comment_id": 67848446, "body": "Can you try adding a second &amp; to it? (It sounds stupid, but it works on the <a href=\"https://play.rust-lang.org/?code=use%20std%3A%3Aio%3A%3ARead%3B%0A%0Afn%20foo(r%3A%20%26Read)%20%7B%0A%20%20%20%20%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20mut%20a%20%3D%20%5B8u8%2C%206%2C%207%5D%3B%0A%20%20%20%20let%20mut%20bind%20%3D%20%26a%3B%0A%20%20%20%20%0A%20%20%20%20foo(%26%26bind%5B..%5D)%3B%0A%7D&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">playground</a> )"}, {"owner": {"reputation": 33796, "user_id": 45525, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/TKzgD.png?s=128&g=1", "display_name": "Synesso", "link": "https://stackoverflow.com/users/45525/synesso"}, "reply_to_user": {"reputation": 1699, "user_id": 783825, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/cce2622c5ccd49a3cbf2007491ab1075?s=128&d=identicon&r=PG", "display_name": "Neikos", "link": "https://stackoverflow.com/users/783825/neikos"}, "edited": false, "score": 0, "creation_date": 1477606914, "post_id": 40294929, "comment_id": 67848562, "body": "<code>GzDecoder::new(&amp;&amp;zs).unwrap()</code> =&gt; <code>trait &#39;&amp;&amp;&amp;mut [u8]: std::io::Read&#39; not satisfied</code>."}, {"owner": {"reputation": 1699, "user_id": 783825, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/cce2622c5ccd49a3cbf2007491ab1075?s=128&d=identicon&r=PG", "display_name": "Neikos", "link": "https://stackoverflow.com/users/783825/neikos"}, "edited": false, "score": 0, "creation_date": 1477607229, "post_id": 40294929, "comment_id": 67848685, "body": "That is interesting, because it does work in the playground.  I&#39;d also like to note <code>[]</code> is an array of length 0 and does not allow to grow.  Which means that reading into it will read nothing in the end. Try your luck with <code>Vec</code> if you want to read all of it, for example through <a href=\"https://doc.rust-lang.org/stable/std/io/trait.Read.html#method.read_to_end\" rel=\"nofollow noreferrer\"><code>read_to_end</code></a>"}, {"owner": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "edited": false, "score": 0, "creation_date": 1477608203, "post_id": 40294929, "comment_id": 67849075, "body": "This is for a hyper client, correct?"}, {"owner": {"reputation": 33796, "user_id": 45525, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/TKzgD.png?s=128&g=1", "display_name": "Synesso", "link": "https://stackoverflow.com/users/45525/synesso"}, "edited": false, "score": 0, "creation_date": 1477608401, "post_id": 40294929, "comment_id": 67849150, "body": "Yes, hyper client."}, {"owner": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "edited": false, "score": 1, "creation_date": 1477609531, "post_id": 40294929, "comment_id": 67849501, "body": "You should be able to mutably borrow <code>r</code> and pass that to the <code>GzDecoder</code> since it accepts types that implement <code>Read</code> which a client <code>Response</code> does."}], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 1, "last_activity_date": 1477630767, "creation_date": 1477630767, "answer_id": 40298307, "question_id": 40294929, "link": "https://stackoverflow.com/questions/40294929/read-gzip-response-with-hyper-and-flate2/40298307#40298307", "title": "Read gzip response with Hyper and Flate2", "body": "<p>The parameter to <code>GzDecoder::new</code> is defined with a generic type, so Rust will not perform some conversions that would happen if a fixed type was expected.</p>\n\n<p>You can convert a mutable slice into an immutable slice by dereferencing the mutable slice and then taking a reference to the result.</p>\n\n<pre><code>let mut d = GzDecoder::new(&amp;*zs).unwrap();\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "is_accepted": false, "score": 1, "last_activity_date": 1477637250, "creation_date": 1477637250, "answer_id": 40299549, "question_id": 40294929, "link": "https://stackoverflow.com/questions/40294929/read-gzip-response-with-hyper-and-flate2/40299549#40299549", "title": "Read gzip response with Hyper and Flate2", "body": "<p>Here is another way you can do it without using another buffer:</p>\n\n<pre><code>extern crate hyper;\nextern crate flate2;\n\nuse std::io::Read;\n\nuse hyper::client::Client;\nuse hyper::header::{Headers, AcceptEncoding, Encoding, qitem};\n\nuse flate2::read::GzDecoder;\n\nfn main() {\n    let c = Client::new();\n\n    let mut req = c.get(\"http://httpbin.org/gzip\");\n    let mut headers = Headers::new();\n    headers.set(\n        AcceptEncoding(vec![qitem(Encoding::Gzip)])\n    );\n    req = req.headers(headers);\n\n    let res = req.send().unwrap();\n    let mut decoder = GzDecoder::new(res).unwrap();\n    let mut buf = String::new();\n\n    let _ = decoder.read_to_string(&amp;mut buf);\n    println!(\"{}\", buf);\n}\n</code></pre>\n\n<p>This example uses the <code>gzip</code> endpoint from HTTPBIN for testing that the <code>Response</code> can be used in a <code>GzDecoder</code>.</p>\n\n<p>Dependencies used in my Cargo file:</p>\n\n<pre><code>[dependencies]\nhyper = \"0.9\"\nflate2 = \"0.2\"\n</code></pre>\n\n<p>P.S. The <code>unwrap()</code> calls are for brevity's sake :)</p>\n"}], "owner": {"reputation": 33796, "user_id": 45525, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/TKzgD.png?s=128&g=1", "display_name": "Synesso", "link": "https://stackoverflow.com/users/45525/synesso"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1308, "favorite_count": 0, "accepted_answer_id": 40298307, "answer_count": 2, "score": 2, "last_activity_date": 1477637250, "creation_date": 1477605798, "last_edit_date": 1477632503, "question_id": 40294929, "link": "https://stackoverflow.com/questions/40294929/read-gzip-response-with-hyper-and-flate2", "title": "Read gzip response with Hyper and Flate2", "body": "<p>Hyper has the function <code>fn read(&amp;mut self, buf: &amp;mut [u8]) -&gt; io::Result&lt;usize&gt;</code> to read the contents of an HTTP response into the provided <code>&amp;mut [u8]</code>.</p>\n\n<p>Flate2 can gunzip:</p>\n\n<pre><code>let mut d = GzDecoder::new(\"...\".as_bytes()).unwrap();\nlet mut s = String::new();\nd.read_to_string(&amp;mut s).unwrap();\nprintln!(\"{}\", s);\n</code></pre>\n\n<p>I try to put the two things together:</p>\n\n<pre><code>fn gunzip(r: &amp;Response) -&gt; String {\n    let mut zs: &amp;mut [u8] = &amp;mut[];\n    r.read(zs);\n    let mut d = GzDecoder::new(zs).unwrap();\n    let mut s = String::new();\n    d.read_to_string(&amp;mut s).unwrap();\n    s\n}\n</code></pre>\n\n<p>And I get the error:</p>\n\n<pre><code>error[E0277]: the trait bound `[u8]: std::io::Read` is not satisfied\n   --&gt; tests/integration.rs:232:21\n    |\n232 |         let mut d = GzDecoder::new(zs).unwrap();\n    |                     ^^^^^^^^^^^^^^ trait `[u8]: std::io::Read` not satisfied\n    |\n    = help: the following implementations were found:\n    = help:   &lt;&amp;'a [u8] as std::io::Read&gt;\n    = note: required because of the requirements on the impl of `std::io::Read` for `&amp;mut [u8]`\n    = note: required by `&lt;flate2::read::DecoderReader&lt;R&gt;&gt;::new`\n</code></pre>\n\n<p>Where am I going wrong?</p>\n\n<hr>\n\n<p>Edit: The final working solution:</p>\n\n<pre><code>fn gunzip(r: &amp;mut Response) -&gt; String {\n    let mut buffer = Vec::new();\n    let _ = r.read_to_end(&amp;mut buffer).unwrap();\n    let mut d = GzDecoder::new(buffer.as_slice()).unwrap();\n    let mut s = String::new();\n    d.read_to_string(&amp;mut s).unwrap();\n    s\n}\n</code></pre>\n"}, {"tags": ["rust", "temporary-objects"], "comments": [{"owner": {"reputation": 41983, "user_id": 866732, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/f09f0253204000d6083ed1de21afc6fd?s=128&d=identicon&r=PG", "display_name": "WiSaGaN", "link": "https://stackoverflow.com/users/866732/wisagan"}, "edited": false, "score": 0, "creation_date": 1477643540, "post_id": 40289424, "comment_id": 67859717, "body": "There is some discussion in drop order here, but they are still underspecified I believe although more consistent than before: <a href=\"https://github.com/rust-lang/rust/issues/32433\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/32433</a>"}], "answers": [{"tags": [], "owner": {"reputation": 1699, "user_id": 783825, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/cce2622c5ccd49a3cbf2007491ab1075?s=128&d=identicon&r=PG", "display_name": "Neikos", "link": "https://stackoverflow.com/users/783825/neikos"}, "is_accepted": false, "score": 5, "last_activity_date": 1477605892, "last_edit_date": 1477605892, "creation_date": 1477605546, "answer_id": 40294882, "question_id": 40289424, "link": "https://stackoverflow.com/questions/40289424/destruction-order-involving-temporaries-in-rust/40294882#40294882", "title": "Destruction order involving temporaries in Rust", "body": "<p>Raw pointers themselves do not carry any sort of lifetime so the compiler might do something like this:</p>\n\n<ol>\n<li><p>Example:</p>\n\n<ul>\n<li>B is created (so that it can hold an <code>*const A</code> in it)</li>\n<li>A is created</li>\n<li>B is not bound to a binding and thus gets dropped</li>\n<li>A is not needed and thus gets dropped </li>\n</ul></li>\n</ol>\n\n<p>Let's check out the MIR:</p>\n\n<pre><code>fn main() -&gt; () {\n    let mut _0: ();                      // return pointer\n    let mut _1: B;\n    let mut _2: *const A;\n    let mut _3: *const A;\n    let mut _4: &amp;A;\n    let mut _5: &amp;A;\n    let mut _6: A;\n    let mut _7: ();\n\n    bb0: {\n        StorageLive(_1);                 // scope 0 at &lt;anon&gt;:8:13: 8:30\n        StorageLive(_2);                 // scope 0 at &lt;anon&gt;:8:15: 8:29\n        StorageLive(_3);                 // scope 0 at &lt;anon&gt;:8:15: 8:17\n        StorageLive(_4);                 // scope 0 at &lt;anon&gt;:8:15: 8:17\n        StorageLive(_5);                 // scope 0 at &lt;anon&gt;:8:15: 8:17\n        StorageLive(_6);                 // scope 0 at &lt;anon&gt;:8:16: 8:17\n        _6 = A::A;                       // scope 0 at &lt;anon&gt;:8:16: 8:17\n        _5 = &amp;_6;                        // scope 0 at &lt;anon&gt;:8:15: 8:17\n        _4 = &amp;(*_5);                     // scope 0 at &lt;anon&gt;:8:15: 8:17\n        _3 = _4 as *const A (Misc);      // scope 0 at &lt;anon&gt;:8:15: 8:17\n        _2 = _3;                         // scope 0 at &lt;anon&gt;:8:15: 8:29\n        _1 = B::B(_2,);                  // scope 0 at &lt;anon&gt;:8:13: 8:30\n        drop(_1) -&gt; bb1;                 // scope 0 at &lt;anon&gt;:8:31: 8:31\n    }\n\n    bb1: {\n        StorageDead(_1);                 // scope 0 at &lt;anon&gt;:8:31: 8:31\n        StorageDead(_2);                 // scope 0 at &lt;anon&gt;:8:31: 8:31\n        StorageDead(_3);                 // scope 0 at &lt;anon&gt;:8:31: 8:31\n        StorageDead(_4);                 // scope 0 at &lt;anon&gt;:8:31: 8:31\n        StorageDead(_5);                 // scope 0 at &lt;anon&gt;:8:31: 8:31\n        drop(_6) -&gt; bb2;                 // scope 0 at &lt;anon&gt;:8:31: 8:31\n    }\n\n    bb2: {\n        StorageDead(_6);                 // scope 0 at &lt;anon&gt;:8:31: 8:31\n        _0 = ();                         // scope 0 at &lt;anon&gt;:7:11: 9:2\n        return;                          // scope 0 at &lt;anon&gt;:9:2: 9:2\n    }\n}\n</code></pre>\n\n<p>As we can see <code>drop(_1)</code> is indeed called before <code>drop(_6)</code> as presumed, thus you get the output above.</p>\n\n<ol start=\"2\">\n<li>Example</li>\n</ol>\n\n<p>In this example B is bound to a binding</p>\n\n<ul>\n<li>B is created (for the same reason as above)</li>\n<li>A is created</li>\n<li>A is not bound and gets dropped</li>\n<li>B goes out of scope and gets dropped</li>\n</ul>\n\n<p>The corresponding MIR:</p>\n\n<pre><code>fn main() -&gt; () {\n    let mut _0: ();                      // return pointer\n    scope 1 {\n        let _1: B;                       // \"b\" in scope 1 at &lt;anon&gt;:8:9: 8:10\n    }\n    let mut _2: *const A;\n    let mut _3: *const A;\n    let mut _4: &amp;A;\n    let mut _5: &amp;A;\n    let mut _6: A;\n    let mut _7: ();\n\n    bb0: {\n        StorageLive(_1);                 // scope 0 at &lt;anon&gt;:8:9: 8:10\n        StorageLive(_2);                 // scope 0 at &lt;anon&gt;:8:15: 8:29\n        StorageLive(_3);                 // scope 0 at &lt;anon&gt;:8:15: 8:17\n        StorageLive(_4);                 // scope 0 at &lt;anon&gt;:8:15: 8:17\n        StorageLive(_5);                 // scope 0 at &lt;anon&gt;:8:15: 8:17\n        StorageLive(_6);                 // scope 0 at &lt;anon&gt;:8:16: 8:17\n        _6 = A::A;                       // scope 0 at &lt;anon&gt;:8:16: 8:17\n        _5 = &amp;_6;                        // scope 0 at &lt;anon&gt;:8:15: 8:17\n        _4 = &amp;(*_5);                     // scope 0 at &lt;anon&gt;:8:15: 8:17\n        _3 = _4 as *const A (Misc);      // scope 0 at &lt;anon&gt;:8:15: 8:17\n        _2 = _3;                         // scope 0 at &lt;anon&gt;:8:15: 8:29\n        _1 = B::B(_2,);                  // scope 0 at &lt;anon&gt;:8:13: 8:30\n        StorageDead(_2);                 // scope 0 at &lt;anon&gt;:8:31: 8:31\n        StorageDead(_3);                 // scope 0 at &lt;anon&gt;:8:31: 8:31\n        StorageDead(_4);                 // scope 0 at &lt;anon&gt;:8:31: 8:31\n        StorageDead(_5);                 // scope 0 at &lt;anon&gt;:8:31: 8:31\n        drop(_6) -&gt; [return: bb3, unwind: bb2]; // scope 0 at &lt;anon&gt;:8:31: 8:31\n    }\n\n    bb1: {\n        resume;                          // scope 0 at &lt;anon&gt;:7:1: 9:2\n    }\n\n    bb2: {\n        drop(_1) -&gt; bb1;                 // scope 0 at &lt;anon&gt;:9:2: 9:2\n    }\n\n    bb3: {\n        StorageDead(_6);                 // scope 0 at &lt;anon&gt;:8:31: 8:31\n        _0 = ();                         // scope 1 at &lt;anon&gt;:7:11: 9:2\n        drop(_1) -&gt; bb4;                 // scope 0 at &lt;anon&gt;:9:2: 9:2\n    }\n\n    bb4: {\n        StorageDead(_1);                 // scope 0 at &lt;anon&gt;:9:2: 9:2\n        return;                          // scope 0 at &lt;anon&gt;:9:2: 9:2\n    }\n}\n</code></pre>\n\n<p>As we can see <code>drop(_6)</code> does get called before <code>drop(_1)</code> so we get the behavior you have seen.</p>\n"}, {"comments": [{"owner": {"reputation": 1699, "user_id": 783825, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/cce2622c5ccd49a3cbf2007491ab1075?s=128&d=identicon&r=PG", "display_name": "Neikos", "link": "https://stackoverflow.com/users/783825/neikos"}, "edited": false, "score": 0, "creation_date": 1477654338, "post_id": 40297762, "comment_id": 67865322, "body": "You could maybe also mention <a href=\"https://github.com/rust-lang/rfcs/pull/769\" rel=\"nofollow noreferrer\">github.com/rust-lang/rfcs/pull/769</a> as this is what introduced the &#39;strictly bigger lifetimes&#39; for drop types."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 6, "last_activity_date": 1477690291, "last_edit_date": 1477690291, "creation_date": 1477626601, "answer_id": 40297762, "question_id": 40289424, "link": "https://stackoverflow.com/questions/40289424/destruction-order-involving-temporaries-in-rust/40297762#40297762", "title": "Destruction order involving temporaries in Rust", "body": "<p>Temporaries are dropped at the end of the statement, just like in C++. However, IIRC, the order of destruction in Rust is unspecified (we'll see the consequences of this below), though the current implementation seems to simply drop values in reverse order of construction.</p>\n\n<p>There's a big difference between <code>let _ = x;</code> and <code>let _b = x;</code>. <code>_</code> isn't an identifier in Rust: it's a wildcard pattern. Since this pattern doesn't find any variables, the final value is effectively dropped at the end of the statement.</p>\n\n<p>On the other hand, <code>_b</code> is an identifier, so the value is bound to a variable with that name, which extends its lifetime until the end of the function. However, the <code>A</code> instance is still a temporary, so it will be dropped at the end of the statement (and I believe C++ would do the same). Since the end of the statement comes before the end of the function, the <code>A</code> instance is dropped first, and the <code>B</code> instance is dropped second.</p>\n\n<p>To make this clearer, let's add another statement in <code>main</code>:</p>\n\n<pre><code>fn main() {\n    let _ = B(&amp;A as *const A);\n    println!(\"End of main.\");\n}\n</code></pre>\n\n<p>This produces the following output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Drop B.\nDrop A.\nEnd of main.\n</code></pre>\n\n<p>So far so good. Now let's try with <code>let _b</code>; the output is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Drop A.\nEnd of main.\nDrop B.\n</code></pre>\n\n<p>As we can see, <code>Drop B</code> is printed after <code>End of main.</code>. This demonstrates that the <code>B</code> instance is alive until the end of the function, explaining the different destruction order.</p>\n\n<hr>\n\n<p>Now, let's see what happens if we modify <code>B</code> to take a borrowed pointer with a lifetime instead of a raw pointer. Actually, let's go a step further and remove the <code>Drop</code> implementations for a moment:</p>\n\n<pre><code>struct A;\nstruct B&lt;'a&gt;(&amp;'a A);\n\nfn main() {\n    let _ = B(&amp;A);\n}\n</code></pre>\n\n<p>This compiles fine. Behind the scenes, Rust assigns the same lifetime to both the <code>A</code> instance and the <code>B</code> instance (i.e. if we took a reference to the <code>B</code> instance, its type would be <code>&amp;'a B&lt;'a&gt;</code> where both <code>'a</code> are the exact same lifetime). When two values have the same lifetime, then necessarily we need to drop one of them before the other, and as mentioned above, the order is unspecified. What happens if we add back the <code>Drop</code> implementations?</p>\n\n<pre><code>struct A;\nimpl Drop for A { fn drop(&amp;mut self) { println!(\"Drop A.\") } }\n\nstruct B&lt;'a&gt;(&amp;'a A);\nimpl&lt;'a&gt; Drop for B&lt;'a&gt; { fn drop(&amp;mut self) { println!(\"Drop B.\") } }\n\nfn main() {\n    let _ = B(&amp;A);\n}\n</code></pre>\n\n<p>Now we're getting a compiler error:</p>\n\n<pre><code>error: borrowed value does not live long enough\n --&gt; &lt;anon&gt;:8:16\n  |\n8 |     let _ = B(&amp;A);\n  |                ^ does not live long enough\n  |\nnote: reference must be valid for the destruction scope surrounding statement at 8:4...\n --&gt; &lt;anon&gt;:8:5\n  |\n8 |     let _ = B(&amp;A);\n  |     ^^^^^^^^^^^^^^\nnote: ...but borrowed value is only valid for the statement at 8:4\n --&gt; &lt;anon&gt;:8:5\n  |\n8 |     let _ = B(&amp;A);\n  |     ^^^^^^^^^^^^^^\nhelp: consider using a `let` binding to increase its lifetime\n --&gt; &lt;anon&gt;:8:5\n  |\n8 |     let _ = B(&amp;A);\n  |     ^^^^^^^^^^^^^^\n</code></pre>\n\n<p>Since both the <code>A</code> instance and the <code>B</code> instance have been assigned the same lifetime, Rust cannot reason about the destruction order of these objects. The error comes from the fact that Rust refuses to instantiate <code>B&lt;'a&gt;</code> with the lifetime of the object itself when <code>B&lt;'a&gt;</code> implements <code>Drop</code> (this rule was added as the result of <a href=\"https://github.com/rust-lang/rfcs/pull/769\" rel=\"nofollow\">RFC 769</a> before Rust 1.0). If it was allowed, <code>drop</code> would be able to access values that have already been dropped! However, if <code>B&lt;'a&gt;</code> doesn't implement <code>Drop</code>, then it's allowed, because we know that no code will try to access <code>B</code>'s fields when the struct is dropped.</p>\n"}], "owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 390, "favorite_count": 0, "accepted_answer_id": 40297762, "answer_count": 2, "score": 11, "last_activity_date": 1477838835, "creation_date": 1477584367, "last_edit_date": 1477838835, "question_id": 40289424, "link": "https://stackoverflow.com/questions/40289424/destruction-order-involving-temporaries-in-rust", "title": "Destruction order involving temporaries in Rust", "body": "<p>In C++ (please correct me if wrong), a temporary bound via constant reference is supposed to outlive the expression it is bound to. I assumed the same was true in Rust, but I get two different behaviors in two different cases.</p>\n\n<p>Consider:</p>\n\n<pre><code>struct A;\nimpl Drop for A { fn drop(&amp;mut self) { println!(\"Drop A.\") } }\n\nstruct B(*const A);\nimpl Drop for B { fn drop(&amp;mut self) { println!(\"Drop B.\") } }\n\nfn main() {\n    let _ = B(&amp;A as *const A); // B is destroyed after this expression itself.\n}\n</code></pre>\n\n<p>The output is:</p>\n\n<pre><code>Drop B.\nDrop A.\n</code></pre>\n\n<p>This is what you would expect. But now if you do:</p>\n\n<pre><code>fn main() {\n    let _b = B(&amp;A as *const A); // _b will be dropped when scope exits main()\n}\n</code></pre>\n\n<p>The output is:</p>\n\n<pre><code>Drop A.\nDrop B.\n</code></pre>\n\n<p>This is not what I expected.</p>\n\n<p>Is this intended and if so then what is the rationale for the difference in behavior in the two cases?</p>\n\n<p>I am using Rust 1.12.1.</p>\n"}, {"tags": ["eclipse", "eclipse-plugin", "rust"], "comments": [{"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 1, "creation_date": 1477578511, "post_id": 40286933, "comment_id": 67832774, "body": "This is the output of a test executable, not the project&#39;s main binary."}, {"owner": {"reputation": 1699, "user_id": 783825, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/cce2622c5ccd49a3cbf2007491ab1075?s=128&d=identicon&r=PG", "display_name": "Neikos", "link": "https://stackoverflow.com/users/783825/neikos"}, "edited": false, "score": 0, "creation_date": 1477579136, "post_id": 40286933, "comment_id": 67833244, "body": "Could it be you are building a library rather than an executable?"}, {"owner": {"reputation": 618, "user_id": 3953199, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/609f40c9cb71f8007eeee7feb6b4850b?s=128&d=identicon&r=PG&f=1", "display_name": "KJaeg", "link": "https://stackoverflow.com/users/3953199/kjaeg"}, "edited": false, "score": 0, "creation_date": 1477580864, "post_id": 40286933, "comment_id": 67834514, "body": "But what exactly does that mean? Is the test executable overwriting my projects output or don&#39;t I get any project output at all? I tried to find a way to set my main.rs to set as the file to run (like in Java), but I didn&#39;t find anything like that."}, {"owner": {"reputation": 618, "user_id": 3953199, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/609f40c9cb71f8007eeee7feb6b4850b?s=128&d=identicon&r=PG&f=1", "display_name": "KJaeg", "link": "https://stackoverflow.com/users/3953199/kjaeg"}, "reply_to_user": {"reputation": 1699, "user_id": 783825, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/cce2622c5ccd49a3cbf2007491ab1075?s=128&d=identicon&r=PG", "display_name": "Neikos", "link": "https://stackoverflow.com/users/783825/neikos"}, "edited": false, "score": 0, "creation_date": 1477580954, "post_id": 40286933, "comment_id": 67834578, "body": "@Neikos I deleted the lib.rs, which was created automatically. In the docs I learned that you use a lib.rs if you want to create a library, otherwise a main.rs. Anything else was not changed and exactly like the values from the docs."}, {"owner": {"reputation": 1699, "user_id": 783825, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/cce2622c5ccd49a3cbf2007491ab1075?s=128&d=identicon&r=PG", "display_name": "Neikos", "link": "https://stackoverflow.com/users/783825/neikos"}, "edited": false, "score": 0, "creation_date": 1477581190, "post_id": 40286933, "comment_id": 67834733, "body": "If a lib.rs was generated then it means that it probably created a config file for a library. I have no experience with eclipse and rust, but can you try to create a new project and see if you can change that somewhere?"}, {"owner": {"reputation": 618, "user_id": 3953199, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/609f40c9cb71f8007eeee7feb6b4850b?s=128&d=identicon&r=PG&f=1", "display_name": "KJaeg", "link": "https://stackoverflow.com/users/3953199/kjaeg"}, "edited": false, "score": 0, "creation_date": 1477582050, "post_id": 40286933, "comment_id": 67835316, "body": "The only changeable setting was a checkbox <code>Use &#39;cargo init&#39; to create project</code>. Unselecting it did not create the lib.rs, but it automatically created a main.rs. But I still get the message from above. I executed the .exe, which was created during the build, with the Windows command prompt, in the hope to see the &quot;hello world&quot; there. Even there I got that message from above."}, {"owner": {"reputation": 618, "user_id": 3953199, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/609f40c9cb71f8007eeee7feb6b4850b?s=128&d=identicon&r=PG&f=1", "display_name": "KJaeg", "link": "https://stackoverflow.com/users/3953199/kjaeg"}, "edited": false, "score": 0, "creation_date": 1477582149, "post_id": 40286933, "comment_id": 67835387, "body": "I played arount with the build command, changing it from <code>${CARGO_TOOL_PATH} test --no-run</code> to <code>cargo build</code> or <code>cargo run</code>, but without any difference. But each new build creates a new run configuration with <code>${CARGO_TOOL_PATH} test --no-run</code> if there is none."}], "answers": [{"tags": [], "owner": {"reputation": 618, "user_id": 3953199, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/609f40c9cb71f8007eeee7feb6b4850b?s=128&d=identicon&r=PG&f=1", "display_name": "KJaeg", "link": "https://stackoverflow.com/users/3953199/kjaeg"}, "is_accepted": true, "score": 1, "last_activity_date": 1477583080, "creation_date": 1477583080, "answer_id": 40288950, "question_id": 40286933, "link": "https://stackoverflow.com/questions/40286933/unable-to-configure-rustdt-correctly-windows/40288950#40288950", "title": "Unable to configure RustDT correctly, Windows", "body": "<p>I think I solved it somehow, even if I don't exactly know how (and why) it got solved.</p>\n\n<p>Under build targets in the project explorer I configured my build target <code>build</code> (right-click on <code>build</code> -> <code>Configure target...</code>).</p>\n\n<p>There I disabled the option <code>Enable for workspace build</code>, unchecked <code>Use default value</code> in the section <code>Build Command</code>, and changed the value in the text area to <code>cargo build</code>.</p>\n\n<p>I executed the main-method by right-clicking on my build target <code>build</code>, then <code>Run</code> and finally choosing the exe (suddenly without the suffix) that should be run.</p>\n\n<p>I got that idea by reading in the <a href=\"https://github.com/RustDT/RustDT/issues/67\" rel=\"nofollow\">github-forum of RustDT</a>. So I tried it so see what happens.</p>\n"}, {"tags": [], "owner": {"reputation": 51, "user_id": 7396932, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/s6uQd.jpg?s=128&g=1", "display_name": "Tam HANNA", "link": "https://stackoverflow.com/users/7396932/tam-hanna"}, "is_accepted": false, "score": 1, "last_activity_date": 1487947382, "creation_date": 1487947382, "answer_id": 42441437, "question_id": 40286933, "link": "https://stackoverflow.com/questions/40286933/unable-to-configure-rustdt-correctly-windows/42441437#42441437", "title": "Unable to configure RustDT correctly, Windows", "body": "<p>Solution is simple. Rust Eclipse Tool, by default, wants to build a library which is \"run\" by its unit tests. Fix is</p>\n\n<ol>\n<li>Go to run configurations. </li>\n<li>Disable Checkbox Use Build Target settings. </li>\n<li>Enter String \u201c${CARGO_TOOL_PATH} build\u201d in Text box below.</li>\n</ol>\n"}, {"tags": [], "owner": {"reputation": 1241, "user_id": 224222, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/684ef24b8932fdc0b99c81b0eead48bb?s=128&d=identicon&r=PG", "display_name": "leonidv", "link": "https://stackoverflow.com/users/224222/leonidv"}, "is_accepted": false, "score": 0, "last_activity_date": 1501625582, "creation_date": 1501625582, "answer_id": 45448482, "question_id": 40286933, "link": "https://stackoverflow.com/questions/40286933/unable-to-configure-rustdt-correctly-windows/45448482#45448482", "title": "Unable to configure RustDT correctly, Windows", "body": "<p>It's better to create a new external configuration to execute\n<code>cargo run</code> in project location. Also is important to uncheck \"build before run\" in External tool config. </p>\n\n<p>I have wrote details tutorial here: <a href=\"https://medium.com/@leonid.vygovsky/configure-rustdt-for-rust-learners\" rel=\"nofollow noreferrer\">https://medium.com/@leonid.vygovsky/configure-rustdt-for-rust-learners</a></p>\n"}], "owner": {"reputation": 618, "user_id": 3953199, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/609f40c9cb71f8007eeee7feb6b4850b?s=128&d=identicon&r=PG&f=1", "display_name": "KJaeg", "link": "https://stackoverflow.com/users/3953199/kjaeg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 362, "favorite_count": 0, "accepted_answer_id": 40288950, "answer_count": 3, "score": 1, "last_activity_date": 1501625582, "creation_date": 1477577611, "last_edit_date": 1477581079, "question_id": 40286933, "link": "https://stackoverflow.com/questions/40286933/unable-to-configure-rustdt-correctly-windows", "title": "Unable to configure RustDT correctly, Windows", "body": "<p>I am currently trying to gett the RustDT-plugin to run correctly in Eclipse for Windows. After working through the guides and tutorials for 2 hours I am still not able to set it up correctly.</p>\n\n<p>I think that every required component (like Racer) is installed correctly, because I am able to create a project without any problems.</p>\n\n<p>I wrote a \"hello world\", but it is either throwing errors or running through without errors, but not showing the string on the console.</p>\n\n<p>I created a project called \"my_project\".\nThe first thing I notice is, that the building creates an .exe with a suffix that looks like a hashed value. While the guides and the standard configuration showed that there should be a \"my_project.exe\", I get a \"my_project-e8a2b45078d7e959.exe\".</p>\n\n<p>This is where I first got an error message stating that the \"my_project.exe\" is not existing. No problem. Setting that name in the run configurations solves it. But now I get following message:</p>\n\n<pre><code>running 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured\n</code></pre>\n\n<p>Here it looks to me that it is still not working properly, because I don't get the \"Hello, world\"-message. I totally don't know what I'm doing wrong. I hope one of you guys can point out my mistake.</p>\n\n<p>I would also appreciate if someone describes what he/she did regarding run/build configurations for the first project.</p>\n"}, {"tags": ["operating-system", "rust", "dependency-management", "rust-cargo", "rust-crates"], "comments": [{"owner": {"reputation": 10707, "user_id": 6650102, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/boCIP.jpg?s=128&g=1", "display_name": "Aurora0001", "link": "https://stackoverflow.com/users/6650102/aurora0001"}, "edited": false, "score": 0, "creation_date": 1477559423, "post_id": 40280507, "comment_id": 67819704, "body": "I would look into <a href=\"http://rustbyexample.com/attribute/cfg.html\" rel=\"nofollow noreferrer\">conditional compilation</a>; you&#39;ll probably need two versions of each function/module that is platform-dependent. Although it&#39;s hard to say which method would be best for you, since you haven&#39;t provided code, I would probably suggest using that attribute in a function and adding your <code>use</code> declarations <i>inside the function</i>."}, {"owner": {"reputation": 481, "user_id": 1587449, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e85cac5fa6729637c6aa44e5ec2fd0d0?s=128&d=identicon&r=PG", "display_name": "Da Maex", "link": "https://stackoverflow.com/users/1587449/da-maex"}, "reply_to_user": {"reputation": 10707, "user_id": 6650102, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/boCIP.jpg?s=128&g=1", "display_name": "Aurora0001", "link": "https://stackoverflow.com/users/6650102/aurora0001"}, "edited": false, "score": 0, "creation_date": 1477559518, "post_id": 40280507, "comment_id": 67819764, "body": "@Aurora0001 I&#39;m not using the os dependency in my own code, the crate mysql depends on it."}, {"owner": {"reputation": 10707, "user_id": 6650102, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/boCIP.jpg?s=128&g=1", "display_name": "Aurora0001", "link": "https://stackoverflow.com/users/6650102/aurora0001"}, "edited": false, "score": 0, "creation_date": 1477560155, "post_id": 40280507, "comment_id": 67820200, "body": "Oh, I see what you mean. I had a look at the other crates that use <code>mysql</code> to see if they handle it like you, and it seems that none of them use conditions in their <code>Cargo.toml</code>, so I don&#39;t know what would cause this. Perhaps it&#39;d be worth asking on GitHub if you get no response here?"}, {"owner": {"reputation": 41983, "user_id": 866732, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/f09f0253204000d6083ed1de21afc6fd?s=128&d=identicon&r=PG", "display_name": "WiSaGaN", "link": "https://stackoverflow.com/users/866732/wisagan"}, "edited": false, "score": 2, "creation_date": 1477561764, "post_id": 40280507, "comment_id": 67821220, "body": "This looks like a <code>cargo</code> bug to me."}], "answers": [{"tags": [], "owner": {"reputation": 41983, "user_id": 866732, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/f09f0253204000d6083ed1de21afc6fd?s=128&d=identicon&r=PG", "display_name": "WiSaGaN", "link": "https://stackoverflow.com/users/866732/wisagan"}, "is_accepted": true, "score": 2, "last_activity_date": 1477582036, "last_edit_date": 1477582036, "creation_date": 1477568275, "answer_id": 40283672, "question_id": 40280507, "link": "https://stackoverflow.com/questions/40280507/cargo-toml-os-dependency-for-crate/40283672#40283672", "title": "Cargo.toml OS Dependency for Crate", "body": "<p>This looks like a <code>cargo</code> bug to me.\nOne related issue is <a href=\"https://github.com/rust-lang/cargo/issues/3195\" rel=\"nofollow\">Cannot declare different version of dependencies in mutually exclusive targets #3195</a></p>\n\n<p>Edit: It is more of an unsupported feature than a bug according to the <a href=\"https://github.com/rust-lang/cargo/blob/0.13.0/src/cargo/core/dependency.rs#L34\" rel=\"nofollow\">code</a>.</p>\n"}], "owner": {"reputation": 481, "user_id": 1587449, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e85cac5fa6729637c6aa44e5ec2fd0d0?s=128&d=identicon&r=PG", "display_name": "Da Maex", "link": "https://stackoverflow.com/users/1587449/da-maex"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 977, "favorite_count": 1, "accepted_answer_id": 40283672, "answer_count": 1, "score": 7, "last_activity_date": 1477582036, "creation_date": 1477559114, "last_edit_date": 1477559807, "question_id": 40280507, "link": "https://stackoverflow.com/questions/40280507/cargo-toml-os-dependency-for-crate", "title": "Cargo.toml OS Dependency for Crate", "body": "<p>I have a rust project where i include the <a href=\"https://github.com/blackbeam/rust-mysql-simple\" rel=\"noreferrer\">mysql</a>-crate dependency and i want to have it os independent.</p>\n\n<p>So i tried: <em>Cargo.toml</em></p>\n\n<pre><code>[package]\nname = \"test\"\nversion = \"0.1.0\"\nauthors = [\"daMaex\"]\n\n[dependencies]\nws = \"*\"\nclap = \"*\"\nenv_logger = \"*\"\n\n[target.'cfg(any(unix, macos))'.dependencies.mysql]\nversion = \"*\"\ndefault-features = false\nfeatures = [\"socket\"]\n\n[target.'cfg(windows)'.dependencies.mysql]\nversion = \"*\"\ndefault-features = false\nfeatures = [\"pipe\"]\n\n[features]\ndefault = []\nssl = []\n</code></pre>\n\n<p>The error already happens with a minimal main: <em>src/main.rs</em></p>\n\n<pre><code>fn main () {\n}\n</code></pre>\n\n<p>But the build fails. On macos/unix it always wants to compile the pipe and get's an unresolved import:</p>\n\n<pre><code>error[E0432]: unresolved import `std::os::windows::io::RawHandle`\n  --&gt; /home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/named_pipe-0.2.2/src/lib.rs:38:5\n   |\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Could not find `windows` in `std::os`\n</code></pre>\n\n<p>and the same happens on Windows for the mysql crate itself:</p>\n\n<pre><code>error[E0432]: unresolved import `std::os::unix`\n  --&gt; C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\mysql-7.1.2\\src\\io.rs:24:5\n   |\n24 | use std::os::unix as unix;\n   |     ^^^^^^^^^^^^^^^^^^^^^ no `unix` in `std::os`\n</code></pre>\n\n<p>So my question is, how do i handle the OS-Dependency in this case?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 33796, "user_id": 45525, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/TKzgD.png?s=128&g=1", "display_name": "Synesso", "link": "https://stackoverflow.com/users/45525/synesso"}, "edited": false, "score": 0, "creation_date": 1477551984, "post_id": 40277951, "comment_id": 67815184, "body": "Cue the facepalm in 3 ... 2 ... 1 ...  :facepalm:  Thank you"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 10, "last_activity_date": 1514741125, "last_edit_date": 1514741125, "creation_date": 1477550845, "answer_id": 40277951, "question_id": 40277917, "link": "https://stackoverflow.com/questions/40277917/match-tuple-as-input-to-map/40277951#40277951", "title": "Match tuple as input to map", "body": "<p>The key is in the error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>  |\n3 |     let sums = z.iter().map(|(a, b)| a + b);\n  |                              ^^^^^^ expected reference, found tuple\n  |\n</code></pre>\n\n<p>It is telling you that <code>map</code> accepts its argument by reference, thus you need a reference in the pattern:</p>\n\n<pre><code>fn main() {\n    let z = vec![(1, 2), (3, 4)];\n    let sums = z.iter().map(|&amp;(a, b)| a + b);\n    //                       ^\n    println!(\"{:?}\", sums);\n}\n</code></pre>\n\n<p>And that's it.</p>\n"}], "owner": {"reputation": 33796, "user_id": 45525, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/TKzgD.png?s=128&g=1", "display_name": "Synesso", "link": "https://stackoverflow.com/users/45525/synesso"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 856, "favorite_count": 0, "accepted_answer_id": 40277951, "answer_count": 1, "score": 5, "last_activity_date": 1514741125, "creation_date": 1477550748, "last_edit_date": 1514741104, "question_id": 40277917, "link": "https://stackoverflow.com/questions/40277917/match-tuple-as-input-to-map", "title": "Match tuple as input to map", "body": "<p>An attempt to pattern match a tuple within a map:</p>\n\n<pre><code>fn main() {\n    let z = vec![(1, 2), (3, 4)];\n    let sums = z.iter().map(|(a, b)| a + b);\n    println!(\"{:?}\", sums);\n}\n</code></pre>\n\n<p>produces the error</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n --&gt; src/main.rs:3:30\n  |\n3 |     let sums = z.iter().map(|(a, b)| a + b);\n  |                              ^^^^^^ expected reference, found tuple\n  |\n  = note: expected type `&amp;({integer}, {integer})`\n             found type `(_, _)`\n</code></pre>\n\n<p>It is possible to use this syntax in some varied form, or must I write:</p>\n\n<pre><code>fn main() {\n    let z = vec![(1, 2), (3, 4)];\n    let sums = z.iter()\n        .map(|pair| {\n            let (a, b) = *pair;\n            a + b\n        })\n        .collect::&lt;Vec&lt;_&gt;&gt;();\n    println!(\"{:?}\", sums);\n}\n</code></pre>\n"}, {"tags": ["rust", "rust-cargo", "rust-crates"], "comments": [{"owner": {"reputation": 41983, "user_id": 866732, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/f09f0253204000d6083ed1de21afc6fd?s=128&d=identicon&r=PG", "display_name": "WiSaGaN", "link": "https://stackoverflow.com/users/866732/wisagan"}, "edited": false, "score": 0, "creation_date": 1477548106, "post_id": 40276715, "comment_id": 67813143, "body": "I think it&#39;s more about whether the utilities/applications will be useful to users beside yourself rather than crate type, e.g. application or libraries. A good rule of thumb is whether it&#39;s worth to put the source on GitHub."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 41983, "user_id": 866732, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/f09f0253204000d6083ed1de21afc6fd?s=128&d=identicon&r=PG", "display_name": "WiSaGaN", "link": "https://stackoverflow.com/users/866732/wisagan"}, "edited": false, "score": 2, "creation_date": 1477549651, "post_id": 40276715, "comment_id": 67813864, "body": "@WiSaGaN: I put all my projects, even unfinished pet projects, on github, simply because it makes for an easy back-up :/"}, {"owner": {"reputation": 41983, "user_id": 866732, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/f09f0253204000d6083ed1de21afc6fd?s=128&d=identicon&r=PG", "display_name": "WiSaGaN", "link": "https://stackoverflow.com/users/866732/wisagan"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1477550979, "post_id": 40276715, "comment_id": 67814590, "body": "@MatthieuM. oops, seems not a good indicator then."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 41983, "user_id": 866732, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/f09f0253204000d6083ed1de21afc6fd?s=128&d=identicon&r=PG", "display_name": "WiSaGaN", "link": "https://stackoverflow.com/users/866732/wisagan"}, "edited": false, "score": 0, "creation_date": 1477552645, "post_id": 40276715, "comment_id": 67815594, "body": "@WiSaGaN, yes, they are generally useful utilities - updated question."}], "answers": [{"tags": [], "owner": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "is_accepted": true, "score": 6, "last_activity_date": 1477565317, "creation_date": 1477565317, "answer_id": 40282680, "question_id": 40276715, "link": "https://stackoverflow.com/questions/40276715/should-end-user-utilities-applications-be-registered-on-crates-io/40282680#40282680", "title": "Should end user utilities/applications be registered on crates.io?", "body": "<p>Yes, because you can use <code>cargo install</code> to install and manage those applications system-wide. If this use were discouraged, I would suspect that command to not exist at all, or at least have a very limited applicability.</p>\n\n<p>Snippet from <code>cargo install --help</code>:</p>\n\n<blockquote>\n  <p>Usage:</p>\n\n<pre><code> cargo install [options] [&lt;crate&gt;]\n cargo install [options] --list\n</code></pre>\n  \n  <p>[...]</p>\n  \n  <p>This command manages Cargo's local set of installed binary crates.\n  Only packages which have <code>[[bin]]</code> targets can be installed, and all\n  binaries are installed into the installation root's <code>bin</code> folder. The\n  installation root is determined, in order of precedence, by <code>--root</code>,\n  <code>$CARGO_INSTALL_ROOT</code>, the <code>install.root</code> configuration key, and\n  finally the home directory (which is either <code>$CARGO_HOME</code> if set or\n  <code>$HOME/.cargo</code> by default).</p>\n  \n  <p>There are multiple sources from which a crate can be installed. The\n  default location is crates.io but the <code>--git</code> and <code>--path</code> flags can\n  change this source. If the source contains more than one package (such\n  as crates.io or a git repository with multiple crates) the <code>&lt;crate&gt;</code>\n  argument is required to indicate which crate should be installed.</p>\n</blockquote>\n"}, {"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 1, "last_activity_date": 1477623455, "creation_date": 1477623455, "answer_id": 40297363, "question_id": 40276715, "link": "https://stackoverflow.com/questions/40276715/should-end-user-utilities-applications-be-registered-on-crates-io/40297363#40297363", "title": "Should end user utilities/applications be registered on crates.io?", "body": "<p><em>This should not be the primary reason to publish an application to crates.io, but I'm listing it here because it's still a good reason. :)</em></p>\n\n<p>The Rust team will occasionally use a tool called <a href=\"https://github.com/brson/taskcluster-crater\" rel=\"nofollow\">crater</a> to check for regressions on all crates published on crates.io, usually before merging a pull request that has uncertain consequences. If you wrote some code that happens to compile today but would stop compiling<sup>1</sup> due to a bug fix in the compiler, then they may even submit a pull request to your project that fixes your code!</p>\n\n<hr>\n\n<p><sup>1</sup> Usually, when such breaking changes occur, there's at least one prior release in which a warning will be reported before the warning is turned into an error.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 140, "favorite_count": 2, "accepted_answer_id": 40282680, "answer_count": 2, "score": 6, "last_activity_date": 1477630939, "creation_date": 1477545840, "last_edit_date": 1477630939, "question_id": 40276715, "link": "https://stackoverflow.com/questions/40276715/should-end-user-utilities-applications-be-registered-on-crates-io", "title": "Should end user utilities/applications be registered on crates.io?", "body": "<p>Is it acceptable to register generally useful (utilities / applications) on <a href=\"http://crates.io\" rel=\"nofollow\">crates.io</a>?</p>\n\n<p>The <a href=\"http://doc.crates.io/faq.html\" rel=\"nofollow\">FAQ</a> doesn't address this and from browsing, there are examples of end-user applications (mostly command line tools).</p>\n\n<p>Or is crates.io? meant only for libraries?</p>\n\n<hr>\n\n<p>I'm asking this because the documentation hints at library use, semantic versioning for API's etc. but doesn't reference the case for packaging applications explicitly.</p>\n"}, {"tags": ["gtk", "rust"], "answers": [{"tags": [], "owner": {"reputation": 13, "user_id": 4181446, "user_type": "registered", "profile_image": "https://graph.facebook.com/1796280672/picture?type=large", "display_name": "Chaz Bassett", "link": "https://stackoverflow.com/users/4181446/chaz-bassett"}, "is_accepted": false, "score": 0, "last_activity_date": 1477592744, "creation_date": 1477592744, "answer_id": 40291713, "question_id": 40276675, "link": "https://stackoverflow.com/questions/40276675/prevent-gtk-elements-from-resizing-parents/40291713#40291713", "title": "Prevent GTK elements from resizing parents?", "body": "<p>I didn't find a way to tell the parent element not to resize, but I did manage to find a way to prevent it from resizing.</p>\n\n<p>The key was to call</p>\n\n<pre><code>widget.show_all();\n</code></pre>\n\n<p>Before adding widgets to it. Then after showing the window, in the function body call</p>\n\n<pre><code>container.show_all();\n</code></pre>\n\n<p>At the end of the function.</p>\n\n<p>It may not be the 'correct' solution, but it worked for me for the time being.</p>\n"}], "owner": {"reputation": 13, "user_id": 4181446, "user_type": "registered", "profile_image": "https://graph.facebook.com/1796280672/picture?type=large", "display_name": "Chaz Bassett", "link": "https://stackoverflow.com/users/4181446/chaz-bassett"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 266, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1477592744, "creation_date": 1477545629, "question_id": 40276675, "link": "https://stackoverflow.com/questions/40276675/prevent-gtk-elements-from-resizing-parents", "title": "Prevent GTK elements from resizing parents?", "body": "<p>I have been struggling with an issue with Gtk for numerous hours now.\nI have a ListBox element with ListBoxRows, with ListBoxLabels inside. </p>\n\n<pre><code>let list_item = gtk::ListBoxRow::new();\nlist_item.set_size_request(600, 200);\nlist_item.set_resize_mode(gtk::ResizeMode::Parent);\n\nlet content_label = gtk::Label::new_with_mnemonic(rant[\"text\"].as_string());\n// content_label.set_halign(gtk::Align::Start);\n// content_label.set_valign(gtk::Align::Start);\ncontent_label.set_justify(gtk::Justification::Left);\ncontent_label.set_line_wrap(true);\ncontent_label.set_size_request(200, 200);\n\nlist_item.add(&amp;content_label);\n\ncontainer.insert(&amp;list_item, -1);\n</code></pre>\n\n<p>However, when the app runs, the Labels are resizing all of it's parent elements. It ignores any size_request, line_wrap, Justification. Nothing I throw at it will prevent it from resizing it's parent element.</p>\n\n<p>How can I prevent the parent/window from resizing and force those elements to be of a specific width?</p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1477544471, "post_id": 40276179, "comment_id": 67811799, "body": "If I, for example, were to come across your crate on <code>crates.io</code> and decided to use it in my project.. what do you expect to happen when I try to build my project? If the answer is: &quot;it should fail&quot; - why are you putting your crate on <code>crates.io</code> in the first place? (genuinely curious.. I don&#39;t quite understand)"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1477545599, "post_id": 40276179, "comment_id": 67812139, "body": "Good point, since this is more a utility/application - I wanted to put it on <code>crates.io</code> as a way for others to be able to install it. Possibly this is a misuse of <code>crates.io</code>, the FAQ doesn&#39;t mention this, and there are examples of end-users tools already. Will edit the question."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1477546018, "post_id": 40276179, "comment_id": 67812289, "body": "@Simon Whitehead, even discounting the case of applications, its possible a high-level library might include low-level crates which aren&#39;t so useful to expose on their own."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 1, "creation_date": 1477551547, "post_id": 40276179, "comment_id": 67814925, "body": "I personally think that as long as the description is clear (and you could call it myapp-mylib) there&#39;s no problem. But I&#39;ll be watching as I&#39;m going to be in a similar position at some point!"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1477578414, "post_id": 40276179, "comment_id": 67832714, "body": "@Chris Emerson, even in this case... I don&#39;t want anyone else to use it for practical reasons (it&#39;s open source so of course they can use if they really want), I just want to isolate code within an application and not have to consider API compatibility, updating every crate for a release of the application... and figure out what happens if the application no longer needs it. While <code>myapp-mylib</code> can work, it feels like a misuse of crates.io."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 1, "creation_date": 1477629836, "post_id": 40276179, "comment_id": 67854193, "body": "I think you should ask this on <a href=\"https://users.rust-lang.org/\" rel=\"nofollow noreferrer\">users.rust-lang.org</a>."}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 211, "favorite_count": 2, "answer_count": 0, "score": 3, "last_activity_date": 1477630824, "creation_date": 1477542749, "last_edit_date": 1495540030, "question_id": 40276179, "link": "https://stackoverflow.com/questions/40276179/how-to-bundle-nest-crates-when-publishing", "title": "How to bundle/nest crates when publishing?", "body": "<p>I have a project in which I split into multiple crates for better organization, modules are used too however some parts of the project while logically stand-alone, are only useful in the context of my project and aren't intended to be feature-complete, general purpose libraries.</p>\n\n<p>For example, I have a crate that writes a file-format, but only supports a limited feature set needed for the application.</p>\n\n<p>When I tried to publish this on <a href=\"https://crates.io/\" rel=\"nofollow noreferrer\">crates.io</a>, It seems necessary to publish all nested crates as well <em>(apologies for not having the exact error, but I rather not accidentally publish a crate just to test this again)</em>.</p>\n\n<p>Since it doesn't make much sense to use outside this project and definitely don't make sense to be listed in the root name-space on <code>crates.io</code>.</p>\n\n<p>Is it possible to publish a project on <code>crates.io</code> that includes nested creates that aren't themselves published on <code>crates.io</code>?</p>\n\n<hr>\n\n<p>Added note, since crates may be end-user applications, see: <em><a href=\"https://stackoverflow.com/questions/40276715\">\"Should end users utilities/applications be uploaded to crates.io?\"</a></em><br>\nThere are cases when crates may be a component of the application, where there isn't any intention of writing a library for others to build into their projects.</p>\n"}, {"tags": ["sorting", "rust"], "answers": [{"comments": [{"owner": {"reputation": 14748, "user_id": 132728, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/3e932264fb24dfdfd63dc467bfb1e957?s=128&d=identicon&r=PG", "display_name": "Max", "link": "https://stackoverflow.com/users/132728/max"}, "edited": false, "score": 0, "creation_date": 1477536831, "post_id": 40275230, "comment_id": 67809932, "body": "Thank you, I must have overlooked <code>sort_by_key</code>."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 2, "creation_date": 1477540025, "post_id": 40275230, "comment_id": 67810637, "body": "I think <code>!y</code> would be a better choice than <code>-y</code> (which is basically equivalent to <code>!y + 1</code>). For signed integers, <code>-y</code> would sort <code>iN::MIN</code> incorrectly. For unsigned integers, <code>-y</code> is a compile time error (if it weren&#39;t, then 0 would be sorted incorrectly)."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1560000385, "last_edit_date": 1560000385, "creation_date": 1477536011, "answer_id": 40275230, "question_id": 40274792, "link": "https://stackoverflow.com/questions/40274792/sorting-vector-of-x-y-coordinates/40275230#40275230", "title": "Sorting vector of x/y coordinates", "body": "<p>You didn't show how you are populating or printing your tuples, so this is a guess. Flip around and/or negate parts of your coordinates. I'd also recommend using <code>sort_by_key</code> as it's easier, as well as just reusing the existing comparison of tuples:</p>\n\n<pre><code>fn main() {\n    let mut points = [(0, 0), (1, 1), (1, 0), (0, 1)];\n    points.sort_by_key(|&amp;(x, y)| (!y, x));\n    println!(\"{:?}\", points);\n}\n</code></pre>\n\n<p>Adding an extra newline in the output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[(0, 1), (1, 1),\n (0, 0), (1, 0)]\n</code></pre>\n\n<p>Originally, this answer suggested negating the value (<code>(-y, x)</code>). However, as <a href=\"https://stackoverflow.com/questions/40274792/sorting-vector-of-x-y-coordinates#comment67810637_40275230\">pointed out by Francis Gagn\u00e9</a>, this fails for unsigned integers or signed integers when the value is the minimum value. Negating the bits happens to work fine, but is a bit too \"clever\".</p>\n\n<p>Nowadays, I would use <a href=\"https://doc.rust-lang.org/std/cmp/enum.Ordering.html#method.reverse\" rel=\"nofollow noreferrer\"><code>Ordering::reverse</code></a> and <a href=\"https://doc.rust-lang.org/std/cmp/enum.Ordering.html#method.then\" rel=\"nofollow noreferrer\"><code>Ordering::then</code></a> for the clarity:</p>\n\n<pre><code>fn main() {\n    let mut points = [(0u8, 0u8), (1, 1), (1, 0), (0, 1)];\n    points.sort_by(|&amp;(x0, y0), &amp;(x1, y1)| y0.cmp(&amp;y1).reverse().then(x0.cmp(&amp;x1)));\n    println!(\"{:?}\", points);\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>[(0, 1), (1, 1),\n (0, 0), (1, 0)]\n</code></pre>\n"}], "owner": {"reputation": 14748, "user_id": 132728, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/3e932264fb24dfdfd63dc467bfb1e957?s=128&d=identicon&r=PG", "display_name": "Max", "link": "https://stackoverflow.com/users/132728/max"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 676, "favorite_count": 1, "accepted_answer_id": 40275230, "answer_count": 1, "score": 1, "last_activity_date": 1560000385, "creation_date": 1477532518, "last_edit_date": 1559999925, "question_id": 40274792, "link": "https://stackoverflow.com/questions/40274792/sorting-vector-of-x-y-coordinates", "title": "Sorting vector of x/y coordinates", "body": "<p>I have a vector of <code>(u32, u32)</code> tuples which represent coordinates on a 10 x 10 grid. The coordinates are unsorted. Because the standard <code>sort</code> function also didn't yield the result I wanted, I wrote a sort function like this for them:</p>\n\n<pre><code>vec.sort_by(|a, b| {\n    if a.0 &gt; b.0 { return Ordering::Greater; }\n    if a.0 &lt; b.0 { return Ordering::Less; }\n\n    if a.1 &gt; b.1 { return Ordering::Greater; }\n    if a.1 &lt; b.1 { return Ordering::Less; }\n\n    return Ordering::Equal;\n});\n</code></pre>\n\n<p>The resulting grid for my custom function looks like this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>(0/0)   (0/1)   (0/2)   (0/3)   (0/4)   (0/5)   (0/6)   (0/7)   (0/8)   (0/9)\n(1/0)   (1/1)   (1/2)   (1/3)   (1/4)   (1/5)   (1/6)   (1/7)   (1/8)   (1/9)\n(2/0)   (2/1)   (2/2)   (2/3)   (2/4)   (2/5)   (2/6)   (2/7)   (2/8)   (2/9)\n...\n(9/0)   (9/1)   (9/2)   (9/3)   (9/4)   (9/5)   (9/6)   (9/7)   (9/8)   (9/9)\n</code></pre>\n\n<p>This is not what I want, because the lower left should start with <code>(0/0)</code> as I would expect on a mathematical coordinates grid. </p>\n\n<p>I probably can manage to add more cases to the sort algorithm, but is there an easier way to do what I want besides writing a big <code>if .. return Ordering ...;</code> block?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 1, "creation_date": 1477527623, "post_id": 40274124, "comment_id": 67807856, "body": "I know you have already accepted this - but I updated the Playground example to split each borrow out. Hopefully that helps a bit more."}, {"owner": {"reputation": 5824, "user_id": 29502, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/1418ba3d9ca124ff55e11f8050682aa6?s=128&d=identicon&r=PG", "display_name": "Newtang", "link": "https://stackoverflow.com/users/29502/newtang"}, "edited": false, "score": 0, "creation_date": 1477527645, "post_id": 40274124, "comment_id": 67807864, "body": "Ha, that was much simpler than I was expecting. Thank you!"}], "tags": [], "owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "is_accepted": true, "score": 2, "last_activity_date": 1477527318, "creation_date": 1477527318, "answer_id": 40274124, "question_id": 40274049, "link": "https://stackoverflow.com/questions/40274049/cyclic-reference-does-not-live-long-enough/40274124#40274124", "title": "Cyclic reference does not live long enough", "body": "<p>You need to split the borrows out from the <code>println!</code> calls:</p>\n\n<pre><code>// Borrow them separately, so their scopes are larger.\nlet n0_borrowed = node0.borrow();\nlet n1_borrowed = node1.borrow();\nlet n0_parent = n0_borrowed.parent.as_ref().unwrap();\nlet n1_parent = n1_borrowed.parent.as_ref().unwrap();\n\nprintln!(\"Value of node0: {}\", node0.borrow().value);\nprintln!(\"Value of node0.parent: {}\", n0_parent.borrow().value);\n\nprintln!(\"Value of node1: {}\",node1.borrow().value);\nprintln!(\"Value of node1.parent: {}\", n1_parent.borrow().value);\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=c1a60d4390145584efd24c2ba1408f1d&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">Here it is running in the Playground</a>.</p>\n\n<p>Essentially, the borrowed references aren't living long enough when you chain all the calls together. Splitting them out increases their scope and they live longer.</p>\n"}], "owner": {"reputation": 5824, "user_id": 29502, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/1418ba3d9ca124ff55e11f8050682aa6?s=128&d=identicon&r=PG", "display_name": "Newtang", "link": "https://stackoverflow.com/users/29502/newtang"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 100, "favorite_count": 0, "accepted_answer_id": 40274124, "answer_count": 1, "score": 3, "last_activity_date": 1477534404, "creation_date": 1477526636, "last_edit_date": 1495540837, "question_id": 40274049, "link": "https://stackoverflow.com/questions/40274049/cyclic-reference-does-not-live-long-enough", "title": "Cyclic reference does not live long enough", "body": "<p>I have a cyclic graph-like structure where nodes refer to other nodes. I've removed some stuff for brevity. I'm still just beginning to learn Rust, and I used <a href=\"https://stackoverflow.com/questions/23135409/rust-borrowed-pointers-and-lifetimes\">Rust borrowed pointers and lifetimes</a> and <a href=\"https://github.com/nrc/r4cppp/blob/master/graphs/src/rc_graph.rs\" rel=\"nofollow noreferrer\">https://github.com/nrc/r4cppp/blob/master/graphs/src/rc_graph.rs</a> as references </p>\n\n<pre><code>use std::cell::RefCell;\nuse std::rc::*;\n\nfn main() {\n    let node1 = Node::new(1);\n    let node0 = Node::new(0);\n\n    node0.borrow_mut().parent = Some(node1.clone());\n    node1.borrow_mut().parent = Some(node0.clone());\n\n    //works\n    println!(\"Value of node0: {}\", node0.borrow().value);\n\n    //neither of the following work\n    println!(\"Value of node0.parent: {}\", node0.borrow().parent.as_ref().unwrap().borrow().value);\n    println!(\"Value of node0: {}\", node0.borrow().get_parent().borrow().value);\n}\n\nstruct Node {\n    value: i32,\n    parent:  Option&lt;Rc&lt;RefCell&lt;Node&gt;&gt;&gt;\n}\n\nimpl Node{\n\n    fn new(val: i32) -&gt; Rc&lt;RefCell&lt;Node&gt;&gt; {\n        Rc::new(RefCell::new(Node {\n            value: val,\n            parent: None\n        }))\n    }\n\n\n    fn get_parent(&amp;self) -&gt; Rc&lt;RefCell&lt;Node&gt;&gt; {\n        self.parent.as_ref().unwrap().clone()\n    }\n}\n</code></pre>\n\n<p>I'm trying to output the value of node's parent, but I get the following compile errors:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>16 |     println!(\"Value of node0.parent: {}\", node0.borrow().parent.as_ref().unwrap().borrow().value);\n   |                                           ^^^^^^^^^^^^^^ does not live long enough\n</code></pre>\n\n<p>and</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>17 |     println!(\"Value of node0: {}\", node0.borrow().get_parent().borrow().value);\n   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ does not live long enough\n</code></pre>\n\n<p>What am I doing wrong?</p>\n"}]