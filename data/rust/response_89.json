[{"tags": ["rust", "fuse"], "answers": [{"comments": [{"owner": {"reputation": 145, "user_id": 6840642, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6e5097e226bafec8ac922e683f1ad195?s=128&d=identicon&r=PG&f=1", "display_name": "Hapal", "link": "https://stackoverflow.com/users/6840642/hapal"}, "edited": false, "score": 0, "creation_date": 1474503560, "post_id": 39628229, "comment_id": 66562158, "body": "Yes, it is doable but it makes the logic unnecessarily complicated. Adding the path should be straight forward, since the same is being done for some other functions, e.g., <code>lookup</code>. Find <code>let name = data.fetch_path();</code> in <a href=\"https://github.com/zargony/rust-fuse/blob/86fd79d6b6569cd5f355c0cb5a6811146fc63134/src/request.rs\" rel=\"nofollow noreferrer\">github.com/zargony/rust-fuse/blob/&hellip;</a>"}, {"owner": {"reputation": 145, "user_id": 6840642, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6e5097e226bafec8ac922e683f1ad195?s=128&d=identicon&r=PG&f=1", "display_name": "Hapal", "link": "https://stackoverflow.com/users/6840642/hapal"}, "edited": false, "score": 1, "creation_date": 1474505927, "post_id": 39628229, "comment_id": 66562588, "body": "I just cloned the repo and added path to the <code>readdir</code> function and it works fine! I&#39;ll make a PR soon."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 145, "user_id": 6840642, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6e5097e226bafec8ac922e683f1ad195?s=128&d=identicon&r=PG&f=1", "display_name": "Hapal", "link": "https://stackoverflow.com/users/6840642/hapal"}, "edited": false, "score": 0, "creation_date": 1474563661, "post_id": 39628229, "comment_id": 66593166, "body": "@Hapal hey, that&#39;s cheating! ^_^ However, it does sound like a good answer to me."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1474502463, "creation_date": 1474502463, "answer_id": 39628229, "question_id": 39628050, "link": "https://stackoverflow.com/questions/39628050/how-can-i-find-the-path-in-rust-fuse/39628229#39628229", "title": "How can I find the path in rust-fuse?", "body": "<p>It appears the library doesn't provide this yet:</p>\n\n<p><a href=\"https://github.com/zargony/rust-fuse/blob/a582267d0ac2aad600283e665c538125bd6bc70a/README.md\" rel=\"nofollow\">From the README</a> (emphasis mine):</p>\n\n<blockquote>\n  <h1>To Do</h1>\n  \n  <p>There's still a lot of stuff to be done. Feel free to contribute.</p>\n  \n  <ul>\n  <li>Interrupting a filesystem operation isn't handled yet. An additional\n  more high level API would be nice. <strong>It should provide pathnames instead\n  inode numbers</strong> and automatically handle concurrency and interruption\n  (like the FUSE C library's high level API).</li>\n  </ul>\n</blockquote>\n\n<p>It appears you will need to assign a unique inode when you open / list the directory/file, keep track of a mapping of inodes to paths, and use that later on.</p>\n\n<p>Depending on your API structure, you may also be able to encode some amount of information into the inode directly. For example, maybe you have &lt; 32 endpoints, so you can encode each endpoint as a 5-bit number and decode that later. Then only a subset of inodes need to have arbitrary values.</p>\n"}], "owner": {"reputation": 145, "user_id": 6840642, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6e5097e226bafec8ac922e683f1ad195?s=128&d=identicon&r=PG&f=1", "display_name": "Hapal", "link": "https://stackoverflow.com/users/6840642/hapal"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 344, "favorite_count": 0, "accepted_answer_id": 39628229, "answer_count": 1, "score": 1, "last_activity_date": 1474502463, "creation_date": 1474500765, "last_edit_date": 1474501749, "question_id": 39628050, "link": "https://stackoverflow.com/questions/39628050/how-can-i-find-the-path-in-rust-fuse", "title": "How can I find the path in rust-fuse?", "body": "<p>I am trying to write a FUSE interface for a REST API in Rust. I am using the <a href=\"https://github.com/zargony/rust-fuse\" rel=\"nofollow\">rust-fuse</a> library. I need the dir path in the <code>readdir</code> callback function when implementing the <code>Filesystem</code> trait, but the function only takes an inode!</p>\n\n<p>How can I find the path to the file? Is it somehow embedded in the <code>Request</code>?</p>\n\n<p>I could create an <code>inode &lt;-&gt; path</code> map, but that makes things too complicated. The Python and Haskell FUSE libraries both pass the path as a parameter to the callback functions rather than an inode.</p>\n\n<pre><code>fn readdir(&amp;mut self,\n           req: &amp;Request,\n           ino: u64,\n           _fh: u64,\n           offset: u64,\n           mut reply: ReplyDirectory) {\n    // ...\n}\n</code></pre>\n"}, {"tags": ["rust", "slice", "traits"], "comments": [{"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1474483239, "post_id": 39624154, "comment_id": 66553729, "body": "It seems like the rust compiler is doing some trickery behind the scenes in the first example, and allowing <code>&amp;[u8; 3]</code> to be coerced to <code>&amp;[u8]</code>, but cannot do this in the second example because it cannot know for sure that this is the intention. Is that basically the issue?"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1474532565, "post_id": 39624154, "comment_id": 66572184, "body": "I tried abstracting over Index&lt;usize&gt; and some other stuff, but I&#39;m unconvinced that you need to introduce such abstractions at all - they tend to complicate things without added value. What are the other <code>src</code> types <code>find()</code> can apply to?"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1474621186, "post_id": 39624154, "comment_id": 66615676, "body": "The trickery is that: coercions trigger if the destination type is known. Since <code>find</code> is using a type parameter for <code>src</code>, it&#39;s not."}], "answers": [{"comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 0, "creation_date": 1474486741, "post_id": 39624608, "comment_id": 66555639, "body": "<code>AsRef</code> has the same limitation of being only implemented up to <code>[T; 32]</code>."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 1, "creation_date": 1474490417, "post_id": 39624608, "comment_id": 66557664, "body": "Can you explain the mechanism by which the simpler version (<code>fn find &lt;T:&gt; (src: &amp;[T])</code>) works? Is it a special case of the compiler to coerce <code>&amp;[T; n]</code> to <code>&amp;[T]</code>?"}, {"owner": {"reputation": 5160, "user_id": 553092, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d161f230b3456d0bfd740154ae16e0a3?s=128&d=identicon&r=PG", "display_name": "Steven", "link": "https://stackoverflow.com/users/553092/steven"}, "edited": false, "score": 1, "creation_date": 1474598087, "post_id": 39624608, "comment_id": 66606500, "body": "It&#39;s a bug: <a href=\"https://github.com/rust-lang/rust/issues/29504\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/29504</a>. I&#39;ve updated the answer."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "reply_to_user": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1474681165, "post_id": 39624608, "comment_id": 66644692, "body": "@PeterHall Yes, it&#39;s built-in"}], "tags": [], "owner": {"reputation": 5160, "user_id": 553092, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d161f230b3456d0bfd740154ae16e0a3?s=128&d=identicon&r=PG", "display_name": "Steven", "link": "https://stackoverflow.com/users/553092/steven"}, "is_accepted": false, "score": 2, "last_activity_date": 1474598215, "last_edit_date": 1474598215, "creation_date": 1474484702, "answer_id": 39624608, "question_id": 39624154, "link": "https://stackoverflow.com/questions/39624154/how-can-i-generalise-a-function-that-accepts-an-t-so-that-i-can-still-invok/39624608#39624608", "title": "How can I generalise a function that accepts an `&amp;[T]` so that I can still invoke it with a bytestring literal?", "body": "<p>Your second example doesn't currently work due to a limitation in the rust compiler (<a href=\"https://github.com/rust-lang/rust/issues/29504\" rel=\"nofollow\">https://github.com/rust-lang/rust/issues/29504</a>). However, there are a few ways around this.</p>\n\n<p>The simplest way is to implement <code>RandomAccess&lt;T&gt;</code> for all <code>C: AsRef&lt;[T]&gt;</code>. This way, it'll work with <code>[T; n]</code>, <code>&amp;[T]</code>, <code>Vec&lt;T&gt;</code>, etc.:</p>\n\n<pre><code>trait RandomAccess&lt;T&gt; {\n    fn get_at(&amp;self, index: usize) -&gt; T;\n}\n\nimpl&lt;T: Copy, C: AsRef&lt;[T]&gt;&gt; RandomAccess&lt;T&gt; for C {\n    fn get_at(&amp;self, index: usize) -&gt; T {\n        self.as_ref()[index]\n    }\n}\n\nfn find&lt;T: Copy, C: RandomAccess&lt;T&gt;&gt;(src: C, index: usize) -&gt; T {\n    src.get_at(index)\n}\n</code></pre>\n\n<p>Unfortunately, you won't be able to add any other <code>RandomAccess</code> impls if you do that so you might as well just change <code>find</code> to take some collection satisfying <code>AsRef&lt;[T]&gt;</code>:</p>\n\n<pre><code>fn find&lt;T: Copy, C: AsRef&lt;[T]&gt;&gt; (src: C, index: usize) -&gt; T {\n    src.get_at(index)\n}\n</code></pre>\n\n<p>Alternatively, if you need to be able to support collections that <em>can't</em> be borrowed as <code>[T]</code>, you can implement <code>RandomAccess&lt;T&gt;</code> for <code>[T; n]</code> for all <code>n</code> in some range using a macro:</p>\n\n<pre><code>trait RandomAccess&lt;T&gt; {\n    fn get_at(&amp;self, index: usize) -&gt; T;\n}\n\nimpl&lt;T: Copy&gt; RandomAccess&lt;T&gt; for [T] {\n    fn get_at(&amp;self, index: usize) -&gt; T {\n        self[index]\n    }\n}\n\nmacro_rules! impl_random_access {\n    ($($n:expr,)*) =&gt; {\n        $(\n            impl &lt;T: Copy&gt; RandomAccess&lt;T&gt; for [T; $n] {\n                fn get_at(&amp;self, index: usize) -&gt; T {\n                    self[index]\n                }\n            }\n        )*\n    }\n}\n\nimpl_random_access! {\n    01,02,03,04,05,06,07,08,\n    09,10,11,12,13,14,15,16,\n    17,18,19,20,21,22,23,24,\n    25,26,27,28,29,30,31,32,\n}\n\n\n\nfn find&lt;T: Copy, S: ?Sized + RandomAccess&lt;T&gt;&gt;(src: &amp;S, index: usize) -&gt; T {\n    src.get_at(index)\n}\n</code></pre>\n\n<p>When we eventually get type-level constants (currently on the wish-list), you should be able to just implement <code>RandomAccess&lt;T&gt;</code> for all <code>[T; n]</code>. But for now, you'll need to use a macro.</p>\n"}], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 80, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1474598215, "creation_date": 1474483044, "last_edit_date": 1474484594, "question_id": 39624154, "link": "https://stackoverflow.com/questions/39624154/how-can-i-generalise-a-function-that-accepts-an-t-so-that-i-can-still-invok", "title": "How can I generalise a function that accepts an `&amp;[T]` so that I can still invoke it with a bytestring literal?", "body": "<p>I started off with a function a bit like this (<a href=\"https://play.rust-lang.org/?code=%0Afn%20find%20%3CT%3A%20Copy%3E%20(src%3A%20%26%5BT%5D%2C%20index%3A%20usize)%20-%3E%20T%20%7B%0A%20%20%20%20src%5Bindex%5D%0A%7D%0A%0Apub%20fn%20main()%20%7B%0A%20%20%20%20let%20x%20%3D%20b%22abc%22%3B%0A%20%20%20%20assert_eq!(b%27b%27%2C%20find(x%2C%201))%3B%0A%0A%7D&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">playground</a>):</p>\n\n<pre><code>fn find &lt;T: Copy&gt; (src: &amp;[T], index: usize) -&gt; T {\n    // more complex algorithm, involving src goes here\n    src[index]\n}\n\npub fn main() {\n    let x = b\"abc\";\n    assert_eq!(b'b', find(x, 1));    \n}\n</code></pre>\n\n<p>And I wanted to generalise it so that I can use any appropriate type for <code>src</code>. The best I came up with is this (<a href=\"https://play.rust-lang.org/?code=trait%20RandomAccess%3CT%3E%20%7B%0A%20%20%20%20fn%20get_at(%26self%2C%20index%3A%20usize)%20-%3E%20T%3B%0A%7D%0A%0Aimpl%3CT%3A%20Copy%3E%20RandomAccess%3CT%3E%20for%20%5BT%5D%20%7B%0A%20%20%20%20fn%20get_at(%26self%2C%20index%3A%20usize)%20-%3E%20T%20%7B%0A%20%20%20%20%20%20%20%20self%5Bindex%5D%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20find%3CT%3A%20Copy%2C%20S%3A%20%3FSized%20%2B%20RandomAccess%3CT%3E%3E(src%3A%20%26S%2C%20index%3A%20usize)%20-%3E%20T%20%7B%0A%20%20%20%20src.get_at(index)%0A%7D%0A%0A%0Apub%20fn%20main()%20%7B%0A%20%20%20%20let%20x%20%3D%20b%22xyz%22%3B%0A%20%20%20%20assert_eq!(b%27y%27%2C%20find(%26x%5B..%5D%2C%201))%3B%0A%7D%0A&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">playground</a>):</p>\n\n<pre><code>trait RandomAccess&lt;T&gt; {\n    fn get_at(&amp;self, index: usize) -&gt; T;\n}\n\nimpl &lt;T: Copy&gt; RandomAccess&lt;T&gt; for [T] {\n    fn get_at(&amp;self, index: usize) -&gt; T {\n        self[index]\n    }\n}\n\nfn find &lt;T: Copy, S: ?Sized + RandomAccess&lt;T&gt;&gt; (src: &amp;S, index: usize) -&gt; T {\n    // more complex algorithm, involving src goes here\n    src.get_at(index)\n}\n\npub fn main() {\n    let x = b\"xyz\";\n    assert_eq!(b'y', find(&amp;x[..], 1));\n}\n</code></pre>\n\n<p>However, I now can't just invoke <code>find(x, 1)</code>, I have to create a slice: <code>find(&amp;x[..], 1)</code>.</p>\n\n<p>Is there a way to make this generic, but still be able to invoke <code>find</code> as in the original example?</p>\n"}, {"tags": ["for-loop", "rust", "mutable", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 1240, "user_id": 4192366, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/b6bf1ce902b1530a88a47e781d3c3bdc?s=128&d=identicon&r=PG&f=1", "display_name": "ZisIsNotZis", "link": "https://stackoverflow.com/users/4192366/zisisnotzis"}, "edited": false, "score": 0, "creation_date": 1474488597, "post_id": 39622956, "comment_id": 66556643, "body": "Thanks. I totally missed the no bracket version for <code>for mut x in &amp;(mut vec)</code>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 21, "last_activity_date": 1617635971, "last_edit_date": 1617635971, "creation_date": 1474478827, "answer_id": 39622956, "question_id": 39622783, "link": "https://stackoverflow.com/questions/39622783/how-can-i-do-a-mutable-borrow-in-a-for-loop/39622956#39622956", "title": "How can I do a mutable borrow in a for loop?", "body": "<p>You may want to re-read <a href=\"https://doc.rust-lang.org/stable/book/\" rel=\"nofollow noreferrer\"><em>The Rust Programming Language</em></a>, specifically the sections on:</p>\n<ul>\n<li><a href=\"https://doc.rust-lang.org/stable/book/ch03-01-variables-and-mutability.html\" rel=\"nofollow noreferrer\">mutability</a></li>\n<li><a href=\"https://doc.rust-lang.org/stable/book/ch04-02-references-and-borrowing.html#mutable-references\" rel=\"nofollow noreferrer\">mutable references</a></li>\n<li><a href=\"https://doc.rust-lang.org/stable/book/ch08-01-vectors.html\" rel=\"nofollow noreferrer\">vectors</a></li>\n</ul>\n<blockquote>\n<p>We can also iterate over mutable references to each element in a mutable vector in order to make changes to all the elements. The <code>for</code> loop in Listing 8-9 will add <code>50</code> to each element.</p>\n<pre class=\"lang-rust prettyprint-override\"><code>let mut v = vec![100, 32, 57];\nfor i in &amp;mut v {\n    *i += 50;\n}\n</code></pre>\n<p>Listing 8-9: Iterating over mutable references to elements in a vector</p>\n<p>To change the value that the mutable reference refers to, we have to use the dereference operator (<code>*</code>) to get to the value in <code>i</code> before we can use the <code>+=</code> operator.</p>\n</blockquote>\n<p>In addition, you can call the <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.iter_mut\" rel=\"nofollow noreferrer\"><code>iter_mut</code></a> method:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>let mut v = vec![100, 32, 57];\nfor i in v.iter_mut() {\n    *i += 50;\n}\n</code></pre>\n<p>See also:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/28587698/155423\">What&#39;s the difference between placing &quot;mut&quot; before a variable name and after the &quot;:&quot;?</a></li>\n<li><a href=\"https://stackoverflow.com/q/34733811/155423\">What is the difference between iter and into_iter?</a></li>\n</ul>\n<hr />\n<p>Note that your variable is <strong>not a vector</strong>. It is an array.</p>\n"}], "owner": {"reputation": 1240, "user_id": 4192366, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/b6bf1ce902b1530a88a47e781d3c3bdc?s=128&d=identicon&r=PG&f=1", "display_name": "ZisIsNotZis", "link": "https://stackoverflow.com/users/4192366/zisisnotzis"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 11221, "favorite_count": 1, "accepted_answer_id": 39622956, "answer_count": 1, "score": 10, "last_activity_date": 1617635971, "creation_date": 1474478279, "last_edit_date": 1617632903, "question_id": 39622783, "link": "https://stackoverflow.com/questions/39622783/how-can-i-do-a-mutable-borrow-in-a-for-loop", "title": "How can I do a mutable borrow in a for loop?", "body": "<p>I tried:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let mut vec = [1, 2, 3];\n    \n    for mut x in &amp;vec { *x = 3; }\n    for mut &amp;x in &amp;vec { x = 3; }\n    for mut *x in &amp;vec { x = 3; }\n    for mut x in mut &amp;vec { *x = 3; }\n    for mut x in &amp;(mut vec) { *x = 3; }\n}\n</code></pre>\n<p>None of these work; how should I do it?</p>\n<p>I get errors like:</p>\n<blockquote>\n<ul>\n<li><code>mut</code> must be attached to each individual binding</li>\n<li>expected identifier, found <code>*</code></li>\n<li>expected expression, found keyword <code>mut</code></li>\n<li>cannot assign to <code>*x</code> which is behind a <code>&amp;</code> reference</li>\n</ul>\n</blockquote>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 1, "creation_date": 1474529047, "post_id": 39622633, "comment_id": 66570029, "body": "A better design would probably be to make <code>size</code> of type <code>usize</code> in the first place."}], "answers": [{"tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 3, "last_activity_date": 1474478578, "last_edit_date": 1474478578, "creation_date": 1474478241, "answer_id": 39622769, "question_id": 39622633, "link": "https://stackoverflow.com/questions/39622633/what-is-the-difference-between-casting-to-i32-from-usize-versus-the-other-wa/39622769#39622769", "title": "What is the difference between casting to `i32` from `usize` versus the other way?", "body": "<p>It seems that your <code>size</code> is of type <code>i32</code>. You either need parentheses:</p>\n\n<pre><code>while (ar.len() as i32) &lt; size { }\n</code></pre>\n\n<p>or cast <code>size</code> to <code>usize</code>:</p>\n\n<pre><code>while ar.len() &lt; size as usize { }\n</code></pre>\n\n<p>as <code>len()</code> returns a <code>usize</code> and the types on both sides of the comparison need to match. You need the parentheses in the first case so that the <code>&lt;</code> operator doesn't try to compare <code>i32</code> with <code>size</code> but rather <code>ar.len() as i32</code> with <code>size</code> which is your intention.</p>\n"}, {"comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 3, "creation_date": 1474506850, "post_id": 39622916, "comment_id": 66562753, "body": "Just to clarify, because no one seems to have pointed this out: the problem is that the compiler <i>thinks</i> the code is introducing a parameterised type.  That is, something like <code>Vec&lt;usize&gt;</code>, except then it finds <code>{</code> instead of <code>&gt;</code> and gets confused.  <i>Yes</i>, <code>i32</code> doesn&#39;t <i>have</i> any parameters, but the parser <i>doesn&#39;t know that.</i>  This is all happening before that kind of information is known."}, {"owner": {"reputation": 60850, "user_id": 221955, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/0bc09e1bd45610fc85274cd7bb002c56?s=128&d=identicon&r=PG", "display_name": "Michael Anderson", "link": "https://stackoverflow.com/users/221955/michael-anderson"}, "edited": false, "score": 0, "creation_date": 1580954549, "post_id": 39622916, "comment_id": 106270981, "body": "Worth noting that if you need to cast from the larger size variable to the smaller sized variable for some reason you can instead use <code>try_from</code> like <code>while i32::try_from(ar.len()).unwrap() &lt; size { }</code>, which will cause the code to error if it can&#39;t convert, rather than blindly slice off the extra bits. You can of course handle the error differently too, by doing something more sophisticated than an <code>unwrap</code>."}, {"owner": {"reputation": 5450, "user_id": 942317, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/SY5ID.jpg?s=128&g=1", "display_name": "STEEL", "link": "https://stackoverflow.com/users/942317/steel"}, "edited": false, "score": 0, "creation_date": 1606322341, "post_id": 39622916, "comment_id": 114931444, "body": "isn&#39;t <code>usize</code> is just an integer of i32 on 32bit system and i64 on 64bit system ? Please correct me if im wrong."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 5450, "user_id": 942317, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/SY5ID.jpg?s=128&g=1", "display_name": "STEEL", "link": "https://stackoverflow.com/users/942317/steel"}, "edited": false, "score": 1, "creation_date": 1606875777, "post_id": 39622916, "comment_id": 115093635, "body": "@STEEL yes, <code>usize</code> takes 16, 32 or 64 bits depending on the target platform. However, it is <i>not</i> an alias of <code>u16</code> / <code>u32</code> / <code>u64</code>, it is a separate type. Also <code>usize</code> is unsigned while <code>i32</code> / <code>i64</code> is signed."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 19, "last_activity_date": 1586351807, "last_edit_date": 1586351807, "creation_date": 1474478682, "answer_id": 39622916, "question_id": 39622633, "link": "https://stackoverflow.com/questions/39622633/what-is-the-difference-between-casting-to-i32-from-usize-versus-the-other-wa/39622916#39622916", "title": "What is the difference between casting to `i32` from `usize` versus the other way?", "body": "<p>When you cast from a smaller-sized type to a larger one, you won't lose any data, but the data will now take up more space.</p>\n\n<p>When you cast from a larger-sized type to a smaller one, you <em>might</em> lose some of your data, but the data will take up less space.</p>\n\n<p>Pretend I have a box of size <strong>1</strong> that can hold the numbers 0 to 9 and another box of size <strong>2</strong> that can hold the numbers 0 to 99.</p>\n\n<p>If I want to store the number 7; both boxes will work, but I will have space left over if I use the larger box. I could move the value from the smaller box to the larger box without any trouble.</p>\n\n<p>If I want to store the number 42; only one box can fit the number: the larger one. If I try to take the number and cram it in the smaller box, something will be lost, usually the upper parts of the number. In this case, my 42 would be transformed into a <strong>2</strong>! Oops!</p>\n\n<p>In addition, signed and unsigned plays a role; when you cast between signed and unsigned numbers, you might be incorrectly interpreting the value, as a number like -1 becomes 255!</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/28273169/155423\">How do I convert between numeric types safely and idiomatically?</a></li>\n</ul>\n\n<hr>\n\n<hr>\n\n<p>In this <em>particular</em> case, it's a bit more complicated. A <code>usize</code> is defined to be a \"pointer-sized integer\", which is usually the native size of the machine. On a 64-bit x64 processor, that means a <code>usize</code> is 64 bits, and on a 32-bit x86 processor, it will be 32 bits.</p>\n\n<p>Casting a <code>usize</code> to a <code>i32</code> thus will operate differently depending on what type of machine you are running on.</p>\n\n<hr>\n\n<p>The <em>error message</em> you get is because the code you've tried isn't syntactically correct, and the compiler isn't giving a good error message.</p>\n\n<p>You really want to type</p>\n\n<pre><code>while (ar.len() as i32) &lt; size { }\n</code></pre>\n\n<p>The parenthesis will help the precedence be properly applied.</p>\n\n<p>To be on the safe side, I'd cast to the larger value:</p>\n\n<pre><code>while ar.len() &lt; size as usize { }\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/50437732/155423\">How do I convert a usize to a u32 using TryFrom?</a></li>\n<li><a href=\"https://stackoverflow.com/q/43704758/155423\">How to idiomatically convert between u32 and usize?</a></li>\n<li><a href=\"https://stackoverflow.com/q/47786322/155423\">Why is type conversion from u64 to usize allowed using `as` but not `From`?</a></li>\n</ul>\n"}], "owner": {"reputation": 156, "user_id": 5615967, "user_type": "registered", "accept_rate": 92, "profile_image": "https://lh3.googleusercontent.com/-k7tbrpdLkTo/AAAAAAAAAAI/AAAAAAAAACQ/zwe5HlAFMV0/photo.jpg?sz=128", "display_name": "Sebastian", "link": "https://stackoverflow.com/users/5615967/sebastian"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 14659, "favorite_count": 4, "accepted_answer_id": 39622916, "answer_count": 2, "score": 5, "last_activity_date": 1586351807, "creation_date": 1474477814, "last_edit_date": 1474478001, "question_id": 39622633, "link": "https://stackoverflow.com/questions/39622633/what-is-the-difference-between-casting-to-i32-from-usize-versus-the-other-wa", "title": "What is the difference between casting to `i32` from `usize` versus the other way?", "body": "<p>I am making a function that makes a array of size n random numbers but my comparison for the while throws an error.</p>\n\n<pre><code>while ar.len() as i32 &lt; size { }\n</code></pre>\n\n<p>Complains with: expected one of <code>!</code>, <code>(</code>, <code>+</code>, <code>,</code>, <code>::</code>, <code>&lt;</code>, or <code>&gt;</code>, found <code>{</code>.</p>\n\n<p>If I remove the <code>as i32</code> it complains with <code>mismatch types</code> and if I add a <code>as usize</code> to the size variable then it doesn't complain.</p>\n"}, {"tags": ["types", "rust", "containers", "slice", "boxing"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 4, "creation_date": 1474463900, "post_id": 39615666, "comment_id": 66541712, "body": "Not sure if it&#39;s <i>the</i> reason, but <code>Box&lt;[T]&gt;</code> and <code>Box&lt;str&gt;</code> have one less pointer-sized integer as they don&#39;t need a capacity \u2014 they can&#39;t be resized."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1474464258, "post_id": 39615666, "comment_id": 66541932, "body": "I thought about this, but it doesn&#39;t strike me as a reason enough to have a dedicated container either."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1474464589, "post_id": 39615666, "comment_id": 66542146, "body": "I&#39;m not sure what you mean by &quot;dedicated container&quot;. It&#39;s just a combination of existing types - <code>Box</code> and <code>[T]</code> or <code>str</code>. It&#39;s not really that different from a <code>Box&lt;Trait&gt;</code>."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1474465947, "post_id": 39615666, "comment_id": 66543165, "body": "You&#39;re right, though it is listed in the main page of <code>std</code>, which gives it a feeling of some nobility :). That&#39;s what got me interested in it."}, {"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "edited": false, "score": 0, "creation_date": 1474591897, "post_id": 39615666, "comment_id": 66605146, "body": "I&#39;d guess it&#39;s probably just meant to be a cheap, safe way of getting the underlying heap pointer. Effectively an &quot;into_inner&quot; method. Probably provided in case somebody really wants to own the underlying buffer for reasons that weren&#39;t considered very strongly because it&#39;s trivial to implement."}, {"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "edited": false, "score": 0, "creation_date": 1474592162, "post_id": 39615666, "comment_id": 66605198, "body": "Otherwise, to avoid intermediate allocations, you have to go through unsafe shenanigans like <code>Box::from_raw(&amp;mut vec[..] as *mut [T])</code>, and then manually forget the Vec, which is just unpleasant. It&#39;s nicer to just provide a safe alternative."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1474607952, "post_id": 39615666, "comment_id": 66608987, "body": "I saw the implementation and it makes sense; I&#39;d still like to know some practical use of owning the inner buffer, though (if there are other than FFI)."}], "answers": [{"comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 1, "creation_date": 1474867544, "post_id": 39693977, "comment_id": 66689156, "body": "If I can remember correctly, <code>into_boxed_slice()</code> calls <code>shrink_to_fit()</code> too. It&#39;s a valid answer; I was hoping to learn some hidden benefits, but there just might not be any. I&#39;ll accept it if nothing surprising comes up soon."}], "tags": [], "owner": {"reputation": 346, "user_id": 4002446, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/HgvR1.jpg?s=128&g=1", "display_name": "Nick Stevens", "link": "https://stackoverflow.com/users/4002446/nick-stevens"}, "is_accepted": true, "score": 9, "last_activity_date": 1474857743, "creation_date": 1474857743, "answer_id": 39693977, "question_id": 39615666, "link": "https://stackoverflow.com/questions/39615666/what-is-the-use-of-into-boxed-slice-methods/39693977#39693977", "title": "What is the use of into_boxed_slice() methods?", "body": "<p>The big reason for using <code>into_boxed_slice()</code> is that a boxed slice takes up <em>only</em> as much memory as:</p>\n\n<ul>\n<li>The underlying data itself</li>\n<li>A <code>length</code> field that gives the total length of the data</li>\n</ul>\n\n<p>When using a standard <code>Vec</code> it is possible, and common, for the <code>Vec</code> to obtain more memory than what it actually needs to avoid having to allocate more memory every time a new element is added. That space is essentially unused. You can find out how much extra memory is being used by comparing <code>Vec::len()</code> versus <code>Vec::capacity()</code>.</p>\n\n<p>The main place that I have found the <code>into_boxed_slice()</code> function useful is in an in-memory file cache. I load the file into memory using a <code>Vec</code> for simplicity, but once the file is loaded, I no longer need to add or remove elements. So I convert it to a boxed slice using <code>into_boxed_slice()</code>. There would be other ways to achieve the same thing, but in this case the single function call is easier. I like the boxed slice type (as opposed to a <code>Vec</code>) because it clearly signals the intent that the cached file is not meant to modified.</p>\n\n<p>Note: you can actually still use a <code>Vec</code> without the extra overhead by calling <code>Vec::shrink_to_fit()</code>, which will remove the extra allocated elements from the <code>Vec</code>.</p>\n"}], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2059, "favorite_count": 2, "accepted_answer_id": 39693977, "answer_count": 1, "score": 8, "last_activity_date": 1474857743, "creation_date": 1474458295, "last_edit_date": 1474471872, "question_id": 39615666, "link": "https://stackoverflow.com/questions/39615666/what-is-the-use-of-into-boxed-slice-methods", "title": "What is the use of into_boxed_slice() methods?", "body": "<p>Looking at the methods available for <code>Vec&lt;T&gt;</code> I stumbled across</p>\n\n<pre><code>into_boxed_slice(self) -&gt; Box&lt;[T]&gt;\n</code></pre>\n\n<p><code>String</code> also has such a method (<code>into_boxed_str(self)</code>). The usefulness of having <code>Deref</code> for <code>Vec&lt;T&gt;</code>/<code>String</code> that allows them to be treated like a shared slice (<code>&amp;[T]</code>) is obvious, but I don't see any use for an owned slice (<code>Box&lt;[T]&gt;</code>) except, perhaps, FFI. The Rust GitHub repo only uses <code>into_boxed_slice()</code> in a handful of cases.</p>\n\n<p>Since methods for creating boxed slices are available in <code>std</code> and this container is listed on its main page, I thought that I might be missing something useful about it. What are cases where I should use an owned slice in favor of a <code>Vec&lt;T&gt;</code> or a <code>String</code>?</p>\n"}, {"tags": ["rust", "slice"], "comments": [{"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1474437567, "post_id": 39604042, "comment_id": 66524996, "body": "Unfortunately there doesn&#39;t seem to exist a function similar to <code>collect</code> that fills up an <code>IterMut</code> from an iterator."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1474503186, "post_id": 39604042, "comment_id": 66562068, "body": "See also <a href=\"http://stackoverflow.com/q/28219231/155423\">How to idiomatically copy a slice?</a>"}], "answers": [{"comments": [{"owner": {"reputation": 3704, "user_id": 859355, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/YHgGT.jpg?s=128&g=1", "display_name": "Vincenzo Maggio", "link": "https://stackoverflow.com/users/859355/vincenzo-maggio"}, "edited": false, "score": 0, "creation_date": 1474467731, "post_id": 39604869, "comment_id": 66544580, "body": "Being a beginner in Rust can I ask how vector elements drop would work in this case for type T when type T implements Drop Trait?"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "reply_to_user": {"reputation": 3704, "user_id": 859355, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/YHgGT.jpg?s=128&g=1", "display_name": "Vincenzo Maggio", "link": "https://stackoverflow.com/users/859355/vincenzo-maggio"}, "edited": false, "score": 1, "creation_date": 1474471233, "post_id": 39604869, "comment_id": 66546870, "body": "Sure. <code>T: Copy</code> means that <code>T</code> is trivially copyable (byte-by-byte) and it also means <code>T</code> can not have a destructor. So we don&#39;t have to worry about drop here. (There is also no vector in this answer, just a mutable slice)."}, {"owner": {"reputation": 3704, "user_id": 859355, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/YHgGT.jpg?s=128&g=1", "display_name": "Vincenzo Maggio", "link": "https://stackoverflow.com/users/859355/vincenzo-maggio"}, "edited": false, "score": 0, "creation_date": 1474471324, "post_id": 39604869, "comment_id": 66546924, "body": "Ah yeah didn&#39;t notice the Copy constraint. Thanks."}], "tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": false, "score": 7, "last_activity_date": 1474411516, "creation_date": 1474411516, "answer_id": 39604869, "question_id": 39604042, "link": "https://stackoverflow.com/questions/39604042/how-can-i-write-data-from-a-slice-to-the-same-slice/39604869#39604869", "title": "How can I write data from a slice to the same slice?", "body": "<p>To copy data from one range inside a slice to another in general (allowing overlap), we can't even use <code>.split_at_mut()</code>.</p>\n\n<p>I would use <code>.split_at_mut()</code> primarily otherwise. (Is there anything that makes you think the bounds check is not going to be optimized out? Also, are you copying enough data that it's a small effect in comparison?)</p>\n\n<p>Anyway, this is how you could wrap <code>std::ptr::copy</code> (overlap-allowing copy, a.k.a memmove) in a safe or an <code>unsafe</code> function.</p>\n\n<pre><code>use std::ptr::copy;\nuse std::ops::Range;\n\n/// Copy the range `data[from]` onto the index `to` and following\n///\n/// **Panics** if `from` or `to` is out of bounds\npub fn move_memory&lt;T: Copy&gt;(data: &amp;mut [T], from: Range&lt;usize&gt;, to: usize) {\n    assert!(from.start &lt;= from.end);\n    assert!(from.end &lt;= data.len());\n    assert!(to &lt;= data.len() - (from.end - from.start));\n    unsafe {\n        move_memory_unchecked(data, from, to);\n    }\n}\n\npub unsafe fn move_memory_unchecked&lt;T: Copy&gt;(data: &amp;mut [T], from: Range&lt;usize&gt;, to: usize) {\n    debug_assert!(from.start &lt;= from.end);\n    debug_assert!(from.end &lt;= data.len());\n    debug_assert!(to &lt;= data.len() - (from.end - from.start));\n    let ptr = data.as_mut_ptr();\n    copy(ptr.offset(from.start as isize),\n         ptr.offset(to as isize),\n         from.end - from.start)\n}\n\nfn main() {\n    let mut data = [0, 1, 2, 3, 4, 5, 6, 7];\n    move_memory(&amp;mut data, 2..6, 0);\n    println!(\"{:?}\", data);\n    move_memory(&amp;mut data, 0..3, 5);\n    println!(\"{:?}\", data);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=5ce8d68f8a1438f09cf3ee66a4f3d21b&amp;version=nightly&amp;backtrace=0\" rel=\"noreferrer\">Playground link</a></p>\n"}, {"tags": [], "owner": {"reputation": 193, "user_id": 1941280, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/26647042ac8d5aa0a1841694fe4cb876?s=128&d=identicon&r=PG", "display_name": "Kerollmops", "link": "https://stackoverflow.com/users/1941280/kerollmops"}, "is_accepted": true, "score": 2, "last_activity_date": 1474501366, "last_edit_date": 1474501366, "creation_date": 1474482376, "answer_id": 39623938, "question_id": 39604042, "link": "https://stackoverflow.com/questions/39604042/how-can-i-write-data-from-a-slice-to-the-same-slice/39623938#39623938", "title": "How can I write data from a slice to the same slice?", "body": "<p>I found a better way to do what I want:</p>\n\n<pre><code>fn main() {\n    let mut v = [1, 2, 3, 4, 5, 6];\n\n    // scoped to restrict the lifetime of the borrows\n    {\n        let (left, right) = v.split_at_mut(3);\n        assert!(left == [1, 2, 3]);\n        assert!(right == [4, 5, 6]);\n        for (l, r) in left.iter_mut().zip(right) {\n            *l = *r;\n        }\n    }\n\n    assert!(v == [4, 5, 6, 4, 5, 6]);\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 193, "user_id": 1941280, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/26647042ac8d5aa0a1841694fe4cb876?s=128&d=identicon&r=PG", "display_name": "Kerollmops", "link": "https://stackoverflow.com/users/1941280/kerollmops"}, "edited": false, "score": 0, "creation_date": 1474502813, "post_id": 39628108, "comment_id": 66561967, "body": "If the two slices have different sizes, the function will panic and in my case I want to copy the 5 last bytes at the front of the same slice..."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 193, "user_id": 1941280, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/26647042ac8d5aa0a1841694fe4cb876?s=128&d=identicon&r=PG", "display_name": "Kerollmops", "link": "https://stackoverflow.com/users/1941280/kerollmops"}, "edited": false, "score": 1, "creation_date": 1474502907, "post_id": 39628108, "comment_id": 66561991, "body": "@Kerosene yep, that&#39;s why I put the comment <i>&quot;ensure slices are the same length&quot;</i>. ^_^"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1474501337, "creation_date": 1474501337, "answer_id": 39628108, "question_id": 39604042, "link": "https://stackoverflow.com/questions/39604042/how-can-i-write-data-from-a-slice-to-the-same-slice/39628108#39628108", "title": "How can I write data from a slice to the same slice?", "body": "<p>If your types implement <code>Copy</code> <strong>and</strong> the subslices are not overlapping:</p>\n\n<pre><code>fn main() {\n    let mut v = [1, 2, 3, 4, 5, 6];\n\n    {\n        let (left, right) = v.split_at_mut(3);\n        // Perform further work to ensure slices are the same length, as needed\n        left.copy_from_slice(right);\n    }\n\n    assert!(v == [4, 5, 6, 4, 5, 6]);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 16556, "user_id": 839689, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/eed3ee2db841be15bdb120f3ff38f02e?s=128&d=identicon&r=PG", "display_name": "Nayuki", "link": "https://stackoverflow.com/users/839689/nayuki"}, "is_accepted": false, "score": 4, "last_activity_date": 1568993074, "last_edit_date": 1568993074, "creation_date": 1568306387, "answer_id": 57911178, "question_id": 39604042, "link": "https://stackoverflow.com/questions/39604042/how-can-i-write-data-from-a-slice-to-the-same-slice/57911178#57911178", "title": "How can I write data from a slice to the same slice?", "body": "<p>Rust <a href=\"https://blog.rust-lang.org/2019/08/15/Rust-1.37.0.html#library-changes\" rel=\"nofollow noreferrer\">1.37 (2019-08-15)</a> adds the library function <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.copy_within\" rel=\"nofollow noreferrer\"><code>slice::copy_within</code></a> which does exactly what you want:</p>\n\n<pre><code>let mut foo = [1, 2, 3, 4, 5];\n\nfoo.copy_within(3 .. 5, 0);  // &lt;-- THIS\n\nassert_eq!(foo, [4, 5, 3, 4, 5]);\n</code></pre>\n"}], "owner": {"reputation": 193, "user_id": 1941280, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/26647042ac8d5aa0a1841694fe4cb876?s=128&d=identicon&r=PG", "display_name": "Kerollmops", "link": "https://stackoverflow.com/users/1941280/kerollmops"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1359, "favorite_count": 0, "accepted_answer_id": 39623938, "answer_count": 4, "score": 7, "last_activity_date": 1568993074, "creation_date": 1474407050, "last_edit_date": 1474501099, "question_id": 39604042, "link": "https://stackoverflow.com/questions/39604042/how-can-i-write-data-from-a-slice-to-the-same-slice", "title": "How can I write data from a slice to the same slice?", "body": "<p>I want to write the end of a slice to the top of the same slice.</p>\n\n<pre><code>let mut foo = [1, 2, 3, 4, 5];\n\nfoo[..2].copy_from_slice(&amp;[4..]); // error: multiple references to same data (mut and not)\n\nassert!(foo, [4, 5, 3, 4, 5]);\n</code></pre>\n\n<p>I've seen <a href=\"https://stackoverflow.com/questions/36244762/how-to-operate-on-2-mutable-slices-of-a-rust-array\">How to operate on 2 mutable slices of a Rust array</a> </p>\n\n<p>I want the maximum performance possible (for example, by using <code>foo.as_ptr()</code>).</p>\n"}, {"tags": ["types", "rust"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1474379255, "post_id": 39595782, "comment_id": 66500374, "body": "I think the failure is too obvious. The typechecker didn&#39;t get far enough to actually insert defaults, because there&#39;s no way this can ever work. I&#39;ve only ever seen the defaults in error messages, when it was a serious mess of closures and generic methods"}], "answers": [{"tags": [], "owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "is_accepted": true, "score": 8, "last_activity_date": 1474379425, "creation_date": 1474379425, "answer_id": 39595944, "question_id": 39595782, "link": "https://stackoverflow.com/questions/39595782/when-are-numeric-literals-assigned-to-default-types/39595944#39595944", "title": "When are numeric literals assigned to default types?", "body": "<p>Rust does type inference not just from the initialization, but from every usage. Thus, its type checker has to look at every usage of a variable to decide what type it is, and needs to deduce and check types as it goes along.</p>\n\n<p>This means that the <code>let () = x;</code> is part of the same process. It is a usage of <code>x</code> and thus must be checked to see what concrete type <code>x</code> could be. The fact that no possible type could match <code>()</code> is discovered at the same time that the compiler is still trying to deduce the type of <code>x</code>, and so no default has been chosen, as the default is only used when the compiler has looked at all usages of <code>x</code> and not found anything.</p>\n"}], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 145, "favorite_count": 0, "accepted_answer_id": 39595944, "answer_count": 1, "score": 3, "last_activity_date": 1475766205, "creation_date": 1474378969, "last_edit_date": 1475766205, "question_id": 39595782, "link": "https://stackoverflow.com/questions/39595782/when-are-numeric-literals-assigned-to-default-types", "title": "When are numeric literals assigned to default types?", "body": "<p>I was playing around with some code and made the following observation:</p>\n\n<pre><code>let x = 1;\nlet () = x;\n\nerror: mismatched types [E0308]\nnote:  expected type `_`\nnote:     found type `()`\n</code></pre>\n\n<p>This obviously fails, but I was expecting the error to state that the expected type was <code>i32</code>, not <code>_</code>. I found out that the same happens with a floating literal of an unspecified type, e.g. <code>1.0</code>.</p>\n\n<p>Why is it so? Shouldn't the type already be known as the default?</p>\n\n<p><strong>Update</strong>: as of Rust 1.12, the error message is more informative:</p>\n\n<pre><code>expected integral variable, found ()\n\n= note: expected type `{integer}`\n= note:    found type `()`\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 26154, "user_id": 5436257, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/iGuaK.jpg?s=128&g=1", "display_name": "Joe Clay", "link": "https://stackoverflow.com/users/5436257/joe-clay"}, "edited": false, "score": 4, "creation_date": 1474378072, "post_id": 39595384, "comment_id": 66499481, "body": "Essential reading on this topic: <a href=\"http://cglab.ca/~abeinges/blah/too-many-lists/book/\" rel=\"nofollow noreferrer\">&quot;Learning Rust With Entirely Too Many Linked Lists&quot;</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1474378428, "post_id": 39595384, "comment_id": 66499745, "body": "See also <a href=\"http://stackoverflow.com/q/30441456/155423\">How to implement an addition method of linked list?</a>"}, {"owner": {"reputation": 469, "user_id": 3297724, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5c71ec74d444579810d54c4da325dd10?s=128&d=identicon&r=PG&f=1", "display_name": "AntoineWDG", "link": "https://stackoverflow.com/users/3297724/antoinewdg"}, "reply_to_user": {"reputation": 26154, "user_id": 5436257, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/iGuaK.jpg?s=128&g=1", "display_name": "Joe Clay", "link": "https://stackoverflow.com/users/5436257/joe-clay"}, "edited": false, "score": 0, "creation_date": 1474384660, "post_id": 39595384, "comment_id": 66504123, "body": "@JoeClay thanks, I was actually fiddling with the Stack implementation from the third chapter of the article"}, {"owner": {"reputation": 469, "user_id": 3297724, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5c71ec74d444579810d54c4da325dd10?s=128&d=identicon&r=PG&f=1", "display_name": "AntoineWDG", "link": "https://stackoverflow.com/users/3297724/antoinewdg"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1474384693, "post_id": 39595384, "comment_id": 66504145, "body": "@Shepmaster thanks I found an answer there !"}], "owner": {"reputation": 469, "user_id": 3297724, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5c71ec74d444579810d54c4da325dd10?s=128&d=identicon&r=PG&f=1", "display_name": "AntoineWDG", "link": "https://stackoverflow.com/users/3297724/antoinewdg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 22, "favorite_count": 0, "closed_date": 1474378987, "answer_count": 0, "score": 1, "last_activity_date": 1474378574, "creation_date": 1474377873, "last_edit_date": 1474378574, "question_id": 39595384, "link": "https://stackoverflow.com/questions/39595384/rewriting-adding-to-a-singly-linked-stack-from-a-recursive-implementation-to-ite", "closed_reason": "Duplicate", "title": "Rewriting adding to a singly linked stack from a recursive implementation to iterative", "body": "<p>While learning Rust, I'm implementing a singly linked stack. I have the following structures defined: </p>\n\n<pre><code>type Link&lt;T&gt; = Option&lt;Box&lt;Node&lt;T&gt;&gt;&gt;;\n\n#[derive(Debug)]\nstruct Node&lt;T&gt; {\n    value: T,\n    next: Link&lt;T&gt;,\n}\n</code></pre>\n\n<p>I made the following function to push a value at the end of the stack:</p>\n\n<pre><code>impl&lt;T&gt; Node&lt;T&gt; {\n    fn push_last(parent: &amp;mut Link&lt;T&gt;, value: T) {\n        match *parent {\n            None =&gt; {\n                *parent = Some(Box::new(Node { value: value, next: None }));\n            },\n            Some(ref mut boxed_node) =&gt; {\n                Self::push_last(&amp;mut boxed_node.next, value);\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>It works great, so I'm happy with that. What I would like to do now is unroll the recursion into a loop. I tried to do it this way:</p>\n\n<pre><code>fn push_last(mut parent: &amp;mut Link&lt;T&gt;, value: T) {\n    loop {\n        match *parent {\n            None =&gt; {\n                *parent = Some(Box::new(Node {\n                    value: value,\n                    next: None,\n                }));\n                break;\n            }\n            Some(ref mut boxed_node) =&gt; {\n                parent = &amp;mut boxed_node.next;\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>This is pretty much the same, except parent is \"incremented\" in the function. However I get borrowing issues:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: cannot assign to `*parent` because it is borrowed [--explain E0506]\n   --&gt; src/main.rs:15:21\n    |&gt;\n15  |&gt;                     *parent = Some(Box::new(Node {\n    |&gt;                     ^ assignment to borrowed `*parent` occurs here\n...\n21  |&gt;                 Some(ref mut boxed_node) =&gt; {\n    |&gt;                      ------------------ borrow of `*parent` occurs here\n\nerror: cannot borrow `parent.0` as mutable more than once at a time [--explain E0499]\n   --&gt; src/main.rs:21:22\n    |&gt;\n21  |&gt;                 Some(ref mut boxed_node) =&gt; {\n    |&gt;                      ^^^^^^^^^^^^^^^^^^\n    |&gt;                      |\n    |&gt;                      second mutable borrow occurs here\n    |&gt;                      first mutable borrow occurs here\n...\n26  |&gt;     }\n    |&gt;     - first borrow ends here\n\nerror: cannot assign to `parent` because it is borrowed [--explain E0506]\n  --&gt; src/main.rs:22:21\n   |&gt;\n21 |&gt;                 Some(ref mut boxed_node) =&gt; {\n   |&gt;                      ------------------ borrow of `parent` occurs here\n22 |&gt;                     parent = &amp;mut boxed_node.next;\n   |&gt;                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `parent` occurs here\n</code></pre>\n\n<p>I really do not get why the first function works and not the second one since they are essentially the same. </p>\n"}, {"tags": ["visual-studio-2015", "rust"], "comments": [{"owner": {"reputation": 324, "user_id": 1076553, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/476d0535285aa6f3ffb498b9a549aa31?s=128&d=identicon&r=PG", "display_name": "Dusty", "link": "https://stackoverflow.com/users/1076553/dusty"}, "edited": false, "score": 0, "creation_date": 1481991776, "post_id": 39593927, "comment_id": 69600508, "body": "I&#39;m having the same problem, I don&#39;t suppose you ever found the solution?"}], "answers": [{"tags": [], "owner": {"reputation": 972, "user_id": 1578458, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/2RWBA.gif?s=128&g=1", "display_name": "Jesko H&#252;ttenhain", "link": "https://stackoverflow.com/users/1578458/jesko-h%c3%bcttenhain"}, "is_accepted": false, "score": 1, "last_activity_date": 1487597845, "creation_date": 1487597845, "answer_id": 42346045, "question_id": 39593927, "link": "https://stackoverflow.com/questions/39593927/why-is-rust-code-completion-not-working-in-my-visual-studio-2015/42346045#42346045", "title": "Why is Rust code completion not working in my Visual Studio 2015?", "body": "<p>I run Visual Studio 2015 Community, and this is how I did it: </p>\n\n<p>Download the racer and the rust sources via</p>\n\n<pre><code>cargo install racer\nrustup component add rust-src\n</code></pre>\n\n<p>However, the <code>RUST_SRC_PATH</code> variable is not yet set, and I do not know who is supposed to set it. The following batch script will set the variable to its correct value, see <a href=\"https://github.com/phildawes/racer/issues/595\" rel=\"nofollow noreferrer\">this issue on github</a>.</p>\n\n<pre><code>@ECHO OFF\nFOR /F \"tokens=* USEBACKQ\" %%P IN (`rustc --print sysroot`) DO SET RS=%%P\nSETX RUST_SRC_PATH \"%RS%\\lib\\rustlib\\src\\rust\\src\"\n</code></pre>\n\n<p>After this, I still had to specify the path to <code>racer.exe</code> manually instead of the <code>Use bundled racer</code> option. By default, you can find it here: </p>\n\n<pre><code>%USERPROFILE%\\.cargo\\bin\\racer.exe\n</code></pre>\n\n<p>Hope it helps!</p>\n"}], "owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 627, "favorite_count": 0, "answer_count": 1, "score": 5, "last_activity_date": 1487597845, "creation_date": 1474373901, "question_id": 39593927, "link": "https://stackoverflow.com/questions/39593927/why-is-rust-code-completion-not-working-in-my-visual-studio-2015", "title": "Why is Rust code completion not working in my Visual Studio 2015?", "body": "<p>I'm using Visual Studio 2015 v14 with VisualRust 0.1.2</p>\n\n<p>Under <code>Tools -&gt; Options -&gt; Text Editor -&gt; Visual Rust</code> statement completion is greyed out and cannot be enabled.</p>\n\n<p>Under <code>Tools -&gt; Options -&gt; Visual Rust</code> I have selected <code>Use bundled racer</code> and <code>Read rust sources from environment variable</code></p>\n\n<p>The racer that came bundled with VisualRust works correctly when called manually, that is <code>racer-120e98b.exe complete std::io::</code> returns the relevant results.</p>\n\n<p>In Visual Studio, writing <code>let e = std::io::</code> and then pressing <code>CTRL + Space</code> to trigger autocompletion will only return a list of the reserved keywords (such as if, while, struct, etc).</p>\n\n<p>I'm guessing that the problem is that statement completion can't be turned on. How do I solve this?</p>\n"}, {"tags": ["rust", "ownership"], "comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1474351712, "post_id": 39586277, "comment_id": 66483100, "body": "I&#39;m by no means a Rust expert yet (I&#39;m working on it..). However, the ampersand before the variable name is incorrect. That said, it <i>is</i> what is causing this to work. If you change it to <code>let i = get(&amp;x);</code> instead, an <code>&amp;i32</code> is returned and the compiler correctly errors because of the move, as you expected. TLDR: I am unsure why the ampersand on the <i>variable name</i> is causing this to work. I could also just be forgetting something basic... so (shrug)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1474375171, "post_id": 39586277, "comment_id": 66497304, "body": "In Rust, <code>&amp;foo</code> is a <i>reference</i> and <code>*const foo</code> is a <i>raw pointer</i>. I&#39;ve updated your text to match your code."}], "answers": [{"comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1474353613, "post_id": 39587228, "comment_id": 66483931, "body": "This was my assumption but I could only find vague references to this possibility. Do you have any reference material? I am really struggling to find something that can explain this."}, {"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "reply_to_user": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1474354149, "post_id": 39587228, "comment_id": 66484211, "body": "@SimonWhitehead Unfortunately the <a href=\"https://doc.rust-lang.org/nightly/book/patterns.html#destructuring\" rel=\"nofollow noreferrer\">section on destructuring</a> is not explicit on this. But since the type of <code>i</code> is <code>i32</code> (no reference) it must be moved or copied. You can test that it doesn&#39;t work in general by replacing <code>i32</code> by something that is not copyable, e.g. some new struct <code>Int</code> (I just did that)."}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "reply_to_user": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 1, "creation_date": 1474354437, "post_id": 39587228, "comment_id": 66484360, "body": "@starblue I am aware of how the basics of copyable and non-copyable types work. What I don&#39;t understand is why the variable binding is pattern matched and then destructured &quot;in-place&quot;. Knowing this makes the copyable reasoning perfectly valid... but how do we get to the point of this being a pattern matching situation? Have I completely overlooked that you can pattern match in a let binding without the <code>match</code> keyword? If so.. that seems to be skipped in almost ALL Rust material I have come across."}, {"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1474354536, "post_id": 39587228, "comment_id": 66484415, "body": "<a href=\"https://play.rust-lang.org/?gist=6f92507aeed24ae49171b02c48051bfd&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 94713, "user_id": 1139697, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/5f136ddb684f39aaee1c028ee1950f6f?s=128&d=identicon&r=PG", "display_name": "Zeta", "link": "https://stackoverflow.com/users/1139697/zeta"}, "reply_to_user": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1474354711, "post_id": 39587228, "comment_id": 66484498, "body": "@SimonWhitehead: <code>let (v1, v2, result) = uglyfunction(v1, v2)</code> comes to mind. It&#39;s the example at the end of the <i>ownership</i> section, right before <i>borrowing</i>."}, {"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "reply_to_user": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1474355006, "post_id": 39587228, "comment_id": 66484684, "body": "@SimonWhitehead Yes you have overlooked that, but since it just sneaks in in examples (e.g. in <a href=\"https://doc.rust-lang.org/nightly/book/patterns.html#ignoring-bindings\" rel=\"nofollow noreferrer\">this section</a>) you have a valid excuse."}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1474356410, "post_id": 39587228, "comment_id": 66485466, "body": "Thanks for the references. I completely skipped over this part and didn&#39;t quite grasp the semantics of the left hand side of a let binding. I have never seen it used in this way either.. which added to the confusion. Thank you all!"}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 9, "last_activity_date": 1474358951, "last_edit_date": 1474358951, "creation_date": 1474353342, "answer_id": 39587228, "question_id": 39586277, "link": "https://stackoverflow.com/questions/39586277/how-is-my-reference-to-a-struct-member-still-valid-after-the-struct-was-moved/39587228#39587228", "title": "How is my reference to a struct member still valid after the struct was moved?", "body": "<p>The <code>let</code> expression gets pattern-matched and</p>\n\n<pre><code>let &amp;i = get(&amp;x); // i.e. a &amp;i32\n</code></pre>\n\n<p>Results in <code>i</code> being assigned to <code>i32</code> and since <code>i32</code> is copyable, there is no ownership violation.</p>\n\n<p>The Rust reference states that \"a let statement introduces a new set of variables, given by a pattern\" (<a href=\"https://doc.rust-lang.org/reference.html#let-statements\">source</a>) and \"patterns consist of some combination of literals, destructured arrays or enum constructors, structs and tuples, variable binding specifications\" (<a href=\"https://doc.rust-lang.org/reference.html#match-expressions\">source</a>).</p>\n\n<p>The left-hand side of the binding, <code>&amp;i</code> is not just a literal, which tells the compiler that it should try to pattern-match against the right-hand side expression. In this case it results in <code>i</code> pointing to a copyable value (<code>i32</code>) and not a reference (<code>&amp;i32</code>). In other words:</p>\n\n<pre><code>let &amp;i = get(&amp;x);\n</code></pre>\n\n<p>is equivalent to</p>\n\n<pre><code>let i = *get(&amp;x);\n</code></pre>\n\n<p>So <code>x</code> is not borrowed and <code>pr(x)</code> is still applicable.</p>\n"}], "owner": {"reputation": 14718, "user_id": 163454, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/bdef8bbea2467810a6a8164fc41db6e7?s=128&d=identicon&r=PG", "display_name": "Notinlist", "link": "https://stackoverflow.com/users/163454/notinlist"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 624, "favorite_count": 1, "accepted_answer_id": 39587228, "answer_count": 1, "score": 2, "last_activity_date": 1474375074, "creation_date": 1474349141, "last_edit_date": 1474375074, "question_id": 39586277, "link": "https://stackoverflow.com/questions/39586277/how-is-my-reference-to-a-struct-member-still-valid-after-the-struct-was-moved", "title": "How is my reference to a struct member still valid after the struct was moved?", "body": "<p>I'm creating a reference to a structure member using a function (named <code>get</code>), then I move the struct using another function (named <code>pr</code>), then I dereference the previously created pointer.</p>\n\n<p>Am I in the wrong here (a.k.a. working by accident), or is my reference is still valid by some rule?</p>\n\n<pre><code>struct MyStruct {\n    inner: i32,\n}\n\nfn get(a: &amp;MyStruct) -&gt; &amp;i32 {\n    return &amp;a.inner;\n}\n\nfn pr(a: MyStruct) {\n    println!(\"MyStruct {}\", a.inner);\n}\n\nfn main() {\n    println!(\"Hello, world!\");\n    let x = MyStruct { inner: 3 };\n    let &amp;i = get(&amp;x);\n    pr(x);\n    println!(\"i {}\", i);\n}\n</code></pre>\n\n<p>The <a href=\"https://play.rust-lang.org/\" rel=\"nofollow\">Rust playground</a> outputs:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Hello, world!\nMyStruct 3\ni 3\n</code></pre>\n"}, {"tags": ["vector", "rust"], "comments": [{"owner": {"reputation": 1342, "user_id": 4204307, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/149f206ac25aeef46535609435dc5c74?s=128&d=identicon&r=PG&f=1", "display_name": "Christopher Ian  Stern", "link": "https://stackoverflow.com/users/4204307/christopher-ian-stern"}, "edited": false, "score": 0, "creation_date": 1474341457, "post_id": 39585045, "comment_id": 66480114, "body": "Dosen&#39;t this make a vector of empty strings?  Just varying the number?"}], "answers": [{"comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 1, "creation_date": 1474340901, "post_id": 39585088, "comment_id": 66479974, "body": "That or <code>vec.push(s.clone())</code>."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 2, "creation_date": 1474340956, "post_id": 39585088, "comment_id": 66479985, "body": "But <code>String::new()</code> doesn&#39;t allocate right away. :)"}, {"owner": {"reputation": 1498, "user_id": 6844327, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9fWJl.jpg?s=128&g=1", "display_name": "HiDefender", "link": "https://stackoverflow.com/users/6844327/hidefender"}, "edited": false, "score": 0, "creation_date": 1474370773, "post_id": 39585088, "comment_id": 66494425, "body": "Okay, so vec becomes the owner of s. Thank you."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 2, "last_activity_date": 1474340782, "creation_date": 1474340782, "answer_id": 39585088, "question_id": 39585045, "link": "https://stackoverflow.com/questions/39585045/borrowing-changes-type-of-vector/39585088#39585088", "title": "Borrowing changes type of Vector", "body": "<p>When you do <code>vec.push(s)</code>, <code>s</code> is moved into the vector, which means <code>s</code> no longer holds a meaningful value. All you need to do is reset <code>s</code> to a new <code>String</code>.</p>\n\n<pre><code>fn split_line(line: &amp;str) -&gt; Vec&lt;String&gt; {\n    let mut chars = line.chars();\n    let mut vec = Vec::new();\n    let mut s = String::new();\n    while let Some(x) = chars.next() {\n        match x {\n            '&lt;' =&gt; {},\n            '/' =&gt; {\n                vec.push(s);\n                break;\n            }\n            ' ' =&gt; {\n                vec.push(s);\n                s = String::new();\n            }\n            _ =&gt; s.push(x),\n        }\n    }\n    vec\n}\n</code></pre>\n"}], "owner": {"reputation": 1498, "user_id": 6844327, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9fWJl.jpg?s=128&g=1", "display_name": "HiDefender", "link": "https://stackoverflow.com/users/6844327/hidefender"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 57, "favorite_count": 0, "accepted_answer_id": 39585088, "answer_count": 1, "score": 0, "last_activity_date": 1474360390, "creation_date": 1474340537, "last_edit_date": 1474360390, "question_id": 39585045, "link": "https://stackoverflow.com/questions/39585045/borrowing-changes-type-of-vector", "title": "Borrowing changes type of Vector", "body": "<p>Originally I wrote this:</p>\n\n<pre><code>fn split_line(line: &amp;String) -&gt; Vec&lt;String&gt; {\n    let mut chars = line.chars();\n    let mut vec = Vec::new();\n    let mut s = String::from(\"\");\n    while let Some(x) = chars.next() {\n        match x {\n            '&lt;' =&gt; {},\n            '/' =&gt; {\n                        vec.push(s);\n                        break;\n                    }\n            ' ' =&gt; {\n                        vec.push(s);\n                        s.clear();\n                    }\n            _ =&gt; s.push(x),\n        }\n    }\n    vec\n}\n</code></pre>\n\n<p>and received this error:\n<code>use of moved value: 's'</code>\nso I changed <code>vec.push(s)</code> to <code>vec.push(&amp;s)</code>, which removed my original error, but changed vec from <code>std::vec::Vec&lt;std::string::String&gt;</code> to <code>std::vec::Vec&lt;&amp;std::string::String&gt;</code>.</p>\n\n<p>Why? How can I borrow s without changing vec?</p>\n"}, {"tags": ["compilation", "rust", "llvm"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1474299965, "post_id": 39577078, "comment_id": 66464081, "body": "For my own curiosity, what argument(s)? Would something like a Makefile be an out-of-the-box solution?"}, {"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1474301823, "post_id": 39577078, "comment_id": 66465226, "body": "One example would be setting unroll_threshold, another to skip some time-consuming passes. I hope to get away from make, actually..."}, {"owner": {"reputation": 659, "user_id": 1886200, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/3c2cfc7d5826f8d4a2b0b941ac461324?s=128&d=identicon&r=PG", "display_name": "Houss_gc", "link": "https://stackoverflow.com/users/1886200/houss-gc"}, "edited": false, "score": 0, "creation_date": 1474312445, "post_id": 39577078, "comment_id": 66470833, "body": "maybe you need a build script <a href=\"http://doc.crates.io/build-script.html\" rel=\"nofollow noreferrer\">link</a>"}, {"owner": {"reputation": 659, "user_id": 1886200, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/3c2cfc7d5826f8d4a2b0b941ac461324?s=128&d=identicon&r=PG", "display_name": "Houss_gc", "link": "https://stackoverflow.com/users/1886200/houss-gc"}, "edited": false, "score": 0, "creation_date": 1474312770, "post_id": 39577078, "comment_id": 66471027, "body": "for more interactive responses i suggest going on the irc channel rust-beginners on mozilla node"}], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 88, "favorite_count": 0, "answer_count": 0, "score": 2, "last_activity_date": 1474347956, "creation_date": 1474299801, "last_edit_date": 1474347956, "question_id": 39577078, "link": "https://stackoverflow.com/questions/39577078/how-to-declare-llvm-arguments-from-within-the-code", "title": "How to declare LLVM arguments from within the code?", "body": "<p>I want to compile a module with a specific LLVM argument. I know about the <code>-C llvm-args='..'</code> command line argument to rustc, but I don't want to have to ask whoever deploys the code to remember the command line.</p>\n\n<p>Is there a way to put such arguments in the code (similar to <code>#[link_args(..)]</code>)?</p>\n"}, {"tags": ["rust"], "owner": {"reputation": 21, "user_id": 6847757, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ccd85d0752fd12bad63315634c73f0b7?s=128&d=identicon&r=PG&f=1", "display_name": "Sackery Porsein", "link": "https://stackoverflow.com/users/6847757/sackery-porsein"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 84, "favorite_count": 0, "closed_date": 1474272847, "answer_count": 0, "score": 1, "last_activity_date": 1474289166, "creation_date": 1474271524, "last_edit_date": 1474289166, "question_id": 39567967, "link": "https://stackoverflow.com/questions/39567967/how-to-convert-vecstring-to-a-separated-string", "closed_reason": "Duplicate", "title": "How to convert Vec&lt;String&gt; to a separated String?", "body": "<p>For example:</p>\n\n<pre><code>let mut v = vec![\"hello\", \"world\"];\nv.split(\" \") // Expected result: \"hello world\"\n</code></pre>\n"}, {"tags": ["iterator", "rust", "closures"], "answers": [{"comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 1, "creation_date": 1474247643, "post_id": 39564081, "comment_id": 66438739, "body": "This is one of those things in Rust that really does need more coverage. I myself have run in to this exact question about 10 times and still have trouble eyeballing a solution without a little bit of searching through documentation/forums."}, {"owner": {"reputation": 381, "user_id": 5133242, "user_type": "registered", "accept_rate": 14, "profile_image": "https://i.stack.imgur.com/7joIv.jpg?s=128&g=1", "display_name": "Liam", "link": "https://stackoverflow.com/users/5133242/liam"}, "reply_to_user": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1474250505, "post_id": 39564081, "comment_id": 66439293, "body": "@SimonWhitehead I agree. I like learning Rust a lot, but things like this can take me hours to figure out (and then I might not even understand the solution). I know that they try really hard to keep the Rust errors very helpful, but the online documentation could be better. I guess that&#39;s a problem that all young languages have though."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 9, "last_activity_date": 1474247308, "creation_date": 1474247308, "answer_id": 39564081, "question_id": 39563998, "link": "https://stackoverflow.com/questions/39563998/how-do-i-pass-a-boxed-closure-to-take-while/39564081#39564081", "title": "How do I pass a boxed closure to `take_while`?", "body": "<p>There are two issues in your code.</p>\n\n<p>First, <a href=\"https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.take_while\"><code>take_while</code></a> passes the value by reference to the function (notice the <code>&amp;</code> in <code>where P: FnMut(&amp;Self::Item) -&gt; bool</code>), whereas your closure expects to receive it by value.</p>\n\n<pre><code>fn clos(a: char) -&gt; Box&lt;Fn(&amp;char) -&gt; bool&gt; {\n    Box::new(move |&amp;b| a != b)\n}\n</code></pre>\n\n<p>Then there's the issue that <code>Box&lt;Fn(&amp;char) -&gt; bool&gt;</code> does not implement <code>FnMut(&amp;char) -&gt; bool</code>. If we look at the documentation for <a href=\"https://doc.rust-lang.org/stable/std/ops/trait.FnMut.html\"><code>FnMut</code></a>, we'll see that the standard library provides these implementations:</p>\n\n<pre><code>impl&lt;'a, A, F&gt; FnMut&lt;A&gt; for &amp;'a F where F: Fn&lt;A&gt; + ?Sized\nimpl&lt;'a, A, F&gt; FnMut&lt;A&gt; for &amp;'a mut F where F: FnMut&lt;A&gt; + ?Sized\n</code></pre>\n\n<p>OK, so <code>FnMut</code> is implemented for references to implementations of <code>Fn</code>. We have an <code>Fn</code> trait object in our hands, and it implements <code>Fn</code>, so that's fine. We just need to turn the <code>Box&lt;Fn&gt;</code> into a <code>&amp;Fn</code>. We first need to dereference the box, which produces an lvalue, then take a reference to this lvalue to produce a <code>&amp;Fn</code>.</p>\n\n<pre><code>fn main() {\n    let s = \"hello!\";\n    let iter = s.chars();\n    let s2 = iter.take_while(&amp;*clos('o')).collect::&lt;String&gt;();\n    println!(\"{}\", s2);\n}\n</code></pre>\n"}], "owner": {"reputation": 381, "user_id": 5133242, "user_type": "registered", "accept_rate": 14, "profile_image": "https://i.stack.imgur.com/7joIv.jpg?s=128&g=1", "display_name": "Liam", "link": "https://stackoverflow.com/users/5133242/liam"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 293, "favorite_count": 1, "answer_count": 1, "score": 5, "last_activity_date": 1474248549, "creation_date": 1474246318, "last_edit_date": 1495535651, "question_id": 39563998, "link": "https://stackoverflow.com/questions/39563998/how-do-i-pass-a-boxed-closure-to-take-while", "title": "How do I pass a boxed closure to `take_while`?", "body": "<p>The iterator method <code>take_while</code> takes as its argument a closure.</p>\n\n<p>For example:</p>\n\n<pre><code>fn main() {\n    let s = \"hello!\";\n    let iter = s.chars();\n    let s2 = iter.take_while(|x| *x != 'o').collect::&lt;String&gt;();\n    //                       ^^^^^^^^^^^^^\n    //                          closure\n\n    println!(\"{}\", s2);   // hell\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=947e01e338d5f508424771720f5cb9a7&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">playground link</a></p>\n\n<p>This is fine for simple closures, but if I want a more complicated predicate, I don't want to write it directly in the <code>take_while</code> argument. Rather, I would like to return the closure from a function.</p>\n\n<p>I seem to be having trouble getting this to work. Here is my naive attempt: </p>\n\n<pre><code>fn clos(a: char) -&gt; Box&lt;Fn(char) -&gt; bool&gt; {\n    Box::new(move |b| a != b)\n}\n\nfn main() {\n    // println!(\"{}\", clos('a')('b'));   // &lt;-- true\n    //                      ^--- Using the closure here is fine\n    let s = \"hello!\";\n    let mut iter = s.chars();\n    let s2 = iter.take_while( clos('o') ).collect::&lt;String&gt;();\n    //                           ^--- This causes lots of issues\n\n    println!(\"{}\", s2);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=1894cb14d1abfb88f9da819729af236a&amp;version=nightly&amp;backtrace=0\" rel=\"nofollow noreferrer\">playground link</a></p>\n\n<p>However, the error that it causes has proven difficult to understand:</p>\n\n<pre><code>error[E0277]: the trait bound `for&lt;'r&gt; Box&lt;std::ops::Fn(char) -&gt; bool&gt;: std::ops::FnMut&lt;(&amp;'r char,)&gt;` is not satisfied\n  --&gt; &lt;anon&gt;:11:23\n   |\n11 |         let s2 = iter.take_while( clos('o') ).collect::&lt;String&gt;();\n   |                       ^^^^^^^^^^ trait `for&lt;'r&gt; Box&lt;std::ops::Fn(char) -&gt; bool&gt;: std::ops::FnMut&lt;(&amp;'r char,)&gt;` not satisfied\n\nerror[E0277]: the trait bound `for&lt;'r&gt; Box&lt;std::ops::Fn(char) -&gt; bool&gt;: std::ops::FnOnce&lt;(&amp;'r char,)&gt;` is not satisfied\n  --&gt; &lt;anon&gt;:11:23\n   |\n11 |         let s2 = iter.take_while( clos('o') ).collect::&lt;String&gt;();\n   |                       ^^^^^^^^^^ trait `for&lt;'r&gt; Box&lt;std::ops::Fn(char) -&gt; bool&gt;: std::ops::FnOnce&lt;(&amp;'r char,)&gt;` not satisfied\n   |\n   = help: the following implementations were found:\n   = help:   &lt;Box&lt;std::boxed::FnBox&lt;A, Output=R&gt; + 'a&gt; as std::ops::FnOnce&lt;A&gt;&gt;\n   = help:   &lt;Box&lt;std::boxed::FnBox&lt;A, Output=R&gt; + Send + 'a&gt; as std::ops::FnOnce&lt;A&gt;&gt;\n\nerror: no method named `collect` found for type `std::iter::TakeWhile&lt;std::str::Chars&lt;'_&gt;, Box&lt;std::ops::Fn(char) -&gt; bool&gt;&gt;` in the current scope\n  --&gt; &lt;anon&gt;:11:47\n   |\n11 |         let s2 = iter.take_while( clos('o') ).collect::&lt;String&gt;();\n   |                                               ^^^^^^^\n   |\n   = note: the method `collect` exists but the following trait bounds were not satisfied: `Box&lt;std::ops::Fn(char) -&gt; bool&gt; : std::ops::FnMut&lt;(&amp;char,)&gt;`, `std::iter::TakeWhile&lt;std::str::Chars&lt;'_&gt;, Box&lt;std::ops::Fn(char) -&gt; bool&gt;&gt; : std::iter::Iterator`\n\nerror: aborting due to 3 previous errors\n</code></pre>\n\n<p>I have tried some other things, including using <code>FnBox</code>, but it didn't work. I haven't used closures that much, so I'd really like to understand what is going wrong, as well as how to fix it. </p>\n\n<p><a href=\"https://stackoverflow.com/questions/37779313/the-trait-bound-is-not-satisfied\">Related</a></p>\n"}, {"tags": ["optimization", "hashmap", "rust"], "answers": [{"comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1474218285, "post_id": 39560349, "comment_id": 66431246, "body": "Thanks! Was going to ask a question on this topic in fact since the docs currently don&#39;t show how to use entries this way."}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "edited": false, "score": 2, "creation_date": 1474234912, "post_id": 39560349, "comment_id": 66436400, "body": "I would take a PR to add it!"}], "tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": true, "score": 11, "last_activity_date": 1474400012, "last_edit_date": 1474400012, "creation_date": 1474218196, "answer_id": 39560349, "question_id": 39560296, "link": "https://stackoverflow.com/questions/39560296/best-way-to-conditionally-add-to-a-hashmap-with-as-few-lookups-as-possible/39560349#39560349", "title": "Best way to conditionally add to a HashMap, with as few lookups as possible?", "body": "<p>You can just match the <code>Entry</code>:</p>\n\n<pre><code>use std::collections::hash_map::Entry::{Occupied, Vacant}; \n\nmatch map.entry(key) {\n    Occupied(val) =&gt; {\n        some_update_logic(val.get());\n    },\n    Vacant(entry) =&gt; {\n        let val = entry.insert(create_val());\n        some_creation_logic(val);\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 191, "favorite_count": 2, "accepted_answer_id": 39560349, "answer_count": 1, "score": 3, "last_activity_date": 1474447847, "creation_date": 1474217834, "last_edit_date": 1474447847, "question_id": 39560296, "link": "https://stackoverflow.com/questions/39560296/best-way-to-conditionally-add-to-a-hashmap-with-as-few-lookups-as-possible", "title": "Best way to conditionally add to a HashMap, with as few lookups as possible?", "body": "<p>When using hash maps, it is common to want to add a <code>key:value</code> pair if the key is not already present.</p>\n\n<p>This reads well but isn't as optimal as it could be.</p>\n\n<pre><code>if !map.contains(key) {\n    let val = create_val();\n    map.insert(key, val);\n    some_creation_logic(val);\n} else {\n    let val = map[key];\n    some_update_logic(val);\n}\n</code></pre>\n\n<p>While this works it will always do 2 lookups.</p>\n\n<p>The closest I could get was to use <code>Entry.or_insert</code> (or <code>or_insert_with</code>), counting the length so the <code>else</code> branch can be taken.</p>\n\n<pre><code>let map_len_prev = map.len();\nlet val = map.or_insert_with(key, create_val);\nif map_len_prev != map.len() {\n    some_creation_logic(val);\n} else {\n    some_update_logic(val);\n}\n</code></pre>\n\n<p>Is there a clearer way to insert a value when needed while keeping a way of running both branches of logic for cases it does/doesn't already exist?</p>\n"}, {"tags": ["rust", "closures", "traits", "lifetime"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1474217771, "post_id": 39558633, "comment_id": 66431072, "body": "This would work if you declared <code>has_hrl</code> like <code>fn has_hrl&lt;&#39;a, F: Fn(&amp;&#39;a ()) -&gt; &amp;&#39;a ()&gt;(_: F) {}</code>. My power level is insufficient to explain why the lifetime needs to be explicit, though."}], "answers": [{"comments": [{"owner": {"reputation": 1457, "user_id": 2849934, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3ff0a46f18c8d548fa91c12b922290b6?s=128&d=identicon&r=PG", "display_name": "John", "link": "https://stackoverflow.com/users/2849934/john"}, "edited": false, "score": 0, "creation_date": 1474226024, "post_id": 39560379, "comment_id": 66433828, "body": "I just tried splitting the statement <code>has_hrl(|x| func(x));</code> into 2 statements: <code>let f = |x| func(x); has_hrl(f);</code> and the same error shows up. Somehow appearing as an argument is handled differently from a variable binding (a binding should be pinned to a fully concrete type). So I am guessing even Higher Ranked Lifetimes are not yet well-captured by Rust&#39;s current type system (and uses some kinda tricks behind the scenes)?"}, {"owner": {"reputation": 997, "user_id": 2175951, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/24d1f324f6f5c47ff5e10721c2b115c0?s=128&d=identicon&r=PG", "display_name": "iopq", "link": "https://stackoverflow.com/users/2175951/iopq"}, "edited": false, "score": 0, "creation_date": 1474281414, "post_id": 39560379, "comment_id": 66451794, "body": "I understand that it has higher ranked lifetimes, but I still don&#39;t understand why it doesn&#39;t work, it seems like this is something that should work."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 997, "user_id": 2175951, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/24d1f324f6f5c47ff5e10721c2b115c0?s=128&d=identicon&r=PG", "display_name": "iopq", "link": "https://stackoverflow.com/users/2175951/iopq"}, "edited": false, "score": 0, "creation_date": 1474323687, "post_id": 39560379, "comment_id": 66475851, "body": "@iopq: <a href=\"https://internals.rust-lang.org/t/higher-kinded-types-the-difference-between-giving-up-and-moving-forward/3908/4\" rel=\"nofollow noreferrer\">You&#39;re not alone...</a>"}, {"owner": {"reputation": 5160, "user_id": 553092, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d161f230b3456d0bfd740154ae16e0a3?s=128&d=identicon&r=PG", "display_name": "Steven", "link": "https://stackoverflow.com/users/553092/steven"}, "edited": false, "score": 1, "creation_date": 1474475051, "post_id": 39560379, "comment_id": 66549309, "body": "Your first part isn&#39;t quite correct. The compiler <i>can</i> instantiate a single <code>func::&lt;&amp;&#39;a ()&gt;</code> for all <code>&#39;a</code>; it&#39;s doing exactly this inside <code>func2</code>. That is, rustc instantiates exactly one copy of <code>func2</code> which means there must exist a single <code>func::&lt;&amp;&#39;a ()&gt;</code> valid for all <code>&#39;a</code>. Unfortunately, rustc doesn&#39;t appear to expose this fact in the type system."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 5160, "user_id": 553092, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d161f230b3456d0bfd740154ae16e0a3?s=128&d=identicon&r=PG", "display_name": "Steven", "link": "https://stackoverflow.com/users/553092/steven"}, "edited": false, "score": 0, "creation_date": 1474480540, "post_id": 39560379, "comment_id": 66552327, "body": "@Steven: It&#39;s true that there is a single <code>func::&lt;&amp;&#39;a ()&gt;</code> for all <code>&#39;a</code>, as lifetime parameters are <a href=\"https://en.wikipedia.org/wiki/Type_erasure\" rel=\"nofollow noreferrer\">erased</a>, unlike type parameters. This may be why we have higher-rank lifetimes but not higher-rank types (e.g. <code>for&lt;T&gt; Fn(T)</code>), which might be more complex to implement."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 7, "last_activity_date": 1474218348, "last_edit_date": 1495542772, "creation_date": 1474218348, "answer_id": 39560379, "question_id": 39558633, "link": "https://stackoverflow.com/questions/39558633/higher-rank-lifetimes-and-generics-not-playing-nicely/39560379#39560379", "title": "Higher rank lifetimes and generics not playing nicely", "body": "<p>In this expression:</p>\n\n<pre><code>has_hrl(func)\n</code></pre>\n\n<p>The compiler is forced to pick one specific instance of <code>func</code>. <code>func</code> is generic over <code>F: Foo</code>, and for all <code>'a</code>, <code>&amp;'a ()</code> implements <code>Foo</code>, but the compiler can only choose one particular <code>'a</code> to instantiate <code>func</code>, because a type variable cannot represent a multitude of types. Therefore, <code>func::&lt;&amp;'a ()&gt;</code> does not implement <code>for&lt;'a&gt; Fn(&amp;'a ()) -&gt; &amp;'a ()</code>, it only implements <code>Fn(&amp;'x ()) -&gt; &amp;'x ()</code> for one specific lifetime <code>'x</code>.</p>\n\n<blockquote>\n  <p>This would work if you declared <code>has_hrl</code> like <code>fn has_hrl&lt;'a, F: Fn(&amp;'a ()) -&gt; &amp;'a ()&gt;(_: F) {}</code>. My power level is insufficient to explain why the lifetime needs to be explicit, though. \u2013 <a href=\"https://stackoverflow.com/users/1870153/ljedrz\">ljedrz</a></p>\n</blockquote>\n\n<p>That's because the original declaration has an implied higher-ranked lifetime bound (the bound is equivalent to <code>F: for&lt;'a&gt; Fn(&amp;'a ()) -&gt; &amp;'a ()</code>), which means that <code>F</code> must implement <code>Fn(&amp;'a ()) -&gt; &amp;'a ()</code> for <em>all</em> lifetimes <code>'a</code>. Your version only requires <code>F</code> to implement <code>Fn(&amp;'a ()) -&gt; &amp;'a ()</code> for one concrete lifetime. You'll also find that this version doesn't work if <code>has_hrl</code> tries to call the closure with a lifetime that is local to the <code>has_hrl</code> function, because the caller cannot possibly pass that lifetime as a parameter (which is why higher-ranked lifetime bounds were introduced).</p>\n"}], "owner": {"reputation": 997, "user_id": 2175951, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/24d1f324f6f5c47ff5e10721c2b115c0?s=128&d=identicon&r=PG", "display_name": "iopq", "link": "https://stackoverflow.com/users/2175951/iopq"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 375, "favorite_count": 0, "accepted_answer_id": 39560379, "answer_count": 1, "score": 2, "last_activity_date": 1474236792, "creation_date": 1474208364, "last_edit_date": 1474236792, "question_id": 39558633, "link": "https://stackoverflow.com/questions/39558633/higher-rank-lifetimes-and-generics-not-playing-nicely", "title": "Higher rank lifetimes and generics not playing nicely", "body": "<p>In the code here</p>\n\n<pre><code>trait Foo {\n    type Output;\n    fn foo(self) -&gt; Self::Output;\n}\n\nimpl&lt;'a&gt; Foo for &amp;'a () {\n    type Output = &amp;'a ();\n    fn foo(self) -&gt; Self::Output {\n        self\n    }\n}\n\nfn func&lt;F: Foo&gt;(f: F) -&gt; F::Output {\n    f.foo()\n}\n\nfn func2&lt;'a&gt;(f: &amp;'a ()) -&gt; &amp;'a () {\n    func::&lt;&amp;'a ()&gt;(f)\n}\n\nfn has_hrl&lt;F: Fn(&amp;()) -&gt; &amp;()&gt;(f: F) {}\n\nfn main() {\n    //has_hrl(func); // FAILS\n    has_hrl(func2);\n    has_hrl(|x| func(x));\n}\n</code></pre>\n\n<p>We would like to do <code>has_hrl(func)</code>, but Rust only accepts the closure <code>has_hrl(|x| func(x))</code>. Why is that? Because it works with concrete types like in <code>func2</code>, but not with generic types.</p>\n"}, {"tags": ["macros", "rust"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 7, "last_activity_date": 1474187876, "creation_date": 1474187876, "answer_id": 39555683, "question_id": 39555539, "link": "https://stackoverflow.com/questions/39555539/can-macros-expand-array-vector-into-multiple-indexed-arguments/39555683#39555683", "title": "Can macros expand array/vector into multiple indexed arguments?", "body": "<p>This is impossible in two different ways.</p>\n\n<p>First, to quote the answer to the question you yourself linked: \"No; the result of a macro <strong>must</strong> be a complete grammar construct like an expression or an item. You <strong>absolutely cannot</strong> have random bits of syntax like a comma or a closing brace.\"  Just because it isn't <em>exactly</em> a comma doesn't change matters: a collection of function arguments <em>are not</em> a complete grammar construct.</p>\n\n<p>Secondly, macros cannot parse the output of other macros.  This requires eager expansion, which Rust doesn't have.  <a href=\"https://danielkeep.github.io/tlborm/book/pat-push-down-accumulation.html\">You can only do this using recursion</a>.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 787, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1474212459, "creation_date": 1474186658, "last_edit_date": 1495535652, "question_id": 39555539, "link": "https://stackoverflow.com/questions/39555539/can-macros-expand-array-vector-into-multiple-indexed-arguments", "title": "Can macros expand array/vector into multiple indexed arguments?", "body": "<p>Is it possible to write a macro that expands an expression into multiple indexed arguments, which can be passed to a function or another macro?</p>\n\n<p>See this simple self contained example.<br>The aim is to have <code>unpack3</code> expand <code>v</code> into <code>v[0], v[1], v[2]</code>.</p>\n\n<pre><code>macro_rules! elem {\n    ($val:expr, $($var:expr), *) =&gt; {\n        $($val == $var) || *\n    }\n}\n\n// attempt to expand an array.\nmacro_rules! unpack3 {\n    ($v:expr) =&gt; {\n        $v[0], $v[1], $v[2]\n    }\n}\n\nfn main() {\n    let a = 2;\n    let vars = [0, 1, 3];\n    // works!\n    if elem!(a, vars[0], vars[1], vars[2]) {\n        println!(\"Found!\");\n    }\n    // fails!\n    if elem!(a, unpack3!(vars)) {\n        println!(\"Found!\");\n    }\n}\n</code></pre>\n\n<p>The second example fails, is it possible to make this work?</p>\n\n<p>Possible solutions could include:</p>\n\n<ul>\n<li>Changing use of macro grammar.</li>\n<li>Using tuples, then expanding into arguments after.</li>\n<li>Re-arranging the expressions to workaround macro constraints.</li>\n</ul>\n\n<hr>\n\n<p>Note, this may be related to <a href=\"https://stackoverflow.com/questions/31195529/escaping-commas-in-macro-output\">Escaping commas in macro output</a> but don't think its a duplicate.</p>\n"}, {"tags": ["rust", "borrow-checker"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1474145268, "post_id": 39551551, "comment_id": 66414767, "body": "<i>but the whole code is too much to post here</i> \u2014 I <b>guarantee</b> that you can make the code small enough to post here while still reproducing the same error. See <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1474145655, "post_id": 39551551, "comment_id": 66414848, "body": "Probably a duplicate of <a href=\"http://stackoverflow.com/q/32300132/155423\">stackoverflow.com/q/32300132/155423</a>; maybe <a href=\"http://stackoverflow.com/q/20698384/155423\">stackoverflow.com/q/20698384/155423</a> or <a href=\"http://stackoverflow.com/q/28833622/155423\">stackoverflow.com/q/28833622/155423</a> or <a href=\"http://stackoverflow.com/q/29893978/155423\">stackoverflow.com/q/29893978/155423</a>. Or any question about mutable aliasing. <a href=\"https://doc.rust-lang.org/error-index.html#E0499\" rel=\"nofollow noreferrer\">Like the error says</a>, you cannot borrow <b>anything</b> as mutable more than once at a time."}, {"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 3, "creation_date": 1474148260, "post_id": 39551551, "comment_id": 66415513, "body": "&quot;bi-directional&quot; - &quot;I don&#39;t think there&#39;s an ownership problem&quot; - There&#39;s always an ownership problem once you&#39;ve got bidirectional relationships."}, {"owner": {"reputation": 55, "user_id": 2886152, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/162a94170f6c646c99c480a42f8b8670?s=128&d=identicon&r=PG&f=1", "display_name": "Leopard2A5", "link": "https://stackoverflow.com/users/2886152/leopard2a5"}, "reply_to_user": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 0, "creation_date": 1474194112, "post_id": 39551551, "comment_id": 66424028, "body": "@SebastianRedl why thank you for this constructive comment. Good thing you remembered to keep the &quot;read-only&quot; out of your quote...! I may be a noob when it comes to rust, but a non-mut ref has nothing to do with ownership."}, {"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 2, "creation_date": 1474209529, "post_id": 39551551, "comment_id": 66428211, "body": "@Leopard2A5 References, mut or non-mut, affect ownership exactly the same way: the owner must keep the object alive until the references are gone. Mut or non-mut just influences what other references may be taken. Yes, mut references make bi-directional even more difficult because of aliasing issues, but Rust makes any kind of bi-directional relationship difficult. Just look at how tricky it is to implement a doubly linked list. The bottom line is that in Rust, it is very often the best choice to redesign until the bi-directional relationships are gone."}, {"owner": {"reputation": 55, "user_id": 2886152, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/162a94170f6c646c99c480a42f8b8670?s=128&d=identicon&r=PG&f=1", "display_name": "Leopard2A5", "link": "https://stackoverflow.com/users/2886152/leopard2a5"}, "reply_to_user": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 0, "creation_date": 1474266403, "post_id": 39551551, "comment_id": 66443534, "body": "@SebastianRedl and why not just <i>explain</i> it to me like this in the first place? why make your first comment sound condescending? Anyways, thank you for the explanation."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1474161931, "post_id": 39551965, "comment_id": 66417970, "body": "IMO, the &quot;better&quot; (but differently structured) solution is to not let child components have references to parent structures, but instead to only pass down the parent reference when needed by a specific child method."}, {"owner": {"reputation": 55, "user_id": 2886152, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/162a94170f6c646c99c480a42f8b8670?s=128&d=identicon&r=PG&f=1", "display_name": "Leopard2A5", "link": "https://stackoverflow.com/users/2886152/leopard2a5"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1474194232, "post_id": 39551965, "comment_id": 66424065, "body": "@Shepmaster I want to store a ref to the cells in the ship in order to easily find out if all cells of a ship have been hit. But you can see i come from a garbage-collected background :)"}, {"owner": {"reputation": 55, "user_id": 2886152, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/162a94170f6c646c99c480a42f8b8670?s=128&d=identicon&r=PG&f=1", "display_name": "Leopard2A5", "link": "https://stackoverflow.com/users/2886152/leopard2a5"}, "edited": false, "score": 0, "creation_date": 1474194314, "post_id": 39551965, "comment_id": 66424094, "body": "Thank you for the answer Francis! I can&#39;t say that i fully understand it on the first read :) I see i still have a lot to learn about rust."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 55, "user_id": 2886152, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/162a94170f6c646c99c480a42f8b8670?s=128&d=identicon&r=PG&f=1", "display_name": "Leopard2A5", "link": "https://stackoverflow.com/users/2886152/leopard2a5"}, "edited": false, "score": 0, "creation_date": 1474237228, "post_id": 39551965, "comment_id": 66436884, "body": "@Leopard2A5 if you have some method <code>impl Ship { fn all_were_hit(&amp;self) -&gt; bool {} }</code>, try changing it to <code>impl Ship { fn all_were_hit(&amp;self, &amp;Battlefield) -&gt; bool {} }</code> (or whatever types are appropriate) and see how it goes."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 3, "last_activity_date": 1474148067, "creation_date": 1474148067, "answer_id": 39551965, "question_id": 39551551, "link": "https://stackoverflow.com/questions/39551551/satisfying-the-rust-borrow-checker-with-structs/39551965#39551965", "title": "Satisfying the Rust borrow checker with structs", "body": "<p>From the signature of <code>Battlefield::place_ship</code>, the compiler must suppose that the function may store a mutable reference to <code>ship</code> in <code>self</code> (the <code>Battlefield&lt;'a&gt;</code> object). That's because you're linking the lifetime of the <code>ship</code> parameter with the lifetime parameter of <code>Battlefield</code>, and the compiler only looks at the high-level interface of a struct, so that all structs that look the same behave the same (otherwise, adding a field to a struct, even if all fields are private, might be a breaking change!).</p>\n\n<p>If you change the declaration of <code>ship</code> from <code>ship: &amp;'a mut Ship</code> to <code>ship: &amp;mut Ship&lt;'a&gt;</code>, you'll see that the error goes away (if the method's body does nothing with the parameter). However, if you try to store a copy of this pointer in <code>Cell</code>'s <code>ship</code> field, this will no longer work, as now the compiler cannot prove that the <code>Ship</code> will live long enough.</p>\n\n<p>You'll keep running into issues with lifetimes, because what you're trying to do will not work with simple references. Right now, there's a contradiction in your definitions of <code>Battlefield</code>, <code>Cell</code> and <code>Ship</code>: you're declaring that <code>Battlefield</code> holds <code>Cell</code>s who references <code>Ship</code>s that outlive the <code>Battlefield</code>. However, at the same time, you're declaring that <code>Ship</code> references <code>Cell</code>s that outlive the <code>Ship</code>. The only way this will work is if you declare the <code>Battlefield</code> and the <code>Ship</code>s <strong>on the same <code>let</code> statement</strong> (as the compiler will assign the same lifetime to all values).</p>\n\n<pre><code>let (mut ship, mut bf) = (Ship::new(3), Battlefield::new());\n</code></pre>\n\n<p>You'll also need to change <code>&amp;mut self</code> to <code>&amp;'a mut self</code> to assign a <code>Cell</code> from <code>self</code> to a <code>Ship</code>. But then as soon as you call <code>place_ship</code>, you'll effectively end up locking the <code>Battlefield</code>, as the compiler will suppose that the <code>Battlefield</code> may store a mutable reference to itself (which it can because it takes a mutable reference to itself as a parameter!).</p>\n\n<p>A better approach would be to use <a href=\"https://doc.rust-lang.org/stable/std/rc/struct.Rc.html\" rel=\"nofollow\">reference counting</a> instead of simple references combined with <a href=\"https://doc.rust-lang.org/stable/std/cell/struct.RefCell.html\" rel=\"nofollow\">interior mutability</a> instead of explicit mutability. Reference counting means that you won't have to deal with lifetimes (though here's you'd have to break cycles with <a href=\"https://doc.rust-lang.org/stable/std/rc/struct.Weak.html\" rel=\"nofollow\">weak pointers</a> in order to avoid memory leaks). Interior mutability means that you can pass immutable references instead of mutable references; this will avoid <code>cannot borrow x as mutable more than once</code> compiler errors since there will be no mutable borrows at all.</p>\n"}], "owner": {"reputation": 55, "user_id": 2886152, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/162a94170f6c646c99c480a42f8b8670?s=128&d=identicon&r=PG&f=1", "display_name": "Leopard2A5", "link": "https://stackoverflow.com/users/2886152/leopard2a5"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 829, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1474148067, "creation_date": 1474145080, "last_edit_date": 1474145208, "question_id": 39551551, "link": "https://stackoverflow.com/questions/39551551/satisfying-the-rust-borrow-checker-with-structs", "title": "Satisfying the Rust borrow checker with structs", "body": "<p>I'm trying to learn Rust, and as you can imagine, the borrow checker is my biggest adversary. So here's my setup, it's a kind of crate for the game battleship. The game is based on the <code>Battlefield</code> struct, which consists of <code>Cell</code>s. A <code>Cell</code> can reference a <code>Ship</code> and a <code>Ship</code> has a vector of all <code>Cell</code>s it's referenced by, so it's a bi-directional read-only relationship.</p>\n\n<pre><code>pub struct Battlefield&lt;'a&gt; {\n    cells: Vec&lt;Vec&lt;Cell&lt;'a&gt;&gt;&gt;,\n}\n\n#[derive(Debug, PartialEq)]\npub struct Cell&lt;'a&gt; {\n    ship: Option&lt;&amp;'a Ship&lt;'a&gt;&gt;\n}\n\n#[derive(Debug, PartialEq)]\npub struct Ship&lt;'a&gt; {\n    length: usize,\n    cells: Vec&lt;&amp;'a Cell&lt;'a&gt;&gt;,\n}\n</code></pre>\n\n<p>My problem is <code>Battlefield</code>'s <code>place_ship</code> function:</p>\n\n<pre><code>impl&lt;'a&gt; Battlefield&lt;'a&gt; {\n    pub fn place_ship(&amp;mut self,\n                      ship: &amp;'a mut Ship,\n                      x: usize,\n                      y: usize,\n                      orientation: Orientation)\n                      -&gt; PlaceResult {\n        // check ship placement in bounds\n        // check affected cells are free\n        // set cells' ship ref to ship\n        // add cell refs to ship's cells field\n    }\n}\n</code></pre>\n\n<p>It makes sense to me and I don't think there's an ownership problem here, but I'm wrong it seems:</p>\n\n<pre><code>#[cfg(test)]\nmod tests {\n    use super::{Battlefield, X, Y};\n    use super::Orientation::*;\n    use super::super::ship::Ship;\n\n    #[test]\n    fn assert_ship_placement_only_in_bounds() {\n        let mut ship = Ship::new(3);\n        let mut bf = Battlefield::new();\n\n        assert_eq!(Ok(()), bf.place_ship(&amp;mut ship, 0, 0, Horizontal));\n        assert_eq!(Ok(()), bf.place_ship(&amp;mut ship, 5, 5, Vertical));\n    }\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>src/battlefield.rs:166:47: 166:51 error: cannot borrow `ship` as mutable more than once at a time [E0499]\nsrc/battlefield.rs:166         assert_eq!(Ok(()), bf.place_ship(&amp;mut ship, 5, 5, Vertical));\n                                                                 ^~~~\nsrc/battlefield.rs:165:47: 165:51 note: first mutable borrow occurs here\nsrc/battlefield.rs:165         assert_eq!(Ok(()), bf.place_ship(&amp;mut ship, 0, 0, Horizontal));\n                                                                 ^~~~\n</code></pre>\n\n<p>I know this is just a short excerpt, but the whole code is too much to post here. The <a href=\"https://github.com/Leopard2A5/lib-battleship/tree/experiment\" rel=\"nofollow\" title=\"here\">project can be found here</a> (standard build with 'cargo build').</p>\n"}, {"tags": ["rust", "mergesort", "lifetime"], "comments": [{"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1474143600, "post_id": 39550957, "comment_id": 66414334, "body": "@Shepmaster: The code has many issues, and this is just one of them..."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1474143651, "post_id": 39550957, "comment_id": 66414351, "body": "Answerers may also be interested in <a href=\"http://codereview.stackexchange.com/q/141605/32521\">giving OP a code review of this and other sort algorithms</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1474143715, "post_id": 39550957, "comment_id": 66414370, "body": "@electrometro that was directed more at me than at you ^_^. I tend to have a heavy hand with marking questions as duplicates; that was a way of telling me that such a duplicate would not serve useful."}, {"owner": {"reputation": 3467, "user_id": 2958455, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/4bf81a9aa9aa3619f1197c901f079268?s=128&d=identicon&r=PG", "display_name": "Jared Mackey", "link": "https://stackoverflow.com/users/2958455/jared-mackey"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1474143774, "post_id": 39550957, "comment_id": 66414389, "body": "@Shepmaster I am just hangry and taking everything to the extreme the first read though. ;)"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1474143515, "post_id": 39551303, "comment_id": 66414307, "body": "It was a <a href=\"http://codereview.stackexchange.com/q/141605/32521\">free function before</a>."}], "tags": [], "owner": {"reputation": 759, "user_id": 1176628, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff2296d70542d30deb6fd858c29c5960?s=128&d=identicon&r=PG", "display_name": "krdln", "link": "https://stackoverflow.com/users/1176628/krdln"}, "is_accepted": false, "score": 2, "last_activity_date": 1474145248, "last_edit_date": 1495540480, "creation_date": 1474143456, "answer_id": 39551303, "question_id": 39550957, "link": "https://stackoverflow.com/questions/39550957/problems-with-lifetimes-on-recursive-trait-functions/39551303#39551303", "title": "Problems with lifetimes on recursive trait functions", "body": "<p>I don't see how this worked before you converted it to a trait version. The problem is with the the signature of <code>_merge</code>:</p>\n\n<pre><code>fn _merge(&amp;self, left: &amp;mut Vec&lt;T&gt;, right: &amp;mut Vec&lt;T&gt;) -&gt; &amp;mut Vec&lt;T&gt;;\n</code></pre>\n\n<p>That signature is actually a shorthand for:</p>\n\n<pre><code>fn _merge&lt;'a&gt;(&amp;'a self, left: &amp;mut Vec&lt;T&gt;, right: &amp;mut Vec&lt;T&gt;) -&gt; &amp;'a mut Vec&lt;T&gt;;\n</code></pre>\n\n<p>That means, that the returned value must be a borrow from <code>self</code>. In your case, that's totally not true, as you either return <code>left</code> or <code>right</code>, or a totally new vector (and you <a href=\"https://stackoverflow.com/q/29428227/155423\">can't return a reference to a local variable</a>). The easiest way to fix it would be to return just <code>Vec&lt;T&gt;</code>. Or if you want to save a <code>.clone()</code> when returning <code>left</code> or <code>right</code>, you can return a <a href=\"https://static.rust-lang.org/doc/master/std/borrow/enum.Cow.html\" rel=\"nofollow noreferrer\"><code>Cow&lt;[T]&gt;</code></a> (I don't think it's worth it though).</p>\n\n<p>Also, I think that <code>_merge</code> doesn't really belong to a trait, you're not even using <code>self</code> there. I'd make it just a function.</p>\n"}, {"comments": [{"owner": {"reputation": 3467, "user_id": 2958455, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/4bf81a9aa9aa3619f1197c901f079268?s=128&d=identicon&r=PG", "display_name": "Jared Mackey", "link": "https://stackoverflow.com/users/2958455/jared-mackey"}, "edited": false, "score": 0, "creation_date": 1474144475, "post_id": 39551446, "comment_id": 66414569, "body": "Nice! This is full of hidden tricks I couldn&#39;t figure out after about an hour of messing with the lifetimes. So by removing self it makes it a static function, correct?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 3467, "user_id": 2958455, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/4bf81a9aa9aa3619f1197c901f079268?s=128&d=identicon&r=PG", "display_name": "Jared Mackey", "link": "https://stackoverflow.com/users/2958455/jared-mackey"}, "edited": false, "score": 0, "creation_date": 1474155382, "post_id": 39551446, "comment_id": 66416940, "body": "Yes, removing <code>self</code> makes <code>_merge</code> a static function, but as it&#39;s in a trait, it&#39;s still polymorphic, so we need to write <code>Self::</code> or <code>MergeSortable::</code> before its name when calling it, so that the compiler knows which implementation we want to call."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 4, "last_activity_date": 1474144333, "last_edit_date": 1495540480, "creation_date": 1474144333, "answer_id": 39551446, "question_id": 39550957, "link": "https://stackoverflow.com/questions/39550957/problems-with-lifetimes-on-recursive-trait-functions/39551446#39551446", "title": "Problems with lifetimes on recursive trait functions", "body": "<p><code>_merge</code> doesn't actually need its <code>self</code> argument. Let's remove it:</p>\n\n<pre><code>use std::cmp::Ord;\nuse std::clone::Clone;\n\ntrait MergeSortable&lt;T&gt; {\n    fn merge_sort(&amp;mut self);\n    fn _merge(left: &amp;mut Vec&lt;T&gt;, right: &amp;mut Vec&lt;T&gt;) -&gt; &amp;mut Vec&lt;T&gt;;\n}\n\nimpl&lt;T: Ord + Clone + PartialEq&gt; MergeSortable&lt;T&gt; for Vec&lt;T&gt; {\n    fn merge_sort(&amp;mut self) {\n        if self.len() &lt;= 1 {\n            return;\n        }\n        let mid = self.len() / 2;\n        let mut left = self[..mid].to_vec();\n        left.merge_sort();\n        let mut right = self[mid..].to_vec();\n        right.merge_sort();\n        self = Self::_merge(&amp;mut left, &amp;mut right);\n    }\n\n    fn _merge(left: &amp;mut Vec&lt;T&gt;, right: &amp;mut Vec&lt;T&gt;) -&gt; &amp;mut Vec&lt;T&gt; {\n        if left.len() == 0 {\n            return {right};\n        }\n        if right.len() == 0 {\n            return {left};\n        }\n        if left[0] &lt; right[0] {\n            let mut v: Vec&lt;T&gt; = Vec::new();\n            v.push(left[0].clone());\n            v.extend_from_slice(&amp;Self::_merge(&amp;mut left[1..].to_vec().clone(), &amp;mut right.clone())[..]);\n            return &amp;mut v;\n        }\n        let mut v: Vec&lt;T&gt; = Vec::new();\n        v.push(right[0].clone());\n        v.extend_from_slice(&amp;Self::_merge(&amp;mut left.clone(), &amp;mut right[1..].to_vec().clone())[..]);\n        return &amp;mut v;\n    }\n}\n</code></pre>\n\n<p>Now we're getting a different error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: missing lifetime specifier [--explain E0106]\n --&gt; &lt;anon&gt;:6:57\n  |&gt;\n6 |&gt;     fn _merge(left: &amp;mut Vec&lt;T&gt;, right: &amp;mut Vec&lt;T&gt;) -&gt; &amp;mut Vec&lt;T&gt;;\n  |&gt;                                                         ^^^^^^^^^^^\nhelp: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `left` or `right`\n\nerror: missing lifetime specifier [--explain E0106]\n  --&gt; &lt;anon&gt;:22:57\n   |&gt;\n22 |&gt;     fn _merge(left: &amp;mut Vec&lt;T&gt;, right: &amp;mut Vec&lt;T&gt;) -&gt; &amp;mut Vec&lt;T&gt; {\n   |&gt;                                                         ^^^^^^^^^^^\nhelp: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `left` or `right`\n</code></pre>\n\n<p>And this helps us understand the first problem: when there's a <code>self</code> parameter and the return value is a reference, the compiler will infer that the lifetime of the returned reference is linked to <code>self</code>. That's not the case at all here! By removing the <code>self</code> parameter, the compiler is faced with two arguments that are references, and the current elision rules make it so that you <em>must</em> specify an explicit lifetime.</p>\n\n<p>So, let's do that!</p>\n\n<pre><code>use std::cmp::Ord;\nuse std::clone::Clone;\n\ntrait MergeSortable&lt;T&gt; {\n    fn merge_sort(&amp;mut self);\n    fn _merge&lt;'a&gt;(left: &amp;'a mut Vec&lt;T&gt;, right: &amp;'a mut Vec&lt;T&gt;) -&gt; &amp;'a mut Vec&lt;T&gt;;\n}\n\nimpl&lt;T: Ord + Clone + PartialEq&gt; MergeSortable&lt;T&gt; for Vec&lt;T&gt; {\n    fn merge_sort(&amp;mut self) {\n        if self.len() &lt;= 1 {\n            return;\n        }\n        let mid = self.len() / 2;\n        let mut left = self[..mid].to_vec();\n        left.merge_sort();\n        let mut right = self[mid..].to_vec();\n        right.merge_sort();\n        self = Self::_merge(&amp;mut left, &amp;mut right);\n    }\n\n    fn _merge&lt;'a&gt;(left: &amp;'a mut Vec&lt;T&gt;, right: &amp;'a mut Vec&lt;T&gt;) -&gt; &amp;'a mut Vec&lt;T&gt; {\n        if left.len() == 0 {\n            return right;\n        }\n        if right.len() == 0 {\n            return left;\n        }\n        if left[0] &lt; right[0] {\n            let mut v: Vec&lt;T&gt; = Vec::new();\n            v.push(left[0].clone());\n            v.extend_from_slice(&amp;Self::_merge(&amp;mut left[1..].to_vec().clone(), &amp;mut right.clone())[..]);\n            return &amp;mut v;\n        }\n        let mut v: Vec&lt;T&gt; = Vec::new();\n        v.push(right[0].clone());\n        v.extend_from_slice(&amp;Self::_merge(&amp;mut left.clone(), &amp;mut right[1..].to_vec().clone())[..]);\n        return &amp;mut v;\n    }\n}\n</code></pre>\n\n<p>But now, we're getting more errors. Let's focus on this one:</p>\n\n<pre><code>error: `v` does not live long enough\n  --&gt; &lt;anon&gt;:33:25\n   |&gt;\n33 |&gt;             return &amp;mut v;\n   |&gt;                         ^\nnote: reference must be valid for the lifetime 'a as defined on the block at 22:81...\n  --&gt; &lt;anon&gt;:22:82\n   |&gt;\n22 |&gt;     fn _merge&lt;'a&gt;(left: &amp;'a mut Vec&lt;T&gt;, right: &amp;'a mut Vec&lt;T&gt;) -&gt; &amp;'a mut Vec&lt;T&gt; {\n</code></pre>\n\n<p>You're trying to return a reference to a local variable. You can't do that: you must return the value itself, just like you were doing in your original function. See <a href=\"https://stackoverflow.com/q/29428227/155423\">Return local String as a slice (&amp;str)</a> for more information.</p>\n\n<p>Perhaps one trick you didn't know about is that you can replace the value behind a reference by assigning to its dereference (<code>*self = new_value</code>).</p>\n\n<pre><code>use std::cmp::Ord;\nuse std::clone::Clone;\n\ntrait MergeSortable&lt;T&gt; {\n    fn merge_sort(&amp;mut self);\n    fn _merge(left: Vec&lt;T&gt;, right: Vec&lt;T&gt;) -&gt; Vec&lt;T&gt;;\n}\n\nimpl&lt;T: Ord + Clone + PartialEq&gt; MergeSortable&lt;T&gt; for Vec&lt;T&gt; {\n    fn merge_sort(&amp;mut self) {\n        if self.len() &lt;= 1 {\n            return;\n        }\n        let mid = self.len() / 2;\n        let mut left = self[..mid].to_vec();\n        left.merge_sort();\n        let mut right = self[mid..].to_vec();\n        right.merge_sort();\n        *self = Self::_merge(left, right);\n    }\n\n    fn _merge(left: Vec&lt;T&gt;, right: Vec&lt;T&gt;) -&gt; Vec&lt;T&gt; {\n        if left.len() == 0 {\n            return right;\n        }\n        if right.len() == 0 {\n            return left;\n        }\n        if left[0] &lt; right[0] {\n            let mut v: Vec&lt;T&gt; = Vec::new();\n            v.push(left[0].clone());\n            v.extend_from_slice(&amp;Self::_merge(left[1..].to_vec(), right)[..]);\n            return v;\n        }\n        let mut v: Vec&lt;T&gt; = Vec::new();\n        v.push(right[0].clone());\n        v.extend_from_slice(&amp;Self::_merge(left, right[1..].to_vec())[..]);\n        return v;\n    }\n}\n</code></pre>\n\n<p>I would also consider moving <code>_merge</code> out of the trait and into a free function, so that you don't have to write <code>Self::_merge</code> to call it.</p>\n"}], "owner": {"reputation": 3467, "user_id": 2958455, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/4bf81a9aa9aa3619f1197c901f079268?s=128&d=identicon&r=PG", "display_name": "Jared Mackey", "link": "https://stackoverflow.com/users/2958455/jared-mackey"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 341, "favorite_count": 0, "accepted_answer_id": 39551446, "answer_count": 2, "score": -1, "last_activity_date": 1474145248, "creation_date": 1474140979, "last_edit_date": 1474143310, "question_id": 39550957, "link": "https://stackoverflow.com/questions/39550957/problems-with-lifetimes-on-recursive-trait-functions", "title": "Problems with lifetimes on recursive trait functions", "body": "<p>I am having a hard time converting my standalone <code>merge_sort</code> function into a trait for <code>Vec&lt;T&gt;</code>. It seems I am running into lifetime errors with the way the merge sort algorithm works. </p>\n\n<p>I have tried specifying the lifetimes in the function and trait declarations but it still is giving me a similar error. </p>\n\n<p>My research on lifetimes includes...</p>\n\n<ul>\n<li>Effective Rust</li>\n<li>The Rust book</li>\n<li>Several YouTube videos on lifetimes</li>\n<li>Most questions on Stack Overflow regarding lifetimes</li>\n</ul>\n\n<p>Here is the code</p>\n\n<pre><code>trait MergeSortable&lt;T&gt; {\n    fn merge_sort(&amp;mut self);\n    fn _merge(&amp;self, left: &amp;mut Vec&lt;T&gt;, right: &amp;mut Vec&lt;T&gt;) -&gt; &amp;mut Vec&lt;T&gt;;\n}\n\nimpl&lt;T: Ord + Clone + PartialEq&gt; MergeSortable&lt;T&gt; for Vec&lt;T&gt; {\n    fn merge_sort(&amp;mut self) {\n        if self.len() &lt;= 1 {\n            return;\n        }\n        let mid = self.len() / 2;\n        let mut left = self[..mid].to_vec();\n        left.merge_sort();\n        let mut right = self[mid..].to_vec();\n        right.merge_sort();\n        self = self._merge(&amp;mut left, &amp;mut right);\n    }\n\n    fn _merge(&amp;self, left: &amp;mut Vec&lt;T&gt;, right: &amp;mut Vec&lt;T&gt;) -&gt; &amp;mut Vec&lt;T&gt; {\n        if left.len() == 0 {\n            return right;\n        }\n        if right.len() == 0 {\n            return left;\n        }\n        if left[0] &lt; right[0] {\n            let mut v: Vec&lt;T&gt; = Vec::new();\n            v.push(left[0].clone());\n            v.extend_from_slice(&amp;self._merge(&amp;mut left[1..].to_vec().clone(), &amp;mut right.clone())[..]);\n            return &amp;mut v;\n        }\n        let mut v: Vec&lt;T&gt; = Vec::new();\n        v.push(right[0].clone());\n        v.extend_from_slice(&amp;self._merge(&amp;mut left.clone(), &amp;mut right[1..].to_vec().clone())[..]);\n        return &amp;mut v;\n    }\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=b73494e356a103cecb8d65eb80f7d5ce&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">Playground</a>)</p>\n\n<p>And the errors:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: lifetime of reference outlives lifetime of borrowed content... [E0312]\n  --&gt; &lt;anon&gt;:27:20\n   |&gt;\n27 |&gt;             return left;\n   |&gt;                    ^^^^\nnote: ...the reference is valid for the anonymous lifetime #1 defined on the block at 22:75...\n  --&gt; &lt;anon&gt;:22:76\n   |&gt;\n22 |&gt;     fn _merge(&amp;self, left: &amp;mut Vec&lt;T&gt;, right: &amp;mut Vec&lt;T&gt;) -&gt; &amp;mut Vec&lt;T&gt; {\n   |&gt;                                                                            ^\nnote: ...but the borrowed content is only valid for the anonymous lifetime #2 defined on the block at 22:75\n  --&gt; &lt;anon&gt;:22:76\n   |&gt;\n22 |&gt;     fn _merge(&amp;self, left: &amp;mut Vec&lt;T&gt;, right: &amp;mut Vec&lt;T&gt;) -&gt; &amp;mut Vec&lt;T&gt; {\n   |&gt;                                                                            ^\n\nerror: lifetime of reference outlives lifetime of borrowed content... [E0312]\n  --&gt; &lt;anon&gt;:24:20\n   |&gt;\n24 |&gt;             return right;\n   |&gt;                    ^^^^^\nnote: ...the reference is valid for the anonymous lifetime #1 defined on the block at 22:75...\n  --&gt; &lt;anon&gt;:22:76\n   |&gt;\n22 |&gt;     fn _merge(&amp;self, left: &amp;mut Vec&lt;T&gt;, right: &amp;mut Vec&lt;T&gt;) -&gt; &amp;mut Vec&lt;T&gt; {\n   |&gt;                                                                            ^\nnote: ...but the borrowed content is only valid for the anonymous lifetime #3 defined on the block at 22:75\n  --&gt; &lt;anon&gt;:22:76\n   |&gt;\n22 |&gt;     fn _merge(&amp;self, left: &amp;mut Vec&lt;T&gt;, right: &amp;mut Vec&lt;T&gt;) -&gt; &amp;mut Vec&lt;T&gt; {\n   |&gt;                                                                            ^\nhelp: consider using an explicit lifetime parameter as shown: fn _merge&lt;'a, 'b&gt;(&amp;'a self, left: &amp;'a mut Vec&lt;T&gt;, right: &amp;'b mut Vec&lt;T&gt;)\n -&gt; &amp;mut Vec&lt;T&gt;\n  --&gt; &lt;anon&gt;:22:5\n   |&gt;\n22 |&gt;     fn _merge(&amp;self, left: &amp;mut Vec&lt;T&gt;, right: &amp;mut Vec&lt;T&gt;) -&gt; &amp;mut Vec&lt;T&gt; {\n   |&gt;     ^\n</code></pre>\n"}, {"tags": ["rust", "ffi"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1474141477, "post_id": 39550856, "comment_id": 66413741, "body": "Tangentially related: <a href=\"http://stackoverflow.com/q/28154683/155423\">Allocating an object for C / FFI library calls</a>."}], "answers": [{"comments": [{"owner": {"reputation": 635, "user_id": 2068852, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/4f80a409bf937f161433c8ea63c4f527?s=128&d=identicon&r=PG", "display_name": "Norbert", "link": "https://stackoverflow.com/users/2068852/norbert"}, "edited": false, "score": 0, "creation_date": 1474183458, "post_id": 39551232, "comment_id": 66421484, "body": "Thanks for the answer. So, I guess I&#39;ll better stick with with the stable solution of a Vec. I&#39;ll change the content of the Vec to winnt::CHAR so that there is not difference between the number of items and the length. I guess that this will make it easier."}, {"owner": {"reputation": 635, "user_id": 2068852, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/4f80a409bf937f161433c8ea63c4f527?s=128&d=identicon&r=PG", "display_name": "Norbert", "link": "https://stackoverflow.com/users/2068852/norbert"}, "edited": false, "score": 0, "creation_date": 1474183606, "post_id": 39551232, "comment_id": 66421519, "body": "I have two questions regarding your answer though: - What do you exactly mean by saying that I have to convert the memory back into a Vec to be dropped. - I&#39;m not sure that I could use the capacity instead of my second variable as this variable is also passed to the FFI as an output parameter. The Windows API will overwrite the content of this variable and I guess that it will not be a good idea to do this with the capacity of my Vec. Or did I misunderstand you in this aspect?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 635, "user_id": 2068852, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/4f80a409bf937f161433c8ea63c4f527?s=128&d=identicon&r=PG", "display_name": "Norbert", "link": "https://stackoverflow.com/users/2068852/norbert"}, "edited": false, "score": 0, "creation_date": 1474237059, "post_id": 39551232, "comment_id": 66436855, "body": "@Norbert I clarified a smidge. Converting back to a <code>Vec</code> is only if you&#39;ve decomposed a <code>Vec</code> to start with; your case doesn&#39;t seem to have that. For the latter, I meant to use the value of <code>capacity</code> instead of <code>0</code>, but you do have to have another variable around to pass as the reference."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1533231034, "last_edit_date": 1533231034, "creation_date": 1474142983, "answer_id": 39551232, "question_id": 39550856, "link": "https://stackoverflow.com/questions/39550856/what-is-the-right-way-to-allocate-data-to-pass-to-an-ffi-call/39551232#39551232", "title": "What is the right way to allocate data to pass to an FFI call?", "body": "<p>Ideally you would use <a href=\"https://doc.rust-lang.org/std/alloc/fn.alloc.html\" rel=\"nofollow noreferrer\"><code>std::alloc::alloc</code></a> because you can then specify the desired alignment as part of the <em>layout</em>:</p>\n\n<pre><code>pub unsafe fn alloc(layout: Layout) -&gt; *mut u8\n</code></pre>\n\n<p>The main downside is that you need to <em>know the alignment</em>, even when you free the allocation.</p>\n\n<p>It's common practice to use a <code>Vec</code> as an easy allocation mechanism, but you need to be careful when using it as such.</p>\n\n<ol>\n<li>Make sure that your units are correct \u2014 is the \"length\" parameter the number of <em>items</em> or the number of <em>bytes</em>?</li>\n<li>If you dissolve the <code>Vec</code> into component parts, you need to\n\n<ol>\n<li>track the <em>length</em> and the <em>capacity</em>. Some people use <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.shrink_to_fit\" rel=\"nofollow noreferrer\"><code>shrink_to_fit</code></a> to ensure those two values are the same.</li>\n<li>Avoid <em>crossing the streams</em> - that memory was allocated by Rust and <strong>must</strong> be freed by Rust. Convert it back into a <code>Vec</code> to be dropped.</li>\n</ol></li>\n<li><p>Beware that an empty <code>Vec</code> does <strong>not</strong> have a NULL pointer!:</p>\n\n<pre><code>fn main() {\n    let v: Vec&lt;u8&gt; = Vec::new();\n    println!(\"{:p}\", v.as_ptr());\n    // =&gt; 0x1\n}\n</code></pre></li>\n</ol>\n\n<hr>\n\n<p>For your specific case, I might suggest using the <code>capacity</code> of the <code>Vec</code> instead of tracking the second variable yourself. You'll note that you forgot to update <code>pcb_buffer</code> after the first call, so I'm pretty sure that the code will always fail. It's annoying because it needs to be a mutable reference so you can't completely get away from it.</p>\n\n<p>Additionally, instead of <code>extend</code>ing the <code>Vec</code>, you could just <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.reserve\" rel=\"nofollow noreferrer\"><code>reserve</code></a> space.</p>\n\n<p>There's also no guarantee that the size required during the first call will be the same as the size required during the second call. You <em>could</em> do some kind of loop, but then you have to worry about an infinite loop happening.</p>\n"}, {"tags": [], "owner": {"reputation": 2863, "user_id": 342618, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/330dbf6ab22dd51d11c77ffc300ae918?s=128&d=identicon&r=PG", "display_name": "ChrisD", "link": "https://stackoverflow.com/users/342618/chrisd"}, "is_accepted": false, "score": 4, "last_activity_date": 1496323590, "last_edit_date": 1496323590, "creation_date": 1496317710, "answer_id": 44306703, "question_id": 39550856, "link": "https://stackoverflow.com/questions/39550856/what-is-the-right-way-to-allocate-data-to-pass-to-an-ffi-call/44306703#44306703", "title": "What is the right way to allocate data to pass to an FFI call?", "body": "<p>This is what I came up with.</p>\n\n<pre><code>pub struct FfiObject {\n    pub ptr: *mut u8,\n    pub size: usize,\n}\nimpl FfiObject {\n    // allocate and zero memory\n    pub fn new(size: usize) -&gt; FfiObject {\n        FfiObject::_from_vec(vec![0u8; size], size)\n    }\n    // allocate memory without zeroing\n    pub fn new_uninitialized(size: usize) -&gt; FfiObject {\n        FfiObject::_from_vec(Vec::with_capacity(size), size)\n    }\n    fn _from_vec(mut v: Vec&lt;u8&gt;, size: usize) -&gt; FfiObject {\n        assert!(size &gt; 0);\n        let ptr = v.as_mut_ptr();\n        std::mem::forget(v);\n        FfiObject { ptr, size }\n    }\n}\nimpl Drop for FfiObject {\n    fn drop(&amp;mut self) {\n        unsafe { std::mem::drop(Vec::from_raw_parts(self.ptr, 0, self.size)) };\n    }\n}\n</code></pre>\n\n<p>The FFI object is created using a <code>u8</code> vector so that the size is in bytes. This could be generalised to using an arbitrary type instead of <code>u8</code> but do keep in mind Shepmaster's warning about the distinction between the number of bytes and the number of items.</p>\n\n<p>Here's an example of using <code>FfiObject</code>:</p>\n\n<pre><code>// Ask the library for the size.\nlet mut size: usize = 0;\nlet mut success = GetObjectSize(&amp;mut size);\nif success &amp;&amp; size &gt; 0 {\n    // allocate and zero memory for the object\n    let ffi_obj = FfiObject::new(size);\n    // Pass the memory to a foreign function\n    success = DoSomethingWithObject(ffi_obj.ptr, &amp;ffi_obj.size);\n</code></pre>\n"}], "owner": {"reputation": 635, "user_id": 2068852, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/4f80a409bf937f161433c8ea63c4f527?s=128&d=identicon&r=PG", "display_name": "Norbert", "link": "https://stackoverflow.com/users/2068852/norbert"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1769, "favorite_count": 3, "accepted_answer_id": 39551232, "answer_count": 2, "score": 4, "last_activity_date": 1533231034, "creation_date": 1474140298, "last_edit_date": 1495541963, "question_id": 39550856, "link": "https://stackoverflow.com/questions/39550856/what-is-the-right-way-to-allocate-data-to-pass-to-an-ffi-call", "title": "What is the right way to allocate data to pass to an FFI call?", "body": "<p>After <a href=\"https://stackoverflow.com/questions/39534712/should-i-pass-a-mutable-reference-or-transfer-ownership-of-a-variable-in-the-con\">discussing/learning about the correct way to call a FFI of the Windows-API from Rust</a>, I played with it a little bit further and would like to double-check my understanding. </p>\n\n<p>I have a Windows API that is called twice. In the first call, it returns the size of the buffer that it will need for its actual out parameter. Then, it is called a second time with a buffer of sufficient size. I'm currently using a <code>Vec</code> as a datatype for this buffer (see example below). </p>\n\n<p>The code works but I'm wondering whether this is right way to do it or whether it would be better to utilize a function like <code>alloc::heap::allocate</code> to directly reserve some memory and then to use  <code>transmute</code> to convert the result from the FFI back. Again, my code works but I'm trying to look a little bit behind the scenes. </p>\n\n<pre><code>extern crate advapi32;\nextern crate winapi;\nextern crate widestring;\nuse widestring::WideCString;\nuse std::io::Error as IOError;\nuse winapi::winnt;\n\nfn main() {\n    let mut lp_buffer: Vec&lt;winnt::WCHAR&gt; = Vec::new();\n    let mut pcb_buffer: winapi::DWORD = 0;\n\n    let rtrn_bool = unsafe {\n        advapi32::GetUserNameW(lp_buffer.as_mut_ptr(),\n                               &amp;mut pcb_buffer )\n    };\n\n    if rtrn_bool == 0 {\n\n        match IOError::last_os_error().raw_os_error() {\n            Some(122) =&gt; {\n                // Resizing the buffers sizes so that the data fits in after 2nd \n                lp_buffer.resize(pcb_buffer as usize, 0 as winnt::WCHAR);\n            } // This error is to be expected\n            Some(e) =&gt; panic!(\"Unknown OS error {}\", e),\n            None =&gt; panic!(\"That should not happen\"),\n        }\n    }\n\n\n    let rtrn_bool2 = unsafe {\n        advapi32::GetUserNameW(lp_buffer.as_mut_ptr(), \n                               &amp;mut pcb_buffer )\n    };\n\n    if rtrn_bool2 == 0 {\n        match IOError::last_os_error().raw_os_error() {\n            Some(e) =&gt; panic!(\"Unknown OS error {}\", e),\n            None =&gt; panic!(\"That should not happen\"),\n        }\n    }\n\n    let widestr: WideCString = unsafe { WideCString::from_ptr_str(lp_buffer.as_ptr()) };\n\n    println!(\"The owner of the file is {:?}\", widestr.to_string_lossy());\n}\n</code></pre>\n\n<p>Dependencies:</p>\n\n<pre><code>[dependencies]\nadvapi32-sys = \"0.2\"\nwinapi = \"0.2\"\nwidestring = \"*\"\n</code></pre>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1474141588, "post_id": 39550758, "comment_id": 66413773, "body": "<i>I understand why it fails</i> \u2014 I don&#39;t think that&#39;s completely true :-) If you did, you should also understand why you cannot do this. As a thought experiment, what would happen if you called <code>f</code> with <code>&#39;a</code> parameterized with <code>&#39;static</code>?"}], "answers": [{"comments": [{"owner": {"reputation": 2878, "user_id": 3087441, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/zIs67.jpg?s=128&g=1", "display_name": "kopiczko", "link": "https://stackoverflow.com/users/3087441/kopiczko"}, "edited": false, "score": 0, "creation_date": 1474189962, "post_id": 39550882, "comment_id": 66422982, "body": "Is returning static value or making it a method returning the field, the only way to make the f valid? Or is there another usecase for defining function like <code>fn f&lt;&#39;a&gt;() -&gt; &amp;&#39;a T</code> ? Is the copy optimization documented, how can I be sure it will be preformed?"}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 2878, "user_id": 3087441, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/zIs67.jpg?s=128&g=1", "display_name": "kopiczko", "link": "https://stackoverflow.com/users/3087441/kopiczko"}, "edited": false, "score": 0, "creation_date": 1474192506, "post_id": 39550882, "comment_id": 66423608, "body": "@kopiczko There is one really obscure case where <code>fn foo&lt;&#39;a&gt;() -&gt; &amp;&#39;a T</code> is more flexible than <code>&amp;&#39;static</code> but it&#39;s not related to what it can return. As for copies: Copying an <code>i32</code> <i>is as cheap or cheaper</i> as copying a <code>&amp;i32</code>! In fact, most types will be so small that it&#39;s usually not worth your time to worry at all about how often it&#39;s copied."}, {"owner": {"reputation": 2878, "user_id": 3087441, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/zIs67.jpg?s=128&g=1", "display_name": "kopiczko", "link": "https://stackoverflow.com/users/3087441/kopiczko"}, "edited": false, "score": 0, "creation_date": 1474199046, "post_id": 39550882, "comment_id": 66425235, "body": "@delnan I agree worrying about copying i32 is non-sense. But say I have a struct with 20 fields and I create it 1M times in a loop depending on a condition. I&#39;d like to extract create function to keep the code DRY. Then it makes sense to worry about copying, no?"}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 0, "creation_date": 1474199978, "post_id": 39550882, "comment_id": 66425483, "body": "It might make sense, yes. (However, one copy of let&#39;s say 20*8 = 160 bytes it still most likely dirt cheap compared to whatever work you&#39;re actually doing.) Between RVO, inlining, and other optimizations -- none of which are guaranteed, by virtue of being optimization, but definitely common -- the one theoretical copy from the function return almost certainly won&#39;t actually be executed. And you shouldn&#39;t worry anyway before having hard data!!!"}, {"owner": {"reputation": 1457, "user_id": 2849934, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3ff0a46f18c8d548fa91c12b922290b6?s=128&d=identicon&r=PG", "display_name": "John", "link": "https://stackoverflow.com/users/2849934/john"}, "reply_to_user": {"reputation": 2878, "user_id": 3087441, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/zIs67.jpg?s=128&g=1", "display_name": "kopiczko", "link": "https://stackoverflow.com/users/3087441/kopiczko"}, "edited": false, "score": 0, "creation_date": 1474201806, "post_id": 39550882, "comment_id": 66425993, "body": "@kopiczko A function which &quot;creates an object and returns it by value&quot; is an extensively used pattern. So it is practically guaranteed to get optimized (in release builds)."}, {"owner": {"reputation": 2878, "user_id": 3087441, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/zIs67.jpg?s=128&g=1", "display_name": "kopiczko", "link": "https://stackoverflow.com/users/3087441/kopiczko"}, "edited": false, "score": 0, "creation_date": 1474211048, "post_id": 39550882, "comment_id": 66428695, "body": "160B * 1M it&#39;s actually 160MB. But I don&#39;t care about copying I&#39;d like to understand how to use the language. What I understand is the construct <code>fn f&lt;&#39;a&gt;() -&gt; &amp;&#39;a i32</code> is allowed, but it has very limited (none in practice?) purpose. Please correct if I&#39;m wrong. And thank you for an explanation."}, {"owner": {"reputation": 1457, "user_id": 2849934, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3ff0a46f18c8d548fa91c12b922290b6?s=128&d=identicon&r=PG", "display_name": "John", "link": "https://stackoverflow.com/users/2849934/john"}, "reply_to_user": {"reputation": 2878, "user_id": 3087441, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/zIs67.jpg?s=128&g=1", "display_name": "kopiczko", "link": "https://stackoverflow.com/users/3087441/kopiczko"}, "edited": false, "score": 0, "creation_date": 1474211939, "post_id": 39550882, "comment_id": 66428980, "body": "@kopiczko Yes, you could say that... Lifetimes are a way to track validity of objects with respect to other objects/references (or their own scope). In a function such as <code>fn f&lt;&#39;a&gt;() -&gt; &amp;&#39;a i32</code>, there is no &quot;other&quot; object/reference with respect to which the returned lifetime can be pinned. Therefore it is assumed to be &quot;unbounded&quot; by the compiler which is why only references to static values can be returned (or something which looks like that to the compiler by using <code>unsafe</code> operations)."}], "tags": [], "owner": {"reputation": 1457, "user_id": 2849934, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3ff0a46f18c8d548fa91c12b922290b6?s=128&d=identicon&r=PG", "display_name": "John", "link": "https://stackoverflow.com/users/2849934/john"}, "is_accepted": true, "score": 2, "last_activity_date": 1474142034, "last_edit_date": 1474142034, "creation_date": 1474140493, "answer_id": 39550882, "question_id": 39550758, "link": "https://stackoverflow.com/questions/39550758/is-it-possible-to-return-a-reference-created-inside-function-scope/39550882#39550882", "title": "Is it possible to return a reference created inside function scope?", "body": "<p>Since Rust uses RAII style resource management, as soon as the program leaves a scope, all values within that scope which did not move will get destroyed. The value has to live somewhere for a reference to be valid. Therefore either return the value as such (if you are worried about having an additional copy when you do this, then don't worry since that copy will get optimized away) or box it and return the box. Unless you are returning a statically allocated string as <code>&amp;str</code> as follows, you simply cannot return a \"new\" (for the caller) reference:</p>\n\n<pre><code>fn f&lt;'a&gt;() -&gt; &amp;'a str {\n    \"yo\"\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 2878, "user_id": 3087441, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/zIs67.jpg?s=128&g=1", "display_name": "kopiczko", "link": "https://stackoverflow.com/users/3087441/kopiczko"}, "edited": false, "score": 0, "creation_date": 1474189861, "post_id": 39550901, "comment_id": 66422950, "body": "You&#39;re right, Box won&#39;t help. I was wrong thinking it would act as a reference counter."}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": false, "score": 2, "last_activity_date": 1474140590, "creation_date": 1474140590, "answer_id": 39550901, "question_id": 39550758, "link": "https://stackoverflow.com/questions/39550758/is-it-possible-to-return-a-reference-created-inside-function-scope/39550901#39550901", "title": "Is it possible to return a reference created inside function scope?", "body": "<p>Boxing the reference <em>will not help</em>. <code>Box&lt;T&gt;</code> is virtually identical to an unboxed <code>T</code> in most respects, including ownership and lifetime issues. The fundamental issue is that local variables will stop existing as soon as the function returns. Thus, a reference to a local variable will point to deallocated memory by the time the calling function gets its hand on that reference. Putting wrapping paper around the reference doesn't fix that problem.</p>\n\n<p>I assume this is a simplified example distilled from a real program you're having trouble with. I can't give targeted advice for that for lack of information, but <em>generally</em> it is a very good idea to return things by value (i.e., just <code>-&gt; i32</code> in this case) instead of a reference.</p>\n"}, {"tags": [], "owner": {"reputation": 2028, "user_id": 394331, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/30FMc.jpg?s=128&g=1", "display_name": "peterdn", "link": "https://stackoverflow.com/users/394331/peterdn"}, "is_accepted": false, "score": 2, "last_activity_date": 1516742447, "last_edit_date": 1516742447, "creation_date": 1516742313, "answer_id": 48410990, "question_id": 39550758, "link": "https://stackoverflow.com/questions/39550758/is-it-possible-to-return-a-reference-created-inside-function-scope/48410990#48410990", "title": "Is it possible to return a reference created inside function scope?", "body": "<p>As of <a href=\"https://blog.rust-lang.org/2017/10/12/Rust-1.21.html\" rel=\"nofollow noreferrer\">Rust 1.21</a>, a new feature named <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1414-rvalue_static_promotion.md\" rel=\"nofollow noreferrer\">rvalue static promotion</a> means that the code in the question <em>does</em> now compile.</p>\n\n<p>In this instance because 1 is a constant, the compiler promotes it to a <code>static</code> meaning that the returned reference has the <code>'static</code> lifetime. The function de-sugared looks something like:</p>\n\n<pre><code>fn f&lt;'a&gt;() -&gt; &amp;'a i32 {\n    static ONE: i32 = 1;\n    &amp;ONE\n}\n</code></pre>\n\n<p>This works for any compile-time constant, including structs:</p>\n\n<pre><code>struct Foo&lt;'a&gt; {\n    x: i32,\n    y: i32,\n    p: Option&lt;&amp;'a Foo&lt;'a&gt;&gt;\n}\n\nfn default_foo&lt;'a&gt;() -&gt; &amp;'a Foo&lt;'a&gt; {\n    &amp;Foo { x: 12, y: 90, p: None }\n}\n</code></pre>\n\n<p>But this will not compile:</p>\n\n<pre><code>fn bad_foo&lt;'a&gt;(x: i32) -&gt; &amp;'a Foo&lt;'a&gt; {\n    /* Doesn't compile as x isn't constant! */\n    &amp;Foo { x, y: 90, p: None }\n}\n</code></pre>\n"}], "owner": {"reputation": 2878, "user_id": 3087441, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/zIs67.jpg?s=128&g=1", "display_name": "kopiczko", "link": "https://stackoverflow.com/users/3087441/kopiczko"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2518, "favorite_count": 1, "closed_date": 1555630576, "accepted_answer_id": 39550882, "answer_count": 3, "score": 6, "last_activity_date": 1516742447, "creation_date": 1474139725, "last_edit_date": 1474211297, "question_id": 39550758, "link": "https://stackoverflow.com/questions/39550758/is-it-possible-to-return-a-reference-created-inside-function-scope", "closed_reason": "Duplicate", "title": "Is it possible to return a reference created inside function scope?", "body": "<p>I have a fairly simple program:</p>\n\n<pre><code>fn f&lt;'a&gt;() -&gt; &amp;'a i32 {\n    &amp;1\n}\n\nfn main() {\n    println!(\"{}\", f());\n}\n</code></pre>\n\n<p>It doesn't compile (some of the output elided):</p>\n\n<pre><code>$ rustc test.rs\ntest.rs:2:6: 2:7 error: borrowed value does not live long enough\ntest.rs:2     &amp;1\n</code></pre>\n\n<p>I understand why it fails. </p>\n\n<ol>\n<li>I don't know how to return a reference created inside the function scope. Is there way to do that?</li>\n<li>Why can't the lifetime be elided for a single return?</li>\n</ol>\n\n<p><strong>EDIT:</strong> I changed the title since it suggested returning boxed type would help which is not (see answers).</p>\n"}, {"tags": ["macros", "rust", "rust-compiler-plugin"], "comments": [{"owner": {"reputation": 3185, "user_id": 114887, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/6b0c7e3c2d9ff81adf7470e066e4a705?s=128&d=identicon&r=PG&f=1", "display_name": "Matthew Piziak", "link": "https://stackoverflow.com/users/114887/matthew-piziak"}, "edited": false, "score": 0, "creation_date": 1474144780, "post_id": 39550060, "comment_id": 66414645, "body": "Extending existing syntax without macro invocations is only possible with compiler extensions. E.g. creating new <code>derive</code>-able traits."}], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 2, "last_activity_date": 1474166000, "creation_date": 1474166000, "answer_id": 39553503, "question_id": 39550060, "link": "https://stackoverflow.com/questions/39550060/whats-the-difference-between-a-macro-and-a-compiler-plugin/39553503#39553503", "title": "What&#39;s the difference between a macro and a compiler plugin?", "body": "<p>Compiler plugin macros can do everything <code>macro_rules!</code> macros can do, plus a whole lot more.  Compiler plugins can register derivation macros, synthesise new identifiers, deconstruct AST nodes, parse strings, do file IO, <em>etc.</em>, <em>etc.</em>  Listing everything would be pointless, as it would amount to reproducing the internal compiler API, which changes on a regular basis.</p>\n\n<p>About the only major limitation is that they can only access what they're invoked with, or which can be derived from what they're invoked with (aside from some extra, already existent context information): they cannot access or work with anything that doesn't already exist.  Like types, or what names mean, or what value an expression has.</p>\n\n<p>Well, OK, there is <em>one</em> thing compiler plugins can't do that macros can: work stably across different versions of the compiler.  (<em>Yet.</em>)</p>\n"}], "owner": {"reputation": 159, "user_id": 6659804, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/3568154ffb6271de6297d08479a9dfa1?s=128&d=identicon&r=PG", "display_name": "Feng Cen", "link": "https://stackoverflow.com/users/6659804/feng-cen"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 356, "favorite_count": 2, "accepted_answer_id": 39553503, "answer_count": 1, "score": 3, "last_activity_date": 1474166000, "creation_date": 1474135249, "last_edit_date": 1474136549, "question_id": 39550060, "link": "https://stackoverflow.com/questions/39550060/whats-the-difference-between-a-macro-and-a-compiler-plugin", "title": "What&#39;s the difference between a macro and a compiler plugin?", "body": "<p>What can a macro do that a compiler plugin can not, and vice-versa?</p>\n\n<p>By \"can not\", I mean that it is impossible to achieve the same purpose, not that it can be achieved in a different way.</p>\n\n<p>For example, a macro can <code>impl</code> some trait for a struct, compiler plugin can <code>derive</code> some trait for a struct. Both of them can automatically <code>impl</code> a trait for a struct.</p>\n"}, {"tags": ["rust", "closures", "trait-objects"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1474071816, "post_id": 39541312, "comment_id": 66397162, "body": "Based on your feedback to my answer, I suggest you produce an <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> of your problem. Probably <a href=\"https://play.rust-lang.org/?gist=67472cbead98bdcdb5ea8cd92925130d\" rel=\"nofollow noreferrer\">something like this</a>."}, {"owner": {"reputation": 997, "user_id": 2175951, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/24d1f324f6f5c47ff5e10721c2b115c0?s=128&d=identicon&r=PG", "display_name": "iopq", "link": "https://stackoverflow.com/users/2175951/iopq"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1474072120, "post_id": 39541312, "comment_id": 66397209, "body": "I cut it down to just <code>apply</code> and <code>second</code> - I am trying to solve the HRTBs problem."}, {"owner": {"reputation": 1105, "user_id": 575229, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8d6d6d34880c5ad7ca699b4311517edf?s=128&d=identicon&r=PG", "display_name": "Miles Rout", "link": "https://stackoverflow.com/users/575229/miles-rout"}, "edited": false, "score": 0, "creation_date": 1521263045, "post_id": 39541312, "comment_id": 85667226, "body": "What kind of language doesn&#39;t even support such a basic operation as extracting a subexpression, naming it, and being confident it does the same thing?"}], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 13, "last_activity_date": 1474081408, "creation_date": 1474081408, "answer_id": 39542472, "question_id": 39541312, "link": "https://stackoverflow.com/questions/39541312/function-returning-a-closure-not-working-inside-my-filter/39542472#39542472", "title": "Function returning a closure not working inside my filter", "body": "<p>First off, let me say that the problem has nothing to do with the use of the <code>impl Trait</code> syntax. I converted the closure to a named struct and got the same results.</p>\n\n<p>So, let's look at the code you'd like to make work:</p>\n\n<pre><code>let f = apply(second, i);\nlet _ = tuples.iter().filter(f);\n</code></pre>\n\n<p>What does the compiler have to say about that?</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `for&lt;'r&gt; impl std::ops::FnMut&lt;(&amp;(_, _),)&gt;: std::ops::FnMut&lt;(&amp;'r &amp;(&amp;str, &amp;std::ops::Fn(i32) -&gt; bool),)&gt;` is not satisfied\n  --&gt; &lt;anon&gt;:11:27\n   |\n11 |     let _ = tuples.iter().filter(f);\n   |                           ^^^^^^ trait `for&lt;'r&gt; impl std::ops::FnMut&lt;(&amp;(_, _),)&gt;: std::ops::FnMut&lt;(&amp;'r &amp;(&amp;str, &amp;std::ops::Fn(i32) -&gt; bool),)&gt;` not satisfied\n\nerror[E0277]: the trait bound `for&lt;'r&gt; impl std::ops::FnMut&lt;(&amp;(_, _),)&gt;: std::ops::FnOnce&lt;(&amp;'r &amp;(&amp;str, &amp;std::ops::Fn(i32) -&gt; bool),)&gt;` is not satisfied\n  --&gt; &lt;anon&gt;:11:27\n   |\n11 |     let _ = tuples.iter().filter(f);\n   |                           ^^^^^^ trait `for&lt;'r&gt; impl std::ops::FnMut&lt;(&amp;(_, _),)&gt;: std::ops::FnOnce&lt;(&amp;'r &amp;(&amp;str, &amp;std::ops::Fn(i32) -&gt; bool),)&gt;` not satisfied\n</code></pre>\n\n<p>OK, so we have type X and it needs to implement trait Y but it doesn't. But let's look closely:</p>\n\n<pre><code>for&lt;'r&gt; impl\nstd::ops::FnMut&lt;(&amp;(_, _),)&gt;:\nstd::ops::FnMut&lt;(&amp;'r &amp;(_, _),)&gt;\n</code></pre>\n\n<p>Ah ha! <code>filter</code> expects a function that accepts a <strong>reference to a reference</strong> to a tuple, whereas the function we're passing in accepts a reference to a tuple. <code>filter</code> passes a reference to a reference because <code>tuples.iter()</code> iterates over references, and <code>filter</code> passes references to these.</p>\n\n<p>Alright, let's change the definition of <code>second</code> to accept references to references:</p>\n\n<pre><code>fn second&lt;'a, A, B: ?Sized&gt;(&amp;&amp;(_, ref second): &amp;&amp;'a (A, B)) -&gt; &amp;'a B {\n    second\n}\n</code></pre>\n\n<p>Compiler still not happy:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `for&lt;'r&gt; impl std::ops::FnMut&lt;(&amp;&amp;(_, _),)&gt;: std::ops::FnMut&lt;(&amp;'r &amp;(&amp;str, &amp;std::ops::Fn(i32) -&gt; bool),)&gt;` is not satisfied\n  --&gt; &lt;anon&gt;:11:27\n   |\n11 |     let _ = tuples.iter().filter(f);\n   |                           ^^^^^^ trait `for&lt;'r&gt; impl std::ops::FnMut&lt;(&amp;&amp;(_, _),)&gt;: std::ops::FnMut&lt;(&amp;'r &amp;(&amp;str, &amp;std::ops::Fn(i32) -&gt; bool),)&gt;` not satisfied\n\nerror[E0271]: type mismatch resolving `for&lt;'r&gt; &lt;impl std::ops::FnMut&lt;(&amp;&amp;(_, _),)&gt; as std::ops::FnOnce&lt;(&amp;'r &amp;(&amp;str, &amp;std::ops::Fn(i32) -&gt; bool),)&gt;&gt;::Output == bool`\n  --&gt; &lt;anon&gt;:11:27\n   |\n11 |     let _ = tuples.iter().filter(f);\n   |                           ^^^^^^ expected bound lifetime parameter , found concrete lifetime\n   |\n   = note: concrete lifetime that was found is lifetime '_#24r\n</code></pre>\n\n<p><code>expected bound lifetime parameter , found concrete lifetime</code>... What does that mean?</p>\n\n<p><code>f</code>'s type is some type that implements <code>FnMut(&amp;'c &amp;'b (&amp;'a str, &amp;Fn(i32) -&gt; bool)) -&gt; bool</code>. In the call to <code>apply</code>, <code>B == &amp;'c &amp;'b (&amp;'a str, &amp;Fn(i32) -&gt; bool)</code> and <code>C == bool</code>. Note that <code>B</code> is <em>one fixed type</em> here; <code>'c</code> represents one, fixed lifetime, which is called a <em>concrete lifetime</em>.</p>\n\n<p>Let's take a look at <code>filter</code>'s signature:</p>\n\n<pre><code>fn filter&lt;P&gt;(self, predicate: P) -&gt; Filter&lt;Self, P&gt; where\n    Self: Sized, P: FnMut(&amp;Self::Item) -&gt; bool,\n</code></pre>\n\n<p>Here, <code>P</code> must implement <code>FnMut(&amp;Self::Item) -&gt; bool</code>. Actually, this syntax is shorthand for <code>for&lt;'r&gt; FnMut(&amp;'r Self::Item) -&gt; bool</code>. Here. <code>'r</code> is a bound lifetime parameter.</p>\n\n<p>So, the problem is that our function that implements <code>FnMut(&amp;'c &amp;'b (&amp;'a str, &amp;Fn(i32) -&gt; bool)) -&gt; bool</code> does <em>not</em> implement <code>for&lt;'r&gt; FnMut(&amp;'r Self::Item) -&gt; bool</code>. We'd need a function that implements <code>for&lt;'c&gt; FnMut(&amp;'c &amp;'b (&amp;'a str, &amp;Fn(i32) -&gt; bool)) -&gt; bool</code>. The only way to do this, for now, would be to write <code>apply</code> like this:</p>\n\n<pre><code>fn apply&lt;A, B, C, F, G&gt;(mut f: F, a: A) -&gt; impl FnMut(&amp;B) -&gt; C\n         where F: FnMut(&amp;B) -&gt; G,\n               G: FnMut(A) -&gt; C,\n               A: Clone\n{\n    move |b| f(b)(a.clone())\n}\n</code></pre>\n\n<p>or the more explicit version:</p>\n\n<pre><code>fn apply&lt;A, B, C, F, G&gt;(mut f: F, a: A) -&gt; impl for&lt;'r&gt; FnMut(&amp;'r B) -&gt; C\n         where F: for&lt;'r&gt; FnMut(&amp;'r B) -&gt; G,\n               G: FnMut(A) -&gt; C,\n               A: Clone\n{\n    move |b| f(b)(a.clone())\n}\n</code></pre>\n\n<p>If Rust eventually supports <a href=\"https://internals.rust-lang.org/t/higher-kinded-types-the-difference-between-giving-up-and-moving-forward/3908\">higher-kinded types</a>, there <em>might</em> be a more elegant way to solve this problem.</p>\n"}], "owner": {"reputation": 997, "user_id": 2175951, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/24d1f324f6f5c47ff5e10721c2b115c0?s=128&d=identicon&r=PG", "display_name": "iopq", "link": "https://stackoverflow.com/users/2175951/iopq"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2749, "favorite_count": 2, "accepted_answer_id": 39542472, "answer_count": 1, "score": 11, "last_activity_date": 1474106337, "creation_date": 1474067954, "last_edit_date": 1474106337, "question_id": 39541312, "link": "https://stackoverflow.com/questions/39541312/function-returning-a-closure-not-working-inside-my-filter", "title": "Function returning a closure not working inside my filter", "body": "<p>I cannot get this to compile without using a closure. I'm trying to get the function <code>apply</code> to return the correct kind of closure in the first place.</p>\n\n<pre><code>#![feature(conservative_impl_trait)]\n#![allow(dead_code)]\n\nfn accumulate&lt;'a&gt;(tuples: &amp;[(&amp;'a str, &amp;Fn(i32) -&gt; bool)], i: i32) {\n\n    // this works\n    let _ = tuples.iter().filter(|t| apply(second, i)(t));\n\n    // this doesn't\n    //let f = apply(second, i);\n    //let _ = tuples.iter().filter(f);\n\n    //this works as well\n\n    let f  = |t: &amp;&amp;(_,_)| apply(second, i)(t);\n    let _ = tuples.iter().filter(f);\n}\n\nfn apply&lt;A, B, C, F, G&gt;(mut f: F, a: A) -&gt; impl FnMut(B) -&gt; C\n         where F: FnMut(B) -&gt; G,\n               G: FnMut(A) -&gt; C,\n               A: Clone\n{\n    move |b| f(b)(a.clone())\n}\n\n\nfn second&lt;A, B: ?Sized&gt;(&amp;(_, ref second): &amp;(A, B)) -&gt; &amp;B {\n    second\n}\n\nfn main()  {}\n</code></pre>\n\n<p>What can I do to make <code>apply</code> work like I want it to?</p>\n"}, {"tags": ["c++", "rust", "c-strings"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1474052689, "post_id": 39538502, "comment_id": 66390939, "body": "Could you expand on why you believe it is safe to pass a <code>CString</code> across the FFI boundary?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1474052830, "post_id": 39538502, "comment_id": 66391003, "body": "<a href=\"http://jakegoulding.com/rust-ffi-omnibus/string_arguments/\" rel=\"nofollow noreferrer\">jakegoulding.com/rust-ffi-omnibus/string_arguments</a> and <a href=\"http://jakegoulding.com/rust-ffi-omnibus/string_return/\" rel=\"nofollow noreferrer\">jakegoulding.com/rust-ffi-omnibus/string_return</a>"}, {"owner": {"reputation": 3748, "user_id": 2959795, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/RFMby.jpg?s=128&g=1", "display_name": "Scony", "link": "https://stackoverflow.com/users/2959795/scony"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1474052894, "post_id": 39538502, "comment_id": 66391041, "body": "@Shepmaster Well, my reasoning is that if I can pass <code>int32</code> back and forth + if <code>CString</code> can easily go in and out (commented code), then it should work some way."}, {"owner": {"reputation": 3748, "user_id": 2959795, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/RFMby.jpg?s=128&g=1", "display_name": "Scony", "link": "https://stackoverflow.com/users/2959795/scony"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1474053901, "post_id": 39538502, "comment_id": 66391528, "body": "@Shepmaster that URLs are the answer. Thanks !"}], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 5, "last_activity_date": 1474082339, "creation_date": 1474082339, "answer_id": 39542529, "question_id": 39538502, "link": "https://stackoverflow.com/questions/39538502/interfacing-c-with-rust-returning-cstring-panics/39542529#39542529", "title": "Interfacing C++ with Rust - returning CString panics", "body": "<p>Rust's <code>CString</code> is not compatible with C's <code>const char *</code>. Here's the definition of <code>CString</code> from the standard library:</p>\n\n<pre><code>pub struct CString {\n    inner: Box&lt;[u8]&gt;,\n}\n</code></pre>\n\n<p>This <code>Box&lt;[u8]&gt;</code> type is a <strong>fat pointer</strong>, i.e. a tuple that contains a pointer to the slice's items and the length of the slice as a <code>usize</code>.</p>\n\n<p>What you should do instead is make your Rust function take a <code>*const c_char</code> argument and then call <a href=\"https://doc.rust-lang.org/stable/std/ffi/struct.CStr.html#method.from_ptr\" rel=\"noreferrer\"><code>CStr::from_ptr</code></a> with that pointer as the argument to obtain a <a href=\"https://doc.rust-lang.org/stable/std/ffi/struct.CStr.html\" rel=\"noreferrer\"><code>CStr</code></a> value.</p>\n\n<p>As for the return value, there's a bit of a problem: your function allocates a new string and then returns a pointer to it. Again, you should return a <code>*const c_char</code>, which you can do by calling <a href=\"https://doc.rust-lang.org/stable/std/ffi/struct.CString.html#method.into_raw\" rel=\"noreferrer\"><code>CString::into_raw</code></a> on your concatenated <code>CString</code> value. But to avoid memory leaks, you must also provide a Rust function that will take back a pointer returned by <code>hello</code> and call <a href=\"https://doc.rust-lang.org/stable/std/ffi/struct.CString.html#method.from_raw\" rel=\"noreferrer\"><code>CString::from_raw</code></a> on it, which will recreate the <code>CString</code>. The <code>CString</code>'s destructor will then run, freeing the memory.</p>\n"}], "owner": {"reputation": 3748, "user_id": 2959795, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/RFMby.jpg?s=128&g=1", "display_name": "Scony", "link": "https://stackoverflow.com/users/2959795/scony"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 546, "favorite_count": 0, "accepted_answer_id": 39542529, "answer_count": 1, "score": 2, "last_activity_date": 1474129290, "creation_date": 1474052528, "last_edit_date": 1474129290, "question_id": 39538502, "link": "https://stackoverflow.com/questions/39538502/interfacing-c-with-rust-returning-cstring-panics", "title": "Interfacing C++ with Rust - returning CString panics", "body": "<p>I am trying to call some functions written in Rust from C++. So far I've been quite successful but I still have one little problem with a <code>CString</code>-related panic during runtime.</p>\n\n<p>The function <code>hello</code> is supposed to take an input string, concatenate it with some other string and return the product.</p>\n\n<p>Here's my <code>fun.rs</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::ffi::CString;\n\n#[no_mangle]\npub extern \"C\" fn add(a: i32, b: i32) -&gt; i32 {\n    a + b\n}\n\n#[no_mangle]\npub extern \"C\" fn hello(cs: CString) -&gt; CString {\n    let slice = cs.to_str().unwrap();\n    let mut s = \"Hello, \".to_string();\n    s = s + slice;\n\n    CString::new(&amp;s[..]).unwrap() // runtime error\n    // CString::new(cs).unwrap()  // empty string if no borrow\n    // cs                         // works if no borrow, but this is not what I meant\n}\n</code></pre>\n\n<p>Here's <code>main.cpp</code>:</p>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>#include &lt;iostream&gt;\nusing namespace std;\n\nextern \"C\" {\n  int add(int a, int b);\n  const char* hello(const char*x);\n}\n\nint main()\n{\n  int a, b;\n  cin &gt;&gt; a &gt;&gt; b;\n  cout &lt;&lt; add(a,b) &lt;&lt; \";\" &lt;&lt; hello(\"Pawel\") &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre>\n\n<p>And <code>makefile</code>:</p>\n\n<pre><code>rust:\n        rustc --crate-type=staticlib -C panic=abort fun.rs\n\ncpp:\n        g++ -c main.cpp\n\nlink:\n        g++ main.o -L . libfun.a -o main -lpthread -ldl -lgcc_s -lc -lm -lrt -lutil\n</code></pre>\n\n<p>Commands to run executable:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ make rust\n$ make cpp\n$ make link\n$ ./main\n1 2\n</code></pre>\n\n<p>Executable output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>1 2\nthread '&lt;unnamed&gt;' panicked at 'index 18446744073709551615 out of range for slice of length 0', ../src/libcore/slice.rs:549\nnote: Run with `RUST_BACKTRACE=1` for a backtrace..\n</code></pre>\n\n<p>Backtrace:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>stack backtrace:\n   1:           0x435d4f - std::sys::backtrace::tracing::imp::write::h46e546df6e4e4fe6\n   2:           0x44405b - std::panicking::default_hook::_$u7b$$u7b$closure$u7d$$u7d$::h077deeda8b799591\n   3:           0x443c8f - std::panicking::default_hook::heb8b6fd640571a4f\n   4:           0x4099fe - std::panicking::rust_panic_with_hook::hd7b83626099d3416\n   5:           0x4442a1 - std::panicking::begin_panic::h941ea76fc945d925\n   6:           0x40b74a - std::panicking::begin_panic_fmt::h30280d4dd3f149f5\n   7:           0x44423e - rust_begin_unwind\n   8:           0x451d8f - core::panicking::panic_fmt::h2d3cc8234dde51b4\n   9:           0x452073 - core::slice::slice_index_len_fail::ha4faf37254d75f20\n  10:           0x40e903 - std::ffi::c_str::CStr::to_str::ha9642252376bab15\n  11:           0x4048e0 - hello\n  12:           0x40476f - main\n  13:     0x7f78ff688f44 - __libc_start_main\n  14:           0x404678 - &lt;unknown&gt;\n  15:                0x0 - &lt;unknown&gt;\n</code></pre>\n\n<p>Any ideas why Rust is panicking?</p>\n"}, {"tags": ["rust", "ffi", "c-strings", "widestring"], "comments": [{"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 1, "creation_date": 1474038496, "post_id": 39534712, "comment_id": 66383715, "body": "What&#39;s a pointer to a pointer to a string in C in this case? A <code>WCHAR**</code>? What does the function say it&#39;s going to do with this? Maybe you can tell us which function you want to call so we can look it up in MSDN."}, {"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1474038861, "post_id": 39534712, "comment_id": 66383927, "body": "@Shepmaster Not really, since I still don&#39;t know what the C side function <i>wants</i>."}, {"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 1, "creation_date": 1474038944, "post_id": 39534712, "comment_id": 66383973, "body": "Short version, show some code."}, {"owner": {"reputation": 635, "user_id": 2068852, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/4f80a409bf937f161433c8ea63c4f527?s=128&d=identicon&r=PG", "display_name": "Norbert", "link": "https://stackoverflow.com/users/2068852/norbert"}, "edited": false, "score": 0, "creation_date": 1474039535, "post_id": 39534712, "comment_id": 66384338, "body": "I just added a snippet from my code (the one version). The description of this parameter in MSDN says: A pointer to a variable that receives a pointer to a null-terminated security descriptor string. For a description of the string format, see Security Descriptor String Format. To free the returned buffer, call the LocalFree function."}, {"owner": {"reputation": 635, "user_id": 2068852, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/4f80a409bf937f161433c8ea63c4f527?s=128&d=identicon&r=PG", "display_name": "Norbert", "link": "https://stackoverflow.com/users/2068852/norbert"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1474039659, "post_id": 39534712, "comment_id": 66384410, "body": "@Shepmaster I am expecting the function to change the value of the variable. Doesn&#39;t  that - per definition - mean that I&#39;m moving ownership?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1474041467, "post_id": 39534712, "comment_id": 66385542, "body": "Read up on providing an <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1474041921, "post_id": 39534712, "comment_id": 66385809, "body": "<a href=\"https://github.com/retep998/winapi-rs/blob/0dfa0c207c25f270a2f82ff0ccda97b87212a035/lib/advapi32/src/lib.rs#L131\" rel=\"nofollow noreferrer\"><code>ConvertSecurityDescriptorToStringSecurityDescriptorW </code> isn&#39;t even exposed by that library</a>!"}, {"owner": {"reputation": 635, "user_id": 2068852, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/4f80a409bf937f161433c8ea63c4f527?s=128&d=identicon&r=PG", "display_name": "Norbert", "link": "https://stackoverflow.com/users/2068852/norbert"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1474046253, "post_id": 39534712, "comment_id": 66387876, "body": "@Shepmaster True, the master branch of the crate does not contain this function yet. So, I compile the crate locally and add code from this PR <a href=\"https://github.com/retep998/winapi-rs/pull/315\" rel=\"nofollow noreferrer\">github.com/retep998/winapi-rs/pull/315</a> (which also includes this function). This however, makes it a little bit tricky for me to provide a minimal example that really compiles. I can for sure add a main function to my snippet and the definition for the other buffer but the code wont compile with the &quot;public&quot; version of winapi-rs"}], "answers": [{"comments": [{"owner": {"reputation": 635, "user_id": 2068852, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/4f80a409bf937f161433c8ea63c4f527?s=128&d=identicon&r=PG", "display_name": "Norbert", "link": "https://stackoverflow.com/users/2068852/norbert"}, "edited": false, "score": 0, "creation_date": 1474047060, "post_id": 39535960, "comment_id": 66388221, "body": "Thanks a lot for the answer! Your code compiles and runs fine. I also just realized after your explanation that (as far as I understood it) in my example, the widestr variable never gets overwritten by the C function. It overwrites the reference to it but not the data itself :-(  Is this a general rule that a C (WinAPI) function will always allocate the buffer by itself (if not following the two step approach where it first returns the size)? I can&#39;t help but it somehow feels odd for me to hand over uninitialized memory to such a function."}, {"owner": {"reputation": 635, "user_id": 2068852, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/4f80a409bf937f161433c8ea63c4f527?s=128&d=identicon&r=PG", "display_name": "Norbert", "link": "https://stackoverflow.com/users/2068852/norbert"}, "edited": false, "score": 0, "creation_date": 1474103877, "post_id": 39535960, "comment_id": 66402770, "body": "Can I ask a question that is related to this? (please let me know if I should open another topic). For the case that I have to call a Windows API function twice (where it returns the required size of the buffer first). What would be the best datatype to use? I experimented with a Vector (and it works) but following the philosophy of your anwer, it may be better to use a function like alloc::heap::allocate to simply address memory for the FFI."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1474048093, "last_edit_date": 1474048093, "creation_date": 1474042351, "answer_id": 39535960, "question_id": 39534712, "link": "https://stackoverflow.com/questions/39534712/should-i-pass-a-mutable-reference-or-transfer-ownership-of-a-variable-in-the-con/39535960#39535960", "title": "Should I pass a mutable reference or transfer ownership of a variable in the context of FFI?", "body": "<blockquote>\n  <p>I am expecting the function to change the value of the variable. Doesn't that - per definition - mean that I'm moving ownership?</p>\n</blockquote>\n\n<p>No. One key way to think about ownership is: who is responsible for destroying the value when you are done with it. </p>\n\n<p>Competent C APIs (and Microsoft generally falls into this category) <em>document</em> expected ownership rules, although sometimes the words are oblique or assume some level of outside knowledge. This particular function says:</p>\n\n<blockquote>\n  <p>To free the returned buffer, call the <strong>LocalFree</strong> function.</p>\n</blockquote>\n\n<p>That means that the <code>ConvertSecurityDescriptorToStringSecurityDescriptorW</code> is going to perform some kind of allocation and return that to the user. Checking out the function declaration, you can also see that they document that parameter as being an \"out\" parameter:</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>_Out_ LPTSTR               *StringSecurityDescriptor,\n</code></pre>\n\n<p>Why is it done this way? Because the caller doesn't know how much memory to allocate to store the string <sup>1</sup>! </p>\n\n<p>Normally, you'd pass a reference to <em>uninitialized memory</em> into the function which must then initialize it for you. </p>\n\n<p>This compiles, but you didn't provide enough context to actually call it, so who knows if it works:</p>\n\n<pre><code>extern crate advapi32;\nextern crate winapi;\nextern crate widestring;\n\nuse std::{mem, ptr, io};\nuse winapi::{winnt, PSECURITY_DESCRIPTOR};\nuse widestring::WideCString;\n\nfn foo(sd_buffer: PSECURITY_DESCRIPTOR) -&gt; WideCString {\n    let mut security_descriptor = unsafe { mem::uninitialized() };\n\n    let retval = unsafe {\n        advapi32::ConvertSecurityDescriptorToStringSecurityDescriptorW(\n            sd_buffer,\n            1,\n            winnt::DACL_SECURITY_INFORMATION,\n            &amp;mut security_descriptor,\n            ptr::null_mut()\n        )\n    };\n\n    if retval == 0 {\n        match io::Error::last_os_error().raw_os_error() {\n            Some(1008) =&gt; println!(\"Need to fix this errror in get_acl_of_file.\"), // Do nothing. No idea, why this error occurs\n            Some(e) =&gt; panic!(\"Unknown OS error in get_acl_of_file {}\", e),\n            None =&gt; panic!(\"That should not happen in get_acl_of_file!\"),\n        }\n    }\n\n    unsafe { WideCString::from_raw(security_descriptor) }\n}\n\nfn main() {\n    let x = foo(ptr::null_mut());\n    println!(\"{:?}\", x);\n}\n</code></pre>\n\n<pre><code>[dependencies]\nwinapi = { git = \"https://github.com/nils-tekampe/winapi-rs/\", rev = \"1bb62e2c22d0f5833cfa9eec1db2c9cfc2a4a303\" }\nadvapi32-sys = { git = \"https://github.com/nils-tekampe/winapi-rs/\", rev = \"1bb62e2c22d0f5833cfa9eec1db2c9cfc2a4a303\" }\nwidestring = \"*\"\n</code></pre>\n\n<hr>\n\n<p>Answering your questions directly:</p>\n\n<blockquote>\n  <p>Can I \"just\" pass in a mutable ref to a ref to a string into this function (inside an unsafe block) or should I rather use a functionality like .into_raw() and .from_raw() that also moves the ownership of the variable to the C function?</p>\n</blockquote>\n\n<p>Neither. The function doesn't expect you to pass it a pointer to a <em>string</em>, it wants you to pass a pointer to a place where <em>it</em> can put a string.</p>\n\n<blockquote>\n  <p>I also just realized after your explanation that (as far as I understood it) in my example, the widestr variable never gets overwritten by the C function. It overwrites the reference to it but not the data itself.</p>\n</blockquote>\n\n<p>It's very likely that the memory allocated by <code>WideCString::from_str(\"test\")</code> is completely leaked, as nothing has a reference to that pointer after the function call.</p>\n\n<blockquote>\n  <p>Is this a general rule that a C (WinAPI) function will always allocate the buffer by itself (if not following the two step approach where it first returns the size)? </p>\n</blockquote>\n\n<p>I don't believe there are <em>any</em> general rules between C APIs or even <em>inside</em> of a C API. Especially at a company as big as Microsoft with so much API surface. You need to read the documentation for each method. This is part of the constant drag that can make writing C feel like a slog.</p>\n\n<blockquote>\n  <p>it somehow feels odd for me to hand over uninitialized memory to such a function.</p>\n</blockquote>\n\n<p>Yep, because there's not really a guarantee that the function initializes it. In fact, it would be wasteful to initialize it in case of failure, so it probably doesn't. It's another thing that Rust seems to have nicer solutions for.</p>\n\n<hr>\n\n<p>Note that you shouldn't do function calls (e.g. <code>println!</code>) before calling things like <code>last_os_error</code>; those function calls might change the value of the last error!</p>\n\n<hr>\n\n<p><sup><strong>1</strong></sup> Other Windows APIs actually require a multistep process - you call the function with <code>NULL</code>, it returns the number of bytes you need to allocate, then you call it again </p>\n"}], "owner": {"reputation": 635, "user_id": 2068852, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/4f80a409bf937f161433c8ea63c4f527?s=128&d=identicon&r=PG", "display_name": "Norbert", "link": "https://stackoverflow.com/users/2068852/norbert"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1606, "favorite_count": 1, "accepted_answer_id": 39535960, "answer_count": 1, "score": 1, "last_activity_date": 1474048093, "creation_date": 1474038319, "last_edit_date": 1474046313, "question_id": 39534712, "link": "https://stackoverflow.com/questions/39534712/should-i-pass-a-mutable-reference-or-transfer-ownership-of-a-variable-in-the-con", "title": "Should I pass a mutable reference or transfer ownership of a variable in the context of FFI?", "body": "<p>I have a program that utilizes a Windows API via a C FFI (via winapi-rs). One of the functions expects a pointer to a pointer to a string as an output parameter. The function will store its result into this string. I'm using a variable of type <code>WideCString</code> for this string. </p>\n\n<p>Can I \"just\" pass in a mutable ref to a ref to a string into this function (inside an unsafe block) or should I rather use a functionality like <code>.into_raw()</code> and <code>.from_raw()</code> that also moves the ownership of the variable to the C function? </p>\n\n<p>Both versions compile and work but I'm wondering whether I'm buying any disadvantages with the direct way.</p>\n\n<p>Here are the relevant lines from my code utilizing <code>.into_raw</code> and <code>.from_raw</code>.</p>\n\n<pre><code>let mut widestr: WideCString = WideCString::from_str(\"test\").unwrap(); //this is the string where the result should be stored\nlet mut security_descriptor_ptr: winnt::LPWSTR = widestr.into_raw();\n\nlet rtrn3 = unsafe {\n    advapi32::ConvertSecurityDescriptorToStringSecurityDescriptorW(sd_buffer.as_mut_ptr() as *mut std::os::raw::c_void,\n                                    1, \n                                    winnt::DACL_SECURITY_INFORMATION,\n                                    &amp;mut security_descriptor_ptr,\n                                        ptr::null_mut())\n\n};\n\nif rtrn3 == 0 {\n    match IOError::last_os_error().raw_os_error() {\n        Some(1008) =&gt; println!(\"Need to fix this errror in get_acl_of_file.\"), // Do nothing. No idea, why this error occurs\n        Some(e) =&gt; panic!(\"Unknown OS error in get_acl_of_file {}\", e),\n        None =&gt; panic!(\"That should not happen in get_acl_of_file!\"),\n    }\n}\n\nlet mut rtr: WideCString = unsafe{WideCString::from_raw(security_descriptor_ptr)};\n</code></pre>\n\n<p>The <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa376397(v=vs.85).aspx\" rel=\"nofollow\">description of this parameter in MSDN</a> says:</p>\n\n<blockquote>\n  <p>A pointer to a variable that receives a pointer to a <strong>null</strong>-terminated security descriptor string. For a description of the string format, see <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa379570(v=vs.85).aspx\" rel=\"nofollow\">Security Descriptor String Format</a>. To free the returned buffer, call the <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa366730(v=vs.85).aspx\" rel=\"nofollow\"><strong>LocalFree</strong></a> function.</p>\n</blockquote>\n\n<p>I am expecting the function to change the value of the variable. Doesn't that - per definition - mean that I'm moving ownership?</p>\n"}, {"tags": ["callback", "rust"], "answers": [{"comments": [{"owner": {"reputation": 749, "user_id": 504550, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/01c50fcd072b3dabca5184fd6c84718b?s=128&d=identicon&r=PG", "display_name": "coriolinus", "link": "https://stackoverflow.com/users/504550/coriolinus"}, "edited": false, "score": 0, "creation_date": 1474037371, "post_id": 39532428, "comment_id": 66382986, "body": "Thanks! So all <code>FnMut</code> bindings must be mutable, then? I had thought their mutability referred only to their enclosed context. I guess that doesn&#39;t make sense, though; if they&#39;re a trait object which contains that context, then of course they have to be modifiable. It would be great if the error message explained that better; I really didn&#39;t understand what was going on."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1474031970, "last_edit_date": 1474031970, "creation_date": 1474031591, "answer_id": 39532428, "question_id": 39531899, "link": "https://stackoverflow.com/questions/39531899/unable-to-call-a-function-from-a-vector-of-callbacks-get-expected-function-fo/39532428#39532428", "title": "Unable to call a function from a vector of callbacks, get `expected function, found `Box&lt;std::ops::FnMut(T) + &#39;a&gt;`", "body": "<p>Here's a smaller reproduction:</p>\n\n<pre><code>fn main() {\n    let a: Vec&lt;Box&lt;FnMut()&gt;&gt; = vec![Box::new(|| println!(\"called\"))];\n    a[0]();\n}\n</code></pre>\n\n<hr>\n\n<p>Let's break it down and watch the types and errors:</p>\n\n<pre><code>fn call_by_id(&amp;self, cb_id: usize, value: T) {\n    let () = self.callbacks[cb_id];\n}\n</code></pre>\n\n<p>This shows that the type is <code>Box&lt;std::ops::FnMut(T)&gt;</code>. So far, so good. Store that in a variable and proceed:</p>\n\n<pre><code>fn call_by_id(&amp;self, cb_id: usize, value: T) {\n    let x = self.callbacks[cb_id];\n    x(value);\n}\n</code></pre>\n\n<p>Ah, right: <code>error: cannot borrow immutable `Box` content `*x` as mutable</code>...</p>\n\n<pre><code>fn call_by_id(&amp;self, cb_id: usize, value: T) {\n    let mut x = self.callbacks[cb_id];\n    x(value);\n}\n</code></pre>\n\n<p>Oops: <code>error: cannot move out of indexed content</code>...</p>\n\n<pre><code>fn call_by_id(&amp;self, cb_id: usize, value: T) {\n    let mut x = &amp;mut self.callbacks[cb_id];\n    x(value);\n}\n</code></pre>\n\n<p>Ah ha: <code>error: cannot borrow immutable field `self.callbacks` as mutable</code>...</p>\n\n<pre><code>fn call_by_id(&amp;mut self, cb_id: usize, value: T) {\n    let mut x = &amp;mut self.callbacks[cb_id];\n    x(value);\n}\n</code></pre>\n\n<p><strong>It compiles!</strong> I'd probably leave it here (with a better name for <code>x</code>), but let's see if we can get it back to one line. Directly substitute:</p>\n\n<pre><code>fn call_by_id(&amp;mut self, cb_id: usize, value: T) {\n    (&amp;mut self.callbacks[cb_id])(value);\n}\n</code></pre>\n\n<p>Nope, back to <code>error: expected function, found `&amp;mut Box&lt;std::ops::FnMut(T) + 'a&gt;`</code> Maybe a dereference instead:</p>\n\n<pre><code>fn call_by_id(&amp;mut self, cb_id: usize, value: T) {\n    (*self.callbacks[cb_id])(value);\n}\n</code></pre>\n\n<p>Nope, <code>error: cannot borrow immutable</code>Box<code>content as mutable</code>. Being more specific about mutability:</p>\n\n<pre><code>fn call_by_id(&amp;mut self, cb_id: usize, value: T) {\n    (*&amp;mut self.callbacks[cb_id])(value);\n}\n</code></pre>\n\n<p><strong>This works</strong>, but I'm not sure it's elegant.</p>\n\n<hr>\n\n<p>In summary, the problem is that the variable for the callback is not mutable. This was caused by two things:</p>\n\n<ol>\n<li>The binding of the vector of callbacks was not mutable (via <code>&amp;self</code>).</li>\n<li>The dereferencing of the callback <em>seemingly</em> doesn't understand the mutability requirements unless you are explicit. I'm not 100% sure why this is.</li>\n</ol>\n\n<hr>\n\n<p>Note that in your commented code:</p>\n\n<pre><code>*self.callbacks[cb_id](value);\n*(self.callbacks[cb_id])(value);\n</code></pre>\n\n<p>I'm pretty sure these are the same; <code>*</code>'s precedence will bind it to the result of the whole value. I think you meant:</p>\n\n<pre><code>(*self.callbacks[cb_id])(value);\n</code></pre>\n"}], "owner": {"reputation": 749, "user_id": 504550, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/01c50fcd072b3dabca5184fd6c84718b?s=128&d=identicon&r=PG", "display_name": "coriolinus", "link": "https://stackoverflow.com/users/504550/coriolinus"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 317, "favorite_count": 1, "accepted_answer_id": 39532428, "answer_count": 1, "score": 1, "last_activity_date": 1474031970, "creation_date": 1474030025, "last_edit_date": 1474031798, "question_id": 39531899, "link": "https://stackoverflow.com/questions/39531899/unable-to-call-a-function-from-a-vector-of-callbacks-get-expected-function-fo", "title": "Unable to call a function from a vector of callbacks, get `expected function, found `Box&lt;std::ops::FnMut(T) + &#39;a&gt;`", "body": "<p>I'm trying to implement a callbacks system in Rust 1.11. I think I've got the system set up right to store the callbacks, but I'm having trouble actually calling them. Example code:</p>\n\n<pre><code>struct Container&lt;'a, T&gt; {\n    callbacks: Vec&lt;Box&lt;FnMut(T) + 'a&gt;&gt;,\n}\n\nimpl&lt;'a, T: Copy + PartialEq&gt; Container&lt;'a, T&gt; {\n    fn new() -&gt; Self {\n        Container {\n            callbacks: Vec::new(),\n        }\n    }\n\n    fn add_callback&lt;F: 'a + FnMut(T)&gt;(&amp;mut self, callback: F) -&gt; usize {\n        let cb_id = self.callbacks.len();\n        self.callbacks.push(Box::new(callback));\n        cb_id\n    }\n\n    fn call_by_id(&amp;self, cb_id: usize, value: T) {\n        // This doesn't work and I don't know why:\n        self.callbacks[cb_id](value);\n\n        // It still doesn't work (same error) when I try to dereference the Box\n        // *self.callbacks[cb_id](value);\n\n        // It's not a dereferencing scoping issue, either\n        // *(self.callbacks[cb_id])(value);\n    }\n\n}\n\nfn main() {\n    let mut list = Vec::new();\n\n    {\n        let mut container = Container::new();\n        let append = container.add_callback(|v| list.push(v));\n\n        container.call_by_id(append, 3);\n        container.call_by_id(append, 4);\n    }\n\n    println!(\"List contains: {:?}\", list);\n    // Expect \"List contains: [3, 4]\", but it doesn't compile\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=268fc63db90a15bdfe1a0b6a87f9c6d7&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">Playground link</a>)</p>\n\n<p>This gives the following error:</p>\n\n<pre><code>error: expected function, found `Box&lt;std::ops::FnMut(T) + 'a&gt;`\n  --&gt; &lt;anon&gt;:20:9\n   |&gt;\n20 |&gt;         self.callbacks[cb_id](value);\n   |&gt;         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n</code></pre>\n\n<p>This is unusually unhelpful, for Rust; I'm having real trouble finding other instances of this error via Google or searching here.</p>\n\n<p>The <code>Box</code> docs claim there's a generic <code>impl&lt;T&gt; Deref for Box&lt;T&gt; where T: ?Sized</code>, and the <code>Sized</code> docs say that the syntax <code>?Sized</code> is used to <em>remove</em> the requirement for the <code>Sized</code> trait. I understand this to mean, together, that <code>Box</code> implements <code>Deref</code> for every <code>T</code>, sized or not, so it should be in play here. </p>\n\n<p>If that's the case, I don't understand <em>at all</em> why I can't just call the <code>Box</code> containing the callback, or (worst case) dereference <code>self.callbacks[cb_id]</code> to get access to the callable. My best guess at the moment is that it has something to do with the lifetimes in play, but if so, I just have no idea how to adjust them to make this work.</p>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 1552, "user_id": 3145469, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/40ef74077e497553ad7a6ce20a1fc38b?s=128&d=identicon&r=PG&f=1", "display_name": "MrMobster", "link": "https://stackoverflow.com/users/3145469/mrmobster"}, "edited": false, "score": 0, "creation_date": 1474044779, "post_id": 39533143, "comment_id": 66387198, "body": "I do not quite understand why the error E0502 occurs in the first place. Sure, I borrow &#39;graph&#39; for the invocation of the find_edge() method, but the function returns  before split_edge() is called, so shouldn&#39;t the borrowed reference expire by then? How should I go about if I really want to have the edge invalidated and not just reuse the variable?"}, {"owner": {"reputation": 14451, "user_id": 33499, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17c590aa4c56918b47c7ba5e39dba5d8?s=128&d=identicon&r=PG", "display_name": "wimh", "link": "https://stackoverflow.com/users/33499/wimh"}, "reply_to_user": {"reputation": 1552, "user_id": 3145469, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/40ef74077e497553ad7a6ce20a1fc38b?s=128&d=identicon&r=PG&f=1", "display_name": "MrMobster", "link": "https://stackoverflow.com/users/3145469/mrmobster"}, "edited": false, "score": 1, "creation_date": 1474054193, "post_id": 39533143, "comment_id": 66391659, "body": "When you call <code>let edge : &amp;Edge = graph.findEdge( ... );</code>, <code>edge</code> is borrowed from <code>graph</code> until it (<code>edge</code>) goes out of scope. In my example that is until the end of <code>main()</code>. It is difficult for me to understand your exact requirements, so I can&#39;t say what you must change. But it seems strange to me that you pass the result of <code>find_edge</code> to <code>split_edge</code>. For example, can&#39;t you add the parameters of <code>find_edge</code> to <code>split_edge</code>? Maybe combined with a additional block to limit the lifetime of <code>edge</code>?"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1474055378, "post_id": 39533143, "comment_id": 66392171, "body": "Semantically, splitting an edge in a graph (regardless of being directed or not) should either invalidate that edge completely, or modify the given edge while creating a new one. I suppose it&#39;s up to OP to choose which behaviour."}, {"owner": {"reputation": 1552, "user_id": 3145469, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/40ef74077e497553ad7a6ce20a1fc38b?s=128&d=identicon&r=PG&f=1", "display_name": "MrMobster", "link": "https://stackoverflow.com/users/3145469/mrmobster"}, "edited": false, "score": 0, "creation_date": 1474059384, "post_id": 39533143, "comment_id": 66393916, "body": "Thank you for the explanation. So if I understand this correctly, the way to work around this would be to explicitly restrict the lifetime of &#39;edge&#39;, e.g. by combining functionality of find and split? Unfortunately, this would take a lot of flexibility away, as the graph is being iterated and split at an unpredictable fashion. What I wanted to do is achieve algorithmic safety in the sense that no reference to the graph substate can survive graph invalidation. In particular the Edge type doesn&#39;t even need to be a pointer - it could be an integer index to an internal table of the edge..."}], "tags": [], "owner": {"reputation": 14451, "user_id": 33499, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17c590aa4c56918b47c7ba5e39dba5d8?s=128&d=identicon&r=PG", "display_name": "wimh", "link": "https://stackoverflow.com/users/33499/wimh"}, "is_accepted": false, "score": 1, "last_activity_date": 1474033745, "creation_date": 1474033745, "answer_id": 39533143, "question_id": 39528320, "link": "https://stackoverflow.com/questions/39528320/make-object-expire-given-a-state-change-in-rust/39533143#39533143", "title": "Make object expire given a state change in Rust", "body": "<p>If you match your code to your comments, you will get an compiler error, although not at the position you want. Your current code is basically <a href=\"https://play.rust-lang.org/?gist=b1f26cccd66962c6fb0145e545275c89&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">this</a>. In this case <code>split_edge</code> looks like this:</p>\n\n<pre><code>fn split_edge(&amp;self, edge: &amp;Edge) -&gt; &amp;Edge {}\n</code></pre>\n\n<p>This does not allow you to change either the graph or the edge. So this function is not able to invalidate the edge. If you borrow self as mutable, you will get a compiler error, because you already borrow self as immutable: </p>\n\n<pre><code>fn split_edge(&amp;mut self, edge: &amp;Edge) -&gt; &amp;Edge {}\n// error: cannot borrow `graph` as mutable because it is also borrowed as immutable [--explain E0502]\n</code></pre>\n\n<p>You would also run into errors if you borrow edge mutable instead. </p>\n\n<p>If edge is not really invalidated, by you just want to avoid reusing it, just reuse the variable name <code>edge</code> instead of <code>new_edge</code>.</p>\n\n<pre><code>let edge : &amp;Edge = graph.find_edge();\nlet edge : &amp;Edge = graph.split_edge(edge);\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 600, "user_id": 3754495, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/65fff37f6d10b64ca1676adcc33f5ffb?s=128&d=identicon&r=PG", "display_name": "notriddle", "link": "https://stackoverflow.com/users/3754495/notriddle"}, "is_accepted": false, "score": 0, "last_activity_date": 1474310208, "creation_date": 1474310208, "answer_id": 39579933, "question_id": 39528320, "link": "https://stackoverflow.com/questions/39528320/make-object-expire-given-a-state-change-in-rust/39579933#39579933", "title": "Make object expire given a state change in Rust", "body": "<p>There are two ways that can be done:</p>\n\n<ol>\n<li><p><code>find_edge</code> can produce a <code>&amp;mut</code> reference to the edge. Then <code>split_edge</code> will end up transferring the exclusive borrow into the reference it returns, making it inaccessible to the caller.</p></li>\n<li><p><code>find_edge</code> can instead be <code>take_edge</code>. That is, it produces a non-copyable object that represents the edge. <code>split_edge</code>, of course, will consume it.</p></li>\n</ol>\n"}], "owner": {"reputation": 1552, "user_id": 3145469, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/40ef74077e497553ad7a6ce20a1fc38b?s=128&d=identicon&r=PG&f=1", "display_name": "MrMobster", "link": "https://stackoverflow.com/users/3145469/mrmobster"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 119, "favorite_count": 0, "answer_count": 2, "score": 1, "last_activity_date": 1474310208, "creation_date": 1474018945, "last_edit_date": 1474033785, "question_id": 39528320, "link": "https://stackoverflow.com/questions/39528320/make-object-expire-given-a-state-change-in-rust", "title": "Make object expire given a state change in Rust", "body": "<p>Is it possible in Rust to explicitly provide context on when an object expires? For instance, imagine a graph manipulation code that does something like this:</p>\n\n<pre><code>// borrow an edge from the graph\nlet edge : &amp;Edge = graph.findEdge( ... );\n// modify the edge\nlet new_edge : &amp;Edge = graph.splitEdge(edge, vertex); \n// the old edge is invalid now, this should be an compiler error now!\nedge.something\n</code></pre>\n\n<p>In general, is there some way to connect a lifetime of an object to a state or a state change?</p>\n"}, {"tags": ["rust", "rust-compiler-plugin", "rustc-serialize"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 5, "last_activity_date": 1474015613, "creation_date": 1474015613, "answer_id": 39527241, "question_id": 39527016, "link": "https://stackoverflow.com/questions/39527016/how-to-get-struct-fields-and-fields-type-in-compiler-plugin/39527241#39527241", "title": "How to get struct fields and fields type in compiler plugin?", "body": "<p>You don't.</p>\n\n<p>Compiler plugins (<em>i.e.</em> procedural macros) are expanded before this information exists, so you can't access it.  No, you can't delay expansion until types exist.  No, if you turn it into a lint, you can't generate code, which then defeats the purpose of having a procedural macro.</p>\n"}], "owner": {"reputation": 159, "user_id": 6659804, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/3568154ffb6271de6297d08479a9dfa1?s=128&d=identicon&r=PG", "display_name": "Feng Cen", "link": "https://stackoverflow.com/users/6659804/feng-cen"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 163, "favorite_count": 0, "accepted_answer_id": 39527241, "answer_count": 1, "score": 1, "last_activity_date": 1474015613, "creation_date": 1474014823, "question_id": 39527016, "link": "https://stackoverflow.com/questions/39527016/how-to-get-struct-fields-and-fields-type-in-compiler-plugin", "title": "How to get struct fields and fields type in compiler plugin?", "body": "<p>I want to generate a <code>HashMap</code> which use struct fields as key, and use <code>usize</code> integer as value.</p>\n\n<pre><code>pub struct Article {\n    title: String,\n    content: String,\n    category: String,\n    comments: Vec&lt;Comment&gt;\n}\n\npub struct Comment {\n    content: String\n}\n</code></pre>\n\n<p>My expected output is:</p>\n\n<pre><code>{\n    title: 0,\n    content: 1,\n    category: 2\n    comments[].content: 3\n}\n</code></pre>\n\n<p>My solution is <code>impl</code> my trait <code>FieldsMapping</code> for both <code>Article</code> and <code>Comment</code>:</p>\n\n<pre><code>pub trait FieldsMapping {\n    fn get_fields_map(&amp;self) -&gt; HashMap&lt;String, usize&gt;;\n}\n</code></pre>\n\n<p>I want to write a compiler plugin for custom derive <code>FieldsMapping</code>.</p>\n\n<p>My question is: How I get all fields within compiler plugin? And how can I know that fields type is <code>Vec</code> or other?</p>\n"}, {"tags": ["types", "rust"], "comments": [{"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1474006541, "post_id": 39522242, "comment_id": 66364912, "body": "You could use <code>u32</code> and just <code>else</code> for the last branch. (And probably <code>u8</code> for <code>m</code> and <code>u64</code> for the rest would be more appropriate.)"}], "answers": [{"comments": [{"owner": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "edited": false, "score": 1, "creation_date": 1473987546, "post_id": 39522260, "comment_id": 66360422, "body": "Or perhaps the function should panic, since the ackermann function is not defined for argument combinations other than these three. Either that or it should return a <code>Result</code> instead."}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "reply_to_user": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "edited": false, "score": 0, "creation_date": 1473988356, "post_id": 39522260, "comment_id": 66360559, "body": "Thanks Benjamin. I didn&#39;t review the specifics. I&#39;ll add a few other options as per your comment."}, {"owner": {"reputation": 2088, "user_id": 4281998, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/q8Jvt.png?s=128&g=1", "display_name": "Brady Dean", "link": "https://stackoverflow.com/users/4281998/brady-dean"}, "edited": false, "score": 0, "creation_date": 1473989715, "post_id": 39522260, "comment_id": 66360775, "body": "Thanks for the help. Also, don&#39;t think too hard about the function, it&#39;s supposed to be difficult to compute. <a href=\"https://en.wikipedia.org/wiki/Ackermann_function\" rel=\"nofollow noreferrer\">en.wikipedia.org/wiki/Ackermann_function</a>"}, {"owner": {"reputation": 1470, "user_id": 2075745, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/6f9a084d236381e1882c4e28edb5151f?s=128&d=identicon&r=PG", "display_name": "user25064", "link": "https://stackoverflow.com/users/2075745/user25064"}, "edited": false, "score": 1, "creation_date": 1474032725, "post_id": 39522260, "comment_id": 66379822, "body": "I think with the else you can actually drop the returns and semi-colons"}], "tags": [], "owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "is_accepted": true, "score": 8, "last_activity_date": 1473988509, "last_edit_date": 1473988509, "creation_date": 1473986408, "answer_id": 39522260, "question_id": 39522242, "link": "https://stackoverflow.com/questions/39522242/mismatched-types-expected-i32-found/39522260#39522260", "title": "Mismatched types. Expected i32, found ()", "body": "<p>Not all of your code paths return a value. You can fix this a few ways.. but since this appears to be a recursive function.. you probably want a way to break the recursion:</p>\n\n<pre><code>fn ackermann(m: i32, n: i32) -&gt; i32 {\n    if m == 0 {\n        return n + 1;\n    } else if m &gt; 0 &amp;&amp; n == 0 {\n        return ackermann(m - 1, 1);\n    } else if m &gt; 0 &amp;&amp; n &gt; 0 {\n        return ackermann(m - 1, ackermann(m, n - 1));\n    }\n\n    return 0; // This breaks your recursion\n}\n</code></pre>\n\n<p>Or, perhaps an explicit <code>else</code>:</p>\n\n<pre><code>if m == 0 {\n    return n + 1;\n} else if m &gt; 0 &amp;&amp; n == 0 {\n    return ackermann(m - 1, 1);\n} else if m &gt; 0 &amp;&amp; n &gt; 0 {\n    return ackermann(m - 1, ackermann(m, n - 1));\n} else { // An explicit else also works\n    return 0;\n}\n</code></pre>\n\n<p>I haven't put much thought into what this algorithm is/does.. but the error is pretty clear. How you break your recursion and have the function return an actual value is up to you. </p>\n\n<p><em>EDIT</em>: Benjamin has pointed out in the comments that this specific function should not actually reach outside of the conditionals you've provided. As such, some other options include panic'ing if the code does get out or perhaps returning <code>Result&lt;i32&gt;</code> instead.</p>\n\n<p>The TLDR is: if none of your conditionals are met.. then the function won't return anything when its expected to return a number.</p>\n"}], "owner": {"reputation": 2088, "user_id": 4281998, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/q8Jvt.png?s=128&g=1", "display_name": "Brady Dean", "link": "https://stackoverflow.com/users/4281998/brady-dean"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4537, "favorite_count": 2, "closed_date": 1474032267, "accepted_answer_id": 39522260, "answer_count": 1, "score": 7, "last_activity_date": 1474032207, "creation_date": 1473986209, "last_edit_date": 1474032207, "question_id": 39522242, "link": "https://stackoverflow.com/questions/39522242/mismatched-types-expected-i32-found", "closed_reason": "Duplicate", "title": "Mismatched types. Expected i32, found ()", "body": "<p>This code:</p>\n\n<pre><code>fn ackermann(m: i32, n: i32) -&gt; i32 {\n    if m == 0 {\n        return n + 1;\n    } else if m &gt; 0 &amp;&amp; n == 0 {\n        return ackermann(m - 1, 1);\n    } else if m &gt; 0 &amp;&amp; n &gt; 0 {\n        return ackermann(m - 1, ackermann(m, n - 1));\n    }\n}\n</code></pre>\n\n<p>Has an error during compilation:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: mismatched types [--explain E0308]\n --&gt; src/main.rs:3:5\n  |&gt;\n3 |&gt;     if m == 0 {\n  |&gt;     ^ expected i32, found ()\nnote: expected type `i32`\nnote:    found type `()`\n</code></pre>\n"}, {"tags": ["file-io", "rust"], "comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1473971593, "post_id": 39519833, "comment_id": 66355441, "body": "Doesn&#39;t Windows use backslash <code>\\ </code> for path separator?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1473971962, "post_id": 39519833, "comment_id": 66355633, "body": "@trentcl Windows itself translates both types of slashes."}, {"owner": {"reputation": 21144, "user_id": 478656, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/fd656a5e8d2a51290877d695649456ad?s=128&d=identicon&r=PG", "display_name": "TessellatingHeckler", "link": "https://stackoverflow.com/users/478656/tessellatingheckler"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1473971986, "post_id": 39519833, "comment_id": 66355644, "body": "@trentcl nope, it can handle either in a pretty flexible and user friendly way.  <a href=\"https://github.com/rust-lang/rust/issues/2752\" rel=\"nofollow noreferrer\">Rust on Windows apparently can, too</a>. YourGamerMom - so run <a href=\"https://technet.microsoft.com/en-us/sysinternals/processmonitor.aspx\" rel=\"nofollow noreferrer\">SysInternals ProcMon</a> while you try to open the file, and see what path it&#39;s actually reaching for, and what happens."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473972219, "post_id": 39519833, "comment_id": 66355775, "body": "The file you are trying to open is <code>&quot;C:&#47;Users&#47;Name&#47;test.txt\\n&quot;</code>. <code>read_line</code> includes the newline from hitting <b>Enter</b>. You can see this by printing out the value of <code>input</code> with the <code>Debug</code> formatter. Also, you can just say <code>File::open(&amp;input)</code> and you should check out <code>if let</code>."}, {"owner": {"reputation": 347, "user_id": 1460985, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/42536eacaf7708afda1c0e1bc7eeb6c2?s=128&d=identicon&r=PG", "display_name": "YourGamerMom", "link": "https://stackoverflow.com/users/1460985/yourgamermom"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473974048, "post_id": 39519833, "comment_id": 66356645, "body": "@Shepmaster that might just be it! thanks. I assume rust&#39;s <code>String</code> type has some <code>.strip()</code> functionality, that might resolve the issue."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473974368, "post_id": 39519833, "comment_id": 66356786, "body": "@YourGamerMom Yep; check the linked duplicate for the method name."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1473976445, "post_id": 39519833, "comment_id": 66357627, "body": "I knew that both work in Windows Explorer, but I didn&#39;t know the API did translation. Good to know."}], "owner": {"reputation": 347, "user_id": 1460985, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/42536eacaf7708afda1c0e1bc7eeb6c2?s=128&d=identicon&r=PG", "display_name": "YourGamerMom", "link": "https://stackoverflow.com/users/1460985/yourgamermom"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 172, "favorite_count": 0, "closed_date": 1473972128, "answer_count": 0, "score": 0, "last_activity_date": 1473972045, "creation_date": 1473971375, "last_edit_date": 1473972045, "question_id": 39519833, "link": "https://stackoverflow.com/questions/39519833/unable-to-open-a-file-where-the-filename-is-read-from-standard-input", "closed_reason": "Duplicate", "title": "Unable to open a File where the filename is read from standard input", "body": "<p>When I use <code>File::open()</code>, I get the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>The filename, directory name, or volume label syntax is incorrect. (os error 123)\n</code></pre>\n\n<p>This is my code:</p>\n\n<pre><code>println!(\"enter an input file:\");\nmatch io::stdin().read_line(&amp;mut input) {\n    Err(_) =&gt; {\n        println!(\"input error\");\n        return;\n    }\n    _ =&gt; {}\n}\n\nlet pinput = Path::new(&amp;input);\n\nmatch File::open(&amp;pinput) {\n    Ok(mut finput) =&gt; {\n        // ...\n    }\n    Err(e) =&gt; println!(\"input file error: {}, {}\", e, pinput.display()),\n}\n</code></pre>\n\n<p>The file I am trying to open is <code>C:/Users/Name/test.txt</code> where <code>Name</code> is my name, the path contains no special characters or spaces, just members of the English alphabet.</p>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1473959757, "post_id": 39516770, "comment_id": 66349362, "body": "Does <code>trait RandomAccessIterator : Sub&lt;Output = isize&gt; + VariousOthers + Sized {}</code> not work? You didn&#39;t provide any code that would show how <i>what you have already tried</i> fails. I&#39;d expect more from someone with that 70k reputation :-(."}, {"owner": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473960113, "post_id": 39516770, "comment_id": 66349531, "body": "@Shepmaster: Yes, that works. Thank you. I&#39;m not sure how showing my failed attempts would help you answer the question. This is a syntax that I was not previously aware of. I could throw a hundred guesses at what the syntax might be. How would that help you?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1473960644, "post_id": 39516770, "comment_id": 66349818, "body": "The failed attempts would presumably have had code that would start working when the requirement was successfully implemented. That would have been useful to validate that my guess actually worked. Besides, <a href=\"http://meta.stackoverflow.com/q/261592/155423\">it&#39;s expected that you show that you&#39;ve expended effort before asking a question</a>. That includes your own code attempts, but also what searching you&#39;ve done here on SO and elsewhere on the Internet. Without all that, questions devolve to &quot;code broken. you fix?&quot; See also: <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>."}, {"owner": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473960990, "post_id": 39516770, "comment_id": 66350001, "body": "@Shepmaster: <i>&quot;but also what searching you&#39;ve done here on SO and elsewhere on the Internet&quot;</i> -- I find the above information to be completely useless when I&#39;m answering questions. Suffice it to say, you and I disagree on what makes a good question. And we&#39;re not likely to come to an agreement here. Anyway, thanks for answering my question."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1473962127, "last_edit_date": 1495539955, "creation_date": 1473962127, "answer_id": 39517452, "question_id": 39516770, "link": "https://stackoverflow.com/questions/39516770/putting-a-requirement-on-the-type-of-a-member-of-a-trait-implementation/39517452#39517452", "title": "Putting a requirement on the type of a member of a trait implementation", "body": "<pre><code>trait RandomAccessIterator : Sub&lt;Output = isize&gt; + VariousOthers {}\n</code></pre>\n\n<hr>\n\n<p>As discussed in <a href=\"https://doc.rust-lang.org/stable/book/\" rel=\"nofollow noreferrer\"><em>The Rust Programming Language</em></a> chapter about <a href=\"https://doc.rust-lang.org/stable/book/associated-types.html\" rel=\"nofollow noreferrer\">associated types</a> in the section for <a href=\"https://doc.rust-lang.org/stable/book/associated-types.html#trait-objects-with-associated-types\" rel=\"nofollow noreferrer\">trait objects with associated types</a>:</p>\n\n<blockquote>\n  <p>The <code>N=Node</code> syntax allows us to provide a concrete type, <code>Node</code>, for the <code>N</code> type parameter. Same with <code>E=Edge</code>. If we didn\u2019t provide this constraint, we couldn\u2019t be sure which <code>impl</code> to match this trait object to.</p>\n</blockquote>\n\n<p>While this isn't a trait object, the same syntax applies. Most people run into this <a href=\"https://stackoverflow.com/q/29184358/155423\">when using operators like <code>Mul</code></a>, </p>\n"}], "owner": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 67, "favorite_count": 0, "accepted_answer_id": 39517452, "answer_count": 1, "score": 0, "last_activity_date": 1473962127, "creation_date": 1473959571, "last_edit_date": 1473959680, "question_id": 39516770, "link": "https://stackoverflow.com/questions/39516770/putting-a-requirement-on-the-type-of-a-member-of-a-trait-implementation", "title": "Putting a requirement on the type of a member of a trait implementation", "body": "<p>I have a trait that implements another trait:</p>\n\n<pre><code>trait RandomAccessIterator : Sub + VariousOthers {}\n</code></pre>\n\n<p>How do I specify, that for all implementations of this trait, the result of the subtraction (the <code>Output</code> type within <code>Sub</code>) must be of a certain type, such as <code>isize</code>? That way, if I write a generic function which uses objects implementing this trait, I know (and more importantly, the compiler knows) that the result of <code>A - B</code> is type <code>isize</code>.</p>\n"}, {"tags": ["windows", "linker", "rust"], "comments": [{"owner": {"reputation": 35113, "user_id": 3826372, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/P0peM.png?s=128&g=1", "display_name": "Ross Ridge", "link": "https://stackoverflow.com/users/3826372/ross-ridge"}, "edited": false, "score": 4, "creation_date": 1473952066, "post_id": 39514007, "comment_id": 66344858, "body": "Microsoft&#39;s convention for 32-bit x86 is to prefix external C names with an underscore (_) so Rust is correct, your 32-bit libraries aren&#39;t. Given the symbols have the same offset in both versions of your libraries it appears that they&#39;re both the same and your 32-bit library is actually your 64-bit library."}, {"owner": {"reputation": 11665, "user_id": 108234, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/b20a2b2684e66eceb87a9e57c930649a?s=128&d=identicon&r=PG", "display_name": "Martin", "link": "https://stackoverflow.com/users/108234/martin"}, "reply_to_user": {"reputation": 35113, "user_id": 3826372, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/P0peM.png?s=128&g=1", "display_name": "Ross Ridge", "link": "https://stackoverflow.com/users/3826372/ross-ridge"}, "edited": false, "score": 0, "creation_date": 1473952575, "post_id": 39514007, "comment_id": 66345196, "body": "The build configuration is: <a href=\"https://i.imgur.com/DGFL1T3.png\" rel=\"nofollow noreferrer\">i.imgur.com/DGFL1T3.png</a> which presumably means it&#39;s building 32 bit libs? I also just rebuilt the opus project and copied the resulting libs into the right place, just to make sure I wasn&#39;t using the wrong ones!"}], "answers": [{"tags": [], "owner": {"reputation": 11665, "user_id": 108234, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/b20a2b2684e66eceb87a9e57c930649a?s=128&d=identicon&r=PG", "display_name": "Martin", "link": "https://stackoverflow.com/users/108234/martin"}, "is_accepted": true, "score": 0, "last_activity_date": 1475846691, "last_edit_date": 1475846691, "creation_date": 1475768136, "answer_id": 39900180, "question_id": 39514007, "link": "https://stackoverflow.com/questions/39514007/statically-linking-on-32-bit-windows-incorrectly-adds-a-leading-underscore/39900180#39900180", "title": "Statically linking on 32 bit Windows incorrectly adds a leading underscore", "body": "<p>The Rust build script which imports the dependencies will need some logic to do different work for different platforms. e.g.</p>\n\n<pre><code>extern crate target_build_utils;\n\nuse target_build_utils::TargetInfo;\n\nfn main() {\n    let arch = TargetInfo::new().expect(\"could not get target info\").target_arch();\n\n    match platform {\n        \"x86\" =&gt; { /* import 32 bit dependencies */\n        \"x86_64\" =&gt; { /* import 64 bit dependencies */\n    }\n}\n</code></pre>\n\n<p>My original script took the following approach (caution, this does <em>not work</em>):</p>\n\n<pre><code>fn main() {\n    add_deps();\n}\n\n#[cfg(target_arch = \"x86\")]\nfn add_deps() {\n    /* import 32 bit dependencies */\n}\n\n#[cfg(target_arch = \"x86_64\")]\nfn add_deps() {\n    /* import 64 bit dependencies */\n}\n</code></pre>\n\n<p>However these <code>cfg</code> attributes are for the platform the <em>build script</em> is building for, not the platform the actual code itself is building for (this is actually fairly obvious in retrospect)!</p>\n"}], "owner": {"reputation": 11665, "user_id": 108234, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/b20a2b2684e66eceb87a9e57c930649a?s=128&d=identicon&r=PG", "display_name": "Martin", "link": "https://stackoverflow.com/users/108234/martin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 298, "favorite_count": 0, "accepted_answer_id": 39900180, "answer_count": 1, "score": 2, "last_activity_date": 1475846691, "creation_date": 1473950558, "last_edit_date": 1473950882, "question_id": 39514007, "link": "https://stackoverflow.com/questions/39514007/statically-linking-on-32-bit-windows-incorrectly-adds-a-leading-underscore", "title": "Statically linking on 32 bit Windows incorrectly adds a leading underscore", "body": "<p>I am trying to build a Rust library which can use the <a href=\"https://www.opus-codec.org/\" rel=\"nofollow\">Opus</a> codec. When compiling for <code>x86_64-pc-windows-msvc</code> everything works as expected. However when I compile for <code>i686-pc-windows-msvc</code> I get errors about unresolved externals. e.g.</p>\n\n<blockquote>\n  <p>error LNK2001: unresolved external symbol _opus_encoder_create</p>\n</blockquote>\n\n<p>Obviously this is failing because it's looking for the wrong name! There shouldn't be a leading underscore there. My Rust import looks like:</p>\n\n<pre><code>extern \"C\" {\n    pub fn opus_encoder_create(fs:i32, chan:i32, app:i32, err:*mut i32) -&gt; *mut OpusEncoder;\n}\n</code></pre>\n\n<p>It looks like Rust is automatically inserting the underscore at the start. Running <code>dumpbin</code> on both the 32 bit and 64 bit lib files (built in Visual Studio) gets me:</p>\n\n<p>32 bit:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>&gt; 7202A opus_encoder_create\n</code></pre>\n\n<p>64 bit:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>&gt; 7202A opus_encoder_create\n</code></pre>\n\n<p>No underscores in sight!</p>\n\n<p>What am I doing wrong? How do I properly import and call these functions from Rust?</p>\n"}, {"tags": ["rust", "builder"], "answers": [{"comments": [{"owner": {"reputation": 48136, "user_id": 161922, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/16e12e337f6edc3750681492656097ed?s=128&d=identicon&r=PG", "display_name": "Rory", "link": "https://stackoverflow.com/users/161922/rory"}, "edited": false, "score": 0, "creation_date": 1473947735, "post_id": 39512565, "comment_id": 66341702, "body": "Thanks! I&#39;ve changed my getter methods to work on owned objects, and return that. Not references. Then I don&#39;t need the <code>.finalize()</code>"}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 3, "last_activity_date": 1473946865, "last_edit_date": 1473946865, "creation_date": 1473946736, "answer_id": 39512565, "question_id": 39512405, "link": "https://stackoverflow.com/questions/39512405/unable-to-compile-a-rust-builder-pattern-because-a-borrowed-value-does-not-live/39512565#39512565", "title": "Unable to compile a Rust builder pattern because a borrowed value does not live long enough", "body": "<p>You seem to be missing a finalizing method returning an owned object, like:</p>\n\n<pre><code>pub fn finalize(&amp;self) -&gt; DynamicParams {\n    DynamicParams { port: self.port }\n}\n</code></pre>\n\n<p>When you have it you can do the following:</p>\n\n<pre><code>let params = DynamicParams::new().port(1).finalize();\n</code></pre>\n\n<p>Which works, because the right hand expression does not return a reference, but an owned object. <code>port()</code> only returns a mutable reference; the object created by <code>new()</code> would have to be introduced by an earlier <code>let</code> binding in order for a reference to it to be valid.</p>\n"}], "owner": {"reputation": 48136, "user_id": 161922, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/16e12e337f6edc3750681492656097ed?s=128&d=identicon&r=PG", "display_name": "Rory", "link": "https://stackoverflow.com/users/161922/rory"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 138, "favorite_count": 0, "closed_date": 1473946905, "accepted_answer_id": 39512565, "answer_count": 1, "score": 1, "last_activity_date": 1473946865, "creation_date": 1473946302, "last_edit_date": 1473946824, "question_id": 39512405, "link": "https://stackoverflow.com/questions/39512405/unable-to-compile-a-rust-builder-pattern-because-a-borrowed-value-does-not-live", "closed_reason": "Duplicate", "title": "Unable to compile a Rust builder pattern because a borrowed value does not live long enough", "body": "<p>I am trying to use the <a href=\"https://doc.rust-lang.org/book/method-syntax.html#builder-pattern\" rel=\"nofollow\">builder pattern</a> in Rust, however I am getting a compilation error.</p>\n\n<pre><code>pub struct DynamicParams {\n    port: Option&lt;u16&gt;,\n} \n\nimpl DynamicParams {\n    pub fn new() -&gt; Self {\n        DynamicParams { port: None }\n    }\n\n    pub fn port(&amp;mut self, port: u16) -&gt; &amp;mut Self {\n        self.port = Some(port);\n        self\n    }\n}\n\nfn main() {\n    let params = DynamicParams::new().port(1);\n}\n</code></pre>\n\n<p>It's <a href=\"https://play.rust-lang.org/?code=pub%20struct%20DynamicParams%20%7B%0A%20%20%20%20port%3A%20Option%3Cu16%3E%2C%0A%7D%0A%0Aimpl%20DynamicParams%20%7B%0A%20%20%20%20pub%20fn%20new()%20-%3E%20Self%20%7B%0A%20%20%20%20%20%20%20%20DynamicParams%20%7B%20port%3A%20None%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20pub%20fn%20port(%26mut%20self%2C%20port%3A%20u16)%20-%3E%20%26mut%20Self%20%7B%0A%20%20%20%20%20%20%20%20self.port%20%3D%20Some(port)%3B%0A%20%20%20%20%20%20%20%20self%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20params%20%3D%20DynamicParams%3A%3Anew().port(1)%3B%0A%7D%0A&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">available on play.rust-lang.org</a>.</p>\n\n<p>Error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: borrowed value does not live long enough\n  --&gt; &lt;anon&gt;:17:18\n   |&gt;\n17 |&gt;     let params = DynamicParams::new().port(1);\n   |&gt;                  ^^^^^^^^^^^^^^^^^^^^ does not live long enough\nnote: reference must be valid for the block suffix following statement 0 at 17:46...\n  --&gt; &lt;anon&gt;:17:47\n   |&gt;\n17 |&gt;     let params = DynamicParams::new().port(1);\n   |&gt;                                               ^\nnote: ...but borrowed value is only valid for the statement at 17:4\n  --&gt; &lt;anon&gt;:17:5\n   |&gt;\n17 |&gt;     let params = DynamicParams::new().port(1);\n   |&gt;     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nhelp: consider using a `let` binding to increase its lifetime\n   --&gt; &lt;anon&gt;:17:5\n   |&gt;\n17 |&gt;     let params = DynamicParams::new().port(1);\n   |&gt;     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n</code></pre>\n\n<p>However as near as I can see, this is very similar to the <a href=\"https://doc.rust-lang.org/book/method-syntax.html#builder-pattern\" rel=\"nofollow\">builder pattern, as described in the Rust book</a>. What's going on? What am I doing wrong?</p>\n\n<p>I'm using Rust 1.11.</p>\n"}, {"tags": ["generics", "struct", "rust"], "answers": [{"comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1474013324, "post_id": 39512669, "comment_id": 66368195, "body": "And thanks for the additional information regarding type-level computation - my trait-foo has improved a lot."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 1, "creation_date": 1474014893, "post_id": 39512669, "comment_id": 66368938, "body": "@ljedrz: I would note that if you want to go &quot;deep&quot; into type level computation, you might be interested in the <a href=\"https://crates.io/crates/typenum\" rel=\"nofollow noreferrer\">typenum</a> crate."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 4, "last_activity_date": 1473960792, "last_edit_date": 1473960792, "creation_date": 1473946995, "answer_id": 39512669, "question_id": 39511525, "link": "https://stackoverflow.com/questions/39511525/enumerating-generic-structs/39512669#39512669", "title": "Enumerating generic structs", "body": "<p>You have a <code>T</code> in <code>Enumerate</code>... which serves no purpose.</p>\n\n<p>If you look back at your <code>Peano</code> trait, you will see that it has no <code>T</code>: the implementation for <code>Succ</code> has a parameter, but the trait itself does not.</p>\n\n<p>The same applies here.</p>\n\n<p>Let us start with a reduced scope: an <code>Enumerate</code> that can only go forward.</p>\n\n<pre><code>use std::marker::Sized;\n\ntrait Peano {}\n\n#[derive(Debug, Clone, Copy, PartialEq)]\nstruct Zero;\n\n#[derive(Debug, Clone, Copy, PartialEq)]\nstruct Succ&lt;T: Peano&gt;(T);\n\nimpl Peano for Zero {}\nimpl&lt;T&gt; Peano for Succ&lt;T&gt; where T: Peano {}\n\ntrait Enumerate: Peano + Sized {\n    fn succ(self) -&gt; Succ&lt;Self&gt;;\n}\n\nimpl Enumerate for Zero {\n    fn succ(self) -&gt; Succ&lt;Self&gt; { Succ(self) }\n}\n\nimpl&lt;T&gt; Enumerate for Succ&lt;T&gt; where T: Peano {\n    fn succ(self) -&gt; Succ&lt;Succ&lt;T&gt;&gt; { Succ(self) }\n}\n</code></pre>\n\n<p>A few points of interest:</p>\n\n<ul>\n<li>you can refer to the current type as <code>Self</code>, very useful when defining a trait since the type of implementers is unknown in advance </li>\n<li>you can constrain the implementers of a trait by using the <code>: Peano + Sized</code> syntax after the trait name</li>\n</ul>\n\n<hr>\n\n<p>Now, you also had a <code>prev</code> method which I did not implement. The thing is, it is nonsensical to apply <code>prev</code> to <code>Zero</code>. In this case, I propose that you rename <code>Enumerate</code> to <code>Next</code> and I'll show how to create a <code>Prev</code> trait:</p>\n\n<pre><code>trait Prev: Peano + Sized {\n    type Output: Peano + Sized;\n    fn prev(self) -&gt; Self::Output;\n}\n\nimpl&lt;T&gt; Prev for Succ&lt;T&gt; where T: Peano {\n    type Output = T;\n    fn prev(self) -&gt; Self::Output { self.0 }\n}\n</code></pre>\n\n<p>The syntax <code>type Output: Peano + Sized</code> is an <em>associated type</em>, it allows each implementer to specify which type to use for their specific case (and avoid having the <em>user</em> of the trait, having to guess which type they should use).</p>\n\n<p>Once specified, it can be referred to as <code>Self::Output</code> within the trait or as <code>&lt;X as Prev&gt;::Output</code> from outside (if <code>X</code> implements <code>Prev</code>).</p>\n\n<p>And since the trait is separate, you only have a <code>Prev</code> implementation for <code>Peano</code> numbers that actually <em>have</em> a predecessor.</p>\n\n<hr>\n\n<p>Why the <code>Sized</code> constraint?</p>\n\n<p>At the moment, Rust requires that return types have a known size. This is an implementation limit: in practice the caller has to reserve enough space on the stack for the callee to write down the return value.</p>\n\n<p>However... for type-level computation this is useless! So, what do we do?</p>\n\n<p>Well, first we add convenient method of checking the result of our computations (prettier than the <code>Debug</code> output):</p>\n\n<pre><code>trait Value: Peano {\n    fn value() -&gt; usize;\n}\n\nimpl Value for Zero {\n    fn value() -&gt; usize { 0 }\n}\n\nimpl&lt;T&gt; Value for Succ&lt;T&gt; where T: Value {\n    fn value() -&gt; usize { T::value() + 1 }\n}\n\nfn main() {\n    println!(\"{}\", Succ::&lt;Zero&gt;::value());\n}\n</code></pre>\n\n<p>Then... let's get rid of those methods, they bring nothing; the reworked traits are thus:</p>\n\n<pre><code>trait Next: Peano {\n    type Next: Peano;\n}\n\nimpl Next for Zero {\n    type Next = Succ&lt;Zero&gt;;\n}\n\nimpl&lt;T&gt; Next for Succ&lt;T&gt; where T: Peano {\n    type Next = Succ&lt;Succ&lt;T&gt;&gt;;\n}\n\nfn main() {\n    println!(\"{}\", &lt;Zero as Next&gt;::Next::value());\n}\n</code></pre>\n\n<p>and:</p>\n\n<pre><code>trait Prev: Peano {\n    type Prev: Peano;\n}\n\nimpl&lt;T&gt; Prev for Succ&lt;T&gt; where T: Peano {\n    type Prev = T;\n}\n\nfn main() {\n    println!(\"{}\", &lt;&lt;Zero as Next&gt;::Next as Prev&gt;::Prev::value());\n}\n</code></pre>\n\n<p>Now, you can go ahead and implement <code>Add</code> and co, though if you implement traits with methods you might need additional constraints.</p>\n"}], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 76, "favorite_count": 0, "accepted_answer_id": 39512669, "answer_count": 1, "score": 0, "last_activity_date": 1473960792, "creation_date": 1473943926, "last_edit_date": 1495541300, "question_id": 39511525, "link": "https://stackoverflow.com/questions/39511525/enumerating-generic-structs", "title": "Enumerating generic structs", "body": "<p>I wanted to try to build a proper implementation of Peano numbers using <code>struct</code>s, but it seems my generics game is not good enough yet and I could use some help. I read the docs on generics and <a href=\"https://stackoverflow.com/questions/30942408/casting-to-a-generic-type\">some</a> <a href=\"https://stackoverflow.com/questions/28589764/returning-and-using-a-generic-type-with-match\">StackOverflow</a> <a href=\"https://stackoverflow.com/questions/29184358/requiring-implementation-of-mul-in-generic-function\">questions</a>, but they don't fit my case.</p>\n\n<p>I introduced a <code>Peano</code> trait and <code>Zero</code> and <code>Succ</code> types:</p>\n\n<pre><code>trait Peano {}\n\nstruct Zero;\nstruct Succ&lt;T: Peano&gt;(T);\n</code></pre>\n\n<p>And implemented a <code>Peano</code> trait for both types to be able to abstract over both:</p>\n\n<pre><code>impl Peano for Zero {}\nimpl&lt;T&gt; Peano for Succ&lt;T&gt; where T: Peano {}\n</code></pre>\n\n<p>At first I wanted to implement <code>std::ops::Add</code> for <code>Peano</code>, but I quickly saw that I was doing something very wrong, so I decided to start with something simpler - enumeration:</p>\n\n<pre><code>trait Enumerate&lt;T: Peano&gt; {\n    fn succ(&amp;self) -&gt; Succ&lt;T&gt;;\n    fn pred(&amp;self) -&gt; Option&lt;T&gt;;\n}\n\nimpl&lt;T&gt; Enumerate&lt;T&gt; for Zero where T: Peano {\n    fn succ(&amp;self) -&gt; Succ&lt;T&gt; { Succ(*self) } // mismatched types: Zero instead of T\n    fn pred(&amp;self) -&gt; Option&lt;T&gt; { None }\n}\n\nimpl&lt;T&gt; Enumerate&lt;T&gt; for Succ&lt;T&gt; where T: Peano {\n    fn succ(&amp;self) -&gt; Succ&lt;T&gt; { Succ(*self) } // mismatched types: Succ&lt;T&gt; instead of T\n    fn pred(&amp;self) -&gt; Option&lt;T&gt; { Some(self.0) }\n}\n</code></pre>\n\n<p>What am I missing? I experimented with boxing the results (though I would want to avoid that if possible), but the error just changed to <code>mismatched types: Box&lt;Succ&lt;T&gt;&gt; instead of Box&lt;Peano&gt;</code>, so I'm not sure this is helpful.</p>\n\n<p>Full code below:</p>\n\n<pre><code>trait Peano {}\n\n#[derive(Debug, Clone, Copy, PartialEq)]\nstruct Zero;\n\n#[derive(Debug, Clone, Copy, PartialEq)]\nstruct Succ&lt;T: Peano&gt;(T);\n\nimpl Peano for Zero {}\nimpl&lt;T&gt; Peano for Succ&lt;T&gt; where T: Peano {}\n\ntrait Enumerate&lt;T: Peano&gt; {\n    fn succ(&amp;self) -&gt; Succ&lt;T&gt;;\n    fn pred(&amp;self) -&gt; Option&lt;T&gt;;\n}\n\nimpl&lt;T&gt; Enumerate&lt;T&gt; for Zero where T: Peano {\n    fn succ(&amp;self) -&gt; Succ&lt;T&gt; { Succ(*self) }\n    fn pred(&amp;self) -&gt; Option&lt;T&gt; { None }\n}\n\nimpl&lt;T&gt; Enumerate&lt;T&gt; for Succ&lt;T&gt; where T: Peano {\n    fn succ(&amp;self) -&gt; Succ&lt;T&gt; { Succ(*self) }\n    fn pred(&amp;self) -&gt; Option&lt;T&gt; { Some(self.0) }\n}\n</code></pre>\n"}, {"tags": ["rust", "bare-metal"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1473942901, "post_id": 39511127, "comment_id": 66338196, "body": "that sounds a lot like undefined behaviour... on a side-note: there&#39;s no need to implement a trait for <code>&amp;&#39;a str</code> if all the methods are by reference, you can implement it directly for <code>str</code>"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1473945643, "post_id": 39511127, "comment_id": 66340128, "body": "Just for the sake of exactness, those statements (<code>tmp.test()</code>, etc...) are contained within a <code>main</code> method, right?"}, {"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 1, "creation_date": 1473963957, "post_id": 39511127, "comment_id": 66351619, "body": "Please post a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>. It is quite unclear what <code>Serial</code> and <code>write_str</code> are."}, {"owner": {"reputation": 191, "user_id": 6073636, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4cea9aeca6cd1af1d0399cb8ed50dff9?s=128&d=identicon&r=PG&f=1", "display_name": "Andrey Tonkih", "link": "https://stackoverflow.com/users/6073636/andrey-tonkih"}, "reply_to_user": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1473967117, "post_id": 39511127, "comment_id": 66353209, "body": "@starblue Done."}, {"owner": {"reputation": 3376, "user_id": 134409, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/e1ec6b4e77bfbae1b992957792572630?s=128&d=identicon&r=PG", "display_name": "dpc.pw", "link": "https://stackoverflow.com/users/134409/dpc-pw"}, "edited": false, "score": 0, "creation_date": 1474004031, "post_id": 39511127, "comment_id": 66363947, "body": "Could you <code>objdump -D &lt;executable&gt;</code> and paste the relevant things (all the whole thing). I suspect it might be problem with gdb/dwarf interpreting <code>&amp;str &amp;str</code> incorrectly, not the code itself. You could try saving <code>baz.len()</code> to globals just to confirm."}], "answers": [{"tags": [], "owner": {"reputation": 191, "user_id": 6073636, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4cea9aeca6cd1af1d0399cb8ed50dff9?s=128&d=identicon&r=PG&f=1", "display_name": "Andrey Tonkih", "link": "https://stackoverflow.com/users/6073636/andrey-tonkih"}, "is_accepted": false, "score": 3, "last_activity_date": 1474031771, "creation_date": 1474031771, "answer_id": 39532477, "question_id": 39511127, "link": "https://stackoverflow.com/questions/39511127/value-coerced-to-str-from-str-has-null-values-on-bare-metal/39532477#39532477", "title": "Value coerced to &amp;str from &amp;&amp;str has null values on bare metal", "body": "<p>The problem is solved by editing the linker script. String was placed after bss section in memory. So multiboot filled it with zeros.</p>\n"}], "owner": {"reputation": 191, "user_id": 6073636, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4cea9aeca6cd1af1d0399cb8ed50dff9?s=128&d=identicon&r=PG&f=1", "display_name": "Andrey Tonkih", "link": "https://stackoverflow.com/users/6073636/andrey-tonkih"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 117, "favorite_count": 1, "answer_count": 1, "score": 3, "last_activity_date": 1474031771, "creation_date": 1473942718, "last_edit_date": 1473978476, "question_id": 39511127, "link": "https://stackoverflow.com/questions/39511127/value-coerced-to-str-from-str-has-null-values-on-bare-metal", "title": "Value coerced to &amp;str from &amp;&amp;str has null values on bare metal", "body": "<p>Here is a minimal example:</p>\n\n<p><strong>lib.rs:</strong></p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#![feature(lang_items)]\n#![no_std]\n\nextern crate rlibc;\nextern crate libc;\n\nuse libc::{c_int, c_char};\n\n#[no_mangle] // just for easier llvm-ir reading\nfn foo(baz: &amp;str) -&gt; usize {\n    baz.len()\n}\n\n#[no_mangle]\npub extern fn main(_argc: c_int, _argv: *const *const c_char) -&gt; c_int {\n    let gdb_wait = true; // for debugging with gdb\n    while unsafe { core::ptr::read_volatile(&amp;gdb_wait) } {}\n\n    assert_eq!(foo(&amp;\"bar_fail\"), 0);\n    assert_eq!(foo(\"bar_ok\"), 6);\n\n    loop {}\n}\n\n// just some functions to run on bare metal.\n\n#[lang = \"panic_fmt\"]\n#[no_mangle]\npub extern fn rust_begin_panic(_msg: core::fmt::Arguments, _file: &amp;'static str, _line: u32) -&gt; ! {\n    loop {}\n}\n\n#[lang = \"eh_personality\"]\npub extern fn eh_personality() { loop {} }\n\n#[allow(non_snake_case)]\n#[no_mangle]\npub extern \"C\" fn _Unwind_Resume() -&gt; ! { loop {} }\n\n#[no_mangle]\npub extern fn fmod(_: f64, _: f64) {\n    loop {  }\n}\n\n#[no_mangle]\npub extern fn fmodf(_: f32, _: f32) {\n    loop {  }\n}\n</code></pre>\n\n<p>Main function is called by asm on qemu-system-x86_64 in 64bit-longmode.</p>\n\n<p>The GDB output from the first call when <code>&amp;&amp;str</code> is passed. This doesn't work:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>(gdb) print baz\n$1 = {data_ptr = 0x0, length = 0}\n</code></pre>\n\n<p>The GDB output from the second call when <code>&amp;str</code> is passed. This works fine:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>(gdb) print baz\n$2 = {data_ptr = 0xffffffff80133460 &lt;str4498&gt; \"bar_oksrc/lib.rsassertion failed: `(left == right)` (left: ``, right: ``)\\001gdb_load_rust_pretty_printers.py\", length = 6}\n</code></pre>\n\n<p>Here is <a href=\"https://github.com/xosmig/xo_os/tree/string_slice_method_problem\" rel=\"nofollow\">a full runnable project</a>.</p>\n"}, {"tags": ["pattern-matching", "rust", "lifetime", "dispatch"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1473947608, "post_id": 39510541, "comment_id": 66341601, "body": "Is the miscellaneous <code>&#39;a</code> there intended?"}], "answers": [{"comments": [{"owner": {"reputation": 735, "user_id": 6522680, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/--svPp3muzCw/AAAAAAAAAAI/AAAAAAAAALE/9rCJ_p2VtvI/photo.jpg?sz=128", "display_name": "414owen", "link": "https://stackoverflow.com/users/6522680/414owen"}, "edited": false, "score": 0, "creation_date": 1473954401, "post_id": 39510936, "comment_id": 66346389, "body": "Worked beautifully, bonus points for using static dispatch. Thank you!"}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 1, "last_activity_date": 1473942171, "creation_date": 1473942171, "answer_id": 39510936, "question_id": 39510541, "link": "https://stackoverflow.com/questions/39510541/best-way-to-switch-input-source-in-rust/39510936#39510936", "title": "Best way to switch input source in Rust", "body": "<p>You can use static dispatch by calling the <code>run</code> function directly in every match arm:</p>\n\n<pre><code>use std::fs::File;\nuse std::io::{Read, Write};\n\nfn init(i: Option&lt;&amp;str&gt;, o: Option&lt;&amp;str&gt;) {\n    match i {\n        Some(filename) =&gt; init2(File::open(filename).expect(\"Couldn't open input file.\"), o),\n        None =&gt; init2(std::io::stdin(), o),\n    }\n}\n\nfn init2&lt;R: Read&gt;(i: R, o: Option&lt;&amp;str&gt;) {\n    match o {\n        Some(filename) =&gt; run(i, File::create(filename).expect(\"Couldn't open output file\")),\n        None =&gt; run(i, std::io::stdout()),\n    }\n}\n\nfn run&lt;R: Read, W: Write&gt;(i: R, o: W) {\n    unimplemented!()\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 1, "last_activity_date": 1473947584, "creation_date": 1473947584, "answer_id": 39512894, "question_id": 39510541, "link": "https://stackoverflow.com/questions/39510541/best-way-to-switch-input-source-in-rust/39512894#39512894", "title": "Best way to switch input source in Rust", "body": "<p>The simplest solution would be to <code>Box</code> your objects, putting them in the heap.</p>\n\n<p>I would personally prefer to separate <code>init</code> and <code>run</code>, so it means returning them:</p>\n\n<pre><code>fn init(matches: Matches) -&gt; (Box&lt;Read&gt;, Box&lt;Write&gt;) {\n    let in_port: Box&lt;Read&gt; = match matches.opt_str(\"i\") {\n        Some(filename) =&gt;  Box::new(File::open(filename).expect(\"Couldn't open input file.\")),\n        _ =&gt; Box::new(stdin()),\n    };\n    let out_port: Box&lt;Write&gt; = match matches.opt_str(\"o\") {\n        Some(filename) =&gt; Box::new(File::create(filename).expect(\"Couln't open output file\")),\n        _ =&gt; Box::new(stdout()),\n    };\n    (in_port, out_port)\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": false, "score": 1, "last_activity_date": 1473947674, "creation_date": 1473947674, "answer_id": 39512928, "question_id": 39510541, "link": "https://stackoverflow.com/questions/39510541/best-way-to-switch-input-source-in-rust/39512928#39512928", "title": "Best way to switch input source in Rust", "body": "<p>The problem is that you're trying to return a reference to something you're about to destroy:</p>\n\n<pre><code>let in_port: &amp;mut Read = match matches.opt_str(\"i\") {\n    Some(filename) =&gt;  &amp;mut File::open(filename).expect(\"Couldn't open input file.\") as &amp;mut Read,\n    _ =&gt; &amp;mut io::stdin() as &amp;mut Read,\n};\n</code></pre>\n\n<p>Inside the block, the created <code>File</code> is a temporary which only lasts as long as the expression it's in.  I assume you're using references rather than values so that you can hide the concrete type behind a trait object.  One way would be to us <code>Box&lt;Trait&gt;</code>, which would own the object.</p>\n\n<pre><code>fn init&lt;'a&gt;(i: Option&lt;&amp;str&gt;, o: Option&lt;&amp;str&gt;) {\n    let mut in_port: Box&lt;Read&gt; = match i {\n        Some(filename) =&gt;  Box::new(File::open(filename).expect(\"Couldn't open input file.\")),\n        _ =&gt; Box::new(io::stdin()),\n    };\n    let mut out_port: Box&lt;Write&gt; = match o {\n        Some(filename) =&gt; Box::new(File::create(filename).expect(\"Couln't open output file\")),\n        _ =&gt; Box::new(io::stdout()),\n    };\n    run(&amp;mut in_port, &amp;mut out_port);\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=23d6c18301c4858825bde58c94e17544&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">playground</a>)</p>\n"}], "owner": {"reputation": 735, "user_id": 6522680, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/--svPp3muzCw/AAAAAAAAAAI/AAAAAAAAALE/9rCJ_p2VtvI/photo.jpg?sz=128", "display_name": "414owen", "link": "https://stackoverflow.com/users/6522680/414owen"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 140, "favorite_count": 0, "closed_date": 1473948334, "answer_count": 3, "score": 0, "last_activity_date": 1473947674, "creation_date": 1473940894, "last_edit_date": 1473947098, "question_id": 39510541, "link": "https://stackoverflow.com/questions/39510541/best-way-to-switch-input-source-in-rust", "closed_reason": "Duplicate", "title": "Best way to switch input source in Rust", "body": "<p>I'm creating some ports based on arguments, but the ports don't live long enough to be passed to the next function, any lifetime-fu to be done? Better still, a way to adapt this to statically dispatch?</p>\n\n<pre><code>fn init&lt;'a&gt;(matches: getopts::Matches) {\n    let in_port: &amp;mut Read = match matches.opt_str(\"i\") {\n        Some(filename) =&gt;  &amp;mut File::open(filename).expect(\"Couldn't open input file.\") as &amp;mut Read,\n        _ =&gt; &amp;mut io::stdin() as &amp;mut Read,\n    };\n    let out_port: &amp;mut Write = match matches.opt_str(\"o\") {\n        Some(filename) =&gt; &amp;mut File::create(filename).expect(\"Couln't open output file\") as &amp;mut Write,\n        _ =&gt; &amp;mut io::stdout() as &amp;mut Write,\n    };\n    run(in_port, out_port);\n}\n</code></pre>\n"}]