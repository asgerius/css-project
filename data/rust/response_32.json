[{"tags": ["compiler-errors", "rust", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 37741, "user_id": 3425536, "user_type": "registered", "accept_rate": 72, "profile_image": "https://graph.facebook.com/1484495923/picture?type=large", "display_name": "emlai", "link": "https://stackoverflow.com/users/3425536/emlai"}, "edited": false, "score": 0, "creation_date": 1440038481, "post_id": 32108679, "comment_id": 52111485, "body": "The closures must have access to <code>e</code> somehow. For now I just stored <code>key_map</code> outside of <code>E</code>, and kept a reference to it in <code>E</code>. It&#39;s impractical too but at least it works."}], "tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": false, "score": 1, "last_activity_date": 1440038143, "creation_date": 1440038143, "answer_id": 32108679, "question_id": 32107500, "link": "https://stackoverflow.com/questions/32107500/call-closure-thats-in-a-collection-with-the-owner-of-the-collection/32108679#32108679", "title": "Call closure, that&#39;s in a collection, with the owner of the collection", "body": "<blockquote>\n  <p>So how exactly can I call the closure that's inside the map?</p>\n</blockquote>\n\n<p>This depends on what behaviour is appropriate.</p>\n\n<p>As you've worked out, calling <code>f(&amp;mut e)</code> is impossible if <code>f</code> is borrowed from <code>e</code>. The solutions are</p>\n\n<ul>\n<li><p>Don't pass <code>&amp;mut e</code> to the function. This is impractical if <code>E</code> is not under your control.</p></li>\n<li><p>stop <code>f</code> from borrowing from <code>e</code>. Since <code>CmdType</code> is not <code>Clone</code>able, one cannot simply copy it out. However, you should be able to temporarily remove <code>f</code> from the map:</p>\n\n<pre><code>let removed = e.key_map.remove(&amp;'q');\nif let Some(f) = removed {\n    f(&amp;mut e);\n    e.key_map.insert('q', f);\n}\n</code></pre></li>\n</ul>\n"}, {"tags": [], "owner": {"reputation": 37741, "user_id": 3425536, "user_type": "registered", "accept_rate": 72, "profile_image": "https://graph.facebook.com/1484495923/picture?type=large", "display_name": "emlai", "link": "https://stackoverflow.com/users/3425536/emlai"}, "is_accepted": false, "score": 0, "last_activity_date": 1440082435, "creation_date": 1440082435, "answer_id": 32121585, "question_id": 32107500, "link": "https://stackoverflow.com/questions/32107500/call-closure-thats-in-a-collection-with-the-owner-of-the-collection/32121585#32121585", "title": "Call closure, that&#39;s in a collection, with the owner of the collection", "body": "<p>One solution would be to make <code>E</code> <em>not</em> own the map, if that's appropriate, and instead separate that functionality to another struct. Something like this:</p>\n\n<pre><code>struct K {\n    key_map: HashMap&lt;KeyCode, Box&lt;CmdType&gt;&gt;,\n}\n\nimpl K {\n    fn map_key(&amp;mut self, key: KeyCode, function: Box&lt;CmdType&gt;) {\n        self.key_map.insert(key, function);\n    }\n}\n\nstruct E;\n\nimpl E {\n    fn quit(&amp;mut self) { println!(\"quitting\"); /* ... */ }\n}\n\nfn main() {\n    let mut k = K { key_map: HashMap::new() };\n    k.map_key('q', Box::new(|e: &amp;mut E| e.quit()));\n\n    let mut e = E;\n    match k.key_map.get(&amp;'q') {\n        Some(f) =&gt; f(&amp;mut e),\n        None =&gt; {}\n    }\n}\n</code></pre>\n\n<p><code>E</code> might also have a reference to the <code>K</code> instance if needed.</p>\n"}], "owner": {"reputation": 37741, "user_id": 3425536, "user_type": "registered", "accept_rate": 72, "profile_image": "https://graph.facebook.com/1484495923/picture?type=large", "display_name": "emlai", "link": "https://stackoverflow.com/users/3425536/emlai"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 49, "favorite_count": 0, "answer_count": 2, "score": 2, "last_activity_date": 1440082435, "creation_date": 1440028583, "last_edit_date": 1440034000, "question_id": 32107500, "link": "https://stackoverflow.com/questions/32107500/call-closure-thats-in-a-collection-with-the-owner-of-the-collection", "title": "Call closure, that&#39;s in a collection, with the owner of the collection", "body": "<p>Consider the following code:</p>\n\n<pre><code>use std::collections::HashMap;\ntype KeyCode = char;\ntype CmdType = Fn(&amp;mut E);\n\nstruct E {\n    key_map: HashMap&lt;KeyCode, Box&lt;CmdType&gt;&gt;,\n}\n\nimpl E {\n    fn map_key(&amp;mut self, key: KeyCode, function: Box&lt;CmdType&gt;) {\n        self.key_map.insert(key, function);\n    }\n    fn quit(&amp;mut self) { println!(\"quitting\"); /* ... */ }\n}\n\nfn main() {\n    let mut e = E { key_map: HashMap::new() };\n    e.map_key('q', Box::new(|e: &amp;mut E| e.quit()));\n\n    match e.key_map.get(&amp;'q') {\n        Some(f) =&gt; f(&amp;mut e),\n        None =&gt; {}\n    }\n}\n</code></pre>\n\n<p>which <a href=\"https://play.rust-lang.org/?gist=51262278ab48c1635d4a&amp;version=stable\" rel=\"nofollow\">doesn't compile</a> because I'm trying to pass <code>e</code> to <code>f</code>:</p>\n\n<blockquote>\n  <p>cannot borrow <code>e</code> as mutable because <code>e.key_map</code> is also borrowed as immutable</p>\n</blockquote>\n\n<p>But when the borrow of <code>e.key_map</code> ends I will no longer have access to <code>f</code>. So how exactly can I call the closure that's inside  the map?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 13948, "user_id": 283342, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e3ef6dbec3a443e7cda5b5624311ca08?s=128&d=identicon&r=PG&f=1", "display_name": "Adrian", "link": "https://stackoverflow.com/users/283342/adrian"}, "edited": false, "score": 1, "creation_date": 1440024714, "post_id": 32106850, "comment_id": 52108269, "body": "You could make a <code>enum RegisterType { Number(usize), Word(usize) }</code>"}, {"owner": {"reputation": 13948, "user_id": 283342, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e3ef6dbec3a443e7cda5b5624311ca08?s=128&d=identicon&r=PG&f=1", "display_name": "Adrian", "link": "https://stackoverflow.com/users/283342/adrian"}, "edited": false, "score": 0, "creation_date": 1440024912, "post_id": 32106850, "comment_id": 52108318, "body": "BTW this doesn&#39;t really have anything to do with your question but I think your code could look more idiomatic if you renamed <code>OperandType</code> to just <code>Operand</code>"}], "answers": [{"tags": [], "owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "is_accepted": false, "score": 4, "last_activity_date": 1492414358, "last_edit_date": 1492414358, "creation_date": 1492382149, "answer_id": 43442875, "question_id": 32106850, "link": "https://stackoverflow.com/questions/32106850/using-pattern-matching-to-choose-between-struct-fields/43442875#43442875", "title": "Using pattern matching to choose between struct fields", "body": "<p>It is not possible for <code>load()</code> to pattern-match on an input parameter because as defined it simply doesn't have one that could be matched. What you seem to really be looking for is a way to make <code>load()</code> generic <em>by return type</em> \u2014 and you are in luck because Rust actually makes that possible.</p>\n\n<p>You need to create a generic trait and provide implementations for the types you are covering, in your case<code>i32</code> and <code>String</code>:</p>\n\n<pre><code>trait LoadFromRegister&lt;T&gt; {\n    fn load(&amp;self, register: usize) -&gt; T;\n}\n\nimpl LoadFromRegister&lt;i32&gt; for RegisterBank {\n    fn load(&amp;self, register: usize) -&gt; i32 {\n        self.int_registers[register]\n    }\n}\n\nimpl LoadFromRegister&lt;String&gt; for RegisterBank {\n    fn load(&amp;self, register: usize) -&gt; String {\n        self.str_registers[register].clone()\n    }\n}\n</code></pre>\n\n<p><code>load</code> can be called either by providing a return type in the context or explicitly using the starfish operator:</p>\n\n<pre><code>let intreg: i32 = rb.load(2);  // or, let intreg = rb.load::&lt;i32&gt;(2);\nlet strreg: String = rb.load(2);\n</code></pre>\n\n<p>Similar technique can be used to get rid of the clunky <code>OperandType</code> wrapper. Define a <code>StoreToRegister</code> trait that provides <code>store()</code> and implement it for <code>RegisterBank</code> with <code>i32</code> and <code>String</code> value types doing the concrete stores:</p>\n\n<pre><code>trait StoreToRegister&lt;T&gt; {\n    fn store(&amp;mut self, register: usize, value: T);\n}\n\nimpl StoreToRegister&lt;i32&gt; for RegisterBank {\n    fn store(&amp;mut self, register: usize, n: i32) {\n        self.int_registers[register] = n;\n    }\n}\n\nimpl StoreToRegister&lt;String&gt; for RegisterBank {\n    fn store(&amp;mut self, register: usize, s: String) {\n        self.str_registers[register] = s;\n    }\n}\n</code></pre>\n\n<p>This provides the closest Rust equivalent to argument overloading, allowing <code>main()</code> to look like this:</p>\n\n<pre><code>fn main() {\n    let mut rb = RegisterBank::new();\n    rb.store(2, 5);\n    rb.store(2, \"foo\".to_owned());\n    let intreg: i32 = rb.load(2);\n    let strreg: String = rb.load(2);\n    assert!(intreg == 5);\n    assert!(strreg == \"foo\");\n}\n</code></pre>\n\n<p>The two traits can be merged into a single <code>RegisterStorage</code> trait that provides both <code>load</code> and <code>save</code>. Complete code <a href=\"https://play.rust-lang.org/?gist=6b18417a169304f0e10e2dd0701ad65f&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">at the playground</a>.</p>\n"}], "owner": {"reputation": 173, "user_id": 3233693, "user_type": "registered", "accept_rate": 11, "profile_image": "https://graph.facebook.com/100000042887361/picture?type=large", "display_name": "teekay", "link": "https://stackoverflow.com/users/3233693/teekay"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 539, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1492414358, "creation_date": 1440024393, "last_edit_date": 1492373526, "question_id": 32106850, "link": "https://stackoverflow.com/questions/32106850/using-pattern-matching-to-choose-between-struct-fields", "title": "Using pattern matching to choose between struct fields", "body": "<p><strong>Background:</strong></p>\n\n<p>I am trying to implement a simple Virtual Machine in Rust. For now, I am working on a <em>\"RegisterBank\"</em> which supports space for Strings and Integers.\nThe <em>RegisterBank</em> struct looks the following:</p>\n\n<pre><code>pub struct RegisterBank {\n    int_registers: Vec&lt;i32&gt;,\n    str_registers: Vec&lt;String&gt;,\n}\n</code></pre>\n\n<p>So it is just a simple collection of two vectors.</p>\n\n<p><strong>Previous work:</strong></p>\n\n<p>When I tried to implement the \"load\" and \"store\" functions, there was the choice between two seperate functions</p>\n\n<pre><code>pub fn load_int(...) { ... }\npub fn load_str(...) { ... }\n</code></pre>\n\n<p>and pattern matching (which I wanted to learn anyway)</p>\n\n<pre><code>pub fn load(self, register: SomeMatchableType) {\n    match register { ... }\n}\n</code></pre>\n\n<p>Because having one function for two very similar tasks seemed good, I tried something like this:</p>\n\n<pre><code>enum OperandType {\n    Number(i32),\n    Word(String),\n}\n</code></pre>\n\n<p>and then have a function like <code>pub fn load(self, register: OperandType)</code> which matches register and returns either a String (or &amp;str, whatever) or an integer depending on its operand type.</p>\n\n<p><strong>Problem:</strong>\nCurrently the implementation is stuck on two seperate functions (for i32 and String) and this is working fine. Since I have managed to do this for <code>fn store(&amp;mut self, register: usize, value: OperandType)</code> this should be possible for <code>fn load(self, register: ???)</code> as well. My biggest problem is to design such a function that combines both tasks into one pattern match depending on the <code>OperandType</code> enum (or maybe something else if someone has a clever idea).</p>\n\n<p>Basically, the solution should do:</p>\n\n<ol>\n<li>Decide which register (int_registers or str_register) to choose based on input parameter</li>\n<li>Get the content of the register</li>\n<li>Return it</li>\n</ol>\n"}, {"tags": ["parallel-processing", "rust"], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 5, "last_activity_date": 1440021021, "creation_date": 1440021021, "answer_id": 32106236, "question_id": 32105601, "link": "https://stackoverflow.com/questions/32105601/how-can-i-parallelize-this-code/32106236#32106236", "title": "How can I parallelize this code?", "body": "<p>There are several problems with your code.</p>\n\n<p>First, the actual error you show is caused by the fact that you are trying to obtain a <code>String</code> out of <code>&amp;Vec&lt;String&gt;</code>. This is not possible without cloning because it would require moving the <code>String</code> out of <code>&amp;Vec&lt;String&gt;</code>, but you can't move out of a referenced data. Since your <code>best_set</code> is used inside the inner thread and is dropped just right after you return the data from it, you can safely consume it using <code>into_iter()</code>:</p>\n\n<pre><code>best_set.into_iter()\n    .flat_map(|r| r.take(1))\n    .collect::&lt;Vec&lt;String&gt;&gt;()\n</code></pre>\n\n<p>This is the least of the problems, however. You have a lot of bad errors in concurrency part.</p>\n\n<p>First, you are trying to use <code>index</code> in multiple threads directly. This can't be done, because <code>index</code> resides in the parent thread stack. The parent thread can terminate before its child threads (and this is indeed what would happen in your program if it compiled), and <code>index</code> would be destroyed in this case, so child threads would access garbage data. In order to fix this you need to use <a href=\"http://doc.rust-lang.org/std/sync/struct.Arc.html\" rel=\"noreferrer\"><code>Arc</code></a> with some kind of synchronization, like <a href=\"http://doc.rust-lang.org/std/sync/struct.Mutex.html\" rel=\"noreferrer\"><code>Mutex</code></a>. Without the mutex you would write-access the same data from multiple threads without synchronization, a perfect example of a data race which would lead to undefined behavior.</p>\n\n<pre><code>let index = Arc::new(Mutex::new(Indexed::open(csv_s(), index_data).unwrap()));\n\n...\nlet index = index.clone();\nthread::spawn(move || {\n    ...\n\n    let current_set:Vec&lt;_&gt; = {\n        let index = index.lock();\n        indices.iter().map(|&amp;i| {\n            index.seek(i).unwrap();\n            index.records().next().unwrap().unwrap()\n        }).collect()\n    };\n    ...\n});\n</code></pre>\n\n<p>Same thing you will need to do with <code>tried_indices</code> - you push the data from multiple threads into the same vector, so you need some kind of synchronization to do it safely. You should be careful with the scope in order not to lock it longer than necessary - remember, the mutex is released when the guard returned by <code>lock()</code> method goes out of scope.</p>\n\n<p>And the last problem I can see, the most serious one, is that you use the same <code>csv</code> from all of the spawned threads. While this is not only data-racey because of mutable access, it is also wrong because the reader is by definition an exhaustible source of data. If you read it from multiple threads, even leaving concurrency issues aside, you would get absolutely random data from different parts of whatever it reads from. Therefore, even putting the reader into a mutex won't solve the problem.</p>\n\n<p>The most easy solution, I think, would be to create a separate reader for each thread. Fortunately, you already have a function to create readers, so just use it before spawning the thread:</p>\n\n<pre><code>let mut csv = csv_s();\nthread::spawn(move || {\n    ...\n});\n</code></pre>\n\n<p>Finally, it appears that you're not using the computation results returned from threads, but you probably know that already.</p>\n"}], "owner": {"reputation": 2340, "user_id": 2250791, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e72d4f734d39c777f543025d36d4de4e?s=128&d=identicon&r=PG", "display_name": "Camden Narzt", "link": "https://stackoverflow.com/users/2250791/camden-narzt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 119, "favorite_count": 0, "accepted_answer_id": 32106236, "answer_count": 1, "score": 3, "last_activity_date": 1440021021, "creation_date": 1440018082, "question_id": 32105601, "link": "https://stackoverflow.com/questions/32105601/how-can-i-parallelize-this-code", "title": "How can I parallelize this code?", "body": "<p>I originally wrote this in ruby and then found out that MRI doesn't support parallel execution at all. So I rewrote it in rust but am having trouble with the ownership of various pieces.</p>\n\n<pre><code>extern crate rand;\nextern crate csv;\nextern crate num_cpus;\n\nuse std::fs::File;\nuse csv::Reader;\nuse rand::{thread_rng, sample};\nuse std::thread;\nuse std::str::from_utf8;\nuse std::io::{self, Write};\nuse csv::index::{Indexed, create_index};\n\nfn met_n_in_common(n:usize,csv:&amp;mut Reader&lt;File&gt;)-&gt;usize{\n    csv.byte_records().map(|r| if(from_utf8(r.unwrap().get(n).unwrap()).unwrap() == \"TRUE\"){1}else{0}).fold(0usize, |sum, i| sum + i)\n}\n\nfn mets_in_common(csv:&amp;mut Reader&lt;File&gt;,current_set_length:usize)-&gt;usize {\n    (0..csv.headers().unwrap().len()).map(|i| if(i == 0){0}else{met_n_in_common(i,csv)} ).filter(|&amp;e| e==current_set_length ).count()\n}\n\nfn main() {\n\n    let csv_s = || csv::Reader::from_file(\"/Users/camdennarzt/Documents/All 7000 series-Table 1-1-1-3.csv\").unwrap();\n    let mut csv = csv_s();\n    let mut index_data = io::Cursor::new(Vec::new());\n    create_index(csv_s(), index_data.by_ref()).unwrap();\n    let mut index = Indexed::open(csv_s(), index_data).unwrap();\n\n    let mut tried_indices = Vec::new();\n    let mut threads : Vec&lt;_&gt; = (0..num_cpus::get()).map(|i|{\n        thread::spawn(move || {\n            let mut best_set : Vec&lt;Vec&lt;String&gt;&gt; = Vec::new();\n            let mut best_count = 0;\n            let mut rng = thread_rng();\n            let mut indices = Vec::new();\n            let limit = 2usize.pow(10)/num_cpus::get();\n            for _ in (0..limit) {\n                while {\n                    let count = *sample(&amp;mut rng, 13..83, 1).first().unwrap();\n                    indices = sample(&amp;mut rng, 1..83, count);\n                    tried_indices.contains(&amp;indices)\n                }{}\n                tried_indices.push(indices.to_owned());\n\n                let current_set:Vec&lt;_&gt; = indices.iter().map(|&amp;i|{\n                    index.seek(i).unwrap();\n                    index.records().next().unwrap().unwrap()\n                }).collect();\n                let current_count = mets_in_common(&amp;mut csv,current_set.len());\n                if (current_count &gt; best_count){\n                    best_count = current_count;\n                    best_set = current_set;\n                }\n            }\n            (best_count,best_set.iter().map(|r| *r.first().unwrap()).collect::&lt;Vec&lt;String&gt;&gt;())\n        })\n    }).collect();\n}\n</code></pre>\n\n<p>Specifically when I compile this (rust 1.2 stable) I get:</p>\n\n<pre><code>-*- mode: compilation; default-directory: \"~/Developer/Rust/optimal_subset_finder/src/\" -*-\nCompilation started at Wed Aug 19 14:55:10\n\ncargo build\n   Compiling optimal_subset_finder v0.1.0 (file:///Users/camdennarzt/Developer/Rust/optimal_subset_finder)\nmain.rs:31:23: 56:10 error: cannot move out of captured outer variable in an `FnMut` closure\nmain.rs:31         thread::spawn(move || {\nmain.rs:32             let mut best_set : Vec&lt;Vec&lt;String&gt;&gt; = Vec::new();\nmain.rs:33             let mut best_count = 0;\nmain.rs:34             let mut rng = thread_rng();\nmain.rs:35             let mut indices = Vec::new();\nmain.rs:36             let limit = 2usize.pow(10)/num_cpus::get();\n           ...\nnote: in expansion of closure expansion\nmain.rs:31:23: 56:10 note: expansion site\nnote: in expansion of closure expansion\nmain.rs:30:57: 57:6 note: expansion site\nmain.rs:31:23: 56:10 error: cannot move out of captured outer variable in an `FnMut` closure\nmain.rs:31         thread::spawn(move || {\nmain.rs:32             let mut best_set : Vec&lt;Vec&lt;String&gt;&gt; = Vec::new();\nmain.rs:33             let mut best_count = 0;\nmain.rs:34             let mut rng = thread_rng();\nmain.rs:35             let mut indices = Vec::new();\nmain.rs:36             let limit = 2usize.pow(10)/num_cpus::get();\n           ...\nnote: in expansion of closure expansion\nmain.rs:31:23: 56:10 note: expansion site\nnote: in expansion of closure expansion\nmain.rs:30:57: 57:6 note: expansion site\nmain.rs:31:23: 56:10 error: cannot move out of captured outer variable in an `FnMut` closure\nmain.rs:31         thread::spawn(move || {\nmain.rs:32             let mut best_set : Vec&lt;Vec&lt;String&gt;&gt; = Vec::new();\nmain.rs:33             let mut best_count = 0;\nmain.rs:34             let mut rng = thread_rng();\nmain.rs:35             let mut indices = Vec::new();\nmain.rs:36             let limit = 2usize.pow(10)/num_cpus::get();\n           ...\nnote: in expansion of closure expansion\nmain.rs:31:23: 56:10 note: expansion site\nnote: in expansion of closure expansion\nmain.rs:30:57: 57:6 note: expansion site\nmain.rs:55:49: 55:68 error: cannot move out of borrowed content\nmain.rs:55             (best_count,best_set.iter().map(|r| *r.first().unwrap()).collect::&lt;Vec&lt;String&gt;&gt;())\n                                                           ^~~~~~~~~~~~~~~~~~~\nnote: in expansion of closure expansion\nmain.rs:55:45: 55:68 note: expansion site\nnote: in expansion of closure expansion\nmain.rs:31:23: 56:10 note: expansion site\nnote: in expansion of closure expansion\nmain.rs:30:57: 57:6 note: expansion site\nerror: aborting due to 4 previous errors\nCould not compile `optimal_subset_finder`.\n\nTo learn more, run the command again with --verbose.\n\nCompilation exited abnormally with code 101 at Wed Aug 19 14:55:10\n</code></pre>\n\n<p>If I comment out the threading completely then it compiles and runs. But I have not been able to parse the docs on getting the threading working. And the errors aren't particularly helpful when it comes to knowing what to do to fix this either.</p>\n"}, {"tags": ["rust", "grammar", "binary-operators"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1440008536, "post_id": 32102518, "comment_id": 52100078, "body": "The only surprising thing here is that the Operator Precedence seems off in light of your experiment. Otherwise, I don&#39;t see the issue with <code>as</code> being an operator."}], "answers": [{"comments": [{"owner": {"reputation": 37636, "user_id": 101999, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/ab9e16b1296c16bc63f02f6dff5e3dc6?s=128&d=identicon&r=PG", "display_name": "Thanatos", "link": "https://stackoverflow.com/users/101999/thanatos"}, "edited": false, "score": 1, "creation_date": 1440020442, "post_id": 32102903, "comment_id": 52106808, "body": "Out of curiosity, what&#39;s the meaning of <code>&lt;T&gt;</code> in your example? I.e., how is <code>&lt;T&gt;</code> not preceded by an identifier, like <code>Foo&lt;Baz&lt;T&gt;::Bar&gt;</code>?"}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "reply_to_user": {"reputation": 37636, "user_id": 101999, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/ab9e16b1296c16bc63f02f6dff5e3dc6?s=128&d=identicon&r=PG", "display_name": "Thanatos", "link": "https://stackoverflow.com/users/101999/thanatos"}, "edited": false, "score": 1, "creation_date": 1440023115, "post_id": 32102903, "comment_id": 52107790, "body": "It&#39;s part of &quot;fully qualified paths&quot;, e.g. to refer to the asociated type <code>Bar</code> in the implementation of a trait <code>Trait</code> for a type <code>T</code>, one can write <code>&lt;T as Trait&gt;::Bar</code> which can (sometimes) be abbreviated as <code>&lt;T&gt;::Bar</code>. (Either the abbreviation or the full form is enough for this purpose: there&#39;s valid types with leading <code>&lt;</code>.)"}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 12, "last_activity_date": 1440008620, "creation_date": 1440008620, "answer_id": 32102903, "question_id": 32102518, "link": "https://stackoverflow.com/questions/32102518/in-rust-is-as-an-operator/32102903#32102903", "title": "In Rust, is &quot;as&quot; an operator?", "body": "<p>The trick here is <code>as</code> takes a type on its right hand side, i.e. the grammar of <code>as</code> looks something like: is <code>expression 'as' type</code>. The expression after the <code>as</code> looks a bit like (the start of) a type, it's trying to parse <code>u16&lt;&lt;...</code> as if <code>u16</code> had a type parameter (an example of a type with a prefix like that would be <code>Foo&lt;&lt;T&gt;::Bar&gt;</code>).</p>\n\n<p>This is basically just behaviour particular to <code>&lt;&lt;</code> because it looks like the type parameter delimiters. If one uses an operator that can't appear after the leading identifier in a type, it works fine:</p>\n\n<pre><code>fn main() {\n    let x = 100 as u16 - 8;\n}\n</code></pre>\n"}], "owner": {"reputation": 37636, "user_id": 101999, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/ab9e16b1296c16bc63f02f6dff5e3dc6?s=128&d=identicon&r=PG", "display_name": "Thanatos", "link": "https://stackoverflow.com/users/101999/thanatos"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1411, "favorite_count": 0, "accepted_answer_id": 32102903, "answer_count": 1, "score": 6, "last_activity_date": 1440008620, "creation_date": 1440007253, "question_id": 32102518, "link": "https://stackoverflow.com/questions/32102518/in-rust-is-as-an-operator", "title": "In Rust, is &quot;as&quot; an operator?", "body": "<p>The Rust Reference presently says the following about <a href=\"https://doc.rust-lang.org/reference.html#type-cast-expressions\" rel=\"noreferrer\">the <code>as</code> operator</a>:</p>\n\n<blockquote>\n  <h3>7.2.12.5 Type cast expressions</h3>\n  \n  <p>A type cast expression is denoted with the binary operator <code>as</code>.</p>\n  \n  <p>Executing an <code>as</code> expression casts the value on the left-hand side to the type on the right-hand side.</p>\n  \n  <p>An example of an <code>as</code> expression:</p>\n\n<pre><code>fn average(values: &amp;[f64]) -&gt; f64 {\n  let sum: f64 = sum(values);\n  let size: f64 = len(values) as f64;\n  sum / size\n}\n</code></pre>\n</blockquote>\n\n<p>(Also, since it will be relevant:</p>\n\n<blockquote>\n  <h3>7.2.12.8 Operator precedence</h3>\n  \n  <p>The precedence of Rust binary operators is ordered as follows, going from strong to weak:</p>\n\n<pre><code>as\n* / %\n+ -\n&lt;&lt; &gt;&gt;\n</code></pre>\n</blockquote>\n\n<p>)</p>\n\n<p>Na\u00efvely using this as an operator doesn't seem to work:</p>\n\n<pre><code>fn main() {\n    let x = 100 as u16 &lt;&lt; 8;\n}\n</code></pre>\n\n<p>Doesn't actually compile:</p>\n\n<pre><code>% rustc testing.rs\ntesting.rs:2:24: 2:25 error: expected type, found `8`\ntesting.rs:2    let x = 100 as u16 &lt;&lt; 8;\n</code></pre>\n\n<p>With parentheses \u2014 <code>let x = (100 as u16) &lt;&lt; 8;</code> \u2014 it compiles. The parens aren't required in the example in the reference, but seem to be here. What's the exact syntax here? Are parentheses required unless this is the only thing right of an <code>=</code>? Or am I just doing something wrong?</p>\n\n<p><sub>It is a bit weird that this is called an operator, as the RHS would seem to need to be a type, and typically, I think of an operator as taking two expressions\u2026</sub></p>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1440003149, "post_id": 32100806, "comment_id": 52097041, "body": "The answer will end up being &quot;because that&#39;s what the compiler said&quot;. What more are you looking for? This question seems like it cannot be answered in a useful way. You could likewise ask &quot;why do you have to put left parenthesis before right parenthesis&quot; or &quot;why do you put the variable name before the variable type&quot;. These types of questions are hard to provide objective answers."}, {"owner": {"reputation": 627, "user_id": 3987763, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/5edbe17788bc835fa4f08ac4977e67d1?s=128&d=identicon&r=PG&f=1", "display_name": "basic_bgnr", "link": "https://stackoverflow.com/users/3987763/basic-bgnr"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1440003884, "post_id": 32100806, "comment_id": 52097439, "body": "@Shepmaster My point was, instead of giving compilation error shouldn&#39;t the compiler be smart enough that the precedence of lifetime parameter and type parameter for this particular problem doesn&#39;t matter and should simply compile the program without showing any error."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1440004068, "post_id": 32100806, "comment_id": 52097526, "body": "I&#39;m not sure that I think that changes anything \u2014 &quot;why can&#39;t the compiler be smart enough to do <i>X</i> for me&quot; isn&#39;t much better of a question. We&#39;ll see if anyone is brave enough to answer! ^_^"}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1440008154, "post_id": 32102339, "comment_id": 52099813, "body": "Given that type can have bounds depending on other types... not really?"}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1440008496, "post_id": 32102339, "comment_id": 52100050, "body": "Lifetimes can have bounds depending on other lifetimes too."}], "tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": true, "score": 2, "last_activity_date": 1440006687, "creation_date": 1440006687, "answer_id": 32102339, "question_id": 32100806, "link": "https://stackoverflow.com/questions/32100806/why-should-lifetime-parameters-be-declared-before-type-parameters/32102339#32102339", "title": "Why should lifetime parameters be declared before type parameters?", "body": "<p>I'm not sure this is <em>the</em> reason, but remember that type parameters can have lifetime bounds, but lifetime parameters can't have type bounds. So putting them first means you don't need to deal with non-forward declarations.</p>\n\n<p>Personally, I think this rule makes things a bit easier to understand, and a bit easier to implement. Win-win!</p>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 2, "last_activity_date": 1440009217, "creation_date": 1440009217, "answer_id": 32103086, "question_id": 32100806, "link": "https://stackoverflow.com/questions/32100806/why-should-lifetime-parameters-be-declared-before-type-parameters/32103086#32103086", "title": "Why should lifetime parameters be declared before type parameters?", "body": "<p>When designing a language, there are many more or less arbitrary decisions.</p>\n\n<p>For example, why allow <code>mut</code> in front of a function argument name when it is not necessary to achieve the same functionality? Why requiring <code>let</code> to declare a variable when it could be disambiguated anyway? </p>\n\n<p>In general, it boils down to convenience:</p>\n\n<ul>\n<li>either for the user, aka sugar</li>\n<li>or for the implementer</li>\n</ul>\n\n<p>To go back to my examples above:</p>\n\n<ul>\n<li><code>mut</code> is syntax sugar, avoiding a <code>let mut name = name;</code> inside the function</li>\n<li><code>let</code> keeps the grammar LL(1), making it easier to develop alternative parsers (for use in text editors or IDE for examples)</li>\n</ul>\n\n<p>In this precise case, I do not know the exact reason, but that is besides the point. There are countless such more or less arbitrary design decisions (especially in syntax), and such bike shedding has little value.</p>\n\n<p>One could argue that it would be slightly easier on the <em>writer</em>, to which another would reply that accommodating the <em>reader</em> is more important and attempt to demonstrate that the current form is more readable... such arguments are generally endless with each party refusing to budge.</p>\n\n<p>I personally welcome such a compiler restriction (and wish for <code>rustfmt</code>), that's less debate over trivia down the road.</p>\n"}], "owner": {"reputation": 627, "user_id": 3987763, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/5edbe17788bc835fa4f08ac4977e67d1?s=128&d=identicon&r=PG&f=1", "display_name": "basic_bgnr", "link": "https://stackoverflow.com/users/3987763/basic-bgnr"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 364, "favorite_count": 0, "accepted_answer_id": 32102339, "answer_count": 2, "score": 3, "last_activity_date": 1440009217, "creation_date": 1440001100, "last_edit_date": 1440003042, "question_id": 32100806, "link": "https://stackoverflow.com/questions/32100806/why-should-lifetime-parameters-be-declared-before-type-parameters", "title": "Why should lifetime parameters be declared before type parameters?", "body": "<p>I was trying out a simple function when I got this compiler error. What is the actual reason behind this? In my case (following code), writing the type parameter before the lifetime parameter has no effect. Shouldn't the compiler know better?</p>\n\n<pre><code>use std::fmt::Debug;\n\nfn random_func&lt;T : Debug, 'a&gt;(parameter : &amp;'a mut T) {\n    println!(\"{:?}\", parameter);\n}\n\nfn main(){\n    let mut name : String = \"random\".to_string();\n    random_func(&amp;mut name);\n    println!(\"{:?}\", \"compiled successfully\");\n}\n</code></pre>\n\n<p>error:</p>\n\n<pre><code>life_time_trait.rs:3:27: 3:29 error: lifetime parameters must be declared prior to type parameters\nlife_time_trait.rs:3 fn random_func&lt;T : Debug, 'a&gt;(parameter : &amp;'a mut T) {\n\n                                           ^~\n</code></pre>\n"}, {"tags": ["json", "rust", "serde"], "answers": [{"comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user266003"}, "edited": false, "score": 0, "creation_date": 1440001749, "post_id": 32100595, "comment_id": 52096243, "body": "it doesn&#39;t have the link to serde::Serialize, where did you get it?"}, {"owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "edited": false, "score": 0, "creation_date": 1440001815, "post_id": 32100595, "comment_id": 52096285, "body": "@jawanam It&#39;s defined in the <code>serde</code> crate here <a href=\"https://serde-rs.github.io/serde/serde/serde/index.html\" rel=\"nofollow noreferrer\">serde-rs.github.io/serde/serde/serde/index.html</a>"}, {"owner": {"user_type": "does_not_exist", "display_name": "user266003"}, "edited": false, "score": 0, "creation_date": 1440001870, "post_id": 32100595, "comment_id": 52096322, "body": "It is, but it&#39;s not given in the documentation."}, {"owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "edited": false, "score": 0, "creation_date": 1440001910, "post_id": 32100595, "comment_id": 52096346, "body": "@jawanam Yeah, I was confused a bit where they were defined too."}], "tags": [], "owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "is_accepted": true, "score": 3, "last_activity_date": 1610550110, "last_edit_date": 1610550110, "creation_date": 1440000362, "answer_id": 32100595, "question_id": 32099832, "link": "https://stackoverflow.com/questions/32099832/serde-json-how-to-make-my-struct-convertable-from-to-json/32100595#32100595", "title": "serde_json - how to make my struct convertable from / to json?", "body": "<p>From the <a href=\"https://docs.rs/serde_json/1.0.61/serde_json/\" rel=\"nofollow noreferrer\">crate index page</a>:</p>\n<blockquote>\n<p>Serde provides a mechanism for low boilerplate serialization &amp; deserialization of values to and from JSON via the serialization API. To be able to serialize a piece of data, it must implement the <a href=\"https://docs.rs/serde/1.0.119/serde/trait.Serialize.html\" rel=\"nofollow noreferrer\"><code>serde::Serialize</code></a> trait. To be able to deserialize a piece of data, it must implement the <a href=\"https://docs.rs/serde/1.0.119/serde/trait.Deserialize.html\" rel=\"nofollow noreferrer\"><code>serde::Deserialize</code></a> trait. Serde provides provides an annotation to automatically generate the code for these traits: <code>#[derive(Serialize, Deserialize)]</code>.</p>\n</blockquote>\n<p>-- <a href=\"https://docs.rs/serde_json/1.0.61/serde_json/#creating-json-by-serializing-data-structures\" rel=\"nofollow noreferrer\">Creating Json by Serializing Data Structures</a></p>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user266003"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1616, "favorite_count": 2, "accepted_answer_id": 32100595, "answer_count": 1, "score": 2, "last_activity_date": 1610550110, "creation_date": 1439998237, "last_edit_date": 1538857407, "question_id": 32099832, "link": "https://stackoverflow.com/questions/32099832/serde-json-how-to-make-my-struct-convertable-from-to-json", "title": "serde_json - how to make my struct convertable from / to json?", "body": "<p>Looking at <a href=\"https://serde-rs.github.io/serde/serde_json/serde_json/index.html\" rel=\"nofollow\">the documentation of serde_json</a>, I can't understand what trait I have to implement to make a struct serializiable to and deserializiable from json. The obvious answer could be <a href=\"https://serde-rs.github.io/serde/serde_json/serde_json/de/struct.Deserializer.html\" rel=\"nofollow\"><code>Deserializer</code></a> and <a href=\"https://serde-rs.github.io/serde/serde_json/serde_json/ser/struct.Serializer.html\" rel=\"nofollow\"><code>Serializer</code></a> but these are structs, not traits.  </p>\n\n<p>With <code>rustc-serialize</code> I could implement <code>ToJson</code> and <code>FromJson</code> traits.</p>\n"}, {"tags": ["windows", "linker", "mingw", "rust", "mariadb"], "comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 1, "creation_date": 1439988123, "post_id": 32095326, "comment_id": 52086054, "body": "I can&#39;t offer much in the way of help, except to point out that the <code>msvc</code> builds of Rust on Windows are now A Thing, and close to being a first-class target.  Maybe you would have more luck with those, if the connector is only provided for MSVC?"}, {"owner": {"reputation": 23, "user_id": 5243042, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/832b89dca6e163cebdd60a5c12432e26?s=128&d=identicon&r=PG&f=1", "display_name": "Lord Sentox", "link": "https://stackoverflow.com/users/5243042/lord-sentox"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1439989880, "post_id": 32095326, "comment_id": 52087387, "body": "Thank you, I didn&#39;t know there were Rust builds for the native windows compiler, however my program also makes use of GTK, which (how could it be any different) is only available for MinGW. As a last resort I guess I could try to switch to a different library for the GUI-parts, but I couldn&#39;t find many good ones yet, so for now I hope I can get it to work someway else."}], "owner": {"reputation": 23, "user_id": 5243042, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/832b89dca6e163cebdd60a5c12432e26?s=128&d=identicon&r=PG&f=1", "display_name": "Lord Sentox", "link": "https://stackoverflow.com/users/5243042/lord-sentox"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 577, "favorite_count": 0, "answer_count": 0, "score": 1, "last_activity_date": 1439986718, "creation_date": 1439986718, "question_id": 32095326, "link": "https://stackoverflow.com/questions/32095326/linking-to-the-mariadb-c-connector-from-rust-fails-on-windows", "title": "Linking to the MariaDB C Connector from Rust fails on Windows", "body": "<p>I am currently working on a Rust project that requires me to connect to a MariaDB server. I have decided to create Rust bindings for the officially provided C connector, which works just fine in linux, but not on Windows.</p>\n\n<p>Since only the MSVC-binaries are provided as a download, which don't work due to linker issues between the Microsft linker and the MinGW linker used for Rust that cause the program to crash when the first function is called, I tried to compile the mariadb sources myself, but even though compilation under MinGW should work as of the 2.0 release of mariadb, it fails with</p>\n\n<blockquote>\n  <p>error: conflicting types for ssize_t<br>\n  typedef SSIZE_T ssize_t</p>\n</blockquote>\n\n<p>since it has already been defined in another file, and when I tried to simply remove the redefinition, other errors occured.</p>\n\n<p>I tried to cross-compile it from Arch using the <a href=\"https://aur.archlinux.org/packages/mingw-w64-mariadb-connector-c/\" rel=\"nofollow\">mingw-w64-mariadb-connector-c package</a>, which did not show any compilation errors for the connector, but when I tested the binaries on windows, it threw an undefined reference linking error for every of my C-Function declarations, which look like this:</p>\n\n<pre><code>extern crate libc;\nuse self::libc::{c_int, /*...*/};\n\n#[link(name=\"mariadb\", kind=\"dylib\")]\nextern {\n    pub fn mysql_init(mysql: *const MYSQL) -&gt; c_int;\n    // ...\n}\n</code></pre>\n\n<p>I also tried <a href=\"http://forums.mysql.com/read.php?167,295483,297733\" rel=\"nofollow\">this</a> suggestion for the mysql-c-connector, but the same linker errors appeared.</p>\n\n<p>I am using the newest rust nightlies and MinGW-w64 v4.9.1 (the same version as in the nightlies), both 32 bit.</p>\n"}, {"tags": ["vim", "rust"], "comments": [{"owner": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "edited": false, "score": 0, "creation_date": 1440098405, "post_id": 32093744, "comment_id": 52144606, "body": "Looking through the code, there isn&#39;t a way (that I can see) for this to happen... Racer always does a <code>call delete(tmpfname)</code> at the end of completion.  I would advise adding debugging statements to the Racer plugin and watch what happens, assuming you&#39;re familiar with VimL."}], "owner": {"reputation": 569, "user_id": 1930869, "user_type": "registered", "accept_rate": 40, "profile_image": "https://i.stack.imgur.com/0UKiN.jpg?s=128&g=1", "display_name": "Softinio", "link": "https://stackoverflow.com/users/1930869/softinio"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 425, "favorite_count": 0, "answer_count": 0, "score": 4, "last_activity_date": 1439990041, "creation_date": 1439982356, "last_edit_date": 1439990041, "question_id": 32093744, "link": "https://stackoverflow.com/questions/32093744/when-using-racer-for-code-completion-in-vim-the-racertmp-temp-file-is-not-remo", "title": "When using Racer for code completion in Vim, the .racertmp temp file is not removed", "body": "<p>I am using racer and the racer vim plugin for code completion for developing using Rust. </p>\n\n<p>Racer creates a temporary file called: <code>&lt;your original file name&gt;.rs.racertmp</code></p>\n\n<p>After I finish editing and save this temp file is still there and not removed. </p>\n\n<p>Any ideas if this is a bug or a solution for it? </p>\n"}, {"tags": ["reference", "rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 38714, "user_id": 45668, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/d4288118e4836464de401d53b60466dd?s=128&d=identicon&r=PG", "display_name": "Malcolm", "link": "https://stackoverflow.com/users/45668/malcolm"}, "edited": false, "score": 0, "creation_date": 1439979622, "post_id": 32090701, "comment_id": 52080083, "body": "Is there any official info on the lifetime bounds? Looks like very important information to me, but I haven&#39;t seen it anywhere in the official book or the specification."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 38714, "user_id": 45668, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/d4288118e4836464de401d53b60466dd?s=128&d=identicon&r=PG", "display_name": "Malcolm", "link": "https://stackoverflow.com/users/45668/malcolm"}, "edited": false, "score": 0, "creation_date": 1439987465, "post_id": 32090701, "comment_id": 52085548, "body": "Indeed, this is an important thing and I don&#39;t think I&#39;ve seen it in documentation either. It probably worth to create an issue in Rust issue tracker on this."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 8, "last_activity_date": 1439978163, "last_edit_date": 1439978163, "creation_date": 1439974181, "answer_id": 32090701, "question_id": 32089410, "link": "https://stackoverflow.com/questions/32089410/lifetimes-and-references-to-objects-containing-references/32090701#32090701", "title": "Lifetimes and references to objects containing references", "body": "<p>Yes, this error may be confusing but there is a legitimate reason for it.</p>\n\n<pre><code>struct SubImage&lt;'a&gt; {\n    image: &amp;'a mut Image&lt;'a&gt;,\n    offset: (i32, i32),\n    size: (i32, i32),\n}\n</code></pre>\n\n<p>Here you declare that the reference to <code>Image</code> must live <em>exactly as long</em> as the borrowed data inside the image itself - the same lifetime parameter <code>'a</code> is used both in the reference and as a parameter for <code>Image</code>: <code>&amp;'a mut Image&lt;'a&gt;</code>.</p>\n\n<p>However, <code>render2()</code> violates this requirement. The actual signature of <code>render2()</code> is as follows:</p>\n\n<pre><code>fn render2&lt;'b, 'a&gt;(image: &amp;'b mut Image&lt;'a&gt;)\n</code></pre>\n\n<p>Therefore, it tries to create <code>SubImage</code> with <code>&amp;'b mut Image&lt;'a&gt;</code>, where <code>'b</code> not necessarily equals to <code>'a</code> (and in this particular case, it most certainly does not), and so the compiler bails out.</p>\n\n<p>Also such signature is the only reason you can call this function while providing it <code>&amp;mut image</code> in <code>main()</code>, because <code>&amp;mut image</code> have lifetime of <code>image</code> variable, but the <code>Image</code> contained inside this variable has lifetime of <code>pixel_data</code> which is slightly longer. The following code is not valid Rust, but it is close to how the compiler understands things and it demonstrates the problem:</p>\n\n<pre><code>fn main() {\n    'a: {\n        let mut pixel_data: Vec&lt;u8&gt; = Vec::new();\n        'b: {\n            let mut image: Image&lt;'a&gt; = Image::new(&amp;'a mut pixel_data, (1280, 720));\n            render2::&lt;'b, 'a&gt;(&amp;'b mut image);\n        }\n    }\n}\n</code></pre>\n\n<p>When you declare <code>render2()</code> as</p>\n\n<pre><code>fn render2&lt;'a&gt;(image: &amp;'a mut Image&lt;'a&gt;)\n</code></pre>\n\n<p>you indeed do \"push\" the problem upstream - now the function can't be called at all with <code>&amp;mut image</code>, and you can now see why - it would require unifying <code>'a</code> and <code>'b</code> lifetimes, which is impossible because <code>'a</code> is longer than <code>'b</code>.</p>\n\n<p>The proper solution is to use separate lifetimes for reference to <code>Image</code> and <code>Image</code> itself in <code>SubImage</code> definition:</p>\n\n<pre><code>struct SubImage&lt;'b, 'a:'b&gt; {\n    image: &amp;'b mut Image&lt;'a&gt;,\n    offset: (i32, i32),\n    size: (i32, i32),\n}\n</code></pre>\n\n<p>Now <code>'b</code> and <code>'a</code> may be different lifetimes, though in order for this to work you have to bound <code>'a</code> lifetime with <code>'b</code>, that is, <code>'a</code> must live at least as long as <code>'b</code>. This is exactly the semantics your code needs. If this constraint is not enforced, then it would be possible for the referenced image to \"die\" before the reference to it goes out of scope, which is a violation of safety rules of Rust. </p>\n"}, {"comments": [{"owner": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "edited": false, "score": 0, "creation_date": 1440002150, "post_id": 32096518, "comment_id": 52096504, "body": "In my actual code, <code>pixel_data</code> is actually owned by a different struct, from a different module which varies by platform. This struct might contain other data (for example, when using Windows GDI, it contains a <code>BITMAPINFO</code> object, necessary for calling <code>StretchDIBits</code>). This platform specific code calls into my code, giving me an <code>Image</code> object containing a reference to its pixel data. I could potentially eliminate the middle-man (<code>Image</code>) and have the platform specific code just pass me a <code>SubImage</code> which actually represents the whole image. But this is how my code is evolving so far."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "edited": false, "score": 0, "creation_date": 1440003576, "post_id": 32096518, "comment_id": 52097279, "body": "@BenjaminLindley if <code>pixel_data</code> is owned by a different struct, that&#39;s fine. Note that the final code still has a reference to that, and doesn&#39;t attempt to own it. My point is that you rarely need a reference to a reference. Note that you can easily <i>copy</i> an <code>Image</code>, which is a good indication that you could just embed it. It really sounds like you can do what I&#39;m suggesting, so I&#39;d encourage you to give it a shot!"}, {"owner": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "edited": false, "score": 1, "creation_date": 1440004132, "post_id": 32096518, "comment_id": 52097556, "body": "Wow, I&#39;ve never been so inattentive when reading an answer. Just tired I guess. For some reason, I thought you were saying to embed the pixel data in <code>Image</code>. I must have just read <i>&quot;A lot of my original code had very similar references to things with references.&quot;</i>, and assumed that&#39;s where you were going with it, then my brain filled in the rest of your answer. Anyway, yeah, that could work."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1439989975, "creation_date": 1439989975, "answer_id": 32096518, "question_id": 32089410, "link": "https://stackoverflow.com/questions/32089410/lifetimes-and-references-to-objects-containing-references/32096518#32096518", "title": "Lifetimes and references to objects containing references", "body": "<blockquote>\n  <p>is there anything I can do to SubImage to make these explicit lifetimes not necessary?</p>\n</blockquote>\n\n<p>Vladimir's answer is spot on, but I'd encourage you to change your code a bit. A lot of my original code had very similar references to things with references. <strong>If</strong> you need that, then having separate lifetimes can help a lot. However, I'd just embed the <code>Image</code> in <code>SubImage</code>:</p>\n\n<pre><code>struct Image&lt;'a&gt; {\n    pixel_data: &amp;'a mut Vec&lt;u8&gt;,\n    size: (i32, i32),\n}\n\nstruct SubImage&lt;'a&gt; {\n    image: Image&lt;'a&gt;,\n    offset: (i32, i32),\n    size: (i32, i32),\n}\n</code></pre>\n\n<p>In my case, I wasn't really gaining anything by having nested references. Embedding the struct directly makes it a bit bigger, but <em>can</em> make access a bit faster (one less pointer chase). Importantly in this case, it removes the need for a second lifetime.</p>\n"}], "owner": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 239, "favorite_count": 1, "accepted_answer_id": 32090701, "answer_count": 2, "score": 8, "last_activity_date": 1439989975, "creation_date": 1439970217, "question_id": 32089410, "link": "https://stackoverflow.com/questions/32089410/lifetimes-and-references-to-objects-containing-references", "title": "Lifetimes and references to objects containing references", "body": "<p>Let's say I have a struct with a reference in it, and another struct with a reference to that struct, something like this:</p>\n\n<pre><code>struct Image&lt;'a&gt; {\n    pixel_data: &amp;'a mut Vec&lt;u8&gt;,\n    size: (i32, i32),\n}\n\nstruct SubImage&lt;'a&gt; {\n    image: &amp;'a mut Image&lt;'a&gt;,\n    offset: (i32, i32),\n    size: (i32, i32),\n}\n</code></pre>\n\n<p>The structs have nearly identical interfaces, the difference being that <code>SubImage</code> adjusts position parameters based on its offset before forwarding to the corresponding functions of the contained <code>Image</code> reference. I would like these structs to be mostly interchangeable, but I can't seem to figure out how to get lifetimes right. Originally, I was just using <code>Image</code>, and could pass around objects simply, without ever mucking about with lifetime specifiers:</p>\n\n<pre><code>fn main() {\n    let mut pixel_data: Vec&lt;u8&gt; = Vec::new();\n    let mut image = Image::new(&amp;mut pixel_data, (1280, 720));\n    render(&amp;mut image);\n}\n\nfn render(image: &amp;mut Image) {\n    image.rect_fill(0, 0, 10, 10);\n}\n</code></pre>\n\n<p>Then I created <code>SubImage</code>, and wanted to do things like this:</p>\n\n<pre><code>fn render2(image: &amp;mut Image) {\n    let mut sub = SubImage {\n        image: image,           // line 62\n        offset: (100, 100),\n        size: (600, 400),\n    };\n\n    sub.rect_fill(0, 0, 10, 10);\n}\n</code></pre>\n\n<p>This, however, causes a compiler error:</p>\n\n<pre><code>main.rs:62:16: 62:21 error: cannot infer an appropriate lifetime for automatic coercion due to conflicting requirements\n</code></pre>\n\n<p>The compiler's suggestion is to change the signature to this:</p>\n\n<pre><code>fn render2&lt;'a&gt;(image: &amp;'a mut Image&lt;'a&gt;)\n</code></pre>\n\n<p>However, that just pushes the problem up to the function which called <code>render2</code>, and took a <code>&amp;mut Image</code>. And this is quite annoying, as the function calls go a few layers deep, and I didn't have to do any of this when I was just using the <code>Image</code> class (which also has a reference), and adjusting the offsets inline.</p>\n\n<p>So first of all, I don't even understand why this is necessary (admittedly my understanding of rust lifetimes is limited). <strong>And secondly (my main question), is there anything I can do to</strong> <code>SubImage</code> <strong>to make these explicit lifetimes not necessary?</strong></p>\n"}, {"tags": ["vector", "rust"], "answers": [{"comments": [{"owner": {"reputation": 6631, "user_id": 51683, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2ac88413948aad12e279e0d9609e7f74?s=128&d=identicon&r=PG", "display_name": "carols10cents", "link": "https://stackoverflow.com/users/51683/carols10cents"}, "edited": false, "score": 1, "creation_date": 1439958449, "post_id": 32086526, "comment_id": 52068844, "body": "Ah. I thought I would have to add <code>mut</code> so that the caller would be <code>consume_and_concat(mut arg1, arg2)</code>. So I guess this is okay... it does bother me that <code>extend</code> doesn&#39;t return <code>self</code> so that it&#39;s chainable and could be returned directly..."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 2, "creation_date": 1440002940, "post_id": 32086526, "comment_id": 52096936, "body": "There&#39;s also (unstable) <a href=\"http://doc.rust-lang.org/std/vec/struct.Vec.html#method.append\" rel=\"nofollow noreferrer\"><code>append</code></a> which is designed to allow data structures (several implement it) to take advantage of their own internal invariants to be more efficient, e.g. <code>Vec::append</code> can just be a <code>memcpy</code>."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 8, "last_activity_date": 1439958083, "creation_date": 1439958083, "answer_id": 32086526, "question_id": 32086476, "link": "https://stackoverflow.com/questions/32086476/whats-a-nice-way-to-create-a-new-vector-by-consuming-two-vectors/32086526#32086526", "title": "What&#39;s a nice way to create a new vector by consuming two vectors?", "body": "<p>I think you are looking for <a href=\"http://doc.rust-lang.org/std/iter/trait.Extend.html#method.extend\" rel=\"noreferrer\"><code>Extend::extend</code></a></p>\n\n<pre><code>fn main() {\n    let mut arg1 = vec![1, 2, 3];\n    let arg2 = vec![4, 5, 6];\n    arg1.extend(arg2);\n    assert_eq!(arg1, vec![1, 2, 3, 4, 5, 6]);\n}\n</code></pre>\n\n<p>Here, we are able to reuse the allocated space from <code>arg1</code>, but there's nothing to be done efficiently with the space allocated via <code>arg2</code>. For an example that is more specific to your original question:</p>\n\n<pre><code>fn main() {\n    let arg1 = vec![1, 2, 3];\n    let arg2 = vec![4, 5, 6];\n    let desired = consume_and_concat(arg1, arg2);\n    assert_eq!(desired, vec![1, 2, 3, 4, 5, 6]);\n}\n\nfn consume_and_concat(mut vec1: Vec&lt;i32&gt;, vec2: Vec&lt;i32&gt;) -&gt; Vec&lt;i32&gt; {\n    vec1.extend(vec2);\n    vec1\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1439989466, "post_id": 32086581, "comment_id": 52087085, "body": "I think that this answer is less elegant as you throw away the allocated space of <code>vec1</code>, <i>forcing</i> a reallocation and copy of those contents."}, {"owner": {"reputation": 6631, "user_id": 51683, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2ac88413948aad12e279e0d9609e7f74?s=128&d=identicon&r=PG", "display_name": "carols10cents", "link": "https://stackoverflow.com/users/51683/carols10cents"}, "edited": false, "score": 0, "creation_date": 1439990746, "post_id": 32086581, "comment_id": 52088114, "body": "Yes, I understand ownership and consumption. I was including those details to make it clear that I&#39;m looking for solutions with the function signature <code>(vec1: Vec&lt;i32&gt;, vec2: Vec&lt;i32&gt;) -&gt; Vec&lt;i32&gt;</code> and not <code>(vec1: &amp;Vec&lt;i32&gt;, vec2: &amp;Vec&lt;i32&gt;) -&gt; Vec&lt;i32&gt;</code>."}, {"owner": {"reputation": 1477, "user_id": 3908710, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff12a3f70e9c9ef63fd94970aa52ba69?s=128&d=identicon&r=PG&f=1", "display_name": "skyler", "link": "https://stackoverflow.com/users/3908710/skyler"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1440006487, "post_id": 32086581, "comment_id": 52098914, "body": "@Shepmaster I agree. I wrote it that way to match the desired function signature."}], "tags": [], "owner": {"reputation": 1477, "user_id": 3908710, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff12a3f70e9c9ef63fd94970aa52ba69?s=128&d=identicon&r=PG&f=1", "display_name": "skyler", "link": "https://stackoverflow.com/users/3908710/skyler"}, "is_accepted": false, "score": 1, "last_activity_date": 1439958515, "creation_date": 1439958515, "answer_id": 32086581, "question_id": 32086476, "link": "https://stackoverflow.com/questions/32086476/whats-a-nice-way-to-create-a-new-vector-by-consuming-two-vectors/32086581#32086581", "title": "What&#39;s a nice way to create a new vector by consuming two vectors?", "body": "<p>You do not need either of them to be mutable, though if one was you would save a bit on reallocation. With Rust, one of the nice things is that you don't have to say that it consumes it. You can tell that just from the function signature. Since it doesn't take a reference, that means that the function is taking ownership.</p>\n\n<pre><code>fn main() {\n    let vec1 = vec![1, 2, 3];\n    let vec2 = vec![4, 5, 6];\n    let concatenated_vecs = consume_and_concat(vec1, vec2);\n    for num in concatenated_vecs {\n        println!(\"{}\", num);\n    }\n}\n\nfn consume_and_concat(vec1: Vec&lt;i32&gt;, vec2: Vec&lt;i32&gt;) -&gt; Vec&lt;i32&gt; {\n    let mut result : Vec&lt;i32&gt; = vec![];\n    result.extend(vec1);\n    result.extend(vec2);\n    result\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1439987430, "post_id": 32088531, "comment_id": 52085521, "body": "&quot;I would like to point out that marking an argument mut in the signature is unnecessary; it&#39;s just a shortcut.&quot; \u2192 This is because mutability is a property of the stack location, not the owned objects. When moving into another location, the owned data can become mutable."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1439989331, "post_id": 32088531, "comment_id": 52086991, "body": "One thing that was pointed out to me recently is that the <code>mut</code> keyword in a function argument doesn&#39;t show up in rustdoc, so it really is an internal implementation detail. Since learning that, I&#39;m much more likely to use it."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1439992398, "post_id": 32088531, "comment_id": 52089483, "body": "@Shepmaster: Oh nice! Thanks for publicizing this!"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 4, "last_activity_date": 1439967570, "creation_date": 1439967570, "answer_id": 32088531, "question_id": 32086476, "link": "https://stackoverflow.com/questions/32086476/whats-a-nice-way-to-create-a-new-vector-by-consuming-two-vectors/32088531#32088531", "title": "What&#39;s a nice way to create a new vector by consuming two vectors?", "body": "<p>I would like to point out that marking an argument <code>mut</code> in the signature is unnecessary; it's just a shortcut.</p>\n\n<p>Thus, we can achieve the desired result without modifying the signature:</p>\n\n<pre><code>fn consume_and_concat(vec1: Vec&lt;i32&gt;, vec2: Vec&lt;i32&gt;) -&gt; Vec&lt;i32&gt; {\n    let mut vec1 = vec1;\n    vec1.extend(vec2);\n    vec1\n}\n</code></pre>\n\n<p>And because we reuse <code>vec1</code> internal buffer, it's nearly as efficient as it gets (for better efficiency, checking the capacity of <em>both</em> <code>vec1</code> and <code>vec2</code> might lead to better result).</p>\n\n<p>Of course, the shortcut:</p>\n\n<pre><code>fn consume_and_concat(mut vec1: Vec&lt;i32&gt;, vec2: Vec&lt;i32&gt;) -&gt; Vec&lt;i32&gt; {\n    vec1.extend(vec2);\n    vec1\n}\n</code></pre>\n\n<p>is, well, shorter, and as you already realized, the fact that <code>vec1</code> is <code>mut</code> does not change the type of its argument and thus does not change how to pass arguments.</p>\n"}], "owner": {"reputation": 6631, "user_id": 51683, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2ac88413948aad12e279e0d9609e7f74?s=128&d=identicon&r=PG", "display_name": "carols10cents", "link": "https://stackoverflow.com/users/51683/carols10cents"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 804, "favorite_count": 0, "accepted_answer_id": 32086526, "answer_count": 3, "score": 5, "last_activity_date": 1439967570, "creation_date": 1439957767, "last_edit_date": 1439958250, "question_id": 32086476, "link": "https://stackoverflow.com/questions/32086476/whats-a-nice-way-to-create-a-new-vector-by-consuming-two-vectors", "title": "What&#39;s a nice way to create a new vector by consuming two vectors?", "body": "<p>I would like a nice function to create a new vector, and to communicate that the argument vectors are no longer relevant and should be destroyed, take ownership of them. I don't particularly want to have to make either of the arguments mutable (to use <code>append</code>, <code>extend</code>, or <code>push_all</code> and thus change the calling signature). Code (<a href=\"https://play.rust-lang.org/?gist=ed449322da331139d5b3&amp;version=stable\" rel=\"nofollow\">playpen link</a>):</p>\n\n<pre><code>fn main () {\n    let arg1 = vec![1, 2, 3];\n    let arg2 = vec![4, 5, 6];\n    let desired = consume_and_concat(arg1, arg2);\n    assert_eq!(desired, vec![1, 2, 3, 4, 5, 6]);\n}\n\nfn consume_and_concat(vec1: Vec&lt;i32&gt;, vec2: Vec&lt;i32&gt;) -&gt; Vec&lt;i32&gt; {\n    // something nice here\n}\n</code></pre>\n\n<p>I know there's no <code>+</code> for <code>Vec</code>s. In Ruby, I'd do <code>vec1 + vec2</code> or <code>vec1.concat(vec2)</code> or <code>[vec1, vec2].flatten</code>. Is there something similarly elegant that I'm missing?</p>\n"}, {"tags": ["rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 1154, "user_id": 2718447, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/beb3947f85f2dcb663e9566b48c60a1c?s=128&d=identicon&r=PG", "display_name": "anjruu", "link": "https://stackoverflow.com/users/2718447/anjruu"}, "edited": false, "score": 0, "creation_date": 1439948682, "post_id": 32085042, "comment_id": 52066343, "body": "Alrighty then. I guess I was scared off just because it looked so very wrong to my poor C++-trained eyes. Thanks!"}], "tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": true, "score": 6, "last_activity_date": 1439947141, "creation_date": 1439947141, "answer_id": 32085042, "question_id": 32084849, "link": "https://stackoverflow.com/questions/32084849/boxt-to-t-in-rust/32085042#32085042", "title": "Box&lt;T&gt; to &amp;T in Rust", "body": "<p><code>&amp;*foo</code> is called a \"reborrow\", and is idiomatic.</p>\n"}], "owner": {"reputation": 1154, "user_id": 2718447, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/beb3947f85f2dcb663e9566b48c60a1c?s=128&d=identicon&r=PG", "display_name": "anjruu", "link": "https://stackoverflow.com/users/2718447/anjruu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 231, "favorite_count": 0, "accepted_answer_id": 32085042, "answer_count": 1, "score": 3, "last_activity_date": 1439947141, "creation_date": 1439945780, "last_edit_date": 1439946745, "question_id": 32084849, "link": "https://stackoverflow.com/questions/32084849/boxt-to-t-in-rust", "title": "Box&lt;T&gt; to &amp;T in Rust", "body": "<p>How do I call a function that expects a trait object if I have a <code>Box&lt;T&gt;</code> instead? In other words:</p>\n\n<pre><code>trait T { ... }\n\nfn func(t: &amp;T) { ... }\n\nfn some_other_func() {\n   b: Box&lt;T&gt;; // Provided\n\n   // These work, but is there a better way?\n   func( &amp;*b );                // 1\n   func( Borrow::borrow(&amp;b) ); // 2\n}\n</code></pre>\n\n<p>Both 1 and 2 seem wrong. Am I missing something obvious?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1439938674, "post_id": 32083758, "comment_id": 52063941, "body": "Why do you not want to bound <code>A</code> by the <code>&#39;static</code> lifetime when you spawn it? I&#39;m pretty sure that you will <b>have to</b>, based on the fact that the spawned thread may outlive the parent thread. The <a href=\"http://is.gd/EjUX6Y\" rel=\"nofollow noreferrer\">restriction is pretty non-invasive as well</a>."}, {"owner": {"reputation": 341, "user_id": 384057, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/b8e6ce842c15ea85bc9a1f4aae300adf?s=128&d=identicon&r=PG", "display_name": "Watts", "link": "https://stackoverflow.com/users/384057/watts"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1439947922, "post_id": 32083758, "comment_id": 52066158, "body": "I guess I&#39;m not sure what the meaning of <code>&#39;static</code> is in this context. I don&#39;t want to make the <code>A</code> that gets used in <code>make_shoes</code> to be leaked by forcing it to live for the duration of the program."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1439955810, "post_id": 32083758, "comment_id": 52068097, "body": "It certainly won&#39;t be leaked. Basically, you will be transferring ownership of the variable to the thread, and the variable is not allowed to have any <i>references</i> to items that cannot be guaranteed to live for the life of the program."}], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 16, "last_activity_date": 1512749682, "last_edit_date": 1512749682, "creation_date": 1439977894, "answer_id": 32092120, "question_id": 32083758, "link": "https://stackoverflow.com/questions/32083758/parameter-type-may-not-live-long-enough-with-threads/32092120#32092120", "title": "Parameter type may not live long enough (with threads)", "body": "<p>The <a href=\"http://doc.rust-lang.org/std/thread/fn.spawn.html\" rel=\"noreferrer\"><code>std::thread::spawn()</code></a> function is declared with a <code>Send + 'static</code> bound on its closure. Anything which this closure captures must satisfy the <code>Send + 'static</code> bound. There is <em>no</em> way around this in safe Rust. If you want to pass data to other threads using this function, it must be <code>'static</code>, period.</p>\n\n<p>It is possible to lift the <code>'static</code> restriction with the proper API, see <a href=\"https://stackoverflow.com/q/32750829/155423\">How can I pass a reference to a stack variable to a thread?</a> for an example.</p>\n\n<p>However, a <code>'static</code> bound is not as scary as it may seem. First of all, you cannot <em>force</em> anything to do anything with lifetime bounds (you can't <em>force</em> anything to do anything with any kind of bounds). Bounds just limit the set of types which can be used for the bounded type parameter and that is all; if you tried to pass a value whose type does not satisfy these bounds, the compiler will fail to compile your program, it won't magically make the values \"live longer\".</p>\n\n<p>Moreover, a <code>'static</code> bound does not mean that the value must live for the duration of the program; it means that the value must not contain borrowed references with lifetimes other than <code>'static</code>. In other words, it is a lower bound for possible references inside the value; if there are no references, then the bound does not matter. For example, <code>String</code> or <code>Vec&lt;u64&gt;</code> or <code>i32</code> satisfy the <code>'static</code> bound.</p>\n\n<p><code>'static</code> is a very natural restriction to put on <code>spawn()</code>. If it weren't present, the values transferred to another thread could contain references to the stack frame of the parent thread. If the parent thread finishes before the spawned thread, these references would become dangling.</p>\n"}], "owner": {"reputation": 341, "user_id": 384057, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/b8e6ce842c15ea85bc9a1f4aae300adf?s=128&d=identicon&r=PG", "display_name": "Watts", "link": "https://stackoverflow.com/users/384057/watts"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1929, "favorite_count": 1, "accepted_answer_id": 32092120, "answer_count": 1, "score": 8, "last_activity_date": 1512749682, "creation_date": 1439937700, "last_edit_date": 1512749461, "question_id": 32083758, "link": "https://stackoverflow.com/questions/32083758/parameter-type-may-not-live-long-enough-with-threads", "title": "Parameter type may not live long enough (with threads)", "body": "<p>This is similar to <a href=\"https://stackoverflow.com/questions/29740488/parameter-type-may-not-live-long-enough\">Parameter type may not live long enough?</a>, but my interpretation of the solution doesn't seem to be working. My original boiled-down test case is:</p>\n\n<pre><code>use std::fmt::Debug;\nuse std::thread;\n\ntrait HasFeet: Debug + Send + Sync + Clone {}\n\n#[derive(Debug, Clone)]\nstruct Person;\n\nimpl HasFeet for Person {}\n\n#[derive(Debug, Copy, Clone)]\nstruct Cordwainer&lt;A: HasFeet&gt; {\n    shoes_for: A,\n}\n\nimpl&lt;A: HasFeet&gt; Cordwainer&lt;A&gt; {\n    fn make_shoes(&amp;self) {\n        let cloned = self.shoes_for.clone();\n        thread::spawn(move || {\n            println!(\"making shoes for = {:?}\", cloned);\n        });\n    }\n}\n</code></pre>\n\n<p>This gives me the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0310]: the parameter type `A` may not live long enough\n  --&gt; src/main.rs:19:9\n   |\n16 | impl&lt;A: HasFeet&gt; Cordwainer&lt;A&gt; {\n   |      -- help: consider adding an explicit lifetime bound `A: 'static`...\n...\n19 |         thread::spawn(move || {\n   |         ^^^^^^^^^^^^^\n   |\nnote: ...so that the type `[closure@src/main.rs:19:23: 21:10 cloned:A]` will meet its required lifetime bounds\n  --&gt; src/main.rs:19:9\n   |\n19 |         thread::spawn(move || {\n   |         ^^^^^^^^^^^^^\n</code></pre>\n\n<p>Instead of making <code>A</code> <code>'static</code>, I go through and add an explicit lifetime to the <code>HasFeet</code> trait:</p>\n\n<pre><code>use std::fmt::Debug;\nuse std::thread;\n\ntrait HasFeet&lt;'a&gt;: 'a + Send + Sync + Debug {}\n\n#[derive(Debug, Copy, Clone)]\nstruct Person;\n\nimpl&lt;'a&gt; HasFeet&lt;'a&gt; for Person {}\n\nstruct Cordwainer&lt;'a, A: HasFeet&lt;'a&gt;&gt; {\n    shoes_for: A,\n}\n\nimpl&lt;'a, A: HasFeet&lt;'a&gt;&gt; Cordwainer&lt;'a, A&gt; {\n    fn make_shoes(&amp;self) {\n        let cloned = self.shoes_for.clone();\n        thread::spawn(move || {\n            println!(\"making shoes for = {:?}\", cloned);\n        })\n    }\n}\n</code></pre>\n\n<p>This now gives me the error: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0392]: parameter `'a` is never used\n  --&gt; src/main.rs:11:19\n   |\n11 | struct Cordwainer&lt;'a, A: HasFeet&lt;'a&gt;&gt; {\n   |                   ^^ unused type parameter\n   |\n   = help: consider removing `'a` or using a marker such as `std::marker::PhantomData`\n</code></pre>\n\n<p>I think that <code>'a</code> is used as the lifetime parameter to the <code>HasFeet</code> trait. What am I doing wrong here?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 78, "user_id": 2791035, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6fbbac2c6c7022b5be8b34419cb1a9e1?s=128&d=identicon&r=PG&f=1", "display_name": "Luke", "link": "https://stackoverflow.com/users/2791035/luke"}, "edited": false, "score": 0, "creation_date": 1440344890, "post_id": 32083561, "comment_id": 52223676, "body": "Thank you for a very thorough explanation."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 8, "last_activity_date": 1439936984, "last_edit_date": 1439936984, "creation_date": 1439936552, "answer_id": 32083561, "question_id": 32083065, "link": "https://stackoverflow.com/questions/32083065/borrow-data-out-of-a-mutex-borrowed-value-does-not-live-long-enough/32083561#32083561", "title": "Borrow data out of a mutex &quot;borrowed value does not live long enough&quot;", "body": "<p>You cannot do it exactly how you have written here.</p>\n\n<p>Mutexes in Rust use RAII pattern for acquisition and freeing, that is, you acquire a mutex when you call the corresponding method on it which returns a special guard value. When this guard goes out of scope, the mutex is released.</p>\n\n<p>To make this pattern safe Rust uses its borrowing system. You can access the value inside the mutex only through the guard returned by <code>lock()</code>, and you only can do so by reference - <code>MutexGuard&lt;T&gt;</code> implements <code>Deref&lt;Target=T&gt;</code> and <code>DerefMut&lt;Target=T&gt;</code>, so you can get <code>&amp;T</code> or <code>&amp;mut T</code> out of it.</p>\n\n<p>This means that every value you derive from a mutexed value will necessarily have its lifetime linked to the lifetime of the guard. However, in your case you're trying to return <code>Iter&lt;u32&gt;</code> with its lifetime parameter tied to the lifetime of <code>self</code>. The following is the full signature of <code>iter()</code> method, without lifetime parameters elision, and its body with explicit temporary variables:</p>\n\n<pre><code>fn iter&lt;'a&gt;(&amp;'a self) -&gt; Iter&lt;'a, u32&gt; {\n    let guard = self.data.lock().unwrap();\n    guard.iter()\n}\n</code></pre>\n\n<p>Here the lifetime of <code>guard.iter()</code> result is tied to the one <code>guard</code>, which is strictly smaller than <code>'a</code> because <code>guard</code> only lives inside the scope of the method body. This is a violation of borrowing rules, and so the compiler fails with an error.</p>\n\n<p>When <code>iter()</code> returns, <code>guard</code> is destroyed and the lock is released, so Rust in fact prevented you from making an actual logical error! The same code in C++ would compile and behave incorrectly because you would access protected data without locking it, causing data races at the very least. Just another demonstration of the power of Rust :)</p>\n\n<p>I don't think you'll be able to do what you want without nasty hacks or boilerplate wrappers around standard types. And I personally think this is good - you have to manage your mutexes as explicit as possible in order to avoid deadlocks and other nasty concurrency problems. And Rust already makes your life much easier because it enforces absence of data races through its borrowing system, which is exactly the reason why the guard system behaves as described above.</p>\n"}], "owner": {"reputation": 78, "user_id": 2791035, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6fbbac2c6c7022b5be8b34419cb1a9e1?s=128&d=identicon&r=PG&f=1", "display_name": "Luke", "link": "https://stackoverflow.com/users/2791035/luke"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 762, "favorite_count": 0, "accepted_answer_id": 32083561, "answer_count": 1, "score": 3, "last_activity_date": 1439936984, "creation_date": 1439934085, "question_id": 32083065, "link": "https://stackoverflow.com/questions/32083065/borrow-data-out-of-a-mutex-borrowed-value-does-not-live-long-enough", "title": "Borrow data out of a mutex &quot;borrowed value does not live long enough&quot;", "body": "<p>How can I return an iterator over data within a mutex which itself is contained within a struct. The error the compiler gives is \"borrowed value does not live long enough\".</p>\n\n<p>How do I get the lifetime of the value to extend into the outer scope? </p>\n\n<p>Here is a minimal demo of what I am trying to achieve.</p>\n\n<pre><code>use std::sync::{Mutex, Arc};\nuse std::vec::{Vec};\nuse std::slice::{Iter};\n\n#[derive(Debug)]\nstruct SharedVec {\n  pub data: Arc&lt;Mutex&lt;Vec&lt;u32&gt;&gt;&gt;,\n}\n\nimpl SharedVec {\n  fn iter(&amp; self) -&gt; Iter&lt;u32&gt; {\n    self.data.lock().unwrap().iter()\n  }\n}\n\nfn main() {\n\n  let sv = SharedVec {\n    data: Arc::new(Mutex::new(vec![1, 2, 3, 4, 5]))\n  };\n\n  for element in sv.data.lock().unwrap().iter() {  // This works\n    println!(\"{:?}\", element);\n  }\n\n  for element in sv.iter() {  // This does not work\n    println!(\"{:?}\", element);\n  }\n}\n</code></pre>\n\n<p>Rust playground link: <a href=\"http://is.gd/voukyN\" rel=\"nofollow\">http://is.gd/voukyN</a></p>\n"}, {"tags": ["generics", "compiler-errors", "rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 1, "creation_date": 1439931851, "post_id": 32081825, "comment_id": 52061192, "body": "&quot;you would need its virtual table to contain pointers to virtually each and every possible instantiation of the generic method for all possible types, which [...] would require infinite number of instantiations.&quot; No it wouldn&#39;t - there are only a finite number of types and only a small subset actually get used in the code. It would seem to be possible to statically detect these, if not worth the cost."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 3, "creation_date": 1439932938, "post_id": 32081825, "comment_id": 52061717, "body": "&quot;there are only a finite number of types&quot; really? There is infinite amount of types, and here is a proof. If you start from these propositions: <code>i32 in Types</code>, <code>for all T. Option&lt;T&gt; in Types</code> (which are obviously true), you can easily derive that all of <code>i32</code>, <code>Option&lt;i32&gt;</code>, <code>Option&lt;Option&lt;i32&gt;&gt;</code> and so on are types. Therefore the set of types is infinite because we just have found its infinite subset. Of course, the set of types <i>actually used</i> in a program is finite, but finding it and generating methods for each generic trait for them and then removing unused ones would be very hard indeed."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 1, "creation_date": 1439933364, "post_id": 32081825, "comment_id": 52061935, "body": "I&#39;d also add that it looks like it poses some problems with interoperability. Suppose a trait with a generic method is defined in one crate, and its trait objects are used in the same crate. It would need to generate some kind of virtual table for this crate. Now this crate is used by another crate which also uses trait objects for the same trait, but with different type parameters for its method. Now we have two incompatible virtual tables, and so trait objects created in the first and the second crate are not compatible. Things get even funnier, it seems, if we start using shared libraries."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1439933655, "post_id": 32081825, "comment_id": 52062074, "body": "&quot;there are only a finite number of types&quot; \u2192 Yes. Are there an infinite number of humans? You&#39;ve described the space of possible types, but to Rust <code>Option&lt;Option&lt;Option&lt;i32&gt;&gt;&gt;</code> isn&#39;t a type until you monomorphise it. As such, finding all of the types would be as simple as looking in whatever table Rust uses for caching things."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1439934023, "post_id": 32081825, "comment_id": 52062230, "body": "&quot;I&#39;d also add that it looks like it poses some problems with interoperability.&quot; Indeed, I agree it&#39;s not practical."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1439935038, "post_id": 32081825, "comment_id": 52062679, "body": "There <i>is</i> an infinite number of types which can be described by the type system because the type system is a mathematical model. There is nothing which prevents you from writing out a new type if you have some concrete and generic types already, except from time and memory required to do so, and this is a (one of many possible) definition of a &quot;countably infinite set&quot;. In each <b>concrete</b> program there is indeed only a finite subset of types used, but it does not make the whole set of types finite. And I don&#39;t understand your &quot;human&quot; analogy, sorry. These are conceptually different things."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1439937658, "post_id": 32081825, "comment_id": 52063586, "body": "When you say &quot;every possible instantiation of the generic method for all possible types&quot; it&#39;s pointless to consider types not defined by the program. Whether or not you want to say &quot;all types&quot; is in context of the type system or in context of usage (as another example, is &quot;all programs&quot; an infinite set?) is arguing about semantics, which is silly.  Rather, we should be considering what actually matters to the argument you&#39;re making, which is the finite set of instantiated types."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1439966416, "post_id": 32081825, "comment_id": 52071771, "body": "Well, I disagree that arguing about semantics is silly. I&#39;m a mathematician, and such things seems important to me :) BTW &quot;all programs&quot; is also an infinite set, while &quot;all existing/written programs&quot; is large but finite. Anyway, I do think that this arguing is rather pointless, so I suggest to conclude it here."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 6, "last_activity_date": 1454053831, "last_edit_date": 1454053831, "creation_date": 1439928945, "answer_id": 32081825, "question_id": 32081065, "link": "https://stackoverflow.com/questions/32081065/trait-x-is-not-implemented-for-the-type-x/32081825#32081825", "title": "Trait `x` is not implemented for the type `x`", "body": "<p><strong>Update:</strong> fixed object safety rules to the 1.0 version of them. Namely, by-value <code>self</code> makes method object-unsafe no longer.</p>\n\n<p>This error happens because of <a href=\"http://huonw.github.io/blog/2015/01/object-safety/\" rel=\"nofollow\">object safety</a>.</p>\n\n<p>In order to be able to create a trait object out of a trait, the trait must be object-safe. A trait is object-safe if both of these statements hold:</p>\n\n<ol>\n<li>it does not have <code>Sized</code> requirement, as in <code>trait Whatever: Sized {}</code>;</li>\n<li>all its methods are object-safe.</li>\n</ol>\n\n<p>A method is object-safe if both of these statements are true:</p>\n\n<ol>\n<li>it has <code>where Self: Sized</code> requirement, as in <code>fn method() where Self: Sized</code>;</li>\n<li><p>none of the following statements holds:</p>\n\n<ol>\n<li>this method mentions <code>Self</code> in their signature in any form, even under a reference, except associated types;</li>\n<li>this method is static;</li>\n<li>this method is generic.</li>\n</ol></li>\n</ol>\n\n<p>These restrictions are in fact fairly natural if you think more of them.</p>\n\n<p>Remember that when values are made into trait objects, actual information of their type is erased, including their size. Therefore, trait objects can only be used through a reference. References (or other smart pointers, like <code>Box</code> or <code>Rc</code>), when applied to trait objects, become \"fat pointers\" - along with the pointer to the value, they also contain a pointer to the virtual table for that value.</p>\n\n<p>Because trait objects can only be used through a pointer, by-value <code>self</code> methods can't be called on them - you'd need the actual value in order to call such methods. This was a violation of object safety at one point, which meant that traits with such methods couldn't be made trait objects, however, even before 1.0 the rules had been tweaked to allow by-value <code>self</code> methods on trait objects. These methods still can't be called, though, due to the reason described above. There are reasons to expect that in the future this restriction will be lifted because it currently leads to some quirks in the language, for example, the inability to call <code>Box&lt;FnOnce()&gt;</code> closures.</p>\n\n<p><code>Self</code> can't be used in methods which should be called on trait objects precisely because trait objects have their actual type erased, but in order to call such methods the compiler would need to know this erased type.</p>\n\n<p>Why static methods can't be called on trait objects, I guess, is obvious - static methods by definition \"belong\" to the trait itself, not to the value, so you need to know the concrete type implementing the trait to call them. More concretely, regular methods are dispatched through a virtual table stored inside a trait object, but static methods do not have a receiver, so they have nothing to dispatch on, and for this reason they can't be stored in a virtual table. Thus they are uncallable without knowing the concrete type.</p>\n\n<p>Generic trait methods can't be called for another reason, more technical than logical, I think. In Rust generic functions and methods are implemented through monomorphization - that is, for each instantiation of a generic function with a concrete set of type parameters the compiler generate a separate function. For the language user it looks like that they're calling a generic function; but on the lowest level for each set of type parameters there is a separate copy of the function, specialized to work for the instantiated types.</p>\n\n<p>Given this approach, in order to call generic methods on a trait object you would need its virtual table to contain pointers to <em>virtually each and every possible</em> instantiation of the generic method for all possible types, which is, naturally, impossible because it would require infinite number of instantiations. And so calling generic methods on trait objects is disallowed.</p>\n\n<p>If <code>Drawable</code> is an external trait, then you're stuck - it is impossible to do what you want, that is, to call <code>draw()</code> on each item in a heterogeneous collection. If your set of drawables is statically known, you can create a separate collection for each drawable type or, alternatively, create your own <code>enum</code> which would contain a variant for each drawable type you have. Then you can implement <code>Drawable</code> for the enum itself, which would be fairly straightforward.</p>\n"}, {"tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": false, "score": 2, "last_activity_date": 1439948840, "last_edit_date": 1439948840, "creation_date": 1439934187, "answer_id": 32083089, "question_id": 32081065, "link": "https://stackoverflow.com/questions/32081065/trait-x-is-not-implemented-for-the-type-x/32083089#32083089", "title": "Trait `x` is not implemented for the type `x`", "body": "<p>If you're stuck with what you're given, there are two options you could try.</p>\n\n<p>In this case, you can't, but if you were given an unsized <code>RenderTarget</code></p>\n\n<pre><code>trait Drawable {\n    fn draw&lt;RT: RenderTarget + ?Sized&gt;(&amp;self, target: &amp;mut RT);\n}\n</code></pre>\n\n<p>you could implement</p>\n\n<pre><code>trait DrawableDynamic {\n    fn draw(&amp;self, target: &amp;mut RenderTarget);\n}\n\nimpl&lt;T: Drawable&gt; DrawableDynamic for T {\n    fn draw(&amp;self, target: &amp;mut RenderTarget) {\n        Drawable::draw(self, target)\n    }\n}\n</code></pre>\n\n<p>to redirect the types you're given to an object-safe dynamically dispatched alternative. It looks like such a change could be made upstream, since you can't really <em>use</em> the fact that <code>RT</code> is sized.</p>\n\n<p>The other doesn't allow you to put arbitrary <code>Drawable</code>s in your <code>Vec</code>, but should work without allowing unsized types upstream. This is to use an enum to wrap the possible values of the vector:</p>\n\n<pre><code>enum AllDrawable {\n    Square(Square),\n    Triangle(Triangle)\n}\n\nimpl Drawable for AllDrawable {\n    fn draw&lt;RT: RenderTarget&gt;(&amp;self, target: &amp;mut RT) {\n        match *self { \n            AllDrawable::Square(ref x) =&gt; x.draw(target),\n            AllDrawable::Triangle(ref x) =&gt; x.draw(target),\n        }\n    }\n}\n</code></pre>\n\n<p>One might want to add <code>From</code> implementations and such; you might find it easier if using <a href=\"https://hoverbear.github.io/raft/wrapped_enum/index.html\" rel=\"nofollow\"><code>wrapped_enum!</code></a> which will automatically implement those for you.</p>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 3, "last_activity_date": 1439966656, "creation_date": 1439966656, "answer_id": 32088248, "question_id": 32081065, "link": "https://stackoverflow.com/questions/32081065/trait-x-is-not-implemented-for-the-type-x/32088248#32088248", "title": "Trait `x` is not implemented for the type `x`", "body": "<p>I refer to Vladimir's excellent answer which explains Object's safety, however I am afraid than in the middle of the discussion the concrete problem at hand was forgotten.</p>\n\n<p>As Vladimir mentions, the issue is that a method generic over types (generic over lifetimes is fine) renders the trait it belongs to unusable for run-time polymorphism; this, in Rust, is called Object Safety.</p>\n\n<p>The simplest fix, therefore, is to remove the generic parameter of the method!</p>\n\n<pre><code>trait RenderTarget {}\n\nstruct RenderWindow;\nimpl RenderTarget for RenderWindow {}\n\ntrait Drawable {\n    fn draw(&amp;self, target: &amp;mut RenderTarget);\n}\n\nfn main() {\n    let mut win = RenderWindow;\n    let mut vec: Vec&lt;Box&lt;Drawable&gt;&gt; = Vec::new();\n\n    for e in &amp;vec {\n        e.draw(&amp;mut win);\n    }\n}\n</code></pre>\n\n<p>The main difference between:</p>\n\n<pre><code>fn draw&lt;RT: RenderTarget&gt;(&amp;self, target: &amp;mut RT)\n</code></pre>\n\n<p>and</p>\n\n<pre><code>fn draw(&amp;self, target: &amp;mut RenderTarget)\n</code></pre>\n\n<p>is that the latter requires <code>RenderTarget</code> to be Object Safe too as it is now used in a run-time polymorphism situation (so, no static method, no generic method, no <code>Self</code>, ...).</p>\n\n<p>Another (more technical) difference is that the former is \"monorphised\" at compile-time (that is <code>RT</code> is substituted with the real type and all relevant optimizations applied) whereas the latter is not (and so, no such optimizations occur).</p>\n"}], "owner": {"reputation": 37741, "user_id": 3425536, "user_type": "registered", "accept_rate": 72, "profile_image": "https://graph.facebook.com/1484495923/picture?type=large", "display_name": "emlai", "link": "https://stackoverflow.com/users/3425536/emlai"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 535, "favorite_count": 0, "accepted_answer_id": 32081825, "answer_count": 3, "score": 9, "last_activity_date": 1454053831, "creation_date": 1439926087, "last_edit_date": 1495542214, "question_id": 32081065, "link": "https://stackoverflow.com/questions/32081065/trait-x-is-not-implemented-for-the-type-x", "title": "Trait `x` is not implemented for the type `x`", "body": "<p>When compiling the following code:</p>\n\n<pre><code>trait RenderTarget {}\n\nstruct RenderWindow;\nimpl RenderTarget for RenderWindow {}\n\ntrait Drawable {\n    fn draw&lt;RT: RenderTarget&gt;(&amp;self, target: &amp;mut RT);\n}\n\nfn main() {\n    let mut win = RenderWindow;\n    let mut vec: Vec&lt;Box&lt;Drawable&gt;&gt; = Vec::new();\n\n    for e in &amp;vec {\n        e.draw(&amp;mut win);\n    }\n}\n</code></pre>\n\n<p>I get the error:</p>\n\n<pre><code>error: the trait `Drawable` is not implemented for the type `Drawable` [E0277]\nsrc/main.rs:15         e.draw(&amp;mut win);\n                         ^~~~~~~~~~~~~~\n</code></pre>\n\n<p>What is the error message trying to tell? Also, how to fix it?</p>\n\n<p>There's a <a href=\"https://stackoverflow.com/q/30055356/3425536\">related question</a> but the solution there was to modify the trait <code>A</code> (which corresponds to <code>Drawable</code> in my case), but that's not possible here since <code>Drawable</code> is from an external library.</p>\n"}, {"tags": ["json", "rust"], "answers": [{"comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user266003"}, "edited": false, "score": 0, "creation_date": 1439914435, "post_id": 32077448, "comment_id": 52051466, "body": "I don&#39;t know, I get this <code>error: unresolved import serde::de::Deserialize. Did you mean self::serde::de</code>? <code>src&#47;file1.rs:7 use serde::de::Deserialize;</code> `"}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "edited": false, "score": 0, "creation_date": 1439916734, "post_id": 32077448, "comment_id": 52052720, "body": "Ah ha! I know what&#39;s wrong. Let me update my answer."}, {"owner": {"user_type": "does_not_exist", "display_name": "user266003"}, "edited": false, "score": 0, "creation_date": 1439917112, "post_id": 32077448, "comment_id": 52052920, "body": "<code>which means it&#39;s looking for a serde in this module</code> - for some reason other modules in the same file (file1.rs) get exported correctly. anyway, it&#39;s working now."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1439922349, "post_id": 32077448, "comment_id": 52055996, "body": "&quot;use is relative by default&quot; I was under impression that <code>use</code> is always absolute, and you need to use <code>self</code> in order to import something from this module and below, like <code>use self::SomeEnum::*</code> to get all variants from an enum or <code>use self::submodule:subsubmodule</code> to import one of the child submodules."}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1439922527, "post_id": 32077448, "comment_id": 52056096, "body": "@VladimirMatveev hmm, that would seem to be true, but then why isn&#39;t it not going from the crate root here? We would only need one of <code>::</code> and <code>self</code> if it were always one or the other."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 1, "creation_date": 1439928306, "post_id": 32077448, "comment_id": 52059353, "body": "@SteveKlabnik, I guess the reason could be that <code>extern crate</code> declaration is located in a submodule, not in a crate root. But that&#39;s only a guessing, of course; a full example of a non-compiling crate would be nice to have."}], "tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": true, "score": -3, "last_activity_date": 1439922560, "last_edit_date": 1439922560, "creation_date": 1439914144, "answer_id": 32077448, "question_id": 32077194, "link": "https://stackoverflow.com/questions/32077194/cant-export-and-use-the-trait-deserialize-from-serde/32077448#32077448", "title": "Can&#39;t export and use the trait Deserialize from serde", "body": "<p>Let's read the error message you posted in your comment:</p>\n\n<pre><code>error: unresolved import serde::de::Deserialize. Did you mean self::serde::de?\nsrc/file1.rs:7 use serde::de::Deserialize;\n</code></pre>\n\n<p>There's a very important bit there: <code>src/file1.rs</code>. I bet this means that you're in a submodule, rather than in the crate root. You'll want</p>\n\n<pre><code>use ::serde::de::Deserialize;\n</code></pre>\n\n<p>Note the <code>::</code> at the front. This makes it look from the crate root.</p>\n"}, {"tags": [], "owner": {"reputation": 1455, "user_id": 2649611, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8ff3b4b9e7a105dc104f8d76a0b31e92?s=128&d=identicon&r=PG", "display_name": "cakraww", "link": "https://stackoverflow.com/users/2649611/cakraww"}, "is_accepted": false, "score": 6, "last_activity_date": 1565276140, "creation_date": 1565276140, "answer_id": 57415477, "question_id": 32077194, "link": "https://stackoverflow.com/questions/32077194/cant-export-and-use-the-trait-deserialize-from-serde/57415477#57415477", "title": "Can&#39;t export and use the trait Deserialize from serde", "body": "<p>In <code>Cargo.toml</code>:</p>\n\n<pre><code>[dependencies]\nserde = { version = \"1.0\", features = [\"derive\"] }\nserde_json = \"1.0\"\n</code></pre>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user266003"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2291, "favorite_count": 0, "accepted_answer_id": 32077448, "answer_count": 2, "score": 6, "last_activity_date": 1565276140, "creation_date": 1439913472, "last_edit_date": 1460995412, "question_id": 32077194, "link": "https://stackoverflow.com/questions/32077194/cant-export-and-use-the-trait-deserialize-from-serde", "title": "Can&#39;t export and use the trait Deserialize from serde", "body": "<p>I'm using the crate <code>serde_json</code>. Here's my TOML file:</p>\n\n<pre><code>[dependencies]\nhyper = \"0.6.8\"\ntime = \"0.1\"\nserde_json = \"0.5.1\"\nserde = \"0.5.1\"\n</code></pre>\n\n<p>And export:</p>\n\n<pre><code>extern crate serde;\n\n// use serde::de::Deserialize; // unresolved import\nuse serde::Deserialize;  // unresolved import\n</code></pre>\n\n<p>In the documentation it says it's in the module <code>serde::de</code>.</p>\n"}, {"tags": ["rust", "typetraits", "type-bounds"], "comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 1, "creation_date": 1439912589, "post_id": 32075454, "comment_id": 52050216, "body": "The standard joke is: it means &quot;<i>very</i> <code>Copy</code>&quot;."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1439909163, "creation_date": 1439909163, "answer_id": 32075655, "question_id": 32075454, "link": "https://stackoverflow.com/questions/32075454/what-does-a-trait-bound-mean-when-it-is-added-to-itself/32075655#32075655", "title": "What does a trait bound mean when it is added to itself?", "body": "<p>Yes, this is a <a href=\"https://github.com/rust-lang/rust/issues/25022\" rel=\"nofollow\">known and fixed issue in rustdoc</a>.</p>\n"}], "owner": {"reputation": 944, "user_id": 1518588, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/0dc57ef6856b371529d1db038cb2f358?s=128&d=identicon&r=PG", "display_name": "LP_", "link": "https://stackoverflow.com/users/1518588/lp"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 68, "favorite_count": 0, "accepted_answer_id": 32075655, "answer_count": 1, "score": 2, "last_activity_date": 1439912447, "creation_date": 1439908669, "last_edit_date": 1439912447, "question_id": 32075454, "link": "https://stackoverflow.com/questions/32075454/what-does-a-trait-bound-mean-when-it-is-added-to-itself", "title": "What does a trait bound mean when it is added to itself?", "body": "<p>In the Rust documentation, I see implementations like this one, from <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html\" rel=\"nofollow\">Option</a>:</p>\n\n<pre><code>impl&lt;T&gt; Copy for Option&lt;T&gt; where T: Copy + Copy\n</code></pre>\n\n<p>What does the <code>Copy + Copy</code> bound mean? Is it just a documentation quirk?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1439899732, "post_id": 32071415, "comment_id": 52040484, "body": "This takes 152 milliseconds on my machine. Are you compiling with optimizations?"}, {"owner": {"reputation": 2403, "user_id": 3190054, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/b7de233f9b761d1d0d75d64b608aca88?s=128&d=identicon&r=PG&f=1", "display_name": "kezzos", "link": "https://stackoverflow.com/users/3190054/kezzos"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1439900005, "post_id": 32071415, "comment_id": 52040664, "body": "Thanks, I&#39;ve just realised something strange is going on, ill try re-phrease the question."}], "answers": [{"comments": [{"owner": {"reputation": 2403, "user_id": 3190054, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/b7de233f9b761d1d0d75d64b608aca88?s=128&d=identicon&r=PG&f=1", "display_name": "kezzos", "link": "https://stackoverflow.com/users/3190054/kezzos"}, "edited": false, "score": 0, "creation_date": 1439908913, "post_id": 32075392, "comment_id": 52047443, "body": "Thanks, is there a way to change the hashing algorithm to get any more speed?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 2403, "user_id": 3190054, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/b7de233f9b761d1d0d75d64b608aca88?s=128&d=identicon&r=PG&f=1", "display_name": "kezzos", "link": "https://stackoverflow.com/users/3190054/kezzos"}, "edited": false, "score": 0, "creation_date": 1439967855, "post_id": 32075392, "comment_id": 52072480, "body": "@kezzos: Ultimately, there should be, however all the stuff about <code>Hasher</code> is still unstable."}], "tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": true, "score": 3, "last_activity_date": 1439908969, "last_edit_date": 1439908969, "creation_date": 1439908524, "answer_id": 32075392, "question_id": 32071415, "link": "https://stackoverflow.com/questions/32071415/why-is-this-hashmap-search-slower-than-expected/32075392#32075392", "title": "Why is this hashmap search slower than expected?", "body": "<p>One thing to consider is that <code>HashMap&lt;K, V&gt;</code> uses a cryptographically secure hashing algorithm by default, so it will always be a bit slow by nature.</p>\n\n<p><code>get()</code> boils down to</p>\n\n<pre><code>self.search(k).map(|bucket| bucket.into_refs().1)\n</code></pre>\n\n<p><code>contains_key</code> is</p>\n\n<pre><code>self.search(k).is_some()\n</code></pre>\n\n<p>As such, that <code>get()</code> is faster for you seems strange to me, it's doing more work!</p>\n\n<p>Also,</p>\n\n<pre><code>if match n {Some(v) =&gt; 1, None =&gt; 0} == 1 {\n</code></pre>\n\n<p>This can be written more idiomatically as</p>\n\n<pre><code>if let Some(v) = n {\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 2403, "user_id": 3190054, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/b7de233f9b761d1d0d75d64b608aca88?s=128&d=identicon&r=PG&f=1", "display_name": "kezzos", "link": "https://stackoverflow.com/users/3190054/kezzos"}, "is_accepted": false, "score": 0, "last_activity_date": 1439910671, "creation_date": 1439910671, "answer_id": 32076206, "question_id": 32071415, "link": "https://stackoverflow.com/questions/32071415/why-is-this-hashmap-search-slower-than-expected/32076206#32076206", "title": "Why is this hashmap search slower than expected?", "body": "<p>Ive found my problem, Im sorry I didnt pick up until now. I wasnt checking the return of <code>if !collect_pairs.contains_key(&amp;name)</code> properly. It returns <code>true</code> for some reason resulting in the rest of the if block being run. I assumed it was evaluating to <code>false</code>. Thanks for the help  </p>\n"}], "owner": {"reputation": 2403, "user_id": 3190054, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/b7de233f9b761d1d0d75d64b608aca88?s=128&d=identicon&r=PG&f=1", "display_name": "kezzos", "link": "https://stackoverflow.com/users/3190054/kezzos"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 341, "favorite_count": 0, "accepted_answer_id": 32075392, "answer_count": 2, "score": 2, "last_activity_date": 1439910671, "creation_date": 1439898011, "last_edit_date": 1439908968, "question_id": 32071415, "link": "https://stackoverflow.com/questions/32071415/why-is-this-hashmap-search-slower-than-expected", "title": "Why is this hashmap search slower than expected?", "body": "<p>What is the best way to check a hash map for a key?\nCurrently I am using this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let hashmap = HashMap::&lt;&amp;str, &amp;str&gt;::new();  // Empty hashmap\n\nlet name = \"random\";\n\nfor i in 0..5000000 {\n    if !hashmap.contains_key(&amp;name) { \n        // Do nothing\n        }\n}\n</code></pre>\n\n<p>This seems to be fast in most cases and takes 0.06 seconds when run as shown, but when I use it in this following loop it becomes very slow and takes almost 1 min on my machine. (This is compiling with <code>cargo run --release</code>).\nThe code aims to open an external program, and loop over the output from that program.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let a = vec![\"view\", \"-h\"]; // Arguments to open process with\nlet mut child = Command::new(\"samtools\").args(&amp;a)\n                                        .stdout(Stdio::piped())\n                                        .spawn()\n                                        .unwrap();\n\nlet collect_pairs = HashMap::&lt;&amp;str, &amp;str&gt;::new();\n\nif let Some(ref mut stdout) = child.stdout {\n    for line in BufReader::new(stdout).lines() {\n        // Do stuff here          \n        let name = \"random\";\n        if !collect_pairs.contains_key(&amp;name) {\n            // Do nothing\n        }\n    }\n}\n</code></pre>\n\n<p>For some reason adding the <code>if !collect_pairs.contains_key(</code> line increases the run time by almost a minute. The output from child is around 5 million lines. All this code exists in <code>fn main()</code></p>\n\n<p><strong>EDIT</strong></p>\n\n<p>This appears to fix the problem, resulting in a fast run time, but I do not know why the <code>!hashmap.contains_key</code> does not work well here:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let n: Option&lt;&amp;&amp;str&gt; = collect_pairs.get(name);\nif match n {Some(v) =&gt; 1, None =&gt; 0} == 1 {\n  // Do something\n}\n</code></pre>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 29, "user_id": 1243892, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5d5a8f29207a6541ce12ce38c6633c02?s=128&d=identicon&r=PG", "display_name": "user1243892", "link": "https://stackoverflow.com/users/1243892/user1243892"}, "edited": false, "score": 0, "creation_date": 1439959930, "post_id": 32063420, "comment_id": 52069293, "body": "Thank you for the information. The url is from rust-url. I&#39;ll continue to see if there&#39;s an alternative solution to this issue."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 5, "last_activity_date": 1439871165, "creation_date": 1439871165, "answer_id": 32063420, "question_id": 32062866, "link": "https://stackoverflow.com/questions/32062866/how-to-use-the-lifetime-on-asref/32063420#32063420", "title": "How to use the lifetime on AsRef", "body": "<p>The docs for <a href=\"http://doc.rust-lang.org/std/convert/trait.AsRef.html\" rel=\"noreferrer\"><code>AsRef</code></a> state:</p>\n\n<blockquote>\n  <p>A cheap, reference-to-reference conversion.</p>\n</blockquote>\n\n<p>However, your code is not a reference-to-reference conversion, and it's not \"cheap\" (for certain interpretations of \"cheap\"). </p>\n\n<p>You don't tell us what library <code>RequestUri::AbsoluteUri</code> or <code>url.serialize</code> come from, so I can only guess that it returns a <code>String</code>. Whoever calls <code>serialize</code> can take ownership of the string, or can let it be dropped.</p>\n\n<p>In your example, you take the <code>String</code> and call <code>as_ref</code> on that, which returns an <code>&amp;str</code>. However, <em>nothing owns the <code>String</code></em>. As soon as the block ends, that <code>String</code> will be dropped and any references will be invalid.</p>\n\n<p>There is no solution to the problem you have presented us using the information you've given.</p>\n"}], "owner": {"reputation": 29, "user_id": 1243892, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5d5a8f29207a6541ce12ce38c6633c02?s=128&d=identicon&r=PG", "display_name": "user1243892", "link": "https://stackoverflow.com/users/1243892/user1243892"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 978, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1439871165, "creation_date": 1439867187, "last_edit_date": 1439870838, "question_id": 32062866, "link": "https://stackoverflow.com/questions/32062866/how-to-use-the-lifetime-on-asref", "title": "How to use the lifetime on AsRef", "body": "<p>I'm having a hard time understanding how to use lifetimes with the code below. I understand that explicit lifetimes are necessary to aid the compiler in understanding when it can hold/release data but in this particular case, <code>url.serialize()</code> generates an anonymous string and I'm not really sure how to resolve this issue.</p>\n\n<pre><code>impl AsRef&lt;str&gt; for RequestUri {\n    #[inline]\n    fn as_ref(&amp;self) -&gt; &amp;str {\n        match self {        \n           &amp;RequestUri::AbsoluteUri(ref url) =&gt; url.serialize().as_ref() \n        }\n    }\n}\n</code></pre>\n"}, {"tags": ["rust", "mutability"], "comments": [{"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 1, "creation_date": 1439863999, "post_id": 32062285, "comment_id": 52023303, "body": "Are you sure you need interior mutability here? Is there a reason why you don&#39;t want to take <code>&amp;mut self</code>?"}, {"owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "reply_to_user": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 0, "creation_date": 1439864893, "post_id": 32062285, "comment_id": 52023485, "body": "@BurntSushi5 Hmmm... Originally I wanted to offload a bunch of image processing to a <code>threadpool</code> but <code>DynamicImage</code> isn&#39;t <code>Send</code> or <code>Sync</code> so that&#39;s off the table. I think at this point, I could take <code>&amp;mut self</code>. I have these structs in a <code>Vec</code> that I&#39;m iterating over a bunch of times. Can I borrow the objects as <code>&amp;mut</code> several times from the <code>Vec</code> as long as they are in different loops?"}, {"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 1, "creation_date": 1439865144, "post_id": 32062285, "comment_id": 52023540, "body": "I&#39;d have to see the code. Probably best to ask a new question."}, {"owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "reply_to_user": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 0, "creation_date": 1439865309, "post_id": 32062285, "comment_id": 52023584, "body": "@BurntSushi5 Thanks, I&#39;ll play around with it and see if I can figure it out. I&#39;d ruled out taking <code>&amp;mut self</code> when I wanted to do threading but I&#39;ll see if I can make it work now. I&#39;m still a little curious if it&#39;s possible to do without taking <code>&amp;mut self</code>. The docs for <code>std::cell</code> do it but they rely on <code>T: Clone</code>."}, {"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 1, "creation_date": 1439865364, "post_id": 32062285, "comment_id": 52023600, "body": "Also, <code>DynamicImage</code> seems to be both <code>Send</code> and <code>Sync</code> (I found it surprising to hear you say it wasn&#39;t). This code compiles for me on Rust stable and nightly: <a href=\"https://gist.github.com/anonymous/b41ce0fa2bbd2b92b82f\" rel=\"nofollow noreferrer\">gist.github.com/anonymous/b41ce0fa2bbd2b92b82f</a>"}, {"owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "reply_to_user": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 0, "creation_date": 1439865420, "post_id": 32062285, "comment_id": 52023612, "body": "@BurntSushi5 Weird, I was getting errors saying it wasn&#39;t. Thanks for the heads up!"}], "answers": [{"comments": [{"owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "edited": false, "score": 0, "creation_date": 1439907845, "post_id": 32062782, "comment_id": 52046654, "body": "Fantastic! The <code>pool</code> module you linked to seems like it could be generally useful. Maybe worthy of it&#39;s own crate on crates.io?"}], "tags": [], "owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "is_accepted": true, "score": 7, "last_activity_date": 1439867657, "last_edit_date": 1439867657, "creation_date": 1439866464, "answer_id": 32062782, "question_id": 32062285, "link": "https://stackoverflow.com/questions/32062285/how-does-interior-mutability-work-for-caching-behavior/32062782#32062782", "title": "How does interior mutability work for caching behavior?", "body": "<p>I'm not totally convinced you need interior mutability here. However, I do think the solution you've proposed is <em>generally</em> useful, so I'll elaborate on one way to achieve it.</p>\n\n<p>The problem with your current code is that <code>RefCell</code> provides <em>dynamic</em> borrowing semantics. In other words, borrowing the contents of a <code>RefCell</code> is opaque to Rust's borrow checker. The problem is, when you try to return a <code>&amp;DynamicImage</code> while it still lives inside the <code>RefCell</code>, it is impossible for the <code>RefCell</code> to track its borrowing status. If a <code>RefCell</code> allowed that to happen, then other code could overwrite the contents of the <code>RefCell</code> while there was a loan out of <code>&amp;DynamicImage</code>. Whoops! Memory safety violation.</p>\n\n<p>For this reason, borrowing a value out of a <code>RefCell</code> is tied to the lifetime of the guard you get back when you call <code>borrow_mut()</code>. In this case, the lifetime of the guard is the stack frame of <code>get_image</code>, which no longer exists after the function returns. Therefore, you cannot borrow the contents of a <code>RefCell</code> like you're doing.</p>\n\n<p>An alternative approach (while maintaining the requirement of interior mutability) is to <em>move</em> values in and out of the <code>RefCell</code>. This enables you to retain cache semantics.</p>\n\n<p>The basic idea is to return a <em>guard</em> that contains the dynamic image along with a pointer back to the cell it originated from. Once you're done with the dynamic image, the guard will be dropped and we can add the image back to the cell's cache.</p>\n\n<p>To maintain ergonomics, we impl <code>Deref</code> on the guard so that you can mostly pretend like it is a <code>DynamicImage</code>. Here's the code with some comments and a few other things cleaned up:</p>\n\n<pre><code>use std::cell::RefCell;\nuse std::io;\nuse std::mem;\nuse std::ops::Deref;\nuse std::path::{Path, PathBuf};\n\nstruct ImageCell {\n    image: RefCell&lt;Option&lt;DynamicImage&gt;&gt;,\n    // Suffer the one time allocation into a `PathBuf` to avoid dealing\n    // with the lifetime.\n    image_path: PathBuf,\n}\n\nimpl ImageCell {\n    fn new&lt;P: Into&lt;PathBuf&gt;&gt;(image_path: P) -&gt; ImageCell {\n        ImageCell {\n            image: RefCell::new(None),\n            image_path: image_path.into(),\n        }\n    }\n\n    fn get_image(&amp;self) -&gt; io::Result&lt;DynamicImageGuard&gt; {\n        // `take` transfers ownership out from the `Option` inside the\n        // `RefCell`. If there was no value there, then generate an image\n        // and return it. Otherwise, move the value out of the `RefCell`\n        // and return it.\n        let image = match self.image.borrow_mut().take() {\n            None =&gt; {\n                println!(\"Opening new image: {:?}\", self.image_path);\n                try!(DynamicImage::open(&amp;self.image_path))\n            }\n            Some(img) =&gt; {\n                println!(\"Retrieving image from cache: {:?}\", self.image_path);\n                img\n            }\n        };\n        // The guard provides the `DynamicImage` and a pointer back to\n        // `ImageCell`. When it's dropped, the `DynamicImage` is added\n        // back to the cache automatically.\n        Ok(DynamicImageGuard { image_cell: self, image: image })\n    }\n}\n\nstruct DynamicImageGuard&lt;'a&gt; {\n    image_cell: &amp;'a ImageCell,\n    image: DynamicImage,\n}\n\nimpl&lt;'a&gt; Drop for DynamicImageGuard&lt;'a&gt; {\n    fn drop(&amp;mut self) {\n        // When a `DynamicImageGuard` goes out of scope, this method is\n        // called. We move the `DynamicImage` out of its current location\n        // and put it back into the `RefCell` cache.\n        println!(\"Adding image to cache: {:?}\", self.image_cell.image_path);\n        let image = mem::replace(&amp;mut self.image, DynamicImage::empty());\n        *self.image_cell.image.borrow_mut() = Some(image);\n    }\n}\n\nimpl&lt;'a&gt; Deref for DynamicImageGuard&lt;'a&gt; {\n    type Target = DynamicImage;\n\n    fn deref(&amp;self) -&gt; &amp;DynamicImage {\n        // This increases the ergnomics of a `DynamicImageGuard`. Because\n        // of this impl, most uses of `DynamicImageGuard` can be as if\n        // it were just a `&amp;DynamicImage`.\n        &amp;self.image\n    }\n}\n\n// A dummy image type.\nstruct DynamicImage {\n    data: Vec&lt;u8&gt;,\n}\n\n// Dummy image methods.\nimpl DynamicImage {\n    fn open&lt;P: AsRef&lt;Path&gt;&gt;(_p: P) -&gt; io::Result&lt;DynamicImage&gt; {\n        // Open image on file system here.\n        Ok(DynamicImage { data: vec![] })\n    }\n\n    fn empty() -&gt; DynamicImage {\n        DynamicImage { data: vec![] }\n    }\n}\n\nfn main() {\n    let cell = ImageCell::new(\"foo\");\n    {\n        let img = cell.get_image().unwrap(); // opens new image\n        println!(\"image data: {:?}\", img.data);\n    } // adds image to cache (on drop of `img`)\n    let img = cell.get_image().unwrap(); // retrieves image from cache\n    println!(\"image data: {:?}\", img.data);\n} // adds image back to cache (on drop of `img`)\n</code></pre>\n\n<p>There is a really important caveat to note here: This only has one cache location, which means if you call <code>get_image</code> a second time before the first guard has been dropped, then a new image will be generated from scratch since the cell will be empty. This semantic is hard to change (in safe code) because you've committed to a solution that uses interior mutability. Generally speaking, the whole point of interior mutability is to mutate something without the caller being able to observe it. Indeed, that <em>should</em> be the case here, assuming that opening an image always returns precisely the same data.</p>\n\n<p>This approach can be generalized to be thread safe (by using <code>Mutex</code> for interior mutability instead of <code>RefCell</code>) and possibly more performant by choosing a different caching strategy depending on your use case. For example, the <a href=\"https://github.com/rust-lang/regex/blob/backwards/src/pool.rs\" rel=\"noreferrer\"><code>regex</code> crate uses a simple memory pool to cache compiled regex state</a>. Since this caching should be opaque to callers, it is implemented with interior mutability using precisely the same mechanism outlined here.</p>\n"}], "owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 865, "favorite_count": 2, "accepted_answer_id": 32062782, "answer_count": 1, "score": 7, "last_activity_date": 1439867657, "creation_date": 1439862362, "question_id": 32062285, "link": "https://stackoverflow.com/questions/32062285/how-does-interior-mutability-work-for-caching-behavior", "title": "How does interior mutability work for caching behavior?", "body": "<p>I'm trying to create a <code>struct</code> that takes a <code>Path</code> and, on demand, loads the image from the path specified. Here's what I have so far:</p>\n\n<pre><code>extern crate image;\n\nuse std::cell::{RefCell};\nuse std::path::{Path};\nuse image::{DynamicImage};\n\npub struct ImageCell&lt;'a&gt; {\n    image: RefCell&lt;Option&lt;DynamicImage&gt;&gt;,\n    image_path: &amp;'a Path, \n}\n\nimpl&lt;'a&gt; ImageCell&lt;'a&gt; {\n    pub fn new&lt;P: AsRef&lt;Path&gt;&gt;(image_path: &amp;'a P) -&gt; ImageCell&lt;'a&gt;{\n        ImageCell { image: RefCell::new(None), image_path: image_path.as_ref() }\n    }\n\n    //copied from https://doc.rust-lang.org/nightly/std/cell/index.html#implementation-details-of-logically-immutable-methods\n    pub fn get_image(&amp;self) -&gt; &amp;DynamicImage {\n        {\n            let mut cache = self.image.borrow_mut();\n            if cache.is_some() {\n                return cache.as_ref().unwrap(); //Error here\n            }\n\n            let image = image::open(self.image_path).unwrap();\n            *cache = Some(image);\n        }\n\n        self.get_image()\n    } \n}\n</code></pre>\n\n<p>This fails to compile:</p>\n\n<pre><code>src/image_generation.rs:34:24: 34:29 error: `cache` does not live long enough\nsrc/image_generation.rs:34                 return cache.as_ref().unwrap();\n                                                  ^~~~~\nsrc/image_generation.rs:30:46: 42:6 note: reference must be valid for the anonymous lifetime #1 defined on the block at 30:45...\nsrc/image_generation.rs:30     pub fn get_image(&amp;self) -&gt; &amp;DynamicImage {\nsrc/image_generation.rs:31         {\nsrc/image_generation.rs:32             let mut cache = self.image.borrow_mut();\nsrc/image_generation.rs:33             if cache.is_some() {\nsrc/image_generation.rs:34                 return cache.as_ref().unwrap();\nsrc/image_generation.rs:35             }\n                           ...\nsrc/image_generation.rs:32:53: 39:10 note: ...but borrowed value is only valid for the block suffix following statement 0 at 32:52\nsrc/image_generation.rs:32             let mut cache = self.image.borrow_mut();\nsrc/image_generation.rs:33             if cache.is_some() {\nsrc/image_generation.rs:34                 return cache.as_ref().unwrap();\nsrc/image_generation.rs:35             }\nsrc/image_generation.rs:36 \nsrc/image_generation.rs:37             let image = image::open(self.image_path).unwrap();\n                           ...\n</code></pre>\n\n<p>I think I understand why because the lifetime of <code>cache</code> is tied to <code>borrow_mut()</code>. </p>\n\n<p>Is there anyway to structure the code so that this works?</p>\n"}, {"tags": ["types", "rust", "idioms"], "answers": [{"comments": [{"owner": {"reputation": 1343, "user_id": 4365239, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/88acc4986ddaf51e21c254fb8c0f11b8?s=128&d=identicon&r=PG&f=1", "display_name": "tafia", "link": "https://stackoverflow.com/users/4365239/tafia"}, "edited": false, "score": 6, "creation_date": 1439861315, "post_id": 32059574, "comment_id": 52022703, "body": "It took me some time to understand. To me it looks more like defining several types at once: the Edge and the Node don&#39;t make sense out of the graph."}], "tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": false, "score": 42, "last_activity_date": 1518536486, "last_edit_date": 1518536486, "creation_date": 1439845129, "answer_id": 32059574, "question_id": 32059370, "link": "https://stackoverflow.com/questions/32059370/when-is-it-appropriate-to-use-an-associated-type-versus-a-generic-type/32059574#32059574", "title": "When is it appropriate to use an associated type versus a generic type?", "body": "<p>Associated types are a <em>grouping mechanism</em>, so they should be used when it makes sense to group types together.</p>\n\n<p>The <code>Graph</code> trait introduced in the documentation is an example of this. You want a <code>Graph</code> to be generic, but once you have a specific kind of <code>Graph</code>, you don't want the <code>Node</code> or <code>Edge</code> types to vary anymore. A particular <code>Graph</code> isn't going to want to vary those types within a single implementation, and in fact, wants them to always be the same. They're grouped together, or one might even say <em>associated</em>.</p>\n"}, {"comments": [{"owner": {"reputation": 1679, "user_id": 267874, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/007a9c64b82a001443ff463ef326366b?s=128&d=identicon&r=PG", "display_name": "Paul-Sebastian Manole", "link": "https://stackoverflow.com/users/267874/paul-sebastian-manole"}, "edited": false, "score": 6, "creation_date": 1536411326, "post_id": 32065644, "comment_id": 91419557, "body": "Let me try to simplify a bit:  <code>trait&#47;struct MyTrait&#47;MyStruct</code> allows exactly one <code>impl MyTrait for</code> or <code>impl MyStruct</code>.  <code>trait MyTrait&lt;Return&gt;</code> allows multiple <code>impl</code>s because it&#39;s generic. <code>Return</code> can be any type. Generic structs are the same."}, {"owner": {"reputation": 2147, "user_id": 848627, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6eea8dbe6666f342104c0e56c04e3a9a?s=128&d=identicon&r=PG", "display_name": "drojf", "link": "https://stackoverflow.com/users/848627/drojf"}, "edited": false, "score": 4, "creation_date": 1543368045, "post_id": 32065644, "comment_id": 93891108, "body": "I find your answer much easier to understand than the one in &quot;The Rust Programming Language&quot;"}, {"owner": {"reputation": 3201, "user_id": 5986907, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/0521ce05a7fcb2580e4f513990a5a8c8?s=128&d=identicon&r=PG&f=1", "display_name": "joel", "link": "https://stackoverflow.com/users/5986907/joel"}, "edited": false, "score": 0, "creation_date": 1575502116, "post_id": 32065644, "comment_id": 104592241, "body": "&quot;the first one enforces that for a given Self there is a single Return associated&quot;. This is true in the immediate sense, but one could of course work round this restriction by subclassing with a generic trait. Perhaps unicity can only be a suggestion, and not enforced"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 96, "last_activity_date": 1556322238, "last_edit_date": 1556322238, "creation_date": 1439881201, "answer_id": 32065644, "question_id": 32059370, "link": "https://stackoverflow.com/questions/32059370/when-is-it-appropriate-to-use-an-associated-type-versus-a-generic-type/32065644#32065644", "title": "When is it appropriate to use an associated type versus a generic type?", "body": "<p>This is now touched on in <a href=\"https://doc.rust-lang.org/book/ch19-03-advanced-traits.html#specifying-placeholder-types-in-trait-definitions-with-associated-types\" rel=\"noreferrer\">the second edition of <em>The Rust Programming Language</em></a>. However, let's dive in a bit in addition.</p>\n\n<p>Let us start with a simpler example.</p>\n\n<blockquote>\n  <p>When is it appropriate to use a trait method?</p>\n</blockquote>\n\n<p>There are multiple ways to provide <em>late binding</em>:</p>\n\n<pre><code>trait MyTrait {\n    fn hello_word(&amp;self) -&gt; String;\n}\n</code></pre>\n\n<p>Or:</p>\n\n<pre><code>struct MyTrait&lt;T&gt; {\n    t: T,\n    hello_world: fn(&amp;T) -&gt; String,\n}\n\nimpl&lt;T&gt; MyTrait&lt;T&gt; {\n    fn new(t: T, hello_world: fn(&amp;T) -&gt; String) -&gt; MyTrait&lt;T&gt;;\n\n    fn hello_world(&amp;self) -&gt; String {\n        (self.hello_world)(self.t)\n    }\n}\n</code></pre>\n\n<p>Disregarding any implementation/performance strategy, both excerpts above allow the user to specify in a dynamic manner how <code>hello_world</code> should behave.</p>\n\n<p>The one difference (semantically) is that the <code>trait</code> implementation guarantees that for a given type <code>T</code> implementing the <code>trait</code>, <code>hello_world</code> will always have the same behavior whereas the <code>struct</code> implementation allows having a different behavior on a per instance basis.</p>\n\n<p>Whether using a method is appropriate or not depends on the usecase!</p>\n\n<blockquote>\n  <p>When is it appropriate to use an associated type?</p>\n</blockquote>\n\n<p>Similarly to the <code>trait</code> methods above, an associated type is a form of late binding (though it occurs at compilation), allowing the user of the <code>trait</code> to specify for a given instance which type to substitute. It is not the only way (thus the question):</p>\n\n<pre><code>trait MyTrait {\n    type Return;\n    fn hello_world(&amp;self) -&gt; Self::Return;\n}\n</code></pre>\n\n<p>Or:</p>\n\n<pre><code>trait MyTrait&lt;Return&gt; {\n    fn hello_world(&amp;Self) -&gt; Return;\n}\n</code></pre>\n\n<p>Are equivalent to the late binding of methods above:</p>\n\n<ul>\n<li>the first one enforces that for a given <code>Self</code> there is a single <code>Return</code> associated</li>\n<li>the second one, instead, allows implementing <code>MyTrait</code> for <code>Self</code> for multiple <code>Return</code></li>\n</ul>\n\n<p>Which form is more appropriate depends on whether it makes sense to enforce unicity or not. For example:</p>\n\n<ul>\n<li><code>Deref</code> uses an associated type because without unicity the compiler would go mad during inference</li>\n<li><code>Add</code> uses an associated type because its author thought that given the two arguments there would be a logical return type</li>\n</ul>\n\n<p>As you can see, while <code>Deref</code> is an obvious usecase (technical constraint), the case of <code>Add</code> is less clear cut: maybe it would make sense for <code>i32 + i32</code> to yield either <code>i32</code> or <code>Complex&lt;i32&gt;</code> depending on the context? Nonetheless, the author exercised their judgment and decided that overloading the return type for additions was unnecessary.</p>\n\n<p>My personal stance is that there is no right answer. Still, beyond the unicity argument, I would mention that associated types make using the trait easier as they decrease the number of parameters that have to be specified, so in case the benefits of the flexibility of using a regular trait parameter are not obvious, I suggest starting with an associated type.</p>\n"}, {"tags": [], "owner": {"reputation": 2572, "user_id": 2630028, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/ddafbe2a8b6f8403f3d24482c9174f90?s=128&d=identicon&r=PG", "display_name": "solstice333", "link": "https://stackoverflow.com/users/2630028/solstice333"}, "is_accepted": false, "score": 0, "last_activity_date": 1608281426, "last_edit_date": 1608281426, "creation_date": 1608131904, "answer_id": 65326104, "question_id": 32059370, "link": "https://stackoverflow.com/questions/32059370/when-is-it-appropriate-to-use-an-associated-type-versus-a-generic-type/65326104#65326104", "title": "When is it appropriate to use an associated type versus a generic type?", "body": "<p>Associated types can be used to tell the compiler &quot;these two types between these two implementations are the same&quot;. Here's a double dispatch example that compiles, and is almost similar to how the standard library relates iterator to sum types:</p>\n<pre><code>trait MySum {\n    type Item;\n    fn sum&lt;I&gt;(iter: I)\n    where\n        I: MyIter&lt;Item = Self::Item&gt;;\n}\n\ntrait MyIter {\n    type Item;\n    fn next(&amp;self) {}\n    fn sum&lt;S&gt;(self)\n    where\n        S: MySum&lt;Item = Self::Item&gt;;\n}\n\nstruct MyU32;\n\nimpl MySum for MyU32 {\n    type Item = MyU32;\n\n    fn sum&lt;I&gt;(iter: I)\n    where\n        I: MyIter&lt;Item = Self::Item&gt;,\n    {\n        iter.next()\n    }\n}\n\nstruct MyVec;\n\nimpl MyIter for MyVec {\n    type Item = MyU32;\n    fn sum&lt;S&gt;(self)\n    where\n        S: MySum&lt;Item = Self::Item&gt;,\n    {\n        S::sum::&lt;Self&gt;(self)\n    }\n}\n\nfn main() {}\n\n</code></pre>\n<p>Also, <a href=\"https://blog.thomasheartman.com/posts/on-generics-and-associated-types\" rel=\"nofollow noreferrer\">https://blog.thomasheartman.com/posts/on-generics-and-associated-types</a> has some good information on this as well:</p>\n<blockquote>\n<p>In short, use generics when you want to type <code>A</code> to be able to implement a trait any number of times for different type parameters, such as in the case of the From trait.</p>\n</blockquote>\n<blockquote>\n<p>Use associated types if it makes sense for a type to only implement the trait once, such as with Iterator and Deref.</p>\n</blockquote>\n"}], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 14182, "favorite_count": 40, "accepted_answer_id": 32065644, "answer_count": 3, "score": 126, "last_activity_date": 1608281426, "creation_date": 1439844271, "last_edit_date": 1570838709, "question_id": 32059370, "link": "https://stackoverflow.com/questions/32059370/when-is-it-appropriate-to-use-an-associated-type-versus-a-generic-type", "title": "When is it appropriate to use an associated type versus a generic type?", "body": "<p>In <a href=\"https://stackoverflow.com/q/32053402/155423\">this question</a>, an issue arose that could be solved by changing an attempt at using a generic type parameter into an associated type. That prompted the question \"Why is an associated type more appropriate here?\", which made me want to know more.</p>\n\n<p>The <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0195-associated-items.md\" rel=\"noreferrer\">RFC that introduced associated types</a> says:</p>\n\n<blockquote>\n  <p>This RFC clarifies trait matching by:</p>\n  \n  <ul>\n  <li>Treating all trait type parameters as <em>input types</em>, and</li>\n  <li>Providing associated types, which are <em>output types</em>.</li>\n  </ul>\n</blockquote>\n\n<p>The RFC uses a graph structure as a motivating example, and this is also used in <a href=\"https://doc.rust-lang.org/book/ch19-03-advanced-traits.html#specifying-placeholder-types-in-trait-definitions-with-associated-types\" rel=\"noreferrer\">the documentation</a>, but I'll admit to not fully appreciating the benefits of the  the associated type version over the type-parameterized version. The primary thing is that the <code>distance</code> method doesn't need to care about the <code>Edge</code> type. This is nice, but seems a bit shallow of a reason for having associated types at all.</p>\n\n<p>I've found associated types to be pretty intuitive to use in practice, but I find myself struggling when deciding where and when I should use them in my own API.</p>\n\n<p>When writing code, when should I choose an associated type over a generic type parameter, and when should I do the opposite?</p>\n"}, {"tags": ["json", "rust", "serde"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 0, "last_activity_date": 1439830143, "creation_date": 1439830143, "answer_id": 32055715, "question_id": 32055452, "link": "https://stackoverflow.com/questions/32055452/whats-the-equivalent-of-rustc-serializejson-in-serde/32055715#32055715", "title": "What&#39;s the equivalent of rustc_serialize::Json in serde?", "body": "<p>Yes, it is <a href=\"https://serde-rs.github.io/serde/serde_json/serde_json/value/enum.Value.html\" rel=\"nofollow\"><code>Value</code></a>:</p>\n\n<pre><code>pub enum Value {\n    Null,\n    Bool(bool),\n    I64(i64),\n    U64(u64),\n    F64(f64),\n    String(String),\n    Array(Vec&lt;Value&gt;),\n    Object(BTreeMap&lt;String, Value&gt;),\n}\n</code></pre>\n\n<p>Compare to <a href=\"http://doc.rust-lang.org/rustc-serialize/rustc_serialize/json/enum.Json.html\" rel=\"nofollow\"><code>Json</code></a>:</p>\n\n<pre><code>pub enum Json {\n    I64(i64),\n    U64(u64),\n    F64(f64),\n    String(String),\n    Boolean(bool),\n    Array(Array),\n    Object(Object),\n    Null,\n}\n</code></pre>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user266003"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 290, "favorite_count": 0, "accepted_answer_id": 32055715, "answer_count": 1, "score": 0, "last_activity_date": 1538857458, "creation_date": 1439829291, "last_edit_date": 1538857458, "question_id": 32055452, "link": "https://stackoverflow.com/questions/32055452/whats-the-equivalent-of-rustc-serializejson-in-serde", "title": "What&#39;s the equivalent of rustc_serialize::Json in serde?", "body": "<p>Since the <a href=\"https://serde-rs.github.io/serde/serde_json/serde_json/index.html\" rel=\"nofollow\">serde library</a> is going to become a replacement of rustc_serialize, I'm trying to refactor my library to work with it. I can't figure out what the corresponding type of <code>rustc_serialize::Json</code> is. Suppose, I have a method which accepts json:</p>\n\n<pre><code>fn my_method(json123: rustc_serialize::json::Json) -&gt; ....\n</code></pre>\n\n<p>What's the corresponding <code>serde_json</code>? Is it this:</p>\n\n<pre><code>fn my_method(json123: serde_json::value::Value) -&gt; ....?\n</code></pre>\n\n<p>or this:</p>\n\n<pre><code>fn my_method(json123: serde_json::Serialize) -&gt; ....?\n</code></pre>\n\n<p>or something else?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1439823034, "post_id": 32053402, "comment_id": 52005795, "body": "Looks like a limitation of the compiler, you can probably work around it by playing around with <a href=\"https://doc.rust-lang.org/std/marker/struct.PhantomData.html#unused-type-parameters\" rel=\"nofollow noreferrer\">PhantomData</a>, adding a &quot;fake&quot; member <code>PhantomData&lt;*const U&gt;</code>, while you wait for a more definitive answer."}, {"owner": {"reputation": 260, "user_id": 3216180, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3d2a3c45b3213fccec32c5034a80f04d?s=128&d=identicon&r=PG", "display_name": "ebvalaim", "link": "https://stackoverflow.com/users/3216180/ebvalaim"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1439823946, "post_id": 32053402, "comment_id": 52006436, "body": "That helped, thanks. Although it would be nice to be able to use those structures without PhantomData ;)"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1439824476, "post_id": 32053402, "comment_id": 52006771, "body": "You&#39;re welcome :) I&#39;d really like to know if your code is supposed to be rejected or if it&#39;s a compiler bug..."}, {"owner": {"reputation": 260, "user_id": 3216180, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3d2a3c45b3213fccec32c5034a80f04d?s=128&d=identicon&r=PG", "display_name": "ebvalaim", "link": "https://stackoverflow.com/users/3216180/ebvalaim"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1439825704, "post_id": 32053402, "comment_id": 52007524, "body": "I&#39;ve found an issue on Github that looks similar (<a href=\"https://github.com/rust-lang/rust/issues/26283\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/26283</a>) and someone there seems to think that it&#39;s a limitation of the compiler, but I&#39;m not sure if that&#39;s really the same..."}], "answers": [{"comments": [{"owner": {"reputation": 429, "user_id": 5081997, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-GmesG-HGk2A/AAAAAAAAAAI/AAAAAAAACLI/lmInTd8OR3A/photo.jpg?sz=128", "display_name": "cotigao", "link": "https://stackoverflow.com/users/5081997/cotigao"}, "edited": false, "score": 0, "creation_date": 1545824253, "post_id": 32055800, "comment_id": 94703532, "body": "as of 1.31.1, we need to add <code>Sized</code>  bound on <code>Self</code>; <code>pub trait Generable where Self:Sized { ...</code>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 8, "last_activity_date": 1545836037, "last_edit_date": 1545836037, "creation_date": 1439830487, "answer_id": 32055800, "question_id": 32053402, "link": "https://stackoverflow.com/questions/32053402/why-am-i-getting-parameter-is-never-used-e0392/32055800#32055800", "title": "Why am I getting &quot;parameter is never used [E0392]&quot;?", "body": "<p>I don't believe you want another generic here, <a href=\"https://stackoverflow.com/q/32059370/155423\">you want an <em>associated type</em></a>:</p>\n\n<pre><code>pub trait Generable {\n    type From;\n    fn generate_children(&amp;self, data: &amp;Self::From) -&gt; Vec&lt;Option&lt;Self&gt;&gt;\n    where\n        Self: Sized;\n}\n\npub enum Octree&lt;T&gt;\nwhere\n    T: Generable,\n{\n    Node {\n        data: T,\n        children: Vec&lt;Box&lt;Octree&lt;T&gt;&gt;&gt;,\n    },\n    Empty,\n    Uninitialized,\n}\n\nfn main() {}\n</code></pre>\n\n<p>As an aside, <code>Vec&lt;Box&lt;Octree&lt;T&gt;&gt;&gt;</code> is probably one level extra of indirection \u2014 you can just use <code>Vec&lt;Octree&lt;T&gt;&gt;</code>.</p>\n"}], "owner": {"reputation": 260, "user_id": 3216180, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3d2a3c45b3213fccec32c5034a80f04d?s=128&d=identicon&r=PG", "display_name": "ebvalaim", "link": "https://stackoverflow.com/users/3216180/ebvalaim"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1275, "favorite_count": 1, "accepted_answer_id": 32055800, "answer_count": 1, "score": 11, "last_activity_date": 1545836037, "creation_date": 1439822872, "last_edit_date": 1505493535, "question_id": 32053402, "link": "https://stackoverflow.com/questions/32053402/why-am-i-getting-parameter-is-never-used-e0392", "title": "Why am I getting &quot;parameter is never used [E0392]&quot;?", "body": "<p>I'm trying to implement an Octree in Rust. The Octree is generic over a type with a constraint that it should implement a generic trait:</p>\n\n<pre><code>pub trait Generable&lt;U&gt; {\n    fn generate_children(&amp;self, data: &amp;U) -&gt; Vec&lt;Option&lt;Self&gt;&gt;;\n}\n\npub enum Octree&lt;T, U&gt;\nwhere\n    T: Generable&lt;U&gt;,\n{\n    Node {\n        data: T,\n        children: Vec&lt;Box&lt;Octree&lt;T, U&gt;&gt;&gt;,\n    },\n    Empty,\n    Uninitialized,\n}\n</code></pre>\n\n<p>Here is a <a href=\"https://play.rust-lang.org/?gist=1dc357caf8bd488da4ae9ed169324c30&amp;version=stable\" rel=\"nofollow noreferrer\">simplified example reproducing the issue on the Playground</a></p>\n\n<p>This generates an error: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0392]: parameter `U` is never used\n --&gt; src/main.rs:5:20\n  |\n5 | pub enum Octree&lt;T, U&gt;\n  |                    ^ unused type parameter\n  |\n  = help: consider removing `U` or using a marker such as `std::marker::PhantomData`\n</code></pre>\n\n<p>Removing the <code>U</code> from the signature results in \"undeclared type name 'U'\".</p>\n\n<p>Am I doing something wrong or is it a bug? How to do this properly?</p>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 2442, "user_id": 1364327, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/08dd145367a0f55343deb60db7306549?s=128&d=identicon&r=PG", "display_name": "petrbel", "link": "https://stackoverflow.com/users/1364327/petrbel"}, "edited": false, "score": 0, "creation_date": 1439798130, "post_id": 32044932, "comment_id": 51990400, "body": "Thanks for answer, I intended to make a fix-sized 2D array of bools. I need max. access speed hence I tried regular array as C/C++ uses. Is <code>Vec</code>fast?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 2442, "user_id": 1364327, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/08dd145367a0f55343deb60db7306549?s=128&d=identicon&r=PG", "display_name": "petrbel", "link": "https://stackoverflow.com/users/1364327/petrbel"}, "edited": false, "score": 1, "creation_date": 1439798363, "post_id": 32044932, "comment_id": 51990519, "body": "If you want a fixed-sized array, use a fixed size array (like <code>[bool; 32]</code>).  <code>Vec</code> is just a dynamically sized, contiguous array, just like <code>std::vector</code> in C++.  Something like <code>[bool]</code> in Rust has <i>no</i> equivalent in C/C++; it&#39;s not representable in those languages at all.  Raw arrays like <code>bool []</code> don&#39;t <i>have</i> an exact equivalent in Rust, because they&#39;re fundamentally unsafe.  The closest would be borrowed arrays like <code>&amp;[bool]</code>.  But really, just use <code>Vec</code> unless profiling shows it as a problem."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1439815315, "post_id": 32044932, "comment_id": 52000669, "body": "If you&#39;re worried about speed, you shouldn&#39;t be using double indirection. <a href=\"http://is.gd/SC0eNa\" rel=\"nofollow noreferrer\">Try flattening it.</a> If using fixed-length stack arrays this won&#39;t matter, though."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 5, "last_activity_date": 1439796645, "creation_date": 1439796645, "answer_id": 32044932, "question_id": 32044743, "link": "https://stackoverflow.com/questions/32044743/how-to-use-generic-vecdeque/32044932#32044932", "title": "How to use generic VecDeque?", "body": "<p>The basic problem is that <code>[[bool]]</code> <em>makes no sense</em>.  <code>[bool]</code> is <a href=\"http://doc.rust-lang.org/book/unsized-types.html\">dynamically sized</a>, and you can't have an array of dynamically sized values, so <code>[[bool]]</code> is just impossible.</p>\n\n<p>It's not entirely clear what you're trying to accomplish here.  The most obvious solution would be to just use <code>Vec</code> instead:</p>\n\n<pre><code>pub struct MyStruct {\n    queue: VecDeque&lt;Vec&lt;Vec&lt;bool&gt;&gt;&gt;,\n}\n</code></pre>\n\n<p>As for your \"even more weird error\", that suggests to me that you haven't read the <a href=\"http://doc.rust-lang.org/book/\">Rust Book</a>, specifically the <a href=\"http://doc.rust-lang.org/book/lifetimes.html\">chapter on Lifetimes</a>.  In order to write a structure containing borrowed pointers, you <em>have</em> to specify lifetimes.</p>\n"}], "owner": {"reputation": 2442, "user_id": 1364327, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/08dd145367a0f55343deb60db7306549?s=128&d=identicon&r=PG", "display_name": "petrbel", "link": "https://stackoverflow.com/users/1364327/petrbel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 502, "favorite_count": 0, "accepted_answer_id": 32044932, "answer_count": 1, "score": 0, "last_activity_date": 1439813819, "creation_date": 1439795986, "last_edit_date": 1439813819, "question_id": 32044743, "link": "https://stackoverflow.com/questions/32044743/how-to-use-generic-vecdeque", "title": "How to use generic VecDeque?", "body": "<p>Basically I need to make a structure that contains a <code>VecDeque</code> of <code>State</code>s. My code so far:</p>\n\n<pre><code>type State = [[bool]];\npub struct MyStruct {\n    queue: VecDeque&lt;State&gt;,\n}\nimpl MyStruct {...}\n</code></pre>\n\n<p>When compiling this code I end with</p>\n\n<pre><code>error: the trait `core::marker::Sized` is not implemented for the type `[[bool]]` [E0277]\nnote: `[[bool]]` does not have a constant size known at compile-time\n</code></pre>\n\n<p>I suppose that having <code>State</code> in the queue isn't good idea at all, so I tried a queue of references (which also fits into my application).</p>\n\n<pre><code>type State = [[bool]];\npub struct MyStruct {\n    queue: VecDeque&lt;&amp;State&gt;,\n}\nimpl MyStruct {...}\n</code></pre>\n\n<p>In this case, even more weird error occures:</p>\n\n<pre><code>error: missing lifetime specifier [E0106]\n</code></pre>\n\n<p>How to create such a structure in order to work the way I wrote above? I'm really not a Rust expert.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 8, "last_activity_date": 1439794852, "creation_date": 1439794852, "answer_id": 32044469, "question_id": 32044301, "link": "https://stackoverflow.com/questions/32044301/cannot-pass-self-as-callback-parameter-due-to-double-borrowing/32044469#32044469", "title": "Cannot pass self as callback parameter due to double borrowing", "body": "<p>The simplest solution is to break the callback out from <code>self</code>, like so:</p>\n\n<pre><code>let callback = self.click_callback.take();\nif let Some(ref mut c) = callback {\n    c(self);\n}\nself.click_callback = callback;\nself\n</code></pre>\n\n<p>This temporarily replaces <code>click_callback</code> with <code>None</code>, hence why you have to put it back when you're done.</p>\n"}], "owner": {"reputation": 71, "user_id": 5233891, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/be2c01767764657737434408461f2c2a?s=128&d=identicon&r=PG", "display_name": "Stents", "link": "https://stackoverflow.com/users/5233891/stents"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 298, "favorite_count": 0, "answer_count": 1, "score": 7, "last_activity_date": 1439794852, "creation_date": 1439794232, "question_id": 32044301, "link": "https://stackoverflow.com/questions/32044301/cannot-pass-self-as-callback-parameter-due-to-double-borrowing", "title": "Cannot pass self as callback parameter due to double borrowing", "body": "<p>I'm trying to call closure that was saved inside a struct but I'd also like to pass the struct as an argument to the closure. Here's the specific piece of code.</p>\n\n<pre><code>pub fn react(&amp;mut self) -&gt; &amp;mut Button {\n   if let Some(ref mut c) = self.click_callback {\n            c(self);\n    }\n    self\n}\n</code></pre>\n\n<p>Note that self is a <code>Button</code> and <code>self.click_callback</code> is an <code>Option&lt;Box&lt;Fn(&amp;mut Button)&gt;&gt;</code></p>\n\n<p>So from what I understand the \"if let\" borrows self until its scopes ends, but then when I try to pass self as an argument it attempts to borrow it again. Is there anything specific I can do that will avoid this double borrow attempt?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1439793725, "post_id": 32043442, "comment_id": 51988245, "body": "This looks more like a code review than a question. (1) I suppose the question is &quot;Is there any allocation in <code>preemphasis_mut</code>?&quot; and (2) can only wonder at what you mean by &quot;consume itself&quot;?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1439815163, "post_id": 32043442, "comment_id": 52000574, "body": "I agree that this could also be asked on <a href=\"http://codereview.stackexchange.com\">Code Review</a>, but make sure you read <a href=\"http://meta.codereview.stackexchange.com/questions/5777/a-guide-to-code-review-for-stack-overflow-users\">the guidelines for Stack Overflow users</a> as the rules there are slightly different. Namely, you should have the whole program, not just snippets."}, {"owner": {"reputation": 1386, "user_id": 778774, "user_type": "registered", "accept_rate": 38, "profile_image": "https://www.gravatar.com/avatar/6cc560392a27c4987c435120292aed27?s=128&d=identicon&r=PG", "display_name": "acsmith", "link": "https://stackoverflow.com/users/778774/acsmith"}, "edited": false, "score": 0, "creation_date": 1439822058, "post_id": 32043442, "comment_id": 52005134, "body": "&quot;consumed&quot; was not quite the right word\u2014should have really been &quot;moved.&quot; But I see now (in the morning) that passing a borrowed reference as <code>&amp;self</code> to the function ensures that it won&#39;t be moved."}, {"owner": {"user_type": "does_not_exist", "display_name": "user246672"}, "edited": false, "score": 0, "creation_date": 1538432764, "post_id": 32043442, "comment_id": 92133905, "body": "I just ran into this problem writing a lexer with <code>peek_token</code> and <code>next_token</code> methods. I&#39;m stumped for now."}], "answers": [{"comments": [{"owner": {"reputation": 1386, "user_id": 778774, "user_type": "registered", "accept_rate": 38, "profile_image": "https://www.gravatar.com/avatar/6cc560392a27c4987c435120292aed27?s=128&d=identicon&r=PG", "display_name": "acsmith", "link": "https://stackoverflow.com/users/778774/acsmith"}, "edited": false, "score": 0, "creation_date": 1439821954, "post_id": 32050750, "comment_id": 52005066, "body": "Thanks, this helps. (And I realized that I don&#39;t really want &quot;_mut&quot; sprinkled over all my method calls anyway.)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1386, "user_id": 778774, "user_type": "registered", "accept_rate": 38, "profile_image": "https://www.gravatar.com/avatar/6cc560392a27c4987c435120292aed27?s=128&d=identicon&r=PG", "display_name": "acsmith", "link": "https://stackoverflow.com/users/778774/acsmith"}, "edited": false, "score": 0, "creation_date": 1439830628, "post_id": 32050750, "comment_id": 52010489, "body": "@acsmith to be fair, there <i>are</i> method pairs that are <code>foo</code> and <code>foo_mut</code>, but those usually give different views <i>into</i> an object, not change how the method works. <code>iter</code> and <code>iter_mut</code> are prime examples."}, {"owner": {"reputation": 1386, "user_id": 778774, "user_type": "registered", "accept_rate": 38, "profile_image": "https://www.gravatar.com/avatar/6cc560392a27c4987c435120292aed27?s=128&d=identicon&r=PG", "display_name": "acsmith", "link": "https://stackoverflow.com/users/778774/acsmith"}, "edited": false, "score": 0, "creation_date": 1439832237, "post_id": 32050750, "comment_id": 52011328, "body": "yes, that&#39;s the model I was looking at initially, but I see the difference between this and Ruby&#39;s ! now. Thanks."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1439815411, "creation_date": 1439815411, "answer_id": 32050750, "question_id": 32043442, "link": "https://stackoverflow.com/questions/32043442/mutating-and-non-mutating-method-chains/32050750#32050750", "title": "Mutating and non-mutating method chains", "body": "<p>I have not seen any libraries follow any patterns similar to Ruby's <code>foo</code> and <code>foo!</code> method pairs when it comes to self mutation. I believe this mostly to be because Rust places mutability front-and-center, so it's much more difficult to \"accidentally\" mutate something. To that end, I would probably drop one of your methods and allow the user to decide when something should be mutated:</p>\n\n<pre><code>use std::f64::consts::PI;\n\ntrait Filter {\n    fn preemphasis&lt;'a&gt;(&amp;'a mut self, freq: f64, sample_rate: f64) -&gt; &amp;'a mut Self;\n}\n\nimpl Filter for Vec&lt;f64&gt; {\n    fn preemphasis&lt;'a&gt;(&amp;'a mut self, freq: f64, sample_rate: f64) -&gt; &amp;'a mut Self {\n        let filter = (-2.0 * PI * freq / sample_rate).exp();\n        for i in (1..self.len()).rev() {\n            self[i] -= self[i-1] * filter;\n        };\n        self\n    }\n}\n\nfn main() {\n    let mut sample = vec![1.0, 2.0];\n    // this copies then mutates, with one allocation\n    let mut copy_of_sample = sample.clone();\n    copy_of_sample\n        .preemphasis(75.0, 44100.0); \n    // this mutates in-place, with no allocations\n    sample\n        .preemphasis(75.0, 44100.0); \n    // this mutates twice in a row, with no allocations\n    copy_of_sample\n        .preemphasis(75.0, 44100.0)\n        .preemphasis(150.0, 44100.0);\n}\n</code></pre>\n\n<p>I think a key thing here is that the <em>caller</em> of the code can easily see when something will be mutated (because of the <code>&amp;mut</code> reference to <code>self</code>). The <em>caller</em> also gets to determine when and where the <code>clone</code> happens.</p>\n"}], "owner": {"reputation": 1386, "user_id": 778774, "user_type": "registered", "accept_rate": 38, "profile_image": "https://www.gravatar.com/avatar/6cc560392a27c4987c435120292aed27?s=128&d=identicon&r=PG", "display_name": "acsmith", "link": "https://stackoverflow.com/users/778774/acsmith"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 156, "favorite_count": 0, "accepted_answer_id": 32050750, "answer_count": 1, "score": 1, "last_activity_date": 1439815411, "creation_date": 1439789990, "question_id": 32043442, "link": "https://stackoverflow.com/questions/32043442/mutating-and-non-mutating-method-chains", "title": "Mutating and non-mutating method chains", "body": "<p>I have two functions, which I'm hoping to use in method chains. They both do basically the same thing, except that one of them overwrites itself and another returns a clone. I'm coming from Ruby, and I'm used to just calling <code>self.dup.mutable_method</code> in the destructive method.</p>\n\n<p>I believe I have a solution worked out in Rust, but I'm not sure whether it has an extra allocation going on in there somewhere, and I'm afraid that it'll consume itself. This is audio DSP code, so I want to make sure that there are no allocations in the mutable method. (I'm three days into Rust, so mea culpa for the non-generalized trait impls.)</p>\n\n<pre><code>impl Filter for DVec&lt;f64&gt; {\n    fn preemphasis_mut&lt;'a&gt;(&amp;'a mut self, freq: f64, sample_rate: f64) -&gt; &amp;'a mut DVec&lt;f64&gt; {\n        let filter = (-2.0 * PI * freq / sample_rate).exp();\n        for i in (1..self.len()).rev() {\n            self[i] -= self[i-1] * filter;\n        };\n        self\n    }\n\n    fn preemphasis(&amp;self, freq: f64, sample_rate: f64) -&gt; DVec&lt;f64&gt; {\n        let mut new = self.clone();\n        new.preemphasis_mut(freq, sample_rate);\n        new\n    }\n}\n\n\n// Ideal code:\nlet mut sample: DVec&lt;f64&gt; = method_that_loads_sample();\nlet copy_of_sample = sample.preemphasis(75.0, 44100.0); // this mutates and copies, with one allocation\nsample.preemphasis_mut(75.0, 44100.0); // this mutates in-place, with no allocations\ncopy_of_sample.preemphasis_mut(75.0, 44100.0)\n    .preemphasis_mut(150.0, 44100.0); // this mutates twice in a row, with no allocations\n</code></pre>\n"}, {"tags": ["recursion", "rust"], "comments": [{"owner": {"reputation": 29735, "user_id": 294884, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/f8675693dfeb3908195657eb3a3fdda4?s=128&d=identicon&r=PG", "display_name": "Fattie", "link": "https://stackoverflow.com/users/294884/fattie"}, "edited": false, "score": 4, "creation_date": 1439772314, "post_id": 32041358, "comment_id": 51983124, "body": "Today&#39;s awesome question title."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1439773592, "post_id": 32041358, "comment_id": 51983346, "body": "Note that you aren&#39;t actually doing any recursion - you even state you are deliberately avoiding recursion (for valid reasons)."}, {"owner": {"reputation": 1345, "user_id": 29442, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/11f07822e8b5a23d3c58e3fb4cb57cd6?s=128&d=identicon&r=PG", "display_name": "Hannes Landeholm", "link": "https://stackoverflow.com/users/29442/hannes-landeholm"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1439774503, "post_id": 32041358, "comment_id": 51983530, "body": "@Shepmaster: A loop is just a less pure (imperative) way to express a recursive algorithm."}], "answers": [{"comments": [{"owner": {"reputation": 1345, "user_id": 29442, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/11f07822e8b5a23d3c58e3fb4cb57cd6?s=128&d=identicon&r=PG", "display_name": "Hannes Landeholm", "link": "https://stackoverflow.com/users/29442/hannes-landeholm"}, "edited": false, "score": 0, "creation_date": 1439773956, "post_id": 32041405, "comment_id": 51983423, "body": "The initial explanation was not needed but helpful for people reading this question. The combination of borrowed and owned memory made this tricky. The &quot;simplest&quot; fix you provided (own all the memory) is obviously ugly due to the unnecessary string copy. The Cow solution was definitely what I was looking for, thanks."}, {"owner": {"reputation": 2715, "user_id": 612512, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/bb7101e3af8cd635dbbb891055675534?s=128&d=identicon&r=PG", "display_name": "Christopher Stevenson", "link": "https://stackoverflow.com/users/612512/christopher-stevenson"}, "edited": false, "score": 0, "creation_date": 1439789429, "post_id": 32041405, "comment_id": 51986662, "body": "So, in this case, what is Cow&#39;s generic type set to? <code>str</code>?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1439793357, "post_id": 32041405, "comment_id": 51988063, "body": "<i>The &quot;simplest&quot; fix you provided (own all the memory) is obviously ugly due to the unnecessary string copy</i> =&gt; Which copy? Beware of bringing your own preconceived notions in Rust, its use of move semantics <i>by default</i> is very much unlike any other language."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2715, "user_id": 612512, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/bb7101e3af8cd635dbbb891055675534?s=128&d=identicon&r=PG", "display_name": "Christopher Stevenson", "link": "https://stackoverflow.com/users/612512/christopher-stevenson"}, "edited": false, "score": 0, "creation_date": 1439813690, "post_id": 32041405, "comment_id": 51999622, "body": "@ChristopherStevenson yes. You can verify this for yourself by tweaking the code to be <code>let mut im: () = Cow::Borrowed(s)</code>. This causes a type error that allows you to see what type was expected."}, {"owner": {"reputation": 1345, "user_id": 29442, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/11f07822e8b5a23d3c58e3fb4cb57cd6?s=128&d=identicon&r=PG", "display_name": "Hannes Landeholm", "link": "https://stackoverflow.com/users/29442/hannes-landeholm"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1439824955, "post_id": 32041405, "comment_id": 52007084, "body": "@MatthieuM. You can&#39;t arbitrarily/magically take ownership of a string without copying it. My experience from implementing a language similar to rust (aka. &quot;preconceived notions&quot;), allows me to just know such things. You can look at the to_string() implementation yourself if you don&#39;t believe me. <a href=\"https://doc.rust-lang.org/src/collections/string.rs.html#1046\" rel=\"nofollow noreferrer\">doc.rust-lang.org/src/collections/string.rs.html#1046</a>"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 1345, "user_id": 29442, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/11f07822e8b5a23d3c58e3fb4cb57cd6?s=128&d=identicon&r=PG", "display_name": "Hannes Landeholm", "link": "https://stackoverflow.com/users/29442/hannes-landeholm"}, "edited": false, "score": 1, "creation_date": 1439828951, "post_id": 32041405, "comment_id": 52009509, "body": "@HannesLandeholm: We may be suffering from language issues here, so I&#39;ll try to explain as best as I can... <code>to_string</code> is not about copying, it&#39;s about transforming: it transforms a <code>&amp;str</code> (a slice into an existing buffer) into a <code>String</code> (an autonomous type holding onto a dynamically allocated buffer). You can move a <code>&amp;str</code> without copying its content, you can move a <code>String</code> without copying its content, you can create a <code>&amp;str</code> pointing into a <code>String</code> buffer without copying its content... but you cannot create a <code>String</code> from a <code>&amp;str</code> without copying its content..."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1439829122, "post_id": 32041405, "comment_id": 52009619, "body": "... still, that&#39;s only 1 operation out of 4 that requires copying; all the others are cheap O(1) operations with no dynamic memory allocation (no matter the length of the content). So, yes, Rust does achieve moving without copying; I am not surprised you did not succeed previously, it&#39;s complicated, and Rust is maybe the first language implementing such complex tracking at compile-time (I know of no prior art for the Borrow Checker, only Region Management which is far from equivalent)."}, {"owner": {"reputation": 1345, "user_id": 29442, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/11f07822e8b5a23d3c58e3fb4cb57cd6?s=128&d=identicon&r=PG", "display_name": "Hannes Landeholm", "link": "https://stackoverflow.com/users/29442/hannes-landeholm"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1439840137, "post_id": 32041405, "comment_id": 52015430, "body": "@MatthieuM. You claimed that to_string() did not copy memory. Where you right or wrong? Also I&#39;m not going to go into a debate about semantics with you. I was <i>not</i> referring to moving ownership, I was referring to magically taking ownership of borrowed data. FYI, region based memory management is basically the same thing."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 1345, "user_id": 29442, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/11f07822e8b5a23d3c58e3fb4cb57cd6?s=128&d=identicon&r=PG", "display_name": "Hannes Landeholm", "link": "https://stackoverflow.com/users/29442/hannes-landeholm"}, "edited": false, "score": 1, "creation_date": 1439878444, "post_id": 32041405, "comment_id": 52027313, "body": "@HannesLandeholm: Ah! So that was my misunderstanding. I never tried to claim that <code>to_string</code> was not copying the content, however when you spoke of a &quot;string copy&quot; I thought that you were referring to a &quot;copy&quot; as in a duplication of an existing object (<code>String</code>, here). I did not think that using <code>to_string</code> in transform could be an issue seeing as you were yourself using it in <code>apply</code>... well, apologies for derailing the conversation :x"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 1345, "user_id": 29442, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/11f07822e8b5a23d3c58e3fb4cb57cd6?s=128&d=identicon&r=PG", "display_name": "Hannes Landeholm", "link": "https://stackoverflow.com/users/29442/hannes-landeholm"}, "edited": false, "score": 1, "creation_date": 1439878490, "post_id": 32041405, "comment_id": 52027330, "body": "@HannesLandeholm: Back on topic, having <code>transform</code> and <code>apply</code> taking a <code>String</code> parameter instead of a <code>&amp;str</code> one could be more efficient as they could grow the buffer of <code>String</code> in place rather than allocation new buffers each time."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1439773483, "last_edit_date": 1439773483, "creation_date": 1439772788, "answer_id": 32041405, "question_id": 32041358, "link": "https://stackoverflow.com/questions/32041358/idiomatic-ownership-management-of-mutating-state-during-arbitrary-recursion-in-r/32041405#32041405", "title": "Idiomatic ownership management of mutating state during arbitrary recursion in Rust", "body": "<p>Check your method, and ask \"who owns the string when the loop iteration ends?\":</p>\n\n<pre><code>fn transform(s: &amp;str) -&gt; String {\n    let mut im = s;\n    loop {\n        let (im_s, done) = apply(im);\n        if done {\n            return im_s;\n        }\n        im = &amp;im_s\n    }\n}\n</code></pre>\n\n<p><code>im_s</code> owns the string, and then you take a reference to it. When the loop ends - <em>nothing owns the string</em>. That means that it will be dropped, which makes all existing references invalid. Since a dangling reference would allow you to break Rust memory safety guarantees, it's not allowed and you get the error you see.</p>\n\n<p>The simplest fix is to simply always promote the input to a <code>String</code>:</p>\n\n<pre><code>fn transform(s: &amp;str) -&gt; String {\n    let mut im = s.to_string();\n    loop {\n        let (im_new, done) = apply(&amp;im);\n        im = im_new;\n        if done {\n            return im;\n        }\n    }\n}\n</code></pre>\n\n<p>Another fix is to use the delightfully-named <a href=\"http://doc.rust-lang.org/std/borrow/enum.Cow.html\" rel=\"nofollow\"><code>Cow</code></a> enum. This allows you to have either an owned or borrowed type:</p>\n\n<pre><code>use std::borrow::Cow;\n\nfn transform(s: &amp;str) -&gt; String {\n    let mut im = Cow::Borrowed(s);\n    loop {\n        let (im_new, done) = apply(&amp;im);\n        im = Cow::Owned(im_new);\n        if done { break }\n    }\n    im.into_owned()\n}\n</code></pre>\n"}], "owner": {"reputation": 1345, "user_id": 29442, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/11f07822e8b5a23d3c58e3fb4cb57cd6?s=128&d=identicon&r=PG", "display_name": "Hannes Landeholm", "link": "https://stackoverflow.com/users/29442/hannes-landeholm"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 131, "favorite_count": 0, "accepted_answer_id": 32041405, "answer_count": 1, "score": 3, "last_activity_date": 1439776174, "creation_date": 1439772220, "last_edit_date": 1439772880, "question_id": 32041358, "link": "https://stackoverflow.com/questions/32041358/idiomatic-ownership-management-of-mutating-state-during-arbitrary-recursion-in-r", "title": "Idiomatic ownership management of mutating state during arbitrary recursion in Rust", "body": "<p>I've just started playing around with Rust. I find it's ownership system really useful but I have a hard time understanding how to use it with arbitrary recursion, especially since Rust lacks guaranteed tail call optimisation.</p>\n\n<p>Consider a function apply with the signature <code>apply(&amp;str) -&gt; (String, bool)</code>. It takes a string and deterministically returns a new string. For the purpose of this question we leave the implementation undefined. The function also returns a bool indicating \"completion\". We need to keep calling the function with the string it returns until the bool indicates completion. It is undefined how many calls it takes for us to get to completion. It could be 1, it could also be 1000000.</p>\n\n<p>Since Rust does not have tail calls, doing this recursively would allocate an O(n) stack which could cause OOM. Since we can throw away the old string after the function has returned the new string, we only need constant memory. Therefore we need to do it in a loop:</p>\n\n<pre><code>fn apply(s: &amp;str) -&gt; (String, bool) {\n    return (\"xyz\".to_string(), true); // Undefined implementation.\n}\n\nfn transform(s: &amp;str) -&gt; String {\n    let mut im = s;\n    loop {\n        let (im_s, done) = apply(im);\n        if done {\n            return im_s;\n        }\n        im = &amp;im_s\n    }\n}\n</code></pre>\n\n<p>However, compiling this will give the error <code>im_s does not live long enough</code>. Do I need to use some sort of runtime ownership checking or heap allocation mechanism to make this compile?</p>\n"}, {"tags": ["function", "rust"], "answers": [{"comments": [{"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "edited": false, "score": 5, "creation_date": 1439763027, "post_id": 32040395, "comment_id": 51981378, "body": "To complement the answer: <code>PathBuf</code> is to <code>&amp;Path</code> what <code>String</code> is to <code>&amp;str</code>. If you grasp the <code>String</code>/<code>&amp;str</code> dichotomy, this may help you understand why returning the <code>PathBuf</code> is the right thing here."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "edited": false, "score": 0, "creation_date": 1439763165, "post_id": 32040395, "comment_id": 51981410, "body": "Great point, @mdup! Rust has lots of these paired owned / borrowed types. <code>Vec&lt;T&gt;</code> and <code>&amp;[T]</code> is another common one you will see quickly when starting Rust."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 9, "last_activity_date": 1439764094, "last_edit_date": 1439764094, "creation_date": 1439762731, "answer_id": 32040395, "question_id": 32040312, "link": "https://stackoverflow.com/questions/32040312/how-do-you-return-non-copyable-types/32040395#32040395", "title": "How do you return non-copyable types?", "body": "<p>You return a value by... well <em>returning it</em>. However, your signature shows that you are trying to return a <strong>reference to a value</strong>. You can't do that when the object will be dropped at the end of the block because the reference would become invalid.</p>\n\n<p>In your case, I'd probably write something like</p>\n\n<pre><code>#![feature(fs_walk)]\n\nuse std::fs;\nuse std::path::{Path, PathBuf};\n\nfn get_files(path: &amp;Path) -&gt; Vec&lt;PathBuf&gt; { \n    let contents = fs::walk_dir(path).unwrap(); \n    contents.filter_map(|i| {\n        i.ok().map(|p| p.path())\n    }).collect()\n}\n\nfn main() {\n    for f in get_files(Path::new(\"/etc\")) {\n        println!(\"{:?}\", f);\n    }\n}\n</code></pre>\n\n<p>The main thing is that the function returns a <code>Vec&lt;PathBuf&gt;</code> \u2014 a collection of a type that <em>owns</em> the path, and are more than just references into someone else's memory.</p>\n\n<p>In your code, you do <code>let p = val.as_path()</code>. Here, <code>val</code> is a <a href=\"http://doc.rust-lang.org/std/path/struct.PathBuf.html\" rel=\"noreferrer\"><code>PathBuf</code></a>. Then you call <code>as_path</code>, which is defined as: <code>fn as_path(&amp;self) -&gt; &amp;Path</code>. This means that given a reference to a <code>PathBuf</code>, you can get a reference to a <code>Path</code> <em>that will live as long as the <code>PathBuf</code> will</em>. However, you are trying to keep that reference around longer than <code>vec</code> will exist, as it will be dropped at the end of the iteration.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1439820968, "post_id": 32044324, "comment_id": 52004413, "body": "I don&#39;t believe you can return a <code>Path</code> in this case. The <code>walk_dir</code> iterator owns a <code>PathBuf</code> and can transfer it via <code>path()</code>, but <code>Path</code> is a reference, much like <code>str</code>, and is usually used as <code>&amp;Path</code>. You can&#39;t have a <code>Vec&lt;str&gt;</code>, so I don&#39;t think you can have a <code>Vec&lt;Path&gt;</code>."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1439821801, "post_id": 32044324, "comment_id": 52004956, "body": "@Shepmaster: That&#39;s what the doc suggests, indeed! (I&#39;ve never used it personally)."}, {"owner": {"reputation": 645, "user_id": 691501, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/9c500f75da005f5dee02918df1286189?s=128&d=identicon&r=PG", "display_name": "CalMlynarczyk", "link": "https://stackoverflow.com/users/691501/calmlynarczyk"}, "edited": false, "score": 0, "creation_date": 1439827647, "post_id": 32044324, "comment_id": 52008715, "body": "@MatthieuM. I&#39;m setting a bad example by using it in my code; it&#39;s technically an <a href=\"http://doc.rust-lang.org/std/fs/fn.walk_dir.html\" rel=\"nofollow noreferrer\">unstable API</a>."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 645, "user_id": 691501, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/9c500f75da005f5dee02918df1286189?s=128&d=identicon&r=PG", "display_name": "CalMlynarczyk", "link": "https://stackoverflow.com/users/691501/calmlynarczyk"}, "edited": false, "score": 0, "creation_date": 1439829261, "post_id": 32044324, "comment_id": 52009691, "body": "@CalMlynarczyk: unstable does not mean bad! It just means subject to arbitrary changes :)"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 3, "last_activity_date": 1439821811, "last_edit_date": 1439821811, "creation_date": 1439794312, "answer_id": 32044324, "question_id": 32040312, "link": "https://stackoverflow.com/questions/32040312/how-do-you-return-non-copyable-types/32044324#32044324", "title": "How do you return non-copyable types?", "body": "<p><strong>How do you return non-copyable types?</strong></p>\n\n<p>By value.</p>\n\n<pre><code>fn make() -&gt; String { \"Hello, World!\".into() }\n</code></pre>\n\n<hr>\n\n<p>There is a disconnect between:</p>\n\n<ul>\n<li>the language semantics</li>\n<li>the implementation details</li>\n</ul>\n\n<p>Semantically, returning by value is <em>moving</em> the object, not copying it. In Rust, any object is movable and, optionally, may also be Clonable (implement <code>Clone</code>) and Copyable (implement <code>Clone</code> and <code>Copy</code>).</p>\n\n<p>That the implementation of copying or moving uses a <code>memcpy</code> under the hood is a detail that does not affect the semantics, only performance. Furthermore, this being an implementation detail means that it can be optimized away without affecting the semantics, which the optimizer will try very hard to do.</p>\n\n<hr>\n\n<p>As for your particular code, you have a lifetime issue. You cannot return a reference to a value if said reference may outlive the value (for then, what would it reference?).</p>\n\n<p>The simple fix is to return the value itself: <code>Vec&lt;PathBuf&gt;</code>. As mentioned, it will <em>move</em> the paths, not copy them.</p>\n"}], "owner": {"reputation": 645, "user_id": 691501, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/9c500f75da005f5dee02918df1286189?s=128&d=identicon&r=PG", "display_name": "CalMlynarczyk", "link": "https://stackoverflow.com/users/691501/calmlynarczyk"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 259, "favorite_count": 0, "accepted_answer_id": 32040395, "answer_count": 2, "score": 7, "last_activity_date": 1439821811, "creation_date": 1439762070, "last_edit_date": 1439820212, "question_id": 32040312, "link": "https://stackoverflow.com/questions/32040312/how-do-you-return-non-copyable-types", "title": "How do you return non-copyable types?", "body": "<p>I am trying to understand how you return non-primitives (i.e. types that do not implement <code>Copy</code>). If you return something like a <code>i32</code>, then the function creates a new value in memory with a copy of the return value, so it can be used outside the scope of the function. But if you return a type that doesn't implement <code>Copy</code>, it does not do this, and you get ownership errors.</p>\n\n<p>I have tried using <code>Box</code> to create values on the heap so that the caller can take ownership of the return value, but this doesn't seem to work either.</p>\n\n<p>Perhaps I am approaching this in the wrong manner by using the same coding style that I use in C# or other languages, where functions return values, rather than passing in an object reference as a parameter and mutating it, so that you can easily indicate ownership in Rust.</p>\n\n<p>The following code examples fails compilation. I believe the issue is only within the iterator closure, but I have included the entire function just in case I am not seeing something.</p>\n\n<pre><code>pub fn get_files(path: &amp;Path) -&gt; Vec&lt;&amp;Path&gt; { \n      let contents = fs::walk_dir(path); \n\n      match contents { \n          Ok(c) =&gt; c.filter_map(|i| { match i { \n                  Ok(d) =&gt; {  \n                      let val = d.path(); \n                      let p = val.as_path(); \n                      Some(p) \n                  }, \n                  Err(_) =&gt; None } }) \n              .collect(), \n          Err(e) =&gt; panic!(\"An error occurred getting files from {:?}: {}\", pa\n    th, e) \n      } \n }\n</code></pre>\n\n<p>The compiler gives the following error (I have removed all the line numbers and extraneous text):</p>\n\n<pre><code>error: `val` does not live long enough\n                     let p = val.as_path();\n                                            ^~~\nin expansion of closure expansion\nexpansion site\nreference must be valid for the anonymous lifetime #1 defined on the block...\n...but borrowed value is only valid for the block suffix following statement\n                     let val = d.path();\n                     let p = val.as_path();\n                     Some(p)\n                 },\n</code></pre>\n"}, {"tags": ["rust", "borrow-checker"], "comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 1, "creation_date": 1439754950, "post_id": 32039190, "comment_id": 51979290, "body": "I would guess you&#39;re doing it completely wrong. You can&#39;t pass a borrowed value to something that takes ownership - that&#39;s the <i>whole point</i> of the borrow checker."}, {"owner": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1439755110, "post_id": 32039190, "comment_id": 51979332, "body": "Yeah I know that ;) But I am not sure how I could accomplish it. I have no problem recoding it completely if it is going to make my code better. But I have no clue how I could organize my code for it to work."}], "answers": [{"comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1439754786, "post_id": 32039250, "comment_id": 51979252, "body": "<a href=\"http://sunng.info/handlebars-rust/handlebars/struct.Handlebars.html#method.register_helper\" rel=\"nofollow noreferrer\"><code>register_helper</code> seems to take an owned <code>HelperDef</code>.</a>"}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1439754856, "post_id": 32039250, "comment_id": 51979264, "body": "@Veedrac Just noticed that too. Ugh."}, {"owner": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "edited": false, "score": 0, "creation_date": 1439755474, "post_id": 32039250, "comment_id": 51979420, "body": "<i>&quot;It seems strange to register the helpers every time you render&quot;</i> Yes, I considered that, but the thing is that I also register a template and that template could potentially change between the renders. So I would need to register the template at creation of the struct. In my case that is not a problem because my cli exits after each render. But I can&#39;t assume that will be true for every use. Someone could use my code in a long running process, like a webapp. And in that case he would have to reset the renderer each time he changes the template :/"}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "edited": false, "score": 0, "creation_date": 1439755703, "post_id": 32039250, "comment_id": 51979489, "body": "@MathieuDavid Well, if you do have to construct the <code>Handlebars</code> struct including templates and helpers again and again, then you need a way to construct the helpers again and again. Do that and construct them on demand rather than trying to store them somewhere you can&#39;t move them out of (and if you could move them, they&#39;d be gone after the first rendering). I edited."}, {"owner": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "edited": false, "score": 0, "creation_date": 1439756468, "post_id": 32039250, "comment_id": 51979701, "body": "@delnan You are completely right, I have however no idea how to cleanly solve this situation"}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "edited": false, "score": 0, "creation_date": 1439756801, "post_id": 32039250, "comment_id": 51979810, "body": "@MathieuDavid Where the heck do the helpers come from? Do you create them?"}, {"owner": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "edited": false, "score": 0, "creation_date": 1439757044, "post_id": 32039250, "comment_id": 51979865, "body": "@delnan No the goal here is to give the ability to users to write their own helpers"}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "edited": false, "score": 0, "creation_date": 1439757698, "post_id": 32039250, "comment_id": 51980063, "body": "@MathieuDavid Then the users need to supply a way to duplicate their helpers, or you need to change your design so that they can use one instance of your object for multiple renders."}, {"owner": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "edited": false, "score": 0, "creation_date": 1439758085, "post_id": 32039250, "comment_id": 51980180, "body": "Yeah, I think might have to change my design.. I will need to think about that. Thanks for the help anyway :)"}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": false, "score": 0, "last_activity_date": 1439756042, "last_edit_date": 1439756042, "creation_date": 1439754593, "answer_id": 32039250, "question_id": 32039190, "link": "https://stackoverflow.com/questions/32039190/self-move-field-containing-box-move-out-of-borrowed-content/32039250#32039250", "title": "&amp;self move field containing Box - Move out of borrowed content", "body": "<p>The code you've written is trying to consume the <code>Vec</code> and its elements. In general, you can iterate over <code>&amp;self.user_helpers</code> which will give you references to the elements rather than consuming them. That is (modulo silly typos in the pattern):</p>\n\n<pre><code>for &amp;(ref name, ref helper) in self.user_helpers {\n    handlebars.register_helper(name, helper);\n}\n</code></pre>\n\n<p>See also: <a href=\"https://doc.rust-lang.org/book/vectors.html#iterating\" rel=\"nofollow\">The Rust Programming Language on iterating vectors</a>.</p>\n\n<p>There is a problem with that though: Handlebars needs ownership of the helpers. It may very well be that you have to create a new <code>Handlebars</code> object every time you render, but in that case you also need to be able to create all the helpers every time you create a new <code>Handlebars</code>. There is no way to take ownership of the boxes without taking at least a <code>&amp;mut</code> reference to the <code>Vec</code>. You need at least mutable access to take the handlers out of the struct. And if you did that, you wouldn't have the handlers around for the next time <code>render()</code> is called. Depending on how configurable the set of handlers is, you could have a function that constructs the <code>Vec&lt;Box&lt;HelperDef + 'static&gt;&gt;</code> out of thin air when you need it, or you could maintain a list of callbacks that construct <code>Box&lt;HelperDef + 'static&gt;</code> for you.</p>\n"}], "owner": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 116, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1439756042, "creation_date": 1439754227, "question_id": 32039190, "link": "https://stackoverflow.com/questions/32039190/self-move-field-containing-box-move-out-of-borrowed-content", "title": "&amp;self move field containing Box - Move out of borrowed content", "body": "<p>I have a struct with a field containing references to other structs (that I did not define)</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct HtmlHandlebars {\n    user_helpers: Vec&lt;(String, Box&lt;HelperDef + 'static&gt;)&gt;,\n}\n</code></pre>\n\n<p>And <code>HtmlHandlebars</code> has to implement a function </p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn render(&amp;self, ...) -&gt; &amp;self\n</code></pre>\n\n<p>And in that function I would need to move the <code>Box</code> to another function. Something like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn render(&amp;self, ...) -&gt; &amp;self {\n    let mut handlebars = Handlebars::new();\n    for (name, helper) in self.user_helpers {\n        handlebars.register_helper(&amp;name, helper);\n    }\n}\n</code></pre>\n\n<p>But I am kind of stuck because:</p>\n\n<ul>\n<li>I can't move the Box references because I am borrowing <code>self</code></li>\n<li>I can't copy the Box references because that struct does not implement copy</li>\n<li>I can't modify <code>&amp;self</code> to <code>&amp;mut self</code> because that causes other problems...</li>\n</ul>\n\n<p>Maybe I am doing it completely wrong.. Is there something else I can do? What are my options?</p>\n\n<p>If you need a more complete overview of the code, you can find it <a href=\"https://github.com/azerupi/mdBook/blob/user-helpers/src/renderer/html_handlebars/hbs_renderer.rs#L55\" rel=\"nofollow\">here</a></p>\n\n<p><strong>PS:</strong> I had no idea how to describe the situation in the title, feel free to change it</p>\n"}, {"tags": ["generics", "rust"], "answers": [{"tags": [], "owner": {"reputation": 38714, "user_id": 45668, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/d4288118e4836464de401d53b60466dd?s=128&d=identicon&r=PG", "display_name": "Malcolm", "link": "https://stackoverflow.com/users/45668/malcolm"}, "is_accepted": false, "score": 2, "last_activity_date": 1439743521, "last_edit_date": 1439743521, "creation_date": 1439736120, "answer_id": 32036301, "question_id": 32036288, "link": "https://stackoverflow.com/questions/32036288/what-does-this-syntax-mean-t-self-and-when-to-use-it/32036301#32036301", "title": "What does this syntax mean (&lt;T=Self&gt;) and when to use it?", "body": "<p>This syntax is used together with <a href=\"https://doc.rust-lang.org/stable/book/associated-types.html\" rel=\"nofollow\">associated types</a>. Sometimes you want to avoid specifying the variables each time and want them to be specified by the type, therefore you have the syntax as follows:</p>\n\n<pre><code>trait Operation {\n    type Input: Display;\n    type Output: Display;\n\n    fn do_it(&amp;self, g: Self::Input) -&gt; Self::Output;\n}\n</code></pre>\n\n<p>as opposed to</p>\n\n<pre><code>trait Operation&lt;T: Display, V: Display&gt; {    \n    fn do_it(&amp;self, g: T) -&gt; V;\n}\n</code></pre>\n\n<p>In this case when you declare a function which uses <code>Operation</code> you can simply write <code>fn take_operation&lt;O: Operation&gt;(operation: O, input: O::Input) -&gt; O::Output</code> instead of <code>fn take_operation&lt;T: Display, V: Display, O: Operation&lt;T, V&gt;&gt;(operation: O, input: T) -&gt; V</code>.</p>\n\n<p>In some cases you want to limit the range of types you accept, though. Let's take, for example, the case when you want to limit the types of input to <code>u32</code>. Normally you would write <code>fn take_operation&lt;V: Display, O: Operation&lt;u32, V&gt;&gt;(operation: O, input: u32) -&gt; V</code>. With the associated types, however, you will specify the constraint differently: <code>fn take_operation&lt;O: Operation&lt;Input=u32&gt;&gt;(operation: O, input: u32) -&gt; O::Output</code>.</p>\n"}, {"comments": [{"owner": {"reputation": 21581, "user_id": 288703, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/1bb69b75c5e73a7c9f4ebbc4835d622f?s=128&d=identicon&r=PG", "display_name": "Christoph", "link": "https://stackoverflow.com/users/288703/christoph"}, "edited": false, "score": 0, "creation_date": 1439739801, "post_id": 32036596, "comment_id": 51974726, "body": "Great answer! Thank you :)"}], "tags": [], "owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "is_accepted": true, "score": 6, "last_activity_date": 1439737852, "creation_date": 1439737852, "answer_id": 32036596, "question_id": 32036288, "link": "https://stackoverflow.com/questions/32036288/what-does-this-syntax-mean-t-self-and-when-to-use-it/32036596#32036596", "title": "What does this syntax mean (&lt;T=Self&gt;) and when to use it?", "body": "<p>This syntax can be used in two situations: default type parameters, and associated types. To see the difference and le use, lets have a look at the <code>Add</code> trait, used to define the <code>+</code> operator:</p>\n\n<pre><code>pub trait Add&lt;RHS = Self&gt; {\n    type Output;\n    fn add(self, rhs: RHS) -&gt; Self::Output;\n}\n</code></pre>\n\n<h1>Default type parameters</h1>\n\n<p>Here, the type parameter <code>RHS</code> has a default value: <code>Self</code>. That means that, whenever I use this trait, the value of this type parameter will default to <code>Self</code> if I omit it. For example:</p>\n\n<pre><code>impl Add for Foo { /* ... */ }\n</code></pre>\n\n<p>is the same as</p>\n\n<pre><code>impl Add&lt;Foo&gt; for Foo { /* ... */ }\n</code></pre>\n\n<p>likewise,</p>\n\n<pre><code>fn foo&lt;T&gt;(t: T) where T: Add { /* ... */ }\n</code></pre>\n\n<p>is the same as </p>\n\n<pre><code>fn foo&lt;T&gt;(t: T) where T: Add&lt;T&gt; { /* ... */ }\n</code></pre>\n\n<h1>Associated types</h1>\n\n<p>The trait <code>Add</code> also has an associated type : <code>Output</code>. This type is chosen by the implementation of the trait.</p>\n\n<p>The reason behind this is that it would not make any sense to implement <code>Add</code> with different output types while the input types are the same: once <code>Self</code> and <code>RHS</code> are known, the <code>Output</code> type cannot be chosen.</p>\n\n<p>This construct is also used for iterators for example, when you iterate over a container, you do not get to choose the type of the values generated by the iterator: it is thus an associated type.</p>\n\n<p>It is possible to select a value for an associated type in <code>where</code> clauses, by using this <code>Foo = Bar</code> syntax. For example:</p>\n\n<pre><code>fn foo&lt;I&gt;(i: I) where I: Iterator&lt;Item=u8&gt; { /* ... */ }\n</code></pre>\n\n<p>this function can work on any iterator yielding <code>u8</code> values.</p>\n\n<h1>To sum up</h1>\n\n<p>The syntax <code>Foo=Bar</code> used in the definition of a generic construct allows you to set a default value for a type parameter, and used in <code>where</code> clauses it allows you to match on the value of an associated type.</p>\n\n<p>There are no possible variations like <code>Foo = Bar : Baz</code> or things like that.</p>\n"}], "owner": {"reputation": 21581, "user_id": 288703, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/1bb69b75c5e73a7c9f4ebbc4835d622f?s=128&d=identicon&r=PG", "display_name": "Christoph", "link": "https://stackoverflow.com/users/288703/christoph"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 94, "favorite_count": 0, "accepted_answer_id": 32036596, "answer_count": 2, "score": 5, "last_activity_date": 1439822510, "creation_date": 1439736066, "last_edit_date": 1439822510, "question_id": 32036288, "link": "https://stackoverflow.com/questions/32036288/what-does-this-syntax-mean-t-self-and-when-to-use-it", "title": "What does this syntax mean (&lt;T=Self&gt;) and when to use it?", "body": "<p>I sometimes see things like <code>&lt;T=Self&gt;</code> or <code>T=()</code> in generic structs/traits. I suspect that this has something to do with default types for the generic type <code>T</code>. I couldn't find any documentation though.</p>\n\n<p>My questions are: </p>\n\n<ul>\n<li>What does it really mean?</li>\n<li>What variations are possible (maybe something crazy like <code>&lt;T=Self: 'static</code>>)?</li>\n<li>when is it useful (examples)?</li>\n</ul>\n"}, {"tags": ["json", "rust"], "answers": [{"comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user266003"}, "edited": false, "score": 0, "creation_date": 1439729500, "post_id": 32034730, "comment_id": 51971407, "body": "but it&#39;s already a field of my struct <code>In one of my structs Struct1 there&#39;s a field of type time::Tm</code>"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 6, "creation_date": 1439729595, "post_id": 32034730, "comment_id": 51971430, "body": "You&#39;re trying to implement <code>ToJson</code> for an external type.  That you&#39;re using it as part of a locally-defined structure is irrelevant.  Either the type <i>itself</i> or the trait <b>have</b> to be locally-defined."}, {"owner": {"user_type": "does_not_exist", "display_name": "user266003"}, "edited": false, "score": 0, "creation_date": 1439806470, "post_id": 32034730, "comment_id": 51995336, "body": "the type itself is defined locally. and since it has the field of type &quot;time::Tm&quot;, in order to implement to_json for it, I have to break it down and  implement to_json for &quot;time::Tm&quot;"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1439806754, "post_id": 32034730, "comment_id": 51995482, "body": "@jawanam: As I&#39;ve already said, you have to <i>either</i> implement <code>ToJson</code> for <code>Struct1</code> <b>without</b> breaking it down (<i>i.e.</i> <code>Struct1</code> would <i>also</i> have to convert the <code>Tm</code> field to JSON itself), <i>or</i> you have to wrap the <code>Tm</code> in a local type.  The compiler <i>does not care</i> that you are using <code>Tm</code> in a field of a locally-defined structure."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 6, "last_activity_date": 1439725612, "creation_date": 1439725612, "answer_id": 32034730, "question_id": 32034529, "link": "https://stackoverflow.com/questions/32034529/the-impl-does-not-reference-any-types-defined-in-this-crate/32034730#32034730", "title": "the impl does not reference any types defined in this crate", "body": "<p>It's not a bug.  The language requires when you implement a trait that <em>you</em> defined either the trait or the type involved.  If you implemented <em>neither</em>, it doesn't allow it.</p>\n\n<p>If it didn't, it would be possible for someone else to come along and <em>also</em> implement <code>json::ToJson</code> for <code>time::Tm</code>, and suddenly the compiler has no idea which code to use.</p>\n\n<p>The simplest way to work around this is to wrap your <code>time::Tm</code> in a newtype, like so:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct TmWrap(time::Tm);\n</code></pre>\n\n<p>Now, because <em>you</em> defined this type, you can implement <code>json::ToJson</code> on it.  This does mean you have to wrap/unwrap the <code>Tm</code> constantly, but the only other alternative is to implement <code>ToJson</code> for the <em>entire</em> containing <code>Struct1</code> type, which is probably going to be even <em>more</em> work.</p>\n"}, {"comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user266003"}, "edited": false, "score": 0, "creation_date": 1439729459, "post_id": 32034744, "comment_id": 51971396, "body": "but it&#39;s already a field of my struct <code>In one of my structs Struct1 there&#39;s a field of type time::Tm</code>"}, {"owner": {"reputation": 20407, "user_id": 1017941, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/yocPw.jpg?s=128&g=1", "display_name": "Hauleth", "link": "https://stackoverflow.com/users/1017941/hauleth"}, "edited": false, "score": 1, "creation_date": 1439729943, "post_id": 32034744, "comment_id": 51971545, "body": "Yes, but you are trying to <code>impl</code> on that type, not on yours. Check my answer for solution."}, {"owner": {"user_type": "does_not_exist", "display_name": "user266003"}, "edited": false, "score": 0, "creation_date": 1439806528, "post_id": 32034744, "comment_id": 51995366, "body": "here you are <b>At first I got an error saying that to_json isn&#39;t implemented for time::Tm</b> when I&#39;d implemented <b>to_json</b> for my own type Struct1"}, {"owner": {"reputation": 20407, "user_id": 1017941, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/yocPw.jpg?s=128&g=1", "display_name": "Hauleth", "link": "https://stackoverflow.com/users/1017941/hauleth"}, "edited": false, "score": 0, "creation_date": 1439806793, "post_id": 32034744, "comment_id": 51995501, "body": "If you tried to use <code>#[derive(\u2026)]</code> or implicit any kind of implicit definition then it will fail. You need to implement <b>whole</b> <code>ToJson</code> for your own struct, no shortcuts, no autodefinitions, nothing - just you and your code. I gave you enough examples, but I&#39;ll try once more with Rust Playpen."}], "tags": [], "owner": {"reputation": 20407, "user_id": 1017941, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/yocPw.jpg?s=128&g=1", "display_name": "Hauleth", "link": "https://stackoverflow.com/users/1017941/hauleth"}, "is_accepted": true, "score": 8, "last_activity_date": 1439807759, "last_edit_date": 1439807759, "creation_date": 1439725726, "answer_id": 32034744, "question_id": 32034529, "link": "https://stackoverflow.com/questions/32034529/the-impl-does-not-reference-any-types-defined-in-this-crate/32034744#32034744", "title": "the impl does not reference any types defined in this crate", "body": "<p>It's not a bug - it is feature. Really. To implement trait any of this statements must be true:</p>\n\n<ul>\n<li>type is declared in this module</li>\n<li>trait is declared in this module</li>\n</ul>\n\n<p>otherwise you get <code>E0117</code>. You can find more info using <code>rustc --explain E0117</code>:</p>\n\n<blockquote>\n  <p>This error indicates a violation of one of Rust's orphan rules for trait implementations. The rule prohibits any implementation of a foreign trait (atrait defined in another crate) where</p>\n  \n  <ul>\n  <li>the type that is implementing the trait is foreign</li>\n  <li>all of the parameters being passed to the trait (if there are any) are also foreign.</li>\n  </ul>\n  \n  <p>Here's one example of this error:</p>\n\n<pre><code>impl Drop for u32 {}\n</code></pre>\n  \n  <p>To avoid this kind of error, ensure that at least one local type is referencedby the <code>impl</code>:</p>\n\n<pre><code>pub struct Foo; // you define your type in your crate\n\nimpl Drop for Foo { // and you can implement the trait on it!\n    // code of trait implementation here\n}\n\nimpl From&lt;Foo&gt; for i32 { // or you use a type from your crate as \n    // a type parameter   \n    fn from(i: Foo) -&gt; i32 { 0 }\n}\n</code></pre>\n  \n  <p>Alternatively, define a trait locally and implement that instead:</p>\n\n<pre><code>trait Bar {\n    fn get(&amp;self) -&gt; usize;\n}\nimpl Bar for u32 {\n    fn get(&amp;self) -&gt; usize { 0 }\n}\n</code></pre>\n  \n  <p>For information on the design of the orphan rules, see <a href=\"https://github.com/rust-lang/rfcs/pull/1023\" rel=\"noreferrer\">RFC 1023</a>.</p>\n</blockquote>\n\n<h2>EDIT:</h2>\n\n<p>To achieve what you want you have 2 solutions:</p>\n\n<ul>\n<li><p>implement <code>ToJson</code> on your whole type:</p>\n\n<pre><code> impl json::ToJson for Struct1 { \u2026 }\n</code></pre></li>\n<li><p>create a wrapper type <code>struct TmWrapper(time::Tm);</code> and implement 2 traits for it <code>From</code> and <code>ToJson</code>.</p></li>\n</ul>\n\n<h2>EDIT 2:</h2>\n\n<p>Step by step explonation:</p>\n\n<ol>\n<li>This is what you want to achieve: <a href=\"http://is.gd/6UF3jd\" rel=\"noreferrer\">http://is.gd/6UF3jd</a></li>\n<li>Solutions:\n\n<ul>\n<li>implement trait on whole type <strong>using</strong> types that you want: <a href=\"http://is.gd/CRfPeJ\" rel=\"noreferrer\">http://is.gd/CRfPeJ</a></li>\n<li>create wrapper type and implement trait that you want on it: <a href=\"http://is.gd/7XV5w9\" rel=\"noreferrer\">http://is.gd/7XV5w9</a></li>\n</ul></li>\n</ol>\n\n<p>This is <strong>exactly</strong> what is described in explanation of the error code above.</p>\n\n<p>So you see - at least one of trait or struct must be declare within current unit to allow implementation of trait on given type. In your case both of them are external types and that is what is Rust preventing. If you want to achieve something like that you need to use some hacks as described above.</p>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user266003"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3107, "favorite_count": 0, "accepted_answer_id": 32034744, "answer_count": 2, "score": 2, "last_activity_date": 1439807759, "creation_date": 1439724241, "question_id": 32034529, "link": "https://stackoverflow.com/questions/32034529/the-impl-does-not-reference-any-types-defined-in-this-crate", "title": "the impl does not reference any types defined in this crate", "body": "<p>In one of my structs <code>Struct1</code> there's a field of type <code>time::Tm</code>. Somewhere in the code an instance of the struct gets decoded from a json string to an instance of  <code>Struct1</code>. </p>\n\n<p><code>json::decode(&amp;maybe_struct1)</code></p>\n\n<p>At first I got an error saying that <code>to_json isn't implemented for time::Tm</code>. So I implemented it:</p>\n\n<pre><code>impl json::ToJson for time::Tm {\n  fn to_json(&amp;self) -&gt; json::Json {\n    let mut d = BTreeMap::new();\n    d.insert(\"tm_sec\".to_string(), self.tm_sec.to_json());\n    d.insert(\"tm_min\".to_string(), self.tm_min.to_json());\n    //..............\n</code></pre>\n\n<p>And now it says </p>\n\n<pre><code>error: the impl does not reference any types defined in this crate; only traits defined in the current crate can be implemented for arbitrary types  [E0117]\n</code></pre>\n\n<p>I gathered that it was a bug before version 1. But it is still? If not how do I fix it? </p>\n"}, {"tags": ["binding", "rust", "idioms"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1439734860, "creation_date": 1439734860, "answer_id": 32036114, "question_id": 32032421, "link": "https://stackoverflow.com/questions/32032421/most-idiomatic-way-to-handle-api-keys-in-a-rust-library/32036114#32036114", "title": "Most idiomatic way to handle API keys in a Rust library?", "body": "<p>You absolutely do not want to have some sort of global configuration that is magically stored. That would prevent the API being used by multiple users concurrently in the same process.</p>\n\n<p>I would construct a builder for the API endpoint. This can provide defaults for the API URL and can also grab API keys from the environment variables. You can also override the URL or keys programmatically. </p>\n\n<pre><code>use std::collections::HashMap;\n\nstruct ApiEndpoint {\n    url: String,\n    api_key_1: String,\n    api_key_2: String,\n}\n\nimpl ApiEndpoint {\n    fn add_money_to_account(&amp;self, cents: u64) {\n        println!(\"Adding {} cents. Making a request to {} ({}, {})\", cents, self.url, self.api_key_1, self.api_key_2);\n    }\n}\n\nstruct ApiBuilder {\n    url: Option&lt;String&gt;,\n    api_key_1: Option&lt;String&gt;,\n    api_key_2: Option&lt;String&gt;,\n}\n\nimpl ApiBuilder {\n    fn new() -&gt; ApiBuilder {\n        ApiBuilder {\n            url: None,\n            api_key_1: None,\n            api_key_2: None,\n        }\n    }\n\n    fn url(mut self, url: &amp;str) -&gt; ApiBuilder {\n        self.url = Some(url.into());\n        self\n    }\n\n    fn api_key_1(mut self, api_key_1: &amp;str) -&gt; ApiBuilder {\n        self.api_key_1 = Some(api_key_1.into());\n        self\n    }\n\n    fn api_key_2(mut self, api_key_2: &amp;str) -&gt; ApiBuilder {\n        self.api_key_2 = Some(api_key_2.into());\n        self\n    }\n\n    fn build(self) -&gt; ApiEndpoint {\n        let mut env_vars: HashMap&lt;_, _&gt; = std::env::vars().collect();\n\n        ApiEndpoint {\n            url: self.url.unwrap_or_else(|| \"http://example.com/default\".into()),\n            api_key_1: self.api_key_1.or_else(|| env_vars.remove(\"MYLIB_ENV_VAR_1\")).unwrap(),\n            api_key_2: self.api_key_2.or_else(|| env_vars.remove(\"MYLIB_ENV_VAR_2\")).unwrap(),\n        }\n    }\n}\n\nfn main() {\n    let endpoint =\n        ApiBuilder::new()\n        .url(\"https://test.example.com\")\n        .api_key_1(\"SEEKRET\")\n        .api_key_2(\"PASSWORD\")\n        .build();\n\n    endpoint.add_money_to_account(500);\n}\n</code></pre>\n\n<blockquote>\n  <p>cramming everything into a struct also doesn't seem like the best way</p>\n</blockquote>\n\n<p>I don't see why not.</p>\n"}], "owner": {"reputation": 549, "user_id": 4396823, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/e7493ed20de304e4d88666ff6977ae33?s=128&d=identicon&r=PG&f=1", "display_name": "Steve", "link": "https://stackoverflow.com/users/4396823/steve"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 166, "favorite_count": 0, "accepted_answer_id": 32036114, "answer_count": 1, "score": 2, "last_activity_date": 1439734877, "creation_date": 1439706047, "last_edit_date": 1439734877, "question_id": 32032421, "link": "https://stackoverflow.com/questions/32032421/most-idiomatic-way-to-handle-api-keys-in-a-rust-library", "title": "Most idiomatic way to handle API keys in a Rust library?", "body": "<p>I am working on writing Rust bindings for an API that takes in two API keys. There are numerous ways to accomplish this. I specifically do not want to burden the user with making requests like</p>\n\n<pre><code>myapi::requestThing(firstApiKey, SecondApiKey,...)\n</code></pre>\n\n<p>I would like to have the user only pass in the API keys once and have it remember it. The problem is I'm trying to do this functionally, and cramming everything into a struct also doesn't seem like the best way.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 18146, "user_id": 646619, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/bd61a0f309ebc135d2661710c2faf379?s=128&d=identicon&r=PG", "display_name": "Colonel Thirty Two", "link": "https://stackoverflow.com/users/646619/colonel-thirty-two"}, "edited": false, "score": 7, "creation_date": 1439686617, "post_id": 32030756, "comment_id": 51963087, "body": "Why not? Since tuples are fixed sized and can have different types of elements, it&#39;s more similar to struct properties than array indices."}], "answers": [{"comments": [{"owner": {"reputation": 228853, "user_id": 827263, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/216c1db53d752f87dd8176a6ba0c2190?s=128&d=identicon&r=PG", "display_name": "Keith Thompson", "link": "https://stackoverflow.com/users/827263/keith-thompson"}, "edited": false, "score": 0, "creation_date": 1439691660, "post_id": 32031242, "comment_id": 51963804, "body": "Does your use of the word &quot;we&quot; imply that you were involved in the decision? And does &quot;different syntax&quot; refer to the <code>t.2</code> syntax (that doesn&#39;t seem entirely clear)."}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "reply_to_user": {"reputation": 228853, "user_id": 827263, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/216c1db53d752f87dd8176a6ba0c2190?s=128&d=identicon&r=PG", "display_name": "Keith Thompson", "link": "https://stackoverflow.com/users/827263/keith-thompson"}, "edited": false, "score": 1, "creation_date": 1439691743, "post_id": 32031242, "comment_id": 51963817, "body": "I say &#39;we&#39; because I&#39;m on the core team, but this decision was made, as far as I can remember, before I was involved, which puts it before 2012 at least. (And yes, that&#39;s the difference I refer to)"}, {"owner": {"reputation": 228853, "user_id": 827263, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/216c1db53d752f87dd8176a6ba0c2190?s=128&d=identicon&r=PG", "display_name": "Keith Thompson", "link": "https://stackoverflow.com/users/827263/keith-thompson"}, "edited": false, "score": 2, "creation_date": 1439692399, "post_id": 32031242, "comment_id": 51963910, "body": "Your answer would be improved by including a brief summary of the justification rather than just linking to information on another site. You might also want to mention in the answer that you&#39;re on the core team."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1439693076, "post_id": 32031242, "comment_id": 51964012, "body": "I&#39;d argue that the membership on the core team is moot for the purposes of this answer. Steve wasn&#39;t a member of the team at the point in time, and even if he was, it wouldn&#39;t matter unless he personally helped with this RFC. However, summarizing the information would be in line with SO&#39;s rules against link-only answers."}, {"owner": {"reputation": 5586, "user_id": 1965774, "user_type": "registered", "accept_rate": 95, "profile_image": "https://i.stack.imgur.com/e7KDB.gif?s=128&g=1", "display_name": "Pie &#39;Oh&#39; Pah", "link": "https://stackoverflow.com/users/1965774/pie-oh-pah"}, "reply_to_user": {"reputation": 228853, "user_id": 827263, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/216c1db53d752f87dd8176a6ba0c2190?s=128&d=identicon&r=PG", "display_name": "Keith Thompson", "link": "https://stackoverflow.com/users/827263/keith-thompson"}, "edited": false, "score": 0, "creation_date": 1439726531, "post_id": 32031242, "comment_id": 51970644, "body": "Thanks everyone and @Keith Thompson for the link! Although it is odd at first coming from duck-typing language like Python in which you have no need to care much about the differences of each Iterator, it actually makes sense to the Rust way of &quot;being careful&quot;."}], "tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": true, "score": 8, "last_activity_date": 1500401790, "last_edit_date": 1500401790, "creation_date": 1439691438, "answer_id": 32031242, "question_id": 32030756, "link": "https://stackoverflow.com/questions/32030756/reasons-for-dot-notation-for-tuple/32031242#32031242", "title": "Reasons for Dot Notation for Tuple", "body": "<p>This decision was made in <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0184-tuple-accessors.md\" rel=\"nofollow noreferrer\">RFC 184</a>. The <strong>Motivation</strong> section has details:</p>\n\n<blockquote>\n  <p>Right now accessing fields of tuples and tuple structs is incredibly painful\u2014one must rely on pattern-matching alone to extract values. This became such a problem that twelve traits were created in the standard library <code>(core::tuple::Tuple*)</code> to make tuple value accesses easier, adding <code>.valN()</code>, <code>.refN()</code>, and <code>.mutN()</code> methods to help this. But this is not a very nice solution\u2014it requires the traits to be implemented in the standard library, not the language, and for those traits to be imported on use. On the whole this is not a problem, because most of the time <code>std::prelude::*</code> is imported, but this is still a hack which is not a real solution to the problem at hand. It also only supports tuples of length up to twelve, which is normally not a problem but emphasises how bad the current situation is.</p>\n</blockquote>\n\n<p>The discussion in <a href=\"https://github.com/rust-lang/rfcs/pull/184\" rel=\"nofollow noreferrer\">the associated pull request</a> is also useful.</p>\n"}, {"tags": [], "owner": {"reputation": 5443, "user_id": 216292, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/Z8pUD.jpg?s=128&g=1", "display_name": "Ponkadoodle", "link": "https://stackoverflow.com/users/216292/ponkadoodle"}, "is_accepted": false, "score": 14, "last_activity_date": 1500400427, "last_edit_date": 1500400427, "creation_date": 1442987092, "answer_id": 32731845, "question_id": 32030756, "link": "https://stackoverflow.com/questions/32030756/reasons-for-dot-notation-for-tuple/32731845#32731845", "title": "Reasons for Dot Notation for Tuple", "body": "<p>I had no part in the design decisions, but here's my perspective:</p>\n\n<p>Tuples contain mixed types. That is, the property <code>type_of(t[i]) == type_of(t[j])</code> cannot be guaranteed.</p>\n\n<p>However, conventional indexing works on the premise that the <code>i</code> in <code>t[i]</code> need not be a compile-time constant, which in turn means that the <em>type</em> of <code>t[i]</code> needs to be uniform for all possible <code>i</code>. This is true in all other rust collections that implement indexing. Specifically, rust types are made indexable through implementing the <a href=\"https://doc.rust-lang.org/stable/std/ops/trait.Index.html\" rel=\"noreferrer\">Index</a> trait, defined as below:</p>\n\n<pre><code>pub trait Index&lt;Idx&gt; where Idx: ?Sized {\n    type Output: ?Sized;\n    fn index(&amp;'a self, index: Idx) -&gt; &amp;'a Self::Output;\n}\n</code></pre>\n\n<p>So if you wanted a tuple to implement indexing, what type should <code>Self::Output</code> be? The only way to pull this off would be to make <code>Self::Output</code> an enum, which means that element accesses would have to be wrapped around a useless <code>match t[i]</code> clause (or something similar) on the programmer's side, and you'll be catching type errors at runtime instead of compile-time.</p>\n\n<p>Furthermore, you now have to implement bounds-checking, which is again a runtime error, unless you're clever in your tuple implementation.</p>\n\n<p>You could bypass these issues by requiring that the index by a compile-time constant, but at that point tuple item accesses are <em>pretending</em> to behave like a normal index operation while actually behaving inconsistently with respect to all other rust containers, and there's nothing good about that.</p>\n"}, {"tags": [], "owner": {"reputation": 2322, "user_id": 1987178, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/YS4r1.png?s=128&g=1", "display_name": "rom1v", "link": "https://stackoverflow.com/users/1987178/rom1v"}, "is_accepted": false, "score": 6, "last_activity_date": 1493216306, "creation_date": 1493216306, "answer_id": 43636829, "question_id": 32030756, "link": "https://stackoverflow.com/questions/32030756/reasons-for-dot-notation-for-tuple/43636829#43636829", "title": "Reasons for Dot Notation for Tuple", "body": "<p>The reason for using <code>t.2</code> syntax instead of <code>t[2]</code> is best explained in this <a href=\"https://github.com/rust-lang/rfcs/pull/184#issuecomment-54524048\" rel=\"noreferrer\">comment</a>:</p>\n\n<blockquote>\n  <p>Indexing syntax <em>everywhere else</em> has a consistent type, but a tuple is heterogenous so <code>a[0]</code> and <code>a[1]</code> would have different types.</p>\n</blockquote>\n"}, {"comments": [{"owner": {"reputation": 37211, "user_id": 60075, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/da582d6fbfa2ae515004ef49fcb7c281?s=128&d=identicon&r=PG", "display_name": "Craig McQueen", "link": "https://stackoverflow.com/users/60075/craig-mcqueen"}, "edited": false, "score": 0, "creation_date": 1573181343, "post_id": 46718460, "comment_id": 103806770, "body": "&quot;The only language I&#39;m aware of that&#39;s using indexing syntax to access a field is Lua.&quot; Also Python indexes tuples. But Python is dynamically typed, so it has no problem getting data of a different type for different tuple index values."}], "tags": [], "owner": {"reputation": 5586, "user_id": 1965774, "user_type": "registered", "accept_rate": 95, "profile_image": "https://i.stack.imgur.com/e7KDB.gif?s=128&g=1", "display_name": "Pie &#39;Oh&#39; Pah", "link": "https://stackoverflow.com/users/1965774/pie-oh-pah"}, "is_accepted": false, "score": 1, "last_activity_date": 1507840554, "creation_date": 1507840554, "answer_id": 46718460, "question_id": 32030756, "link": "https://stackoverflow.com/questions/32030756/reasons-for-dot-notation-for-tuple/46718460#46718460", "title": "Reasons for Dot Notation for Tuple", "body": "<p>I want to provide an answer from my experience using a functional language (Ocaml) for the while since I've posted this question.</p>\n\n<p>Apart from @rom1v reference, indexing syntax like <code>a[0]</code> everywhere else also used in some kind of sequence structure, of which tuples aren't. In Ocaml, for instance, a tuple <code>(1, \"one\")</code> is said to have type <code>int * string</code>, which conforms to the <a href=\"https://en.wikipedia.org/wiki/Cartesian_product\" rel=\"nofollow noreferrer\">Cartesian product in mathematics</a> (i.e., the plane is R^2 = R * R). Plus, accessing a tuple by <code>nth</code> index is considered unidiomatic.</p>\n\n<p>Due to its polymorphic nature, a tuple can almost be thought of as a record / object, which often prefer dot notation like <code>a.fieldName</code> as a convention to access its field (except in language like Javascript, which treats objects like dictionaries and allows string literal access like <code>a[\"fieldname\"]</code>. The only language I'm aware of that's using indexing syntax to access a field is Lua.</p>\n\n<p>Personally, I think syntax like <code>a.(0)</code> tends to look better than <code>a.0</code>, but this may be intentionally (or not) awkward considering in most functional languages it is ideal to pattern-match a tuple instead of accessing it by its index. Since Rust is also imperative, syntax like <code>a.10</code> can be a good reminder to pattern-match or \"go use a struct\" already.</p>\n"}], "owner": {"reputation": 5586, "user_id": 1965774, "user_type": "registered", "accept_rate": 95, "profile_image": "https://i.stack.imgur.com/e7KDB.gif?s=128&g=1", "display_name": "Pie &#39;Oh&#39; Pah", "link": "https://stackoverflow.com/users/1965774/pie-oh-pah"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3059, "favorite_count": 1, "accepted_answer_id": 32031242, "answer_count": 4, "score": 14, "last_activity_date": 1507840554, "creation_date": 1439685519, "last_edit_date": 1500401898, "question_id": 32030756, "link": "https://stackoverflow.com/questions/32030756/reasons-for-dot-notation-for-tuple", "title": "Reasons for Dot Notation for Tuple", "body": "<p>Is there any technical reason Rust is designed to use dot notation for tuples instead of using index notation (<code>t[2]</code>)?</p>\n\n<pre><code>let t = (20u32, true, 'b')\nt.2 // -&gt; 'b'\n</code></pre>\n\n<p>Dot notation seems natural in accessing struct's and object's properties. I couldn't find a resource or explanation online.</p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1439692267, "post_id": 32029486, "comment_id": 51963893, "body": "The documentation you linked to doesn&#39;t list any of the profiles as applicable global configuration; perhaps that is the problem? Since profiles seem pretty project-specific, it seems likely that these files wouldn&#39;t even be checked. Have you tried any of the other possible paths?"}, {"owner": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1439737179, "post_id": 32029486, "comment_id": 51973815, "body": "Ohh, I hadn&#39;t considered that profiles might not be globally configurable.  I haven&#39;t tried any other paths."}], "answers": [{"tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": false, "score": 2, "last_activity_date": 1472222775, "last_edit_date": 1472222775, "creation_date": 1462544029, "answer_id": 37074670, "question_id": 32029486, "link": "https://stackoverflow.com/questions/32029486/how-can-i-globally-configure-a-cargo-profile-option/37074670#37074670", "title": "How can I globally configure a Cargo profile option?", "body": "<p>A workaround is to create a script to be called instead of <code>cargo</code></p>\n\n<pre class=\"lang-bash prettyprint-override\"><code>#!/bin/bash\n\nif [[ $* != *--release*  ]]; then\n    # dev build\n    export RUSTFLAGS=\"-C codegen-units=8\"\nfi\n\ncargo \"$@\"\n</code></pre>\n\n<p>If you use the full path to <code>cargo</code> on the script, you can create a alias</p>\n\n<pre><code>alias cargo=/path/to/script\n</code></pre>\n\n<p>and just call <code>cargo</code>.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1496539657, "post_id": 44345957, "comment_id": 75702320, "body": "Your answer <i>almost</i> answers OPs question, but it&#39;s unclear how you&#39;d set this option for the <code>dev</code> profile, as requested."}, {"owner": {"reputation": 19616, "user_id": 44563, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/0ef1a594b87584a77f5281824969c8f0?s=128&d=identicon&r=PG", "display_name": "Zoomulator", "link": "https://stackoverflow.com/users/44563/zoomulator"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1496679412, "post_id": 44345957, "comment_id": 75747417, "body": "@Shepmaster The question is a bit ambiguous though. He states you can set it per profile in one project, but then asks how to enable it for &#39;every project [you] compile&#39;. It&#39;s unclear if he wants to use codegen-units for all projects compiling with the dev profile, or just all projects. I&#39;ll clarify that this affects all projects regardless of profile."}], "tags": [], "owner": {"reputation": 19616, "user_id": 44563, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/0ef1a594b87584a77f5281824969c8f0?s=128&d=identicon&r=PG", "display_name": "Zoomulator", "link": "https://stackoverflow.com/users/44563/zoomulator"}, "is_accepted": true, "score": 4, "last_activity_date": 1496679535, "last_edit_date": 1496679535, "creation_date": 1496506191, "answer_id": 44345957, "question_id": 32029486, "link": "https://stackoverflow.com/questions/32029486/how-can-i-globally-configure-a-cargo-profile-option/44345957#44345957", "title": "How can I globally configure a Cargo profile option?", "body": "<p>You can set rustflags for all builds or per target in your <code>.cargo/config</code> file.</p>\n\n<pre><code>[build] # or [target.$triple]\nrustflags = [\"-Ccodegen-units=4\"]\n</code></pre>\n\n<p>To be clear, this will set the codegen-units for all your projects (covered by this .cargo/config) regardless of profile.</p>\n\n<p>To make sure it's actually set, you can also set verbose output in the same file. This will show each rustc command with flags that cargo invokes.</p>\n\n<pre><code>[term]\nverbose = true\n</code></pre>\n"}], "owner": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1094, "favorite_count": 0, "accepted_answer_id": 44345957, "answer_count": 2, "score": 6, "last_activity_date": 1496679535, "creation_date": 1439673755, "last_edit_date": 1439743219, "question_id": 32029486, "link": "https://stackoverflow.com/questions/32029486/how-can-i-globally-configure-a-cargo-profile-option", "title": "How can I globally configure a Cargo profile option?", "body": "<p>With Cargo, I can set a project's development settings to use parallel code generation:</p>\n\n<pre><code>[profile.dev]\ncodegen-units = 8\n</code></pre>\n\n<p>According to <a href=\"http://doc.crates.io/config.html\" rel=\"noreferrer\">the documentation</a>, it should be possible to put this into <code>~/.cargo/config</code> to apply this setting to all projects.  This doesn't work for me: it seems that the <code>.cargo/config</code> file isn't used at all.  Is there any way to apply such configuration to <em>every</em> project I compile?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 175, "user_id": 3978243, "user_type": "registered", "profile_image": "https://graph.facebook.com/1004852465/picture?type=large", "display_name": "Oussama Gammoudi", "link": "https://stackoverflow.com/users/3978243/oussama-gammoudi"}, "edited": false, "score": 0, "creation_date": 1439666579, "post_id": 32027225, "comment_id": 51958390, "body": "thanks, If I understood correctly it will never block since it will return an error if it does, what about flush, is it required for TcpStream and does it block."}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "reply_to_user": {"reputation": 175, "user_id": 3978243, "user_type": "registered", "profile_image": "https://graph.facebook.com/1004852465/picture?type=large", "display_name": "Oussama Gammoudi", "link": "https://stackoverflow.com/users/3978243/oussama-gammoudi"}, "edited": false, "score": 0, "creation_date": 1439666827, "post_id": 32027225, "comment_id": 51958460, "body": "flush is not required, but yes, it blocks unless there&#39;s an error."}], "tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": false, "score": 3, "last_activity_date": 1439664665, "last_edit_date": 1439664665, "creation_date": 1439658993, "answer_id": 32027225, "question_id": 32027170, "link": "https://stackoverflow.com/questions/32027170/are-stdnettcpstream-write-or-flush-blocking-operations/32027225#32027225", "title": "Are std::net::TcpStream write or flush blocking operations?", "body": "<p>Check out the <a href=\"http://doc.rust-lang.org/std/io/trait.Write.html#tymethod.write\" rel=\"nofollow\">documentation for write</a>:</p>\n\n<blockquote>\n  <p>Calls to write are not guaranteed to block waiting for data to be written, and a write which would otherwise block can be indicated through an Err variant.</p>\n</blockquote>\n"}], "owner": {"reputation": 175, "user_id": 3978243, "user_type": "registered", "profile_image": "https://graph.facebook.com/1004852465/picture?type=large", "display_name": "Oussama Gammoudi", "link": "https://stackoverflow.com/users/3978243/oussama-gammoudi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 522, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1439664705, "creation_date": 1439658641, "last_edit_date": 1439664705, "question_id": 32027170, "link": "https://stackoverflow.com/questions/32027170/are-stdnettcpstream-write-or-flush-blocking-operations", "title": "Are std::net::TcpStream write or flush blocking operations?", "body": "<p>In Rust, Is std::net::TcpStream write or flush a blocking operation?\nand is flush required to write the data.</p>\n"}, {"tags": ["reference", "rust", "primitive-types"], "answers": [{"comments": [{"owner": {"reputation": 37741, "user_id": 3425536, "user_type": "registered", "accept_rate": 72, "profile_image": "https://graph.facebook.com/1484495923/picture?type=large", "display_name": "emlai", "link": "https://stackoverflow.com/users/3425536/emlai"}, "edited": false, "score": 0, "creation_date": 1439664090, "post_id": 32023217, "comment_id": 51957663, "body": "How about using the immutable reference as an observer?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 37741, "user_id": 3425536, "user_type": "registered", "accept_rate": 72, "profile_image": "https://graph.facebook.com/1484495923/picture?type=large", "display_name": "emlai", "link": "https://stackoverflow.com/users/3425536/emlai"}, "edited": false, "score": 0, "creation_date": 1439664773, "post_id": 32023217, "comment_id": 51957873, "body": "@zenith an observer of what? You can&#39;t mutate the value while there is an outstanding borrow."}, {"owner": {"reputation": 37741, "user_id": 3425536, "user_type": "registered", "accept_rate": 72, "profile_image": "https://graph.facebook.com/1484495923/picture?type=large", "display_name": "emlai", "link": "https://stackoverflow.com/users/3425536/emlai"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1439665076, "post_id": 32023217, "comment_id": 51957976, "body": "@Shepmaster Oh totally forgot about that. Thanks!"}, {"owner": {"reputation": 854, "user_id": 2285066, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/4z2o8.jpg?s=128&g=1", "display_name": "Nam Hoang", "link": "https://stackoverflow.com/users/2285066/nam-hoang"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1439665853, "post_id": 32023217, "comment_id": 51958174, "body": "@Shepmaster, can you please give an example of &amp;[i32]? Thanks a lot."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 1, "creation_date": 1439666382, "post_id": 32023217, "comment_id": 51958335, "body": "I&#39;ve updated the answer to expand more on slices. However, I still think this is just a consequence of the case with generics - the reason why slices provide iterators which yield references is because they are generic and can hold arbitrary types, so they need a way to allow the user to borrow their contents."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1439667783, "post_id": 32023217, "comment_id": 51958738, "body": "@VladimirMatveev absolutely! It&#39;s just that the slices and iterator adapters are cases of a reference to a primitive that people will run into in the real world."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 11, "last_activity_date": 1439666304, "last_edit_date": 1439666304, "creation_date": 1439629263, "answer_id": 32023217, "question_id": 32021676, "link": "https://stackoverflow.com/questions/32021676/why-use-an-immutable-reference-to-i32/32023217#32023217", "title": "Why use an immutable reference to i32", "body": "<p>In this particular case the reason is indeed to show the concept of lifetimes. As for the general case, however, I see no reason making an immutable reference to a primitive type (mutable references, of course, is another matter) except of when it is done in generic code:</p>\n\n<pre><code>struct Holder&lt;'a, T&gt; {\n    r: &amp;'a T\n}\n\nlet x: i32 = 123;\nlet h: Holder&lt;i32&gt; = Holder { r: &amp;x };\n</code></pre>\n\n<p>Here if you have such structure, you have no other choice as to use a reference to an <code>i32</code>. Naturally, this structure can also be used with other, non-primitive and non-movable types.</p>\n\n<p>As Shepmaster has mentioned in comments, there is indeed a case where you have references to primitive types - it is by-reference iterators. Remember, by a convention (which the standard library follows) <code>iter()</code> method on a collection should return an iterator of references into the collection:</p>\n\n<pre><code>let v: Vec&lt;i32&gt; = vec![1, 2, 3, 4];\nlet i = v.iter();  // i is Iterator&lt;Item=&amp;i32&gt;\n</code></pre>\n\n<p>Then almost all methods on the iterator which take a closure will accept closures whose argument is a reference:</p>\n\n<pre><code>i.map(|n| *n + 1)  // n is of type &amp;i32\n</code></pre>\n\n<p>Note that this is in fact a consequence of the more general case with generics. Vectors and slices may contain arbitrary types, including non-moveable ones, so they just have to have methods which would allow their users to borrow their contents.</p>\n"}], "owner": {"reputation": 854, "user_id": 2285066, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/4z2o8.jpg?s=128&g=1", "display_name": "Nam Hoang", "link": "https://stackoverflow.com/users/2285066/nam-hoang"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 822, "favorite_count": 0, "accepted_answer_id": 32023217, "answer_count": 1, "score": 8, "last_activity_date": 1458991835, "creation_date": 1439614597, "last_edit_date": 1458991835, "question_id": 32021676, "link": "https://stackoverflow.com/questions/32021676/why-use-an-immutable-reference-to-i32", "title": "Why use an immutable reference to i32", "body": "<p>In the chapter Lifetimes of the Rust book, there's an example:</p>\n\n<pre><code>struct Foo&lt;'a&gt; {\n    x: &amp;'a i32,\n}\n\nfn main() {\n    let y = &amp;5; // this is the same as `let _y = 5; let y = &amp;_y;`\n    let f = Foo { x: y };\n\n    println!(\"{}\", f.x);\n}\n</code></pre>\n\n<p>Why do they use <code>x: &amp;'a i32</code>?</p>\n\n<p>I think if it is just <code>x: i32</code> then they cannot demonstrate the lifetime usage. However, is there any other reason behind it? Is there any production code that uses immutable reference to a primitive type like i32?\n</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 421, "user_id": 5098834, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/3a721c50859c0fd9002ea36f878338c9?s=128&d=identicon&r=PG&f=1", "display_name": "imatahi", "link": "https://stackoverflow.com/users/5098834/imatahi"}, "edited": false, "score": 0, "creation_date": 1439613414, "post_id": 32021503, "comment_id": 51945212, "body": "working. is the &quot;lib.rs&quot; special because it does allow to use &quot;mod&quot;s in it?"}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "reply_to_user": {"reputation": 421, "user_id": 5098834, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/3a721c50859c0fd9002ea36f878338c9?s=128&d=identicon&r=PG&f=1", "display_name": "imatahi", "link": "https://stackoverflow.com/users/5098834/imatahi"}, "edited": false, "score": 1, "creation_date": 1439613461, "post_id": 32021503, "comment_id": 51945222, "body": "Nope, it&#39;s just the root of the tree. Also known as the &#39;crate root.&#39; See the &#39;crates and modules&#39; chapter of the book for elaboration."}, {"owner": {"reputation": 421, "user_id": 5098834, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/3a721c50859c0fd9002ea36f878338c9?s=128&d=identicon&r=PG&f=1", "display_name": "imatahi", "link": "https://stackoverflow.com/users/5098834/imatahi"}, "edited": false, "score": 0, "creation_date": 1439613673, "post_id": 32021503, "comment_id": 51945249, "body": "that&#39;s what I&#39;m saying &quot;Is it special?&quot; Being the root of the tree means yes."}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "reply_to_user": {"reputation": 421, "user_id": 5098834, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/3a721c50859c0fd9002ea36f878338c9?s=128&d=identicon&r=PG&f=1", "display_name": "imatahi", "link": "https://stackoverflow.com/users/5098834/imatahi"}, "edited": false, "score": 1, "creation_date": 1439613726, "post_id": 32021503, "comment_id": 51945258, "body": "It is NOT special in that it&#39;s the only place mod can go. They can go in any of these files."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 421, "user_id": 5098834, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/3a721c50859c0fd9002ea36f878338c9?s=128&d=identicon&r=PG&f=1", "display_name": "imatahi", "link": "https://stackoverflow.com/users/5098834/imatahi"}, "edited": false, "score": 1, "creation_date": 1439630195, "post_id": 32021503, "comment_id": 51948195, "body": "@imatahi, please read the <a href=\"http://doc.rust-lang.org/book/crates-and-modules.html\" rel=\"nofollow noreferrer\">chapter on modules</a> in the official book, it should give you some answers. <code>mod</code> declarations can be present in a any module; they only have to be used correctly."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1439648911, "post_id": 32021503, "comment_id": 51953059, "body": "mod declarations that create modules whose definition is in another file can only be created in the <code>lib.rs</code> due to the file system&#39;s tree structure being used in that case. Since a file cannot have &quot;sub-files&quot;, you cannot create a mod declarations that requires another file."}, {"owner": {"reputation": 421, "user_id": 5098834, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/3a721c50859c0fd9002ea36f878338c9?s=128&d=identicon&r=PG&f=1", "display_name": "imatahi", "link": "https://stackoverflow.com/users/5098834/imatahi"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 2, "creation_date": 1439648962, "post_id": 32021503, "comment_id": 51953074, "body": "@ker, so since <b>mod declarations that create modules whose definition is in another file can only be created in the lib.rs</b> we can say &quot;lib.rs is a special file&quot; in that sense, can&#39;t we?"}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "edited": false, "score": 2, "creation_date": 1439649197, "post_id": 32021503, "comment_id": 51953125, "body": "That&#39;s also not true, as the actual error message says &quot;maybe move this module <code>foo</code> to its own directory via <code>foo&#47;mod.rs</code>&quot; . That&#39;s also a module whose definition is in another file."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1439655798, "post_id": 32021503, "comment_id": 51955030, "body": "yes, <code>mod.rs</code> also allows this, since it&#39;s the &quot;root-node&quot; of a sub-tree that uses the file-system&#39;s tree structure."}, {"owner": {"reputation": 1365, "user_id": 19343, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-ZC3FwNnOomM/AAAAAAAAAAI/AAAAAAAAAHg/b1cPU9b2Wcc/photo.jpg?sz=128", "display_name": "Matthew", "link": "https://stackoverflow.com/users/19343/matthew"}, "edited": false, "score": 0, "creation_date": 1445406627, "post_id": 32021503, "comment_id": 54305163, "body": "I have a similar case to this. I can only use mod mod_a; once, in main.rs. Then for any other files that want to use mod_a, I have to use &quot;use mod_a&quot; or else I get the error about redeclaring the module. Why can&#39;t I use the same syntax to access another module no matter where I&#39;m using it?"}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "edited": false, "score": 0, "creation_date": 1445438510, "post_id": 32021503, "comment_id": 54325700, "body": "Matt, mod declares a module, use brings a name into a scope. So you can&#39;t declare it twice."}], "tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": false, "score": 7, "last_activity_date": 1439612722, "creation_date": 1439612722, "answer_id": 32021503, "question_id": 32021394, "link": "https://stackoverflow.com/questions/32021394/unable-to-declare-a-module-cannot-declare-a-new-module-at-this-location/32021503#32021503", "title": "Unable to declare a module &quot;cannot declare a new module at this location&quot;", "body": "<p>I'm not sure why you're getting that error exactly, but that's not going to do what you want. Modules form a tree structure, and you use mod declarations to form them. So you're trying to create another file2 mod inside the file3 one.</p>\n\n<p>I'm guessing you want file2 and file3 to both be under the main module, not sub modules of each other. To do this, put </p>\n\n<pre><code>mod file2;\nmod file3;\n</code></pre>\n\n<p>In lib.rs, and then in file3.rs</p>\n\n<pre><code>use file2::Struct2;\n</code></pre>\n\n<p>And it should all work. I'm on mobile, so I can't triple check myself, sorry about formatting.</p>\n"}], "owner": {"reputation": 421, "user_id": 5098834, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/3a721c50859c0fd9002ea36f878338c9?s=128&d=identicon&r=PG&f=1", "display_name": "imatahi", "link": "https://stackoverflow.com/users/5098834/imatahi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1469, "favorite_count": 1, "answer_count": 1, "score": 4, "last_activity_date": 1439612722, "creation_date": 1439611308, "question_id": 32021394, "link": "https://stackoverflow.com/questions/32021394/unable-to-declare-a-module-cannot-declare-a-new-module-at-this-location", "title": "Unable to declare a module &quot;cannot declare a new module at this location&quot;", "body": "<p>I have 3 files: lib.rs, file2.rs and file3.rs. I lib.rs I have this:</p>\n\n<pre><code>mod file2;\nuse file2::Struct2;\n</code></pre>\n\n<p>and it's working well. However, doing the same thing in file3 compiles with an error:</p>\n\n<pre><code>mod file2;\nuse file2::Struct2;\n\n=&gt; error: cannot declare a new module at this location\n</code></pre>\n\n<p>And if I remove mod <code>file2</code> declaration I get this:</p>\n\n<pre><code>error: unresolved import `Struct2`\n</code></pre>\n\n<p>What's wrong with this?</p>\n"}, {"tags": ["rust", "concurrent-programming"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1439585760, "post_id": 32018289, "comment_id": 51939534, "body": "Is this a duplicate of either <a href=\"http://stackoverflow.com/questions/31216262/how-to-do-data-parallel-image-processing\" title=\"how to do data parallel image processing\">stackoverflow.com/questions/31216262/&hellip;</a> or <a href=\"http://stackoverflow.com/questions/28599334/how-do-i-run-parallel-threads-of-computation-on-a-partitioned-array\" title=\"how do i run parallel threads of computation on a partitioned array\">stackoverflow.com/questions/28599334/&hellip;</a> perhaps?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1439585827, "post_id": 32018289, "comment_id": 51939560, "body": "Or maybe <a href=\"http://stackoverflow.com/questions/26477757/how-do-you-send-slices-of-a-vec-to-a-task-in-rust\" title=\"how do you send slices of a vec to a task in rust\">stackoverflow.com/questions/26477757/&hellip;</a> or <a href=\"http://stackoverflow.com/questions/29224151/sharing-data-between-several-threads-arc-mutex-combination\" title=\"sharing data between several threads arc mutex combination\">stackoverflow.com/questions/29224151/&hellip;</a> or <a href=\"http://stackoverflow.com/questions/30862646/reading-immutable-value-inside-spawned-thread\" title=\"reading immutable value inside spawned thread\">stackoverflow.com/questions/30862646/&hellip;</a> ?"}, {"owner": {"reputation": 127, "user_id": 2117359, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/e96276b05624a7df78e1ca7c4b3e0d17?s=128&d=identicon&r=PG", "display_name": "A.M. Sultanov", "link": "https://stackoverflow.com/users/2117359/a-m-sultanov"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1439586575, "post_id": 32018289, "comment_id": 51939880, "body": "@Shepmaster thx, you are right, i ll delete my question"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1439587078, "post_id": 32018289, "comment_id": 51940069, "body": "no need to delete, just mark it as a duplicate of what was most useful."}], "owner": {"reputation": 127, "user_id": 2117359, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/e96276b05624a7df78e1ca7c4b3e0d17?s=128&d=identicon&r=PG", "display_name": "A.M. Sultanov", "link": "https://stackoverflow.com/users/2117359/a-m-sultanov"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 163, "favorite_count": 0, "answer_count": 0, "score": 1, "last_activity_date": 1439585697, "creation_date": 1439584640, "last_edit_date": 1439585697, "question_id": 32018289, "link": "https://stackoverflow.com/questions/32018289/concurrent-finder-function", "title": "Concurrent finder function", "body": "<p>I am trying to write a concurrent finder function for vectors, that under the hood splits the <code>Vec</code> into parts and uses a thread for each part. Every thread  iterates over its own piece of the array and if it finds element it should stop the main function. For a vector <code>0..n</code> and 4 threads:</p>\n\n<pre><code>thread1: iterate over 0..(n/4)\nthread2: iterate over n/4..(n/2)\nthread3: iterate over n/2..(n/2 +(n/4))\nthread3: iterate over (n/2 +(n/4))..n \n</code></pre>\n\n<p>This is my implementation. It works, but is not what I want:</p>\n\n<pre><code>use std::thread;\n\nfn finder(ref arr:&amp;Vec&lt;i32&gt;, start:i32, end:i32, find:i32) {\n    // for simplification\n    for c in start..end {\n        if c == find {\n            println!(\"Boom!\");\n        }\n    }\n}\n\nfn main() {\n   let array_init:Vec&lt;i32&gt; = (1..10_000_001).collect();\n   let part = 2500000;\n   let f_number = 9875640;\n\n   let handles: Vec&lt;_&gt; = (1..4).map(|num| {\n        let array = array_init.clone();\n        thread::spawn(move || {\n            finder(&amp;array, (num * part), ((num + 1) * part), f_number);\n        })\n    }).collect();\n\n    for h in handles {\n        h.join().unwrap();\n    }\n}\n</code></pre>\n\n<p>This version is slower than the non-concurrent finder function. The problem is this line: <code>let array = array_init.clone();</code> Every thread makes a copy of the initial array. For massive vectors, this operation is expensive.</p>\n\n<p>I have two questions:</p>\n\n<ol>\n<li><p>What is the Rust way to solve this problem, using only one vector without copies?</p></li>\n<li><p>The initial array is an immutable resource, why can't I share it between threads like this:</p>\n\n<pre><code>   let array_init:Vec&lt;i32&gt; = (1..10_000_001).collect();\n   let part = 2500000;\n   let f_number = 9875640;\n\n   let handles: Vec&lt;_&gt; = (1..4).map(|num| {\n\n        thread::spawn(move || {\n            finder(&amp;array_init, (num * part), ((num + 1) * part), f_number);\n        })\n    }).collect();\n\n    for h in handles {\n        h.join().unwrap();\n    }\n</code></pre></li>\n</ol>\n"}, {"tags": ["performance", "rust"], "answers": [{"comments": [{"owner": {"reputation": 2715, "user_id": 612512, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/bb7101e3af8cd635dbbb891055675534?s=128&d=identicon&r=PG", "display_name": "Christopher Stevenson", "link": "https://stackoverflow.com/users/612512/christopher-stevenson"}, "edited": false, "score": 0, "creation_date": 1439702868, "post_id": 32017555, "comment_id": 51965454, "body": "It&#39;s worth noting that the RFC you mentioned has been merged with the <a href=\"https://github.com/rust-lang/rfcs/pull/1211\" rel=\"nofollow noreferrer\">MIR (Mid-level Intermediate Representation) RFC</a>, which is a <a href=\"http://blog.rust-lang.org/2015/08/14/Next-year.html\" rel=\"nofollow noreferrer\">work priority for 2016</a>. FYI :)"}, {"owner": {"reputation": 73, "user_id": 5228362, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-KeXb4VZyN4o/AAAAAAAAAAI/AAAAAAAAABA/FyOQgDTPVrA/photo.jpg?sz=128", "display_name": "Greg", "link": "https://stackoverflow.com/users/5228362/greg"}, "edited": false, "score": 0, "creation_date": 1439814657, "post_id": 32017555, "comment_id": 52000207, "body": "Thanks! It&#39;s not a huge drag, I&#39;ll wait for that optimization. It would be nice if it would work for &quot;uninitialized&quot;"}], "tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": true, "score": 4, "last_activity_date": 1439589775, "last_edit_date": 1439589775, "creation_date": 1439581231, "answer_id": 32017555, "question_id": 32016187, "link": "https://stackoverflow.com/questions/32016187/how-should-i-initialize-an-arcu8-65536-efficiently/32017555#32017555", "title": "How should I initialize an `Arc&lt;[u8; 65536]&gt;` efficiently?", "body": "<p>Yeah, right now, you have to lean on optimizations, and apparently, it isn't doing it in this case. I'm not sure why.</p>\n\n<p>We are also still working on placement new functionality, which will be able to let you explicitly tell the compiler you want to initialize this on the heap directly. See <a href=\"https://github.com/rust-lang/rfcs/pull/809\" rel=\"nofollow\">https://github.com/rust-lang/rfcs/pull/809</a> (and <a href=\"https://github.com/rust-lang/rfcs/pull/1228\" rel=\"nofollow\">https://github.com/rust-lang/rfcs/pull/1228</a> which proposes changes that are inconsequential for this question). Once this is implemented, this should work:</p>\n\n<pre><code>let buffer: Arc&lt;_&gt; = box [0u8; 65536];\n</code></pre>\n"}], "owner": {"reputation": 73, "user_id": 5228362, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-KeXb4VZyN4o/AAAAAAAAAAI/AAAAAAAAABA/FyOQgDTPVrA/photo.jpg?sz=128", "display_name": "Greg", "link": "https://stackoverflow.com/users/5228362/greg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 127, "favorite_count": 0, "accepted_answer_id": 32017555, "answer_count": 1, "score": 7, "last_activity_date": 1439589775, "creation_date": 1439575490, "last_edit_date": 1439579444, "question_id": 32016187, "link": "https://stackoverflow.com/questions/32016187/how-should-i-initialize-an-arcu8-65536-efficiently", "title": "How should I initialize an `Arc&lt;[u8; 65536]&gt;` efficiently?", "body": "<p>I'm writing an application creating <code>Arc</code> objects of large arrays:</p>\n\n<pre><code>use std::sync::Arc\n\nlet buffer: Arc&lt;[u8; 65536]&gt; = Arc::new([0u8; 65536]);\n</code></pre>\n\n<p>After profiling this code, I've found that a <code>memmove</code> is occurring, making this slow. With other calls to <code>Arc::new</code>, the compiler seems smart enough to initialize the stored data without the <code>memmove</code>.</p>\n\n<p>Believe it or not, the above code is faster than:</p>\n\n<pre><code>use std::sync::Arc;\nuse std::mem;\n\nlet buffer: Arc&lt;[u8; 65536]&gt; = Arc::new(unsafe {mem::uninitialized})\n</code></pre>\n\n<p>Which is a bit of a surprise.</p>\n\n<p>Insights welcome, I expect this is a compiler issue.</p>\n"}, {"tags": ["generics", "macros", "rust", "ffi"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1439643033, "post_id": 32016109, "comment_id": 51951282, "body": "This is just my opinion, but it really feels like you are trying to bend Rust in ways that it wasn&#39;t meant to be used. I view Rust as an excellent statically typed language, but that typing is just that \u2014 static. It&#39;s an interesting question, but you <i>might</i> get more useful answers if you include what goal you are trying to accomplish, using your work to date as an example of what you&#39;ve tried."}, {"owner": {"reputation": 1010, "user_id": 2067665, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/0c86e226759ee03937af84103fd1b1ab?s=128&d=identicon&r=PG", "display_name": "ragingSloth", "link": "https://stackoverflow.com/users/2067665/ragingsloth"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1439668227, "post_id": 32016109, "comment_id": 51958879, "body": "I&#39;m trying to JIT compile some code. Programmatic signature creation makes that easier to do while maintaining sysv ABI compatability. There are other ways to skin the cat, but being able to build a function signature at runtime seems like the most elegant as it saves me the trouble of manually setting up registers and stack, i.e. generic dynamic dispatch. I&#39;ve mostly worked with macros, trying to turn tuples into arguments, I was hoping for something like *args, but as you said it breaks the typing. I think closure currying could work, but I&#39;m not sure it can maintain ABI compatability."}, {"owner": {"reputation": 1010, "user_id": 2067665, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/0c86e226759ee03937af84103fd1b1ab?s=128&d=identicon&r=PG", "display_name": "ragingSloth", "link": "https://stackoverflow.com/users/2067665/ragingsloth"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1439669180, "post_id": 32016109, "comment_id": 51959187, "body": "<a href=\"https://github.com/rust-lang/rfcs/issues/376\" rel=\"nofollow noreferrer\">github.com/rust-lang/rfcs/issues/376</a> seems relevant"}], "owner": {"reputation": 1010, "user_id": 2067665, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/0c86e226759ee03937af84103fd1b1ab?s=128&d=identicon&r=PG", "display_name": "ragingSloth", "link": "https://stackoverflow.com/users/2067665/ragingsloth"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 167, "favorite_count": 0, "answer_count": 0, "score": 5, "last_activity_date": 1439672402, "creation_date": 1439575183, "last_edit_date": 1439672402, "question_id": 32016109, "link": "https://stackoverflow.com/questions/32016109/construct-and-call-function-programmatically", "title": "Construct and call function programmatically", "body": "<p>I have programmatically constructed a C function in memory, and I'm able to call it in Rust like so.</p>\n\n<pre><code>type AddFn = extern \"C\" fn(isize, isize) -&gt; isize;\nlet Add = build_function::&lt;AddFn&gt;(&amp;region, code);\n\nfn build_function&lt;T&gt;(region: &amp;MappedRegion, contents: &amp;[u8]) -&gt; Box&lt;T&gt; {\n    unsafe {\n        ...\n        mem::transmute(Box::new(region.addr))\n    }\n}  \n</code></pre>\n\n<p>This requires me to know the signature for my generated function, in this case <code>AddFn</code>. I would like to be able to construct this signature at runtime e.g. <code>let x = 3u8; macro!(x, f64) == fn(f64, f64, f64) -&gt; f64</code>. I can find no means to generate functions in this manner. A related issue is the inability to call functions generated at runtime. Without partial application or a means to accomplish the logic above I cannot figure out how to call a generated function without a known signature. Is it possible to generate a function signature programmatically this way in Rust?</p>\n\n<p>UPDATE:\nRust's support for variadic C functions <code>(extern \"C\" fn(x:int, ...)</code> allows for arbitrary sysv ABI compatible function signatures. Now the only issue is calling them at runtime. Is there any way to perform partial application on named functions?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1439572593, "post_id": 32015265, "comment_id": 51933154, "body": "Have you read <a href=\"http://doc.rust-lang.org/book/crates-and-modules.html\" rel=\"nofollow noreferrer\"><i>The Rust Programming Language</i></a> chapter on modules?"}], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 9, "last_activity_date": 1439576005, "last_edit_date": 1592644375, "creation_date": 1439576005, "answer_id": 32016325, "question_id": 32015265, "link": "https://stackoverflow.com/questions/32015265/unable-to-import-a-module-struct-from-the-same-folder/32016325#32016325", "title": "Unable to import a module (struct) from the same folder", "body": "<p>You need to declare the <code>user</code> module in <code>lib.rs</code> first, and then import the structure from it:</p>\n<pre><code>mod user;\n\nuse user::User;\n</code></pre>\n<p>It is important that <code>user</code> in <code>mod user</code> coincide with <code>user</code> in <code>user.rs</code> file name.</p>\n<p>Rust module system can be confusing for novices in the language; you really should read the <a href=\"http://doc.rust-lang.org/book/crates-and-modules.html\" rel=\"noreferrer\">official documentation</a> on this.</p>\n"}], "owner": {"reputation": 421, "user_id": 5098834, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/3a721c50859c0fd9002ea36f878338c9?s=128&d=identicon&r=PG&f=1", "display_name": "imatahi", "link": "https://stackoverflow.com/users/5098834/imatahi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2753, "favorite_count": 0, "accepted_answer_id": 32016325, "answer_count": 1, "score": 1, "last_activity_date": 1439576005, "creation_date": 1439571878, "question_id": 32015265, "link": "https://stackoverflow.com/questions/32015265/unable-to-import-a-module-struct-from-the-same-folder", "title": "Unable to import a module (struct) from the same folder", "body": "<p>I have 2 files: lib.rs and user.rs</p>\n\n<p><strong>user.rs:</strong></p>\n\n<pre><code>struct User { .... }\n</code></pre>\n\n<p>and <strong>lib.rs</strong>:</p>\n\n<pre><code>use User; //  unresolved import `User`\n</code></pre>\n\n<p>Whatever I tried it hasn't panned out, for example:</p>\n\n<pre><code>use self::User; //  unresolved import `User`\nuse super::User;\n</code></pre>\n"}, {"tags": ["process", "rust"], "comments": [{"owner": {"reputation": 2403, "user_id": 3190054, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/b7de233f9b761d1d0d75d64b608aca88?s=128&d=identicon&r=PG&f=1", "display_name": "kezzos", "link": "https://stackoverflow.com/users/3190054/kezzos"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1439564839, "post_id": 32012986, "comment_id": 51928779, "body": "Well, I was wondering if there was something as simple as capturing the output as it is generated. In python for example, you set a process running and you can use stdout=PIPE from the process and &#39;for line in sys.stdin&#39; to capture the output into the parent script, if that makes sense..."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1505569911, "last_edit_date": 1505569911, "creation_date": 1439565047, "answer_id": 32013264, "question_id": 32012986, "link": "https://stackoverflow.com/questions/32012986/reading-from-a-processes-stdout-without-placing-it-all-in-memory-at-once/32013264#32013264", "title": "Reading from a processes stdout without placing it all in memory at once", "body": "<p>You don't need non-blocking IO for what you want. You can simply use <a href=\"https://doc.rust-lang.org/std/io/trait.BufRead.html\" rel=\"nofollow noreferrer\">a buffered reader</a> to loop over the lines of input. This assumes that you always need a full line, and that a full line isn't too much data:</p>\n\n<pre><code>use std::process::{Command, Stdio};\nuse std::io::{BufRead, BufReader};\n\nfn main() {\n    let mut child = Command::new(\"yes\")\n        .stdout(Stdio::piped())\n        .spawn()\n        .expect(\"Unable to spawn program\");\n\n    if let Some(ref mut stdout) = child.stdout {\n        let lines = BufReader::new(stdout).lines().enumerate().take(10);\n        for (counter, line) in lines {\n            println!(\"{}, {:?}\", counter, line);\n        }\n    }\n}\n</code></pre>\n\n<p><a href=\"http://doc.rust-lang.org/std/process/struct.ChildStdout.html\" rel=\"nofollow noreferrer\"><code>ChildStdout</code></a> implements <code>Read</code> for itself, but not for an immutable reference (<code>&amp;ChildStdout</code>). Although we own the standard out, we don't want to consume it, so we need a reference of some kind. <a href=\"http://doc.rust-lang.org/std/io/trait.Read.html\" rel=\"nofollow noreferrer\"><code>Read</code></a> <em>is</em> implemented for a mutable reference to any other type that is itself <code>Read</code>, so we switch to a mutable reference. Then <code>child</code> needs to be mutable as well.</p>\n"}], "owner": {"reputation": 2403, "user_id": 3190054, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/b7de233f9b761d1d0d75d64b608aca88?s=128&d=identicon&r=PG&f=1", "display_name": "kezzos", "link": "https://stackoverflow.com/users/3190054/kezzos"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 643, "favorite_count": 0, "accepted_answer_id": 32013264, "answer_count": 1, "score": 1, "last_activity_date": 1505569911, "creation_date": 1439564109, "last_edit_date": 1505569776, "question_id": 32012986, "link": "https://stackoverflow.com/questions/32012986/reading-from-a-processes-stdout-without-placing-it-all-in-memory-at-once", "title": "Reading from a processes stdout without placing it all in memory at once", "body": "<p>I am trying to capture the output from an external tool which is run in a separate process. I would like to do so in a non-blocking way as the output is larger than memory. I saw <a href=\"https://stackoverflow.com/questions/26550962/how-would-you-stream-output-from-a-process-in-rust\">How would you stream output from a Process in Rust?</a> but I am not sure how to proceed. I have copied an example from <a href=\"http://rustbyexample.com/std_misc/process/pipe.html\" rel=\"nofollow noreferrer\">here</a> but this seems to capture output into a variable before proceeding. So far I have:</p>\n\n<pre><code>let path = \"/Documents/Ruststuff/DB30_igh_badPE.bam\";\nlet output = Command::new(\"samtools\")\n    .arg(\"view\")\n    .arg(\"-H\")\n    .arg(path)\n    .stdin(Stdio::piped())\n    .stdout(Stdio::piped())\n    .spawn()\n    .unwrap_or_else(|e| panic!(\"failed {}\", e));\n\nlet mut s = String::new();\nmatch output.stdout.unwrap().read_to_string(&amp;mut s) {\n    Err(why) =&gt; panic!(\"{}\", Error::description(&amp;why)),\n    Ok(_) =&gt; print!(\"{}\", s),\n}\n</code></pre>\n\n<p>Is it possible to loop over <code>stdout</code> from the child process instead of using the match? Something like:</p>\n\n<pre><code>for line in &amp;output.stdout {}\n</code></pre>\n"}, {"tags": ["iterator", "rust"], "comments": [{"owner": {"reputation": 61, "user_id": 5222798, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d68137a43cb612c4f628cc548981dac9?s=128&d=identicon&r=PG&f=1", "display_name": "milancio", "link": "https://stackoverflow.com/users/5222798/milancio"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1439803618, "post_id": 32011533, "comment_id": 51993521, "body": "I apologize, these are my first steps on Stack Overflow and I did not realized I could have add an answer to my own question. Thanks again for your help - your idea helped me to find the solution (posted below)."}], "answers": [{"comments": [{"owner": {"reputation": 61, "user_id": 5222798, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d68137a43cb612c4f628cc548981dac9?s=128&d=identicon&r=PG&f=1", "display_name": "milancio", "link": "https://stackoverflow.com/users/5222798/milancio"}, "edited": false, "score": 0, "creation_date": 1439563110, "post_id": 32012064, "comment_id": 51927648, "body": "Interesting, it could be working. The only problem left is that when I consume the map at the beginning I won&#39;t be able to test if the left iterator keys are present in the map. However, using an Option&lt;&gt; with some restructuring of the code might work. I&#39;ll try to play with it and I&#39;ll update the question in case it work.  Many thanks for your time"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 61, "user_id": 5222798, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d68137a43cb612c4f628cc548981dac9?s=128&d=identicon&r=PG&f=1", "display_name": "milancio", "link": "https://stackoverflow.com/users/5222798/milancio"}, "edited": false, "score": 0, "creation_date": 1439563581, "post_id": 32012064, "comment_id": 51927987, "body": "@milancio I&#39;ve updated with a working left outer join"}, {"owner": {"reputation": 61, "user_id": 5222798, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d68137a43cb612c4f628cc548981dac9?s=128&d=identicon&r=PG&f=1", "display_name": "milancio", "link": "https://stackoverflow.com/users/5222798/milancio"}, "edited": false, "score": 0, "creation_date": 1439566192, "post_id": 32012064, "comment_id": 51929658, "body": "Unfortunately hash join strategy is not symmetric, so flipping the input won&#39;t do. The left iterator is not guaranteed to be collectable in RAM, only the right one. It is this what it makes so efficient, because the left iter can be arbitrarily large and do not need to be sorted. I&#39;ve already finished <a href=\"https://github.com/milancio42/rust-itertools/blob/merge-join/src/merge_join.rs\" rel=\"nofollow noreferrer\">merge join</a> join if you&#39;re interested ;)"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1439563565, "last_edit_date": 1439563565, "creation_date": 1439561216, "answer_id": 32012064, "question_id": 32011533, "link": "https://stackoverflow.com/questions/32011533/an-iterator-adaptor-implementing-an-sql-like-right-outer-join-using-a-hashmap/32012064#32012064", "title": "An iterator adaptor implementing an SQL-like RIGHT OUTER JOIN using a HashMap", "body": "<p>You cannot store the <code>Values</code> iterator because it contains references to the <code>HashMap</code>. These references could become invalid if you move the map. However, you can <em>consume</em> the <code>HashMap</code> using the <code>into_iter</code> method. That owns all the values of the <code>HashMap</code> and can be moved into a new struct.</p>\n\n<p>Here's a tweaking of your code from the earlier question. This isn't yet a left or right join. There's complexity about the switch from being done with one iterator to finishing off the other iterator.</p>\n\n<pre><code>use std::collections::hash_map::{HashMap, IntoIter};\nuse std::hash::Hash;\n\nstruct Foo&lt;K, V&gt;\n    where K: Hash + Eq,\n          V: Clone,\n{\n    iter: IntoIter&lt;K, (V, bool)&gt;,\n}\n\nimpl&lt;K, V&gt; Foo&lt;K, V&gt;\n    where K: Hash + Eq,\n          V: Clone,\n{\n    fn new&lt;I&gt;(it: I) -&gt; Self\n        where I: Iterator&lt;Item=(K, V)&gt;\n    {\n        let mut map = HashMap::new();\n        for (k, v) in it {\n            map.insert(k, (v, false));\n        }\n        Foo { iter: map.into_iter() }\n    }\n}\n\nimpl&lt;K, V&gt; Iterator for Foo&lt;K, V&gt;\n    where K: Hash + Eq,\n          V: Clone,\n{\n    type Item = V;\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        loop {\n            match self.iter.next() {\n                Some((_, (v, false))) =&gt; return Some(v.clone()),\n                Some(_) =&gt; continue,\n                None =&gt; return None,\n            }\n        }\n    }\n}\n\nfn main() {\n    let it = (0..).zip(\"AB\".chars());\n    let foo = Foo::new(it);\n    for v in foo {\n        println!(\"{}\", v);\n    }\n}\n</code></pre>\n\n<p><strong>However</strong> you don't need to do any of that to get what you want. You can simply create a hashmap and check it as you iterate over the other item. I accidentally created a left outer join, but just flip the arguments to get a right outer join. ^_^</p>\n\n<pre><code>use std::collections::hash_map::HashMap;\nuse std::hash::Hash;\n\nstruct LeftOuterJoin&lt;L, K, RV&gt; {\n    left: L,\n    right: HashMap&lt;K, RV&gt;,\n}\n\nimpl&lt;L, K, RV&gt; LeftOuterJoin&lt;L, K, RV&gt; \n    where K: Hash + Eq\n{\n    fn new&lt;LI, RI&gt;(left: LI, right: RI) -&gt; Self\n        where L: Iterator&lt;Item=LI::Item&gt;,\n              LI: IntoIterator&lt;IntoIter=L&gt;,\n              RI: IntoIterator&lt;Item=(K, RV)&gt;\n    {\n        LeftOuterJoin {\n            left: left.into_iter(),\n            right: right.into_iter().collect()\n        }\n    }\n}\n\nimpl&lt;L, K, LV, RV&gt; Iterator for LeftOuterJoin&lt;L, K, RV&gt;\n    where L: Iterator&lt;Item=(K, LV)&gt;,\n          K: Hash + Eq,\n          RV: Clone\n{\n    type Item = (K, LV, Option&lt;RV&gt;);\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        match self.left.next() {\n            Some((k, lv)) =&gt; {\n                let rv = self.right.get(&amp;k);\n                Some((k, lv, rv.cloned()))\n            },\n            None =&gt; None,\n        }\n    }\n}\n\nfn main() {\n    let mut left = HashMap::new();\n    left.insert(1, \"Alice\");\n    left.insert(2, \"Bob\");\n\n    let mut right = HashMap::new();\n    right.insert(1, \"Programmer\");\n\n    for (id, name, job) in LeftOuterJoin::new(left.into_iter(), right) {\n        println!(\"{} ({}) is a {:?}\", name, id, job);\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 61, "user_id": 5222798, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d68137a43cb612c4f628cc548981dac9?s=128&d=identicon&r=PG&f=1", "display_name": "milancio", "link": "https://stackoverflow.com/users/5222798/milancio"}, "is_accepted": false, "score": 0, "last_activity_date": 1439803376, "creation_date": 1439803376, "answer_id": 32046805, "question_id": 32011533, "link": "https://stackoverflow.com/questions/32011533/an-iterator-adaptor-implementing-an-sql-like-right-outer-join-using-a-hashmap/32046805#32046805", "title": "An iterator adaptor implementing an SQL-like RIGHT OUTER JOIN using a HashMap", "body": "<p>Thanks to Shepmaster's idea of using <code>std::collections::hash_map::IntoIter</code> I've managed to solve the problem.</p>\n\n<p>Here is the complete solution for RIGHT OUTER JOIN using the hash join strategy:</p>\n\n<pre><code>use std::collections::hash_map::{HashMap, IntoIter,};\nuse std::mem;\nuse std::hash::Hash;\n\n#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\npub struct HashJoinRightOuter&lt;L, K, RV&gt; {\n    left: L,\n    map: HashMap&lt;K, (RV, bool)&gt;,\n    /// exclusion iterator - yields the unmatched values from the map. It is created once the left\n    /// iterator is exhausted\n    excl_iter: Option&lt;IntoIter&lt;K, (RV, bool)&gt;&gt;,\n}\n\nimpl&lt;L, K, RV&gt; HashJoinRightOuter&lt;L, K, RV&gt; \n    where K: Hash + Eq,\n{\n    /// Create a `HashJoinRightOuter` iterator.\n    pub fn new&lt;LI, RI&gt;(left: LI, right: RI) -&gt; Self\n        where L: Iterator&lt;Item=LI::Item&gt;,\n              LI: IntoIterator&lt;IntoIter=L&gt;,\n              RI: IntoIterator&lt;Item=(K, RV)&gt;\n    {\n        let mut map: HashMap&lt;K, (RV, bool)&gt; = HashMap::new();\n        for (k, v) in right.into_iter() {\n            map.insert(k, (v, false));\n        }\n        HashJoinRightOuter {\n            left: left.into_iter(),\n            map: map,\n            excl_iter: None,\n        }\n    }\n\n    /// Moves the map to `self.excl_iter`\n    ///\n    /// Once the left iterator is exhausted, the info about which keys were matched is complete.\n    /// To be able to iterate over map's values we need to move it into its `IntoIter`.\n    fn set_excl_iter(&amp;mut self) {\n        let map = mem::replace(&amp;mut self.map, HashMap::&lt;K, (RV, bool)&gt;::new());\n        self.excl_iter = Some(map.into_iter());\n    }\n}\n\nimpl&lt;L, K, LV, RV&gt; Iterator for HashJoinRightOuter&lt;L, K, RV&gt; \n    where L: Iterator&lt;Item=(K, LV)&gt;,\n          K: Hash + Eq,\n          RV: Clone,\n{\n    type Item = (Option&lt;LV&gt;, RV);\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        loop {\n            match self.excl_iter {\n                // the left iterator is not yet exhausted\n                None =&gt; match self.left.next() {\n                    Some((lk, lv)) =&gt; match self.map.get_mut(&amp;lk) {\n                        Some(rt) =&gt; {\n                            rt.1 = true; // flag as matched\n                            return Some((Some(lv), Clone::clone(&amp;rt.0)))\n                        },\n                        None =&gt; continue, // not interested in unmatched left value\n                    },\n                    // the left iterator is exhausted so move the map into `self.excl_iter`.\n                    None =&gt; self.set_excl_iter(),\n                },\n                // iterate over unmatched values\n                Some(ref mut r) =&gt; match r.next() {\n                    Some((_, (rv, matched))) =&gt; {\n                        if !matched {\n                            return Some((None, rv));\n                        } else {\n                            continue;\n                        }\n                    },\n                    None =&gt; return None,\n                }\n            }\n        }\n    }\n}\n\nfn main() {\n    let a = (0..).zip(\"AB\".chars());\n    let b = (1..).zip(\"XY\".chars());\n    let mut it = HashJoinRightOuter::new(a, b);\n    assert_eq!(it.next(), Some((Some('B'), 'X')));\n    assert_eq!(it.next(), Some((None, 'Y')));\n    assert_eq!(it.next(), None);\n}\n</code></pre>\n\n<p>At the beginning I failed because I tried to store both the data and it's reference in the same struct, which has no meaning anyway. What I <em>really</em> wanted was to store the data first, do some magic with it and once done, <strong>move</strong> it into another field to work with its transformation.</p>\n\n<p>This can be used to solve other self-referencing struct problems as well. </p>\n"}], "owner": {"reputation": 61, "user_id": 5222798, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d68137a43cb612c4f628cc548981dac9?s=128&d=identicon&r=PG&f=1", "display_name": "milancio", "link": "https://stackoverflow.com/users/5222798/milancio"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 436, "favorite_count": 0, "accepted_answer_id": 32012064, "answer_count": 2, "score": 4, "last_activity_date": 1439803376, "creation_date": 1439559587, "last_edit_date": 1495542610, "question_id": 32011533, "link": "https://stackoverflow.com/questions/32011533/an-iterator-adaptor-implementing-an-sql-like-right-outer-join-using-a-hashmap", "title": "An iterator adaptor implementing an SQL-like RIGHT OUTER JOIN using a HashMap", "body": "<p>I'm trying to extend bluss's <a href=\"http://bluss.github.io/rust-itertools/doc/itertools/index.html\" rel=\"nofollow noreferrer\">rust-itertools</a> with SQL-like join iterators. I encountered a particular problem with RIGHT OUTER JOIN using a hash join strategy (the strategy itself is actually very simple). </p>\n\n<p>The iterator adaptor struct takes 2 input iterators of which the second (the right) is loaded into the HashMap. The iteration works as follows:</p>\n\n<ol>\n<li>The item from the left iterator is matched against the map - in case of a match return both items</li>\n<li>When the left iterator is exhausted, return the non-matched values from the map</li>\n</ol>\n\n<p><strong>The problem</strong> is with the second part where I tried to store the map's Values iterator along with the map to store its iteration state. But as I learned in this <a href=\"https://stackoverflow.com/questions/31988530/how-to-store-hashmap-and-its-values-iterator-in-the-same-struct\">answer</a>, it's not possible in rust.\nUnfortunately I have no idea how it could be done otherwise.</p>\n\n<p>Here is the complete code for the INNER JOIN adaptor, which does the first part:</p>\n\n<pre><code>use std::collections::HashMap;\nuse std::hash::Hash;\n\npub struct HashJoinInner&lt;I, K, V0, V1&gt; where\n    I: Iterator&lt;Item=(K, V0)&gt;,\n    K: Hash + Eq,\n    V1: Clone,\n{\n    left: I,\n    right: HashMap&lt;K, V1&gt;,\n}\n\nimpl&lt;I, K, V0, V1&gt; HashJoinInner&lt;I, K, V0, V1&gt; where\n    I: Iterator&lt;Item=(K, V0)&gt;,\n    K: Hash + Eq,\n    V1: Clone,\n{\n    /// Create a `HashJoinInner` iterator.\n    pub fn new&lt;J&gt;(l: I, r: J) -&gt; Self\n        where J: Iterator&lt;Item=(K, V1)&gt;\n    {\n        let mut hm: HashMap&lt;K, V1&gt; = HashMap::new();\n        for (k, v) in r {\n            hm.insert(k, v);\n        }\n        HashJoinInner {\n            left: l,\n            right: hm,\n        }\n    }\n}\n\nimpl&lt;I, K, V0, V1&gt; Iterator for HashJoinInner&lt;I, K, V0, V1&gt; where\n    I: Iterator&lt;Item=(K, V0)&gt;,\n    K: Hash + Eq,\n    V1: Clone,\n{\n    type Item = (V0, V1);\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        loop {\n            match self.left.next() {\n                Some((k0, v0)) =&gt; match self.right.get(&amp;k0) {\n                    Some(v1) =&gt; return Some((v0, Clone::clone(v1))),\n                    None =&gt; continue,\n                },\n                None =&gt; return None,\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>I'll be grateful for any idea.</p>\n"}, {"tags": ["postgresql", "rust"], "comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 1, "creation_date": 1439544154, "post_id": 32006504, "comment_id": 51915643, "body": "A wild guess: load fields which can be NULL as <code>Option</code>s. I don&#39;t understand from your wording whether it&#39;s <code>date</code> or <code>rating</code> can be NULL in your case, but if it&#39;s the latter, it would look like this: <code>let rating: Option&lt;String&gt; = row.get(&quot;rating&quot;);</code>."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1439545412, "post_id": 32006504, "comment_id": 51916504, "body": "Great! I&#39;ll add it as an answer then."}], "answers": [{"comments": [{"owner": {"reputation": 1962, "user_id": 982364, "user_type": "registered", "accept_rate": 41, "profile_image": "https://www.gravatar.com/avatar/8f7fcd81979b29f5fd4ddf155987e588?s=128&d=identicon&r=PG", "display_name": "Tom", "link": "https://stackoverflow.com/users/982364/tom"}, "edited": false, "score": 0, "creation_date": 1553780547, "post_id": 32007074, "comment_id": 97518447, "body": "what about get_opt() ?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1962, "user_id": 982364, "user_type": "registered", "accept_rate": 41, "profile_image": "https://www.gravatar.com/avatar/8f7fcd81979b29f5fd4ddf155987e588?s=128&d=identicon&r=PG", "display_name": "Tom", "link": "https://stackoverflow.com/users/982364/tom"}, "edited": false, "score": 0, "creation_date": 1553953442, "post_id": 32007074, "comment_id": 97581729, "body": "@Tom The <a href=\"https://docs.rs/postgres/0.15.2/postgres/rows/struct.Row.html#method.get_opt\" rel=\"nofollow noreferrer\">documentation for <code>get_opt</code></a> states: <i>Returns <code>None</code> if the index does not reference a column</i>. If you have a nullable column that also might not be in the row, then you&#39;d end up with an <code>Option&lt;Option&lt;T&gt;&gt;</code>."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 4, "last_activity_date": 1553953332, "last_edit_date": 1553953332, "creation_date": 1439545458, "answer_id": 32007074, "question_id": 32006504, "link": "https://stackoverflow.com/questions/32006504/how-to-handle-an-optional-value-returned-by-a-query-using-the-postgres-crate/32007074#32007074", "title": "How to handle an optional value returned by a query using the postgres crate?", "body": "<p>As described in <a href=\"https://docs.rs/postgres/0.15.2/postgres/types/trait.FromSql.html#nullability\" rel=\"nofollow noreferrer\">the documentation</a>:</p>\n\n<blockquote>\n  <h3>Nullability</h3>\n  \n  <p>In addition to the types listed above, <code>FromSql</code> is implemented for\n  <code>Option&lt;T&gt;</code> where <code>T</code> implements <code>FromSql</code>. An <code>Option&lt;T&gt;</code> represents a\n  nullable Postgres value.</p>\n</blockquote>\n\n<p>Request an <code>Option&lt;Type&gt;</code> for the field that can be NULL; then the library will automatically convert NULL to <code>None</code>:</p>\n\n<pre><code>let rating: Option&lt;String&gt; = row.get(\"rating\");\n</code></pre>\n"}], "owner": {"reputation": 694, "user_id": 5179678, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/HDDwl.jpg?s=128&g=1", "display_name": "mgul", "link": "https://stackoverflow.com/users/5179678/mgul"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 597, "favorite_count": 0, "accepted_answer_id": 32007074, "answer_count": 1, "score": 2, "last_activity_date": 1553953332, "creation_date": 1439543766, "last_edit_date": 1439558874, "question_id": 32006504, "link": "https://stackoverflow.com/questions/32006504/how-to-handle-an-optional-value-returned-by-a-query-using-the-postgres-crate", "title": "How to handle an optional value returned by a query using the postgres crate?", "body": "<p>I'm trying to get a value for a query, but this value can be NULL and I don't know how to handle it in Rust. Here is my code:</p>\n\n<pre><code>let stmt = conn.prepare(\"SELECT * FROM pictures\").unwrap();\n\nfor row in stmt.query(&amp;[]).unwrap() {\n    let id: i32 = row.get(\"id\");\n    let author: String = row.get(\"author\");\n    let description: String = row.get(\"description\");\n\n    let rating: String = row.get(\"rating\");\n\n    let gps_lat: String = row.get(\"gps_lat\");\n    let gps_long: String = row.get(\"gps_long\");\n    let date_taken: chrono::NaiveDate = row.get(\"date_taken\");\n\n    println!(\"id        -&gt; {}\\n\n           author      -&gt; {}\\n\n           description -&gt; {}\\n\n           rating      -&gt; {}\\n\n           gps_lat     -&gt; {}\\n\n           gps_long    -&gt; {}\\n\n           date        -&gt; {}\\n\n       \", id, author, description, rating, gps_lat, gps_long, date_taken);\n}\n</code></pre>\n\n<p>When I execute the code, the first picture comes well because the rating column isn't NULL. But the second picture fails and gives me \"Conversion(WasNull)\", because there is not rating and I try to convert a NULL into a chrono::NaiveDate.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 421, "user_id": 5098834, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/3a721c50859c0fd9002ea36f878338c9?s=128&d=identicon&r=PG&f=1", "display_name": "imatahi", "link": "https://stackoverflow.com/users/5098834/imatahi"}, "edited": false, "score": 0, "creation_date": 1439544852, "post_id": 32005019, "comment_id": 51916147, "body": "only String? no another way?"}, {"owner": {"reputation": 421, "user_id": 5098834, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/3a721c50859c0fd9002ea36f878338c9?s=128&d=identicon&r=PG&f=1", "display_name": "imatahi", "link": "https://stackoverflow.com/users/5098834/imatahi"}, "edited": false, "score": 0, "creation_date": 1439547746, "post_id": 32005019, "comment_id": 51918003, "body": "meaning, no way to return <code>&amp;str</code>?"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 421, "user_id": 5098834, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/3a721c50859c0fd9002ea36f878338c9?s=128&d=identicon&r=PG&f=1", "display_name": "imatahi", "link": "https://stackoverflow.com/users/5098834/imatahi"}, "edited": false, "score": 0, "creation_date": 1439557218, "post_id": 32005019, "comment_id": 51923669, "body": "@imatahi: you can\u2019t have a reference to something that doesn\u2019t exist."}, {"owner": {"reputation": 421, "user_id": 5098834, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/3a721c50859c0fd9002ea36f878338c9?s=128&d=identicon&r=PG&f=1", "display_name": "imatahi", "link": "https://stackoverflow.com/users/5098834/imatahi"}, "edited": false, "score": 0, "creation_date": 1439566731, "post_id": 32005019, "comment_id": 51929961, "body": "Ok. What do you mean by &quot;You\u2019re creating a string&quot; - where exactly is it created?"}, {"owner": {"reputation": 421, "user_id": 5098834, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/3a721c50859c0fd9002ea36f878338c9?s=128&d=identicon&r=PG&f=1", "display_name": "imatahi", "link": "https://stackoverflow.com/users/5098834/imatahi"}, "edited": false, "score": 0, "creation_date": 1439577908, "post_id": 32005019, "comment_id": 51935931, "body": "and how come then this is working <code>fn abc() -&gt; &amp;&#39;static str {     &quot;fdsfds343432fdsfd&quot;   }</code>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 421, "user_id": 5098834, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/3a721c50859c0fd9002ea36f878338c9?s=128&d=identicon&r=PG&f=1", "display_name": "imatahi", "link": "https://stackoverflow.com/users/5098834/imatahi"}, "edited": false, "score": 0, "creation_date": 1439643450, "post_id": 32005019, "comment_id": 51951384, "body": "@imatahi <code>format!</code> allocates a brand new <code>String</code>. Your <code>&amp;&#39;static str </code> lives for the entire life of the program (it&#39;s &quot;owned&quot; by the compiled code). After the function returns, nothing owns your created string, so it is dropped and any references to it become invalid."}, {"owner": {"reputation": 421, "user_id": 5098834, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/3a721c50859c0fd9002ea36f878338c9?s=128&d=identicon&r=PG&f=1", "display_name": "imatahi", "link": "https://stackoverflow.com/users/5098834/imatahi"}, "edited": false, "score": 0, "creation_date": 1439649176, "post_id": 32005019, "comment_id": 51953120, "body": "so how about &quot;you can\u2019t have a reference to something that doesn\u2019t exist.&quot; in case of <code>&amp;&#39;static str</code>?"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 421, "user_id": 5098834, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/3a721c50859c0fd9002ea36f878338c9?s=128&d=identicon&r=PG&f=1", "display_name": "imatahi", "link": "https://stackoverflow.com/users/5098834/imatahi"}, "edited": false, "score": 0, "creation_date": 1440101200, "post_id": 32005019, "comment_id": 52146143, "body": "@imatahi: the underlying string is stored in the compiled program."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": false, "score": 3, "last_activity_date": 1439538945, "creation_date": 1439538945, "answer_id": 32005019, "question_id": 32004699, "link": "https://stackoverflow.com/questions/32004699/again-borrowed-value-does-not-live-long-enough/32005019#32005019", "title": "again - borrowed value does not live long enough", "body": "<p>You\u2019re creating a string and then trying to return a reference to it, but the string that you\u2019re returning a reference to is not stored anywhere. You should return the <code>String</code> itself.</p>\n"}], "owner": {"reputation": 421, "user_id": 5098834, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/3a721c50859c0fd9002ea36f878338c9?s=128&d=identicon&r=PG&f=1", "display_name": "imatahi", "link": "https://stackoverflow.com/users/5098834/imatahi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 638, "favorite_count": 0, "closed_date": 1439550441, "answer_count": 1, "score": 0, "last_activity_date": 1439538945, "creation_date": 1439537795, "question_id": 32004699, "link": "https://stackoverflow.com/questions/32004699/again-borrowed-value-does-not-live-long-enough", "closed_reason": "Duplicate", "title": "again - borrowed value does not live long enough", "body": "<p>I can't understand what's going on here:</p>\n\n<pre><code>struct MyStruct&lt;'a&gt; {\n  field1: i32,\n  field2: &amp;'a str,\n}\n\nimpl&lt;'a&gt; MyStruct&lt;'a&gt; {\n    fn foo(var1: i32, var2: i32, var3: &amp;str) -&gt; &amp;'a str {\n      &amp;format!(\"{} {} {} fdsfdsfd\", var1, var2, var3)\n    }\n}\n\nfn main() {\n}\n</code></pre>\n\n<p>Should I somehow return str with lifetime <code>'a</code> from <code>foo</code>? If not, how to fix it?</p>\n"}, {"tags": ["rust", "travis-ci"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1439510897, "post_id": 32000273, "comment_id": 51904011, "body": "If you follow the instructions, it\u2019s made abundantly clear. It\u2019s in the \u201cGiving Travis Permissions\u201d section."}, {"owner": {"reputation": 15257, "user_id": 1409312, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/4TCzB.jpg?s=128&g=1", "display_name": "Syntactic Fructose", "link": "https://stackoverflow.com/users/1409312/syntactic-fructose"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1439511072, "post_id": 32000273, "comment_id": 51904055, "body": "Thanks for the sassy reply"}], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 3, "last_activity_date": 1439543843, "creation_date": 1439543843, "answer_id": 32006522, "question_id": 32000273, "link": "https://stackoverflow.com/questions/32000273/travis-cargo-how-to-properly-use-the-gh-token/32006522#32006522", "title": "travis-cargo, how to properly use the GH_TOKEN", "body": "<p>I'm not sure why various guides about Travis suggest some arcane things with Ruby gems and manual encryption. I found that Travis built-in environment variables feature works nicely and does not require changing Travis manifest.</p>\n\n<p>Basically, you need to go to your project settings on Travis, add <code>GH_TOKEN</code> environment variable and make sure that \"Display value in build log\" stays turned off:</p>\n\n<p><a href=\"https://i.stack.imgur.com/J2U27.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/J2U27.png\" alt=\"travis settings\"></a></p>\n\n<p>(the below line is how you add the variable, and the above one is how it looks after it is added)</p>\n\n<p>Then, when building, Travis will add this variable to environment settings automatically, and its value will be evicted from the <a href=\"https://travis-ci.org/netvl/immeta/jobs/66758872\" rel=\"nofollow noreferrer\">build output</a>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ git clone --depth=50 --branch=master git://github.com/netvl/immeta.git netvl/immeta\n\n$ cd netvl/immeta\n\n$ git checkout -qf 9aba89e5466627e190f27439c2240282bf2a9029\n\nThis job is running on container-based infrastructure, which does not allow use of 'sudo', setuid and setguid executables.\n\nIf you require sudo, add 'sudo: required' to your .travis.yml\n\nSee http://docs.travis-ci.com/user/workers/container-based-infrastructure/ for details.\n\nSetting environment variables from repository settings\n\n$ export GH_TOKEN=[secure]\n\nSetting environment variables from .travis.yml\n\n$ export TRAVIS_CARGO_NIGHTLY_FEATURE=\"\"\n</code></pre>\n\n<p>I think this way is much better than adding various encrypted tokens to the manifest.</p>\n"}], "owner": {"reputation": 15257, "user_id": 1409312, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/4TCzB.jpg?s=128&g=1", "display_name": "Syntactic Fructose", "link": "https://stackoverflow.com/users/1409312/syntactic-fructose"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 535, "favorite_count": 0, "accepted_answer_id": 32006522, "answer_count": 1, "score": 0, "last_activity_date": 1439543843, "creation_date": 1439509999, "question_id": 32000273, "link": "https://stackoverflow.com/questions/32000273/travis-cargo-how-to-properly-use-the-gh-token", "title": "travis-cargo, how to properly use the GH_TOKEN", "body": "<p>I'm confused when looking at the <a href=\"https://github.com/huonw/travis-cargo#example\" rel=\"nofollow\">github example</a>, the last line specifically:</p>\n\n<pre><code>language: rust\n# necessary for `travis-cargo coveralls --no-sudo`\naddons:\n  apt:\n    packages:\n      - libcurl4-openssl-dev\n      - libelf-dev\n      - libdw-dev\n\n# run builds for all the trains (and more)\nrust:\n  - nightly\n  - beta\n  # check it compiles on the latest stable compiler\n  - stable\n  # and the first stable one (this should be bumped as the minimum\n  # Rust version required changes)\n  - 1.0.0\n\n# load travis-cargo\nbefore_script:\n  - |\n      pip install 'travis-cargo&lt;0.2' --user &amp;&amp;\n      export PATH=$HOME/.local/bin:$PATH\n\n# the main build\nscript:\n  - |\n      travis-cargo build &amp;&amp;\n      travis-cargo test &amp;&amp;\n      travis-cargo bench &amp;&amp;\n      travis-cargo --only stable doc\nafter_success:\n  # upload the documentation from the build with stable (automatically only actually\n  # runs on the master branch, not individual PRs)\n  - travis-cargo --only stable doc-upload\n  # measure code coverage and upload to coveralls.io\n  - travis-cargo coveralls --no-sudo\n\nenv:\n  global:\n    # override the default `--features unstable` used for the nightly branch (optional)\n    - TRAVIS_CARGO_NIGHTLY_FEATURE=nightly\n    # encrypted github token for doc upload (see `GH_TOKEN` link above)\n    - secure: \"...\"\n</code></pre>\n\n<p>So I understand I need to generate a token , and I have a token generated, but how do I actually tell travis-cargo to <strong>use</strong> this? I tried going through <a href=\"http://www.hoverbear.org/2015/03/07/rust-travis-github-pages/#givingtravispermissions\" rel=\"nofollow\">this</a> link which the readme linked to, but I don't know how to apply this to travis-cargo specifically.</p>\n\n<p>What exactly would I put in place of <code>\"...\"</code> after the <code>secure:</code> keyword? Not the token obviously, because that wouldn't be very secure, so what?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1439534015, "post_id": 31992237, "comment_id": 51910121, "body": "In general on SO, in order to give a starting point to the conversation, it&#39;s better for the OP (you) to provide as minimal a code sample exhibiting the issue, and then ask how to solve said issue. For example, you could probably switch your &quot;one way of doing this&quot; into a code sample."}, {"owner": {"reputation": 25893, "user_id": 353820, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/32b29e1dc23c2c5abe0283ab7b9541d3?s=128&d=identicon&r=PG", "display_name": "Doug", "link": "https://stackoverflow.com/users/353820/doug"}, "edited": false, "score": 1, "creation_date": 1439534410, "post_id": 31992237, "comment_id": 51910294, "body": "I&#39;ll happily accept any example of spawning a long running process and streaming output to the console, by whatever means."}], "answers": [{"comments": [{"owner": {"reputation": 738, "user_id": 2343705, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/30e1e6f7b79bfb2de009de63497f40c9?s=128&d=identicon&r=PG&f=1", "display_name": "msgmaxim", "link": "https://stackoverflow.com/users/2343705/msgmaxim"}, "edited": false, "score": 0, "creation_date": 1492493952, "post_id": 32020376, "comment_id": 73984207, "body": "Is this actually different from the default behaviour?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 738, "user_id": 2343705, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/30e1e6f7b79bfb2de009de63497f40c9?s=128&d=identicon&r=PG&f=1", "display_name": "msgmaxim", "link": "https://stackoverflow.com/users/2343705/msgmaxim"}, "edited": false, "score": 0, "creation_date": 1492518079, "post_id": 32020376, "comment_id": 73998827, "body": "@msgmaxim You can check the <a href=\"https://doc.rust-lang.org/std/process/struct.Command.html#method.new\" rel=\"nofollow noreferrer\">documentation for <code>Command::new</code></a> to see what the defaults are: <i>Inherit stdin/stdout/stderr for <code>spawn</code> or <code>status</code>, but create pipes for <code>output</code></i>. TL;DR: No, I don&#39;t think so. Sometimes just being overly explicit or having the documentation read back to the OP is all it takes. Note the comments on the original question asking for a MCVE, trying to get OP to further explain the problem. &#175;\\_(\u30c4)_/&#175;"}, {"owner": {"reputation": 3359, "user_id": 849646, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/0Z7O8.jpg?s=128&g=1", "display_name": "Neara", "link": "https://stackoverflow.com/users/849646/neara"}, "edited": false, "score": 0, "creation_date": 1580117086, "post_id": 32020376, "comment_id": 105978525, "body": "Saved me from losing more hours of my life on debugging. Thank you! This was the simples solution to how to stream stdout/stderr to console, as well as properly bubbling up the stdin questions to the user."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 11, "last_activity_date": 1439599010, "creation_date": 1439599010, "answer_id": 32020376, "question_id": 31992237, "link": "https://stackoverflow.com/questions/31992237/how-would-you-stream-output-from-a-process/32020376#32020376", "title": "How would you stream output from a Process?", "body": "<blockquote>\n  <p>I'll happily accept any example of spawning a long running process and streaming output to the console, by whatever means.</p>\n</blockquote>\n\n<p>It sounds like you want <a href=\"http://doc.rust-lang.org/std/process/struct.Stdio.html#method.inherit\" rel=\"noreferrer\"><code>Stdio::inherit</code></a>:</p>\n\n<pre><code>use std::process::{Command, Stdio};\n\nfn main() {\n    let mut cmd =\n        Command::new(\"cat\")\n        .args(&amp;[\"/usr/share/dict/web2\"])\n        .stdout(Stdio::inherit())\n        .stderr(Stdio::inherit())\n        .spawn()\n        .unwrap();\n\n    // It's streaming here\n\n    let status = cmd.wait();\n    println!(\"Exited with status {:?}\", status);\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 8363, "user_id": 1531806, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/FkpTG.jpg?s=128&g=1", "display_name": "Pascal Precht", "link": "https://stackoverflow.com/users/1531806/pascal-precht"}, "edited": false, "score": 2, "creation_date": 1546247941, "post_id": 50444713, "comment_id": 94808423, "body": "This answer is very useful! Quick question though: Any particular reason the stream reading part has been put in a separate scope?"}, {"owner": {"reputation": 508, "user_id": 2261658, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b61fbc1ca8e07bdb8e9429b5ce522fe3?s=128&d=identicon&r=PG&f=1", "display_name": "jimis", "link": "https://stackoverflow.com/users/2261658/jimis"}, "reply_to_user": {"reputation": 8363, "user_id": 1531806, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/FkpTG.jpg?s=128&g=1", "display_name": "Pascal Precht", "link": "https://stackoverflow.com/users/1531806/pascal-precht"}, "edited": false, "score": 1, "creation_date": 1585697463, "post_id": 50444713, "comment_id": 107852842, "body": "@PascalPrecht to seperate the mutable borrows of <code>cmd</code>, first in <code>stdout</code> and second in <code>cmd.wait()</code>. Today the compiler would drop <code>stdout</code> automatically just before the <code>cmd.wait()</code> statement, but I think in the past this was not the case. So the scope here was needed to limit the lifetime of <code>stdout</code>."}], "tags": [], "owner": {"reputation": 25893, "user_id": 353820, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/32b29e1dc23c2c5abe0283ab7b9541d3?s=128&d=identicon&r=PG", "display_name": "Doug", "link": "https://stackoverflow.com/users/353820/doug"}, "is_accepted": false, "score": 12, "last_activity_date": 1526912235, "last_edit_date": 1526912235, "creation_date": 1526891039, "answer_id": 50444713, "question_id": 31992237, "link": "https://stackoverflow.com/questions/31992237/how-would-you-stream-output-from-a-process/50444713#50444713", "title": "How would you stream output from a Process?", "body": "<p>Although the accepted answer is correct, it doesn't cover the non-trivial case.</p>\n\n<p>To stream output and handle it manually, use <code>Stdio::piped()</code> and manually handle the <code>.stdout</code> property on the child returned from calling <code>spawn</code>, like this:</p>\n\n<pre><code>use std::process::{Command, Stdio};\nuse std::path::Path;\nuse std::io::{BufReader, BufRead};\n\npub fn exec_stream&lt;P: AsRef&lt;Path&gt;&gt;(binary: P, args: Vec&lt;&amp;'static str&gt;) {\n    let mut cmd = Command::new(binary.as_ref())\n        .args(&amp;args)\n        .stdout(Stdio::piped())\n        .spawn()\n        .unwrap();\n\n    {\n        let stdout = cmd.stdout.as_mut().unwrap();\n        let stdout_reader = BufReader::new(stdout);\n        let stdout_lines = stdout_reader.lines();\n\n        for line in stdout_lines {\n            println!(\"Read: {:?}\", line);\n        }\n    }\n\n    cmd.wait().unwrap();\n}\n\n#[test]\nfn test_long_running_process() {\n    exec_stream(\"findstr\", vec!(\"/s\", \"sql\", \"C:\\\\tmp\\\\*\"));\n}\n</code></pre>\n\n<p>See also <a href=\"https://stackoverflow.com/questions/41019780/merge-child-process-stdout-and-stderr\">Merge child process stdout and stderr</a> regarding catching the output from stderr and stdout simultaneously.</p>\n"}], "owner": {"reputation": 25893, "user_id": 353820, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/32b29e1dc23c2c5abe0283ab7b9541d3?s=128&d=identicon&r=PG", "display_name": "Doug", "link": "https://stackoverflow.com/users/353820/doug"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3497, "favorite_count": 4, "accepted_answer_id": 32020376, "answer_count": 2, "score": 13, "last_activity_date": 1526912235, "creation_date": 1439478889, "last_edit_date": 1492517850, "question_id": 31992237, "link": "https://stackoverflow.com/questions/31992237/how-would-you-stream-output-from-a-process", "title": "How would you stream output from a Process?", "body": "<p>I believe I understand, in general, one way of doing this:</p>\n\n<ul>\n<li>Create a <code>Command</code></li>\n<li>Use <code>Stdio::piped()</code> to create a new pair of output streams</li>\n<li>Configure <code>command.stdout()</code>, and <code>command.stderr()</code></li>\n<li>Spawn the process</li>\n<li>Create a new thread and pass the stderr and stdout to it &lt;-- ???</li>\n<li>In the remote thread, continually poll for input and write it to the output stream.</li>\n<li>In the main thread, wait for the process to finish.</li>\n</ul>\n\n<p>Does that sound right?</p>\n\n<p>My two actual questions:</p>\n\n<ol>\n<li><p>Is there an easier way that doesn't involve a 'read thread' per process?</p></li>\n<li><p>If there isn't an easier way, <code>Read::read()</code> requires <code>&amp;mut self</code>; how do you pass that into a remote thread?</p></li>\n</ol>\n\n<p>Please provide <strong>specific examples</strong> of how to actually stream the output, not just generic advice about how to do it...</p>\n\n<p>To be more specific, here's <a href=\"https://doc.rust-lang.org/std/process/struct.Child.html#examples\" rel=\"noreferrer\">the default example of using <code>spawn</code></a>:</p>\n\n<pre><code>use std::process::Command;\n\nlet mut child = Command::new(\"/bin/cat\")\n                        .arg(\"file.txt\")\n                        .spawn()\n                        .expect(\"failed to execute child\");\n\nlet ecode = child.wait()\n                 .expect(\"failed to wait on child\");\n\nassert!(ecode.success());\n</code></pre>\n\n<p>How can the above example be changed to stream the output of child to the console, rather than just waiting for an exit code?</p>\n"}, {"tags": ["python", "rust"], "comments": [{"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 5, "creation_date": 1439480804, "post_id": 31992222, "comment_id": 51890059, "body": "You&#39;re compiling a regex in each invocation of <code>fun</code>, which is not going to be particularly fast. In the Python code, you&#39;re not using regexes at all, so it&#39;s a bit of an unfair comparison. Since you&#39;re just doing substring search, you should probably just use <a href=\"http://doc.rust-lang.org/stable/std/primitive.str.html#method.find\" rel=\"nofollow noreferrer\"><code>str::find</code></a>."}, {"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 4, "creation_date": 1439481203, "post_id": 31992222, "comment_id": 51890336, "body": "You should also provide the commands you&#39;re using to compile and run your program. For example, are you compiling with optimizations enabled?"}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 1, "creation_date": 1439481328, "post_id": 31992222, "comment_id": 51890409, "body": "It may not mean anything for performance (though your code does allocate memory a <code>Vec</code>, so perhaps it does make a difference) but: For <code>line.split()</code>, it would be way easier to do <code>line.split(&quot; &quot;).nth(9).unwrap();</code>"}, {"owner": {"reputation": 2403, "user_id": 3190054, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/b7de233f9b761d1d0d75d64b608aca88?s=128&d=identicon&r=PG&f=1", "display_name": "kezzos", "link": "https://stackoverflow.com/users/3190054/kezzos"}, "edited": false, "score": 0, "creation_date": 1439481912, "post_id": 31992222, "comment_id": 51890820, "body": "Using python regex doesn&#39;t make much difference, although this is because the regex will only be compiled once regardless if its in a loop. Is it possible to pass a compiled regex to a function in rust? I&#39;m just using cargo run from the terminal. Ill have a go with the suggestions, thank you. I also liked the .filter.map.collect because I can grab a few fields from the string.."}, {"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 2, "creation_date": 1439484656, "post_id": 31992222, "comment_id": 51892394, "body": "@kezzos <code>cargo run</code> does not run the program with optimizations. Try using <code>cargo run --release</code>. In general, it is a good idea to provide enough information in your question such that others can reproduce your result. Otherwise, it&#39;s hard to diagnose the problem."}, {"owner": {"reputation": 2403, "user_id": 3190054, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/b7de233f9b761d1d0d75d64b608aca88?s=128&d=identicon&r=PG&f=1", "display_name": "kezzos", "link": "https://stackoverflow.com/users/3190054/kezzos"}, "edited": false, "score": 0, "creation_date": 1439489680, "post_id": 31992222, "comment_id": 51895175, "body": "Wow that&#39;s a big improvement. I am only just getting into rust and was not aware of the --release option. The python code is pretty lightweight so is probably interpreted fairly efficiently to C code anyway. If you would be kind enough to show me your solution with the regex compiled once/substring match Shepmaster, we can get this question accepted :)"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1439507581, "post_id": 31999681, "comment_id": 51903154, "body": "Interesting that your Rust version doesn&#39;t beat Python! What version of Rust and Python are you using?"}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1439507791, "post_id": 31999681, "comment_id": 51903206, "body": "1.2.0 (from the Arch repos). IIRC the match machinery was recently updated, so it&#39;s quite possible the betas/nightlys are ahead."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1439509325, "post_id": 31999681, "comment_id": 51903640, "body": "@Shepmaster Yep, I just downloaded <code>multirust</code> and beta and nightly are way faster."}, {"owner": {"reputation": 2403, "user_id": 3190054, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/b7de233f9b761d1d0d75d64b608aca88?s=128&d=identicon&r=PG&f=1", "display_name": "kezzos", "link": "https://stackoverflow.com/users/3190054/kezzos"}, "edited": false, "score": 0, "creation_date": 1439539396, "post_id": 31999681, "comment_id": 51912857, "body": "True that, switching to nightly gave me almost 50% speed increase without changing a thing"}], "tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": false, "score": 3, "last_activity_date": 1439509295, "last_edit_date": 1439509295, "creation_date": 1439506226, "answer_id": 31999681, "question_id": 31992222, "link": "https://stackoverflow.com/questions/31992222/better-way-to-parse-and-search-a-string/31999681#31999681", "title": "Better way to parse and search a string?", "body": "<p>A direct translation of the Python would be</p>\n\n<pre><code>extern crate time;\n\nfn fun(line: &amp;str) {\n    let mut l = line.split(\" \");\n    if l.nth(9).unwrap().contains(\"TTAGGG\") {\n        // do nothing\n    }\n}\n\nfn main() {\n    let line = \"FCC2CCMACXX:4:1105:10758:14389# 81 chrM 1 32 10S90M = 16151 16062 CATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTTTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCTTAGGGGATAGCATTG bbb^Wcbbbbccbbbcbccbba]WQG^bbcdcb_^_c_^`ccdddeeeeeffggggiiiiihiiiiihiiihihiiiihghhiihgfgfgeeeeebbb NM:i:1 AS:i:85 XS:i:65 RG:Z:1_DB31\";\n\n    let time0 = time::precise_time_s();\n    for _ in 0..10000 {\n        fun(line);\n    }\n    println!(\"{}\", time::precise_time_s() - time0);\n}\n</code></pre>\n\n<p>Using <code>cargo run --release</code> on stable (1.2.0), I get about <code>0.0267</code> as compared to about <code>0.0240</code> for Python (CPython, 2.7.10). Given Python's <code>in</code> on strings is just a C routine, this is reasonable.</p>\n\n<p>Impressively, on beta (1.3.0) and nightly (1.4.0) this decreases to about just <code>0.0122</code>, or about twice the speed of CPython!</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 8, "last_activity_date": 1439507198, "creation_date": 1439507198, "answer_id": 31999847, "question_id": 31992222, "link": "https://stackoverflow.com/questions/31992222/better-way-to-parse-and-search-a-string/31999847#31999847", "title": "Better way to parse and search a string?", "body": "<p>As a baseline, I ran your Python program with Python 2.7.6. Over 10 runs, it had a mean time of 12.2ms with a standard deviation of 443\u03bcs. I don't know how you got the very good time of <strong>6.5ms</strong>.</p>\n\n<p>Running your Rust code with Rust 1.4.0-dev (<code>febdc3b20</code>), without optimizations, I got a mean of 958ms and a standard deviation of 33ms.</p>\n\n<p>Running your code with optimizations (<code>cargo run --release</code>), I got a mean of 34.6ms and standard deviation of 495\u03bcs. <strong>Always do benchmarking in release mode</strong>.</p>\n\n<p>There are further optimizations you can do:</p>\n\n<p>Compiling the regex once, outside of the timing loop:</p>\n\n<pre><code>fn main() {\n    // ...\n    let substring = \"TTAGGG\";\n    let re = Regex::new(substring).unwrap();\n\n    // ...\n\n    for _ in 0..10000 {\n        fun(line, &amp;re);\n    }\n\n    // ...\n}\n\nfn fun(line: &amp;str, re: &amp;Regex) {\n    // ...\n}\n</code></pre>\n\n<p>Produces an average of 10.4ms with a standard deviation of 678\u03bcs.</p>\n\n<p>Switching to a substring match:</p>\n\n<pre><code>fn fun(line: &amp;str, substring: &amp;str) {\n    // ...\n\n    if l[0].contains(substring) {\n        // Do nothing\n    }\n}\n</code></pre>\n\n<p>Has a mean of 8.7ms and a standard deviation of 334\u03bcs.</p>\n\n<p>And finally, if you look at just the one result instead of collecting everything into a vector:</p>\n\n<pre><code>fn fun(line: &amp;str, substring: &amp;str) {\n    let col = line.split(\" \").nth(9);\n\n    if col.map(|c| c.contains(substring)).unwrap_or(false) {\n        // Do nothing\n    }\n}\n</code></pre>\n\n<p>Has a mean of 6.30ms and standard deviation of 114\u03bcs.</p>\n"}], "owner": {"reputation": 2403, "user_id": 3190054, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/b7de233f9b761d1d0d75d64b608aca88?s=128&d=identicon&r=PG&f=1", "display_name": "kezzos", "link": "https://stackoverflow.com/users/3190054/kezzos"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 151, "favorite_count": 0, "accepted_answer_id": 31999847, "answer_count": 2, "score": 4, "last_activity_date": 1439509295, "creation_date": 1439478854, "last_edit_date": 1439489983, "question_id": 31992222, "link": "https://stackoverflow.com/questions/31992222/better-way-to-parse-and-search-a-string", "title": "Better way to parse and search a string?", "body": "<p>I have been looking to speed up a basic Python function which basically just takes a line of text and checks the line for a substring. The Python program is as follows:</p>\n\n<pre class=\"lang-python prettyprint-override\"><code>import time\n\ndef fun(line):\n    l = line.split(\" \", 10)\n    if 'TTAGGG' in l[9]:\n        pass  # Do nothing\n\nline = \"FCC2CCMACXX:4:1105:10758:14389# 81 chrM 1 32 10S90M = 16151 16062 CATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTTTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCTTAGGGGATAGCATTG bbb^Wcbbbbccbbbcbccbba]WQG^bbcdcb_^_c_^`ccdddeeeeeffggggiiiiihiiiiihiiihihiiiihghhiihgfgfgeeeeebbb NM:i:1 AS:i:85 XS:i:65 RG:Z:1_DB31\"\n\ntime0 = time.time()\nfor i in range(10000):\n    fun(line)\nprint time.time() - time0\n</code></pre>\n\n\n\n<p>I wanted to see if I could use some of the high level features of Rust to possibly gain some performance, but the code runs considerably slower. The Rust conversion is:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>extern crate regex;\nextern crate time;\nuse regex::Regex;\n\nfn main() {\n    let line = \"FCC2CCMACXX:4:1105:10758:14389# 81 chrM 1 32 10S90M = 16151 16062 CATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTTTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCTTAGGGGATAGCATTG bbb^Wcbbbbccbbbcbccbba]WQG^bbcdcb_^_c_^`ccdddeeeeeffggggiiiiihiiiiihiiihihiiiihghhiihgfgfgeeeeebbb NM:i:1 AS:i:85 XS:i:65 RG:Z:1_DB31\";    \n    let substring: &amp;str = \"TTAGGG\";\n    let time0: f64 = time::precise_time_s();\n\n    for _ in 0..10000 {\n        fun(line, substring);\n    }\n\n    let time1: f64 = time::precise_time_s();\n    let elapsed: f64 = time1 - time0;\n    println!(\"{}\", elapsed);\n}\n\n\nfn fun(line: &amp;str, substring: &amp;str) {\n    let l: Vec&lt;&amp;str&gt; = line.split(\" \")\n                .enumerate()\n                .filter(|&amp;(i, _)| i==9)\n                .map(|(_, e) | e)\n                .collect();\n\n    let re = Regex::new(substring).unwrap();    \n    if re.is_match(&amp;l[0]) {\n        // Do nothing\n    }\n}\n</code></pre>\n\n<p>On my machine, Python times this at 0.0065s vs Rusts 1.3946s.</p>\n\n<p>Just checking some basic timings, the <code>line.split()</code> part of the code takes around 1s, and the regex step is around 0.4s. Can this really be right, or is there an issue with timing this properly? </p>\n"}, {"tags": ["iterator", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1439471170, "post_id": 31988530, "comment_id": 51882618, "body": "You can&#39;t. This is likely a duplicate of <a href=\"http://stackoverflow.com/q/31825650/155423\">stackoverflow.com/q/31825650/155423</a> or <a href=\"http://stackoverflow.com/q/31794503/155423\">stackoverflow.com/q/31794503/155423</a> or <a href=\"http://stackoverflow.com/q/20698384/155423\">stackoverflow.com/q/20698384/155423</a> or <a href=\"http://stackoverflow.com/q/30823880/155423\">stackoverflow.com/q/30823880/155423</a> or <a href=\"http://stackoverflow.com/q/25269597/155423\">stackoverflow.com/q/25269597/155423</a>."}, {"owner": {"reputation": 61, "user_id": 5222798, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d68137a43cb612c4f628cc548981dac9?s=128&d=identicon&r=PG&f=1", "display_name": "milancio", "link": "https://stackoverflow.com/users/5222798/milancio"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1439472104, "post_id": 31988530, "comment_id": 51883366, "body": "Ah, ok. At least now I&#39;m sure it cannot be done that way:) Thanks for your help."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1439472196, "post_id": 31988530, "comment_id": 51883438, "body": "No worries. I might suggest asking another question about how to do what you are trying to do. I believe there is a way to do it. You can reference this question as one attempt of solving the problem."}], "owner": {"reputation": 61, "user_id": 5222798, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d68137a43cb612c4f628cc548981dac9?s=128&d=identicon&r=PG&f=1", "display_name": "milancio", "link": "https://stackoverflow.com/users/5222798/milancio"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 116, "favorite_count": 0, "closed_date": 1439471223, "answer_count": 0, "score": 0, "last_activity_date": 1439469623, "creation_date": 1439469623, "question_id": 31988530, "link": "https://stackoverflow.com/questions/31988530/how-to-store-hashmap-and-its-values-iterator-in-the-same-struct", "closed_reason": "Duplicate", "title": "How to store HashMap and its Values iterator in the same struct?", "body": "<p>I'm working on the iterator adaptor which uses a HashMap internally. First, it matches all the input iterator keys with the map and flags them as matched. At the end I want to iterate over the map's values flagged as not matched.</p>\n\n<p>Apparently, I need to store both the map and its Values iterator (which stores the state of the iteration) in the same struct, but I cannot figure out how to do it.</p>\n\n<p>Here is an example without matching the input iterator to keep things simple:</p>\n\n<pre><code>use std::collections::hash_map::{HashMap, Values,};\nuse std::hash::Hash;\n\nstruct Foo&lt;'a, K, V&gt;\n    where K: 'a + Hash + Eq,\n          V: 'a + Clone,\n{\n    map: HashMap&lt;K, (V, bool)&gt;,\n    values: Values&lt;'a, K, (V, bool)&gt;,\n}\n\nimpl&lt;'a, K, V&gt; Foo&lt;'a, K, V&gt;\n    where K: 'a + Hash + Eq,\n          V: 'a + Clone,\n{\n    fn new&lt;I&gt;(it: I) -&gt; Self\n        where I: Iterator&lt;Item=(K, V)&gt;\n    {\n        // load the HashMap\n        let mut map: HashMap&lt;K, (V, bool)&gt; = HashMap::new();\n        for (k, v) in it {\n            map.insert(k, (v, false));\n        }\n        // I cannot use `let values = map.values();` since map will be moved to Foo.\n        Foo {map: map, values: ???}\n    }\n}\n\nimpl&lt;'a, K, V&gt; Iterator for Foo&lt;'a, K, V&gt;\n    where K: 'a + Hash + Eq,\n          V: 'a + Clone,\n{\n    type Item = V;\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        match self.values.next() {\n            loop {\n                match some.values.next() {\n                    Some(v) if !v.1 =&gt; return Some(Clone::clone(&amp;v.0)),\n                    Some(_) =&gt; continue,\n                    None =&gt; return None,\n                }\n            }\n        }\n    }\n}\n\nfn main() {\n    let it = (0..).zip(\"AB\".chars());\n    let foo = Foo::new(it);\n    for v in foo {\n        println!(\"{}\", v);\n    }\n}\n</code></pre>\n\n<p>Thanks a lot for any suggestions.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 2403, "user_id": 3190054, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/b7de233f9b761d1d0d75d64b608aca88?s=128&d=identicon&r=PG&f=1", "display_name": "kezzos", "link": "https://stackoverflow.com/users/3190054/kezzos"}, "edited": false, "score": 0, "creation_date": 1439465245, "post_id": 31986814, "comment_id": 51878349, "body": "Thanks, does this also return an Option&lt;&amp;str&gt;?"}, {"owner": {"reputation": 26037, "user_id": 542190, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c3bb1f122c476561bb9a98a1523e8b5e?s=128&d=identicon&r=PG", "display_name": "filmor", "link": "https://stackoverflow.com/users/542190/filmor"}, "reply_to_user": {"reputation": 2403, "user_id": 3190054, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/b7de233f9b761d1d0d75d64b608aca88?s=128&d=identicon&r=PG&f=1", "display_name": "kezzos", "link": "https://stackoverflow.com/users/3190054/kezzos"}, "edited": false, "score": 1, "creation_date": 1439465483, "post_id": 31986814, "comment_id": 51878491, "body": "Sure, that&#39;s what the <code>unwrap</code> is for. It&#39;s basically <code>fn unwrap(x : Option&lt;T&gt;) { if let Some(v) = x { v } else { panic!(&quot;Meh&quot;) } }</code>."}], "tags": [], "owner": {"reputation": 26037, "user_id": 542190, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c3bb1f122c476561bb9a98a1523e8b5e?s=128&d=identicon&r=PG", "display_name": "filmor", "link": "https://stackoverflow.com/users/542190/filmor"}, "is_accepted": false, "score": 17, "last_activity_date": 1439465007, "creation_date": 1439465007, "answer_id": 31986814, "question_id": 31986628, "link": "https://stackoverflow.com/questions/31986628/collect-items-from-an-iterator-at-a-specific-index/31986814#31986814", "title": "Collect items from an iterator at a specific index", "body": "<p>There is a <code>nth</code> function on <code>Iterator</code> that does this:</p>\n\n<pre><code>let text = line.split(\" \").nth(3).unwrap();\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 26037, "user_id": 542190, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c3bb1f122c476561bb9a98a1523e8b5e?s=128&d=identicon&r=PG", "display_name": "filmor", "link": "https://stackoverflow.com/users/542190/filmor"}, "edited": false, "score": 0, "creation_date": 1439465640, "post_id": 31986839, "comment_id": 51878589, "body": "Regarding your addendum, I see your point. However, rust is pretty explicit anyhow: If you write it in a single line it&#39;s fine anyhow because you will not use the (partially consumed) split anywhere else. If you want to split the splitting and getting the 4th item, the compiler will force you to write <code>let mut l = line.split(&quot; &quot;)</code> to be able to use <code>nth</code>."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 1, "last_activity_date": 1439465077, "creation_date": 1439465077, "answer_id": 31986839, "question_id": 31986628, "link": "https://stackoverflow.com/questions/31986628/collect-items-from-an-iterator-at-a-specific-index/31986839#31986839", "title": "Collect items from an iterator at a specific index", "body": "<p>No; you can use <code>take</code> and <code>next</code>, though:</p>\n\n<pre><code>let line = \"Some line of text for example\";\nlet l = line.split(\" \");\nlet text = l.skip(3).next();\n</code></pre>\n\n<p>Note that this results in <code>text</code> being an <code>Option&lt;&amp;str&gt;</code>, as there's no guarantee that the sequence actually <em>has</em> at least four elements.</p>\n\n<p><strong>Addendum</strong>: using <code>nth</code> is definitely shorter, though I prefer to be explicit about the fact that accessing the <em>n</em><sup>th</sup> element of an iterator necessarily <em>consumes</em> all the elements before it.</p>\n"}, {"comments": [{"owner": {"reputation": 2403, "user_id": 3190054, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/b7de233f9b761d1d0d75d64b608aca88?s=128&d=identicon&r=PG&f=1", "display_name": "kezzos", "link": "https://stackoverflow.com/users/3190054/kezzos"}, "edited": false, "score": 0, "creation_date": 1439466707, "post_id": 31987058, "comment_id": 51879355, "body": "Thank you, a lot to take in here but very useful. You mentioned that collecting into a Vec is inefficient. Would you be able to comment on the speed of performing line.split.enumerate.filter.map.unwrap multiple times to grab different items from the string vs collecting the whole thing into a Vec and then using vector indexing to retrieve items. As a rule of thumb for example, if a need to access 1/4 of the items, which method do I go for?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 2403, "user_id": 3190054, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/b7de233f9b761d1d0d75d64b608aca88?s=128&d=identicon&r=PG&f=1", "display_name": "kezzos", "link": "https://stackoverflow.com/users/3190054/kezzos"}, "edited": false, "score": 0, "creation_date": 1439467426, "post_id": 31987058, "comment_id": 51879884, "body": "@kezzos: I mentioned that collecting <i>everything</i> into a vector was inefficient, and I also gave the reasons: iterating up until the end when you don&#39;t care about the last pieces and allocating memory. If you need to collect 1/4 of the pieces, then I would not worry about the memory allocation, however you may still gain from cutting the iteration short (using <code>take</code>)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1439469067, "post_id": 31987058, "comment_id": 51880983, "body": "There&#39;s also <a href=\"http://doc.rust-lang.org/std/iter/trait.Iterator.html#method.filter_map\" rel=\"nofollow noreferrer\"><code>filter_map</code></a> to combine the <code>filter</code> and <code>map</code> steps."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 22, "last_activity_date": 1439465676, "creation_date": 1439465676, "answer_id": 31987058, "question_id": 31986628, "link": "https://stackoverflow.com/questions/31986628/collect-items-from-an-iterator-at-a-specific-index/31987058#31987058", "title": "Collect items from an iterator at a specific index", "body": "<p>No, it's not; however you can easily <em>filter</em> before you <em>collect</em>, which in practice achieves the same effect.</p>\n\n<p>If you wish to filter by index, you need to add the index in and then strip it afterwards:</p>\n\n<ul>\n<li><code>enumerate</code> (to add the index to the element)</li>\n<li><code>filter</code> based on this index</li>\n<li><code>map</code> to strip the index from the element</li>\n</ul>\n\n<p>Or in code:</p>\n\n<pre><code>fn main() {\n    let line = \"Some line of text for example\";\n    let l = line.split(\" \")\n                .enumerate()\n                .filter(|&amp;(i, _)| i == 3 )\n                .map(|(_, e)| e);\n    let lvec: Vec&lt;&amp;str&gt; = l.collect();\n    let text = &amp;lvec[0];\n    println!(\"{}\", text);\n}\n</code></pre>\n\n<p>If you only wish to get a single index (and thus element), then using <code>nth</code> is much easier. It returns an <code>Option&lt;&amp;str&gt;</code> here, which you need to take care of:</p>\n\n<pre><code>fn main() {\n    let line = \"Some line of text for example\";\n    let text = line.split(\" \").nth(3).unwrap();\n    println!(\"{}\", text);\n}\n</code></pre>\n\n<p>If you can have an arbitrary predicate but wishes only the first element that matches, then collecting into a <code>Vec</code> is inefficient: it will consume the whole iterator (no laziness) and allocate potentially a lot of memory that is not needed at all.</p>\n\n<p>You are thus better off simply asking for the first element using the <code>next</code> method of the iterator, which returns an <code>Option&lt;&amp;str&gt;</code> here:</p>\n\n<pre><code>fn main() {\n    let line = \"Some line of text for example\";\n    let text = line.split(\" \")\n                   .enumerate()\n                   .filter(|&amp;(i, _)| i % 7 == 3 )\n                   .map(|(_, e)| e)\n                   .next()\n                   .unwrap();\n    println!(\"{}\", text);\n}\n</code></pre>\n\n<p>If you want to select <em>part</em> of the result, by index, you may also use <code>skip</code> and <code>take</code> before collecting, but I guess you have enough alternatives presented here already.</p>\n"}, {"tags": [], "owner": {"reputation": 2403, "user_id": 3190054, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/b7de233f9b761d1d0d75d64b608aca88?s=128&d=identicon&r=PG&f=1", "display_name": "kezzos", "link": "https://stackoverflow.com/users/3190054/kezzos"}, "is_accepted": false, "score": 0, "last_activity_date": 1439472343, "creation_date": 1439472343, "answer_id": 31989590, "question_id": 31986628, "link": "https://stackoverflow.com/questions/31986628/collect-items-from-an-iterator-at-a-specific-index/31989590#31989590", "title": "Collect items from an iterator at a specific index", "body": "<p>For anyone who may be interested, you can can do loads of cool things with iterators (thanks Matthieu M), for example to get multiple 'words' from a string according to their index, you can use <code>filter</code> along with logical or <code>||</code> to test for multiple indexes ! </p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let line = \"FCC2CCMACXX:4:1105:10758:14389# 81 chrM 1 32 10S90M = 16151 16062\"\nlet words: Vec&lt;&amp;str&gt; = line.split(\" \")\n                           .enumerate()\n                           .filter(|&amp;(i, _)| i==1 || i==3 || i==6 )\n                           .map(|(_, e) | e)\n                           .collect();\n</code></pre>\n"}], "owner": {"reputation": 2403, "user_id": 3190054, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/b7de233f9b761d1d0d75d64b608aca88?s=128&d=identicon&r=PG&f=1", "display_name": "kezzos", "link": "https://stackoverflow.com/users/3190054/kezzos"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 14302, "favorite_count": 0, "accepted_answer_id": 31987058, "answer_count": 4, "score": 11, "last_activity_date": 1439472343, "creation_date": 1439464507, "last_edit_date": 1439469104, "question_id": 31986628, "link": "https://stackoverflow.com/questions/31986628/collect-items-from-an-iterator-at-a-specific-index", "title": "Collect items from an iterator at a specific index", "body": "<p>I was wondering if it is possible to use <code>.collect()</code> on an iterator to grab items at a specific index. For example if I start with a string, I would normally do:</p>\n\n<pre><code>let line = \"Some line of text for example\";\nlet l = line.split(\" \");\nlet lvec: Vec&lt;&amp;str&gt; = l.collect();\nlet text = &amp;lvec[3];\n</code></pre>\n\n<p>But what would be nice is something like:</p>\n\n<pre><code>let text: &amp;str = l.collect(index=(3));\n</code></pre>\n"}, {"tags": ["module", "rust"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 2, "creation_date": 1439427396, "post_id": 31977781, "comment_id": 51861621, "body": "<a href=\"https://github.com/rust-lang/rust/issues/26264\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/26264</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1439427823, "post_id": 31977781, "comment_id": 51861726, "body": "Please note that the Rust style is 4-space indents."}, {"owner": {"reputation": 4398, "user_id": 417803, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/78bce6b348f3c186e4830cf1dde37382?s=128&d=identicon&r=PG", "display_name": "bfops", "link": "https://stackoverflow.com/users/417803/bfops"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1439428211, "post_id": 31977781, "comment_id": 51861813, "body": "@Shepmaster The Rust style is silly :)"}], "answers": [{"comments": [{"owner": {"reputation": 4398, "user_id": 417803, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/78bce6b348f3c186e4830cf1dde37382?s=128&d=identicon&r=PG", "display_name": "bfops", "link": "https://stackoverflow.com/users/417803/bfops"}, "edited": false, "score": 0, "creation_date": 1439427937, "post_id": 31977832, "comment_id": 51861750, "body": "This is actually for the sake of filling in generics; the actual use case is <a href=\"http://pastebin.com/DYDJjFLs\" rel=\"nofollow noreferrer\">pastebin.com/DYDJjFLs</a>. Good to know it&#39;s an open issue though, thanks!  In the meantime, I&#39;ve just added a <code>use foo::T::*;</code>"}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 5, "last_activity_date": 1439427528, "creation_date": 1439427528, "answer_id": 31977832, "question_id": 31977781, "link": "https://stackoverflow.com/questions/31977781/how-can-an-enum-be-re-exported/31977832#31977832", "title": "How can an enum be re-exported?", "body": "<p>This is a known issue, <a href=\"https://github.com/rust-lang/rust/issues/26264\">#26264</a>.</p>\n\n<p>You should <code>pub use foo::T;</code> instead. <code>type</code> is purely an alias, with its intention being the combination of types and filling in of generics (e.g. <code>type Foo = Bar&lt;Baz&gt;;</code>), so for public reexporting it won\u2019t do what you want anyway.</p>\n"}], "owner": {"reputation": 4398, "user_id": 417803, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/78bce6b348f3c186e4830cf1dde37382?s=128&d=identicon&r=PG", "display_name": "bfops", "link": "https://stackoverflow.com/users/417803/bfops"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 191, "favorite_count": 0, "accepted_answer_id": 31977832, "answer_count": 1, "score": 2, "last_activity_date": 1439427808, "creation_date": 1439426969, "last_edit_date": 1439427808, "question_id": 31977781, "link": "https://stackoverflow.com/questions/31977781/how-can-an-enum-be-re-exported", "title": "How can an enum be re-exported?", "body": "<p>This gives me an error:</p>\n\n<pre><code>mod foo {\n  pub enum T {\n    Foo,\n  }\n}\n\nmod bar {\n  pub type T = ::foo::T;\n}\n\nfn main() {\n  let _ = bar::T::Foo; // error: no associated item named `Foo` found for type `foo::T` in the current scope\n}\n</code></pre>\n\n<p>What's the proper way to do this?</p>\n"}]