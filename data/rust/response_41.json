[{"tags": ["types", "return", "rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 2, "creation_date": 1445477491, "post_id": 33272004, "comment_id": 54344998, "body": "NB, you can do this without having to have a closure, and possibly even without having to have a <code>Box&lt;MyTrait&gt;</code> trait object, via enums e.g. <code>enum Maker { X, Y }</code> returned by <code>from_name</code> with a method like <code>fn make(&amp;self, i64) -&gt; Value</code>, where <code>enum Value { X(X), Y(Y) }</code>."}], "tags": [], "owner": {"reputation": 1987, "user_id": 5278682, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/34509cba2b4d128dce294dcf5092d300?s=128&d=identicon&r=PG&f=1", "display_name": "Eli Friedman", "link": "https://stackoverflow.com/users/5278682/eli-friedman"}, "is_accepted": true, "score": 3, "last_activity_date": 1445477338, "creation_date": 1445477338, "answer_id": 33272004, "question_id": 33269951, "link": "https://stackoverflow.com/questions/33269951/returning-a-type-not-an-instance/33272004#33272004", "title": "Returning a type, not an instance", "body": "<p>The closest thing to what you're asking is a factory function:</p>\n\n<pre><code>fn from_name(name: &amp;str) -&gt; Box&lt;Fn(i64) -&gt; Box&lt;MyTrait&gt;&gt; {\n    match name {\n        \"X\" =&gt; Box::new(|x| Box::new(X{x: x})),\n        \"Y\" =&gt; Box::new(|x| Box::new(Y{x: x})),\n        _ =&gt; panic!(\"Unknown name\"),\n    }\n}\n\nfn example() -&gt; i64 {\n    let factory = from_name(\"X\");\n    let z = factory(10);\n    z.sum(10)\n}\n</code></pre>\n\n<p><code>from_name</code> returns a function which returns an object.</p>\n"}], "owner": {"reputation": 5159, "user_id": 482819, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/241c9426403e040a283f10ae6499ace6?s=128&d=identicon&r=PG", "display_name": "Hernan", "link": "https://stackoverflow.com/users/482819/hernan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 92, "favorite_count": 0, "accepted_answer_id": 33272004, "answer_count": 1, "score": 3, "last_activity_date": 1445477338, "creation_date": 1445464478, "last_edit_date": 1445470935, "question_id": 33269951, "link": "https://stackoverflow.com/questions/33269951/returning-a-type-not-an-instance", "title": "Returning a type, not an instance", "body": "<p>Is there a way in Rust to return a type that implements certain trait from a function (I do not want the instance, but the type). Something like this (which does not work in its current form):</p>\n\n<pre><code>trait MyTrait {\n    fn sum(&amp;self, val: i64) -&gt; i64;\n}\n\n#[derive(Debug)]\nstruct X {\n    x: i64,\n}\n\nimpl MyTrait for X {\n    fn sum(&amp;self, val: i64) -&gt; i64 {\n        self.x + 2 * val\n    }\n}\n\n#[derive(Debug)]\nstruct Y {\n    x: i64,\n}\n\nimpl MyTrait for Y {\n    fn sum(&amp;self, val: i64) -&gt; i64 {\n        self.x + 3 * val\n    }\n}\n\nfn from_name(name: &amp;str) -&gt; MyTrait {\n    match name {\n        \"X\" =&gt; X,\n        \"Y\" =&gt; Y,\n        _ =&gt; panic!(\"Unknown name\")\n    }\n}\n\nfn main() {\n    let x = X{x: 21};\n    let y = Y{x: 42};\n\n    // This does not work, it is just to show the idea\n    let z = from_name(\"X\"){x: 10};\n\n    println!(\"x {:?}\", x.sum(3));\n    println!(\"y {:?}\", y.sum(3));\n    println!(\"z {:?}\", z.sum(3));\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 667, "user_id": 5463164, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/87d04f5aeec715fb70282aab5033f96d?s=128&d=identicon&r=PG&f=1", "display_name": "Kalita Alexey", "link": "https://stackoverflow.com/users/5463164/kalita-alexey"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1445445810, "post_id": 33264666, "comment_id": 54330787, "body": "Mistake. I make a mistake"}], "answers": [{"tags": [], "owner": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "is_accepted": false, "score": 0, "last_activity_date": 1445497889, "creation_date": 1445497889, "answer_id": 33275223, "question_id": 33264666, "link": "https://stackoverflow.com/questions/33264666/how-to-store-recursive-ref-inside-of-a-struct/33275223#33275223", "title": "How to store recursive ref inside of a struct", "body": "<p>What you are trying to do is unsound.  Without knowing your use-case, there isn't a good solution to your problem.</p>\n\n<p>You have a couple of errors that relate to mutability.  With those fixed, your code becomes:</p>\n\n<pre><code>struct Item&lt;'a&gt; {\n    items: Vec&lt;&amp;'a Item&lt;'a&gt;&gt;,\n}\n\nimpl&lt;'a&gt; Item&lt;'a&gt; {\n    fn new() -&gt; Item&lt;'a&gt; {\n        Item { items: vec![] }\n    }   \n}\n\nfn main() {\n    let mut items = vec![Item::new(), Item::new()];\n    while let Some(mut item) = items.pop() {\n        for another_item in items {\n            item.items.push(&amp;another_item); \n        }   \n        items.push(item);\n    }   \n}\n</code></pre>\n\n<p>The compiler now complains about the lifetime of <code>another_item</code>:</p>\n\n<blockquote>\n  <p>error: <code>another_item</code> does not live long enough</p>\n</blockquote>\n\n<p>The <code>for</code> loop owns the <code>another_item</code>, and it cannot give ownership away back to the <code>Vec</code> of references.</p>\n\n<p>Whatever you do, you can't get around this fundamental issue.  One reason behind these rules is that references are really just pointers.  As you move elements into and out of <code>items</code>, each <code>item</code> will change its location, rendering previously-created pointers to it invalid.  (This isn't Python, with magical garbage-collected references.)  Of course, the rules of Rust prevent such a situation from ever occuring.</p>\n"}, {"tags": [], "owner": {"reputation": 667, "user_id": 5463164, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/87d04f5aeec715fb70282aab5033f96d?s=128&d=identicon&r=PG&f=1", "display_name": "Kalita Alexey", "link": "https://stackoverflow.com/users/5463164/kalita-alexey"}, "is_accepted": false, "score": 0, "last_activity_date": 1445522504, "creation_date": 1445522504, "answer_id": 33282925, "question_id": 33264666, "link": "https://stackoverflow.com/questions/33264666/how-to-store-recursive-ref-inside-of-a-struct/33282925#33282925", "title": "How to store recursive ref inside of a struct", "body": "<p>I ended with this code</p>\n\n<pre><code>use std::rc::Rc;\nuse std::cell::RefCell;\n\nstruct Item {\n    items: Vec&lt;Rc&lt;RefCell&lt;Item&gt;&gt;&gt;,\n}\n\nfn main() {\n    let items = vec![Item { items: Vec::new() }, Item { items: Vec::new() }];\n    let iter = items.into_iter();\n    let items = iter.map(|item| Rc::new(RefCell::new(item)));\n    let items = items.collect::&lt;Vec&lt;_&gt;&gt;();\n    for item_index in 0..items.len() {\n        let item = items[item_index].clone();\n        let mut item = item.borrow_mut();\n        for another_item_index in 0..items.len() {\n            if another_item_index == item_index {\n                continue;\n            }\n            let another_item = items[another_item_index].clone();\n            (*item).items.push(another_item);\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 667, "user_id": 5463164, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/87d04f5aeec715fb70282aab5033f96d?s=128&d=identicon&r=PG&f=1", "display_name": "Kalita Alexey", "link": "https://stackoverflow.com/users/5463164/kalita-alexey"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 82, "favorite_count": 0, "answer_count": 2, "score": 1, "last_activity_date": 1445522504, "creation_date": 1445445185, "last_edit_date": 1445445907, "question_id": 33264666, "link": "https://stackoverflow.com/questions/33264666/how-to-store-recursive-ref-inside-of-a-struct", "title": "How to store recursive ref inside of a struct", "body": "<p>Let's assume the following struct</p>\n\n<pre><code>struct Item&lt;'a&gt; {\n    items: Vec&lt;&amp;'a Item&lt;'a&gt;&gt;\n}\n</code></pre>\n\n<p>Let's assume the following variable contains many <code>Item</code> objects with empty <code>items</code> field.</p>\n\n<pre><code>let mut items: Vec&lt;Item&lt;'a&gt;&gt; = get_items();\n</code></pre>\n\n<p>Let's assume I have the task to add to <code>items</code> field of each <code>Item</code> the references to all another <code>Item</code> objects in the <code>items</code> vector.</p>\n\n<p>My current implementation is</p>\n\n<pre><code>struct Item&lt;'a&gt; {\n    items: Vec&lt;&amp;'a Item&lt;'a&gt;&gt;,\n}\n\nimpl&lt;'a&gt; Item&lt;'a&gt; {\n    fn new() -&gt; Item&lt;'a&gt; {\n        Item { items: vec![] }\n    }   \n}\n\nfn main() {\n    let mut items = vec![Item::new(), Item::new()];\n    while let Some(item) = items.pop() {\n        for another_item in &amp;mut items {\n            item.items.push(another_item); \n        }   \n        items.push(item);\n    }   \n}`\n</code></pre>\n\n<p>It fails because I do <code>item.items.push(another_item);</code></p>\n"}, {"tags": ["json", "rust", "json-deserialization", "serde"], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 22, "last_activity_date": 1519580712, "last_edit_date": 1519580712, "creation_date": 1445410977, "answer_id": 33252934, "question_id": 33251881, "link": "https://stackoverflow.com/questions/33251881/rust-serde-json-deserialization-examples/33252934#33252934", "title": "Rust &amp; Serde JSON deserialization examples?", "body": "<p>Most of the standard data structures are serializable, so the following structures should work:</p>\n\n<pre><code>#[derive(Serialize, Deserialize)]\nstruct Data {\n    FirstName: String,\n    LastName: String,\n    Age: u32,\n    Address: Address,\n    PhoneNumbers: Vec&lt;String&gt;\n}\n\n#[derive(Serialize, Deserialize)]\nstruct Address {\n    Street: String,\n    City: String,\n    Country: String\n}\n</code></pre>\n\n<p>If some of the fields in input may be absent, then the corresponding structure fields should be <code>Option&lt;T&gt;</code> instead of just <code>T</code>.</p>\n\n<p>Note that it is possible to name fields in a more \"Rusty\" manner, i.e. snake_case, because serde supports renaming annotations:</p>\n\n<pre><code>#[derive(Serialize, Deserialize)]\nstruct Address {\n    #[serde(rename=\"Street\")]\n    street: String,\n    #[serde(rename=\"City\")]\n    city: String,\n    #[serde(rename=\"Country\")]\n    country: String\n}\n</code></pre>\n\n<p><a href=\"https://github.com/serde-rs/serde/issues/140\" rel=\"noreferrer\">This</a> issue is also relevant to fields renaming.</p>\n"}], "owner": {"reputation": 320, "user_id": 631842, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/91b86dcbadd01c6eead5271c917a72fe?s=128&d=identicon&r=PG", "display_name": "vegai", "link": "https://stackoverflow.com/users/631842/vegai"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 9578, "favorite_count": 0, "accepted_answer_id": 33252934, "answer_count": 1, "score": 21, "last_activity_date": 1538857380, "creation_date": 1445406703, "last_edit_date": 1538857380, "question_id": 33251881, "link": "https://stackoverflow.com/questions/33251881/rust-serde-json-deserialization-examples", "title": "Rust &amp; Serde JSON deserialization examples?", "body": "<p>I'm trying to figure out how to deserialize JSON into a structure using Serde. For instance, the example JSON on serde_json's <a href=\"https://serde-rs.github.io/serde/serde_json/serde_json/index.html\" rel=\"noreferrer\">own documentation</a> contains the following data:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>{\n    \"FirstName\": \"John\",\n    \"LastName\": \"Doe\",\n    \"Age\": 43,\n    \"Address\": {\n        \"Street\": \"Downing Street 10\",\n        \"City\": \"London\",\n        \"Country\": \"Great Britain\"\n    },\n    \"PhoneNumbers\": [\n        \"+44 1234567\",\n        \"+44 2345678\"\n    ]\n}\n</code></pre>\n\n<p>Now, if we assume that the above data is in a variable \"input\" and the following piece of code:</p>\n\n<pre><code>let deserialized_data: Data = serde_json::from_str(input).unwrap();\n</code></pre>\n\n<p>... what should struct <code>Data</code> look like?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1445397683, "post_id": 33249546, "comment_id": 54302572, "body": "If the memory is non-overlapping, is it really aliasing? As I understand it, <i>aliasing</i> means two different names referring to the same thing, like two variables pointing to the same memory."}, {"owner": {"reputation": 25893, "user_id": 353820, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/32b29e1dc23c2c5abe0283ab7b9541d3?s=128&d=identicon&r=PG", "display_name": "Doug", "link": "https://stackoverflow.com/users/353820/doug"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1445400473, "post_id": 33249546, "comment_id": 54303290, "body": "@Shepmaster I&#39;m not sure. Technically there&#39;s a pointer to the start of the data block, and a pointer to the sub-section of it. That&#39;s ... technically... aliasing? Maybe?"}, {"owner": {"reputation": 25893, "user_id": 353820, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/32b29e1dc23c2c5abe0283ab7b9541d3?s=128&d=identicon&r=PG", "display_name": "Doug", "link": "https://stackoverflow.com/users/353820/doug"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1445400923, "post_id": 33249546, "comment_id": 54303415, "body": "For example, if I have a Vec&lt;Foo&gt;, it&#39;s aliasing if I write to both the first and 3rd items in it at the same time, even though they don&#39;t overlap in memory, right?"}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 1, "creation_date": 1445403626, "post_id": 33249546, "comment_id": 54304169, "body": "No, it&#39;s definitely not aliasing. As I said in my answer, the mutable iterators already do all of this."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1445403638, "post_id": 33249546, "comment_id": 54304174, "body": "<a href=\"https://en.wikipedia.org/wiki/Aliasing_(computing)\" rel=\"nofollow noreferrer\">Wikipedia says</a>: &quot;modifying the data through one name implicitly modifies the values associated with all aliased names&quot;"}], "answers": [{"comments": [{"owner": {"reputation": 25893, "user_id": 353820, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/32b29e1dc23c2c5abe0283ab7b9541d3?s=128&d=identicon&r=PG", "display_name": "Doug", "link": "https://stackoverflow.com/users/353820/doug"}, "edited": false, "score": 0, "creation_date": 1445400624, "post_id": 33250125, "comment_id": 54303331, "body": "Technically though, how would you safely hand the child items out though? For example, take the trivial example of the internal data being a Vec&lt;u8&gt;; you can&#39;t safely take two mutable slices from this right? The reason Vec can do it internally is that it uses an unsafe pointer internally, as I understand it?"}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "reply_to_user": {"reputation": 25893, "user_id": 353820, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/32b29e1dc23c2c5abe0283ab7b9541d3?s=128&d=identicon&r=PG", "display_name": "Doug", "link": "https://stackoverflow.com/users/353820/doug"}, "edited": false, "score": 0, "creation_date": 1445403590, "post_id": 33250125, "comment_id": 54304157, "body": "You just need to do something that allows the compiler to understand that the pointers are disjoint. At the lowest level this involves <code>unsafe</code>, but you can also build on existing functionality, like <code>split_at_mut</code> and iterators over mutable references."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "reply_to_user": {"reputation": 25893, "user_id": 353820, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/32b29e1dc23c2c5abe0283ab7b9541d3?s=128&d=identicon&r=PG", "display_name": "Doug", "link": "https://stackoverflow.com/users/353820/doug"}, "edited": false, "score": 0, "creation_date": 1445420518, "post_id": 33250125, "comment_id": 54313107, "body": "@Doug it&#39;s exposed through <code>split_at_mut</code> in the library. Sure, it&#39;s not implemented with language primitives (instead with a block of <code>unsafe</code> marked code), but theoretically it could be."}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 3, "last_activity_date": 1445395712, "creation_date": 1445395712, "answer_id": 33250125, "question_id": 33249546, "link": "https://stackoverflow.com/questions/33249546/is-it-possible-to-have-safe-mutable-aliasing-to-non-overlapping-memory/33250125#33250125", "title": "Is it possible to have safe mutable aliasing to non-overlapping memory?", "body": "<p>This works fine and is a natural consequence of how, e.g., iterators work: the <code>next</code> method hands out a sequence of values that are not lifetime-connected to the reference they come from, i.e. <code>fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt;</code>. This automatically means that any iterator that yields <code>&amp;mut</code> pointers (like, <code>slice.iter_mut()</code>) is yielding pointers to non-overlapping memory, because anything else would be incorrect.</p>\n\n<p>One way to use this in parallel is something like my <code>simple_parallel</code> library, e.g. <a href=\"http://huonw.github.io/simple_parallel/simple_parallel/pool/struct.Pool.html#method.for_\" rel=\"nofollow\"><code>Pool::for_</code></a>.</p>\n\n<p>(You'll need to give more details about the internals of <code>PixelBuffer</code> to be more specific about how to do it in this case.)</p>\n"}, {"tags": [], "owner": {"reputation": 149, "user_id": 5443000, "user_type": "registered", "profile_image": "https://graph.facebook.com/10207825667257183/picture?type=large", "display_name": "Peter Bertok", "link": "https://stackoverflow.com/users/5443000/peter-bertok"}, "is_accepted": false, "score": 3, "last_activity_date": 1445409010, "creation_date": 1445409010, "answer_id": 33252409, "question_id": 33249546, "link": "https://stackoverflow.com/questions/33249546/is-it-possible-to-have-safe-mutable-aliasing-to-non-overlapping-memory/33252409#33252409", "title": "Is it possible to have safe mutable aliasing to non-overlapping memory?", "body": "<p>There is no way to completely avoid unsafe Rust, because the compiler cannot currently evaluate the safety of sub-slices. However, the standard library contains code that provides a safe wrapper that you can use.</p>\n\n<p>Read up on <a href=\"https://doc.rust-lang.org/std/slice/struct.Chunks.html\" rel=\"nofollow\"><code>std::slice::Chunks</code></a> and <a href=\"https://doc.rust-lang.org/std/slice/struct.ChunksMut.html\" rel=\"nofollow\"><code>std::slice::ChunksMut</code></a>.</p>\n\n<p>Sample code: <a href=\"https://play.rust-lang.org/?gist=ceec5be3e1530c0a6d3b&amp;version=stable\" rel=\"nofollow\">https://play.rust-lang.org/?gist=ceec5be3e1530c0a6d3b&amp;version=stable</a></p>\n\n<p>However, your next problem is sending the slices to separate threads, because the best way to do that would be <code>thread::scoped</code>, which is currently deprecated due to some safety problems that were discovered this year...</p>\n\n<p>Also, keep in mind that <code>Vec&lt;_&gt;</code> owns its contents, whereas slices are just a view. Generally, you want to write most functions in terms of slices, and keep only one \"Vec\" to hold the data.</p>\n"}], "owner": {"reputation": 25893, "user_id": 353820, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/32b29e1dc23c2c5abe0283ab7b9541d3?s=128&d=identicon&r=PG", "display_name": "Doug", "link": "https://stackoverflow.com/users/353820/doug"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 203, "favorite_count": 0, "accepted_answer_id": 33250125, "answer_count": 2, "score": 1, "last_activity_date": 1445409010, "creation_date": 1445391386, "last_edit_date": 1445402482, "question_id": 33249546, "link": "https://stackoverflow.com/questions/33249546/is-it-possible-to-have-safe-mutable-aliasing-to-non-overlapping-memory", "title": "Is it possible to have safe mutable aliasing to non-overlapping memory?", "body": "<p>I'm looking for a way to take a large object and break it into smaller mutable child objects, which can be processed in parallel.</p>\n\n<p>Something like:</p>\n\n<pre><code>struct PixelBuffer { data:Vec&lt;u32&gt;, width:u32, height:u32 }\nstruct PixelBlock { data:Vec&lt;u32&gt; }\nimpl PixelBuffer {\n  fn decompose(&amp;'a mut self) -&gt; Vec&lt;Guard&lt;'a, PixelBlock&gt;&gt;&gt; {\n    ...\n  }\n}\n</code></pre>\n\n<p>Where the resulting <code>PixelBlock</code>'s can be processed in parallel, and the parent <code>PixelBuffer</code> will remain locked until all <code>Guard&lt;PixelBlock&gt;</code> are dropped.</p>\n\n<p>This is effectively mutable pointer aliasing; the large data block in <code>PixelBuffer</code> will be directly modified via each <code>PixelBlock</code>.</p>\n\n<p>However, each <code>PixelBlock</code> is non-overlapping segment from the internal data in <code>PixelBuffer</code>.</p>\n\n<p>You can certainly do this in unsafe code (internal buffer is a raw pointer; generate a new external pointer for each <code>PixelBlock</code>); but is it possible to achieve the same result using safe code?</p>\n\n<p>(NB. I'm open to using a data block allocated from libc::malloc if that'll help?)</p>\n"}, {"tags": ["buffer", "rust", "reader"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 6, "last_activity_date": 1445396232, "creation_date": 1445396232, "answer_id": 33250178, "question_id": 33249153, "link": "https://stackoverflow.com/questions/33249153/getting-a-reader-for-a-byte-array/33250178#33250178", "title": "Getting a reader for a byte array", "body": "<p>You are trying to invoke <code>next_byte::&lt;[u8]&gt;</code>, but <code>[u8]</code> does not implement <code>Read</code>.  <code>[u8]</code> and <code>&amp;'a [u8]</code> are not the same type! <code>[u8]</code> is an unsized array type and <code>&amp;'a [u8]</code> is a slice.</p>\n\n<p>When you use the <code>Read</code> implementation on a slice, it needs to mutate the slice in order for the next read to resume from the end of the previous read. Therefore, you need to pass a mutable borrow to a slice.</p>\n\n<p>Here's a simple working example:</p>\n\n<pre><code>use std::io::Read;\n\nfn next_byte&lt;R: Read&gt;(reader: &amp;mut R) {\n    let mut b = [0];\n    reader.read(&amp;mut b);\n    println!(\"{} \", b[0]);\n}\n\nfn main() {\n    let mut v = &amp;[1u8, 2, 3] as &amp;[u8];\n    next_byte(&amp;mut v);\n    next_byte(&amp;mut v);\n    next_byte(&amp;mut v);\n}\n</code></pre>\n"}], "owner": {"reputation": 30697, "user_id": 31667, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/082b069c287878a1bd5731f44c8f10e7?s=128&d=identicon&r=PG", "display_name": "viraptor", "link": "https://stackoverflow.com/users/31667/viraptor"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1582, "favorite_count": 0, "answer_count": 1, "score": 6, "last_activity_date": 1445396232, "creation_date": 1445388471, "question_id": 33249153, "link": "https://stackoverflow.com/questions/33249153/getting-a-reader-for-a-byte-array", "title": "Getting a reader for a byte array", "body": "<p>I'm trying to test some code which takes a reader. I've got a function:</p>\n\n<pre><code>fn next_byte&lt;R: Read&gt;(reader: &amp;mut R) -&gt; ...\n</code></pre>\n\n<p>How can I test it on some array of bytes? The docs say that there's a <code>impl&lt;'a&gt; Read for &amp;'a [u8]</code>, which would imply this should work:</p>\n\n<pre><code>next_byte(&amp;mut ([0x00u8, 0x00][..]))\n</code></pre>\n\n<p>But compiler disagrees:</p>\n\n<pre><code>the trait `std::io::Read` is not implemented for the type `[u8]`\n</code></pre>\n\n<p>Why? I explicitly said <code>&amp;mut</code>.</p>\n\n<p>Using rust 1.2.0</p>\n"}, {"tags": ["module", "rust", "rust-crates"], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 1, "last_activity_date": 1445371113, "creation_date": 1445371113, "answer_id": 33245750, "question_id": 33245545, "link": "https://stackoverflow.com/questions/33245545/how-to-import-a-crate-as-a-sub-module/33245750#33245750", "title": "How to import a crate as a sub module?", "body": "<p>You can use renaming in <code>use</code> and <code>extern crate</code>:</p>\n\n<pre><code>extern crate sdl2 as sdl2_;\npub use sdl2_ as sdl2;\n</code></pre>\n\n<p>I personally found how to do it in <a href=\"https://github.com/brson/stdx\" rel=\"nofollow\"><code>stdx</code></a> crate (which appears to be deprecated/abandoned, though, at least for now).</p>\n"}, {"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 0, "last_activity_date": 1445377473, "creation_date": 1445377473, "answer_id": 33247350, "question_id": 33245545, "link": "https://stackoverflow.com/questions/33245545/how-to-import-a-crate-as-a-sub-module/33247350#33247350", "title": "How to import a crate as a sub module?", "body": "<p>Another workaround:</p>\n\n<pre><code>extern crate sdl2;\nmod sdl2 {\n    pub use ::sdl2::*;\n}\n</code></pre>\n\n<p>Should work -- untested though.</p>\n"}], "owner": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 376, "favorite_count": 0, "accepted_answer_id": 33245750, "answer_count": 2, "score": 1, "last_activity_date": 1445377473, "creation_date": 1445370359, "question_id": 33245545, "link": "https://stackoverflow.com/questions/33245545/how-to-import-a-crate-as-a-sub-module", "title": "How to import a crate as a sub module?", "body": "<p>I'd like to import a crate into my library, and then use that crate as if it's a module in my library. If I do this:</p>\n\n<pre><code>extern crate sdl2;\npub use sdl2;\n</code></pre>\n\n<p>That gives me an error, suggesting I use <code>sdl2::*</code>, but I don't want to drag all the names from the crate into my library, I want them addressed as a sub-module, for example:</p>\n\n<pre><code>my_library::sdl2::init()\n</code></pre>\n\n<p>I also tried this:</p>\n\n<pre><code>pub extern crate sdl2;\n</code></pre>\n\n<p>That compiles, but I have no idea what it does. It doesn't seem to make the crate publicly accessible from my library though.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 11, "creation_date": 1445377546, "post_id": 33243862, "comment_id": 54297041, "body": "A common trick with <code>Entry</code>s of <code>Vec</code>s is <a href=\"http://doc.rust-lang.org/std/collections/hash_map/enum.Entry.html#method.or_insert\" rel=\"nofollow noreferrer\"><code>or_insert</code></a>: <code>dict.entry(key).or_insert(Vec::new()).push(token)</code>. (<code>Vec::new()</code> is very cheap, just storing three constants, so is fine to evaluate unconditionally.)"}, {"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "reply_to_user": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1445414552, "post_id": 33243862, "comment_id": 54309276, "body": "Awesome! I edited my answer to account for this alternative"}, {"owner": {"reputation": 301, "user_id": 1992354, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/7a4e995e378ef66de0ceaea5e1381ee1?s=128&d=identicon&r=PG", "display_name": "gmosx", "link": "https://stackoverflow.com/users/1992354/gmosx"}, "edited": false, "score": 0, "creation_date": 1592723071, "post_id": 33243862, "comment_id": 110522432, "body": "You can avoid the allocation when not needed by using:  <code>dict.entry(key).or_insert_with(Vec::new).push(token);</code>"}, {"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 0, "creation_date": 1592814931, "post_id": 33243862, "comment_id": 110548644, "body": "Note that there is no allocation in either case, since <code>Vec::new()</code> doesn&#39;t allocate. Rust vectors only allocate when the first element is pushed (or when the capacity is explicitly set without actually pushing)"}], "tags": [], "owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "is_accepted": true, "score": 22, "last_activity_date": 1445414523, "last_edit_date": 1445414523, "creation_date": 1445364781, "answer_id": 33243862, "question_id": 33243784, "link": "https://stackoverflow.com/questions/33243784/append-to-vector-as-value-of-hashmap/33243862#33243862", "title": "Append to vector as value of hashmap", "body": "<h3>Idiomatic solution</h3>\n\n<p>The idiomatic solution to your problem would be to use <a href=\"http://static.rust-lang.org/doc/master/std/collections/hash_map/struct.HashMap.html#method.entry\" rel=\"noreferrer\">entry</a>, as shown below:</p>\n\n<pre><code>for token in lorem.split_whitespace() {\n    if prefix[0] != \"\" {\n\n        let key = prefix.join(\" \");\n\n        match dict.entry(key) {\n            Entry::Vacant(e) =&gt; { e.insert(vec![token]); },\n            Entry::Occupied(mut e) =&gt; { e.get_mut().push(token); }\n        }\n    }\n\n    prefix[0] = prefix[1];\n    prefix[1] = token;\n}\n</code></pre>\n\n<p>If the key doesn't exist, you will get a vacant entry that you can use to insert a new value. If it does exist, you will get an occupied entry that you can use to modify the current value. If you want to know more, check out the <a href=\"http://static.rust-lang.org/doc/master/std/collections/hash_map/enum.Entry.html\" rel=\"noreferrer\">documentation</a>.</p>\n\n<h3>Alternative solution as proposed by Huon in the comments</h3>\n\n<p>This one is even shorter and seems better to me once you grasp what is going on:</p>\n\n<pre><code>for token in lorem.split_whitespace() {\n    if prefix[0] != \"\" {\n        let key = prefix.join(\" \");\n        dict.entry(key).or_insert(Vec::new()).push(token);\n    }\n\n    prefix[0] = prefix[1];\n    prefix[1] = token;\n}\n</code></pre>\n\n<h3>Why your code didn't work</h3>\n\n<p><code>get</code> returns an <code>Option&lt;&amp;Vec&lt;&amp;str&gt;&gt;</code>. You would need to take the <code>Vec</code> out of the option, but even in that case you cannot mutate it because it is a shared reference. You can use <code>get_mut</code> in combination with <code>unwrap</code> as shown below (however, this is considered bad style. You should really use entry):</p>\n\n<pre><code>for token in lorem.split_whitespace() {\n    if prefix[0] != \"\" {\n\n        let key = prefix.join(\" \");\n\n        if !dict.contains_key(&amp;key) {\n            dict.insert(key, vec![token]);\n        } else {\n            let v = dict.get_mut(&amp;key).unwrap();\n            v.push(token);\n        }\n    }\n\n    prefix[0] = prefix[1];\n    prefix[1] = token;\n}\n</code></pre>\n"}], "owner": {"reputation": 773, "user_id": 2758113, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/508e251a19626ff1b89b92854e59f95c?s=128&d=identicon&r=PG&f=1", "display_name": "user2758113", "link": "https://stackoverflow.com/users/2758113/user2758113"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3897, "favorite_count": 1, "accepted_answer_id": 33243862, "answer_count": 1, "score": 13, "last_activity_date": 1445414523, "creation_date": 1445364547, "question_id": 33243784, "link": "https://stackoverflow.com/questions/33243784/append-to-vector-as-value-of-hashmap", "title": "Append to vector as value of hashmap", "body": "<p>How does one append to a vector that is a hashmap value?</p>\n\n<pre><code>use std::collections::HashMap;\n\nfn main() {\n    let mut dict = HashMap::new();\n    let mut prefix = [\"\", \"\"];\n\n    let lorem = \"Lorem ipsum dolor sit amet, consectetur adipisicing elit. Eum debitis earum quidem dolorem quos consequatur perspiciatis architecto! Reiciendis rem est blanditiis fugiat quidem similique suscipit soluta, ab veniam, laborum numquam. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Eum debitis earum quidem dolorem quos consequatur perspiciatis architecto! Reiciendis rem est blanditiis fugiat quidem similique suscipit soluta, ab veniam, laborum numquam.\";\n\n    for token in lorem.split_whitespace() {\n        if prefix[0] != \"\" {\n\n            let key = prefix.join(\" \");\n\n            if !dict.contains_key(&amp;key) {\n                dict.insert(key, vec![token]);\n            } else {\n                let v = dict.get(&amp;key);\n                v.push(token); // does not actually return a vector\n            }\n        }\n\n        prefix[0] = prefix[1];\n        prefix[1] = token;\n    }\n}\n</code></pre>\n\n<p>The problem is the line <code>let v = dict.get(&amp;key);</code> Normally I would expect to be able to push onto the vector, but it seems to be returning some kind of collection, which I'm not sure on how to append to.</p>\n"}, {"tags": ["linker", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1445364422, "post_id": 33243665, "comment_id": 54289792, "body": "How did you install GCC / LLVM? <a href=\"http://stackoverflow.com/questions/29023305/could-not-exec-the-linker-cc-error-when-running-cargo-build\">This older question</a> suggests that Rust does not work with an OS X C compiler other than the one installed as part of XCode."}, {"owner": {"reputation": 399, "user_id": 4644468, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/9a52b2a168cce82a0f3997c132a7e107?s=128&d=identicon&r=PG&f=1", "display_name": "hiy", "link": "https://stackoverflow.com/users/4644468/hiy"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1445364748, "post_id": 33243665, "comment_id": 54289992, "body": "@Shepmaster I have Xcode and only Xcode, but I think GCC is just a symlink to clang these days."}, {"owner": {"reputation": 2231, "user_id": 4465497, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/vibwv.png?s=128&g=1", "display_name": "XAMPPRocky", "link": "https://stackoverflow.com/users/4465497/xampprocky"}, "edited": false, "score": 0, "creation_date": 1446324565, "post_id": 33243665, "comment_id": 54699333, "body": "Can you run the following command, and add the print to the question? <code>rustc -V</code>"}, {"owner": {"reputation": 399, "user_id": 4644468, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/9a52b2a168cce82a0f3997c132a7e107?s=128&d=identicon&r=PG&f=1", "display_name": "hiy", "link": "https://stackoverflow.com/users/4644468/hiy"}, "reply_to_user": {"reputation": 2231, "user_id": 4465497, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/vibwv.png?s=128&g=1", "display_name": "XAMPPRocky", "link": "https://stackoverflow.com/users/4465497/xampprocky"}, "edited": false, "score": 0, "creation_date": 1446405521, "post_id": 33243665, "comment_id": 54717868, "body": "@Aaronepower I updated the question."}, {"owner": {"reputation": 2231, "user_id": 4465497, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/vibwv.png?s=128&g=1", "display_name": "XAMPPRocky", "link": "https://stackoverflow.com/users/4465497/xampprocky"}, "edited": false, "score": 0, "creation_date": 1446406065, "post_id": 33243665, "comment_id": 54718075, "body": "@hiy try uninstalling rust, and install the new 1.4 version."}, {"owner": {"reputation": 399, "user_id": 4644468, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/9a52b2a168cce82a0f3997c132a7e107?s=128&d=identicon&r=PG&f=1", "display_name": "hiy", "link": "https://stackoverflow.com/users/4644468/hiy"}, "reply_to_user": {"reputation": 2231, "user_id": 4465497, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/vibwv.png?s=128&g=1", "display_name": "XAMPPRocky", "link": "https://stackoverflow.com/users/4465497/xampprocky"}, "edited": false, "score": 0, "creation_date": 1446406104, "post_id": 33243665, "comment_id": 54718086, "body": "@Aaronepower I just did :("}, {"owner": {"reputation": 2231, "user_id": 4465497, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/vibwv.png?s=128&g=1", "display_name": "XAMPPRocky", "link": "https://stackoverflow.com/users/4465497/xampprocky"}, "edited": false, "score": 0, "creation_date": 1446406215, "post_id": 33243665, "comment_id": 54718126, "body": "@hiy it seems like you have an out of date gcc. try this in terminal <code>xcode-select --install</code>"}], "owner": {"reputation": 399, "user_id": 4644468, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/9a52b2a168cce82a0f3997c132a7e107?s=128&d=identicon&r=PG&f=1", "display_name": "hiy", "link": "https://stackoverflow.com/users/4644468/hiy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 312, "favorite_count": 0, "answer_count": 0, "score": 0, "last_activity_date": 1446405566, "creation_date": 1445364116, "last_edit_date": 1446405566, "question_id": 33243665, "link": "https://stackoverflow.com/questions/33243665/gigantic-error-for-rust-hello-world", "title": "Gigantic error for Rust hello world", "body": "<p>I'm very new to Rust. It seems to be a very interesting language, but when I compile a simple hello world program, I get a gigantic error. This is the error I'm getting:</p>\n\n<pre><code>note: \"cc\" \"-m64\" \"-L\" \"/usr/local/lib/rustlib/x86_64-apple-darwin/lib\" \"hello.0.o\" \"-o\" \"hello\" \"-Wl,-force_load,/usr/local/lib/rustlib/x86_64-apple-darwin/lib/libmorestack.a\" \"-Wl,-dead_strip\" \"-nodefaultlibs\" \"/usr/local/lib/rustlib/x86_64-apple-darwin/lib/libstd-198068b3.rlib\" \"/usr/local/lib/rustlib/x86_64-apple-darwin/lib/libcollections-198068b3.rlib\" \"/usr/local/lib/rustlib/x86_64-apple-darwin/lib/librustc_unicode-198068b3.rlib\" \"/usr/local/lib/rustlib/x86_64-apple-darwin/lib/librand-198068b3.rlib\" \"/usr/local/lib/rustlib/x86_64-apple-darwin/lib/liballoc-198068b3.rlib\" \"/usr/local/lib/rustlib/x86_64-apple-darwin/lib/liblibc-198068b3.rlib\" \"/usr/local/lib/rustlib/x86_64-apple-darwin/lib/libcore-198068b3.rlib\" \"-L\" \"/usr/local/lib/rustlib/x86_64-apple-darwin/lib\" \"-L\" \"/Users/&lt;removed&gt;/Documents/cringe/.rust/lib/x86_64-apple-darwin\" \"-L\" \"/Users/&lt;removed&gt;/Documents/cringe/lib/x86_64-apple-darwin\" \"-l\" \"System\" \"-l\" \"pthread\" \"-l\" \"c\" \"-l\" \"m\" \"-l\" \"compiler-rt\"\nnote: couldn't understand kern.osversion `14.5.0'\nld: warning: directory not found for option '-L/Users/&lt;removed&gt;/Documents/cringe/.rust/lib/x86_64-apple-darwin'\nld: warning: directory not found for option '-L/Users/&lt;removed&gt;/Documents/cringe/lib/x86_64-apple-darwin'\nUndefined symbols for architecture x86_64:\n  \"__Unwind_GetLanguageSpecificData\", referenced from:\n      ___gcc_personality_v0 in libcompiler-rt.a(gcc_personality_v0.o)\n  \"__Unwind_GetIP\", referenced from:\n      ___gcc_personality_v0 in libcompiler-rt.a(gcc_personality_v0.o)\n  \"__Unwind_SetIP\", referenced from:\n      ___gcc_personality_v0 in libcompiler-rt.a(gcc_personality_v0.o)\n  \"__Unwind_DeleteException\", referenced from:\n      rt::lang_start::hd654f015947477d622w       in libstd-198068b3.rlib(std-198068b3.0.o)\n  \"__Unwind_RaiseException\", referenced from:\n      rt::unwind::imp::panic::h3a53abf3818f0dd1jqw    in libstd-198068b3.rlib(std-198068b3.0.o)\n  \"__Unwind_SetGR\", referenced from:\n      ___gcc_personality_v0 in libcompiler-rt.a(gcc_personality_v0.o)\n  \"__Unwind_GetIPInfo\", referenced from:\n      sys::backtrace::write::trace_fn::h510f8e821e33fb3fMus    in libstd-198068b3.rlib(std-198068b3.0.o)\n  \"__Unwind_Backtrace\", referenced from:\n      sys::backtrace::write::h71ee98355e9ff89fUss     in libstd-198068b3.rlib(std-198068b3.0.o)\n  \"__Unwind_GetRegionStart\", referenced from:\n      ___gcc_personality_v0 in libcompiler-rt.a(gcc_personality_v0.o)\n  \"__Unwind_Resume\", referenced from:\n      error::Box$LT$Error$u2b$$u20$Send$u20$$u2b$$u20$Sync$u20$$u2b$$u20$$u27$a$GT$.From$LT$$RF$$u27$b$u20$str$GT$::from::haef03d11abb0506f6da       in libstd-198068b3.rlib(std-198068b3.0.o)\n      thread..Inner::drop.33811::h2d4ce2ad919a880a        in libstd-198068b3.rlib(std-198068b3.0.o)\n      sys_common::thread_info::current_thread::h002e72f07e6510beVwr        in libstd-198068b3.rlib(std-198068b3.0.o)\n      thread::Thread::new::h823fd9fbff518de4EBb     in libstd-198068b3.rlib(std-198068b3.0.o)\n      rt::unwind::begin_unwind_inner::h1a353d5ea12e1abeVBw      in libstd-198068b3.rlib(std-198068b3.0.o)\n      rt::unwind::begin_unwind_fmt::h523af64a13dd33d21Aw      in libstd-198068b3.rlib(std-198068b3.0.o)\n      sys::os::getenv::hdf9b4093693c98ceLLu     in libstd-198068b3.rlib(std-198068b3.0.o)\n      ...\nld: symbol(s) not found for architecture x86_64\ncollect2: ld returned 1 exit status\n\nerror: aborting due to previous error\n</code></pre>\n\n<p>This is the program:</p>\n\n<pre><code>fn main() {\n    println!(\"Hello, World!\");\n}\n</code></pre>\n\n<p>I'm on OS X 10.10.5 (14F27). My Rust version is <code>rustc 1.3.0 (9a92aaf19 2015-09-15)</code></p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 2, "creation_date": 1445370931, "post_id": 33244472, "comment_id": 54293602, "body": "FYI, <code>mem::replace(&amp;mut option, None)</code> is exactly equivalent to <code>option.take()</code>, but the latter is more concise and idiomatic."}, {"owner": {"reputation": 889, "user_id": 1879192, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/54f9ed64051a86b03fe99f82805ac6d5?s=128&d=identicon&r=PG", "display_name": "Thierry", "link": "https://stackoverflow.com/users/1879192/thierry"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1445377977, "post_id": 33244472, "comment_id": 54297250, "body": "@VladimirMatveev Good point, but perhaps a bit too specific for the minimal example. Nevertheless, I&#39;ve updated my answer."}], "tags": [], "owner": {"reputation": 889, "user_id": 1879192, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/54f9ed64051a86b03fe99f82805ac6d5?s=128&d=identicon&r=PG", "display_name": "Thierry", "link": "https://stackoverflow.com/users/1879192/thierry"}, "is_accepted": true, "score": 2, "last_activity_date": 1445377836, "last_edit_date": 1445377836, "creation_date": 1445366741, "answer_id": 33244472, "question_id": 33243263, "link": "https://stackoverflow.com/questions/33243263/how-to-modify-vector-of-enum-in-place/33244472#33244472", "title": "How to modify vector of enum in place", "body": "<h1>After Vladimir's comment</h1>\n\n<p>At the risk of massively overfitting the concrete example; the following would also work:</p>\n\n<pre><code>fn main() {\n    let mut v = vec![Some(\"10\".to_owned()), Some(\"5\".to_owned()),\n                     None, Some(\"20\".to_owned())];\n\n    for i in v.iter_mut() {\n        if i.as_ref().map_or(false, |f| *f == \"20\") {\n            i.take();\n        }\n    }\n    println!(\"v = {:?}\", v);\n}\n</code></pre>\n\n<h1>Initial answer</h1>\n\n<p>Perhaps you simplified your example too much, but for the given program if can be done with only one copy, and only when a change is needed. The main idea is that you first check whether you need to change (i.e., that <code>i</code> is <code>Some(\"20\")</code>), and then you simply do the change. A little dance with borrowchk seems necessary, but a solution is as follows:</p>\n\n<pre><code>use std::mem;\n\nfn main() {\n    let mut v = vec![Some(\"10\".to_owned()), Some(\"5\".to_owned()),\n                     None, Some(\"20\".to_owned())];\n\n    for i in v.iter_mut() {\n        // Borrowchk-dance: make sure this borrow of i ends before we try to mutate\n        let is_a_twenty = match i {\n            &amp;mut Some(ref f) if *f == \"20\" =&gt; true,\n            _ =&gt; false,\n        };\n        // Now that we're free to borrow i mutably, go ahead and do so\n        if is_a_twenty {\n            mem::replace(i, None);\n        }\n\n    }\n    println!(\"v = {:?}\", v);\n}\n</code></pre>\n"}], "owner": {"reputation": 2232, "user_id": 1430323, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/70e8f1601166dab5b623eeb428115050?s=128&d=identicon&r=PG", "display_name": "tofcoder", "link": "https://stackoverflow.com/users/1430323/tofcoder"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 636, "favorite_count": 0, "accepted_answer_id": 33244472, "answer_count": 1, "score": 2, "last_activity_date": 1445377836, "creation_date": 1445362776, "question_id": 33243263, "link": "https://stackoverflow.com/questions/33243263/how-to-modify-vector-of-enum-in-place", "title": "How to modify vector of enum in place", "body": "<p>I want to filter out some items in a vector of <code>Option</code> and I want to do so in place without creating a new vector, as it could be done with a combination of <code>map</code> and <code>collect</code>. I do not want to use <code>Vec::map_in_place</code> as this is deprecated.</p>\n\n<p>I found the following solution:</p>\n\n<pre><code>\ufeffuse std::mem;\n\nfn main() {\n\n    let mut v = vec![Some(\"10\".to_owned()), Some(\"5\".to_owned()),\n                     None, Some(\"20\".to_owned())];\n\n    for i in v.iter_mut() {\n        let j = match mem::replace(i, None) {\n            None =&gt; None,\n            Some(f) =&gt; if f == \"20\" { None } else { Some(f) }\n        };\n        mem::replace(i, j);\n    }\n    println!(\"v = {:?}\", v);\n}\n</code></pre>\n\n<p><a href=\"http://is.gd/Z5XhvC\" rel=\"nofollow\">(playpen)</a></p>\n\n<p>Although it works fine, it makes 2 copies for each element, whether the element is modified or not.</p>\n\n<p>Is there a more idiomatic solution that would also require less copying?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 8001, "user_id": 291372, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b5c1a712772e2552bebc14a89bf9aeb1?s=128&d=identicon&r=PG", "display_name": "Alex G.P.", "link": "https://stackoverflow.com/users/291372/alex-g-p"}, "is_accepted": true, "score": 0, "last_activity_date": 1445351693, "creation_date": 1445351693, "answer_id": 33239543, "question_id": 33238639, "link": "https://stackoverflow.com/questions/33238639/unable-to-compile-project-using-mio-use-of-unstable-library-feature-udp-extra/33239543#33239543", "title": "Unable to compile project using MIO - use of unstable library feature &#39;udp_extras&#39;", "body": "<p>Looks like Windows support of <code>mio</code> (or <code>rust</code>) still not very good. So this code, which does not compiled with <code>rustc 1.3-stable</code> was compiled successfully with <code>rusts 1.5-nightly</code>.</p>\n"}], "owner": {"reputation": 8001, "user_id": 291372, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b5c1a712772e2552bebc14a89bf9aeb1?s=128&d=identicon&r=PG", "display_name": "Alex G.P.", "link": "https://stackoverflow.com/users/291372/alex-g-p"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 162, "favorite_count": 0, "accepted_answer_id": 33239543, "answer_count": 1, "score": 0, "last_activity_date": 1445362251, "creation_date": 1445349275, "last_edit_date": 1445362251, "question_id": 33238639, "link": "https://stackoverflow.com/questions/33238639/unable-to-compile-project-using-mio-use-of-unstable-library-feature-udp-extra", "title": "Unable to compile project using MIO - use of unstable library feature &#39;udp_extras&#39;", "body": "<p>I am trying to reproduce a TCP client/server chat from an article. I cannot compile the skeleton for the server which uses the <code>mio</code> crate. Here is my code:</p>\n\n<pre><code>extern crate mio;\nuse mio::*;\n\nstruct WebSocketServer;\n\nimpl Handler for WebSocketServer {\n    type Timeout = usize;\n    type Message = ();\n}\n\nfn main() {\n    let mut event_loop = EventLoop::new().unwrap();\n    let mut handler = WebSocketServer;\n    event_loop.run(&amp;mut handler).unwrap();\n}\n</code></pre>\n\n<p>And here is error message which is absolutely unclear for me:</p>\n\n<pre><code>C:\\Users\\ZZZ\\.cargo\\git\\checkouts\\mio-75006fe295376f74\\master\\src\\sys\\windows\\udp.rs:177:44: 177:61 error: use of unstab\nle library feature 'udp_extras': available through the `net2` crate on crates.io\nC:\\Users\\ZZZ\\.cargo\\git\\checkouts\\mio-75006fe295376f74\\master\\src\\sys\\windows\\udp.rs:177         try!(self.inner().socke\nt.socket()).set_broadcast(on)\n            ^~~~~~~~~~~~~~~~~\nerror: aborting due to previous error\nCould not compile `mio`.\n</code></pre>\n\n<p>And here is  <code>Cargo.toml</code>:</p>\n\n<pre><code>[package]\nname = \"rust-chat\"\nversion = \"0.2.0\"\nauthors = [\"Alex &lt;zzz@yyy.com&gt;\"]\n\n[dependencies.mio]\ngit = \"https://github.com/carllerche/mio\"\n</code></pre>\n\n<p>I tried to add <code>net2</code> to section <code>dependencies</code> explicitly but that still does not work.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 2849, "user_id": 653378, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/99da5370aa9792c23e10d54b8a0bade2?s=128&d=identicon&r=PG", "display_name": "evuez", "link": "https://stackoverflow.com/users/653378/evuez"}, "edited": false, "score": 0, "creation_date": 1445348393, "post_id": 33237944, "comment_id": 54279214, "body": "Well I didn&#39;t think it would be that simple... Thank you!"}], "tags": [], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "is_accepted": true, "score": 5, "last_activity_date": 1445347569, "creation_date": 1445347569, "answer_id": 33237944, "question_id": 33237849, "link": "https://stackoverflow.com/questions/33237849/vec-of-rng-in-struct-field-cannot-borrow-immutable-field-as-mutable/33237944#33237944", "title": "Vec of Rng in struct field, cannot borrow immutable field as mutable", "body": "<p>You need to borrow <code>self</code> mutably:</p>\n\n<pre><code>impl Foo {\n    fn bar(&amp;mut self) -&gt; i32 {\n        self.generators[0].gen::&lt;i32&gt;()\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 2849, "user_id": 653378, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/99da5370aa9792c23e10d54b8a0bade2?s=128&d=identicon&r=PG", "display_name": "evuez", "link": "https://stackoverflow.com/users/653378/evuez"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1171, "favorite_count": 0, "closed_date": 1445348598, "accepted_answer_id": 33237944, "answer_count": 1, "score": 2, "last_activity_date": 1445347569, "creation_date": 1445347345, "question_id": 33237849, "link": "https://stackoverflow.com/questions/33237849/vec-of-rng-in-struct-field-cannot-borrow-immutable-field-as-mutable", "closed_reason": "Duplicate", "title": "Vec of Rng in struct field, cannot borrow immutable field as mutable", "body": "<p>I wanted to create a <code>struct</code>with a field containing a <code>Vec&lt;ThreadRng&gt;</code>.</p>\n\n<p>So this works fine, I have a list of generators stored in <code>Foo.generators</code>:</p>\n\n<pre><code>extern crate rand;\n\nuse std::vec::Vec;\nuse rand::{Rng, ThreadRng};\n\nstruct Foo {\n    generators: Vec&lt;ThreadRng&gt;,\n}\n\nimpl Foo {\n    fn new() -&gt; Foo {\n        Foo { generators: vec![rand::thread_rng(), rand::thread_rng()]}\n    }\n}\n</code></pre>\n\n<p>Now I would like to use it, say in a <code>bar</code> method:</p>\n\n<pre><code>impl Foo {\n    fn bar(&amp;self) -&gt; i32 {\n        self.generators[0].gen::&lt;i32&gt;()\n    }\n}\n</code></pre>\n\n<p>But that I can't, and I get a <code>cannot borrow immutable field 'self.generators' as mutable</code>.</p>\n\n<p>As I understand I cannot use the <code>gen</code> method of <code>ThreadRng</code> because it requires a mutable reference to the RNG (<a href=\"https://doc.rust-lang.org/rand/rand/trait.Rng.html#method.gen\" rel=\"nofollow\"><code>gen&lt;T: Rand&gt;(&amp;mut self)</code></a>) and since the definition of my field <code>Foo.generators</code> \"<code>Vec&lt;ThreadRng&gt;</code>\" doesn't specify that the <code>ThreadRng</code> should be mutable, I can't do anything with it that requires mutability.</p>\n\n<p>First question: is my understanding of what's happening correct, or am I completely wrong? If so, could someone explain to me what's really happening?</p>\n\n<p>Second question: admitting that my understanding is correct, how am I supposed to allow actions that requires mutability on my <code>ThreadRng</code>s?</p>\n\n<p>Thanks in advance!</p>\n"}, {"tags": ["rust", "mutability"], "answers": [{"comments": [{"owner": {"reputation": 1457, "user_id": 2849934, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3ff0a46f18c8d548fa91c12b922290b6?s=128&d=identicon&r=PG", "display_name": "John", "link": "https://stackoverflow.com/users/2849934/john"}, "edited": false, "score": 1, "creation_date": 1445335227, "post_id": 33233393, "comment_id": 54270390, "body": "But what does <code>UnsafeCell</code> has anything to do with <code>Cell</code>?"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 5, "last_activity_date": 1445334646, "creation_date": 1445334646, "answer_id": 33233393, "question_id": 33233003, "link": "https://stackoverflow.com/questions/33233003/how-does-the-rust-compiler-know-cell-has-internal-mutability/33233393#33233393", "title": "How does the Rust compiler know `Cell` has internal mutability?", "body": "<p>The relevant part from the <a href=\"https://github.com/rust-lang/rust/blob/master/src/libcore/cell.rs#L790-L794\" rel=\"noreferrer\">Rust source code</a> is this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[lang = \"unsafe_cell\"]\npub struct UnsafeCell&lt;T: ?Sized&gt; {\n    value: T,\n}\n</code></pre>\n\n<p>Specifically, the <code>#[lang = \"unsafe_cell\"]</code> is what tells the compiler that this particular type maps to its internal notion of \"the interior mutability type\".  This sort of thing is called a \"lang item\".</p>\n\n<p>You <em>cannot</em> define your own type for this purpose, as you can't have multiple instances of a single lang item.  The only way you could was if you completely replaced the standard library with your own code.</p>\n"}, {"comments": [{"owner": {"reputation": 1457, "user_id": 2849934, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3ff0a46f18c8d548fa91c12b922290b6?s=128&d=identicon&r=PG", "display_name": "John", "link": "https://stackoverflow.com/users/2849934/john"}, "edited": false, "score": 0, "creation_date": 1445335474, "post_id": 33233394, "comment_id": 54270529, "body": "Isn&#39;t this applicable to <code>testa</code> too? I think you are missing the point... Or I&#39;m not getting your point... <code>rustc</code> doesn&#39;t allow the move statement <code>u2; &#47;&#47; (1)</code> only when <code>testa_mut</code> or <code>testb</code> is called; but with only <code>testa</code>, it&#39;s fine..."}, {"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "reply_to_user": {"reputation": 1457, "user_id": 2849934, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3ff0a46f18c8d548fa91c12b922290b6?s=128&d=identicon&r=PG", "display_name": "John", "link": "https://stackoverflow.com/users/2849934/john"}, "edited": false, "score": 0, "creation_date": 1445335728, "post_id": 33233394, "comment_id": 54270700, "body": "No. The difference is that <code>testa</code> only gets an immutable reference to the FooRef (which also needs to live as long as the Foo given), whereas in <code>testb</code>, the <code>Cell</code> <i>owns</i> the <code>FooRef</code>."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 1, "creation_date": 1445339237, "post_id": 33233394, "comment_id": 54272942, "body": "@llogiq, ownership isn&#39;t the important thing, e.g. <code>fn testc&lt;&#39;a&gt;(_: &amp;Option&lt;FooRef&lt;&#39;a&gt;&gt;, _: &amp;&#39;a Foo) {} let c = Some(FooRef(&amp;u1)); testc(&amp;c, &amp;u2);</code> behaves like <code>testa</code> not <code>testb</code>, despite the <code>Option</code> owning the <code>FooRef</code> just like the <code>Cell</code>. (The difference is <code>Option&lt;T&gt;</code> is variant in <code>T</code>, but <code>Cell&lt;T&gt;</code> is invariant in <code>T</code>.)"}], "tags": [], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "is_accepted": false, "score": 0, "last_activity_date": 1445342954, "last_edit_date": 1445342954, "creation_date": 1445334650, "answer_id": 33233394, "question_id": 33233003, "link": "https://stackoverflow.com/questions/33233003/how-does-the-rust-compiler-know-cell-has-internal-mutability/33233394#33233394", "title": "How does the Rust compiler know `Cell` has internal mutability?", "body": "<p><s>In <code>testb</code>, you bind the lifetime <code>'a</code> of your <code>Foo</code> reference to the <code>FooRef</code> argument. This tells the borrow checker that the <code>&amp;u2</code> must live at least as long as <code>b</code>'s reference to it. Note that this reasoning requires no knowledge of the function body.</s></p>\n\n<p><s>Within the function, the borrow checker can prove that the second argument lives at least as long as the first, due to the lifetime annotation, otherwise the function would fail to compile.</s></p>\n\n<p>Edit: Disregard this; read huon-dbaupp's answer. I'm leaving this so you can read the comments.</p>\n"}, {"tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 14, "last_activity_date": 1452907269, "last_edit_date": 1452907269, "creation_date": 1445335721, "answer_id": 33233793, "question_id": 33233003, "link": "https://stackoverflow.com/questions/33233003/how-does-the-rust-compiler-know-cell-has-internal-mutability/33233793#33233793", "title": "How does the Rust compiler know `Cell` has internal mutability?", "body": "<p>The reason the code with <code>Cell</code> compiles (ignoring the <code>u2</code>) and mutates is <code>Cell</code>'s whole API takes <code>&amp;</code> pointers:</p>\n\n<pre><code>impl&lt;T&gt; Cell&lt;T&gt; where T: Copy {\n    fn new(value: T) -&gt; Cell&lt;T&gt; { ... }\n\n    fn get(&amp;self) -&gt; T { ... }\n\n    fn set(&amp;self, value: T) { ... }\n}\n</code></pre>\n\n<p>It is carefully written to allow mutation while shared, i.e. interior mutability. This allows it to expose these mutating methods behind a <code>&amp;</code> pointer. Conventional mutation requires a <code>&amp;mut</code> pointer (with its associated non-aliasing restrictions) because having unique access to a value is the only way to ensure that mutating it will be safe, in general.</p>\n\n<p>So, the way to create types that allow mutation while shared is to ensure that their API for mutation uses <code>&amp;</code> pointers instead of <code>&amp;mut</code>. Generally speaking this should be done by having the type contain pre-written types like <code>Cell</code>, i.e. use them as building blocks.</p>\n\n<p>The reason later use of <code>u2</code> fails is a longer story...</p>\n\n<h2><code>UnsafeCell</code></h2>\n\n<p>At a lower level, mutating a value while it is shared (e.g. has multiple <code>&amp;</code> pointers to it) is undefined behaviour, except for when the value is contained in an <a href=\"http://doc.rust-lang.org/std/cell/struct.UnsafeCell.html\" rel=\"noreferrer\"><code>UnsafeCell</code></a>. This is the very lowest level of interior mutability, designed to be used as a building block for building other abstractions.</p>\n\n<p>Types that allow safe interior mutability, like <code>Cell</code>, <code>RefCell</code> (for sequential code), the <code>Atomic*</code>s, <code>Mutex</code> and <code>RwLock</code> (for concurrent code) all use <code>UnsafeCell</code> internally and impose some restrictions around it to ensure that it is safe. For example, the definition of <code>Cell</code> is:</p>\n\n<pre><code>pub struct Cell&lt;T&gt; {\n    value: UnsafeCell&lt;T&gt;,\n}\n</code></pre>\n\n<p><code>Cell</code> ensures that mutations are safe by carefully restricting the API it offers: the <code>T: Copy</code> in the code above is key.</p>\n\n<p>(If you wish to write your own low-level type with interior mutability, you just need to ensure that the things that are mutated while being shared are contained in an <code>UnsafeCell</code>. However, I recommended not doing this: Rust has several existing tools (the ones I mentioned above) for interior mutability that are carefully vetted to be safe and correct within Rust's aliasing and mutation rules; breaking the rules is undefined behaviour and can easily result in miscompiled programs.)</p>\n\n<h2>Lifetime Variance</h2>\n\n<p>Anyway, the key that makes the compiler understand that the <code>&amp;u2</code> is borrowed for the cell case is variance of lifetimes. Typically, the compiler will shorten lifetimes when you pass things to functions, which makes things work great, e.g. you can pass a string literal (<code>&amp;'static str</code>) to a function expecting <code>&amp;'a str</code>, because the long <code>'static</code> lifetime is shortened to <code>'a</code>. This is happening for <code>testa</code>: the <code>testa(&amp;a, &amp;u2)</code> call is shortening the lifetimes of the references from the longest they could possibly be (the whole of the body of <code>main</code>) to just that function call. The compiler is free to do this because normal references are variant<sup>1</sup> in their lifetimes, i.e. it can vary them.</p>\n\n<p>However, for <code>testa_mut</code>, the <code>&amp;mut FooRef&lt;'a&gt;</code> stops the compiler being able to shorten that lifetime (in technical terms <code>&amp;mut T</code> is \"invariant in <code>T</code>\"), exactly because something like <code>testa_mut</code> can happen. In this case, the compiler sees the <code>&amp;mut FooRef&lt;'a&gt;</code> and understand that the <code>'a</code> lifetime can't be shorted at all, and so in the call <code>testa_mut(&amp;mut a, &amp;u2)</code> it has to take the true lifetime of the <code>u2</code> value (the whole function) and hence causes <code>u2</code> to be borrowed for that region.</p>\n\n<p>So, coming back to interior mutability: <code>UnsafeCell&lt;T&gt;</code> not only tells the compiler that a thing may be mutated while aliased (and hence inhibits some optimisations that would be undefined), it is also invariant in <code>T</code>, i.e. it acts like a <code>&amp;mut T</code> for the purposes of this lifetime/borrowing analysis, exactly because it allows code like <code>testb</code>.</p>\n\n<p>The compiler infers this variance automatically; it becomes invariant when some type parameter/lifetime is contained in <code>UnsafeCell</code> or <code>&amp;mut</code> somewhere in the type (like <code>FooRef</code> in <code>Cell&lt;FooRef&lt;'a&gt;&gt;</code>).</p>\n\n<p><a href=\"http://doc.rust-lang.org/stable/nomicon/subtyping.html\" rel=\"noreferrer\">The Rustonomicon talks about this</a> and other detailed considerations like it.</p>\n\n<p><sup>1</sup> Strictly speaking, there's four levels of variance in type system jargon: bivariance, covariance, contravariance and invariance. I believe Rust really only has invariance and covariance (there is some contravariance, but it caused problems and is removed/in the process of being removed). When I say \"variant\" it really means \"covariant\". See the Rustonomicon link above for more detail.</p>\n"}], "owner": {"reputation": 1457, "user_id": 2849934, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3ff0a46f18c8d548fa91c12b922290b6?s=128&d=identicon&r=PG", "display_name": "John", "link": "https://stackoverflow.com/users/2849934/john"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 362, "favorite_count": 0, "accepted_answer_id": 33233793, "answer_count": 3, "score": 8, "last_activity_date": 1452920048, "creation_date": 1445333555, "last_edit_date": 1452920048, "question_id": 33233003, "link": "https://stackoverflow.com/questions/33233003/how-does-the-rust-compiler-know-cell-has-internal-mutability", "title": "How does the Rust compiler know `Cell` has internal mutability?", "body": "<p>Consider the following code (<a href=\"http://is.gd/8zn4R5\" rel=\"nofollow\">Playground version</a>):</p>\n\n<pre><code>use std::cell::Cell;\n\nstruct Foo(u32);\n\n#[derive(Clone, Copy)]\nstruct FooRef&lt;'a&gt;(&amp;'a Foo);\n\n// the body of these functions don't matter\nfn testa&lt;'a&gt;(x: &amp;FooRef&lt;'a&gt;, y: &amp;'a Foo) { x; }\nfn testa_mut&lt;'a&gt;(x: &amp;mut FooRef&lt;'a&gt;, y: &amp;'a Foo) { *x = FooRef(y); }\nfn testb&lt;'a&gt;(x: &amp;Cell&lt;FooRef&lt;'a&gt;&gt;, y: &amp;'a Foo) { x.set(FooRef(y)); }\n\nfn main() {\n    let u1 = Foo(3);\n    let u2 = Foo(5);\n    let mut a = FooRef(&amp;u1);\n    let b = Cell::new(FooRef(&amp;u1));\n\n    // try one of the following 3 statements\n    testa(&amp;a, &amp;u2);         // allow move at (1)\n    testa_mut(&amp;mut a, &amp;u2); // deny move -- fine!\n    testb(&amp;b, &amp;u2);         // deny move -- but how does rustc know?\n\n    u2;                     // (1) move out\n    // ... do something with a or b\n}\n</code></pre>\n\n<p>I'm curious how <code>rustc</code> knows that <code>Cell</code> has interior mutability and may hold on to a reference of the other argument.</p>\n\n<p>If I create another data structure from scratch, similar to <code>Cell</code> which also has interior mutability, how do I tell <code>rustc</code> that?</p>\n"}, {"tags": ["function", "rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1445331976, "post_id": 33232402, "comment_id": 54268237, "body": "I&#39;m not sure what effect this would have, but maybe it&#39;s a no-brainer to make sure that all functions with the same signature can be coerced into that signature."}, {"owner": {"reputation": 499, "user_id": 4867446, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh3.googleusercontent.com/-sp2oLGjecIA/AAAAAAAAAAI/AAAAAAAAAIA/41wEvRe4avs/photo.jpg?sz=128", "display_name": "Slava Baginov", "link": "https://stackoverflow.com/users/4867446/slava-baginov"}, "edited": false, "score": 0, "creation_date": 1445337524, "post_id": 33232402, "comment_id": 54271811, "body": "Thanks for your answer. My first attempt was to implement <code>ToTarget</code> for <code>Fn</code> trait, but as soon as I wrote second implementation I found out that I can&#39;t have second implementation of ToTarget for trait. I think I&#39;ll switch to macros in this particular case."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 2, "last_activity_date": 1445331890, "creation_date": 1445331890, "answer_id": 33232402, "question_id": 33231806, "link": "https://stackoverflow.com/questions/33231806/implementing-traits-for-fn-type/33232402#33232402", "title": "Implementing traits for fn type", "body": "<p>The problem is that every function has its very own type, but might have the same signature as another function. You implemented the trait <code>ToTarget</code> for all functions with the signature <code>fn(i32) -&gt; String</code>.</p>\n\n<p>As an example: your function <code>b</code> has type <code>fn(i32) -&gt; collections::string::String {b}</code> (note the <code>{b}</code> in the type), but you cannot specify this type explicitly.</p>\n\n<p>What you can do is implement <code>ToTarget</code> for all types that that implement <code>Fn(i32) -&gt; String</code>:</p>\n\n<pre><code>trait ToTarget {\n    fn custom_str(&amp;self) -&gt; String;\n}\n\nimpl&lt;T&gt; ToTarget for T where T: Fn(i32) -&gt; String {\n    fn custom_str(&amp;self) -&gt; String {\n        self(4)\n    }\n}\n\nfn b(x: i32) -&gt; String {\n    x.to_string()\n}\n</code></pre>\n\n<p>But then you cannot implement <code>ToTarget</code> for <code>Fn() -&gt; String</code> or any other types for that matter, since there might be a type that implements <code>Fn(i32) -&gt; String</code> AND <code>Fn() -&gt; String</code>, which would yield two different implementations for the same type. As far as I can see, even <a href=\"https://github.com/rust-lang/rfcs/pull/1210\" rel=\"nofollow\">impl specialization</a> won't help here, so you are out of luck.</p>\n"}], "owner": {"reputation": 499, "user_id": 4867446, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh3.googleusercontent.com/-sp2oLGjecIA/AAAAAAAAAAI/AAAAAAAAAIA/41wEvRe4avs/photo.jpg?sz=128", "display_name": "Slava Baginov", "link": "https://stackoverflow.com/users/4867446/slava-baginov"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 294, "favorite_count": 0, "accepted_answer_id": 33232402, "answer_count": 1, "score": 2, "last_activity_date": 1445340638, "creation_date": 1445330177, "last_edit_date": 1445340638, "question_id": 33231806, "link": "https://stackoverflow.com/questions/33231806/implementing-traits-for-fn-type", "title": "Implementing traits for fn type", "body": "<p>I want to implement custom trait for several concrete functions, i.e. </p>\n\n<pre><code>trait ToTarget {\n    fn custom_str(&amp;self) -&gt; String;\n}\n\nimpl ToTarget for fn() -&gt; String {\n    fn custom_str(&amp;self) -&gt; String {\n        self()\n    }\n}\n\nimpl ToTarget for fn(i32) -&gt; String {\n    fn custom_str(&amp;self) -&gt; String {\n        self(4)\n    }\n}\n\nfn a() -&gt; String {\n    \"abc\".to_string()\n}\n\nfn b(x: i32) -&gt; String {\n    x.to_string()\n}\n\nfn main() {\n    println!(\"{}\", b.custom_str());\n}\n</code></pre>\n\n<p>However, this does not compile giving the next error:</p>\n\n<pre><code>&lt;anon&gt;:26:22: 26:34 error: no method named `custom_str` found for type `fn(i32) -&gt; collections::string::String {b}` in the current scope\n&lt;anon&gt;:26     println!(\"{}\", b.custom_str());\n                               ^~~~~~~~~~~~\nnote: in expansion of format_args!\n&lt;std macros&gt;:2:25: 2:56 note: expansion site\n&lt;std macros&gt;:1:1: 2:62 note: in expansion of print!\n&lt;std macros&gt;:3:1: 3:54 note: expansion site\n&lt;std macros&gt;:1:1: 3:58 note: in expansion of println!\n&lt;anon&gt;:26:5: 26:36 note: expansion site\n&lt;anon&gt;:26:22: 26:34 help: items from traits can only be used if the trait is implemented and in scope; the following trait defines an item `custom_str`, perhaps you need to implement it:\n&lt;anon&gt;:26:22: 26:34 help: candidate #1: `ToTarget`\nerror: aborting due to previous error\nplaypen: application terminated with error code 101\n</code></pre>\n\n<p>However, If I specify the type of b, code compiles:</p>\n\n<pre><code>println!(\"{}\", (b as fn(i32) -&gt; String).custom_str());\n</code></pre>\n\n<p>So the question is: is there a way to make my first version of code with </p>\n\n<pre><code>println!(\"{}\", b.custom_str());\n</code></pre>\n\n<p>compile? Specifying type of function every time I want to use my trait is really annoying.</p>\n"}, {"tags": ["sockets", "udp", "rust", "multicast", "igmp"], "comments": [{"owner": {"reputation": 41983, "user_id": 866732, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/f09f0253204000d6083ed1de21afc6fd?s=128&d=identicon&r=PG", "display_name": "WiSaGaN", "link": "https://stackoverflow.com/users/866732/wisagan"}, "edited": false, "score": 0, "creation_date": 1445334642, "post_id": 33228654, "comment_id": 54270006, "body": "Do you mean bind to local interface?"}, {"owner": {"reputation": 1668, "user_id": 311358, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/0b2b51e4cceb4a0c1609b81815001b69?s=128&d=identicon&r=PG", "display_name": "xrl", "link": "https://stackoverflow.com/users/311358/xrl"}, "reply_to_user": {"reputation": 41983, "user_id": 866732, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/f09f0253204000d6083ed1de21afc6fd?s=128&d=identicon&r=PG", "display_name": "WiSaGaN", "link": "https://stackoverflow.com/users/866732/wisagan"}, "edited": false, "score": 0, "creation_date": 1445363817, "post_id": 33228654, "comment_id": 54289461, "body": "I think there&#39;s a distinction to be made when saying &quot;bind to a local interface&quot;. I&#39;m not only trying to bind to &quot;loopback&quot;, but to all interfaces on the machine running the code."}], "owner": {"reputation": 1668, "user_id": 311358, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/0b2b51e4cceb4a0c1609b81815001b69?s=128&d=identicon&r=PG", "display_name": "xrl", "link": "https://stackoverflow.com/users/311358/xrl"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 156, "favorite_count": 0, "answer_count": 0, "score": 5, "last_activity_date": 1445362316, "creation_date": 1445318834, "last_edit_date": 1445362316, "question_id": 33228654, "link": "https://stackoverflow.com/questions/33228654/list-all-valid-ipv4addr-on-host", "title": "List all valid Ipv4Addr on host", "body": "<p>I need to send the same multicast UDP packet on all available addresses on my host. I need to send to <code>localhost</code>/<code>127.0.0.1</code> and <code>239.255.0.1</code>. Rust's <code>std</code> lib has deprecated multicast behavior since version 1.2, and anyway, to get the specificity I need I have to switch to the more complete <code>net2</code>.</p>\n\n<p>The <code>net2</code> API has a bunch of <a href=\"http://alexcrichton.com/net2-rs/net2/trait.UdpSocketExt.html\" rel=\"nofollow\">UDP extensions</a> which provide the API I'm looking for. I'm specifically interested in</p>\n\n<pre><code>fn join_multicast_v4(&amp;self, multiaddr: &amp;Ipv4Addr, interface: &amp;Ipv4Addr) -&gt; Result&lt;()&gt;\n</code></pre>\n\n<p>But I can't figure out what to do for multiaddr vs interface. I thought I would just give the multiaddr <code>127.0.0.1</code> or <code>239.255.0.1</code> but how do I find the valid IPv4's for the <code>interface</code> parameter? Is there a Rust function, somewhere out there, that can provide a <code>Vec&lt;Ipv4Addr&gt;</code>? Do I need to parse the output of <code>ifconfig</code>?</p>\n\n<p>Here is a stand-alone program which sends out my public interface (had to find that <code>192.168.0.102</code> address by hand):</p>\n\n<pre><code>extern crate net2;\n\nuse std::net::{ UdpSocket, Ipv4Addr };\nuse net2::UdpSocketExt;\n\nfn main() {\n  let sock = UdpSocket::bind(\"0.0.0.0:2345\").unwrap();\n  let local_addr = Ipv4Addr::new(192, 168, 0, 102);\n  let multicast_addr = Ipv4Addr::new(239, 255, 0, 1);\n\n  sock.join_multicast_v4(&amp;multicast_addr, &amp;local_addr).unwrap();\n}\n</code></pre>\n\n<p>I'm compiling on nightlies if that makes any difference.</p>\n"}, {"tags": ["string", "vector", "rust", "type-conversion"], "answers": [{"tags": [], "owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "is_accepted": false, "score": 2, "last_activity_date": 1445263701, "creation_date": 1445263701, "answer_id": 33216610, "question_id": 33216514, "link": "https://stackoverflow.com/questions/33216514/how-do-i-convert-a-vecstring-to-vecstr/33216610#33216610", "title": "How do I convert a Vec&lt;String&gt; to Vec&lt;&amp;str&gt;?", "body": "<p>This one uses <code>collect</code>:</p>\n\n<pre><code>let strs: Vec&lt;&amp;str&gt; = another_items.iter().map(|s| s as &amp;str).collect();\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 667, "user_id": 5463164, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/87d04f5aeec715fb70282aab5033f96d?s=128&d=identicon&r=PG&f=1", "display_name": "Kalita Alexey", "link": "https://stackoverflow.com/users/5463164/kalita-alexey"}, "is_accepted": false, "score": 3, "last_activity_date": 1445264144, "creation_date": 1445264144, "answer_id": 33216762, "question_id": 33216514, "link": "https://stackoverflow.com/questions/33216514/how-do-i-convert-a-vecstring-to-vecstr/33216762#33216762", "title": "How do I convert a Vec&lt;String&gt; to Vec&lt;&amp;str&gt;?", "body": "<pre><code>another_items.iter().map(|item| item.deref()).collect::&lt;Vec&lt;&amp;str&gt;&gt;()\n</code></pre>\n\n<p>To use <code>deref()</code> you must add using <code>use std::ops::Deref</code></p>\n"}, {"comments": [{"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 3, "creation_date": 1445306885, "post_id": 33217302, "comment_id": 54258232, "body": "Explicitly calling <code>deref</code> (especially as a free function) reads quite strangely IMO, I find<code>v2</code> or <code>v5</code> nicer personally. (One could also use <code>as_ref</code>, <code>v.iter().map(|s| s.as_ref())...</code> which is the typical method for generic conversions of this form, e.g. many functions in <code>std</code> take <code>P: AsRef&lt;Path&gt;</code>.)"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1445326098, "post_id": 33217302, "comment_id": 54264826, "body": "thanks, you are totally right. <code>AsRef</code> is much more appropriate here. I updated the post"}, {"owner": {"reputation": 2210, "user_id": 747032, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/39fc02d6a812edf6daa8914247e9b4c0?s=128&d=identicon&r=PG", "display_name": "JeanMertz", "link": "https://stackoverflow.com/users/747032/jeanmertz"}, "edited": false, "score": 2, "creation_date": 1558976614, "post_id": 33217302, "comment_id": 99267118, "body": "In the v8 example, you can also call <code>String::as_str</code>, which makes it even more clear what the intent is of your code."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 51, "last_activity_date": 1584388549, "last_edit_date": 1584388549, "creation_date": 1445265626, "answer_id": 33217302, "question_id": 33216514, "link": "https://stackoverflow.com/questions/33216514/how-do-i-convert-a-vecstring-to-vecstr/33217302#33217302", "title": "How do I convert a Vec&lt;String&gt; to Vec&lt;&amp;str&gt;?", "body": "<p>There are quite a few ways to do it, some have disadvantages, others simply are more readable to some people.</p>\n\n<p>This dereferences <code>s</code> (which is of type <code>&amp;String</code>) to a <code>String</code> \"right hand side reference\", which is then dereferenced through the <code>Deref</code> trait to a <code>str</code> \"right hand side reference\" and then turned back into a <code>&amp;str</code>. This is something that is very commonly seen in the compiler, and I therefor consider it idiomatic.</p>\n\n<pre><code>let v2: Vec&lt;&amp;str&gt; = v.iter().map(|s| &amp;**s).collect();\n</code></pre>\n\n<p>Here the <code>deref</code> function of the <code>Deref</code> trait is passed to the <code>map</code> function. It's pretty neat but requires <code>use</code>ing the trait or giving the full path.</p>\n\n<pre><code>let v3: Vec&lt;&amp;str&gt; = v.iter().map(std::ops::Deref::deref).collect();\n</code></pre>\n\n<p>This uses coercion syntax.</p>\n\n<pre><code>let v4: Vec&lt;&amp;str&gt; = v.iter().map(|s| s as &amp;str).collect();\n</code></pre>\n\n<p>This takes a <code>RangeFull</code> slice of the <code>String</code> (just a slice into the entire <code>String</code>) and takes a reference to it. It's ugly in my opinion.</p>\n\n<pre><code>let v5: Vec&lt;&amp;str&gt; = v.iter().map(|s| &amp;s[..]).collect();\n</code></pre>\n\n<p>This is uses coercions to convert a <code>&amp;String</code> into a <code>&amp;str</code>. Can also be replaced by a <code>s: &amp;str</code> expression in the future.</p>\n\n<pre><code>let v6: Vec&lt;&amp;str&gt; = v.iter().map(|s| { let s: &amp;str = s; s }).collect();\n</code></pre>\n\n<p>The following (thanks @huon-dbaupp) uses the <code>AsRef</code> trait, which solely exists to map from owned types to their respective borrowed type. There's two ways to use it, and again, prettiness of either version is entirely subjective.</p>\n\n<pre><code>let v7: Vec&lt;&amp;str&gt; = v.iter().map(|s| s.as_ref()).collect();\n</code></pre>\n\n<p>and </p>\n\n<pre><code>let v8: Vec&lt;&amp;str&gt; = v.iter().map(AsRef::as_ref).collect();\n</code></pre>\n\n<hr>\n\n<p>My bottom line is use the <code>v8</code> solution since it most explicitly expresses what you want.</p>\n"}, {"tags": [], "owner": {"reputation": 1459, "user_id": 1667955, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/X2hLR.jpg?s=128&g=1", "display_name": "mbrt", "link": "https://stackoverflow.com/users/1667955/mbrt"}, "is_accepted": false, "score": 22, "last_activity_date": 1445410835, "last_edit_date": 1495542365, "creation_date": 1445410835, "answer_id": 33252901, "question_id": 33216514, "link": "https://stackoverflow.com/questions/33216514/how-do-i-convert-a-vecstring-to-vecstr/33252901#33252901", "title": "How do I convert a Vec&lt;String&gt; to Vec&lt;&amp;str&gt;?", "body": "<p>The other answers simply work. I just want to point out that if you are trying to convert the <code>Vec&lt;String&gt;</code> into a <code>Vec&lt;&amp;str&gt;</code> only to pass it to a function taking <code>Vec&lt;&amp;str&gt;</code> as argument, consider revising the function signature as:</p>\n\n<pre><code>fn my_func&lt;T: AsRef&lt;str&gt;&gt;(list: &amp;[T]) { ... }\n</code></pre>\n\n<p>instead of:</p>\n\n<pre><code>fn my_func(list: &amp;Vec&lt;&amp;str&gt;) { ... }\n</code></pre>\n\n<p>As pointed out by this question: <a href=\"https://stackoverflow.com/a/32724666/1667955\">Function taking both owned and non-owned string collections</a>. In this way both vectors simply work without the need of conversions.</p>\n"}, {"tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": false, "score": 2, "last_activity_date": 1464704279, "last_edit_date": 1464704279, "creation_date": 1464296158, "answer_id": 37470838, "question_id": 33216514, "link": "https://stackoverflow.com/questions/33216514/how-do-i-convert-a-vecstring-to-vecstr/37470838#37470838", "title": "How do I convert a Vec&lt;String&gt; to Vec&lt;&amp;str&gt;?", "body": "<p>Here is another option:</p>\n\n<pre><code>use std::iter::FromIterator;\n\nlet v = Vec::from_iter(v.iter().map(String::as_str));\n</code></pre>\n\n<p>Note that <a href=\"https://doc.rust-lang.org/stable/std/string/struct.String.html#method.as_str\" rel=\"nofollow\"><code>String::as_str</code></a> is stable since Rust 1.7.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1605755100, "post_id": 64904748, "comment_id": 114751368, "body": "This doesn&#39;t appear to <i>answer the question</i>: &quot;How do I convert a <code>Vec&lt;String&gt;</code> to <code>Vec&lt;&amp;str&gt;</code>?&quot;"}, {"owner": {"reputation": 5620, "user_id": 2281094, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/519338ca46fa26b27cd23ea7db40c2c5?s=128&d=identicon&r=PG", "display_name": "Zorf", "link": "https://stackoverflow.com/users/2281094/zorf"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1605845420, "post_id": 64904748, "comment_id": 114783291, "body": "@Shepmaster Correct, it was was already answered in many ways. I&#39;m simply pointing out that all of them neglected to answer why their answers are idiomatic Rust opposed to ops suggestion. Correctly saying that they are better, without explaining why it is better seems like a poor learning exercise in to me."}], "tags": [], "owner": {"reputation": 5620, "user_id": 2281094, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/519338ca46fa26b27cd23ea7db40c2c5?s=128&d=identicon&r=PG", "display_name": "Zorf", "link": "https://stackoverflow.com/users/2281094/zorf"}, "is_accepted": false, "score": 2, "last_activity_date": 1605755070, "last_edit_date": 1605755070, "creation_date": 1605754738, "answer_id": 64904748, "question_id": 33216514, "link": "https://stackoverflow.com/questions/33216514/how-do-i-convert-a-vecstring-to-vecstr/64904748#64904748", "title": "How do I convert a Vec&lt;String&gt; to Vec&lt;&amp;str&gt;?", "body": "<p>All of the answers idiomatically use iterators and collecting instead of a loop, but do not explain why this is better.</p>\n<p>In your loop, you first create an empty vector and then push into it. Rust makes no guarantees about the strategy it uses for growing factors, but I believe the current strategy is that whenever the capacity is exceeded, the vector capacity is doubled. If the original vector had a length of 20, that would be one allocation, and 5 reallocations.</p>\n<p>Iterating from a vector produces an iterator that has a &quot;size hint&quot;. In this case, the iterator implements <code>ExactSizeIterator</code> so it knows exactly how many elements it will return. <code>map</code> retains this and <code>collect</code> takes advantage of this by allocating enough space in one go for an <code>ExactSizeIterator</code>.</p>\n<p>You can also manually do this with:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>let mut items = Vec::&lt;&amp;str&gt;::with_capacity(another_items.len());\nfor item in &amp;another_items {\n    items.push(item);\n}\n</code></pre>\n<p>Heap allocations and reallocations are probably the most expensive part of this entire thing by far; far more expensive than taking references or writing or pushing to a vector when no new heap allocation is involved. It wouldn't surprise me if pushing a thousand elements onto a vector allocated for that length in one go were faster than pushing 5 elements that required 2 reallocations and one allocation in the process.</p>\n<p>Another unsung advantage is that using the methods with <code>collect</code> do not store in a mutable variable which one should not use if it's unneeded.</p>\n"}], "owner": {"reputation": 667, "user_id": 5463164, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/87d04f5aeec715fb70282aab5033f96d?s=128&d=identicon&r=PG&f=1", "display_name": "Kalita Alexey", "link": "https://stackoverflow.com/users/5463164/kalita-alexey"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 15084, "favorite_count": 11, "answer_count": 6, "score": 53, "last_activity_date": 1605755070, "creation_date": 1445263458, "last_edit_date": 1584388448, "question_id": 33216514, "link": "https://stackoverflow.com/questions/33216514/how-do-i-convert-a-vecstring-to-vecstr", "title": "How do I convert a Vec&lt;String&gt; to Vec&lt;&amp;str&gt;?", "body": "<p>I can convert <code>Vec&lt;String&gt;</code> to <code>Vec&lt;&amp;str&gt;</code> this way:</p>\n\n<pre><code>let mut items = Vec::&lt;&amp;str&gt;::new();\nfor item in &amp;another_items {\n    items.push(item);\n}\n</code></pre>\n\n<p>Are there better alternatives?</p>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 1, "last_activity_date": 1445224668, "creation_date": 1445224668, "answer_id": 33206106, "question_id": 33205952, "link": "https://stackoverflow.com/questions/33205952/how-to-solve-this-lifetime-related-error/33206106#33206106", "title": "How to solve this lifetime-related error?", "body": "<p>Let the compiler infer the proper lifetime instead:</p>\n\n<pre><code>fn add_fd_handler\n        &lt;T: Fn(bool, &amp;mut EpollFdEventHandler)&gt;(\n        map: &amp;mut EpollEventHandlerMap,\n        fd: c_int,\n        adder: T)\n{\n    let mut hash_entry = map.entry(fd);\n    match hash_entry {\n        hash_map::Entry::Occupied(ref mut occ_e) =&gt; {\n            let entry = occ_e.get_mut();\n            adder(false, entry);\n        },\n        hash_map::Entry::Vacant(vac_e) =&gt; {\n            /*\n            adder(\n                true,\n                vac_e.insert(EpollFdEventHandler {\n                    on_readable: None,\n                    on_writable: None,\n                }),\n            );\n            */\n        }\n    };\n}\n</code></pre>\n\n<p>The problem is that you're letting the caller determine a lifetime for the callback, but you then invoke the callback with a mutable reference to a local variable. The caller couldn't possibly know about the lifetime of that local variable, so the compiler assumes that <code>'a</code> must outlive the current function. Yet, <code>entry</code> does not outlive the function, which is why you get an error.</p>\n\n<p>The declaration <code>T: Fn(bool, &amp;mut EpollFdEventHandler)</code> is equivalent to <code>T: for&lt;'a, 'b&gt; Fn(bool, &amp;'a mut EpollFdEventHandler&lt;'b&gt;)</code>. The <code>for</code> keyword in this context allows you to declare that <code>T</code> must implement <code>Fn</code> for any value of the specified lifetime parameters. This is only valid for lifetime parameters, because different lifetime parameters do not cause multiple versions of a function to be defined, unlike for type parameters.</p>\n"}], "owner": {"reputation": 37636, "user_id": 101999, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/ab9e16b1296c16bc63f02f6dff5e3dc6?s=128&d=identicon&r=PG", "display_name": "Thanatos", "link": "https://stackoverflow.com/users/101999/thanatos"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 64, "favorite_count": 0, "accepted_answer_id": 33206106, "answer_count": 1, "score": 0, "last_activity_date": 1445265860, "creation_date": 1445223559, "last_edit_date": 1445265860, "question_id": 33205952, "link": "https://stackoverflow.com/questions/33205952/how-to-solve-this-lifetime-related-error", "title": "How to solve this lifetime-related error?", "body": "<p>Say I have the following,</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>type EpollEventCallback&lt;'a&gt; = FnMut(c_int) + Send + Sync + 'a;\n\nstruct EpollFdEventHandler&lt;'a&gt; {\n    on_readable: Option&lt;Box&lt;EpollEventCallback&lt;'a&gt;&gt;&gt;,\n    on_writable: Option&lt;Box&lt;EpollEventCallback&lt;'a&gt;&gt;&gt;,\n}\n\n// Map from c_int -&gt; EpollFdEventHandler.\ntype EpollEventHandlerMap&lt;'a&gt; = collections::HashMap&lt;c_int, EpollFdEventHandler&lt;'a&gt;&gt;;\n\nfn add_fd_handler\n        &lt;'a, T: Fn(bool, &amp;'a mut EpollFdEventHandler&lt;'a&gt;)&gt;(\n        map: &amp;'a mut EpollEventHandlerMap&lt;'a&gt;,\n        fd: c_int,\n        adder: T)\n{\n    let mut hash_entry: hash_map::Entry&lt;'a, _, _&gt; = map.entry(fd);\n    match hash_entry {\n        hash_map::Entry::Occupied(ref mut occ_e) =&gt; {\n            let entry: &amp;mut EpollFdEventHandler&lt;'a&gt; = occ_e.get_mut();\n            adder(false, entry);\n        },\n        hash_map::Entry::Vacant(vac_e) =&gt; {\n            /*\n            adder(\n                true,\n                vac_e.insert(EpollFdEventHandler {\n                    on_readable: None,\n                    on_writable: None,\n                }),\n            );\n            */\n        }\n    };\n}\n</code></pre>\n\n<p><code>add_fd_handler</code> is supposed to be a helper function for adding an \"FD handler\"; here, it's going to get passed a closure (<code>adder</code>) that will set either <code>on_readable</code> or <code>on_writable</code>, depending on which handler is being added. <code>add_fd_handler</code>'s job is simply doing the hash table lookup, and inserting an empty entry if required. However:</p>\n\n<pre><code>src/event_loop.rs:85:35: 85:48 error: `(hash_entry:std::collections::hash::map::Occupied).0` does not live long enough\nsrc/event_loop.rs:85         hash_map::Entry::Occupied(ref mut occ_e) =&gt; {\n                                                       ^~~~~~~~~~~~~\nsrc/event_loop.rs:82:1: 101:2 note: reference must be valid for the lifetime 'a as defined on the block at 82:0...\nsrc/event_loop.rs:82 {\nsrc/event_loop.rs:83     let mut hash_entry: hash_map::Entry&lt;'a, _, _&gt; = map.entry(fd);\nsrc/event_loop.rs:84     match hash_entry {\nsrc/event_loop.rs:85         hash_map::Entry::Occupied(ref mut occ_e) =&gt; {\nsrc/event_loop.rs:86             let entry: &amp;mut EpollFdEventHandler&lt;'a&gt; = occ_e.get_mut();\nsrc/event_loop.rs:87             adder(false, entry);\n                     ...\nsrc/event_loop.rs:83:67: 101:2 note: ...but borrowed value is only valid for the block suffix following statement 0 at 83:66\nsrc/event_loop.rs:83     let mut hash_entry: hash_map::Entry&lt;'a, _, _&gt; = map.entry(fd);\nsrc/event_loop.rs:84     match hash_entry {\nsrc/event_loop.rs:85         hash_map::Entry::Occupied(ref mut occ_e) =&gt; {\nsrc/event_loop.rs:86             let entry: &amp;mut EpollFdEventHandler&lt;'a&gt; = occ_e.get_mut();\nsrc/event_loop.rs:87             adder(false, entry);\nsrc/event_loop.rs:88         },\n</code></pre>\n\n<p>The error about <code>occ_e</code> only shows up if I try to use it with <code>adder(false, entry)</code>! Rust claims <code>occ_e</code> \"does not live long enough\", but it's only being used right there in that branch of the <code>match</code>, so how can that be?</p>\n\n<p>My <em>best</em> guess presently is that the closure's second arg, as <code>&amp;'a mut</code> is what's the issue here; my reference in <code>occ_e</code> isn't <code>'a</code>, it's something shorter (the unspecified lifetime on <code>hash_entry</code>, I think, but I don't know how to notate that).</p>\n"}, {"tags": ["multithreading", "audio", "rust", "real-time"], "comments": [{"owner": {"reputation": 23582, "user_id": 758133, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/W8X5E.jpg?s=128&g=1", "display_name": "Martin James", "link": "https://stackoverflow.com/users/758133/martin-james"}, "edited": false, "score": 1, "creation_date": 1445213200, "post_id": 33204497, "comment_id": 54214132, "body": "1-2ms is orders of magnitude longer than typical inter-thread signaling latency and so I&#39;m guessing that you may be able to thread off some of the processing if required.  It all kinda depends on code/data design and overall loading."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 2, "creation_date": 1445215706, "post_id": 33204497, "comment_id": 54214711, "body": "Anything that works for this in C/C++ should be able to work in Rust, so investigating techniques there may be a productive route forward."}, {"owner": {"reputation": 193, "user_id": 5160246, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-Gtf-KeKKxJc/AAAAAAAAAAI/AAAAAAAABOA/YhZoCc76iG4/photo.jpg?sz=128", "display_name": "Danny Meyer", "link": "https://stackoverflow.com/users/5160246/danny-meyer"}, "edited": false, "score": 0, "creation_date": 1588994604, "post_id": 33204497, "comment_id": 109122263, "body": "I&#39;ve seen successful low latency, real-time audio projects in rust. 1-2 ms is very small, but if you&#39;re very careful you should be able to get something working that is below the threshold of noticeable lag."}], "owner": {"reputation": 57337, "user_id": 69742, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/6fc5e3f98fb1113576b50672ae42c05c?s=128&d=identicon&r=PG", "display_name": "Earlz", "link": "https://stackoverflow.com/users/69742/earlz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 119, "favorite_count": 0, "answer_count": 0, "score": 2, "last_activity_date": 1445265773, "creation_date": 1445211504, "last_edit_date": 1445265773, "question_id": 33204497, "link": "https://stackoverflow.com/questions/33204497/can-you-get-millisecond-precise-multithreading", "title": "Can you get millisecond precise multithreading?", "body": "<p>So, I'm planning a project for a real-time audio in Rust. There are portions that can be processed in parallel, however I need latency of no more than 1-2ms, consistently. Is there any way to make use of multiple cores in this type of project? </p>\n"}, {"tags": ["windows", "winapi", "rust"], "comments": [{"owner": {"reputation": 35031, "user_id": 1889329, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/57bec3f0b9c5879cdd9d9fa2e8629318?s=128&d=identicon&r=PG&f=1", "display_name": "IInspectable", "link": "https://stackoverflow.com/users/1889329/iinspectable"}, "edited": false, "score": 0, "creation_date": 1445211133, "post_id": 33204402, "comment_id": 54213681, "body": "The correct way to automate a UI is <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ee684009.aspx\" rel=\"nofollow noreferrer\">UI Automation</a>. What you are trying is a brittle hack. It will fail if the designated receiver is not the foreground window, for example. As an aside, the active window is of no relevance. Input goes to the foreground window. The foreground window happens to be the active window of the foreground thread."}, {"owner": {"reputation": 1213, "user_id": 831850, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/dcb0ac17de6539bbb91303eec3247944?s=128&d=identicon&r=PG", "display_name": "Jacob", "link": "https://stackoverflow.com/users/831850/jacob"}, "reply_to_user": {"reputation": 35031, "user_id": 1889329, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/57bec3f0b9c5879cdd9d9fa2e8629318?s=128&d=identicon&r=PG&f=1", "display_name": "IInspectable", "link": "https://stackoverflow.com/users/1889329/iinspectable"}, "edited": false, "score": 0, "creation_date": 1445214167, "post_id": 33204402, "comment_id": 54214376, "body": "@IInspectable thanks for the link! Do you have an example for rust?"}], "answers": [{"comments": [{"owner": {"reputation": 1213, "user_id": 831850, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/dcb0ac17de6539bbb91303eec3247944?s=128&d=identicon&r=PG", "display_name": "Jacob", "link": "https://stackoverflow.com/users/831850/jacob"}, "edited": false, "score": 0, "creation_date": 1445216946, "post_id": 33204515, "comment_id": 54214991, "body": "so when the next version comes out, what code will get this to work?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 1213, "user_id": 831850, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/dcb0ac17de6539bbb91303eec3247944?s=128&d=identicon&r=PG", "display_name": "Jacob", "link": "https://stackoverflow.com/users/831850/jacob"}, "edited": false, "score": 2, "creation_date": 1445221460, "post_id": 33204515, "comment_id": 54216073, "body": "The clearest way would be to zero-initialize the <code>u</code> member, then use the <code>ki_mut</code> method to get a mutable reference to a <code>winapi::KEYBDINPUT</code>, then assign to it: <code>let mut input = winapi::INPUT { type_: winapi::INPUT_KEYBOARD, u: Default::default() }; *input.ki_mut() = winapi::KEYBDINPUT { ... };</code>"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 3, "last_activity_date": 1445211670, "creation_date": 1445211670, "answer_id": 33204515, "question_id": 33204402, "link": "https://stackoverflow.com/questions/33204402/how-to-send-a-key-using-winapis-sendinput/33204515#33204515", "title": "How to send a key using winapi&#39;s SendInput?", "body": "<p>The definition of <code>winapi::INPUT</code> in the version of winapi-rs you use is incorrect. <a href=\"https://github.com/retep998/winapi-rs/commit/c492982d38592544f6e66cd3278c760b79741367\" rel=\"nofollow\">It appears to have been fixed today</a> (or yesterday, depending on where you are).</p>\n"}], "owner": {"reputation": 1213, "user_id": 831850, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/dcb0ac17de6539bbb91303eec3247944?s=128&d=identicon&r=PG", "display_name": "Jacob", "link": "https://stackoverflow.com/users/831850/jacob"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 849, "favorite_count": 0, "accepted_answer_id": 33204515, "answer_count": 1, "score": 1, "last_activity_date": 1445265846, "creation_date": 1445210783, "last_edit_date": 1495542594, "question_id": 33204402, "link": "https://stackoverflow.com/questions/33204402/how-to-send-a-key-using-winapis-sendinput", "title": "How to send a key using winapi&#39;s SendInput?", "body": "<p>I am trying to convert <a href=\"https://stackoverflow.com/a/19802769/831850\">this example</a> to Rust 1.3 with winapi-rs 0.2.4.</p>\n\n<p>I have:</p>\n\n<pre><code>fn send_key_event(vk: u16, flags: u32) {\n    let mut input = winapi::INPUT {\n        type_: winapi::INPUT_KEYBOARD,\n        union_: winapi::KEYBDINPUT {\n            wVk: vk,\n            wScan: 0,\n            dwFlags: flags,\n            time: 0,\n            dwExtraInfo: 0,\n        }\n    };\n    unsafe {\n        user32::SendInput(1, &amp;mut input, mem::size_of::&lt;winapi::INPUT&gt;() as i32);\n    }\n}\n</code></pre>\n\n<p>which does not compile with:</p>\n\n<pre><code>error: mismatched types:\n expected `winapi::winuser::MOUSEINPUT`,\n    found `winapi::winuser::KEYBDINPUT`\n(expected struct `winapi::winuser::MOUSEINPUT`,\n    found struct `winapi::winuser::KEYBDINPUT`) [E0308]\n</code></pre>\n\n<p>Haw do I send keystrokes to the active window? </p>\n"}, {"tags": ["reference", "rust"], "comments": [{"owner": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "edited": false, "score": 0, "creation_date": 1445212547, "post_id": 33204391, "comment_id": 54213989, "body": "<i>Very</i> related, but not exactly a duplicate, since it&#39;s not a comparsion between <code>ref</code> and <code>&amp;</code>: <a href=\"http://stackoverflow.com/questions/27911656/rust-by-example-the-ref-pattern\" title=\"rust by example the ref pattern\">stackoverflow.com/questions/27911656/&hellip;</a>"}], "answers": [{"comments": [{"owner": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "edited": false, "score": 0, "creation_date": 1445212360, "post_id": 33204483, "comment_id": 54213946, "body": "Thanks, so definitions like <code>fn blah(ref a: i32) {}</code> are equivalent to <code>fn blah(a: &amp;i32)</code>, when they can both be expressed?"}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "reply_to_user": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "edited": false, "score": 4, "creation_date": 1445218364, "post_id": 33204483, "comment_id": 54215314, "body": "@Kroltan No, they&#39;re not equivalent. A pattern (i.e. anything to the left of the <code>:</code>) in a function argument is purely an implementation detail, callers only see the types (i.e. things to the right of the <code>:</code>). The first case is equivalent to <code>fn blah(tmp: i32) { let ref a = tmp; ... }</code>. The first one is called like <code>blah(0)</code> while the second is called like <code>blah(&amp;1)</code>. Of course, the function itself, the type of <code>a</code> is <code>&amp;i32</code> in both case, it&#39;s just the external interface that differs."}, {"owner": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "reply_to_user": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1445219384, "post_id": 33204483, "comment_id": 54215543, "body": "@huon-dbaupp, does that mean that the ref variant will copy/move the value first?"}, {"owner": {"reputation": 1987, "user_id": 5278682, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/34509cba2b4d128dce294dcf5092d300?s=128&d=identicon&r=PG&f=1", "display_name": "Eli Friedman", "link": "https://stackoverflow.com/users/5278682/eli-friedman"}, "edited": false, "score": 2, "creation_date": 1445305325, "post_id": 33204483, "comment_id": 54257828, "body": "<code>fn blah(ref a: i32) -&gt; {}</code> is roughly equivalent to <code>fn blah(temp_a: i32) { let ref a = temp_a; }</code>."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 12, "last_activity_date": 1445211386, "creation_date": 1445211386, "answer_id": 33204483, "question_id": 33204391, "link": "https://stackoverflow.com/questions/33204391/whats-the-difference-between-and-ref/33204483#33204483", "title": "What&#39;s the difference between `&amp;` and `ref`?", "body": "<p><code>ref</code> is used in patterns to bind a reference to an <em>lvalue</em> (an lvalue is a value you can take the address of, more or less).</p>\n\n<p>It's important to understand that patterns go \"backwards\" from normal expressions, since they're used to <strong>deconstruct</strong> values.</p>\n\n<p>Here's a simple example. Suppose we have this:</p>\n\n<pre><code>let value = 42;\n</code></pre>\n\n<p>We can bind a reference to <code>value</code> in two ways:</p>\n\n<pre><code>let reference1 = &amp;value;\nlet ref reference2 = value;\n</code></pre>\n\n<p>In the first case, we use <code>&amp;</code> as an operator to take the address of <code>value</code>. In the second case, we use the <code>ref</code> pattern to \"deconstruct\" an lvalue. In both cases, the type of the variable is <code>&amp;i32</code>.</p>\n\n<p><code>&amp;</code> can also be used in patterns, but it does the opposite: it deconstructs a reference by dereferencing it. Suppose we have:</p>\n\n<pre><code>let value = 42;\nlet reference = &amp;value;\n</code></pre>\n\n<p>We can dereference <code>reference</code> in two ways:</p>\n\n<pre><code>let deref1 = *reference;\nlet &amp;deref2 = reference;\n</code></pre>\n\n<p>Here, the type of both <code>deref1</code> and <code>deref2</code> is <code>i32</code>.</p>\n\n<p>It's not always possible to write the same expression in two ways as shown here, however. For example, you cannot use <code>&amp;</code> to take a reference to a value stored in an enum variant: you need to match on it. For example, if you want to take a reference to the value in a <code>Some</code>, you need to write:</p>\n\n<pre><code>match option {\n    Some(ref value) =&gt; { /* stuff */ }\n    None =&gt; { /* stuff */ }\n}\n</code></pre>\n\n<p>since there's no way in Rust you can use the <code>&amp;</code> operator to access the value otherwise.</p>\n"}], "owner": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 265, "favorite_count": 3, "accepted_answer_id": 33204483, "answer_count": 1, "score": 11, "last_activity_date": 1445211386, "creation_date": 1445210705, "question_id": 33204391, "link": "https://stackoverflow.com/questions/33204391/whats-the-difference-between-and-ref", "title": "What&#39;s the difference between `&amp;` and `ref`?", "body": "<p>I understand how <code>&amp;</code> works, but what is the difference between that and <code>ref</code>? Are they interchangeable?</p>\n\n<p>The only information I found (because searching for symbols on Google doesn't work very well) is <a href=\"http://rustbyexample.com/flow_control/match/destructuring/destructure_pointers.html\">this page on Rust By Example</a>, but it doesn't explain the difference between the two. <a href=\"http://doc.rust-lang.org/book/references-and-borrowing.html\">The Book</a> is not very informative, and <code>ref</code> is only listed on the <a href=\"http://doc.rust-lang.org/book/patterns.html\">Patterns</a> chapter. But it seems that <code>ref</code> is used outside that context too.</p>\n\n<p>So, what are the uses of <code>ref</code>, and what's the difference to <code>&amp;</code>?</p>\n"}, {"tags": ["vector", "rust", "lifetime", "ownership"], "answers": [{"comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 12, "creation_date": 1445234319, "post_id": 33204374, "comment_id": 54219454, "body": "BTW, for replacing an optional value with <code>None</code> there is a special method on <code>Option</code>, called <a href=\"http://doc.rust-lang.org/core/option/enum.Option.html#method.take\" rel=\"nofollow noreferrer\"><code>take()</code></a>. I&#39;d say it is more idiomatic to use it instead of <code>replace()</code>, where applicable."}, {"owner": {"reputation": 3542, "user_id": 2984585, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/d8b299670c2e1512831e7d2026a8d350?s=128&d=identicon&r=PG", "display_name": "ditoslav", "link": "https://stackoverflow.com/users/2984585/ditoslav"}, "edited": false, "score": 0, "creation_date": 1612802979, "post_id": 33204374, "comment_id": 116874777, "body": "I cannot believe there isn&#39;t a method on vec itself"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 20, "last_activity_date": 1584389733, "last_edit_date": 1584389733, "creation_date": 1445210590, "answer_id": 33204374, "question_id": 33204273, "link": "https://stackoverflow.com/questions/33204273/how-can-i-take-ownership-of-a-vec-element-and-replace-it-with-something-else/33204374#33204374", "title": "How can I take ownership of a Vec element and replace it with something else?", "body": "<p>Use <a href=\"http://doc.rust-lang.org/stable/std/mem/fn.replace.html\" rel=\"noreferrer\"><code>std::mem::replace</code></a>:</p>\n\n<pre><code>use std::mem;\n\nfn pop&lt;T&gt;(data: &amp;mut Vec&lt;Option&lt;T&gt;&gt;) -&gt; Option&lt;T&gt; {\n    mem::replace(&amp;mut data[0], None)\n}\n</code></pre>\n\n<p><code>replace</code> essentially replaces the value in a particular location with another one and returns the previous value.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/27098694/155423\">How can I swap in a new value for a field in a mutable reference to a structure?</a></li>\n</ul>\n"}], "owner": {"reputation": 363, "user_id": 4163833, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/78a0ab58fafff966f0f2bc4142b79f93?s=128&d=identicon&r=PG", "display_name": "Cameron Sun", "link": "https://stackoverflow.com/users/4163833/cameron-sun"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5611, "favorite_count": 1, "accepted_answer_id": 33204374, "answer_count": 1, "score": 16, "last_activity_date": 1584389830, "creation_date": 1445209814, "last_edit_date": 1584389830, "question_id": 33204273, "link": "https://stackoverflow.com/questions/33204273/how-can-i-take-ownership-of-a-vec-element-and-replace-it-with-something-else", "title": "How can I take ownership of a Vec element and replace it with something else?", "body": "<p>I am writing a function of the following format:</p>\n\n<pre><code>fn pop&lt;T&gt;(data: &amp;mut Vec&lt;Option&lt;T&gt;&gt;) -&gt; Option&lt;T&gt; {\n    // Let the item be the current element at head\n    let item = data[0];\n\n    // and \"remove\" it.\n    data[0] = None;\n\n    item\n}\n</code></pre>\n\n<p>When I try to do this, I get an error which makes sense:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of index of `std::vec::Vec&lt;std::option::Option&lt;T&gt;&gt;`\n --&gt; src/lib.rs:3:16\n  |\n3 |     let item = data[0];\n  |                ^^^^^^^ move occurs because value has type `std::option::Option&lt;T&gt;`, which does not implement the `Copy` trait\n  |\nhelp: consider borrowing the `Option`'s content\n  |\n3 |     let item = data[0].as_ref();\n  |                ^^^^^^^^^^^^^^^^\nhelp: consider borrowing here\n  |\n3 |     let item = &amp;data[0];\n  |                ^^^^^^^^\n</code></pre>\n\n<p>When I try to change it such that <code>item</code> is a reference, I get an error when I try to set <code>data[0]</code> to <code>None</code>, which also makes sense.</p>\n\n<p>Is there some way I can do what I want to do? It seems to me that, whether I want to return a reference or not, I'm going to have to take ownership of the element from the Vec.</p>\n\n<p>I noticed that <code>Vec</code> has a <code>swap_remove</code> method, which does almost exactly what I want, except that it swaps with an element already in the <code>Vec</code>, not with any arbitrary value as I would like. I know that I could just append <code>None</code> to the end of the <code>Vec</code> and use <code>swap_remove</code>, but I'm interested in seeing if there's another way.</p>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 25867, "user_id": 17027, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/fb75fbfd9dd8d93d49ff88c152d82c92?s=128&d=identicon&r=PG", "display_name": "Mahmoud Al-Qudsi", "link": "https://stackoverflow.com/users/17027/mahmoud-al-qudsi"}, "edited": false, "score": 0, "creation_date": 1536786610, "post_id": 33203128, "comment_id": 91554655, "body": "Do you know where in the rfcs github the discussion about binding lifetime to that of another member in the same instance can be found?"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 3, "last_activity_date": 1445201530, "creation_date": 1445201530, "answer_id": 33203128, "question_id": 33202211, "link": "https://stackoverflow.com/questions/33202211/how-can-i-have-a-lifetime-dependency-without-a-reference/33203128#33203128", "title": "How can I have a lifetime dependency without a reference?", "body": "<p>As of today, Rust is not able to express a lifetime that refers to an object defined in the same struct, so it's impossible to declare the proper lifetime for the <code>Device</code> member.</p>\n\n<p>Instead of storing both objects directly in the struct, could you instead store references to these structs? (This won't work if you want to make a function that returns that struct.)</p>\n\n<pre><code>struct Both&lt;'a: 'b, 'b&gt; {\n    context: &amp;'a Context,\n    device: &amp;'b Device&lt;'a&gt;,\n}\n</code></pre>\n\n<p>Another option is to declare the <code>Device</code> as having a <code>Context</code> with <code>'static</code> lifetime (I'm using <code>'static</code> because it's the only lifetime with a name), but always using a method to \"cast\" the <code>Device</code> into one with appropriate lifetime parameters, rather than using the field directly.</p>\n\n<pre><code>struct Both {\n    context: Context,\n    device: Device&lt;'static&gt;,\n}\n\nimpl Both {\n    fn get_device&lt;'a&gt;(&amp;'a self) -&gt; &amp;'a Device&lt;'a&gt; {\n        &amp;self.device\n    }\n}\n</code></pre>\n\n<p>Actually, thanks to lifetime elision, it is not necessary to specify the lifetime parameters explicitly on <code>get_device</code> (likewise for your <code>open_device</code> method, by the way):</p>\n\n<pre><code>impl Both {\n    fn get_device(&amp;self) -&gt; &amp;Device {\n        &amp;self.device\n    }\n}\n</code></pre>\n\n<p>There's just a gotcha: you need to use <code>transmute</code> to lie about the device's lifetime parameter when you initialize the struct.</p>\n\n<pre><code>use std::mem;\n\nfn get_both() -&gt; Both {\n    let context = Context; // could also be a parameter\n    let device: Device&lt;'static&gt; = unsafe { mem::transmute(context.open_device()) };\n    Both {\n        context: context,\n        device: device,\n    }\n}\n</code></pre>\n\n<p>You might also want to consider having the <code>Both</code> struct containing a <code>Device</code> that has no lifetime parameter, then wrapping that in another struct that does have a lifetime parameter and returning that from a method.</p>\n\n<pre><code>use std::marker::PhantomData;\nuse std::mem;\n\nstruct Context;\n\nimpl Context {\n    fn open_device(&amp;self) -&gt; Device {\n        Device\n    }\n}\n\nstruct Device;\n\nstruct DeviceWrapper&lt;'a&gt; {\n    _context: PhantomData&lt;&amp;'a Context&gt;,\n    device: &amp;'a Device,\n}\n\nstruct Both {\n    context: Context,\n    device: Device,\n}\n\nimpl Both {\n    fn get_device(&amp;self) -&gt; DeviceWrapper {\n        DeviceWrapper { _context: PhantomData, device: &amp;self.device }\n    }\n}\n\nfn get_both() -&gt; Both {\n    let context = Context;\n    let device = context.open_device();\n    Both {\n        context: context,\n        device: device,\n    }\n}\n</code></pre>\n\n<p>(In fact, the <code>DeviceWrapper</code> probably doesn't need the <code>_context</code> member, since the <code>DeviceWrapper</code>'s lifetime is tied to that of the <code>Both</code> already.)</p>\n"}], "owner": {"reputation": 1992, "user_id": 1486074, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/3997074174cc14081602e4f3c76091a5?s=128&d=identicon&r=PG", "display_name": "awelkie", "link": "https://stackoverflow.com/users/1486074/awelkie"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 821, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1445201530, "creation_date": 1445196328, "last_edit_date": 1495540739, "question_id": 33202211, "link": "https://stackoverflow.com/questions/33202211/how-can-i-have-a-lifetime-dependency-without-a-reference", "title": "How can I have a lifetime dependency without a reference?", "body": "<p>I'm wrapping a C library that has <code>context</code> and <code>device</code> objects. The <code>context</code> object needs to outlive the <code>device</code> object because the <code>device</code> keeps an internal reference to the <code>context</code>.</p>\n\n<p>To express this, I use a <code>PhantomData</code> field in the <code>Device</code> wrapper:</p>\n\n<pre><code>use std::marker::PhantomData;\n\nstruct Context;\n\nimpl Context {\n    fn open_device&lt;'a&gt;(&amp;'a self) -&gt; Device&lt;'a&gt; {\n        Device { _context: PhantomData, }\n    }\n}\n\nstruct Device&lt;'a&gt; {\n    _context: PhantomData&lt;&amp;'a Context&gt;,\n}\n</code></pre>\n\n<p>Now, in my client code, I would like to have a struct that holds both the <code>Context</code> and <code>Device</code> objects. But because the <code>Device</code> holds a reference (a fake one) to the <code>Context</code>, I'm not able to do this (see <a href=\"https://stackoverflow.com/questions/32300132/why-cant-i-store-a-value-and-a-reference-to-that-value-in-the-same-struct\">this</a> question). But this is an unnecessary restriction because the <code>Device</code> struct doesn't actually contain a reference to the <code>Context</code>.</p>\n\n<p>So how can I tie the lifetime of the <code>Device</code> to the lifetime of the <code>Context</code> in a way that would allow me to hold both of them in a struct?</p>\n"}, {"tags": ["macros", "rust"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 3, "last_activity_date": 1445139877, "creation_date": 1445139877, "answer_id": 33194067, "question_id": 33193846, "link": "https://stackoverflow.com/questions/33193846/using-macros-how-to-get-unique-names-for-struct-fields/33194067#33194067", "title": "Using macros, how to get unique names for struct fields?", "body": "<p>Without using a compiler plugin, no, I don't believe this is possible.  Two reasons:</p>\n\n<ol>\n<li><p>You can't construct identifiers.  There's <code>concat_idents!</code>, but due to the way macros are expanded, it's useless in this situation.</p></li>\n<li><p>You can't do non-literal comparisons.  That is, there's no way of the macro working out that it's already seen <code>a</code> once before.</p></li>\n</ol>\n\n<p>About the closest you could get is to just outright <em>replace</em> all the provided identifiers with a fixed list of identifiers, but that's probably not what you want; in that case, it'd be easier to just specify that you want 4 fields, and generate a fixed-size array <code>[i32; 4]</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 6357, "user_id": 6086311, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cb99289473f6393b89474785f2d294d1?s=128&d=identicon&r=PG", "display_name": "dtolnay", "link": "https://stackoverflow.com/users/6086311/dtolnay"}, "is_accepted": false, "score": 4, "last_activity_date": 1524944883, "creation_date": 1524944883, "answer_id": 50080462, "question_id": 33193846, "link": "https://stackoverflow.com/questions/33193846/using-macros-how-to-get-unique-names-for-struct-fields/50080462#50080462", "title": "Using macros, how to get unique names for struct fields?", "body": "<p>My <a href=\"https://github.com/dtolnay/mashup\" rel=\"nofollow noreferrer\"><strong><code>mashup</code></strong></a> crate provides a way for you to expand <code>my_macro!(Blah, (a, b, c, a))</code> into fields <code>x_a</code>, <code>xx_b</code>, <code>xxx_c</code>, <code>xxxx_d</code> if that naming convention would work for you. We prepend an additional <code>x</code> for each field, followed by an underscore, followed by the original field name so that way no fields can end up with conflicting names. This approach works with any Rust version >= 1.15.0.</p>\n\n<hr>\n\n<pre><code>#[macro_use]\nextern crate mashup;\n\nmacro_rules! my_macro {\n    ($name:ident, ($($field:ident),*)) =&gt; {\n        my_macro_helper!($name (x) () $($field)*);\n    };\n}\n\nmacro_rules! my_macro_helper {\n    // In the recursive case: append another `x` into our prefix.\n    ($name:ident ($($prefix:tt)*) ($($past:tt)*) $next:ident $($rest:ident)*) =&gt; {\n        my_macro_helper!($name ($($prefix)* x) ($($past)* [$($prefix)* _ $next]) $($rest)*);\n    };\n\n    // When there are no fields remaining.\n    ($name:ident ($($prefix:tt)*) ($([$($field:tt)*])*)) =&gt; {\n        // Use mashup to define a substitution macro `m!` that replaces every\n        // occurrence of the tokens `\"concat\" $($field)*` in its input with the\n        // resulting concatenated identifier.\n        mashup! {\n            $(\n                m[\"concat\" $($field)*] = $($field)*;\n            )*\n        }\n\n        // Invoke the substitution macro to build a struct and foo method.\n        // This expands to:\n        //\n        //     pub struct Blah {\n        //         x_a: i32,\n        //         xx_b: i32,\n        //         xxx_c: i32,\n        //         xxxx_a: i32,\n        //     }\n        //\n        //     impl Blah {\n        //         pub fn foo(&amp;self) -&gt; i32 {\n        //             0 + self.x_a + self.xx_b + self.xxx_c + self.xxxx_a\n        //         }\n        //     }\n        m! {\n            pub struct $name {\n                $(\n                    \"concat\" $($field)*: i32,\n                )*\n            }\n\n            impl $name {\n                pub fn foo(&amp;self) -&gt; i32 {\n                    0 $(\n                        + self.\"concat\" $($field)*\n                    )*\n                }\n            }\n        }\n    };\n}\n\nmy_macro!(Blah, (a, b, c, a));\n\nfn main() {}\n</code></pre>\n"}], "owner": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 816, "favorite_count": 0, "accepted_answer_id": 33194067, "answer_count": 2, "score": 1, "last_activity_date": 1524944883, "creation_date": 1445137111, "question_id": 33193846, "link": "https://stackoverflow.com/questions/33193846/using-macros-how-to-get-unique-names-for-struct-fields", "title": "Using macros, how to get unique names for struct fields?", "body": "<p>Suppose I have some macro invoked as such:</p>\n\n<pre><code>my_macro!(Blah, (a, b, c));\n</code></pre>\n\n<p>And it outputs something like this:</p>\n\n<pre><code>struct Blah {\n    a: i32,\n    b: i32,\n    c: i32\n}\nimpl Blah {\n    fn foo() -&gt; i32 {\n        a + b + c\n    }\n}\n</code></pre>\n\n<p>(artificial example)</p>\n\n<p>These fields will be private to the struct, but I need to allow redefinitions. So, the input</p>\n\n<pre><code>my_macro!(Blah, (a, b, c, a));\n</code></pre>\n\n<p>Will generate something like:</p>\n\n<pre><code>struct Blah {\n    a1: i32,\n    b: i32,\n    c: i32,\n    a2: i32\n}\nimpl Blah {\n    fn foo() -&gt; i32 {\n        a1 + b + c + a2\n    }\n}\n</code></pre>\n\n<p>The naming scheme doesn't need to follow any logical pattern.</p>\n\n<p>Is this possible?</p>\n"}, {"tags": ["generics", "lambda", "rust"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 4, "last_activity_date": 1445128150, "creation_date": 1445128150, "answer_id": 33193082, "question_id": 33192973, "link": "https://stackoverflow.com/questions/33192973/ambiguous-associated-type-when-returning-a-generic-lambda/33193082#33193082", "title": "&quot;Ambiguous associated type&quot; when returning a generic lambda", "body": "<p>You need the output types of <code>Add</code>, <code>Sub</code>, <code>Mul</code> and <code>Div</code> to be the same. You can enforce this by adding another type parameter and constraining each trait's <code>Output</code> to be this type parameter.</p>\n\n<pre><code>fn math_op_gen&lt;T, R&gt;(op: &amp;str) -&gt; Option&lt;Box&lt;Fn(T, T) -&gt; R&gt;&gt; \n    where T: std::ops::Add&lt;Output=R&gt; +\n             std::ops::Sub&lt;Output=R&gt; +\n             std::ops::Mul&lt;Output=R&gt; +\n             std::ops::Div&lt;Output=R&gt; {\n        let ret: Option&lt;Box&lt;Fn(T, T) -&gt; R&gt;&gt; = match op {\n            \"+\" =&gt; Some(Box::new(|a, b| { a + b } )),\n            \"-\" =&gt; Some(Box::new(|a, b| { a - b } )),\n            \"*\" =&gt; Some(Box::new(|a, b| { a * b } )),\n            \"/\" =&gt; Some(Box::new(|a, b| { a / b } )),\n            _ =&gt; None,\n        };\n\n        ret\n}\n</code></pre>\n"}], "owner": {"reputation": 1446, "user_id": 1947066, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/gR6Eb.png?s=128&g=1", "display_name": "Tom", "link": "https://stackoverflow.com/users/1947066/tom"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 316, "favorite_count": 1, "accepted_answer_id": 33193082, "answer_count": 1, "score": 4, "last_activity_date": 1445136591, "creation_date": 1445127088, "last_edit_date": 1445136591, "question_id": 33192973, "link": "https://stackoverflow.com/questions/33192973/ambiguous-associated-type-when-returning-a-generic-lambda", "title": "&quot;Ambiguous associated type&quot; when returning a generic lambda", "body": "<p>I have this code (contrived and purely experimental)</p>\n\n<pre><code>fn math_op(op: &amp;str) -&gt; Option&lt;Box&lt;Fn(i32, i32) -&gt; i32&gt;&gt; {\n    let ret: Option&lt;Box&lt;Fn(i32, i32) -&gt; i32&gt;&gt; = match op {\n        \"+\" =&gt; Some(Box::new(|a: i32, b: i32| -&gt; i32 { a + b } )),\n        \"-\" =&gt; Some(Box::new(|a: i32, b: i32| -&gt; i32 { a - b } )),\n        \"*\" =&gt; Some(Box::new(|a: i32, b: i32| -&gt; i32 { a * b } )),\n        \"/\" =&gt; Some(Box::new(|a: i32, b: i32| -&gt; i32 { a / b } )),\n        _ =&gt; None,\n    };\n\n    ret\n}\n</code></pre>\n\n<p>It returns a function/lambda that takes two operands and returns a result (in this case the addition, subtraction, divide and multiply operators)</p>\n\n<p>Which can be called like so:</p>\n\n<pre><code>let add: Option&lt;Box&lt;Fn(i32, i32) -&gt; i32&gt;&gt; = math_op(\"+\");\nprintln!(\"Add {}\", add.unwrap()(10, 2));\n</code></pre>\n\n<p>I would really like to make a generic version of this, so far I have...</p>\n\n<pre><code>fn math_op_gen&lt;T&gt;(op: &amp;str) -&gt; Option&lt;Box&lt;Fn(T, T) -&gt; T::Output&gt;&gt; \n    where T: std::ops::Add + std::ops::Sub + std::ops::Mul + std::ops::Div {\n        let ret: Option&lt;Box&lt;Fn(T, T) -&gt; T::Output&gt;&gt; = match op {\n            \"+\" =&gt; Some(Box::new(|a, b| { a + b } )),\n            \"-\" =&gt; Some(Box::new(|a, b| { a - b } )),\n            \"*\" =&gt; Some(Box::new(|a, b| { a * b } )),\n            \"/\" =&gt; Some(Box::new(|a, b| { a / b } )),\n            _ =&gt; None,\n        };\n\n        ret\n}\n</code></pre>\n\n<p>But when I build I get these errors: </p>\n\n<pre><code>error: ambiguous associated type `Output` in bounds of `T` [E0221]\nnote: associated type `T` could derive from `core::ops::Div`\nnote: associated type `T` could derive from `core::ops::Mul`\nnote: associated type `T` could derive from `core::ops::Sub`\nnote: associated type `T` could derive from `core::ops::Add`\n</code></pre>\n\n<p>I understand this is because the compiler cannot determine what type T::Output is from the various traits I have implemented. Is there another way of writing this to get it to work?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 3779, "user_id": 242135, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/44b0dfdcc0345553f8aca6e154944c95?s=128&d=identicon&r=PG", "display_name": "Geoff", "link": "https://stackoverflow.com/users/242135/geoff"}, "is_accepted": true, "score": 1, "last_activity_date": 1445136695, "last_edit_date": 1445136695, "creation_date": 1445126463, "answer_id": 33192892, "question_id": 33192596, "link": "https://stackoverflow.com/questions/33192596/how-do-i-create-a-class-with-multiple-instantiation-options/33192892#33192892", "title": "How do I create a class with multiple instantiation options", "body": "<p>That's a reasonable place to start working from.  I think one of your issues is that the interfaces you have defined are going to be difficult to accomplish as written by using a trait.</p>\n\n<p>So, let's talk about the way that <code>ToSocketAddrs</code> works.  First, let's just quickly note and then ignore the fact that the <code>ToSocketAddrs</code> trait returns an <code>Iterator</code> of <code>SocketAddrs</code>.  We're ignoring it because it's actually irrelevant to the question at hand.</p>\n\n<p>Here's the body of the trait declaration:</p>\n\n<pre><code>pub trait ToSocketAddrs {\n    type Iter: Iterator&lt;Item=SocketAddr&gt;;\n    fn to_socket_addrs(&amp;self) -&gt; Result&lt;Self::Iter&gt;;\n}\n</code></pre>\n\n<p>The purpose of this trait is to allow it to be used as a <a href=\"https://doc.rust-lang.org/stable/book/traits.html\" rel=\"nofollow\">trait bound</a> in a generic function/struct.  Broadly speaking, trait bounds are a way of writing a generic but getting the Rust compiler to ensure that the type that ends up instantiating the generic implements the behavior defined by that trait (or traits.</p>\n\n<p>In the case of <code>ToSocketAddrs</code> this means that a type can (potentially) be converted to a <code>SocketAddr</code>. The code that is called inside of <code>connect</code> then makes use of the <code>to_socket_addrs</code> function defined on the trait.</p>\n\n<p>As a brief aside, I said potentially because <code>to_socket_addrs</code> returns a <code>Result</code> which can take on values of <code>Ok(&lt;success-type&gt;)</code> and <code>Err(&lt;failure-type&gt;)</code>, which is probably a good pattern to model your trait on.</p>\n\n<p>This is the key point that relates to why I think your desired interface is maybe not ideal (or implementable, Rust doesn't directly support arity, or any other type of function overloading).  Passing a trait bound generic parameter is the easiest way to accomplish your goal.</p>\n"}], "owner": {"reputation": 194, "user_id": 3288364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/54c0be3d73e07e481be1f4902a84ff3c?s=128&d=identicon&r=PG", "display_name": "rts", "link": "https://stackoverflow.com/users/3288364/rts"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 165, "favorite_count": 0, "accepted_answer_id": 33192892, "answer_count": 1, "score": 1, "last_activity_date": 1445136753, "creation_date": 1445123561, "last_edit_date": 1445136753, "question_id": 33192596, "link": "https://stackoverflow.com/questions/33192596/how-do-i-create-a-class-with-multiple-instantiation-options", "title": "How do I create a class with multiple instantiation options", "body": "<p>I want to build a class in Rust that allows for variety and convenience in its instantiation similar to the way that <code>std::net::TcpStream</code> can be provided multiple inputs to its <code>connect</code> method.</p>\n\n<p>I have the following tests, but very little idea of the structs or traits I need to build to achieve this result.</p>\n\n<pre><code>#[cfg(test)]\nmod test {\n    use super::Ipv4Network;\n    use std::net::Ipv4Addr;\n\n    #[test]\n    fn instantiation() {\n        let net_addr = Ipv4Addr::new(10, 0, 0, 0);\n        let net_mask = Ipv4Addr::new(255, 255, 255, 240);\n\n        // Instantiate an Ipv4Network using two Ipv4Addrs.\n        let with_addrs = Ipv4Network::new(net_addr, net_mask);\n\n        // Instantiate an Ipv4Network using an Ipv4Addr and a prefix integer.\n        let with_addr_prefix = Ipv4Network::new(net_addr, 28);\n\n        // Instantiate an Ipv4Network using two strings.\n        let with_strings = Ipv4Network::new(\"10.0.0.0\", \"255.255.255.240\");\n\n        // Instantiate an Ipv4Network using a string and a prefix integer.\n        let with_prefix = Ipv4Network::new(\"10.0.0.0\", 28);\n\n        // Instantiate an Ipv4Network using a string with CIDR notation.\n        let with_cidr = Ipv4Network::new(\"10.0.0.0/28\");\n    }\n}\n</code></pre>\n\n<p>My understanding is that <code>std::net::TcpStream</code> accomplishes its multiple <code>connect</code> inputs through the <a href=\"https://doc.rust-lang.org/stable/std/net/trait.ToSocketAddrs.html\" rel=\"nofollow\">ToSocketAddrs</a> trait, the source of which can be found <a href=\"https://github.com/rust-lang/rust/blob/master/src/libstd/net/addr.rs#L308\" rel=\"nofollow\">here</a>. How exactly <code>std::net:TcpStream::connect</code> <a href=\"https://github.com/rust-lang/rust/blob/master/src/libstd/net/tcp.rs#L91\" rel=\"nofollow\">uses ToSocketAddrs</a> isn't clear to me, but I imagine I should be able to define an <code>Ipv4Network</code> as follows:</p>\n\n<pre><code>pub struct Ipv4Network {\n    addr: Ipv4Addr,\n    mask: Ipv4Addr,\n}\n</code></pre>\n\n<p>If that's true then how do I go about creating a trait (say <code>ToIpv4Network</code>) that functions like <code>ToSocketAddrs</code> does for <code>std::net:TcpStream</code>?</p>\n\n<p>What should the meat of</p>\n\n<pre><code>impl ToIpv4Network for (Ipv4Addr, Ipv4Addr) {\n...\n}\n</code></pre>\n\n<p>look like? Is that even the right path to start going down?</p>\n"}, {"tags": ["rust", "clone"], "comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 0, "creation_date": 1445121840, "post_id": 33192082, "comment_id": 54190483, "body": "Cloning has a nonzero but finite (and sometimes quite small) cost. Therefore it is trivially irrational to avoid it &quot;at all cost&quot;, since that includes many contortions where the avoidance has a higher cost than the cloning."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1445127962, "post_id": 33192082, "comment_id": 54191845, "body": "Describing the cost of cloning as finite is a bit misleading, since it can be arbitrarily large, e.g. cloning a <code>Vec&lt;T&gt;</code> is <code>O(length)</code>, cloning an <code>Expr</code> requires duplicating the whole AST contained in it (which can be arbitrarily large) etc. That said, <code>clone</code>ing generally isn&#39;t too bad, especially if it&#39;s not inside a loop."}], "answers": [{"tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 3, "last_activity_date": 1445121571, "creation_date": 1445121571, "answer_id": 33192332, "question_id": 33192082, "link": "https://stackoverflow.com/questions/33192082/how-to-avoid-clone-when-destructuring-tuple/33192332#33192332", "title": "How to avoid clone when destructuring tuple?", "body": "<p>You can access the elements of a tuple as if they were numbered struct fields (starting from zero), i.e. without pattern matching, which avoids the need to clone or create a new scope.</p>\n\n<pre><code>if let ExprLit(_) = arg.1.node { ... }\n</code></pre>\n"}], "owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 211, "favorite_count": 0, "accepted_answer_id": 33192332, "answer_count": 1, "score": 3, "last_activity_date": 1445140418, "creation_date": 1445119548, "last_edit_date": 1445140418, "question_id": 33192082, "link": "https://stackoverflow.com/questions/33192082/how-to-avoid-clone-when-destructuring-tuple", "title": "How to avoid clone when destructuring tuple?", "body": "<p>I have the following code:</p>\n\n<pre><code>let (_, expression) = arg.clone();\nmatch expression.node {\n    ExprLit(_) =&gt; (),\n     _ =&gt; arguments.push(arg),\n}\n</code></pre>\n\n<p>which clones <code>arg</code> (expression is of type <a href=\"http://manishearth.github.io/rust-internals-docs/syntax/ptr/struct.P.html\" rel=\"nofollow\">P</a>&lt;<a href=\"http://manishearth.github.io/rust-internals-docs/syntax/ast/struct.Expr.html\" rel=\"nofollow\">Expr</a>>).</p>\n\n<p>But, we do not need to clone <code>arg</code>.</p>\n\n<p>I tried to avoid cloning this variable and I came up with this solution:</p>\n\n<pre><code>{\n    let (_, ref expression) = arg;\n    if let ExprLit(_) = expression.node {\n        return;\n    }\n}\narguments.push(arg);\n</code></pre>\n\n<p>but I do not like it (extra curly brackets and use of <code>return</code>).</p>\n\n<p>Is there another solution in this specific case?</p>\n"}, {"tags": ["rust", "lifetime", "iron"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 5, "last_activity_date": 1445104227, "creation_date": 1445104227, "answer_id": 33189734, "question_id": 33189281, "link": "https://stackoverflow.com/questions/33189281/iron-handler-missing-lifetime-specifiers/33189734#33189734", "title": "Iron Handler: Missing Lifetime Specifiers", "body": "<p>The <a href=\"http://ironframework.io/doc/iron/middleware/trait.Handler.html\"><code>Handler</code></a> trait is a subtrait of <code>Any</code>:</p>\n\n<pre><code>pub trait Handler: Send + Sync + Any {\n    fn handle(&amp;self, &amp;mut Request) -&gt; IronResult&lt;Response&gt;;\n}\n</code></pre>\n\n<p>And the <a href=\"http://doc.rust-lang.org/nightly/core/any/trait.Any.html\"><code>Any</code></a> trait has a <code>'static</code> lifetime bound:</p>\n\n<pre><code>pub trait Any: Reflect + 'static {\n    fn get_type_id(&amp;self) -&gt; TypeId;\n}\n</code></pre>\n\n<p>The <code>'static</code> bound means that your struct cannot contain references. You'll have to use another type of pointer. Since <code>Handler</code> is also a subtrait of <code>Send</code> and <code>Sync</code>, you'll need to use <code>Arc</code>, since <code>Rc</code> is neither <code>Send</code> nor <code>Sync</code>.</p>\n"}], "owner": {"reputation": 15722, "user_id": 284318, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/1e0588e345236881aff23040eb1d5dc3?s=128&d=identicon&r=PG", "display_name": "Danilo Bargen", "link": "https://stackoverflow.com/users/284318/danilo-bargen"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 280, "favorite_count": 0, "accepted_answer_id": 33189734, "answer_count": 1, "score": 2, "last_activity_date": 1445104227, "creation_date": 1445101734, "question_id": 33189281, "link": "https://stackoverflow.com/questions/33189281/iron-handler-missing-lifetime-specifiers", "title": "Iron Handler: Missing Lifetime Specifiers", "body": "<p>I'm trying to implement an Iron handler that contains a reference to another struct. That struct holds the data and does all operations on the data.</p>\n\n<pre><code>[package]\nname = \"testcrate\"\nversion = \"0.1.0\"\nauthors = [\"me\"]\n\n[dependencies]\niron = \"^0.2\"\n</code></pre>\n\n<p>This is the code:</p>\n\n<pre><code>//! Handlers for the server.\nextern crate iron;\n\nuse iron::{status, middleware};\nuse iron::IronResult;\nuse iron::prelude::Set;\nuse iron::request::Request;\nuse iron::response::Response;\n\n/// The MyServer struct holds the data and provides methods\n/// to manipulate or retrieve that data.\nstruct MyServer;\nimpl MyServer {\n    pub fn build_response() -&gt; String {\n        \"response\".to_string()\n    }   \n}\n\n/// The ReadHandler handles the creation of HTTP responses.\npub struct ReadHandler {\n    pub server: &amp;MyServer,\n}\nimpl middleware::Handler for ReadHandler {                                                                                         \n\n    /// Return the current status JSON.\n    fn handle(&amp;self, req: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\n        let body = self.server.build_response();\n        let response = Response::with((status::Ok, body));\n        Ok(response)\n    }   \n}\n</code></pre>\n\n<p>Unfortunately I'm getting errors about missing lifetime specifiers:</p>\n\n<pre><code>src/lib.rs:22:17: 22:26 error: missing lifetime specifier [E0106]\nsrc/lib.rs:22     pub server: &amp;MyServer,\n                              ^~~~~~~~~\nsrc/lib.rs:22:17: 22:26 help: run `rustc --explain E0106` to see a detailed explanation\n</code></pre>\n\n<p>But when I add lifetime specifiers (which I didn't fully understand yet)...</p>\n\n<pre><code>pub struct ReadHandler&lt;'a&gt; {\n    pub server: &amp;'a MyServer,\n}\nimpl&lt;'a&gt; middleware::Handler for ReadHandler&lt;'a&gt; {\n    // ...\n}\n</code></pre>\n\n<p>...I get another error message:</p>\n\n<pre><code>src/lib.rs:24:1: 32:2 error: the type `ReadHandler&lt;'a&gt;` does not fulfill the required lifetime\nsrc/lib.rs:24 impl&lt;'a&gt; middleware::Handler for ReadHandler&lt;'a&gt; {\nsrc/lib.rs:25 \nsrc/lib.rs:26     /// Return the current status JSON.\nsrc/lib.rs:27     fn handle(&amp;self, req: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\nsrc/lib.rs:28         let body = self.server.build_response();\nsrc/lib.rs:29         let response = Response::with((status::Ok, body));\n              ...\nnote: type must outlive the static lifetime\n</code></pre>\n\n<p>There will be other handlers that will access the MyServer in a read-only or read-write mode.</p>\n\n<p>What would be the correct way to add lifetime specifiers? Or do I maybe need a structure like an Arc?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 31, "last_activity_date": 1445102006, "creation_date": 1445102006, "answer_id": 33189335, "question_id": 33189227, "link": "https://stackoverflow.com/questions/33189227/how-to-get-a-slice-from-an-iterator/33189335#33189335", "title": "How to get a slice from an Iterator?", "body": "<blockquote>\n  <p>So I wonder if there is a way to convert an <code>Iterator</code> to a <code>slice</code></p>\n</blockquote>\n\n<p>There is not.</p>\n\n<p>An iterator only provides one element at a time, whereas a slice is about getting several elements at a time. This is why you first need to collect all the elements yielded by the <code>Iterator</code> into a contiguous array (<code>Vec</code>) before being able to use a slice.</p>\n\n<p>The first obvious answer is not to worry about the slight overhead, though personally I would prefer placing the type hint next to the variable (I find it more readable):</p>\n\n<pre><code>let names: Vec&lt;_&gt; = args.arguments.iter().map(|arg| {\n    arg.name.clone()\n}).collect();\nfunction(&amp;names);\n</code></pre>\n\n<p>Another option would be for <code>function</code> to take an <code>Iterator</code> instead (and an iterator of references, at that):</p>\n\n<pre><code>let names = args.arguments.iter().map(|arg| &amp;arg.name);\nfunction(names);\n</code></pre>\n\n<p>After all, iterators are more general, and you can always \"realize\" the slice inside the function if you need to.</p>\n"}], "owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 12387, "favorite_count": 1, "accepted_answer_id": 33189335, "answer_count": 1, "score": 18, "last_activity_date": 1445105336, "creation_date": 1445101336, "last_edit_date": 1445105336, "question_id": 33189227, "link": "https://stackoverflow.com/questions/33189227/how-to-get-a-slice-from-an-iterator", "title": "How to get a slice from an Iterator?", "body": "<p>I started to use clippy as a linter. Sometimes, it shows this warning:</p>\n\n<pre><code>writing `&amp;Vec&lt;_&gt;` instead of `&amp;[_]` involves one more reference and cannot be\nused with non-Vec-based slices. Consider changing the type to `&amp;[...]`,\n#[warn(ptr_arg)] on by default\n</code></pre>\n\n<p>I changed the parameter to a slice but this adds boilerplate on the call side. For instance, the code was:</p>\n\n<pre><code>let names = args.arguments.iter().map(|arg| {\n    arg.name.clone()\n}).collect();\nfunction(&amp;names);\n</code></pre>\n\n<p>but now it is:</p>\n\n<pre><code>let names = args.arguments.iter().map(|arg| {\n    arg.name.clone()\n}).collect::&lt;Vec&lt;_&gt;&gt;();\nfunction(&amp;names);\n</code></pre>\n\n<p>otherwise, I get the following error:</p>\n\n<pre><code>error: the trait `core::marker::Sized` is not implemented for the type\n`[collections::string::String]` [E0277]\n</code></pre>\n\n<p>So I wonder if there is a way to convert an <code>Iterator</code> to a <code>slice</code> or avoid having to specify the <code>collect</code>ed type in this specific case.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1445114991, "post_id": 33186876, "comment_id": 54188677, "body": "There is a library for this, called <a href=\"https://github.com/alexcrichton/filetime\" rel=\"nofollow noreferrer\">filetime</a>. It provides cross-platform access to various file timestamps."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1445138881, "post_id": 33186876, "comment_id": 54193641, "body": "Which, it seems, doesn&#39;t turn up when you search <code>crates.io</code> for &quot;file time&quot;.  I think I&#39;m just going to give up using <code>crates.io</code> to search for anything; it&#39;s clearly <i>useless</i>."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 6, "last_activity_date": 1445139106, "last_edit_date": 1445139106, "creation_date": 1445086593, "answer_id": 33186876, "question_id": 33186469, "link": "https://stackoverflow.com/questions/33186469/how-can-you-get-the-modification-time-of-a-file-in-a-cross-platform-manner/33186876#33186876", "title": "How can you get the modification time of a file in a cross platform manner?", "body": "<p>First of all, there is a crate for this: <a href=\"https://crates.io/crates/filetime\" rel=\"nofollow\"><code>filetime</code></a> (pointed out by Vladimir Matveev).  Just be aware that the <code>FileTime::seconds</code> method in that crate is <em>platform specific</em>.</p>\n\n<p>Secondly, 1.0 was about building the <em>foundation</em> for the language, not the complete standard library.  It shipped with a <em>lot</em> of things that you might normally expect missing.  Quite a few are <em>still</em> missing (as of 1.3).  Part of this is is that the core team are <em>very</em> conservative about what they'll promise to support, given how seriously they're taking backward compatibility.</p>\n\n<p>Third, <code>MetadataExt</code> isn't experimental.  It's stable.  It just happens to be platform-specific.</p>\n\n<p>Fourth, <code>MetadataExt</code> is actually a bit of a red herring.  The <em>actual</em> problem here is that <code>rustdoc</code> is built as a kind of post-process of the compiler, inserted after type checking is done.  This puts it <em>after</em> macro expansion.  This is relevant because it's during macro expansion that platform-specific <code>#[cfg(...)]</code> attributes are resolved.  <em>This</em> is important because this is how the language does platform-specific code.</p>\n\n<p>As a result, docs are only built for the platform you're specifically targeting.  The docs on the official website <em>all</em> target Linux.  As a result, <em>nothing</em> Windows-specific shows up.  Now, if you download the Windows compiler, it comes with a set of docs, and <em>those</em> docs target Windows.  If you open those up and search, you'll find <code>std::os::windows::fs::MetadataExt</code>, which looks like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub trait MetadataExt {\n    fn file_attributes(&amp;self) -&gt; u32;\n    fn creation_time(&amp;self) -&gt; u64;\n    fn last_access_time(&amp;self) -&gt; u64;\n    fn last_write_time(&amp;self) -&gt; u64;\n    fn file_size(&amp;self) -&gt; u64;\n}\n</code></pre>\n\n<p>(I can't just link to this for hopefully obvious reasons.)</p>\n\n<p>As an aside, what you linked to isn't an RFC; it's an issue on the RFC repository.  It's for tracking things that RFCs should be written about.</p>\n\n<p>So, to wrap this all up: you can use the aforementioned crate <em>or</em> you can write platform-specific code, which will likely boil down to one path for Windows, and one path for everything else, using the two different <code>MetadataExt</code> traits.  One thing to be careful of is that the two systems use different epochs, meaning the times aren't directly comparable.  UNIX uses an epoch of Jan 1 1970, Windows uses Jan 1 1601.</p>\n\n<p>The simplest thing is probably to just use the crate mentioned above.</p>\n"}, {"tags": [], "owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "is_accepted": false, "score": 0, "last_activity_date": 1485297858, "creation_date": 1485297858, "answer_id": 41840301, "question_id": 33186469, "link": "https://stackoverflow.com/questions/33186469/how-can-you-get-the-modification-time-of-a-file-in-a-cross-platform-manner/41840301#41840301", "title": "How can you get the modification time of a file in a cross platform manner?", "body": "<p>Starting with Rust 1.10, there is a <a href=\"https://doc.rust-lang.org/stable/std/fs/struct.Metadata.html#method.modified\" rel=\"nofollow noreferrer\"><code>Metadata::modified</code> method</a> to get the modification time.</p>\n"}], "owner": {"reputation": 25893, "user_id": 353820, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/32b29e1dc23c2c5abe0283ab7b9541d3?s=128&d=identicon&r=PG", "display_name": "Doug", "link": "https://stackoverflow.com/users/353820/doug"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1133, "favorite_count": 0, "accepted_answer_id": 33186876, "answer_count": 2, "score": 0, "last_activity_date": 1485297858, "creation_date": 1445083807, "last_edit_date": 1445087569, "question_id": 33186469, "link": "https://stackoverflow.com/questions/33186469/how-can-you-get-the-modification-time-of-a-file-in-a-cross-platform-manner", "title": "How can you get the modification time of a file in a cross platform manner?", "body": "<p>The stable <code>MetadataExt</code> trait offers some basic functionality for this purpose, but it doesn't work on Windows.</p>\n\n<p>I also see <a href=\"https://github.com/rust-lang/rfcs/issues/939\" rel=\"nofollow\">this RFC</a> on the topic of I/O reform  but now I'm totally confused. Wasn't the reason we took so long to get a 1.0 stable because of the absolutely epic feedback on the I/O story for Rust? </p>\n\n<p>Why are the <a href=\"http://doc.rust-lang.org/std/os/unix/\" rel=\"nofollow\"><em>experimental</em></a> <code>std::os::unix::fs::MetadataExt</code> traits in stable, when there is no cross platform story for the same functionality?</p>\n\n<p>Is there some standard crate that I haven't found for this purpose? This question refers to Rust 1.3.0.</p>\n"}, {"tags": ["generics", "rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 8093, "user_id": 446386, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/9863b59f56c43dbbdd6df89379b11eea?s=128&d=identicon&r=PG", "display_name": "Vikas", "link": "https://stackoverflow.com/users/446386/vikas"}, "edited": false, "score": 2, "creation_date": 1445057532, "post_id": 33182601, "comment_id": 54172600, "body": "Thanks Chris for your reply, but I&#39;m afraid I still did not get it. Can you explain what makes <code>Box</code> special in this case that Rust thinks it can conflict? For example If, I understand your explanation correctly, any container, lets say <code>Arc&lt;T&gt;</code> should also conflict because <code>T</code> can implement <code>CanSpeak</code> and <code>Arc&lt;T&gt;</code> can implement <code>Fn()</code>. But Replacing <code>Box</code> in my example with <code>Arc</code> works just fine."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 8093, "user_id": 446386, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/9863b59f56c43dbbdd6df89379b11eea?s=128&d=identicon&r=PG", "display_name": "Vikas", "link": "https://stackoverflow.com/users/446386/vikas"}, "edited": false, "score": 3, "creation_date": 1445069617, "post_id": 33182601, "comment_id": 54175052, "body": "There is <i>nothing</i> special about it. It\u2019s just that you\u2019ve provided two generic implementations for a trait which can overlap."}, {"owner": {"reputation": 8093, "user_id": 446386, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/9863b59f56c43dbbdd6df89379b11eea?s=128&d=identicon&r=PG", "display_name": "Vikas", "link": "https://stackoverflow.com/users/446386/vikas"}, "edited": false, "score": 0, "creation_date": 1445073516, "post_id": 33182601, "comment_id": 54175951, "body": "Then why does <code>Arc</code> work? In my example if I replace <code>Box</code> with <code>Arc</code> it compiles without any errors."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1445080440, "post_id": 33182601, "comment_id": 54177744, "body": "Box is special, it&#39;s marked <code>#[fundamental]</code> (and Arc is not). What the exact rules are, I don&#39;t know off hand."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1445090554, "post_id": 33182601, "comment_id": 54180791, "body": "I&#39;m with Vikas - this evidently isn&#39;t the right answer for any type but <code>Box</code>."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1445093795, "post_id": 33182601, "comment_id": 54181760, "body": "<code>#[fundamental]</code> is specified in this <a href=\"https://github.com/rust-lang/rfcs/blob/8e2d3a3341da533f846f61f10335b72c9a9f4740/text/1023-rebalancing-coherence.md\" rel=\"nofollow noreferrer\">coherence RFC</a>"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1445094086, "post_id": 33182601, "comment_id": 54181858, "body": "Oh no, the next piece of the puzzle: the <code>Fn</code> trait is marked <code>#[fundamental]</code> too, it&#39;s special too! A right thicket! Use a different bound, and it will conflict."}, {"owner": {"reputation": 8093, "user_id": 446386, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/9863b59f56c43dbbdd6df89379b11eea?s=128&d=identicon&r=PG", "display_name": "Vikas", "link": "https://stackoverflow.com/users/446386/vikas"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1446562367, "post_id": 33182601, "comment_id": 54787656, "body": "@ChrisMorgan you are suggesting there is no special treatment for <code>Box</code>, but that logic conflicts with why <code>Arc</code> works. @bluss if you think it is because <code>Box</code> is special, feel free to add another answer."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1446580501, "post_id": 33182601, "comment_id": 54799304, "body": "The #[fundamental] on both the Fn trait and on Box play a role."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": false, "score": 6, "last_activity_date": 1445054548, "creation_date": 1445054548, "answer_id": 33182601, "question_id": 33182154, "link": "https://stackoverflow.com/questions/33182154/why-does-trait-implementation-for-boxt-conflict-with-fn/33182601#33182601", "title": "Why does trait implementation for Box&lt;T&gt; conflict with Fn()?", "body": "<p>The two do conflict, because it is <em>possible</em> for a type <code>Box&lt;T&gt;</code> to have <code>T</code> implementing <code>CanSpeak</code> and <code>Box&lt;T&gt;</code> implementing <code>Fn()</code>. Rust coherence rules aren\u2019t about what <em>is</em> but what <em>can be</em>.</p>\n\n<p>Here\u2019s an example of implementing <code>Fn()</code> for <code>Box&lt;Cow&gt;</code>, which would clearly explode things if it allowed your two generic trait implementations:</p>\n\n<pre><code>// (This attribute on the crate.)\n#![feature(unboxed_closures, core)]\n\nimpl Fn&lt;()&gt; for Box&lt;Cow&gt; {\n    extern \"rust-call\" fn call(&amp;self, _: ()) { }\n}\n\nimpl FnMut&lt;()&gt; for Box&lt;Cow&gt; {\n    extern \"rust-call\" fn call_mut(&amp;mut self, _: ()) { }\n}\n\nimpl FnOnce&lt;()&gt; for Box&lt;Cow&gt; {\n    type Output = ();\n    extern \"rust-call\" fn call_once(self, _: ()) { }\n}\n</code></pre>\n"}], "owner": {"reputation": 8093, "user_id": 446386, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/9863b59f56c43dbbdd6df89379b11eea?s=128&d=identicon&r=PG", "display_name": "Vikas", "link": "https://stackoverflow.com/users/446386/vikas"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 360, "favorite_count": 0, "answer_count": 1, "score": 7, "last_activity_date": 1445054548, "creation_date": 1445049334, "question_id": 33182154, "link": "https://stackoverflow.com/questions/33182154/why-does-trait-implementation-for-boxt-conflict-with-fn", "title": "Why does trait implementation for Box&lt;T&gt; conflict with Fn()?", "body": "<p>A simplistic program to demonstrate this behavior:</p>\n\n<pre><code>use std::boxed::Box;\n\nstruct Cow;\n\ntrait CanSpeak {\n    fn speak(&amp;self);\n}\n\nimpl CanSpeak for Cow {\n    fn speak(&amp;self) {\n        println!(\"moo\");\n    }\n}\n\nimpl&lt;F: Fn()&gt; CanSpeak for F {\n    fn speak(&amp;self) {\n        self();\n    }\n}\n\nimpl&lt;T: CanSpeak&gt; CanSpeak for Box&lt;T&gt; {\n    fn speak(&amp;self) {\n        (**self).speak()\n    }\n}\n\nfn lol_speak() {\n    println!(\"lol\")\n}\n\nfn lets_speak&lt;T: CanSpeak&gt;(t: &amp; T) {\n    t.speak();\n}\n\nfn main() {\n    let cow = Cow;\n    lets_speak( &amp;cow );\n\n    lets_speak( &amp;lol_speak );\n\n    let boxed_cow = Box::new(Cow);\n    lets_speak( &amp;boxed_cow );\n}\n</code></pre>\n\n<p>Compilation fails with:</p>\n\n<pre><code>test.rs:15:1: 19:2 error: conflicting implementations for trait `CanSpeak` [E0119]\ntest.rs:15 impl&lt;F: Fn()&gt; CanSpeak for F {\ntest.rs:16     fn speak(&amp;self) {\ntest.rs:17         self();\ntest.rs:18     }\ntest.rs:19 }\ntest.rs:15:1: 19:2 help: run `rustc --explain E0119` to see a detailed explanation\ntest.rs:21:1: 25:2 note: note conflicting implementation here\ntest.rs:21 impl&lt;T: CanSpeak&gt; CanSpeak for Box&lt;T&gt; {\ntest.rs:22     fn speak(&amp;self) {\ntest.rs:23         (**self).speak()\ntest.rs:24     }\ntest.rs:25 }\nerror: aborting due to previous error\n</code></pre>\n\n<p>My questions are:</p>\n\n<ol>\n<li><a href=\"https://doc.rust-lang.org/stable/std/boxed/struct.Box.html\">As far as I can tell</a> <code>Box&lt;T&gt;</code> does not implement <code>Fn()</code> trait. Then why does above example fail?</li>\n<li>What is the correct implementation for what I'm trying to do?</li>\n</ol>\n\n<p>I've just started learning Rust. Thanks for your help.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 15257, "user_id": 1409312, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/4TCzB.jpg?s=128&g=1", "display_name": "Syntactic Fructose", "link": "https://stackoverflow.com/users/1409312/syntactic-fructose"}, "edited": false, "score": 0, "creation_date": 1445104310, "post_id": 33181916, "comment_id": 54185257, "body": "This is a really creative a cool solution, but this question relates to a library. I can&#39;t wrap the entire library in a script before running :( ."}], "tags": [], "owner": {"reputation": 24277, "user_id": 667984, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/0425d6234a21e166e8cc37878d0e87cd?s=128&d=identicon&r=PG", "display_name": "Renato Zannon", "link": "https://stackoverflow.com/users/667984/renato-zannon"}, "is_accepted": false, "score": 2, "last_activity_date": 1445046833, "creation_date": 1445046833, "answer_id": 33181916, "question_id": 33181471, "link": "https://stackoverflow.com/questions/33181471/create-child-process-that-duplicates-stderr-of-main-process/33181916#33181916", "title": "Create child process that duplicates stderr of main process", "body": "<p>I believe this is easier to do with a wrapper program, instead of launching something from the rust program itself. Here's an example of how to do it using shell script:</p>\n\n<pre><code>#!/bin/bash\n\n# Redirection magic from http://stackoverflow.com/a/6317938/667984\n{ errors=$(./my_rust_program 2&gt;&amp;1 1&gt;&amp;$original_out); } {original_out}&gt;&amp;1\n\nif [[ $? -ne 0 ]]; then\n  echo\n  echo \"--terminal reset shenanigans--\"\n  echo\n  echo \"$errors\" &gt;&amp;2\nfi\n</code></pre>\n\n<p>When used with this rust program:</p>\n\n<pre><code>fn main() {\n    println!(\"Normal program output\");\n    panic!(\"oops\");\n}\n</code></pre>\n\n<p>It prints:</p>\n\n<pre><code>Normal program output\n\n--terminal reset shenanigans--\n\nthread '&lt;main&gt;' panicked at 'oops', my_rust_program.rs:3\n</code></pre>\n\n<p>I believe you can create one in stable rust as well, but since you mention <code>sh</code> in your question I assume you are in a unix environment anyway, and the shell script version should be simpler.</p>\n"}], "owner": {"reputation": 15257, "user_id": 1409312, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/4TCzB.jpg?s=128&g=1", "display_name": "Syntactic Fructose", "link": "https://stackoverflow.com/users/1409312/syntactic-fructose"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 80, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1445056836, "creation_date": 1445042490, "last_edit_date": 1445056836, "question_id": 33181471, "link": "https://stackoverflow.com/questions/33181471/create-child-process-that-duplicates-stderr-of-main-process", "title": "Create child process that duplicates stderr of main process", "body": "<p>Is there a <em>stable</em> way I can create a child process that hangs out in the background and inherits stderr, in and out? From what I see, creating a <a href=\"https://doc.rust-lang.org/std/process/\" rel=\"nofollow\">child</a> requires me to launch a separate program. Instead I want to create a child process that lasts as long as the main process, and only serves to allow me to duplicate stderr so I can read from it. </p>\n\n<p>Here's an example of creating a process inside the link</p>\n\n<pre><code>use std::process::Command;\n\nlet output = Command::new(\"sh\")\n                     .arg(\"-c\")\n                     .arg(\"echo hello\")\n                     .output()\n                     .unwrap_or_else(|e| { panic!(\"failed to execute process: {}\", e) });\nlet hello = output.stdout;\n</code></pre>\n\n<p>what I'd <strong>like</strong> to do</p>\n\n<pre><code>use std::process::Command;\n\nlet leech = Command::new() // create process that hangs out in the background and inherits stderr, stdin and stdout from main process\n\n// ....\n\n// panic occurs somewhere in the program\nif thread::panicking {\n    output = leech.output().stderr();\n}\n// screen clears\n\n// print stderr of output\n</code></pre>\n\n<p>I need to create a leech of sorts because panics being displayed to the main screen are flushed due to terminal graphics. The library will clear the screen which in the process clears away panic messages, If I was able to duplicate stderr and somehow read it, I could reprint the panic message after the terminal restored the pre-program-running state.</p>\n"}, {"tags": ["concurrency", "rust"], "comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1445080856, "post_id": 33178975, "comment_id": 54177875, "body": "scoped was deprecated in search for a better solution. Crate crossbeam provides a new scoped thread API. Requires Rust 1.4 (soon to be released), but it&#39;s stable."}], "answers": [{"comments": [{"owner": {"reputation": 4335, "user_id": 314784, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/c9414b15cfad914b3e8af1bf40f01c13?s=128&d=identicon&r=PG", "display_name": "Ben Ruijl", "link": "https://stackoverflow.com/users/314784/ben-ruijl"}, "edited": false, "score": 0, "creation_date": 1445030951, "post_id": 33179469, "comment_id": 54166917, "body": "I know the issue in the attached version is unrelated, but all my other attempts failed as well. The threads need access to the server, since they should tell the server to broadcast a message to all the other streams. Only the server knows the list."}], "tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": false, "score": 1, "last_activity_date": 1445030444, "last_edit_date": 1445030444, "creation_date": 1445029209, "answer_id": 33179469, "question_id": 33178975, "link": "https://stackoverflow.com/questions/33178975/sharing-mutable-self-between-multiple-threads/33179469#33179469", "title": "Sharing mutable self between multiple threads", "body": "<p>The error is pretty much unrelated to having multiple threads. The issue is, as the compiler says, that <code>selfm</code> is already borrowed in the line </p>\n\n<pre><code>for stream in selfm.listener.incoming() {\n</code></pre>\n\n<p>so it cannot be mutably borrowed in the line</p>\n\n<pre><code>selfm.clients.push(stream);\n</code></pre>\n\n<p>One way to fix this is to destructure <code>selfm</code> before the loop, so the borrows don't conflict. Your <code>start</code> method will then look as follows:</p>\n\n<pre><code>fn start(mut self) {\n    let mut handles = vec![];\n    let a : Arc&lt;Mutex&lt;Server&gt;&gt; = Arc::new(Mutex::new(self));\n    let mut selfm = a.lock().unwrap();\n\n     // destructure selfm here to get a reference to the listener and a mutable reference to the clients\n    let Server { ref listener, ref mut clients} = *selfm;\n    for stream in listener.incoming() { // listener can be used here\n        match stream {\n            Ok(stream) =&gt; {\n                clients.push(stream); // clients can be mutated here\n                let aa = a.clone();\n                handles.push(thread::spawn(move || {\n                    aa.lock().unwrap().handle();\n                }));\n            },\n            Err(e) =&gt; { println!(\"{}\", e); },\n        }\n    }\n}\n</code></pre>\n\n<p>(That being said, you're right to be concerned about the locking, since the mutex will remain locked until <code>selfm</code> goes out of scope, i.e. only when <code>start</code> terminates, i.e. never. I would suggest an alternative design, but it's not really clear to me why you want the threads to have access to the server struct.)</p>\n"}], "owner": {"reputation": 4335, "user_id": 314784, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/c9414b15cfad914b3e8af1bf40f01c13?s=128&d=identicon&r=PG", "display_name": "Ben Ruijl", "link": "https://stackoverflow.com/users/314784/ben-ruijl"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 595, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1445056880, "creation_date": 1445027056, "last_edit_date": 1445056880, "question_id": 33178975, "link": "https://stackoverflow.com/questions/33178975/sharing-mutable-self-between-multiple-threads", "title": "Sharing mutable self between multiple threads", "body": "<p>I have a server that accepts connections from multiple clients. Each client could send a message to the server, which is broadcast to all other clients. The problem is that the function that handles each connection should have a reference to the server. However, I want to handle the connections in separate threads, so I cannot use a reference directly.</p>\n\n<p>Since <code>scoped</code> is deprecated, I tried wrapping <code>self</code> in an <code>Arc</code>, but more problems ensued. Below is my attempt:</p>\n\n<pre><code>struct Server {\n    listener: TcpListener,\n    clients: Vec&lt;TcpStream&gt;\n}\n\nimpl Server {\n\n    fn new() -&gt; Server {\n        Server { \n            listener : TcpListener::bind(\"127.0.0.1:8085\").unwrap(),\n            clients : vec![] \n        }\n    }\n\n    fn handle(&amp;self) {\n        println!(\"test\");\n    }\n\n    fn start(mut self) {\n        let mut handles = vec![];\n        let a : Arc&lt;Mutex&lt;Server&gt;&gt; = Arc::new(Mutex::new(self));\n        let mut selfm = a.lock().unwrap();\n\n        // cannot borrow as mutable... ?\n        for stream in selfm.listener.incoming() {\n            match stream {\n                Ok(stream) =&gt; {\n                    selfm.clients.push(stream);\n                    let aa = a.clone();\n                    handles.push(thread::spawn(move || {\n                        aa.lock().unwrap().handle();\n                    }));\n                },\n                Err(e) =&gt; { println!(\"{}\", e); },\n            }\n        }\n    }\n</code></pre>\n\n<p><a href=\"http://is.gd/MAQjgg\" rel=\"nofollow\">Rust Playground</a></p>\n\n<p>I don't understand what to do anymore, and I fear deadlocks will arise with all these locks. Do you have any suggestions?</p>\n"}, {"tags": ["macros", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1445009186, "post_id": 33173235, "comment_id": 54155748, "body": "Please remove your second question, about &quot;is this possible&quot;, and <a href=\"http://meta.stackexchange.com/questions/39223/one-post-with-multiple-questions-or-multiple-posts\">ask a separate question</a>."}], "answers": [{"comments": [{"owner": {"reputation": 747, "user_id": 238346, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/89718567a92b8859a7bf377ed4683cd0?s=128&d=identicon&r=PG&f=1", "display_name": "Jon Haddad", "link": "https://stackoverflow.com/users/238346/jon-haddad"}, "edited": false, "score": 0, "creation_date": 1445009698, "post_id": 33174164, "comment_id": 54156065, "body": "I had originally written it with native rust types, but was hoping that the int-&gt; bind_int would be easy to hack in without having to explicitly support each type.  Totally fine with it using native types though.  Thank you for this incredible answer."}, {"owner": {"reputation": 747, "user_id": 238346, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/89718567a92b8859a7bf377ed4683cd0?s=128&d=identicon&r=PG&f=1", "display_name": "Jon Haddad", "link": "https://stackoverflow.com/users/238346/jon-haddad"}, "edited": false, "score": 0, "creation_date": 1445041140, "post_id": 33174164, "comment_id": 54169801, "body": "Since I&#39;m going to be parsing &amp; verifying the syntax of the query later down the line, am I better off just going straight to a compiler plugin?  I already have the parser mostly done so I&#39;d be adding it almost immediately after getting the macro working."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 747, "user_id": 238346, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/89718567a92b8859a7bf377ed4683cd0?s=128&d=identicon&r=PG&f=1", "display_name": "Jon Haddad", "link": "https://stackoverflow.com/users/238346/jon-haddad"}, "edited": false, "score": 1, "creation_date": 1445046346, "post_id": 33174164, "comment_id": 54170697, "body": "@JonHaddad The problem with a compiler plugin is that it can <i>only</i> be used with a nightly compiler.  One possibility would be to have the <code>prepare!</code> macro in the regular library, a compiler plugin that also does verification in a separate library, with the verification code shared between the two in a third library.  Then, non-nightly users can still use your library, with some runtime overhead."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 8, "last_activity_date": 1445009217, "creation_date": 1445009217, "answer_id": 33174164, "question_id": 33173235, "link": "https://stackoverflow.com/questions/33173235/macro-that-generates-a-function-with-arguments-determined-by-the-macro/33174164#33174164", "title": "Macro that generates a function with arguments determined by the macro", "body": "<p>Two hard things in Rust macros: counting and unique identifers.  You have both.  Then again, I'm the one writing the answer, so I suppose it's <em>my</em> problem now.  At least you didn't ask about parsing the string (which is outright impossible without compiler plugins).</p>\n\n<p>Another impossible thing is mapping types to different methods.  You just can't.  Instead, I'm going to assume the existence of a helper trait that does this mapping.</p>\n\n<p>Also, Rust doesn't have <code>int</code>, <code>string</code>, <em>or</em> <code>float</code>.  I assume you mean <code>i32</code>, <code>String</code>, and <code>f32</code>.</p>\n\n<p>Finally, the way you've written the invocation and expansion don't really gel.  I don't see why <code>session</code> is involved; it's not used in the expansion.  So I'm going to take the liberty of just pretending you don't need it; if you do, you'll have to hack it back in.</p>\n\n<p>So, with that, here's what I came up with.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>// Some dummy types so the following will type-check.\n\nstruct Statement;\n\nimpl Statement {\n    fn new(stmt: &amp;str, args: usize) -&gt; Self { Statement }\n    fn bind_int(self, pos: usize, value: i32) -&gt; Result&lt;Self, ()&gt; { Ok(self) }\n    fn bind_float(self, pos: usize, value: f32) -&gt; Result&lt;Self, ()&gt; { Ok(self) }\n    fn bind_string(self, pos: usize, value: String) -&gt; Result&lt;Self, ()&gt; { Ok(self) }\n}\n\nstruct Session;\n\nimpl Session {\n    fn execute(&amp;self, stmt: Statement) {}\n}\n\n// The supporting `BindArgument` trait.\n\ntrait BindArgument {\n    fn bind(stmt: Statement, pos: usize, value: Self) -&gt; Statement;\n}\n\nimpl BindArgument for i32 {\n    fn bind(stmt: Statement, pos: usize, value: Self) -&gt; Statement {\n        stmt.bind_int(pos, value).unwrap()\n    }\n}\n\nimpl BindArgument for f32 {\n    fn bind(stmt: Statement, pos: usize, value: Self) -&gt; Statement {\n        stmt.bind_float(pos, value).unwrap()\n    }\n}\n\nimpl BindArgument for String {\n    fn bind(stmt: Statement, pos: usize, value: Self) -&gt; Statement {\n        stmt.bind_string(pos, value).unwrap()\n    }\n}\n\n// The macro itself.\n\nmacro_rules! prepare {\n    // These three are taken straight from\n    // https://danielkeep.github.io/tlborm/book/\n    (@as_expr $e:expr) =&gt; {$e};\n\n    (@count_tts $($tts:tt)*) =&gt; {\n        &lt;[()]&gt;::len(&amp;[$(prepare!(@replace_tt $tts ())),*])\n    };\n\n    (@replace_tt $_tt:tt $e:expr) =&gt; {$e};\n\n    // This is how we bind *one* argument.\n\n    (@bind_arg $stmt:expr, $args:expr, $pos:tt, $t:ty) =&gt; {\n        prepare!(@as_expr &lt;$t as BindArgument&gt;::bind($stmt, $pos, $args.$pos))\n    };\n\n    // This is how we bind *N* arguments.  Note that because you can't do\n    // arithmetic in macros, we have to spell out every supported integer.\n    // This could *maybe* be factored down with some more work, but that\n    // can be homework.  ;)\n\n    (@bind_args $stmt:expr, $args:expr, 0, $next:ty, $($tys:ty,)*) =&gt; {\n        prepare!(@bind_args prepare!(@bind_arg $stmt, $args, 0, $next), $args, 1, $($tys,)*)\n    };\n\n    (@bind_args $stmt:expr, $args:expr, 1, $next:ty, $($tys:ty,)*) =&gt; {\n        prepare!(@bind_args prepare!(@bind_arg $stmt, $args, 1, $next), $args, 2, $($tys,)*)\n    };\n\n    (@bind_args $stmt:expr, $args:expr, 2, $next:ty, $($tys:ty,)*) =&gt; {\n        prepare!(@bind_args prepare!(@bind_arg $stmt, $args, 2, $next), $args, 3, $($tys,)*)\n    };\n\n    (@bind_args $stmt:expr, $_args:expr, $_pos:tt,) =&gt; {\n        $stmt\n    };\n\n    // Finally, the entry point of the macro.\n\n    ($stmt:expr, $($tys:ty),* $(,)*) =&gt; {\n        {\n            // I cheated: rather than face the horror of trying to *also* do\n            // unique identifiers, I just shoved the arguments into a tuple, so\n            // that I could just re-use the position.\n            fn prepared_statement(args: ($($tys,)*)) -&gt; Statement {\n                let statement = Statement::new(\n                    $stmt,\n                    prepare!(@count_tts $(($tys))*));\n                prepare!(@bind_args statement, args, 0, $($tys,)*)\n            }\n            prepared_statement\n        }\n    };\n}\n\nfn main() {\n    let session = Session;\n    let prepared = prepare!(\n        r#\"insert into blah (id, name, reading ) values (?, ?, ?)\"#,\n        i32, String, f32);\n    // Don't use .to_string() for &amp;str -&gt; String; it's horribly inefficient.\n    let stmt = prepared((1, \"test\".to_owned(), 3.1));\n    session.execute(stmt);\n}\n</code></pre>\n\n<p>And here's what the <code>main</code> function expands to, to give you a frame of reference:</p>\n\n<pre><code>fn main() {\n    let session = Session;\n    let prepared = {\n        fn prepared_statement(args: (i32, String, f32)) -&gt; Statement {\n            let statement = Statement::new(\n                r#\"insert into blah (id, name, reading ) values (?, ?, ?)\"#,\n                &lt;[()]&gt;::len(&amp;[(), (), ()]));\n            &lt;f32 as BindArgument&gt;::bind(\n                &lt;String as BindArgument&gt;::bind(\n                    &lt;i32 as BindArgument&gt;::bind(\n                        statement, 0, args.0),\n                    1, args.1),\n                2, args.2)\n        }\n        prepared_statement\n    };\n    // Don't use .to_string() for &amp;str -&gt; String; it's horribly inefficient.\n    let stmt = prepared((1, \"test\".to_owned(), 3.1));\n    session.execute(stmt);\n}\n</code></pre>\n"}], "owner": {"reputation": 747, "user_id": 238346, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/89718567a92b8859a7bf377ed4683cd0?s=128&d=identicon&r=PG&f=1", "display_name": "Jon Haddad", "link": "https://stackoverflow.com/users/238346/jon-haddad"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1064, "favorite_count": 0, "accepted_answer_id": 33174164, "answer_count": 1, "score": 3, "last_activity_date": 1445040814, "creation_date": 1445006491, "last_edit_date": 1445040814, "question_id": 33173235, "link": "https://stackoverflow.com/questions/33173235/macro-that-generates-a-function-with-arguments-determined-by-the-macro", "title": "Macro that generates a function with arguments determined by the macro", "body": "<p>Is it possible to write a macro that generates a function where the number of arguments to this function to be a determined by the macro?  For instance, I'd like to write something to make using prepared statements in the Cassandra driver easier.</p>\n\n<pre><code>let prepared = prepare!(session, \"insert into blah (id, name, reading ) values (?, ?, ?)\", int, string, float);\nlet stmt = prepared(1, \"test\".to_string(), 3.1);\nsession.execute(stmt);\n</code></pre>\n\n<p><code>prepare!</code> would need to generate something like (unwrap only here for brevity):</p>\n\n<pre><code>fn some_func(arg1, arg2, arg3) -&gt; Statement {\n    let mut statement = Statement::new(\"insert into blah (id, name, reading ) values (?, ?, ?)\", 3);\n    statement.bind_int(0, arg1).unwrap()\n        .bind_string(1, arg2).unwrap()\n        .bind_float(2, arg3).unwrap()\n}\n</code></pre>\n"}, {"tags": ["rust", "symlink"], "answers": [{"tags": [], "owner": {"reputation": 24277, "user_id": 667984, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/0425d6234a21e166e8cc37878d0e87cd?s=128&d=identicon&r=PG", "display_name": "Renato Zannon", "link": "https://stackoverflow.com/users/667984/renato-zannon"}, "is_accepted": true, "score": 9, "last_activity_date": 1444939668, "creation_date": 1444939668, "answer_id": 33157581, "question_id": 33157267, "link": "https://stackoverflow.com/questions/33157267/get-actual-path-symlink-is-pointing-to/33157581#33157581", "title": "Get actual path symlink is pointing to", "body": "<p>It seems to me that you want <a href=\"https://doc.rust-lang.org/std/fs/fn.read_link.html\" rel=\"noreferrer\"><code>fs::read_link</code></a>:</p>\n\n<blockquote>\n  <p>Reads a symbolic link, returning the file that the link points to.</p>\n</blockquote>\n"}, {"tags": [], "owner": {"reputation": 51, "user_id": 4373009, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/eY4Ab.jpg?s=128&g=1", "display_name": "Xudong Huang", "link": "https://stackoverflow.com/users/4373009/xudong-huang"}, "is_accepted": false, "score": 2, "last_activity_date": 1577992259, "last_edit_date": 1577992259, "creation_date": 1577955249, "answer_id": 59560582, "question_id": 33157267, "link": "https://stackoverflow.com/questions/33157267/get-actual-path-symlink-is-pointing-to/59560582#59560582", "title": "Get actual path symlink is pointing to", "body": "<p>You can use <a href=\"https://doc.rust-lang.org/std/fs/fn.canonicalize.html\" rel=\"nofollow noreferrer\"><code>std::fs::canonicalize</code></a>:</p>\n\n<blockquote>\n  <p>Returns the canonical, absolute form of a path with all intermediate\n  components normalized and symbolic links resolved.</p>\n</blockquote>\n"}, {"comments": [{"owner": {"reputation": 6486, "user_id": 1116230, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/55a894894150db28d6641f0c57e48bac?s=128&d=identicon&r=PG", "display_name": "Nico Haase", "link": "https://stackoverflow.com/users/1116230/nico-haase"}, "edited": false, "score": 1, "creation_date": 1606842381, "post_id": 65091808, "comment_id": 115082201, "body": "Please add some explanation to your answer such that others can learn from it"}], "tags": [], "owner": {"reputation": 34, "user_id": 14605175, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/QlhG9.png?s=128&g=1", "display_name": "TANDEX", "link": "https://stackoverflow.com/users/14605175/tandex"}, "is_accepted": false, "score": -1, "last_activity_date": 1606834164, "last_edit_date": 1606834164, "creation_date": 1606830797, "answer_id": 65091808, "question_id": 33157267, "link": "https://stackoverflow.com/questions/33157267/get-actual-path-symlink-is-pointing-to/65091808#65091808", "title": "Get actual path symlink is pointing to", "body": "<p>Get the output of the command <code>pwd -P</code></p>\n"}], "owner": {"reputation": 1577, "user_id": 2381404, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/BpJjh.jpg?s=128&g=1", "display_name": "nein.", "link": "https://stackoverflow.com/users/2381404/nein"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1125, "favorite_count": 0, "accepted_answer_id": 33157581, "answer_count": 3, "score": 4, "last_activity_date": 1606834164, "creation_date": 1444938590, "last_edit_date": 1444939594, "question_id": 33157267, "link": "https://stackoverflow.com/questions/33157267/get-actual-path-symlink-is-pointing-to", "title": "Get actual path symlink is pointing to", "body": "<p>Given a symlink, I want to know to which directory this symlink is pointing. Does the Rust standard library offer something to find this out?\nI have only found <a href=\"https://doc.rust-lang.org/std/fs/trait.PathExt.html#method.symlink_metadata\" rel=\"nofollow\">unstable API functions</a> so far.</p>\n"}, {"tags": ["rust", "panic"], "comments": [{"owner": {"reputation": 13948, "user_id": 283342, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e3ef6dbec3a443e7cda5b5624311ca08?s=128&d=identicon&r=PG&f=1", "display_name": "Adrian", "link": "https://stackoverflow.com/users/283342/adrian"}, "edited": false, "score": 0, "creation_date": 1444920344, "post_id": 33151317, "comment_id": 54112610, "body": "I doubt that there is a good way to do this, but maybe this function would be useful: <a href=\"https://doc.rust-lang.org/std/rt/unwind/fn.panicking.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/rt/unwind/fn.panicking.html</a>"}, {"owner": {"reputation": 15257, "user_id": 1409312, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/4TCzB.jpg?s=128&g=1", "display_name": "Syntactic Fructose", "link": "https://stackoverflow.com/users/1409312/syntactic-fructose"}, "reply_to_user": {"reputation": 13948, "user_id": 283342, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e3ef6dbec3a443e7cda5b5624311ca08?s=128&d=identicon&r=PG&f=1", "display_name": "Adrian", "link": "https://stackoverflow.com/users/283342/adrian"}, "edited": false, "score": 0, "creation_date": 1444920375, "post_id": 33151317, "comment_id": 54112634, "body": "@Adrian it&#39;s unstable thought ;(. Thanks I&#39;ll give it a try"}, {"owner": {"reputation": 13948, "user_id": 283342, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e3ef6dbec3a443e7cda5b5624311ca08?s=128&d=identicon&r=PG&f=1", "display_name": "Adrian", "link": "https://stackoverflow.com/users/283342/adrian"}, "edited": false, "score": 1, "creation_date": 1444921186, "post_id": 33151317, "comment_id": 54113273, "body": "This one isn&#39;t unstable: <a href=\"https://doc.rust-lang.org/std/thread/fn.panicking.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/thread/fn.panicking.html</a>"}], "answers": [{"comments": [{"owner": {"reputation": 15257, "user_id": 1409312, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/4TCzB.jpg?s=128&g=1", "display_name": "Syntactic Fructose", "link": "https://stackoverflow.com/users/1409312/syntactic-fructose"}, "edited": false, "score": 0, "creation_date": 1445992124, "post_id": 33158818, "comment_id": 54555524, "body": "This works perfectly! Awesome library to help abstract the headache of stderr redirection away"}], "tags": [], "owner": {"reputation": 5160, "user_id": 553092, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d161f230b3456d0bfd740154ae16e0a3?s=128&d=identicon&r=PG", "display_name": "Steven", "link": "https://stackoverflow.com/users/553092/steven"}, "is_accepted": true, "score": 3, "last_activity_date": 1444944413, "creation_date": 1444944413, "answer_id": 33158818, "question_id": 33151317, "link": "https://stackoverflow.com/questions/33151317/redirect-panics-to-a-specified-buffer/33158818#33158818", "title": "Redirect panics to a specified buffer", "body": "<p>Panics messages are currently written to stderr so the hacky way to do this is to redirect stderr to a file (<code>cargo run 2&gt;/path/to/panic.log</code>).</p>\n\n<p>Alternatively, you can do this in your program itself by using <a href=\"https://crates.io/crates/gag\" rel=\"nofollow\">gag</a> (disclaimer, I wrote this library). Unfortunately, it doesn't work on Windows.</p>\n\n<p>The following will redirect stderr until <code>stderr_redirect</code> is dropped:</p>\n\n<pre><code>use std::fs::OpenOptions;\nuse gag::Redirect;\n\nlet log = OpenOptions::new()\n    .truncate(true)\n    .read(true)\n    .create(true)\n    .write(true)\n    .open(\"/path/to/panic.log\")\n    .unwrap();\n\nlet stderr_redirect = Redirect::stderr(log).unwrap();\n// Your code here...\n</code></pre>\n\n<p>You can also buffer stderr in a temporary file by doing:</p>\n\n<pre><code>use gag::BufferRedirect;\n\nlet mut stderr_buffer = BufferRedirect::stderr().unwrap();\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1548814435, "creation_date": 1548814435, "answer_id": 54432441, "question_id": 33151317, "link": "https://stackoverflow.com/questions/33151317/redirect-panics-to-a-specified-buffer/54432441#54432441", "title": "Redirect panics to a specified buffer", "body": "<p>You need to register a <em>panic hook</em> with <a href=\"https://doc.rust-lang.org/std/panic/fn.set_hook.html\" rel=\"nofollow noreferrer\"><code>std::panic::set_hook</code></a> that captures the output. You can then catch the panic with <a href=\"https://doc.rust-lang.org/std/panic/fn.catch_unwind.html\" rel=\"nofollow noreferrer\"><code>std::panic::catch_unwind</code></a>:</p>\n\n<pre><code>use std::{\n    panic,\n    sync::{Arc, Mutex},\n};\n\nfn main() {\n    let global_buffer = Arc::new(Mutex::new(String::new()));\n\n    let old_hook = panic::take_hook();\n    panic::set_hook({\n        let global_buffer = global_buffer.clone();\n        Box::new(move |info| {\n            let mut global_buffer = global_buffer.lock().unwrap();\n\n            if let Some(s) = info.payload().downcast_ref::&lt;&amp;str&gt;() {\n                global_buffer.push_str(s);\n            }\n        })\n    });\n\n    let result = panic::catch_unwind(|| {\n        panic!(\"test panic\");\n    });\n\n    panic::set_hook(old_hook);\n\n    match result {\n        Ok(res) =&gt; res,\n        Err(_) =&gt; {\n            println!(\"caught panic!\");\n            println!(\"I captured:\\n\\n{}\", global_buffer.lock().unwrap())\n        }\n    }\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/35559267/155423\">Suppress panic output in Rust when using panic::catch_unwind</a></li>\n</ul>\n"}], "owner": {"reputation": 15257, "user_id": 1409312, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/4TCzB.jpg?s=128&g=1", "display_name": "Syntactic Fructose", "link": "https://stackoverflow.com/users/1409312/syntactic-fructose"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 526, "favorite_count": 0, "accepted_answer_id": 33158818, "answer_count": 2, "score": 3, "last_activity_date": 1548814513, "creation_date": 1444919593, "last_edit_date": 1548814513, "question_id": 33151317, "link": "https://stackoverflow.com/questions/33151317/redirect-panics-to-a-specified-buffer", "title": "Redirect panics to a specified buffer", "body": "<p>Is there any way to do this? In a terminal graphics library, if an exception occurs, the exception will be flushed away before being displayed, making programming very hard to debug using this library. </p>\n\n<pre><code>impl Drop for Terminal {\n    fn drop(&amp;mut self) {\n        self.outbuffer.write_all(&amp;self.driver.get(DevFn::ShowCursor)).unwrap();\n        self.outbuffer.write_all(&amp;self.driver.get(DevFn::Reset)).unwrap();\n        self.outbuffer.write_all(&amp;self.driver.get(DevFn::Clear)).unwrap();\n        self.outbuffer.write_all(&amp;self.driver.get(DevFn::ExitCa)).unwrap();\n        self.flush().unwrap(); // If an exception occurs, this will reclear the screen and remove the output\n        self.termctl.reset().unwrap();\n        SIGWINCH_STATUS.store(false, Ordering::SeqCst);\n        RUSTTY_STATUS.store(false, Ordering::SeqCst);\n    }\n}\n</code></pre>\n\n<p>If I were to comment out <code>self.flush().unwrap();</code> the exception would print, however the terminal would not correctly flush the screen and leave graphics present on the terminal even after the program has ended.</p>\n\n<p>Is it possible to, at the beginning of the program, specify a custom buffer panic will use for writing to? Or possibly write a hacky trick to do this? That way, after the flush we can check to see if anything is inside this buffer, if so we know an exception occurred and can print it out.</p>\n\n<hr>\n\n<p>Running a program that purposely crashes with an arithmetic overflow, currently the output is only \n<a href=\"https://i.stack.imgur.com/nDI84.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/nDI84.png\" alt=\"enter image description here\"></a></p>\n\n<p>By commenting out <code>self.flush().unwrap();</code> however, we're greeted with the actual exception, but a very ugly terminal now. This solution will not work as program that execute correctly still need to be flushed since no error is needed to be displayed </p>\n\n<p><a href=\"https://i.stack.imgur.com/CdGv6.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/CdGv6.png\" alt=\"enter image description here\"></a></p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1444907011, "post_id": 33145748, "comment_id": 54103019, "body": "Include the error message in the question."}], "answers": [{"comments": [{"owner": {"reputation": 1141, "user_id": 1058543, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/f7cf7f17302b550d2dfda1c4f1eb1b29?s=128&d=identicon&r=PG", "display_name": "Nodoid", "link": "https://stackoverflow.com/users/1058543/nodoid"}, "edited": false, "score": 0, "creation_date": 1444946273, "post_id": 33147296, "comment_id": 54127335, "body": "Thanks for such a well explained answer. I&#39;m enjoying Rust :)"}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 5, "last_activity_date": 1444908401, "creation_date": 1444908401, "answer_id": 33147296, "question_id": 33145748, "link": "https://stackoverflow.com/questions/33145748/assigning-values-in-a-2d-array/33147296#33147296", "title": "Assigning values in a 2D array", "body": "<p>Here is your error, I believe (at least one of them):</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>&lt;anon&gt;:15:34: 15:44 error: mismatched types:\n expected `&amp;[&amp;[i32; 4]; 4]`,\n    found `&amp;[[i32; 4]; 4]`\n(expected &amp;-ptr,\n    found array of 4 elements) [E0308]\n&lt;anon&gt;:15     let result = matrix_multiply(&amp;array_one, &amp;array_two);\n                                           ^~~~~~~~~~\n</code></pre>\n\n<p>The problem is, reference or dereference of arrays can't go on multiple levels of their nesting. This is because the memory layout of, say, <code>[&amp;[i32; 4]; 4]</code> and <code>[[i32; 4]; 4]</code> is radically different, both in contents and in size - the former array consists of four pointers to other arrays (4*4=16/8*4=32 bytes total, depending on architecture of your machine), while the latter consists of four arrays laid out sequentially (4*4*4=64 bytes total). There is simply no way to go from <code>[[i32; 4]; 4]</code> to <code>&amp;[&amp;[i32; 4]; 4]</code> without rebuilding the outer array, which Rust won't ever do for you because it is too much magic.</p>\n\n<p>You don't really need to use the inner reference; in fact, you probably don't even need to pass these arrays by reference at all: arrays of <code>Copy</code> types are <code>Copy</code> as well, so you can pass them by value. They are small enough to not cause any performance impact, and the compiler will probably optimize it automatically anyway:</p>\n\n<pre><code>fn main()  {\n    // first create a couple of arrays - these will be used\n    // for the vectors\n    let line1: [i32; 4] = [4, 2, 3, 3];\n    let line2: [i32; 4] = [3, 4, 5, 7];\n    let line3: [i32; 4] = [2, 9, 6, 2];\n    let line4: [i32; 4] = [5, 7, 2, 4];\n\n    // create two holding arrays and assign\n    let array_one = [line1, line3, line4, line2];\n    let array_two = [line2, line1, line3, line4];\n\n    // let's do the multiply\n    let result = matrix_multiply(array_one, array_two);\n    println!(\"{:?}\", result);\n}\n\nfn matrix_multiply(vec1: [[i32; 4]; 4], vec2: [[i32; 4]; 4]) -&gt; [[i32; 4]; 4] {\n    // we need to create the arrays to put the results into\n    let mut result = [[0i32; 4]; 4];\n\n    // loop through the two vectors\n    for vone in 0..4 {\n        for vtwo in 0..4 {\n            let mut sum = 0;\n            for k in 0..4 {\n                sum += vec1[vone][k] * vec2[k][vtwo];\n            }\n            result[vone][vtwo] = sum;\n        }\n   }\n\n   result\n}\n</code></pre>\n\n<p>(try it <a href=\"https://play.rust-lang.org/?gist=6ed08904da9803c81c00&amp;version=stable\" rel=\"noreferrer\">here</a>)</p>\n\n<p>I've also made your code more idiomatic according to the current community practices (braces positioning, spacing, etc.), and I've fixed the weird syntax for accessing arrays.</p>\n"}, {"tags": [], "owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "is_accepted": false, "score": 2, "last_activity_date": 1444911860, "creation_date": 1444911860, "answer_id": 33148528, "question_id": 33145748, "link": "https://stackoverflow.com/questions/33145748/assigning-values-in-a-2d-array/33148528#33148528", "title": "Assigning values in a 2D array", "body": "<p>If you write</p>\n\n<pre><code>let line1: [i32; 4] = [4, 2, 3, 3];\nlet line2: [i32; 4] = [3, 4, 5, 7];\nlet line3: [i32; 4] = [2, 9, 6, 2];\nlet line4: [i32; 4] = [5, 7, 2, 4];\n\n// create two holding arrays and assign\nlet array_one = [line1, line3, line4, line2];\n</code></pre>\n\n<p>the type of <code>array_one</code> will be <code>[[i32;4];4]</code> because the line arrays are copied into <code>array_one</code>. Borrowing this via <code>&amp;array_one</code> gives you something of type <code>&amp;[[i32;4];4]</code> which is very different from <code>&amp;[&amp;[T; 4]; 4]</code> (what the function you try to call expects).</p>\n\n<p>Option1 -- Create <code>[&amp;[T; 4]; 4]</code>:</p>\n\n<pre><code>let array_one = [&amp;line1, &amp;line3, &amp;line4, &amp;line2];\nsome_function(&amp;array_one);\n...\nfn some_function(matrix: &amp;[&amp;[i32;4];4]) {...}\n</code></pre>\n\n<p>Option2 -- Change the function sitnature:</p>\n\n<pre><code>let array_one = [line1, line3, line4, line2];\nsome_function(&amp;array_one);\n...\nfn some_function(matrix: &amp;[[i32;4];4]) {...}\n</code></pre>\n\n<p>If you're interested in dealing with multi-dimensional arrays of arbitrary sizes, perhaps you'll find my experimental <a href=\"https://crates.io/crates/multiarray\" rel=\"nofollow\">multiarray crate</a> useful. It basically tries to offer types similar to <code>Box&lt;[T]&gt;</code>, <code>&amp;[T]</code> and <code>&amp;mut[T]</code> for two or more dimensions. Here's an untested example just to get an idea of what I was trying to do:</p>\n\n<pre><code>extern crate multiarray;\n\nuse multiarray::*;\n\nfn main() {\n    // the backing memory will be a dynamically allocated\n    // linear array with 4 elements in row-major (C-style) order.\n    let mut matrix = Array2D::new([2, 2], 0i32);\n    matrix[[0,0]] = 1; matrix[[0,1]] = 2;\n    matrix[[1,0]] = 3; matrix[[1,1]] = 4;\n    let mut square = Array2D::new([2, 2], 0i32);\n    // the borrow methods create reference-like proxies\n    mat_product(matrix.borrow(), matrix.borrow(),\n                square.borrow_mut());\n}\n\nfn mat_product(a: Array2DRef&lt;i32&gt;, b: Array2DRef&lt;i32&gt;,\n               mut c: Array2DRefMut&lt;i32&gt;) {\n    let rows = a.extents()[0]; // extent of 1st dimension\n    let intr = a.extents()[1]; // extent of 2nd dimension\n    let cols = b.extents()[1]; // extent of 2nd dimension\n    assert!(intr == b.extents()[0]);\n    assert!(rows == c.extents()[0]);\n    assert!(cols == c.extents()[1]);\n    for i in 0..rows {\n        // the i-th row of a and c...\n        let a_row_i = a.eliminated_dim(0, i);\n        let mut c_row_i = c.reborrow_mut().eliminated_dim(0, i);\n        for j in 0..cols {\n            c_row_i[j] = dot_product(a_row_i, b.eliminated_dim(1, j));\n            //                                ^^^j-th column of b^^^\n        }\n    }\n}\n\nfn dot_product(a: Array1DRef&lt;i32&gt;, b: Array1DRef&lt;i32&gt;) -&gt; i32 {\n    a.zip(b).fold(0, |acc,(&amp;x,&amp;y)| acc + x * y)\n}\n</code></pre>\n"}], "owner": {"reputation": 1141, "user_id": 1058543, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/f7cf7f17302b550d2dfda1c4f1eb1b29?s=128&d=identicon&r=PG", "display_name": "Nodoid", "link": "https://stackoverflow.com/users/1058543/nodoid"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1494, "favorite_count": 1, "accepted_answer_id": 33147296, "answer_count": 2, "score": 4, "last_activity_date": 1444923122, "creation_date": 1444903939, "last_edit_date": 1444923122, "question_id": 33145748, "link": "https://stackoverflow.com/questions/33145748/assigning-values-in-a-2d-array", "title": "Assigning values in a 2D array", "body": "<p>I'm writing some code in Rust (mainly as a POC). The code takes a 2D array, passes it to a second function to do some matrix math (I know there is a standard library to do this, but I want to get used to how things work).</p>\n\n<p>The problem is that the assignment to a 2D array is causing an issue.</p>\n\n<p>My code looks like this</p>\n\n<pre><code>fn main() \n{\n    // first create a couple of arrays - these will be used\n    // for the vectors\n    let line1: [i32; 4] = [4, 2, 3, 3];\n    let line2: [i32; 4] = [3, 4, 5, 7];\n    let line3: [i32; 4] = [2, 9, 6, 2];\n    let line4: [i32; 4] = [5, 7, 2, 4];\n\n    // create two holding arrays and assign\n    let array_one = [line1, line3, line4, line2];\n    let array_two = [line2, line1, line3, line4];\n\n    // let's do the multiply\n    let result = matrix_multiply(&amp;array_one, &amp;array_two);\n    println!(\"{:?}\", result);\n}\n\nfn matrix_multiply(vec1:&amp;[&amp;[i32;4];4], vec2:&amp;[&amp;[i32;4];4]) -&gt; [[i32; 4];4]\n{\n    // we need to deference the parameters passed in\n    let vec_one:[[i32;4];4] = vec1;\n    let vec_two:[[i32;4];4] = vec2;\n\n    // we need to store the sum\n    let mut sum = 0;\n\n    // we need to create the arrays to put the results into\n    let mut result = [[0i32; 4]; 4];\n\n    // loop through the two vectors\n    for vone in 0..4\n    {\n        for vtwo in 0..4\n        {\n            for k in 0..4\n            {\n                sum = sum + vec1[[vone].k] * vec2[[k].vtwo];\n            }\n            result[[vec_one].vec_two] = sum;\n            sum = 0;\n        }\n   }\n\n   return result;\n}\n</code></pre>\n\n<p>I've also tried <code>result[vec_one][vec_two] = sum</code> but when I come to compile, it looks like there is a problem assigning to array.</p>\n\n<p>What am I doing wrong here?</p>\n"}, {"tags": ["linux", "terminal", "rust"], "answers": [{"comments": [{"owner": {"reputation": 303, "user_id": 9052677, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/jKypF.jpg?s=128&g=1", "display_name": "the chad", "link": "https://stackoverflow.com/users/9052677/the-chad"}, "edited": false, "score": 4, "creation_date": 1586618420, "post_id": 33139393, "comment_id": 108195165, "body": "My God, I searched high and low trying to find the answer to this question. Every where else you find crap like &quot;use this crate&quot; or &quot;use that crate&quot;. THIS is the correct answer to this question. Thank you so much for answering the question directly!"}, {"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 3, "creation_date": 1603550398, "post_id": 33139393, "comment_id": 114075815, "body": "FWIW, the reason why folks direct you to a crate is so that your coloring works on Windows."}, {"owner": {"reputation": 2369, "user_id": 4614680, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c9b36fb2c1d356a919916f77e74f1c3c?s=128&d=identicon&r=PG&f=1", "display_name": "Philipp Ludwig", "link": "https://stackoverflow.com/users/4614680/philipp-ludwig"}, "reply_to_user": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 1, "creation_date": 1613060780, "post_id": 33139393, "comment_id": 116965305, "body": "@BurntSushi5 Not everyone cares about Windows though."}, {"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 1, "creation_date": 1613073937, "post_id": 33139393, "comment_id": 116971463, "body": "I didn&#39;t say or imply they did."}], "tags": [], "owner": {"reputation": 10230, "user_id": 2427222, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/4h1qN.png?s=128&g=1", "display_name": "ymonad", "link": "https://stackoverflow.com/users/2427222/ymonad"}, "is_accepted": true, "score": 30, "last_activity_date": 1444923262, "last_edit_date": 1444923262, "creation_date": 1444879940, "answer_id": 33139393, "question_id": 33139248, "link": "https://stackoverflow.com/questions/33139248/i-cannot-print-color-escape-codes-to-the-terminal/33139393#33139393", "title": "I cannot print color escape codes to the terminal", "body": "<p>Rust 1.3.0 does not seem to support octal escape strings such as <code>\\033</code>. \nInstead, you can use hexadecimal escape strings like <code>\\x1b</code>.</p>\n\n<pre><code>fn main(){\n  println!(\"\\x1b[0;31mSO\\x1b[0m\")\n}\n</code></pre>\n"}], "owner": {"reputation": 67160, "user_id": 1078084, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/wApmM.jpg?s=128&g=1", "display_name": "Akavall", "link": "https://stackoverflow.com/users/1078084/akavall"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2426, "favorite_count": 0, "accepted_answer_id": 33139393, "answer_count": 1, "score": 8, "last_activity_date": 1446391095, "creation_date": 1444879038, "last_edit_date": 1446391095, "question_id": 33139248, "link": "https://stackoverflow.com/questions/33139248/i-cannot-print-color-escape-codes-to-the-terminal", "title": "I cannot print color escape codes to the terminal", "body": "<p>When I run this script:</p>\n\n<pre><code>fn main() {\n    // \\033[0;31m &lt;- Red\n    // \\033[0m &lt;- No Color\n    println!(\"\\033[0;31mSO\\033[0m\")\n}\n</code></pre>\n\n<p>I expect to get</p>\n\n<pre><code>SO #in red letters\n</code></pre>\n\n<p>However, I get:</p>\n\n<pre><code>33[0;31mSO33[0m\n</code></pre>\n\n<p>When I ran similar script in Go or Python, I get the expected output. What is going on? What am I missing? How do fix this?</p>\n\n<p>I am using:</p>\n\n<pre><code>$ rustc --version\nrustc 1.3.0 (9a92aaf19 2015-09-15)\n$ lsb_release -a\nNo LSB modules are available.\nDistributor ID: Ubuntu\nDescription:    Ubuntu 14.04.3 LTS\nRelease:    14.04\nCodename:   trusty\n</code></pre>\n"}]