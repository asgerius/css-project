[{"tags": ["opengl", "glsl", "rust"], "comments": [{"owner": {"reputation": 49036, "user_id": 3530129, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/IYkz8.jpg?s=128&g=1", "display_name": "Reto Koradi", "link": "https://stackoverflow.com/users/3530129/reto-koradi"}, "edited": false, "score": 1, "creation_date": 1446675432, "post_id": 33531825, "comment_id": 54847853, "body": "You may have to ensure that you&#39;re creating a core profile context. No idea how that is specified in the environment you&#39;re using. If you get a compatibility context context, attribute 0 aliases the fixed function vertex position attribute."}, {"owner": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "reply_to_user": {"reputation": 49036, "user_id": 3530129, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/IYkz8.jpg?s=128&g=1", "display_name": "Reto Koradi", "link": "https://stackoverflow.com/users/3530129/reto-koradi"}, "edited": false, "score": 0, "creation_date": 1446676131, "post_id": 33531825, "comment_id": 54848191, "body": "@RetoKoradi: Wasn&#39;t sure what that was, but figured out what to do from your comment, thanks. Found the necessary function for glutin <a href=\"http://tomaka.github.io/glutin/glutin/struct.WindowBuilder.html#method.with_gl_profile\" rel=\"nofollow noreferrer\">here</a>. If you want to make an answer elaborating on the OpenGL side of things (because I don&#39;t have a complete grasp on it), I can fill in the details specific to glutin."}], "answers": [{"tags": [], "owner": {"reputation": 49036, "user_id": 3530129, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/IYkz8.jpg?s=128&g=1", "display_name": "Reto Koradi", "link": "https://stackoverflow.com/users/3530129/reto-koradi"}, "is_accepted": true, "score": 2, "last_activity_date": 1446679246, "creation_date": 1446679246, "answer_id": 33533974, "question_id": 33531825, "link": "https://stackoverflow.com/questions/33531825/glvertexattrib4fv-wont-pass-to-shader-input-at-location-0/33533974#33533974", "title": "glVertexAttrib4fv won&#39;t pass to shader input at location 0", "body": "<p>You need to make sure that you have a Core Profile context. If you do not specify this, you may be creating a Compatibility Profile context. In the Compatibility Profile, vertex attribute 0 has a special meaning. From the OpenGL 3.2 Compatibility Profile spec:</p>\n\n<blockquote>\n  <p>Setting generic vertex attribute zero specifies a vertex; the four vertex coordinates are taken from the values of attribute zero. A Vertex2, Vertex3, or Vertex4 command is completely equivalent to the corresponding VertexAttrib* command with an index of zero. Setting any other generic vertex attribute updates the current values of the attribute. There are no current values for vertex attribute zero.</p>\n</blockquote>\n\n<p>In other words, vertex attribute 0 is an alias for the fixed function vertex position in the compatibility profile.</p>\n\n<p>The above does not apply in the Core Profile. Vertex attribute 0 has not special meaning, and can be used like any other vertex attribute.</p>\n\n<p>Based on what you already found, you need to use the <a href=\"http://tomaka.github.io/glutin/glutin/struct.WindowBuilder.html#method.with_gl_profile\" rel=\"nofollow\"><code>with_gl_profile</code> method</a> with argument <code>Core</code> to specify that you want to use the core profile when creating the window.</p>\n"}], "owner": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 262, "favorite_count": 0, "accepted_answer_id": 33533974, "answer_count": 1, "score": 2, "last_activity_date": 1446679246, "creation_date": 1446670527, "last_edit_date": 1495540742, "question_id": 33531825, "link": "https://stackoverflow.com/questions/33531825/glvertexattrib4fv-wont-pass-to-shader-input-at-location-0", "title": "glVertexAttrib4fv won&#39;t pass to shader input at location 0", "body": "<p>I'm trying to learn OpenGL and Rust at the same time. I'm using the OpenGL Superbible Sixth Edition, and got stuck in chapter 3 which introduces the function <code>glVertexAttrib4fv</code> to offset the position of a triangle. It worked fine when I did it in C++, but when I tried to translate it to Rust, the triangle disappeared. I've tried to reduce the example as much as possible to the following code (cargo dependencies are <code>glutin = \"*\"</code> and <code>gl = \"*\"</code>):</p>\n\n<p><em>main.rs</em></p>\n\n<pre><code>extern crate glutin;\nextern crate gl;\n\nuse std::io::Read;\n\nfn main() {\n    unsafe {\n        let win = glutin::Window::new().unwrap();\n        win.make_current().unwrap();\n        gl::load_with(|s| win.get_proc_address(s));\n\n        let program = build_shader_program();\n        gl::UseProgram(program);\n\n        let mut vao = std::mem::uninitialized();\n        gl::GenVertexArrays(1, &amp;mut vao);\n        gl::BindVertexArray(vao);\n\n        let red = [1.0, 0.0, 0.0, 1.0];\n\n        let mut running = true;\n        while running {\n            for event in win.poll_events() {\n                if let glutin::Event::Closed = event {\n                    running = false;\n                }\n            }\n\n            win.swap_buffers().unwrap();\n            gl::ClearBufferfv(gl::COLOR, 0, &amp;red[0]);\n\n            let attrib = [0.5, 0.0, 0.0, 0.0];\n            panic_if_error(\"before VertexAttrib4fv\");\n            gl::VertexAttrib4fv(0, &amp;attrib[0]);\n            panic_if_error(\"after VertexAttrib4fv\");\n\n            gl::DrawArrays(gl::TRIANGLES, 0, 3);\n        }\n    }\n}\n\nfn panic_if_error(message: &amp;str) {\n    unsafe {\n        match gl::GetError() {\n            gl::NO_ERROR =&gt; (),\n            _ =&gt; panic!(\"{}\", message),\n        }\n    }\n}\n\nfn load_file_as_cstring(path: &amp;str) -&gt; std::ffi::CString {\n    let mut contents = Vec::new();\n    let mut file = std::fs::File::open(path).unwrap();\n    file.read_to_end(&amp;mut contents).unwrap();\n    std::ffi::CString::new(contents).unwrap()\n}\n\nfn load_and_compile_shader(path: &amp;str, shader_type: u32) -&gt; u32 {\n    let contents = load_file_as_cstring(path);\n    unsafe {\n        let shader_id = gl::CreateShader(shader_type);\n\n        let source_ptr = contents.as_ptr();\n        gl::ShaderSource(shader_id, 1, &amp;source_ptr, std::ptr::null());\n        gl::CompileShader(shader_id);\n\n        let mut result = std::mem::uninitialized();\n        gl::GetShaderiv(shader_id, gl::COMPILE_STATUS, &amp;mut result);\n        assert_eq!(result, gl::TRUE as i32);\n\n        shader_id\n    }\n}\n\nfn build_shader_program() -&gt; u32 {\n    let vert = load_and_compile_shader(\"a.vert\", gl::VERTEX_SHADER);\n    let frag = load_and_compile_shader(\"a.frag\", gl::FRAGMENT_SHADER);\n\n    unsafe {\n        let program_id = gl::CreateProgram();\n        gl::AttachShader(program_id, vert);\n        gl::AttachShader(program_id, frag);\n        gl::LinkProgram(program_id);\n\n        let mut result = std::mem::uninitialized();\n        gl::GetProgramiv(program_id, gl::LINK_STATUS, &amp;mut result);\n        assert_eq!(result, gl::TRUE as i32);\n\n        program_id\n    }\n}\n</code></pre>\n\n<p><em>a.frag</em></p>\n\n<pre><code>#version 430 core\nout vec4 color;\nvoid main() {\n    color = vec4(1.0, 1.0, 1.0, 1.0);\n}\n</code></pre>\n\n<p><em>a.vert</em></p>\n\n<pre><code>#version 430 core\nlayout (location = 0) in vec4 offset;\nvoid main() {\n    const vec4 vertices[3] =\n        vec4[3](vec4( 0.25, -0.25, 0.5, 1.0),\n                vec4(-0.25, -0.25, 0.5, 1.0),\n                vec4( 0.25,  0.25, 0.5, 1.0));\n\n    gl_Position = vertices[gl_VertexID];             // LINE 1\n    // gl_Position = vertices[gl_VertexID] + offset; // LINE 2\n}\n</code></pre>\n\n<p>This code, as is, produces a white triangle in the middle of a red window.</p>\n\n<p><a href=\"https://i.stack.imgur.com/rmTGL.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/rmTGL.png\" alt=\"enter image description here\"></a></p>\n\n<p>Now, my expectation is that when I comment out <code>LINE 1</code> in the vertex shader, and uncomment <code>LINE 2</code>, the triangle should move a quarter of a screen to the right, due to this code in \"main.rs\":</p>\n\n<pre><code>let attrib = [0.5, 0.0, 0.0, 0.0];\npanic_if_error(\"before VertexAttrib4fv\");\ngl::VertexAttrib4fv(0, &amp;attrib[0]);\npanic_if_error(\"after VertexAttrib4fv\");\n</code></pre>\n\n<p>But instead, the triangle disappears altogether. The <code>panic_if_error</code> call before and after <code>gl::VertexAttrib4fv</code> ensures that <code>gl::GetError</code> returns <code>gl::NO_ERROR</code>.</p>\n\n<p><strong>Question: Does anybody know why this is happening?</strong></p>\n\n<p>Other things of note. While I was searching for the answer to this, I came upon <a href=\"https://stackoverflow.com/questions/32532738/passing-data-to-vertex-shader-not-working\">this question</a>, where the user is having a similar problem (except in C++, where I had no problem). Anyway, one of the comments there incidentally lead me to try changing the location from 0 to 1, as in this:</p>\n\n<pre><code>layout (location = 1) in vec4 offset;\n</code></pre>\n\n<p>for the vertex shader, and this for the call to <code>gl::VertexAttrib4fv</code>:</p>\n\n<pre><code>gl::VertexAttrib4fv(1, &amp;attrib[0]);\n</code></pre>\n\n<p>Well, that worked, but I have no idea why, and would still like to know what the problem is with using location 0 there (since that's what the book shows, and it worked fine in C++).</p>\n"}, {"tags": ["c", "rust", "c-preprocessor"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 3, "creation_date": 1446660722, "post_id": 33529030, "comment_id": 54839592, "body": "Asking for tools/books/etc... is off-topic on Stack-Overflow unfortunately. A simple trick would be to reword the question to just ask &quot;how to&quot; instead of specifying that you are looking for a tool... after all there may be a tool-less way of doing it."}, {"owner": {"reputation": 129565, "user_id": 1505939, "user_type": "registered", "accept_rate": 52, "profile_image": "https://www.gravatar.com/avatar/131c67ef492a8d8352c6cf642a52e20f?s=128&d=identicon&r=PG", "display_name": "M.M", "link": "https://stackoverflow.com/users/1505939/m-m"}, "edited": false, "score": 1, "creation_date": 1446670767, "post_id": 33529030, "comment_id": 54845366, "body": "In C, the general answer is &quot;no&quot;. This is because literals are considered <i>constant expressions</i>, whereas variables with a <code>const</code> qualifier are not. And there are some contexts in C where a <i>constant expression</i> is required (for example, initializers for static variables).  So this change might break the program."}], "answers": [{"comments": [{"owner": {"reputation": 421, "user_id": 508023, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/d2576d83a2b732ace62aa75c5a643857?s=128&d=identicon&r=PG", "display_name": "Target-san", "link": "https://stackoverflow.com/users/508023/target-san"}, "edited": false, "score": 0, "creation_date": 1446719944, "post_id": 33531393, "comment_id": 54864881, "body": "That&#39;s what I  struggle against. There are several hundreds of constants defined via <code>#define</code>. And I need to preserve them."}, {"owner": {"reputation": 13419, "user_id": 1405588, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/01a91a47db3526000ffa9247f95fff62?s=128&d=identicon&r=PG", "display_name": "o11c", "link": "https://stackoverflow.com/users/1405588/o11c"}, "reply_to_user": {"reputation": 421, "user_id": 508023, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/d2576d83a2b732ace62aa75c5a643857?s=128&d=identicon&r=PG", "display_name": "Target-san", "link": "https://stackoverflow.com/users/508023/target-san"}, "edited": false, "score": 0, "creation_date": 1464562790, "post_id": 33531393, "comment_id": 62524903, "body": "@Target-san with <code>-dM</code> or <code>-dD</code> you can preserve macros (the difference is &quot;only&quot; vs &quot;both&quot;)"}], "tags": [], "owner": {"reputation": 23064, "user_id": 3177124, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/65014fdf3cfd04b1452620aeb54dcede?s=128&d=identicon&r=PG&f=1", "display_name": "abligh", "link": "https://stackoverflow.com/users/3177124/abligh"}, "is_accepted": false, "score": 0, "last_activity_date": 1446720132, "last_edit_date": 1446720132, "creation_date": 1446668921, "answer_id": 33531393, "question_id": 33529030, "link": "https://stackoverflow.com/questions/33529030/convert-simple-c-defines-into-rust-constants/33531393#33531393", "title": "Convert simple C #define&#39;s into Rust constants", "body": "<p>Running the headers through <code>gcc -E</code> (i.e. the preprocessor) will remove the <code>#define</code>s. It may remove more than you want though.</p>\n\n<p>If you want to selectively preprocess, there used to be a utility called <code>scpp</code> that did that. I can't immediately find a reference to it other than to some tar files to download, but you may have more luck.</p>\n"}], "owner": {"reputation": 421, "user_id": 508023, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/d2576d83a2b732ace62aa75c5a643857?s=128&d=identicon&r=PG", "display_name": "Target-san", "link": "https://stackoverflow.com/users/508023/target-san"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 1221, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1464562295, "creation_date": 1446660569, "last_edit_date": 1464562295, "question_id": 33529030, "link": "https://stackoverflow.com/questions/33529030/convert-simple-c-defines-into-rust-constants", "title": "Convert simple C #define&#39;s into Rust constants", "body": "<p>I have a proprietary library with a long story and 30KLoC header. I'd like to generate bindings for Rust to it. And I've used <code>bindgen</code> crate almost successfully. Except <code>bindgen</code> can't transform macro constants into normal constants. Because those constants are defined in a fuzzy way, like</p>\n\n<pre><code>#define CONSTANT ((const_type)SOME_OTHER_CONSTANT)\n</code></pre>\n\n<p>So, is there some way to translate such half-constants into normal Rust ones:</p>\n\n<pre><code>const Type name = value;\n</code></pre>\n\n<p><strong>UPDATE</strong></p>\n\n<p>Apparently, crate <code>bindgen</code> uses <code>clang</code> as its backend. And <code>clang</code> is able to deal with macro definitions and other such stuff, if right flag is provided to parser. So, can anyone advice good tutorial on dealing with macro definitions using <code>libclang</code> API?</p>\n"}, {"tags": ["iterator", "rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1446646670, "creation_date": 1446646670, "answer_id": 33524163, "question_id": 33524042, "link": "https://stackoverflow.com/questions/33524042/why-does-iterator-find-require-a-mutable-self-reference/33524163#33524163", "title": "Why does `Iterator.find()` require a mutable `self` reference?", "body": "<p>It needs to be able to mutate <code>self</code> because it is advancing the iterator. Each time you call <code>next</code>, the iterator is mutated:</p>\n\n<pre><code>fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt;;\n</code></pre>\n\n<p>Here is <a href=\"https://github.com/rust-lang/rust/blob/1.4.0/src/libcore/iter.rs\">the implementation of <code>find</code></a>:</p>\n\n<pre><code>fn find&lt;P&gt;(&amp;mut self, mut predicate: P) -&gt; Option&lt;Self::Item&gt; where\n    Self: Sized,\n    P: FnMut(&amp;Self::Item) -&gt; bool,\n{\n    for x in self.by_ref() {\n        if predicate(&amp;x) { return Some(x) }\n    }\n    None\n}\n</code></pre>\n"}], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 194, "favorite_count": 0, "accepted_answer_id": 33524163, "answer_count": 1, "score": 6, "last_activity_date": 1446646670, "creation_date": 1446646332, "question_id": 33524042, "link": "https://stackoverflow.com/questions/33524042/why-does-iterator-find-require-a-mutable-self-reference", "title": "Why does `Iterator.find()` require a mutable `self` reference?", "body": "<p>From <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.find\">the documentation</a>:</p>\n\n<pre><code>fn find&lt;P&gt;(&amp;mut self, predicate: P) -&gt; Option&lt;Self::Item&gt; \nwhere P: FnMut(&amp;Self::Item) -&gt; bool\n</code></pre>\n\n<p>I don't see why it needs a mutable ref to <code>self</code>. Can someone explain?</p>\n"}, {"tags": ["rust", "associated-types"], "answers": [{"comments": [{"owner": {"reputation": 3492, "user_id": 118958, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/NwFFJ.jpg?s=128&g=1", "display_name": "ynimous", "link": "https://stackoverflow.com/users/118958/ynimous"}, "edited": false, "score": 0, "creation_date": 1446639966, "post_id": 33521685, "comment_id": 54824894, "body": "I initially thought this would not work because the traits do not have type parameters, but it does! Thanks!"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1446640031, "post_id": 33521685, "comment_id": 54824937, "body": "an associated type is a type parameter of sorts"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 18, "last_activity_date": 1549483473, "last_edit_date": 1549483473, "creation_date": 1446639389, "answer_id": 33521685, "question_id": 33520049, "link": "https://stackoverflow.com/questions/33520049/constraints-on-associated-trait-types/33521685#33521685", "title": "Constraints on associated trait types", "body": "<p>In <code>Graph</code>'s definition, you can constrain each associated type's associated type (!) to be equal to the corresponding associated type in <code>Graph</code>.</p>\n\n<pre><code>pub trait Graph {\n    type Node: Node&lt;Edge = Self::Edge&gt;;\n    type Edge: Edge&lt;Node = Self::Node&gt;;\n    fn get_nodes(&amp;self) -&gt; Vec&lt;Self::Node&gt;;\n}\n</code></pre>\n"}], "owner": {"reputation": 3492, "user_id": 118958, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/NwFFJ.jpg?s=128&g=1", "display_name": "ynimous", "link": "https://stackoverflow.com/users/118958/ynimous"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5194, "favorite_count": 3, "accepted_answer_id": 33521685, "answer_count": 1, "score": 16, "last_activity_date": 1549483473, "creation_date": 1446634625, "last_edit_date": 1446646598, "question_id": 33520049, "link": "https://stackoverflow.com/questions/33520049/constraints-on-associated-trait-types", "title": "Constraints on associated trait types", "body": "<p>Here's a (somewhat contrived) example to illustrate what I would like to do</p>\n\n<pre><code>pub trait Node: Eq + Hash {\n    type Edge: Edge;\n    fn get_in_edges(&amp;self)  -&gt; Vec&lt;&amp;Self::Edge&gt;;\n    fn get_out_edges(&amp;self) -&gt; Vec&lt;&amp;Self::Edge&gt;;\n}\n\npub trait Edge {\n    type Node: Node;\n    fn get_src(&amp;self) -&gt; &amp;Self::Node;\n    fn get_dst(&amp;self) -&gt; &amp;Self::Node;\n}\n\npub trait Graph {\n    type Node: Node;\n    type Edge: Edge;\n    fn get_nodes(&amp;self) -&gt; Vec&lt;Self::Node&gt;;\n}\n\npub fn dfs&lt;G: Graph&gt;(root: &amp;G::Node) {\n    let mut stack = VecDeque::new();\n    let mut visited = HashSet::new();\n\n    stack.push_front(root);\n    while let Some(n) = stack.pop_front() {\n        if visited.contains(n) {\n            continue\n        }\n        visited.insert(n);\n        for e in n.get_out_edges() {\n            stack.push_front(e.get_dst());\n        }\n    }\n}\n</code></pre>\n\n<p>Is there a way to express in the <code>Graph</code> trait that <code>Graph::Node</code> must be the same type as <code>Graph::Edge::Node</code> and that <code>Graph::Edge</code> must be the same type as <code>Graph::Node::Edge</code>?</p>\n\n<p>I remember reading something about a feature (not implemented at the time) that would allow richer constraints for this sort of thing, but I don't remember its name and cannot find it.</p>\n"}, {"tags": ["rust", "stdin", "text-editor", "atom-editor"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1446644290, "post_id": 33506974, "comment_id": 54827744, "body": "The build-package was never meant to interact with stdin. You probably need one of the terminal packages."}], "answers": [{"tags": [], "owner": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "is_accepted": true, "score": 0, "last_activity_date": 1449071296, "creation_date": 1449071296, "answer_id": 34046964, "question_id": 33506974, "link": "https://stackoverflow.com/questions/33506974/how-to-run-code-that-reads-from-stdin-inside-of-atom/34046964#34046964", "title": "How to run code that reads from stdin inside of Atom?", "body": "<p><a href=\"https://atom.io/packages/terminal-plus\" rel=\"nofollow\">Terminal-plus</a> package fit my needs, thanks for advice @ker</p>\n"}], "owner": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1776, "favorite_count": 0, "accepted_answer_id": 34046964, "answer_count": 1, "score": 2, "last_activity_date": 1449071915, "creation_date": 1446577044, "last_edit_date": 1449071915, "question_id": 33506974, "link": "https://stackoverflow.com/questions/33506974/how-to-run-code-that-reads-from-stdin-inside-of-atom", "title": "How to run code that reads from stdin inside of Atom?", "body": "<p>I'm looking for an <code>IDE-like</code> editor for Rust and I found that Atom now has the best support for it. I want to be able to run some code that reads from the standard input stream but I cannot enter any input. Here is the example code:</p>\n\n<pre><code>use std::io;\nfn main() {\n    println!(\"Write something\");\n    let mut guess = String::new();\n    io::stdin().read_line(&amp;mut guess)\n        .ok()\n        .expect(\"Cannot read a string\");\n\n    println!(\"Your input is: {}\", guess);\n}\n</code></pre>\n\n<p>When I build it, it prints:</p>\n\n<pre><code>Executing: cargo  run\n     Running `target\\debug\\guess_app.exe`\nWrite something\n\n9.9s Building...\n</code></pre>\n\n<p>This falls into an infinite loop and does not allow me to enter any text. I can only stop running the code. </p>\n\n<p>How can it be fixed? Maybe I can run it in <code>CMD</code> console, not sure...</p>\n\n<p>I'm using the latest versions of <code>build</code>, <code>build-cargo</code>, <code>language-rust</code> and <code>racer</code>. I get this behaviour for the <code>Cargo.Run</code> command. I also tried a <code>script</code> package, but strange encoding problems occur in the output when I run it.</p>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1446567837, "post_id": 33504047, "comment_id": 54791532, "body": "Uhh... <a href=\"http://doc.rust-lang.org/std/?search=Num\" rel=\"nofollow noreferrer\">that trait <b>doesn&#39;t</b> exist</a>. The error message is pretty spot-on here."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1446567950, "post_id": 33504047, "comment_id": 54791615, "body": "I found it here: <a href=\"https://doc.rust-lang.org/num/num/traits/trait.Num.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/num/num/traits/trait.Num.html</a> How can I tell which documentation is out of date?"}, {"owner": {"reputation": 1233, "user_id": 1216878, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/frkIL.png?s=128&g=1", "display_name": "contradictioned", "link": "https://stackoverflow.com/users/1216878/contradictioned"}, "edited": false, "score": 2, "creation_date": 1446568058, "post_id": 33504047, "comment_id": 54791699, "body": "This is from the num crate, not from stdlib ~&gt; <a href=\"https://crates.io/crates/num\" rel=\"nofollow noreferrer\">crates.io/crates/num</a>"}], "answers": [{"comments": [{"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1446572559, "post_id": 33505046, "comment_id": 54794794, "body": "Thanks. I had just figured out that I needed to also require <code>Copy</code> along with <code>Num</code>, but I was still researching to see if that was the correct approach. <code>Add</code> is definitely what I want though - I had found a different version of it in the &quot;official&quot; docs that is no longer part of the language, which is annoying."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1446572616, "post_id": 33505046, "comment_id": 54794825, "body": "Also, I didn&#39;t know about the <code>where</code> syntax. That&#39;s great!"}, {"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "edited": false, "score": 2, "creation_date": 1446576107, "post_id": 33505046, "comment_id": 54796813, "body": "Requiring <code>N</code> to be <code>Copy</code> won&#39;t be super generic. Sure, you could change that to <code>Clone</code> but that would uglify the code. I would probably prefer <code>where for&lt;&#39;a,&#39;b&gt; &amp;&#39;a N : Add&lt;&amp;&#39;b N, Output = N&gt;</code> instead. This should still work with built-in types but also support more complicated user-defined types that are neither <code>Copy</code> nor cheap to clone (like some BigInt type)."}, {"owner": {"reputation": 770, "user_id": 4917486, "user_type": "registered", "accept_rate": 71, "profile_image": "https://lh5.googleusercontent.com/-DLwv2CDyEBE/AAAAAAAAAAI/AAAAAAAAC7c/CxTPiCPEePk/photo.jpg?sz=128", "display_name": "Michael Eden", "link": "https://stackoverflow.com/users/4917486/michael-eden"}, "reply_to_user": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "edited": false, "score": 1, "creation_date": 1446578118, "post_id": 33505046, "comment_id": 54797895, "body": "@sellibitze but then you would have to return borrows of <code>N</code> from the <code>next</code> method, which I think makes this a streaming iterator, which is hard to do in rust right now."}, {"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "edited": false, "score": 0, "creation_date": 1446585370, "post_id": 33505046, "comment_id": 54801964, "body": "You&#39;re right. I forgot about that something has to be returned. I guess, this requires one cloning after all."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1446586436, "post_id": 33505046, "comment_id": 54802496, "body": "@MichaelEden that would explain why I couldn&#39;t make this work!"}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1446591907, "post_id": 33505046, "comment_id": 54805144, "body": "Is there a way to make an alias for the type parameter context, i.e. <code>N: Add&lt;Output = N&gt; + Copy</code>?  In Haskell, the context would be inferred everywhere except the Iterator impl, so I wouldn&#39;t have to write it so many times, but it seems I have to write it in full everywhere (including the <code>new()</code> constructor etc)"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1446660536, "post_id": 33505046, "comment_id": 54839475, "body": "@MichaelEden: note that <a href=\"https://doc.rust-lang.org/nightly/core/ops/trait.AddAssign.html\" rel=\"nofollow noreferrer\"><code>core::ops::AddAssign</code></a> is available on nightly, allowing to overload <code>+=</code>, and <code>+=</code> does not require to move its arguments, making it more efficient for BigInt implementations."}], "tags": [], "owner": {"reputation": 770, "user_id": 4917486, "user_type": "registered", "accept_rate": 71, "profile_image": "https://lh5.googleusercontent.com/-DLwv2CDyEBE/AAAAAAAAAAI/AAAAAAAAC7c/CxTPiCPEePk/photo.jpg?sz=128", "display_name": "Michael Eden", "link": "https://stackoverflow.com/users/4917486/michael-eden"}, "is_accepted": true, "score": 3, "last_activity_date": 1446617311, "last_edit_date": 1446617311, "creation_date": 1446570315, "answer_id": 33505046, "question_id": 33504047, "link": "https://stackoverflow.com/questions/33504047/how-can-i-put-a-trait-constraint-on-a-type-while-implementing-a-trait/33505046#33505046", "title": "How can I put a trait constraint on a type while implementing a trait?", "body": "<p>I don't think you want <code>Fib</code> to be generic over numeric types, but types that implement the <code>+</code> operator. Like so:</p>\n\n<pre><code>use std::ops::Add;\n\nstruct Fib&lt;N&gt;\nwhere N: Add&lt;Output = N&gt; + Copy {\n    value: N,\n    next: N,\n}\n\nimpl&lt;N&gt; Iterator for Fib&lt;N&gt;\nwhere N: Add&lt;Output = N&gt; + Copy {\n    type Item = N;\n\n    fn next(&amp;mut self) -&gt; Option&lt;N&gt; {\n        let next = self.value + self.next;\n        self.value = self.next;\n        self.next = next;\n        Some(next)\n    }\n}\n\nfn main() {\n    let fib_seq = Fib {\n        value: -1,\n        next: 1,\n    };\n\n    for thing in fib_seq.take(10) {\n        println!(\"{}\", thing);\n    }\n}\n</code></pre>\n\n<p><code>Add</code> is the trait that allows you to use the <code>+</code> operator and produce <code>Output</code>. In this case <code>N</code> implements the <code>Add&lt;Output = N&gt;</code> trait which means <code>N + N</code> will produce something of type <code>N</code>.</p>\n\n<p>That sounds like it, but when you try to do <code>self.next + self.value</code> you are <em>moving</em> <code>value</code> and <code>next</code> out of <code>self</code> which causes an error.</p>\n\n<p>You can't get away with not moving the values since the definition of add has this method signature:</p>\n\n<pre><code>fn add(self, rhs: RHS) -&gt; Self::Output;\n</code></pre>\n\n<p><code>RHS</code> in <code>Add</code>'s case is just <code>Self</code>. So in order to restrict <code>N</code> it to types that can just be copied with little overhead I added the <code>Copy</code> trait as a restriction.</p>\n\n<p>OP mentions an interesting point: Is it possible to alias traits? In short no.\nYou <em>could</em> make a new trait:</p>\n\n<pre><code>trait SimpleAdd: Add&lt;Output = Self&gt; + Copy {\n}\n</code></pre>\n\n<p>But then you would have to implement that trait for all the types you wanted. I.e. <code>i32</code> does not automatically implement <code>SimpleAdd</code>. But you can do it with generics if you wanted:</p>\n\n<pre><code>impl&lt;N&gt; SimpleAdd for N\nwhere N: Add&lt;Output = N&gt; + Copy {\n}\n</code></pre>\n\n<p>So the above two blocks will get you the same thing as a trait alias, but it seems like a hassle.</p>\n"}], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1568, "favorite_count": 0, "accepted_answer_id": 33505046, "answer_count": 1, "score": 2, "last_activity_date": 1446617311, "creation_date": 1446567570, "question_id": 33504047, "link": "https://stackoverflow.com/questions/33504047/how-can-i-put-a-trait-constraint-on-a-type-while-implementing-a-trait", "title": "How can I put a trait constraint on a type while implementing a trait?", "body": "<p>I have an Iterator that produces Fibonacci numbers. I restricted the type to <code>u32</code>, but now I'm struggling to make it generic for any numeric type.</p>\n\n<p>Working, non-generic code:</p>\n\n<pre><code>struct Fib {\n    value: u32,\n    next: u32,\n}\n\nimpl Fib {\n    fn new( a : u32, b : u32 ) -&gt; Fib {\n        Fib { value : a, next : b }\n    }\n}\n\nimpl Iterator for Fib {\n    type Item = u32;\n\n    fn next(&amp;mut self) -&gt; Option&lt;u32&gt; {\n        let value = self.value;\n        let next = self.value + self.next;\n        self.value = self.next;\n        self.next = next;\n        Some( value )\n    }\n}\n\n\n//////////////////////////////////////////////////\n\nfn main() {\n\n  let fib = Fib::new( 1, 2 );\n\n  let sum = fib.filter( |x| { x % 2 == 0 })\n      .take_while( |&amp;x| { x &lt;= 4000000 })\n      .fold( 0, |sum, x| { sum + x });\n\n  println!(\"{}\", sum);\n}\n</code></pre>\n\n<p>The issue is that the implementation of <code>Iterator</code> requires a constraint to <code>Num</code>, but I don't know how to express this: </p>\n\n<pre><code> impl &lt;T : Num&gt; Iterator for Fib&lt;T&gt; { ... }\n</code></pre>\n\n<p>Produces:</p>\n\n<pre><code> use of undeclared trait name `Num`\n</code></pre>\n\n<p>And when I try either <code>use std::num::{Num}</code> or <code>use num::traits::{Num}</code>, I am told that the modules do not exist.</p>\n"}, {"tags": ["generics", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1446567233, "post_id": 33503669, "comment_id": 54791078, "body": "Please <a href=\"https://stackoverflow.com/posts/33503669/edit\">edit</a> your question to explain why this isn&#39;t a duplicate of any of the similar ones. You <b>did</b> search for the error message, I assume. <a href=\"http://stackoverflow.com/q/28175528/155423\">stackoverflow.com/q/28175528/155423</a> or <a href=\"http://stackoverflow.com/q/32446485/155423\">stackoverflow.com/q/32446485/155423</a> or <a href=\"http://stackoverflow.com/q/32618872/155423\">stackoverflow.com/q/32618872/155423</a> or <a href=\"http://stackoverflow.com/q/26922353/155423\">stackoverflow.com/q/26922353/155423</a> or <a href=\"http://stackoverflow.com/q/26062892/155423\">stackoverflow.com/q/26062892/155423</a>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1446567335, "post_id": 33503669, "comment_id": 54791155, "body": "Especially <a href=\"http://stackoverflow.com/q/28175528/155423\">this question</a> which deals explicitly with <code>[T]</code>..."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1446567523, "post_id": 33503669, "comment_id": 54791282, "body": "And to be clear, this <i>may not be a duplicate</i>, but it is expected that you show some amount of effort and show what research you&#39;ve done. Often that means pointing at existing SO questions that are close but leave something unexplained."}, {"owner": {"reputation": 41, "user_id": 5520874, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7f5a04de3a1c1e0409a06a340c04b362?s=128&d=identicon&r=PG&f=1", "display_name": "qio", "link": "https://stackoverflow.com/users/5520874/qio"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1446571961, "post_id": 33503669, "comment_id": 54794402, "body": "Thanks @Shepmaster, sorry for the perception of lack of effort, i researched some of the answers, i believe i&#39;m too new to rust to know what to look for, i&#39;ll try to fix based on your answers and i hope not to ask any additional dumb &quot;duplicated&quot; questions."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1446572702, "post_id": 33503669, "comment_id": 54794870, "body": "Don&#39;t worry too much! In the end it should help you out as well. If you were confused by a previous question or answer, it won&#39;t help of we simply say the same thing again. Pointing out your research helps us give you information that is highly relevant to help you out."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1446567279, "post_id": 33503875, "comment_id": 54791119, "body": "Why do you think this isn&#39;t a duplicate of one of the ones I&#39;ve mentioned in the comments on the question?"}, {"owner": {"reputation": 1233, "user_id": 1216878, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/frkIL.png?s=128&g=1", "display_name": "contradictioned", "link": "https://stackoverflow.com/users/1216878/contradictioned"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1446567317, "post_id": 33503875, "comment_id": 54791141, "body": "Because I didn&#39;t see the comments until you wrote this comment :)"}], "tags": [], "owner": {"reputation": 1233, "user_id": 1216878, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/frkIL.png?s=128&g=1", "display_name": "contradictioned", "link": "https://stackoverflow.com/users/1216878/contradictioned"}, "is_accepted": false, "score": 0, "last_activity_date": 1446567529, "last_edit_date": 1446567529, "creation_date": 1446567128, "answer_id": 33503875, "question_id": 33503669, "link": "https://stackoverflow.com/questions/33503669/the-trait-coremarkersized-is-not-implemented-for-a-vector-of-structs-wit/33503875#33503875", "title": "&quot;the trait `core::marker::Sized` is not implemented&quot; for a vector of structs with a generic type", "body": "<p>You could use a vector instead:</p>\n\n<pre><code>struct Process {\n  properties: Option&lt;Vec&lt;Property&lt;Any&gt;&gt;&gt;,\n}\n</code></pre>\n\n<p>The error says, that <code>core::marker::Sized</code> is not implemented, so the size is not known at compile time.</p>\n\n<p>See <a href=\"http://rustbyexample.com/primitives/array.html\" rel=\"nofollow\">here</a> for little more information about the distinction between arrays and vectors.</p>\n"}], "owner": {"reputation": 41, "user_id": 5520874, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7f5a04de3a1c1e0409a06a340c04b362?s=128&d=identicon&r=PG&f=1", "display_name": "qio", "link": "https://stackoverflow.com/users/5520874/qio"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 493, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1446576371, "creation_date": 1446566559, "last_edit_date": 1446576371, "question_id": 33503669, "link": "https://stackoverflow.com/questions/33503669/the-trait-coremarkersized-is-not-implemented-for-a-vector-of-structs-wit", "title": "&quot;the trait `core::marker::Sized` is not implemented&quot; for a vector of structs with a generic type", "body": "<p>I'm trying to set a value in a struct with an <code>Any</code> type in a generic, i'm going to use it later for writing to redis. </p>\n\n<pre><code>struct Property&lt;T&gt; {\n  value: T,\n}\nstruct Process {\n  properties: Option&lt;[Property&lt;Any&gt;]&gt;,\n}\n</code></pre>\n\n<p>This returns an error:</p>\n\n<pre><code>the trait `core::marker::Sized` is not implemented for the type `[Property&lt;core::any::Any + 'static&gt;]`\n</code></pre>\n\n<p><strong>Edit</strong></p>\n\n<p>After reading all the links from the comment, I would like to explain that I would love to have a property that can accept any primitive type as a value:</p>\n\n<pre><code>use std::any::*;\n\nstruct Property&lt;T&gt; {\n    value: T,\n}\n\nstruct Process {\n    properties: Option&lt;Property&lt;Any&gt;&gt;,\n}\n\nfn main() {\n    let p = Process {\n            properties: Some(\n                Property::&lt;String&gt;{\n                    value: \"\"\n                }\n            )\n        };\n\n    let p2 = Process {\n            properties: Some(\n                Property::&lt;u32&gt;{\n                    value: 150\n                }\n            )\n        };\n}\n</code></pre>\n"}, {"tags": ["multithreading", "rust"], "answers": [{"comments": [{"owner": {"reputation": 13, "user_id": 5488447, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/839e59a857667a234eabbd15035c7658?s=128&d=identicon&r=PG&f=1", "display_name": "Aselan Du", "link": "https://stackoverflow.com/users/5488447/aselan-du"}, "edited": false, "score": 0, "creation_date": 1446604257, "post_id": 33500306, "comment_id": 54808673, "body": "It does work.Thanks. This function signature is really different, by contrast with c++. By the way, just like @swizard says, each thread receives a copy of  variable x, so x in outer scope does not mutate."}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 0, "last_activity_date": 1446557118, "creation_date": 1446557118, "answer_id": 33500306, "question_id": 33499889, "link": "https://stackoverflow.com/questions/33499889/mutate-a-shared-mutable-variable-in-multiple-threads/33500306#33500306", "title": "Mutate a shared mutable variable in multiple threads", "body": "<p>The type signature of <code>map</code> is saying it takes type parameter (<code>F</code>) that is a closure (<code>FnMut</code>) that <em>gets passed one argument</em> that is the type the iterator yields (<code>(Self::Item)</code>) and returns a <code>B</code> (<code>-&gt; B</code>). The piece you're missing is the argument: it needs to be <code>.map(|x| { ... })</code> instead of <code>.map(|| { ... })</code>.</p>\n\n<p>If you don't care about the value of the argument, you can write <code>.map(|_| { ... })</code>, using the <code>_</code> pattern to ignore it, or <code>.map(|_i| { ... })</code>, where the leading <code>_</code> is a convention to indicate that a variable is meant to be unused (it silences the compiler's normal warnings about unused variables).</p>\n\n<p>FWIW, the error message is kinda long, but it does include this info:</p>\n\n<pre><code>type mismatch: the type `[closure@break_law1.rs:10:28: 15:3 x:_]` implement\n    the trait `core::ops::FnMut&lt;()&gt;`, \nbut the trait `core::ops::FnMut&lt;(_,)&gt;` is required\n</code></pre>\n\n<p>I've put line breaks to highlight the difference: the compiler is complaining that the closure you're passing to <code>map</code> takes no arguments (<code>FnMut&lt;()&gt;</code>), when it actually wants one that takes one (<code>FnMut&lt;(_,)&gt;</code>, the <code>_</code> indicates a type parameter that hasn't got enough info to fully inferred yet).</p>\n"}, {"comments": [{"owner": {"reputation": 13, "user_id": 5488447, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/839e59a857667a234eabbd15035c7658?s=128&d=identicon&r=PG&f=1", "display_name": "Aselan Du", "link": "https://stackoverflow.com/users/5488447/aselan-du"}, "edited": false, "score": 0, "creation_date": 1446606095, "post_id": 33500874, "comment_id": 54809140, "body": "This modification triggers an compiling error: <code>x</code> does not live long enough. But I think <code>x</code> should have a longer lifetime than <code>ref_x</code>, until the last bracket."}, {"owner": {"reputation": 539, "user_id": 4313261, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh4.googleusercontent.com/-Vrtl0r4nCmI/AAAAAAAAAAI/AAAAAAAAAHM/fVptHJkPAsY/photo.jpg?sz=128", "display_name": "crhino", "link": "https://stackoverflow.com/users/4313261/crhino"}, "reply_to_user": {"reputation": 13, "user_id": 5488447, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/839e59a857667a234eabbd15035c7658?s=128&d=identicon&r=PG&f=1", "display_name": "Aselan Du", "link": "https://stackoverflow.com/users/5488447/aselan-du"}, "edited": false, "score": 0, "creation_date": 1446935377, "post_id": 33500874, "comment_id": 54953059, "body": "@AselanDu I think the issue you are seeing with that compiler error is that the thread created with <code>spawn</code> may potentially outlive the scope it was generated inside of. That means everything referenced from it must have a <code>&#39;static</code> lifetime. Since x will be dropped at the end of <code>main</code>, <code>ref_x</code> cannot have a <code>&#39;static</code> lifetime."}], "tags": [], "owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "is_accepted": false, "score": 0, "last_activity_date": 1446558761, "creation_date": 1446558761, "answer_id": 33500874, "question_id": 33499889, "link": "https://stackoverflow.com/questions/33499889/mutate-a-shared-mutable-variable-in-multiple-threads/33500874#33500874", "title": "Mutate a shared mutable variable in multiple threads", "body": "<p>By the way, even after fixing parameters number issue as shown above, you will not get the behavior you wanted. The code will compile successfully because each thread will receive a <strong>copy</strong> of variable <code>x</code>, as long as integral types in Rust implements <code>Copy</code> trait. </p>\n\n<p>I suppose the right example should look like this:</p>\n\n<pre><code>fn break_law(value: &amp;mut i32) {\n    *value += 20;\n}\n\nfn main() {\n    let mut x = 10;\n    let ref_x = &amp;mut x;\n\n    let handles: Vec&lt;_&gt; = (0..10).map(|_| {\n        thread::spawn(move || {\n            break_law(ref_x);\n            println!(\"{:?}\", x);\n        })\n    }).collect();\n\n    for h in handles {\n        h.join().unwrap();\n    }\n} \n</code></pre>\n"}], "owner": {"reputation": 13, "user_id": 5488447, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/839e59a857667a234eabbd15035c7658?s=128&d=identicon&r=PG&f=1", "display_name": "Aselan Du", "link": "https://stackoverflow.com/users/5488447/aselan-du"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 404, "favorite_count": 0, "accepted_answer_id": 33500306, "answer_count": 2, "score": 0, "last_activity_date": 1446558761, "creation_date": 1446555876, "last_edit_date": 1446558577, "question_id": 33499889, "link": "https://stackoverflow.com/questions/33499889/mutate-a-shared-mutable-variable-in-multiple-threads", "title": "Mutate a shared mutable variable in multiple threads", "body": "<p>I want to change a mutable variable in multiple threads. I know this would not be thread-safe, but I want to know how the Rust compiler will deal with it. So I use a range's <code>map</code> function to spawn sub-threads:</p>\n\n<pre><code>use std::thread;\n\nfn break_law(value: &amp;mut i32) {\n    *value += 20;\n}\n\nfn main() {\n    let mut x = 10;\n\n    let handles = (0..10).map(|| {\n        thread::spawn(move || {\n        break_law(&amp;mut x);\n        println!(\"{:?}\", x);\n        })\n    }).collect();\n\n    for h in handles {\n        h.join().unwrap();\n    }\n}\n</code></pre>\n\n<p>But I get an error:</p>\n\n<pre><code>break_law1.rs:10:24: 15:4 error: type mismatch: the type `[closure@break_law1.rs\n:10:28: 15:3 x:_]` implements the trait `core::ops::FnMut&lt;()&gt;`, but the trait `c\nore::ops::FnMut&lt;(_,)&gt;` is required (expected tuple, found ()) [E0281]\nbreak_law1.rs:10        let handles = (0..10).map(|| {\nbreak_law1.rs:11                thread::spawn(move || {\nbreak_law1.rs:12                        break_law(&amp;mut x);\nbreak_law1.rs:13                        println!(\"{:?}\", x);\nbreak_law1.rs:14                })\nbreak_law1.rs:15        }).collect();\nbreak_law1.rs:10:24: 15:4 help: run `rustc --explain E0281` to see a detailed ex\nplanation\nbreak_law1.rs:10:24: 15:4 error: type mismatch: the type `[closure@break_law1.rs\n:10:28: 15:3 x:_]` implements the trait `core::ops::FnOnce&lt;()&gt;`, but the trait `\ncore::ops::FnOnce&lt;(_,)&gt;` is required (expected tuple, found ()) [E0281]\nbreak_law1.rs:10        let handles = (0..10).map(|| {\nbreak_law1.rs:11                thread::spawn(move || {\nbreak_law1.rs:12                        break_law(&amp;mut x);\nbreak_law1.rs:13                        println!(\"{:?}\", x);\nbreak_law1.rs:14                })\nbreak_law1.rs:15        }).collect();\nbreak_law1.rs:10:24: 15:4 help: run `rustc --explain E0281` to see a detailed ex\nplanation\nbreak_law1.rs:15:5: 15:14 error: type mismatch: the type `[closure@break_law1.rs\n:10:28: 15:3 x:_]` implements the trait `core::ops::FnMut&lt;()&gt;`, but the trait `c\nore::ops::FnMut&lt;(_,)&gt;` is required (expected tuple, found ()) [E0281]\nbreak_law1.rs:15        }).collect();\n                           ^~~~~~~~~\nbreak_law1.rs:15:5: 15:14 help: run `rustc --explain E0281` to see a detailed ex\nplanation\nbreak_law1.rs:18:6: 18:14 error: the type of this value must be known in this co\nntext\nbreak_law1.rs:18            h.join().unwrap();\n                            ^~~~~~~~\nbreak_law1.rs:17:2: 19:3 note: in this expansion of for loop expansion\nerror: aborting due to 4 previous errors\n</code></pre>\n\n<p>According to the info above, I get that range's <code>map</code> function definition is like this:</p>\n\n<pre><code>// Creates a new iterator that will apply the specified function to each\n// element returned by the first, yielding the mapped element instead.\nfn map&lt;B, F&gt;(self, f: F) -&gt; Map&lt;Self, F&gt; \n    where F: FnMut(Self::Item) -&gt; B\n</code></pre>\n\n<p>This looks odd, but how should I correct this? And why?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "edited": false, "score": 0, "creation_date": 1446545274, "post_id": 33496287, "comment_id": 54776469, "body": "Do we actually need <code>Entry</code> here? I would have thought that <code>HashMap::get_mut</code> should be sufficient."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "edited": false, "score": 0, "creation_date": 1446545367, "post_id": 33496287, "comment_id": 54776533, "body": "I&#39;m not sure about entries in this particular case, but they do provide a way to work around some of lexical borrow limitations, that&#39;s why I mentioned them."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "edited": false, "score": 0, "creation_date": 1446545503, "post_id": 33496287, "comment_id": 54776615, "body": "And I don&#39;t think that <code>get_mut</code> is sufficient here because the map itself is modified, not the value."}, {"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "edited": false, "score": 0, "creation_date": 1446545743, "post_id": 33496287, "comment_id": 54776767, "body": "Yeah, you&#39;re right. I thought that the code was just replacing an entry in the map, but it&#39;s manipulating an entry at a different key. Sorry."}, {"owner": {"reputation": 33, "user_id": 5519309, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9fa1f066b97a3b1beed99a0b5905b32e?s=128&d=identicon&r=PG&f=1", "display_name": "cosinus", "link": "https://stackoverflow.com/users/5519309/cosinus"}, "edited": false, "score": 0, "creation_date": 1446559356, "post_id": 33496287, "comment_id": 54785584, "body": "Lovely... works. a little unexpected for a rust novice that an Option is needed. Would be a great addition to Rust to have more control ending borrow where needed. I have used a match to simplify it a little, but it&#39;s exactly your proposal. thanks!"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1446560524, "post_id": 33496287, "comment_id": 54786331, "body": "Yes, non-lexical borrows will make life much easier. Actually, right now a work is being done to allow them and some other things (namely, implementation of MIR, mid-level intermediate language, and its usage in the compiler), so one can hope that this will be fixed in relatively close time frame."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 4, "last_activity_date": 1446545427, "last_edit_date": 1446545427, "creation_date": 1446545179, "answer_id": 33496287, "question_id": 33495933, "link": "https://stackoverflow.com/questions/33495933/how-to-end-a-borrow-in-a-match-or-if-let-expression/33496287#33496287", "title": "How to end a borrow in a match or if let expression?", "body": "<p>This is not possible at the moment. What you want is called <a href=\"https://github.com/rust-lang/rfcs/issues/811\" rel=\"nofollow\">non-lexical borrows</a> and it is yet to be implemented in Rust. Meanwhile, you should use <a href=\"http://doc.rust-lang.org/std/collections/hash_map/enum.Entry.html\" rel=\"nofollow\"><code>Entry</code></a> API to work with maps - in most cases it should be sufficient. In this particular case I'm not sure if entries are applicable, but you can always do something like</p>\n\n<pre><code>let mut result = None;\nif let Some(&amp;Node::LeafNode(ref leaf_node)) = self.pages.get(&amp;page) {\n    let mut leaf_node = leaf_node.clone();\n    // ...\n    result = Some((leaf_page, leaf_node));\n}\n\nif let Some((leaf_page, leaf_node)) = result {\n    self.pages.insert(leaf_page, leaf_node);\n}\n</code></pre>\n\n<p>It is difficult to make the code above entirely correct given that you didn't provide definitions of <code>Node</code> and <code>self.pages</code>, but it should be approximately right. Naturally, it would work only if <code>leaf_page</code> and <code>leaf_node</code> do not contain references to <code>self.pages</code> or <code>self</code>, otherwise you won't be able to access <code>self.pages</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 33, "user_id": 5519309, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9fa1f066b97a3b1beed99a0b5905b32e?s=128&d=identicon&r=PG&f=1", "display_name": "cosinus", "link": "https://stackoverflow.com/users/5519309/cosinus"}, "is_accepted": false, "score": 0, "last_activity_date": 1488915884, "last_edit_date": 1488915884, "creation_date": 1446559526, "answer_id": 33501125, "question_id": 33495933, "link": "https://stackoverflow.com/questions/33495933/how-to-end-a-borrow-in-a-match-or-if-let-expression/33501125#33501125", "title": "How to end a borrow in a match or if let expression?", "body": "<p>Here is Vladimir's solution using <code>match</code>:</p>\n\n<pre><code>let mut result = match self.pages.get(&amp;page) {\n    Some(&amp;Node::LeafNode(ref leaf_node)) =&gt; Some(leaf_node.clone()),\n    _ =&gt; None,\n};\nif let Some(leaf_node) = result {\n    // ...\n    self.pages.insert(page_number, Node::LeafNode(leaf_node));\n};\n</code></pre>\n"}], "owner": {"reputation": 33, "user_id": 5519309, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9fa1f066b97a3b1beed99a0b5905b32e?s=128&d=identicon&r=PG&f=1", "display_name": "cosinus", "link": "https://stackoverflow.com/users/5519309/cosinus"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 953, "favorite_count": 0, "accepted_answer_id": 33496287, "answer_count": 2, "score": 3, "last_activity_date": 1488915884, "creation_date": 1446544155, "last_edit_date": 1446560896, "question_id": 33495933, "link": "https://stackoverflow.com/questions/33495933/how-to-end-a-borrow-in-a-match-or-if-let-expression", "title": "How to end a borrow in a match or if let expression?", "body": "<p>I am using a <code>HashMap</code> to store an enum. I'd like to get a value from the <code>HashMap</code> and if the value is a specific enum variant, I'd like to insert a modified copy of the value back in the <code>HashMap</code>.</p>\n\n<p>The code I came up with looks like this:</p>\n\n<pre><code>if let Node::LeafNode(mut leaf_node) = *(self.pages.get(&amp;page).unwrap()) {\n   let mut leaf_node = leaf_node.clone();\n   // ...\n   self.pages.insert(leaf_page,Node::LeafNode(leaf_node)); \n}\n</code></pre>\n\n<p>This does not compile because the borrow of <code>self.pages</code> lasts until the end of the <code>if let</code>-block and <code>self.pages.insert</code> is a mutable borrow.</p>\n\n<p>I have tried to shadow the value of the <code>HashMap</code> with a copy of the value, but this does not end the borrow. Usually I would use a <code>{}</code> block to limit the borrow, but this seems to be not possible in <code>match</code> or <code>if let</code>.</p>\n\n<p>What is the idiomatic way to end a borrow so that I can get a new mutable borrow?</p>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 0, "creation_date": 1446553534, "post_id": 33494959, "comment_id": 54781769, "body": "It&#39;s not clear whether it would suit your use case, but <code>Arc&lt;String&gt;</code> could also be a solution to this problem. It would require calling <code>to_string()</code> at some point given a <code>&amp;str</code>, but then it could be shared across many threads without copying."}, {"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "edited": false, "score": 0, "creation_date": 1446576922, "post_id": 33494959, "comment_id": 54797262, "body": "&quot;I&#39;d prefer not to...&quot; -- very understandable. I hope something like <code>scoped</code> will come back into the standard library."}], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 7, "last_activity_date": 1446543509, "creation_date": 1446543509, "answer_id": 33495711, "question_id": 33494959, "link": "https://stackoverflow.com/questions/33494959/how-can-i-lend-a-str-to-a-thread-without-copying/33495711#33495711", "title": "How can I lend a `str` to a thread without copying?", "body": "<p>The approach with <code>scoped()</code> is the correct way when you want to pass borrowed data to child threads. While <code>thread::scoped()</code> itself is deprecated due to its unsoundness, an alternative sound APIs like <a href=\"https://github.com/aturon/crossbeam\">crossbeam</a> or <a href=\"https://github.com/Kimundi/scoped-threadpool-rs\">scoped_threadpool</a> provide a way to do this on stable Rust:</p>\n\n<pre><code>extern crate crossbeam;\n\nfn indirect(peeps: &amp;str) {\n    crossbeam::scope(|scope| {\n        scope.spawn(|| greet(peeps));\n    });\n}\n</code></pre>\n"}], "owner": {"reputation": 20035, "user_id": 2971, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/f3f6251940b41a2251e7a9f4b745a7f2?s=128&d=identicon&r=PG", "display_name": "Magnus Hoff", "link": "https://stackoverflow.com/users/2971/magnus-hoff"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 237, "favorite_count": 1, "accepted_answer_id": 33495711, "answer_count": 1, "score": 1, "last_activity_date": 1446571752, "creation_date": 1446541149, "last_edit_date": 1446571752, "question_id": 33494959, "link": "https://stackoverflow.com/questions/33494959/how-can-i-lend-a-str-to-a-thread-without-copying", "title": "How can I lend a `str` to a thread without copying?", "body": "<p>Given</p>\n\n<pre><code>fn greet(peeps: &amp;str) {\n    println!(\"Hello, {}\", peeps);\n}\n</code></pre>\n\n<p>I can do:</p>\n\n<pre><code>fn main() {\n    let a = \"World\";\n    thread::spawn(move || greet(a)).join().unwrap();\n}\n</code></pre>\n\n<p>The compiler understands that the thread does not outlive the borrowed string, but this is merely a special case when the lifetime of the <code>&amp;str</code> is known to be <code>'static</code>. When I try to do the same with a function argument, it does not compile:</p>\n\n<pre><code>fn indirect(peeps: &amp;str) {\n    thread::spawn(move || greet(&amp;peeps)).join().unwrap();\n    // Does not compile, for fear that the thread may outlive peeps\n}\n</code></pre>\n\n<p>However, to a human reader, it is obviously the case that the thread cannot outlive the borrowed string.</p>\n\n<p>I have found two workarounds:</p>\n\n<ol>\n<li><p>Make a copy of the string, which can be moved into the thread:</p>\n\n<pre><code>fn indirect(peeps: &amp;str) {\n    let peeps = peeps.to_string();\n    thread::spawn(move || greet(&amp;peeps)).join().unwrap();\n}\n</code></pre></li>\n<li><p>or, make use of the famously deprecated <code>thread::scoped</code>:</p>\n\n<pre><code>#![feature(scoped)]\nfn indirect_scoped(peeps: &amp;str) {\n    thread::scoped(move || greet(&amp;peeps)).join();\n}\n</code></pre></li>\n</ol>\n\n<p>I don't want to specify <code>'static</code> lifetime for the function parameter, I'd prefer not to make an unnecessary copy (workaround 1) and I'd prefer not to use deprecated features (workaround 2).</p>\n\n<p>What should I do in this situation?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1446520043, "post_id": 33490033, "comment_id": 54766024, "body": "I can&#39;t find the original Rust issue with a minute or two of searching, but it was argued if the file error types should include the path or not. If I recall correctly, it was decided that they should not include the path, as it would be more overhead than it is worth. As shown, you can always add the path information yourself."}], "tags": [], "owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "is_accepted": true, "score": 5, "last_activity_date": 1446519131, "last_edit_date": 1446519131, "creation_date": 1446514590, "answer_id": 33490033, "question_id": 33489657, "link": "https://stackoverflow.com/questions/33489657/print-current-expected-path-on-error/33490033#33490033", "title": "Print current expected path on error", "body": "<p>Just match returned <code>Result</code> explicitly against required error like this:</p>\n\n<pre><code>use std::fs::File;\nuse std::io::ErrorKind;\n\nfn main() {\n    match File::open(\"file.txt\") {\n        Ok(file) =&gt; \n            println!(\"The file is of {} bytes\", file.metadata().unwrap().len()),\n        Err(ref e) if e.kind() == ErrorKind::NotFound =&gt;\n            println!(\"The file {}/file.txt does not exist\", std::env::current_dir().unwrap().display()),\n        Err(e) =&gt; \n            panic!(\"unexpected error: {:?}\", e),\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=c84b288df1cf04544c5c&amp;version=stable\" rel=\"nofollow\">playground link</a></p>\n"}], "owner": {"reputation": 327, "user_id": 4390396, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/8ca9955dfb1057190c888a7b421be460?s=128&d=identicon&r=PG&f=1", "display_name": "Biela Diela", "link": "https://stackoverflow.com/users/4390396/biela-diela"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 195, "favorite_count": 0, "accepted_answer_id": 33490033, "answer_count": 1, "score": 0, "last_activity_date": 1446519131, "creation_date": 1446511657, "question_id": 33489657, "link": "https://stackoverflow.com/questions/33489657/print-current-expected-path-on-error", "title": "Print current expected path on error", "body": "<p>Rust newbie here. I am trying to open a file with:</p>\n\n<pre><code>let file = File::open(\"file.txt\").unwrap();\n</code></pre>\n\n<p>Due to my build setup it looks like my binary and txt are not where I expect it to be or I am doing something wrong so I am getting a:</p>\n\n<pre><code>thread '&lt;main&gt;' panicked at 'called `Result::unwrap()` on an `Err` value: Error { repr: Os { code: 2, message: \"No such file or directory\" } }', ../src/libcore/result.rs:736\n</code></pre>\n\n<p>The error message does not say anything about what the expected path where the txt has to live should be so that my program and tests see it. How can I print this expected path? I would like to print a message like:</p>\n\n<pre><code>The file \"/expected/folder/file.txt\" does not exist\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 11, "creation_date": 1446506283, "post_id": 33485351, "comment_id": 54762335, "body": "More fidelity here would be to say that the struct needs a <i>lifetime parameter</i> (using generics), so that for each given lifetime <code>&#39;x</code> and <code>&amp;&#39;x str</code>, it can be stored in corresponding type <code>Excel&lt;&#39;x&gt;</code>.  \u201cSame lifetime as the struct\u201d isn&#39;t exactly what&#39;s happening. A lifetime parameter allows the struct to describe borrows, for example  <code>fn foo&lt;&#39;a&gt;(&amp;&#39;a self) -&gt; Excel&lt;&#39;a&gt;</code>  (The Excel struct borrows from self, but the concrete lifetime is filled in by concrete call of that method)."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 3, "creation_date": 1446552219, "post_id": 33485351, "comment_id": 54780913, "body": "The String key suggestion is good, too. It&#39;s usually what you want."}], "tags": [], "owner": {"reputation": 21316, "user_id": 526217, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/db561d0fda29a204506bdadd6b802047?s=128&d=identicon&r=PG", "display_name": "evilone", "link": "https://stackoverflow.com/users/526217/evilone"}, "is_accepted": true, "score": 33, "last_activity_date": 1482117540, "last_edit_date": 1482117540, "creation_date": 1446492542, "answer_id": 33485351, "question_id": 33485203, "link": "https://stackoverflow.com/questions/33485203/what-does-missing-lifetime-specifier-mean-when-storing-a-str-in-a-structure/33485351#33485351", "title": "What does &quot;missing lifetime specifier&quot; mean when storing a &amp;str in a structure?", "body": "<p>\"Missing lifetime specifier\" means that in the struct definition, you haven't told it how long the reference to the string slice is allowed to stay around. In order for your code to be safe, it has to stick around for at least as long as the struct.</p>\n\n<p>You need to define a lifetime parameter on your struct and use it for the string slice.</p>\n\n<pre><code>struct Excel&lt;'a&gt; {\n    columns: HashMap&lt;&amp;'a str, Vec&lt;f64&gt;&gt;\n}\n</code></pre>\n\n<p>This says that string slice (the <code>HashMap</code> key) has some lifetime parameterized by the user of the <code>Excel</code> struct. Lifetimes are one of the key features of Rust. You can read more about lifetimes in <a href=\"https://doc.rust-lang.org/book/lifetimes.html\" rel=\"noreferrer\">Rust documentation</a>.</p>\n\n<p>Usually it's simpler to define a struct that owns the string. Then you can use <code>String</code>.</p>\n\n<pre><code>struct Excel {\n    columns: HashMap&lt;String, Vec&lt;f64&gt;&gt;\n}\n</code></pre>\n"}], "owner": {"reputation": 327, "user_id": 4390396, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/8ca9955dfb1057190c888a7b421be460?s=128&d=identicon&r=PG&f=1", "display_name": "Biela Diela", "link": "https://stackoverflow.com/users/4390396/biela-diela"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 15218, "favorite_count": 1, "accepted_answer_id": 33485351, "answer_count": 1, "score": 19, "last_activity_date": 1482117540, "creation_date": 1446491960, "last_edit_date": 1482117437, "question_id": 33485203, "link": "https://stackoverflow.com/questions/33485203/what-does-missing-lifetime-specifier-mean-when-storing-a-str-in-a-structure", "title": "What does &quot;missing lifetime specifier&quot; mean when storing a &amp;str in a structure?", "body": "<p>I am trying to code an Excel-like data structure:</p>\n\n<pre><code>use std::collections::HashMap;\n\nstruct Excel {\n    columns: HashMap&lt;&amp;str, Vec&lt;f64&gt;&gt;,\n}\n\nfn main() {}\n</code></pre>\n\n<p>but I am getting an error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0106]: missing lifetime specifier\n --&gt; src/main.rs:4:22\n  |\n4 |     columns: HashMap&lt;&amp;str, Vec&lt;f64&gt;&gt;,\n  |                      ^ expected lifetime parameter\n</code></pre>\n\n<p>Can someone help me understand what's going on?</p>\n"}, {"tags": ["closures", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1446493649, "post_id": 33482764, "comment_id": 54756052, "body": "Incidental, but <a href=\"http://stackoverflow.com/questions/10984974/why-do-people-say-there-is-modulo-bias-when-using-a-random-number-generator\"><b>do not use</b> modulo to get random numbers in a range</a>! The <code>rand</code> crate has a &quot;random within a range&quot; function for this case."}, {"owner": {"reputation": 105, "user_id": 4147262, "user_type": "registered", "accept_rate": 83, "profile_image": "https://lh3.googleusercontent.com/-Lu5bthyKl5Y/AAAAAAAAAAI/AAAAAAAAABE/gQdIKjHlGz8/photo.jpg?sz=128", "display_name": "vadix", "link": "https://stackoverflow.com/users/4147262/vadix"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1446520294, "post_id": 33482764, "comment_id": 54766090, "body": "@Shepmaster Ahh, thank you. I am familiar with the bias issue, but I didn&#39;t realize Rng exposed an interface to take care of this easily! It would probably be best to look over all the functions the traits I am using expose. I am going to assume it was <a href=\"https://doc.rust-lang.org/num/rand/trait.Rng.html#method.gen_range\" rel=\"nofollow noreferrer\">rand::Rng::gen_range()</a>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1446520485, "post_id": 33482764, "comment_id": 54766126, "body": "Yeah, I was too lazy to find the function ^_^. There&#39;s also the <a href=\"https://doc.rust-lang.org/num/rand/distributions/range/struct.Range.html\" rel=\"nofollow noreferrer\">long version</a>, but <code>gen_range</code> is much more understandable."}, {"owner": {"reputation": 105, "user_id": 4147262, "user_type": "registered", "accept_rate": 83, "profile_image": "https://lh3.googleusercontent.com/-Lu5bthyKl5Y/AAAAAAAAAAI/AAAAAAAAABE/gQdIKjHlGz8/photo.jpg?sz=128", "display_name": "vadix", "link": "https://stackoverflow.com/users/4147262/vadix"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1446530307, "post_id": 33482764, "comment_id": 54768946, "body": "@Shepmaster Does the standard library include any mechanism to get an iterator similarly to gen_iter for generating values in a range? I really like Rust iterators, and I am trying to find ways to use them efficiently to solve problems. I noticed the <a href=\"https://doc.rust-lang.org/num/rand/distributions/range/trait.SampleRange.html\" rel=\"nofollow noreferrer\">SampleRange</a> trait, and I also noticed the <a href=\"https://doc.rust-lang.org/num/rand/struct.Generator.html\" rel=\"nofollow noreferrer\">Generator</a> iterator, but there seems to be no way to get a generator that calls gen_range() on Rng instead of gen()."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1446554374, "post_id": 33482764, "comment_id": 54782311, "body": "I&#39;d suggest asking a new question here on SO for that; that makes it easier for other people to find the same thing in the future! ^_^"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1446495687, "post_id": 33486032, "comment_id": 54757138, "body": "<i>assume all the returned iterators can be used at the same time</i> \u2014 +1. This is IMHO the key thing to learn to help debug this kind of thing in the future."}, {"owner": {"reputation": 105, "user_id": 4147262, "user_type": "registered", "accept_rate": 83, "profile_image": "https://lh3.googleusercontent.com/-Lu5bthyKl5Y/AAAAAAAAAAI/AAAAAAAAABE/gQdIKjHlGz8/photo.jpg?sz=128", "display_name": "vadix", "link": "https://stackoverflow.com/users/4147262/vadix"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1446519862, "post_id": 33486032, "comment_id": 54765982, "body": "@Shepmaster Thank you for emphasizing that. This is where my misunderstanding was. Luckily it was satisfactory to change this to a FnOnce."}], "tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": true, "score": 6, "last_activity_date": 1446550030, "last_edit_date": 1446550030, "creation_date": 1446495235, "answer_id": 33486032, "question_id": 33482764, "link": "https://stackoverflow.com/questions/33482764/how-to-capture-mutable-reference-into-move-closure-contained-in-iterator-returne/33486032#33486032", "title": "How to capture mutable reference into move closure contained in iterator returned from a closure", "body": "<p>You're got a situation that requires multiple conflicting mutable borrows, and rustc is denying this as it should. It's just up to us to understand how &amp; why this happens!</p>\n\n<p>A note that will be important:</p>\n\n<ul>\n<li><code>Isaac64Rng</code> implements <code>Copy</code>, which means that it implicitly copies instead of just moving. I'm assuming is is a legacy / backwards compatibility thing.</li>\n</ul>\n\n<p>I wrote this version of the code to get it straight:</p>\n\n<pre><code>extern crate rand;\n\nuse rand::Isaac64Rng;\nuse rand::{Rng, SeedableRng};\n\nfn someFunction&lt;F, I&gt;(crossover_point_iter_generator: F)\n    where F: FnMut(usize) -&gt; I, I: Iterator&lt;Item=usize&gt;\n{\n    panic!()\n}\n\nfn main() {\n    let mut rng = Isaac64Rng::from_seed(&amp;[1, 2, 3, 4]);\n    let rng = &amp;mut rng;  /* (##) Rust does not allow. */\n    someFunction(|x| {\n        (0..3).map(move |_| rng.gen::&lt;usize&gt;() % x)\n    });\n}\n</code></pre>\n\n<p>Let me put this in points:</p>\n\n<ul>\n<li><p><code>someFunction</code> wants a closure it can call, that returns an iterator each time it's called. The closure is mutable and can be called many times (<code>FnMut</code>).</p></li>\n<li><p>We must assume all the returned iterators can be used at the same time, and not in sequence (one at a time).</p></li>\n<li><p>We would like to borrow the Rng into the iterator, but mutable borrows are exclusive. So borrowing rules do not allow more than one iterator at a time.</p></li>\n<li><p>FnOnce instead of FnMut would be one example of a closure protocol to help us here. It would make rustc see that there can be only one iterator.</p></li>\n</ul>\n\n<p>In the working version, without the line <code>(##)</code>, you have several iterators active at the same time, what's happening there? It's the implicit copying kicking in, so each iterator will use an identical copy of the original Rng (sounds undesirable).</p>\n\n<p>Your second version of the code runs into essentially the same limitation.</p>\n\n<p>If you want to work around the exclusivity of borrowing, you can use special containers like <code>RefCell</code> or <code>Mutex</code> to serialize access to the Rng.</p>\n"}], "owner": {"reputation": 105, "user_id": 4147262, "user_type": "registered", "accept_rate": 83, "profile_image": "https://lh3.googleusercontent.com/-Lu5bthyKl5Y/AAAAAAAAAAI/AAAAAAAAABE/gQdIKjHlGz8/photo.jpg?sz=128", "display_name": "vadix", "link": "https://stackoverflow.com/users/4147262/vadix"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1200, "favorite_count": 1, "accepted_answer_id": 33486032, "answer_count": 1, "score": 3, "last_activity_date": 1446550030, "creation_date": 1446483047, "last_edit_date": 1446493107, "question_id": 33482764, "link": "https://stackoverflow.com/questions/33482764/how-to-capture-mutable-reference-into-move-closure-contained-in-iterator-returne", "title": "How to capture mutable reference into move closure contained in iterator returned from a closure", "body": "<p>I have a PRNG that I would like to allow a closure to access by mutable reference. The lifetimes of everything should theoretically be able to work out, here is what it looks like:</p>\n\n<pre><code>fn someFunction&lt;F, I&gt;(mut crossover_point_iter_generator: F)\n        where F: FnMut(usize) -&gt; I, I: Iterator&lt;Item=usize&gt;;\n\nlet mut rng = Isaac64Rng::from_seed(&amp;[1, 2, 3, 4]);\nsomeFunction(|x| (0..3).map(move |_| rng.gen::&lt;usize&gt;() % x));\n</code></pre>\n\n<p>Here, a closure is creating an iterator that wraps PRNG generated values. This iterator contains a map with a closure that has the wrap range <code>x</code> cloned into it, but the problem is that it unintentionally clones <code>rng</code> as well, which I have verified. It is necessary to make it a move closure because the value of <code>x</code> must be captured, otherwise the closure will outlive <code>x</code>.</p>\n\n<p>I attempted to add this line to force it to move the reference into the closure:</p>\n\n<pre><code>let rng = &amp;mut rng;\n</code></pre>\n\n<p>However, Rust complains with this error:</p>\n\n<pre><code>error: cannot move out of captured outer variable in an `FnMut` closure\n</code></pre>\n\n<p>Can I mutably access the PRNG from inside the move closure, and if not, since the PRNG clearly outlives the function call, is there an alternative solution (aside from redesigning the API)?</p>\n\n<p>Edit:</p>\n\n<p>I have rewritten it to remove the copy issue and the call looks like this:</p>\n\n<pre><code>someFunction(|x| rng.gen_iter::&lt;usize&gt;().map(move |y| y % x).take(3));\n</code></pre>\n\n<p>This results in a new error:</p>\n\n<pre><code>error: cannot infer an appropriate lifetime for autoref due to conflicting requirements\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "edited": false, "score": 0, "creation_date": 1446498746, "post_id": 33486592, "comment_id": 54758669, "body": "You are right, but then I&#39;m forced to create <code>packet</code> outside the <code>assert_packet</code> function. After all, it works somehow with owned buffer in non-generic version <code>assert_req</code>/<code>assert_rep</code>, so (I hope) it should be possible to implement the same thing with trait."}], "tags": [], "owner": {"reputation": 650, "user_id": 1092644, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a446220154cd626be17c000557b791aa?s=128&d=identicon&r=PG", "display_name": "Rym", "link": "https://stackoverflow.com/users/1092644/rym"}, "is_accepted": false, "score": 0, "last_activity_date": 1446497234, "creation_date": 1446497234, "answer_id": 33486592, "question_id": 33481868, "link": "https://stackoverflow.com/questions/33481868/lifetime-parameter-for-self-in-trait-signature/33486592#33486592", "title": "Lifetime parameter for `Self` in trait signature", "body": "<p>It works correctly if you link the lifetimes involved to the input which you'll be referencing, e.g.</p>\n\n<p><code>fn assert_packet&lt;'a, T&gt;(packet: &amp;'a [u8], sample: T) where T: Decode&lt;'a&gt; ..</code></p>\n\n<p>(You'll also need to update the tests to pass borrows rather than owned <code>Vec</code>s.)</p>\n"}, {"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 4, "last_activity_date": 1502661516, "last_edit_date": 1502661516, "creation_date": 1446525133, "answer_id": 33491435, "question_id": 33481868, "link": "https://stackoverflow.com/questions/33481868/lifetime-parameter-for-self-in-trait-signature/33491435#33491435", "title": "Lifetime parameter for `Self` in trait signature", "body": "<p>Why does this compile:</p>\n\n<pre><code>fn assert_req(packet: Vec&lt;u8&gt;, sample: Req) {\n    assert_eq!(Req::decode(&amp;packet), Ok(sample));\n}\n</code></pre>\n\n<p>while this doesn't?</p>\n\n<pre><code>fn assert_packet&lt;'a, T&gt;(packet: Vec&lt;u8&gt;, sample: T) where T: Decode&lt;'a&gt; + PartialEq + std::fmt::Debug {\n    assert_eq!(T::decode(&amp;packet), Ok(sample));\n}\n</code></pre>\n\n<p>The difference is that in the first version, the two textual occurrences of <code>Req</code> name two different instances of the <code>Req&lt;'a&gt;</code> struct, with two different lifetimes. The first occurrence, on the <code>sample</code> parameter, is specialized with a lifetime parameter received by the <code>assert_req</code> function. The second occurrence, used to invoke <code>decode</code>, is specialized with the lifetime of the <code>packet</code> parameter itself (which ceases to exist as soon as the function returns). This means that the two arguments to <code>assert_eq!</code> don't have the same type; yet, it compiles because <code>Req&lt;'a&gt;</code> can be coerced to a <code>Req&lt;'b&gt;</code> where <code>'b</code> is a shorter lifetime than <code>'a</code> (<code>Req&lt;'a&gt;</code> is a subtype of <code>Req&lt;'b&gt;</code>).</p>\n\n<p>On the other hand, in the second version, both occurrences of <code>T</code> must represent the exact same type. Lifetime parameters are always assumed to represent lifetimes that are longer than the function call, so it's an error to invoke <code>T::decode</code> with a lifetime that is shorter.</p>\n\n<p>Here's a shorter function that exhibits the same problem:</p>\n\n<pre><code>fn decode_packet&lt;'a, T&gt;(packet: Vec&lt;u8&gt;) where T: Decode&lt;'a&gt; {\n    T::decode(&amp;packet);\n}\n</code></pre>\n\n<p>This function fails to compile:</p>\n\n<pre><code>&lt;anon&gt;:38:16: 38:22 error: `packet` does not live long enough\n&lt;anon&gt;:38     T::decode(&amp;packet);\n                         ^~~~~~\n</code></pre>\n\n<p>It's possible to use higher rank trait bounds on this function to make it compile:</p>\n\n<pre><code>fn decode_packet&lt;T&gt;(packet: Vec&lt;u8&gt;) where for&lt;'a&gt; T: Decode&lt;'a&gt; {\n    T::decode(&amp;packet);\n}\n</code></pre>\n\n<p>However, now we have another problem: we can't invoke this function! If we try to invoke it like this:</p>\n\n<pre><code>fn main() {\n    decode_packet(vec![1, 2, 3]);\n}\n</code></pre>\n\n<p>We get this error:</p>\n\n<pre><code>&lt;anon&gt;:55:5: 55:18 error: unable to infer enough type information about `_`; type annotations or generic parameter binding required [E0282]\n&lt;anon&gt;:55     decode_packet(vec![1, 2, 3]);\n              ^~~~~~~~~~~~~\n</code></pre>\n\n<p>That's because we didn't specify which implementation of <code>Decode</code> we want to use, and there are no parameters the compiler can use to infer this information.</p>\n\n<p>What if we specify an implementation?</p>\n\n<pre><code>fn main() {\n    decode_packet::&lt;Req&gt;(vec![1, 2, 3]);\n}\n</code></pre>\n\n<p>We get this error:</p>\n\n<pre><code>&lt;anon&gt;:55:5: 55:25 error: the trait `for&lt;'a&gt; Decode&lt;'a&gt;` is not implemented for the type `Req&lt;'_&gt;` [E0277]\n&lt;anon&gt;:55     decode_packet::&lt;Req&gt;(vec![1, 2, 3]);\n              ^~~~~~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>That doesn't work, because the <code>Req</code> we wrote is actually interpreted as <code>Req&lt;'_&gt;</code>, where <code>'_</code> is a lifetime inferred by the compiler. This doesn't implement <code>Decode</code> for <em>all</em> possible lifetimes, only for one particular lifetime.</p>\n\n<p>In order to be able to implement your desired function, Rust would have to support <a href=\"https://en.wikipedia.org/wiki/Kind_%28type_theory%29\" rel=\"nofollow noreferrer\">higher kinded types</a>. It would then be possible to define a type constructor parameter (instead of a type parameter) on the function. For instance, you'd be able to pass <code>Req</code> or <code>Rep</code> as a type constructor requiring a lifetime parameter to produce a specific <code>Req&lt;'a&gt;</code> type.</p>\n"}], "owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 586, "favorite_count": 0, "accepted_answer_id": 33491435, "answer_count": 2, "score": 2, "last_activity_date": 1502666340, "creation_date": 1446480329, "last_edit_date": 1502666340, "question_id": 33481868, "link": "https://stackoverflow.com/questions/33481868/lifetime-parameter-for-self-in-trait-signature", "title": "Lifetime parameter for `Self` in trait signature", "body": "<p>Consider this simple protocol implementation:</p>\n\n<pre><code>#[derive(PartialEq, Debug)]\nenum Req&lt;'a&gt; {\n    InputData(&amp;'a [u8]),\n    Stop,\n}\n\nimpl&lt;'a&gt; Req&lt;'a&gt; {\n    fn decode(packet: &amp;'a [u8]) -&gt; Result&lt;Req&lt;'a&gt;, String&gt; {\n        match packet.first() {\n            Some(&amp;0x01) =&gt; Ok(Req::InputData(&amp;packet[1..])),\n            Some(&amp;0x02) =&gt; Ok(Req::Stop),\n            _ =&gt; Err(format!(\"invalid request: {:?}\", packet)),\n        }\n    }\n}\n\n#[derive(PartialEq, Debug)]\nenum Rep&lt;'a&gt; {\n    OutputData(&amp;'a [u8]),\n    StopAck,\n}\n\nimpl&lt;'a&gt; Rep&lt;'a&gt; {\n    fn decode(packet: &amp;'a [u8]) -&gt; Result&lt;Rep&lt;'a&gt;, String&gt; {\n        match packet.first() {\n            Some(&amp;0x01) =&gt; Ok(Rep::OutputData(&amp;packet[1..])),\n            Some(&amp;0x02) =&gt; Ok(Rep::StopAck),\n            _ =&gt; Err(format!(\"invalid reply: {:?}\", packet)),\n        }\n    }\n}\n\nfn assert_req(packet: Vec&lt;u8&gt;, sample: Req) {\n    assert_eq!(Req::decode(&amp;packet), Ok(sample));\n}\n\nfn assert_rep(packet: Vec&lt;u8&gt;, sample: Rep) {\n    assert_eq!(Rep::decode(&amp;packet), Ok(sample));\n}\n\nfn main() {\n    assert_req(vec![1, 2, 3], Req::InputData(&amp;[2, 3]));\n    assert_req(vec![2], Req::Stop);\n    assert_rep(vec![1, 2, 3], Rep::OutputData(&amp;[2, 3]));\n    assert_rep(vec![2], Rep::StopAck);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=2f18b3f0bd485a1360495055aa4d4980&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a></p>\n\n<p>This works, but the two functions <code>assert_req</code> and <code>assert_rep</code> have identical code with only a difference in types. It is a good idea to write one generic <code>assert_packet</code>:</p>\n\n<pre><code>trait Decode&lt;'a&gt;: Sized {\n    fn decode(packet: &amp;'a [u8]) -&gt; Result&lt;Self, String&gt;;\n}\n\n#[derive(PartialEq, Debug)]\nenum Req&lt;'a&gt; {\n    InputData(&amp;'a [u8]),\n    Stop,\n}\n\nimpl&lt;'a&gt; Decode&lt;'a&gt; for Req&lt;'a&gt; {\n    fn decode(packet: &amp;'a [u8]) -&gt; Result&lt;Req&lt;'a&gt;, String&gt; {\n        match packet.first() {\n            Some(&amp;0x01) =&gt; Ok(Req::InputData(&amp;packet[1..])),\n            Some(&amp;0x02) =&gt; Ok(Req::Stop),\n            _ =&gt; Err(format!(\"invalid request: {:?}\", packet)),\n        }\n    }\n}\n\n#[derive(PartialEq, Debug)]\nenum Rep&lt;'a&gt; {\n    OutputData(&amp;'a [u8]),\n    StopAck,\n}\n\nimpl&lt;'a&gt; Decode&lt;'a&gt; for Rep&lt;'a&gt; {\n    fn decode(packet: &amp;'a [u8]) -&gt; Result&lt;Rep&lt;'a&gt;, String&gt; {\n        match packet.first() {\n            Some(&amp;0x01) =&gt; Ok(Rep::OutputData(&amp;packet[1..])),\n            Some(&amp;0x02) =&gt; Ok(Rep::StopAck),\n            _ =&gt; Err(format!(\"invalid reply: {:?}\", packet)),\n        }\n    }\n}\n\nfn assert_packet&lt;'a, T&gt;(packet: Vec&lt;u8&gt;, sample: T)\nwhere\n    T: Decode&lt;'a&gt; + PartialEq + std::fmt::Debug,\n{\n    assert_eq!(T::decode(&amp;packet), Ok(sample));\n}\n\nfn main() {\n    assert_packet(vec![1, 2, 3], Req::InputData(&amp;[2, 3]));\n    assert_packet(vec![2], Req::Stop);\n    assert_packet(vec![1, 2, 3], Rep::OutputData(&amp;[2, 3]));\n    assert_packet(vec![2], Rep::StopAck);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=7cd9c7ef80b9cd4e54cf73011a0bd78b&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a></p>\n\n<p>However, this triggers a \"does not live long enough\" error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `packet` does not live long enough\n  --&gt; src/main.rs:41:27\n   |\n41 |     assert_eq!(T::decode(&amp;packet), Ok(sample));\n   |                           ^^^^^^ does not live long enough\n42 | }\n   | - borrowed value only lives until here\n   |\nnote: borrowed value must be valid for the lifetime 'a as defined on the function body at 37:1...\n  --&gt; src/main.rs:37:1\n   |\n37 | / fn assert_packet&lt;'a, T&gt;(packet: Vec&lt;u8&gt;, sample: T)\n38 | | where\n39 | |     T: Decode&lt;'a&gt; + PartialEq + std::fmt::Debug,\n40 | | {\n41 | |     assert_eq!(T::decode(&amp;packet), Ok(sample));\n42 | | }\n   | |_^\n</code></pre>\n\n<p>If I understand correctly, the problem is in the function signature:</p>\n\n<pre><code>fn assert_packet&lt;'a, T&gt;(packet: Vec&lt;u8&gt;, sample: T)\nwhere\n    T: Decode&lt;'a&gt;\n</code></pre>\n\n<p>Here, <code>packet</code> is destroyed when the function returns, but the user-provided <code>'a</code> lifetime parameter says that the lifetime should end somewhere outside the <code>assert_packet</code> function. Is there any right solution? How should the signature look? Maybe <a href=\"https://doc.rust-lang.org/stable/nomicon/hrtb.html\" rel=\"nofollow noreferrer\">higher rank trait bounds</a> could help here?</p>\n"}, {"tags": ["dependencies", "rust", "rust-cargo", "nom"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1446477720, "post_id": 33477036, "comment_id": 54746717, "body": "For what it is worth, I see the same problem with Rust 1.4 and a Windows 7 / x86 virtual machine. What is strange is that the crate does appear to be expanded and the source files available (<code>\\Users\\myuser\\.cargo\\registry\\src\\...</code>)."}, {"owner": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "edited": false, "score": 1, "creation_date": 1446484940, "post_id": 33477036, "comment_id": 54751510, "body": "Other packages download correctly? Can you test a different version of <code>nom</code>?"}, {"owner": {"reputation": 13360, "user_id": 90859, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/2123a66ff1a7b382e9007d36a5823153?s=128&d=identicon&r=PG", "display_name": "UserControl", "link": "https://stackoverflow.com/users/90859/usercontrol"}, "edited": false, "score": 0, "creation_date": 1446487603, "post_id": 33477036, "comment_id": 54752937, "body": "0.4.0 worked fine! Interesting.."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 1, "creation_date": 1446508347, "post_id": 33477036, "comment_id": 54763036, "body": "There&#39;s now an <a href=\"https://github.com/rust-lang/cargo/issues/2102\" rel=\"nofollow noreferrer\">issue filed about this</a>."}], "answers": [{"tags": [], "owner": {"reputation": 1452, "user_id": 203955, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ed9901b9b80743c05aedf58b4f4926dd?s=128&d=identicon&r=PG", "display_name": "G&#233;al", "link": "https://stackoverflow.com/users/203955/g%c3%a9al"}, "is_accepted": true, "score": 1, "last_activity_date": 1447346875, "creation_date": 1447346875, "answer_id": 33676851, "question_id": 33477036, "link": "https://stackoverflow.com/questions/33477036/cargo-fails-to-download-nom-v0-5-0/33676851#33676851", "title": "Cargo fails to download nom v0.5.0", "body": "<p>The last beta version (1.0.0-beta2, and the future stable release) should fix that.</p>\n"}], "owner": {"reputation": 13360, "user_id": 90859, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/2123a66ff1a7b382e9007d36a5823153?s=128&d=identicon&r=PG", "display_name": "UserControl", "link": "https://stackoverflow.com/users/90859/usercontrol"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 338, "favorite_count": 0, "accepted_answer_id": 33676851, "answer_count": 1, "score": 2, "last_activity_date": 1486869855, "creation_date": 1446465336, "last_edit_date": 1486869855, "question_id": 33477036, "link": "https://stackoverflow.com/questions/33477036/cargo-fails-to-download-nom-v0-5-0", "title": "Cargo fails to download nom v0.5.0", "body": "<p>I'm trying to use <a href=\"https://github.com/Geal/nom\" rel=\"nofollow noreferrer\">Nom</a> but getting the following error when running <code>cargo build --verbose</code>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Unable to get packages from source\n\nCaused by:\n  Failed to unpack package `nom v0.5.0`\n\nCaused by:\n  The filename, directory name, or volume label syntax is incorrect.\n (os error 123)\n</code></pre>\n\n<p>My <code>Cargo.toml</code> looks like this:</p>\n\n<pre><code>[package]\nname = \"hello_world\"\nversion = \"0.1.0\"\nauthors = [\"bob\"]\n[dependencies]\nnom = \"~0.5.0\"\n</code></pre>\n\n<p>How do I fix this? <code>cargo update</code> does not help. I'm using cargo 0.5.0-nightly (833b947 2015-09-13) installed as part of the Rust 1.4 release (Windows 7, x64).</p>\n"}, {"tags": ["algorithm", "rust", "circular-buffer"], "comments": [{"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 3, "creation_date": 1446465279, "post_id": 33475715, "comment_id": 54738943, "body": "This is often known as &quot;rotating&quot; the vector, e.g. <a href=\"http://www.azillionmonkeys.com/qed/case8.html\" rel=\"nofollow noreferrer\">azillionmonkeys.com/qed/case8.html</a>"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1446465605, "post_id": 33475715, "comment_id": 54739138, "body": "ah wonderful. My google-fu has failed me. I was looking for the wrong terms."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1446466446, "post_id": 33475715, "comment_id": 54739583, "body": "I ported it to Rust <a href=\"http://is.gd/geg4P6\" rel=\"nofollow noreferrer\">here</a> if you want to add an answer with some code."}], "answers": [{"comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1446470464, "post_id": 33477724, "comment_id": 54741899, "body": "in fact it gets even more compilcated when the ring-buffer is not full, as then I need to prevent reads from uninitialized memory. But that should be surmountable."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1446477160, "post_id": 33477724, "comment_id": 54746313, "body": "@ker: I think you can deal with the not full case relatively easily if you are willing to implement a two-steps process: (1) move all elements to the front (where <code>Vec</code> will need them) and (2) shuffle appropriately. Of course, dealing with everything at once would be more efficient in terms of moves... but (1) can be implement with bulk <code>memcpy</code> (and thus vectorized operations) so the two steps process might end up more cache-friendly."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1446535813, "post_id": 33477724, "comment_id": 54771330, "body": "that&#39;s actually pretty smart. But I&#39;m still not sure about the uninitialized memory. Am I allowed to memcpy uninitialized memory?"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1446863826, "post_id": 33477724, "comment_id": 54934651, "body": "Your port can be made move semantics aware by just removing the <code>tmp</code> variable and using <code>a.swap(t, tp)</code> instead of <code>a[t] = a[tp]</code>"}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 5, "last_activity_date": 1446476421, "last_edit_date": 1446476421, "creation_date": 1446467717, "answer_id": 33477724, "question_id": 33475715, "link": "https://stackoverflow.com/questions/33475715/how-do-i-turn-a-circular-buffer-into-a-vector-in-on-without-an-allocation/33477724#33477724", "title": "How do I turn a circular buffer into a vector in O(n) without an allocation?", "body": "<p>This operation is typically called a \"rotation\" of the vector, e.g. the C++ standard library has <a href=\"http://en.cppreference.com/w/cpp/algorithm/rotate\" rel=\"nofollow\"><code>std::rotate</code></a> to do this. There are <a href=\"http://www.azillionmonkeys.com/qed/case8.html\" rel=\"nofollow\">known algorithms</a> for doing the operation, although you may have to quite careful when porting if you're trying to it generically/with non-<code>Copy</code> types, where <code>swap</code>s become key, as one can't generally just read something straight out from a vector.</p>\n\n<p>That said, one is likely to be able to use <code>unsafe</code> code with <a href=\"http://doc.rust-lang.org/std/ptr/fn.read.html\" rel=\"nofollow\"><code>std::ptr::read</code></a>/<a href=\"http://doc.rust-lang.org/std/ptr/fn.write.html\" rel=\"nofollow\"><code>std::ptr::write</code></a> for this, since data is just being moved around, and hence there's no need to execute caller-defined code or very complicated concerns about exception safety.</p>\n\n<p>A port of the C code in the link above (by @ker):</p>\n\n<pre><code>fn rotate(k: usize, a: &amp;mut [i32]) {\n    if k == 0 { return }\n\n    let mut c = 0;\n    let n = a.len();\n    let mut v = 0;\n    while c &lt; n {\n        let mut t = v;\n        let mut tp = v + k;\n        let tmp = a[v];\n        c += 1;\n        while tp != v {\n            a[t] = a[tp];\n            t = tp;\n            tp += k;\n            if tp &gt;= n { tp -= n; }\n            c += 1;\n        }\n        a[t] = tmp;\n        v += 1;\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1446469129, "post_id": 33477753, "comment_id": 54741091, "body": "NB. you don&#39;t need to implement <a href=\"http://doc.rust-lang.org/std/primitive.slice.html#method.reverse\" rel=\"nofollow noreferrer\"><code>reverse</code></a> yourself: <code>array[..k].reverse(); array[k..].reverse(); array.reverse();</code> should work."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1446469466, "post_id": 33477753, "comment_id": 54741294, "body": "@huon: Humpf... I did not even thought about looking for it. Not only does it work, but it also makes it much simpler."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 8, "last_activity_date": 1446469409, "last_edit_date": 1495541030, "creation_date": 1446467824, "answer_id": 33477753, "question_id": 33475715, "link": "https://stackoverflow.com/questions/33475715/how-do-i-turn-a-circular-buffer-into-a-vector-in-on-without-an-allocation/33477753#33477753", "title": "How do I turn a circular buffer into a vector in O(n) without an allocation?", "body": "<p>The simplest solution is to use 3 reversals, indeed this is what is recommended in <a href=\"https://stackoverflow.com/questions/4457277/algorithm-to-rotate-an-array-in-linear-time\">Algorithm to rotate an array in linear time</a>.</p>\n\n<pre><code>//  rotate to the left by \"k\".\nfn rotate&lt;T&gt;(array: &amp;mut [T], k: usize) {\n    if array.is_empty() { return; }\n\n    let k = k % array.len();\n\n    array[..k].reverse();\n    array[k..].reverse();\n    array.reverse();\n}\n</code></pre>\n\n<p>While this is linear, this requires reading and writing each element at most twice (reversing a range with an odd number of elements does not require touching the middle element). On the other hand, the very predictable access pattern of the reversal plays nice with prefetching, YMMV.</p>\n"}], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 734, "favorite_count": 0, "accepted_answer_id": 33477724, "answer_count": 2, "score": 2, "last_activity_date": 1501716306, "creation_date": 1446460940, "last_edit_date": 1501716306, "question_id": 33475715, "link": "https://stackoverflow.com/questions/33475715/how-do-i-turn-a-circular-buffer-into-a-vector-in-on-without-an-allocation", "title": "How do I turn a circular buffer into a vector in O(n) without an allocation?", "body": "<p>I have a <code>Vec</code> that is the allocation for a circular buffer. Let's assume the buffer is full, so there are no elements in the allocation that aren't in the circular buffer. I now want to turn that circular buffer into a <code>Vec</code> where the first element of the circular buffer is also the first element of the <code>Vec</code>. As an example I have this (allocating) function:</p>\n\n<pre><code>fn normalize(tail: usize, buf: Vec&lt;usize&gt;) -&gt; Vec&lt;usize&gt; {\n    let n = buf.len();\n    buf[tail..n]\n        .iter()\n        .chain(buf[0..tail].iter())\n        .cloned()\n        .collect()\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=5167d80ff42640a93935d8e287434b7a&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<p>Obviously this can also be done without allocating anything, since we already have an allocation that is large enough, and we have a <code>swap</code> operation to swap arbitrary elements of the allocation.</p>\n\n<pre><code>fn normalize(tail: usize, mut buf: Vec&lt;usize&gt;) -&gt; Vec&lt;usize&gt; {\n    for _ in 0..tail {\n        for i in 0..(buf.len() - 1) {\n            buf.swap(i, i + 1);\n        }\n    }\n    buf\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=655f25921f64b763ac41255003b9652f&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<p>Sadly this requires <code>buf.len() * tail</code> swap operations. I'm fairly sure it can be done in <code>buf.len() + tail</code> swap operations. For concrete values of <code>tail</code> and <code>buf.len()</code> I have been able to figure out solutions, but I'm not sure how to do it in the general case.</p>\n\n<p>My recursive partial solution <a href=\"https://play.rust-lang.org/?gist=dc66f817c27fcc9873c83c289a11a125&amp;version=stable\" rel=\"nofollow noreferrer\">can be seen in action</a>.</p>\n"}, {"tags": ["linux", "concurrency", "signals", "rust", "posix"], "answers": [{"comments": [{"owner": {"reputation": 25156, "user_id": 230461, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/202ecb437d8bbd442d093a3a35c67a04?s=128&d=identicon&r=PG", "display_name": "dflemstr", "link": "https://stackoverflow.com/users/230461/dflemstr"}, "edited": false, "score": 0, "creation_date": 1446501543, "post_id": 33469818, "comment_id": 54760226, "body": "The <code>chan_signal</code> crate looks interesting but I&#39;m using coroutines with <a href=\"https://github.com/dpc/mioco\" rel=\"nofollow noreferrer\"><code>mioco</code></a> and I don&#39;t want to block on/poll a channel.  However it should be possible to use <code>signalfd</code> and add the returned FD to the <code>mio</code> epoll set!  That seems like the most elegant solution, thanks for the hint!"}], "tags": [], "owner": {"reputation": 539, "user_id": 4313261, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh4.googleusercontent.com/-Vrtl0r4nCmI/AAAAAAAAAAI/AAAAAAAAAHM/fVptHJkPAsY/photo.jpg?sz=128", "display_name": "crhino", "link": "https://stackoverflow.com/users/4313261/crhino"}, "is_accepted": true, "score": 3, "last_activity_date": 1446431604, "last_edit_date": 1446431604, "creation_date": 1446431162, "answer_id": 33469818, "question_id": 33467528, "link": "https://stackoverflow.com/questions/33467528/safe-global-state-for-signal-handling/33469818#33469818", "title": "Safe global state for signal handling", "body": "<p>For this type of global state, I would recommend using the <a href=\"http://rust-lang-nursery.github.io/lazy-static.rs/lazy_static/index.html\" rel=\"nofollow\">lazy_static</a> crate. You can use a macro to define a lazily-evaluated, mutable global reference. You may be able to get a way with a global <code>Option&lt;T&gt;</code> variable with that.</p>\n\n<p>That is one problem with this situation though. A big issue you will run into is that it is hard to do what you want only inside of a signal handler. Since a signal handler must be re-entrant, any type of locks are out as well as any memory allocation (unless the memory allocator used is also re-entrant). That means an <code>Arc&lt;Mutex&lt;Vec&lt;T&gt;&gt;&gt;</code> type or something similar will not work. You potentially already know and are dealing with that in some way though.</p>\n\n<p>Depending on your needs, I might point you towards the <a href=\"http://burntsushi.net/rustdoc/chan_signal\" rel=\"nofollow\">chan_signal</a> crate, which is an abstraction over signals which uses a thread and the <code>sigwait</code> syscall to receive signals.</p>\n\n<p>Hope that helps, another interesting resource to look at would be the <a href=\"http://man7.org/linux/man-pages/man2/signalfd.2.html\" rel=\"nofollow\">signalfd</a> function which creates a file descriptor to enqueue signals on. The <code>nix</code> crate has a binding to that as well.</p>\n"}], "owner": {"reputation": 25156, "user_id": 230461, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/202ecb437d8bbd442d093a3a35c67a04?s=128&d=identicon&r=PG", "display_name": "dflemstr", "link": "https://stackoverflow.com/users/230461/dflemstr"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 218, "favorite_count": 0, "accepted_answer_id": 33469818, "answer_count": 1, "score": 1, "last_activity_date": 1446431604, "creation_date": 1446413818, "question_id": 33467528, "link": "https://stackoverflow.com/questions/33467528/safe-global-state-for-signal-handling", "title": "Safe global state for signal handling", "body": "<p>I am toying around with Rust and various UNIX libraries.  A use-case that I have right now is that I want to react to POSIX signals.  To keep things reasonable I want to create an abstraction over the signal handling so that the rest of my program doesn't have to worry about them as much.</p>\n\n<p>Let's call the abstraction <code>SignalHandler</code>:</p>\n\n<pre><code>struct SignalHandler {\n    pub signals: Arc&lt;Vec&lt;libc::c_int&gt;&gt;,\n}\n</code></pre>\n\n<p>I would like this <code>signals</code> vector to be filled with all the signals that are received.  My real state is more complicated, but let's use this vector as an example.</p>\n\n<p>I want the API to behave like this:</p>\n\n<pre><code>// \u2190 No signals are being captured\nlet Some(h) = SignalHandler::try_create();\n// \u2190 Signals are added to h.signals\n\n// Only one signal handler can be active at a time per process\nassert_eq!(None, SignalHandler::try_create());\n\n// \u2190 Signals are added to h.signals\ndrop(h);\n// \u2190 No signals are being captured\n</code></pre>\n\n<p>The problem is that registering a signal handler (e.g. using the <code>nix</code> crate) requires a pointer to a C function:</p>\n\n<pre><code>use nix::sys::signal;\nlet action = signal::SigAction::new(handle_signal, signal::SockFlag::empty(), signal::SigSet::empty());\nsignal::sigaction(signal::SIGINT, &amp;action);\n</code></pre>\n\n<p>I can't pass the <code>signals</code> vector to the <code>handle_signal</code> function, since it needs to have the C ABI and thus can't be a closure.  I would like to give out a <code>Weak&lt;_&gt;</code> pointer to that function somehow.  This probably means using global state.</p>\n\n<p>So the question is: what data structure should I use for global state that can either be \"unset\" (i.e. no <code>signals</code> vector) or atomically \"set\" to some mutable state that I initialize in <code>try_create</code>?</p>\n"}, {"tags": ["io", "pipe", "rust"], "comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 3, "creation_date": 1446424145, "post_id": 33461772, "comment_id": 54723440, "body": "Unrelated: change assemble to use <code>&lt;I: ?Sized, O: ?Sized&gt;</code> and it&#39;s even more generic (allowing trait objects)."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 10, "last_activity_date": 1528917765, "last_edit_date": 1528917765, "creation_date": 1446386176, "answer_id": 33462914, "question_id": 33461772, "link": "https://stackoverflow.com/questions/33461772/how-to-idiomatically-efficiently-pipe-data-from-readseek-to-write/33462914#33462914", "title": "How to idiomatically / efficiently pipe data from Read+Seek to Write?", "body": "<p>You are looking for <a href=\"https://doc.rust-lang.org/std/io/fn.copy.html\" rel=\"noreferrer\"><code>io::copy</code></a>:</p>\n\n<pre><code>use std::io::{self, prelude::*, SeekFrom};\n\npub fn assemble&lt;I, O&gt;(mut input: I, mut output: O) -&gt; Result&lt;(), io::Error&gt;\nwhere\n    I: Read + Seek,\n    O: Write,\n{\n    // first seek and output \"hello\"\n    input.seek(SeekFrom::Start(5))?;\n    io::copy(&amp;mut input.by_ref().take(5), &amp;mut output)?;\n\n    // then output \"world\"\n    input.seek(SeekFrom::Start(0))?;\n    io::copy(&amp;mut input.take(5), &amp;mut output)?;\n\n    Ok(())\n}\n</code></pre>\n\n<p>If you look at <a href=\"https://github.com/rust-lang/rust/blob/1.26.2/src/libstd/io/util.rs#L48-L68\" rel=\"noreferrer\">the implementation of <code>io::copy</code></a>, you can see that it's similar to your code. However, it takes care to handle more error cases:</p>\n\n<ol>\n<li><code>write</code> does <strong>not</strong> always write everything you ask it to!</li>\n<li>An \"interrupted\" write isn't usually fatal.</li>\n</ol>\n\n<p>It also uses a larger buffer size but still stack-allocates it.</p>\n"}], "owner": {"reputation": 324, "user_id": 1187538, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3e85249c32dff4691c307fb916ab4829?s=128&d=identicon&r=PG", "display_name": "Nercury", "link": "https://stackoverflow.com/users/1187538/nercury"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 800, "favorite_count": 0, "accepted_answer_id": 33462914, "answer_count": 1, "score": 11, "last_activity_date": 1528917765, "creation_date": 1446378189, "last_edit_date": 1447189105, "question_id": 33461772, "link": "https://stackoverflow.com/questions/33461772/how-to-idiomatically-efficiently-pipe-data-from-readseek-to-write", "title": "How to idiomatically / efficiently pipe data from Read+Seek to Write?", "body": "<p>I want to take data from random locations in input file, and output them sequentially to output file. Preferably, with no unnecessary allocations.</p>\n\n<p><a href=\"http://is.gd/gafttx\" rel=\"noreferrer\">This is one kind of solution I have figured out</a>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::io::{ self, SeekFrom, Cursor, Read, Write, Seek };\n\n#[test]\nfn read_write() {\n    // let's say this is input file\n    let mut input_file = Cursor::new(b\"worldhello\");\n    // and this is output file\n    let mut output_file = Vec::&lt;u8&gt;::new();\n\n    assemble(&amp;mut input_file, &amp;mut output_file).unwrap();\n\n    assert_eq!(b\"helloworld\", &amp;output_file[..]);\n}\n\n// I want to take data from random locations in input file\n// and output them sequentially to output file\npub fn assemble&lt;I, O&gt;(input: &amp;mut I, output: &amp;mut O) -&gt; Result&lt;(), io::Error&gt; \n    where I: Read + Seek, O: Write \n{\n    // first seek and output \"hello\"\n    try!(input.seek(SeekFrom::Start(5)));\n    let mut hello_buf = [0u8; 5];\n    try!(input.take(5).read(&amp;mut hello_buf));\n    try!(output.write(&amp;hello_buf));\n\n    // then output \"world\"\n    try!(input.seek(SeekFrom::Start(0)));\n    let mut world_buf = [0u8; 5];\n    try!(input.take(5).read(&amp;mut world_buf));\n    try!(output.write(&amp;world_buf));\n\n    Ok(())\n}\n</code></pre>\n\n<p>Let's not worry about I/O latency here.</p>\n\n<p>Questions:</p>\n\n<ol>\n<li>Does the stable Rust have some helper to take x bytes from one stream and push them to another stream? Or do I have to roll my own?</li>\n<li>If I have to roll my own, maybe there is a better way?</li>\n</ol>\n"}, {"tags": ["closures", "rust"], "answers": [{"comments": [{"owner": {"reputation": 1, "user_id": 4732517, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f20637a5426b91d4365476cf8750e009?s=128&d=identicon&r=PG&f=1", "display_name": "Benjamin Lee", "link": "https://stackoverflow.com/users/4732517/benjamin-lee"}, "edited": false, "score": 0, "creation_date": 1446400812, "post_id": 33460090, "comment_id": 54716262, "body": "Is there a way to do this if I do want to specify a particular lifetime on the closure&#39;s arguments? The way I am using this is that I have two arguments, one of which has the same lifetime as one of the arguments to the function which creates the closure, and the other which has a lifetime parameter which is the same as well."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 1, "user_id": 4732517, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f20637a5426b91d4365476cf8750e009?s=128&d=identicon&r=PG&f=1", "display_name": "Benjamin Lee", "link": "https://stackoverflow.com/users/4732517/benjamin-lee"}, "edited": false, "score": 0, "creation_date": 1446433394, "post_id": 33460090, "comment_id": 54725671, "body": "@BenjaminLee I&#39;m not sure what you&#39;re asking."}, {"owner": {"reputation": 1, "user_id": 4732517, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f20637a5426b91d4365476cf8750e009?s=128&d=identicon&r=PG&f=1", "display_name": "Benjamin Lee", "link": "https://stackoverflow.com/users/4732517/benjamin-lee"}, "edited": false, "score": 0, "creation_date": 1446441820, "post_id": 33460090, "comment_id": 54727982, "body": "For example, <code>fn foo&lt;&#39;a&gt;(x: &amp;&#39;a i32, closure: Closure&lt;&#39;a&gt;) -&gt; i32 { closure(x) }</code>. What I am trying to do is make sure that the closure&#39;s arguments have the same lifetime as one of the lifetime parameters to the function. Another problem I just ran into was using <code>type Closure = Box&lt;for&lt;&#39;a&gt; Fn(&amp;&#39;a i32, Foo&lt;&#39;a&gt;)&gt;</code> where <code>Foo</code> is a structure. It works but any closure that I actually define says it doesn&#39;t fit the type <code>Closure</code>."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 1, "user_id": 4732517, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f20637a5426b91d4365476cf8750e009?s=128&d=identicon&r=PG&f=1", "display_name": "Benjamin Lee", "link": "https://stackoverflow.com/users/4732517/benjamin-lee"}, "edited": false, "score": 0, "creation_date": 1446448888, "post_id": 33460090, "comment_id": 54730485, "body": "@BenjaminLee But <i>why</i> does the closure need to have the same lifetime?  By parameterising the lifetime of the argument, they won&#39;t <i>need</i> to match any more.  Also, your description is really vague as to what you&#39;re actually trying to accomplish.  I think you should ask a new question with more details showing what you&#39;re trying to do.  Comments aren&#39;t the place to back-and-forth work out what it is you&#39;re trying to ask for."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 5, "last_activity_date": 1446362537, "creation_date": 1446362537, "answer_id": 33460090, "question_id": 33459983, "link": "https://stackoverflow.com/questions/33459983/store-closure-which-references-other-closure/33460090#33460090", "title": "Store closure which references other closure", "body": "<p>First of all, you need to know that <code>Box&lt;T&gt;</code> has an implicit lifetime in it; if you were to spell it out, it'd be <code>Box&lt;T + 'static&gt;</code>.  The reason for this is that a <code>Box</code> can live as long as you want it to, so the thing you store <em>inside</em> of it <em>also</em> needs to live as long as you might want.  Only types that have a <code>'static</code> lifetime qualify.  To put it another way, this prevents you from boxing something that is only <em>temporarily</em> valid (like a <code>&amp;'a T</code> is only valid for <code>'a</code>).</p>\n\n<p>So <code>Box&lt;Fn(&amp;'a i32) -&gt; i32&gt;</code> is actually <code>Box&lt;(Fn(&amp;'a i32) -&gt; i32) + 'static&gt;</code>.  But, this is a problem because of that <code>'a</code>.  You <em>might</em> believe that this is saying \"the closure takes a pointer of <em>some</em> lifetime\", but it doesn't.  It's saying the closure <em>as a whole</em> is parameterised on some lifetime, and as a consequence, is only valid <em>during</em> that lifetime.</p>\n\n<p>To put it another way, instead of saying \"this type is a closure which takes a pointer (which is valid for <code>'a</code>)\", you're saying \"this type (which is valid for <code>'a</code>) is a closure which takes a pointer (also valid for <code>'a</code>)\".</p>\n\n<p>This is incompatible with the implicit <code>'static</code> which is part of the <code>Box&lt;T&gt;</code> type, so it won't work.</p>\n\n<p>What you <em>actually</em> want is to make it so that the closure is valid for any old lifetime, and that's it's just its <em>argument</em> that's constrained.  You do this by using <a href=\"http://doc.rust-lang.org/nomicon/hrtb.html\" rel=\"noreferrer\">Higher-Rank Trait Bounds</a>, like so:</p>\n\n<pre><code>type Closure = Box&lt;for&lt;'a&gt; Fn(&amp;'a i32) -&gt; i32&gt;;\n</code></pre>\n\n<p>Now, instead of picking a specific lifetime for which the <code>Closure</code> type is valid, this is saying that the type <em>itself</em> is always valid, but that the type of the argument is constrained by some arbitrary lifetime.</p>\n\n<p>At this point, you can replace <code>Closure&lt;'a&gt;</code> with <code>Closure</code>, and it works.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>type Closure = Box&lt;for&lt;'a&gt; Fn(&amp;'a i32) -&gt; i32&gt;;\n\nfn foo&lt;'a&gt;() {\n    let add_closure = |closure: Closure| {\n        let bar: Closure = Box::new(move |x| {\n            println!(\"{}\", x);\n            closure(x)\n        });\n    };\n\n    add_closure(Box::new(|&amp;x| x + 2));\n}\n\nfn main() {\n    foo()\n}\n</code></pre>\n"}], "owner": {"reputation": 1, "user_id": 4732517, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f20637a5426b91d4365476cf8750e009?s=128&d=identicon&r=PG&f=1", "display_name": "Benjamin Lee", "link": "https://stackoverflow.com/users/4732517/benjamin-lee"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 194, "favorite_count": 1, "answer_count": 1, "score": 0, "last_activity_date": 1446362537, "creation_date": 1446361340, "question_id": 33459983, "link": "https://stackoverflow.com/questions/33459983/store-closure-which-references-other-closure", "title": "Store closure which references other closure", "body": "<p>I am trying to make a system of callbacks in which any callback can by enclosed in another callback to modify it's behavior before or after calling it. This code works:</p>\n\n<pre><code>type Closure = Box&lt;Fn(&amp;i32) -&gt; i32&gt;;\n\nfn foo() {\n    let add_closure = |closure: Closure| {\n        let bar: Closure = Box::new(move |x| {\n            println!(\"{}\", x);\n            closure(x)\n        });\n    };\n\n    add_closure(Box::new(|&amp;x| x + 2));\n}\n\nfn main() {\n    foo()\n}\n</code></pre>\n\n<p>But as soon as I add lifetime bounds to the closure, it doesnt:</p>\n\n<pre><code>type Closure&lt;'a&gt; = Box&lt;Fn(&amp;'a i32) -&gt; i32&gt;;\n\nfn foo&lt;'a&gt;() {\n    let add_closure = |closure: Closure&lt;'a&gt;| {\n        let bar: Closure&lt;'a&gt; = Box::new(move |x| {\n            println!(\"{}\", x);\n            closure(x)\n        });\n    };\n\n    add_closure(Box::new(|&amp;x| x + 2));\n}\n\nfn main() {\n    foo()\n}\n</code></pre>\n\n<p>I get this error:</p>\n\n<pre><code>./vec_closure.rs:5:32: 8:11 error: the type `[closure@./vec_closure.rs:5:41: 8:10 closure:Box&lt;core::ops::Fn(&amp;'a i32) -&gt; i32 + 'static&gt;]` does not fulfill the required lifetime [E0477]\n./vec_closure.rs:5         let bar: Closure&lt;'a&gt; = Box::new(move |x| {\n./vec_closure.rs:6             println!(\"{}\", x);\n./vec_closure.rs:7             closure(x)\n./vec_closure.rs:8         });\nnote: type must outlive the static lifetime\nerror: aborting due to previous error\n</code></pre>\n\n<p>It seems like adding the lifetime bound is causing the <code>Box</code> to become <code>'static</code>, but I don't understand why this is or how to avoid it.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1446314403, "post_id": 33454681, "comment_id": 54696151, "body": "never mind me... The correct answer is it&#39;s a bug... I can&#39;t downvote my own post though ^^ and I cannot delete an answer that was accepted..."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1446315685, "post_id": 33454681, "comment_id": 54696613, "body": "I used the method suggested by <a href=\"http://meta.stackoverflow.com/a/266154/1103681\">meta.stackoverflow.com/a/266154/1103681</a> . But feel free to change the accepted answer and leave a comment. Then I&#39;ll delete my answer."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 3, "last_activity_date": 1446315606, "last_edit_date": 1495542730, "creation_date": 1446313774, "answer_id": 33454681, "question_id": 33454425, "link": "https://stackoverflow.com/questions/33454425/how-to-clone-a-function-pointer/33454681#33454681", "title": "How to clone a function pointer", "body": "<p>The problem is not that function pointers in general are not clonable, but that you actually have a function that is generic over the lifetime of the <code>&amp;str</code>. For example if you replace the <code>&amp;str</code> with <code>i32</code> your code will compile, because <code>i32</code> has no lifetimes. In your situation you need to make the lifetimes on the function pointer explicit:</p>\n\n<pre><code>type TypeFn&lt;'a&gt; = fn(s: &amp;'a str);\n</code></pre>\n\n<p>This obviously bubbles up to the struct, too:</p>\n\n<pre><code>#[derive(Clone)]\nstruct MyStruct&lt;'a&gt; {\n    field: TypeFn&lt;'a&gt;\n}\n</code></pre>\n\n<p>This prevents the following kind of code:</p>\n\n<pre><code>let my_var = MyStruct{field: my_fn};\nlet s = String::new();\n(my_var.field)(&amp;s);\n</code></pre>\n\n<hr>\n\n<p>Actually the problem is that it's a bug. As shown in <a href=\"https://stackoverflow.com/a/33454743/1103681\">@MattBrubeck 's answer</a> Function pointers implement <code>Copy</code>. So you can just implement <code>Clone</code> manually by using the function pointer's <code>Copy</code> impl:</p>\n\n<pre><code>impl Clone for MyStruct {\n    fn clone(&amp;self) -&gt; Self {\n        MyStruct {\n            field: self.field,\n        }\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 769, "user_id": 5433623, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-0jplvxnVu04/AAAAAAAAAAI/AAAAAAAAGvQ/VLbN9V7SMJ8/photo.jpg?sz=128", "display_name": "Matt Brubeck", "link": "https://stackoverflow.com/users/5433623/matt-brubeck"}, "is_accepted": false, "score": 8, "last_activity_date": 1446314171, "creation_date": 1446314171, "answer_id": 33454743, "question_id": 33454425, "link": "https://stackoverflow.com/questions/33454425/how-to-clone-a-function-pointer/33454743#33454743", "title": "How to clone a function pointer", "body": "<p>Function pointers with references in their types don't implement <code>Clone</code> because of <a href=\"https://github.com/rust-lang/rust/issues/24000\">issue #24000</a>.  This means that you can't <code>#[derive(Clone)]</code> for types containing them; you have to implement it manually.</p>\n\n<p>But function pointers <em>are</em> <code>Copy</code>, so you can <code>impl Copy</code> for your type and then use that to manually <code>impl Clone</code>:</p>\n\n<pre><code>impl Copy for MyStruct {}\n\nimpl Clone for MyStruct {\n    fn clone(&amp;self) -&gt; Self { *self }\n}\n</code></pre>\n\n<p><a href=\"http://is.gd/C2FwZO\">Playpen link</a>.</p>\n"}], "owner": {"reputation": 4863, "user_id": 2482582, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/yQkZE.jpg?s=128&g=1", "display_name": "Moebius", "link": "https://stackoverflow.com/users/2482582/moebius"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2101, "favorite_count": 0, "accepted_answer_id": 33454681, "answer_count": 2, "score": 7, "last_activity_date": 1446340462, "creation_date": 1446312313, "last_edit_date": 1446340462, "question_id": 33454425, "link": "https://stackoverflow.com/questions/33454425/how-to-clone-a-function-pointer", "title": "How to clone a function pointer", "body": "<p>I have a structure with a field which is a function pointer. I want to implement the <code>Clone</code> trait for that struct, but I can't because function pointers can't be cloned if they have at least one parameter:</p>\n\n<pre><code>fn my_fn(s: &amp;str) {\n    println!(\"in my_fn {}\", s);\n}\n\ntype TypeFn = fn(s: &amp;str);\n\n#[derive(Clone)]\nstruct MyStruct {\n    field: TypeFn\n}\n\nfn main() {\n    let my_var = MyStruct{field: my_fn};\n    let _ = my_var.clone();\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=49be325af14c6e3c071b&amp;version=stable\" rel=\"noreferrer\">Link to playground</a>.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 175871, "user_id": 454533, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/c7715e765817254e0534f89a4092c0aa?s=128&d=identicon&r=PG", "display_name": "Explosion Pills", "link": "https://stackoverflow.com/users/454533/explosion-pills"}, "edited": false, "score": 0, "creation_date": 1446245570, "post_id": 33445734, "comment_id": 54680279, "body": "I mistyped that; I have edited the question to move the <code>break;</code> where it is supposed to go. When I build this code, I get an error - not a warning (rust 1.4)"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 175871, "user_id": 454533, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/c7715e765817254e0534f89a4092c0aa?s=128&d=identicon&r=PG", "display_name": "Explosion Pills", "link": "https://stackoverflow.com/users/454533/explosion-pills"}, "edited": false, "score": 0, "creation_date": 1446246206, "post_id": 33445734, "comment_id": 54680474, "body": "Yes, you get an error because the compiler thinks there&#39;s a path that returns <code>()</code> when the <code>break</code> is present. Replace <code>break;</code> with something else (e.g. <code>let x = 0;</code>) and you&#39;ll see the warning I&#39;m talking about."}, {"owner": {"reputation": 175871, "user_id": 454533, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/c7715e765817254e0534f89a4092c0aa?s=128&d=identicon&r=PG", "display_name": "Explosion Pills", "link": "https://stackoverflow.com/users/454533/explosion-pills"}, "edited": false, "score": 0, "creation_date": 1446246709, "post_id": 33445734, "comment_id": 54680619, "body": "So returning <code>()</code> is an error vs. returning a value"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 175871, "user_id": 454533, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/c7715e765817254e0534f89a4092c0aa?s=128&d=identicon&r=PG", "display_name": "Explosion Pills", "link": "https://stackoverflow.com/users/454533/explosion-pills"}, "edited": false, "score": 0, "creation_date": 1446247155, "post_id": 33445734, "comment_id": 54680727, "body": "Correct. A loop expression normally evaluates to <code>()</code>, but the compiler ignores that when it determines that the loop can never end. Or something like that."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1446280107, "post_id": 33445734, "comment_id": 54686397, "body": "a loop without break returns <code>!</code>, meaning it diverges"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 4, "last_activity_date": 1446300182, "last_edit_date": 1446300182, "creation_date": 1446243706, "answer_id": 33445734, "question_id": 33445684, "link": "https://stackoverflow.com/questions/33445684/can-the-compiler-tell-when-a-break-is-never-reached/33445734#33445734", "title": "Can the compiler tell when a `break` is never reached", "body": "<p>A <code>loop</code> expression that doesn't contain a <code>break</code> expression evaluates to <code>!</code> (i.e. it diverges), so it is compatible with all types.</p>\n\n<pre><code>fn main() {\n    let _x: u32 = loop {}; // this compiles\n}\n</code></pre>\n\n<p>On the other hand, a <code>loop</code> with a <code>break</code> returns <code>()</code>, so it is only compatible with the <code>()</code> type.</p>\n\n<pre><code>fn main() {\n    let _x: u32 = loop { break; }; // mismatched types: expected `u32`,  found `()`\n}\n</code></pre>\n\n<p>In your <code>make_guess</code> function, the compiler adds an implicit <code>return</code> before the <code>loop</code> expression. <code>!</code> is compatible with <code>u32</code>, but <code>()</code> is not. (This implicit <code>return</code> seems to occur for all diverging expressions, even if they end with a <code>;</code>.) Adding a <code>break</code> statement in the loop changes the type of the <code>loop</code> expression. It does not matter that the <code>break</code> is unreachable.</p>\n\n<p><em>Heads up to @ker for noticing that the type of a <code>loop</code> changes based on the presence or absence of a <code>break</code> expression in its body.</em></p>\n"}, {"comments": [{"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 1, "creation_date": 1446299361, "post_id": 33451598, "comment_id": 54691281, "body": "The function as you&#39;ve written it will never return <code>None</code>, as the <code>break</code> is unreachable, because all branches of the <code>match</code> diverge."}, {"owner": {"reputation": 2231, "user_id": 4465497, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/vibwv.png?s=128&g=1", "display_name": "XAMPPRocky", "link": "https://stackoverflow.com/users/4465497/xampprocky"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1446320128, "post_id": 33451598, "comment_id": 54698046, "body": "@FrancisGagn&#233; The problem with the code above is not that that the break is unreachable. It&#39;s that all return points as far as the compiler is concerned is not complete. The compiler can&#39;t tell that the function ends at the match statement."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 1, "creation_date": 1446320439, "post_id": 33451598, "comment_id": 54698139, "body": "The compiler can absolutely tell that the function ends at the match statement. Compile your function (<a href=\"http://is.gd/qaEymM\" rel=\"nofollow noreferrer\">in a complete program</a>) and you&#39;ll see a warning because the <code>break</code> is unreachable. Therefore, the path that returns <code>None</code> is also unreachable. Sure, your code makes all types match, but in this specific function, it&#39;s not necessary because the <code>break</code> shouldn&#39;t be there in the first place."}], "tags": [], "owner": {"reputation": 2231, "user_id": 4465497, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/vibwv.png?s=128&g=1", "display_name": "XAMPPRocky", "link": "https://stackoverflow.com/users/4465497/xampprocky"}, "is_accepted": false, "score": 1, "last_activity_date": 1446294589, "creation_date": 1446294589, "answer_id": 33451598, "question_id": 33445684, "link": "https://stackoverflow.com/questions/33445684/can-the-compiler-tell-when-a-break-is-never-reached/33451598#33451598", "title": "Can the compiler tell when a `break` is never reached", "body": "<p>The problem is that your code might not return a <code>u32</code>. The best way to keep your code idiomatic to rust would be to make your return type an <code>Option&lt;T&gt;</code> Which is an enum with two members <code>Some(T)</code>, and <code>None</code> which means that the function may, or may not return a value.</p>\n\n<pre><code>fn make_guess() -&gt; Option&lt;u32&gt; {\n    loop {\n        let mut guess = String::new();\n        io::stdin().read_line(&amp;mut guess)\n            .ok()\n            .expect(\"Failed to read line\");\n\n        match guess.trim().parse() {\n            Ok(num) =&gt; return Some(num),\n            Err(_) =&gt; {\n                println!(\"Please input a number!\");\n                continue;\n            }\n        };\n        break;\n    }\n    None\n}\n</code></pre>\n"}], "owner": {"reputation": 175871, "user_id": 454533, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/c7715e765817254e0534f89a4092c0aa?s=128&d=identicon&r=PG", "display_name": "Explosion Pills", "link": "https://stackoverflow.com/users/454533/explosion-pills"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 113, "favorite_count": 0, "accepted_answer_id": 33445734, "answer_count": 2, "score": 4, "last_activity_date": 1446300182, "creation_date": 1446243381, "last_edit_date": 1446245428, "question_id": 33445684, "link": "https://stackoverflow.com/questions/33445684/can-the-compiler-tell-when-a-break-is-never-reached", "title": "Can the compiler tell when a `break` is never reached", "body": "<p>I have this code:</p>\n\n<pre><code>fn make_guess() -&gt; u32 {\n    loop {\n        let mut guess = String::new();\n        io::stdin().read_line(&amp;mut guess)\n            .ok()\n            .expect(\"Failed to read line\");\n\n        match guess.trim().parse() {\n            Ok(num) =&gt; return num,\n            Err(_) =&gt; {\n                println!(\"Please input a number!\");\n                continue;\n            }\n        };\n        break;\n    }\n}\n</code></pre>\n\n<p>When I run this code, the compiler complains about: </p>\n\n<pre><code>expected `u32`,\n  found `()`\n</code></pre>\n\n<p>Seemingly the <code>break;</code> results in this returning a void value. However, there is no way for the <code>break;</code> to be reached because of the <code>return</code> and <code>continue</code>.</p>\n\n<p>In fact, if I remove the <code>break;</code> this works fine.</p>\n\n<p>Is this a bug in the compiler or intended for some reason?</p>\n"}, {"tags": ["string", "struct", "rust", "string-concatenation"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1446236492, "post_id": 33444218, "comment_id": 54676765, "body": "Duplicate of <a href=\"http://stackoverflow.com/questions/30154541/how-do-i-concatenate-strings\" title=\"how do i concatenate strings\">stackoverflow.com/questions/30154541/&hellip;</a> or <a href=\"http://stackoverflow.com/questions/31331308/what-is-the-standard-way-to-concatenate-strings\" title=\"what is the standard way to concatenate strings\">stackoverflow.com/questions/31331308/&hellip;</a>? If you disagree, you should <a href=\"https://stackoverflow.com/posts/33444218/edit\">edit</a> your question to clarify why it is not a duplicate."}, {"owner": {"reputation": 1204, "user_id": 3241447, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/unNbh.jpg?s=128&g=1", "display_name": "Haru Atari", "link": "https://stackoverflow.com/users/3241447/haru-atari"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1446277504, "post_id": 33444218, "comment_id": 54685964, "body": "@Shepmaster Yes you are right. This is similar questions. But your questions ask about function and strings. I asked about method and string fields. I also had problems with lifetime and i try to solve it by using <code>&#39;a</code>. @llogiq shown me how concatenate string fields without it."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1446265602, "post_id": 33445446, "comment_id": 54683979, "body": "Why do you believe the question isn&#39;t a duplicate of one of the possible ones in the comment above?"}, {"owner": {"reputation": 1204, "user_id": 3241447, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/unNbh.jpg?s=128&g=1", "display_name": "Haru Atari", "link": "https://stackoverflow.com/users/3241447/haru-atari"}, "edited": false, "score": 0, "creation_date": 1446277621, "post_id": 33445446, "comment_id": 54685983, "body": "@llogiq Now i understand. Thank you."}, {"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1446288489, "post_id": 33445446, "comment_id": 54688308, "body": "@Shepmaster, I must&#39;ve overlooked them."}], "tags": [], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "is_accepted": true, "score": 4, "last_activity_date": 1446241881, "creation_date": 1446241881, "answer_id": 33445446, "question_id": 33444218, "link": "https://stackoverflow.com/questions/33444218/how-can-i-concatenate-two-string-fields-with-another-string/33445446#33445446", "title": "How can I concatenate two string fields with another string?", "body": "<p>You try to concatenate two pointers to strings, but this is not how string concatenation works in Rust. The way it works is that it <em>consumes</em> the first string (you have to pass that one in by value) and returns the consumed string extended with the contents of the second string slice.</p>\n\n<p>Now the easiest way to do what you want is:</p>\n\n<pre><code>fn get_data(&amp;self, word: &amp;str) -&gt; String {\n    format!(\"{}{}{}\", &amp;self.field_1, &amp;self.field_2, word)\n}\n</code></pre>\n\n<p>Note that will also create a new owned String, because it is impossible to return a String reference of a String from the scope that created the String \u2013 it will be destroyed at the end of the scope, unless it is returned by value. </p>\n"}], "owner": {"reputation": 1204, "user_id": 3241447, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/unNbh.jpg?s=128&g=1", "display_name": "Haru Atari", "link": "https://stackoverflow.com/users/3241447/haru-atari"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 223, "favorite_count": 0, "accepted_answer_id": 33445446, "answer_count": 1, "score": 1, "last_activity_date": 1446277843, "creation_date": 1446236100, "last_edit_date": 1446277843, "question_id": 33444218, "link": "https://stackoverflow.com/questions/33444218/how-can-i-concatenate-two-string-fields-with-another-string", "title": "How can I concatenate two string fields with another string?", "body": "<p>I can't understand how Rust works with strings. I created a simple struct with two string fields and one method. This method concatenates both fields and the string from arguments. My code:</p>\n\n<pre><code>fn main() {\n    let obj = MyStruct {\n        field_1: \"first\".to_string(),\n        field_2: \"second\".to_string(),\n    };\n\n    let data = obj.get_data(\"myWord\");\n    println!(\"{}\",data);\n}\n\nstruct MyStruct {\n    field_1: String,\n    field_2: String,\n}\n\nimpl MyStruct {\n    fn get_data&lt;'a&gt;(&amp;'a self, word: &amp;'a str) -&gt; &amp;'a str {\n        let sx = &amp;self.field_1 + &amp;self.field_2 + word;\n        &amp;* sx\n    }\n}\n</code></pre>\n\n<p>I get an error when run it:</p>\n\n<pre><code>src\\main.rs:18:18: 18:31 error: binary operation `+` cannot be applied to type `&amp;collections::string::String` [E0369]\nsrc\\main.rs:18         let sx = &amp;self.field_1 + &amp;self.field_2 + word;\n                                ^~~~~~~~~~~~~\nsrc\\main.rs:19:10: 19:14 error: the type of this value must be known in this context\nsrc\\main.rs:19         &amp;* sx\n                        ^~~~\nerror: aborting due to 2 previous errors\nCould not compile `test`.\n\nTo learn more, run the command again with --verbose.\n</code></pre>\n\n<p>I read <a href=\"https://doc.rust-lang.org/stable/book/strings.html#concatenation\" rel=\"nofollow\">this chapter</a> from the Rust book. I try to concatenate strings like in code example, but the compiler says that it's not a string.</p>\n\n<p>I searched online, but there were no examples for <strong>Rust 1.3</strong>.</p>\n"}, {"tags": ["parsing", "web", "rust"], "comments": [{"owner": {"reputation": 3825, "user_id": 768323, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/b6242b58eadb9496f67ef57398d1c506?s=128&d=identicon&r=PG", "display_name": "Paul Nikonowicz", "link": "https://stackoverflow.com/users/768323/paul-nikonowicz"}, "edited": false, "score": 1, "creation_date": 1446234259, "post_id": 33443696, "comment_id": 54675765, "body": "a quick google search revealed this: <a href=\"https://github.com/chris-morgan/rust-http\" rel=\"nofollow noreferrer\">github.com/chris-morgan/rust-http</a>"}, {"owner": {"reputation": 221, "user_id": 4481876, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/dedc3f9101eaa933cec2ab03a546d0ed?s=128&d=identicon&r=PG&f=1", "display_name": "estw272", "link": "https://stackoverflow.com/users/4481876/estw272"}, "reply_to_user": {"reputation": 3825, "user_id": 768323, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/b6242b58eadb9496f67ef57398d1c506?s=128&d=identicon&r=PG", "display_name": "Paul Nikonowicz", "link": "https://stackoverflow.com/users/768323/paul-nikonowicz"}, "edited": false, "score": 0, "creation_date": 1446234661, "post_id": 33443696, "comment_id": 54675931, "body": "I saw that, not sure how it&#39;s supposed to help me when it says that I shouldn&#39;t use that lib. And hyper, to which it links, like i wrote in OP, I cant figure out."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 1, "creation_date": 1446249174, "post_id": 33443696, "comment_id": 54681206, "body": "<code>rust-http</code> is very old and not really supported. <code>hyper</code> should indeed be used instead."}], "answers": [{"comments": [{"owner": {"reputation": 4096, "user_id": 2056979, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/pg0MQ.jpg?s=128&g=1", "display_name": "Keatinge", "link": "https://stackoverflow.com/users/2056979/keatinge"}, "edited": false, "score": 0, "creation_date": 1515361336, "post_id": 33445228, "comment_id": 83261535, "body": "Is this answer still valid or is it outdated? I&#39;m getting <code>no method named read_to_string found for type hyper::Response</code>"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 4096, "user_id": 2056979, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/pg0MQ.jpg?s=128&g=1", "display_name": "Keatinge", "link": "https://stackoverflow.com/users/2056979/keatinge"}, "edited": false, "score": 0, "creation_date": 1515362384, "post_id": 33445228, "comment_id": 83261823, "body": "@Keatinge I added a note to the answer. Sadly, it is outdated. Now (0.11) it looks like you have to call <code>body()</code> which returns something implementing the <code>Stream</code> trait. But I haven&#39;t used hyper for a while; this is only a guess."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 5, "last_activity_date": 1515362316, "last_edit_date": 1515362316, "creation_date": 1446240714, "answer_id": 33445228, "question_id": 33443696, "link": "https://stackoverflow.com/questions/33443696/download-and-get-html-code-from-a-website/33445228#33445228", "title": "Download and get HTML code from a website", "body": "<p><strong><em>Note</em>: this answer is outdated!</strong></p>\n\n<hr>\n\n<p>It's a bit hidden: The <a href=\"http://hyper.rs/hyper/hyper/client/response/struct.Response.html\" rel=\"nofollow noreferrer\"><code>Response</code></a> type implements the trait <code>Read</code>. One method of <code>Read</code> is <code>read_to_string</code> which reads everything into the a <code>String</code>. That's a simple way you can get the body. </p>\n\n<pre><code>extern crate hyper;\n\nuse hyper::Client;\nuse std::io::Read;\n\nfn main() {\n    let client = Client::new();\n    let mut res = client.get(\"http://www.bloomberg.com/\")\n        .send()\n        .unwrap();\n    let mut body = String::new();\n    res.read_to_string(&amp;mut body).expect(\"failed to read into string\");\n    println!(\"{}\", body);\n}\n</code></pre>\n\n<p>Currently Rustdoc (the HTML documentation of Rust) is a little bit misleading because Rust beginners think that trait implementations don't add any important functionality. This is not true, so better look out for it. However, the hyper documentation could be better...</p>\n"}], "owner": {"reputation": 221, "user_id": 4481876, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/dedc3f9101eaa933cec2ab03a546d0ed?s=128&d=identicon&r=PG&f=1", "display_name": "estw272", "link": "https://stackoverflow.com/users/4481876/estw272"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 878, "favorite_count": 0, "accepted_answer_id": 33445228, "answer_count": 1, "score": 0, "last_activity_date": 1515362316, "creation_date": 1446233945, "last_edit_date": 1446244482, "question_id": 33443696, "link": "https://stackoverflow.com/questions/33443696/download-and-get-html-code-from-a-website", "title": "Download and get HTML code from a website", "body": "<p>I need to download HTML code from some web page. What is the best way to approach this task? As I understand there are very few working web frameworks for Rust right now and hyper is the one most people use? But after searching it's documentation I couldn't find a way. The closest I got is this</p>\n\n<pre><code>extern crate hyper;\n\nuse hyper::Client;\n\nfn main() {\n    let client = Client::new();\n    let res = client.get(\"http://www.bloomberg.com/\")\n        .send()\n        .unwrap();\n\n    println!(\"{:?}\", res);\n}\n</code></pre>\n\n<p>But it returns <code>Response</code>, which doesn't seem to contain any code from HTML body.</p>\n"}, {"tags": ["multithreading", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1446230298, "post_id": 33442053, "comment_id": 54673747, "body": "Have you read other questions with the same (or similar) error? A quick search found <a href=\"http://stackoverflow.com/questions/28654978/lifetime-troubles-sharing-references-between-threads\">this one</a> and <a href=\"http://stackoverflow.com/questions/25286096/passing-a-vecstruct-into-a-new-task\">this one</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1446230984, "post_id": 33442053, "comment_id": 54674115, "body": "Also, please take the time to create an <a href=\"/help/mcve\">MCVE</a> of your problem. This makes it easier for you to understand where the problem is, and makes it easier for people to answer your question. In this case, <a href=\"http://is.gd/E7ZYaq\" rel=\"nofollow noreferrer\">this version</a> is smaller."}, {"owner": {"reputation": 4863, "user_id": 2482582, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/yQkZE.jpg?s=128&g=1", "display_name": "Moebius", "link": "https://stackoverflow.com/users/2482582/moebius"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1446311493, "post_id": 33442053, "comment_id": 54695184, "body": "@Shepmaster none of the two links solved my problem."}], "answers": [{"tags": [], "owner": {"reputation": 4863, "user_id": 2482582, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/yQkZE.jpg?s=128&g=1", "display_name": "Moebius", "link": "https://stackoverflow.com/users/2482582/moebius"}, "is_accepted": true, "score": 8, "last_activity_date": 1446340415, "last_edit_date": 1446340415, "creation_date": 1446316971, "answer_id": 33455247, "question_id": 33442053, "link": "https://stackoverflow.com/questions/33442053/the-type-does-not-fulfill-the-required-lifetime-when-using-a-method-in-a-threa/33455247#33455247", "title": "&quot;the type does not fulfill the required lifetime&quot; when using a method in a thread", "body": "<p>The problem is that every variable moved to the thread must have the lifetime <code>'static</code>. i.e. threads can't reference values which are not owned by the thread. </p>\n\n<p>In this case the problem is that <code>self</code> is a reference to an instance of <code>MyStruct</code>.</p>\n\n<p>To solve it, remove every reference and clone the structure before sending it to the thread.</p>\n\n<pre><code>use std::thread;\nuse std::sync::mpsc;\n\n#[derive(Clone)]\nstruct MyStruct {\n    field: i32\n}\n\nimpl MyStruct {\n    fn my_fn(&amp;self, adder1: i32, adder2: i32) -&gt; i32 {\n        self.field + adder1 + adder2\n    }\n\n    fn threade_test(&amp;self) {\n        let (tx, rx) = mpsc::channel();\n        let adder = 1;\n        let lst_adder = vec!(2, 2, 2);\n\n        for a in lst_adder {\n            let tx = tx.clone();\n\n            let self_clone = self.clone();\n            thread::spawn(move || {\n                let _ = tx.send(self_clone.my_fn(adder, a));\n            });\n        }\n\n        println!(\"{}\", rx.recv().unwrap());\n    }\n}\n\nfn main() {\n    let ms = MyStruct{field: 42};\n    ms.threade_test();\n}\n</code></pre>\n"}], "owner": {"reputation": 4863, "user_id": 2482582, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/yQkZE.jpg?s=128&g=1", "display_name": "Moebius", "link": "https://stackoverflow.com/users/2482582/moebius"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2557, "favorite_count": 0, "accepted_answer_id": 33455247, "answer_count": 1, "score": 5, "last_activity_date": 1446340415, "creation_date": 1446227509, "last_edit_date": 1446230203, "question_id": 33442053, "link": "https://stackoverflow.com/questions/33442053/the-type-does-not-fulfill-the-required-lifetime-when-using-a-method-in-a-threa", "title": "&quot;the type does not fulfill the required lifetime&quot; when using a method in a thread", "body": "<p>I am trying to use a method in a thread in Rust, but I get the following error message </p>\n\n<blockquote>\n  <p>:21:10: 21:23 error: the type <code>[closure@&lt;anon&gt;:21:24: 23:14\n  tx:std::sync::mpsc::Sender&lt;i32&gt;, self:&amp;MyStruct, adder:i32, a:i32]</code>\n  does not fulfill the required lifetime :21<br>\n  thread::spawn(move || {\n                        ^~~~~~~~~~~~~ :18:9: 24:10 note: in this expansion of for loop expansion note: type must outlive the static\n  lifetime error: aborting due to previous error</p>\n</blockquote>\n\n<p>This is the example code:</p>\n\n<pre><code>use std::thread;\nuse std::sync::mpsc;\n\nstruct MyStruct {\n    field: i32\n}\n\nimpl MyStruct {\n    fn my_fn(&amp;self, adder1: i32, adder2: i32) -&gt; i32 {\n        self.field + adder1 + adder2\n    }\n\n    fn threade_test(&amp;self) {\n        let (tx, rx) = mpsc::channel();\n        let adder = 1;\n        let lst_adder = vec!(2, 2, 2);\n\n        for a in lst_adder {\n            let tx = tx.clone();\n\n            thread::spawn(move || {\n                let _ = tx.send(self.my_fn(adder, a));\n            });\n        }\n\n        println!(\"{}\", rx.recv().unwrap());\n    }\n}\n\nfn main() {\n    let ms = MyStruct{field: 42};\n    ms.threade_test();\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=4aa91b2de99dca94d52a&amp;version=stable\" rel=\"noreferrer\">Test it on the Rust Playground</a>.</p>\n"}, {"tags": ["rust", "type-mismatch"], "answers": [{"comments": [{"owner": {"reputation": 509, "user_id": 3419211, "user_type": "registered", "accept_rate": 64, "profile_image": "https://graph.facebook.com/100000859618233/picture?type=large", "display_name": "user3419211", "link": "https://stackoverflow.com/users/3419211/user3419211"}, "edited": false, "score": 0, "creation_date": 1446220243, "post_id": 33439717, "comment_id": 54667893, "body": "That would have saved me a lot of typing.. anyway I do understand that the two are different types, but I don&#39;t understand how to copy its values"}, {"owner": {"reputation": 509, "user_id": 3419211, "user_type": "registered", "accept_rate": 64, "profile_image": "https://graph.facebook.com/100000859618233/picture?type=large", "display_name": "user3419211", "link": "https://stackoverflow.com/users/3419211/user3419211"}, "edited": false, "score": 0, "creation_date": 1446227089, "post_id": 33439717, "comment_id": 54672093, "body": "So if I understand you right, it is better to use a reference slice of a vector than a reference to vector. Is making a slice of a vector not an extra calculation? if i&#39;m right using a reference vector vs reference slice take the same amount of memory"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1446227664, "post_id": 33439717, "comment_id": 54672394, "body": "Creating a slice from a reference to vector is very cheap to do. The slice is a direct pointer to the data, the <code>&amp;Vec</code> has an extra indirection for the function accepting it."}, {"owner": {"reputation": 509, "user_id": 3419211, "user_type": "registered", "accept_rate": 64, "profile_image": "https://graph.facebook.com/100000859618233/picture?type=large", "display_name": "user3419211", "link": "https://stackoverflow.com/users/3419211/user3419211"}, "edited": false, "score": 0, "creation_date": 1446228136, "post_id": 33439717, "comment_id": 54672662, "body": "Thank you both, your responses are very useful"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1446228853, "post_id": 33439717, "comment_id": 54673012, "body": "Actually, a <code>&amp;[T]</code> <a href=\"http://is.gd/5CnV4X\" rel=\"nofollow noreferrer\">takes more space</a> than a <code>&amp;Vec&lt;T&gt;</code>. Technically, I do suppose it&#39;s a <i>tiny</i> bit more of a calculation, but it&#39;s more accepting of various types (<code>Vec</code> and arrays, to name two)."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1446219496, "creation_date": 1446219496, "answer_id": 33439717, "question_id": 33439574, "link": "https://stackoverflow.com/questions/33439574/error-mismatched-types-expected-collectionsvecveci32-found-collectio/33439717#33439717", "title": "Error mismatched types: expected &#39;collections::vec::Vec&lt;i32&gt;&#39;, found &#39;&amp;collections::vec::Vec&lt;i32&gt;&#39;", "body": "<p>Your question can be simplified to this (please review and follow how to create an <a href=\"/help/mcve\">MCVE</a> when asking questions here):</p>\n\n<pre><code>fn selection_sort(vector: &amp;Vec&lt;i32&gt;) -&gt; Vec&lt;i32&gt; {\n    vector\n}\n</code></pre>\n\n<p>You are accepting a reference to a type and trying to return it as not-a-reference. That simply is a straight-forward type error, the same as this:</p>\n\n<pre><code>fn something(value: &amp;u8) -&gt; u8 {\n    value\n}\n</code></pre>\n\n<p><code>T</code> and <code>&amp;T</code> are different types.</p>\n\n<p>Ultimately, your code doesn't make sense right now. To make a <code>&amp;Vec&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>, you'd need to clone it:</p>\n\n<pre><code>fn selection_sort(vector: &amp;Vec&lt;i32&gt;) -&gt; Vec&lt;i32&gt; {\n    let mut vector = vector.clone();\n    let mut start = 0;\n    while start != vector.len() {\n        for index in (start .. vector.len()) {\n            match vector[index] &lt; vector[start] {\n                true  =&gt; vector.swap(index, start),\n                false =&gt; println!(\"false\"), // do nothing\n            }\n        }\n        start += 1;\n    }\n    vector\n}\n</code></pre>\n\n<p>But 99.99% of the time, it doesn't make sense to accept a <code>&amp;Vec&lt;T&gt;</code>; accept a <code>&amp;[T]</code> instead:</p>\n\n<pre><code>fn selection_sort(vector: &amp;[i32]) -&gt; Vec&lt;i32&gt; {\n    let mut vector = vector.to_vec();\n    // ...\n}\n</code></pre>\n"}], "owner": {"reputation": 509, "user_id": 3419211, "user_type": "registered", "accept_rate": 64, "profile_image": "https://graph.facebook.com/100000859618233/picture?type=large", "display_name": "user3419211", "link": "https://stackoverflow.com/users/3419211/user3419211"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3061, "favorite_count": 1, "accepted_answer_id": 33439717, "answer_count": 1, "score": 1, "last_activity_date": 1446219496, "creation_date": 1446219033, "last_edit_date": 1446219308, "question_id": 33439574, "link": "https://stackoverflow.com/questions/33439574/error-mismatched-types-expected-collectionsvecveci32-found-collectio", "title": "Error mismatched types: expected &#39;collections::vec::Vec&lt;i32&gt;&#39;, found &#39;&amp;collections::vec::Vec&lt;i32&gt;&#39;", "body": "<p>I'm trying to use <code>selection_sort</code> to create a sorted vector while keeping the original unsorted vector:</p>\n\n<pre><code>fn main() {\n    let vector_1: Vec&lt;i32&gt; = vec![15, 23, 4, 2, 78, 0];\n    let sorted_vector = selection_sort(&amp;vector_1);\n    println!(\"{:?} is unsorted, \\n{:?} is sorted.\", &amp;vector_1, &amp;sorted_vector);\n}\n\nfn selection_sort(vector_1: &amp;Vec&lt;i32&gt;) -&gt; Vec&lt;i32&gt; {\n    let mut vector = vector_1;\n    let start = 0;\n    while start != vector.len() {\n        for index in (start .. vector.len()) {\n            match vector[index] &lt; vector[start] {\n                true  =&gt; vector.swap(index, start),\n                false =&gt; println!(\"false\"), // do nothing\n            }\n        }\n        start += 1;\n    }\n    vector\n}\n</code></pre>\n\n<p>Error:</p>\n\n<pre><code>   Compiling selection_sort v0.1.0 (file:///home/ranj/Desktop/Rust/algorithms/sorting/selection_sort)\nsrc/main.rs:21:5: 21:11 error: mismatched types:\n expected `collections::vec::Vec&lt;i32&gt;`,\n    found `&amp;collections::vec::Vec&lt;i32&gt;`\n(expected struct `collections::vec::Vec`,\nfound &amp;-ptr) [E0308]\nsrc/main.rs:21     vector\n                   ^~~~~~\nsrc/main.rs:21:5: 21:11 help: run `rustc --explain E0308` to see a detailed explanation\nerror: aborting due to previous error\nCould not compile `selection_sort`.\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 6, "last_activity_date": 1446206501, "creation_date": 1446206501, "answer_id": 33435536, "question_id": 33435425, "link": "https://stackoverflow.com/questions/33435425/strange-error-about-expecting-a-type/33435536#33435536", "title": "Strange error about expecting a type", "body": "<p>Variable assignment in rust is done with an equals sign, not a colon. So your statement should be</p>\n\n<pre><code>let c = Mep::crossover(a, b, 3, |x| rng.next_u32() % x);\n</code></pre>\n\n<p>If you want to also specify a type, you need both the colon with a following type AND an equals sign with the expression afterwards:</p>\n\n<pre><code>let c: Mep&lt;Ins&gt; = Mep::crossover(a, b, 3, |x| rng.next_u32() % x);\n</code></pre>\n"}], "owner": {"reputation": 105, "user_id": 4147262, "user_type": "registered", "accept_rate": 83, "profile_image": "https://lh3.googleusercontent.com/-Lu5bthyKl5Y/AAAAAAAAAAI/AAAAAAAAABE/gQdIKjHlGz8/photo.jpg?sz=128", "display_name": "vadix", "link": "https://stackoverflow.com/users/4147262/vadix"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 171, "favorite_count": 0, "accepted_answer_id": 33435536, "answer_count": 1, "score": 1, "last_activity_date": 1446206501, "creation_date": 1446206181, "question_id": 33435425, "link": "https://stackoverflow.com/questions/33435425/strange-error-about-expecting-a-type", "title": "Strange error about expecting a type", "body": "<p>I have this precise object and function definition:</p>\n\n<pre><code>pub struct Mep&lt;Ins&gt; {\n    instructions: Vec&lt;Ins&gt;,\n}\nimpl&lt;Ins&gt; Mep&lt;Ins&gt; {\n    pub fn crossover&lt;F&gt;(parent0: &amp;Mep&lt;Ins&gt;, parent1: &amp;Mep&lt;Ins&gt;, mut random_point_generator: F) -&gt; Mep&lt;Ins&gt;\n        where F: FnMut(usize) -&gt; usize, Ins: Clone {/*Body omitted*/}\n}\n</code></pre>\n\n<p>The function compiles fine, but I receive the same error even for an empty function definition when calling it:</p>\n\n<pre><code>tests/mep.rs:14:33: 14:34 error: expected type, found `|`\ntests/mep.rs:14     let c: Mep::crossover(a, b, |x| rng.next_u32() % x);\n</code></pre>\n\n<p>I also tried different parameters:</p>\n\n<pre><code>pub fn crossover&lt;F&gt;(parent0: &amp;Mep&lt;Ins&gt;, parent1: &amp;Mep&lt;Ins&gt;, points: usize, mut random_point_generator: F) -&gt; Mep&lt;Ins&gt;\n    where F: FnMut(usize) -&gt; usize, Ins: Clone {}\n</code></pre>\n\n<p>It results in the same error:</p>\n\n<pre><code>tests/mep.rs:14:33: 14:34 error: expected type, found `3`\ntests/mep.rs:14     let c: Mep::crossover(a, b, 3, |x| rng.next_u32() % x);\n</code></pre>\n\n<p>I am fairly new to rust and everywhere I look online discusses issues people have with obvious generics problems, but they aren't shared with my case as far as I can tell. What do I need to do to call this function?</p>\n"}, {"tags": ["hashmap", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1446174096, "post_id": 33427944, "comment_id": 54644691, "body": "Have you seen the <a href=\"http://doc.rust-lang.org/std/collections/hash_map/enum.Entry.html\" rel=\"nofollow noreferrer\">entry api</a>? Something like <code>map.entry(&amp;key).or_insert(default)</code>."}, {"owner": {"reputation": 31, "user_id": 5505519, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2abfe8e832a243eae360d2d32f84fd48?s=128&d=identicon&r=PG&f=1", "display_name": "lucidstudios", "link": "https://stackoverflow.com/users/5505519/lucidstudios"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1446175690, "post_id": 33427944, "comment_id": 54645122, "body": "no, this looks much better! would you happen to know how to create a mutable reference to a new Entry instance with lifetime &#39;a?"}, {"owner": {"reputation": 31, "user_id": 5505519, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2abfe8e832a243eae360d2d32f84fd48?s=128&d=identicon&r=PG&f=1", "display_name": "lucidstudios", "link": "https://stackoverflow.com/users/5505519/lucidstudios"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1446175711, "post_id": 33427944, "comment_id": 54645126, "body": "I&#39;m really new at this and the lifetimes are confusing."}], "answers": [{"comments": [{"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 1, "creation_date": 1446183094, "post_id": 33428547, "comment_id": 54647073, "body": "You should be able to get away with <code>HashMap&lt;KeyType, Entry&gt;</code> unless you truly need the <code>Entry</code>&#39;s to not move in memory. In any case, there&#39;s no way to create a <code>&amp;mut</code> reference to a local variable and store it like that: the local variable will be destroyed as soon as the function returns and the reference will be left dangling, pointing at invalid memory."}], "tags": [], "owner": {"reputation": 31, "user_id": 5505519, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2abfe8e832a243eae360d2d32f84fd48?s=128&d=identicon&r=PG&f=1", "display_name": "lucidstudios", "link": "https://stackoverflow.com/users/5505519/lucidstudios"}, "is_accepted": false, "score": 1, "last_activity_date": 1446178472, "creation_date": 1446178472, "answer_id": 33428547, "question_id": 33427944, "link": "https://stackoverflow.com/questions/33427944/how-to-implement-a-find-or-create-method-for-a-struct-containing-a-hashmap-with/33428547#33428547", "title": "How to implement a find_or_create method for a struct containing a hashmap with mutable references", "body": "<p>I got around this by changing the type of the HashMap to <code>HashMap&lt;KeyType,Box&lt;Entry&gt;&gt;</code>, and implemented the method as follows:</p>\n\n<pre><code>pub fn get_or_create_entry(&amp; mut self, key: LockKey) -&gt; &amp;mut LockEntry {                                                                              \n  let e = Box::new(LockEntry{key: key, status: LockStatus::Unlocked});\n  self.lock_table.entry(key).or_insert(e)\n}\n</code></pre>\n\n<p>Is there a better way?</p>\n"}], "owner": {"reputation": 31, "user_id": 5505519, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2abfe8e832a243eae360d2d32f84fd48?s=128&d=identicon&r=PG&f=1", "display_name": "lucidstudios", "link": "https://stackoverflow.com/users/5505519/lucidstudios"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 67, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1446178472, "creation_date": 1446173862, "question_id": 33427944, "link": "https://stackoverflow.com/questions/33427944/how-to-implement-a-find-or-create-method-for-a-struct-containing-a-hashmap-with", "title": "How to implement a find_or_create method for a struct containing a hashmap with mutable references", "body": "<p>I'm having problems with a struct containing a hashmap in rust.</p>\n\n<p>Lets say I have the following types:</p>\n\n<pre><code>pub type KeyType i32;\npub enum StatusType { Locked, Unlocked } \n\npub struct Entry {\n  key: KeyType,\n  status: StatusType\n}\n\npub struct Manager&lt;'a&gt; {\n    map: HashMap&lt;KeyType, &amp;'a mut Entry&gt;\n}    \n</code></pre>\n\n<p>I want to define a method on Manager that takes a key and returns either a unlocked entry if not found, or the existing entry if it exists. Here is the pseudo code:</p>\n\n<pre><code>impl&lt;'a&gt; Manager&lt;'a&gt; {\n    pub fn find_or_create_entry(&amp;'a mut self, key: KeyType) -&gt; &amp;'a mut Entry {\n    match self.map.get(&amp;key) {\n      Some(e) =&gt; e,\n      None =&gt; {\n        // create new entry, add to map, and return mutable ref\n      }\n    }\n  }\n}\n</code></pre>\n\n<p>I haven't been able to figure out how this works in Rust. Any pointers?</p>\n"}, {"tags": ["unit-testing", "rust"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 10, "last_activity_date": 1446175029, "last_edit_date": 1446175029, "creation_date": 1446168171, "answer_id": 33427463, "question_id": 33426571, "link": "https://stackoverflow.com/questions/33426571/creating-a-read-stream-over-a-string/33427463#33427463", "title": "Creating a read stream over a string", "body": "<p>The documentation for each trait lists the available implementations. <a href=\"http://doc.rust-lang.org/stable/std/io/trait.BufRead.html#implementors\" rel=\"noreferrer\">Here's the documentation page for <code>BufRead</code>.</a> We can see that <code>&amp;'a [u8]</code> (a slice of bytes) implements <code>BufRead</code>. We can obtain a slice of bytes from a string and pass a mutable reference to that slice to <code>read_number_from_stream</code>:</p>\n\n<pre><code>use std::io;\n\nfn read_number_from_stream(input: &amp;mut io::BufRead) -&gt; io::Result&lt;u32&gt; {\n    // code that does something useful here\n    Ok(0)\n}\n\nfn read_from_string(s: &amp;str) -&gt; &amp;[u8] {\n    s.as_bytes()\n}\n\nfn main() {\n    let mut test_input = read_from_string(\"0\\n\");\n    read_number_from_stream(&amp;mut test_input);\n}\n</code></pre>\n\n<p>If the buffer is not expected to contain UTF-8, or you just care about a particular ASCII-compatible subset of characters, you may want to define the test input as a byte string, rather than as a normal string. A byte string is written like a normal string, prefixed with <code>b</code>, e.g. <code>b\"0\\n\"</code>. The type of a byte string is <code>&amp;[u8; N]</code>, where <code>N</code> is the length of the string. Since that type doesn't implement <code>BufRead</code>, we need to cast it to <code>&amp;[u8]</code>.</p>\n\n<pre><code>fn main() {\n    let mut test_input = b\"0\\n\" as &amp;[u8];\n    read_number_from_stream(&amp;mut test_input);\n}\n</code></pre>\n"}], "owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3043, "favorite_count": 1, "accepted_answer_id": 33427463, "answer_count": 1, "score": 9, "last_activity_date": 1446175029, "creation_date": 1446162123, "question_id": 33426571, "link": "https://stackoverflow.com/questions/33426571/creating-a-read-stream-over-a-string", "title": "Creating a read stream over a string", "body": "<p>I have a function that takes an input stream, processes its data, and then returns something, basically a more complicated version of this:</p>\n\n<pre><code>fn read_number_from_stream(input: &amp;mut io::BufRead) -&gt; io::Result&lt;u32&gt; {\n  // code that does something useful here\n  Ok(0)\n}\n</code></pre>\n\n<p>Now I want to write a test for this function.</p>\n\n<pre><code>#[test]\nfn input_with_zero_returns_zero() {\n  let test_input = read_from_string(\"0\\n\");\n  assert_eq!(Ok(0), read_number_from_stream(test_input));\n}\n</code></pre>\n\n<p>How do I implement <code>read_from_string</code>? Older versions of Rust apparently provided <code>std::io::mem::MemReader</code>, but the entire <code>std::io::mem</code> module seems to be gone in more recent versions of Rust (I'm using the unstable 1.5 branch).</p>\n"}, {"tags": ["iterator", "rust"], "answers": [{"comments": [{"owner": {"reputation": 235, "user_id": 4017439, "user_type": "registered", "accept_rate": 88, "profile_image": "https://lh3.googleusercontent.com/-v6-6SQOeGVI/AAAAAAAAAAI/AAAAAAAAABg/Scha2K5nzuM/photo.jpg?sz=128", "display_name": "Iskander Sharipov", "link": "https://stackoverflow.com/users/4017439/iskander-sharipov"}, "edited": false, "score": 0, "creation_date": 1446180088, "post_id": 33424143, "comment_id": 54646190, "body": "I should be more precise in questions.. The thing I was looking for is a alternative to filter which moves values into closure and, in case of copy values, passes an copy (or maybe it should be bounded to Copy trait). I am not sure it is a worthwhile to write my own filter iterator (because it seems like &amp;&amp; is idiomatic even for primitives; I am still thinking just copying them around is better)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 235, "user_id": 4017439, "user_type": "registered", "accept_rate": 88, "profile_image": "https://lh3.googleusercontent.com/-v6-6SQOeGVI/AAAAAAAAAAI/AAAAAAAAABg/Scha2K5nzuM/photo.jpg?sz=128", "display_name": "Iskander Sharipov", "link": "https://stackoverflow.com/users/4017439/iskander-sharipov"}, "edited": false, "score": 0, "creation_date": 1446213935, "post_id": 33424143, "comment_id": 54663764, "body": "@IskanderSharipov it&#39;s tough to tell if a <code>filter_copy</code> method would be useful, but that&#39;s what profiling is for! I&#39;d encourage you to write it and time it to see if it makes you code faster. For myself, I trust in the optimizer enough to believe, without proof, that it would actually optimize to the same speed."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1446214001, "last_edit_date": 1446214001, "creation_date": 1446151055, "answer_id": 33424143, "question_id": 33423947, "link": "https://stackoverflow.com/questions/33423947/iterate-over-copy-types/33424143#33424143", "title": "Iterate over copy types", "body": "<blockquote>\n  <p>It is clear that iterators pass around a references </p>\n</blockquote>\n\n<p>This blanket statement is not true, iterators are more than capable of yielding a non-reference. <code>filter</code> will provide a reference to the closure because it doesn't want to give ownership of the item to the closure. In your example, your iterated value is a <code>&amp;i32</code>, and then <code>filter</code> provides a <code>&amp;&amp;i32</code>.</p>\n\n<blockquote>\n  <p>Is there a way to make [2] function from above snippet work for higher-level functions like filter?</p>\n</blockquote>\n\n<p>Certainly, just provide a closure that does the dereferencing:</p>\n\n<pre><code>fn is_odd(x: i32) -&gt; bool { x &amp; 1 == 1 }\n\nfn main() {\n    let xs = &amp;[ 10, 20, 13, 14 ];\n\n    for x in xs.iter().filter(|&amp;&amp;x| is_odd(x)) { \n        assert_eq!(13, *x);                     \n    }   \n}\n</code></pre>\n"}], "owner": {"reputation": 235, "user_id": 4017439, "user_type": "registered", "accept_rate": 88, "profile_image": "https://lh3.googleusercontent.com/-v6-6SQOeGVI/AAAAAAAAAAI/AAAAAAAAABg/Scha2K5nzuM/photo.jpg?sz=128", "display_name": "Iskander Sharipov", "link": "https://stackoverflow.com/users/4017439/iskander-sharipov"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 160, "favorite_count": 0, "accepted_answer_id": 33424143, "answer_count": 1, "score": 1, "last_activity_date": 1446214001, "creation_date": 1446150436, "last_edit_date": 1446150587, "question_id": 33423947, "link": "https://stackoverflow.com/questions/33423947/iterate-over-copy-types", "title": "Iterate over copy types", "body": "<p>It is clear that iterators pass around a references to avoid <code>moving</code> objects into iterator or it's closure argument, but what with Copy types? Let me show you a small snippet:</p>\n\n<pre><code>fn is_odd(x: &amp;&amp;i32) -&gt; bool { *x &amp; 1 == 1 }\n// [1] fn is_odd(x: &amp;i32) -&gt; bool { x &amp; 1 == 1 }\n// [2] fn is_odd(x: i32) -&gt; bool { x &amp; 1 == 1 }\n\nfn main() {\n    let xs = &amp;[ 10, 20, 13, 14 ];\n\n    for x in xs.iter().filter(is_odd) { \n        assert_eq!(13, *x);                     \n    }   \n\n    // [1] ...is slightly better, but not ideal\n    // for x in xs.iter().cloned().filter(is_odd) { \n    //     assert_eq!(13, x); \n    // }\n}\n</code></pre>\n\n<p>Am I right that <code>.cloned()</code> is preferred when we iterate over something like <code>&amp;[i32]</code> or <code>&amp;[u8]</code>, where extra indirection is involved instead of just copying the tiny data unit? </p>\n\n<p>But it looks like I can not avoid references passed into <code>is_odd</code> function.</p>\n\n<p>Is there a way to make <code>[2]</code> function from above snippet work for higher-level functions like <code>filter</code>?</p>\n\n<p>Assume that I understand that moving non-Copy type into <code>predicate</code> function is silly. But not all types use <code>move</code> semantics by default, right?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 175871, "user_id": 454533, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/c7715e765817254e0534f89a4092c0aa?s=128&d=identicon&r=PG", "display_name": "Explosion Pills", "link": "https://stackoverflow.com/users/454533/explosion-pills"}, "edited": false, "score": 0, "creation_date": 1446157863, "post_id": 33425753, "comment_id": 54640653, "body": "Okay, that makes a lot of sense. Not sure why I didn&#39;t see that before. Is there any way to only use one variable in my example?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1446157875, "last_edit_date": 1446157875, "creation_date": 1446157779, "answer_id": 33425753, "question_id": 33422543, "link": "https://stackoverflow.com/questions/33422543/understanding-scope-and-shadowing-matches/33425753#33425753", "title": "Understanding scope and shadowing matches", "body": "<p>Let's look at a simpler reproduction:</p>\n\n<pre><code>fn make_guess() -&gt; u32 {\n    let guess;\n\n    {\n        let mut guess;\n        guess = 1;\n    }\n\n    guess\n}\n</code></pre>\n\n<p>Here, you create an outer variable <code>guess</code> and then shadow it inside the block. When you assign the value <code>1</code> to <code>guess</code>, you are assigning to the <strong>inner</strong> variable. The <strong>outer</strong> variable is never set to anything, thus you end up with the \"use of possibly uninitialized variable\" error.</p>\n\n<blockquote>\n  <p>Is there any way to only use one variable</p>\n</blockquote>\n\n<p>Indirectly, yes. I'd extract the code to a function. When you have a successful guess, you can simply <code>return</code>. Otherwise you allow the loop to occur:</p>\n\n<pre><code>fn make_guess() -&gt; u32 {\n    loop {\n        let mut guess = String::new();\n        io::stdin().read_line(&amp;mut guess)\n            .ok()\n            .expect(\"Failed to read line\");\n\n        match guess.trim().parse() {\n            Ok(num) =&gt; return num,\n            Err(_) =&gt; {\n                println!(\"Please input a number!\");\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>This avoids the shadowing completely, avoids having to use an explicit <code>continue</code>, and adds a small amount of abstraction and organization to your code.</p>\n"}], "owner": {"reputation": 175871, "user_id": 454533, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/c7715e765817254e0534f89a4092c0aa?s=128&d=identicon&r=PG", "display_name": "Explosion Pills", "link": "https://stackoverflow.com/users/454533/explosion-pills"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 461, "favorite_count": 0, "accepted_answer_id": 33425753, "answer_count": 1, "score": 3, "last_activity_date": 1446157875, "creation_date": 1446145277, "last_edit_date": 1446155729, "question_id": 33422543, "link": "https://stackoverflow.com/questions/33422543/understanding-scope-and-shadowing-matches", "title": "Understanding scope and shadowing matches", "body": "<p>I'm trying to improve on the final <a href=\"https://doc.rust-lang.org/stable/book/guessing-game.html\" rel=\"nofollow\">guessing game sample code</a> a bit. Particularly, I plan to output \"Please input a number!\" if the user does not input a number rather than \"Please input your guess.\" again. I'm doing this with an inner loop.  The code below does work:</p>\n\n<pre><code>let guess: u32;\n\nloop {\n    let mut guess_str = String::new();\n    io::stdin().read_line(&amp;mut guess_str)\n        .ok()\n        .expect(\"Failed to read line\");\n\n    guess = match guess_str.trim().parse() {\n        Ok(num) =&gt; num,\n        Err(_) =&gt; {\n            println!(\"Please input a number!\");\n            continue;\n        }\n    };\n    break;\n}\n</code></pre>\n\n<p>I'd like to avoid the <code>guess_str</code> if I can by properly shadowing the matches. If I change <code>guess_str</code> to <code>guess</code>, Rust complains of <code>use of possibly uninitialized variable: `guess`</code>. I'm not sure how the variable could possibly be uninitialized if it's impossible for it to not be uninitialized with the code above. Is there any way to do this only using <code>guess</code>?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 1, "creation_date": 1446141599, "post_id": 33419930, "comment_id": 54632312, "body": "You can also write just <code>cleaned.into()</code> and <code>s.into()</code> instead of explicit naming enum variants because both <code>String</code> and <code>&amp;str</code> implement <code>Into&lt;Cow&lt;str&gt;&gt;</code>."}, {"owner": {"reputation": 451, "user_id": 554562, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0d89e87b7164bd860e647dc08d5f2f20?s=128&d=identicon&r=PG", "display_name": "David", "link": "https://stackoverflow.com/users/554562/david"}, "edited": false, "score": 0, "creation_date": 1446319933, "post_id": 33419930, "comment_id": 54697980, "body": "Thanks! I thought I&#39;d seen something like that, then couldn&#39;t remember what it was called or find it again when I looked for it."}], "tags": [], "owner": {"reputation": 5160, "user_id": 553092, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d161f230b3456d0bfd740154ae16e0a3?s=128&d=identicon&r=PG", "display_name": "Steven", "link": "https://stackoverflow.com/users/553092/steven"}, "is_accepted": true, "score": 10, "last_activity_date": 1446141850, "last_edit_date": 1446141850, "creation_date": 1446136687, "answer_id": 33419930, "question_id": 33419422, "link": "https://stackoverflow.com/questions/33419422/return-original-or-modified-string/33419930#33419930", "title": "Return original or modified string", "body": "<p>You're looking for <a href=\"https://doc.rust-lang.org/std/borrow/enum.Cow.html\">Cow</a>:</p>\n\n<pre><code>use std::borrow::Cow;\n\nfn clean(s: &amp;str) -&gt; Cow&lt;str&gt; {\n    if /* needs cleaning */ {\n        let cleaned: String = s.chars().filter(/* etc */).collect();\n        Cow::Owned(cleaned)\n    } else {\n        Cow::Borrowed(s)\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 451, "user_id": 554562, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0d89e87b7164bd860e647dc08d5f2f20?s=128&d=identicon&r=PG", "display_name": "David", "link": "https://stackoverflow.com/users/554562/david"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 93, "favorite_count": 0, "accepted_answer_id": 33419930, "answer_count": 1, "score": 3, "last_activity_date": 1446141850, "creation_date": 1446135251, "last_edit_date": 1446141798, "question_id": 33419422, "link": "https://stackoverflow.com/questions/33419422/return-original-or-modified-string", "title": "Return original or modified string", "body": "<p>I have a function to clean a string that looks something like this:</p>\n\n<pre><code>fn clean(s: &amp;str) -&gt; &amp;str { // but not sure about return type\n    if /* needs cleaning */ {\n        let cleaned: String = s.chars().filter( /* etc */ ).collect();\n        cleaned\n    } else {\n        s\n    }\n}\n</code></pre>\n\n<p>Except this doesn't work as written, because cleaned is <code>String</code>, not a <code>&amp;str</code>.</p>\n\n<p>The goal here is to only perform an allocation if necessary - if the string needs to be modified, I want to replace it with a new one, and if it doesn't, I don't want to call <code>to_string()</code> on it. Ideally, I'd like that to be transparent to the caller, but it doesn't have to be - I have control of the calling code too. Even so, I haven't found a workaround, because if the newly-created <code>String</code>, or even a borrow of it, ends up in some kind of if or else block in the caller, it's lifetime isn't long enough to use in the contexts where the original string is used otherwise. For example, this also doesn't work:</p>\n\n<pre><code>fn caller(s: &amp;str) {\n    if needs_cleaning(s) {\n        let cleaned = clean(s); // where clean always returns a new String\n        s = &amp;cleaned;\n    }\n\n    / * do stuff with the clean string */\n}\n</code></pre>\n\n<p>What's the right approach here?</p>\n"}, {"tags": ["json", "rust", "json-deserialization"], "comments": [{"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 1, "creation_date": 1446126071, "post_id": 33411991, "comment_id": 54621292, "body": "Seems like a bug in rustc-serialize. Consider filing an issue on <a href=\"https://github.com/rust-lang-nursery/rustc-serialize\" rel=\"nofollow noreferrer\">github</a>"}], "answers": [{"comments": [{"owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "edited": false, "score": 0, "creation_date": 1446198124, "post_id": 33417205, "comment_id": 54653823, "body": "i must have been drugged to think the generated implementation wouldn&#39;t work :D .. but if we do go with manual implementation you posted wouldn&#39;t <code>try!</code> cause an early return ? That is not what i wanted - i needed to put it as <code>None</code> and continue to inspect the next field. I haven&#39;t  looked at that pretty-expanded version yet though to see what default does to make it work."}, {"owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "edited": false, "score": 0, "creation_date": 1446201352, "post_id": 33417205, "comment_id": 54655905, "body": "Just as an attempt to answer my comment above: There must be a specialization for <code>Option&lt;T&gt;</code> so that it can differentiate between decoding to a <code>T</code> for which it will bail out and not do anything further and <code>Option&lt;T&gt;</code> for which it will be more lenient  and return <code>None</code> if the field is not found but not bail out and reach EOF (but otherwise same behavior for any other error). Am i close there ?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1446130245, "last_edit_date": 1446130245, "creation_date": 1446129483, "answer_id": 33417205, "question_id": 33411991, "link": "https://stackoverflow.com/questions/33411991/unable-to-tackle-optional-fields-in-json-with-rustc-serialize/33417205#33417205", "title": "Unable to tackle optional fields in JSON with Rustc-serialize", "body": "<p>There's something wrong with your <code>Decodable</code> implementation. Using the automatically-generated implementation works:</p>\n\n<pre><code>#[derive(Debug, RustcDecodable)]\nstruct B {\n    some_field_1: Option&lt;String&gt;,\n    some_field_0: Option&lt;u64&gt;,\n}\n</code></pre>\n\n\n\n<pre><code>JSON: {\"some_field_1\": \"There\"}\nDecoded: B { some_field_1: Some(\"There\"), some_field_0: None }\n</code></pre>\n\n<p>Using the generated implementation is the right thing to do <em>if you can</em>. If you cannot, here's the right implementation:</p>\n\n<pre><code>impl rustc_serialize::Decodable for B {\n    fn decode&lt;D: rustc_serialize::Decoder&gt;(d: &amp;mut D) -&gt; Result&lt;Self, D::Error&gt; {\n        Ok(B {\n            some_field_0: try!(d.read_struct_field(\"some_field_0\", 0, |d| rustc_serialize::Decodable::decode(d))),\n            some_field_1: try!(d.read_struct_field(\"some_field_1\", 0, |d| rustc_serialize::Decodable::decode(d))),\n        })\n    }\n}\n</code></pre>\n\n<p>The important change is the use of <code>try!</code>. Decoding can fail. By using <code>ok</code>, you were saying that a failed decoding was actually a <strong>success</strong>, albeit a successful decoding of a <code>None</code>.</p>\n"}], "owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 514, "favorite_count": 0, "accepted_answer_id": 33417205, "answer_count": 1, "score": 9, "last_activity_date": 1446132654, "creation_date": 1446115235, "last_edit_date": 1446132654, "question_id": 33411991, "link": "https://stackoverflow.com/questions/33411991/unable-to-tackle-optional-fields-in-json-with-rustc-serialize", "title": "Unable to tackle optional fields in JSON with Rustc-serialize", "body": "<p>I am trying to deserialize JSON to Rust structure using rustc_serialize. The problem is that certain JSONs have some optional fields, i.e., may or may not be present. The moment the first absent field is encountered, the decoder seems to bail out and not consider subsequent fields, even if they are present. Is there a way to overcome this?</p>\n\n<p>Here is the code:</p>\n\n<pre><code>extern crate rustc_serialize;\n\n#[derive(Debug)]\nstruct B {\n    some_field_0: Option&lt;u64&gt;,\n    some_field_1: Option&lt;String&gt;,\n}\n\nimpl rustc_serialize::Decodable for B {\n    fn decode&lt;D: rustc_serialize::Decoder&gt;(d: &amp;mut D) -&gt; Result&lt;Self, D::Error&gt; {\n        Ok(B {\n            some_field_0: d.read_struct_field(\"some_field_0\", 0, |d| rustc_serialize::Decodable::decode(d)).ok(),\n            some_field_1: d.read_struct_field(\"some_field_1\", 0, |d| rustc_serialize::Decodable::decode(d)).ok(),\n        })\n    }\n}\n\nfn main() {\n    {\n        println!(\"--------------------------------\\n1st run - all field present\\n--------------------------------\");\n        let json_str = \"{\\\"some_field_0\\\": 1234, \\\"some_field_1\\\": \\\"There\\\"}\".to_string();\n        let obj_b: B = rustc_serialize::json::decode(&amp;json_str).unwrap();\n\n        println!(\"\\nJSON: {}\\nDecoded: {:?}\", json_str, obj_b);\n    }\n\n    {\n        println!(\"\\n\\n--------------------------------\\n2nd run - \\\"some_field_1\\\" absent\\n---------------------------------\");\n        let json_str = \"{\\\"some_field_0\\\": 1234}\".to_string();\n        let obj_b: B = rustc_serialize::json::decode(&amp;json_str).unwrap();\n\n        println!(\"\\nJSON: {}\\nDecoded: {:?}\", json_str, obj_b);\n    }\n\n    {\n        println!(\"\\n\\n--------------------------------\\n3rd run - \\\"some_field_0\\\" absent\\n---------------------------------\");\n        let json_str = \"{\\\"some_field_1\\\": \\\"There\\\"}\".to_string();\n        let obj_b: B = rustc_serialize::json::decode(&amp;json_str).unwrap();\n\n        println!(\"\\nJSON: {}\\nDecoded: {:?}\", json_str, obj_b);\n    }\n}\n</code></pre>\n\n<p>and here's the output:</p>\n\n<pre><code>--------------------------------\n1st run - all field present\n--------------------------------\n\nJSON: {\"some_field_0\": 1234, \"some_field_1\": \"There\"}\nDecoded: B { some_field_0: Some(1234), some_field_1: Some(\"There\") }\n\n\n--------------------------------\n2nd run - \"some_field_1\" absent\n---------------------------------\n\nJSON: {\"some_field_0\": 1234}\nDecoded: B { some_field_0: Some(1234), some_field_1: None }\n\n\n--------------------------------\n3rd run - \"some_field_0\" absent\n---------------------------------\n\nJSON: {\"some_field_1\": \"There\"}\nDecoded: B { some_field_0: None, some_field_1: None }\n</code></pre>\n\n<p>Notice that the third run produces an unexpected result. When the decoder fails to find <code>some_field_0</code> it fails on all subsequent tokens, even though <code>some_field_1</code> is present.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 43, "user_id": 5501930, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b82a147cf2f35f0f0dd83ae057427719?s=128&d=identicon&r=PG&f=1", "display_name": "Nikolai Hellwig", "link": "https://stackoverflow.com/users/5501930/nikolai-hellwig"}, "edited": false, "score": 0, "creation_date": 1446139026, "post_id": 33416935, "comment_id": 54630807, "body": "wow, thanks! that is exactly what I was looking for and it doesn&#39;t look like abusing PhantomData anymore ;)"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 8, "last_activity_date": 1446131987, "last_edit_date": 1446131987, "creation_date": 1446128811, "answer_id": 33416935, "question_id": 33409546, "link": "https://stackoverflow.com/questions/33409546/avoiding-phantomdata-in-a-struct-to-enforce-type-constraints/33416935#33416935", "title": "Avoiding PhantomData in a struct to enforce type constraints", "body": "<p>Instead of type parameters, you want associated types:</p>\n\n<pre><code>trait Producer {\n    type Output;\n    fn produce(&amp;self) -&gt; Self::Output;\n}\n\ntrait Transformer {\n    type Input;\n    type Output;\n    fn transform(&amp;self, val: Self::Input) -&gt; Self::Output;\n}\n\ntrait Consumer {\n    type Input;\n    fn consume(&amp;self, val: Self::Input);\n}\n\nstruct Process&lt;P, T, C&gt;\n    where P: Producer,\n          T: Transformer&lt;Input = P::Output&gt;,\n          C: Consumer&lt;Input = T::Output&gt;\n{\n    producer: P,\n    transformer: T,\n    consumer: C,\n}\n\nimpl&lt;P, T, C&gt; Process&lt;P, T, C&gt;\n    where P: Producer,\n          T: Transformer&lt;Input = P::Output&gt;,\n          C: Consumer&lt;Input = T::Output&gt;\n{\n    fn run(&amp;self) {\n        let a = self.producer.produce();\n        let b = self.transformer.transform(a);\n        self.consumer.consume(b);\n    }\n}\n\nstruct MakeNum;\nimpl Producer for MakeNum {\n    type Output = u8;\n    fn produce(&amp;self) -&gt; u8 { 41 }\n}\n\nstruct AddOne;\nimpl Transformer for AddOne {\n    type Input = u8;\n    type Output = u8;\n    fn transform(&amp;self, val: u8) -&gt; u8 { val + 1 }\n}\n\nstruct PrintNum;\nimpl Consumer for PrintNum {\n    type Input = u8;\n    fn consume(&amp;self, val: u8) { println!(\"Value was {}\", val) }\n}\n\nfn main() {\n    let process = Process {\n        producer: MakeNum,\n        transformer: AddOne,\n        consumer: PrintNum,\n    };\n\n    process.run();\n}\n</code></pre>\n\n<p>Although I wouldn't normally add the <code>where</code> clause on the <code>struct</code> proper, I'd just have it on the <code>impl</code> which would also have a <code>new</code> method that ensures the constraints just as well.</p>\n"}], "owner": {"reputation": 43, "user_id": 5501930, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b82a147cf2f35f0f0dd83ae057427719?s=128&d=identicon&r=PG&f=1", "display_name": "Nikolai Hellwig", "link": "https://stackoverflow.com/users/5501930/nikolai-hellwig"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 288, "favorite_count": 0, "accepted_answer_id": 33416935, "answer_count": 1, "score": 4, "last_activity_date": 1446131987, "creation_date": 1446108329, "last_edit_date": 1446129813, "question_id": 33409546, "link": "https://stackoverflow.com/questions/33409546/avoiding-phantomdata-in-a-struct-to-enforce-type-constraints", "title": "Avoiding PhantomData in a struct to enforce type constraints", "body": "<p>I'm trying to develop a kind of batch system. Within that I'd like to use some kind of <code>Process</code> struct, which owns all process related parts. The current implementation uses <code>PhantomData</code> to enforce the type constraints:</p>\n\n<pre><code>pub struct Process&lt;P: Producer&lt;U&gt;, T: Transformer&lt;U, V&gt;, C: Consumer&lt;V&gt;, U,V&gt; \n{\n    producer: P,\n    transformer: T, \n    consumer: C,\n    p1: PhantomData&lt;U&gt;,\n    p2: PhantomData&lt;V&gt;,\n}\n</code></pre>\n\n<p>The idea is that type emitted by the <code>Producer</code> will be used by the <code>Transformer</code> (maybe to a different type) and consumed by the <code>Consumer</code>. Therefore the types must match.</p>\n\n<p>The <code>Process</code> struct should own the items implementing the <code>Producer</code>, <code>Transformer</code> and <code>Consumer</code> traits. I think that's why I need to use type parameters. Since I cannot use the the trait directly like</p>\n\n<pre><code>...\nproducer: Producer&lt;U&gt;,\n...\n</code></pre>\n\n<p>because of the unknown size at compile time.</p>\n\n<p>Is there a better way of doing this? I'm pretty new to Rust, so I might be thinking in the wrong direction.</p>\n\n<p>The solution works, but it looks a bit odd with those <code>PhantomData</code> fields. Maybe that is just what <code>PhantomData</code> is used for?</p>\n"}, {"tags": ["string", "rust", "char"], "comments": [{"owner": {"reputation": 198293, "user_id": 707111, "user_type": "moderator", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/oXZkh.jpg?s=128&g=1", "display_name": "Ry-", "link": "https://stackoverflow.com/users/707111/ry"}, "edited": false, "score": 0, "creation_date": 1446190431, "post_id": 33405672, "comment_id": 54649934, "body": "Too bad <a href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html#method.char_at\" rel=\"nofollow noreferrer\">doc.rust-lang.org/nightly/std/primitive.str.html#method.char&zwnj;&#8203;_at</a> is unstable\u2026"}, {"owner": {"reputation": 67160, "user_id": 1078084, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/wApmM.jpg?s=128&g=1", "display_name": "Akavall", "link": "https://stackoverflow.com/users/1078084/akavall"}, "reply_to_user": {"reputation": 198293, "user_id": 707111, "user_type": "moderator", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/oXZkh.jpg?s=128&g=1", "display_name": "Ry-", "link": "https://stackoverflow.com/users/707111/ry"}, "edited": false, "score": 0, "creation_date": 1446214718, "post_id": 33405672, "comment_id": 54664246, "body": "@minitech, Thank you."}], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 9, "last_activity_date": 1446096024, "creation_date": 1446096024, "answer_id": 33406461, "question_id": 33405672, "link": "https://stackoverflow.com/questions/33405672/how-can-i-convert-a-one-element-string-into-a-char/33406461#33406461", "title": "How can I convert a one element string into a char?", "body": "<p>No huge improvements I can think of, but a few notes:</p>\n\n<ul>\n<li>You could replace <code>.nth(0)</code> with <code>.next()</code>, which does basically the same thing.</li>\n<li>You should ideally not use <code>.unwrap()</code>, since if the string is empty, your program will panic.  </li>\n<li>If you really <em>must</em> panic, ideally use <code>.expect(\"msg\")</code>, which will give users a better idea of <em>why</em> you panicked.</li>\n</ul>\n\n<p>Taking those together:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let comma: &amp;str = \",\";\n    let my_char = comma.chars().next().expect(\"string is empty\");\n\n    assert_eq!(my_char, ',');\n}\n</code></pre>\n\n<p>The only other thing to note is that \"one element\" is a somewhat dangerous thing to talk about.  For example, <code>\"\u00e9\"</code> has one <code>char</code>, but <code>\"e\u0301\"</code> <em>has two</em> (the first is a pre-composed U+00E9, whilst the second is a regular <code>e</code> followed by a U+0301 combining \u25cc\u0301).</p>\n"}], "owner": {"reputation": 67160, "user_id": 1078084, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/wApmM.jpg?s=128&g=1", "display_name": "Akavall", "link": "https://stackoverflow.com/users/1078084/akavall"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 906, "favorite_count": 0, "closed_date": 1593043868, "accepted_answer_id": 33406461, "answer_count": 1, "score": 3, "last_activity_date": 1593043520, "creation_date": 1446090858, "last_edit_date": 1593043520, "question_id": 33405672, "link": "https://stackoverflow.com/questions/33405672/how-can-i-convert-a-one-element-string-into-a-char", "closed_reason": "Duplicate", "title": "How can I convert a one element string into a char?", "body": "<p>I need to convert a one element <code>&amp;str</code> into <code>char</code>. I was able to come up with this solution that also works for <code>String</code>:</p>\n<pre><code>fn main() {\n    let comma: &amp;str = &quot;,&quot;;\n    let my_char = comma.chars().nth(0).unwrap();\n   \n    assert_eq!(my_char, ',');\n}\n</code></pre>\n<p>Is there a better or shorter way to do it?</p>\n"}]