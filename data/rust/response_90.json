[{"tags": ["generics", "rust", "traits", "type-safety"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1475094025, "post_id": 39756867, "comment_id": 66809727, "body": "It&#39;s unfortunate, because while this is a good writeup on how to create an OIBIT, the question leading up to it seems unlikely to funnel people looking for this information. I almost wonder if there are two Q&amp;A here."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1475096993, "post_id": 39756867, "comment_id": 66811414, "body": "@Shepmaster Fair, but the question was genuine. I just happened to realize how to solve it just before I clicked &quot;ask&quot;."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1475097167, "post_id": 39756867, "comment_id": 66811503, "body": "Oh, I think <b>both</b> are useful additions, but I think the answer could get a lot more visibility (and sweet, sweet upvotes). You could almost do a self-answer Q&amp;A on &quot;how do I OIBIT&quot; and then change this to &quot;Use an OIBIT, like ...link...&quot; (shrug)"}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1475098573, "post_id": 39756867, "comment_id": 66812147, "body": "Is there confusion about opt-in vs opt-out in the first paragraph?  (It might be my confusion)"}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 1, "creation_date": 1475099413, "post_id": 39756867, "comment_id": 66812482, "body": "@ChrisEmerson It&#39;s a joke about how badly named they are, since OIBITs are the only traits that in fact are <i>not</i> opt in. It&#39;s not clear enough, though, so I&#39;ll edit it."}, {"owner": {"reputation": 2715, "user_id": 612512, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/bb7101e3af8cd635dbbb891055675534?s=128&d=identicon&r=PG", "display_name": "Christopher Stevenson", "link": "https://stackoverflow.com/users/612512/christopher-stevenson"}, "edited": false, "score": 0, "creation_date": 1475113889, "post_id": 39756867, "comment_id": 66815990, "body": "Is creating an OIBIT only available on nightly?"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1475151246, "post_id": 39756867, "comment_id": 66834376, "body": "Aren&#39;t we calling them <b>auto traits</b> now?"}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1475164280, "post_id": 39756867, "comment_id": 66843886, "body": "@bluss I had no idea they got a name change. Updated."}], "tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": true, "score": 7, "last_activity_date": 1475164273, "last_edit_date": 1475164273, "creation_date": 1475093764, "answer_id": 39756867, "question_id": 39756866, "link": "https://stackoverflow.com/questions/39756866/how-to-safely-store-immutable-aliasing-copies-of-a-generic-value/39756867#39756867", "title": "How to safely store immutable, aliasing copies of a generic value?", "body": "<p>You can enforce the constraint against <code>UnsafeCell</code> with an <em>auto trait</em>. These are defined by default, but can be opted out of with a special syntax for specific types - you want to opt out just for <code>UnsafeCell</code>.</p>\n\n<p>These were previously called Opt-In Built-In Traits (OIBITs), but were renamed since they are neither opt-in nor necessarily built-in, and are in fact opt-out traits that can be defined in ordinary user code.</p>\n\n<p>First you enable it, create the trait and make it implemented by default. This uses some magic syntax.</p>\n\n<pre><code>#![feature(optin_builtin_traits)]\n\npub unsafe trait CopyRef {}\nunsafe impl CopyRef for .. {}\n</code></pre>\n\n<p>Then you opt-out for <code>UnsafeCell</code>.</p>\n\n<pre><code>// Opt out of interior mutability\nimpl&lt;T: ?Sized&gt; !CopyRef for UnsafeCell&lt;T&gt; {}\n</code></pre>\n\n<p>You will then want to re-enable <code>UnsafeCell</code> behind pointers and <code>PhantomData</code>.</p>\n\n<pre><code>use std::marker::PhantomData;\nuse std::cell::UnsafeCell;\n\n// Opt in for indirect interior mutability\nunsafe impl&lt;'a, T: ?Sized&gt; CopyRef for *const T {}\nunsafe impl&lt;'a, T: ?Sized&gt; CopyRef for *mut T {}\nunsafe impl&lt;'a, T: ?Sized&gt; CopyRef for &amp;'a T {}\nunsafe impl&lt;'a, T: ?Sized&gt; CopyRef for &amp;'a mut T {}\n\n// Box is special and needs its own opt-in\nunsafe impl&lt;T: ?Sized&gt; CopyRef for Box&lt;T&gt; {}\n\n// And fake interior mutability\nunsafe impl&lt;T: ?Sized&gt; CopyRef for PhantomData&lt;T&gt; {}\n</code></pre>\n\n<p>Voil\u00e0. Your very own user-defined opt-out Opt-In Built-In auto Trait.</p>\n"}], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 113, "favorite_count": 0, "accepted_answer_id": 39756867, "answer_count": 1, "score": 7, "last_activity_date": 1493167332, "creation_date": 1475093764, "last_edit_date": 1493167332, "question_id": 39756866, "link": "https://stackoverflow.com/questions/39756866/how-to-safely-store-immutable-aliasing-copies-of-a-generic-value", "title": "How to safely store immutable, aliasing copies of a generic value?", "body": "<h3>Summary</h3>\n\n<p>For optimization purposes I wish to create a data structure that stores single values in multiple, distinct places. The data structure will only ever let these values be used through immutable reference, or by removing them from the data structure entirely.</p>\n\n<p>How can I ensure that this is safe for a generic type?</p>\n\n<h3>Simplified example</h3>\n\n<p>To give a trivial (but somewhat unrealistic) example for context, consider a slice that caches the most recently used value:</p>\n\n<pre><code>struct Pair&lt;'a&gt; {\n    values: &amp;'a [T],\n    last_accessed: &amp;'a T,\n}\n</code></pre>\n\n<p>Accessing the last accessed element, however, still incurs a pointer dereference, so the code would like a by-value cache:</p>\n\n<pre><code>struct Pair&lt;'a&gt; {\n    values: &amp;'a [T],\n    last_accessed: NoDrop&lt;T&gt;,\n}\n</code></pre>\n\n<p>In most cases this seems to be safe. For example, if <code>T</code> is a <code>u32</code>, the cache is just a simple copy of the data.</p>\n\n<p>Even if <code>T</code> is a <code>Vec&lt;U&gt;</code>, this seems to be safe as any access through <code>&amp;last_accessed</code> cannot change any of the direct members of the vector.  The heap allocation is transitively immutable and not duplicated, so there is no obvious aliasing problem.</p>\n\n<h3>Why is this hard?</h3>\n\n<p>This is not safe for <em>all</em> values. A value containing a <code>Cell</code> could invoke interior mutability and end up violating internal constraints that causes unsafe behavior when accessed through a value that hasn't propagated that change.</p>\n\n<p>The question is what constraints can I put on a generic <code>T</code> that would make this safe? As far as I know, all I need is that it contains no <code>UnsafeCell</code> except through a pointer.</p>\n\n<h3>What about <code>T: Copy</code>?</h3>\n\n<p><code>T: Copy</code> looks like a decent solution, but there are two major drawbacks:</p>\n\n<ul>\n<li><p>\"there's no absolutely fundamental reason why [<code>UnsafeCell</code>] does not implement <code>Copy</code>\" - <a href=\"https://github.com/rust-lang/rust/issues/25053#issuecomment-98775538\" rel=\"nofollow noreferrer\">Alex Crichton</a>. The <code>Copy</code> requirement seems coincidental rather than guaranteed.</p></li>\n<li><p><code>Copy</code> bans far too much; <code>Vec</code> is not <code>Copy</code> but does not need to be banned.</p></li>\n</ul>\n\n<h3>What about <code>T: Sync</code></h3>\n\n<p><code>Sync</code> is close to the right idea, since</p>\n\n<blockquote>\n  <p>Types that are not <code>Sync</code> are those that have \"interior mutability\" in a non-thread-safe way, such as <code>Cell</code> and <code>RefCell</code> in <code>std::cell</code>.</p>\n</blockquote>\n\n<p>However, several types, like atomics, have interior mutability that <em>is</em> thread-safe.</p>\n"}, {"tags": ["rust", "data-oriented-design"], "answers": [{"comments": [{"owner": {"reputation": 359, "user_id": 3443041, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/54e85dd5f242a00e34839ae6bb34c5cf?s=128&d=identicon&r=PG&f=1", "display_name": "TheBusyTypist", "link": "https://stackoverflow.com/users/3443041/thebusytypist"}, "edited": false, "score": 0, "creation_date": 1475087435, "post_id": 39754989, "comment_id": 66806321, "body": "Thank you for quick reply. I arrive this complicated way of implementing DOD because the flexibility on attributes is required. Usually the detailed attribute information(i.e. the number of attributes, and the exact semantics) comes from artists. In other word, this information are dynamic which cannot be determined before runtime."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 359, "user_id": 3443041, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/54e85dd5f242a00e34839ae6bb34c5cf?s=128&d=identicon&r=PG&f=1", "display_name": "TheBusyTypist", "link": "https://stackoverflow.com/users/3443041/thebusytypist"}, "edited": false, "score": 0, "creation_date": 1475088515, "post_id": 39754989, "comment_id": 66806909, "body": "@TheBusyTypist: I see... please edit the question with the relevant details then. It would also be worth knowing whether you only need to support <code>f32</code> (in which case a <code>HashMap&lt;String, Vec&lt;32&gt;&gt;</code> would work quite well) or if you need to support multiple types."}, {"owner": {"reputation": 359, "user_id": 3443041, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/54e85dd5f242a00e34839ae6bb34c5cf?s=128&d=identicon&r=PG&f=1", "display_name": "TheBusyTypist", "link": "https://stackoverflow.com/users/3443041/thebusytypist"}, "edited": false, "score": 0, "creation_date": 1475089846, "post_id": 39754989, "comment_id": 66807586, "body": "I have to support other primitive types such as <code>f64</code> or <code>int</code>s(for particle ID). As you suggested, now I think grouping attributes in separate <code>HashMap</code> by their types may be a valid solution."}, {"owner": {"reputation": 359, "user_id": 3443041, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/54e85dd5f242a00e34839ae6bb34c5cf?s=128&d=identicon&r=PG&f=1", "display_name": "TheBusyTypist", "link": "https://stackoverflow.com/users/3443041/thebusytypist"}, "edited": false, "score": 0, "creation_date": 1475090938, "post_id": 39754989, "comment_id": 66808042, "body": "The <code>HashMap</code> solution satisfies almost all requirements, but it still lacks some control at a finer level. One such example is to distinguish uniform and variable attributes. By uniform attribute I mean the attribute value is a constant among all particles, while it can be different for a variable attribute. We can store just a single value for the uniform attribute. In our <code>HashMap</code> solution we need to add another key to distinguish them. I am afraid combination explosion would occur in more complex situations."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 359, "user_id": 3443041, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/54e85dd5f242a00e34839ae6bb34c5cf?s=128&d=identicon&r=PG&f=1", "display_name": "TheBusyTypist", "link": "https://stackoverflow.com/users/3443041/thebusytypist"}, "edited": false, "score": 1, "creation_date": 1475091566, "post_id": 39754989, "comment_id": 66808374, "body": "I think <code>enum</code>s could save the day here: <code>enum Value { UniformInt(u64), UniformFloat32(f32), UniformFloat64(f64), VariableInt(Vec&lt;u64&gt;), VariableFloat32(Vec&lt;f32&gt;), VariableFloat64(Vec&lt;f64&gt;) }</code> and then <code>HashMap&lt;String, Value&gt;</code>."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 9, "last_activity_date": 1475132472, "last_edit_date": 1475132472, "creation_date": 1475087018, "answer_id": 39754989, "question_id": 39754863, "link": "https://stackoverflow.com/questions/39754863/how-do-i-implement-a-data-oriented-design-in-rust/39754989#39754989", "title": "How do I implement a data oriented design in Rust?", "body": "<p>That's a very complicated way of implementing DOD, and the idea of using run-time lookup for getters makes me cringe.</p>\n\n<p>The simple version is to simply have one memory allocation per attribute:</p>\n\n<pre><code>struct Particles {\n    x: Vec&lt;f32&gt;,\n    y: Vec&lt;f32&gt;,\n}\n</code></pre>\n\n<p>which requires knowing the attributes beforehand.</p>\n\n<p>Then there is no shenanigan for getting all the ys, they are just sitting there, already typed, waiting for you.</p>\n\n<hr>\n\n<p>Extending this to dynamically determined attributes is not that complicated:</p>\n\n<ul>\n<li>we can use a <code>HashMap&lt;String, xxx&gt;</code> to look-up a given attribute at run-time</li>\n<li>we can use an <code>enum</code> to have a single <code>Value</code> to be stored in the hash-map which can take a variety of forms (the other solution would be using a trait)</li>\n</ul>\n\n<p>This becomes:</p>\n\n<pre><code>#[derive(Debug, Hash, PartialEq, Eq)]\nenum Value {\n    UniformInt(i64),\n    UniformFloat32(f32),\n    UniformFloat64(f64),\n    DistinctInt(Vec&lt;i64&gt;),\n    DistinctFloat32(Vec&lt;f32&gt;),\n    DistinctFloat64(Vec&lt;f64&gt;),\n}\n\nstruct Particles {\n    store: HashMap&lt;String, Value&gt;,\n}\n</code></pre>\n\n<p>We could alternatively use 6 hash-maps... but unless one knows a priori what the type is (when the only think one has is a string), then one has to look through all hashmaps one at a time: annoying, and time wasting.</p>\n"}], "owner": {"reputation": 359, "user_id": 3443041, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/54e85dd5f242a00e34839ae6bb34c5cf?s=128&d=identicon&r=PG&f=1", "display_name": "TheBusyTypist", "link": "https://stackoverflow.com/users/3443041/thebusytypist"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3083, "favorite_count": 2, "accepted_answer_id": 39754989, "answer_count": 1, "score": 7, "last_activity_date": 1475132472, "creation_date": 1475086605, "last_edit_date": 1475089495, "question_id": 39754863, "link": "https://stackoverflow.com/questions/39754863/how-do-i-implement-a-data-oriented-design-in-rust", "title": "How do I implement a data oriented design in Rust?", "body": "<h1>Background</h1>\n\n<p>In game engine development we usually use a data oriented design for optimal memory and computation performance.</p>\n\n<p>Let's take particle system as an example.</p>\n\n<p>In a particle system, we have a lot of particles, and each particle may have several attributes such as positions, velocities, etc.</p>\n\n<p>A typical implementation in C++ would be like this:</p>\n\n<pre><code>struct Particle {\n    float positionX, positionY, positionZ;\n    float velocityX, velocityY, velocityZ;\n    float mass;\n    // ...\n};\n\nstruct ParticleSystem {\n    vector&lt;Particle&gt; particles;\n    // ...\n};\n</code></pre>\n\n<p>One problem of this implementation is that the particle attributes are interleaved with each other.\nThis memory layout is not cache friendly and may not suitable for SIMD computations.</p>\n\n<p>Instead in a data oriented design, we write following code:</p>\n\n<pre><code>struct ParticleAttribute {\n    size_t size;\n    size_t alignment;\n    const char* semantic;\n};\n\nstruct ParticleSystem {\n    ParticleSystem(\n        size_t numParticles,\n        const ParticleAttribute* attributes,\n        size_t bufferSize) {\n        for (size_t i = 0; i &lt; numAttributes; ++i) {\n            bufferSize += attributes[i].size * numParticles;\n            // Also add paddings to satisfy the alignment requirements.\n        }\n        particleBuffer = malloc(bufferSize); \n    }\n\n    uint8* getAttribute(const char* semantic) {\n        // Locate the semantic in attributes array.\n        // Compute the offset to the starting address of that attribute.\n    }\n\n    uint8* particleBuffer;      \n};\n</code></pre>\n\n<p>Now we have only one allocation and each attribute resides in memory continuously.\nTo simulate the particles, we may write following code:</p>\n\n<pre><code>symplecticEuler(ps.getAttribute(\"positionX\"), ps.getAttribute(\"velocityX\"), dt);\n</code></pre>\n\n<p>The <code>getAttribute</code> function will get the starting address of a particular attribute.</p>\n\n<h1>Question</h1>\n\n<p>I would like to know how to implement this in Rust.</p>\n\n<p>My idea is to first create a class called <code>ParticleSystem</code>, which takes several <code>ParticleAttribute</code>s to calculate the total buffer size,\nthen allocate the memory for the buffer.\nI think this can be done in Rust safe code.</p>\n\n<p>The next step is to implement <code>getAttribute</code> function, which\nwill returns a reference to the starting address of a specific attribute.\nI need your help here.\nHow do I get the raw address with an offset and cast it to a desired type(such as float*) and wrap that raw pointer to a mutable reference in Rust?</p>\n\n<p>In addition, I think I should wrap that raw pointer to a mutable reference to array because I need to use SIMD lib to load four elements through that reference.\nHow do I achieve this using Rust?</p>\n\n<hr>\n\n<p>Update: provide more information about the attributes.\nThe number and detailed information of attributes are determined in runtime.\nThe types of attributes can vary, but I think we only have to support the primitive ones(f32, f64, ints,...).</p>\n"}, {"tags": ["rust", "destructor", "undefined-behavior", "stack-unwinding"], "comments": [{"owner": {"reputation": 77588, "user_id": 32914, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/50facfccdffe2e9cabaa589205959d30?s=128&d=identicon&r=PG", "display_name": "Mason Wheeler", "link": "https://stackoverflow.com/users/32914/mason-wheeler"}, "edited": false, "score": 2, "creation_date": 1475090265, "post_id": 39750841, "comment_id": 66807733, "body": "As Raymond Chen is fond of pointing out, because &quot;undefined behavior&quot; means &quot;anything can happen and still be valid,&quot; <i>one of the valid consequences is for everything to appear to run correctly.</i>"}, {"owner": {"reputation": 3674, "user_id": 226555, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/e89d07fe21a57d052bacd7a1a8c23710?s=128&d=identicon&r=PG", "display_name": "MickeyfAgain_BeforeExitOfSO", "link": "https://stackoverflow.com/users/226555/mickeyfagain-beforeexitofso"}, "edited": false, "score": 0, "creation_date": 1475095551, "post_id": 39750841, "comment_id": 66810651, "body": "A.K.A. &quot;mistaking absence of evidence for evidence of absence&quot; - in infamous Black Swan."}, {"owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "reply_to_user": {"reputation": 3674, "user_id": 226555, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/e89d07fe21a57d052bacd7a1a8c23710?s=128&d=identicon&r=PG", "display_name": "MickeyfAgain_BeforeExitOfSO", "link": "https://stackoverflow.com/users/226555/mickeyfagain-beforeexitofso"}, "edited": false, "score": 2, "creation_date": 1475096501, "post_id": 39750841, "comment_id": 66811153, "body": "@mickeyf @MasonWheeler: Sorry if i didn&#39;t understand you but in Rust I would expect if i didn&#39;t use any <code>unsafe</code> code (which i don&#39;t in the main example above) whatever is the behavior observed (even in the first run of it) is pretty much well defined - that would be (one of) the main reason many would choose Rust in the first place (at least i did)."}, {"owner": {"reputation": 3674, "user_id": 226555, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/e89d07fe21a57d052bacd7a1a8c23710?s=128&d=identicon&r=PG", "display_name": "MickeyfAgain_BeforeExitOfSO", "link": "https://stackoverflow.com/users/226555/mickeyfagain-beforeexitofso"}, "edited": false, "score": 0, "creation_date": 1475161124, "post_id": 39750841, "comment_id": 66841762, "body": "@ustulation I don&#39;t know rust at all, so I cannot say whether this is &quot;undefined behavior&quot; or not, but to spell out what Mason and I are saying: If what you show is in fact &quot;undefined behavior&quot; then even if it did seem to work this time or even the next 100 times, that could be because you got lucky and that it may not work every time."}], "answers": [{"comments": [{"owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "edited": false, "score": 0, "creation_date": 1475078075, "post_id": 39751032, "comment_id": 66800633, "body": "Right - my drop() impl is trivial to just show the printouts of which ones are executed, but i was talking about general cases of-course. One question though why is <code>mem::uninitialized()</code> seen as an assignment to set the drop-flag ? If i were setting it to a particular location (like <code>operator new()</code>) then it would make sense, but assigning a random memory location (wherever it is on stack that time) should not have set the drop-flag ? I mean when would that be meaningful ? (It could set it on next assignment just like for case of <code>b</code> when <code>i</code> is odd)."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1475078225, "post_id": 39751032, "comment_id": 66800740, "body": "well... the difference is that a <code>let x = mem::uninitialized()</code> allows you to take references to <code>x</code>, while <code>let x;</code> doesn&#39;t allow this. Therefor you can pass that reference to a function that only writes to that memory. A common example is <code>let mut x: [i8; 42] = mem::uninitialized(); some_slice_function(&amp;mut x)</code>"}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 21, "last_activity_date": 1540903133, "last_edit_date": 1540903133, "creation_date": 1475074486, "answer_id": 39751032, "question_id": 39750841, "link": "https://stackoverflow.com/questions/39750841/how-does-rust-know-whether-to-run-the-destructor-during-stack-unwind/39751032#39751032", "title": "How does Rust know whether to run the destructor during stack unwind?", "body": "<p>Using <a href=\"https://doc.rust-lang.org/stable/nomicon/drop-flags.html\" rel=\"nofollow noreferrer\">drop flags</a>.</p>\n\n<p>Rust (up to and including version 1.12) stores a boolean flag in every value whose type implements <code>Drop</code> (and thus increases that type's size by one byte). That flag decides whether to run the destructor. So when you do <code>b = bar()</code> it sets the flag for the <code>b</code> variable, and thus only runs <code>b</code>'s destructor. Vice versa with <code>a</code>.</p>\n\n<p>Note that starting from Rust version 1.13 (at the time of this writing the beta compiler) that flag is not stored in the type, but on the stack for every variable or temporary. This is made possible by the advent of the MIR in the Rust compiler. The MIR significantly simplifies the translation of Rust code to machine code, and thus enabled this feature to move drop flags to the stack. Optimizations will usually eliminate that flag if they can figure out at compile time when which object will be dropped.</p>\n\n<p>You can \"observe\" this flag in a Rust compiler up to version 1.12 by looking at the size of the type:</p>\n\n<pre><code>struct A;\n\nstruct B;\n\nimpl Drop for B {\n    fn drop(&amp;mut self) {}\n}\n\nfn main() {\n    println!(\"{}\", std::mem::size_of::&lt;A&gt;());\n    println!(\"{}\", std::mem::size_of::&lt;B&gt;());\n}\n</code></pre>\n\n<p>prints <code>0</code> and <code>1</code> respectively before stack flags, and <code>0</code> and <code>0</code> with stack flags.</p>\n\n<p>Using <code>mem::uninitialized</code> is still unsafe, however, because the compiler still sees the assignment to the <code>a</code> variable and sets the drop flag. Thus the destructor will be called on uninitialized memory. Note that in your example the <code>Drop</code> impl does not access any memory of your type (except for the drop flag, but that is invisible to you). Therefor you are not accessing the uninitialized memory (which is zero bytes in size anyway, since your type is a zero sized struct). To the best of my knowledge that means that your <code>unsafe { std::mem::uninitialized() }</code> code is actually safe, because afterwards no memory unsafety can occur.</p>\n"}, {"tags": [], "owner": {"reputation": 35314, "user_id": 344347, "user_type": "registered", "accept_rate": 33, "profile_image": "https://www.gravatar.com/avatar/1d83837bce9d9a2656c4f5704d40c430?s=128&d=identicon&r=PG", "display_name": "Pavel Strakhov", "link": "https://stackoverflow.com/users/344347/pavel-strakhov"}, "is_accepted": false, "score": 3, "last_activity_date": 1475075405, "last_edit_date": 1475075405, "creation_date": 1475075231, "answer_id": 39751310, "question_id": 39750841, "link": "https://stackoverflow.com/questions/39750841/how-does-rust-know-whether-to-run-the-destructor-during-stack-unwind/39751310#39751310", "title": "How does Rust know whether to run the destructor during stack unwind?", "body": "<p>First, there are <a href=\"https://doc.rust-lang.org/nomicon/drop-flags.html\" rel=\"nofollow\">drop flags</a> - runtime information for tracking which variables have been initialized. If a variable was not assigned to, <code>drop()</code> will not be executed for it.</p>\n\n<p>In stable, the drop flag is currently stored within the type itself. Writing uninitialized memory to it can cause undefined behavior as to whether <code>drop()</code> will or will not be called. This will soon be out of date information because the drop flag is moved out of the type itself in nightly.</p>\n\n<p>In nightly Rust, if you assign uninitialized memory to a variable, it would be safe to assume that <code>drop()</code> will be executed. However, any useful implementation of <code>drop()</code> will operate on the value. There is no way to detect if the type is properly initialized or not within the <code>Drop</code> trait implementation: it could result in trying to free an invalid pointer or any other random thing, depending on the <code>Drop</code> implementation of the type. Assigning uninitialized memory to a type with <code>Drop</code> is ill-advised anyway.</p>\n"}, {"comments": [{"owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "edited": false, "score": 0, "creation_date": 1475076387, "post_id": 39751502, "comment_id": 66799540, "body": "Further question: if <code>i</code> is even and compiler can track that <code>b</code> is uninitialized and not call its dtor on unwind, why can&#39;t it track something like <code>let u: Type = mem::uninitialized();</code> is uninitialized too (infact i&#39;m explicitly specifying it as such) and <b>not</b> call its dtor during stack unwind, unless it was assigned ?"}, {"owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "edited": false, "score": 1, "creation_date": 1475076467, "post_id": 39751502, "comment_id": 66799583, "body": "On the bonus part though - U.B should not be possible without <code>unsafe</code> code - so if it appears to work it better be a defined behavior since i haven&#39;t used any unsafe code in the main example in O.P. (in case you are referring to it)"}, {"owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "edited": false, "score": 0, "creation_date": 1475079544, "post_id": 39751502, "comment_id": 66801612, "body": "(b.t.w your answer is pretty explanatory/helpful as well but accepted the other just because it was put 1st and was equally helpful)"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "edited": false, "score": 0, "creation_date": 1475083296, "post_id": 39751502, "comment_id": 66803847, "body": "@ustulation: UB only occurs if you use <code>mem::uninitialized()</code> which requires <code>unsafe</code> code. I was merely commenting that &quot;nothing weird happening&quot; did not mean that you had steered clear of UB :) As for accepting another answer: you are free to accept whatever you wish! :)"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 17, "last_activity_date": 1475076603, "last_edit_date": 1475076603, "creation_date": 1475075786, "answer_id": 39751502, "question_id": 39750841, "link": "https://stackoverflow.com/questions/39750841/how-does-rust-know-whether-to-run-the-destructor-during-stack-unwind/39751502#39751502", "title": "How does Rust know whether to run the destructor during stack unwind?", "body": "<p>There are two questions hidden here:</p>\n\n<ol>\n<li>How does the compiler track which variable is initialized or not?</li>\n<li>Why may initializing with <code>mem::uninitialized()</code> lead to Undefined Behavior?</li>\n</ol>\n\n<p>Let's tackle them in order.</p>\n\n<hr>\n\n<blockquote>\n  <p>How does the compiler track which variable is initialized or not?</p>\n</blockquote>\n\n<p>The compiler injects so-called \"drop flags\": for each variable for which <code>Drop</code> must run at the end of the scope, a boolean flag is injected on the stack, stating whether this variable needs to be disposed of.</p>\n\n<p>The flag starts off \"no\", moves to \"yes\" if the variable is initialized, and back to \"no\" if the variable is moved from.</p>\n\n<p>Finally, when comes the time to drop this variable, the flag is checked and it is dropped if necessary.</p>\n\n<p>This is unrelated as to whether the compiler's flow analysis complains about potentially uninitialized variables: only when the flow analysis is satisfied is code generated.</p>\n\n<hr>\n\n<blockquote>\n  <p>Why may initializing with <code>mem::uninitialized()</code> lead to Undefined Behavior?</p>\n</blockquote>\n\n<p>When using <code>mem::uninitialized()</code> you make a promise to the compiler: <strong>don't worry, I'm definitely initializing this</strong>.</p>\n\n<p>As far as the compiler is concerned, the variable is therefore fully initialized, and the drop flag is set to \"yes\" (until you move out of it).</p>\n\n<p>This, in turn, means that <code>Drop</code> will be called.</p>\n\n<p>Using an uninitialized object is Undefined Behavior, and the compiler calling <code>Drop</code> on an uninitialized object on your behalf counts as \"using it\".</p>\n\n<hr>\n\n<p>Bonus:</p>\n\n<blockquote>\n  <p>In my tests, nothing weird happened!</p>\n</blockquote>\n\n<p>Note that Undefined Behavior means that anything can happen; anything, unfortunately, also includes \"seems to work\" (or even \"works as intended despite the odds\").</p>\n\n<p>In particular, if you do NOT access the object's memory in <code>Drop::drop</code> (just printing), then it's very likely that everything will just work. If you do access it, however, you might see weird integers, pointers pointing into the wild, etc...</p>\n\n<p>And if the optimizer is clever, even without accessing it, it might do weird things! Since we are using LLVM, I invite you to read <a href=\"http://blog.llvm.org/2011/05/what-every-c-programmer-should-know_14.html\">What every C programmer should know about Undefined Behavior</a> by Chris Lattner (LLVM's father).</p>\n"}], "owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2323, "favorite_count": 2, "accepted_answer_id": 39751032, "answer_count": 3, "score": 21, "last_activity_date": 1540903133, "creation_date": 1475073945, "last_edit_date": 1525721365, "question_id": 39750841, "link": "https://stackoverflow.com/questions/39750841/how-does-rust-know-whether-to-run-the-destructor-during-stack-unwind", "title": "How does Rust know whether to run the destructor during stack unwind?", "body": "<p>The documentation for <a href=\"https://doc.rust-lang.org/std/mem/fn.uninitialized.html#undefined-behavior\"><code>mem::uninitialized</code></a> points out why it is dangerous/unsafe to use that function: calling <code>drop</code> on uninitialized memory is undefined behavior.</p>\n\n<p>So this code should be, I believe, undefined:</p>\n\n<pre><code>let a: TypeWithDrop = unsafe { mem::uninitialized() };\npanic!(\"=== Testing ===\"); // Destructor of `a` will be run (U.B)\n</code></pre>\n\n<p>However, I wrote this piece of code which works in safe Rust and does not seem to suffer from undefined behavior:</p>\n\n<pre><code>#![feature(conservative_impl_trait)]\n\ntrait T {\n    fn disp(&amp;mut self);\n}\n\nstruct A;\nimpl T for A {\n    fn disp(&amp;mut self) { println!(\"=== A ===\"); }\n}\nimpl Drop for A {\n    fn drop(&amp;mut self) { println!(\"Dropping A\"); }\n}\n\nstruct B;\nimpl T for B {\n    fn disp(&amp;mut self) { println!(\"=== B ===\"); }\n}\nimpl Drop for B {\n    fn drop(&amp;mut self) { println!(\"Dropping B\"); }\n}\n\nfn foo() -&gt; impl T { return A; }\nfn bar() -&gt; impl T { return B; }\n\nfn main() {\n    let mut a;\n    let mut b;\n\n    let i = 10;\n    let t: &amp;mut T = if i % 2 == 0 {\n        a = foo();\n        &amp;mut a\n    } else {\n        b = bar();\n        &amp;mut b\n    };\n\n    t.disp();\n    panic!(\"=== Test ===\");\n}\n</code></pre>\n\n<p>It always seems to execute the right destructor, while ignoring the other one. If I tried using <code>a</code> or <code>b</code> (like <code>a.disp()</code> instead of <code>t.disp()</code>) it correctly errors out saying I might be possibly using uninitialized memory. What surprised me is while <code>panic</code>king, it always runs the right destructor (printing the expected string) no matter what the value of <code>i</code> is.</p>\n\n<p>How does this happen? If the runtime can determine which destructor to run, should the part about memory mandatorily needing to be initialized for types with <code>Drop</code> implemented be removed from documentation of <code>mem::uninitialized()</code> as linked above?</p>\n"}, {"tags": ["rust", "glibc"], "comments": [{"owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "reply_to_user": {"reputation": 1903, "user_id": 1549474, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2766dac2718e51b8c5f4f021c8e740c4?s=128&d=identicon&r=PG", "display_name": "tumdum", "link": "https://stackoverflow.com/users/1549474/tumdum"}, "edited": false, "score": 3, "creation_date": 1475166613, "post_id": 39744926, "comment_id": 66845281, "body": "Accepting when things are terrible is the only way <a href=\"https://www.musl-libc.org/\" rel=\"nofollow noreferrer\">they get improved</a>. Sorry if I offended any GNU developers."}, {"owner": {"reputation": 162629, "user_id": 50617, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/YFykQ.png?s=128&g=1", "display_name": "Employed Russian", "link": "https://stackoverflow.com/users/50617/employed-russian"}, "reply_to_user": {"reputation": 1903, "user_id": 1549474, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2766dac2718e51b8c5f4f021c8e740c4?s=128&d=identicon&r=PG", "display_name": "tumdum", "link": "https://stackoverflow.com/users/1549474/tumdum"}, "edited": false, "score": 1, "creation_date": 1475209139, "post_id": 39744926, "comment_id": 66861136, "body": "You are intentionally offending the <i>very</i> people who can answer your question. I&#39;ll second @tumdum and suggest that you remove the counterproductive parts. As a partial answer, there <i>are</i> good reasons GLIBC works the way it does. And if you believe Musl is the answer, what exactly prevents you from using it?"}, {"owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "edited": false, "score": 0, "creation_date": 1475221481, "post_id": 39744926, "comment_id": 66866161, "body": "<code>armv7-unknown-linux-muscl</code> isn&#39;t available as a target yet unfortunately. Also if I <i>can</i> get this to work glibc 2.4 is an old enough (2006) that requiring it isn&#39;t unreasonable and it saves space compared to muscl. If there is no way around requiring 2.18 (2013) then muscl is definitely a better option."}, {"owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "edited": false, "score": 0, "creation_date": 1475223384, "post_id": 39744926, "comment_id": 66867117, "body": "Spoke too soon - Rust 1.12 was released today with support for <code>armv7-unknown-linux-musclabihf</code>!"}, {"owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "edited": false, "score": 0, "creation_date": 1475234637, "post_id": 39744926, "comment_id": 66873751, "body": "Actually, there are no binary releases for the muscl targets yet, but hopefully they will be coming soon."}], "answers": [{"comments": [{"owner": {"reputation": 1736, "user_id": 130554, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1affa5f0b72a1a76c8b72bc0ccc6f552?s=128&d=identicon&r=PG", "display_name": "Digikata", "link": "https://stackoverflow.com/users/130554/digikata"}, "edited": false, "score": 1, "creation_date": 1513894902, "post_id": 47239631, "comment_id": 82836193, "body": "Are there any thoughts you might be able to give for the toolchain&#39;s use of glib to perhaps relax the use of __cxa_thread_atexit_impl? Can the function only be used by an explicit call from the toolchain, or is there a path to end up indirectly using it?"}], "tags": [], "owner": {"reputation": 26934, "user_id": 8316315, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/44d833a8a46fea39d7bfca1540ea9c07?s=128&d=identicon&r=PG&f=1", "display_name": "Florian Weimer", "link": "https://stackoverflow.com/users/8316315/florian-weimer"}, "is_accepted": false, "score": 3, "last_activity_date": 1510414575, "creation_date": 1510414575, "answer_id": 47239631, "question_id": 39744926, "link": "https://stackoverflow.com/questions/39744926/how-can-i-compile-a-rust-program-so-it-doesnt-use-cxa-thread-atexit-impl/47239631#47239631", "title": "How can I compile a Rust program so it doesn&#39;t use __cxa_thread_atexit_impl?", "body": "<p>You need a Rust toolchain which was compiled for glibc 2.16 or earlier.  glibc 2.17 likely works as well because it lacks <code>__cxa_thread_atexit_impl</code>, so that it will not carry a <code>GLIBC_2.18</code> symbol version in the binary.</p>\n\n<p>The use of the weak symbol in the Rust code is not particularly useful because GNU's particular version of ELF symbol versioning does not have weak symbol versions.  We might change that eventually, but right now, the best way to deal with this is to compile with a sufficiently old toolchain.</p>\n\n<p>Another option is to backport the symbol into the glibc you use.  This should be a fairly isolated backport, probably consisting of these commits:</p>\n\n<ul>\n<li><a href=\"https://sourceware.org/git/gitweb.cgi?p=glibc.git;a=commitdiff;h=ba384f6ed9275f3966505f2375b56d169e3dc588\" rel=\"nofollow noreferrer\">C++11 thread_local destructors support\n</a></li>\n<li><a href=\"https://sourceware.org/git/gitweb.cgi?p=glibc.git;a=commitdiff;h=e57b0c6100e63bfd816ae59339452eafc81f1d3a\" rel=\"nofollow noreferrer\">Avoid unconditional __call_tls_dtors calls in static linking.</a></li>\n<li><a href=\"https://sourceware.org/git/gitweb.cgi?p=glibc.git;a=commitdiff;h=90b37cac8b5a3e1548c29d91e3e0bff1014d2e5c\" rel=\"nofollow noreferrer\">Also use l_tls_dtor_count to decide on object unload (BZ #18657)</a></li>\n<li><a href=\"https://sourceware.org/git/gitweb.cgi?p=glibc.git;a=commitdiff;h=f586e1328681b400078c995a0bb6ad301ef73549\" rel=\"nofollow noreferrer\">Harden tls_dtor_list with pointer mangling [BZ #19018]</a></li>\n</ul>\n\n<p>(I have not attempted the backport to glibc 2.16, but as far as such things go, it does not look particularly difficult.)</p>\n"}], "owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1581, "favorite_count": 1, "answer_count": 1, "score": 11, "last_activity_date": 1510414575, "creation_date": 1475058681, "last_edit_date": 1475070211, "question_id": 39744926, "link": "https://stackoverflow.com/questions/39744926/how-can-i-compile-a-rust-program-so-it-doesnt-use-cxa-thread-atexit-impl", "title": "How can I compile a Rust program so it doesn&#39;t use __cxa_thread_atexit_impl?", "body": "<p>I have compiled a Rust program for <code>armv7-unknown-linux-gnueabihf</code>, and I want it to run on a system that has glibc 2.16 installed. Unfortunately when running it I get this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>./foo: /lib/libc.so.6: version `GLIBC_2.18' not found (required by ./foo)\n</code></pre>\n\n<p>Running <code>objdump -T foo</code> reveals that the only symbol needed from glibc 2.18 is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>00000000  w   DF *UND*  00000000  GLIBC_2.18  __cxa_thread_atexit_impl\n</code></pre>\n\n<p><a href=\"https://github.com/rust-lang/rust/blob/d75c84af806b27137ca3d6cfeba4eb904655a7ad/src/libstd/thread/local.rs#L361-L369\" rel=\"noreferrer\">Rust makes <code>__cxa_thread_atexit_impl</code> a weak symbol</a> (as seen by the little <code>w</code> flag from <code>objdump</code>), however GCC is apparently stupid and even though all the <em>symbols</em> from GLIBC_2.18 are weak it still makes GLIBC_2.18 itself a strong requirement. You can see that with <code>readelf</code>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ readelf -V foo\n...\nVersion needs section '.gnu.version_r' contains 5 entries:\n Addr: 0x0000000000001e4c  Offset: 0x001e4c  Link: 6 (.dynstr)\n  000000: Version: 1  File: ld-linux-armhf.so.3  Cnt: 1\n  0x0010:   Name: GLIBC_2.4  Flags: none  Version: 9\n  0x0020: Version: 1  File: librt.so.1  Cnt: 1\n  0x0030:   Name: GLIBC_2.4  Flags: none  Version: 5\n  0x0040: Version: 1  File: libgcc_s.so.1  Cnt: 4\n  0x0050:   Name: GCC_4.3.0  Flags: none  Version: 10\n  0x0060:   Name: GCC_3.0  Flags: none  Version: 7\n  0x0070:   Name: GCC_3.5  Flags: none  Version: 6\n  0x0080:   Name: GCC_3.3.1  Flags: none  Version: 4\n  0x0090: Version: 1  File: libc.so.6  Cnt: 2\n  0x00a0:   Name: GLIBC_2.18  Flags: none  Version: 8\n  0x00b0:   Name: GLIBC_2.4  Flags: none  Version: 3\n  0x00c0: Version: 1  File: libpthread.so.0  Cnt: 1\n  0x00d0:   Name: GLIBC_2.4  Flags: none  Version: 2\n</code></pre>\n\n<p>Notice that <code>GLIBC_2.18</code> says <code>Flags: none</code>. It should say <code>Flags: WEAK</code>. Fortunately I found <a href=\"http://www.lightofdawn.org/wiki/wiki.cgi/NewAppsOnOldGlibc\" rel=\"noreferrer\">an amazing page where someone shows how to fix this</a>. Unfortunately it involves <strong><em>hex editing the binary</em></strong>!</p>\n\n<p>Take the offset of that <code>.gnu.version_r</code> table (<code>0x001e4c</code>), add the entry offset for <code>GLIBC_2.18</code> (<code>0x00a0</code>), then add an offset for the flags field of the struct at that address (<code>0x04</code>). That gives <code>0x001EF0</code>. At that address there should be two zero bytes: <code>0x0000</code>. Change them to <code>0x0200</code>.</p>\n\n<p>Verify with <code>readelf</code>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Version needs section '.gnu.version_r' contains 5 entries:\n Addr: 0x0000000000001e4c  Offset: 0x001e4c  Link: 6 (.dynstr)\n  000000: Version: 1  File: ld-linux-armhf.so.3  Cnt: 1\n  0x0010:   Name: GLIBC_2.4  Flags: none  Version: 9\n  0x0020: Version: 1  File: librt.so.1  Cnt: 1\n  0x0030:   Name: GLIBC_2.4  Flags: none  Version: 5\n  0x0040: Version: 1  File: libgcc_s.so.1  Cnt: 4\n  0x0050:   Name: GCC_4.3.0  Flags: none  Version: 10\n  0x0060:   Name: GCC_3.0  Flags: none  Version: 7\n  0x0070:   Name: GCC_3.5  Flags: none  Version: 6\n  0x0080:   Name: GCC_3.3.1  Flags: none  Version: 4\n  0x0090: Version: 1  File: libc.so.6  Cnt: 2\n  0x00a0:   Name: GLIBC_2.18  Flags: WEAK   Version: 8\n  0x00b0:   Name: GLIBC_2.4  Flags: none  Version: 3\n  0x00c0: Version: 1  File: libpthread.so.0  Cnt: 1\n  0x00d0:   Name: GLIBC_2.4  Flags: none  Version: 2\n</code></pre>\n\n<p>Success! Except it still doesn't work:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>./foo: /lib/libc.so.6: weak version `GLIBC_2.18' not found (required by ./foo)\n./foo: relocation error: ./foo: symbol __cxa_thread_atexit_impl, version GLIBC_2.18 not defined in file libc.so.6 with link time reference\n</code></pre>\n\n<p>How is the <em>weak</em> version still required?! I can't wait for glibc to die.</p>\n\n<p>Is there any way to get Rust to build the program without using this symbol?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 4, "creation_date": 1475048170, "post_id": 39740798, "comment_id": 66779023, "body": "<code>read_line()</code> also reads the newline; see <a href=\"http://stackoverflow.com/questions/39725783/rust-not-properly-reading-integer-input\">this question</a> for the same issue."}, {"owner": {"reputation": 1457, "user_id": 2849934, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3ff0a46f18c8d548fa91c12b922290b6?s=128&d=identicon&r=PG", "display_name": "John", "link": "https://stackoverflow.com/users/2849934/john"}, "edited": false, "score": 0, "creation_date": 1475059177, "post_id": 39740798, "comment_id": 66786618, "body": "The only extra symbol is <code>\\n</code> which is printed by <code>ls</code> as <code>$&#39;\\n&#39;</code>. In bash, newlines can be represented inside single quotes if the single quotes are preceded by <code>$</code>, and strings can be concatenated by simply placing them beside each other. That is, <code>$&#39;foo\\n&#39;</code> == <code>&#39;foo&#39;$&#39;\\n&#39;</code> == <code>&#39;fo&#39;$&#39;o\\n&#39;</code> == <code>&#39;f&#39;&#39;o&#39;&#39;o&#39;$&#39;\\n&#39;</code> == <code>&#39;f&#39;oo$&#39;\\n&#39;</code>. So just trim the final newline off!"}], "owner": {"reputation": 19, "user_id": 6888659, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0a896b9f921dab33257ca3e8c0aab5ad?s=128&d=identicon&r=PG&f=1", "display_name": "faras234", "link": "https://stackoverflow.com/users/6888659/faras234"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 54, "favorite_count": 0, "closed_date": 1475070136, "answer_count": 0, "score": 0, "last_activity_date": 1475070106, "creation_date": 1475047795, "last_edit_date": 1475070106, "question_id": 39740798, "link": "https://stackoverflow.com/questions/39740798/how-to-create-a-file-using-users-input-in-rust", "closed_reason": "Duplicate", "title": "How to create a file using user`s input in Rust?", "body": "<p>I am trying to create file using keyboard input, but the created file's name has unnecessary symbols.</p>\n\n<pre><code>use std::io;\nuse std::fs::File;\n\nfn main() {\n    let mut filesname = String::new();\n    io::stdin().read_line(&amp;mut filesname)\n        .ok()\n        .expect(\"cant read string\");\n    filecreate(&amp;filesname);\n}\n\nfn filecreate(path: &amp;str) {\n    let f = File::create(path);\n    println!(\"Ok, file {} was created.\", path);\n}\n</code></pre>\n\n<p>Using this code I wrote <code>\"foo.txt\"</code>, but my  file manager shows this file as \"'foo.txt'$'\\n'\".\nI can't figure out what I have to do with the user's input.</p>\n"}, {"tags": ["dependencies", "rust", "rust-cargo"], "comments": [{"owner": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "edited": false, "score": 1, "creation_date": 1475019790, "post_id": 39735660, "comment_id": 66769702, "body": "You can check out the <a href=\"http://doc.crates.io/manifest.html#the-features-section\" rel=\"nofollow noreferrer\">documentation</a> for it."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "edited": false, "score": 0, "creation_date": 1475025251, "post_id": 39735660, "comment_id": 66771031, "body": "I read this page, but didn&#39;t see examples of this."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1475069993, "post_id": 39735660, "comment_id": 66794574, "body": "It&#39;s under the comment <b># A list of all of the optional dependencies</b>."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1475095402, "post_id": 39735660, "comment_id": 66810576, "body": "@Shepmaster, yes, I read this. The difference is my dependency is local, instead of an optional external crate, the difference in syntax threw me. Updated the question to make this clear."}], "answers": [{"tags": [], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "is_accepted": false, "score": 6, "last_activity_date": 1475070055, "last_edit_date": 1475070055, "creation_date": 1475025486, "answer_id": 39736576, "question_id": 39735660, "link": "https://stackoverflow.com/questions/39735660/how-to-make-a-local-dependency-depend-on-a-feature-in-cargo/39736576#39736576", "title": "How to make a local dependency depend on a feature in Cargo?", "body": "<p>This can be done by adding the following:</p>\n\n<pre><code>[package]\nname = \"image_load\"\nversion = \"0.1.0\"\ndescription = \"Small wrapper for image reading API's.\"\n\n[features]\n\ndefault = [\"use_png\"]\nuse_png = [\"image_load_png\"]  # &lt;-- new line\n\n[dependencies]\n\n[dependencies.image_load_ppm]\npath = \"ppm\"\n\n[dependencies.image_load_png]\npath = \"png\"\noptional = true  # &lt;-- new line\n</code></pre>\n\n<p>Using the crate can be optional.</p>\n\n<p>e.g.:</p>\n\n<pre><code>#[cfg(feature = \"use_png\")]  // &lt;-- new line\nextern crate image_load_png;\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 1, "last_activity_date": 1475109164, "last_edit_date": 1495541969, "creation_date": 1475109164, "answer_id": 39759592, "question_id": 39735660, "link": "https://stackoverflow.com/questions/39735660/how-to-make-a-local-dependency-depend-on-a-feature-in-cargo/39759592#39759592", "title": "How to make a local dependency depend on a feature in Cargo?", "body": "<p>Dependencies marked as optional double as features. However, if you want a feature with a different name, you'll have to <a href=\"https://stackoverflow.com/a/39736576/234590\">define it manually</a>.</p>\n\n<p>For instance, if you mark the dependency <code>image_load_png</code> as optional, then <code>image_load_png</code> will only be compiled if the <code>image_load_png</code> feature is enabled. You can test for the feature being enabled in the Rust code just like any other feature.</p>\n\n<pre><code>[dependencies.image_load_png]\npath = \"png\"\noptional = true\n</code></pre>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1124, "favorite_count": 0, "answer_count": 2, "score": 3, "last_activity_date": 1475109164, "creation_date": 1475017606, "last_edit_date": 1475103419, "question_id": 39735660, "link": "https://stackoverflow.com/questions/39735660/how-to-make-a-local-dependency-depend-on-a-feature-in-cargo", "title": "How to make a local dependency depend on a feature in Cargo?", "body": "<p>Given this small library which uses local crates in subdirectories, how would I make one of the dependencies optional, depending on if a feature is enabled?</p>\n\n<pre><code>[package]\nname = \"image_load\"\ndescription = \"Small wrapper for image reading API's.\"\nversion = \"0.1.0\"\n\n[features]\n\ndefault = [\"use_png\"]\n\n[dependencies]\n\n[dependencies.image_load_ppm]\npath = \"ppm\"\n\n# How to make this build _only_ when 'use_png' feature is enabled?\n[dependencies.image_load_png]\npath = \"png\"\n</code></pre>\n\n<p>While I read <a href=\"http://doc.crates.io/manifest.html#the-features-section\" rel=\"nofollow\">the documentation</a>, this shows how to have optional <em>external</em> dependencies. In the example above I'm using a local subdirectory, which I want to build, or not - based on a feature.</p>\n\n<p>How can I make <code>image_load_png</code> only build when the <code>use_png</code> feature is enabled.</p>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 5, "creation_date": 1475016399, "post_id": 39734842, "comment_id": 66768782, "body": "Why do you want to return a <code>&amp;[u8]</code>? It seems completely natural for a function called <code>sign</code> to return a <code>Digest</code>."}], "answers": [{"tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": true, "score": 2, "last_activity_date": 1475151204, "last_edit_date": 1495540101, "creation_date": 1475016805, "answer_id": 39735558, "question_id": 39734842, "link": "https://stackoverflow.com/questions/39734842/retain-lifetime-of-variable-in-returned-value-for-array-of-u8/39735558#39735558", "title": "Retain lifetime of variable in returned value for array of u8", "body": "<p><code>signature</code> binds to a resource that, as it is, will only live in the scope of that function. Naturally, it would only be wrong to lend the signature's array, also living in the function, to something living outside the function. Therefore, expanding its lifetime, as you intended, is out of the question.</p>\n\n<p>With that in mind, there are two ways to go around this, ordered by preference:</p>\n\n<ul>\n<li>We can just pass the ownership of <code>signature</code> to the outside, by making the function return the <code>Digest</code>. Note that this <a href=\"https://stackoverflow.com/q/27835375/1233251\">doesn't mean that there will be deep copies of the content</a>. Return-value optimization can take place, which will produce the returned object in-place if it's larger than a pointer. On the other hand, this seems to be more of an <a href=\"https://internals.rust-lang.org/t/implementation-details/948/6\" rel=\"nofollow noreferrer\">implementation detail</a> rather than a guarantee of the language. I would look into the compiled assembly if this is a true concern.</li>\n<li>Alternatively, the library could be rewritten (or modified with an expanded API) to accept a mutable reference to a buffer (which might need to support resizing, such as <code>&amp;mut Vec&lt;u8&gt;</code>). Of course, this implies proposing and implementing acceptable changes to this library, but the former approach to your problem might just suffice.</li>\n</ul>\n"}], "owner": {"reputation": 127444, "user_id": 492405, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/SSPGk.png?s=128&g=1", "display_name": "vcsjones", "link": "https://stackoverflow.com/users/492405/vcsjones"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 123, "favorite_count": 0, "accepted_answer_id": 39735558, "answer_count": 1, "score": 0, "last_activity_date": 1475151204, "creation_date": 1475012819, "last_edit_date": 1475069928, "question_id": 39734842, "link": "https://stackoverflow.com/questions/39734842/retain-lifetime-of-variable-in-returned-value-for-array-of-u8", "title": "Retain lifetime of variable in returned value for array of u8", "body": "<p>I'm trying to get the hang of Rust lifetimes. While I seem to understand them, I don't seem to know the best way to fix it. Here is a function where I am using the *ring* package to generate a SHA256 HMAC. Here is a simplified version of the function that reproduced the problem:</p>\n\n<pre><code>fn sign&lt;'b&gt;(data: &amp;[u8], key: &amp;[u8]) -&gt; &amp;'b [u8] {\n    let hmac_key = hmac::SigningKey::new(&amp;digest::SHA256, key);\n    let signature = hmac::sign(&amp;hmac_key, data);\n    let data = signature.as_ref();\n    data\n}\n</code></pre>\n\n<p>This doesn't work because <code>signature</code> doesn't live long enough. That makes sense; <code>as_ref</code> has a <em>reference</em> to <code>signature</code>, and signature doesn't live past the end of the function.</p>\n\n<p><code>as_ref</code> is the recommended way in *ring* to get a <code>&amp;[u8]</code> from its <code>Digest</code> structure as seen in the <a href=\"https://briansmith.org/rustdoc/ring/digest/struct.Digest.html\" rel=\"nofollow\">documentation</a>.</p>\n\n<p>How do I correct the issue where <code>signature</code> does not live long enough without copying the entire contents of the byte array?</p>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"tags": [], "owner": {"reputation": 1295, "user_id": 1114328, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d211889b453feb9210d9645cbcfd524e?s=128&d=identicon&r=PG", "display_name": "durka42", "link": "https://stackoverflow.com/users/1114328/durka42"}, "is_accepted": true, "score": 4, "last_activity_date": 1475010686, "creation_date": 1475010686, "answer_id": 39734372, "question_id": 39734321, "link": "https://stackoverflow.com/questions/39734321/is-it-possible-to-disable-a-single-default-feature-in-cargo/39734372#39734372", "title": "Is it possible to disable a single default feature in Cargo?", "body": "<p>This is not currently possible, but your motivation sounds reasonable. Ideas for improvements to Cargo can be submitted as <a href=\"https://github.com/rust-lang/cargo/issues\" rel=\"nofollow noreferrer\">GitHub issues</a> or (for more major things than this) <a href=\"https://github.com/rust-lang/rfcs\" rel=\"nofollow noreferrer\">RFCs</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 5005, "user_id": 573149, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Wn0FW.jpg?s=128&g=1", "display_name": "Andrew Mackenzie", "link": "https://stackoverflow.com/users/573149/andrew-mackenzie"}, "is_accepted": false, "score": 2, "last_activity_date": 1560952706, "last_edit_date": 1560952706, "creation_date": 1560617265, "answer_id": 56612337, "question_id": 39734321, "link": "https://stackoverflow.com/questions/39734321/is-it-possible-to-disable-a-single-default-feature-in-cargo/56612337#56612337", "title": "Is it possible to disable a single default feature in Cargo?", "body": "<p>Currently, No. You have to disable all \"default\" features, then opt back in for the ones you want. So you have to know what the \"default\" list is, and opt-back-in for all but the one you want to omit.</p>\n\n<p>This <a href=\"https://github.com/rust-lang/cargo/issues/3126\" rel=\"nofollow noreferrer\">GH issue</a> describes the status and discusses possibilities, but remains open (3y later).</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3905, "favorite_count": 1, "accepted_answer_id": 39734372, "answer_count": 2, "score": 12, "last_activity_date": 1560952706, "creation_date": 1475010393, "last_edit_date": 1475053776, "question_id": 39734321, "link": "https://stackoverflow.com/questions/39734321/is-it-possible-to-disable-a-single-default-feature-in-cargo", "title": "Is it possible to disable a single default feature in Cargo?", "body": "<p>From reading <a href=\"http://doc.crates.io/manifest.html\" rel=\"noreferrer\">this page</a>, it states that you need to turn off all defaults to override them.</p>\n\n<blockquote>\n  <p>With the exception of the <code>default</code> feature, all features are opt-in. To opt out of the default feature, use <code>default-features = false</code> and cherry-pick individual features.</p>\n</blockquote>\n\n<p>Other build systems I've used (CMake, SCons, Autotools, Jam) all allow to change a single default.</p>\n\n<p>Is this possible with Cargo?</p>\n\n<hr>\n\n<p><em>This is useful because in most cases I want to use default options, with only minor adjustments.\nIts also important to me that in the future - new features which the developers think should be enabled by default, are not disabled on my build because I chose to adjust an unrelated feature.</em></p>\n\n<p>Edit: <a href=\"https://github.com/rust-lang/cargo/issues/3126\" rel=\"noreferrer\">opened issue regarding this feature</a>.</p>\n"}, {"tags": ["rust", "conditional-compilation", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "edited": false, "score": 0, "creation_date": 1475039552, "post_id": 39733370, "comment_id": 66774623, "body": "Sure! Now it&#39;s clear. With the exclamation it applies to the whole &quot;block&quot;, as it&#39;s at the top of the file it apples to the whole module. Thanks."}, {"owner": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "edited": false, "score": 0, "creation_date": 1475040670, "post_id": 39733370, "comment_id": 66775017, "body": "one problem remains though: cargo build complains now with <code>error: main function not found</code>. How would I avoid that?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "edited": false, "score": 0, "creation_date": 1475044331, "post_id": 39733370, "comment_id": 66776744, "body": "@PhilippKeller: You can provide a <code>#[cfg(not(target_os = &quot;linux&quot;))] fn main() {}</code>, however I fear here that annotating <i>within</i> the module is messy. Are you sure there is no way to simply tell cargo to only consider the file on Linux?"}, {"owner": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "edited": false, "score": 0, "creation_date": 1475072613, "post_id": 39733370, "comment_id": 66796737, "body": "I couldn&#39;t find anything in the cargo.toml docs. The thing that comes close is the [<a href=\"http://doc.crates.io/manifest.html#the-features-section](features)\" rel=\"nofollow noreferrer\">doc.crates.io/manifest.html#the-features-section](features)</a> section, but that&#39;s for handing over arguments which were given with <code>cargo</code> to the <code>#[cfg</code> attributes"}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 7, "last_activity_date": 1475046115, "last_edit_date": 1475046115, "creation_date": 1475006620, "answer_id": 39733370, "question_id": 39733252, "link": "https://stackoverflow.com/questions/39733252/how-do-i-exclude-a-file-from-being-built-on-os-x/39733370#39733370", "title": "How do I exclude a file from being built on OS X?", "body": "<p>Writing <code>#![cfg(target_os = \"linux\")]</code> (note the exclamation mark) at the top of the file will work for the whole file (as long as it contains a single module), not just for the next block (item). Source: <a href=\"https://doc.rust-lang.org/reference.html#attributes\" rel=\"nofollow\">Rust reference</a>.</p>\n\n<p><strong>Edit</strong>: if you can move that file into its own crate, you could take advantage of Cargo's <a href=\"http://doc.crates.io/specifying-dependencies.html#platform-specific-dependencies\" rel=\"nofollow\">platform-specific dependencies</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "is_accepted": false, "score": 0, "last_activity_date": 1475219071, "creation_date": 1475219071, "answer_id": 39785606, "question_id": 39733252, "link": "https://stackoverflow.com/questions/39733252/how-do-i-exclude-a-file-from-being-built-on-os-x/39785606#39785606", "title": "How do I exclude a file from being built on OS X?", "body": "<p>it looks like that's currently not possible. I filed a <a href=\"https://github.com/rust-lang/cargo/issues/3138\" rel=\"nofollow\">feature request</a></p>\n"}], "owner": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 451, "favorite_count": 0, "answer_count": 2, "score": 4, "last_activity_date": 1475219071, "creation_date": 1475006202, "last_edit_date": 1475069815, "question_id": 39733252, "link": "https://stackoverflow.com/questions/39733252/how-do-i-exclude-a-file-from-being-built-on-os-x", "title": "How do I exclude a file from being built on OS X?", "body": "<p>I have <code>src/bin/linux-only.rs</code> which does some things which work on Linux only (e.g. libc bindings which only exist on Linux). I want to exclude that file from being built on OS X.</p>\n\n<p>I started putting <code>#[cfg(target_os = \"linux\")]</code> on every block in <code>linux-only.rs</code> but that is cluttering up the source code beyond any reason.</p>\n\n<p>Is there a nicer way to do this?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 35, "user_id": 5971856, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/53865ee49f887675b70ca7e0d0811e37?s=128&d=identicon&r=PG&f=1", "display_name": "Kavanaugh Dempsey", "link": "https://stackoverflow.com/users/5971856/kavanaugh-dempsey"}, "edited": false, "score": 0, "creation_date": 1474982855, "post_id": 39725863, "comment_id": 66749301, "body": "Thank you! I originally tried to trim the string, but forgot that the function returns a new string, it doesn&#39;t manipulate the old one. Thank you very much for your response!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 35, "user_id": 5971856, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/53865ee49f887675b70ca7e0d0811e37?s=128&d=identicon&r=PG&f=1", "display_name": "Kavanaugh Dempsey", "link": "https://stackoverflow.com/users/5971856/kavanaugh-dempsey"}, "edited": false, "score": 0, "creation_date": 1474983436, "post_id": 39725863, "comment_id": 66749719, "body": "@KavanaughDempsey <i>the function returns a new string</i> \u2014 just to be specific, <code>trim</code> returns a new <i>string slice</i> (<code>&amp;str</code>); this refers to the existing string and doesn&#39;t allocate a new <i>owned string</i> (<code>String</code>)."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 0, "creation_date": 1474983637, "post_id": 39725863, "comment_id": 66749835, "body": "Instead of <code>.trim().split(&quot; &quot;)</code> you might also consider <code>.split_whitespace()</code>."}], "tags": [], "owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "is_accepted": false, "score": 8, "last_activity_date": 1474983319, "last_edit_date": 1474983319, "creation_date": 1474982673, "answer_id": 39725863, "question_id": 39725783, "link": "https://stackoverflow.com/questions/39725783/rust-not-properly-reading-integer-input/39725863#39725863", "title": "Rust not properly reading integer input", "body": "<p>This is because <code>io::stdin().read_line(&amp;mut String)</code> also adds a trailing newline character to the string, which causes the last str after splitting with <code>\" \"</code> to be <code>\"123\\n\"</code>, which is not a valid integer. You can use <code>str::trim()</code> for this:</p>\n\n<pre><code>use std::io;\n\nfn main() {\n    let mut string = String::new();\n    io::stdin().read_line(&amp;mut string);\n\n    let int_vec: Vec&lt;u32&gt; = string.trim()\n        .split(\" \")\n        .map(|x| {\n            x.parse::&lt;u32&gt;()\n                .expect(\"Not an integer!\")\n        })\n        .collect();\n\n    for i in (0..int_vec.len()).rev() {\n        print!(\"{} \", int_vec[i]);\n    }\n}\n</code></pre>\n\n<p>With this change, the program works:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ ./a\n1 2 3\n3 2 1\n</code></pre>\n\n<p>Also, you can simplify your <code>for</code> loop:</p>\n\n<pre><code>for i in int_vec.iter().rev() {\n    print!(\"{} \", i);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 5, "last_activity_date": 1474983349, "last_edit_date": 1474983349, "creation_date": 1474982909, "answer_id": 39725958, "question_id": 39725783, "link": "https://stackoverflow.com/questions/39725783/rust-not-properly-reading-integer-input/39725958#39725958", "title": "Rust not properly reading integer input", "body": "<p>You ran into the old problem of the terminating line-ending. Let's try putting</p>\n\n<pre><code>println!(\"{:?}\", string); \n</code></pre>\n\n<p>in the third line of your code. For the input <code>1 2 3</code> it will print (on Windows):</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>\"1 2 3\\r\\n\"\n</code></pre>\n\n<p>So at some point you are trying to parse <code>\"3\\r\\n\"</code> as integer, which obviously fails. One easy way to remove trailing and leading whitespace from a string is to use <a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.trim\" rel=\"nofollow\"><code>trim()</code></a>. This works:</p>\n\n<pre><code>let int_vec: Vec&lt;_&gt; = string.trim().split(\" \")\n    .map(|x| x.parse::&lt;u32&gt;().expect(\"Not an integer!\"))\n    .collect();\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1474983471, "post_id": 39726074, "comment_id": 66749739, "body": "TIL: there is an <code>inspect</code> function! That&#39;s very useful indeed to peek in the middle of the stream."}], "tags": [], "owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "is_accepted": false, "score": 10, "last_activity_date": 1474983290, "last_edit_date": 1474983290, "creation_date": 1474983175, "answer_id": 39726074, "question_id": 39725783, "link": "https://stackoverflow.com/questions/39725783/rust-not-properly-reading-integer-input/39726074#39726074", "title": "Rust not properly reading integer input", "body": "<p>In addition to Dogberts answer... it might be helpful to see how you might be able to debug this sort of issue with an iterator yourself in future.</p>\n\n<p>The <code>Iterator</code> trait exposes an <code>inspect</code> function that you can use to inspect each item. Converting your code to use <code>inspect</code> both before and after each map results in:</p>\n\n<pre><code>let int_vec: Vec&lt;u32&gt; = string.split(\" \")\n.inspect(|x| println!(\"About to parse: {:?}\", x))\n.map(|x| {\n    x.parse::&lt;u32&gt;()\n        .expect(\"Not an integer!\")\n})\n.inspect(|x| println!(\"Parsed {:?} successfully!\", x))\n.collect();\n</code></pre>\n\n<p>Outputs:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>1 2 3\nAbout to parse: \"1\"\nParsed 1 successfully!\nAbout to parse: \"2\"\nParsed 2 successfully!\nAbout to parse: \"3\\n\"\n\nthread '&lt;main&gt;' panicked at 'Not an integer!...\n</code></pre>\n\n<p>Notice what its attempting to parse when it gets to the number 3.</p>\n\n<p>Of course, you can inspect <code>string</code> all by itself. <code>inspect</code> is handy though for when iterators are involved.</p>\n"}], "owner": {"reputation": 35, "user_id": 5971856, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/53865ee49f887675b70ca7e0d0811e37?s=128&d=identicon&r=PG&f=1", "display_name": "Kavanaugh Dempsey", "link": "https://stackoverflow.com/users/5971856/kavanaugh-dempsey"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 523, "favorite_count": 1, "answer_count": 3, "score": 2, "last_activity_date": 1475858202, "creation_date": 1474982481, "last_edit_date": 1474982613, "question_id": 39725783, "link": "https://stackoverflow.com/questions/39725783/rust-not-properly-reading-integer-input", "title": "Rust not properly reading integer input", "body": "<p>I'm trying to test out my Rust skills with a simple program that reads multiple integers from a single line of input. It compiles correctly, but unfortunately when it receives the input of <code>1 2 3</code>, it panics, saying that the input wasn't a valid integer. Can someone please explain the reason for this, and also provide an explanation as to how I can fix my program?</p>\n\n<pre><code>use std::io;\n\nfn main() {\n    let mut string = String::new();\n    io::stdin().read_line(&amp;mut string);\n\n    let int_vec: Vec&lt;u32&gt; = string.split(\" \")\n        .map(|x| x.parse::&lt;u32&gt;().expect(\"Not an integer!\"))\n        .collect();\n\n     for i in (0..int_vec.len()).rev() {\n         print!(\"{} \", int_vec[i]);\n     }\n}\n</code></pre>\n"}, {"tags": ["hashmap", "iterator", "rust"], "comments": [{"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 3, "creation_date": 1474959393, "post_id": 39717775, "comment_id": 66733416, "body": "Did you forget the return type?"}, {"owner": {"reputation": 33796, "user_id": 45525, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/TKzgD.png?s=128&g=1", "display_name": "Synesso", "link": "https://stackoverflow.com/users/45525/synesso"}, "reply_to_user": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1474962383, "post_id": 39717775, "comment_id": 66735383, "body": "I omitted it to see what problem I have with the statement as it is. I had a return type in some long distant iteration of this code. Updated."}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1474963121, "post_id": 39718977, "comment_id": 66735851, "body": "Note: you can use <code>Option::cloned</code> to move from an <code>Option&lt;&amp;T&gt;</code> to an <code>Option&lt;T&gt;</code>, this makes for shorter code: <code>string.split(&quot;:&quot;).map(|s: &amp;str| lookup.get(s).cloned()).collect()</code>"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1474963876, "post_id": 39718977, "comment_id": 66736314, "body": "Didn&#39;t know about that, very handy; I&#39;ll include it in the answer."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 3, "last_activity_date": 1474964066, "last_edit_date": 1474964066, "creation_date": 1474962420, "answer_id": 39718977, "question_id": 39717775, "link": "https://stackoverflow.com/questions/39717775/iterator-map-with-hashmap-lookup-fail-on-any-key-not-present/39718977#39718977", "title": "Iterator map with HashMap lookup. Fail on any key not present", "body": "<p>In order to avoid this issue, instead of <code>Vec&lt;Option&lt;&amp;u32&gt;&gt;</code> you could just return <code>Vec&lt;Option&lt;u32&gt;&gt;</code>:</p>\n\n<pre><code>fn parse(string: &amp;String, lookup: HashMap&lt;String, u32&gt;) -&gt; Vec&lt;Option&lt;u32&gt;&gt; {\n    string.split(\":\").map(|s: &amp;str| if let Some(&amp;e) = lookup.get(s) { Some(e) } else { None }).collect()\n}\n</code></pre>\n\n<p>Which, as Matthieu suggested, can be simplified to:</p>\n\n<pre><code>string.split(\":\").map(|s: &amp;str| lookup.get(s).cloned()).collect()\n</code></pre>\n\n<p>I'm not sure if it adds value if you wrap it in a <code>Result</code>; you can easily check for <code>None</code> afterwards:</p>\n\n<pre><code>let v = vec![Some(1), None, Some(3)];\nprintln!(\"{:?}\", v.contains(&amp;None));\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 6, "last_activity_date": 1474964893, "last_edit_date": 1474964893, "creation_date": 1474963318, "answer_id": 39719279, "question_id": 39717775, "link": "https://stackoverflow.com/questions/39717775/iterator-map-with-hashmap-lookup-fail-on-any-key-not-present/39719279#39719279", "title": "Iterator map with HashMap lookup. Fail on any key not present", "body": "<p>The <a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.get\" rel=\"nofollow\"><code>HashMap::get()</code></a> method returns an optional <em>reference</em> to the value inside of the map. So you have an iterator over <code>Option&lt;&amp;u32&gt;</code>, but you want to have an iterator over <code>Option&lt;u32&gt;</code>. This is done by saying:</p>\n\n<pre><code>lookup.get(s).cloned()\n//           ^^^^^^^^^\n</code></pre>\n\n<p>This makes your current code compile.</p>\n\n<hr>\n\n<p>To answer the question in your title: there is a neat little <a href=\"https://doc.rust-lang.org/std/iter/trait.FromIterator.html\" rel=\"nofollow\"><code>FromIterator</code></a> impl:</p>\n\n<pre><code>impl&lt;A, V&gt; FromIterator&lt;Option&lt;A&gt;&gt; for Option&lt;V&gt; where V: FromIterator&lt;A&gt;\n</code></pre>\n\n<p>This means, that,  for example, you can collect an iterator over items of types <code>Option&lt;u32&gt;</code> into <code>Option&lt;Vec&lt;u32&gt;&gt;</code>. This is exactly what you want! So just change your return type:</p>\n\n<pre><code>fn parse(string: &amp;str, lookup: &amp;HashMap&lt;String, u32, FastHasher&gt;) -&gt; Option&lt;Vec&lt;u32&gt;&gt; {\n//                                                                   ^^^^^^^^^^^^^^^^\n    string.split(\":\").map(|s| lookup.get(s).cloned()).collect()\n}\n</code></pre>\n\n<p>You can try the working code <a href=\"https://play.rust-lang.org/?gist=343ba1e477f1ed2402f5772ff01deab7&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">here on playground</a>.</p>\n\n<hr>\n\n<p>Also note the following, question-independent changes I made:</p>\n\n<ul>\n<li>The <code>string</code> argument is <code>&amp;str</code> now instead of <code>&amp;String</code>. There is practically no reason for ever passing <code>&amp;String</code> instead of <code>&amp;str</code>, so the latter is preferred for being more generic.</li>\n<li>The explicit type annotation of the closure argument is not required.</li>\n<li>You probably want to pass a reference to the <code>HashMap</code>, as your function does not need to own it.</li>\n</ul>\n"}, {"tags": [], "owner": {"reputation": 10368, "user_id": 435904, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/ce3dbd2b9c6693c6472c947e758a0e24?s=128&d=identicon&r=PG", "display_name": "4e6", "link": "https://stackoverflow.com/users/435904/4e6"}, "is_accepted": true, "score": 1, "last_activity_date": 1474964934, "last_edit_date": 1474964934, "creation_date": 1474964655, "answer_id": 39719686, "question_id": 39717775, "link": "https://stackoverflow.com/questions/39717775/iterator-map-with-hashmap-lookup-fail-on-any-key-not-present/39719686#39719686", "title": "Iterator map with HashMap lookup. Fail on any key not present", "body": "<p>If you really want to return the references, you should specify lifetimes explicitly:</p>\n\n<pre><code>pub fn parse&lt;'a, 'b&gt;(string: &amp;'a str, lookup: &amp;'b HashMap&lt;String, u32&gt;) -&gt; Vec&lt;Option&lt;&amp;'b u32&gt;&gt; {\n    string.split(\":\").map(|s| lookup.get(s)).collect()\n}\n</code></pre>\n\n<p>Regarding the second part of the question about the conversion to <code>Result</code> type:</p>\n\n<blockquote>\n  <p>And after I've done that, how can I wrap in an <code>Ok</code> or <code>Err</code> depending\n  upon the presence of any <code>None</code>s?</p>\n</blockquote>\n\n<p>This can be done by folding and accumulating the results into <code>Ok&lt;Vec&lt;u32&gt;&gt;</code>. Following example illustrates the idea. See <a href=\"https://play.rust-lang.org/?gist=c9eaef90d27efa7c205f1d5eba6d6554&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">Rust Playground</a> runnable example.</p>\n\n<pre><code>use std::collections::HashMap;\nuse std::result::Result;\n\n#[derive(Debug)]\npub struct ParseError {\n    key: String,\n}\n\nimpl ParseError {\n    fn new(k: &amp;str) -&gt; ParseError {\n        ParseError { key: k.to_owned() }\n    }\n}\n\nfn parse(string: &amp;str, lookup: &amp;HashMap&lt;String, u32&gt;) -&gt; Result&lt;Vec&lt;u32&gt;, ParseError&gt; {\n    string.split(\":\")\n        .fold(Ok(Vec::new()), |res, s| {\n            let mut vec = try!(res);\n            match lookup.get(s) {\n                Some(&amp;v) =&gt; {\n                    vec.push(v);\n                    Ok(vec)\n                }\n                None =&gt; Err(ParseError::new(s)),\n            }\n        })\n}\n</code></pre>\n"}], "owner": {"reputation": 33796, "user_id": 45525, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/TKzgD.png?s=128&g=1", "display_name": "Synesso", "link": "https://stackoverflow.com/users/45525/synesso"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 149, "favorite_count": 0, "accepted_answer_id": 39719686, "answer_count": 3, "score": 1, "last_activity_date": 1474979386, "creation_date": 1474958665, "last_edit_date": 1474979386, "question_id": 39717775, "link": "https://stackoverflow.com/questions/39717775/iterator-map-with-hashmap-lookup-fail-on-any-key-not-present", "title": "Iterator map with HashMap lookup. Fail on any key not present", "body": "<p>I have a <code>String</code> with colon-separated values. Each sub-string should be a key in a map. I want to write a function that converts the <code>String</code> into a <code>Vec</code> of map values, or a failure if any key is not present.</p>\n\n<p>My attempt so far is incomplete, but I'm taking it in small steps. The first step is to convert the string into a vector of optional <code>u32</code>s. (This may not the best approach):</p>\n\n<pre><code>fn parse(string: &amp;String, lookup: HashMap&lt;String, u32, FastHasher&gt;) -&gt; Vec&lt;Option&lt;u32&gt;&gt; {\n    string.split(\":\").map(|s: &amp;str| lookup.get(s)).collect()\n}\n</code></pre>\n\n<p>This results in</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: the trait bound `std::vec::Vec&lt;std::option::Option&lt;u32&gt;&gt;: std::iter::FromIterator&lt;std::option::Option&lt;&amp;u32&gt;&gt;` is not satisfied [--explain E0277]\n --&gt; &lt;anon&gt;:8:52\n  |&gt;\n8 |&gt;     string.split(\":\").map(|s: &amp;str| lookup.get(s)).collect()\n  |&gt;                                                    ^^^^^^^\nnote: a collection of type `std::vec::Vec&lt;std::option::Option&lt;u32&gt;&gt;` cannot be built from an iterator over elements of type `std::option::Option&lt;&amp;u32&gt;`\n</code></pre>\n\n<p>I believe this means I need to import or write my own from-iterator behaviour for <code>Option&lt;&amp;u32&gt;</code>, right?</p>\n\n<p>After I've done that, how can I wrap in an <code>Ok</code> or <code>Err</code> depending upon the presence of any <code>None</code>s?</p>\n"}, {"tags": ["rust", "low-level", "trait-objects"], "answers": [{"comments": [{"owner": {"reputation": 1122, "user_id": 892584, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/4403f52eda5458b0ce029c80a379a09d?s=128&d=identicon&r=PG", "display_name": "Chase Walden", "link": "https://stackoverflow.com/users/892584/chase-walden"}, "edited": false, "score": 0, "creation_date": 1474936813, "post_id": 39714353, "comment_id": 66726724, "body": "That is an approach I initially attempted to use. Do you know if it is possible to determine the offsets of the functions by name? So I could theoretically override functions at runtime? i.e. <code>override(object, &lt;SomeTrait&gt;::fn_1, impl_1)</code>?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 1122, "user_id": 892584, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/4403f52eda5458b0ce029c80a379a09d?s=128&d=identicon&r=PG", "display_name": "Chase Walden", "link": "https://stackoverflow.com/users/892584/chase-walden"}, "edited": false, "score": 0, "creation_date": 1474937320, "post_id": 39714353, "comment_id": 66726839, "body": "I don&#39;t think it&#39;s possible. In C++, I think you can sort of do this with member function pointers, but Rust doesn&#39;t have those."}, {"owner": {"reputation": 1122, "user_id": 892584, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/4403f52eda5458b0ce029c80a379a09d?s=128&d=identicon&r=PG", "display_name": "Chase Walden", "link": "https://stackoverflow.com/users/892584/chase-walden"}, "edited": false, "score": 0, "creation_date": 1474937534, "post_id": 39714353, "comment_id": 66726869, "body": "Damn. Well I thought I&#39;d at least see how far I could push the bounds with TraitObjects and Dynamic Dispatch. This is a pretty good start though."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 3, "last_activity_date": 1474936398, "creation_date": 1474936398, "answer_id": 39714353, "question_id": 39714105, "link": "https://stackoverflow.com/questions/39714105/is-there-a-way-to-determine-the-offsets-of-each-of-the-trait-methods-in-the-vtab/39714353#39714353", "title": "Is there a way to determine the offsets of each of the trait methods in the VTable?", "body": "<p>If you don't mind detecting the layout at runtime, then you can compare the function addresses at specific offsets and compare them to the addresses of a known, dummy implementation to match them up. This assumes that you know how many methods there are in the trait, since you may need to read all of them.</p>\n\n<pre><code>use std::mem;\n\ntrait SomeTrait {\n    fn fn_1(&amp;self);\n    fn fn_2(&amp;self, a: i64);\n    fn fn_3(&amp;self, a: i64, b: i64);\n}\n\nstruct Dummy;\n\nimpl SomeTrait for Dummy {\n    fn fn_1(&amp;self) { unimplemented!() }\n    fn fn_2(&amp;self, _a: i64) { unimplemented!() }\n    fn fn_3(&amp;self, _a: i64, _b: i64) { unimplemented!() }\n}\n\nstruct TraitObject {\n    data: *mut (),\n    vtable: *mut (),\n}\n\nfn main() {\n    unsafe {\n        let fn_1 = Dummy::fn_1 as *const ();\n        let fn_2 = Dummy::fn_2 as *const ();\n        let fn_3 = Dummy::fn_3 as *const ();\n\n        let dummy = &amp;mut Dummy as &amp;mut SomeTrait;\n        let dummy: TraitObject = mem::transmute(dummy);\n        let vtable = dummy.vtable as *const *const ();\n        let vtable_0 = *vtable.offset(3);\n        let vtable_1 = *vtable.offset(4);\n        let vtable_2 = *vtable.offset(5);\n\n        // Mapping vtable offsets to methods is left as an exercise to the reader. ;)\n        println!(\"{:p} {:p} {:p}\", fn_1, fn_2, fn_3);\n        println!(\"{:p} {:p} {:p}\", vtable_0, vtable_1, vtable_2);\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 1122, "user_id": 892584, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/4403f52eda5458b0ce029c80a379a09d?s=128&d=identicon&r=PG", "display_name": "Chase Walden", "link": "https://stackoverflow.com/users/892584/chase-walden"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 69, "favorite_count": 1, "accepted_answer_id": 39714353, "answer_count": 1, "score": 4, "last_activity_date": 1512160691, "creation_date": 1474934342, "last_edit_date": 1512160691, "question_id": 39714105, "link": "https://stackoverflow.com/questions/39714105/is-there-a-way-to-determine-the-offsets-of-each-of-the-trait-methods-in-the-vtab", "title": "Is there a way to determine the offsets of each of the trait methods in the VTable?", "body": "<p>I thought I could try <em>more or less</em> build a trait object from scratch without using the <code>impl</code> blocks. To elaborate:</p>\n\n<pre><code>trait SomeTrait {\n    fn fn_1(&amp;self);\n    fn fn_2(&amp;self, a: i64);\n    fn fn_3(&amp;self, a: i64, b: i64);\n}\n\nstruct TraitObject {\n    data: *mut (),\n    vtable: *mut (),\n}\n\nfn dtor(this: *mut ()) {\n    // ...\n}\n\nfn imp_1(this: *mut ()) {\n    // ...\n}\n\nfn imp_2(this: *mut (), a: i64) {\n    // ...\n}\n\nfn imp_3(this: *mut (), a: i64, b: i64) {\n    // ...\n}\n\nfn main() {\n    let data = &amp;... as *mut (); // something to be the object\n    let vtable = [dtor as *mut (),\n                  8 as *mut (),\n                  8 as *mut (),\n                  imp_1 as *mut (),\n                  imp_2 as *mut (),\n                  imp_3 as *mut ()]; // ignore any errors in typecasting,\n        //this is not what I am worried about getting right\n\n    let to = TraitObject {\n        data: data,\n        vtable: vtable.as_ptr() as *mut (),\n    };\n    // again, ignore any typecast errors,\n\n    let obj: &amp;SomeTrait = unsafe { mem::transmute(to) };\n\n    // ...\n\n    obj.fn_1();\n    obj.fn_2(123);\n    obj.fn_3(123, 456);\n}\n</code></pre>\n\n<p>From what I understand, the order in which the member functions appear in the trait definition is not always the same as the function pointers appear in the VTable. Is there a way to determine the offsets of each of the trait methods in the VTable?</p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1474914244, "post_id": 39709542, "comment_id": 66717390, "body": "Why is this not a duplicate of <a href=\"http://stackoverflow.com/q/29854912/155423\">stackoverflow.com/q/29854912/155423</a>?"}, {"owner": {"reputation": 14451, "user_id": 33499, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17c590aa4c56918b47c7ba5e39dba5d8?s=128&d=identicon&r=PG", "display_name": "wimh", "link": "https://stackoverflow.com/users/33499/wimh"}, "edited": false, "score": 0, "creation_date": 1474914789, "post_id": 39709542, "comment_id": 66717690, "body": "I guess it is not a duplicate because the syntax above seems to match the examples in the <a href=\"https://github.com/rust-lang/cargo/blob/master/tests/cfg.rs\" rel=\"nofollow noreferrer\">unit tests</a> and <a href=\"https://github.com/rust-lang/cargo/pull/2328/commits/f5d786e05600720ba4671caf5b598624103c8f72\" rel=\"nofollow noreferrer\">commit</a>."}, {"owner": {"reputation": 127444, "user_id": 492405, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/SSPGk.png?s=128&g=1", "display_name": "vcsjones", "link": "https://stackoverflow.com/users/492405/vcsjones"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1474915645, "post_id": 39709542, "comment_id": 66718204, "body": "@Shepmaster well in theory they are trying to solve the same problem, so I suppose my question then is &quot;Why isn&#39;t my Cargo file selecting the right configuration for a dependency&quot;."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 14451, "user_id": 33499, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17c590aa4c56918b47c7ba5e39dba5d8?s=128&d=identicon&r=PG", "display_name": "wimh", "link": "https://stackoverflow.com/users/33499/wimh"}, "edited": false, "score": 0, "creation_date": 1474915726, "post_id": 39709542, "comment_id": 66718236, "body": "@wimh I don&#39;t think I&#39;m following. The <a href=\"https://github.com/rust-lang/cargo/blob/4f57637fbeb9a79c86808609e388a1eed9a50e2f/tests/cfg.rs#L152\" rel=\"nofollow noreferrer\">unit tests you linked to say</a> <code>[target.&quot;cfg(windows)&quot;.dependencies]</code>, <b>without</b> <code>target_os</code>. The <a href=\"http://doc.crates.io/specifying-dependencies.html#platform-specific-dependencies\" rel=\"nofollow noreferrer\">documentation likewise does not use <code>target_os</code></a>."}, {"owner": {"reputation": 14451, "user_id": 33499, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17c590aa4c56918b47c7ba5e39dba5d8?s=128&d=identicon&r=PG", "display_name": "wimh", "link": "https://stackoverflow.com/users/33499/wimh"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1474916148, "post_id": 39709542, "comment_id": 66718467, "body": "@Shepmaster <a href=\"https://github.com/alexcrichton/curl-rust/blob/master/Cargo.toml\" rel=\"nofollow noreferrer\">here</a> is an example which uses <code>target_os</code>, although in a <code>not</code>. The configurations should be the same as used in <code>#[cfg(...)]</code>, where <code>target_os</code> is listed in the <a href=\"https://doc.rust-lang.org/reference.html#conditional-compilation\" rel=\"nofollow noreferrer\">documentation</a>."}, {"owner": {"reputation": 31254, "user_id": 355252, "user_type": "registered", "accept_rate": 62, "profile_image": "https://i.stack.imgur.com/2z2gH.png?s=128&g=1", "display_name": "lunaryorn", "link": "https://stackoverflow.com/users/355252/lunaryorn"}, "edited": false, "score": 0, "creation_date": 1477042238, "post_id": 39709542, "comment_id": 67613546, "body": "I&#39;m suffering from the same issue\u2026 did you manage to solve it?"}, {"owner": {"reputation": 127444, "user_id": 492405, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/SSPGk.png?s=128&g=1", "display_name": "vcsjones", "link": "https://stackoverflow.com/users/492405/vcsjones"}, "reply_to_user": {"reputation": 31254, "user_id": 355252, "user_type": "registered", "accept_rate": 62, "profile_image": "https://i.stack.imgur.com/2z2gH.png?s=128&g=1", "display_name": "lunaryorn", "link": "https://stackoverflow.com/users/355252/lunaryorn"}, "edited": false, "score": 0, "creation_date": 1477055251, "post_id": 39709542, "comment_id": 67622103, "body": "@lunaryorn nope. I&#39;ve been meaning to file an issue on the Cargo GitHub repository."}, {"owner": {"reputation": 31254, "user_id": 355252, "user_type": "registered", "accept_rate": 62, "profile_image": "https://i.stack.imgur.com/2z2gH.png?s=128&g=1", "display_name": "lunaryorn", "link": "https://stackoverflow.com/users/355252/lunaryorn"}, "edited": false, "score": 0, "creation_date": 1477055422, "post_id": 39709542, "comment_id": 67622217, "body": "@vcsjones I think it&#39;s a bug, so it&#39;d be great if you could open an issue!  If you do could you CC me?  I&#39;ve got the same username on Github."}, {"owner": {"reputation": 2050, "user_id": 3210837, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/d19541ed89cb1b8227a255188696700b?s=128&d=identicon&r=PG&f=1", "display_name": "Toothbrush", "link": "https://stackoverflow.com/users/3210837/toothbrush"}, "edited": false, "score": 0, "creation_date": 1477558819, "post_id": 39709542, "comment_id": 67819308, "body": "Doesn&#39;t MacOS contain a Linux shell? I believe the Linux dependency is overriding the MacOS dependency by coming later in the list. Try swapping the dependencies around."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1480650333, "post_id": 40924355, "comment_id": 69060540, "body": "Using Homebrew&#39;s OpenSSL is also documented <a href=\"http://stackoverflow.com/q/34612395/155423\">here on SO</a>, but I don&#39;t think that will help OP. Specifically, I believe they wish to <i>avoid using OpenSSL</i> on macOS, and use the built-in SSL framework instead."}, {"owner": {"reputation": 2479, "user_id": 178154, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/3325e461df2fda8738f35a8bf4fd735e?s=128&d=identicon&r=PG", "display_name": "big_gie", "link": "https://stackoverflow.com/users/178154/big-gie"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1480650788, "post_id": 40924355, "comment_id": 69060645, "body": "Yes, that&#39;s why I said it was not possible for the moment and that the rest was a workaround. For my use case, I prefer my crate to compile without manual modifications to <code>Cargo.toml</code> rather than commenting/uncommenting a line in it to link against the framework... Bu tI agree it&#39;s not optimal and does not solve the issue."}], "tags": [], "owner": {"reputation": 2479, "user_id": 178154, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/3325e461df2fda8738f35a8bf4fd735e?s=128&d=identicon&r=PG", "display_name": "big_gie", "link": "https://stackoverflow.com/users/178154/big-gie"}, "is_accepted": false, "score": 1, "last_activity_date": 1480650173, "last_edit_date": 1480650173, "creation_date": 1480649709, "answer_id": 40924355, "question_id": 39709542, "link": "https://stackoverflow.com/questions/39709542/why-does-the-last-platform-specific-dependency-take-precedence-in-cargo/40924355#40924355", "title": "Why does the last platform-specific dependency take precedence in Cargo?", "body": "<p>It does not look like it is possible with Rust 1.13.0 and Cargo 0.13.0-nightly. See Cargo issues <a href=\"https://github.com/rust-lang/cargo/issues/3195\" rel=\"nofollow noreferrer\">3195</a> and <a href=\"https://github.com/rust-lang/cargo/issues/1197\" rel=\"nofollow noreferrer\">1197</a>.</p>\n\n<p>As a workaround, you can <a href=\"https://github.com/sfackler/rust-openssl/issues/255#issuecomment-257462451\" rel=\"nofollow noreferrer\">tell Cargo to use Homebrew's OpenSSL</a>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>export OPENSSL_INCLUDE_DIR=`brew --prefix openssl`/include\nexport OPENSSL_LIB_DIR=`brew --prefix openssl`/lib\nexport DEP_OPENSSL_INCLUDE=`brew --prefix openssl`/include\n</code></pre>\n"}], "owner": {"reputation": 127444, "user_id": 492405, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/SSPGk.png?s=128&g=1", "display_name": "vcsjones", "link": "https://stackoverflow.com/users/492405/vcsjones"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 675, "favorite_count": 0, "answer_count": 1, "score": 12, "last_activity_date": 1480650173, "creation_date": 1474913332, "last_edit_date": 1474917229, "question_id": 39709542, "link": "https://stackoverflow.com/questions/39709542/why-does-the-last-platform-specific-dependency-take-precedence-in-cargo", "title": "Why does the last platform-specific dependency take precedence in Cargo?", "body": "<p>I have a dependency in my Cargo file that needs to be different by platform, specifically, the default features. Here's what I am trying to do:</p>\n\n<pre><code>[package]\nname = \"..blah..\"\nversion = \"..blah..\"\nauthors = [\"..blah..\"]\n\n[target.'cfg(target_os = \"macos\")'.dependencies]\nhyper = { version = \"0.9\", default-features = false, features = [\"security-framework\"] }\n\n[target.'cfg(target_os = \"linux\")'.dependencies]\nhyper = { version = \"0.9\", default-features = true }\n</code></pre>\n\n<p>But this doesn't seem to do what I want. On my Mac it appears to be using the bottom target line as if I just specified <code>hyper = \"0.9\"</code>. If I do <code>cargo build</code> as specified, I get errors with regard to openssl:</p>\n\n<blockquote>\n  <p>cargo:warning=#include &lt;openssl/ssl.h&gt;</p>\n</blockquote>\n\n<p>However, if I build it like this:</p>\n\n<pre><code>[dependencies]\nhyper = { version = \"0.9\", default-features = false, features = [\"security-framework\"] }\n</code></pre>\n\n<p>Then it builds fine. This indicates to me that the <code>cfg</code> for \"macos\" isn't working.</p>\n\n<p>How do I make this work, or more specifically, how do I solve the problem where I need my dependency to use different features by platform?</p>\n"}, {"tags": ["rust", "match"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 2, "creation_date": 1474908329, "post_id": 39707782, "comment_id": 66714207, "body": "Welcome to StackOverflow, HiDefender! You can find the answer to your question in the linked question which yours is a dupe of. Some tips for your next question: provide a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>. Since everyone here loves questions with MCVEs, you will get an answer way quicker! It&#39;s also a good idea to read <a href=\"http://stackoverflow.com/help/how-to-ask\">&quot;How to ask?&quot;</a> again. That&#39;s all I wanted to say. I hope you&#39;re having fun with Rust and our small SO-community!"}], "owner": {"reputation": 1498, "user_id": 6844327, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9fWJl.jpg?s=128&g=1", "display_name": "HiDefender", "link": "https://stackoverflow.com/users/6844327/hidefender"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 74, "favorite_count": 0, "closed_date": 1474909173, "answer_count": 0, "score": 1, "last_activity_date": 1474907146, "creation_date": 1474906991, "last_edit_date": 1474907146, "question_id": 39707782, "link": "https://stackoverflow.com/questions/39707782/i32-variable-matches-any-value", "closed_reason": "Duplicate", "title": "i32 variable matches any value", "body": "<p>The compiler tells me that <code>vvp_i_name</code> and <code>vvp_j_name</code> match any value, but I can't figure out why.</p>\n\n<p><code>vvp_i_name</code> and <code>vvp_j_name</code> are type <code>i32</code>, <code>con.parm</code> is type <code>std::vec::Vec&lt;i32&gt;</code>.</p>\n\n<pre><code>fn check(vvp_i: (Variable, i32), vvp_j: (Variable, i32), cc: &amp;mut i32, csp: CSP) -&gt; bool {\n    if vvp_i.0.neighbors.contains_key(&amp;vvp_j.0.name) {\n        *cc += 1;\n        for x in vvp_i.0.neighbors.get(&amp;vvp_j.0.name).unwrap() {\n            let con = csp.constraints.get(x).unwrap();\n            match con.mode {\n                Mode::Extension(ExtensionType::Supports) =&gt; {\n                                        if !con.tuples.contains(&amp;(vvp_i.1, vvp_j.1)) {return false} //We can't return true till we cycle\n                                    }                                                               //through the entire for loop.\n                Mode::Extension(ExtensionType::Conflicts) =&gt; {                                      //\n                                        if con.tuples.contains(&amp;(vvp_i.1, vvp_j.1)) {return false}  //\n                                    }\n                Mode::Intension =&gt; {\n                                        let vvp_i_name = vvp_i.0.name;\n                                        let vvp_j_name = vvp_j.0.name;\n                                        for y in con.parm {\n                                            match y {\n                                                vvp_i_name =&gt; {/*...Do stuff...*/}\n                                                vvp_j_name =&gt; {/*...Do stuff...*/}\n                                                _ =&gt; {}\n                                            }\n                                        }\n                                    }\n            }\n        }\n    }\n    true\n}\n</code></pre>\n"}, {"tags": ["nested", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 6, "creation_date": 1474902199, "post_id": 39705896, "comment_id": 66710431, "body": "You can&#39;t. See <a href=\"http://stackoverflow.com/q/32300132/155423\">stackoverflow.com/q/32300132/155423</a>; <a href=\"http://stackoverflow.com/q/28833622/155423\">stackoverflow.com/q/28833622/155423</a>; and lots of other questions about circular references."}, {"owner": {"reputation": 6531, "user_id": 1614607, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/j5OdR.jpg?s=128&g=1", "display_name": "Jacob Brown", "link": "https://stackoverflow.com/users/1614607/jacob-brown"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1474922243, "post_id": 39705896, "comment_id": 66721951, "body": "@Shepmaster, is that true? What am I missing in my example <a href=\"https://play.rust-lang.org/?gist=ec859a25cc772183411a2dfb10258cbe&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">here</a>? When I add a line to debug print my <code>parent</code> object, I get a stack overflow error where it tries to print the circular references for parent/child..."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1474922601, "post_id": 39705896, "comment_id": 66722147, "body": "Yes, it&#39;s true; I wouldn&#39;t deliberately lie to someone ^_^. A <i>reference</i> is <code>&amp;Foo</code>. In the example in your comment, you have an <code>Arc</code>, which isn&#39;t a plain, boring reference, but a more intelligent <i>smart pointer</i>. However, you&#39;ve created an infinite cycle (parent points to child points to parent points to ...). Generally, that&#39;s what <a href=\"https://doc.rust-lang.org/std/sync/struct.Weak.html\" rel=\"nofollow noreferrer\"><code>Weak</code></a> references are for."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1474924032, "post_id": 39712374, "comment_id": 66722878, "body": "Ah, I completely missed that it wasn&#39;t OP with that comment, so I forgot to at-mention you. Make sure you check it out; especially the bit about <code>Weak</code> and the fact that this solution doesn&#39;t use <b>references</b>."}, {"owner": {"reputation": 6531, "user_id": 1614607, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/j5OdR.jpg?s=128&g=1", "display_name": "Jacob Brown", "link": "https://stackoverflow.com/users/1614607/jacob-brown"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1474924981, "post_id": 39712374, "comment_id": 66723285, "body": "@Shepmaster, oh, thanks! But isn&#39;t a cloned <code>Arc</code> a kind of reference, at least in a non-strict understanding of the word? Also, surely there are cases where you would want an &quot;infinite cycle&quot; of references (understanding of course that they are dangerous and using them in some ways can cause an SO)?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1474930989, "post_id": 39712374, "comment_id": 66725368, "body": "Yeah, it is a <i>kind</i> of reference (<b>A</b>tomically <b>R</b>eference <b>C</b>ounted), but if someone were to ask me how to do something with &quot;references&quot;, I wouldn&#39;t expect to use an <code>Arc</code>. I&#39;m not actually sure why someone would want a cycle of references. Note that a cycle will cause a memory leak when dropped."}], "tags": [], "owner": {"reputation": 6531, "user_id": 1614607, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/j5OdR.jpg?s=128&g=1", "display_name": "Jacob Brown", "link": "https://stackoverflow.com/users/1614607/jacob-brown"}, "is_accepted": true, "score": 1, "last_activity_date": 1474923894, "creation_date": 1474923894, "answer_id": 39712374, "question_id": 39705896, "link": "https://stackoverflow.com/questions/39705896/nested-struct-with-reference/39712374#39712374", "title": "Nested struct with reference", "body": "<p>It's not exactly a drop-in solution for your example, but I believe you can create \"circular references\" as you specify using <code>Arc</code> and <code>RwLock</code>. The API is not exactly the same (e.g., <code>parent</code> is an optional field), I renamed some objects, and it is definitely more verbose, but your tests pass!</p>\n\n<pre><code>use std::sync::{Arc, RwLock};\n\n#[derive(Debug, Clone)]\nstruct Child {\n    parent: Option&lt;Arc&lt;RwLock&lt;Parent&gt;&gt;&gt;\n}\n\nimpl Child {\n    fn new() -&gt; Self {\n        Child {\n            parent: None\n        }\n    }\n\n    fn hello_world(&amp;self) -&gt; String {\n        let x = self.parent.as_ref().unwrap().clone();\n        let y = x.read().unwrap();\n        y.hello().to_owned() + \" world\"\n    }\n}\n\n#[derive(Debug, Clone)]\nstruct Parent {\n    child: Option&lt;Arc&lt;RwLock&lt;Child&gt;&gt;&gt;,\n    data: &amp;'static str\n}\n\nimpl Parent {\n    fn new() -&gt; Self {\n        Parent {\n            child: None,\n            data: \"hello\"\n        }\n    }\n\n    fn hello(&amp;self) -&gt; &amp;str {\n        self.data\n    }\n\n    fn get_child(&amp;self) -&gt; Option&lt;Arc&lt;RwLock&lt;Child&gt;&gt;&gt; {\n        self.child.as_ref().map(|x| x.clone() )\n    }\n\n\n}\n\nfn main() {\n    let parent = Arc::new(RwLock::new(Parent::new()));\n    let child = Arc::new(RwLock::new(Child::new()));\n\n    parent.write().unwrap().child = Some(child.clone());\n    child.write().unwrap().parent = Some(parent.clone());\n\n    assert_eq!(\"hello\", parent.read().unwrap().hello());\n\n    {\n        let x = parent.read().unwrap();\n        match x.get_child() {\n            Some(child) =&gt; { assert_eq!(\"hello world\", child.read().unwrap().hello_world()); }\n            None =&gt; {},\n        }\n    }\n\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 1523, "user_id": 1235487, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5c586f2d0682c9f919da29b520347a5e?s=128&d=identicon&r=PG", "display_name": "Pierre-Antoine", "link": "https://stackoverflow.com/users/1235487/pierre-antoine"}, "edited": false, "score": 0, "creation_date": 1544890362, "post_id": 53792644, "comment_id": 94439552, "body": "Here is a variant using <code>std::ptr::NonNull</code> instead of a raw pointer: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=5c90c70d097e51bb1fcae03e90ea50ea\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a> . Not sure what the difference is, but the documentation of <code>NonNull</code> says &quot;This is often the correct thing to use when building data structures using raw pointers&quot;."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1544923471, "post_id": 53792644, "comment_id": 94446951, "body": "Your children functions can be <code>self.children.get_mut(i).map(|x| &amp;mut **x)</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1544923519, "post_id": 53792644, "comment_id": 94446959, "body": "Idiomatic Rust naming suggest that the function names would be <code>foo_bar_mut</code> not <code>foo_mut_bar</code>; The <code>get_</code> prefix is usually not used for methods."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1544923729, "post_id": 53792644, "comment_id": 94446997, "body": "I think your find function&#39;s <code>else</code> clause can be <code>self.children.iter_mut().flat_map(|c| c.find_mut(data)).next()</code>."}, {"owner": {"reputation": 1523, "user_id": 1235487, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5c586f2d0682c9f919da29b520347a5e?s=128&d=identicon&r=PG", "display_name": "Pierre-Antoine", "link": "https://stackoverflow.com/users/1235487/pierre-antoine"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1544970581, "post_id": 53792644, "comment_id": 94454751, "body": "Thanks @Shepmaster for these advices. A more idiomatic version is here: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=207113d3fa0108a8a8ddad444ecbf689\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}], "tags": [], "owner": {"reputation": 1523, "user_id": 1235487, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5c586f2d0682c9f919da29b520347a5e?s=128&d=identicon&r=PG", "display_name": "Pierre-Antoine", "link": "https://stackoverflow.com/users/1235487/pierre-antoine"}, "is_accepted": false, "score": 1, "last_activity_date": 1544923228, "last_edit_date": 1544923228, "creation_date": 1544879463, "answer_id": 53792644, "question_id": 39705896, "link": "https://stackoverflow.com/questions/39705896/nested-struct-with-reference/53792644#53792644", "title": "Nested struct with reference", "body": "<p>I have a similar problem, and am not entirely satisfied with the proposed solutions.</p>\n\n<p>If your structure is really nested (i.e. you have a notion of \"parent\" and \"child\", with a unique parent for each child), then it seems natural that the parent should own the child(ren). So using <code>Rc</code>/<code>Arc</code> (which are designed to allow for multiple owners) does not look like the right solution -- all the less so because, as @Shepmaster points out, it \"encourages\" (or at least allows) the creation of cyclic references.</p>\n\n<p>My idea was to have each child hold a raw pointer to its parent:</p>\n\n<pre><code>pub struct Node {\n    parent: *mut Node,\n    // ...\n}\n</code></pre>\n\n<p>Since a node is owned by its parent, it can only be borrowed (resp. mutably borrowed) while its parent is being borrowed (resp. mutably borrowed). So in that context, it should be safe to cast <code>self.parent</code> to a <code>&amp;Node</code> (resp. <code>&amp;mut Node</code>, if <code>self</code> is mutable).</p>\n\n<pre><code>impl Node {\n    pub fn get_parent(&amp;self) -&gt; Option&lt;&amp;Node&gt; {\n        unsafe { self.parent.as_ref() }\n    }\n\n    pub fn get_mut_parent(&amp;mut self) -&gt; Option&lt;&amp;mut Node&gt; {\n        unsafe { self.parent.as_mut() }\n    }\n}\n</code></pre>\n\n<p>However, this requires that the address of the parent node never changes (<em>i.e.</em> the parent is never moved). This can be achieved by only ever handling <em>boxed</em> nodes.</p>\n\n<pre><code>pub struct Node {\n    parent: *mut Node,\n    children: Vec&lt;Box&lt;Node&gt;&gt;,\n    // ..\n}\n\nimpl Node {\n    pub fn new(data: &amp;str) -&gt; Box&lt;Node&gt; {\n        Box::new(Node {\n            parent: std::ptr::null_mut(),\n            children: vec![],\n            // ..\n        })\n    }\n\n    pub fn append_child(&amp;mut self, mut child: Box&lt;Node&gt;) -&gt; usize {\n        child.parent = self;\n        self.children.push(child);\n        self.children.len() - 1\n    }\n}\n</code></pre>\n\n<p>I implemented a full-fledged example <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=775dcef59ceae52aee884b39b5edf71f\" rel=\"nofollow noreferrer\">in the playground</a>.</p>\n"}], "owner": {"reputation": 488, "user_id": 2904507, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/89fa3cf087339a65c4cc8389134b0252?s=128&d=identicon&r=PG", "display_name": "Gedweb", "link": "https://stackoverflow.com/users/2904507/gedweb"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1632, "favorite_count": 1, "accepted_answer_id": 39712374, "answer_count": 2, "score": 2, "last_activity_date": 1544923228, "creation_date": 1474901257, "last_edit_date": 1474902043, "question_id": 39705896, "link": "https://stackoverflow.com/questions/39705896/nested-struct-with-reference", "title": "Nested struct with reference", "body": "<p>I have some nested structs and cannot create a back reference to the parent struct. An <a href=\"https://play.rust-lang.org/?code=%23!%5Ballow(dead_code)%5D%0A%0Astruct%20Foo%3C%27a%3E%0A%7B%0A%20%20%20%20parent%3A%20%26%27a%20Bar%3C%27a%3E%2C%0A%7D%0A%0Aimpl%3C%27a%3E%20Foo%3C%27a%3E%0A%7B%0A%20%20%20%20fn%20new(parent%3A%20%26%27a%20Bar)%20-%3E%20Self%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20Foo%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20parent%3A%20parent%2C%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20fn%20hello_world(%26self)%20-%3E%20String%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20self.parent.hello().to_owned()%20%2B%20%22%20world%22%0A%20%20%20%20%7D%0A%7D%0A%0Astruct%20Bar%3C%27b%3E%0A%7B%0A%20%20%20%20child%3A%20Option%3CFoo%3C%27b%3E%3E%2C%0A%20%20%20%20data%3A%20%26%27static%20str%2C%0A%7D%0A%0Aimpl%3C%27b%3E%20Bar%3C%27b%3E%0A%7B%0A%20%20%20%20fn%20new()%20-%3E%20Self%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20Bar%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20child%3A%20None%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20data%3A%20%22hello%22%2C%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20fn%20hello(%26self)%20-%3E%20%26str%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20self.data%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20fn%20get_foo(%26self)%20-%3E%20Option%3C%26Foo%3E%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20self.child.as_ref()%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20bar%20%3D%20Bar%3A%3Anew()%3B%0A%20%20%20%20assert_eq!(%22hello%22%2C%20bar.hello())%3B%0A%20%20%20%20match%20bar.get_foo()%20%7B%0A%20%20%20%20%20%20%20%20Some(foo)%20%3D%3E%20assert_eq!(%22hello%20world%22%2C%20foo.hello_world())%2C%0A%20%20%20%20%20%20%20%20None%20%3D%3E%20()%2C%0A%20%20%20%20%7D%0A%7D&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">example</a>:</p>\n\n<pre><code>struct Foo&lt;'a&gt; {\n    parent: &amp;'a Bar&lt;'a&gt;,\n}\n\nimpl&lt;'a&gt; Foo&lt;'a&gt; {\n    fn new(parent: &amp;'a Bar) -&gt; Self {\n        Foo { parent: parent }\n    }\n\n    fn hello_world(&amp;self) -&gt; String {\n        self.parent.hello().to_owned() + \" world\"\n    }\n}\n\nstruct Bar&lt;'b&gt; {\n    child: Option&lt;Foo&lt;'b&gt;&gt;,\n    data: &amp;'static str,\n}\n\nimpl&lt;'b&gt; Bar&lt;'b&gt; {\n    fn new() -&gt; Self {\n        Bar {\n            child: None,\n            data: \"hello\",\n        }\n    }\n\n    fn hello(&amp;self) -&gt; &amp;str {\n        self.data\n    }\n\n    fn get_foo(&amp;self) -&gt; Option&lt;&amp;Foo&gt; {\n        self.child.as_ref()\n    }\n}\n\nfn main() {\n    let bar = Bar::new();\n    assert_eq!(\"hello\", bar.hello());\n    match bar.get_foo() {\n        Some(foo) =&gt; assert_eq!(\"hello world\", foo.hello_world()),\n        None =&gt; (),\n    }\n}\n</code></pre>\n\n<p>How can I replace <code>None</code> with <code>Some&lt;Foo&gt;</code> with a reference to <code>Bar</code>? So far I'm not sure that it is possible.</p>\n"}, {"tags": ["windows", "gcc", "arm", "rust", "cross-compiling"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1474900834, "post_id": 39705213, "comment_id": 66709554, "body": "Performing an internet search for <code>arm cross compiler windows</code> seems to have a number of promising leads that allow you to download a pre-built compiler to use as a linker. What question are you trying to ask here? If it&#39;s a feature request for rustup, perhaps make one on the repo? There&#39;s <a href=\"https://github.com/rust-lang-nursery/rustup.rs/issues/486\" rel=\"nofollow noreferrer\">some chatter about semi-related aspects</a>."}, {"owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1474918706, "post_id": 39705213, "comment_id": 66719952, "body": "Most of the results are for the embedded bare metal ARM GCC which is easily available in binary form <a href=\"https://launchpad.net/gcc-arm-embedded\" rel=\"nofollow noreferrer\">here</a>. That is <code>arm-none-eabi-gcc</code> (or something; these target triples are very arbitrary)."}, {"owner": {"reputation": 18029, "user_id": 3156750, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/73e00c291e7b746a34f28622a64f0492?s=128&d=identicon&r=PG&f=1", "display_name": "Notlikethat", "link": "https://stackoverflow.com/users/3156750/notlikethat"}, "edited": false, "score": 1, "creation_date": 1474919670, "post_id": 39705213, "comment_id": 66720514, "body": "For a genericly packaged cross-toolchain, I&#39;d go for the <a href=\"http://www.linaro.org/downloads/\" rel=\"nofollow noreferrer\">Linaro toolchain binaries</a>. In case it&#39;s not clear, you&#39;d want the i686_mingw32 one."}, {"owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "edited": false, "score": 0, "creation_date": 1474977431, "post_id": 39705213, "comment_id": 66745412, "body": "Aha! I had to <a href=\"http://superuser.com/a/1076531/80582\">unzip it as admin</a> for some reason, but after that it worked. Thanks for the mingw32 hint by the way."}], "answers": [{"comments": [{"owner": {"reputation": 18029, "user_id": 3156750, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/73e00c291e7b746a34f28622a64f0492?s=128&d=identicon&r=PG&f=1", "display_name": "Notlikethat", "link": "https://stackoverflow.com/users/3156750/notlikethat"}, "edited": false, "score": 1, "creation_date": 1474981552, "post_id": 39724106, "comment_id": 66748334, "body": "Linking does depend on the ISA to an extent, but mostly in terms of floating-point stuff and general architecture profile (i.e. A vs. M). It also happens that the non-bare-metal Linaro builds are configured with ARMv7 (specifically Cortex-A9) as the default target anyway."}, {"owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "reply_to_user": {"reputation": 18029, "user_id": 3156750, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/73e00c291e7b746a34f28622a64f0492?s=128&d=identicon&r=PG&f=1", "display_name": "Notlikethat", "link": "https://stackoverflow.com/users/3156750/notlikethat"}, "edited": false, "score": 0, "creation_date": 1474985918, "post_id": 39724106, "comment_id": 66751544, "body": "Ah that&#39;s convenient. Thanks!"}], "tags": [], "owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "is_accepted": true, "score": 8, "last_activity_date": 1479809477, "last_edit_date": 1479809477, "creation_date": 1474977610, "answer_id": 39724106, "question_id": 39705213, "link": "https://stackoverflow.com/questions/39705213/cross-compiling-rust-from-windows-to-arm-linux/39724106#39724106", "title": "Cross-compiling Rust from Windows to ARM Linux", "body": "<p>Thanks to @Notlikethat's comment:</p>\n\n<p>a) Yes you need to provide your own GCC cross-compiler.</p>\n\n<p>b) You can get one <a href=\"https://releases.linaro.org/components/toolchain/binaries/latest-5/arm-linux-gnueabihf/\" rel=\"noreferrer\">here</a> (select a <code>mingw32</code> build).</p>\n\n<p>Just unzip linaro's GCC then point cargo to it:</p>\n\n<pre><code>[target.armv7-unknown-linux-gnueabihf]\nlinker = \"C:/Users/me/gcc-linaro-5.3.1-2016.05-i686-mingw32_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-gcc.exe\"\n</code></pre>\n\n<p>It seems to work even though it is <code>arm-</code> and not <code>armv7-</code>. I guess linking doesn't depend on the ISA. Actually I haven't run it yet, but it builds without errors!</p>\n\n<p><strong>Edit:</strong></p>\n\n<p>You can now use <code>armv7-unknown-linux-musleabihf</code> instead and get an actually portable binary (i.e. it doesn't depend on the GNU C library which often causes compatibility issues).</p>\n"}, {"tags": [], "owner": {"reputation": 15416, "user_id": 2441637, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/Z8fpp.jpg?s=128&g=1", "display_name": "Hasan A Yousef", "link": "https://stackoverflow.com/users/2441637/hasan-a-yousef"}, "is_accepted": false, "score": 3, "last_activity_date": 1568238841, "creation_date": 1568238841, "answer_id": 57897276, "question_id": 39705213, "link": "https://stackoverflow.com/questions/39705213/cross-compiling-rust-from-windows-to-arm-linux/57897276#57897276", "title": "Cross-compiling Rust from Windows to ARM Linux", "body": "<p>For MacOS better use: <code>musleabihf</code>, for Windows you can use <code>gnueabihf</code> as bellow:</p>\n\n<p><strong>Mac</strong></p>\n\n<pre class=\"lang-sh prettyprint-override\"><code>$ brew install arm-linux-gnueabihf-binutils\n$ rustup target add armv7-unknown-linux-musleabihf\n</code></pre>\n\n<p>In <code>.cargo/config</code></p>\n\n<pre><code>[build]\ntarget = \"armv7-unknown-linux-musleabihf\"\n[target.armv7-unknown-linux-c]\nlinker = \"arm-linux-gnueabihf-ld\"\n</code></pre>\n\n<p>With simple <code>src/main.rs</code></p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    println!(\"Hello, Raspberry!\");\n}\n</code></pre>\n\n<p>Then things are fine:</p>\n\n<pre class=\"lang-sh prettyprint-override\"><code>Hasans-Air:rpi hasan$ cargo build\n   Compiling rpi v0.1.0 (/Users/hasan/PycharmProjects/rpi)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.41s\nHasans-Air:rpi hasan$ scp target/armv7-unknown-linux-musleabihf/debug/rpi pi@192.168.1.43:\npi@192.168.1.43's password: \nrpi                                                                                         100% 2702KB   2.6MB/s   00:01    \nHasans-Air:rpi hasan$ ssh pi@192.168.1.43 'chmod +x ~/rpi &amp;&amp; ~/rpi'\npi@192.168.1.43's password: \nHello, Raspberry!\n</code></pre>\n\n<p><strong>Win 10</strong>\n Get the linker from <a href=\"https://gnutoolchains.com/raspberry/\" rel=\"nofollow noreferrer\">here</a>, and run:</p>\n\n<pre class=\"lang-sh prettyprint-override\"><code>rustup target add armv7-unknown-linux-gnueabihf\n</code></pre>\n\n<p>Creating file  <code>.cargo/config</code>  with content:</p>\n\n<pre><code>[build]\ntarget = \"armv7-unknown-linux-gnueabihf\"\n\n[target.armv7-unknown-linux-gnueabihf]\nlinker = \"arm-linux-gnueabihf-gcc\"\n</code></pre>\n\n<p>And with simple <code>src/main.rs</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    println!(\"Hello, Raspberry! from Win 10\");\n}\n</code></pre>\n\n<p>I was able to get things done</p>\n\n<p><a href=\"https://i.stack.imgur.com/QoeDt.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/QoeDt.png\" alt=\"enter image description here\"></a></p>\n\n<p><a href=\"https://i.stack.imgur.com/epv7A.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/epv7A.png\" alt=\"enter image description here\"></a></p>\n"}], "owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7415, "favorite_count": 3, "accepted_answer_id": 39724106, "answer_count": 2, "score": 8, "last_activity_date": 1568238841, "creation_date": 1474899159, "last_edit_date": 1474900521, "question_id": 39705213, "link": "https://stackoverflow.com/questions/39705213/cross-compiling-rust-from-windows-to-arm-linux", "title": "Cross-compiling Rust from Windows to ARM Linux", "body": "<p>I'm using Windows 10. I would like to cross-compile a Rust program to run on <code>armv7-unknown-linux-gnueabihf</code>. (<code>armv7-unknown-linux-muscl</code> would also be acceptable but it doesn't seem to be available.)</p>\n\n<p>Here are my steps:</p>\n\n<ol>\n<li>Install <code>rustup</code></li>\n<li><code>rustup toolchain install stable-x86_64-pc-windows-gnu</code></li>\n<li><code>rustup toolchain default stable-x86_64-pc-windows-gnu</code></li>\n<li><code>rustup target add armv7-unknown-linux-gnueabihf</code></li>\n<li><p>Edit my <code>./cargo/config</code> file to contain:</p>\n\n<pre><code>[build]\ntarget = \"armv7-unknown-linux-gnueabihf\"\n</code></pre></li>\n<li><p><code>cargo build</code></p></li>\n</ol>\n\n<p>This compiles everything fine, but when it comes to linking it gives this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: could not exec the linker `cc`: The system cannot find the file specified. (os error 2)\n</code></pre>\n\n<p>As far as I have been able to determine, this is because Rust doesn't have its own linker and uses GCC instead. Apparently I need to provide this myself and add this to the <code>./cargo/config</code> file:</p>\n\n<pre><code>[target.armv7-unknown-linux-gnueabihf]\nlinker = \"c:/path/to/my/gcc/cross/compiler\"\n</code></pre>\n\n<p>Is that right? If so where on Earth can I download such a cross-compiler for Windows and why doesn't <code>rustup</code> install it? Having to compile a cross-compiling version of GCC yourself is the biggest pain of cross-compiling C/C++ programs. Does Rustup really not make this any easier?</p>\n"}, {"tags": ["multithreading", "rust"], "comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 2, "creation_date": 1474896504, "post_id": 39704003, "comment_id": 66706432, "body": "I&#39;m not sure there&#39;s an appropriate answer to this.  If a data structure doesn&#39;t require locking, then you won&#39;t need a mutex.  If it does, you <i>do</i> need a mutex, and trying to avoid using one is unsafe.  I don&#39;t know if there&#39;s an already-existing, applicable solution because you haven&#39;t indicated what you&#39;re trying to do other than &quot;no mutex&quot;.  And if there isn&#39;t, then this devolves into &quot;recommend a library&quot; (which might be closed for being too broad), or &quot;how do I write a lock-free data structure&quot; (which is <i>also</i> probably too broad)."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1474896597, "post_id": 39704003, "comment_id": 66706500, "body": "Also, flipping through that link (I don&#39;t have time to read an entire article to try and answer a somewhat vague question), I wonder why you can&#39;t just use <code>Cell&lt;u64&gt;</code>.  But I don&#39;t know what <code>new_hash()</code> does, so *shrug*"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1474897048, "post_id": 39704003, "comment_id": 66706842, "body": "As Matthieu M. answers, you need to make your data structure implement <code>Sync</code>, which indicates it can be shared between threads safely. This changes the problem to your real question: &quot;how do I write this <b>particular</b> lockless data structure in Rust?&quot;. To do that, you will <i>likely</i> need to write unsafe code. It seems the hashtable in question requires certain <b>hardware</b> preconditions (e.g. 64-bit stores to memory are naturally atomic) and <b>software</b> preconditions (e.g. you are storing two 64-bit values). That seems to indicate the datastructure is not portable."}], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 4, "last_activity_date": 1474896368, "creation_date": 1474896368, "answer_id": 39704161, "question_id": 39704003, "link": "https://stackoverflow.com/questions/39704003/sharing-lock-less-resource-between-threads-in-rust/39704161#39704161", "title": "Sharing lock-less resource between threads in Rust", "body": "<p>Quite simply, actually: the <code>Mutex</code> is unnecessary if the underlying structure is already <code>Sync</code>.</p>\n\n<p>In your case, an array of structs of atomics for example would work. You can find Rust's available atomics <a href=\"https://doc.rust-lang.org/std/sync/atomic/\" rel=\"nofollow\">here</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 36975, "user_id": 94977, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/8341c5bff3dcbd8ed34d9d68bd4169f2?s=128&d=identicon&r=PG", "display_name": "Jason Orendorff", "link": "https://stackoverflow.com/users/94977/jason-orendorff"}, "is_accepted": false, "score": 1, "last_activity_date": 1474993237, "creation_date": 1474993237, "answer_id": 39729714, "question_id": 39704003, "link": "https://stackoverflow.com/questions/39704003/sharing-lock-less-resource-between-threads-in-rust/39729714#39729714", "title": "Sharing lock-less resource between threads in Rust", "body": "<p><a href=\"https://software.intel.com/en-us/blogs/2013/01/06/benign-data-races-what-could-possibly-go-wrong\" rel=\"nofollow\">Data races are undefined behavior</a> in both C++ and Rust. Just Say No.</p>\n\n<p>The right way is to build your table out of <a href=\"https://doc.rust-lang.org/std/sync/atomic/index.html\" rel=\"nofollow\">atomic integers</a>. It's rocket science. <a href=\"https://doc.rust-lang.org/std/sync/atomic/struct.AtomicUsize.html#method.load\" rel=\"nofollow\">You have to decide case by case</a> how much you <a href=\"https://doc.rust-lang.org/std/sync/atomic/enum.Ordering.html\" rel=\"nofollow\">care about the order of memory operations</a>. This does clutter up your code:</p>\n\n<pre><code>// non-atomic array access\ntable[h] = 0;\n\n// atomic array access\ntable[h].store(0, Ordering::SeqCst);\n</code></pre>\n\n<p>But it's worth it.</p>\n\n<p>There's no telling what the performance penalty will be -- you just have to try it out.</p>\n"}], "owner": {"reputation": 395, "user_id": 4264914, "user_type": "registered", "accept_rate": 0, "profile_image": "https://i.stack.imgur.com/uMKfB.png?s=128&g=1", "display_name": "gekomad", "link": "https://stackoverflow.com/users/4264914/gekomad"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 936, "favorite_count": 0, "answer_count": 2, "score": 1, "last_activity_date": 1474993237, "creation_date": 1474895933, "last_edit_date": 1474896457, "question_id": 39704003, "link": "https://stackoverflow.com/questions/39704003/sharing-lock-less-resource-between-threads-in-rust", "title": "Sharing lock-less resource between threads in Rust", "body": "<p>I'm porting my C++ chess engine in Rust. I have a big hash table shared between search threads and in the C++ version this table is lock-less; there is no mutex for sharing read/write access. Here is <a href=\"http://www.craftychess.com/hyatt/hashing.html\" rel=\"nofollow\">the theory</a>, if you are interested.</p>\n\n<p>In the Rust version of this code, it is working fine, but uses a <code>Mutex</code>:</p>\n\n<pre><code>let shared_hash = Arc::new(Mutex::new(new_hash()));\n\nfor _ in 0..n_cpu {\n    println!(\"start thread\");\n    let my_hash = shared_hash.clone();\n    thread_pool.push(thread::spawn(move || {\n        let mut my_hash = my_hash.lock().unwrap();\n        let mut search_engine = SearchEngine::new();\n        search_engine.search(&amp;mut myhash);\n    }));\n}\n\nfor i in thread_pool {\n    let _ = i.join();\n}\n</code></pre>\n\n<p>How could I share the table between threads without a mutex?</p>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1474892335, "post_id": 39702178, "comment_id": 66703421, "body": "Does your <code>wrangle_mut_refs</code> example actually work starting from a <code>Vec&lt;Rc&lt;RefCell&lt;T&gt;&gt;&gt;</code>?  It&#39;s close to what I had, and still doesn&#39;t seem to resolve the lifetime issues my code has."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1474892455, "post_id": 39702178, "comment_id": 66703510, "body": "The more generic version does look like an improvement, except that <code>foo</code> in this case needs to iterate more than once, so relying on <code>IntoIterator</code> probably doesn&#39;t work.  However, maybe using <code>DerefMut</code> would make it possible to pass in a slice of <code>RefMut</code>."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 1, "creation_date": 1474895607, "post_id": 39702178, "comment_id": 66705744, "body": "@ChrisEmerson <code>wrangle_mut_refs</code> works from <code>Vec&lt;RefMut&lt;T&gt;&gt;</code>, but in the question you already successfully creates that from the <code>Vec&lt;Rc&lt;RefCell&lt;T&gt;&gt;&gt;</code>."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1474899793, "post_id": 39702178, "comment_id": 66708876, "body": "I&#39;m not sure that my <code>Vec&lt;RefMut&lt;T&gt;&gt;</code> is necessarily usable though.  :-(  I tried to make use of your <code>wrangle_mut_refs</code> but without success: <a href=\"https://play.rust-lang.org/?gist=b79b6ca328c19aebbf5dca39e70bae03&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">playground</a>  The lifetime errors now go back to the <code>v1</code> not living long enough."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1474907600, "post_id": 39702178, "comment_id": 66713813, "body": "@ChrisEmerson The problematic part is the <code>ref mut</code> pattern -- unsurprisingly, I might add, since that&#39;s the main difference between the code in the question and <code>wrangle_mut_refs</code> ;-) This compiles: <a href=\"https://play.rust-lang.org/?gist=fd3d624cfd8b6b3a1717da3e963f83ac&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1474912079, "post_id": 39702178, "comment_id": 66716239, "body": "Aha! Yeah, I guess the &quot;***&quot; was a clue that something probably wasn&#39;t quite right. :-)"}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": false, "score": 3, "last_activity_date": 1474890918, "creation_date": 1474890918, "answer_id": 39702178, "question_id": 39701253, "link": "https://stackoverflow.com/questions/39701253/turning-a-vecrcrefcellt-into-a-mut-t/39702178#39702178", "title": "Turning a Vec&lt;Rc&lt;RefCell&lt;T&gt;&gt;&gt; into a &amp;[&amp;mut T]", "body": "<p>While it is certainly possible to write code that starts with a <code>Vec&lt;RefMut&lt;T&gt;&gt;</code> and creates a <code>Vec&lt;&amp;mut T&gt;</code> from that (<a href=\"https://play.rust-lang.org/?gist=8b807709d046f550d8dfd290606f3d60&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">generic example</a>), I would suggest that you change the signature of <code>foo</code>. Many algorithms do not need the random access provided by slices, and if the function could accept an iterator instead of a slice, you wouldn't need to create <em>two</em> whole additional <code>Vec</code>s, aside from the calling function becoming simpler. I'm thinking of a signature like this</p>\n\n<pre><code>fn foo&lt;I, R&gt;(widgets: I)\n    where I: IntoIterator&lt;Item=R&gt;,\n          R: DerefMut&lt;Target=SomeTrait&gt;\n{\n    for widget in widgets {\n        // ...\n    }\n}\n</code></pre>\n\n<p>Then all you need is producing an iterator that yields <code>RefMut</code>'s, which is easily accomplished with <code>v1.iter_mut().map(|x| x.borrow_mut())</code>. <a href=\"https://play.rust-lang.org/?gist=8b4b123afce78b1f58f7bc5758e2e367&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">Here's</a> an example.</p>\n"}, {"comments": [{"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1474912840, "post_id": 39709173, "comment_id": 66716670, "body": "That&#39;s useful, thanks. I think I get the rules for elided lifetimes in function signatures (at least sometimes). Where is the inferred <code>&#39;static</code> on the <code>Rc&lt;RefCell&lt;SomeTrait&gt;&gt;</code> described/documented?"}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1474917609, "post_id": 39709173, "comment_id": 66719325, "body": "I think I&#39;ve found it: <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0599-default-object-bound.md\" rel=\"nofollow noreferrer\">RFC 599</a>"}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1474922269, "post_id": 39709173, "comment_id": 66721964, "body": "...amended by <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1156-adjust-default-object-bounds.md\" rel=\"nofollow noreferrer\">RFC 1156</a>"}], "tags": [], "owner": {"reputation": 36975, "user_id": 94977, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/8341c5bff3dcbd8ed34d9d68bd4169f2?s=128&d=identicon&r=PG", "display_name": "Jason Orendorff", "link": "https://stackoverflow.com/users/94977/jason-orendorff"}, "is_accepted": true, "score": 2, "last_activity_date": 1474911857, "creation_date": 1474911857, "answer_id": 39709173, "question_id": 39701253, "link": "https://stackoverflow.com/questions/39701253/turning-a-vecrcrefcellt-into-a-mut-t/39709173#39709173", "title": "Turning a Vec&lt;Rc&lt;RefCell&lt;T&gt;&gt;&gt; into a &amp;[&amp;mut T]", "body": "<p>First, I agree with @delnan that you should switch to an iterator-based interface if you can.</p>\n\n<p>Most of this code is just fine, and after changing <code>foo</code> and <code>Wrapper</code> to be a bit more flexible, I was able to tweak the rest and get it to compile:</p>\n\n<pre><code>use std::cell::{RefCell,RefMut};\nuse std::vec::Vec;\nuse std::rc::Rc;\n\ntrait SomeTrait {}\n\nstruct Wrapper&lt;'a, 'b&gt; where 'b: 'a {\n    pub r: &amp;'a mut (SomeTrait + 'b),\n}\n\nfn foo&lt;'a, 'b&gt;(_: &amp;'a mut [Wrapper&lt;'a, 'b&gt;]) where 'b: 'a {}\n\nfn main() {\n    let mut v1: Vec&lt;Rc&lt;RefCell&lt;SomeTrait&gt;&gt;&gt; = unimplemented!();\n\n    let mut v_rm: Vec&lt;RefMut&lt;_&gt;&gt; = v1.iter_mut().map(|r| r.borrow_mut()).collect();\n    let mut v_wrapper: Vec&lt;Wrapper&gt; = v_rm.iter_mut().map(|mut rm| Wrapper{ r: &amp;mut **rm }).collect();\n    foo(&amp;mut v_wrapper[..]);\n}\n</code></pre>\n\n<p>The key thing to understand here is that <em>every</em> trait object type has an implicit lifetime stapled to it, because an impl may contain references. There's no such type as <code>SomeTrait</code>, only <code>SomeTrait + 'a</code> or <code>SomeTrait + 'b</code> or <code>SomeTrait + 'static</code>.</p>\n\n<p>The problem in your code was a mismatch between two things Rust inferred.</p>\n\n<ul>\n<li><p>Where you wrote <code>Rc&lt;RefCell&lt;SomeTrait&gt;&gt;</code>, Rust assumed you meant <code>Rc&lt;RefCell&lt;SomeTrait + 'static&gt;&gt;</code>.</p></li>\n<li><p>Where you wrote <code>fn foo(_: &amp;[Wrapper]) {}</code>, different rules applied, and Rust assumed you meant <code>fn foo&lt;'a&gt;(_: &amp;'a [Wrapper&lt;'a&gt; + 'a])</code>.</p></li>\n</ul>\n\n<p>D'oh. Under those assumptions, the puzzle indeed has no solutions, and that's why I had to loosen things up.</p>\n\n<p>If you don't want that <code>'b</code> lifetime parameter, you can ditch it and just change <code>'b</code> to <code>'static</code> in the one place where it's used (on the type of <code>Wrapper::r</code>). That's less flexible: you'll be limited to <code>SomeTrait</code> impls that have static lifetime.</p>\n"}], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 402, "favorite_count": 0, "accepted_answer_id": 39709173, "answer_count": 2, "score": 1, "last_activity_date": 1474911857, "creation_date": 1474888173, "question_id": 39701253, "link": "https://stackoverflow.com/questions/39701253/turning-a-vecrcrefcellt-into-a-mut-t", "title": "Turning a Vec&lt;Rc&lt;RefCell&lt;T&gt;&gt;&gt; into a &amp;[&amp;mut T]", "body": "<p>I've got a vector of reference-counted <code>RefCell</code>s and want to pass a <code>Vec</code> of (<code>mut</code>) references into the <code>RefCell</code>s into a function.  The references shouldn't need to outlive the function call.</p>\n\n<p>It seems like it should be possible (with just one, something like <code>&amp;*x.borrow_mut()</code> is ok).  I tried to keep intermediate vectors of <code>RefMut</code> and <code>&amp;mut</code> to control the lifetimes, but I haven't yet worked out a way to get it to work:</p>\n\n<pre><code>use std::cell::{RefCell,RefMut};\nuse std::vec::Vec;\nuse std::rc::Rc;\n\ntrait SomeTrait {}\n\nstruct Wrapper&lt;'a&gt; {\n    pub r: &amp;'a mut SomeTrait,\n}\n\nfn foo(_: &amp;[Wrapper]) {}\n\nfn main() {\n    let mut v1: Vec&lt;Rc&lt;RefCell&lt;SomeTrait&gt;&gt;&gt; = unimplemented!();\n\n    let mut v_rm: Vec&lt;RefMut&lt;_&gt;&gt; = v1.iter_mut().map(|r| r.borrow_mut()).collect();\n    let mut v_wrapper: Vec&lt;Wrapper&gt; = v_rm.iter_mut().map(|ref mut rm| Wrapper{ r: &amp;mut ***rm }).collect();\n    foo(&amp;v_wrapper[..]);\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=b79b6ca328c19aebbf5dca39e70bae03&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">playground</a>)</p>\n\n<p>There's clearly a lifetime issue:</p>\n\n<pre><code>rustc 1.11.0 (9b21dcd6a 2016-08-15)\nerror: borrowed value does not live long enough\n  --&gt; &lt;anon&gt;:17:60\n   |&gt;\n17 |&gt;     let mut v_wrapper: Vec&lt;Wrapper&gt; = v_rm.iter_mut().map(|ref mut rm| Wrapper{ r: &amp;mut ***rm }).collect();\n   |&gt;                                                            ^^^^^^^^^^\nnote: reference must be valid for the block suffix following statement 2 at 17:107...\n  --&gt; &lt;anon&gt;:17:108\n   |&gt;\n17 |&gt;     let mut v_wrapper: Vec&lt;Wrapper&gt; = v_rm.iter_mut().map(|ref mut rm| Wrapper{ r: &amp;mut ***rm }).collect();\n   |&gt;                                                                                                            ^\nnote: ...but borrowed value is only valid for the block at 17:71\n  --&gt; &lt;anon&gt;:17:72\n   |&gt;\n17 |&gt;     let mut v_wrapper: Vec&lt;Wrapper&gt; = v_rm.iter_mut().map(|ref mut rm| Wrapper{ r: &amp;mut ***rm }).collect();\n   |&gt;                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n</code></pre>\n\n<p>I do control <code>foo</code> so can alter its API to make things easier, but it's in a different module/crate and I don't really want it to need to know that I keep my <code>SomeTrait</code> objects in an <code>Rc&lt;RefCell&lt;_&gt;&gt;</code>.</p>\n"}, {"tags": ["winapi", "rust", "console-application"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1474893582, "post_id": 39695431, "comment_id": 66704346, "body": "Which terminal emulator are you using? Are you using <code>cmd.exe</code>? Powershell? Something like bash? Could the terminal emulator program be intercepting that key combo?"}, {"owner": {"reputation": 14451, "user_id": 33499, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17c590aa4c56918b47c7ba5e39dba5d8?s=128&d=identicon&r=PG", "display_name": "wimh", "link": "https://stackoverflow.com/users/33499/wimh"}, "edited": false, "score": 2, "creation_date": 1474896065, "post_id": 39695431, "comment_id": 66706091, "body": "Can you try to disable <code>ENABLE_PROCESSED_INPUT</code> using <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms686033(v=vs.85).aspx\" rel=\"nofollow noreferrer\"><code>SetConsoleMode</code></a>?"}, {"owner": {"reputation": 2874, "user_id": 86803, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/204439a418e6631a574e0c90ea8e17de?s=128&d=identicon&r=PG", "display_name": "oconnor0", "link": "https://stackoverflow.com/users/86803/oconnor0"}, "edited": false, "score": 0, "creation_date": 1474899530, "post_id": 39695431, "comment_id": 66708708, "body": "I&#39;m using <code>cmd.exe</code>. I&#39;ll try disabling <code>ENABLE_PROCESSED_INPUT</code> tonight. Thanks."}, {"owner": {"reputation": 2065, "user_id": 2836552, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/47c7b954e22c8f427b46edf4cc9c2432?s=128&d=identicon&r=PG&f=1", "display_name": "ThreeStarProgrammer57", "link": "https://stackoverflow.com/users/2836552/threestarprogrammer57"}, "edited": false, "score": 0, "creation_date": 1518569489, "post_id": 39695431, "comment_id": 84557725, "body": "It seems that <code>ENABLE_LINE_INPUT</code> is the culprit! Please see my answer."}], "answers": [{"comments": [{"owner": {"reputation": 2065, "user_id": 2836552, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/47c7b954e22c8f427b46edf4cc9c2432?s=128&d=identicon&r=PG&f=1", "display_name": "ThreeStarProgrammer57", "link": "https://stackoverflow.com/users/2836552/threestarprogrammer57"}, "edited": false, "score": 0, "creation_date": 1518569415, "post_id": 39715270, "comment_id": 84557706, "body": "+1, as you helped me find the solution. However, I found that ENABLE_PROCESSED_INPUT is not culprit, please see my answer."}], "tags": [], "owner": {"reputation": 2874, "user_id": 86803, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/204439a418e6631a574e0c90ea8e17de?s=128&d=identicon&r=PG", "display_name": "oconnor0", "link": "https://stackoverflow.com/users/86803/oconnor0"}, "is_accepted": true, "score": 3, "last_activity_date": 1474944685, "creation_date": 1474944685, "answer_id": 39715270, "question_id": 39695431, "link": "https://stackoverflow.com/questions/39695431/ctrl-s-input-event-in-windows-console-with-readconsoleinputw/39715270#39715270", "title": "Ctrl-S input event in Windows console with ReadConsoleInputW", "body": "<p>Calling <code>SetConsoleMode</code> with <code>ENABLE_WINDOW_INPUT | ENABLE_MOUSE_INPUT | ENABLE_EXTENDED_FLAGS</code> as the second argument (thus disabling <code>ENABLE_PROCESSED_INPUT</code>) did the trick.</p>\n"}, {"comments": [{"owner": {"reputation": 1777, "user_id": 3353157, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6168a2c2f5e3582addf6d9d70ce13749?s=128&d=identicon&r=PG", "display_name": "Peter Camilleri", "link": "https://stackoverflow.com/users/3353157/peter-camilleri"}, "edited": false, "score": 0, "creation_date": 1541181163, "post_id": 48778046, "comment_id": 93141804, "body": "Clearly the ENABLE_LINE_INPUT does things that are not documented by MS."}, {"owner": {"reputation": 29355, "user_id": 205580, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/460e6e299e385fd46df156c85a1dd55f?s=128&d=identicon&r=PG", "display_name": "Eryk Sun", "link": "https://stackoverflow.com/users/205580/eryk-sun"}, "edited": false, "score": 1, "creation_date": 1552981000, "post_id": 48778046, "comment_id": 97204637, "body": "Normally we wouldn&#39;t want line editing and history for a low-level read anyway. But for anyone who wants to read Ctrl+S normally with line-input mode, disable extended text selection in the console defaults / properties. This corresponds to the &quot;ExtendedEditKey&quot; DWORD value in &quot;HKCU\\Console&quot; (or a window-title subkey). Unfortunately this also disables immediate access to the new text selection features in Windows 10, such as Shift+ArrowKeys. Instead we have to first enter mark mode via Ctrl+M."}, {"owner": {"reputation": 29355, "user_id": 205580, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/460e6e299e385fd46df156c85a1dd55f?s=128&d=identicon&r=PG", "display_name": "Eryk Sun", "link": "https://stackoverflow.com/users/205580/eryk-sun"}, "edited": false, "score": 0, "creation_date": 1552981362, "post_id": 48778046, "comment_id": 97204810, "body": "This should be selected as the answer. Though I&#39;d prefer if it simply cut to the chase instead of reviewing everything that doesn&#39;t work. Pausing the console via Ctrl+S is a feature of line-input mode with extended editing keys disabled. Programmatically the console API only has the course-grained control to disable line-input mode, but that&#39;s good enough for most cases where we need this for a low-level read."}], "tags": [], "owner": {"reputation": 2065, "user_id": 2836552, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/47c7b954e22c8f427b46edf4cc9c2432?s=128&d=identicon&r=PG&f=1", "display_name": "ThreeStarProgrammer57", "link": "https://stackoverflow.com/users/2836552/threestarprogrammer57"}, "is_accepted": false, "score": 2, "last_activity_date": 1518569775, "last_edit_date": 1518569775, "creation_date": 1518569422, "answer_id": 48778046, "question_id": 39695431, "link": "https://stackoverflow.com/questions/39695431/ctrl-s-input-event-in-windows-console-with-readconsoleinputw/48778046#48778046", "title": "Ctrl-S input event in Windows console with ReadConsoleInputW", "body": "<p>oconnor0's answer helped me find the solution.</p>\n\n<p>However, I could not get ctrl-s event by disabling <code>ENABLE_PROCESSED_INPUT</code>, so I tried using only <code>ENABLE_WINDOW_INPUT | ENABLE_MOUSE_INPUT | ENABLE_EXTENDED_FLAGS</code> as suggested by oconnor0. This worked, but this means <code>ENABLE_PROCESSED_INPUT</code> is not the culrpit!</p>\n\n<p>So I tried:</p>\n\n<pre><code>//This didn't work\nif (!GetConsoleMode(hConsoleInput, &amp;lpMode)) Error();\nlpMode &amp;= ~(ENABLE_PROCESSED_INPUT);\nif (!SetConsoleMode(hConsoleInput, lpMode)) Error();\n\n//This worked\nif (!GetConsoleMode(hConsoleInput, &amp;lpMode)) Error();\nlpMode &amp;= ~(ENABLE_ECHO_INPUT | ENABLE_LINE_INPUT);\nif (!SetConsoleMode(hConsoleInput, lpMode)) Error();\n</code></pre>\n\n<p>Disabling <code>ENABLE_ECHO_INPUT</code> forces you to disable <code>ENABLE_ECHO_INPUT</code> (see msdn), but it isn't the culprit because:</p>\n\n<pre><code>//This didn't work either\nif (!GetConsoleMode(hConsoleInput, &amp;lpMode)) Error();\nlpMode &amp;= ~(ENABLE_PROCESSED_INPUT | ENABLE_ECHO_INPUT);\nif (!SetConsoleMode(hConsoleInput, lpMode)) Error();\n</code></pre>\n\n<p><strong>So this means that <code>ENABLE_LINE_INPUT</code> is the culprit!</strong> </p>\n\n<p>It's not clear why though:</p>\n\n<blockquote>\n  <p>ENABLE_LINE_INPUT 0x0002   The ReadFile or ReadConsole function returns\n  only when a carriage return character is read. If this mode is\n  disabled, the functions return when one or more characters are\n  available.</p>\n</blockquote>\n"}], "owner": {"reputation": 2874, "user_id": 86803, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/204439a418e6631a574e0c90ea8e17de?s=128&d=identicon&r=PG", "display_name": "oconnor0", "link": "https://stackoverflow.com/users/86803/oconnor0"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 646, "favorite_count": 0, "accepted_answer_id": 39715270, "answer_count": 2, "score": 3, "last_activity_date": 1518569775, "creation_date": 1474868677, "last_edit_date": 1474893672, "question_id": 39695431, "link": "https://stackoverflow.com/questions/39695431/ctrl-s-input-event-in-windows-console-with-readconsoleinputw", "title": "Ctrl-S input event in Windows console with ReadConsoleInputW", "body": "<p>I am using <code>ReadConsoleInputW</code> to read Windows 10 console input. I want to be able to detect when <kbd>Ctrl</kbd>+<kbd>S</kbd> is pressed. Using the code I have, I can detect <kbd>Ctrl</kbd>+<kbd>Q</kbd> without issue, but I'm not seeing anything for <kbd>Ctrl</kbd>+<kbd>S</kbd>. Is <kbd>Ctrl</kbd>+<kbd>S</kbd> even detectable?</p>\n\n<p>The below is the sequence of <code>INPUT_RECORD</code> I read when pressing <kbd>Ctrl</kbd>+<kbd>S</kbd> a few times, followed by <kbd>Ctrl</kbd>+<kbd>Q</kbd>.</p>\n\n<pre><code>Key { key_down: true, repeat_count: 1, key_code: 17, scan_code: 29, wide_char: 0, control_key_state: 40 }\nKey { key_down: true, repeat_count: 1, key_code: 17, scan_code: 29, wide_char: 0, control_key_state: 40 }\nKey { key_down: true, repeat_count: 1, key_code: 17, scan_code: 29, wide_char: 0, control_key_state: 40 }\nKey { key_down: true, repeat_count: 1, key_code: 17, scan_code: 29, wide_char: 0, control_key_state: 40 }\nKey { key_down: true, repeat_count: 1, key_code: 17, scan_code: 29, wide_char: 0, control_key_state: 40 }\nKey { key_down: true, repeat_count: 1, key_code: 17, scan_code: 29, wide_char: 0, control_key_state: 40 }\nKey { key_down: true, repeat_count: 1, key_code: 17, scan_code: 29, wide_char: 0, control_key_state: 40 }\nKey { key_down: true, repeat_count: 1, key_code: 17, scan_code: 29, wide_char: 0, control_key_state: 40 }\nKey { key_down: true, repeat_count: 1, key_code: 81, scan_code: 16, wide_char: 17, control_key_state: 40 }\n</code></pre>\n\n<p>If it matters, this is in Rust using <code>wio</code>.</p>\n"}, {"tags": ["struct", "rust", "ownership"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 4, "last_activity_date": 1474856329, "creation_date": 1474856329, "answer_id": 39693823, "question_id": 39693063, "link": "https://stackoverflow.com/questions/39693063/who-has-ownership-of-a-structs-members-in-a-function-that-takes-self/39693823#39693823", "title": "Who has ownership of a struct&#39;s members in a function that takes &amp;self?", "body": "<p>In <code>find_and_remove</code>, you specified <code>&amp;self</code> in the parameter list. This means that the method will receive a borrowed pointer to <code>self</code>; i.e. the type of <code>self</code> is <code>&amp;VecCircle&lt;T&gt;</code>. Therefore, the method doesn't have ownership of the <code>VecCircle&lt;T&gt;</code>.</p>\n\n<p><code>find_and_remove</code> tries to call <a href=\"https://doc.rust-lang.org/stable/std/collections/struct.VecDeque.html#method.into_iter\" rel=\"nofollow\"><code>into_iter</code></a> on a <a href=\"https://doc.rust-lang.org/stable/std/collections/struct.VecDeque.html\" rel=\"nofollow\"><code>VecDeque</code></a>, and <code>into_iter</code> receives its argument by value (<code>self</code> rather than <code>&amp;self</code> or <code>&amp;mut self</code>). Because of this, Rust interprets <code>self.0</code> as trying to move the <code>VecDeque</code> out of the <code>VecCircle</code>. However, that's not allowed as you can't move anything out of borrowed content, as moving from some location makes that location invalid. But we can't just tell the caller <em>\"Hey, I just invalidated <code>self</code>, stop using it!\"</em>; if we wanted to do that, we'd have to specify <code>self</code> in the parameter list, rather than <code>&amp;self</code>.</p>\n\n<p>But that's not what you're trying to do here. <code>into_iter</code> would take ownership of the <code>VecDeque</code> and therefore <strong>destroy it</strong>. There are other ways to obtain an iterator for the <code>VecDeque</code> without destroying it. Here, we should use <a href=\"https://doc.rust-lang.org/stable/std/collections/struct.VecDeque.html#method.iter\" rel=\"nofollow\"><code>iter</code></a>, which takes <code>&amp;self</code>.</p>\n\n<p>Then, <code>find_and_remove</code> tries to call <a href=\"https://doc.rust-lang.org/stable/std/collections/struct.VecDeque.html#method.remove\" rel=\"nofollow\"><code>remove</code></a>. <code>remove</code> takes <code>&amp;mut self</code>, i.e. a mutable reference to a <code>VecDeque</code>. However, we can't borrow <code>self.0</code> as mutable, because <code>self</code> is not itself a mutable borrow. We can't just upgrade an immutable borrow to a mutable borrow: it is invalid to have both an immutable borrow and a mutable borrow usable at the same time. The solution here is to change <code>&amp;self</code> to <code>&amp;mut self</code> in the parameter list.</p>\n\n<pre><code>use std::collections::VecDeque;\n\ntrait VecCircleTraits&lt;T: Eq&gt; {\n    fn new() -&gt; VecCircle&lt;T&gt;;\n    fn find_and_remove(&amp;mut self, _: &amp;T) -&gt; Option&lt;T&gt;;\n}\n\n#[derive(Debug)]\nstruct VecCircle&lt;T: Eq&gt;(VecDeque&lt;T&gt;);\n\nimpl&lt;T: Eq&gt; VecCircleTraits&lt;T&gt; for VecCircle&lt;T&gt; {\n    fn new() -&gt; VecCircle&lt;T&gt; {\n        return VecCircle(VecDeque::&lt;T&gt;::new());\n    }\n\n    fn find_and_remove(&amp;mut self, key: &amp;T) -&gt; Option&lt;T&gt; {\n        let search_index: Option&lt;usize&gt; =  self.0.iter().position(|x| x == key);\n        if let Some(index) =  search_index {\n            self.0.remove(index)\n        } else {\n            None\n        }\n    }\n}\n</code></pre>\n\n<p>Note: I also changed the <code>key</code> parameter to <code>&amp;T</code> to solve another error, this time in the closure passed to <code>position</code>. Since <code>iter</code> iterates over references to the items in the <code>VecDeque</code>, <code>position</code> passes references to the closure. Since <code>find_and_remove</code> doesn't actually need to take ownership of the key, it should just receive an immutable borrow to it, so that both <code>x</code> and <code>key</code> are of type <code>&amp;T</code> and thus we can apply <code>==</code> to them.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1474856342, "creation_date": 1474856342, "answer_id": 39693825, "question_id": 39693063, "link": "https://stackoverflow.com/questions/39693063/who-has-ownership-of-a-structs-members-in-a-function-that-takes-self/39693825#39693825", "title": "Who has ownership of a struct&#39;s members in a function that takes &amp;self?", "body": "<p><strong>No</strong>, you don't have ownership of the <code>VecCircle</code> inside the <code>find_and_remove</code> method. All you need to know is in the function definition:</p>\n\n<pre><code>impl&lt;T: Eq&gt; VecCircleTraits&lt;T&gt; for VecCircle&lt;T&gt; {\n    fn find_and_remove(&amp;self, key: T) -&gt; Option&lt;T&gt;\n}\n</code></pre>\n\n<p>This means that you are <strong>borrowing a reference</strong> to <code>VecCircle</code>. The longer way to write this would be</p>\n\n<pre><code>fn find_and_remove(self: &amp;VecCircle, key: T) -&gt; Option&lt;T&gt;\n</code></pre>\n\n<p>Perhaps that is more evident?</p>\n\n<p>Since you don't have ownership of <code>self</code>, you cannot have ownership of <code>self.0</code>. </p>\n"}], "owner": {"reputation": 157, "user_id": 6879615, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/d9e8e439eff6de054928592076c4d3dd?s=128&d=identicon&r=PG&f=1", "display_name": "asteriskTheServer", "link": "https://stackoverflow.com/users/6879615/asterisktheserver"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1392, "favorite_count": 1, "accepted_answer_id": 39693823, "answer_count": 2, "score": 2, "last_activity_date": 1474883124, "creation_date": 1474848610, "last_edit_date": 1474883124, "question_id": 39693063, "link": "https://stackoverflow.com/questions/39693063/who-has-ownership-of-a-structs-members-in-a-function-that-takes-self", "title": "Who has ownership of a struct&#39;s members in a function that takes &amp;self?", "body": "<p>I am trying to write a small wrapper around <code>VecDeque</code>. </p>\n\n<p>Specifically I have the code (<a href=\"https://play.rust-lang.org/?gist=c9fc43f0903b753082ea1c66444d9bcc&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">playground</a>): </p>\n\n<pre><code>use std::collections::VecDeque;\n\ntrait VecCircleTraits&lt;T: Eq&gt; {\n    fn new() -&gt; VecCircle&lt;T&gt;;\n    fn find_and_remove(&amp;self, _: T) -&gt; Option&lt;T&gt;;\n}\n\n#[derive(Debug)]\nstruct VecCircle&lt;T: Eq&gt;(VecDeque&lt;T&gt;);\n\nimpl&lt;T: Eq&gt; VecCircleTraits&lt;T&gt; for VecCircle&lt;T&gt; {\n    fn new() -&gt; VecCircle&lt;T&gt; {\n        return VecCircle(VecDeque::&lt;T&gt;::new());\n    }\n\n    fn find_and_remove(&amp;self, key: T) -&gt; Option&lt;T&gt; {\n        let search_index: Option&lt;usize&gt; = self.0.into_iter().position(|x| x == key); //error 1\n        if let Some(index) = search_index {\n            return self.0.remove(index); // error 2\n        } else {\n            return None;\n        }\n    }\n}\n</code></pre>\n\n<p>Which gives me the following errors: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>    error: cannot borrow immutable anonymous field `self.0` as mutable\n  --&gt; &lt;anon&gt;:20:20\n   |&gt;\n20 |&gt;             return self.0.remove(index); // error 2\n   |&gt;                    ^^^^^^\n\nerror: cannot move out of borrowed content [--explain E0507]\n  --&gt; &lt;anon&gt;:18:44\n   |&gt;\n18 |&gt;         let search_index: Option&lt;usize&gt; =  self.0.into_iter().position(|x| x == key); //error 1\n   |&gt;                                            ^^^^ cannot move out of borrowed content\n</code></pre>\n\n<p>However, I am little confused as who has ownership over <code>self.0</code>? If I am understanding the docs correctly, wouldn't the memory region be bounded to <code>self.0</code> and therefore giving it the ownership? Sorry for the shallow logic there but I am still trying to understand the ownership system.</p>\n"}, {"tags": ["rust", "rust-cargo", "rust-crates"], "answers": [{"comments": [{"owner": {"reputation": 145, "user_id": 1858683, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/a18360cbed67a92f280e6a957b45641d?s=128&d=identicon&r=PG", "display_name": "soplu", "link": "https://stackoverflow.com/users/1858683/soplu"}, "edited": false, "score": 0, "creation_date": 1474851608, "post_id": 39693071, "comment_id": 66685791, "body": "Perfect, this solved my problem. Your very first statement actually helped a lot in clearing what I was trying to produce. Thank you. Could I declare multiple libraries using that same method? Akin to   <code>[lib]</code> <code>name = &quot;otherlib&quot;</code> <code>path = &quot;src&#47;otherlib&#47;lib.rs&quot;</code>"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 145, "user_id": 1858683, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/a18360cbed67a92f280e6a957b45641d?s=128&d=identicon&r=PG", "display_name": "soplu", "link": "https://stackoverflow.com/users/1858683/soplu"}, "edited": false, "score": 0, "creation_date": 1474855232, "post_id": 39693071, "comment_id": 66686557, "body": "Cargo only supports one library per package. You can reference local packages in Cargo.toml with <a href=\"http://doc.crates.io/specifying-dependencies.html#specifying-path-dependencies\" rel=\"nofollow noreferrer\">path dependencies</a>."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 1, "last_activity_date": 1474848728, "creation_date": 1474848728, "answer_id": 39693071, "question_id": 39692942, "link": "https://stackoverflow.com/questions/39692942/importing-non-root-module-from-multiple-non-root-binaries/39693071#39693071", "title": "Importing non-root module from multiple non-root binaries", "body": "<p>You are not building <code>common</code> as a crate right now. The crates being built are the library <code>clientserver</code> (the default name for the library is the package name) and the binaries <code>client</code> and <code>server</code>.</p>\n\n<p>Normally, <code>extern crate clientserver;</code> should work. However, if you want to name your library differently, you can do so by specifying a different name in a <a href=\"http://doc.crates.io/manifest.html#configuring-a-target\" rel=\"nofollow\"><code>[lib]</code> section in Cargo.toml</a>. In this section, you can also specify a different source path for the library's main source file. In your case, it will probably be better, otherwise you'll end up with a crate named <code>common</code> and all of its contents would be in a module named <code>common</code>, so you'd have to access everything as <code>common::common::foo</code>. For example, by adding this to your Cargo.toml:</p>\n\n<pre><code>[lib]\nname = \"common\"\npath = \"src/common/lib.rs\"\n</code></pre>\n\n<p>you could combine <code>src/lib.rs</code> and <code>src/common/mod.rs</code> into <code>src/common/lib.rs</code>. Then, <code>extern crate common;</code> should work in your binaries.</p>\n"}], "owner": {"reputation": 145, "user_id": 1858683, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/a18360cbed67a92f280e6a957b45641d?s=128&d=identicon&r=PG", "display_name": "soplu", "link": "https://stackoverflow.com/users/1858683/soplu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 581, "favorite_count": 0, "accepted_answer_id": 39693071, "answer_count": 1, "score": 3, "last_activity_date": 1474856009, "creation_date": 1474847416, "last_edit_date": 1495535649, "question_id": 39692942, "link": "https://stackoverflow.com/questions/39692942/importing-non-root-module-from-multiple-non-root-binaries", "title": "Importing non-root module from multiple non-root binaries", "body": "<p>I am learning Rust and decided to write a simple client/server program. Both the client and the server will be using a very simple module I've already written. Knowing that this code might grow, I decided to compartmentalize my source for clarity. Right now my current hierarchy looks as follows:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>\u251c\u2500\u2500 Cargo.lock\n\u251c\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 client\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 main.rs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 common\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 communicate.rs\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 mod.rs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 lib.rs\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 server\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 main.rs\n</code></pre>\n\n<p><a href=\"https://stackoverflow.com/questions/22596920/split-a-module-across-several-files\">Many</a> <a href=\"http://blog.thiago.me/notes-about-rust-modules/\" rel=\"nofollow noreferrer\">of</a> <a href=\"https://stackoverflow.com/questions/20922091/how-do-you-use-parent-module-imports-in-rust\">the</a> examples I found on Stack Overflow and the net provide great samples for when the <code>main.rs</code> is in the project root directory. Unfortunately I'm trying to do something different as shown above.</p>\n\n<p><code>communicate.rs</code> contains all of the network code I have written. Eventually I will add other Rust files here and include their <code>public mod</code> statement in <code>mod.rs</code>. Currently <code>common/mod.rs</code> all I have is \n<code>pub mod communicate;</code></p>\n\n<p>Focusing on just the <code>client</code> folder, all I have is <code>main.rs</code> as shown. The file \"header\" lists</p>\n\n<pre><code>extern crate common;\n\nuse std::thread;\nuse std::time;\nuse std::net;\nuse std::mem;\n\nuse common::communicate;\n\npub fn main() {\n   // ...\n}\n</code></pre>\n\n<p>Besides the fundamental <code>[package]</code> section, all I have in <code>Cargo.toml</code> is</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[[bin]]\nname = \"server\"\npath = \"src/server/main.rs\"\n\n[[bin]]\nname = \"client\"\npath = \"src/client/main.rs\"\n</code></pre>\n\n<p>When I try to build the client binary, the compiler complains that the <code>common</code> crate could not be found.</p>\n\n<pre><code>$ cargo build \n   Compiling clientserver v0.1.0 (file:///home/soplu/rust/RustClientServer)\nclient/main.rs:1:1: 1:21 error: can't find crate for `common` [E0463]\nclient/main.rs:1 extern crate common;\n                 ^~~~~~~~~~~~~~~~~~~~\nerror: aborting due to previous error\nerror: Could not compile `clientserver`.\n\nTo learn more, run the command again with --verbose.\n</code></pre>\n\n<p>I think this is because it is looking for a common crate within the <code>client/</code> folder. I had this same problem when I tried the <code>mod</code> statement instead of <code>extern crate</code> statement. </p>\n\n<pre><code>use std::thread;\nuse std::time;\nuse std::net;\nuse std::mem;\n\nmod common;\n</code></pre>\n\n<p>Gave me:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>client/main.rs:6:5: 6:11 error: file not found for module `common`\nclient/main.rs:6 mod common;\n                     ^~~~~~\nclient/main.rs:6:5: 12:11 help: name the file either common.rs or common/mod.rs inside the directory \"client\"\n</code></pre>\n\n<p>I also tried (using the <code>extern crate...</code>) adding a <code>lib.rs</code> in the <code>client</code> whose contents are <code>pub mod common;</code> but I still get the same error as the first.</p>\n\n<p>One potential solution I found to model it like <a href=\"https://github.com/matthiasbeyer/imag\" rel=\"nofollow noreferrer\">this project</a>, but this would require a <code>Cargo.toml</code> in every folder, something which I'd like to avoid.</p>\n\n<p>I feel like I am close but am missing something.</p>\n"}, {"tags": ["c", "gcc", "rust"], "answers": [{"comments": [{"owner": {"reputation": 8608, "user_id": 1091116, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/15098b2b940cacd8b4d07026e01e3102?s=128&d=identicon&r=PG", "display_name": "d33tah", "link": "https://stackoverflow.com/users/1091116/d33tah"}, "edited": false, "score": 0, "creation_date": 1474819379, "post_id": 39688813, "comment_id": 66677017, "body": "Ah! It looks that I might have either chosen wrong crate_type or unnecessarily used --emit=obj. Could the same work with --emit=obj if I used a different crate type?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 8608, "user_id": 1091116, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/15098b2b940cacd8b4d07026e01e3102?s=128&d=identicon&r=PG", "display_name": "d33tah", "link": "https://stackoverflow.com/users/1091116/d33tah"}, "edited": false, "score": 0, "creation_date": 1474819624, "post_id": 39688813, "comment_id": 66677093, "body": "@d33tah why do you wish to use <code>--emit=obj</code>?"}, {"owner": {"reputation": 8608, "user_id": 1091116, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/15098b2b940cacd8b4d07026e01e3102?s=128&d=identicon&r=PG", "display_name": "d33tah", "link": "https://stackoverflow.com/users/1091116/d33tah"}, "edited": false, "score": 0, "creation_date": 1476957554, "post_id": 39688813, "comment_id": 67571440, "body": "Because I got used to this way of linking. But if it&#39;s non-trivial, I can link in a static library."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1474819599, "last_edit_date": 1474819599, "creation_date": 1474818671, "answer_id": 39688813, "question_id": 39688526, "link": "https://stackoverflow.com/questions/39688526/error-when-linking-c-rust-hello-world-undefined-reference-to-stdiostdi/39688813#39688813", "title": "Error when linking C / Rust &quot;Hello world&quot;: undefined reference to `std::io::stdio::_print", "body": "<p>It's unclear to me why the code specifies <code>#![crate_type=\"staticlib\"]</code> and then the compilation goes out of its way to ignore that via <code>--emit=obj</code>. Compiling to a static library will include the necessary parts of the Rust standard library:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ rustc hello.rs\nnote: link against the following native artifacts when linking against this static library\nnote: the order and any duplication can be significant on some platforms, and so may need to be preserved\nnote: library: System\nnote: library: c\nnote: library: m\n$ gcc hi.c libhello.a -lSystem -lc -lm -o hi\n$ ./hi\nhello, world\n</code></pre>\n\n<p>This output is from macOS 10.12; check the appropriate libraries for your own system.</p>\n\n<p>Note that you can also specify the crate type on the command line: <code>--crate-type staticlib</code>; it doesn't need to be in the source.</p>\n"}], "owner": {"reputation": 8608, "user_id": 1091116, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/15098b2b940cacd8b4d07026e01e3102?s=128&d=identicon&r=PG", "display_name": "d33tah", "link": "https://stackoverflow.com/users/1091116/d33tah"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 626, "favorite_count": 0, "accepted_answer_id": 39688813, "answer_count": 1, "score": 1, "last_activity_date": 1474819599, "creation_date": 1474816934, "last_edit_date": 1474818501, "question_id": 39688526, "link": "https://stackoverflow.com/questions/39688526/error-when-linking-c-rust-hello-world-undefined-reference-to-stdiostdi", "title": "Error when linking C / Rust &quot;Hello world&quot;: undefined reference to `std::io::stdio::_print", "body": "<p>I'd like to build and link the two files:</p>\n\n<p><strong>hello.rs</strong></p>\n\n<pre><code>#![crate_type=\"staticlib\"]\n\n#[no_mangle]\npub extern \"C\" fn print_hello() {\n    println!(\"hello, world\");\n}\n</code></pre>\n\n<p><strong>hi.c</strong></p>\n\n<pre><code>extern void print_hello();\n\nint main()\n{\n    print_hello();\n}\n</code></pre>\n\n<p>Here are the commands I used and the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>&gt; rustc hello.rs --emit=obj\n&gt; gcc hi.c hello.o -o hi \nhello.o: In function `print_hello':\nhello.0.rs:(.text.print_hello+0xa8): undefined reference to `std::io::stdio::_print::h3f2263e4b2c9891b'\ncollect2: error: ld returned 1 exit status\n</code></pre>\n\n<p>How can I include Rust's stdlib while linking those two?</p>\n"}, {"tags": ["struct", "rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 4239, "user_id": 635786, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e04f3a3d7dcc1cec8a99fe22ecdb6215?s=128&d=identicon&r=PG", "display_name": "Shu", "link": "https://stackoverflow.com/users/635786/shu"}, "edited": false, "score": 0, "creation_date": 1474795353, "post_id": 39684829, "comment_id": 66670129, "body": "Thanks! I didn&#39;t know about the <code>for</code> in the <code>where</code> clause."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 4239, "user_id": 635786, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e04f3a3d7dcc1cec8a99fe22ecdb6215?s=128&d=identicon&r=PG", "display_name": "Shu", "link": "https://stackoverflow.com/users/635786/shu"}, "edited": false, "score": 0, "creation_date": 1474813133, "post_id": 39684829, "comment_id": 66674978, "body": "@Shu: The <code>for</code> is there to introduce the lifetime name, semantically it means that the following relationships should be valid whatever the value of <code>&#39;a</code>."}], "tags": [], "owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "is_accepted": true, "score": 4, "last_activity_date": 1474791926, "creation_date": 1474791926, "answer_id": 39684829, "question_id": 39684780, "link": "https://stackoverflow.com/questions/39684780/implementing-partialeq-for-a-struct-with-from-types/39684829#39684829", "title": "Implementing PartialEq for a struct with From types", "body": "<p>You just need one tiny modification to make that <code>PartialEq</code> work: require <code>Data: From&lt;&amp;'a T&gt;</code> since you're using <code>Data::from(other)</code> and not <code>other.into()</code>:</p>\n\n<pre><code>impl&lt;T&gt; PartialEq&lt;T&gt; for Data\n    where for&lt;'a&gt; Data: From&lt;&amp;'a T&gt;\n{\n    fn eq(&amp;self, other: &amp;T) -&gt; bool {\n        let o = Data::from(other);\n        self.data == o.data\n    }\n}\n</code></pre>\n\n<p>You also need two tiny modifications to make the <code>assert_eq!</code> work:</p>\n\n<ol>\n<li><p>Since you're implementing PartialEq for Data, the RHS is <code>T</code> and the LHS is <code>Data</code>, so you can only compare using <code>Data::from(5) == 5</code> and not <code>5 == Data::from(5)</code>.</p></li>\n<li><p>You need to implement <code>Debug</code> if you want to use <code>assert_eq!</code>.</p></li>\n</ol>\n\n<p>Final working code:</p>\n\n<pre><code>#[derive(Debug)]\nstruct Data {\n    data: i64,\n}\n\nimpl From&lt;i64&gt; for Data {\n    fn from(v: i64) -&gt; Data {\n        Data { data: v }\n    }\n}\n\nimpl&lt;'a&gt; From&lt;&amp;'a i64&gt; for Data {\n    fn from(v: &amp;'a i64) -&gt; Data {\n        Data { data: v.clone() }\n    }\n}\n\nimpl&lt;T&gt; PartialEq&lt;T&gt; for Data\n    where for&lt;'a&gt; Data: From&lt;&amp;'a T&gt;\n{\n    fn eq(&amp;self, other: &amp;T) -&gt; bool {\n        let o = Data::from(other);\n        self.data == o.data\n    }\n}\n\nfn main() {\n    let s = Data::from(5);\n    assert_eq!(s, 5);\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 4239, "user_id": 635786, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e04f3a3d7dcc1cec8a99fe22ecdb6215?s=128&d=identicon&r=PG", "display_name": "Shu", "link": "https://stackoverflow.com/users/635786/shu"}, "edited": false, "score": 0, "creation_date": 1474795461, "post_id": 39684896, "comment_id": 66670151, "body": "Thanks to you too. I accepted Dogbert&#39;s answer because it was the fastest, but the link to the nomicon is much appreciated."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 7, "last_activity_date": 1474793215, "last_edit_date": 1474793215, "creation_date": 1474792514, "answer_id": 39684896, "question_id": 39684780, "link": "https://stackoverflow.com/questions/39684780/implementing-partialeq-for-a-struct-with-from-types/39684896#39684896", "title": "Implementing PartialEq for a struct with From types", "body": "<p>The compiler is right: adding <code>where Data: From&lt;&amp;T&gt;</code> <em>is</em> the right thing to do. But as you already noticed, a lifetime specifier is required in this case. But <strong>how</strong> do we declare it?</p>\n\n<p>What we want to say to the compiler:</p>\n\n<blockquote>\n  <p><code>Data</code> should implement <code>From&lt;&amp;'a T&gt;</code> for <strong>any</strong> lifetime <code>'a</code></p>\n</blockquote>\n\n<p>We <em>can't</em> declare the lifetime on the <code>impl</code> block, because this expresses something different. We instead need to use <a href=\"https://doc.rust-lang.org/nomicon/hrtb.html\">\u201chigher-ranked lifetime bounds\u201d</a>, as shown here:</p>\n\n<pre><code>    where Data: for&lt;'a&gt; From&lt;&amp;'a T&gt;\n//              ^^^^^^^\n</code></pre>\n\n<p>This fixes your main problem.</p>\n\n<hr>\n\n<p>There are two minor, unrelated, additional problems:</p>\n\n<ul>\n<li>you need to swap the arguments in <code>assert_eq!()</code>, because of the way <code>PartialEq</code> is used: <code>assert_eq!(s, 5)</code></li>\n<li>you need to <code>#[derive(Debug)]</code> for your <code>Data</code> type</li>\n</ul>\n\n<p>You can find a <strong>working version</strong> <a href=\"https://play.rust-lang.org/?gist=f0c483b2ca7321ade4d9dc112a3d33bb&amp;version=stable&amp;backtrace=0\">here on the playground</a>.</p>\n"}], "owner": {"reputation": 4239, "user_id": 635786, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e04f3a3d7dcc1cec8a99fe22ecdb6215?s=128&d=identicon&r=PG", "display_name": "Shu", "link": "https://stackoverflow.com/users/635786/shu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 527, "favorite_count": 1, "accepted_answer_id": 39684829, "answer_count": 2, "score": 5, "last_activity_date": 1474799426, "creation_date": 1474791414, "last_edit_date": 1474799426, "question_id": 39684780, "link": "https://stackoverflow.com/questions/39684780/implementing-partialeq-for-a-struct-with-from-types", "title": "Implementing PartialEq for a struct with From types", "body": "<p>I am trying to implement <code>PartialEq</code> between a struct I created and other types for which my struct implements the <code>From</code> trait. The real code is more complex and implements <code>From</code> for other types, but this is a stripped down version of the core problem.</p>\n\n<p>I want to be able to do:</p>\n\n<pre><code>let s = Data::from(5);\nassert_eq!(5, s);\n</code></pre>\n\n<p>This is the base code:</p>\n\n<pre><code>struct Data {\n    data: i64,\n}\n\nimpl From&lt;i64&gt; for Data {\n    fn from(v: i64) -&gt; Data {\n        Data { data: v }\n    }\n}\n\nimpl&lt;'a&gt; From&lt;&amp;'a i64&gt; for Data {\n    fn from(v: &amp;'a i64) -&gt; Data {\n        Data { data: v.clone() }\n    }\n}\n</code></pre>\n\n<p>This was my first try:</p>\n\n<pre><code>impl&lt;T&gt; PartialEq&lt;T&gt; for Data\n    where T: Into&lt;Data&gt;\n{\n    fn eq(&amp;self, other: &amp;T) -&gt; bool {\n        let o = Data::from(other);\n        self.data == o.data\n    }\n}\n</code></pre>\n\n<p>but I get an error:</p>\n\n<pre><code>error: the trait bound `Data: std::convert::From&lt;&amp;T&gt;` is not satisfied [--explain E0277]\n  --&gt; &lt;anon&gt;:21:17\n   |&gt;\n21 |&gt;         let o = Data::from(other);\n   |&gt;                 ^^^^^^^^^^\nhelp: consider adding a `where Data: std::convert::From&lt;&amp;T&gt;` bound\nnote: required by `std::convert::From::from`\n</code></pre>\n\n<p>So I changed the trait bound to what the compiler suggested and added all the requested lifetimes to fix the <code>missing lifetime specifier</code> error:</p>\n\n<pre><code>impl&lt;'a, T&gt; PartialEq&lt;T&gt; for Data\n    where T: 'a, Data: From&lt;&amp;'a T&gt;\n{\n    fn eq(&amp;self, other: &amp;'a T) -&gt; bool {\n        let o = Data::from(other);\n        self.data == o.data\n    }\n}\n</code></pre>\n\n<p>From which I get</p>\n\n<pre><code>error: method not compatible with trait [--explain E0308]\n  --&gt; &lt;anon&gt;:31:5\n   |&gt;\n31 |&gt;     fn eq(&amp;self, other: &amp;'a T) -&gt; bool {\n   |&gt;     ^ lifetime mismatch\nnote: expected type `fn(&amp;Data, &amp;T) -&gt; bool`\nnote:    found type `fn(&amp;Data, &amp;'a T) -&gt; bool`\nnote: the anonymous lifetime #2 defined on the block at 31:39...\n  --&gt; &lt;anon&gt;:31:40\n   |&gt;\n31 |&gt;     fn eq(&amp;self, other: &amp;'a T) -&gt; bool {\n   |&gt;                                        ^\nnote: ...does not necessarily outlive the lifetime 'a as defined on the block at 31:39\n  --&gt; &lt;anon&gt;:31:40\n   |&gt;\n31 |&gt;     fn eq(&amp;self, other: &amp;'a T) -&gt; bool {\n   |&gt;                                        ^\nhelp: consider using an explicit lifetime parameter as shown: fn eq(&amp;self, other: &amp;'a T) -&gt; bool\n  --&gt; &lt;anon&gt;:31:5\n   |&gt;\n31 |&gt;     fn eq(&amp;self, other: &amp;'a T) -&gt; bool {\n   |&gt;     ^\n</code></pre>\n\n<p>And now I'm lost, as it suggests to do exactly what I did and it refused... :/</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=157f07204d2b780e4deb5ca653605741&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\"><strong>Code on the playground</strong></a></p>\n"}, {"tags": ["types", "rust"], "comments": [{"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 1, "creation_date": 1474753733, "post_id": 39681209, "comment_id": 66662763, "body": "I guess this is to mimic <code>void*</code> (which Rust does not have), because the content of <code>WINDOW</code> never matters and <code>WINDOW</code>s always are manipulated through a pointer."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 2, "creation_date": 1474764417, "post_id": 39681209, "comment_id": 66664741, "body": "@mcarton you mean like the <code>c_void</code> type that is <a href=\"https://github.com/jeaye/ncurses-rs/blob/59fbbc6456dcd87d29a7761576723dab0c08986b/src/ll.rs#L14\" rel=\"nofollow noreferrer\">just a bit higher up in the same source file</a>? ^_^"}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1474765283, "post_id": 39681209, "comment_id": 66664885, "body": "@Shepmaster so it looks like unlike me the author knew about <code>c_void</code> :p. It&#39;d better be a new dedicated type anyway. Nice answer, as always."}], "answers": [{"comments": [{"owner": {"reputation": 451, "user_id": 136909, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f0691269f6a65431becc247f1584e785?s=128&d=identicon&r=PG", "display_name": "mjhoy", "link": "https://stackoverflow.com/users/136909/mjhoy"}, "edited": false, "score": 0, "creation_date": 1474766429, "post_id": 39682411, "comment_id": 66665057, "body": "Wow, I completely missed that part of the documentation that directly answers my question :) Thank you."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1474764873, "last_edit_date": 1495542794, "creation_date": 1474764873, "answer_id": 39682411, "question_id": 39681209, "link": "https://stackoverflow.com/questions/39681209/why-is-mut-i8-used-for-the-type-of-window-in-ncurses-rs/39682411#39682411", "title": "Why is *mut i8 used for the type of WINDOW in ncurses-rs?", "body": "<p>Unless an author of that project happens to stroll past, you won't get an authoritative answer.</p>\n\n<p>As <a href=\"https://stackoverflow.com/questions/39681209/why-mut-i8-in-ncurses-rs-c-library-wrapper#comment66662763_39681209\">mcarton points out</a>, you'd normally reach for a <code>void *</code> in C to represent a reference to an opaque struct. The authors could have just as easily done</p>\n\n<pre><code>pub type WINDOW = *mut c_void;\n</code></pre>\n\n<p>With this change, the code still compiles.</p>\n\n<p>However, there's a better option. As <a href=\"https://doc.rust-lang.org/stable/book/ffi.html#representing-opaque-structs\" rel=\"nofollow noreferrer\">the documentation says</a>:</p>\n\n<blockquote>\n  <p>To do this in Rust, let\u2019s create our own opaque types with <code>enum</code>:</p>\n\n<pre><code>pub enum Foo {}\npub enum Bar {}\n\nextern \"C\" {\n    pub fn foo(arg: *mut Foo);\n    pub fn bar(arg: *mut Bar);\n}\n</code></pre>\n  \n  <p>By using an <code>enum</code> with no variants, we create an opaque type that we\n  can\u2019t instantiate, as it has no variants. But because our <code>Foo</code> and <code>Bar</code>\n  types are different, we\u2019ll get type safety between the two of them, so\n  we cannot accidentally pass a pointer to <code>Foo</code> to <code>bar()</code>.</p>\n</blockquote>\n\n<p>In this case, it could look like:</p>\n\n<pre><code>pub enum Window {}\npub type WINDOW = *mut Window;\n</code></pre>\n\n<p>Again, the library still compiles with this change.</p>\n"}], "owner": {"reputation": 451, "user_id": 136909, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f0691269f6a65431becc247f1584e785?s=128&d=identicon&r=PG", "display_name": "mjhoy", "link": "https://stackoverflow.com/users/136909/mjhoy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 115, "favorite_count": 0, "accepted_answer_id": 39682411, "answer_count": 1, "score": 0, "last_activity_date": 1474811372, "creation_date": 1474753127, "last_edit_date": 1474811372, "question_id": 39681209, "link": "https://stackoverflow.com/questions/39681209/why-is-mut-i8-used-for-the-type-of-window-in-ncurses-rs", "title": "Why is *mut i8 used for the type of WINDOW in ncurses-rs?", "body": "<p>Given <a href=\"https://github.com/jeaye/ncurses-rs/blob/59fbbc6456dcd87d29a7761576723dab0c08986b/src/ll.rs#L35\" rel=\"nofollow\">this definition in the ncurses-rs crate</a>:</p>\n\n<pre><code>pub type WINDOW = *mut i8;\n</code></pre>\n\n<p>A <a href=\"https://github.com/jeaye/ncurses-rs/blob/59fbbc6456dcd87d29a7761576723dab0c08986b/src/ll.rs#L186\" rel=\"nofollow\">usage of <code>WINDOW</code></a>:</p>\n\n<pre><code>pub fn newwin(_:c_int,_:c_int,_:c_int,_:c_int) -&gt; WINDOW;\n</code></pre>\n\n<p>and the implementation, in the ncurses C library (<a href=\"https://github.com/mirror/ncurses/blob/89175dffb0245ffaa1ffec80373cb9990f8dc7fe/include/curses.h.in#L372\" rel=\"nofollow\">1</a>, <a href=\"https://github.com/mirror/ncurses/blob/89175dffb0245ffaa1ffec80373cb9990f8dc7fe/include/curses.h.in#L421\" rel=\"nofollow\">2</a>, <a href=\"https://github.com/mirror/ncurses/blob/89175dffb0245ffaa1ffec80373cb9990f8dc7fe/include/curses.h.in#L721\" rel=\"nofollow\">3</a>):</p>\n\n<pre><code>// 1:\ntypedef struct _win_st WINDOW;\n// 2:\nstruct _win_st { \n    /* lots of fields... */\n};\n// 3: \n(WINDOW *) newwin (int,int,int,int);\n</code></pre>\n\n<p>Why is the type of <code>WINDOW</code> <code>*mut i8</code>?</p>\n\n<p>I am reading that as a pointer to a C <code>char</code>, which is obviously not correct. Is it best practice to simply say a pointer is of type <code>i8</code> if you aren't implementing the C struct in Rust? Does it not matter at all what type that is?</p>\n"}, {"tags": ["macros", "rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1474741161, "post_id": 39679337, "comment_id": 66659385, "body": "Have you tried supplying the <code>Service</code> and <code>Server</code> names as macro parameters?"}, {"owner": {"reputation": 796, "user_id": 959847, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/40d3fdc131dbfeae3a893a354bcbcf67?s=128&d=identicon&r=PG", "display_name": "euclio", "link": "https://stackoverflow.com/users/959847/euclio"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1474742529, "post_id": 39679337, "comment_id": 66659769, "body": "No, I&#39;d like the macro to just declare the items inline, with the expectation that the user expands inside a module if namespacing is desired."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1474766797, "post_id": 39679337, "comment_id": 66665118, "body": "Note that creating a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> is drastically useful in this type of situation; it&#39;s a skill that all good programmers should have. Here&#39;s <a href=\"http://play.integer32.com/?gist=79165c85749c3707b1149a5bd12862ec\" rel=\"nofollow noreferrer\">one potential MCVE for this case</a>. Once you&#39;ve produced a MCVE, the problem will usually become much more obvious."}], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 3, "last_activity_date": 1474746183, "creation_date": 1474746183, "answer_id": 39680276, "question_id": 39679337, "link": "https://stackoverflow.com/questions/39679337/why-does-this-macro-invocation-result-in-an-unresolved-name/39680276#39680276", "title": "Why does this macro invocation result in an unresolved name?", "body": "<p>You don't have any variable named <code>arg</code> in the context in which you call the function. This is the \"unresolved <code>arg</code>\" the compiler is complaining about.</p>\n\n<pre><code>stringify!($name) =&gt; {\n    $( let $arg = Default::default(); )*\n    service.$name($( $arg ),*)\n        .map(String::from)\n        .map_err(String::from)\n}\n</code></pre>\n"}], "owner": {"reputation": 796, "user_id": 959847, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/40d3fdc131dbfeae3a893a354bcbcf67?s=128&d=identicon&r=PG", "display_name": "euclio", "link": "https://stackoverflow.com/users/959847/euclio"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 60, "favorite_count": 0, "accepted_answer_id": 39680276, "answer_count": 1, "score": 0, "last_activity_date": 1474746183, "creation_date": 1474739730, "last_edit_date": 1474742562, "question_id": 39679337, "link": "https://stackoverflow.com/questions/39679337/why-does-this-macro-invocation-result-in-an-unresolved-name", "title": "Why does this macro invocation result in an unresolved name?", "body": "<p>Here is a simplified version of a macro I am trying to implement for an RPC library I am working on:</p>\n\n<pre><code>#[macro_export]\nmacro_rules! msgpack_rpc {\n    (\n        $(\n            rpc $name:ident ( $( $arg:ident : $arg_ty:ty ),* ) -&gt; $ret_ty:ty | $err_ty:ty;\n        )+\n    ) =&gt; (\n        pub trait Service {\n            $(\n                fn $name ( &amp;self, $( $arg : $arg_ty ),* ) -&gt; Result&lt;$ret_ty, $err_ty&gt;;\n            )+\n        }\n\n        pub struct Server;\n\n        impl Server {\n            pub fn listen&lt;S&gt;(handle: &amp;(), address: (), service: S)\n                    -&gt; ::std::io::Result&lt;()&gt;\n                    where S: Service + Send + Sync + 'static {\n                let service = move |msg: &amp;str| {\n                    let result = match msg {\n                        $(\n                            stringify!($name) =&gt; {\n                                service.$name($( $arg ),*)\n                                    .map(String::from)\n                                    .map_err(String::from)\n                            }\n                        ),+,\n                        _ =&gt; String::from(\"method not supported\".into()),\n                    };\n                };\n\n                Ok(())\n            }\n        }\n    )\n}\n\nmsgpack_rpc! {\n    rpc echo(arg: i64) -&gt; i64 | ();\n}\n</code></pre>\n\n<p>The macro expansion fails to compile with this error:</p>\n\n<pre><code>error: unresolved name `arg` [--explain E0425]\n  --&gt; &lt;anon&gt;:40:17\n   |&gt;\n40 |&gt;     rpc echo(arg: i64) -&gt; i64 | ();\n   |&gt;                 ^\n&lt;anon&gt;:39:1: 41:2: note: in this expansion of msgpack_rpc! (defined in &lt;anon&gt;)\n</code></pre>\n\n<p>From reading similar questions, I know that <code>macro_rules</code> sometimes has problems expanding statements. However, I am confused as to why it is having trouble expanding items in this case.</p>\n\n<p>Is there a workaround to fix the expansion?</p>\n"}, {"tags": ["vector", "rust", "heap"], "comments": [{"owner": {"reputation": 3039, "user_id": 2851815, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/37MCt.png?s=128&g=1", "display_name": "\u043d\u0430\u0431\u0438\u044f\u0447\u043b\u044d\u0432\u044d\u043b\u0438", "link": "https://stackoverflow.com/users/2851815/%d0%bd%d0%b0%d0%b1%d0%b8%d1%8f%d1%87%d0%bb%d1%8d%d0%b2%d1%8d%d0%bb%d0%b8"}, "edited": false, "score": 2, "creation_date": 1474739955, "post_id": 39679310, "comment_id": 66659037, "body": "No. Correct. Correct."}], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 7, "last_activity_date": 1474740125, "creation_date": 1474740125, "answer_id": 39679407, "question_id": 39679310, "link": "https://stackoverflow.com/questions/39679310/does-rust-box-the-individual-items-that-are-added-to-a-vector/39679407#39679407", "title": "Does Rust box the individual items that are added to a vector?", "body": "<p><strong>Yes</strong>, <code>Vec&lt;T&gt;</code> will store all items in a contiguous buffer rather than boxing them individually. <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html\">The documentation</a> states:</p>\n\n<blockquote>\n  <p>A <em>contiguous</em> growable array type, written <code>Vec&lt;T&gt;</code> but pronounced 'vector.'</p>\n</blockquote>\n\n<p>Note that it is also possible to slice a vector, to get a <code>&amp;[T]</code> (slice). <a href=\"https://doc.rust-lang.org/std/primitive.slice.html\">Its documentation</a>, again, confirms this:</p>\n\n<blockquote>\n  <p>A dynamically-sized view into a <em>contiguous</em> sequence, <code>[T]</code>.</p>\n  \n  <p>Slices are a view into a <em>block of memory</em> represented as a pointer and a length.</p>\n</blockquote>\n"}], "owner": {"reputation": 9369, "user_id": 71079, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/3e302415f77b6c398abc0b16efc653f3?s=128&d=identicon&r=PG", "display_name": "Ralph Caraveo", "link": "https://stackoverflow.com/users/71079/ralph-caraveo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 504, "favorite_count": 0, "accepted_answer_id": 39679407, "answer_count": 1, "score": 5, "last_activity_date": 1474764005, "creation_date": 1474739614, "last_edit_date": 1474764005, "question_id": 39679310, "link": "https://stackoverflow.com/questions/39679310/does-rust-box-the-individual-items-that-are-added-to-a-vector", "title": "Does Rust box the individual items that are added to a vector?", "body": "<p>According to the Rust documentation:</p>\n\n<blockquote>\n  <p>Vectors always allocate their data on the heap.</p>\n</blockquote>\n\n<p>As I understand this, it means that:</p>\n\n<ul>\n<li>Rust will allocate enough memory on the heap to store the type <code>T</code> in a contiguous fashion.</li>\n<li>Rust <strong>will not</strong> individually box the items as they are placed into the vector.</li>\n</ul>\n\n<p>In other words, if I add a few integers to a vector, while the <code>Vec</code> will allocate enough storage to store those integers, it's not also going to box those integers; introducing another layer of indirection.</p>\n\n<p>I'm not sure how I can illustrate or confirm this with code examples but any help is appreciated.</p>\n"}, {"tags": ["floating-point", "rust", "integer", "operators"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 2, "creation_date": 1474727465, "post_id": 39677410, "comment_id": 66655113, "body": "Welcome to StackOverflow! Here on SO it&#39;s expected to show your own effort for solving the problem. Please refer to <a href=\"http://stackoverflow.com/help/how-to-ask\">this guide</a> for more information on how to ask on SO."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 7068, "user_id": 5217712, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xq83n.jpg?s=128&g=1", "display_name": "Enzokie", "link": "https://stackoverflow.com/users/5217712/enzokie"}, "edited": false, "score": 7, "creation_date": 1474727534, "post_id": 39677410, "comment_id": 66655140, "body": "@Enzokie Not quite correct. CodeReview is for working code only. This code isn&#39;t working, so in theory the problem is well suited for SO."}, {"owner": {"reputation": 7068, "user_id": 5217712, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xq83n.jpg?s=128&g=1", "display_name": "Enzokie", "link": "https://stackoverflow.com/users/5217712/enzokie"}, "edited": false, "score": 0, "creation_date": 1474727587, "post_id": 39677410, "comment_id": 66655154, "body": "Ok I understood, that seems reasonable."}, {"owner": {"reputation": 12398, "user_id": 1310566, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/5qiMO.jpg?s=128&g=1", "display_name": "Simon Forsberg", "link": "https://stackoverflow.com/users/1310566/simon-forsberg"}, "reply_to_user": {"reputation": 7068, "user_id": 5217712, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xq83n.jpg?s=128&g=1", "display_name": "Enzokie", "link": "https://stackoverflow.com/users/5217712/enzokie"}, "edited": false, "score": 0, "creation_date": 1474727773, "post_id": 39677410, "comment_id": 66655210, "body": "@Enzokie Please read <a href=\"http://meta.codereview.stackexchange.com/q/5777/31562\">this question on Meta CR</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1474727956, "post_id": 39677410, "comment_id": 66655266, "body": "Please take a second to <a href=\"http://stackoverflow.com/posts/39677410/revisions\">review some of the edits</a> that we&#39;ve made to your question. Most importantly, your question should have a <b>good title</b> (which are hard to come up with, I know!)."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 1, "creation_date": 1474742909, "post_id": 39677410, "comment_id": 66659890, "body": "@J&#248;&#234;Gr&#232;&#233;&#241; Because you can&#39;t. Rust doesn&#39;t let you add integers to floats."}, {"owner": {"reputation": 67160, "user_id": 1078084, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/wApmM.jpg?s=128&g=1", "display_name": "Akavall", "link": "https://stackoverflow.com/users/1078084/akavall"}, "edited": false, "score": 0, "creation_date": 1474856715, "post_id": 39677410, "comment_id": 66686827, "body": "I think the error message that <code>Rust</code> gives is a bit confusing. <code>Go</code> has similar behavior and would give error message: <code>invalid operation: a + b (mismatched types int and float64)</code>"}], "answers": [{"comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 4, "creation_date": 1474778947, "post_id": 39682485, "comment_id": 66666775, "body": "Though this explanation is nice, I think it&#39;s misleading. It gives one the impression that <code>0u32 + 0u64</code> should work, but Rust doesn&#39;t do <i>any</i> numeric promotions, even if promotion would be lossless. Also, <code>i32</code>\u2192<code>f64</code> is a lossless promotion, since <code>f64</code> has a 52-bit mantissa."}, {"owner": {"reputation": 401, "user_id": 6548149, "user_type": "registered", "accept_rate": 50, "profile_image": "https://graph.facebook.com/851878238276342/picture?type=large", "display_name": "J&#248;&#234; Gr&#232;&#233;&#241;", "link": "https://stackoverflow.com/users/6548149/j%c3%b8%c3%aa-gr%c3%a8%c3%a9%c3%b1"}, "edited": false, "score": 0, "creation_date": 1474799552, "post_id": 39682485, "comment_id": 66671185, "body": "<b>But why is it so</b>?   <b>C</b> lets me <code>64-bit float</code>  <b>with a</b> <code>32-bit int</code>"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1474808982, "post_id": 39682485, "comment_id": 66673743, "body": "Rust is usually against implicit conversions. That&#39;s just the way it is, but I honestly prefer it that way."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 401, "user_id": 6548149, "user_type": "registered", "accept_rate": 50, "profile_image": "https://graph.facebook.com/851878238276342/picture?type=large", "display_name": "J&#248;&#234; Gr&#232;&#233;&#241;", "link": "https://stackoverflow.com/users/6548149/j%c3%b8%c3%aa-gr%c3%a8%c3%a9%c3%b1"}, "edited": false, "score": 8, "creation_date": 1474811364, "post_id": 39682485, "comment_id": 66674442, "body": "@J&#248;&#234;Gr&#232;&#233;&#241; I&#39;m not sure what else I can add, I&#39;ve given multiple reasons why Rust does not do these implicit conversions. C allows other things that Rust does not, such as dereferencing a NULL pointer, but that doesn&#39;t mean it&#39;s a good idea that should be perpetuated. I&#39;d suppose your question could be flipped the other way: <b>Why does C allow adding a <code>double</code> to a <code>int32_t</code>?</b>"}, {"owner": {"reputation": 53, "user_id": 9209777, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5f8ba50777c61abcdc7d03a179cc340d?s=128&d=identicon&r=PG&f=1", "display_name": "Khoa Tran", "link": "https://stackoverflow.com/users/9209777/khoa-tran"}, "edited": false, "score": 0, "creation_date": 1596534098, "post_id": 39682485, "comment_id": 111834693, "body": "A very nice and detailed explanation. Thank you!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 37, "last_activity_date": 1562521628, "last_edit_date": 1562521628, "creation_date": 1474765681, "answer_id": 39682485, "question_id": 39677410, "link": "https://stackoverflow.com/questions/39677410/why-do-i-get-an-error-when-adding-an-integer-to-a-floating-point/39682485#39682485", "title": "Why do I get an error when adding an integer to a floating point?", "body": "<p>The <em>technically correct</em> answer is: because no one has written <code>impl Add&lt;f64&gt; for i32 {}</code>.</p>\n\n<p>The <em>cheeky</em> answer is: because Rust doesn't want you to shoot yourself in the foot.</p>\n\n<p>The longer, potentially more useful answer is...</p>\n\n<p>In computers, integers and floating point numbers both have a limited range, ultimately driven by the number of bits that we use to represent them. In Rust, the default type of an integer that isn't otherwise constrained is a <code>i32</code>, and the default type of a floating point that isn't otherwise constrained is a <code>f64</code>.</p>\n\n<p>Integral types don't allow you to have a fractional part, and floating point types <a href=\"https://stackoverflow.com/q/3793838/155423\">have a limited number of integers they can exactly represent</a>. If Rust let you add these two types, it would be making a decision for you about <strong>which piece of data was less important</strong>, which is not really the kind of thing you want your systems programming language to do!</p>\n\n<p>Here are the options I can see:</p>\n\n<ol>\n<li>Raise an error, forcing the programmer to pick which data type they need.</li>\n<li>Automatically convert both numbers to an integer, discarding any potential fractional values.</li>\n<li>Automatically convert both numbers to floating point, improperly representing larger integral values. </li>\n</ol>\n\n<p>Of those choices, only an error is reasonable.</p>\n\n<p>There's also the potential to introduce a type that can precisely handle arbitrary precision. Unfortunately, those types are no longer \"cheap\" for the processor to operate on, so you'd have to trade off performance.</p>\n\n<p>If the programmer wishes to perform some conversion, then you can cast the value using <code>as</code> or <code>From</code>:</p>\n\n<pre><code>f64::from(a) + b;\n</code></pre>\n\n<pre><code>a + b as i32 \n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/28273169/155423\">How do I convert between numeric types safely and idiomatically?</a></li>\n</ul>\n\n<hr>\n\n<p><a href=\"https://stackoverflow.com/questions/39677410/why-do-i-get-an-error-when-adding-an-integer-to-a-floating-point/39682485?noredirect=1#comment66666775_39682485\">Veedrac adds</a>:</p>\n\n<blockquote>\n  <p>[this answer gives] the impression that <code>0u32 + 0u64</code> should work, but Rust doesn't do any numeric promotions, even if promotion would be lossless. Also, <code>i32</code>\u2192<code>f64</code> is a lossless promotion, since <code>f64</code> has a 52-bit mantissa.</p>\n</blockquote>\n\n<p>While these types of widening promotions would indeed be lossless, they would involve implicitly increasing your memory requirements. What used to only take 32 bits now takes 64 bits, for example. Beyond the memory requirements, there's also semantic considerations. If a value <strong>should</strong> only require a <code>u8</code> (0-255), then it doesn't make sense to increase it by a value that might be beyond that range. Knowing that it is appropriate to do such a transformation falls solely on the programmer.</p>\n\n<p>Using <code>From</code> can ensure that you only use lossless number conversion.</p>\n"}], "owner": {"reputation": 401, "user_id": 6548149, "user_type": "registered", "accept_rate": 50, "profile_image": "https://graph.facebook.com/851878238276342/picture?type=large", "display_name": "J&#248;&#234; Gr&#232;&#233;&#241;", "link": "https://stackoverflow.com/users/6548149/j%c3%b8%c3%aa-gr%c3%a8%c3%a9%c3%b1"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7081, "favorite_count": 4, "accepted_answer_id": 39682485, "answer_count": 1, "score": 17, "last_activity_date": 1562521628, "creation_date": 1474727054, "last_edit_date": 1529415807, "question_id": 39677410, "link": "https://stackoverflow.com/questions/39677410/why-do-i-get-an-error-when-adding-an-integer-to-a-floating-point", "title": "Why do I get an error when adding an integer to a floating point?", "body": "<p>I started learning Rust. I tried this program:</p>\n\n<pre><code>fn main() {\n     let a = 5;\n     let b = 5.5;\n     let k = a + b;\n     println!(\"{}\", k);\n}\n</code></pre>\n\n<p>and it is showing this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: cannot add a float to an integer\n --&gt; src/main.rs:4:16\n  |\n4 |      let k = a + b;\n  |                ^ no implementation for `{integer} + {float}`\n  |\n  = help: the trait `std::ops::Add&lt;{float}&gt;` is not implemented for `{integer}`\n</code></pre>\n\n<p>Is the code wrong?</p>\n"}, {"tags": ["iterator", "rust", "traits"], "comments": [{"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1474792045, "post_id": 39675949, "comment_id": 66669392, "body": "<a href=\"https://stackoverflow.com/questions/36672845/in-rust-is-a-vector-an-iterator/36673695#36673695\" title=\"in rust is a vector an iterator\">stackoverflow.com/questions/36672845/&hellip;</a>"}], "answers": [{"comments": [{"owner": {"reputation": 360, "user_id": 4743935, "user_type": "registered", "accept_rate": 40, "profile_image": "https://lh3.googleusercontent.com/-D0UsDqm2eGw/AAAAAAAAAAI/AAAAAAAAAJ8/lc0gehFEEdQ/photo.jpg?sz=128", "display_name": "Tristan Storch", "link": "https://stackoverflow.com/users/4743935/tristan-storch"}, "edited": false, "score": 0, "creation_date": 1474818156, "post_id": 39676011, "comment_id": 66676628, "body": "Wow. Thank you very much for this explanation. Combined with the link in the comment of starblue this is what I needed!"}, {"owner": {"reputation": 4995, "user_id": 2907819, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/VZnjr.jpg?s=128&g=1", "display_name": "kmaork", "link": "https://stackoverflow.com/users/2907819/kmaork"}, "edited": false, "score": 0, "creation_date": 1606406298, "post_id": 39676011, "comment_id": 114959654, "body": "Why does rust not provide a trait with <code>iter()</code>? It sounds very useful, for example, if I want to have a struct that has a generic container as a member. <code>into_iter()</code> consumes the original container, and it would be useful to have a method that returns an iterator of references to the container without consuming it."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 4995, "user_id": 2907819, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/VZnjr.jpg?s=128&g=1", "display_name": "kmaork", "link": "https://stackoverflow.com/users/2907819/kmaork"}, "edited": false, "score": 0, "creation_date": 1606406900, "post_id": 39676011, "comment_id": 114959919, "body": "@kmaork What this answer is saying is that it&#39;s not necessary: if you call <code>into_iter()</code> on a <i>shared reference</i> to a container, you&#39;ll get an iterator over references, the same as calling <code>iter()</code>. There&#39;s no need for a trait providing <code>iter()</code> when <code>IntoIterator::into_iter()</code> already solves that problem. Maybe what you need is a <a href=\"https://stackoverflow.com/q/35592750/234590\">higher-ranked trait bound</a>?"}, {"owner": {"reputation": 4995, "user_id": 2907819, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/VZnjr.jpg?s=128&g=1", "display_name": "kmaork", "link": "https://stackoverflow.com/users/2907819/kmaork"}, "edited": false, "score": 0, "creation_date": 1606409344, "post_id": 39676011, "comment_id": 114960957, "body": "You say in your answer that &quot;IntoIterator is implemented on references to some containers&quot;. Does that mean it is not implemented generically? If so, how is it possible to iterate over a generic container without consuming it?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1606410609, "post_id": 39676011, "comment_id": 114961461, "body": "Every container type <code>T</code> needs to implement <code>IntoIterator</code> for references to <code>T</code>, there&#39;s no way around that. When you call <code>into_iter()</code> on a <code>&amp;T</code>, you are &quot;consuming&quot; the reference, but that doesn&#39;t consume the underlying container."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 17, "last_activity_date": 1474718129, "last_edit_date": 1474718129, "creation_date": 1474717808, "answer_id": 39676011, "question_id": 39675949, "link": "https://stackoverflow.com/questions/39675949/is-there-a-trait-supplying-iter/39676011#39676011", "title": "Is there a trait supplying `iter()`?", "body": "<p>No, there is no trait that provides <code>iter()</code>.</p>\n\n<p>However, <code>IntoIterator</code> is implemented on <strong>references</strong> to some containers. For example, <a href=\"https://doc.rust-lang.org/stable/std/vec/struct.Vec.html\" rel=\"noreferrer\"><code>Vec&lt;T&gt;</code>, <code>&amp;Vec&lt;T&gt;</code> and <code>&amp;mut Vec&lt;T&gt;</code></a> are three separate types that implement <code>IntoIterator</code>, and you'll notice that they all map to different iterators. In fact, <code>Vec::iter()</code> and <code>Vec::iter_mut()</code> are just convenience methods equivalent to <code>&amp;Vec::into_iter()</code> and <code>&amp;mut Vec::into_iter()</code> respectively.</p>\n\n<pre><code>fn foo(_x: std::slice::Iter&lt;i32&gt;) {}\n\nfn main() {\n    let v = vec![1, 2, 3];\n    foo(v.iter());\n    foo((&amp;v).into_iter()); // iter() exists because this is awkward\n}\n</code></pre>\n\n<p>If you want to write a function that is generic over containers that can be converted into an iterator that iterates over references, you can do so like this:</p>\n\n<pre><code>fn foo&lt;'a, I: IntoIterator&lt;Item=&amp;'a i32&gt;&gt;(_x: I) {}\n\nfn main() {\n    let v = vec![1, 2, 3];\n    foo(&amp;v);\n}\n</code></pre>\n"}], "owner": {"reputation": 360, "user_id": 4743935, "user_type": "registered", "accept_rate": 40, "profile_image": "https://lh3.googleusercontent.com/-D0UsDqm2eGw/AAAAAAAAAAI/AAAAAAAAAJ8/lc0gehFEEdQ/photo.jpg?sz=128", "display_name": "Tristan Storch", "link": "https://stackoverflow.com/users/4743935/tristan-storch"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1561, "favorite_count": 2, "accepted_answer_id": 39676011, "answer_count": 1, "score": 12, "last_activity_date": 1610638202, "creation_date": 1474717381, "last_edit_date": 1610638202, "question_id": 39675949, "link": "https://stackoverflow.com/questions/39675949/is-there-a-trait-supplying-iter", "title": "Is there a trait supplying `iter()`?", "body": "<p>Is there in Rust a Trait which supplies the <code>iter()</code> method? I only found the trait <code>IntoIterator</code>, which supplies <code>into_iter()</code>.</p>\n<p>Just to be clear here: I do not want the <code>Iterator</code> trait, which supplies <code>next()</code>, but a trait which supplies <code>iter()</code>.</p>\n<p>[ sidenote: Sometimes I'm very confused by the Rust libs. <code>Iterator</code> supplies <code>next()</code>, but <code>IntoIterator</code> supplies <code>into_iter()</code> (not supplying <code>next()</code> and for convention with moving), while <code>IntoIter</code> is a struct, that implements the <code>Iterator</code> trait (moving values). ]</p>\n"}, {"tags": ["rust", "traits", "boxing"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1474722573, "post_id": 39675953, "comment_id": 66653626, "body": "This answer explains why the compiler suggests <i>consider adding an explicit lifetime bound <code>T: &#39;static</code>...</i>"}, {"owner": {"reputation": 61, "user_id": 4762509, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c9a05352b9f269d1f752794094dfb082?s=128&d=identicon&r=PG&f=1", "display_name": "seb_odessa", "link": "https://stackoverflow.com/users/4762509/seb-odessa"}, "edited": false, "score": 0, "creation_date": 1474731404, "post_id": 39675953, "comment_id": 66656348, "body": "Thank you, The second variant is good enough. It is still curious, why the Rust thinks that T may not live long enough?  I am passing the ownership (not borrow) of the value into the function and then I am boxing the value. I can&#39;t imagine how the passed value could be destroyed?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 61, "user_id": 4762509, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c9a05352b9f269d1f752794094dfb082?s=128&d=identicon&r=PG&f=1", "display_name": "seb_odessa", "link": "https://stackoverflow.com/users/4762509/seb-odessa"}, "edited": false, "score": 0, "creation_date": 1474739067, "post_id": 39675953, "comment_id": 66658750, "body": "@seb_odessa: The value you are passing ownership of may be a borrowed pointer or contain borrowed pointers. The lifetime bound helps the compiler validate that you don&#39;t move the value in such a way that it outlives its referents."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 2, "last_activity_date": 1474723436, "last_edit_date": 1474723436, "creation_date": 1474717422, "answer_id": 39675953, "question_id": 39675880, "link": "https://stackoverflow.com/questions/39675880/how-to-move-boxing-into-a-function-instead-of-caller-side/39675953#39675953", "title": "How to move boxing into a function instead of caller side", "body": "<p>In your struct:</p>\n\n<pre><code>struct Menu {\n    item: Box&lt;Named&gt;,\n}\n</code></pre>\n\n<p><code>Box&lt;Named&gt;</code> has an implicit <a href=\"http://rustbyexample.com/scope/lifetime/lifetime_bounds.html\" rel=\"nofollow\">lifetime bound</a> and is equivalent to <code>Box&lt;Named + 'static&gt;</code>. Therefore, to meet these requirements, the value passed to <code>Menu::set</code> must also be <code>'static</code>.</p>\n\n<pre><code>impl Menu {\n    pub fn set&lt;T: Named + 'static&gt;(b: T) -&gt; Self {\n        Menu { item: Box::new(b) }\n    }\n}\n</code></pre>\n\n<p>Another option is to generalize your struct to accept any lifetime bound.</p>\n\n<pre><code>struct Menu&lt;'a&gt; {\n    item: Box&lt;Named + 'a&gt;\n}\n\nimpl&lt;'a&gt; Menu&lt;'a&gt; {\n    pub fn new(item: Box&lt;Named + 'a&gt;) -&gt; Self {\n        Menu { item: item }\n    }\n\n    pub fn set&lt;T: Named + 'a&gt;(b: T) -&gt; Self {\n        Menu { item: Box::new(b) }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 61, "user_id": 4762509, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c9a05352b9f269d1f752794094dfb082?s=128&d=identicon&r=PG&f=1", "display_name": "seb_odessa", "link": "https://stackoverflow.com/users/4762509/seb-odessa"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 85, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1474723436, "creation_date": 1474716954, "last_edit_date": 1474722497, "question_id": 39675880, "link": "https://stackoverflow.com/questions/39675880/how-to-move-boxing-into-a-function-instead-of-caller-side", "title": "How to move boxing into a function instead of caller side", "body": "<p>I have a trait and its implementation for some structures:</p>\n\n<pre><code>trait Named { \n    fn name(&amp;self) -&gt; String; \n}\n\nstruct Americano;\nimpl Named for Americano {\n    fn name(&amp;self) -&gt; String { String::from(\"Caff\u00e8 Americano\") }\n}\n</code></pre>\n\n<p>I also wish to store such structures in other structures: </p>\n\n<pre><code>struct Menu {\n    item: Box&lt;Named&gt;,\n}\nimpl Menu {\n    pub fn new(item: Box&lt;Named&gt;) -&gt; Self {\n        Menu { item: item }\n    }\n}\n</code></pre>\n\n<p>This works perfectly in the case when I am boxing a structure in the <code>main</code> function:</p>\n\n<pre><code>fn main() {\n    let s = Menu::new(Box::new(Americano));\n}\n</code></pre>\n\n<p>I am curious how to move boxing inside <code>Menu</code>'s function and use something like:</p>\n\n<pre><code>fn main() {\n    let s = Menu::new(Americano);\n}\n</code></pre>\n\n<p>I have tried to implement <code>new</code> as:</p>\n\n<pre><code>impl Menu {\n    pub fn new&lt;T: Named&gt;(b: T) -&gt; Self {\n        Menu { item: Box::new(b) };\n    }\n}\n</code></pre>\n\n<p>but I received the error</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: the parameter type `T` may not live long enough [--explain E0310]\n  --&gt; &lt;anon&gt;:19:23\n   |&gt;\n19 |&gt;         Menu { item : Box::new(b) };\n   |&gt;                       ^^^^^^^^^^^\nhelp: consider adding an explicit lifetime bound `T: 'static`...\nnote: ...so that the type `T` will meet its required lifetime bounds\n</code></pre>\n\n<p>Here is the <a href=\"https://play.rust-lang.org/?gist=2ecf685132334d21cbab8fbe967d51e3&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">code in the playground</a>.</p>\n"}, {"tags": ["linux", "rust", "rust-cargo", "uefi"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1474723067, "creation_date": 1474723067, "answer_id": 39676750, "question_id": 39674425, "link": "https://stackoverflow.com/questions/39674425/how-can-i-build-object-files-with-cargo/39676750#39676750", "title": "How can I build object files with Cargo?", "body": "<p>It's probably easier to just configure Cargo to use the linker you need. Create a <em>target</em> file, which is a blob of JSON describing the target architecture. Something like this may work, but I cannot test it:</p>\n\n<pre><code>{\n  \"linker\": \"pei-x86-64\",\n  \"pre-link-args\": [\n    \"subsystem\",\n    \"10\"\n  ]\n}\n</code></pre>\n\n<p>Then, execute Cargo with <code>cargo --target=my-target.json build</code>.</p>\n"}], "owner": {"reputation": 23, "user_id": 4342733, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/cbcfba6f60e4ebf192dfc91a8f4d5b5f?s=128&d=identicon&r=PG&f=1", "display_name": "Viola", "link": "https://stackoverflow.com/users/4342733/viola"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 799, "favorite_count": 1, "answer_count": 1, "score": 0, "last_activity_date": 1474723067, "creation_date": 1474707062, "last_edit_date": 1474722815, "question_id": 39674425, "link": "https://stackoverflow.com/questions/39674425/how-can-i-build-object-files-with-cargo", "title": "How can I build object files with Cargo?", "body": "<p>To build an UEFI executable, I need to build an object file from my library. I can then link it to the right PE format with <code>pei-x86-64 subsystem 10</code></p>\n"}, {"tags": ["performance", "rust", "cpu"], "comments": [{"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 2, "creation_date": 1474702913, "post_id": 39670781, "comment_id": 66648436, "body": "Shouldn&#39;t <a href=\"https://doc.rust-lang.org/std/primitive.usize.html#method.count_ones\" rel=\"nofollow noreferrer\"><code>count_ones</code></a> do that automatically?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 1, "creation_date": 1474722733, "post_id": 39670781, "comment_id": 66653680, "body": "@starblue it can be different. Using <code>count_ones</code> will allow LLVM to optimize for the <b>target</b> machine, so you could remove any runtime decisions. If the compiled code needs to be able to switch at runtime though, you may still need to query the current processor."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1474673025, "post_id": 39670813, "comment_id": 66643246, "body": "There are crates for this, such as my own <a href=\"https://crates.io/crates/cupid\" rel=\"nofollow noreferrer\">cupid</a>."}], "tags": [], "owner": {"reputation": 2511, "user_id": 371571, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/644503605d316932fe8966f2dc8c5343?s=128&d=identicon&r=PG", "display_name": "kobrien", "link": "https://stackoverflow.com/users/371571/kobrien"}, "is_accepted": false, "score": 1, "last_activity_date": 1474672352, "creation_date": 1474672352, "answer_id": 39670813, "question_id": 39670781, "link": "https://stackoverflow.com/questions/39670781/how-do-i-detect-whether-the-cpu-has-good-popcnt-support/39670813#39670813", "title": "How do I detect whether the CPU has good POPCNT support?", "body": "<p>Execute the cpuid instruction. Check bit 23 of ecx.</p>\n\n<p><a href=\"https://en.wikipedia.org/wiki/CPUID\" rel=\"nofollow\">https://en.wikipedia.org/wiki/CPUID</a></p>\n"}, {"tags": [], "owner": {"reputation": 3039, "user_id": 2851815, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/37MCt.png?s=128&g=1", "display_name": "\u043d\u0430\u0431\u0438\u044f\u0447\u043b\u044d\u0432\u044d\u043b\u0438", "link": "https://stackoverflow.com/users/2851815/%d0%bd%d0%b0%d0%b1%d0%b8%d1%8f%d1%87%d0%bb%d1%8d%d0%b2%d1%8d%d0%bb%d0%b8"}, "is_accepted": true, "score": 9, "last_activity_date": 1474673193, "creation_date": 1474673193, "answer_id": 39670916, "question_id": 39670781, "link": "https://stackoverflow.com/questions/39670781/how-do-i-detect-whether-the-cpu-has-good-popcnt-support/39670916#39670916", "title": "How do I detect whether the CPU has good POPCNT support?", "body": "<p>You could do <a href=\"https://stackoverflow.com/a/39670813/2851815\">like @kobrien said</a>, or you could take a more civilised approach - the <a href=\"https://crates.io/crates/cpuid\"><code>cpuid</code> crate</a>.</p>\n\n<p>To do that, add it to your <code>Cargo.toml</code> and then, to check for availability of the POPCNT do</p>\n\n<pre><code>extern crate cpuid;\n\nfn have_popcnt() -&gt; Option&lt;bool&gt; {\n    cpuid::identify().ok().map(|ci| ci.has_feature(cpuid::CpuFeature::POPCNT))\n}\n</code></pre>\n\n<p>The <code>have_popcnt()</code> function will return <code>None</code> if the CPU doesn't support the CPUID instruction or <code>Some(hp)</code>, where <code>hp</code> determines POPCNT's availability thereon.</p>\n"}], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1256, "favorite_count": 1, "accepted_answer_id": 39670916, "answer_count": 2, "score": 7, "last_activity_date": 1474702589, "creation_date": 1474672147, "last_edit_date": 1474702589, "question_id": 39670781, "link": "https://stackoverflow.com/questions/39670781/how-do-i-detect-whether-the-cpu-has-good-popcnt-support", "title": "How do I detect whether the CPU has good POPCNT support?", "body": "<p>I have two versions of a <a href=\"https://github.com/llogiq/newlinebench\" rel=\"noreferrer\">fast newline-counting routine</a>.  One runs on older hardware, while the other one runs much faster by using the POPCNT instruction, which is available on newer hardware (e.g. 6th generation Intel CPUs).</p>\n\n<p>Now I'd like to use the best version for each CPU &mdash; how can I find out if it has a high-performance POPCNT implementation?</p>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 1, "creation_date": 1474684388, "post_id": 39667868, "comment_id": 66645130, "body": "Probably because <code>Clone</code> involves actually running <i>code</i>, and it can panic while it runs."}], "answers": [{"comments": [{"owner": {"reputation": 2107, "user_id": 5864190, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c27e1fa0fec82b12af3e1020ed1780c4?s=128&d=identicon&r=PG&f=1", "display_name": "dth", "link": "https://stackoverflow.com/users/5864190/dth"}, "edited": false, "score": 0, "creation_date": 1474708615, "post_id": 39671943, "comment_id": 66649796, "body": "Yes, it is almost impossible that cloning on access would be faster than the dynamically checked borrowing, but I was looking for a setting, where things actually break."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1474722339, "last_edit_date": 1474722339, "creation_date": 1474684572, "answer_id": 39671943, "question_id": 39667868, "link": "https://stackoverflow.com/questions/39667868/why-can-cell-in-rust-only-be-used-for-copy-and-not-clone-types/39671943#39671943", "title": "Why can Cell in Rust only be used for Copy and not Clone types?", "body": "<p>Here is my opinion, but I can't tie it directly to a real reason that such a restriction exists.</p>\n\n<p>I think of a copy as \"cheap\" (e.g. copying a handful of bits) and a clone as \"expensive\" (e.g. making a function call or changing data). If such a cell used <code>Clone</code>, it would <em>mandate</em> that the underlying value be duplicated on every use (<code>cell.get()</code>). For example, using a <code>CloneCell&lt;Vec&lt;T&gt;&gt;</code> would mean that every <code>cell.get()</code> would <strong>require calling the memory allocator</strong>. That's not a good idea.</p>\n\n<p>Restricting to <code>Copy</code> types is thus potentially a way to guide people away from shooting themselves in the foot.</p>\n"}, {"comments": [{"owner": {"reputation": 2107, "user_id": 5864190, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c27e1fa0fec82b12af3e1020ed1780c4?s=128&d=identicon&r=PG&f=1", "display_name": "dth", "link": "https://stackoverflow.com/users/5864190/dth"}, "edited": false, "score": 0, "creation_date": 1474708433, "post_id": 39673978, "comment_id": 66649742, "body": "Ah yes, I did not think about clone accessing the cell itself. And my set and get implementations from above avoid this as set cannot be called before get returns."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 2, "creation_date": 1474714952, "post_id": 39673978, "comment_id": 66651593, "body": "It seems to be the intuition should be simple. Rust disallows simultaneous sharing and mutation. <code>Cell</code> solves this by not providing a reference to the actual value (no sharing), but <code>.clone()</code> would take a reference as the argument."}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": true, "score": 10, "last_activity_date": 1474703923, "creation_date": 1474703923, "answer_id": 39673978, "question_id": 39667868, "link": "https://stackoverflow.com/questions/39667868/why-can-cell-in-rust-only-be-used-for-copy-and-not-clone-types/39673978#39673978", "title": "Why can Cell in Rust only be used for Copy and not Clone types?", "body": "<p>It's unsound. The comment by DK. is on the right track but you don't even need a panic to cause havoc. One problematic scenario is this:</p>\n\n<ol>\n<li>Cells (together with <code>Option</code>) allow creating cycles, i.e., self-referential types</li>\n<li>The <code>Clone</code> implementation gets a <code>&amp;self</code> reference</li>\n<li>In the presence of a cycle, the <code>Clone</code> implementation may thus access the cell that's being cloned</li>\n<li>Therefore the object being cloned can overwrite itself, while it has an ordinary borrow to itself (namely, <code>&amp;self</code>)</li>\n<li>Overwriting while borrowing is unsound because it allows arbitrary type punning and other badness. For example, suppose there's <code>Result&lt;T, E&gt;</code> field that's initially <code>Ok(T)</code>, take a reference to the <code>T</code> inside and overwrite the <code>Result</code> with an <code>Err(R)</code>. Then the <code>&amp;T</code> suddenly refers to an <code>E</code> value.</li>\n</ol>\n\n<p>Credit for this example goes to Huon Wilson, see the user.rust-lang.org thread <a href=\"https://users.rust-lang.org/t/why-does-cell-require-copy-instead-of-clone/5769/3\">Why does Cell require Copy instead of Clone?</a>. His write-up goes into more structural reasons for the restrictions and includes a complete code example, too.</p>\n"}], "owner": {"reputation": 2107, "user_id": 5864190, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c27e1fa0fec82b12af3e1020ed1780c4?s=128&d=identicon&r=PG&f=1", "display_name": "dth", "link": "https://stackoverflow.com/users/5864190/dth"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1130, "favorite_count": 0, "accepted_answer_id": 39673978, "answer_count": 2, "score": 15, "last_activity_date": 1474722339, "creation_date": 1474657438, "last_edit_date": 1474683646, "question_id": 39667868, "link": "https://stackoverflow.com/questions/39667868/why-can-cell-in-rust-only-be-used-for-copy-and-not-clone-types", "title": "Why can Cell in Rust only be used for Copy and not Clone types?", "body": "<p>The documentation of the Rust standard library states that <code>Cell</code> can be only used for <code>Copy</code> types and that in all other cases one should use <code>RefCell</code>, but does not explain exactly why.</p>\n\n<p>After studying the documentation and the code of both <code>Cell</code> and <code>RefCell</code>, the only point where it seems to be important is the <code>get</code> function of <code>Cell</code>. If the value is a <code>Copy</code> type then one can just return such a copy. But why is a clone not good enough?</p>\n\n<p>One could directly implement the <code>set</code> function on top of <code>RefCell</code>:</p>\n\n<pre><code>fn set&lt;T&gt;(r: &amp;RefCell&lt;T&gt;, v: T) {\n    *r.borrow_mut() = v\n}\n</code></pre>\n\n<p>This only works as long as no one else is holding a reference to the value. But if the value can be cloned, one can just do that:</p>\n\n<pre><code>fn get&lt;T: Clone&gt;(r: &amp;RefCell&lt;T&gt;) -&gt; T {\n    r.borrow().clone()\n}\n</code></pre>\n\n<p>Having a type like <code>Cell</code> working with <code>Clone</code> types would avoid the overhead of the run-time borrow checking. Am I missing anything here?</p>\n"}, {"tags": ["docker", "dependencies", "rust", "rust-cargo"], "comments": [{"owner": {"reputation": 14451, "user_id": 33499, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17c590aa4c56918b47c7ba5e39dba5d8?s=128&d=identicon&r=PG", "display_name": "wimh", "link": "https://stackoverflow.com/users/33499/wimh"}, "edited": false, "score": 1, "creation_date": 1474635446, "post_id": 39661138, "comment_id": 66624327, "body": "Maybe you can add and compile a dummy application with the same dependencies first."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1474637223, "post_id": 39661138, "comment_id": 66625660, "body": "<a href=\"https://github.com/rust-lang/cargo/issues/1891\" rel=\"nofollow noreferrer\">github.com/rust-lang/cargo/issues/1891</a>. Also note that you can install the correct toolchain in one step <code>.&#47;rustup.sh -y --default-toolchain 1.11.0</code>"}], "answers": [{"tags": [], "owner": {"reputation": 12114, "user_id": 1556338, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/032183d1d89374352470ebe6bc87b38c?s=128&d=identicon&r=PG&f=1", "display_name": "Bernard", "link": "https://stackoverflow.com/users/1556338/bernard"}, "is_accepted": false, "score": -2, "last_activity_date": 1474635442, "creation_date": 1474635442, "answer_id": 39661384, "question_id": 39661138, "link": "https://stackoverflow.com/questions/39661138/optimising-cargo-build-times-in-docker/39661384#39661384", "title": "Optimising cargo build times in Docker", "body": "<p>You can create an intermediate image and build your final image from it.\nEg:</p>\n\n<pre><code>FROM ubuntu:xenial\nRUN apt-get update &amp;&amp; apt-get install curl build-essential ca-certificates file xutils-dev nmap -y\nRUN mkdir /rust\n...\n</code></pre>\n\n<p>build using <code>docker build -t mybaseimage .</code></p>\n\n<pre><code>FROM mybaseimage\nRUN mkdir /app\nWORKDIR /app\nADD . /app/\nRUN cargo build\nEXPOSE 20000\nCMD ./target/debug/api\n</code></pre>\n\n<p><code>docker build -t finalimage .</code></p>\n\n<p>That way only the mybaseimage is rebuilt</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1474637534, "post_id": 39662015, "comment_id": 66625867, "body": "<i>copying the <code>Cargo.toml</code> in first</i> \u2014 <b>and</b> the <code>Cargo.lock</code>!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1474637807, "post_id": 39662015, "comment_id": 66626026, "body": "I&#39;ve successfully used this technique with Ruby projects, copying in the <code>Gemfile</code> / <code>Gemfile.lock</code> and running <code>bundle install</code>."}, {"owner": {"reputation": 97, "user_id": 5891072, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/24119bb70375bd019dc7f1ca9384f941?s=128&d=identicon&r=PG&f=1", "display_name": "Vignesh Sankaran", "link": "https://stackoverflow.com/users/5891072/vignesh-sankaran"}, "edited": false, "score": 1, "creation_date": 1474780710, "post_id": 39662015, "comment_id": 66667060, "body": "Why <code>COPY</code> and not <code>ADD</code>?"}, {"owner": {"reputation": 13505, "user_id": 4502597, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1768ba4b38aa3031c761f72b825ff069?s=128&d=identicon&r=PG", "display_name": "Elton Stoneman", "link": "https://stackoverflow.com/users/4502597/elton-stoneman"}, "edited": false, "score": 2, "creation_date": 1474875300, "post_id": 39662015, "comment_id": 66692740, "body": "<code>COPY</code> just copies the file/directory from the context into the image layer. <code>ADD</code> does that too, but it can also use a Web address as the source, and if the source is a compressed file it will unzip it on the image. That functionality isn&#39;t always expected, so unless you know you need it, it you&#39;re better off with <code>COPY</code>."}], "tags": [], "owner": {"reputation": 13505, "user_id": 4502597, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1768ba4b38aa3031c761f72b825ff069?s=128&d=identicon&r=PG", "display_name": "Elton Stoneman", "link": "https://stackoverflow.com/users/4502597/elton-stoneman"}, "is_accepted": true, "score": 9, "last_activity_date": 1474637300, "creation_date": 1474637300, "answer_id": 39662015, "question_id": 39661138, "link": "https://stackoverflow.com/questions/39661138/optimising-cargo-build-times-in-docker/39662015#39662015", "title": "Optimising cargo build times in Docker", "body": "<p>Docker does cache the layer built from the <code>ADD</code> (preferably <code>COPY</code>) instruction, provided the sources haven't changed. You could make use of that and get your dependencies cached by copying the <code>Cargo.toml</code> in first, and doing a build. </p>\n\n<p>But unfortunately you need something to build, so you could do it with a single source file and a dummy <code>lib</code> target in your manifest:</p>\n\n<pre><code>[lib]\nname = \"dummy\"\npath = \"dummy.rs\"\n</code></pre>\n\n<p>In your Dockerfile build the dummy separately:</p>\n\n<pre><code>COPY Cargo.toml /app/Cargo.toml\nCOPY dummy.rs /app/dummy.rs\nRUN cargo build --lib\n</code></pre>\n\n<p>The output of this layer will be cached, with all the dependencies installed, and then you can go on to add the rest of your code (in the same <code>Dockerfile</code>):</p>\n\n<pre><code>COPY /src/ app/src/\nRUN cargo build\n</code></pre>\n\n<p>The <code>dummy</code> stuff is ugly, but it means your normal build will be quick, as it comes from the cached layer, and when you change dependencies in your <code>Cargo.toml</code> then Docker will pick it up and build a new layer with updated dependencies.</p>\n"}, {"comments": [{"owner": {"reputation": 20067, "user_id": 3769905, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/ae9bf76c0597ac1712a84af33e12467d?s=128&d=identicon&r=PG&f=1", "display_name": "BonsaiOak", "link": "https://stackoverflow.com/users/3769905/bonsaioak"}, "edited": false, "score": 0, "creation_date": 1504721650, "post_id": 45682071, "comment_id": 79125434, "body": "I still need to copy <code>cargo.lock</code> and <code>cargo.toml</code>, right?"}], "tags": [], "owner": {"reputation": 306, "user_id": 3879341, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b1767df6c85e9574a53d18175be1d6db?s=128&d=identicon&r=PG&f=1", "display_name": "khc", "link": "https://stackoverflow.com/users/3879341/khc"}, "is_accepted": false, "score": 2, "last_activity_date": 1502741110, "last_edit_date": 1502741110, "creation_date": 1502740396, "answer_id": 45682071, "question_id": 39661138, "link": "https://stackoverflow.com/questions/39661138/optimising-cargo-build-times-in-docker/45682071#45682071", "title": "Optimising cargo build times in Docker", "body": "<p>Instead of adding a dummy file, you can also let the build fail:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>RUN cargo build || true\nCOPY ...\nRUN cargo build\n</code></pre>\n\n<p>Don't forget to add <code>--release</code> to both places if you want optimized builds.</p>\n"}, {"comments": [{"owner": {"reputation": 97, "user_id": 5891072, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/24119bb70375bd019dc7f1ca9384f941?s=128&d=identicon&r=PG&f=1", "display_name": "Vignesh Sankaran", "link": "https://stackoverflow.com/users/5891072/vignesh-sankaran"}, "edited": false, "score": 1, "creation_date": 1522817928, "post_id": 49642730, "comment_id": 86293745, "body": "Is there an issue in cargo about a <code>--deps-only</code> flag?"}], "tags": [], "owner": {"reputation": 2138, "user_id": 4284401, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/rz99Q.jpg?s=128&g=1", "display_name": "Zac Delventhal", "link": "https://stackoverflow.com/users/4284401/zac-delventhal"}, "is_accepted": false, "score": 4, "last_activity_date": 1522815755, "creation_date": 1522815755, "answer_id": 49642730, "question_id": 39661138, "link": "https://stackoverflow.com/questions/39661138/optimising-cargo-build-times-in-docker/49642730#49642730", "title": "Optimising cargo build times in Docker", "body": "<p>This question is a year and a half old at this point. Still, no <code>cargo build --deps-only</code> option, but I thought I'd share my solution, which is reasonably lightweight. You don't have to modify any of your host files to do it:</p>\n\n<pre><code>COPY Cargo.toml .\nRUN mkdir src \\\n    &amp;&amp; echo \"// dummy file\" &gt; src/lib.rs \\\n    &amp;&amp; cargo build\n</code></pre>\n\n<p>This will build the dependencies and cache them. Later when you copy in the actual source files (or in my case, use <code>--volumes</code>), it will overwrite the dummy file, so the dummy file is totally temporary. You could also explicitly <code>rm</code> it after the build if you needed to.</p>\n"}], "owner": {"reputation": 97, "user_id": 5891072, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/24119bb70375bd019dc7f1ca9384f941?s=128&d=identicon&r=PG&f=1", "display_name": "Vignesh Sankaran", "link": "https://stackoverflow.com/users/5891072/vignesh-sankaran"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1527, "favorite_count": 2, "accepted_answer_id": 39662015, "answer_count": 4, "score": 6, "last_activity_date": 1522815755, "creation_date": 1474634791, "last_edit_date": 1500577810, "question_id": 39661138, "link": "https://stackoverflow.com/questions/39661138/optimising-cargo-build-times-in-docker", "title": "Optimising cargo build times in Docker", "body": "<p>I am developing an API with Rust, and am managing the environments, including the external database with Docker. Every time I make a change to the API code, cargo rebuilds, and since Docker doesn't cache anything to do with the <code>ADD</code> statement to copy the Rust directory over to the container, it re-downloads all the packages, which is a fairly lengthy process since I'm using Nickel, which seems to have a boatload of dependencies. </p>\n\n<p>Is there a way to bring those dependencies in prior to running <code>cargo build</code>? At least that way if the dependencies change it will only install what's required, similar to Cargo compiling locally.</p>\n\n<p>Here's the Dockerfile I currently use:</p>\n\n<pre><code>FROM ubuntu:xenial\nRUN apt-get update &amp;&amp; apt-get install curl build-essential ca-certificates file xutils-dev nmap -y\nRUN mkdir /rust\nWORKDIR /rust\nRUN curl https://sh.rustup.rs -s &gt;&gt; rustup.sh\nRUN chmod 755 /rust/rustup.sh\nRUN ./rustup.sh -y\nENV PATH=/root/.cargo/bin:$PATH SSL_VERSION=1.0.2h\nRUN rustup default 1.11.0\nRUN curl https://www.openssl.org/source/openssl-$SSL_VERSION.tar.gz -O &amp;&amp; \\\n    tar -xzf openssl-$SSL_VERSION.tar.gz &amp;&amp; \\\n    cd openssl-$SSL_VERSION &amp;&amp; ./config &amp;&amp; make depend &amp;&amp; make install &amp;&amp; \\\n    cd .. &amp;&amp; rm -rf openssl-$SSL_VERSION*\nENV OPENSSL_LIB_DIR=/usr/local/ssl/lib \\\n    OPENSSL_INCLUDE_DIR=/usr/local/ssl/include \\\n    OPENSSL_STATIC=1\nRUN mkdir /app\nWORKDIR /app\nADD . /app/\nRUN cargo build\nEXPOSE 20000\nCMD ./target/debug/api\n</code></pre>\n\n<p>And here's my Cargo.toml</p>\n\n<pre><code>[profile.dev]\ndebug = true\n\n[package]\nname = \"api\"\nversion = \"0.0.1\"\nauthors = [\"Vignesh Sankaran &lt;developer@ferndrop.com&gt;\"]\n\n[dependencies]\nnickel = \"= 0.8.1\"\nmongodb = \"= 0.1.6\"\nbson = \"= 0.3.0\"\nuuid = { version = \"= 0.3.1\", features = [\"v4\"] }\n</code></pre>\n"}, {"tags": ["rust", "borrow-checker"], "comments": [{"owner": {"reputation": 1936, "user_id": 1584012, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/382084cea852ce1fd7c613db8e3bfcbe?s=128&d=identicon&r=PG", "display_name": "wigy", "link": "https://stackoverflow.com/users/1584012/wigy"}, "edited": false, "score": 0, "creation_date": 1474608576, "post_id": 39648667, "comment_id": 66609149, "body": "For some reason @Jsor deleted his post, but he had 2 good gists in it: <a href=\"https://play.rust-lang.org/?gist=710aefc653b320c653f289f5e3eee972\" rel=\"nofollow noreferrer\">play.rust-lang.org/?gist=710aefc653b320c653f289f5e3eee972</a> and  <a href=\"https://play.rust-lang.org/?gist=4fecb8d2b584252fd6b6e687db34de5a\" rel=\"nofollow noreferrer\">play.rust-lang.org/?gist=4fecb8d2b584252fd6b6e687db34de5a</a>"}, {"owner": {"reputation": 1936, "user_id": 1584012, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/382084cea852ce1fd7c613db8e3bfcbe?s=128&d=identicon&r=PG", "display_name": "wigy", "link": "https://stackoverflow.com/users/1584012/wigy"}, "edited": false, "score": 0, "creation_date": 1474608870, "post_id": 39648667, "comment_id": 66609238, "body": "I will accept @breeden&#39;s answer before weekend unless someone comes up with a data structure that allows for static borrow checking for this use-case."}, {"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "edited": false, "score": 0, "creation_date": 1474875993, "post_id": 39648667, "comment_id": 66693102, "body": "I deleted it because in the unsafe solution it results in use-after-free if you delete an entry in <code>needs_action</code> from another listener&#39;s <code>act</code>. Also, her"}], "answers": [{"comments": [{"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "edited": false, "score": 0, "creation_date": 1474584826, "post_id": 39649967, "comment_id": 66603561, "body": "This is an option, but I think instead of a <code>replace</code>, better to just use <code>remove</code> from the <code>HashMap</code> and re-insert it if necessary."}, {"owner": {"reputation": 655, "user_id": 4064661, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/b64710b9285fc7793b9b782252073c29?s=128&d=identicon&r=PG", "display_name": "breeden", "link": "https://stackoverflow.com/users/4064661/breeden"}, "reply_to_user": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "edited": false, "score": 0, "creation_date": 1474585133, "post_id": 39649967, "comment_id": 66603667, "body": "Ya, i should probably change that."}, {"owner": {"reputation": 1936, "user_id": 1584012, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/382084cea852ce1fd7c613db8e3bfcbe?s=128&d=identicon&r=PG", "display_name": "wigy", "link": "https://stackoverflow.com/users/1584012/wigy"}, "edited": false, "score": 1, "creation_date": 1474608693, "post_id": 39649967, "comment_id": 66609180, "body": "OK, so the idea here is that static analysis is not possible with this data structure, therefore <code>Rc&lt;RefCell&lt;Thing&gt;&gt;</code> will provide the same safety using runtime checks."}, {"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "reply_to_user": {"reputation": 1936, "user_id": 1584012, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/382084cea852ce1fd7c613db8e3bfcbe?s=128&d=identicon&r=PG", "display_name": "wigy", "link": "https://stackoverflow.com/users/1584012/wigy"}, "edited": false, "score": 0, "creation_date": 1474625105, "post_id": 39649967, "comment_id": 66618041, "body": "@wigy It&#39;s not so much that static analysis isn&#39;t <i>possible</i>, so much as Rust&#39;s borrow checker can&#39;t distinguish between a <code>Box</code> (or any other owned pointer) and a flat struct inside a data structure."}], "tags": [], "owner": {"reputation": 655, "user_id": 4064661, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/b64710b9285fc7793b9b782252073c29?s=128&d=identicon&r=PG", "display_name": "breeden", "link": "https://stackoverflow.com/users/4064661/breeden"}, "is_accepted": true, "score": 2, "last_activity_date": 1474602014, "last_edit_date": 1474602014, "creation_date": 1474584146, "answer_id": 39649967, "question_id": 39648667, "link": "https://stackoverflow.com/questions/39648667/how-to-find-an-aliasing-free-data-structure/39649967#39649967", "title": "How to find an aliasing-free data structure", "body": "<p>I think it's possible to correct this specific problem, but I feel there might be a more general concern here.  Correct me if I am wrong, but it appears that you run <code>Loop::run</code> it will scan through your <code>ThingSet</code> then by some condition put a mutable reference to <code>Thing</code> on the <code>needs_action</code> buffer.  The <em>general</em> issue here seems that through different iterations, rustc cannot verify that these different calls will give you a different mutable reference or another mutable reference to the same element. So you can enforce a run-time borrow check using something like a <code>RefCell</code> (see Jsor's answer), or you can take ownership from your <code>ThingSet</code> and replace what you've taken with something else -- or remove the element from the set all together.</p>\n\n<p>For instance, taking ownership of the element and removing it from the <code>ThingSet</code> is illustrated here:</p>\n\n<pre><code>impl Loop {\n    fn new() -&gt; Loop {\n        Loop { next: 1, things: HashMap::new(), }\n    }\n    fn run(&amp;mut self) {\n        let mut needs_action = Vec::&lt;Box&lt;Thing&gt;&gt;::new();\n\n        // modeling a connection on one of the listeners...\n        if let Some(t) = self.things.remove(&amp;1usize) {\n            needs_action.push(t);\n        }\n\n        for t in &amp;mut needs_action {\n            t.act(self as &amp;mut ThingSet);\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 1936, "user_id": 1584012, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/382084cea852ce1fd7c613db8e3bfcbe?s=128&d=identicon&r=PG", "display_name": "wigy", "link": "https://stackoverflow.com/users/1584012/wigy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 128, "favorite_count": 0, "accepted_answer_id": 39649967, "answer_count": 1, "score": 1, "last_activity_date": 1474608954, "creation_date": 1474577490, "last_edit_date": 1474608954, "question_id": 39648667, "link": "https://stackoverflow.com/questions/39648667/how-to-find-an-aliasing-free-data-structure", "title": "How to find an aliasing-free data structure", "body": "<p>I am fighting the final boss of Rust, the borrow checker. This is a simplified version of a <code>mio</code> reactive network application I am working on. I spent too much time finding the right data structure for the task on hand. I want to register a connection while iterating over listening sockets that are able to accept new connections.</p>\n\n<p>See the following code, or check it on the <a href=\"https://play.rust-lang.org/?code=use%20std%3A%3Acollections%3A%3AHashMap%3B%0A%0Atrait%20ThingSet%20%7B%0A%20%20%20%20fn%20register(%26mut%20self%2C%20thing%3A%20Box%3CThing%3E)%3B%0A%7D%0A%0Atrait%20Thing%20%7B%0A%20%20%20%20fn%20act(%26mut%20self%2C%20reg%3A%20%26mut%20ThingSet)%3B%0A%7D%0A%0Astruct%20Stream%3B%0A%0Aimpl%20Thing%20for%20Stream%20%7B%0A%20%20%20%20fn%20act(%26mut%20self%2C%20reg%3A%20%26mut%20ThingSet)%20%7B%7D%0A%7D%0A%0Astruct%20Listener%3B%0A%0Aimpl%20Thing%20for%20Listener%20%7B%0A%20%20%20%20fn%20act(%26mut%20self%2C%20reg%3A%20%26mut%20ThingSet)%20%7B%0A%20%20%20%20%20%20%20%20if%20true%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20let%20mut%20stream%20%3D%20Stream%20%7B%7D%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20reg.register(Box%3A%3Anew(stream))%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%7D%0A%0Astruct%20Loop%20%7B%0A%20%20%20%20next%3A%20usize%2C%0A%20%20%20%20things%3A%20HashMap%3Cusize%2C%20Box%3CThing%3E%3E%2C%0A%7D%0A%0Aimpl%20Loop%20%7B%0A%20%20%20%20fn%20new()%20-%3E%20Loop%20%7B%0A%20%20%20%20%20%20%20%20Loop%20%7B%20next%3A%201%2C%20things%3A%20HashMap%3A%3Anew()%2C%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20fn%20run(%26mut%20self)%20%7B%0A%20%20%20%20%20%20%20%20let%20mut%20needs_action%20%3D%20Vec%3A%3A%3C%26mut%20Box%3CThing%3E%3E%3A%3Anew()%3B%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20modeling%20a%20connection%20on%20one%20of%20the%20listeners...%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20let%20Some(t)%20%3D%20self.things.get_mut(%261usize)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20needs_action.push(t)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20for%20t%20in%20needs_action%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20t.act(self%20as%20%26mut%20ThingSet)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%7D%0A%0Aimpl%20ThingSet%20for%20Loop%20%7B%0A%20%20%20%20fn%20register(%26mut%20self%2C%20thing%3A%20Box%3CThing%3E)%20%7B%0A%20%20%20%20%20%20%20%20self.things.insert(self.next%2C%20thing)%3B%0A%20%20%20%20%20%20%20%20self.next%20%2B%3D%201%3B%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20mut%20l%20%3D%20Loop%3A%3Anew()%3B%0A%20%20%20%20let%20mut%20p1%20%3D%20Listener%20%7B%7D%3B%0A%20%20%20%20let%20mut%20p2%20%3D%20Listener%20%7B%7D%3B%0A%20%20%20%20l.register(Box%3A%3Anew(p1))%3B%0A%20%20%20%20l.register(Box%3A%3Anew(p2))%3B%0A%20%20%20%20l.run()%3B%0A%7D%0A&amp;version=stable&amp;backtrace=1\" rel=\"nofollow\">Rust playground</a>. <code>HashMap::get_mut</code> returns a unique borrow to 1 value in 1 field of <code>self</code>, therefore I cannot pass on <code>self</code> to <code>Thing::act</code>. I understand why that happens, how that cause a run-time issue, but have no idea how to refactor the data structure to avoid such problems.</p>\n\n<pre><code>use std::collections::HashMap;\n\ntrait ThingSet {\n    fn register(&amp;mut self, thing: Box&lt;Thing&gt;);\n}\n\ntrait Thing {\n    fn act(&amp;mut self, reg: &amp;mut ThingSet);\n}\n\nstruct Stream;\n\nimpl Thing for Stream {\n    fn act(&amp;mut self, reg: &amp;mut ThingSet) {}\n}\n\nstruct Listener;\n\nimpl Thing for Listener {\n    fn act(&amp;mut self, reg: &amp;mut ThingSet) {\n        if true {\n            let mut stream = Stream {};\n            reg.register(Box::new(stream));\n        }\n    }\n}\n\nstruct Loop {\n    next: usize,\n    things: HashMap&lt;usize, Box&lt;Thing&gt;&gt;,\n}\n\nimpl Loop {\n    fn new() -&gt; Loop {\n        Loop { next: 1, things: HashMap::new(), }\n    }\n    fn run(&amp;mut self) {\n        let mut needs_action = Vec::&lt;&amp;mut Box&lt;Thing&gt;&gt;::new();\n        {\n            // modeling a connection on one of the listeners...\n            if let Some(t) = self.things.get_mut(&amp;1usize) {\n                needs_action.push(t);\n            }\n        }\n        for t in needs_action {\n            t.act(self as &amp;mut ThingSet);\n        }\n    }\n}\n\nimpl ThingSet for Loop {\n    fn register(&amp;mut self, thing: Box&lt;Thing&gt;) {\n        self.things.insert(self.next, thing);\n        self.next += 1;\n    }\n}\n\nfn main() {\n    let mut l = Loop::new();\n    let mut p1 = Listener {};\n    let mut p2 = Listener {};\n    l.register(Box::new(p1));\n    l.register(Box::new(p2));\n    l.run();\n}\n</code></pre>\n\n<p>I could find good tutorials that explained what the borrow checker does and what is not allowed by it. I could not find good tutorials on how to find alternative data structures where I can avoid disallowed references.</p>\n\n<p>Could you give advice how to remodel this specific problem?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 26154, "user_id": 5436257, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/iGuaK.jpg?s=128&g=1", "display_name": "Joe Clay", "link": "https://stackoverflow.com/users/5436257/joe-clay"}, "edited": false, "score": 5, "creation_date": 1474575367, "post_id": 39648102, "comment_id": 66599621, "body": "Rust 1.0.0 is over a year old. Uninstall that, and try the latest stable version: <a href=\"https://static.rust-lang.org/dist/rust-1.11.0-x86_64-pc-windows-gnu.msi\" rel=\"nofollow noreferrer\">static.rust-lang.org/dist/rust-1.11.0-x86_64-pc-windows-gnu.&zwnj;&#8203;msi</a>. I don&#39;t know if that&#39;s the root issue, but it can&#39;t hurt to be up to date!"}, {"owner": {"reputation": 26154, "user_id": 5436257, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/iGuaK.jpg?s=128&g=1", "display_name": "Joe Clay", "link": "https://stackoverflow.com/users/5436257/joe-clay"}, "edited": false, "score": 0, "creation_date": 1474575620, "post_id": 39648102, "comment_id": 66599748, "body": "And for future reference, the installers for the latest version of Rust can always be downloaded from <a href=\"https://www.rust-lang.org/en-US/downloads.html\" rel=\"nofollow noreferrer\">rust-lang.org/en-US/downloads.html</a>. You don&#39;t need to use the shell script (although if you can, it&#39;s better, as rustup.sh lets you install multiple versions of the compiler in parallel)!"}], "answers": [{"comments": [{"owner": {"reputation": 3410, "user_id": 535515, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/be8792d522b04f051fbd7a4eb1e80e3f?s=128&d=identicon&r=PG", "display_name": "Gus", "link": "https://stackoverflow.com/users/535515/gus"}, "edited": false, "score": 2, "creation_date": 1474576334, "post_id": 39648293, "comment_id": 66600124, "body": "Ahah.  I&#39;m pulling down the latest version now; thanks!  Now I&#39;m wondering where I got this link to version 1.0.0; I can&#39;t find it when I retrace my steps."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1474576019, "creation_date": 1474576019, "answer_id": 39648293, "question_id": 39648102, "link": "https://stackoverflow.com/questions/39648102/resultusize-stdioerrorerror-does-not-implement-expect-in-rust-1-0-0/39648293#39648293", "title": "Result&lt;usize, std::io::error::Error&gt; does not implement expect in Rust 1.0.0", "body": "<p>Rust 1.0 was released on 2015-05-15, over one year prior. While Rust 1.x aims for <em>backwards compatibility</em> (code written on Rust 1.x should work on Rust 1.(x+1)), it does <strong>not</strong> aim for <em>forwards compatibility</em> (code written on Rust 1.x should work for Rust 1.(x-1)).</p>\n\n<p>Reading the documentation for Rust 1.11 (the current release) is not going to be the most useful thing if you are limited to Rust 1.0.</p>\n\n<p>Your <strong>best</strong> bet is to <a href=\"https://www.rust-lang.org/en-US/downloads.html\">update to the newest version of Rust</a>.</p>\n\n<p>That being said, the <a href=\"https://doc.rust-lang.org/1.0.0/\">documentation for Rust 1.0 is available online</a> (I think you also have a copy of it installed locally). Checking out <a href=\"https://doc.rust-lang.org/1.0.0/book/guessing-game.html\">the guessing game</a>, we see:</p>\n\n<pre><code>io::stdin()\n    .read_line(&amp;mut guess)\n    .ok()\n    .expect(\"Failed to read line\");\n</code></pre>\n\n<p>That is, we convert from a <code>Result</code> to an <code>Option</code>. Checking out the API for <a href=\"https://doc.rust-lang.org/1.0.0/std/result/enum.Result.html\"><code>Result</code> in 1.0.0</a>, we can see that it indeed doesn't have an <code>expect</code> method.</p>\n\n<p>If you check the <a href=\"https://doc.rust-lang.org/std/result/enum.Result.html#method.expect\">current docs for <code>Result::expect</code></a>, you can see that it was introduced in Rust 1.4.</p>\n"}, {"tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 1, "last_activity_date": 1474576026, "creation_date": 1474576026, "answer_id": 39648294, "question_id": 39648102, "link": "https://stackoverflow.com/questions/39648102/resultusize-stdioerrorerror-does-not-implement-expect-in-rust-1-0-0/39648294#39648294", "title": "Result&lt;usize, std::io::error::Error&gt; does not implement expect in Rust 1.0.0", "body": "<p>The <code>expect()</code> method for <code>Result&lt;T, E&gt;</code> was introduced only in Rust 1.4.0 (<a href=\"https://doc.rust-lang.org/std/result/enum.Result.html#method.expect\" rel=\"nofollow\">source</a>).</p>\n"}], "owner": {"reputation": 3410, "user_id": 535515, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/be8792d522b04f051fbd7a4eb1e80e3f?s=128&d=identicon&r=PG", "display_name": "Gus", "link": "https://stackoverflow.com/users/535515/gus"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 250, "favorite_count": 0, "accepted_answer_id": 39648293, "answer_count": 2, "score": 1, "last_activity_date": 1474576063, "creation_date": 1474575210, "last_edit_date": 1474576063, "question_id": 39648102, "link": "https://stackoverflow.com/questions/39648102/resultusize-stdioerrorerror-does-not-implement-expect-in-rust-1-0-0", "title": "Result&lt;usize, std::io::error::Error&gt; does not implement expect in Rust 1.0.0", "body": "<p>In the \"Guessing Game\" tutorial example (<a href=\"https://doc.rust-lang.org/book/guessing-game.html\" rel=\"nofollow\" title=\"here\">here</a>), my compiler is giving the following error, which I interpreted to mean that <code>expect</code> doesn't exist on <code>read_line</code>'s <code>Result</code>.  </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: type `core::result::Result&lt;usize, std::io::error::Error&gt;` does not implement any method in scope named `expect`\n</code></pre>\n\n<p>The offending code:</p>\n\n<pre><code>use std::io;\n\nfn main() {\n    println!(\"**********************\");\n    println!(\"***Guess the number***\");\n    println!(\"**********************\");\n\n    let mut guess = String::new();\n\n    io::stdin()\n        .read_line(&amp;mut guess)\n        .expect(\"Failed to read line\"); //&lt;&lt;-- error on this line\n    //let guess_result=io::stdin().read_line(&amp;mut guess);\n\n    println!(\"You guessed: {}\", guess);\n    // println!(\"Result: {}\", guess_result.is_ok());\n}\n</code></pre>\n\n<p>I can remove the line(s) with <code>.expect()</code>and use the commented lines above and get it working.  My concern is that it looks like the resulting type from <code>io::stdin().read_line</code> is <code>core::result::Result</code> and not the <code>std::io::Result</code> mentioned in the tutorial.  </p>\n\n<p>If I run that same code on the Rust playground it seems to run fine, so it's probably something in my environment, but I can't think what it could be. </p>\n\n<p>Other possibly-relevant information:  </p>\n\n<ul>\n<li>I'm behind a corporate proxy that re-signs SSL certs, so the install script recommended by the rust-lang website didn't work</li>\n<li>I installed using <code>rust-1.0.0-x86_64-pc-windows-gnu.msi</code></li>\n<li>I'm using the cargo included in the above \"1.0.0\" installer</li>\n<li>I've manually added the path to rustc and cargo to my environment <code>PATH</code></li>\n<li>I'm using cygwin on 64-bit Windows 7 </li>\n</ul>\n\n<p><strong><em>TL;DR</em></strong></p>\n\n<p>What do I need to change so that the <code>expect()</code> line compiles in my environment?</p>\n"}, {"tags": ["floating-point", "hashmap", "rust"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 9, "creation_date": 1474546433, "post_id": 39638363, "comment_id": 66581169, "body": "Do you really need to fetch an object by an exact distance? Using a floating point number as a key is as much of a bad idea as testing two for equality (rounding errors do happen)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1474547598, "post_id": 39638363, "comment_id": 66581974, "body": "Duplicate of <a href=\"http://stackoverflow.com/q/28247990/155423\">stackoverflow.com/q/28247990/155423</a>"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1474552979, "post_id": 39638363, "comment_id": 66585882, "body": "@Shepmaster: There might be the issue of <code>f64</code> not implementing <code>Eq</code> here, but I think the problem runs deeper =&gt; even if you rule out <code>NaN</code>, comparing two floats for equality is just asking for trouble."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1474570282, "post_id": 39638363, "comment_id": 66596761, "body": "Do you expect your keys will have any repeat values? Is it necessary that they get deduplicated by the hash map?"}], "answers": [{"comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1474570533, "post_id": 39639200, "comment_id": 66596894, "body": "This seems worse than a lossless (and more space-efficient) sign-exponent-mantissa triplet."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1474571238, "post_id": 39639200, "comment_id": 66597328, "body": "You&#39;re right, I totally forgot about that. I&#39;ll add this info."}, {"owner": {"reputation": 1457, "user_id": 2849934, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3ff0a46f18c8d548fa91c12b922290b6?s=128&d=identicon&r=PG", "display_name": "John", "link": "https://stackoverflow.com/users/2849934/john"}, "edited": false, "score": 2, "creation_date": 1474572681, "post_id": 39639200, "comment_id": 66598129, "body": "Why would anyone use the &quot;sign-exponent-mantissa&quot; split version over simply <code>impl</code>-ing <code>Eq</code> and <code>Hash</code> for <code>Distance(f64)</code> when it suffers from the same issues that <code>f64</code> has (<code>0.3</code> != <code>0.1 + 0.2</code> whether it is in the triplet form or in <code>f64</code>)?"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1474573233, "post_id": 39639200, "comment_id": 66598450, "body": "I&#39;m not sure; if you tried that, you would get <code>error: no method named assert_receiver_is_total_eq found for type f64 in the current scope in this expansion of #[derive(Eq)]</code>."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1474612291, "post_id": 39639200, "comment_id": 66610588, "body": "I though by simple you meant a <code>derive</code>. Anyway it&#39;s a matter of preference (or profiling in case one option has better performance than the other) at this point, since the OP doesn&#39;t need any arithmetic."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 1457, "user_id": 2849934, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3ff0a46f18c8d548fa91c12b922290b6?s=128&d=identicon&r=PG", "display_name": "John", "link": "https://stackoverflow.com/users/2849934/john"}, "edited": false, "score": 1, "creation_date": 1474642078, "post_id": 39639200, "comment_id": 66629045, "body": "@John MattieuM&#39;s answer involves rounding and imprecision, and involves arithmetic on every comparison. This one, in contrast, is lossless."}, {"owner": {"reputation": 1457, "user_id": 2849934, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3ff0a46f18c8d548fa91c12b922290b6?s=128&d=identicon&r=PG", "display_name": "John", "link": "https://stackoverflow.com/users/2849934/john"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1474712251, "post_id": 39639200, "comment_id": 66650827, "body": "@Veedrac I don&#39;t understand what is so good about using a &quot;lossless&quot; alternative over simply using <code>f64</code> which is exactly identical! The whole point of <i>not</i> using <code>f64</code> for hashing (or even simple equality check) is that <code>f64</code> is not &quot;infinitely&quot; precise to be useful when doing it..."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 1457, "user_id": 2849934, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3ff0a46f18c8d548fa91c12b922290b6?s=128&d=identicon&r=PG", "display_name": "John", "link": "https://stackoverflow.com/users/2849934/john"}, "edited": false, "score": 1, "creation_date": 1474735975, "post_id": 39639200, "comment_id": 66657785, "body": "@John The only reason an <code>f64</code> does not have a hash implementation is that <code>NaN</code> is not equal to itself, so cannot have a hash value. Using Shepmaster&#39;s solution instead of this is fine (though that one breaks the contract with <code>Hash</code>, and is harder to make safe), but I don&#39;t understand why people think rounding solves anything. Rounding without analysis of the domain just makes the problem worse."}, {"owner": {"reputation": 1457, "user_id": 2849934, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3ff0a46f18c8d548fa91c12b922290b6?s=128&d=identicon&r=PG", "display_name": "John", "link": "https://stackoverflow.com/users/2849934/john"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1474822859, "post_id": 39639200, "comment_id": 66678181, "body": "@Veedrac Exactly! Shepmaster&#39;s solution with custom handling of <code>NaN</code> is easier to handle and has less overheads than what is suggested here. Blindly doing something without proper domain analysis will almost always make things worse (incl. blindly choosing not to round)."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 7, "last_activity_date": 1474573911, "last_edit_date": 1474573911, "creation_date": 1474547621, "answer_id": 39639200, "question_id": 39638363, "link": "https://stackoverflow.com/questions/39638363/how-can-i-use-a-hashmap-with-f64-as-key-in-rust/39639200#39639200", "title": "How can I use a HashMap with f64 as key in Rust?", "body": "<p>You could split the <code>f64</code> into the integral and fractional part and store them in a struct in the following manner:</p>\n\n<pre><code>#[derive(Hash, Eq, PartialEq)]\nstruct Distance {\n    integral: u64,\n    fractional: u64\n}\n</code></pre>\n\n<p>The rest is straightforward:</p>\n\n<pre><code>use std::collections::HashMap;\n\n#[derive(Hash, Eq, PartialEq)]\nstruct Distance {\n    integral: u64,\n    fractional: u64\n}\n\nimpl Distance {\n    fn new(i: u64, f: u64) -&gt; Distance {\n        Distance {\n            integral: i,\n            fractional: f\n        }\n    }\n}\n\nfn main() {\n    let mut map: HashMap&lt;Distance, f64&gt; = HashMap::new();\n\n    map.insert(Distance::new(0, 4), f64::hypot(4.2, 50.0));\n    map.insert(Distance::new(1, 8), f64::hypot(2.6, 50.0));\n\n    assert_eq!(map.get(&amp;Distance::new(0, 4)), Some(&amp;f64::hypot(4.2, 50.0)));\n}\n</code></pre>\n\n<p><strong>Edit</strong>: As Veedrac said, a more general and efficient option would be to deconstruct the <code>f64</code> into a mantissa-exponent-sign triplet. The function that can do this, <a href=\"https://doc.rust-lang.org/std/primitive.f64.html#method.integer_decode\" rel=\"noreferrer\"><code>integer_decode()</code></a>, is deprecated in <code>std</code>, but it can be easily found in <a href=\"https://github.com/rust-lang/rust/blob/5c674a11471ec0569f616854d715941757a48a0a/src/libcore/num/f64.rs#L203-L216\" rel=\"noreferrer\">Rust GitHub</a>.</p>\n\n<p>The <code>integer_decode()</code> function can be defined as follows:</p>\n\n<pre><code>use std::mem;\n\nfn integer_decode(val: f64) -&gt; (u64, i16, i8) {\n    let bits: u64 = unsafe { mem::transmute(val) };\n    let sign: i8 = if bits &gt;&gt; 63 == 0 { 1 } else { -1 };\n    let mut exponent: i16 = ((bits &gt;&gt; 52) &amp; 0x7ff) as i16;\n    let mantissa = if exponent == 0 {\n        (bits &amp; 0xfffffffffffff) &lt;&lt; 1\n    } else {\n        (bits &amp; 0xfffffffffffff) | 0x10000000000000\n    };\n\n    exponent -= 1023 + 52;\n    (mantissa, exponent, sign)\n}\n</code></pre>\n\n<p>The definition of <code>Distance</code> could then be:</p>\n\n<pre><code>#[derive(Hash, Eq, PartialEq)]\nstruct Distance((u64, i16, i8));\n\nimpl Distance {\n    fn new(val: f64) -&gt; Distance {\n        Distance(integer_decode(val))\n    }\n}\n</code></pre>\n\n<p>This variant is also easier to use:</p>\n\n<pre><code>fn main() {\n    let mut map: HashMap&lt;Distance, f64&gt; = HashMap::new();\n\n    map.insert(Distance::new(0.4), f64::hypot(4.2, 50.0));\n    map.insert(Distance::new(1.8), f64::hypot(2.6, 50.0));\n\n    assert_eq!(map.get(&amp;Distance::new(0.4)), Some(&amp;f64::hypot(4.2, 50.0)));\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 1457, "user_id": 2849934, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3ff0a46f18c8d548fa91c12b922290b6?s=128&d=identicon&r=PG", "display_name": "John", "link": "https://stackoverflow.com/users/2849934/john"}, "edited": false, "score": 0, "creation_date": 1474563397, "post_id": 39641663, "comment_id": 66593039, "body": "It would be better to <code>canonicalize</code> to <code>f32</code> instead of multiplying by a constant and casting to an integer, since <code>1e-12</code> and <code>2e-15</code> will both map to <code>0</code> in the current scheme, but different values in <code>f32</code>. It takes care of the precision problem too since it the cast is only made during comparisons."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 1457, "user_id": 2849934, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3ff0a46f18c8d548fa91c12b922290b6?s=128&d=identicon&r=PG", "display_name": "John", "link": "https://stackoverflow.com/users/2849934/john"}, "edited": false, "score": 0, "creation_date": 1474570279, "post_id": 39641663, "comment_id": 66596759, "body": "@John: maybe, maybe not. It all depends on what you want to consider equal. For a distance measure in meters, <code>1e-12</code> is 1 pico-meter: I would be very surprised if a difference of 1 pico-meter was relevant for any kind of geo-tracking (for example). It really is a domain modelling decision. If you wish to preserve more precision, then a hash-map look-up is flawed and you&#39;ll need something like bounding volumes, KD-Trees, etc..."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 1, "creation_date": 1474570359, "post_id": 39641663, "comment_id": 66596805, "body": "I don&#39;t like this solution; it adds unnecessary imprecision and doesn&#39;t seem to map to any domain well. If rounding like this was sufficient, you should never have been using floats in the first place."}, {"owner": {"reputation": 1457, "user_id": 2849934, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3ff0a46f18c8d548fa91c12b922290b6?s=128&d=identicon&r=PG", "display_name": "John", "link": "https://stackoverflow.com/users/2849934/john"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1474573357, "post_id": 39641663, "comment_id": 66598521, "body": "@Veedrac Well this is done only for the lookup. So I guess it depends on what exactly you want, as MatthieuM. said... (Taking <code>1024*1024</code> as just a placeholder indicating the range of interest.)"}, {"owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "edited": false, "score": 2, "creation_date": 1557468550, "post_id": 39641663, "comment_id": 98782098, "body": "I do not see the relevance of the reasoning that if <code>f32</code> additions do not yield exact, expected results, hashing should be affected in any way. After all, there is no &quot;law&quot;, which entails <code>x1 + x2 == x3</code> -&gt; <code>x1.hash() + x2.hash() == x3.hash()</code>. If rounding errors are a problem for the application, then don&#39;t use floating points, but do not state, that float values cannot be hashed because of rounding. Use bignums or whatever rust has to offer in that department. The only acceptable reasoning here is the <code>NaN</code> issue."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "edited": false, "score": 1, "creation_date": 1557473154, "post_id": 39641663, "comment_id": 98784171, "body": "@BitTickler: Hashing floats is easy, you can just reinterpret them as integers and hash the integer. It satisfies the requirement that should two floats be equal their hash is equal (since <code>NaN</code> is not equal to anything). The point made here, though, is that this scheme relies on exact equality (bitwise equality) whereas by nature floating points have rounding errors and are thus equal <i>within a tolerance threshold</i>. And that&#39;s where hashing fails: it cannot handle this <i>tolerance threshold</i>."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 4, "last_activity_date": 1474554051, "creation_date": 1474554051, "answer_id": 39641663, "question_id": 39638363, "link": "https://stackoverflow.com/questions/39638363/how-can-i-use-a-hashmap-with-f64-as-key-in-rust/39641663#39641663", "title": "How can I use a HashMap with f64 as key in Rust?", "body": "<p>Unfortunately, floating types equality is <a href=\"https://play.rust-lang.org/?gist=f8561fa78ac3ccfe5ba2eb1ea287aa53&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">hard and counter-intuitive</a>:</p>\n\n<pre><code>fn main() {\n    println!(\"{} {} {}\", 0.1 + 0.2, 0.3, 0.1 + 0.2 == 0.3);\n}\n\n// Prints: 0.30000000000000004 0.3 false\n</code></pre>\n\n<p>And therefore hashing is hard too, since hashes of equal values should be equal.</p>\n\n<hr>\n\n<p>If, in your case, you have a small enough range to fit your number in a <code>i64</code> <em>and</em> you can accept the loss of precision, then a simple solution is to canonicalize first and then define equal/hash in terms of the canonical value:</p>\n\n<pre><code>use std::cmp::Eq;\n\n#[derive(Debug)]\nstruct Distance(f64);\n\nimpl Distance {\n    fn canonicalize(&amp;self) -&gt; i64 {\n        (self.0 * 1024.0 * 1024.0).round() as i64\n    }\n}\n\nimpl PartialEq for Distance {\n    fn eq(&amp;self, other: &amp;Distance) -&gt; bool {\n        self.canonicalize() == other.canonicalize()\n    }\n}\n\nimpl Eq for Distance {}\n\nfn main() {\n    let d = Distance(0.1 + 0.2);\n    let e = Distance(0.3);\n\n    println!(\"{:?} {:?} {:?}\", d, e, d == e);\n}\n\n// Prints: Distance(0.30000000000000004) Distance(0.3) true\n</code></pre>\n\n<p><code>Hash</code> just follows, and from then on you can use <code>Distance</code> as a key in the hash map:</p>\n\n<pre><code>impl Hash for Distance {\n    fn hash&lt;H&gt;(&amp;self, state: &amp;mut H) where H: Hasher {\n        self.canonicalize().hash(state);\n    }\n}\n\nfn main() {\n    let d = Distance(0.1 + 0.2);\n    let e = Distance(0.3);\n\n    let mut m = HashMap::new();\n    m.insert(d, \"Hello\");\n\n    println!(\"{:?}\", m.get(&amp;e));\n}\n\n// Prints: Some(\"Hello\")\n</code></pre>\n\n<p><strong>Warning:</strong> To reiterate, this strategy only works if (a) the dynamic range of values is small enough to be captured in a <code>i64</code> (19 digits) and if (b) the dynamic range is known in advance as the factor is static. Fortunately, this holds for many common problems, but it is something to document and test...</p>\n"}, {"comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 2, "creation_date": 1474581838, "post_id": 39647997, "comment_id": 66602544, "body": "Note that if the odd results with <code>NaN</code> are a problem, you can always filter them out in the constructor."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 4, "last_activity_date": 1614350270, "last_edit_date": 1614350270, "creation_date": 1474574763, "answer_id": 39647997, "question_id": 39638363, "link": "https://stackoverflow.com/questions/39638363/how-can-i-use-a-hashmap-with-f64-as-key-in-rust/39647997#39647997", "title": "How can I use a HashMap with f64 as key in Rust?", "body": "<p>Presented with no comment beyond <strong>read all the other comments and answers to understand why you probably don't want to do this</strong>:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>use std::{collections::HashMap, hash};\n\n#[derive(Debug, Copy, Clone)]\nstruct DontUseThisUnlessYouUnderstandTheDangers(f64);\n\nimpl DontUseThisUnlessYouUnderstandTheDangers {\n    fn key(&amp;self) -&gt; u64 {\n        self.0.to_bits()\n    }\n}\n\nimpl hash::Hash for DontUseThisUnlessYouUnderstandTheDangers {\n    fn hash&lt;H&gt;(&amp;self, state: &amp;mut H)\n    where\n        H: hash::Hasher,\n    {\n        self.key().hash(state)\n    }\n}\n\nimpl PartialEq for DontUseThisUnlessYouUnderstandTheDangers {\n    fn eq(&amp;self, other: &amp;DontUseThisUnlessYouUnderstandTheDangers) -&gt; bool {\n        self.key() == other.key()\n    }\n}\n\nimpl Eq for DontUseThisUnlessYouUnderstandTheDangers {}\n\nfn main() {\n    let a = DontUseThisUnlessYouUnderstandTheDangers(0.1);\n    let b = DontUseThisUnlessYouUnderstandTheDangers(0.2);\n    let c = DontUseThisUnlessYouUnderstandTheDangers(0.3);\n\n    let mut map = HashMap::new();\n    map.insert(a, 1);\n    map.insert(b, 2);\n\n    println!(&quot;{:?}&quot;, map.get(&amp;a));\n    println!(&quot;{:?}&quot;, map.get(&amp;b));\n    println!(&quot;{:?}&quot;, map.get(&amp;c));\n}\n</code></pre>\n<p>Basically, if you want to treat a <code>f64</code> as a set of bits that <strong>have no meaning</strong>, well, we can treat them as an equivalently sized bag of bits that know how to be hashed and bitwise-compared.</p>\n<p>Don't be surprised when one of the <a href=\"https://stackoverflow.com/q/19800415/155423\">16 million <code>NaN</code> values doesn't equal another one</a>.</p>\n"}], "owner": {"reputation": 291, "user_id": 3735355, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9712cc38a6a18bbb7aaee2b510514b6d?s=128&d=identicon&r=PG", "display_name": "pixunil", "link": "https://stackoverflow.com/users/3735355/pixunil"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7093, "favorite_count": 1, "accepted_answer_id": 39639200, "answer_count": 3, "score": 14, "last_activity_date": 1614350270, "creation_date": 1474545316, "last_edit_date": 1495541969, "question_id": 39638363, "link": "https://stackoverflow.com/questions/39638363/how-can-i-use-a-hashmap-with-f64-as-key-in-rust", "title": "How can I use a HashMap with f64 as key in Rust?", "body": "<p>I want to use a <code>HashMap&lt;f64, f64&gt;</code>, for saving the distances of a point with known x and key y to another point. <code>f64</code> as value shouldn't matter here, the focus should be on key.</p>\n\n<pre><code>let mut map = HashMap&lt;f64, f64&gt;::new();\nmap.insert(0.4, f64::hypot(4.2, 50.0));\nmap.insert(1.8, f64::hypot(2.6, 50.0));\n...\nlet a = map.get(&amp;0.4).unwrap();\n</code></pre>\n\n<p>As <code>f64</code> is neither <code>Eq</code> nor <code>Hash</code>, but only <code>PartialEq</code>, <code>f64</code> is not sufficient as a key. I need to save the distances first, but also access the distances later by y. The type of y needs to be floating point precision, but if doesn't work with <code>f64</code>, I'll use an <code>i64</code> with an known exponent.</p>\n\n<p>I tried some hacks by using my own <code>struct Dimension(f64)</code> and then implementing <code>Hash</code> by converting the float into a <code>String</code> and then hashing it.</p>\n\n<pre><code>#[derive(PartialEq, Eq)]\nstruct DimensionKey(f64);\n\nimpl Hash for DimensionKey {\n    fn hash&lt;H: Hasher&gt;(&amp;self, state: &amp;mut H) {\n        format!(\"{}\", self.0).hash(state);\n    }\n}\n</code></pre>\n\n<p>It seems very bad and both solutions, my own struct or float as integers with base and exponent seem to be pretty complicated for just a key.</p>\n\n<p>Update:\nI can guarantee that my key never will be <code>NaN</code>, or an infinite value. Also, I won't calculate my keys, only iterating over them and using them. So there should no error with the known error with <code>0.1 + 0.2 \u2260 0.3</code>.\n<a href=\"https://stackoverflow.com/questions/28247990/how-to-do-a-binary-search-on-a-vec-of-floats\">How to do a binary search on a Vec of floats?</a> and this question have in common to implement total ordering and equality for a floating number, the difference lies only in the hashing or iterating.</p>\n"}, {"tags": ["arrays", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1474542292, "post_id": 39634190, "comment_id": 66578411, "body": "<i>it generates considerably more assembly in release-mode</i> \u2014 that doesn&#39;t really mean anything. It&#39;s not uncommon for longer code to be faster; perhaps a loop was unrolled for example. What does **profiling ** say is faster?"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1475020061, "post_id": 39634190, "comment_id": 66769777, "body": "While in general, agree that profiling is best before assuming generated assembly is better/worse. From reading over the ASM in both cases - its clear the Vector version of this code doesn&#39;t optimize out the intermediate steps and is infact creating multiple internal data structures and converting them. Thats compared to the simple version of the function which is already manually unrolled. There is no need to use heap memory here, if this were a C program, it would be like using multiple malloc&#39;s and memcpy&#39;s when there is no need."}], "answers": [{"comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1474534719, "post_id": 39634523, "comment_id": 66573485, "body": "In this example <code>foo</code> is a <code>Vec</code>, not a fixed size array."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1474535598, "post_id": 39634523, "comment_id": 66574018, "body": "Since the question is asking about fixed size arrays, (<code>[i32; 8]</code> in this case), this answer could be completed by showing how to get the <code>[i32; 8]</code> from the <code>Vec</code>."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1474536976, "post_id": 39634523, "comment_id": 66574944, "body": "This seems quite over-complicated, for performance critical code, creating multiple intermediate arrays just to save some typing, can&#39;t necessarily be justified. Would be curious to know if this can be expressed with zero-overhead. <i>(expanding via macros or so)</i>."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1474545317, "post_id": 39634523, "comment_id": 66580448, "body": "@ideasman42 I&#39;m afraid that is not possible due to the limitation of macros not evaluating expressions. For instance, macros cannot even count in compile time. But if plugins are an option, then that would become possible."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1474551304, "post_id": 39634523, "comment_id": 66584691, "body": "Creating an array in code does not correspond to the program creating intermediate arrays in the actual compiled program. The compiler knows how to smash compound values into scalars and chew on them. The kernel of crate <code>matrixmultiply</code> uses intermediate arrays, that in the compiled code de facto represent simd registers."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 0, "last_activity_date": 1474535786, "last_edit_date": 1495535247, "creation_date": 1474534626, "answer_id": 39634523, "question_id": 39634190, "link": "https://stackoverflow.com/questions/39634190/how-to-avoid-repetition-constructing-fixed-sized-arrays-from-existing-arrays/39634523#39634523", "title": "How to avoid repetition constructing fixed sized arrays from existing arrays?", "body": "<p>If you don't want to go into unsafe code, I would create a <code>mut Vec&lt;T&gt;</code> and then use <code>extend_from_slice()</code> to incrementally extend it with slices:</p>\n\n<pre><code>fn main() {\n    let bar = [1,2,3,4,5,6];\n    let taz = [7,8,9,10,11,12];\n    let mut foo = Vec::new();\n    foo.extend_from_slice(&amp;bar[1..5]);\n    foo.extend_from_slice(&amp;taz[1..5]);\n}\n</code></pre>\n\n<p>Afterwards it can be converted to a fixed-length slice with <code>into_boxed_slice()</code>. Or, if you need an array, you can use a function I found in <a href=\"https://stackoverflow.com/questions/25428920/how-to-get-a-slice-as-an-array-in-rust\">another question</a>:</p>\n\n<pre><code>use std::convert::AsMut;\n\nfn clone_into_array&lt;A, T&gt;(slice: &amp;[T]) -&gt; A\n    where A: Sized + Default + AsMut&lt;[T]&gt;,\n          T: Clone\n{\n    let mut a = Default::default();\n    &lt;A as AsMut&lt;[T]&gt;&gt;::as_mut(&amp;mut a).clone_from_slice(slice);\n    a\n}\n</code></pre>\n\n<p>And then convert the <code>Vec</code> from before as follows:</p>\n\n<pre><code>let fixed: [i32; 8] = clone_into_array(&amp;foo);\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": true, "score": 2, "last_activity_date": 1474873709, "last_edit_date": 1474873709, "creation_date": 1474551584, "answer_id": 39640712, "question_id": 39634190, "link": "https://stackoverflow.com/questions/39634190/how-to-avoid-repetition-constructing-fixed-sized-arrays-from-existing-arrays/39640712#39640712", "title": "How to avoid repetition constructing fixed sized arrays from existing arrays?", "body": "<p>For curiosity, here's an array concatenation macro that supports unpacking (limited to a finite number of sizes, this macro is small and can be expanded).</p>\n\n<p>I have nothing to claim about the performance or zero-costiness of this compared to any other solution (profile to know). If you use fixed size arrays all the way, all bounds checking happens at compile time.</p>\n\n<p>First usage example:</p>\n\n<pre><code>fn main() {\n    let data = [0, 1, 2, 3, 4, 5, 6, 7, 8];\n\n    println!(\"{:?}\", concat_arrays!([1, 2, 3] [4] [5, 6]));\n    // [1, 2, 3, 4, 5, 6]\n\n    println!(\"{:?}\", concat_arrays!(data[3..];3 [-1] data;3));\n    // [3, 4, 5, -1, 0, 1, 2]\n\n    // let's look at the macro expansion of the last one\n    println!(\"{}\", concat_arrays!(@build stringify [] data[3..];3 [-1] data;3));\n    // [ data[3..][0] , data[3..][1] , data[3..][2] , -1 , data[0] , data[1] , data[2] ]\n}\n</code></pre>\n\n<p>Then implementation: <a href=\"https://play.rust-lang.org/?gist=0cafc00921f7be7740b4020ea905716d&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">(playground link)</a></p>\n\n<pre><code>/// Concatenate array literals and fixed-size unpacked parts of arrays and slices\n///\n/// Usage: `concat_arrays!(fragments)`  \n/// where each fragment is either an array literal: `[x, y, z]`  \n/// or an expression and how many elements to unpack: `expression;N`  \n/// where `N` must be an integer literal\n///\n/// See: https://gitlab.com/snippets/27095\n/// for a script to generate a macro supporting many more arguments.\nmacro_rules! concat_arrays {\n    // last step -&gt; build an expression\n    (@build as_expr [$($t:expr),*]) =&gt; {\n        [$($t),*]\n    };\n    (@build $m:ident [$($t:expr),*]) =&gt; {\n        $m!([$($t),*])\n    };\n    (@build $m:ident [$($t:expr),*] [$($e:expr),+] $($more:tt)*) =&gt; {\n        concat_arrays!(@build $m [$($t,)* $($e),*] $($more)*)\n    };\n    (@build $m:ident [$($t:expr),*] $e:expr;1 $($more:tt)*) =&gt; {\n        concat_arrays!(@build $m [$($t,)* $e[0]] $($more)*)\n    };\n    (@build $m:ident [$($t:expr),*] $e:expr;2 $($more:tt)*) =&gt; {\n        concat_arrays!(@build $m [$($t,)* $e[0], $e[1]] $($more)*)\n    };\n    (@build $m:ident [$($t:expr),*] $e:expr;3 $($more:tt)*) =&gt; {\n        concat_arrays!(@build $m [$($t,)* $e[0], $e[1], $e[2]] $($more)*)\n    };\n    (@build $m:ident [$($t:expr),*] $e:expr;4 $($more:tt)*) =&gt; {\n        concat_arrays!(@build $m [$($t,)* $e[0], $e[1], $e[2], $e[3]] $($more)*)\n    };\n    (@build $m:ident [$($t:expr),*] $e:expr;5 $($more:tt)*) =&gt; {\n        concat_arrays!(@build $m [$($t,)* $e[0], $e[1], $e[2], $e[3], $e[4]] $($more)*)\n    };\n\n    // user facing case\n    ($($t:tt)+) =&gt; {\n        concat_arrays!(@build as_expr [] $($t)+)\n    }\n}\n</code></pre>\n\n<p>Applied to your question, I'd do this:</p>\n\n<p><code>concat_arrays!(bar[1..];4 taz[1..];4)</code></p>\n\n<p>Which is succinct, but sure, it has some problems like for example being in a syntax that's idiosyncratic of the particular macro, and the problems that stem from the <code>4</code> having to be a literal, not only that but a literal from a finite list.</p>\n\n<hr>\n\n<p>Edited:</p>\n\n<p>See <a href=\"https://gitlab.com/snippets/27095\" rel=\"nofollow\">expanded macro</a>, including script to generate a macro supporting a pre-defined number of arguments which can be much larger then the example given here.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 137, "favorite_count": 0, "accepted_answer_id": 39640712, "answer_count": 2, "score": 1, "last_activity_date": 1474873709, "creation_date": 1474533682, "last_edit_date": 1474849744, "question_id": 39634190, "link": "https://stackoverflow.com/questions/39634190/how-to-avoid-repetition-constructing-fixed-sized-arrays-from-existing-arrays", "title": "How to avoid repetition constructing fixed sized arrays from existing arrays?", "body": "<p>When creating a fixed size arrays from existing arrays, it can be tedious to read and write, eg:</p>\n\n<pre><code>let foo: [i32; 8] = [\n    bar[1], bar[2], bar[3], bar[4],\n    taz[1], taz[2], taz[3], taz[4],\n];\n</code></pre>\n\n<p>Besides using a <code>for</code> loop to assign values, does Rust provide a way to write this without manually expanding the array?</p>\n\n<p>For example, something like <a href=\"http://legacy.python.org/dev/peps/pep-0448/\" rel=\"nofollow\">Python's unpacking generalizations</a>:</p>\n\n<pre><code>let foo: [i32; 8] = [*bar[1..5], *taz[1..5]];\n</code></pre>\n\n<p><em>Note: that the real world example used more items, just keeping it short for the example</em>.</p>\n\n<hr>\n\n<p>Using vectors this is possible, however moving from a fixed size array to vectors doesn't come for free <em>(tested this and it generates considerably more assembly in release-mode, which performs the transformations as written, using heap memory where the simplistic version only needs stack memory)</em>.</p>\n\n<pre><code>let foo: Vec&lt;i32&gt; = bar[1..5].iter().chain(taz[1..5].iter()).cloned().collect();\n</code></pre>\n"}]