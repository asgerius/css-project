[{"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 4, "creation_date": 1529532710, "post_id": 50957738, "comment_id": 88912948, "body": "<i>I would like to try using a pointer</i> \u2014 one of the biggest reasons to use Rust is to <b>avoid</b> using pointers when possible."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 2, "creation_date": 1529533451, "post_id": 50957738, "comment_id": 88913158, "body": "The first time you hit that <code>Box::from_raw</code>, the pointer you pass it is not derived from a <code>Box</code>. I&#39;m pretty confused by what you&#39;re trying to do here and I don&#39;t understand what it has to do with copying a pointer. <a href=\"http://play.rust-lang.org/?gist=64eddadd117c9fd9c9f8b0167b154cb2&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">Raw pointers are trivially copyable</a>."}, {"owner": {"reputation": 571, "user_id": 4493361, "user_type": "registered", "accept_rate": 83, "profile_image": "https://lh3.googleusercontent.com/-1j2w11MYwK8/AAAAAAAAAAI/AAAAAAAAAEM/cllVRT5KBFs/photo.jpg?sz=128", "display_name": "ccQpein", "link": "https://stackoverflow.com/users/4493361/ccqpein"}, "edited": false, "score": 0, "creation_date": 1529533775, "post_id": 50957738, "comment_id": 88913240, "body": "If I do not create <code>temp_b</code> to keep pointer, <code>p = Box::into_raw((*p).next.unwrap());</code> will give me <code>cannot move out of dereference of raw pointer</code> error when I am compiling"}, {"owner": {"reputation": 26154, "user_id": 5436257, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/iGuaK.jpg?s=128&g=1", "display_name": "Joe Clay", "link": "https://stackoverflow.com/users/5436257/joe-clay"}, "edited": false, "score": 0, "creation_date": 1529577899, "post_id": 50957738, "comment_id": 88929388, "body": "Obligatory link to <a href=\"http://cglab.ca/~abeinges/blah/too-many-lists/book/\" rel=\"nofollow noreferrer\"><i>Learning Rust With Entirely Too Many Linked Lists</i></a> :) Chapter 6 onwards demonstrates how to write a data structure using <code>unsafe</code>. Although I&#39;ll second what Shepmaster and Doug said - you&#39;re probably better off sticking with <code>Rc</code> (which is what the earlier chapters show you how to do) unless you have a good reason not to do so."}], "answers": [{"tags": [], "owner": {"reputation": 25893, "user_id": 353820, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/32b29e1dc23c2c5abe0283ab7b9541d3?s=128&d=identicon&r=PG", "display_name": "Doug", "link": "https://stackoverflow.com/users/353820/doug"}, "is_accepted": false, "score": 3, "last_activity_date": 1529629202, "last_edit_date": 1529629202, "creation_date": 1529572783, "answer_id": 50964886, "question_id": 50957738, "link": "https://stackoverflow.com/questions/50957738/how-to-copy-a-raw-pointer-when-implementing-a-linked-list-in-rust/50964886#50964886", "title": "How to copy a raw pointer when implementing a linked list in Rust?", "body": "<p>You have a number of issues here, none of which relate to copying a pointer.</p>\n\n<p>I see what you're trying to do, but you're seeing 'undefined behavior' in action, not a failure to copy the pointer value.</p>\n\n<p>First of all, this:</p>\n\n<pre><code>temp_b.next.unwrap()\n</code></pre>\n\n<p>Unwrap does not leave the object behind; it consumes it. Every iteration through, you will be setting the value of <code>next</code> to nothing as you call <code>unwrap</code>.</p>\n\n<p>Secondly, on the first iteration through your loop, you convert the original pointer into a box:</p>\n\n<pre><code>let mut p: *mut ListNode = self as *mut ListNode;\n// ... p is not reassigned before calling the next statement\nBox::from_raw(p);\n</code></pre>\n\n<p>As a result, you're dropping (free'ing) the root object a when you consume temp_b.</p>\n\n<p>This won't immediately trigger a crash, but it means you've now effectively corrupted the stack. Everything past this point is undefined behavior.</p>\n\n<p>Look at the output when you trace your actual pointer values:</p>\n\n<pre><code>#[derive(Debug)]\nstruct ListNode {\n    val: String,\n    next: Option&lt;Box&lt;ListNode&gt;&gt;,\n}\n\nimpl ListNode {\n    fn new(i: &amp;str) -&gt; Self {\n        ListNode { val: format!(\"{:?}\", i), next: None }\n    }\n\n    fn add_l(&amp;mut self, l: &amp;Vec&lt;&amp;str&gt;) {\n        let mut p: *mut ListNode = self as *mut ListNode;\n        println!(\"self -&gt; {:?}\", self as *mut ListNode);\n        for i in l {\n            unsafe {\n                (*p).next = Some(Box::new(ListNode::new(*i)));\n                let temp_b = Box::from_raw(p);\n                println!(\"{:?} -&gt; {:?}\", p, temp_b);\n                p = Box::into_raw(temp_b.next.unwrap());\n                println!(\"next p -&gt; {:?}\", p);\n            };\n\n        }\n        println!(\"self -&gt; {:?}\", self as *mut ListNode);\n    }\n}\n\nfn main() {\n    let mut a = ListNode::new(\"1\");\n    a.add_l(&amp;vec![\"2\", \"3\", \"4\", \"5\"]);\n    println!(\"self -&gt; {:?}\", &amp;mut a as *mut ListNode);\n    println!(\"{:?}\", a);\n}\n</code></pre>\n\n<p>...</p>\n\n<pre><code>self -&gt; 0x7ffdc10a90f0\n0x7ffdc10a90f0 -&gt; ListNode { val: \"\\\"1\\\"\", next: Some(ListNode { val: \"\\\"2\\\"\", next: None }) }\nnext p -&gt; 0x7fdde801f060\n0x7fdde801f060 -&gt; ListNode { val: \"\\\"2\\\"\", next: Some(ListNode { val: \"\\\"3\\\"\", next: None }) }\nnext p -&gt; 0x7ffdc10a90f0\n0x7ffdc10a90f0 -&gt; ListNode { val: \"\\\"3\\\"\", next: Some(ListNode { val: \"\\\"4\\\"\", next: None }) }\nnext p -&gt; 0x7fdde801f060\n0x7fdde801f060 -&gt; ListNode { val: \"\\\"4\\\"\", next: Some(ListNode { val: \"\\\"5\\\"\", next: None }) }\nnext p -&gt; 0x7ffdc10a90f0 &lt;---- Whhhaaaat! You've been reallocated!\nself -&gt; 0x7ffdc10a90f0\nself -&gt; 0x7ffdc10a90f0\nListNode { val: \"\\\"5\\\"\", next: None }\n</code></pre>\n\n<p>So... this is why using <code>unsafe</code> is unsafe.</p>\n\n<p>You can't do what you want to do without using raw pointers all the way; I recommend you look at <code>Rc</code> for what you're trying to do.</p>\n"}, {"comments": [{"owner": {"reputation": 465, "user_id": 876147, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/4QjCN.jpg?s=128&g=1", "display_name": "bayinamy", "link": "https://stackoverflow.com/users/876147/bayinamy"}, "edited": false, "score": 0, "creation_date": 1547008510, "post_id": 50970414, "comment_id": 95039149, "body": "rust newbie question: what are the &quot;{}&quot; around &quot;head&quot; in the code <code>head = { head }.next.as_mut().unwrap();</code> for?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 465, "user_id": 876147, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/4QjCN.jpg?s=128&g=1", "display_name": "bayinamy", "link": "https://stackoverflow.com/users/876147/bayinamy"}, "edited": false, "score": 0, "creation_date": 1547008615, "post_id": 50970414, "comment_id": 95039174, "body": "@bayinamy follow the second link in the see also section. It may not be needed as of Rust 2018 though."}, {"owner": {"reputation": 465, "user_id": 876147, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/4QjCN.jpg?s=128&g=1", "display_name": "bayinamy", "link": "https://stackoverflow.com/users/876147/bayinamy"}, "edited": false, "score": 0, "creation_date": 1547013796, "post_id": 50970414, "comment_id": 95040483, "body": "@Shepmaster thx, but unfortunately, it still needed in Rust 2018, version 1.31.1"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1529589551, "creation_date": 1529589551, "answer_id": 50970414, "question_id": 50957738, "link": "https://stackoverflow.com/questions/50957738/how-to-copy-a-raw-pointer-when-implementing-a-linked-list-in-rust/50970414#50970414", "title": "How to copy a raw pointer when implementing a linked list in Rust?", "body": "<p>First things first: using <code>unsafe</code> here is <strong>completely unnecessary</strong> and I would say actively malicious if I saw it in any real code. Don't use <code>unsafe</code> for \"fun\".</p>\n\n<p>Here's a completely safe implementation of the function which walks <em>backwards</em> to construct the new tail of the list to add:</p>\n\n<pre><code>fn add_l(&amp;mut self, l: &amp;[i32]) {\n    let mut tail = None;\n\n    for &amp;val in l.iter().rev() {\n        let next = tail.take();\n        tail = Some(Box::new(ListNode { val, next }));\n    }\n\n    self.next = tail;\n}\n</code></pre>\n\n<p>And one that goes forwards, but requires an <code>unwrap</code>:</p>\n\n<pre><code>fn add_l(&amp;mut self, l: &amp;[i32]) {\n    let mut head = self;\n\n    for &amp;val in l {\n        head.next = Some(Box::new(ListNode::new(val)));\n        head = { head }.next.as_mut().unwrap();\n    }\n}\n</code></pre>\n\n<p>If you <strong>had</strong> to do it in the forwards direction and <strong>had</strong> to avoid the <code>unwrap</code>, then <em>maybe</em> you could use <code>unsafe</code>. Every single <code>unsafe</code> block should contain a wealth of comments explaining how the code is safe and doesn't break the guarantees that you need to uphold.</p>\n\n<pre><code>fn add_l(&amp;mut self, l: &amp;[i32]) {\n    let mut head = self;\n\n    for &amp;val in l {\n        unsafe {\n            // Boxing a value gives it a stable address.\n            let mut node = Box::new(ListNode::new(val));\n\n            // So long as this raw pointer doesn't escape this block, \n            // we don't need to worry about its lifetime as it should \n            // outlive what we need.\n            let node_raw = &amp;mut node as &amp;mut ListNode as *mut ListNode;\n\n            head.next = Some(node);\n\n            // Now that we've moved the `Box` into its final place,\n            // we throw away the reference to head to avoid mutable \n            // aliasing\n            head = &amp;mut *node_raw;\n        }\n    }\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/40006219/155423\">Why is it discouraged to accept a reference to a String (&amp;String), Vec (&amp;Vec) or Box (&amp;Box) as a function argument?</a></li>\n<li><a href=\"https://stackoverflow.com/q/37986640/155423\">Cannot obtain a mutable reference when iterating a recursive structure: cannot borrow as mutable more than once at a time</a></li>\n</ul>\n"}], "owner": {"reputation": 571, "user_id": 4493361, "user_type": "registered", "accept_rate": 83, "profile_image": "https://lh3.googleusercontent.com/-1j2w11MYwK8/AAAAAAAAAAI/AAAAAAAAAEM/cllVRT5KBFs/photo.jpg?sz=128", "display_name": "ccQpein", "link": "https://stackoverflow.com/users/4493361/ccqpein"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 884, "favorite_count": 1, "accepted_answer_id": 50970414, "answer_count": 2, "score": 1, "last_activity_date": 1529629202, "creation_date": 1529532401, "last_edit_date": 1529587991, "question_id": 50957738, "link": "https://stackoverflow.com/questions/50957738/how-to-copy-a-raw-pointer-when-implementing-a-linked-list-in-rust", "title": "How to copy a raw pointer when implementing a linked list in Rust?", "body": "<p>I am writing a recursive type <code>ListNode</code> in Rust. I have to use <code>Box</code> in the struct and I am trying to write a loop to add <code>next</code> <code>ListNode</code>. However, I would like to try using a pointer except recursive method. </p>\n\n<pre><code>#[derive(Debug)]\nstruct ListNode {\n    val: i32,\n    next: Option&lt;Box&lt;ListNode&gt;&gt;,\n}\n\nimpl ListNode {\n    fn new(i: i32) -&gt; Self {\n        ListNode { val: i, next: None }\n    }\n\n    fn add_l(&amp;mut self, l: &amp;Vec&lt;i32&gt;) {\n        let mut p: *mut ListNode = self as *mut ListNode;\n        for i in l {\n            unsafe {\n                (*p).next = Some(Box::new(ListNode::new(*i)));\n                let temp_b = Box::from_raw(p);\n                p = Box::into_raw(temp_b.next.wrap());\n            };\n        }\n    }\n}\n\nfn main() {\n    let mut a = ListNode::new(1);\n    a.add_l(&amp;vec![2, 3, 4, 5]);\n    println!(\"{:?}\", a);\n}\n</code></pre>\n\n<p>I found that <code>a</code> is changed to the last <code>NodeList</code> with the <code>val</code> of 5:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>ListNode { val: 5, next: None }\n</code></pre>\n\n<ol>\n<li>Is there any way I can copy a pointer so I can keep <code>a</code> stable?</li>\n<li>If there is no way I can copy pointer, how can I implement this?</li>\n</ol>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1529529510, "post_id": 50957125, "comment_id": 88911721, "body": "Please review how to create a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> and then <a href=\"https://stackoverflow.com/posts/50957125/edit\">edit</a> your question to include it. We cannot tell what types, and fields are present in the code. For example, you reference <code>self.head</code>, but nothing defines that. Ideally, produce something that reproduces your error on the <a href=\"https://play.rust-lang.org\" rel=\"nofollow noreferrer\">Rust Playground</a>. There are <a href=\"//stackoverflow.com/tags/rust/info\">Rust-specific MCVE tips</a> as well."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1529531876, "post_id": 50957125, "comment_id": 88912647, "body": "<i>Questions seeking debugging help (&quot;why isn&#39;t this code working?&quot;) must include the desired behavior, a specific problem or error and <b>the shortest code necessary to reproduce it in the question itself</b>. Questions without a clear problem statement are not useful to other readers</i>; Linking to code is fine, but it <i>needs to be in the question</i>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1529531913, "post_id": 50957125, "comment_id": 88912658, "body": "I believe your question is answered by the answers of <a href=\"https://stackoverflow.com/q/31391581/155423\">How to bind multiple fields of a boxed struct without getting \u201cuse moved value\u201d error?</a>. If you disagree, please <a href=\"https://stackoverflow.com/posts/50957125/edit\">edit</a> your question to explain the differences. Otherwise, we can mark this question as already answered."}], "owner": {"reputation": 1674, "user_id": 5420686, "user_type": "registered", "accept_rate": 49, "profile_image": "https://www.gravatar.com/avatar/2c318e16c4b5f17dd1375df8cb1425e5?s=128&d=identicon&r=PG&f=1", "display_name": "Jal", "link": "https://stackoverflow.com/users/5420686/jal"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 76, "favorite_count": 0, "answer_count": 0, "score": 1, "last_activity_date": 1529529737, "creation_date": 1529529278, "last_edit_date": 1529529737, "question_id": 50957125, "link": "https://stackoverflow.com/questions/50957125/why-does-moving-a-subcomponent-of-a-box-consume-the-whole-box-while-moving-a-sub", "title": "Why does moving a subcomponent of a Box consume the whole Box while moving a subcomponent of struct doesn&#39;t?", "body": "<p>Consider the following examples taken from <a href=\"http://cglab.ca/~abeinges/blah/too-many-lists/book/first-pop.html\" rel=\"nofollow noreferrer\"><em>Learning Rust With Entirely Too Many Linked Lists</em></a></p>\n\n<p>Example 1 <a href=\"https://play.rust-lang.org/?gist=5b37dd62632ea0ec94f8b9563f8817ce&amp;version=undefined&amp;mode=undefined\" rel=\"nofollow noreferrer\">rust playground</a></p>\n\n<pre><code>pub fn pop(&amp;mut self) -&gt; Option&lt;i32&gt; {\n    match mem::replace(&amp;mut self.head, Link::Empty) {\n        Link::Empty =&gt; None,\n        Link::More(boxed_node) =&gt; {\n            let node = *boxed_node;\n            self.head = node.next;\n            //println!(\"{:?}\", node); // Adding this line will induce the same error\n            Some(node.elem)\n        }\n    }\n}\n</code></pre>\n\n<p>Example 2 <a href=\"https://play.rust-lang.org/?gist=69588dd6f8afea91ee36dedbe275d919&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">rust playground</a></p>\n\n<pre><code>pub fn pop(&amp;mut self) -&gt; Option&lt;i32&gt; {\n    match mem::replace(&amp;mut self.head, Link::Empty) {\n        Link::Empty =&gt; None,\n        Link::More(node) =&gt; {\n            self.head = node.next;\n            Some(node.elem)\n        }\n    }\n}\n</code></pre>\n\n<p>Error from example 2</p>\n\n<pre><code>error[E0382]: use of moved value: `node`\n  --&gt; src/main.rs:42:20\n   |\n41 |                     self.head = node.next;\n   |                                 --------- value moved here\n42 |                     Some(node.elem)\n   |                          ^^^^^^^^^ value used here after move\n   |\n   = note: move occurs because `node.next` has type `main::Link`, which does not implement the `Copy` trait\n</code></pre>\n\n<p>With the following types</p>\n\n<pre><code>struct Node {\n    elem: i32,\n    next: Link,\n}\n\nenum Link {\n    Empty,\n    More(Box&lt;Node&gt;),\n}\n</code></pre>\n\n<p>In example 1, the content of the <code>Box</code> (e.g. struct) is first moved to <code>node</code> then part of the struct is moved to <code>head</code></p>\n\n<p>In example 2, part of the <code>Box</code> is moved to <code>head</code>.</p>\n\n<p>Why doesn't example 1 have the same compiler error as example 2? Specifically, if I move part of a struct why doesn't it consume the entire struct?</p>\n"}, {"tags": ["macos", "raspberry-pi", "rust"], "comments": [{"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 1, "creation_date": 1529570656, "post_id": 50955843, "comment_id": 88924806, "body": "The tools from <a href=\"https://github.com/raspberrypi/tools\" rel=\"nofollow noreferrer\">github.com/raspberrypi/tools</a> are compiled for Linux and can only be run from Linux. You&#39;ll likely need to build the cross-compiler yourself."}, {"owner": {"reputation": 1358, "user_id": 4454752, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/e8273afa6aa2fb20caab5fe3b9c45ecd?s=128&d=identicon&r=PG&f=1", "display_name": "grahan", "link": "https://stackoverflow.com/users/4454752/grahan"}, "reply_to_user": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 0, "creation_date": 1529754023, "post_id": 50955843, "comment_id": 88995344, "body": "I didn&#39;t know that before, thanks for clarifying. So essentially I need to compile <code>&#47;arm-linux-gnueabihf-gcc</code> for Mac OS ? And then use my personal compiled version as the linker ? So maybe use something like <a href=\"https://github.com/crosstool-ng\" rel=\"nofollow noreferrer\">crosstool-ng</a> ?"}], "answers": [{"tags": [], "owner": {"reputation": 15416, "user_id": 2441637, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/Z8fpp.jpg?s=128&g=1", "display_name": "Hasan A Yousef", "link": "https://stackoverflow.com/users/2441637/hasan-a-yousef"}, "is_accepted": false, "score": 0, "last_activity_date": 1568234349, "creation_date": 1568234349, "answer_id": 57896510, "question_id": 50955843, "link": "https://stackoverflow.com/questions/50955843/linking-with-arm-linux-gnueabihf-gcc-failed-when-cross-compiling-a-rust-applic/57896510#57896510", "title": "&quot;linking with arm-linux-gnueabihf-gcc failed&quot; when cross-compiling a Rust application from macOS to a Raspberry Pi 2", "body": "<p><code>rust-std</code> library relies on <code>glibc</code> for things like <code>syscalls</code> and other low-level stuff, in order to cross-compile a Rust binary, one needs the appropriate C toolchain to be present as well. And this is where <a href=\"http://crosstool-ng.github.io/docs/introduction/\" rel=\"nofollow noreferrer\">crosstool-NG</a> comes into play.</p>\n\n<p><code>crosstool-NG</code> is in the toolchain building business. You\u2019re going to use it to build yourself a toolchain for linking against ARMv7-compatible <code>glibc</code>, which will in turn allow you to successfully build your Rust binary for the Pi.</p>\n\n<ul>\n<li>Clone the repo to a good location and bootstrap it:</li>\n</ul>\n\n<pre class=\"lang-sh prettyprint-override\"><code>cd /Users/USER\ngit clone https://github.com/crosstool-ng/crosstool-ng\ncd crosstool-ng\n./bootstrap\n</code></pre>\n\n<ul>\n<li>Configure the installation and run it. To set where the tool goes on install,  run:</li>\n</ul>\n\n<pre class=\"lang-sh prettyprint-override\"><code>./configure --prefix=$PWD\nmake\nmake install\nexport PATH=\"${PATH}:${PWD}/bin\"\n</code></pre>\n\n<p>If all things went as expected, you should be able to run <code>ct-ng version</code> and verify the tool\u2019s ready to go.</p>\n\n<ul>\n<li>Configure the tool to build your <code>ARMv7 toolchain</code>. Luckily, crosstool-NG comes with some preset configurations, namely <code>armv7-rpi2-linux-gnueabihf</code>. Run:</li>\n</ul>\n\n<pre class=\"lang-sh prettyprint-override\"><code>ct-ng armv7-rpi2-linux-gnueabihf\n</code></pre>\n\n<p>There should be some output indicating that it\u2019s now configured for <code>armv7-rpi2-linux-gnueabihf</code>. You just need to tell ct-ng where the toolchain ought to go:</p>\n\n<pre class=\"lang-sh prettyprint-override\"><code>mkdir /Users/USER/ct-ng-toolchains\ncd /Users/USER/ct-ng-toolchains\nct-ng menuconfig\n</code></pre>\n\n<p>It can be overwhelming, as there are a ton of options, but stick to the <code>Paths and misc options ---&gt; menu option</code>. Highlight it and hit Enter.</p>\n\n<p>Under <code>*** crosstool-NG behavior ***</code>, scroll down until you see this long string:\n<code>(${CT_PREFIX:-${HOME}/x-tools}/${CT_HOST:+HOST-${CT_HOST}/}${CT_TARGET}) Prefix directory</code>\n- Hit Enter, delete the contents, and replace it with <code>/Users/USER/ct-ng-toolchains</code>. \n- When you\u2019re finished, hit Enter to confirm, scroll over and save, and then exit the configurator.</p>\n\n<ul>\n<li>Build your toolchain (this may take half an hour):</li>\n</ul>\n\n<pre class=\"lang-sh prettyprint-override\"><code>ct-ng build\n</code></pre>\n\n<ul>\n<li><p>If it worked successfully, You should see a great many binaries now in <code>/Users/USER/ct-ng-toolchains/armv7-rpi2-linux-gnueabihf/bin</code>, namely <code>armv7-rpi2-linux-gnueabihf-gcc</code>.</p></li>\n<li><p>For cargo to build using your new cross-compiler, you must:</p>\n\n<ol>\n<li>Add the bin folder listed above to your PATH:</li>\n</ol></li>\n</ul>\n\n<pre class=\"lang-sh prettyprint-override\"><code>export PATH=\"${PATH}:/Users/USER/ct-ng-toolchains/armv7-rpi2-linux-gnueabihf/bin\"\n</code></pre>\n\n<ol start=\"2\">\n<li>Update (or create) your global <code>/Users/USER/.cargo/config</code> file with (you can avoid this and use it in local <code>.cargo/config</code>):</li>\n</ol>\n\n<pre><code>[target.armv7-unknown-linux-gnueabihf]\nlinker = \"armv7-rpi2-linux-gnueabihf-gcc\"\n</code></pre>\n\n<p>3.Return to your Rust project and rerun cargo build:</p>\n\n<pre class=\"lang-sh prettyprint-override\"><code>cd /Users/USER/rust/hello\ncargo build --target=armv7-unknown-linux-gnueabihf\n</code></pre>\n\n<ol start=\"4\">\n<li>The output should be something similar to:</li>\n</ol>\n\n<pre class=\"lang-sh prettyprint-override\"><code>   Compiling hello v0.1.0 (file:///Users/USER/rust/hello)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.85 secs\n</code></pre>\n\n<ol start=\"5\">\n<li>SCP your file over to the RPi and run the binary remotely:</li>\n</ol>\n\n<pre class=\"lang-sh prettyprint-override\"><code>scp target/armv7-unknown-linux-gnueabihf/debug/hello pi@192.168.1.43:\nssh pi@192.168.3.155 'chmod +x ~/hello &amp;&amp; ~/hello'\nHello, world!\n</code></pre>\n\n<p>Credit goes to <a href=\"https://akappel.github.io/2017/11/07/rpi-crosstool.html\" rel=\"nofollow noreferrer\">Kappel Codes</a> I tried to summarize it here, as I found this question hours before I get that article :)</p>\n"}], "owner": {"reputation": 1358, "user_id": 4454752, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/e8273afa6aa2fb20caab5fe3b9c45ecd?s=128&d=identicon&r=PG&f=1", "display_name": "grahan", "link": "https://stackoverflow.com/users/4454752/grahan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 1098, "favorite_count": 1, "answer_count": 1, "score": 3, "last_activity_date": 1568234349, "creation_date": 1529523420, "last_edit_date": 1529524287, "question_id": 50955843, "link": "https://stackoverflow.com/questions/50955843/linking-with-arm-linux-gnueabihf-gcc-failed-when-cross-compiling-a-rust-applic", "title": "&quot;linking with arm-linux-gnueabihf-gcc failed&quot; when cross-compiling a Rust application from macOS to a Raspberry Pi 2", "body": "<p>I want to cross-compile my Rust application on macOS to a Raspberry Pi 2. I searched a lot, but did not find a working solution. The last solution I tried was following this <a href=\"https://stackoverflow.com/questions/29917513/how-can-i-compile-rust-code-to-run-on-a-raspberry-pi-2\">answer</a>, but I couldn't get it to work. </p>\n\n<ul>\n<li>macOS version: 10.13.5 (High Sierra)</li>\n<li>rustup version: 1.11.0 </li>\n<li>cargo version: 1.26.0</li>\n</ul>\n\n<p>What I did:</p>\n\n<ul>\n<li>I cloned  <a href=\"https://github.com/raspberrypi/tools\" rel=\"nofollow noreferrer\">raspberrypi/tools</a></li>\n<li>Installed <strong>arm-unknown-linux-gnueabihf</strong> and\n<strong>armv7-unknown-linux-gnueabihf</strong> toolchains via rustup</li>\n<li><p>Created <code>.cargo/config</code> file in the root of my project with following content</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[target.armv-unknown-linux-gnueabihf]\nlinker = \"/Users/user/Documents/Programming/RustProjects/hello-pi/../../Utils/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin/arm-linux-gnueabihf-gcc\"\n</code></pre></li>\n<li><p>Then I run <code>cargo build --target=arm-unknown-linux-gnueabihf</code></p></li>\n</ul>\n\n<p>I get the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>linking with /Users/user/Documents/Programming/RustProjects/hello-pi/../../Utils/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin/arm-linux-gnueabihf-gcc failed: exit code: 126\n....\ncannot execute binary file\n</code></pre>\n\n<p>It seems that I cannot run the <code>...gcc</code> binary on my macOS machine. What would be the right way to cross-compile my Rust application from macOS to the ARM architecture for a Raspberry Pi 2? </p>\n"}, {"tags": ["rust", "segmentation-fault", "ffi"], "comments": [{"owner": {"reputation": 754, "user_id": 2364686, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/69c53d70693ec83d97351943187285ee?s=128&d=identicon&r=PG", "display_name": "ItsTimmy", "link": "https://stackoverflow.com/users/2364686/itstimmy"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1529525562, "post_id": 50955611, "comment_id": 88910099, "body": "@Shepmaster I looked at the linked answers, and they aren&#39;t relevant after my removal of <code>String</code>s. I looked at your &quot;Omnibus&quot;, and it&#39;s not relevant due to lack of information about callbacks. So I will keep this question open for now. Thanks for the resources!"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1529526982, "last_edit_date": 1529526982, "creation_date": 1529526653, "answer_id": 50956576, "question_id": 50955611, "link": "https://stackoverflow.com/questions/50955611/segmentation-fault-when-using-c-callback-user-data-to-store-a-boxed-rust-closure/50956576#50956576", "title": "Segmentation fault when using C callback user data to store a boxed Rust closure", "body": "<blockquote>\n<pre><code>Box::into_raw(Box::new(Box::new(func)));\n</code></pre>\n</blockquote>\n\n<p>This does not produce the type you think it does:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>   = note: expected type `()`\n              found type `*mut std::boxed::Box&lt;F&gt;`\n</code></pre>\n\n<p>You assume it's a trait object:</p>\n\n<blockquote>\n<pre><code>let func: &amp;mut Box&lt;FnMut(i32) -&gt; ()&gt; = transmute(user);\n</code></pre>\n</blockquote>\n\n<p>Instead, make the input value into a trait object when you box it. I advocate for explicit lines with comments explaining each step:</p>\n\n<pre><code>// Trait object with a stable address\nlet func = Box::new(func) as Box&lt;FnMut(i32)&gt;;\n// Thin pointer\nlet func = Box::new(func);\n// Raw pointer\nlet func = Box::into_raw(func);\n</code></pre>\n\n<hr>\n\n<blockquote>\n<pre><code>Box&lt;FnMut(i32) -&gt; ()&gt;\n</code></pre>\n</blockquote>\n\n<p>The return type of <code>()</code> is redundant; use <code>Box&lt;FnMut(i32)&gt;</code></p>\n\n<blockquote>\n<pre><code>let func: &amp;mut Box&lt;FnMut(i32) -&gt; ()&gt; = transmute(user);\n</code></pre>\n</blockquote>\n\n<p>Try <em>really</em> hard to avoid <code>transmute</code>. There are usually smaller tools to use:</p>\n\n<pre><code>extern \"C\" fn c_callback(data: i32, user: *mut libc::c_void) {\n    let user = user as *mut Box&lt;FnMut(i32)&gt;;\n    unsafe {\n        (*user)(data);\n    }\n}\n</code></pre>\n\n<p>Avoid restating the same type all over. Introduce a <em>type alias</em>:</p>\n\n<pre><code>type CallbackFn = Box&lt;FnMut(i32)&gt;;\n</code></pre>\n\n\n\n<pre><code>let user = user as *mut CallbackFn;\n</code></pre>\n\n\n\n<pre><code>let func = Box::new(func) as CallbackFn;\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li>My <a href=\"http://jakegoulding.com/rust-ffi-omnibus/\" rel=\"nofollow noreferrer\"><em>The Rust FFI Omnibus</em></a></li>\n</ul>\n"}], "owner": {"reputation": 754, "user_id": 2364686, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/69c53d70693ec83d97351943187285ee?s=128&d=identicon&r=PG", "display_name": "ItsTimmy", "link": "https://stackoverflow.com/users/2364686/itstimmy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 353, "favorite_count": 1, "accepted_answer_id": 50956576, "answer_count": 1, "score": 1, "last_activity_date": 1529526982, "creation_date": 1529522563, "last_edit_date": 1529526270, "question_id": 50955611, "link": "https://stackoverflow.com/questions/50955611/segmentation-fault-when-using-c-callback-user-data-to-store-a-boxed-rust-closure", "title": "Segmentation fault when using C callback user data to store a boxed Rust closure", "body": "<p>I am creating a Rust wrapper around a C API. One function in this C API sets a callback and accepts a void pointer which will be passed to the callback. It stores a reference to the callback and user data for later, so I am using the last code section from <a href=\"https://stackoverflow.com/a/32270215/2364686\">this answer</a>.</p>\n\n<p>Here is my code. The <code>Test::trigger_callback(...)</code> function is meant to emulate the C library calling the callback.</p>\n\n<pre><code>extern crate libc;\n\nuse libc::c_void;\nuse std::mem::transmute;\n\nstruct Test {\n    callback: extern \"C\" fn(data: i32, user: *mut c_void) -&gt; (),\n    userdata: *mut c_void,\n}\n\nextern \"C\" fn c_callback(data: i32, user: *mut libc::c_void) {\n    unsafe {\n        println!(\"Line {}. Ptr: {}\", line!(), user as u64);\n        let func: &amp;mut Box&lt;FnMut(i32) -&gt; ()&gt; = transmute(user);\n        println!(\"Line {}. Data: {:?}\", line!(), data);\n        (*func)(data);\n        println!(\"Line {}\", line!());\n    }\n}\n\nimpl Test {\n    fn new&lt;F&gt;(func: F) -&gt; Test\n    where\n        F: FnMut(i32) -&gt; (),\n        F: 'static,\n    {\n        let func = Box::into_raw(Box::new(Box::new(func)));\n        println!(\"Line: {}, Ptr: {}\", line!(), func as u64);\n\n        Test {\n            callback: c_callback,\n            userdata: func as *mut c_void,\n        }\n    }\n\n    fn trigger_callback(&amp;self, data: i32) {\n        (self.callback)(data, self.userdata);\n    }\n}\n\nfn main() {\n    let test = Test::new(|data: i32| {\n        println!(\"Inside callback! Data: {}\", data);\n    });\n\n    test.trigger_callback(12345);\n}\n</code></pre>\n\n<p>As mentioned in the linked answer, <code>Box</code>ing the closure is meant to store it on the heap so that a pointer to it will be valid for an arbitrarily long time, and then <code>Box</code>ing that <code>Box</code> is because it's a fat pointer, but needs to be converted to a regular pointer so that it can be cast to a void pointer.</p>\n\n<p>When run, this code prints out:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Line: 29, Ptr: 140589704282120\nLine 13. Ptr: 140589704282120\nLine 15. Data: 12345\nSegmentation fault (core dumped)\n</code></pre>\n\n<p>It segfaults when trying to call the closure inside of the <code>extern \"C\"</code> function.</p>\n\n<p>Why? As far as I understand it, putting the closure in a <code>Box</code> and then using <code>Box::into_raw(...)</code> should store it on the heap and 'leak' the memory, so the pointer should be valid for as long as the program is running. What part of this is wrong?</p>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 231, "user_id": 4946427, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/40ab8bebe7076c9f2a634d55da49c010?s=128&d=identicon&r=PG&f=1", "display_name": "Sascha", "link": "https://stackoverflow.com/users/4946427/sascha"}, "edited": false, "score": 0, "creation_date": 1529521633, "post_id": 50955374, "comment_id": 88908396, "body": "I know, that there a better suited types for queues, but Vec does the job for experimenting."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1529523641, "post_id": 50955374, "comment_id": 88909304, "body": "I believe your question is answered by the answers of <a href=\"https://stackoverflow.com/q/40325690/155423\">What is lifetime elision in very simple terms?</a> and <a href=\"https://stackoverflow.com/q/27785671/155423\">Why can the lifetimes not be elided in a struct definition?</a>. If you disagree, please <a href=\"https://stackoverflow.com/posts/50955374/edit\">edit</a> your question to explain the differences. Otherwise, we can mark this question as already answered."}, {"owner": {"reputation": 231, "user_id": 4946427, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/40ab8bebe7076c9f2a634d55da49c010?s=128&d=identicon&r=PG&f=1", "display_name": "Sascha", "link": "https://stackoverflow.com/users/4946427/sascha"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1529868617, "post_id": 50955374, "comment_id": 89019244, "body": "@Shepmaster, I think there are two things to realize, to answer this question. First, like you have pointed out in your comment, the fact that lifetime elision exists (I wasn&#39;t aware of this) and it exists only for function declarations. This explains the different situation between declaring the function and declaring the struct. Second, one needs to realize, that the MutexGuard struct declaration actually takes a lifetime parameter, because it holds a reference. That&#39;s very easy to overlook if one isn&#39;t used to work with lifetime parameters."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1529869642, "post_id": 50955374, "comment_id": 89019498, "body": "<i>That&#39;s very easy to overlook if one isn&#39;t used to work with lifetime parameters</i> \u2014 A future version of Rust will improve that. The function signature will need to be <code>pub fn get_mutex_guard(&amp;self) -&gt; MutexGuard&lt;&#39;_, Vec&lt;i32&gt;&gt;</code>, indicating that lifetimes are in play."}], "answers": [{"tags": [], "owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "is_accepted": false, "score": 1, "last_activity_date": 1531067151, "creation_date": 1531067151, "answer_id": 51233955, "question_id": 50955374, "link": "https://stackoverflow.com/questions/50955374/why-does-a-mutexguard-require-a-lifetime-parameter-in-structs-but-not-in-functio/51233955#51233955", "title": "Why does a MutexGuard require a lifetime parameter in structs but not in function return types?", "body": "<p>This is more or less arbitrary design decision in Rust. </p>\n\n<p>In functions there's <em>lifetime elision</em>, where the compiler guesses what lifetime the struct could have based on lifetimes of references in function arguments. </p>\n\n<p>When you have <code>foo(&amp;'a self) -&gt; Struct&lt;'a&gt;</code> there's only one lifetime possible (apart from <code>'static</code>). This is such a common case that Rust allows this to be implied for convenience: <code>foo(&amp;self) -&gt; Struct</code>. </p>\n\n<p>Definition of references in structs wasn't deemed to be common and unambiguous enough to also have elided lifetimes, and the desire to have explicit lifetime definitions won.</p>\n"}], "owner": {"reputation": 231, "user_id": 4946427, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/40ab8bebe7076c9f2a634d55da49c010?s=128&d=identicon&r=PG&f=1", "display_name": "Sascha", "link": "https://stackoverflow.com/users/4946427/sascha"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 469, "favorite_count": 1, "closed_date": 1531100919, "answer_count": 1, "score": 2, "last_activity_date": 1531100935, "creation_date": 1529521551, "last_edit_date": 1529523554, "question_id": 50955374, "link": "https://stackoverflow.com/questions/50955374/why-does-a-mutexguard-require-a-lifetime-parameter-in-structs-but-not-in-functio", "closed_reason": "Duplicate", "title": "Why does a MutexGuard require a lifetime parameter in structs but not in function return types?", "body": "<p>I'd like to move a <code>MutexGuard</code> around. Returning a <code>MutexGuard</code> from a function works fine without giving a lifetime parameter. But when packing the guard into a struct, the compiler demands a lifetime parameter for the guard.</p>\n\n<p>The following code compiles without errors:</p>\n\n<pre><code>struct Queue {\n    queue: Mutex&lt;Vec&lt;i32&gt;&gt;,\n}\n\nimpl Queue {\n    pub fn get_mutex_guard(&amp;self) -&gt; MutexGuard&lt;Vec&lt;i32&gt;&gt; {\n        self.queue.lock().unwrap()\n    }\n}\n</code></pre>\n\n<p>When I try to pack the MutexGuard into a struct:</p>\n\n<pre><code>struct QueueHandle {\n    handle: MutexGuard&lt;Vec&lt;i32&gt;&gt;,\n}\n</code></pre>\n\n<p>the compiler complains about a missing lifetime parameter:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0106]: missing lifetime specifier\n --&gt; mutex-guard.rs:8:13\n  |\n8 |     handle: MutexGuard&lt;Vec&lt;i32&gt;&gt;\n  |             ^^^^^^^^^^^^^^^^^^^^ expected lifetime parameter\n</code></pre>\n\n<p>To my understanding, the requirements for lifetime parameters should be the same for function return types and structs. What am I missing here?</p>\n"}, {"tags": ["multithreading", "rust", "move"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1529504042, "post_id": 50950117, "comment_id": 88898253, "body": "I believe your question is answered by the answers of <a href=\"https://stackoverflow.com/q/27098694/155423\">How can I swap in a new value for a field in a mutable reference to a structure?</a>. If you disagree, please <a href=\"https://stackoverflow.com/posts/50950117/edit\">edit</a> your question to explain the differences. Otherwise, we can mark this question as already answered."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1529504056, "post_id": 50950117, "comment_id": 88898268, "body": "TL; DR the duplicate: <code>let v = mem::replace(&amp;mut self.large_vec, Vec::new()); self.sender.send(v);</code>"}, {"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 0, "creation_date": 1529504171, "post_id": 50950117, "comment_id": 88898374, "body": "Does <code>large_vec</code> need to be an attribute of <code>NetDist</code>? The example looks like it could well work as a local variable in <code>main_thread</code>&#39;s loop (<a href=\"https://play.rust-lang.org/\" rel=\"nofollow noreferrer\">playground</a>)."}, {"owner": {"reputation": 51, "user_id": 8603055, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5225128da2417018bbb7b17e90b17ff7?s=128&d=identicon&r=PG&f=1", "display_name": "Jackbob", "link": "https://stackoverflow.com/users/8603055/jackbob"}, "edited": false, "score": 0, "creation_date": 1529504821, "post_id": 50950117, "comment_id": 88898832, "body": "Yes I believe you are totally right Shepmaster! I can&#39;t try  for myself until tomorrow but I&#39;m fairly certain that your example is exactly what I need"}, {"owner": {"reputation": 51, "user_id": 8603055, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5225128da2417018bbb7b17e90b17ff7?s=128&d=identicon&r=PG&f=1", "display_name": "Jackbob", "link": "https://stackoverflow.com/users/8603055/jackbob"}, "edited": false, "score": 0, "creation_date": 1529505106, "post_id": 50950117, "comment_id": 88899051, "body": "kazemakase, this is unfortunately an extremely simplified example of the real deal so as of now it is not possible at all to keep the variable local to the scope of main_thread as that function doesn&#39;t really exist"}], "owner": {"reputation": 51, "user_id": 8603055, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5225128da2417018bbb7b17e90b17ff7?s=128&d=identicon&r=PG&f=1", "display_name": "Jackbob", "link": "https://stackoverflow.com/users/8603055/jackbob"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 44, "favorite_count": 0, "closed_date": 1529505212, "answer_count": 0, "score": 0, "last_activity_date": 1529503892, "creation_date": 1529503380, "last_edit_date": 1529503892, "question_id": 50950117, "link": "https://stackoverflow.com/questions/50950117/move-a-variable-that-is-owned-by-mut-self-to-another-thread-without-cloning-cop", "closed_reason": "Duplicate", "title": "Move a variable that is owned by &amp;mut self to another thread without cloning/copying", "body": "<p>I'm creating a network distributor. I have a member variable that is a potentially very large vector. I need a separate thread to handle when I need to write the vector to disk as I can not risk it blocking the network. </p>\n\n<p>I want to send the vector to the <code>writer_thread</code> (probably moving it is required so it doesn't take time) and then let the main thread start working with a new vector while the <code>writer_thread</code> does its job without interrupting the main program. </p>\n\n<pre><code>use std::sync::mpsc::{self, channel};\nuse std::thread;\n\nstruct NetDist {\n    sender: mpsc::Sender&lt;Vec&lt;Object&gt;&gt;,\n    large_vec: Vec&lt;Object&gt;,\n}\n\nimpl NetDist {\n    fn new() -&gt; Netdist {\n        let (sender, receiver) = channel::&lt;Vec&lt;Message&gt;&gt;();\n        NetDist {\n            sender,\n            large_vec: Vec::new(),\n        };\n\n        thread::spawn(move || NetDist::writer_thread(receiver));\n    }\n\n    fn main_thread(&amp;mut self) {\n        loop {\n            // Do stuff and fill up large_vec\n\n            // Here I want to move the memory of large_vec to the writer_thread\n            // and allocate new memory for large_vec that will be sent later.\n            // ERROR: Cannot move out of borrowed content\n            self.sender.send(self.large_vec);\n\n            // Allocate new memory and let writer_thread handle the sent memory\n            self.large_vec = Vec::new();\n        }\n    }\n\n    fn writer_thread(receiver: mpsc::Receiver&lt;Vec&lt;Object&gt;&gt;) {\n        loop {\n            let mut largevec = receiver.recv().unwrap();\n\n            // Write to disk....\n\n            // Free memory when writing is done\n            largevec.clear();\n        }\n    }\n}\n</code></pre>\n"}, {"tags": ["rust", "traits", "ownership", "trait-objects"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 7, "creation_date": 1529501594, "post_id": 50949379, "comment_id": 88896513, "body": "Why <code>self</code> instead of <code>&amp;self</code>?"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1529502610, "post_id": 50949379, "comment_id": 88897292, "body": "Can&#39;t think of another way other than to adopt the take pattern: <code>fn take_name(&amp;mut self) -&gt; String</code> is object safe, but requires an extension to the type&#39;s state domain."}], "answers": [{"comments": [{"owner": {"reputation": 766, "user_id": 9370826, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=128", "display_name": "Sam96", "link": "https://stackoverflow.com/users/9370826/sam96"}, "edited": false, "score": 1, "creation_date": 1609277877, "post_id": 50950018, "comment_id": 115800272, "body": "thanks so much, i was looking a loong time for something like that.  I would like to ask another thing, if you can help me on that account: While Rust Documentation is generally awsome, I did scour a lot of it for a solution like that, and I&#39;m sure theres nothing like that in Rust by Example, the Rust Book or the Nomicum. And I&#39;m still not completely comfortable with most of the stuff in the official reference, where I&#39;d have found that I guess. Is there another source where I could see more advanced patterns like that in practice?"}, {"owner": {"reputation": 2920, "user_id": 210304, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/3c70d1833ed67198b6e364834b13c770?s=128&d=identicon&r=PG", "display_name": "Caio", "link": "https://stackoverflow.com/users/210304/caio"}, "reply_to_user": {"reputation": 766, "user_id": 9370826, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=128", "display_name": "Sam96", "link": "https://stackoverflow.com/users/9370826/sam96"}, "edited": false, "score": 1, "creation_date": 1609327075, "post_id": 50950018, "comment_id": 115812029, "body": "@Sam96 (1) The Rust subreddit has some eventual blog posts about good patterns and technical stuff; (2) The official Zulip and Discord channels are great places to ask complicated questions to smart people and (3) Personally, most of my Rust knowledge were acquired by hacking open-source projects"}], "tags": [], "owner": {"reputation": 2920, "user_id": 210304, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/3c70d1833ed67198b6e364834b13c770?s=128&d=identicon&r=PG", "display_name": "Caio", "link": "https://stackoverflow.com/users/210304/caio"}, "is_accepted": true, "score": 13, "last_activity_date": 1592008108, "last_edit_date": 1592008108, "creation_date": 1529503079, "answer_id": 50950018, "question_id": 50949379, "link": "https://stackoverflow.com/questions/50949379/how-to-move-a-value-out-of-an-object-safe-trait-object/50950018#50950018", "title": "How to move a value out of an object-safe trait object?", "body": "<p>As the compiler hinted, the trait cannot be statically determined because you are dealing with dynamic dispatch. Ownership is still possible in this scenario using <code>self: Box&lt;Self&gt;</code>.</p>\n\n<pre><code>trait Named {\n    fn name(self: Box&lt;Self&gt;) -&gt; String;\n}\n\nstruct Person {\n    first_name: String,\n    last_name: String,\n}\n\nimpl Named for Person {\n    fn name(self: Box&lt;Self&gt;) -&gt; String {\n        format!(\"{} {}\", self.first_name, self.last_name)\n    }\n}\n\npub struct Mech&lt;'a&gt; {\n    driver: Box&lt;Named + 'a&gt;,\n}\n\nimpl&lt;'a&gt; Mech&lt;'a&gt; {\n    pub fn driver_name(self) -&gt; String {\n        self.driver.name()\n    }\n}\n\nfn main() {}\n</code></pre>\n"}], "owner": {"reputation": 131, "user_id": 2383252, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/8ipKi.jpg?s=128&g=1", "display_name": "mwgkgk", "link": "https://stackoverflow.com/users/2383252/mwgkgk"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 624, "favorite_count": 0, "accepted_answer_id": 50950018, "answer_count": 1, "score": 8, "last_activity_date": 1592008108, "creation_date": 1529501174, "last_edit_date": 1529501902, "question_id": 50949379, "link": "https://stackoverflow.com/questions/50949379/how-to-move-a-value-out-of-an-object-safe-trait-object", "title": "How to move a value out of an object-safe trait object?", "body": "<p>A <code>Mech</code> carries a driver, which is a <code>Named</code> entity. At run-time, an omitted <code>Mech</code> constructor consults external source for the specific type of driver to use.</p>\n\n<pre><code>trait Named {\n    fn name(self) -&gt; String;\n}\n\nstruct Person {\n    first_name: String,\n    last_name: String\n}\n\nimpl Named for Person {\n    fn name(self) -&gt; String {\n        format!(\"{} {}\", self.first_name, self.last_name)\n    }\n}\n\npub struct Mech&lt;'a&gt; {\n    driver: Box&lt;Named + 'a&gt;,\n}\n\nimpl&lt;'a&gt; Mech&lt;'a&gt; {\n    pub fn driver_name(self) -&gt; String {\n        self.driver.name()\n    }\n}\n</code></pre>\n\n<p>Method <code>driver_name</code> returns ownership to a <code>String</code>, for it to be further used in chained calls (in actual code it's a <code>Command</code>). It fails compilation with:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0161]: cannot move a value of type Named + 'a: the size of Named + 'a cannot be statically determined\n  --&gt; src/lib.rs:22:9\n   |\n22 |         self.driver.name()\n   |         ^^^^^^^^^^^\n</code></pre>\n\n<p>Making the trait <code>Sized</code> fails the object safety:</p>\n\n<pre><code>trait Named: Sized {\n    fn name(self) -&gt; String;\n}\n</code></pre>\n\n<p>\u2193</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0038]: the trait `Named` cannot be made into an object\n  --&gt; src/lib.rs:17:5\n   |\n17 |     driver: Box&lt;Named + 'a&gt;,\n   |     ^^^^^^^^^^^^^^^^^^^^^^^ the trait `Named` cannot be made into an object\n   |\n   = note: the trait cannot require that `Self : Sized`\n</code></pre>\n\n<p>Is there a way to make this pattern happen?</p>\n\n<p>Is there anything fundamental that I seem to be missing?</p>\n\n<p>In case this is impossible to achieve, what's a good way to work around it?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 26154, "user_id": 5436257, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/iGuaK.jpg?s=128&g=1", "display_name": "Joe Clay", "link": "https://stackoverflow.com/users/5436257/joe-clay"}, "edited": false, "score": 5, "creation_date": 1529500805, "post_id": 50946872, "comment_id": 88896005, "body": "Rust tends to favor using composition over inheritance. Trying to imitate the latter using traits rarely gives good results - traits are better suited to describing something an object <i>does</i> rather than something it <i>is</i>."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1529515034, "post_id": 50946872, "comment_id": 88905203, "body": "I think this question is adequately answered by the answers to <a href=\"https://stackoverflow.com/q/28219730/3650362\">Is it possible to access struct fields from within a trait?</a> In short, no, it&#39;s not possible for traits to have fields."}, {"owner": {"reputation": 961, "user_id": 1282369, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/LjubZ.jpg?s=128&g=1", "display_name": "tsatiz", "link": "https://stackoverflow.com/users/1282369/tsatiz"}, "edited": false, "score": 2, "creation_date": 1529515303, "post_id": 50946872, "comment_id": 88905329, "body": "I found <a href=\"https://doc.rust-lang.org/book/second-edition/ch17-03-oo-design-patterns.html\" rel=\"nofollow noreferrer\">this</a> chapter in the book very useful (To not think in terms of OO in rust lang), when I moved from Java to Rust lang."}], "owner": {"reputation": 1011, "user_id": 9545537, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b4aee91ba61e53841e3b955806ac6985?s=128&d=identicon&r=PG&f=1", "display_name": "pixix4", "link": "https://stackoverflow.com/users/9545537/pixix4"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 64, "favorite_count": 0, "closed_date": 1529524449, "answer_count": 0, "score": 0, "last_activity_date": 1529502876, "creation_date": 1529493166, "last_edit_date": 1529502876, "question_id": 50946872, "link": "https://stackoverflow.com/questions/50946872/common-attribute-for-trait-composition", "closed_reason": "Duplicate", "title": "Common attribute for trait composition", "body": "<p>I want to create driver mappings for some Unix devices. To efficiently access the driver files, I want to keep the file handle opened after the first access, so I want to store an access wrapper in a map. Each device has different (but sometimes common) methods. </p>\n\n<p>In an OOP-based language like Java, I would create an abstract class with this map and derivatives that access this map.</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>class Attribute {\n    void doSomething() { /* Do Something */ }\n}\n\nabstract class Device {\n    Map&lt;String, Attribute&gt; attributes = new HashMap&lt;&gt;();\n}\n\nclass Motor extends Device {\n    void func1() {\n        attributes.get(\"elem1\").do_something();\n    }\n}\n\nclass SpecialMotor extends Motor {\n    void func2() {\n        attributes.get(\"elem2\").do_something();\n    }\n}\n\nclass Sensor extends Device {\n    void func1() {\n        attributes.get(\"elem1\").do_something();\n        // Its possible that this function has a different return type\n    }\n}\n</code></pre>\n\n<p>As far as I know, this is not possible in Rust. I tried to emulate this behavior with a trait to access this map, but this creates a lot of boilerplate code for each device.</p>\n\n<pre><code>struct Attribute {}\nimpl Attribute {\n    fn do_something() {}\n}\n\ntrait Device {\n    fn get_attributes(&amp;self) -&gt; HashMap&lt;String, Attribute&gt;;\n}\n\ntrait Motor: Device {\n    fn func1(&amp;self) {\n        self.get_attributes()[\"elem1\"].do_something();\n    }\n}\n\ntrait SpecialMotor: Motor {\n    fn func2(&amp;self) {\n        self.get_attributes()[\"elem2\"].do_something();\n    }\n}\n\ntrait Sensor: Device {\n    fn func1(&amp;self) {\n        self.get_attributes()[\"elem1\"].do_something();\n    }\n}\n\nstruct MotorImpl {\n    attributes: HashMap&lt;String, Attribute&gt;,\n}\nimpl MotorImpl {\n    fn new() -&gt; MotorImpl {\n        MotorImpl {\n            attributes: HashMap::new(),\n        }\n    }\n}\nimpl Motor for MotorImpl {\n    fn get_attributes(&amp;self) -&gt; HashMap&lt;String, Attribute&gt; {\n        self.attributes\n    }\n}\n\nstruct SpecialMotorImpl {\n    attributes: HashMap&lt;String, Attribute&gt;,\n}\nimpl SpecialMotorImpl {\n    fn new() -&gt; SpecialMotorImpl {\n        SpecialMotorImpl {\n            attributes: HashMap::new(),\n        }\n    }\n}\nimpl SpecialMotor for SpeicalMotorImpl {\n    fn get_attributes(&amp;self) -&gt; HashMap&lt;String, Attribute&gt; {\n        self.attributes\n    }\n}\n\nstruct SensorImpl {\n    attributes: HashMap&lt;String, Attribute&gt;,\n}\nimpl SensorImpl {\n    fn new() -&gt; SensorImpl {\n        SensorImpl {\n            attributes: HashMap::new(),\n        }\n    }\n}\nimpl Sensor for SensorImpl {\n    fn get_attributes(&amp;self) -&gt; HashMap&lt;String, Attribute&gt; {\n        self.attributes\n    }\n}\n</code></pre>\n\n<p>Is it possible have a kind of common attribute for multiple traits or is there an even better design pattern to achieve this? </p>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 3480, "user_id": 2686821, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/5dd46afe4f5a75f2667569582b20ac9b?s=128&d=identicon&r=PG&f=1", "display_name": "soupybionics", "link": "https://stackoverflow.com/users/2686821/soupybionics"}, "edited": false, "score": 0, "creation_date": 1529549958, "post_id": 50947788, "comment_id": 88916519, "body": "Thanks! That was very insightful."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 13, "last_activity_date": 1529497341, "last_edit_date": 1529497341, "creation_date": 1529496167, "answer_id": 50947788, "question_id": 50946525, "link": "https://stackoverflow.com/questions/50946525/why-do-the-lifetimes-on-a-trait-object-passed-as-an-argument-require-higher-rank/50947788#50947788", "title": "Why do the lifetimes on a trait object passed as an argument require Higher Ranked Trait Bounds but a struct doesn&#39;t?", "body": "<p><strong>In short:</strong> <code>foo1</code> compiles because most types are variant over their generic parameters and the compiler can still chose a <code>Spinner</code> impl for <code>t</code>. <code>foo2</code> doesn't compile because traits are invariant over their generic parameters and the <code>Spinner</code> impl is already fixed.</p>\n\n<hr>\n\n<h3>Some explanation</h3>\n\n<p>Let's take a look at a third version of <code>foo</code>:</p>\n\n<pre><code>fn foo3&lt;'a&gt;(t: &amp;'a Planet&lt;&amp;'a i32&gt;) {\n    let x: i32 = 10;\n    Spinner::&lt;&amp;'a i32&gt;::spin(t, &amp;x);\n}\n</code></pre>\n\n<p>This results in the same error as your <code>foo2</code>. What's going in there?</p>\n\n<p>By writing <code>Spinner::&lt;&amp;'a i32&gt;::spin</code>, we force the compiler to use a specific implementation of the <code>Spinner</code> trait. And the signature of <code>Spinner::&lt;&amp;'a i32&gt;::spin</code> is <code>fn spin(&amp;self, value: &amp;'a i32)</code>. Period. The lifetime <code>'a</code> is given by the caller; <code>foo</code> can't choose it. Thus we have to pass a reference that lives for at least <code>'a</code>. That's why the compiler error happens.</p>\n\n<hr>\n\n<p>So <strong>why does <code>foo1</code> compile?</strong> As a reminder:</p>\n\n<pre><code>fn foo1&lt;'a&gt;(t: &amp;'a Planet&lt;&amp;'a i32&gt;) {\n    let x: i32 = 10;\n    t.spin(&amp;x);\n}\n</code></pre>\n\n<p>Here, the lifetime <code>'a</code> is also given by the caller and cannot be chosen by <code>foo1</code>. <em>But</em>, <code>foo1</code> can chose which impl of <code>Spinner</code> to use! Note that <code>impl&lt;T&gt; Spinner&lt;T&gt; for Planet&lt;T&gt;</code> basically defines infinitely many specific implementations (one for each <code>T</code>). So the compiler also knows that <code>Planet&lt;&amp;'x i32&gt;</code> does implement <code>Spinner&lt;&amp;'x i32&gt;</code> (where <code>'x</code> is the specific lifetime of <code>x</code> in the function)! </p>\n\n<p>Now the compiler just has to figure out if it can turn <code>Planet&lt;&amp;'a i32&gt;</code> into <code>Planet&lt;&amp;'x i32&gt;</code>. And yes, it can, because <a href=\"https://doc.rust-lang.org/nomicon/subtyping.html\" rel=\"noreferrer\">most types are variant over their generic parameters</a> and thus <code>Planet&lt;&amp;'a i32&gt;</code> is a subtype of <code>Planet&lt;&amp;'x i32&gt;</code> if <code>'a</code> is a subtype of <code>'x</code> (which it is). So the compiler just \"converts\" <code>t</code> to <code>Planet&lt;&amp;'x i32&gt;</code> and then the <code>Spinner&lt;&amp;'x i32&gt;</code> impl can be used.</p>\n\n<hr>\n\n<p>Fantastic! But now to the main part: <strong>why doesn't <code>foo2</code> compile then?</strong> Again, as a reminder:</p>\n\n<pre><code>fn foo2&lt;'a&gt;(t: &amp;'a Spinner&lt;&amp;'a i32&gt;) {\n    let x: i32 = 10;\n    t.spin(&amp;x);\n}\n</code></pre>\n\n<p>Again, <code>'a</code> is given by the caller and <code>foo2</code> cannot chose it. Unfortunately, now we already have a specific implementation! Namely <code>Spinner&lt;&amp;'a i32&gt;</code>. We can't just assume that the thing we were passed also implements <code>Spinner&lt;&amp;'o i32&gt;</code> for any other lifetime <code>'o != 'a</code>! <a href=\"https://doc.rust-lang.org/nomicon/subtyping.html\" rel=\"noreferrer\">Traits are invariant over their generic parameters</a>.</p>\n\n<p>In other words: we know we have <em>something</em> that can handle references which live at least as long as <code>'a</code>. But we can't assume that the thing we were handed can also handle lifetimes shorter than <code>'a</code>! </p>\n\n<p>As an example:</p>\n\n<pre><code>struct Star;\n\nimpl Spinner&lt;&amp;'static i32&gt; for Star {\n    fn spin(&amp;self, value: &amp;'static i32) {}\n}\n\nstatic SUN: Star = Star;\n\nfoo2(&amp;SUN);\n</code></pre>\n\n<p>In this example, <code>'a</code> of <code>foo2</code> is <code>'static</code>. And in fact, <code>Star</code> implements <code>Spinner</code> only for <code>'static</code> references to <code>i32</code>. </p>\n\n<hr>\n\n<p>By the way: <strong>this is not specific to trait objects!</strong> Let's look at this fourth version of <code>foo</code>:</p>\n\n<pre><code>fn foo4&lt;'a, S: Spinner&lt;&amp;'a i32&gt;&gt;(t: &amp;'a S) {\n    let x: i32 = 10;\n    t.spin(&amp;x);\n}\n</code></pre>\n\n<p>Same error once again. The problem is, again, that the <code>Spinner</code> impl is already fixed! As with the trait object, we only know that <code>S</code> implements <code>Spinner&lt;&amp;'a i32&gt;</code>, not necessarily more.</p>\n\n<h3>HRTB to the rescue?</h3>\n\n<p>Using higher ranked trait bounds resolves the issue:</p>\n\n<pre><code>fn foo2(t: &amp;for&lt;'a&gt; Spinner&lt;&amp;'a i32&gt;)\n</code></pre>\n\n<p>and</p>\n\n<pre><code>fn foo4&lt;S: for&lt;'a&gt; Spinner&lt;&amp;'a i32&gt;&gt;(t: &amp;S)\n</code></pre>\n\n<p>As it's hopefully clear from the explanation above, this works because we the specific impl of <code>Spinner</code> isn't fixed anymore! Instead, we again have infinitely many impls to choose from (one for each <code>'a</code>). Thus we can choose the impl where <code>'a == 'x</code>.</p>\n"}], "owner": {"reputation": 3480, "user_id": 2686821, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/5dd46afe4f5a75f2667569582b20ac9b?s=128&d=identicon&r=PG&f=1", "display_name": "soupybionics", "link": "https://stackoverflow.com/users/2686821/soupybionics"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 486, "favorite_count": 6, "accepted_answer_id": 50947788, "answer_count": 1, "score": 15, "last_activity_date": 1529500800, "creation_date": 1529492022, "last_edit_date": 1529500800, "question_id": 50946525, "link": "https://stackoverflow.com/questions/50946525/why-do-the-lifetimes-on-a-trait-object-passed-as-an-argument-require-higher-rank", "title": "Why do the lifetimes on a trait object passed as an argument require Higher Ranked Trait Bounds but a struct doesn&#39;t?", "body": "<p>How are lifetimes handled when there is a trait object passed to a function?</p>\n\n<pre><code>struct Planet&lt;T&gt; {\n    i: T,\n}\n\ntrait Spinner&lt;T&gt; {\n    fn spin(&amp;self, value: T);\n}\n\nimpl&lt;T&gt; Spinner&lt;T&gt; for Planet&lt;T&gt; {\n    fn spin(&amp;self, value: T) {}\n}\n\n// foo2 fails: Due to lifetime of local variable being less than 'a\nfn foo2&lt;'a&gt;(t: &amp;'a Spinner&lt;&amp;'a i32&gt;) {\n    let x: i32 = 10;\n    t.spin(&amp;x);\n}\n\n// foo1 passes: But here also the lifetime of local variable is less than 'a?\nfn foo1&lt;'a&gt;(t: &amp;'a Planet&lt;&amp;'a i32&gt;) {\n    let x: i32 = 10;\n    t.spin(&amp;x);\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=933db03230161c21356523d67e8ec313&amp;version=stable&amp;mode=debug\" rel=\"noreferrer\">Playground</a>)</p>\n\n<p>This code results in this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `x` does not live long enough\n  --&gt; src/main.rs:16:17\n   |\n16 |         t.spin(&amp;x);\n   |                 ^ borrowed value does not live long enough\n17 |     }\n   |     - borrowed value only lives until here\n   |\nnote: borrowed value must be valid for the lifetime 'a as defined on the function body at 14:5...\n  --&gt; src/main.rs:14:5\n   |\n14 |     fn foo2&lt;'a&gt;(t: &amp;'a Spinner&lt;&amp;'a i32&gt;) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>The function signature of <code>foo1</code> is nearly same as <code>foo2</code>. One receiving the reference to <em>struct</em> and the other a <em>trait object</em>.</p>\n\n<p>I read this is where Higher Ranked Trait Bounds comes in. Modifying <em>foo2</em> as <code>foo2(t: &amp;for&lt;'a&gt; Spinner&lt;&amp;'a i32&gt;)</code> compiles the code, but I don't understand why.</p>\n\n<p>Why won't <code>'a</code> shrink for <code>x</code>?</p>\n\n<p>Citing <a href=\"https://doc.rust-lang.org/nomicon/hrtb.html\" rel=\"noreferrer\">the Nomicon</a>: </p>\n\n<blockquote>\n  <p>How on earth are we supposed to express the lifetimes on <code>F</code>'s trait bound? We need to provide some lifetime there, but the lifetime we care about can't be named until we enter the body of call! Also, that isn't some fixed lifetime; <code>call</code> works with any lifetime <code>&amp;self</code> happens to have at that point.</p>\n</blockquote>\n\n<p>Can this please be elaborated?</p>\n"}, {"tags": ["rust", "rust-diesel"], "comments": [{"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 5, "creation_date": 1529492157, "post_id": 50946308, "comment_id": 88890340, "body": "The prelude is meant to be imported by wildcard, but this does not mean you have to use it. However, keep in mind that it often includes traits that are not obviously used but needed to invoke methods on types. (Calling a method whose trait is not in scope causes a compiler error.)"}], "owner": {"reputation": 5397, "user_id": 1178806, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f8f0734a3d7563e5504433dbef483472?s=128&d=identicon&r=PG", "display_name": "Vlad Frolov", "link": "https://stackoverflow.com/users/1178806/vlad-frolov"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 394, "favorite_count": 0, "closed_date": 1529529308, "answer_count": 0, "score": 2, "last_activity_date": 1529491355, "creation_date": 1529491355, "question_id": 50946308, "link": "https://stackoverflow.com/questions/50946308/what-is-the-best-practice-for-wildcard-prelude-imports-in-rust", "closed_reason": "Opinion-based", "title": "What is the best practice for wildcard/prelude imports in Rust?", "body": "<p>In Rust, we can import everything from the given module using <code>use module_name::*;</code> syntax. While I can see that this results in faster development[1], I like the mantra of Python: \"explicit is better than implicit\". And while I can certainly see the benefit of implicit <code>use std::prelude::*;</code>, I feel uncomfortable with <code>use diesel::prelude::*;</code> (well, it is an explicit import, but should it really be a wildcard?).</p>\n\n<p>Is it fine if I go with explicit <code>use diesel::{RunQueryDsl, ExpressionMethods, QueryDsl};</code> or should I give up and use <code>use diesel::prelude::*;</code>?</p>\n\n<p>[1] you don't need to duplicate all the names you want to import and neither you need to prefix all the items from the module with <code>module_name::</code></p>\n"}, {"tags": ["rust", "webassembly"], "comments": [{"owner": {"reputation": 3191, "user_id": 802650, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/83794b0ea1170a337e4782048cdaa928?s=128&d=identicon&r=PG", "display_name": "liuyanghejerry", "link": "https://stackoverflow.com/users/802650/liuyanghejerry"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1529476076, "post_id": 50941427, "comment_id": 88880757, "body": "@Boiethios Yeah, I&#39;m aware of that. The last return statement was appended temporarily but forgot to strip return. Thanks."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1529499501, "post_id": 50941427, "comment_id": 88895130, "body": "<i>which bloats the final binary</i> \u2014 this sounds like a toolchain problem. Are you running wasm-gc?"}, {"owner": {"reputation": 3191, "user_id": 802650, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/83794b0ea1170a337e4782048cdaa928?s=128&d=identicon&r=PG", "display_name": "liuyanghejerry", "link": "https://stackoverflow.com/users/802650/liuyanghejerry"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1529579545, "post_id": 50941427, "comment_id": 88930435, "body": "@Shepmaster wasm-gc is helpful. It will shrink the binary down to about 248KB. But without std crate, the binary size can be shrink to 18KB, which contains ~17KB data and only ~1KB code."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1529617950, "post_id": 50941427, "comment_id": 88951755, "body": "The thing is, the ultimate amount of code that you use from <code>libcore</code> is the <i>exact same</i> that you use from <code>libstd</code>. <code>std::slice::from_raw_parts_mut</code> <b>is</b> <code>core::slice::from_raw_parts_mut</code>. Switching from one to the other <i>shouldn&#39;t</i> change anything. It really sounds like some piece of unused code or data isn&#39;t being properly removed."}, {"owner": {"reputation": 3191, "user_id": 802650, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/83794b0ea1170a337e4782048cdaa928?s=128&d=identicon&r=PG", "display_name": "liuyanghejerry", "link": "https://stackoverflow.com/users/802650/liuyanghejerry"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1530017533, "post_id": 50941427, "comment_id": 89077713, "body": "@Shepmaster In fact, in order to get rid of <code>std</code>, I also add &quot;#![no_std]&quot; and its counterparts. Those code made a lot difference on the final binary."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1530019195, "post_id": 50941427, "comment_id": 89078862, "body": "I&#39;m not sure you are following what I am saying. The code that your program is using is identical when using it through libstd and libcore. The fact that switching to libcore produces a different sized result <b>is a bug</b> because you aren&#39;t using any of the unique functionality of libstd. I just don&#39;t know where the bug is, it could be in Rust or it could be in the linker, or other toolchain components."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1530019200, "post_id": 50941427, "comment_id": 89078868, "body": "Unless you have forgotten to build your WASM code as a <code>cdylib</code>, in which case there&#39;s probably a lot of junk for the unused <code>main</code> function lying around."}, {"owner": {"reputation": 3191, "user_id": 802650, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/83794b0ea1170a337e4782048cdaa928?s=128&d=identicon&r=PG", "display_name": "liuyanghejerry", "link": "https://stackoverflow.com/users/802650/liuyanghejerry"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1530020731, "post_id": 50941427, "comment_id": 89079954, "body": "@Shepmaster I do understand what you mean. But I have no clue why this is happening. I made a simplest example for this issue, in case you may want to reproduce it: <a href=\"https://github.com/liuyanghejerry/rust-wasm-size-bug\" rel=\"nofollow noreferrer\">github.com/liuyanghejerry/rust-wasm-size-bug</a>"}], "answers": [{"tags": [], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "is_accepted": true, "score": 5, "last_activity_date": 1529499428, "last_edit_date": 1529499428, "creation_date": 1529475601, "answer_id": 50941481, "question_id": 50941427, "link": "https://stackoverflow.com/questions/50941427/casting-mut-u8-to-u8-without-std/50941481#50941481", "title": "casting *mut u8 to &amp;[u8] without std", "body": "<p>You cannot cast a raw pointer to a slice because in Rust, a slice is not a mere pointer, it is a pointer <strong>and</strong> a size (otherwise it could not be safe).</p>\n\n<p>If you do not want to use <code>std</code>, you can use the <a href=\"https://doc.rust-lang.org/core/slice/fn.from_raw_parts.html\" rel=\"nofollow noreferrer\"><code>core</code> crate</a>:</p>\n\n<pre><code>extern crate core;\n\n#[no_mangle]\npub extern \"C\" fn check(ptr: *mut u8, length: u32) -&gt; u32 {\n    unsafe {\n        let buf: &amp;mut [u8] = core::slice::from_raw_parts_mut(ptr, length as usize);\n    }\n    // do some operations on buf\n    0\n}\n</code></pre>\n\n<p>The <a href=\"https://doc.rust-lang.org/core/\" rel=\"nofollow noreferrer\"><code>core</code> crate</a> is the part of the <code>std</code> crate suitable for embedded, <em>i.e.</em> without all the stuff that needs some allocation.</p>\n"}, {"comments": [{"owner": {"reputation": 3191, "user_id": 802650, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/83794b0ea1170a337e4782048cdaa928?s=128&d=identicon&r=PG", "display_name": "liuyanghejerry", "link": "https://stackoverflow.com/users/802650/liuyanghejerry"}, "edited": false, "score": 0, "creation_date": 1529481005, "post_id": 50942268, "comment_id": 88883374, "body": "This is very interesting. Is there any document or origin of this approach that I can track later?"}, {"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "reply_to_user": {"reputation": 3191, "user_id": 802650, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/83794b0ea1170a337e4782048cdaa928?s=128&d=identicon&r=PG", "display_name": "liuyanghejerry", "link": "https://stackoverflow.com/users/802650/liuyanghejerry"}, "edited": false, "score": 1, "creation_date": 1529481789, "post_id": 50942268, "comment_id": 88883857, "body": "@liuyanghejerry The memory layout of slices is loosely described in <a href=\"https://doc.rust-lang.org/book/second-edition/ch04-03-slices.html#string-slices\" rel=\"nofollow noreferrer\">the book</a> (figure 4-6). Knowing that, the rest is just pointer mangling to reinterpret the meaning of stuff in memory."}], "tags": [], "owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "is_accepted": false, "score": 5, "last_activity_date": 1529481986, "last_edit_date": 1529481986, "creation_date": 1529478536, "answer_id": 50942268, "question_id": 50941427, "link": "https://stackoverflow.com/questions/50941427/casting-mut-u8-to-u8-without-std/50942268#50942268", "title": "casting *mut u8 to &amp;[u8] without std", "body": "<p>It is possible to manually construct something similar to a slice, which is a <em>fat pointer</em> that consists of a thin pointer and a length. Then cast a pointer-to-this-construct to a pointer-to-slice.</p>\n\n<p>This approach is not only unsafe, it also relies on Rust internals (memory layout of a slice) that are not guaranteed to remain stable between compiler version, or even systems I suppose. @Boiethios' answer is the way to go if you want to be sure that your code works correctly in the future. However, for educational purposes, the code below may still be interesting:</p>\n\n<pre><code>unsafe fn make_slice&lt;'a&gt;(ptr: *const u8, len: usize) -&gt; &amp;'a [u8] {\n    // place pointer address and length in contiguous memory\n    let x: [usize; 2] = [ptr as usize, len];\n\n    // cast pointer to array as pointer to slice\n    let slice_ptr = &amp;x as * const _ as *const &amp;[u8];\n\n    // dereference pointer to slice, so we get a slice\n    *slice_ptr\n}\n\nfn main() {\n    let src: Vec&lt;u8&gt; = vec![1, 2, 3, 4, 5, 6];\n    let raw_ptr = &amp;src[1] as *const u8;\n\n    unsafe {\n        println!(\"{:?}\", make_slice(raw_ptr, 3));  // [2, 3, 4]\n    }\n}\n</code></pre>\n\n<p>(tested on <a href=\"https://play.rust-lang.org/?gist=95c33d5eaa0d121005ff2602a3b42b40&amp;version=undefined&amp;mode=undefined\" rel=\"nofollow noreferrer\">playground</a> with Rust Stable 1.26.2)</p>\n"}], "owner": {"reputation": 3191, "user_id": 802650, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/83794b0ea1170a337e4782048cdaa928?s=128&d=identicon&r=PG", "display_name": "liuyanghejerry", "link": "https://stackoverflow.com/users/802650/liuyanghejerry"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1930, "favorite_count": 1, "accepted_answer_id": 50941481, "answer_count": 2, "score": 4, "last_activity_date": 1529499428, "creation_date": 1529475313, "last_edit_date": 1529499403, "question_id": 50941427, "link": "https://stackoverflow.com/questions/50941427/casting-mut-u8-to-u8-without-std", "title": "casting *mut u8 to &amp;[u8] without std", "body": "<p>I'm writing Rust code for WebAssembly to handle strings from JavaScript land.</p>\n\n<p>Since WebAssembly has no real string type, I'm trying to pass a pointer to WebAssembly memory object which points to UTF-8 encoded string.  </p>\n\n<pre><code>#[no_mangle]\npub extern \"C\" fn check(ptr: *mut u8, length: u32) -&gt; u32 {\n    unsafe {\n        let buf: &amp;[u8] = std::slice::from_raw_parts(ptr, length as usize);\n        // do some operations on buf\n        0\n    }\n}\n</code></pre>\n\n<p>It works fine, expect that I have to depend on the <code>std</code> crate, which bloats the final binary to about 600KB.</p>\n\n<p>Is there any way to get rid of <code>std::slice::from_raw_parts</code> but still be able to cast a raw pointer to a slice?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1529441792, "post_id": 50936699, "comment_id": 88872106, "body": "I believe your question is answered by the answers of <a href=\"https://stackoverflow.com/q/41882151/155423\">How do I imply the type of the value when there are no type parameters or ascriptions?</a>. If you disagree, please <a href=\"https://stackoverflow.com/posts/50936699/edit\">edit</a> your question to explain the differences. Otherwise, we can mark this question as already answered."}, {"owner": {"reputation": 2165, "user_id": 3648957, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/hgMNo.jpg?s=128&g=1", "display_name": "Sasha Kondrashov", "link": "https://stackoverflow.com/users/3648957/sasha-kondrashov"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1529449394, "post_id": 50936699, "comment_id": 88874382, "body": "Edited to add surrounding code and cut the struct out. I don&#39;t really see how the question you linked is related to mine - at the very least, my skill level doesn&#39;t allow me to translate that answer into one for me. My question involves an interaction between psql and format!, and I can&#39;t tell if the underlying issue is the same as the one you&#39;d run into when unable to pass parameters other than &amp;self inside an impl{} block, but there are enough differences that I was unable to find that question. I can tell they&#39;re both about types, but that&#39;s about it."}, {"owner": {"reputation": 2165, "user_id": 3648957, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/hgMNo.jpg?s=128&g=1", "display_name": "Sasha Kondrashov", "link": "https://stackoverflow.com/users/3648957/sasha-kondrashov"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1529450371, "post_id": 50936699, "comment_id": 88874595, "body": "The information I got out of your other comment is <code>row.get::&lt;String&gt;(0)</code>, which fails since 0 is not a String. <code>row.get::&lt;_, String&gt;(0)</code> works though, which is what I was looking for. Otherwise, is there any reason you think the one-liner style is better? Is it to avoid making &#39;images&#39; mutable?"}, {"owner": {"reputation": 2165, "user_id": 3648957, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/hgMNo.jpg?s=128&g=1", "display_name": "Sasha Kondrashov", "link": "https://stackoverflow.com/users/3648957/sasha-kondrashov"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1529461650, "post_id": 50936699, "comment_id": 88876795, "body": "One strange thing about the turbofish that I don&#39;t see in your answer is that the first n arguments are the parameters into the function, while the last one specifies the inferred return type. In my case, I don&#39;t think it&#39;s clear from that answer that I would have to use &lt;_, String&gt; to match the types of 0 and row.get()."}, {"owner": {"reputation": 2165, "user_id": 3648957, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/hgMNo.jpg?s=128&g=1", "display_name": "Sasha Kondrashov", "link": "https://stackoverflow.com/users/3648957/sasha-kondrashov"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1529462211, "post_id": 50936699, "comment_id": 88876904, "body": "I see, I wasn&#39;t familiar with the template syntax but that makes sense now."}, {"owner": {"reputation": 13169, "user_id": 967945, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/47244a17f72cee237f57f4c4b9613ea1?s=128&d=identicon&r=PG", "display_name": "Dan Hulme", "link": "https://stackoverflow.com/users/967945/dan-hulme"}, "edited": false, "score": 1, "creation_date": 1529515323, "post_id": 50936699, "comment_id": 88905343, "body": "I hope you don&#39;t mind. I&#39;ve written up what you worked out here as an answer. I agree with Timofey that unless you already understand what&#39;s going on, it&#39;s not obvious that the answer to the linked question also answers this question, so I&#39;ve tried to explain the connection."}, {"owner": {"reputation": 2165, "user_id": 3648957, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/hgMNo.jpg?s=128&g=1", "display_name": "Sasha Kondrashov", "link": "https://stackoverflow.com/users/3648957/sasha-kondrashov"}, "edited": false, "score": 0, "creation_date": 1529611677, "post_id": 50936699, "comment_id": 88949386, "body": "I realized that my question doesn&#39;t allude to the fact that I had no idea what the error even means, which is a big reason why I didn&#39;t think the linked answer was a duplicate. I&#39;ve added to the question to make it more findable and clearer what the confusion is. I&#39;m relatively new to S/O so if I shouldn&#39;t be making edits after I&#39;ve accepted an answer, feel free to revert. Thank you both for your help!"}], "answers": [{"tags": [], "owner": {"reputation": 13169, "user_id": 967945, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/47244a17f72cee237f57f4c4b9613ea1?s=128&d=identicon&r=PG", "display_name": "Dan Hulme", "link": "https://stackoverflow.com/users/967945/dan-hulme"}, "is_accepted": true, "score": 2, "last_activity_date": 1529515403, "last_edit_date": 1529515403, "creation_date": 1529515271, "answer_id": 50953807, "question_id": 50936699, "link": "https://stackoverflow.com/questions/50936699/type-annotations-required-for-format-when-parsing-postgres-results/50953807#50953807", "title": "Type annotations required for format! when parsing postgres results", "body": "<p>Let's look at the signature of the function you're calling:</p>\n\n<pre><code>fn get&lt;I, T&gt;(&amp;self, idx: I) -&gt; T \nwhere\n    I: RowIndex + Debug,\n    T: FromSql,\n</code></pre>\n\n<p>That is, this function actually has two type parameters, <code>I</code> and <code>T</code>. It uses <code>I</code> as the type to index with. The argument you pass has this type. <code>T</code> is the return type. The constraints (the <code>where</code> clause) don't really matter here, but they specify that the argument type <code>I</code> has to be something postgres can use as a row index, and the return type <code>T</code> has to be something postgres can create from an SQL result.</p>\n\n<p>Usually, Rust can infer the type parameters of functions. Argument types are usually easier to infer, because there's a value of the desired type right there. Even C++ can infer argument types! Return types are harder to infer because they depend on the context the function is called from, but Rust can often infer those too.</p>\n\n<p>Let's look at your function call and the context it's used:</p>\n\n<pre><code>format!(\"{}.jpg\", row.get(0))\n</code></pre>\n\n<p>Here's it's obvious that the argument is an integer, because it's a literal, and it's right there. There are rules for working out what integer types it could be, but in this case, it has to be <code>usize</code> because that's the only one the <code>RowIndex</code> trait is implemented for. </p>\n\n<p>But what return type are you expecting? <code>format!</code> can take almost any type, so the compiler has no way to know what <code>get</code> needs to return. All it knows is that <code>T</code> has to have the <code>FromSql</code> trait. This is what the error message tells you:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0283]: type annotations required: cannot resolve `_: postgres::types::FromSql`\n</code></pre>\n\n<p>Luckily, Rust has a syntax for explicitly passing function parameters to functions, so you don't have to rely on its type inference. Shepmaster wrote a good explanation of it in <a href=\"https://stackoverflow.com/a/41882374/967945\">this answer</a> to a similar question. Jumping straight to the answer, you can write <code>row.get::&lt;_, String&gt;(0)</code> to only specify the second type parameter, and let inference work on the first type parameter.</p>\n\n<p>You specifically ask for a more idiomatic way to specify the type, and I think what you already have is more idiomatic. With the explicit type parameter, a reader still needs to understand the signature of <code>get</code> to know that <code>String</code> will be the return type. It's not always the case that the second type parameter will be the return type, and it's easy to get confused and specify them in the wrong order. By naming and type-annotating the result, you make it obvious what value the type annotation refers to.</p>\n\n<pre><code>let filename: String = row.get(0);\nfilenames.push(format!(\"{}.jpg\", filename));\n</code></pre>\n\n<p>If you do want to write your code in the more functional style that Shepmaster suggested, you can still use this style:</p>\n\n<pre><code>let filenames = filename_results.map(|row| { let f: String = row.get(0); format!(\"{}.jpg\", f) }).collect();\n</code></pre>\n\n<p>and break the \"one-liner\" across lines if that suits your taste.</p>\n"}], "owner": {"reputation": 2165, "user_id": 3648957, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/hgMNo.jpg?s=128&g=1", "display_name": "Sasha Kondrashov", "link": "https://stackoverflow.com/users/3648957/sasha-kondrashov"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 347, "favorite_count": 0, "accepted_answer_id": 50953807, "answer_count": 1, "score": 1, "last_activity_date": 1529611642, "creation_date": 1529441224, "last_edit_date": 1529611642, "question_id": 50936699, "link": "https://stackoverflow.com/questions/50936699/type-annotations-required-for-format-when-parsing-postgres-results", "title": "Type annotations required for format! when parsing postgres results", "body": "<p>I have some code that's supposed to get image filenames from a database and add them to a vector.</p>\n\n<pre><code>extern crate postgres;\n\nuse postgres::{Connection, TlsMode};\n\nfn main() {\n    let conn = Connection::connect(\n        \"postgres://postgres:password@localhost:5432/test\",\n        TlsMode::None,\n    ).unwrap();\n    let mut filenames = Vec::new();\n\n    if let Ok(filename_results) = conn.query(\"SELECT filename FROM images\", &amp;[]) {\n        for row in &amp;filename_results {\n            filenames.push(format!(\"{}.jpg\", row.get(0)));\n        }\n    }\n\n    println!(\"{:?}\", filenames);\n}\n</code></pre>\n\n<p>This fails with:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0283]: type annotations required: cannot resolve `_: postgres::types::FromSql`\n  --&gt; src/main.rs:14:54\n   |\n14 |                 filenames.push(format!(\"{}.jpg\", row.get(0)));\n   |                                                      ^^^\n</code></pre>\n\n<p>I don't understand why Rust can't figure out the type in this context, though I've figured out a way to make it work. I'm wondering what the simplest/idiomatic way to tell <code>format!()</code> what types it should be expecting are, and why row.get(0) doesn't need a type annotation unless I slap a format!() around it. This is my best attempt at a solution:</p>\n\n<pre><code>for row in &amp;filename_results {\n    let filename: String = row.get(0);\n    filenames.push(format!(\"{}.jpg\", filename));\n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 465, "user_id": 9701536, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/37c21191cfda4aef7177cc121c342374?s=128&d=identicon&r=PG&f=1", "display_name": "yewang", "link": "https://stackoverflow.com/users/9701536/yewang"}, "edited": false, "score": 0, "creation_date": 1529441170, "post_id": 50936680, "comment_id": 88871882, "body": "Is it possible to define the function so it works for any length? (without going into Vec) Some kind of template or generic?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1529458212, "last_edit_date": 1529458212, "creation_date": 1529441109, "answer_id": 50936680, "question_id": 50936610, "link": "https://stackoverflow.com/questions/50936610/what-is-the-type-for-an-array-not-vec-of-numbers/50936680#50936680", "title": "What is the type for an array (not Vec) of numbers?", "body": "<p>The type of an array is <code>[ElementType; Length]</code></p>\n\n<ul>\n<li><code>[i32; 10]</code></li>\n<li><code>[char; 16]</code></li>\n<li><code>[u8; 3]</code></li>\n<li><code>[String; 5]</code></li>\n</ul>\n\n<p>Surprisingly, this isn't directly called out in <a href=\"https://doc.rust-lang.org/book/second-edition/\" rel=\"nofollow noreferrer\"><em>The Rust Programming Language</em></a>, except in the <a href=\"https://doc.rust-lang.org/book/second-edition/appendix-02-operators.html#square-brackets\" rel=\"nofollow noreferrer\">operators and symbols appendix</a>. For that to be useful, you'd have to already know the syntax you needed! </p>\n\n<p>However, the compiler does guide you towards the correct solution. Take the time to <em>fully</em> read the Rust compiler's error messages. They are usually very good and most have had a lot of effort put into them. Check out the note from your error; it tells you what type you have:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>  = note: expected type `[f32]`\n             found type `[{float}; 3]`\n</code></pre>\n\n<blockquote>\n  <p><code>found type `[{float}; 3]`</code></p>\n</blockquote>\n\n<p>You can also <a href=\"https://stackoverflow.com/q/21747136/155423\">print out the type of a variable</a>:</p>\n\n<pre><code>let x: () = [0.0, 1.0, 2.0];\n</code></pre>\n\n<p>The fix for your specific function:</p>\n\n<pre><code>fn sum(a: [f32; 3]) -&gt; f32 {\n    3.0\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/41996784/155423\">What is the {integer} or {float} in a compiler error message?</a></li>\n<li><a href=\"https://stackoverflow.com/q/27552159/155423\">How do I create a type alias for an array of char with a fixed size?</a></li>\n<li><a href=\"https://stackoverflow.com/q/44864442/155423\">Passing array to function: array must have &#39;Sized&#39; type</a></li>\n<li><a href=\"https://stackoverflow.com/q/38941025/155423\">How to define a function with a generic fixed-length array?</a></li>\n<li><a href=\"https://stackoverflow.com/q/21747136/155423\">How do I print the type of a variable in Rust?</a></li>\n</ul>\n"}, {"tags": [], "owner": {"reputation": 573, "user_id": 9946772, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/19b5785ce8af233b264c6f7fb66977e5?s=128&d=identicon&r=PG&f=1", "display_name": "kangalioo", "link": "https://stackoverflow.com/users/9946772/kangalioo"}, "is_accepted": false, "score": 0, "last_activity_date": 1529503850, "last_edit_date": 1529503850, "creation_date": 1529501055, "answer_id": 50949338, "question_id": 50936610, "link": "https://stackoverflow.com/questions/50936610/what-is-the-type-for-an-array-not-vec-of-numbers/50949338#50949338", "title": "What is the type for an array (not Vec) of numbers?", "body": "<p>I am adding to Shepmaster's answer.</p>\n\n<p>What you did, <code>[f32]</code>, is actually valid syntax. It means a slice (a list of elements) where the size is unknown at compile time. The problem with it is that you cannot pass something into a function if its size is not known at compile time.<br/>\nThe syntax suggested by Shepmaster is for an array with fixed size, so it works.</p>\n\n<p>If you cannot avoid passing a slice, you can use a reference. A reference always has a fixed size, but can be used to access unsized data (I advise reading about it in the Rust documentation):</p>\n\n<pre><code>// The ampersand means that the function takes a reference to a [f32]\nfn sum(a: &amp;[f32]) -&gt; f32 {\n    return 3.0;\n}\n\nfn main() {\n    let x = [0.0, 1.0, 2.0];\n    print!(\"{}\\n\", sum(&amp;x)); // Here, the ampersand makes a reference out of x\n}\n</code></pre>\n"}], "owner": {"reputation": 465, "user_id": 9701536, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/37c21191cfda4aef7177cc121c342374?s=128&d=identicon&r=PG&f=1", "display_name": "yewang", "link": "https://stackoverflow.com/users/9701536/yewang"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 322, "favorite_count": 0, "answer_count": 2, "score": 0, "last_activity_date": 1529503850, "creation_date": 1529440813, "last_edit_date": 1529457923, "question_id": 50936610, "link": "https://stackoverflow.com/questions/50936610/what-is-the-type-for-an-array-not-vec-of-numbers", "title": "What is the type for an array (not Vec) of numbers?", "body": "<p>I'm having trouble figuring out the proper type for an array (not a <code>Vec</code>). The following code doesn't compile:</p>\n\n<pre><code>fn sum(a: [f32]) -&gt; f32 {\n    return 3.0;\n}\n\nfn main() {\n    let x = [0.0, 1.0, 2.0];\n    print!(\"{}\\n\", sum(x));\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `[f32]: std::marker::Sized` is not satisfied\n --&gt; src/main.rs:1:8\n  |\n1 | fn sum(a: [f32]) -&gt; f32 {\n  |        ^ `[f32]` does not have a constant size known at compile-time\n  |\n  = help: the trait `std::marker::Sized` is not implemented for `[f32]`\n  = note: all local variables must have a statically known size\n\nerror[E0308]: mismatched types\n --&gt; src/main.rs:7:24\n  |\n7 |     print!(\"{}\\n\", sum(x));\n  |                        ^ expected slice, found array of 3 elements\n  |\n  = note: expected type `[f32]`\n             found type `[{float}; 3]`\n</code></pre>\n\n<p>What's the appropriate type for <code>a</code> in <code>sum</code>?</p>\n"}, {"tags": ["reference", "rust", "trait-objects"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1529434506, "post_id": 50935130, "comment_id": 88868999, "body": "Welcome to Stack Overflow! I believe your question is answered by the answers of <a href=\"https://stackoverflow.com/q/45159414/155423\">https://stackoverflow.com/q/45159414/155423</a>. TL;DR: <code>Box::new(&amp;closure as &amp;Fn())</code>. If you disagree, please <a href=\"https://stackoverflow.com/posts/50935130/edit\">edit</a> your question to explain the differences. Otherwise, we can mark this question as already answered."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1529436063, "post_id": 50935130, "comment_id": 88869662, "body": "<b><code>&amp;closure as &amp;Fn()</code></b>, not the entire type."}, {"owner": {"reputation": 573, "user_id": 9946772, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/19b5785ce8af233b264c6f7fb66977e5?s=128&d=identicon&r=PG&f=1", "display_name": "kangalioo", "link": "https://stackoverflow.com/users/9946772/kangalioo"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1529436266, "post_id": 50935130, "comment_id": 88869749, "body": "@Shepmaster. Okay, it works. But now I am passing just the &amp;Fn() although execute() needs all the wrappers around it as well. Or did I misunderstand something?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1529436396, "post_id": 50935130, "comment_id": 88869810, "body": "<code>let wrapped_closure = Arc::new(RwLock::new(&amp;closure as &amp;Fn()));</code>"}, {"owner": {"reputation": 573, "user_id": 9946772, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/19b5785ce8af233b264c6f7fb66977e5?s=128&d=identicon&r=PG&f=1", "display_name": "kangalioo", "link": "https://stackoverflow.com/users/9946772/kangalioo"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1529436621, "post_id": 50935130, "comment_id": 88869906, "body": "@Shepmaster <i>facepalm</i> I think it works now. Thanks a lot for the patience"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1529461045, "post_id": 50935130, "comment_id": 88876691, "body": "I think the <code>&lt;F&gt;</code> was an incidental mistake, not part of the problem, so I removed it and edited the title to be more clear about the issue since I really don&#39;t think it&#39;s about <code>where</code> clauses at all. If you don&#39;t think my edits are true to the spirit of the original question, please feel free to edit it back."}], "answers": [{"tags": [], "owner": {"reputation": 573, "user_id": 9946772, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/19b5785ce8af233b264c6f7fb66977e5?s=128&d=identicon&r=PG&f=1", "display_name": "kangalioo", "link": "https://stackoverflow.com/users/9946772/kangalioo"}, "is_accepted": true, "score": 3, "last_activity_date": 1529437254, "creation_date": 1529437254, "answer_id": 50935809, "question_id": 50935130, "link": "https://stackoverflow.com/questions/50935130/is-it-possible-to-pass-an-arcrwlockfn-to-a-function-without-using-a-type/50935809#50935809", "title": "Is it possible to pass an Arc&lt;RwLock&lt;&amp;Fn()&gt;&gt; to a function without using a type parameter?", "body": "<p>The solution is by Shepmaster and taken from the comments.</p>\n\n<p>The trick is to cast the closure reference to a <code>&amp;Fn</code>, replacing <code>Arc::new(RwLock::new(&amp;closure))</code> with <code>Arc::new(RwLock::new(</code><strong><code>&amp;closure as &amp;Fn()</code></strong><code>))</code>.</p>\n"}], "owner": {"reputation": 573, "user_id": 9946772, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/19b5785ce8af233b264c6f7fb66977e5?s=128&d=identicon&r=PG&f=1", "display_name": "kangalioo", "link": "https://stackoverflow.com/users/9946772/kangalioo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 320, "favorite_count": 0, "closed_date": 1529499692, "accepted_answer_id": 50935809, "answer_count": 1, "score": 0, "last_activity_date": 1529460858, "creation_date": 1529434114, "last_edit_date": 1529460858, "question_id": 50935130, "link": "https://stackoverflow.com/questions/50935130/is-it-possible-to-pass-an-arcrwlockfn-to-a-function-without-using-a-type", "closed_reason": "Duplicate", "title": "Is it possible to pass an Arc&lt;RwLock&lt;&amp;Fn()&gt;&gt; to a function without using a type parameter?", "body": "<p>I have to pass a <code>Arc&lt;RwLock&lt;&amp;Fn()&gt;&gt;</code> to a function:</p>\n\n<pre><code>use std::sync::{Arc, RwLock};\n\nfn main() {\n    let closure = || println!(\"Hello World\");\n    let wrapped_closure = Arc::new(RwLock::new(&amp;closure));\n    execute(wrapped_closure);\n}\n\nfn execute(f: Arc&lt;RwLock&lt;&amp;Fn()&gt;&gt;) {\n    let rw_lock_read_guard = f.read().unwrap();\n    (rw_lock_read_guard)()\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=5261ddc7a8ec8efc064a4a6a5f5757e1\" rel=\"nofollow noreferrer\">Rust Playground</a></p>\n\n<p>Compilation fails with the error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n --&gt; src/main.rs:6:13\n  |\n6 |     execute(wrapped_closure);\n  |             ^^^^^^^^^^^^^^^ expected trait std::ops::Fn, found closure\n  |\n  = note: expected type `std::sync::Arc&lt;std::sync::RwLock&lt;&amp;std::ops::Fn()&gt;&gt;`\n             found type `std::sync::Arc&lt;std::sync::RwLock&lt;&amp;[closure@src/main.rs:4:19: 4:45]&gt;&gt;`\n</code></pre>\n\n<p>Isn't the closure an <code>Fn</code>?</p>\n\n<p>I have tried:</p>\n\n<ul>\n<li>Replacing the <code>Arc&lt;RwLock&gt;</code> with a reference (resulting in <code>&amp;&amp;Fn()</code>). This only works when you remove one ampersand in the function signature of <code>execute()</code>, but that doesn't really help me, because for reasons I don't want to explain here, I need those wrappers. <a href=\"https://play.rust-lang.org/?gist=a42a8fa01119b358668b37757d108e28\" rel=\"nofollow noreferrer\">Rust Playground</a></li>\n<li><p>Moving the <code>Fn()</code> in the <code>execute()</code> function signature into a where clause:</p>\n\n<pre><code>fn execute(f: Arc&lt;RwLock&lt;&amp;F&gt;&gt;) where F: Fn() { /* ... */ }\n</code></pre>\n\n<p>That also works, <strong>but</strong> I cannot use a where clause either (because I would need it in a struct, but in structs there are no where clauses).</p></li>\n<li>Combining the two previous ideas: Passing a <code>Arc&lt;RwLock&lt;&amp;&amp;Fn()&gt;&gt;</code> and removing one ampersand in the function signature. That would be what I need, but it also fails.</li>\n<li>Casting <code>wrapped_closure</code> into an <code>Arc&lt;RwLock&lt;&amp;Fn()&gt;&gt;</code> (this was the solution to a similar problem <a href=\"https://stackoverflow.com/questions/45159414/type-signature-of-a-rust-hashmap-of-a-function\">here</a>). This fails as it's a \"non-primitive cast\"</li>\n</ul>\n\n<p>Is it possible to pass an <code>Arc&lt;RwLock&lt;&amp;Fn()&gt;&gt;</code> in Rust without adding a type parameter and a where clause? If yes, how?</p>\n"}, {"tags": ["functional-programming", "rust"], "comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 4, "creation_date": 1529415912, "post_id": 50929898, "comment_id": 88858845, "body": "Note that you can write <code>NamedTuple { a, b }</code>, no need to repeat the name."}, {"owner": {"reputation": 26154, "user_id": 5436257, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/iGuaK.jpg?s=128&g=1", "display_name": "Joe Clay", "link": "https://stackoverflow.com/users/5436257/joe-clay"}, "edited": false, "score": 2, "creation_date": 1529416650, "post_id": 50929898, "comment_id": 88859377, "body": "Something like <a href=\"https://github.com/Hoverbear/getset\" rel=\"nofollow noreferrer\"><code>getset</code></a> or <a href=\"https://github.com/kvsari/derive-getters\" rel=\"nofollow noreferrer\"><code>derive-getters</code></a> might be of use here."}, {"owner": {"reputation": 23600, "user_id": 1695172, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/6319d7eafca7852cf04c88598ca31e75?s=128&d=identicon&r=PG", "display_name": "Netwave", "link": "https://stackoverflow.com/users/1695172/netwave"}, "edited": false, "score": 2, "creation_date": 1529417620, "post_id": 50929898, "comment_id": 88860023, "body": "how about making the attributes public and that is all?"}, {"owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "edited": false, "score": 3, "creation_date": 1529418687, "post_id": 50929898, "comment_id": 88860719, "body": "I don&#39;t see anything particularly <code>functional</code> about this code. This looks more like Java transliterated into Rust. Would you write this kind of code in OCaml or Haskell?"}], "answers": [{"comments": [{"owner": {"reputation": 207, "user_id": 7438093, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a1a28b69ef76dce1119a1ffe9f8c3bb4?s=128&d=identicon&r=PG&f=1", "display_name": "warlock", "link": "https://stackoverflow.com/users/7438093/warlock"}, "edited": false, "score": 0, "creation_date": 1529585776, "post_id": 50930642, "comment_id": 88934471, "body": "&gt; f you&#39;ve transferred ownership of a value type to someone else, who cares if they change it? &lt; Got it. And I&#39;d like to add, as I just discovered, if you want <i>logically-mutable</i> field you should use Cell/RefCell. All fields without Cell/RefCell are <i>logically-immutable</i>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 207, "user_id": 7438093, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a1a28b69ef76dce1119a1ffe9f8c3bb4?s=128&d=identicon&r=PG&f=1", "display_name": "warlock", "link": "https://stackoverflow.com/users/7438093/warlock"}, "edited": false, "score": 1, "creation_date": 1529585994, "post_id": 50930642, "comment_id": 88934617, "body": "@warlock I don&#39;t agree with that statement. Yes, <code>Cell</code> / <code>RefCell</code> / <code>Mutex</code> / <code>Atomic*</code> / etc. are all implementations of <i>interior mutability</i> and allow you to mutate something behind an immutable reference, but the opposite doesn&#39;t logically extend from this. People <b>do not</b> mark fields as <code>Cell</code> just to indicate that something is intended to be modified."}, {"owner": {"reputation": 207, "user_id": 7438093, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a1a28b69ef76dce1119a1ffe9f8c3bb4?s=128&d=identicon&r=PG&f=1", "display_name": "warlock", "link": "https://stackoverflow.com/users/7438093/warlock"}, "edited": false, "score": 0, "creation_date": 1529587296, "post_id": 50930642, "comment_id": 88935517, "body": "By &quot;logically-mutable&quot; I don&#39;t mean just &quot;intended to be modified&quot;. I mean, that in situation when in some GC-based language (e. g. C#)  you&#39;d write &quot;readonly&quot; (i. e. immutable) field, in Rust you should use a simple field, and when in C# you&#39;d write mutable field, in Rust you should use (Ref)Cell. It&#39;s just two different kinds of mutability, and the first kind <i>in C#</i> is presented as &quot;immutability&quot;."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 207, "user_id": 7438093, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a1a28b69ef76dce1119a1ffe9f8c3bb4?s=128&d=identicon&r=PG&f=1", "display_name": "warlock", "link": "https://stackoverflow.com/users/7438093/warlock"}, "edited": false, "score": 1, "creation_date": 1529587498, "post_id": 50930642, "comment_id": 88935669, "body": "@warlock I understand your analogy, but I&#39;m saying it&#39;s not correct for Rust. <i>when in C# you&#39;d write a readonly field, in Rust you should use <b>a plain field</b>. when in C# you&#39;d write mutable field, in Rust you should use <b>a plain field</i></b>. Mutability is not primarily a property of the type but a property of the binding."}, {"owner": {"reputation": 207, "user_id": 7438093, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a1a28b69ef76dce1119a1ffe9f8c3bb4?s=128&d=identicon&r=PG&f=1", "display_name": "warlock", "link": "https://stackoverflow.com/users/7438093/warlock"}, "edited": false, "score": 0, "creation_date": 1529588463, "post_id": 50930642, "comment_id": 88936334, "body": "Lets invert the statement: when in Rust you use plain field, in C# you should use readonly field. I think, you disagree with the original statement, because you disagree with this reverted statement, because you think it does not work. But for people, using modern C#-coding style, it works: they need very serious reasons for introducing a mutable field. I claim, in Rust the same reasons lead to inevitable using of <code>Cell</code>. Of course, it is just hypothesis, but I don&#39;t see any counterexample for now."}, {"owner": {"reputation": 207, "user_id": 7438093, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a1a28b69ef76dce1119a1ffe9f8c3bb4?s=128&d=identicon&r=PG&f=1", "display_name": "warlock", "link": "https://stackoverflow.com/users/7438093/warlock"}, "edited": false, "score": 0, "creation_date": 1529588929, "post_id": 50930642, "comment_id": 88936638, "body": "See also <a href=\"https://www.reddit.com/r/rust/comments/33jv62/vecrcrefcellboxtrait_is_there_a_better_way/cqlm8q1\" rel=\"nofollow noreferrer\">reddit.com/r/rust/comments/33jv62/&hellip;</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 207, "user_id": 7438093, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a1a28b69ef76dce1119a1ffe9f8c3bb4?s=128&d=identicon&r=PG&f=1", "display_name": "warlock", "link": "https://stackoverflow.com/users/7438093/warlock"}, "edited": false, "score": 1, "creation_date": 1529590105, "post_id": 50930642, "comment_id": 88937515, "body": "@warlock I&#39;m not misunderstanding you, you are just wrong. I&#39;m sorry, but I don&#39;t know how to put that any more politely. Different languages have different solutions to problems and attempting to directly map the concept of a <code>readonly</code> field to Rust doesn&#39;t make sense. Instead, I encourage you to investigate <i>why</i> someone would use such a field in C# and then figure out the concrete equivalent in Rust. People do <i>not</i> scatter <code>Cell</code> and friends throughout their structs to indicate that a field will be updated."}, {"owner": {"reputation": 13169, "user_id": 967945, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/47244a17f72cee237f57f4c4b9613ea1?s=128&d=identicon&r=PG", "display_name": "Dan Hulme", "link": "https://stackoverflow.com/users/967945/dan-hulme"}, "edited": false, "score": 2, "creation_date": 1529590832, "post_id": 50930642, "comment_id": 88938105, "body": "<code>Cell</code> is more like the <code>mutable</code> keyword in C++, which is rarely used. You don&#39;t use it just so that the member can be changed: you use it so that the member can be changed <i>even if the object is <code>const</code></i>. In C++ you&#39;d only use it for things like memoization, so you can cache some values from a <code>const</code> member function, and the use cases in Rust are broadly similar. I don&#39;t think C# has an equivalent?"}, {"owner": {"reputation": 207, "user_id": 7438093, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a1a28b69ef76dce1119a1ffe9f8c3bb4?s=128&d=identicon&r=PG&f=1", "display_name": "warlock", "link": "https://stackoverflow.com/users/7438093/warlock"}, "edited": false, "score": 0, "creation_date": 1529616956, "post_id": 50930642, "comment_id": 88951427, "body": "&gt; People do not scatter <code>Cell</code> and friends throughout their structs &lt; Ok, they do not, but may be they <i>should</i>. In C++ you do not need <code>mutable</code> often, because a constant (smart or raw) pointer is not a pointer to constant."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 207, "user_id": 7438093, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a1a28b69ef76dce1119a1ffe9f8c3bb4?s=128&d=identicon&r=PG&f=1", "display_name": "warlock", "link": "https://stackoverflow.com/users/7438093/warlock"}, "edited": false, "score": 1, "creation_date": 1529617485, "post_id": 50930642, "comment_id": 88951589, "body": "@warlock no, they <i>shouldn&#39;t</i>. Interior mutability has to be checked at runtime, while &quot;regular&quot; mutability is checked at compile time. Just... try using Rust they way it&#39;s supposed to be used for a while instead of trying to guess. Hopefully that will be able to convey what I am evidently unable to communicate effectively."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "reply_to_user": {"reputation": 207, "user_id": 7438093, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a1a28b69ef76dce1119a1ffe9f8c3bb4?s=128&d=identicon&r=PG&f=1", "display_name": "warlock", "link": "https://stackoverflow.com/users/7438093/warlock"}, "edited": false, "score": 2, "creation_date": 1529632136, "post_id": 50930642, "comment_id": 88954974, "body": "@warlock I can see where you&#39;re coming from, but I think you&#39;re overlooking the <i>uniqueness</i> of <code>&amp;mut</code> references, in more than one sense. C#, MATLAB, Python, none of them have an equivalent to <code>&amp;mut</code>. C technically has <code>restrict</code>, but it&#39;s very limited in its capability and rare to find in an API (and it doesn&#39;t allow you to modify a <code>const</code> member). Whereas practically every Rust API makes <i>some</i> use of <code>&amp;mut</code>. Which makes sense -- <code>&amp;mut</code> references permit mutation, but they also disallow aliasing, which rules out 99% of the kinds of errors you would try to avoid with <code>readonly</code> in C#."}, {"owner": {"reputation": 207, "user_id": 7438093, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a1a28b69ef76dce1119a1ffe9f8c3bb4?s=128&d=identicon&r=PG&f=1", "display_name": "warlock", "link": "https://stackoverflow.com/users/7438093/warlock"}, "edited": false, "score": 0, "creation_date": 1529700811, "post_id": 50930642, "comment_id": 88985390, "body": "Ok, I got it. Instead of avoiding <code>mut self</code> using <code>RefCell</code>, I should manually add <code>mut</code> mark to functions, which performs <code>borrow_mut()</code> operation on struct internals."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 11, "last_activity_date": 1529419011, "last_edit_date": 1529419011, "creation_date": 1529417774, "answer_id": 50930642, "question_id": 50929898, "link": "https://stackoverflow.com/questions/50929898/how-to-create-a-read-only-struct-without-boilerplate-code/50930642#50930642", "title": "How to create a read-only struct without boilerplate code?", "body": "<p>When you have boilerplate, think <em>macros</em>:</p>\n\n<pre><code>macro_rules! ro {\n    (\n        pub struct $name:ident {\n            $($fname:ident : $ftype:ty),*\n        }\n    ) =&gt; {\n        pub struct $name {\n            $($fname : $ftype),*\n        }\n\n        impl $name {\n            fn new($($fname : $ftype),*) -&gt; $name {\n                $name { $($fname),* }\n            }\n\n            $(fn $fname(&amp;self) -&gt; $ftype {\n                self.$fname\n            })*\n        }\n    }\n}\n\nro!(pub struct NamedTuple {\n    a: i8,\n    b: char\n});\n\nfn main() {\n    let n = NamedTuple::new(42, 'c');\n    println!(\"{}\", n.a());\n    println!(\"{}\", n.b());\n}\n</code></pre>\n\n<p>This is a basic macro and could be extended to handle specifying visibility as well as attributes / documentation on the struct and the fields.</p>\n\n<p>I'd challenge that you have as much boilerplate as you think you do. For example, you only show <code>Copy</code> types. As soon as you add a <code>String</code> or a <code>Vec</code> to your structs, this will fall apart and you need to either return a reference or take <code>self</code>.</p>\n\n<hr>\n\n<p>Editorially, I don't think this is good or idiomatic Rust code. If you have a value type where people need to dig into it, <em>just make the fields public</em>:</p>\n\n<pre><code>pub struct NamedTuple {\n    pub a: i8,\n    pub b: char,\n}\n\nfn main() {\n    let n = NamedTuple { a: 42, b: 'c' };\n    println!(\"{}\", n.a);\n    println!(\"{}\", n.b);\n}\n</code></pre>\n\n<p>Existing Rust features prevent most of the problems that getter methods attempt to solve in the first place.</p>\n\n<p><strong>Variable binding-based mutability</strong></p>\n\n<pre><code>n.a = 43;\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0594]: cannot assign to field `n.a` of immutable binding\n</code></pre>\n\n<p><strong>The rules of references</strong></p>\n\n<pre><code>struct Something;\n\nimpl Something {\n    fn value(&amp;self) -&gt; &amp;NamedTuple { /* ... */ }\n}\n\nfn main() {\n    let s = Something;\n    let n = s.value();\n    n.a = 43;\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0594]: cannot assign to field `n.a` of immutable binding\n</code></pre>\n\n<p>If you've transferred ownership of a value type to someone else, <em>who cares</em> if they change it?</p>\n\n<p>Note that I'm making a distinction about <em>value types</em> as described by <a href=\"http://www.growing-object-oriented-software.com/toc.html\" rel=\"noreferrer\"><em>Growing Object-Oriented Software Guided by Tests</em></a>, which they distinguish from <em>objects</em>. Objects should not have exposed internals.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1529420761, "post_id": 50931350, "comment_id": 88862050, "body": "Additionally, I don&#39;t think either crate will return a <code>T</code>, they only return a <code>&amp;T</code>."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 5, "last_activity_date": 1529849838, "last_edit_date": 1529849838, "creation_date": 1529419941, "answer_id": 50931350, "question_id": 50929898, "link": "https://stackoverflow.com/questions/50929898/how-to-create-a-read-only-struct-without-boilerplate-code/50931350#50931350", "title": "How to create a read-only struct without boilerplate code?", "body": "<p>Rust doesn't offer a built-in way to generate getters. However, <strong>there are multiple Rust features that can be used to tackle boilerplate code</strong>! The two most important ones for your question:</p>\n\n<ul>\n<li><strong>Custom Derives</strong> via <code>#[derive(...)]</code> attribute</li>\n<li>Macros by example via <code>macro_rules!</code> (see <a href=\"https://stackoverflow.com/a/50930642/2408867\">@Shepmaster's answer</a> on how to use those to solve your problem)</li>\n</ul>\n\n<hr>\n\n<p>I think the best way to avoid boilerplate code like this is to use custom derives. This allows you to add a <code>#[derive(...)]</code> attribute to your type and generate these getters at compile time. </p>\n\n<p>There is already a crate that offers exactly this: <strong><a href=\"https://crates.io/crates/derive-getters\" rel=\"nofollow noreferrer\"><code>derive-getters</code></a></strong>. It works like this:</p>\n\n<pre><code>#[derive(Getters)]\npub struct NamedTuple {\n    a: i8,\n    b: char,\n}\n</code></pre>\n\n<p>There is also <a href=\"https://crates.io/crates/getset\" rel=\"nofollow noreferrer\"><code>getset</code></a>, but it has two problems: <code>getset</code> should have <code>derive</code> in its crate name, but more importantly, it encourages the \"getters &amp; setters for everything\" anti pattern by offering to also generate setters which don't perform any checks.</p>\n\n<hr>\n\n<p>Finally, you might want to consider rethinking your approach to programming in Rust. Honestly, from my experience, <strong>\"getter boilerplate\" is hardly a problem</strong>. Sure, sometimes you need to write getters, but not \"a large number\" of them. </p>\n\n<p>Mutability is also not unidiomatic in Rust. Rust is a multi paradigm language, supporting many styles of programming. Idiomatic Rust uses the most useful paradigm for each situation. Completely avoiding mutation might not be the best way to program in Rust. Furthermore, avoiding mutability is not only achieved by providing getters for your fields -- binding and reference mutability is far more important!</p>\n\n<p>So, use read-only access to fields where it's useful, but not everywhere.</p>\n"}], "owner": {"reputation": 207, "user_id": 7438093, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a1a28b69ef76dce1119a1ffe9f8c3bb4?s=128&d=identicon&r=PG&f=1", "display_name": "warlock", "link": "https://stackoverflow.com/users/7438093/warlock"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1032, "favorite_count": 1, "accepted_answer_id": 50930642, "answer_count": 2, "score": 6, "last_activity_date": 1529849838, "creation_date": 1529415521, "last_edit_date": 1529416109, "question_id": 50929898, "link": "https://stackoverflow.com/questions/50929898/how-to-create-a-read-only-struct-without-boilerplate-code", "title": "How to create a read-only struct without boilerplate code?", "body": "<p>Despite the fact that Rust has absorbed many good modern programming ideas, it looks like one very basic feature is not presented.</p>\n\n<p>The modern (pseudo-)functional code is based on a large number of classes of the following kind:</p>\n\n<pre><code>pub struct NamedTuple {\n    a: i8,\n    b: char,\n}\nimpl NamedTuple {\n    fn new(a: i8, b: char) -&gt; NamedTuple {\n        NamedTuple { a: a, b: b }\n    }\n    fn a(&amp;self) -&gt; i8 {\n        self.a\n    }\n    fn b(&amp;self) -&gt; char {\n        self.b\n    }\n}\n</code></pre>\n\n<p>As you can see, there is a lot of boilerplate code here. Is there really no way to describe such types compactly, without a boilerplate code?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 321, "user_id": 9853391, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/71a4ec22a1b64e539e0b092c4f3db76b?s=128&d=identicon&r=PG&f=1", "display_name": "Danny", "link": "https://stackoverflow.com/users/9853391/danny"}, "edited": false, "score": 0, "creation_date": 1529380758, "post_id": 50920114, "comment_id": 88840404, "body": "thank you for the formatting correcction!"}], "answers": [{"comments": [{"owner": {"reputation": 321, "user_id": 9853391, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/71a4ec22a1b64e539e0b092c4f3db76b?s=128&d=identicon&r=PG&f=1", "display_name": "Danny", "link": "https://stackoverflow.com/users/9853391/danny"}, "edited": false, "score": 0, "creation_date": 1529382062, "post_id": 50920500, "comment_id": 88840685, "body": "thanks! it&#39;s clearer now!"}], "tags": [], "owner": {"reputation": 25893, "user_id": 353820, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/32b29e1dc23c2c5abe0283ab7b9541d3?s=128&d=identicon&r=PG", "display_name": "Doug", "link": "https://stackoverflow.com/users/353820/doug"}, "is_accepted": true, "score": 4, "last_activity_date": 1541893045, "last_edit_date": 1541893045, "creation_date": 1529381184, "answer_id": 50920500, "question_id": 50920114, "link": "https://stackoverflow.com/questions/50920114/borrow-checker-cannot-move-out-of-borrowed-content/50920500#50920500", "title": "Borrow checker &quot;cannot move out of borrowed content&quot;", "body": "<p>This is indeed a non-obvious error message. Have a look at the method signatures for <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap\" rel=\"nofollow noreferrer\"><code>unwrap</code></a>: </p>\n\n<pre><code>pub fn unwrap(self) -&gt; T\n</code></pre>\n\n<p>and <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#method.take\" rel=\"nofollow noreferrer\"><code>take</code></a>:</p>\n\n<pre><code>pub fn take(&amp;mut self) -&gt; Option&lt;T&gt;\n</code></pre>\n\n<p><code>unwrap</code> consumes the <code>Option</code> (note the receiver is <code>self</code>), which would leave <code>self.dispatch_thread</code> in an unknown state. If you use <code>take</code> it is returned to the <code>None</code> state as you probably intended.</p>\n\n<p>You probably want <code>take</code> in this context; as shown here:</p>\n\n<pre><code>use std::thread;\nuse std::time;\n\nstruct Foo {\n    foo: Option&lt;thread::JoinHandle&lt;()&gt;&gt;,\n}\n\nimpl Foo {\n    fn nope(&amp;mut self) {\n        self.foo = Some(thread::spawn(|| {\n            for _i in 1..10 {\n                println!(\"Price = {}\", 10);\n                thread::sleep(time::Duration::from_millis(10));\n            }\n        }));\n        self.foo.take().unwrap().join();\n    }\n}\n\nfn main() {\n    let foo = Some(thread::spawn(|| {\n        for _i in 1..10 {\n            println!(\"Price = {}\", 10);\n            thread::sleep(time::Duration::from_millis(10));\n        }\n    }));\n    foo.unwrap().join();\n\n    let mut foo = Foo { foo: None };\n    foo.foo = Some(thread::spawn(|| {\n        for _i in 1..10 {\n            println!(\"Price = {}\", 10);\n            thread::sleep(time::Duration::from_millis(10));\n        }\n    }));\n    foo.foo.unwrap().join();\n\n    let mut foo = Foo { foo: None };\n    foo.nope();\n}\n</code></pre>\n\n<p>Note that <code>assert!(foo.foo.is_none());</code> would be similarly illegal; but is valid in this case because we don't violate that constraint. In the method with <code>&amp;self</code> as a receiver, this isn't true, which is why it is illegal in that case.</p>\n"}], "owner": {"reputation": 321, "user_id": 9853391, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/71a4ec22a1b64e539e0b092c4f3db76b?s=128&d=identicon&r=PG&f=1", "display_name": "Danny", "link": "https://stackoverflow.com/users/9853391/danny"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 201, "favorite_count": 0, "closed_date": 1529413250, "accepted_answer_id": 50920500, "answer_count": 1, "score": 0, "last_activity_date": 1541893045, "creation_date": 1529378045, "last_edit_date": 1529413213, "question_id": 50920114, "link": "https://stackoverflow.com/questions/50920114/borrow-checker-cannot-move-out-of-borrowed-content", "closed_reason": "Duplicate", "title": "Borrow checker &quot;cannot move out of borrowed content&quot;", "body": "<p>Why can't I do this?</p>\n\n<pre><code>pub fn start_workers(&amp;mut self) {\n    // start all the worker threads\n    self.dispatch_thread = Some(spawn(||{\n        for _i in 1..10 {\n            println!(\"Price = {}\", 10);\n            thread::sleep(time::Duration::from_secs(1));\n        }\n    }));\n    self.dispatch_thread.unwrap().join();\n}\n</code></pre>\n\n<p>I'm getting the following error, </p>\n\n<blockquote>\n  <pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of borrowed content\n   --&gt; src/orderbook.rs:195:9\n    |\n195 |         self.dispatch_thread.unwrap().join();\n    |         ^^^^ cannot move out of borrowed content\n</code></pre>\n</blockquote>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1529375093, "post_id": 50919521, "comment_id": 88839337, "body": "Sounds good! Some other points to consider... <i>make two nearly identical functions for the trait</i> \u2014 the code shown doesn&#39;t have any implementation for either. <i>this prevents me from being able to use it</i> \u2014 without the error, it&#39;s difficult to tell what this means"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1529375210, "post_id": 50919521, "comment_id": 88839361, "body": "Related Q&amp;A that may be relevant: <a href=\"https://stackoverflow.com/q/31461902/155423\">Is it possible to extend a default method implementation of a trait in a struct?</a>, <a href=\"https://stackoverflow.com/q/34438755/155423\">Why would I implement methods on a trait instead of as part of the trait?</a>"}], "answers": [{"tags": [], "owner": {"reputation": 3152, "user_id": 1525759, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/LHtNL.jpg?s=128&g=1", "display_name": "Addison", "link": "https://stackoverflow.com/users/1525759/addison"}, "is_accepted": false, "score": 0, "last_activity_date": 1529615729, "creation_date": 1529615729, "answer_id": 50977540, "question_id": 50919521, "link": "https://stackoverflow.com/questions/50919521/using-associated-functions-in-methods-accepting-trait-objects/50977540#50977540", "title": "Using associated functions in methods accepting trait objects", "body": "<p>I was able to figure out a solution using the <code>SectionType</code> enum, rather than using type parameters. I wanted to have an associated function called <code>SectionType::with_offset</code>, but I was able to add <code>SectionType::with_offset</code> a method to <code>SectionType</code> instead. Here is the updated example:</p>\n\n<pre><code>fn main() {\n    print_generic_info(None, &amp;SectionType::Header);\n}\n\nfn print_generic_info(game: Option&lt;Game&gt;, section_type: &amp;SectionType) {\n    if let Some(s) = game {\n        let section = s.get_section(section_type);\n\n        // Now I can do this:\n        let other_section = section_type.with_offset(0);\n    }\n}\n\nstruct Game;\n\nimpl Game {\n    fn get_section(&amp;self, section_type: &amp;SectionType) -&gt; Option&lt;&amp;LayoutSection&gt; {\n        Some(match section_type {\n            SectionType::Header =&gt; unimplemented!(),\n        })\n    }\n}\n\n#[derive(Debug)]\nenum SectionType {\n    Header\n}\n\nimpl SectionType {\n    fn with_offset(&amp;self, offset: u64) -&gt; Box&lt;LayoutSection&gt; {\n        match self {\n            SectionType::Header =&gt; Box::new(Header),\n        }\n    }\n}\n\ntrait LayoutSection {\n    fn section_kind(&amp;self) -&gt; SectionType;\n\n    fn print_generic_info(&amp;self) {\n        println!(\"Type: {:?}\", self.section_kind());\n    }\n}\n\nstruct Header;\n\nimpl LayoutSection for Header {\n    fn section_kind(&amp;self) -&gt; SectionType {\n        SectionType::Header\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=ef5e40e18f8e3ad8731b1c93d032aa42&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">Link to the Rust Playground</a></p>\n"}], "owner": {"reputation": 3152, "user_id": 1525759, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/LHtNL.jpg?s=128&g=1", "display_name": "Addison", "link": "https://stackoverflow.com/users/1525759/addison"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 209, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1529615729, "creation_date": 1529372212, "last_edit_date": 1529379074, "question_id": 50919521, "link": "https://stackoverflow.com/questions/50919521/using-associated-functions-in-methods-accepting-trait-objects", "title": "Using associated functions in methods accepting trait objects", "body": "<p>I'm working on a Rust trait, <code>LayoutSection</code>, and ran into an issue where I had to make two nearly identical functions for the trait: one that's an associated function and one thats a method: <code>section_type()</code> and <code>section_kind(&amp;self)</code>.</p>\n\n<p>Ideally, I would only have the <code>section_type()</code> associated function, however <code>LayoutSection</code> is unable to be made into a trait object unless <code>section_type()</code> has a <code>where Self: Sized</code> clause.</p>\n\n<p>However I need to use <code>section_type()</code> in methods that use trait objects, so I was forced to create <code>section_kind(&amp;self)</code>, which is exactly the same as <code>section_type()</code>, but it can be called on trait objects.</p>\n\n<p>I know this is a horrible hack, and there has to be some alternative, but I can't think of any other way to do this. </p>\n\n<p>Here is a simplified example of how these functions are defined and being used: (here's the <a href=\"https://play.rust-lang.org/?gist=4a315d25251b47e3678ed242a0304b4b&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">Rust Playground</a>)</p>\n\n<pre><code>fn main() {\n    print_generic_info::&lt;Header&gt;(None);\n}\n\nfn print_generic_info&lt;S: LayoutSection&gt;(game: Option&lt;Game&gt;) {\n    if let Some(s) = game {\n        let section = s.get_section::&lt;S&gt;();\n    }\n\n    // The reason I wanted to use a type parameter in `Game::get_section`,\n    // rather than pass a `SectionType`, is because I'm doing something \n    // like this later on:\n    // let section = &lt;S as LayoutSection&gt;::with_offset(...);\n}\n\nstruct Game;\n\nimpl Game {\n    fn get_section&lt;S: LayoutSection&gt;(&amp;self) -&gt; Option&lt;&amp;LayoutSection&gt; {\n        Some(match &lt;S as LayoutSection&gt;::section_type() {\n            SectionType::Header =&gt; unimplemented!(),\n        })\n    }\n}\n\n#[derive(Debug)]\nenum SectionType {\n    Header\n}\n\ntrait LayoutSection {\n    fn section_kind(&amp;self) -&gt; SectionType;\n    fn section_type() -&gt; SectionType\n    where\n        Self: Sized;\n\n    fn print_generic_info(&amp;self) {\n        println!(\"Type: {:?}\", self.section_kind());\n    }\n}\n\nstruct Header;\n\nimpl LayoutSection for Header {\n    fn section_kind(&amp;self) -&gt; SectionType {\n        SectionType::Header\n    }\n\n    fn section_type() -&gt; SectionType {\n        SectionType::Header\n    }\n}\n</code></pre>\n\n<p>What would be a better alternative to this? I wanted to use an associated constant to store the <code>SectionType</code>, however using those still wouldn't allow <code>LayoutSection</code> to be used as a trait object. But something like that would be even better than the <code>section_type()</code> associated function.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1529347499, "post_id": 50915459, "comment_id": 88831290, "body": "I believe your question is answered by the answers of <a href=\"https://stackoverflow.com/q/27769681/155423\">Should I implement Display or ToString to render a type as a string?</a>. If you disagree, please <a href=\"https://stackoverflow.com/posts/50915459/edit\">edit</a> your question to explain the differences. Otherwise, we can mark this question as already answered."}, {"owner": {"reputation": 6933, "user_id": 2580955, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/WZR9N.jpg?s=128&g=1", "display_name": "s3rvac", "link": "https://stackoverflow.com/users/2580955/s3rvac"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1529348022, "post_id": 50915459, "comment_id": 88831534, "body": "@Shepmaster Yes, you are right. I have overlooked this answer when looking for an explanation. Feel free to close my question as already answered (or I can remove it)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1529348977, "post_id": 50915459, "comment_id": 88831990, "body": "Nah, this will be a good signpost as the duplicate&#39;s title isn&#39;t very obvious that it&#39;s going to explain the <i>why</i>, even though the answer does."}], "owner": {"reputation": 6933, "user_id": 2580955, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/WZR9N.jpg?s=128&g=1", "display_name": "s3rvac", "link": "https://stackoverflow.com/users/2580955/s3rvac"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 49, "favorite_count": 0, "closed_date": 1529348936, "answer_count": 0, "score": 2, "last_activity_date": 1529346534, "creation_date": 1529346534, "question_id": 50915459, "link": "https://stackoverflow.com/questions/50915459/why-does-implementing-display-for-a-struct-add-the-ability-to-call-to-string-o", "closed_reason": "Duplicate", "title": "Why does implementing Display for a struct add the ability to call to_string() on it?", "body": "<p>Consider the following piece of code:</p>\n\n<pre><code>use std::fmt::Write;\n\nstruct X;\n\nimpl std::fmt::Display for X {\n    fn fmt(&amp;self, f: &amp;mut std::fmt::Formatter) -&gt; Result&lt;(), std::fmt::Error&gt; {\n        f.write_char('X')\n    }\n}\n\nfn main() {\n    let x = X{};\n    println!(\"{}\", x.to_string());\n}\n</code></pre>\n\n<p>Why does implementing <a href=\"https://doc.rust-lang.org/std/fmt/trait.Display.html\" rel=\"nofollow noreferrer\"><code>Display</code></a> for a struct add the ability to call <code>to_string()</code> on it? The only method provided by <a href=\"https://doc.rust-lang.org/std/fmt/trait.Display.html\" rel=\"nofollow noreferrer\"><code>Display</code></a> is <a href=\"https://doc.rust-lang.org/std/fmt/trait.Display.html#tymethod.fmt\" rel=\"nofollow noreferrer\"><code>fmt()</code></a>, so there has to be something else going on under the covers.</p>\n"}, {"tags": ["rust", "future", "lifetime", "borrowing", "rust-tokio"], "comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1529346293, "post_id": 50915147, "comment_id": 88830783, "body": "It&#39;s not the argument <code>val</code> that gets moved when you make a <code>move</code> closure; it&#39;s the environment (in this case represented by <code>some_struct</code>)."}], "answers": [{"comments": [{"owner": {"reputation": 517, "user_id": 2013635, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5752b725fdf6928ef2b7dc900e70b9d9?s=128&d=identicon&r=PG", "display_name": "Dave", "link": "https://stackoverflow.com/users/2013635/dave"}, "edited": false, "score": 1, "creation_date": 1556877639, "post_id": 50915878, "comment_id": 98585766, "body": "I was stuck fighting the borrow checker and was about ready to give up on Rust. And then read this answer when looking for some other issue... This is the answer that made it click for me. Thanks!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1529348362, "creation_date": 1529348362, "answer_id": 50915878, "question_id": 50915147, "link": "https://stackoverflow.com/questions/50915147/explicit-lifetime-required-when-using-a-reference-variable-in-a-boxed-future/50915878#50915878", "title": "&quot;explicit lifetime required&quot; when using a reference variable in a boxed future", "body": "<p>Returning a boxed trait object has a <code>'static</code> bound by default. Do as the compiler suggests and provide an explicit lifetime, but not <code>'static</code>:</p>\n\n<pre><code>fn get_future&lt;'a&gt;(some_struct: &amp;'a SomeStruct) -&gt; Box&lt;Future&lt;Item = u32, Error = ()&gt; + 'a&gt; {\n    let fut = ok(20).and_then(move |val| {\n        let result = some_struct.do_something(val);\n        ok(result)\n    });\n    Box::new(fut)\n}\n</code></pre>\n\n<p>You also have to use <code>move</code> to transfer ownership of <code>some_struct</code> to the closure and change <code>core</code> to be mutable. You should also handle potential errors resulting from <code>core.run</code>.</p>\n\n<p>For the example provided, you could also return <code>impl Future</code>:</p>\n\n<pre><code>fn get_future&lt;'a&gt;(some_struct: &amp;'a SomeStruct) -&gt; impl Future&lt;Item = u32, Error = ()&gt; +'a {\n    ok(20).and_then(move |val| {\n        let result = some_struct.do_something(val);\n        ok(result)\n    })\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/40544020/155423\">How do I return a closure that has a reference to a struct?</a></li>\n<li><a href=\"https://stackoverflow.com/q/42028470/155423\">Why is adding a lifetime to a trait with the plus operator (Iterator&lt;Item = &amp;Foo&gt; + &#39;a) needed?</a></li>\n<li><a href=\"https://stackoverflow.com/q/27535289/155423\">What is the correct way to return an Iterator (or any other trait)?</a></li>\n</ul>\n"}], "owner": {"reputation": 23, "user_id": 4726162, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9b98f45319a54ce3e7c6c8e714fba9f5?s=128&d=identicon&r=PG&f=1", "display_name": "flock0", "link": "https://stackoverflow.com/users/4726162/flock0"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2898, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1529348897, "creation_date": 1529345194, "last_edit_date": 1529347868, "question_id": 50915147, "link": "https://stackoverflow.com/questions/50915147/explicit-lifetime-required-when-using-a-reference-variable-in-a-boxed-future", "title": "&quot;explicit lifetime required&quot; when using a reference variable in a boxed future", "body": "<p>I'm trying to use a struct created in <code>main()</code> and pass it on to a function that returns a boxed <code>Future</code>. However, I run into lifetime and borrowing issues and can't seem to resolve this cleanly.</p>\n\n<p>Here is my struct and functions:</p>\n\n<pre><code>extern crate futures; // 0.1.21\nextern crate tokio_core; // 0.1.17\n\nuse futures::{future::ok, Future};\n\npub struct SomeStruct {\n    some_val: u32,\n}\n\nimpl SomeStruct {\n    pub fn do_something(&amp;self, value: u32) -&gt; u32 {\n        // Do some work\n        return self.some_val + value;\n    }\n}\n\nfn main() {\n    let core = tokio_core::reactor::Core::new().unwrap();\n    let my_struct = SomeStruct { some_val: 10 };\n\n    let future = get_future(&amp;my_struct);\n    core.run(future);\n\n    let future2 = get_future(&amp;my_struct);\n    core.run(future2);\n}\n\nfn get_future(some_struct: &amp;SomeStruct) -&gt; Box&lt;Future&lt;Item = u32, Error = ()&gt;&gt; {\n    let fut = ok(20).and_then(|val| {\n        let result = some_struct.do_something(val);\n        ok(result)\n    });\n    Box::new(fut)\n}\n</code></pre>\n\n<p>On compiling, the following error occurs:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0621]: explicit lifetime required in the type of `some_struct`\n  --&gt; src/main.rs:33:5\n   |\n28 | fn get_future(some_struct: &amp;SomeStruct) -&gt; Box&lt;Future&lt;Item = u32, Error = ()&gt;&gt; {\n   |               ----------- consider changing the type of `some_struct` to `&amp;'static SomeStruct`\n...\n33 |     Box::new(fut)\n   |     ^^^^^^^^^^^^^ lifetime `'static` required\n</code></pre>\n\n<p>I suppose the error occurs because <code>SomeStruct</code> is used in the <code>Future</code> and might be used outside of <code>main()</code>s scope, hence the compiler asks me to change the lifetime to <code>'static</code>. Here is what I tried so far (unsuccessfully):</p>\n\n<ul>\n<li>Changing the lifetime to <code>'static</code> as suggested by the compiler, which creates borrowing issues in <code>main()</code>.</li>\n<li>Moving <code>val</code> by adding <code>ok(20).and_then(move |val| {</code> as suggested by the compiler, which creates issues in the second invocation of <code>get_future()</code>.</li>\n<li>Use the <a href=\"https://crates.io/crates/lazy_static\" rel=\"nofollow noreferrer\">lazy_static</a> crate to explicitly initialize <code>SomeStruct</code> as static (as suggested <a href=\"https://stackoverflow.com/questions/50740632/how-do-i-call-a-function-that-requires-a-static-lifetime-with-a-variable-create\">here</a>), however I run into macro errors when trying that.</li>\n</ul>\n\n<p>The whole example can be found <a href=\"https://github.com/flock0/rust-lifetime-error\" rel=\"nofollow noreferrer\">here</a>. I have omitted some details to create an minimal example. The issues occur using <code>tokio-core</code> and <code>futures = \"0.1\"</code>. Migrating to version <code>\"0.2\"</code> is not an option unfortunately, due to a dependency of another library. </p>\n"}, {"tags": ["iterator", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1529339553, "post_id": 50913333, "comment_id": 88827840, "body": "The duplicate applied to your question: <code>pub fn analysis&lt;I&gt;(mut numbers: I, w: usize)</code> / <code>numbers.by_ref().take(w)</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1529339615, "post_id": 50913333, "comment_id": 88827871, "body": "Even better, you can write it as <code>let window: VecDeque&lt;_&gt; = numbers.by_ref().take(w).collect();</code>"}, {"owner": {"reputation": 92118, "user_id": 1217358, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d2aafb97833979e3668c61d36e697bfc?s=128&d=identicon&r=PG", "display_name": "Warren Weckesser", "link": "https://stackoverflow.com/users/1217358/warren-weckesser"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1529350668, "post_id": 50913333, "comment_id": 88832741, "body": "@Shepmaster, a rust noob here. Any chance you know where in the docs I can find an explanation of why the bound <code>I: Iterator&lt;Item = u64&gt;</code> works here, even though numbers.tee() is called and <code>tee()</code> is not part of the Iterator trait?  I expected the bound to be <code>I: Itertools&lt;Item = u64&gt;</code> in order to use the <code>tee()</code> method.  That works, but it is not required.   Is that just how &quot;supertraits&quot; work?  (I don&#39;t expect an answer here, but a link to docs or related questions would be great.)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 92118, "user_id": 1217358, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d2aafb97833979e3668c61d36e697bfc?s=128&d=identicon&r=PG", "display_name": "Warren Weckesser", "link": "https://stackoverflow.com/users/1217358/warren-weckesser"}, "edited": false, "score": 0, "creation_date": 1529351541, "post_id": 50913333, "comment_id": 88833125, "body": "@WarrenWeckesser <a href=\"https://docs.rs/itertools/0.7.8/itertools/trait.Itertools.html#implementors\" rel=\"nofollow noreferrer\"><code>Itertools</code> is implemented for any type that is an <code>Iterator</code></a>. See also <a href=\"https://stackoverflow.com/q/30540766/155423\">How can I add new methods to Iterator?</a>"}, {"owner": {"reputation": 92118, "user_id": 1217358, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d2aafb97833979e3668c61d36e697bfc?s=128&d=identicon&r=PG", "display_name": "Warren Weckesser", "link": "https://stackoverflow.com/users/1217358/warren-weckesser"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1529352461, "post_id": 50913333, "comment_id": 88833495, "body": "@Shepmaster Thanks.  Looks like I have some experimenting to do."}, {"owner": {"reputation": 4924, "user_id": 2862719, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/yzhk5.png?s=128&g=1", "display_name": "m00am", "link": "https://stackoverflow.com/users/2862719/m00am"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1529400877, "post_id": 50913333, "comment_id": 88849254, "body": "@Shepmaster I tried that before posting, but apparently overlooked the <code>mut</code> and misread the error I got. Now it works -.- Thank you for your help."}], "owner": {"reputation": 4924, "user_id": 2862719, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/yzhk5.png?s=128&g=1", "display_name": "m00am", "link": "https://stackoverflow.com/users/2862719/m00am"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 54, "favorite_count": 0, "closed_date": 1529339531, "answer_count": 0, "score": 2, "last_activity_date": 1529339458, "creation_date": 1529337439, "last_edit_date": 1529339458, "question_id": 50913333, "link": "https://stackoverflow.com/questions/50913333/is-there-a-way-to-deplete-an-iterator-after-calling-iteratortake", "closed_reason": "Duplicate", "title": "Is there a way to deplete an iterator after calling Iterator::take?", "body": "<p>I have an iterator that I would like to analyze using a sliding window of size <code>w</code>. I try to move the first <code>w</code> items from the iterator into a data structure and would like iterate through the remaining items. However, when I use <code>numbers.take(w)</code> I lose ownership of the iterator and cannot consume the remaining items:</p>\n\n<pre><code>use std::collections::VecDeque;\n\npub fn analysis&lt;I&gt;(numbers: I, w: usize)\nwhere\n    I: Iterator&lt;Item = u64&gt;,\n{\n    let mut window = VecDeque::with_capacity(w);\n    for number in numbers.take(w) {\n        window.push_back(number);\n    }\n\n    for (i, number) in numbers.enumerate() {\n        // do some analysis\n    }\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0382]: use of moved value: `numbers`\n  --&gt; src/main.rs:12:24\n   |\n8  |     for number in numbers.take(w) {\n   |                   ------- value moved here\n...\n12 |     for (i, number) in numbers.enumerate() {\n   |                        ^^^^^^^ value used here after move\n   |\n   = note: move occurs because `numbers` has type `I`, which does not implement the `Copy` trait\n</code></pre>\n\n<p>I found a workaround using the <code>tee</code> function from the <code>itertools</code> crate:</p>\n\n<pre><code>extern crate itertools;\n\nuse itertools::Itertools;\nuse std::collections::VecDeque;\n\npub fn analysis&lt;I&gt;(numbers: I, w: usize)\nwhere\n    I: Iterator&lt;Item = u64&gt;,\n{\n    let mut window = VecDeque::with_capacity(w);\n    let (first_numbers, numbers) = numbers.tee();\n\n    for number in first_numbers.take(w) {\n        window.push_back(number);\n    }\n\n    for number in numbers.skip(w) {\n        window.pop_front();\n        window.push_back(number);\n        // do stuff\n    }\n}\n</code></pre>\n\n<p>However, this strikes me as a little unwieldy. Is there a way to solve this without cloning or duplicating the iterator? In other words: is there a way to split an iterator into two segments that can be used independently?</p>\n"}, {"tags": ["rust", "visibility"], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 14, "last_activity_date": 1529316741, "last_edit_date": 1529316741, "creation_date": 1529312388, "answer_id": 50905901, "question_id": 50905715, "link": "https://stackoverflow.com/questions/50905715/how-is-pubself-visibility-different-from-no-pub-attribute/50905901#50905901", "title": "How is `pub(self)` visibility different from no `pub` attribute?", "body": "<p>The <code>pub(restricted)</code> syntax was introduced in <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1422-pub-restricted.md\" rel=\"noreferrer\">RFC 1422</a>. It introduces two new ways to specify visibility:</p>\n\n<ul>\n<li><code>pub(crate)</code>: makes the item visible to the whole current crate, but not beyond.</li>\n<li><code>pub(in path::to::module)</code>: makes the item visible to the module tree specified by the path.</li>\n</ul>\n\n<p><code>pub(self)</code> is syntactic sugar for <code>pub(in self)</code>, which falls into the second category: <code>self</code> is just a path like <code>super</code>, <code>::foo</code>, <code>bar::baz</code> and so on. This means that, yes, <code>pub(self)</code> makes the item visible to the current module tree.</p>\n\n<p>Thus, <strong><code>pub(self)</code> is equivalent to omitting the <code>pub(self)</code> declaration</strong>. This is even stated <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1422-pub-restricted.md#semantics\" rel=\"noreferrer\">in the RFC</a>:</p>\n\n<blockquote>\n  <p>As noted above, the definition means that <code>pub(self) item</code> is the same as if one had written just <code>item</code>.</p>\n</blockquote>\n\n<p>The RFC also mentions why this is supported:</p>\n\n<blockquote>\n  <p>The main reason to support this level of generality (which is otherwise just \"redundant syntax\") is macros: one can write a macro that expands to <code>pub($arg)</code> item, and a macro client can pass in <code>self</code> as the <code>$arg</code> to get the effect of a non-pub definition.</p>\n</blockquote>\n"}], "owner": {"reputation": 3183, "user_id": 3063, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/94037fcc56672e711673c00feba9d62a?s=128&d=identicon&r=PG", "display_name": "palotasb", "link": "https://stackoverflow.com/users/3063/palotasb"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 745, "favorite_count": 0, "accepted_answer_id": 50905901, "answer_count": 1, "score": 12, "last_activity_date": 1529327645, "creation_date": 1529311693, "last_edit_date": 1529327645, "question_id": 50905715, "link": "https://stackoverflow.com/questions/50905715/how-is-pubself-visibility-different-from-no-pub-attribute", "title": "How is `pub(self)` visibility different from no `pub` attribute?", "body": "<p>I <a href=\"https://doc.rust-lang.org/reference/visibility-and-privacy.html\" rel=\"noreferrer\">see</a> that functions' visibility can be declared to be <code>pub(self)</code> within a module. How is this different from a private function with no <code>pub</code> attribute? Why does this syntax exist if they are not different?</p>\n"}, {"tags": ["rust", "polymorphism", "traits"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1529328760, "post_id": 50905324, "comment_id": 88821355, "body": "I believe your question is answered by the answers of <a href=\"https://stackoverflow.com/questions/28932450/how-can-i-have-a-vector-of-objects-that-differ-by-their-associated-type\">How can I have a vector of objects that differ by their associated type?</a>. If you disagree, please <a href=\"https://stackoverflow.com/posts/50905324/edit\">edit</a> your question to explain the differences. Otherwise, we can mark this question as already answered."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 5, "creation_date": 1529328699, "post_id": 50907923, "comment_id": 88821317, "body": "This doesn&#39;t really answer the OPs question about <i>why</i>. They already know that they need to specify the type..."}], "tags": [], "owner": {"reputation": 5700, "user_id": 3131852, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/26365707ecfa02e221f5192aaaa29a43?s=128&d=identicon&r=PG", "display_name": "Tim Diekmann", "link": "https://stackoverflow.com/users/3131852/tim-diekmann"}, "is_accepted": false, "score": 4, "last_activity_date": 1529328594, "last_edit_date": 1529328594, "creation_date": 1529319430, "answer_id": 50907923, "question_id": 50905324, "link": "https://stackoverflow.com/questions/50905324/why-must-the-associated-type-be-specified-in-a-collection-of-references-to-types/50907923#50907923", "title": "Why must the associated type be specified in a collection of references to types implementing a trait?", "body": "<p>You need to specify the associated type of the trait (i.e. <code>Behavior&lt;Sub = ???&gt;</code>).</p>\n\n<p>When adding the associated type at all places, it compiles:  </p>\n\n<pre><code>struct Example&lt;'a, S: SubBehaviour + 'a&gt; {\n    behaviours: Vec&lt;&amp;'a Behaviour&lt;Sub = S&gt;&gt;,\n}\n\nimpl&lt;'a, S: SubBehaviour&gt; Example&lt;'a, S&gt; {\n    fn add_behaviour&lt;T: Behaviour&lt;Sub = S&gt;&gt;(&amp;mut self, b: &amp;'a T) {\n        self.behaviours.push(b);\n    }\n}\n</code></pre>\n\n<p>See this in action <a href=\"https://play.rust-lang.org/?gist=9383c08f6e41863da7fdc7eeb6fa24ab&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">on the Playground</a></p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1537391968, "post_id": 52413657, "comment_id": 91772426, "body": "This doesn&#39;t really answer the OPs question about <i>why</i>."}, {"owner": {"reputation": 587, "user_id": 3744172, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1465c7925dd3f49d05c2c96d1ebf14ce?s=128&d=identicon&r=PG&f=1", "display_name": "Seivan", "link": "https://stackoverflow.com/users/3744172/seivan"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1537393843, "post_id": 52413657, "comment_id": 91773042, "body": "Thanks, I&#39;ll update, but it&#39;s inherently an answer to the second question <code>How can I get this code to work?</code>"}], "tags": [], "owner": {"reputation": 587, "user_id": 3744172, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1465c7925dd3f49d05c2c96d1ebf14ce?s=128&d=identicon&r=PG&f=1", "display_name": "Seivan", "link": "https://stackoverflow.com/users/3744172/seivan"}, "is_accepted": false, "score": 3, "last_activity_date": 1592387674, "last_edit_date": 1592387674, "creation_date": 1537388422, "answer_id": 52413657, "question_id": 50905324, "link": "https://stackoverflow.com/questions/50905324/why-must-the-associated-type-be-specified-in-a-collection-of-references-to-types/52413657#52413657", "title": "Why must the associated type be specified in a collection of references to types implementing a trait?", "body": "<p>So the answer to your first question is covered by <a href=\"https://stackoverflow.com/a/50907923/155423\">Tim's answer</a> and is correct, you might not want your <code>Example</code> to be generic. In that case, you need to use some sort of type erasure: </p>\n\n<pre><code>// Some traits\ntrait Behaviour {\n    type Sub: SubBehaviour;\n}\ntrait SubBehaviour {}\n\n// Some implementations of these traits\nstruct A;\nimpl Behaviour for A {\n    type Sub = B;\n}\n\nstruct B;\nimpl SubBehaviour for B {}\n\nstruct AnyBehaviour {\n    closure: Box&lt;Fn()&gt;,\n}\nimpl AnyBehaviour {\n    fn new&lt;U: SubBehaviour, T: Behaviour&lt;Sub = U&gt;&gt;(b: &amp;T) -&gt; Self {\n        let closure = || {\n            //let sub = T::Sub::new();\n            println!(\"Can use T here\");\n        };\n\n        AnyBehaviour {\n            closure: Box::new(closure),\n        }\n    }\n}\n\n// Struct that holds a collection of these traits.\nstruct Example {\n    behaviours: Vec&lt;AnyBehaviour&gt;,\n}\n\nimpl Example {\n    fn add_behaviour&lt;U: SubBehaviour, T: Behaviour&lt;Sub = U&gt;&gt;(&amp;mut self, b: &amp;T) {\n        self.behaviours.push(AnyBehaviour::new(b));\n    }\n}\n\nfn main() {\n    let b = A;\n    let mut e = Example {\n        behaviours: Vec::new(),\n    };\n    e.add_behaviour(&amp;b);\n}\n</code></pre>\n\n<p>Within the closure, you have access to all the types needed call the traits functions with whatever subtype needed. </p>\n\n<p>Why this happens, is mostly because you actually need a definition of the associated type in order for the trait to be \"complete\" so the compiler can work with it. Tim's answer answers that by the definition to be higher up in the chain (outside of Example) instead of inside. </p>\n"}, {"tags": [], "owner": {"reputation": 814, "user_id": 2430485, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/vZThf.png?s=128&g=1", "display_name": "Markus Klein", "link": "https://stackoverflow.com/users/2430485/markus-klein"}, "is_accepted": false, "score": 6, "last_activity_date": 1537534814, "last_edit_date": 1537534814, "creation_date": 1537392766, "answer_id": 52414480, "question_id": 50905324, "link": "https://stackoverflow.com/questions/50905324/why-must-the-associated-type-be-specified-in-a-collection-of-references-to-types/52414480#52414480", "title": "Why must the associated type be specified in a collection of references to types implementing a trait?", "body": "<p>All types must be statically known at compile time. If Rust would allow different associated types for elements of a <code>Vec</code>, type information could depend on indices which are only known at runtime.</p>\n\n<p>I find it helpful to consider a smaller example:</p>\n\n<pre><code>trait Behaviour {\n    type T;\n\n    fn make_t(&amp;self) -&gt; T;\n}\n\nfn foo(my_vec: Vec&lt;&amp;dyn Behaviour&gt;, index: usize) {\n    let t = my_vec[index].make_t(); //Type of t depends on index\n}\n</code></pre>\n\n<p>You were on the right track to fixing this though. I assume you introduced the <code>SubBehaviour</code> trait because you realized you need to put restrictions of what <code>T</code> can be. The thing is, in that case you don't need an associated type anymore.</p>\n\n<pre><code>trait SubBehaviour {}\n\ntrait Behaviour {\n    fn make_t(&amp;self) -&gt; Box&lt;dyn SubBehaviour&gt;;\n\n    fn ref_t(&amp;self) -&gt; &amp;dyn SubBehaviour; // also fine\n}\n\nfn some_function(my_vec: Vec&lt;&amp;dyn Behaviour&gt;, index: usize) {\n    let t1 = my_vec[index].make_t();\n}\n</code></pre>\n\n<p>The only limitation is that in your definition of <code>Behaviour</code> you can not do anything which would depend on the size of <code>T</code>, (like allocating it on the stack or moving it) since the size of <code>T</code> can not be specified by the <code>SubBehaviour</code> trait.</p>\n"}], "owner": {"reputation": 2434, "user_id": 4591251, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/22ad6242d3ca1d772c46a5d00389d925?s=128&d=identicon&r=PG", "display_name": "Ross MacArthur", "link": "https://stackoverflow.com/users/4591251/ross-macarthur"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2997, "favorite_count": 0, "answer_count": 3, "score": 10, "last_activity_date": 1592387674, "creation_date": 1529310147, "last_edit_date": 1529328572, "question_id": 50905324, "link": "https://stackoverflow.com/questions/50905324/why-must-the-associated-type-be-specified-in-a-collection-of-references-to-types", "title": "Why must the associated type be specified in a collection of references to types implementing a trait?", "body": "<p>Here is an offending example:</p>\n\n<pre><code>// Some traits\ntrait Behaviour {\n    type Sub: SubBehaviour;\n}\ntrait SubBehaviour {}\n\n// Some implementations of these traits\nstruct A;\nimpl Behaviour for A {\n    type Sub = B;\n}\nstruct B;\nimpl SubBehaviour for B {}\n\n// Struct that holds a collection of these traits.\nstruct Example&lt;'a&gt; {\n    behaviours: Vec&lt;&amp;'a Behaviour&gt;,\n}\n\nimpl&lt;'a&gt; Example&lt;'a&gt; {\n    fn add_behaviour&lt;T: Behaviour&gt;(&amp;mut self, b: &amp;'a T) {\n        self.behaviours.push(b);\n    }\n}\n\nfn main() {\n    let b = A;\n    let mut e = Example {\n        behaviours: Vec::new(),\n    };\n    e.add_behaviour(&amp;b);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=aae5a5ad13df8b1231692c39470c5a75&amp;version=stable&amp;mode=debug\" rel=\"noreferrer\">Playground</a></p>\n\n<p>I am getting:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0191]: the value of the associated type `Sub` (from the trait `Behaviour`) must be specified\n  --&gt; src/main.rs:17:25\n   |\n17 |     behaviours: Vec&lt;&amp;'a Behaviour&gt;,\n   |                         ^^^^^^^^^ missing associated type `Sub` value\n</code></pre>\n\n<p>Why must this type must be specified, particularly in this case where we are only storing a reference to the object? How can I get this code to work?</p>\n"}, {"tags": ["rust", "ffi"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1529297584, "post_id": 50902440, "comment_id": 88805397, "body": "<i>Questions seeking debugging help (&quot;why isn&#39;t this code working?&quot;) must include the desired behavior, a specific problem or error and <b>the shortest code necessary to reproduce it in the question itself</i></b>. Links to your full code are fine to add, but are not sufficient. Otherwise this question is off topic."}, {"owner": {"reputation": 1014, "user_id": 61360, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/70602c12ed1c06db5165ff6a88cd38e0?s=128&d=identicon&r=PG", "display_name": "Mat&#237;as Insaurralde", "link": "https://stackoverflow.com/users/61360/mat%c3%adas-insaurralde"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1529297725, "post_id": 50902440, "comment_id": 88805421, "body": "I agree and have tried to include the shortest snippets possible. I find the use case a bit complex, even the test code I&#39;ve linked is just a test program that I&#39;ve built exclusively for this question. Will try to enhance it."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1529298525, "post_id": 50902440, "comment_id": 88805601, "body": "I believe your question is answered by the answers of <a href=\"https://stackoverflow.com/q/50188710/155423\">Rust function that allocates memory and calls a C++ callback crashes</a>. If you disagree, please <a href=\"https://stackoverflow.com/posts/50902440/edit\">edit</a> your question to explain the differences. Otherwise, we can mark this question as already answered."}, {"owner": {"reputation": 1014, "user_id": 61360, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/70602c12ed1c06db5165ff6a88cd38e0?s=128&d=identicon&r=PG", "display_name": "Mat&#237;as Insaurralde", "link": "https://stackoverflow.com/users/61360/mat%c3%adas-insaurralde"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1529302386, "post_id": 50902440, "comment_id": 88806764, "body": "I&#39;ve been testing my implementation with <code>Box::into_raw</code> but I get the same issue, as I&#39;ve mentioned in the last paragraphs the callback works fine, it&#39;s called <code>rust_callback</code>. So: a) <code>rust_callback</code> locates the Rust object using a pointer b) This object has a <code>recv</code> method and it&#39;s called using <code>(*w).recv(...)</code>. c) The <code>recv</code> method is successfully called, this method calls a function pointer that&#39;s part of its data structure, this is the function that fails and the reason why I ask for feedback on the function pointer approach."}], "owner": {"reputation": 1014, "user_id": 61360, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/70602c12ed1c06db5165ff6a88cd38e0?s=128&d=identicon&r=PG", "display_name": "Mat&#237;as Insaurralde", "link": "https://stackoverflow.com/users/61360/mat%c3%adas-insaurralde"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 308, "favorite_count": 0, "answer_count": 0, "score": 2, "last_activity_date": 1529303016, "creation_date": 1529293552, "last_edit_date": 1529303016, "question_id": 50902440, "link": "https://stackoverflow.com/questions/50902440/ffi-callback-and-segfault", "title": "FFI callback and segfault", "body": "<p>I\u2019m learning Rust and experimenting with FFI callbacks. I wrote a library that does the following:</p>\n\n<ul>\n<li>Initializes a C data structure.</li>\n<li>Initializes a wrapper Rust struct for this data structure. The constructor expects a function pointer, the callback <code>test_cb</code>.</li>\n</ul>\n\n<p>The usage looks like this:</p>\n\n<pre><code>let test_cb = move |n: i32| n * 2;\nlet mut _test_worker = new(test_cb);\n</code></pre>\n\n<p>This stores a pointer to the Rust data structure on the C side and vice versa: there\u2019s a pointer to the C structure in Rust:</p>\n\n<pre><code>pub struct Worker {\n    ptr: WorkerPtr,        // Pointer to the C data structure\n    cb: fn(i32) -&gt; i32,    // Callback function\n}\n\nstruct WorkerPtr(NonNull&lt;worker&gt;);\nunsafe impl marker::Send for WorkerPtr {}\n</code></pre>\n\n<pre class=\"lang-c prettyprint-override\"><code>struct worker_s {\n    void* rust_object;  // Pointer to the Rust data structure\n};\n</code></pre>\n\n<p>C calls Rust indicating the Rust struct pointer, Rust dereferences the pointer and calls a method on it: <code>Worker.trigger_callback</code>, the result is sent back to the C world:</p>\n\n<pre><code>#[no_mangle]\npub extern \"C\" fn rust_callback(w: *mut Worker, raw_n: c_int) -&gt; c_int {\n    let n = raw_n as i32;\n    println!(\"rust_callback: {}\", n);\n    unsafe {\n        let out = (*w).trigger_callback(n);\n        out as c_int\n    }\n}\n</code></pre>\n\n<p>Everything works fine, the method in the Rust object is successfully called, as expected, the program output looks like this (following the implementation shown above):</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>worker_new: worker = 0x7f9834d000c0\nworker_set_rust_object: worker = 0x7f9834d000c0 rust_object = 0x10ca21000\ntrigger_callback: worker = 0x7f9834d000c0 rust_object = 0x10ca21000\nrust_callback: 100\ntrigger_callback: 100\ngot: 200\n</code></pre>\n\n<p>In my real use case, I\u2019m using the bytes library and my callback is a <code>fn(bytes::Bytes) -&gt; bytes::Bytes</code>. My tests work fine and <code>Worker::trigger_callback</code> is successfully called, but under certain scenarios I\u2019m getting a segmentation fault and EXC_BAD_ACCESS when calling the function pointer that\u2019s stored in the structure (<code>self.cb/Worker.cb</code>). On the Rust side I\u2019m using a single thread. I can also confirm that the bytes object is correct, I can even print its length using <code>bytes.len()</code>, the only issue is the <code>self.cb/Worker.cb</code> call.</p>\n\n<p>I\u2019ve been trying to debug and find the cause with no luck, so I\u2019m looking for feedback on this approach, etc. The full code is available <a href=\"https://github.com/matiasinsaurralde/rust-experiment\" rel=\"nofollow noreferrer\">here</a>.</p>\n\n<p>Could this issue occur when multiple threads (on the C side) try to access the callback function pointer concurrently? How would you debug this?</p>\n\n<p><strong>Update:</strong> I've been debugging this with lldb and came up with this, something is wrong with the function pointer:</p>\n\n<pre><code>self.cb = 0x736a73742e\nProcess 32896 stopped\n* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x736a73742e)\n    frame #0: 0x000000736a73742e\nerror: memory read failed for 0x736a737400\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 442, "user_id": 3716130, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5b4173d0fd73813b54bca67cd1af7217?s=128&d=identicon&r=PG&f=1", "display_name": "isamert", "link": "https://stackoverflow.com/users/3716130/isamert"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1529280241, "post_id": 50901218, "comment_id": 88802608, "body": "I want to somehow extract all the left hand side of the match case to a constant or something like that. Match guards doesn&#39;t help me with that(Yes, it eliminates the need for double match, but its a last resort for me. Maybe I need to edit out the last sentence). Also <code>map()</code>ing my enum is not going to work, because it&#39;s not a <code>struct</code>, I need to match in <code>map</code> too. Creating a parallel type seems too weird. I can create a const <code>static &amp;str</code> and match against that with those solutions but that would raise another problem. These constants will only have strings and they lack the total meaning."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1529280392, "post_id": 50901218, "comment_id": 88802636, "body": "You&#39;ve been presented with multiple solutions, but  have arbitrarily decided that an answer that does what you need is &quot;too weird&quot;? That&#39;s not going to get you very far. Then the answer to your question is: &quot;No&quot;."}, {"owner": {"reputation": 442, "user_id": 3716130, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5b4173d0fd73813b54bca67cd1af7217?s=128&d=identicon&r=PG&f=1", "display_name": "isamert", "link": "https://stackoverflow.com/users/3716130/isamert"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1529281173, "post_id": 50901218, "comment_id": 88802759, "body": "There is only one solution that does what I need along those solutions presented and I found that one too verbose. Pardon my choice of words, I was running out of character limit. The reason is that, I have a lot of <code>enum</code>s like this and it will be hard to create parallel types for each of them and apart from that, the solution is just verbose. I would like to hear an answer that is more suitable for my situation, like if I can do that with a macro or something like that. If you say it&#39;s impossible that way, then we can mark this question as duplicate."}], "answers": [{"comments": [{"owner": {"reputation": 442, "user_id": 3716130, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5b4173d0fd73813b54bca67cd1af7217?s=128&d=identicon&r=PG&f=1", "display_name": "isamert", "link": "https://stackoverflow.com/users/3716130/isamert"}, "edited": false, "score": 0, "creation_date": 1529282047, "post_id": 50901432, "comment_id": 88802863, "body": "I need to clarify that, I am not particularly in a search for constants. As I said in the question(in the comments of last code segment), I can create instances of <code>enum</code>s dynamically. I just need to somehow match that dynamically created enum with another instance with a possible help of a macro. Or maybe, even this would work if rust had <code>#define</code> like in C : <code>#define STUFF Foo::Baz(ref x) if x == &quot;stuff&quot;</code>. Then I could stick that <code>STUFF</code> into left hand side of match case. I know rust macros are not expanded into text pre-processing, that&#39;s why I asked."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1529281242, "creation_date": 1529281242, "answer_id": 50901432, "question_id": 50901218, "link": "https://stackoverflow.com/questions/50901218/how-do-i-create-a-constant-enum-variant-with-heap-allocated-data-to-use-in-patte/50901432#50901432", "title": "How do I create a constant enum variant with heap-allocated data to use in pattern matching?", "body": "<p>You cannot create constants with heap-allocated data in current Rust, full stop. </p>\n\n<p><em>Maybe</em> in the future it will be possible to create a <code>const FOO: String</code>, but there's a lot of work to be done  and decisions to be made before that.</p>\n\n<blockquote>\n  <p>using a macro</p>\n</blockquote>\n\n<p>Macros <em>are not magic</em>. They only let you write certain types of code that you can already write but with a new syntax. Since you cannot create these constants, you cannot write a macro to create them either.</p>\n\n<hr>\n\n<blockquote>\n  <p>I want to somehow extract all the left hand side of the match case to a constant or something like that. Match guards doesn't help me with that(Yes, it eliminates the need for double match, but its a last resort for me.</p>\n</blockquote>\n\n\n\n<blockquote>\n  <p>Also <code>map()</code>ing my enum is not going to work, because it's not a struct, I need to match in <code>map</code> too. </p>\n</blockquote>\n\n\n\n<blockquote>\n  <p>Creating a parallel type seems too weird. </p>\n</blockquote>\n\n\n\n<blockquote>\n  <p>I can create a const <code>static &amp;str</code> and match against that with those solutions but that would raise another problem. These constants will only have strings and they lack the total meaning.</p>\n</blockquote>\n\n\n\n<blockquote>\n  <p>There is only one solution that does what I need along those solutions presented and I found that one too verbose. </p>\n</blockquote>\n\n\n\n<blockquote>\n  <p>I have a lot of enums like this and it will be hard to create parallel types for each of them and apart from that, the solution is just verbose.</p>\n</blockquote>\n\n<p>For other readers who can use the alternative solutions which you have already discarded, see also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/29048833/155423\">How do I match a String in a struct with a constant value?</a></li>\n</ul>\n\n<p>For further reading, see also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/45176403/155423\">Trying to declare a String const results in expected type, found &quot;my string&quot;</a></li>\n<li><a href=\"https://stackoverflow.com/q/32500974/155423\">Expected String, found &amp;str when matching an optional string</a></li>\n<li><a href=\"https://stackoverflow.com/q/25383488/155423\">How to match a String against string literals in Rust?</a></li>\n</ul>\n"}], "owner": {"reputation": 442, "user_id": 3716130, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5b4173d0fd73813b54bca67cd1af7217?s=128&d=identicon&r=PG&f=1", "display_name": "isamert", "link": "https://stackoverflow.com/users/3716130/isamert"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 564, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1529281242, "creation_date": 1529277686, "last_edit_date": 1529280686, "question_id": 50901218, "link": "https://stackoverflow.com/questions/50901218/how-do-i-create-a-constant-enum-variant-with-heap-allocated-data-to-use-in-patte", "title": "How do I create a constant enum variant with heap-allocated data to use in pattern matching?", "body": "<p>I have this enum:</p>\n\n<pre><code>enum Foo {\n    Bar,\n    Baz(String),\n\n    // And maybe some other variants    \n}\n</code></pre>\n\n<p>I find myself constantly pattern matching against predefined strings of <code>Baz</code>.</p>\n\n<pre><code>match foo_instance {\n    Foo::Baz(ref x) =&gt; match x.as_str() {\n        \"stuff\" =&gt; ...,\n        \"anotherstuff\" =&gt; ...,\n    },\n    // Other match cases...\n}\n</code></pre>\n\n<p>Sometimes I only match for one case, sometimes 4-5 cases of <code>Foo::Baz</code>. In latter situation, a double <code>match</code> doesn't bother me so much, in fact the grouping makes sense at that point. If I only match against one case of <code>Foo::Baz</code> it doesn't feel right. What I really want to be able to do is this:</p>\n\n<pre><code>const STUFF: Foo = Foo::Baz(\"stuff\".to_string());\nconst ANOTHER_STUFF: Foo = Foo::Baz(\"anotherstuff\".to_string());\n\nmatch foo_instance {\n    &amp;STUFF =&gt; ...,\n    &amp;ANOTHER_STUFF =&gt; ...,\n    // Other match cases...\n}\n</code></pre>\n\n<p>But of course, because of <code>to_string()</code> calls, this won't work (and I also need to derive <code>Eq</code> trait to be able to match against <code>const</code>s which is odd. That may also be a problem for me.). Is there any way to mimic this? For example, using a macro, can I do something like that:</p>\n\n<pre><code>const STUFF: Foo = magic!(Foo::Baz(\"stuff\".to_string());\nconst ANOTHER_STUFF: Foo = magic!(Foo::Baz(\"anotherstuff\".to_string()));\n\n// Or any other thing that can mimic top level behavior,\n// I may create these constants dynamically at program start, that would work too.\n\nmatch foo_instance {\n    another_magic!(STUFF) =&gt; ...,\n    another_magic!(ANOTHER_STUFF) =&gt; ...,\n    // Other match cases...\n}\n</code></pre>\n\n<p>Generally speaking, I want to be able to have some constant variants of an enum that contains an heap allocated data (<code>String</code> in this case), so that I can reuse them whenever I need in a <code>match</code> case. What's the best way to deal with this?</p>\n"}, {"tags": ["rust", "closures", "gstreamer"], "comments": [{"owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "edited": false, "score": 0, "creation_date": 1529262662, "post_id": 50899636, "comment_id": 88799203, "body": "Maybe you could create a new type <code>struct BoxedProbe(Box&lt;Fn...&gt;)</code> and then implement <code>Fn()</code> for that new type that forwards the call..."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 4, "creation_date": 1529265595, "post_id": 50899636, "comment_id": 88799953, "body": "I believe this is because <code>Box&lt;Fn(...)&gt;</code> does not itself implement <code>Fn(...)</code>. <a href=\"https://github.com/rust-lang/rust/issues/38132\" rel=\"nofollow noreferrer\">Issue #38132</a> is open... It&#39;s just possible that nobody&#39;s ever bothered to make the PR."}, {"owner": {"reputation": 85, "user_id": 1684550, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b541789ebc4e4a2125b67dbf48ad249c?s=128&d=identicon&r=PG", "display_name": "James Newman", "link": "https://stackoverflow.com/users/1684550/james-newman"}, "reply_to_user": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "edited": false, "score": 0, "creation_date": 1529271191, "post_id": 50899636, "comment_id": 88801164, "body": "@rodrigo I&#39;m new to rust. I guess if my new struct can be made to implement the exact Fn signature that add_probe requires as a parameter, then I could pass that type with it&#39;s known size? Then it&#39;s method would be called as the add_probe callback? I feel like this will be alot of boiler plate."}, {"owner": {"reputation": 85, "user_id": 1684550, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b541789ebc4e4a2125b67dbf48ad249c?s=128&d=identicon&r=PG", "display_name": "James Newman", "link": "https://stackoverflow.com/users/1684550/james-newman"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1529271249, "post_id": 50899636, "comment_id": 88801185, "body": "@trentcl Not the exact same errors, but I feel like you may be correct. If Box of Fn <i>did</i> implement Fn itself, then I could just pass the boxed value in? The duplicate of that issue has a better example: <a href=\"https://github.com/rust-lang/rust/issues/47024\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/47024</a>"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1529272795, "post_id": 50899636, "comment_id": 88801496, "body": "Not knowing the definition of <code>add_probe</code>, I was just guessing, but it does appear to be the case. I would expect, if the appropriate <code>impl</code>s were added to core, that things would &quot;just work&quot;."}], "answers": [{"comments": [{"owner": {"reputation": 85, "user_id": 1684550, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b541789ebc4e4a2125b67dbf48ad249c?s=128&d=identicon&r=PG", "display_name": "James Newman", "link": "https://stackoverflow.com/users/1684550/james-newman"}, "edited": false, "score": 0, "creation_date": 1529286759, "post_id": 50901576, "comment_id": 88803565, "body": "Alright, so to sum up, if I understand everything so far. The factory method in my first example does compile, and produces a Boxed closure. This is needed because there is no support for unsized rvalues currently. Simply enough, I can&#39;t ever unbox the closure to pass it as an argument to add_probe. If unsized rvalues are/is? implemented into rust, I could unbox the closure to pass it to add_probe(). If Box&lt;Fn()&gt; ever implements Fn() itself, then I could just pass the Box itself to add_probe()?"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "reply_to_user": {"reputation": 85, "user_id": 1684550, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b541789ebc4e4a2125b67dbf48ad249c?s=128&d=identicon&r=PG", "display_name": "James Newman", "link": "https://stackoverflow.com/users/1684550/james-newman"}, "edited": false, "score": 0, "creation_date": 1529287188, "post_id": 50901576, "comment_id": 88803627, "body": "Correct, I think. You can&#39;t unbox the closure because <code>Fn(...)</code> is unsized. If (hopefully when) unsized rvalues are implemented, <code>FnBox</code> will probably be deprecated to open the way for boxed <code>Fn</code> trait objects to implement the various <code>Fn</code> traits, and <code>.add_probe(..., boxed_probe_fn)</code> will start working."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "reply_to_user": {"reputation": 85, "user_id": 1684550, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b541789ebc4e4a2125b67dbf48ad249c?s=128&d=identicon&r=PG", "display_name": "James Newman", "link": "https://stackoverflow.com/users/1684550/james-newman"}, "edited": false, "score": 0, "creation_date": 1529288491, "post_id": 50901576, "comment_id": 88803827, "body": "@JamesNewman <a href=\"https://play.rust-lang.org/?gist=810d8f3d592426e118bceefb12cc49cd&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">Here&#39;s what I imagine the <code>ProbeFn</code> solution might look like in your case</a>. It surely needs some tweaking, but maybe gives you a rough idea"}], "tags": [], "owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "is_accepted": true, "score": 2, "last_activity_date": 1604526088, "last_edit_date": 1604526088, "creation_date": 1529283308, "answer_id": 50901576, "question_id": 50899636, "link": "https://stackoverflow.com/questions/50899636/returning-non-trivial-gstreamer-pad-callbacks-as-boxed-closures/50901576#50901576", "title": "Returning non-trivial gstreamer &quot;pad callbacks&quot; as boxed closures", "body": "<h1>Since Rust 1.35</h1>\n<p><code>Box&lt;dyn Fn(...)&gt;</code> implements <code>Fn(...)</code>, so you can simply pass the <code>Box</code> directly to <code>add_probe</code>:</p>\n<pre><code>        .add_probe(gst::PadProbeType::BLOCK, boxed_probe_fn);\n</code></pre>\n<h2>Original answer</h2>\n<blockquote>\n<p>This problem can be reduced to a surprisingly concise example:</p>\n<pre><code>fn call&lt;F: Fn()&gt;(f: F) {\n    f();\n}\n\nfn main() {\n    let g = || ();                            // closure that takes nothing and does nothing\n    let h = Box::new(|| ()) as Box&lt;dyn Fn()&gt;; // that but as a Fn() trait object\n    call(g); // works\n    call(h); // fails\n}\n</code></pre>\n<p>The heart of the problem is that <code>Box&lt;dyn Fn()&gt;</code> does not implement\n<code>Fn()</code>. There's no <em>good</em> reason this doesn't work, but there are a\ncollection of factors that make it awkward to fix:</p>\n<ol>\n<li>It's not possible to call a method that takes <code>self</code> by value on a trait object. This makes it not possible to call a <code>Box&lt;dyn FnOnce()&gt;</code>. The current workaround is to use <a href=\"https://doc.rust-lang.org/std/boxed/trait.FnBox.html\" rel=\"nofollow noreferrer\"><code>Box&lt;dyn FnBox&gt;</code></a>, which\n<em>does</em> implement <code>FnOnce()</code> (but this does not directly apply to your situation or the example above, since you want to use <code>Fn</code>).</li>\n<li>Despite this, <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1909-unsized-rvalues.md\" rel=\"nofollow noreferrer\">it may one day become possible</a>\nto call a <code>Box&lt;dyn FnOnce()&gt;</code>, so <code>FnBox</code> is in a sort of Limbo where\npeople don't want to fix or stabilize it to work around a temporary\nissue.</li>\n<li>Adding an <code>impl</code> to core to make <code>Fn()</code> work may nevertheless conflict with <code>FnBox</code> in ways that I don't quite grasp. <a href=\"https://github.com/rust-lang/rust/issues/28796\" rel=\"nofollow noreferrer\">There are\nseveral comments about this on issue\n#28796</a>.</li>\n</ol>\n<p>It's possible that implementing <code>Fn()</code> for <code>Box&lt;dyn Fn()&gt;</code> just can't\nbe done in the language as is. It's also possible that it could be\ndone, but is a bad idea for forwards compatibility reasons; and it's\nalso possible that it could be done and is a good idea, but nobody has\ndone it yet. That said, with things as they are now, you have a couple\nof mostly unpleasant options.</p>\n<p>As someone suggested in the question comments, you could make your own\nwrapper struct that wraps a closure, and implement <code>Fn()</code> for\n<code>Box&lt;Wrapper&lt;F&gt;&gt;</code>.</p>\n<p>You could make your own <em>trait</em> <code>ProbeFn</code>, which is implemented for\nany closure of the correct type, and implement <code>Fn()</code> for <code>Box&lt;dyn ProbeFn&gt;</code>.</p>\n<p>In some cases, you may be able to use a <code>&amp;dyn Fn()</code> instead of a\n<code>Box&lt;dyn Fn()&gt;</code>. This works in the above example:</p>\n<pre><code>    call(&amp;*h);\n</code></pre>\n<p>Unlike <code>Box&lt;dyn Fn()&gt;</code>, <code>&amp;dyn Fn()</code> <em>does</em> implement <code>Fn()</code>. It's not\nas general, though, because obviously it doesn't have ownership.\nHowever, it does work on the stable compiler -- implementing <code>Fn()</code>\nyourself requires unstable.</p>\n</blockquote>\n"}], "owner": {"reputation": 85, "user_id": 1684550, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b541789ebc4e4a2125b67dbf48ad249c?s=128&d=identicon&r=PG", "display_name": "James Newman", "link": "https://stackoverflow.com/users/1684550/james-newman"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 202, "favorite_count": 0, "accepted_answer_id": 50901576, "answer_count": 1, "score": 1, "last_activity_date": 1604526088, "creation_date": 1529262150, "last_edit_date": 1529269747, "question_id": 50899636, "link": "https://stackoverflow.com/questions/50899636/returning-non-trivial-gstreamer-pad-callbacks-as-boxed-closures", "title": "Returning non-trivial gstreamer &quot;pad callbacks&quot; as boxed closures", "body": "<p>I'm trying to write a factory function for the creation of closures for use as 'pad callbacks' in gstreamer. I've provided a stripped down example that should compile with <a href=\"https://github.com/sdroege/gstreamer-rs\" rel=\"nofollow noreferrer\">the gstreamer crate</a> and gstreamer binaries/plugins installed.</p>\n\n<p>Through my research, I've gotten the factory function to work by using the 'impl trait' method, instead of boxing. I'd like to figure out the boxed method though, as it seems more appropriate in some situations.</p>\n\n<p>This is as close as I've gotten. The problem can be seen by uncommenting the portion labeled <code>Closure function using 'Box&lt;&gt;'</code>. I've tried specifying the <code>Fn</code> portion as a type parameter with a <code>where clause</code>, as well as many other attempts. In this attempt, it looks like the issue is that I can't unbox the closure function to use as assignment to a local variable, or as use in the <code>add_probe</code> callback due to requiring compile-time size, which is the whole reason for the box in the first place...</p>\n\n<p><kbd>Ctrl</kbd>+<kbd>C</kbd> or 'exit\\n' from stdin should close the program.</p>\n\n<pre><code>extern crate gstreamer as gst;\n\nuse gst::prelude::*;\nuse std::io;\n\nfn create_impl_probe_fn(\n    x: i32,\n) -&gt; impl Fn(&amp;gst::Pad, &amp;mut gst::PadProbeInfo) -&gt; gst::PadProbeReturn + Send + Sync + 'static {\n    move |_, _| {\n        println!(\"Idle... {}\", x);\n\n        gst::PadProbeReturn::Pass\n    }\n}\n\nfn create_boxed_probe_fn(\n    x: i32,\n) -&gt; Box&lt;Fn(&amp;gst::Pad, &amp;mut gst::PadProbeInfo) -&gt; gst::PadProbeReturn + Send + Sync + 'static&gt; {\n    Box::new(move |_, _| {\n        println!(\"Idle... {}\", x);\n\n        gst::PadProbeReturn::Pass\n    })\n}\n\nfn main() {\n    println!(\"Starting...\");\n    //TODO Pass args to gst?\n    gst::init().unwrap();\n\n    //GStreamer\n    let parse_line = \"videotestsrc ! autovideosink name=mysink\";\n\n    let pipeline = gst::parse_launch(parse_line).unwrap();\n    let ret = pipeline.set_state(gst::State::Playing);\n    assert_ne!(ret, gst::StateChangeReturn::Failure);\n\n    //Inline closure\n    let mut x = 1;\n    pipeline\n        .clone()\n        .dynamic_cast::&lt;gst::Bin&gt;()\n        .unwrap()\n        .get_by_name(\"mysink\")\n        .unwrap()\n        .get_static_pad(\"sink\")\n        .unwrap()\n        .add_probe(gst::PadProbeType::BLOCK, move |_, _| {\n            println!(\"Idle... {}\", x);\n\n            gst::PadProbeReturn::Pass\n        });\n\n    //Closure function using 'impl'\n    x = 20;\n    let impl_probe_fn = create_impl_probe_fn(x);\n    //TEMP Test\n    pipeline\n        .clone()\n        .dynamic_cast::&lt;gst::Bin&gt;()\n        .unwrap()\n        .get_by_name(\"mysink\")\n        .unwrap()\n        .get_static_pad(\"sink\")\n        .unwrap()\n        .add_probe(gst::PadProbeType::BLOCK, impl_probe_fn);\n\n    /*\n    //Closure function using 'Box&lt;&gt;'\n    x = 300;\n    let boxed_probe_fn = create_boxed_probe_fn(x);\n    //TEMP Test\n    pipeline\n        .clone()\n        .dynamic_cast::&lt;gst::Bin&gt;()\n        .unwrap()\n        .get_by_name(\"mysink\")\n        .unwrap()\n        .get_static_pad(\"sink\")\n        .unwrap()\n        .add_probe(gst::PadProbeType::BLOCK, *boxed_probe_fn);\n    */\n\n    //Input Loop\n    loop {\n        let mut input = String::new();\n        io::stdin().read_line(&amp;mut input).unwrap();\n\n        match input.trim() {\n            \"exit\" =&gt; break,\n            \"info\" =&gt; {\n                let (state_change_return, cur_state, old_state) =\n                    pipeline.get_state(gst::CLOCK_TIME_NONE);\n                println!(\n                    \"Pipeline Info: {:?} {:?} {:?}\",\n                    state_change_return, cur_state, old_state\n                );\n            }\n            \"pause\" =&gt; {\n                let _ = pipeline.set_state(gst::State::Paused);\n                println!(\"Pausing\");\n            }\n            \"resume\" =&gt; {\n                let _ = pipeline.set_state(gst::State::Playing);\n                println!(\"Resuming\");\n            }\n            _ =&gt; println!(\"Unrecognized command: '{}'\", input.trim()),\n        }\n\n        println!(\"You've entered: {}\", input.trim());\n    }\n\n    //Shutdown\n    let ret = pipeline.set_state(gst::State::Null);\n    assert_ne!(ret, gst::StateChangeReturn::Failure);\n    println!(\"Shutting down streamer\");\n}\n</code></pre>\n\n<p>I know several similar questions exist on the net and here at SO, but I can't seem to figure how to apply any of the solutions to this specific function. I've included \"non-trivial\" and \"gstreamer\" in the title to differentiate.</p>\n\n<p>[EDIT]\nSorry, here's a bit more info... just didn't want to muddy the water or complicate the issue...</p>\n\n<p>I can't post everything I've tried. It's well over 10+ hours of small changes/attempts and many tabs. I can reproduce a few attempts that seemed close, or that I expected to work.</p>\n\n<p>The above Box attempt is how I figured it would work based on the information here:\n<a href=\"https://doc.rust-lang.org/1.4.0/book/closures.html\" rel=\"nofollow noreferrer\">https://doc.rust-lang.org/1.4.0/book/closures.html</a></p>\n\n<p><a href=\"https://doc.rust-lang.org/book/second-edition/ch19-05-advanced-functions-and-closures.html\" rel=\"nofollow noreferrer\">https://doc.rust-lang.org/book/second-edition/ch19-05-advanced-functions-and-closures.html</a> (This one doesn't close over any stack values, and so doesn't have the 'move'.)</p>\n\n<p><a href=\"https://stackoverflow.com/questions/38748054/rust-closures-from-factory-functions\">Rust closures from factory functions</a> (More that makes me feel like what I have should work...)</p>\n\n<p>Box&lt;> section of the rust book: <a href=\"https://doc.rust-lang.org/book/second-edition/ch15-01-box.html\" rel=\"nofollow noreferrer\">https://doc.rust-lang.org/book/second-edition/ch15-01-box.html</a></p>\n\n<p>Here's the add_probe signature: <a href=\"https://sdroege.github.io/rustdoc/gstreamer/gstreamer/trait.PadExtManual.html#tymethod.add_probe\" rel=\"nofollow noreferrer\">https://sdroege.github.io/rustdoc/gstreamer/gstreamer/trait.PadExtManual.html#tymethod.add_probe</a></p>\n\n<p>Here's the error from the above (with offending add_probe call uncommented):    </p>\n\n<pre><code>error[E0277]: the trait bound `for&lt;'r, 's, 't0&gt; std::ops::Fn(&amp;'r gst::Pad, &amp;'s mut gst::PadProbeInfo&lt;'t0&gt;) -&gt; gst::PadProbeReturn + std::marker::Send + std::marker::Sync: std::marker::Sized` is not satisfied\n  --&gt; src/main.rs:63:14\n   |\n63 |             .add_probe(gst::PadProbeType::BLOCK, *boxed_probe_fn);\n   |              ^^^^^^^^^ `for&lt;'r, 's, 't0&gt; std::ops::Fn(&amp;'r gst::Pad, &amp;'s mut gst::PadProbeInfo&lt;'t0&gt;) -&gt; gst::PadProbeReturn + std::marker::Send + std::marker::Sync` does not have a constant size known at compile-time\n   |\n   = help: the trait `std::marker::Sized` is not implemented for `for&lt;'r, 's, 't0&gt; std::ops::Fn(&amp;'r gst::Pad, &amp;'s mut gst::PadProbeInfo&lt;'t0&gt;) -&gt; gst::PadProbeReturn + std::marker::Send + std::marker::Sync`\n</code></pre>\n\n<p>So, I guess since the size of the closure isn't known at compile-time, I can't pass it as an argument?</p>\n\n<p>Changing the dereference to be on the assignement line above the '.add_probe' gives a similar error:</p>\n\n<pre><code>error[E0277]: the trait bound `for&lt;'r, 's, 't0&gt; std::ops::Fn(&amp;'r gst::Pad, &amp;'s mut gst::PadProbeInfo&lt;'t0&gt;) -&gt; gst::PadProbeReturn + std::marker::Send + std::marker::Sync: std::marker::Sized` is not satisfied\n  --&gt; src/main.rs:57:13\n   |\n57 |         let boxed_probe_fn = *create_boxed_probe_fn(x);\n   |             ^^^^^^^^^^^^^^ `for&lt;'r, 's, 't0&gt; std::ops::Fn(&amp;'r gst::Pad, &amp;'s mut gst::PadProbeInfo&lt;'t0&gt;) -&gt; gst::PadProbeReturn + std::marker::Send + std::marker::Sync` does not have a constant size known at compile-time\n   |\n   = help: the trait `std::marker::Sized` is not implemented for `for&lt;'r, 's, 't0&gt; std::ops::Fn(&amp;'r gst::Pad, &amp;'s mut gst::PadProbeInfo&lt;'t0&gt;) -&gt; gst::PadProbeReturn + std::marker::Send + std::marker::Sync`\n   = note: all local variables must have a statically known size\n\nerror[E0277]: the trait bound `for&lt;'r, 's, 't0&gt; std::ops::Fn(&amp;'r gst::Pad, &amp;'s mut gst::PadProbeInfo&lt;'t0&gt;) -&gt; gst::PadProbeReturn + std::marker::Send + std::marker::Sync: std::marker::Sized` is not satisfied\n  --&gt; src/main.rs:63:14\n   |\n63 |             .add_probe(gst::PadProbeType::BLOCK, boxed_probe_fn);\n   |              ^^^^^^^^^ `for&lt;'r, 's, 't0&gt; std::ops::Fn(&amp;'r gst::Pad, &amp;'s mut gst::PadProbeInfo&lt;'t0&gt;) -&gt; gst::PadProbeReturn + std::marker::Send + std::marker::Sync` does not have a constant size known at compile-time\n   |\n   = help: the trait `std::marker::Sized` is not implemented for `for&lt;'r, 's, 't0&gt; std::ops::Fn(&amp;'r gst::Pad, &amp;'s mut gst::PadProbeInfo&lt;'t0&gt;) -&gt; gst::PadProbeReturn + std::marker::Send + std::marker::Sync`\n</code></pre>\n\n<p>I understand the need for a stack based binding to need a compile-time size.... so this almost feels imposible to do unless the add_probe function itself took a Boxed&lt;> arguement?</p>\n\n<p>Onto some more attempts. Several places, including the add_probe function signature itself use a Type parameter and the 'where' clause to specify the Fn trait.</p>\n\n<p>add_probe declaration: <a href=\"https://github.com/sdroege/gstreamer-rs/blob/db3fe694154c697afdaf3efb6ec65332546942e0/gstreamer/src/pad.rs\" rel=\"nofollow noreferrer\">https://github.com/sdroege/gstreamer-rs/blob/db3fe694154c697afdaf3efb6ec65332546942e0/gstreamer/src/pad.rs</a></p>\n\n<p>Post recomending using the 'where' clause: <a href=\"https://stackoverflow.com/questions/32618872/sized-is-not-implemented-for-the-type-fn\">Sized is not implemented for the type Fn</a></p>\n\n<p>So, let's try that, changing the create_boxed_probe_fn to:</p>\n\n<pre><code>fn create_boxed_probe_fn&lt;F&gt;(x: i32) -&gt; Box&lt;F&gt;\n    where F: Fn(&amp;gst::Pad, &amp;mut gst::PadProbeInfo) -&gt; gst::PadProbeReturn + Send + Sync + 'static {\n    Box::new(move |_, _| {\n        println!(\"Idle... {}\", x);\n\n        gst::PadProbeReturn::Pass\n    })\n}\n</code></pre>\n\n<p>Error:</p>\n\n<pre><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:15:18\n   |\n15 |           Box::new(move |_, _| {\n   |  __________________^\n16 | |             println!(\"Idle... {}\", x);\n17 | |\n18 | |             gst::PadProbeReturn::Pass\n19 | |         })\n   | |_________^ expected type parameter, found closure\n   |\n   = note: expected type `F`\n              found type `[closure@src/main.rs:15:18: 19:10 x:_]`\n</code></pre>\n\n<p>This seems to be because we've specified the type above, but a closure ofcourse is it's own type. Trying the following doesn't work, as it's a trait, and can't be cast with 'as':</p>\n\n<pre><code>fn create_boxed_probe_fn&lt;F&gt;(x: i32) -&gt; Box&lt;F&gt;\n    where F: Fn(&amp;gst::Pad, &amp;mut gst::PadProbeInfo) -&gt; gst::PadProbeReturn + Send + Sync + 'static {\n    Box::new(move |_, _| {\n        println!(\"Idle... {}\", x);\n\n        gst::PadProbeReturn::Pass\n    } as F)\n}\n</code></pre>\n\n<p>Error:</p>\n\n<pre><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:15:18\n   |\n15 |           Box::new(move |_, _| {\n   |  __________________^\n16 | |             println!(\"Idle... {}\", x);\n17 | |\n18 | |             gst::PadProbeReturn::Pass\n19 | |         } as F)\n   | |______________^ expected type parameter, found closure\n   |\n   = note: expected type `F`\n              found type `[closure@src/main.rs:15:18: 19:15 x:_]`\n\nerror[E0605]: non-primitive cast: `gst::PadProbeReturn` as `F`\n  --&gt; src/main.rs:15:30\n   |\n15 |           Box::new(move |_, _| {\n   |  ______________________________^\n16 | |             println!(\"Idle... {}\", x);\n17 | |\n18 | |             gst::PadProbeReturn::Pass\n19 | |         } as F)\n   | |______________^\n   |\n   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n</code></pre>\n\n<p>It mentions the 'From' trait. I've not looked into that, because implimenting traits for a closure doesn't seem right. I'm not even sure it's possible?</p>\n\n<p>I also tried what they seem to call type ascription (Instead of 'as F' using ':F'), but this seem unsupported at this time: <a href=\"https://github.com/rust-lang/rust/issues/23416\" rel=\"nofollow noreferrer\">https://github.com/rust-lang/rust/issues/23416</a></p>\n\n<p>This guy had the same issue, but it seems like his solution was to not use a type parameter and instead specify the Fn portion without the where clause. (Which is my top non-working attempt.) Not entirely sure, since he doesn't post what he did to fix it. <a href=\"https://github.com/rust-lang/rust/issues/51154\" rel=\"nofollow noreferrer\">https://github.com/rust-lang/rust/issues/51154</a></p>\n\n<p>No amount of adding the impl keyword to any of the box versions seems to help. The syntax for using it like I do in the unboxed \"working\" version seems new and I haven't found great documentation on it. Here's some info on it: <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1522-conservative-impl-trait.md\" rel=\"nofollow noreferrer\">https://github.com/rust-lang/rfcs/blob/master/text/1522-conservative-impl-trait.md</a></p>\n\n<p>More links that are related:</p>\n\n<p><a href=\"https://stackoverflow.com/questions/27831944/how-do-i-store-a-closure-in-rust\">How do I store a closure in Rust?</a></p>\n\n<p><a href=\"https://stackoverflow.com/questions/44609432/closure-in-the-return-type-for-a-rust-function\">Closure in the return type for a Rust function</a></p>\n\n<p><a href=\"https://stackoverflow.com/questions/29879372/expected-trait-coreopsfnmut-found-type-parameter\">expected trait core::ops::FnMut, found type parameter</a></p>\n\n<p><a href=\"https://doc.rust-lang.org/std/boxed/trait.FnBox.html\" rel=\"nofollow noreferrer\">https://doc.rust-lang.org/std/boxed/trait.FnBox.html</a></p>\n"}, {"tags": ["rust", "yaml"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 0, "last_activity_date": 1562185977, "last_edit_date": 1562185977, "creation_date": 1529266605, "answer_id": 50900145, "question_id": 50897929, "link": "https://stackoverflow.com/questions/50897929/how-do-i-store-a-yaml-rust-enum-into-an-instance-of-a-struct/50900145#50900145", "title": "How do I store a yaml-rust enum into an instance of a struct?", "body": "<p>Re-read the error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>expected type `yaml_rust::Yaml`\n   found type `&amp;yaml_rust::Yaml`\n</code></pre>\n\n<p>You don't have an instance of <code>Yaml</code>; you have <em>a reference</em> to an instance. Go back and review <a href=\"https://doc.rust-lang.org/book\" rel=\"nofollow noreferrer\"><em>The Rust Programming Language</em></a>, specifically the chapter on <a href=\"https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html\" rel=\"nofollow noreferrer\">references and borrowing</a>.</p>\n\n<p>You can remove the value from the <code>docs</code> vector and pass it into your struct:</p>\n\n<pre><code>let mut docs = YamlLoader::load_from_str(s).unwrap();\nlet doc = docs.swap_remove(0);\nlet _book = Book { doc };\n</code></pre>\n"}], "owner": {"reputation": 211, "user_id": 1242853, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/533a232628640bc2635e6d6e0fcb2528?s=128&d=identicon&r=PG", "display_name": "okuryu", "link": "https://stackoverflow.com/users/1242853/okuryu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 206, "favorite_count": 0, "accepted_answer_id": 50900145, "answer_count": 1, "score": 0, "last_activity_date": 1562185977, "creation_date": 1529248384, "last_edit_date": 1529266289, "question_id": 50897929, "link": "https://stackoverflow.com/questions/50897929/how-do-i-store-a-yaml-rust-enum-into-an-instance-of-a-struct", "title": "How do I store a yaml-rust enum into an instance of a struct?", "body": "<p>I'm trying to define a struct which has the <code>Yaml</code> type from <a href=\"https://github.com/chyh1990/yaml-rust\" rel=\"nofollow noreferrer\">yaml-rust</a> but it doesn't work. What data type should I use in the struct in this case?</p>\n\n<pre><code>extern crate yaml_rust;\n\nuse yaml_rust::{Yaml, YamlLoader};\n\nstruct Book {\n    doc: Yaml,\n}\n\nfn main() {\n    let s = \"\nfoo:\n    - list1\n    - list2\n\";\n    let docs = YamlLoader::load_from_str(s).unwrap();\n    let doc = &amp;docs[0];\n    let _book = Book { doc: doc };\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:17:29\n   |\n17 |     let _book = Book { doc: doc };\n   |                             ^^^ expected enum `yaml_rust::Yaml`, found reference\n   |\n   = note: expected type `yaml_rust::Yaml`\n              found type `&amp;yaml_rust::Yaml`\n</code></pre>\n"}, {"tags": ["generics", "rust", "heap", "generator"], "answers": [{"comments": [{"owner": {"reputation": 15065, "user_id": 723090, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/ML1tj.png?s=128&g=1", "display_name": "Mark", "link": "https://stackoverflow.com/users/723090/mark"}, "edited": false, "score": 0, "creation_date": 1529232076, "post_id": 50895773, "comment_id": 88791661, "body": "Ah the extra box was coming from the impl, that makes sense! Also useful ps, thanks."}], "tags": [], "owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "is_accepted": true, "score": 3, "last_activity_date": 1529231303, "creation_date": 1529231303, "answer_id": 50895773, "question_id": 50895121, "link": "https://stackoverflow.com/questions/50895121/rust-expects-two-levels-of-boxing-for-generator-while-i-only-specified-one/50895773#50895773", "title": "Rust expects two levels of boxing for generator while I only specified one", "body": "<p>There are a couple of problems here.</p>\n\n<p>First, you define <code>Containter&lt;G&gt;</code> as having a member of type <code>Box&lt;G&gt;</code>. Then you write the <code>impl</code> for <code>Containter&lt;Box&lt;G&gt;&gt;</code>, that naturally has a member of type <code>Box&lt;Box&lt;G&gt;&gt;</code>. Probably you just want:</p>\n\n<pre><code>impl Container&lt;Generator&lt;Yield = Value, Return = ()&gt;&gt; {\n    ...\n}\n</code></pre>\n\n<p>Second, if you compile again you have this error:</p>\n\n<p>|</p>\n\n<pre><code>16 |         Box::new(Container {\n   |                  ^^^^^^^^^ `std::ops::Generator&lt;Yield=Value, Return=()&gt;` does not have a constant size known at compile-time\n   |\n   = help: the trait `std::marker::Sized` is not implemented for `std::ops::Generator&lt;Yield=Value, Return=()&gt;`\nnote: required by `Container`\n  --&gt; a.rs:7:1\n   |\n7  | struct Container&lt;G: Generator&lt;Yield = Value, Return = ()&gt;&gt; {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>This means that <code>struct Containter</code> requires that <code>G</code> is sized, but your generator  doesn't implement it. That's true, you want <code>Box&lt;G&gt;</code> to be a trait object, so <code>G</code> will be unsized (a trait type). But type arguments in structs are <code>Sized</code> by default. The solution is to add <code>?Sized</code> requirement to <code>Container</code>:</p>\n\n<pre><code>struct Container&lt;G: Generator&lt;Yield = Value, Return = ()&gt; + ?Sized&gt; {\n    generator: Box&lt;G&gt;,\n}\n</code></pre>\n\n<p>And now it compiles.</p>\n\n<p><strong>PS</strong>: If your <code>Container</code> struct is to be used only with <code>Generator</code> trait objects it is far easier to get rid of the generic arguments and just write:</p>\n\n<pre><code>struct Container {\n    generator: Box&lt;Generator&lt;Yield = Value, Return = ()&gt;&gt;,\n}\n\nimpl Container {\n    pub fn new(&amp;mut self) -&gt; Box&lt;Self&gt; {\n        let generator = Box::new(|| loop {\n            yield Value {}\n        });\n        Box::new(Container {\n            generator: generator,\n        })\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 15065, "user_id": 723090, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/ML1tj.png?s=128&g=1", "display_name": "Mark", "link": "https://stackoverflow.com/users/723090/mark"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 134, "favorite_count": 0, "accepted_answer_id": 50895773, "answer_count": 1, "score": 0, "last_activity_date": 1529231303, "creation_date": 1529225473, "question_id": 50895121, "link": "https://stackoverflow.com/questions/50895121/rust-expects-two-levels-of-boxing-for-generator-while-i-only-specified-one", "title": "Rust expects two levels of boxing for generator while I only specified one", "body": "<p>I am encountering a compiler error for something that I feel should work.</p>\n\n<p>I tried <a href=\"https://play.rust-lang.org/?gist=2368732e727c3204ab03d725bc9d29c9&amp;version=nightly&amp;mode=debug\" rel=\"nofollow noreferrer\">this code</a> (note generators are nightly-only at the time of writing):</p>\n\n<pre><code>#![feature(generators, generator_trait)]\n\nuse std::ops::Generator;\n\nstruct Value {}\n\nstruct Container&lt;G: Generator&lt;Yield = Value, Return = ()&gt;&gt; {\n    generator: Box&lt;G&gt;,\n}\n\nimpl Container&lt;Box&lt;Generator&lt;Yield = Value, Return = ()&gt;&gt;&gt; {\n    pub fn new(&amp;mut self) -&gt; Box&lt;Self&gt; {\n        let generator: Box&lt;Generator&lt;Yield = Value, Return = ()&gt;&gt; = Box::new(|| loop {\n            yield Value {}\n        });\n        Box::new(Container {\n            generator: generator,\n        })\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>where I get this error:</p>\n\n<pre><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:20:24\n   |\n20 |             generator: generator,\n   |                        ^^^^^^^^^ expected struct `std::boxed::Box`, found trait std::ops::Generator\n   |\n   = note: expected type `std::boxed::Box&lt;std::boxed::Box&lt;std::ops::Generator&lt;Yield=Value, Return=()&gt;&gt;&gt;`\n              found type `std::boxed::Box&lt;std::ops::Generator&lt;Yield=Value, Return=()&gt;&gt;`\n\nerror: aborting due to previous error\n</code></pre>\n\n<p>I don't understand why two levels of boxing are expected here, I only asked for one (<code>Box&lt;G&gt;</code>).</p>\n\n<p>It looks like <code>Generator</code> is indeed a trait, not an alias for <code>Box&lt;...&gt;</code>. I can't think of other explanations.</p>\n\n<p>I can easily resolve the error by replacing <code>Box&lt;G&gt;</code> by <code>G</code>, but I want to know why my way does not work (could it be a bug?).</p>\n\n<p><em>Nightly version 1.28.0-nightly (2018-06-15 967c1f3be1c9ce0469ae) in debug mode on the playground (but I have a similar issue locally with more complex code).</em></p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1529205431, "post_id": 50893327, "comment_id": 88787124, "body": "<i>how can every consumer receive a message</i> \u2014 FWIW, I don&#39;t believe that&#39;s the normal behavior of such channels. Usually it&#39;s that <i>one</i> consumer gets a message. Think of a &quot;fan-out&quot; pattern, where one thread owns a resource (e.g. network socket) and then hands off the work to one of many threads."}, {"owner": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "edited": false, "score": 1, "creation_date": 1529223541, "post_id": 50893327, "comment_id": 88789785, "body": "The trivial implementation would be creating 10 channels and sending the message on all of them."}, {"owner": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "edited": false, "score": 0, "creation_date": 1529223655, "post_id": 50893327, "comment_id": 88789810, "body": "There are crates offering such functionality, e.g. <a href=\"https://github.com/jonhoo/bus\" rel=\"nofollow noreferrer\">jonhoo/bus</a> but I didn&#39;t look at any in detail."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1529459012, "post_id": 50896083, "comment_id": 88876284, "body": "Nope, not a bot, I just like to curate the <a href=\"https://stackoverflow.com/questions/tagged/rust\">rust</a> questions in order to learn things and keep the Q&amp;A useful to a maximal number of users."}, {"owner": {"reputation": 1125, "user_id": 2824342, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/0ea84a519cbc8e36fd15ced5da3fd3b6?s=128&d=identicon&r=PG&f=1", "display_name": "Cecile", "link": "https://stackoverflow.com/users/2824342/cecile"}, "edited": false, "score": 1, "creation_date": 1596721076, "post_id": 50896083, "comment_id": 111906421, "body": "(This was useful for me)"}], "tags": [], "owner": {"reputation": 961, "user_id": 1282369, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/LjubZ.jpg?s=128&g=1", "display_name": "tsatiz", "link": "https://stackoverflow.com/users/1282369/tsatiz"}, "is_accepted": true, "score": 4, "last_activity_date": 1529430644, "last_edit_date": 1529430644, "creation_date": 1529233958, "answer_id": 50896083, "question_id": 50893327, "link": "https://stackoverflow.com/questions/50893327/how-to-implement-single-producer-multiple-consumer-spmc-channels-in-rust/50896083#50896083", "title": "How to implement single producer, multiple consumer (SPMC) channels in Rust?", "body": "<p>Check out the <a href=\"https://github.com/jonhoo/bus\" rel=\"nofollow noreferrer\">bus</a> crate that <a href=\"https://stackoverflow.com/questions/50893327/how-to-implement-single-producer-multiple-consumer-spmc-channels-in-rust/50896083?noredirect=1#comment88789810_50893327\">@CodesInChaos mentioned</a>. A working example:</p>\n\n<pre><code>extern crate bus;\n\nuse std::thread;\n\nfn main() {\n    let mut bus = bus::Bus::new(10);\n    let mut receiver1 = bus.add_rx();\n    let mut receiver2 = bus.add_rx();\n    let mut receiver3 = bus.add_rx();\n\n    let a = thread::spawn(move || {\n        println!(\"receiver1 - {}\", receiver1.recv().expect(\"1\"));\n    });\n    let b = thread::spawn(move || {\n        println!(\"receiver2 - {}\", receiver2.recv().expect(\"2\"));\n    });\n    let c = thread::spawn(move || {\n        println!(\"receiver3 - {}\", receiver3.recv().expect(\"3\"));\n    });\n\n    bus.broadcast(42);\n    a.join().expect(\"a\");\n    b.join().expect(\"b\");\n    c.join().expect(\"c\");\n}\n</code></pre>\n"}], "owner": {"reputation": 5940, "user_id": 4605629, "user_type": "registered", "accept_rate": 98, "profile_image": "https://www.gravatar.com/avatar/741edb45b2f1d3e3c3d9555085004ad1?s=128&d=identicon&r=PG&f=1", "display_name": "Greg", "link": "https://stackoverflow.com/users/4605629/greg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1930, "favorite_count": 0, "closed_date": 1529323391, "accepted_answer_id": 50896083, "answer_count": 1, "score": 6, "last_activity_date": 1529430644, "creation_date": 1529204638, "last_edit_date": 1529204840, "question_id": 50893327, "link": "https://stackoverflow.com/questions/50893327/how-to-implement-single-producer-multiple-consumer-spmc-channels-in-rust", "closed_reason": "Needs more focus", "title": "How to implement single producer, multiple consumer (SPMC) channels in Rust?", "body": "<p>The standard library only has multiple producer, single consumer (MPSC) channels.</p>\n\n<p>That is, if there are 10 consumers, how can every consumer receive a message sent by a single producer?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1529196925, "post_id": 50892636, "comment_id": 88786201, "body": "Welcome to Stack Overflow! You should copy and paste the error text into your post, not only to sidestep the low-rep restriction but also to make it searchable for future people who have similar questions."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1529200224, "creation_date": 1529200224, "answer_id": 50893064, "question_id": 50892636, "link": "https://stackoverflow.com/questions/50892636/what-does-the-error-no-field-n-mean-when-iterating-on-an-array-of-tuples/50893064#50893064", "title": "What does the error &quot;no field `n`&quot; mean when iterating on an array of tuples?", "body": "<p>You should start by re-reading <a href=\"https://doc.rust-lang.org/book/second-edition\" rel=\"nofollow noreferrer\"><em>The Rust Programming Language</em></a>, specifically the <a href=\"https://doc.rust-lang.org/book/second-edition/ch03-02-data-types.html#the-tuple-type\" rel=\"nofollow noreferrer\">section about the tuple data type</a>.</p>\n\n<p>Tuple fields do not have names, <em>that's what makes them a tuple</em>. Thus, you cannot have a field called <code>n</code> on a tuple. That's what the error means.</p>\n\n<p>You cannot store the tuple index in a variable, either.</p>\n\n<p>You need to type the literal characters <code>.0</code> to access the field:</p>\n\n<pre><code>c[m].0\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/32030756/155423\">Reasons for Dot Notation for Tuple</a></li>\n<li><a href=\"https://stackoverflow.com/q/43176841/155423\">How to access the element at variable index of a tuple?</a></li>\n</ul>\n\n<hr>\n\n<p>You should also read the <a href=\"https://doc.rust-lang.org/book/second-edition/ch13-02-iterators.html\" rel=\"nofollow noreferrer\">chapter on iterators</a> and become familiar with all the methods on <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html\" rel=\"nofollow noreferrer\"><code>Iterator</code></a>. </p>\n\n<p>I'd recommend learning <a href=\"https://doc.rust-lang.org/book/second-edition/ch18-03-pattern-syntax.html\" rel=\"nofollow noreferrer\">patterns</a> as well.</p>\n\n<p>I'd write this code as:</p>\n\n<pre><code>fn highest_card(c: &amp;[(i32, char)]) {\n    let max = c.iter().max_by_key(|(val, _suit)| val);\n    println!(\"The max card is: {:?}\", max);\n}\n</code></pre>\n\n<p>Think hard about why the type of the variable <code>max</code> is an <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html\" rel=\"nofollow noreferrer\"><code>Option</code></a>.</p>\n"}], "owner": {"reputation": 7, "user_id": 8679395, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/66aef22671abca1776ad3073c00575fa?s=128&d=identicon&r=PG&f=1", "display_name": "coderMink", "link": "https://stackoverflow.com/users/8679395/codermink"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 132, "favorite_count": 0, "answer_count": 1, "score": -2, "last_activity_date": 1529200234, "creation_date": 1529193506, "last_edit_date": 1529200234, "question_id": 50892636, "link": "https://stackoverflow.com/questions/50892636/what-does-the-error-no-field-n-mean-when-iterating-on-an-array-of-tuples", "title": "What does the error &quot;no field `n`&quot; mean when iterating on an array of tuples?", "body": "<p>I'm doing a poker assignment in which a base of 2 hands is given and my goal is to figure out in each hand what the highest card is. I've tried to pass in the reference to each array to another function that is supposed to figure it out:</p>\n\n<pre><code>fn highest_card(c: &amp;[(i32, char)], d: &amp;[(i32, char)]) {\n    let mut max = 0;\n    let mut m: usize = 0;\n    let n: usize = 0;\n\n    while m &lt; c.len() {\n        if c[m].n &gt; max {\n            max = c[m].n;\n        }\n        m += 1;\n    }\n    println!(\"The max number is: {}\", max);\n}\n\nfn main() {\n    let hand1 = [(3, 'H'), (10, 'S'), (4, 'S'), (4, 'C'), (5, 'C')];\n    let hand2 = [(2, 'H'), (2, 'S'), (5, 'S'), (2, 'C'), (13, 'C')];\n    let xxx = highest_card(&amp;hand1, &amp;hand2);\n}\n</code></pre>\n\n<p>When running this, it displays the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0609]: no field `n` on type `(i32, char)`\n --&gt; src/main.rs:7:17\n  |\n7 |         if c[m].n &gt; max {\n  |                 ^\n\nerror[E0609]: no field `n` on type `(i32, char)`\n --&gt; src/main.rs:8:24\n  |\n8 |             max = c[m].n;\n  |                        ^\n</code></pre>\n\n<p>What should I do to address this issue?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 340, "user_id": 2862665, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/394d6a3e56f7f52c0888d3570cc71561?s=128&d=identicon&r=PG", "display_name": "monnoroch", "link": "https://stackoverflow.com/users/2862665/monnoroch"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1529188803, "post_id": 50891977, "comment_id": 88785258, "body": "@Shepmaster Thanks! However, I explicitly stated that the question is not about references, but lifetimes. The reference is just an example, I could have put <code>PhantomData&lt;&amp;T&gt;</code> there instead, which I now realize I should have done to avoid confusion."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1529189045, "post_id": 50891977, "comment_id": 88785280, "body": "That doesn&#39;t matter. The point of <code>PhantomData</code> is to &quot;act like&quot; you have the type even though you don&#39;t. You cant move a struct with a self-reference and you can&#39;t move a struct that looks like it has a self-reference either."}, {"owner": {"reputation": 340, "user_id": 2862665, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/394d6a3e56f7f52c0888d3570cc71561?s=128&d=identicon&r=PG", "display_name": "monnoroch", "link": "https://stackoverflow.com/users/2862665/monnoroch"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1529189213, "post_id": 50891977, "comment_id": 88785303, "body": "I see. Thanks for your answer! If you don&#39;t mind me asking, is there any way to get a marker value that can&#39;t outlive a host and can&#39;t be obtained twice for the host, which would be enforced in compile-time instead of with panicking in the <code>Host::get_marker(&amp;self)</code>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1529189455, "post_id": 50891977, "comment_id": 88785340, "body": "FYI, in the future, you should be aware of the <a href=\"https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem\">XY problem</a> and strive to avoid in when asking questions."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1529189521, "post_id": 50891977, "comment_id": 88785348, "body": "What purpose does this marker serve? My first high-level answer would be something like a type that wraps the <code>T</code> and only allows access in a controlled fashion with a closure."}, {"owner": {"reputation": 340, "user_id": 2862665, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/394d6a3e56f7f52c0888d3570cc71561?s=128&d=identicon&r=PG", "display_name": "monnoroch", "link": "https://stackoverflow.com/users/2862665/monnoroch"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1529189777, "post_id": 50891977, "comment_id": 88785395, "body": "The purpose is a clever API that doesn&#39;t allow the user to call some methods while  he doesn&#39;t have this marker and some methods that consume it. Yeah, I thought about closures, but it&#39;s not as pretty then. Having a panic is fine, just not as pretty as returning it with the host value. But still prettier than closures though."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1529190017, "post_id": 50891977, "comment_id": 88785423, "body": "Your comments here are too vague for me to provide any useful advice. I&#39;d possibly advise asking a brand new question focused on what you want to do, not how you&#39;ve attempted to create it. Show examples of how it would be used and what it would disallow doing. You could even show your lifetime-based attempt if you felt it contributed."}], "owner": {"reputation": 340, "user_id": 2862665, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/394d6a3e56f7f52c0888d3570cc71561?s=128&d=identicon&r=PG", "display_name": "monnoroch", "link": "https://stackoverflow.com/users/2862665/monnoroch"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 44, "favorite_count": 0, "closed_date": 1529187864, "answer_count": 0, "score": 0, "last_activity_date": 1529187428, "creation_date": 1529185216, "last_edit_date": 1529187428, "question_id": 50891977, "link": "https://stackoverflow.com/questions/50891977/can-i-return-a-value-and-a-reference-to-it-from-a-function", "closed_reason": "Duplicate", "title": "Can I return a value and a reference to it from a function?", "body": "<p>Here's a snippet:</p>\n\n<pre><code>struct T {}\n\nfn test&lt;'a&gt;() -&gt; (T, &amp;'a T) {\n    let t = T{};\n    (t, &amp;t)\n}\n</code></pre>\n\n<p>The compiler tells me the the value <code>t</code> doesn't live long enough, which is not quite true, since the hypothetical caller will own the value, so it's reasonable for him to also get a reference:</p>\n\n<pre><code>let (value, reference) = test(); // The value is alive here, so it's perfectly fine to reference it at this point.\n</code></pre>\n\n<p>Is there any way to achieve such a behavior? If not, are there any possible workarounds, besides getting a reference on a separate line like so?</p>\n\n<pre><code>let value = test();\nlet reference = &amp;value;\n</code></pre>\n\n<p>My actual case is not about a reference, but rather about a marker value that I want not to outlive the returned <code>T</code>, but the principle is the same. And I want the user to only be able to get a single marker, so a method on <code>T</code> is not quite what I want here. Note how my values are immutable: I understand that a reference will cause aliasing and this question is NOT about that.</p>\n"}, {"tags": ["generics", "rust", "traits", "serde"], "comments": [{"owner": {"reputation": 694, "user_id": 7033869, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-qhp8umXBLiA/AAAAAAAAAAI/AAAAAAAAAAA/faBbkZ-N7fw/photo.jpg?sz=128", "display_name": "Francois Mockers", "link": "https://stackoverflow.com/users/7033869/francois-mockers"}, "edited": false, "score": 0, "creation_date": 1529190443, "post_id": 50891564, "comment_id": 88785485, "body": "This compile fine for me on rust 1.26.2"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1529191099, "post_id": 50891564, "comment_id": 88785567, "body": "Probably a duplicate of <a href=\"https://stackoverflow.com/q/44437123/155423\">Why is a trait not implemented for a type that clearly has it implemented?</a> but since we cannot reproduce the error, this is off topic as is."}], "owner": {"reputation": 241, "user_id": 1550188, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5fc48bac07a01f7773894386398a61d0?s=128&d=identicon&r=PG", "display_name": "Bradley Nowacki", "link": "https://stackoverflow.com/users/1550188/bradley-nowacki"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 114, "favorite_count": 0, "answer_count": 0, "score": 1, "last_activity_date": 1538857948, "creation_date": 1529181433, "last_edit_date": 1538857948, "question_id": 50891564, "link": "https://stackoverflow.com/questions/50891564/setting-trait-bounds-on-objects-created-within-a-function", "title": "Setting trait bounds on objects created within a function", "body": "<p>I'm fooling around with the <a href=\"https://github.com/servo/ipc-channel\" rel=\"nofollow noreferrer\">ipc-channel</a> crate,  trying to build a generic struct that holds an <code>IpcOneShotServer</code>:</p>\n\n<pre><code>extern crate ipc_channel;\nextern crate serde;\n\nuse ipc_channel::{ipc, Error};\nuse serde::{Deserialize, Serialize};\n\nstruct Supervisor&lt;T&gt; {\n    server: ipc::IpcOneShotServer&lt;T&gt;,\n}\n\nimpl&lt;T&gt; Supervisor&lt;T&gt;\nwhere\n    T: for&lt;'de&gt; Deserialize&lt;'de&gt; + Serialize,\n{\n    fn new() -&gt; Result&lt;Supervisor&lt;T&gt;, Error&gt; {\n        let (server, _) = ipc::IpcOneShotServer::new()?;\n        Ok(Supervisor { server: server })\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>When I try to compile this code, I get the following errors </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `for&lt;'de&gt; T: serde::de::Deserialize&lt;'de&gt;` is not satisfied\n  --&gt; src/main.rs:67:27\n   |\n67 |         let (server, _) = ipc::IpcOneShotServer::new()?;\n   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `for&lt;'de&gt; serde::de::Deserialize&lt;'de&gt;` is not implemented for `T`\n   |\n   = help: consider adding a `where for&lt;'de&gt; T: serde::de::Deserialize&lt;'de&gt;` bound\n   = note: required by `&lt;ipc_channel::ipc::IpcOneShotServer&lt;T&gt;&gt;::new`\n\nerror[E0277]: the trait bound `T: serde::ser::Serialize` is not satisfied\n  --&gt; src/main.rs:67:27\n   |\n67 |         let (server, _) = ipc::IpcOneShotServer::new()?;\n   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `serde::ser::Serialize` is not implemented for `T`\n   |\n   = help: consider adding a `where T: serde::ser::Serialize` bound\n   = note: required by `&lt;ipc_channel::ipc::IpcOneShotServer&lt;T&gt;&gt;::new`\n</code></pre>\n\n<p>I'm not sure what I'm missing here. I have bounded the trait <code>T</code> by both <code>Deserialize</code> and <code>Serialize</code>. I thought that by binding the trait in the impl by those two other traits this would tell the type checker that as long as a <code>Supervisor</code> of type <code>T</code> implements <code>Deserialize</code> and <code>Serialize</code> it's safe to call <code>ipc::IpcOneShotServer::new()</code>. </p>\n"}, {"tags": ["rust", "borrow-checker"], "comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1529172671, "post_id": 50890373, "comment_id": 88781969, "body": "If stdin contains <code>\\n\\nhello\\nworld\\n</code> and <code>content_length</code> is 10, should <code>buf</code> contain <code>hello\\nworl</code> and <code>line</code> contain <code>d</code> in the next iteration? Or do you want to stop processing lines (break out of the loop) after reading the first empty line?"}, {"owner": {"reputation": 8608, "user_id": 1091116, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/15098b2b940cacd8b4d07026e01e3102?s=128&d=identicon&r=PG", "display_name": "d33tah", "link": "https://stackoverflow.com/users/1091116/d33tah"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1529174505, "post_id": 50890373, "comment_id": 88782377, "body": "@trentcl I think that in this case I would expect it to read 10 bytes after first empty line, which would mean that the string would start with <code>\\nhello</code>."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1529174974, "post_id": 50890373, "comment_id": 88782497, "body": "Sorry, I meant something like <code>&quot;Content-Length: 10\\n\\nhello\\nworld\\n&quot;</code>. But I&#39;m wondering what your plan is for the trailing bytes; do they have to show up in the next iteration of the loop?"}, {"owner": {"reputation": 8608, "user_id": 1091116, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/15098b2b940cacd8b4d07026e01e3102?s=128&d=identicon&r=PG", "display_name": "d33tah", "link": "https://stackoverflow.com/users/1091116/d33tah"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1529175237, "post_id": 50890373, "comment_id": 88782549, "body": "yes, that&#39;s what I would expect as after Content-Length there should be another WARC object."}], "answers": [{"tags": [], "owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "is_accepted": false, "score": 2, "last_activity_date": 1529195653, "last_edit_date": 1529195653, "creation_date": 1529179265, "answer_id": 50891326, "question_id": 50890373, "link": "https://stackoverflow.com/questions/50890373/is-it-possible-to-perform-another-read-in-the-middle-of-stdin-lines/50891326#50891326", "title": "Is it possible to perform another read in the middle of stdin.lines()?", "body": "<p>Alternating between buffered and non-buffered reads of the same stream can be quite tricky. If you didn't have to <code>lock</code> standard input in order to call <code>lines()</code>, the internal buffer used to implement <code>StdinLock</code> could consume beyond the <code>\\n</code> of the empty line, and the subsequent <code>read_exact</code> call would not start at the right place.</p>\n\n<p>So you have to <code>lock</code> it only once, and you have to call <code>read_exact</code> on the same buffered reader that gave you the <code>Lines</code>, to be sure no bytes are lost. At first glance this looks impossible: <code>lines()</code> takes <code>self</code> by value, so once you've called it, you can't call <code>read_exact</code> on the same object. But there's a bit of a trick you can use.</p>\n\n<p>The documentation for <code>BufRead</code> <a href=\"https://doc.rust-lang.org/std/io/trait.BufRead.html#implementors\" rel=\"nofollow noreferrer\">contains</a> this blanket <code>impl</code>:</p>\n\n<pre><code>impl&lt;'a, B: BufRead + ?Sized&gt; BufRead for &amp;'a mut B\n</code></pre>\n\n<p><code>&amp;mut</code> references to things that implement <code>BufRead</code> <em>also</em> implement <code>BufRead</code>. So you can take a temporary <code>&amp;mut</code> reference of your <code>StdinLock</code>, call <code>lines()</code> on <em>that</em>, discard the <code>Lines</code> in time to <code>read_exact</code> the payload into <code>buf</code>, and then start over again with another <code>&amp;mut</code> reference and another <code>Lines</code>.</p>\n\n<p>This approach necessitates adding another loop, with a flag <code>has_header</code> to indicate whether to break the outer loop. It's not very pretty, but maybe you can work with it.</p>\n\n<pre><code>let stdin = io::stdin();\nlet mut stdin_buf = stdin.lock();\n\n'record: loop {\n    let mut content_length = 0;\n    let mut has_header = false;\n    'header: for line_wrapped in (&amp;mut stdin_buf).lines() {\n        let line = line_wrapped.unwrap();\n        if line.starts_with(\"Content-Length: \") {\n            content_length = line[\"Content-Length: \".len()..].parse().unwrap();\n        }\n        if line.is_empty() {\n            has_header = true;\n            break 'header;\n        }\n    }\n    if has_header {\n        let mut buf = vec![0u8; content_length];\n        stdin_buf.read_exact(&amp;mut buf).unwrap();\n        println!(\"{:?}\", buf);\n    } else {\n        break 'record;\n    }\n}\n</code></pre>\n\n<p>A final note: It's unclear what should happen when the <code>Content-Length</code> header is absent. If your original code worked, it would reuse the previously defined value (whatever the last content length was, or 0 for the first record). My version just uses 0 all the time. It's idiomatic in Rust to use <code>Option</code> to represent possibly-uninitialized values such as <code>content_length</code>, so initializing it to <code>None</code> could be a better option if the absence of a <code>Content-Length</code> header is an error that needs to be detected.</p>\n"}], "owner": {"reputation": 8608, "user_id": 1091116, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/15098b2b940cacd8b4d07026e01e3102?s=128&d=identicon&r=PG", "display_name": "d33tah", "link": "https://stackoverflow.com/users/1091116/d33tah"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 56, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1529195653, "creation_date": 1529171802, "last_edit_date": 1529188895, "question_id": 50890373, "link": "https://stackoverflow.com/questions/50890373/is-it-possible-to-perform-another-read-in-the-middle-of-stdin-lines", "title": "Is it possible to perform another read in the middle of stdin.lines()?", "body": "<p>Consider the following code:</p>\n\n<pre><code>use std::io::{self, BufRead, Read};\n\nfn main() {\n    let mut stdin = io::stdin();\n\n    let mut content_length = 0;\n    for line_wrapped in stdin.lock().lines() {\n        let line = line_wrapped.unwrap();\n        if line == \"\" {\n            let mut buf = vec![0u8; content_length];\n            stdin.read_exact(&amp;mut buf).unwrap();\n            print!(\"{:?}\", buf);\n        }\n        if line.starts_with(\"Content-Length: \") {\n            content_length = line\n                .split(\"Content-Length: \")\n                .nth(1)\n                .unwrap()\n                .parse()\n                .unwrap();\n        }\n    }\n}\n</code></pre>\n\n<p>And the compiler output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `stdin` as mutable because it is also borrowed as immutable\n  --&gt; src/main.rs:11:13\n   |\n7  |     for line_wrapped in stdin.lock().lines() {\n   |                         ----- immutable borrow occurs here\n...\n11 |             stdin.read_exact(&amp;mut buf).unwrap();\n   |             ^^^^^ mutable borrow occurs here\n...\n22 |     }\n   |     - immutable borrow ends here\n</code></pre>\n\n<p>Is there a way I could fix the error while keeping a similar structure of the program (read within a <code>.lines()</code>)?</p>\n"}, {"tags": ["testing", "rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 6, "last_activity_date": 1529161072, "last_edit_date": 1529161072, "creation_date": 1529159455, "answer_id": 50888801, "question_id": 50888225, "link": "https://stackoverflow.com/questions/50888225/is-there-a-way-of-detecting-whether-code-is-being-called-from-tests-in-rust/50888801#50888801", "title": "Is there a way of detecting whether code is being called from tests in Rust?", "body": "<h3>Runtime detection of tests</h3>\n\n<p>There's no global variable that is set when <em>running</em> tests. You could add one, but it's pretty complicated to get it right. This example <strong>does not</strong> get it completely right:</p>\n\n<pre><code>use std::cell::Cell;\n\nthread_local! {\n    pub static IS_TESTING: Cell&lt;bool&gt; = Cell::new(false);\n}\n\nfn my_code() -&gt; u8 {\n    if IS_TESTING.with(|t| t.get()) {\n        0\n    } else {\n        42\n    }\n}\n\n#[test]\nfn one() {\n    IS_TESTING.with(|t| t.set(true));\n\n    assert_eq!(0, my_code());\n\n    IS_TESTING.with(|t| t.set(false));\n}\n</code></pre>\n\n<p>To do this correctly, you need to handle a few things:</p>\n\n<ol>\n<li>Tests are run in a multithreaded environment, so you need to make sure that you handle that.</li>\n<li>Using a thread-local is probably incorrect if your code spawns <em>new</em> threads, as the variable won't carry over to them.</li>\n<li>You need to make sure to set the flag back to false even when the test aborts early due to an assertion failure.</li>\n</ol>\n\n<h3>Compile time detection of tests</h3>\n\n<p>More likely, what you want is to detect if you are <em>compiling</em> for tests. This is much simpler and you are probably already using the same technique to conditionally compile your tests themselves:</p>\n\n<pre><code>fn my_code() -&gt; u8 {\n    if cfg!(test) {\n        0\n    } else {\n        42\n    }\n}\n\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn one() {\n        assert_eq!(0, my_code());\n    }\n}\n</code></pre>\n\n<h3>Dependency injection is better</h3>\n\n<p>Editorially, runtime or compile time detection is a bad idea from the perspective of code quality. Instead of littering your code with boatloads of conditional checks that will complicate and perhaps even slow down your code, introduce <em>dependency injection</em>:</p>\n\n<pre><code>trait ValueSource {\n    fn value(&amp;self) -&gt; u8;\n}\n\nstruct ProductionSource;\nimpl ValueSource for ProductionSource {\n    fn value(&amp;self) -&gt; u8 {\n        42\n    }\n}\n\nfn my_code&lt;S&gt;(source: S) -&gt; u8\nwhere\n    S: ValueSource,\n{\n    source.value()\n}\n\n#[cfg(test)]\nmod test {\n    use super::*;\n    struct TestSource(u8);\n    impl ValueSource for TestSource {\n        fn value(&amp;self) -&gt; u8 {\n            self.0\n        }\n    }\n\n    #[test]\n    fn one() {\n        let src = TestSource(99);\n        assert_eq!(99, my_code(src));\n    }\n}\n</code></pre>\n\n<p>This will concentrate related details into one object and the compiler <em>monomorphizes</em> the calls, producing optimized code.</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/28370126/155423\">How can I test stdin and stdout?</a></li>\n<li><a href=\"https://stackoverflow.com/q/47077925/155423\">Is there a cleaner way to test functions that use functions that require user input in Rust?</a></li>\n<li><a href=\"https://stackoverflow.com/q/50047282/155423\">Is there a way to emulate the Java behaviour of calling a parent class&#39; static method for simple global-ish error handling?</a></li>\n</ul>\n"}], "owner": {"reputation": 41, "user_id": 8950785, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f32d455b92b8bba7b8ec108e47560e30?s=128&d=identicon&r=PG&f=1", "display_name": "An Camch&#233;achta", "link": "https://stackoverflow.com/users/8950785/an-camch%c3%a9achta"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 417, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1529161072, "creation_date": 1529154700, "last_edit_date": 1529158551, "question_id": 50888225, "link": "https://stackoverflow.com/questions/50888225/is-there-a-way-of-detecting-whether-code-is-being-called-from-tests-in-rust", "title": "Is there a way of detecting whether code is being called from tests in Rust?", "body": "<p>I'd like to be able to check within my code itself whether or not it is running from a test.  It would be ideal to do this, for example, to interface with test databases, web services, etc.  A simple <code>bool</code> would suffice.</p>\n\n<p>Does Rust have an existing API for this? </p>\n"}, {"tags": ["iterator", "rust"], "comments": [{"owner": {"reputation": 32558, "user_id": 101090, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/066290971688c0a44cc4159a9f210dcf?s=128&d=identicon&r=PG", "display_name": "Jorge Israel Pe&#241;a", "link": "https://stackoverflow.com/users/101090/jorge-israel-pe%c3%b1a"}, "edited": false, "score": 1, "creation_date": 1529104888, "post_id": 50883736, "comment_id": 88769462, "body": "You most likely want <code>PathBuf</code>, not <code>Path</code>."}, {"owner": {"reputation": 4989, "user_id": 1685095, "user_type": "registered", "accept_rate": 42, "profile_image": "https://www.gravatar.com/avatar/5f06068bb9b4c00f12582ccc0ba64c4a?s=128&d=identicon&r=PG", "display_name": "user1685095", "link": "https://stackoverflow.com/users/1685095/user1685095"}, "reply_to_user": {"reputation": 32558, "user_id": 101090, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/066290971688c0a44cc4159a9f210dcf?s=128&d=identicon&r=PG", "display_name": "Jorge Israel Pe&#241;a", "link": "https://stackoverflow.com/users/101090/jorge-israel-pe%c3%b1a"}, "edited": false, "score": 1, "creation_date": 1529105435, "post_id": 50883736, "comment_id": 88769538, "body": "<code>PathBuf</code> is mutable. I don&#39;t need mutability here. Why do you think I need <code>PathBuf</code>?"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 4, "last_activity_date": 1529160113, "last_edit_date": 1529160113, "creation_date": 1529105621, "answer_id": 50883809, "question_id": 50883736, "link": "https://stackoverflow.com/questions/50883736/why-cant-i-map-pathnew-over-the-stdenvargs-iterator/50883809#50883809", "title": "Why can&#39;t I map Path::new over the std::env::args iterator?", "body": "<p>The <a href=\"https://doc.rust-lang.org/std/env/struct.Args.html\" rel=\"nofollow noreferrer\"><code>Args</code></a> iterator returns values of type <code>String</code>. When you <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.map\" rel=\"nofollow noreferrer\"><code>map</code></a> over an iterator, the closure is given ownership of each value.</p>\n\n<p>The code that doesn't work attempts to take a reference to the <code>String</code>, but that string will go out of scope at the end of the closure. This is disallowed as discussed in <a href=\"https://stackoverflow.com/q/29428227/155423\">Return local String as a slice (&amp;str)</a>.</p>\n\n<p>The code that does work is not iterating over <code>String</code>s but <code>&amp;String</code>s; see <a href=\"https://stackoverflow.com/q/34733811/155423\">What is the difference between iter and into_iter?</a>. Thus there's nothing to go out of scope in the closure and returning a reference from the closure is fine.</p>\n\n<p>The correct solution is to transfer ownership of the <code>String</code>'s data to a new type. <a href=\"https://doc.rust-lang.org/std/path/struct.PathBuf.html\" rel=\"nofollow noreferrer\"><code>PathBuf</code></a> is the appropriate choice. <code>PathBuf</code> is to <code>&amp;Path</code> as <code>String</code> is to <code>&amp;str</code>:</p>\n\n<pre><code>let paths = ::std::env::args().map(std::path::PathBuf::from);\n</code></pre>\n\n<blockquote>\n  <p><code>PathBuf</code> is mutable. I don't need mutability here. Why do you think I need <code>PathBuf</code>?</p>\n</blockquote>\n\n<p>You are confused about how mutability works in Rust. Go back and re-read <a href=\"https://doc.rust-lang.org/book/second-edition/\" rel=\"nofollow noreferrer\"><em>The Rust Programming Language</em></a>, especially the chapter on <a href=\"https://doc.rust-lang.org/book/second-edition/ch03-01-variables-and-mutability.html\" rel=\"nofollow noreferrer\">Variables and Mutability</a>. </p>\n\n<p>Types in Rust are not mutable or immutable by themselves. Mutability is a property <em>of the variable binding</em>:</p>\n\n<pre><code>let buf = std::path::PathBuf::new();\nbuf.push(\"home\");\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0596]: cannot borrow immutable local variable `buf` as mutable\n --&gt; src/main.rs:3:5\n  |\n2 |     let buf = std::path::PathBuf::new();\n  |         --- consider changing this to `mut buf`\n3 |     buf.push(\"home\");\n  |     ^^^ cannot borrow mutably\n</code></pre>\n"}], "owner": {"reputation": 4989, "user_id": 1685095, "user_type": "registered", "accept_rate": 42, "profile_image": "https://www.gravatar.com/avatar/5f06068bb9b4c00f12582ccc0ba64c4a?s=128&d=identicon&r=PG", "display_name": "user1685095", "link": "https://stackoverflow.com/users/1685095/user1685095"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 186, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1529160113, "creation_date": 1529104726, "last_edit_date": 1529105166, "question_id": 50883736, "link": "https://stackoverflow.com/questions/50883736/why-cant-i-map-pathnew-over-the-stdenvargs-iterator", "title": "Why can&#39;t I map Path::new over the std::env::args iterator?", "body": "<p>This works:</p>\n\n<pre><code>let paths: Vec&lt;String&gt; = args.collect();\nlet paths = paths.iter().map(|f| std::path::Path::new(&amp;f));\n</code></pre>\n\n<p>This doesn't work:</p>\n\n<pre><code>let paths = ::std::env::args().map(|f| std::path::Path::new(&amp;f));\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `f` does not live long enough\n --&gt; src/main.rs:2:66\n  |\n2 |     let paths = ::std::env::args().map(|f| std::path::Path::new(&amp;f));\n  |                                                                  ^-- borrowed value needs to live until here\n  |                                                                  ||\n  |                                                                  |`f` dropped here while still borrowed\n  |                                                                  borrowed value does not live long enough\n</code></pre>\n\n<p>Why do I need to <code>collect</code> the <code>args</code> iterator into a vector just to produce another iterator? Why can't I produce one iterator directly from another?</p>\n"}, {"tags": ["rust", "libc"], "answers": [{"comments": [{"owner": {"reputation": 4989, "user_id": 1685095, "user_type": "registered", "accept_rate": 42, "profile_image": "https://www.gravatar.com/avatar/5f06068bb9b4c00f12582ccc0ba64c4a?s=128&d=identicon&r=PG", "display_name": "user1685095", "link": "https://stackoverflow.com/users/1685095/user1685095"}, "edited": false, "score": 0, "creation_date": 1529095649, "post_id": 50882389, "comment_id": 88767172, "body": "Thanks!. Can you explain why <code>with_capacity</code> doesn&#39;t work even if I <code>push</code> element after that?"}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "reply_to_user": {"reputation": 4989, "user_id": 1685095, "user_type": "registered", "accept_rate": 42, "profile_image": "https://www.gravatar.com/avatar/5f06068bb9b4c00f12582ccc0ba64c4a?s=128&d=identicon&r=PG", "display_name": "user1685095", "link": "https://stackoverflow.com/users/1685095/user1685095"}, "edited": false, "score": 0, "creation_date": 1529095807, "post_id": 50882389, "comment_id": 88767232, "body": "@user1685095 A C function wouldn&#39;t care about the capacity or size of the vector and won&#39;t change them. So as far as the vector is concerned, it is still empty after your call to <code>getgroups</code>."}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1529095959, "post_id": 50882389, "comment_id": 88767285, "body": "It is also my understanding that you can just pass a null pointer to your first call to <code>getgroups</code>."}, {"owner": {"reputation": 26934, "user_id": 8316315, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/44d833a8a46fea39d7bfca1540ea9c07?s=128&d=identicon&r=PG&f=1", "display_name": "Florian Weimer", "link": "https://stackoverflow.com/users/8316315/florian-weimer"}, "reply_to_user": {"reputation": 4989, "user_id": 1685095, "user_type": "registered", "accept_rate": 42, "profile_image": "https://www.gravatar.com/avatar/5f06068bb9b4c00f12582ccc0ba64c4a?s=128&d=identicon&r=PG", "display_name": "user1685095", "link": "https://stackoverflow.com/users/1685095/user1685095"}, "edited": false, "score": 0, "creation_date": 1529095976, "post_id": 50882389, "comment_id": 88767290, "body": "@user1685095 Where do you push the elements? Not in the code you posted."}, {"owner": {"reputation": 4989, "user_id": 1685095, "user_type": "registered", "accept_rate": 42, "profile_image": "https://www.gravatar.com/avatar/5f06068bb9b4c00f12582ccc0ba64c4a?s=128&d=identicon&r=PG", "display_name": "user1685095", "link": "https://stackoverflow.com/users/1685095/user1685095"}, "edited": false, "score": 0, "creation_date": 1529097010, "post_id": 50882389, "comment_id": 88767625, "body": "@FlorianWeimer I saw your initial answer and tried <code>with_capacity</code>"}], "tags": [], "owner": {"reputation": 26934, "user_id": 8316315, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/44d833a8a46fea39d7bfca1540ea9c07?s=128&d=identicon&r=PG&f=1", "display_name": "Florian Weimer", "link": "https://stackoverflow.com/users/8316315/florian-weimer"}, "is_accepted": true, "score": 2, "last_activity_date": 1529096691, "last_edit_date": 1529096691, "creation_date": 1529095235, "answer_id": 50882389, "question_id": 50882178, "link": "https://stackoverflow.com/questions/50882178/how-do-i-get-groups-for-a-user-via-libcgetgroups/50882389#50882389", "title": "How do I get groups for a user via libc::getgroups?", "body": "<p>You need to change the size of <code>groups</code> by adding dummy elements, not just its capacity.  Something like this:</p>\n\n<pre><code>unsafe {\n    let ruid = libc::getuid();\n    let guid = libc::getgid();\n    let num_groups = libc::getgroups(0, ::std::ptr::null_mut());\n    let mut groups = vec![0; num_groups as usize];\n    libc::getgroups(num_groups, groups.as_mut_ptr());\n    println!(\n        \"real user id {} as user id {}, as user groups {:?}, numgroups {}\",\n        &amp;ruid, &amp;guid, &amp;groups, &amp;num_groups\n    );\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 4989, "user_id": 1685095, "user_type": "registered", "accept_rate": 42, "profile_image": "https://www.gravatar.com/avatar/5f06068bb9b4c00f12582ccc0ba64c4a?s=128&d=identicon&r=PG", "display_name": "user1685095", "link": "https://stackoverflow.com/users/1685095/user1685095"}, "edited": false, "score": 0, "creation_date": 1529099745, "post_id": 50883102, "comment_id": 88768423, "body": "Thanks for pointing to <code>nix</code> crate. Definitely better than using <code>libc</code> directly."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1529099488, "creation_date": 1529099488, "answer_id": 50883102, "question_id": 50882178, "link": "https://stackoverflow.com/questions/50882178/how-do-i-get-groups-for-a-user-via-libcgetgroups/50883102#50883102", "title": "How do I get groups for a user via libc::getgroups?", "body": "<ul>\n<li><p>None of your code checks for errors! <code>seteuid</code> and <code>getgroups</code> can <strong>fail</strong> but your code ignores that possibility. You are attempting to debug a failure but haven't even spent the time to check that the functions you are calling are succeeding.</p></li>\n<li><p>Be very careful about passing in <code>v.as_mut_ptr()</code>. An empty <code>Vec</code> does <strong>not</strong> have a NULL pointer. In this case it's fine because the man page says it only cares about the count.</p></li>\n<li><p>You don't handle the case where the number of groups changes in size between the first and second call.</p></li>\n<li><p><a href=\"https://stackoverflow.com/q/30450399/155423\">You don't need to pass in references to the <code>println</code> arguments</a>.</p></li>\n</ul>\n\n<p>With that out of the way, since you are only storing <code>u32</code> in the <code>Vec</code>, you can avoid filling it with dummy values by adjusting the size and capacity accordingly:</p>\n\n<pre><code>extern crate libc;\n\n#[derive(Debug)]\nstruct Info {\n    guid: u32,\n    ruid: u32,\n    groups: Vec&lt;u32&gt;,\n    num_groups: usize,\n}\n\nfn example(guid: u32) -&gt; Info {\n    unsafe {\n        let ruid = libc::getuid();\n        if -1 == libc::seteuid(guid) {\n            panic!(\"seteuid\")\n        }\n\n        let mut groups = Vec::new();\n        let mut attempts = 0;\n        loop {\n            let num_groups = libc::getgroups(groups.capacity() as i32, groups.as_mut_ptr());\n            if -1 == num_groups {\n                panic!(\"getgroups\")\n            }\n\n            let num_groups = num_groups as usize;\n\n            if num_groups &lt;= groups.capacity() {\n                groups.set_len(num_groups);\n                return Info {\n                    guid,\n                    ruid,\n                    groups,\n                    num_groups,\n                };\n            }\n\n            groups.reserve_exact(num_groups);\n\n            attempts += 1;\n            if attempts &gt;= 3 {\n                panic!(\"Unstable amount of groups\")\n            }\n        }\n    }\n}\n\nfn main() {\n    println!(\"{:?}\", example(unsafe { libc::getuid() }));\n}\n</code></pre>\n\n<p>However, I wouldn't rewrite all this and I'd rely on the existing work. The <a href=\"https://crates.io/crates/nix\" rel=\"nofollow noreferrer\">nix crate</a> provides nice wrappers:</p>\n\n<pre><code>extern crate nix;\n\nuse nix::unistd::{self, Uid};\nuse std::u32;\n\nfn example(guid: Uid) -&gt; nix::Result&lt;()&gt; {\n    let ruid = unistd::getuid();\n    let no_change = Uid::from_raw(u32::MAX);\n    unistd::setresuid(no_change, guid, no_change)?;\n    let groups = nix::unistd::getgroups()?;\n\n    println!(\n        \"real user id {} as user id {}, as user groups {:?}\",\n        ruid, guid, groups\n    );\n\n    Ok(())\n}\n\nfn main() {\n    println!(\"{:?}\", example(Uid::current()));\n}\n</code></pre>\n"}], "owner": {"reputation": 4989, "user_id": 1685095, "user_type": "registered", "accept_rate": 42, "profile_image": "https://www.gravatar.com/avatar/5f06068bb9b4c00f12582ccc0ba64c4a?s=128&d=identicon&r=PG", "display_name": "user1685095", "link": "https://stackoverflow.com/users/1685095/user1685095"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 119, "favorite_count": 0, "accepted_answer_id": 50882389, "answer_count": 2, "score": 0, "last_activity_date": 1529103386, "creation_date": 1529094050, "last_edit_date": 1529103386, "question_id": 50882178, "link": "https://stackoverflow.com/questions/50882178/how-do-i-get-groups-for-a-user-via-libcgetgroups", "title": "How do I get groups for a user via libc::getgroups?", "body": "<pre><code>extern crate libc;\n\nfn example(guid: u32) {\n    unsafe {\n        let ruid = libc::getuid();\n        libc::seteuid(guid);\n        let mut v = vec![0; 0];\n        let num_groups = libc::getgroups(0, v.as_mut_ptr());\n        let mut groups = Vec::with_capacity(num_groups as usize);\n        libc::getgroups(num_groups, groups.as_mut_ptr());\n        println!(\n            \"real user id {} as user id {}, as user groups {:?}, numgroups {}\",\n            &amp;ruid, &amp;guid, &amp;groups, &amp;num_groups\n        );\n    }\n}\n</code></pre>\n\n<p>This prints</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>real user id 1000 as user id 1000, as user groups [], numgroups 9\n</code></pre>\n\n<p>My assumptions was that it would show a vector of 9 groups.</p>\n"}, {"tags": ["generics", "rust", "lifetime"], "comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1529085521, "post_id": 50880109, "comment_id": 88763397, "body": "<a href=\"https://users.rust-lang.org/t/expressing-hrtb-like-bound-on-generic-struct/18081\" rel=\"nofollow noreferrer\">This users.rust-lang.org post</a> is remarkably similar."}, {"owner": {"reputation": 1231, "user_id": 1362309, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e1ef0e451a4f18f480b5f8537e04fc8d?s=128&d=identicon&r=PG", "display_name": "Taywee", "link": "https://stackoverflow.com/users/1362309/taywee"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1529085688, "post_id": 50880109, "comment_id": 88763485, "body": "@trentcl That is almost exactly my issue (in my situation, it&#39;s essentially a serializing map, which serializes values inbound and deserializes them again on retrieval, so pretty much the same in a lot of ways).  I just didn&#39;t know how to find it.  That&#39;s incredibly useful information, thank you."}], "answers": [{"comments": [{"owner": {"reputation": 1231, "user_id": 1362309, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e1ef0e451a4f18f480b5f8537e04fc8d?s=128&d=identicon&r=PG", "display_name": "Taywee", "link": "https://stackoverflow.com/users/1362309/taywee"}, "edited": false, "score": 0, "creation_date": 1529085558, "post_id": 50880395, "comment_id": 88763412, "body": "Hmm.  I thought I might be able to use explicit lifetimes or something of the sort to tell the compiler that bar needs to be the same type, but doesn&#39;t need to live as long because no references to it are kept.  If that&#39;s impossible, I suppose I just need to try to find a better way to do it.  Thank you."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1231, "user_id": 1362309, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e1ef0e451a4f18f480b5f8537e04fc8d?s=128&d=identicon&r=PG", "display_name": "Taywee", "link": "https://stackoverflow.com/users/1362309/taywee"}, "edited": false, "score": 1, "creation_date": 1529087497, "post_id": 50880395, "comment_id": 88764191, "body": "@Taywee the lifetime is  <i>part of the type</i>, they aren&#39;t distinct."}, {"owner": {"reputation": 1231, "user_id": 1362309, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e1ef0e451a4f18f480b5f8537e04fc8d?s=128&d=identicon&r=PG", "display_name": "Taywee", "link": "https://stackoverflow.com/users/1362309/taywee"}, "edited": false, "score": 0, "creation_date": 1529089135, "post_id": 50880395, "comment_id": 88764832, "body": "Ah, there we go, that makes it really click.  Thank you so much for that.  I&#39;ll see if I can refactor this to make it work."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1529084443, "creation_date": 1529084443, "answer_id": 50880395, "question_id": 50880109, "link": "https://stackoverflow.com/questions/50880109/how-do-i-communicate-that-a-generic-type-with-a-reference-in-it-only-needs-to-li/50880395#50880395", "title": "How do I communicate that a generic type with a reference in it only needs to live through a function call?", "body": "<p>You cannot.</p>\n\n<p>A simpler reproduction:</p>\n\n<pre><code>struct Foo&lt;T&gt;(Option&lt;T&gt;);\nstruct Bar;\n\nimpl&lt;T&gt; Foo&lt;T&gt; {\n    fn takebar(&amp;mut self, bar: T) {}\n}\n\nfn main() {\n    let mut foo: Foo&lt;&amp;Bar&gt; = Foo(None);\n    let bar = Bar;\n\n    foo.takebar(&amp;bar);\n}\n</code></pre>\n\n<p>The compiler only cares about the function signature. One <em>possible</em> implementation of <code>takebar</code> with the existing function signature is one which stores it:</p>\n\n<pre><code>fn takebar(&amp;mut self, bar: T) {\n    self.0 = Some(bar)\n}\n</code></pre>\n\n<p>Thus, the example code must be prevented from compiling.</p>\n\n<p>Normally, I'd advocate for putting another type parameter on the function and expressing the operations that you need to do, but you've already ruled that out:</p>\n\n<pre><code>fn takebar&lt;T2&gt;(&amp;mut self, bar: T2)\nwhere\n    T2: PartialEq&lt;T&gt;,\n{\n    self.0.take();\n}\n</code></pre>\n\n<blockquote>\n  <p>If I turn <code>takebar(&amp;mut self, ...</code> into <code>takebar(&amp;self, ...</code>, it also works</p>\n</blockquote>\n\n<p>Yes, because you cannot store the value then (unless you add interior mutability, in which case the error comes back).</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/45713314/155423\">Is it possible to have a struct which contains a reference to a value which has a shorter lifetime than the struct?</a></li>\n</ul>\n"}], "owner": {"reputation": 1231, "user_id": 1362309, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e1ef0e451a4f18f480b5f8537e04fc8d?s=128&d=identicon&r=PG", "display_name": "Taywee", "link": "https://stackoverflow.com/users/1362309/taywee"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 67, "favorite_count": 0, "accepted_answer_id": 50880395, "answer_count": 1, "score": 1, "last_activity_date": 1529090393, "creation_date": 1529083065, "last_edit_date": 1529090393, "question_id": 50880109, "link": "https://stackoverflow.com/questions/50880109/how-do-i-communicate-that-a-generic-type-with-a-reference-in-it-only-needs-to-li", "title": "How do I communicate that a generic type with a reference in it only needs to live through a function call?", "body": "<p>I have two structures, one of which has a type parameter that is set to a reference to another.  When I take that reference as an argument in a function, I don't know how to signal that the lifetime should not become dependent.</p>\n\n<p>I've trimmed it down to this example:</p>\n\n<pre><code>use std::marker::PhantomData;\n\nstruct Foo&lt;T&gt; {\n    bar_type: PhantomData&lt;T&gt;,\n}\n\nstruct Bar {}\n\nimpl&lt;T&gt; Foo&lt;T&gt; {\n    fn takebar(&amp;mut self, bar: T) {}\n}\n\nfn main() {\n    let mut foo: Foo&lt;&amp;Bar&gt; = Foo {\n        bar_type: PhantomData,\n    };\n    let bar = Bar {};\n\n    foo.takebar(&amp;bar);\n}\n</code></pre>\n\n<p>This gives me the following compiler error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `bar` does not live long enough\n  --&gt; src/main.rs:19:18\n   |\n19 |     foo.takebar(&amp;bar);\n   |                  ^^^ borrowed value does not live long enough\n20 | }\n   | - `bar` dropped here while still borrowed\n   |\n   = note: values in a scope are dropped in the opposite order they are created\n</code></pre>\n\n<p>I understand that <code>foo</code> needs to live as long as <code>bar</code> here, so I can \"resolve\" this by declaring <code>bar</code> before <code>foo</code> to reverse their destruction order. </p>\n\n<p>This won't work for my situation, and more importantly, I'm not sure why it's happening or how to avoid it.  I've tried all sorts of explicit lifetime setups and none of them seem to resolve the problem.  If I turn <code>takebar(&amp;mut self, ...</code> into <code>takebar(&amp;self, ...</code>, it also works, but I can't always do that. It also works if I move the type parameter to the function from the struct, but again, can't always do that.</p>\n\n<p>How do I communicate that the <code>&amp;bar</code> reference should not be tied into <code>foo</code>'s lifetime, and only actually needs to live through the function call?</p>\n"}, {"tags": ["io", "rust", "buffer"], "answers": [{"comments": [{"owner": {"reputation": 147, "user_id": 2423550, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9da9c5082e7d7c4de2dfc5aaa10af08e?s=128&d=identicon&r=PG", "display_name": "Fallen", "link": "https://stackoverflow.com/users/2423550/fallen"}, "edited": false, "score": 0, "creation_date": 1529087715, "post_id": 50880142, "comment_id": 88764290, "body": "I was able to get your example to run, but as soon as I add <code>.create(true)</code> I get <code>IO(Os { code: 22, kind: InvalidInput, message: &quot;Invalid argument&quot; })</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 147, "user_id": 2423550, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9da9c5082e7d7c4de2dfc5aaa10af08e?s=128&d=identicon&r=PG", "display_name": "Fallen", "link": "https://stackoverflow.com/users/2423550/fallen"}, "edited": false, "score": 0, "creation_date": 1529104017, "post_id": 50880142, "comment_id": 88769301, "body": "@Fallen Not sure. <a href=\"http://man7.org/linux/man-pages/man2/open.2.html\" rel=\"nofollow noreferrer\"><i><code>EINVAL</code> The filesystem does not support the <code>O_DIRECT</code> flag</i></a>, plus a page or so of &quot;read this about <code>O_DIRECT</code>&quot;"}, {"owner": {"reputation": 147, "user_id": 2423550, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9da9c5082e7d7c4de2dfc5aaa10af08e?s=128&d=identicon&r=PG", "display_name": "Fallen", "link": "https://stackoverflow.com/users/2423550/fallen"}, "edited": false, "score": 0, "creation_date": 1529184567, "post_id": 50880142, "comment_id": 88784478, "body": "I could not find a difinitive answer to whether ext4 or tmpfs (this one seems unlikely) support Direct IO but neither of them worked when I added the <code>.create(true)</code> flag. I ended up using a raw block device (<code>&#47;dev&#47;nvme0n1p3</code> - my nvme drive) and that worked since I don&#39;t need the create flag anymore."}, {"owner": {"reputation": 3025, "user_id": 1356047, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/da6592df871c28f69e0480dd4edb5f9a?s=128&d=identicon&r=PG", "display_name": "Jonas Berlin", "link": "https://stackoverflow.com/users/1356047/jonas-berlin"}, "edited": false, "score": 0, "creation_date": 1593278396, "post_id": 50880142, "comment_id": 110726048, "body": "On kernel 5.4.2 <code>O_DIRECT</code> did not work on <code>tmpfs</code> but worked on <code>btrfs</code>."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1529083232, "creation_date": 1529083232, "answer_id": 50880142, "question_id": 50879965, "link": "https://stackoverflow.com/questions/50879965/does-rusts-standard-library-support-direct-io-file-access/50880142#50880142", "title": "Does Rust&#39;s standard library support direct IO file access?", "body": "<p>You can use the <strong>Unix specific</strong> extension trait <a href=\"https://doc.rust-lang.org/std/os/unix/fs/trait.OpenOptionsExt.html\" rel=\"nofollow noreferrer\"><code>os::unix::fs::OpenOptionsExt</code></a>:</p>\n\n<pre><code>use std::{fs::OpenOptions, os::unix::fs::OpenOptionsExt};\n\nconst O_DIRECT: i32 = 0o0040000; // Double check value\n\nfn main() {\n    OpenOptions::new()\n        .read(true)\n        .custom_flags(O_DIRECT)\n        .open(\"/etc/passwd\")\n        .expect(\"Can't open\");\n}\n</code></pre>\n\n<p>The value of <code>O_DIRECT</code> is platform-specific, however. I'd probably end up using libc to provide the value.</p>\n"}], "owner": {"reputation": 147, "user_id": 2423550, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9da9c5082e7d7c4de2dfc5aaa10af08e?s=128&d=identicon&r=PG", "display_name": "Fallen", "link": "https://stackoverflow.com/users/2423550/fallen"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 833, "favorite_count": 0, "accepted_answer_id": 50880142, "answer_count": 1, "score": 2, "last_activity_date": 1529083232, "creation_date": 1529082313, "last_edit_date": 1529082442, "question_id": 50879965, "link": "https://stackoverflow.com/questions/50879965/does-rusts-standard-library-support-direct-io-file-access", "title": "Does Rust&#39;s standard library support direct IO file access?", "body": "<p>Is there a way to specify <code>O_DIRECT</code> with Rust's standard library, or do you need to use <a href=\"https://github.com/jsgf/libaio-rust/blob/master/src/directio.rs\" rel=\"nofollow noreferrer\">libc</a>?</p>\n"}, {"tags": ["amazon-s3", "rust", "future", "brotli", "rusoto"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1529003768, "post_id": 50864136, "comment_id": 88731310, "body": "Please check <a href=\"https://stackoverflow.com/q/44437123/155423\">Why is a trait not implemented for a type that clearly has it implemented?</a> and a recent duplicate of it <a href=\"https://stackoverflow.com/q/50822267/155423\">How can I call <code>and_then</code> on a boxed Future?</a>. chances are very good that your version of futures isn&#39;t the version of futures that rusoto is using. Use <code>futures = &quot;0.1&quot;</code> instead."}, {"owner": {"reputation": 5087, "user_id": 2942471, "user_type": "registered", "accept_rate": 57, "profile_image": "https://graph.facebook.com/100000008666513/picture?type=large", "display_name": "manonthemat", "link": "https://stackoverflow.com/users/2942471/manonthemat"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1529003931, "post_id": 50864136, "comment_id": 88731386, "body": "It was the version. Setting it to 0.1 fixed that."}], "owner": {"reputation": 5087, "user_id": 2942471, "user_type": "registered", "accept_rate": 57, "profile_image": "https://graph.facebook.com/100000008666513/picture?type=large", "display_name": "manonthemat", "link": "https://stackoverflow.com/users/2942471/manonthemat"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 492, "favorite_count": 0, "closed_date": 1529005396, "answer_count": 0, "score": 0, "last_activity_date": 1529002445, "creation_date": 1529002445, "last_edit_date": 1592644375, "question_id": 50864136, "link": "https://stackoverflow.com/questions/50864136/reading-rusoto-s3-streamingbody-into-something-that-brotli-can-decompress", "closed_reason": "Duplicate", "title": "Reading Rusoto S3 StreamingBody into something that Brotli can decompress", "body": "<p>Version 0.32 of <a href=\"https://crates.io/crates/rusoto_s3\" rel=\"nofollow noreferrer\">rusuto_s3</a>'s <a href=\"https://rusoto.github.io/rusoto/rusoto_s3/struct.StreamingBody.html\" rel=\"nofollow noreferrer\">StreamingBody</a>, which is returned when requesting a file from AWS S3, does not implement Read anymore.</p>\n<p>Up to this version, <code>brotli::BrotliDecompress(&amp;mut &amp;*would_like_to_pass_this, &amp;mut contents);</code> was the way I would get the data out from S3 and into contents.\nNow this leads to this error message:</p>\n<blockquote>\n<p>error[E0614]: type <code>rusoto_s3::StreamingBody</code> cannot be dereferenced</p>\n</blockquote>\n<p>An adjustment to <code>brotli::BrotliDecompress(&amp;mut would_like_to_pass_this, &amp;mut contents);</code> makes the complainer complain with:</p>\n<blockquote>\n<p>error[E0277]: the trait bound <code>rusoto_s3::StreamingBody::std::io::Read</code> is not satisfied</p>\n<p>the trait <code>std::io::Read</code> is not implemented for <code>rusoto_s3::StreamingBody</code></p>\n</blockquote>\n<p>which is required by <code>brotli::BrotliDecompress</code>.</p>\n<p>Because StreamingBody should implement Stream according to the documentation, I have tried to collect to a Vec using <code>let bytes = body.concat2().wait().unwrap();</code>.</p>\n<p>However, this fails:</p>\n<pre><code>error[E0599]: no method named `concat2` found for type `rusoto_s3::StreamingBody` in the current scope                \n  --&gt; src/ingest/mod.rs:64:34\n   |\n64 |                 let bytes = body.concat2().wait().unwrap();                                                      \n   |                                  ^^^^^^^\n   |\n   = help: items from traits can only be used if the trait is in scope                                                \n   = note: the following trait is implemented but not in scope, perhaps add a `use` for it:                           \n           candidate #1: `use futures::stream::Stream;`\n</code></pre>\n<p>As you can see in the full code example, the suggestion has been added with no different result.</p>\n<pre><code>use std::io::Cursor;\n\nuse futures::stream::Stream;\nuse rusoto_core::Region;\nuse rusoto_s3::{GetObjectRequest, S3, S3Client, StreamingBody};\nuse serde_json;\n\npub fn load_data_from_s3(folder_name: String) -&gt; CustomObject {\n    let client = S3Client::simple(Region::UsWest2);\n\n    let mut custom_object = CustomObject::empty();\n\n    // following a list of keys (~filenames) for S3\n    [&quot;key_name1&quot;, &quot;key_name2&quot;].iter().for_each(|key_name| {\n        let request = GetObjectRequest {\n            bucket: (&quot;bigger_bucket/&quot;.to_owned() + &amp;folder_name).to_string(),\n            key: key_name.to_string(),\n            ..Default::default()\n        };\n        if let Ok(file) = client.get_object(&amp;request).sync() {\n            // Calculate the content size by getting the current file size\n            // multiplied by a factor of 3 for the decompression\n            let initial_contents_size = match file.content_length {\n                Some(data) =&gt; 3 * data as usize,\n                _ =&gt; 0,\n            };\n            let mut contents = Cursor::new(Vec::with_capacity(initial_contents_size));\n\n            /*\n             *\n             * Start of the problem area\n             *\n             */\n            // BrotliDecompress needs to act on something with the Read trait implemented,\n            // which isn't the case with StreamingBody anylonger\n            let would_like_to_pass_this = file.body.unwrap();\n            // trying to get a Vec&lt;u8&gt; here\n            let bytes = would_like_to_pass_this.concat2().wait().unwrap();\n            brotli::BrotliDecompress(&amp;mut &amp;*bytes, &amp;mut contents);\n            /*\n             *\n             * End of the problem area\n             *\n             */    \n\n            // below code is for more context\n            // Reset the cursor to the beginning so we can read the decompressed data\n            contents.set_position(0);\n\n            match *key_name {\n                &quot;key_name1&quot; =&gt; custom_object\n                    .do_stuff_with_key_name1_content(serde_json::from_reader(contents).unwrap()),\n                &quot;key_name2&quot; =&gt; custom_object\n                    .do_stuff_with_key_name2_content(serde_json::from_reader(contents).unwrap()),\n                _ =&gt; {}\n            }\n        }\n    });\n    custom_object\n}\n</code></pre>\n"}, {"tags": ["rust", "allocation", "lifetime", "scratchpad"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1528997244, "post_id": 50862050, "comment_id": 88728247, "body": "<i>put the scratchpad, markers and allocations in one object</i> \u2014 Have you already read <a href=\"https://stackoverflow.com/q/32300132/155423\">Why can&#39;t I store a value and a reference to that value in the same struct</a>? It really sounds like you have the exact problem described by it."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1528997514, "post_id": 50862050, "comment_id": 88728396, "body": "Especially since what you are attempting to to is <b>unsafe</b> and would lead to memory safety bugs. You are attempting to allocate inside of a stack-allocated array. When you move that into the <code>Scratchpad</code> and every time you move the <code>Scratchpad</code> you&#39;d be moving the array, invalidating any references into it. Rust has prevented you from shooting yourself in the foot."}], "owner": {"reputation": 1, "user_id": 9942691, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/350b2da1d8a76c9b428d6b7e58e4a961?s=128&d=identicon&r=PG&f=1", "display_name": "jiprysn", "link": "https://stackoverflow.com/users/9942691/jiprysn"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 74, "favorite_count": 0, "answer_count": 0, "score": 0, "last_activity_date": 1528997902, "creation_date": 1528993608, "last_edit_date": 1528997902, "question_id": 50862050, "link": "https://stackoverflow.com/questions/50862050/lifetime-management-with-scratchpad-crate-using-rust", "title": "Lifetime management with Scratchpad Crate using Rust", "body": "<p>Conceptually, we're looking to create multiple memory pools, with each pool individually acting as a stack.\nWithin each stack, we allocate objects of varying sizes and free them up in a stack-like fashion.\nWe also want to be able to allocate memory from the stacks in an ad-hoc fashion, and not iteratively visit each stack in order.</p>\n\n<p>We found the <a href=\"https://docs.rs/scratchpad/1.0.0/scratchpad/index.html\" rel=\"nofollow noreferrer\">Scratchpad crate</a> which does the stack allocation and freeing.</p>\n\n<p>The problem is that an allocation is statically bound to the lifetime of the <code>Marker</code> and the <code>Marker</code> is statically bound to the lifetime of the <code>Scratchpad</code>. While we don\u2019t want allocations to outlive the corresponding allocated memory, the lifetime check makes it difficult (or perhaps impossible?) to put the scratchpad, markers and allocations in one object. </p>\n\n<p>In the simple example shown, this can be worked around by including the Scratchpad by reference, but I\u2019m not sure that this can be generalized to the use case that we want where multiple markers and allocations are stored together. </p>\n\n<p>Here is the sample code which does not compile:</p>\n\n<pre><code>extern crate scratchpad;\nuse scratchpad::{MarkerFront, Scratchpad};\n\n#[derive(Debug)]\nstruct Stuff&lt;'sp: 'a, 'a&gt; {\n    scratchpad: Scratchpad&lt;&amp;'sp mut [u8], &amp;'sp mut [usize]&gt;,\n    marker: Option&lt;MarkerFront&lt;'a, &amp;'sp mut [u8], &amp;'sp mut [usize]&gt;&gt;,\n}\n\nfn main() {\n    let pool0: &amp;mut [u8] = &amp;mut [0; 1024];\n    let pool1: &amp;mut [usize] = &amp;mut [0; 64];\n\n    let sp = Scratchpad::new(pool0, pool1);\n    let mut stuff = Stuff {\n        scratchpad: sp,\n        marker: None,\n    };\n    stuff.marker = Some(stuff.scratchpad.mark_front().unwrap());\n    println!(\"{:?}\", stuff);\n    stuff.marker = None;\n    println!(\"{:?}\", stuff);\n} \n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `stuff.scratchpad` does not live long enough\n  --&gt; src/main.rs:19:25\n   |\n19 |     stuff.marker = Some(stuff.scratchpad.mark_front().unwrap());\n   |                         ^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n...\n23 | }\n   | - `stuff.scratchpad` dropped here while still borrowed\n   |\n   = note: values in a scope are dropped in the opposite order they are created\n</code></pre>\n\n<p>Sample code which does compile:</p>\n\n<pre><code>extern crate scratchpad;\nuse scratchpad::{MarkerFront, Scratchpad};\n\n#[derive(Debug)]\nstruct Stuff&lt;'sp: 'a, 'a&gt; {\n    // This is now a reference\n    scratchpad: &amp;'sp Scratchpad&lt;&amp;'sp mut [u8], &amp;'sp mut [usize]&gt;,\n    marker: Option&lt;MarkerFront&lt;'a, &amp;'sp mut [u8], &amp;'sp mut [usize]&gt;&gt;,\n}\n\nfn main() {\n    let pool0: &amp;mut [u8] = &amp;mut [0; 1024];\n    let pool1: &amp;mut [usize] = &amp;mut [0; 64];\n\n    let sp = Scratchpad::new(pool0, pool1);\n    let mut stuff = Stuff {\n        scratchpad: &amp;sp,\n        marker: None,\n    };\n    stuff.marker = Some(stuff.scratchpad.mark_front().unwrap());\n    println!(\"{:?}\", stuff);\n    stuff.marker = None;\n    println!(\"{:?}\", stuff);\n}\n</code></pre>\n"}, {"tags": ["generics", "rust", "lifetime"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1528983137, "post_id": 50857416, "comment_id": 88720106, "body": "I believe your question is answered by the answers of <a href=\"https://stackoverflow.com/questions/40484154/parameter-a-is-never-used-error-when-a-is-used-in-type-parameter-bound\">\u201cparameter <code>&#39;a</code> is never used\u201d error when &#39;a is used in type parameter bound</a>. If you disagree, please <a href=\"https://stackoverflow.com/posts/50857416/edit\">edit</a> your question to explain the differences. Otherwise, we can mark this question as already answered."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1528984527, "post_id": 50857416, "comment_id": 88720981, "body": "<a href=\"http://play.rust-lang.org/?gist=4b4d88770eadbff78597857dce6dfd7c&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">DK&#39;s answer to the other question, applied to your situation</a> and <a href=\"http://play.rust-lang.org/?gist=991a6a9cea3eac71882870cf55b55532&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">my answer applied to your situation</a>. If you <a href=\"http://play.rust-lang.org/?gist=b8b7a0931666a8e4c16b240e1af7915c&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">use an associated type of the trait inside <code>Baz</code></a> it will also work that way."}, {"owner": {"reputation": 975, "user_id": 7687388, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Xhm3T.png?s=128&g=1", "display_name": "CodeSandwich", "link": "https://stackoverflow.com/users/7687388/codesandwich"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1529008239, "post_id": 50857416, "comment_id": 88733400, "body": "Thank you @trentcl, that&#39;s the best solution for my real world use case! Also thank both of you for linking the older question, I couldn&#39;t find it."}], "owner": {"reputation": 975, "user_id": 7687388, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Xhm3T.png?s=128&g=1", "display_name": "CodeSandwich", "link": "https://stackoverflow.com/users/7687388/codesandwich"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 69, "favorite_count": 0, "closed_date": 1529007886, "answer_count": 0, "score": 0, "last_activity_date": 1528982900, "creation_date": 1528978785, "last_edit_date": 1528982900, "question_id": 50857416, "link": "https://stackoverflow.com/questions/50857416/how-to-create-a-struct-generic-over-a-trait-with-a-lifetime", "closed_reason": "Duplicate", "title": "How to create a struct generic over a trait with a lifetime?", "body": "<p>I'm trying to create structure <code>Baz</code> generic over a trait which requires a lifetime:</p>\n\n<pre><code>trait Foo&lt;'a&gt; {\n    fn foo(&amp;self) -&gt; &amp;'a u8;\n}\n\nstruct Baz&lt;'a, T: Foo&lt;'a&gt;&gt;(pub T);\n</code></pre>\n\n<p>Unfortunately the compiler thinks that <code>'a</code> in <code>Baz</code> is useless:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0392]: parameter `'a` is never used\n  --&gt; src/main.rs:20:12\n   |\n20 | struct Baz&lt;'a, T: Foo&lt;'a&gt;&gt;(pub T);\n   |            ^^ unused type parameter\n   |\n   = help: consider removing `'a` or using a marker such as `std::marker::PhantomData`\n</code></pre>\n\n<p>How can I express the relation of lifetimes between <code>Baz</code> and the implementors of <code>Foo</code>?</p>\n\n<p><a href=\"http://play.rust-lang.org/?gist=b4a9f179a877aeee6192cecf214b01f1&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">Reproduction on playground</a></p>\n"}, {"tags": ["rust", "lifetime", "borrow-checker"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1528983480, "post_id": 50851865, "comment_id": 88720314, "body": "I believe your question is answered by the answers of <a href=\"https://stackoverflow.com/questions/32165917/why-does-linking-lifetimes-matter-only-with-mutable-references\">Why does linking lifetimes matter only with mutable references?</a>. If you disagree, please <a href=\"https://stackoverflow.com/posts/50851865/edit\">edit</a> your question to explain the differences. Otherwise, we can mark this question as already answered."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1528983592, "post_id": 50851865, "comment_id": 88720391, "body": "<i>The function bodies are empty, what does the compiler infer here?</i> \u2014 The compiler does not infer anything when calling a function. It <b>only</b> uses the function signature. See <a href=\"https://stackoverflow.com/q/31609137/155423\">Why are explicit lifetimes needed in Rust?</a> for more."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1529143715, "post_id": 50851865, "comment_id": 88775311, "body": "Possible duplicate of <a href=\"https://stackoverflow.com/questions/32165917/why-does-linking-lifetimes-matter-only-with-mutable-references\">Why does linking lifetimes matter only with mutable references?</a>"}], "owner": {"reputation": 3480, "user_id": 2686821, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/5dd46afe4f5a75f2667569582b20ac9b?s=128&d=identicon&r=PG&f=1", "display_name": "soupybionics", "link": "https://stackoverflow.com/users/2686821/soupybionics"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 82, "favorite_count": 0, "answer_count": 0, "score": 1, "last_activity_date": 1528983380, "creation_date": 1528961206, "last_edit_date": 1528983380, "question_id": 50851865, "link": "https://stackoverflow.com/questions/50851865/how-does-the-compiler-handle-borrows-when-there-is-a-function-involving-mutable", "title": "How does the compiler handle borrows when there is a function involving mutable/immutable references as arguments with (nested) lifetimes?", "body": "<pre><code>fn func_vecmut&lt;'a&gt;(v: &amp;'a mut Vec&lt;&amp;'a i32&gt;, s: &amp;'a String) {}\n\nfn func_vecmut_fresh_lf&lt;'a, 'b&gt;(v: &amp;'a mut Vec&lt;&amp;'a i32&gt;, s: &amp;'b String) {}\n\nfn func_vec&lt;'a&gt;(v: &amp;'a Vec&lt;&amp;'a i32&gt;, s: &amp;'a String) {}\n\nfn main() {\n    let mut v = vec![];\n    {\n        let s: String = String::from(\"abc\");\n\n        /* Note: Below, only one function call is active at a time, other two commented out */\n        func_vecmut(&amp;mut v, &amp;s);          // Understandably, compiler fails this.\n        func_vecmut_fresh_lf(&amp;mut v, &amp;s); // Understandably, compiler passes this i.e with fresh lifetime for String.\n        func_vec(&amp;v, &amp;s);                 // Why does compiler pass this?\n    }\n}\n</code></pre>\n\n<p>In <code>func_vecmut</code> (as I understand it), the compiler sees that the lifetime of <code>String</code> is same as <code>Vec</code> and the elements (<code>i32</code>) that it holds. And since <code>v</code> lives longer (defined outside the block), it extends the borrow to <code>s</code> beyond the scope of the block (i.e afterlife for <code>s</code>) and hence the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `s` does not live long enough\n  --&gt; src/main.rs:13:30\n   |\n13 |         func_vecmut(&amp;mut v, &amp;s);          // Understandably, compiler fails this.\n   |                              ^ borrowed value does not live long enough\n...\n16 |     }\n   |     - `s` dropped here while still borrowed\n17 | }\n   | - borrowed value needs to live until here\n</code></pre>\n\n<p>The issue can be solved by giving a fresh lifetime to the <code>String</code> argument (see <code>func_vecmut_fresh_lf</code>).</p>\n\n<p>But then, why does the compilation not fail for <code>func_vec(&amp;v, &amp;s)</code>?  The only difference being <code>&amp;mut Vec</code>. Is this something to do with the fact that immutable references are <code>Copy</code>, whereas mutable ones are not?  If it is, how? The function bodies are empty, what does the compiler infer here?</p>\n"}, {"tags": ["iterator", "rust", "future"], "comments": [{"owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 4, "creation_date": 1528958845, "post_id": 50850309, "comment_id": 88705092, "body": "You may want to use a <a href=\"https://docs.rs/futures/0.2.0/futures/stream/trait.Stream.html\" rel=\"nofollow noreferrer\"><code>Stream</code></a> instead. Quote: &quot;If Future is an asynchronous version of Result, then Stream is an asynchronous version of Iterator.&quot; and you want to iterate :)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1528983842, "post_id": 50850309, "comment_id": 88720554, "body": "Please review how to create a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> and then <a href=\"https://stackoverflow.com/posts/50850309/edit\">edit</a> your question to include it. We cannot tell what crates, types, traits, fields, etc. are present in the code. Ideally, produce something that reproduces your error on the <a href=\"https://play.rust-lang.org\" rel=\"nofollow noreferrer\">Rust Playground</a>. I believe that you could remove all code specific to your application and have the pure concept of &quot;loop over a <code>Vec</code>, calling a method that returns a <code>Future</code> on each, and build a chain of <code>Futures</code>, to be evaluated (eventually) by the consumer?&quot;."}], "answers": [{"comments": [{"owner": {"reputation": 1303, "user_id": 793212, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b6b31bc55f5d469c5578bc5a91b4ad4c?s=128&d=identicon&r=PG&f=1", "display_name": "squidpickles", "link": "https://stackoverflow.com/users/793212/squidpickles"}, "edited": false, "score": 0, "creation_date": 1529001117, "post_id": 50859622, "comment_id": 88730027, "body": "Re: is it a requirement to fully evaluate each Future in the iterator before moving to the next, yes, I realize it must be resolved, but I&#39;d prefer the execution be managed by the caller, not inside my function."}, {"owner": {"reputation": 11878, "user_id": 588759, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/216ea4da5cae7be4030b6242ab90631c?s=128&d=identicon&r=PG", "display_name": "rofrol", "link": "https://stackoverflow.com/users/588759/rofrol"}, "edited": false, "score": 0, "creation_date": 1542364844, "post_id": 50859622, "comment_id": 93551175, "body": "How to collect values returned from these requests into a vector?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1588094119, "last_edit_date": 1588094119, "creation_date": 1528985741, "answer_id": 50859622, "question_id": 50850309, "link": "https://stackoverflow.com/questions/50850309/how-do-i-iterate-over-a-vec-of-functions-returning-futures-in-rust/50859622#50859622", "title": "How do I iterate over a Vec of functions returning Futures in Rust?", "body": "<p>You can use <a href=\"https://docs.rs/futures/0.2.1/futures/stream/fn.unfold.html\" rel=\"nofollow noreferrer\"><code>stream::unfold</code></a> to convert a single value into a stream. In this case, we can use the <code>IntoIter</code> iterator as that single value.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use futures::{executor, stream, Stream, TryStreamExt}; // 0.3.4\n\ntype Error = Box&lt;dyn std::error::Error&gt;;\ntype Result&lt;T, E = Error&gt; = std::result::Result&lt;T, E&gt;;\n\nasync fn network_request(val: i32) -&gt; Result&lt;i32&gt; {\n    // Just for demonstration, don't do this in a real program\n    use std::{\n        thread,\n        time::{Duration, Instant},\n    };\n    thread::sleep(Duration::from_secs(1));\n    println!(\"Resolving {} at {:?}\", val, Instant::now());\n\n    Ok(val * 100)\n}\n\nfn requests_in_sequence(vals: Vec&lt;i32&gt;) -&gt; impl Stream&lt;Item = Result&lt;i32&gt;&gt; {\n    stream::unfold(vals.into_iter(), |mut vals| async {\n        let val = vals.next()?;\n        let response = network_request(val).await;\n        Some((response, vals))\n    })\n}\n\nfn main() {\n    let s = requests_in_sequence(vec![1, 2, 3]);\n    executor::block_on(async {\n        s.try_for_each(|v| async move {\n            println!(\"-&gt; {}\", v);\n            Ok(())\n        })\n        .await\n        .expect(\"An error occurred\");\n    });\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>Resolving 1 at Instant { tv_sec: 6223328, tv_nsec: 294631597 }\n-&gt; 100\nResolving 2 at Instant { tv_sec: 6223329, tv_nsec: 310839993 }\n-&gt; 200\nResolving 3 at Instant { tv_sec: 6223330, tv_nsec: 311005834 }\n-&gt; 300\n</code></pre>\n\n<hr>\n\n<p>To ignore <code>Err</code> and <code>None</code>, you have to shuttle the <code>Error</code> over to the <code>Item</code>, making the <code>Item</code> type a <code>Result&lt;Option&lt;T&gt;, Error&gt;</code>:</p>\n\n<pre><code>use futures::{executor, stream, Stream, StreamExt}; // 0.3.4\n\ntype Error = Box&lt;dyn std::error::Error&gt;;\ntype Result&lt;T, E = Error&gt; = std::result::Result&lt;T, E&gt;;\n\nasync fn network_request(val: i32) -&gt; Result&lt;Option&lt;i32&gt;&gt; {\n    // Just for demonstration, don't do this in a real program\n    use std::{\n        thread,\n        time::{Duration, Instant},\n    };\n    thread::sleep(Duration::from_secs(1));\n    println!(\"Resolving {} at {:?}\", val, Instant::now());\n\n    match val {\n        1 =&gt; Err(\"boom\".into()),  // An error\n        2 =&gt; Ok(None),            // No data\n        _ =&gt; Ok(Some(val * 100)), // Success\n    }\n}\n\nfn requests_in_sequence(vals: Vec&lt;i32&gt;) -&gt; impl Stream&lt;Item = Result&lt;Option&lt;i32&gt;&gt;&gt; {\n    stream::unfold(vals.into_iter(), |mut vals| async {\n        let val = vals.next()?;\n        let response = network_request(val).await;\n        Some((response, vals))\n    })\n}\n\nfn main() {\n    executor::block_on(async {\n        let s = requests_in_sequence(vec![1, 2, 3]);\n\n        let s = s.filter_map(|v| async move { v.ok() });\n        let s = s.filter_map(|v| async move { v });\n        let mut s = s.boxed_local();\n\n        match s.next().await {\n            Some(v) =&gt; println!(\"First success: {}\", v),\n            None =&gt; println!(\"No successful requests\"),\n        }\n    });\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>Resolving 1 at Instant { tv_sec: 6224229, tv_nsec: 727216392 }\nResolving 2 at Instant { tv_sec: 6224230, tv_nsec: 727404752 }\nResolving 3 at Instant { tv_sec: 6224231, tv_nsec: 727593740 }\nFirst success: 300\n</code></pre>\n\n<hr>\n\n<blockquote>\n  <p>is it possible to build up a dynamic chain like this</p>\n</blockquote>\n\n<p>Yes, by leveraging <code>async</code> functions:</p>\n\n<pre><code>use futures::executor; // 0.3.4\n\ntype Error = Box&lt;dyn std::error::Error&gt;;\ntype Result&lt;T, E = Error&gt; = std::result::Result&lt;T, E&gt;;\n\nasync fn network_request(val: i32) -&gt; Result&lt;Option&lt;i32&gt;&gt; {\n    // Just for demonstration, don't do this in a real program\n    use std::{\n        thread,\n        time::{Duration, Instant},\n    };\n    thread::sleep(Duration::from_secs(1));\n    println!(\"Resolving {} at {:?}\", val, Instant::now());\n\n    match val {\n        1 =&gt; Err(\"boom\".into()),  // An error\n        2 =&gt; Ok(None),            // No data\n        _ =&gt; Ok(Some(val * 100)), // Success\n    }\n}\n\nasync fn requests_in_sequence(vals: Vec&lt;i32&gt;) -&gt; Result&lt;i32&gt; {\n    let mut vals = vals.into_iter().peekable();\n\n    while let Some(v) = vals.next() {\n        match network_request(v).await {\n            Ok(Some(v)) =&gt; return Ok(v),\n            Err(e) if vals.peek().is_none() =&gt; return Err(e),\n            Ok(None) | Err(_) =&gt; { /* Do nothing and try the next source */ }\n        }\n    }\n\n    Err(\"Ran out of sources\".into())\n}\n\nfn main() {\n    executor::block_on(async {\n        match requests_in_sequence(vec![1, 2, 3]).await {\n            Ok(v) =&gt; println!(\"First success: {}\", v),\n            Err(e) =&gt; println!(\"No successful requests: {}\", e),\n        }\n    });\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/48696290/155423\">Creating Diesel.rs queries with a dynamic number of .and()&#39;s</a></li>\n</ul>\n\n<hr>\n\n<blockquote>\n  <p>is it a requirement to fully evaluate each <code>Future</code> in the iterator before moving to the next</p>\n</blockquote>\n\n<p>Isn't that part of <em>your own requirements</em>? Emphasis mine:</p>\n\n<blockquote>\n  <p>Requesting data would check with each of the sources, <strong>in turn</strong>. If the first source had an error (<code>Err</code>), or did not have the data available (<code>None</code>), <strong>then the second source would be tried</strong></p>\n</blockquote>\n"}], "owner": {"reputation": 1303, "user_id": 793212, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b6b31bc55f5d469c5578bc5a91b4ad4c?s=128&d=identicon&r=PG&f=1", "display_name": "squidpickles", "link": "https://stackoverflow.com/users/793212/squidpickles"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2764, "favorite_count": 2, "accepted_answer_id": 50859622, "answer_count": 1, "score": 3, "last_activity_date": 1588094119, "creation_date": 1528954721, "question_id": 50850309, "link": "https://stackoverflow.com/questions/50850309/how-do-i-iterate-over-a-vec-of-functions-returning-futures-in-rust", "title": "How do I iterate over a Vec of functions returning Futures in Rust?", "body": "<p>Is it possible to loop over a <code>Vec</code>, calling a method that returns a <code>Future</code> on each, and build a chain of <code>Future</code>s, to be evaluated (eventually) by the consumer? Whether to execute the later <code>Future</code>s would depend on the outcome of the earlier <code>Future</code>s in the <code>Vec</code>.</p>\n\n<p>To clarify:</p>\n\n<p>I'm working on an application that can fetch data from an arbitrary set of upstream sources.</p>\n\n<p>Requesting data would check with each of the sources, in turn. If the first source had an error (<code>Err</code>), or did not have the data available (<code>None</code>), then the second source would be tried, and so on.</p>\n\n<p>Each source should be tried exactly once, and no source should be tried until all of the sources before have returned their results. Errors are logged, but otherwise ignored, passing the query to the next upstream data source.</p>\n\n<p>I have some working code that does this for fetching metadata:</p>\n\n<pre><code>/// Attempts to read/write data to various external sources. These are\n/// nested types, because a data source may exist as both a reader and a writer\nstruct StoreManager {\n    /// Upstream data sources\n    readers: Vec&lt;Rc&lt;RefCell&lt;StoreRead&gt;&gt;&gt;,\n    /// Downstream data sinks\n    writers: Vec&lt;Rc&lt;RefCell&lt;StoreWrite&gt;&gt;&gt;,\n}\n\nimpl StoreRead for StoreManager {\n    fn metadata(self: &amp;Self, id: &amp;Identifier) -&gt; Box&lt;Future&lt;Option&lt;Metadata&gt;, Error&gt;&gt; {\n       Box::new(ok(self.readers\n            .iter()\n            .map(|store| {\n                executor::block_on(store.borrow().metadata(id)).unwrap_or_else(|err| {\n                    error!(\"Error on metadata(): {:?}\", err);\n                    None\n                })\n            })\n            .find(Option::is_some)\n            .unwrap_or(None)))\n    }\n}\n</code></pre>\n\n<p>Aside from my unhappiness with all of the <code>Box</code> and <code>Rc/RefCell</code> nonsense, my real concern is with the <code>executor::block_on()</code> call. It blocks, waiting for each <code>Future</code> to return a result, before continuing to the next.</p>\n\n<p>Given that it's possible to call <code>fn_returning_future().or_else(|_| other_fn())</code> and so on, is it possible to build up a dynamic chain like this? Or is it a requirement to fully evaluate each <code>Future</code> in the iterator before moving to the next?</p>\n"}]