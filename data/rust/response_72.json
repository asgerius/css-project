[{"tags": ["linux", "rust", "command-line-interface"], "answers": [{"tags": [], "owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "is_accepted": false, "score": 4, "last_activity_date": 1464195481, "creation_date": 1464195481, "answer_id": 37443416, "question_id": 37443293, "link": "https://stackoverflow.com/questions/37443293/long-form-arguments-arent-passed-correctly-when-using-stdprocesscommand/37443416#37443416", "title": "Long-form arguments aren&#39;t passed correctly when using std::process::Command", "body": "<p><code>--halfspeed 2</code> is two arguments. You should call <code>arg</code> twice:</p>\n\n<pre><code>Command::new(\"mpg123\").arg(\"--halfspeed\").arg(\"2\").arg(\"file.mp3\")...\n</code></pre>\n\n<p>or pass all arguments together as an array using <code>.args</code>:</p>\n\n<pre><code>Command::new(\"mpg123\").args(&amp;[\"--halfspeed\", \"2\", \"file.mp3\"])...\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 1091, "user_id": 3745005, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/yvS7i.png?s=128&g=1", "display_name": "andrey", "link": "https://stackoverflow.com/users/3745005/andrey"}, "edited": false, "score": 0, "creation_date": 1464196162, "post_id": 37443520, "comment_id": 62389501, "body": "Any idea as to why it works with &quot;mpg321&quot; and &quot;--gain 100&quot;?"}, {"owner": {"reputation": 339851, "user_id": 149392, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7a561ec0875fcbbe3066ea8fe288ec77?s=128&d=identicon&r=PG", "display_name": "sepp2k", "link": "https://stackoverflow.com/users/149392/sepp2k"}, "reply_to_user": {"reputation": 1091, "user_id": 3745005, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/yvS7i.png?s=128&g=1", "display_name": "andrey", "link": "https://stackoverflow.com/users/3745005/andrey"}, "edited": false, "score": 0, "creation_date": 1464196397, "post_id": 37443520, "comment_id": 62389615, "body": "@andreyg It doesn&#39;t for me (&#39;mpg123: Unknown option &quot;gain 100&quot;.&#39;) and I&#39;m not sure why it would."}, {"owner": {"reputation": 1091, "user_id": 3745005, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/yvS7i.png?s=128&g=1", "display_name": "andrey", "link": "https://stackoverflow.com/users/3745005/andrey"}, "edited": false, "score": 0, "creation_date": 1464243235, "post_id": 37443520, "comment_id": 62406513, "body": "It&#39;s &quot;mpg321&quot;, different utility."}], "tags": [], "owner": {"reputation": 339851, "user_id": 149392, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7a561ec0875fcbbe3066ea8fe288ec77?s=128&d=identicon&r=PG", "display_name": "sepp2k", "link": "https://stackoverflow.com/users/149392/sepp2k"}, "is_accepted": true, "score": 3, "last_activity_date": 1464195843, "creation_date": 1464195843, "answer_id": 37443520, "question_id": 37443293, "link": "https://stackoverflow.com/questions/37443293/long-form-arguments-arent-passed-correctly-when-using-stdprocesscommand/37443520#37443520", "title": "Long-form arguments aren&#39;t passed correctly when using std::process::Command", "body": "<p>mpg123 expects to be called like this: <code>mpg123 --halfspeed 2 file.mp3</code>, which makes <code>argv</code> look like <code>{\"mpg123\", \"--halfspeed\", \"2\", \"file.mp3\"}</code>. Your way of calling it is equivalent to <code>mpg123 \"--halfspeed 3\" file.mp3</code>, which makes <code>argv</code> be <code>{\"mpg123\", \"--halfspeed 2\", \"file.mp3\"}</code>, which <code>mpg123</code> doesn't understand.</p>\n\n<p>The reason that <code>\"-h 2\"</code> works is that single letter options can be used without a space (meaning you could just write <code>-h2</code>), so for those the argument parser needs to be able to handle the case that the option's letter and value are in the same <code>argv</code> entry. Apparently that logic is implemented in such a way that it works even if the <code>argv</code> entry contains a space.</p>\n"}], "owner": {"reputation": 1091, "user_id": 3745005, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/yvS7i.png?s=128&g=1", "display_name": "andrey", "link": "https://stackoverflow.com/users/3745005/andrey"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 82, "favorite_count": 0, "accepted_answer_id": 37443520, "answer_count": 2, "score": 1, "last_activity_date": 1489078975, "creation_date": 1464195088, "last_edit_date": 1489078975, "question_id": 37443293, "link": "https://stackoverflow.com/questions/37443293/long-form-arguments-arent-passed-correctly-when-using-stdprocesscommand", "title": "Long-form arguments aren&#39;t passed correctly when using std::process::Command", "body": "<p>I have an issue where long-form arguments aren't passed correctly to a specific command line utility.</p>\n\n<p>All of this works:</p>\n\n<pre><code>Command::new(\"mpg321\").arg(\"--gain 100\").arg(\"file.mp3\").spawn().unwrap()\n</code></pre>\n\n\n\n<pre><code>Command::new(\"mpg123\").arg(\"-h 2\").arg(\"file.mp3\").spawn().unwrap()\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>mpg123 --halfspeed 2 file.mp3\n</code></pre>\n\n<p>But this:</p>\n\n<pre><code>Command::new(\"mpg123\").arg(\"--halfspeed 2\").arg(\"file.mp3\").spawn().unwrap()\n</code></pre>\n\n<p>Returns:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>mpg123: Unknown option \"halfspeed 2\"\n</code></pre>\n\n<p>I suspect that the fault is on the side of <code>mpg123</code>, but that doesn't make complete sense since it works when called from the command line.</p>\n"}, {"tags": ["json", "compiler-errors", "rust", "serde"], "answers": [{"tags": [], "owner": {"reputation": 6531, "user_id": 1614607, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/j5OdR.jpg?s=128&g=1", "display_name": "Jacob Brown", "link": "https://stackoverflow.com/users/1614607/jacob-brown"}, "is_accepted": false, "score": 0, "last_activity_date": 1464293305, "last_edit_date": 1464293305, "creation_date": 1464189535, "answer_id": 37441374, "question_id": 37439872, "link": "https://stackoverflow.com/questions/37439872/error-the-type-of-this-value-must-be-known-in-this-context-rust-serde-json/37441374#37441374", "title": "error: the type of this value must be known in this context (Rust) / serde_json Value", "body": "<p>You can change the return type of your initial function and <code>serde_json</code> will deserialize to the appropriate object if it can:</p>\n\n<pre><code>fn get_json_content(content_s : &amp;str) -&gt; Option&lt;BTreeMap&lt;String, Value&gt;&gt; {\n    // instead of returning a value, we need to return a BTreeMap, so we can get the\n    // key and the value.\n    println!(\"===&gt;&gt;&gt; json_content obtained: {}\", content_s);\n\n    match serde_json::from_str(content_s) { // -&gt; Result&lt;Value&gt;\n        Ok(some_value) =&gt; Some(some_value),\n        Err(_) =&gt; None\n    }    \n    // Note: this match statement can be rewritten as\n    // serde_json::from_str(content_s).ok()\n}\n</code></pre>\n\n<p>Your second example won't work because you are instantiating the <code>Value</code> object inside the function, and then trying to return a reference to the object you just instantiated. This won't work because the object will go out of scope at the end of the function and the reference will then be invalid.</p>\n"}], "owner": {"reputation": 2672, "user_id": 223936, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/j58Xn.jpg?s=128&g=1", "display_name": "Plastikfan", "link": "https://stackoverflow.com/users/223936/plastikfan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 460, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1538856950, "creation_date": 1464185799, "last_edit_date": 1538856950, "question_id": 37439872, "link": "https://stackoverflow.com/questions/37439872/error-the-type-of-this-value-must-be-known-in-this-context-rust-serde-json", "title": "error: the type of this value must be known in this context (Rust) / serde_json Value", "body": "<p>I am using serde_json to deserialise a json document. I have a function that given a string (this is the json document), will return a serde_json Value (this is an enum that represents the json type), returns an Option.\nThis value is passed around to other functions as required.</p>\n\n<p>However, I realised that passing around a Value is not quite what I want, because doing this, the key is not available.</p>\n\n<p>To illustrate my point, if I have a json document that looks like this:</p>\n\n<pre><code>{\n  \"root\" : {\n    \"regex\" : null,\n    \"prefixes\" : [ \"a_\", \"b_\" ]\n  }\n}\n</code></pre>\n\n<p>\"root\" is a json object, \"regex\" is json Null and \"prefixes\" is a json array.</p>\n\n<p>Now, the json type Value is an enum with discriminators representing the json types, eg Object, Null, Array for the examples given above.</p>\n\n<p>The serde_json crate uses std::collections::BTreeMap to represent nodes in the json document, where the String type repesents the json keys (in the above, these would be \"root\", \"regex\" and \"prefixes\". So passing around just references to Values is only partly helpful, I should be passing around BTreeMap instead, so that I can access the key too.</p>\n\n<p>So this is the following function that I am trying to re-write:</p>\n\n<pre><code>fn get_json_content(content_s : &amp;str) -&gt; Option&lt;Value&gt; {\n    // instead of returning a value, we need to return a BTreeMap, so we can get the\n    // key and the value.\n    println!(\"===&gt;&gt;&gt; json_content obtained: {}\", content_s);\n\n    match serde_json::from_str(content_s) { // -&gt; Result&lt;Value&gt;\n        Ok(some_value) =&gt; Some(some_value),\n        Err(_) =&gt; None\n    }    \n}\n</code></pre>\n\n<p>So I started to re-write the function but became up against the <em>\"the type of this value must be known in this context\"</em> error:</p>\n\n<pre><code>fn get_json_content_as_btreemap&lt;'a&gt;(content_s : &amp;str) -&gt; Option&lt;&amp;'a BTreeMap&lt;String, Value&gt;&gt; {\n    match serde_json::from_str(content_s) { // -&gt; Result&lt;Value&gt;\n        Ok(some) =&gt; {\n            // I expect the type of key_value_pair to be BTreeMap&lt;String, Value&gt;&gt;\n            // (but I may be wrong!)\n            let key_value_pair = some.as_object().unwrap(); // Error here\n\n        },\n        Err(_) =&gt; None\n    }\n}\n</code></pre>\n\n<p>I found other questions on stackoverflow like this one:\n<a href=\"https://stackoverflow.com/questions/30972047/the-type-of-this-value-must-be-known-in-this-context\">the type of this value must be known in this context</a></p>\n\n<p>and using this as a helper, I tried to insert the type as follows:</p>\n\n<pre><code>let key_value_pair = some.as_object::&lt;BTreeMap&lt;_, _&gt;&gt;().unwrap();\n</code></pre>\n\n<p>which doesnt fix the issue. Also, tried other similar variations to no avail. So how do I fix this please?</p>\n\n<p>EDIT:</p>\n\n<p>I have another function in this app as follows:</p>\n\n<pre><code>fn get_root_value&lt;'a&gt;(json_documemt : &amp;'a Value) -&gt; Result&lt;&amp;'a Value, JsonErrorCode&gt; {\n    if json_documemt.is_object() {\n        for (k, v) in json_documemt.as_object().unwrap().iter() {\n            if k == \"root\" {\n                println!(\"found root: {}\",  k);\n\n                return Ok(v)\n            }\n        }\n\n        return Err(JsonErrorCode::Custom(\"Failed to find root node\".to_string()))\n    }\n\n    Err(JsonErrorCode::Custom(\"Not an object\".to_string()))\n}\n</code></pre>\n\n<p>... and this works fine. Here you can see that I can call as_object() and then obtain the key and value as a tuple pair. I don't understand why as_object is working in one case but not the other. I would like to pull out the BTreeMap and pass this around as a borrowed item.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "edited": false, "score": 1, "creation_date": 1464207444, "post_id": 37439687, "comment_id": 62395634, "body": "What <i>is</i> a Path anyway? Doing a source code dive, I get that <code>Path</code> contains <code>OsStr</code> which contains something called <code>sys::os_str::Slice</code> which I can&#39;t find an actual definition for. I assume it&#39;s basically a few layers of abstraction over a <code>[u8]</code>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "edited": false, "score": 2, "creation_date": 1464207718, "post_id": 37439687, "comment_id": 62395784, "body": "@Jsor <i>basically a few layers of abstraction over a [u8]</i> \u2014 yes, <a href=\"https://github.com/rust-lang/rust/blob/1.8.0/src/libstd/sys/unix/os_str.rs#L27-L29\" rel=\"nofollow noreferrer\">on Unix-like platforms</a>. Windows <a href=\"https://github.com/rust-lang/rust/blob/1.8.0/src/libstd/sys/windows/os_str.rs#L46-L48\" rel=\"nofollow noreferrer\">is different</a>. This bit of abstraction leaks out in the OPs error message: &quot;<code>core::marker::Sized</code> is not implemented for the type <code>[u8]</code>&quot;."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 10, "last_activity_date": 1617734673, "last_edit_date": 1617734673, "creation_date": 1464185354, "answer_id": 37439687, "question_id": 37439327, "link": "https://stackoverflow.com/questions/37439327/how-to-write-a-function-that-returns-vecpath/37439687#37439687", "title": "How to write a function that returns Vec&lt;Path&gt;?", "body": "<p>You don't. <code>Path</code> is a type that has no size, and is only usable through indirection (such as <code>&amp;Path</code> or <code>Box&lt;Path&gt;</code>). In this sense, it is like the type <code>str</code> or <code>[u8]</code> \u2014 neither can be directly used, only indirectly.</p>\n<p>What you probably want is a <a href=\"https://doc.rust-lang.org/std/path/struct.PathBuf.html\" rel=\"nofollow noreferrer\"><code>PathBuf</code></a>, which represents an <em>owned</em> path. It is the equivalent of <code>String</code> for <code>&amp;str</code> and <code>Vec&lt;u8&gt;</code> for <code>&amp;[u8]</code>.</p>\n<p>After changing the return type, you have to properly map the results of the iterator to create your desired type:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>use std::{\n    fs, io,\n    path::{Path, PathBuf},\n};\n\npub fn read_filenames_from_dir&lt;P&gt;(path: P) -&gt; Result&lt;Vec&lt;PathBuf&gt;, io::Error&gt;\nwhere\n    P: AsRef&lt;Path&gt;,\n{\n    fs::read_dir(path)?\n        .into_iter()\n        .map(|x| x.map(|entry| entry.path()))\n        .collect()\n}\n\nfn main() {\n    println!(&quot;{:?}&quot;, read_filenames_from_dir(&quot;/etc&quot;));\n}\n</code></pre>\n<p>See also:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/49393462/155423\">What does \u201c`str` does not have a constant size known at compile-time\u201d mean, and what&#39;s the simplest way to fix it?</a></li>\n</ul>\n"}], "owner": {"reputation": 2043, "user_id": 1675607, "user_type": "registered", "accept_rate": 74, "profile_image": "https://i.stack.imgur.com/xvItm.jpg?s=128&g=1", "display_name": "Gavin Hope", "link": "https://stackoverflow.com/users/1675607/gavin-hope"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1698, "favorite_count": 2, "accepted_answer_id": 37439687, "answer_count": 1, "score": 7, "last_activity_date": 1617734673, "creation_date": 1464184463, "last_edit_date": 1523650551, "question_id": 37439327, "link": "https://stackoverflow.com/questions/37439327/how-to-write-a-function-that-returns-vecpath", "title": "How to write a function that returns Vec&lt;Path&gt;?", "body": "<p>I'm reading the documentation and trying to write some basic file I/O code as a vehicle to help me learn Rust.</p>\n\n<p>The following doesn't compile:</p>\n\n<pre><code>use std::fs;\nuse std::io;\nuse std::path::Path;\n\npub fn read_filenames_from_dir&lt;P&gt;(path: P) -&gt; Result&lt;Vec&lt;Path&gt;, io::Error&gt;\nwhere\n    P: AsRef&lt;Path&gt;,\n{\n    let paths = try!(fs::read_dir(path));\n    Ok(paths.unwrap())\n}\n</code></pre>\n\n<p>With the compilation error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `[u8]: std::marker::Sized` is not satisfied in `std::path::Path`\n  --&gt; src/main.rs:5:1\n   |\n5  | / pub fn read_filenames_from_dir&lt;P&gt;(path: P) -&gt; Result&lt;Vec&lt;Path&gt;, io::Error&gt;\n6  | | where\n7  | |     P: AsRef&lt;Path&gt;,\n8  | | {\n9  | |     let paths = try!(fs::read_dir(path));\n10 | |     Ok(paths.unwrap())\n11 | | }\n   | |_^ `[u8]` does not have a constant size known at compile-time\n   |\n   = help: within `std::path::Path`, the trait `std::marker::Sized` is not implemented for `[u8]`\n   = note: required because it appears within the type `std::path::Path`\n   = note: required by `std::vec::Vec`\n</code></pre>\n\n<p>How should I write this function to return the collection of <code>Path</code>s inside the <code>Path</code> that's passed in?</p>\n"}, {"tags": ["rust", "ffi"], "comments": [{"owner": {"reputation": 305, "user_id": 2825707, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/4f10f8d778ac2097fc46202496199555?s=128&d=identicon&r=PG&f=1", "display_name": "noshusan", "link": "https://stackoverflow.com/users/2825707/noshusan"}, "edited": false, "score": 1, "creation_date": 1464180248, "post_id": 37436779, "comment_id": 62377687, "body": "i think you can pass integer array pointer to the rust function from C. then you can use the vector slice to do operations."}, {"owner": {"reputation": 1214, "user_id": 2507567, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/ae46f1011962d615214aeef23306619c?s=128&d=identicon&r=PG", "display_name": "Rom&#225;rio", "link": "https://stackoverflow.com/users/2507567/rom%c3%a1rio"}, "reply_to_user": {"reputation": 305, "user_id": 2825707, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/4f10f8d778ac2097fc46202496199555?s=128&d=identicon&r=PG&f=1", "display_name": "noshusan", "link": "https://stackoverflow.com/users/2825707/noshusan"}, "edited": false, "score": 0, "creation_date": 1464200673, "post_id": 37436779, "comment_id": 62392021, "body": "@noshusan You mean doing something like <code>pub extern fn do_thing(slice: &amp;[i32])</code> then declare it in the C side like <code>void do_thing(int32_t slice[])</code>?"}, {"owner": {"reputation": 305, "user_id": 2825707, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/4f10f8d778ac2097fc46202496199555?s=128&d=identicon&r=PG&f=1", "display_name": "noshusan", "link": "https://stackoverflow.com/users/2825707/noshusan"}, "edited": false, "score": 0, "creation_date": 1464202485, "post_id": 37436779, "comment_id": 62393059, "body": "I am not sure but you can do something like <code>pub extern fn do_thing(slice: *[i32])</code> the declare it in the c side like <code>void do_thing(int32_t* slice[])</code> . Here you are using raw_pointer so you have to declare an unsafe block."}], "answers": [{"comments": [{"owner": {"reputation": 1214, "user_id": 2507567, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/ae46f1011962d615214aeef23306619c?s=128&d=identicon&r=PG", "display_name": "Rom&#225;rio", "link": "https://stackoverflow.com/users/2507567/rom%c3%a1rio"}, "edited": false, "score": 0, "creation_date": 1464200483, "post_id": 37437838, "comment_id": 62391928, "body": "My intention is to move some code from a C++ project into Rust -- do some computations in Rust, then get the results and use them in the C++ side. The idea is to gradually move a C++ project to Rust. What would be a better approach?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1214, "user_id": 2507567, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/ae46f1011962d615214aeef23306619c?s=128&d=identicon&r=PG", "display_name": "Rom&#225;rio", "link": "https://stackoverflow.com/users/2507567/rom%c3%a1rio"}, "edited": false, "score": 0, "creation_date": 1464200936, "post_id": 37437838, "comment_id": 62392161, "body": "@Rom&#225;rio that&#39;s a difficult question to answer without knowing more and would probably be off-topic for SO. If you had C code, I might say it&#39;s worth doing this kind of change because then you could delete your hand-made expandable vector implementation. However, C++ has collections in the standard library, so you&#39;d just be switching one standard library for the other. Perhaps you could try one level higher and move the <i>object</i> that contains the <code>std::vector</code> to Rust?"}, {"owner": {"reputation": 1214, "user_id": 2507567, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/ae46f1011962d615214aeef23306619c?s=128&d=identicon&r=PG", "display_name": "Rom&#225;rio", "link": "https://stackoverflow.com/users/2507567/rom%c3%a1rio"}, "edited": false, "score": 0, "creation_date": 1464201125, "post_id": 37437838, "comment_id": 62392279, "body": "<code>Perhaps you could try one level higher and move the object that contains the std::vector to Rust?</code> Does the FFI Omnibus have any pointers on this?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1214, "user_id": 2507567, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/ae46f1011962d615214aeef23306619c?s=128&d=identicon&r=PG", "display_name": "Rom&#225;rio", "link": "https://stackoverflow.com/users/2507567/rom%c3%a1rio"}, "edited": false, "score": 1, "creation_date": 1464201871, "post_id": 37437838, "comment_id": 62392696, "body": "@Rom&#225;rio probably <a href=\"http://jakegoulding.com/rust-ffi-omnibus/objects/\" rel=\"nofollow noreferrer\">Using Rust objects from other languages</a> is the closest match."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1464181980, "last_edit_date": 1464181980, "creation_date": 1464180924, "answer_id": 37437838, "question_id": 37436779, "link": "https://stackoverflow.com/questions/37436779/is-it-possible-to-call-a-rust-function-taking-a-vec-from-c/37437838#37437838", "title": "Is it possible to call a Rust function taking a Vec from C?", "body": "<p>You <em>can</em>, but the better question is <em>should</em> you?</p>\n\n<p>Since you cannot construct a <code>Vec</code> from C, you'd have to construct it in Rust and then return a pointer to C. C code would own the pointer to the <code>Vec</code> and would then pass it back when calling <code>do_something_else</code>.</p>\n\n<p>Then there's the problem that you can't really modify the <code>Vec</code> in C either, other than by creating new FFI methods that mirror all of the Rust methods.</p>\n\n<p>You also probably shouldn't take a <code>&amp;Vec&lt;i32&gt;</code> because Rust references are <strong>guaranteed</strong> to not be NULL, and there's nothing that enforces that when called from C. It's better to take a <code>*const Vec&lt;i32&gt;</code>, assert that it's non-NULL and convert it to a reference.</p>\n\n<p>Chances are that you want to accept a C array through the FFI boundary. C arrays are a pointer and a length, so you'd accept both and reconstitute a Rust <em>slice</em> (since you wouldn't own the array):</p>\n\n<pre><code>use std::slice;\n\npub extern fn do_something_else(p: *const i32, len: libc::size_t) {\n    let slice = unsafe {\n        assert!(!p.is_null());\n        slice::from_raw_parts(p, len)\n    };\n}\n</code></pre>\n\n<p>Obligatory link to <a href=\"http://jakegoulding.com/rust-ffi-omnibus/\" rel=\"noreferrer\"><em>The Rust FFI Omnibus</em></a>.</p>\n\n<hr>\n\n<p>If you <strong>really</strong> needed to do what you asked, it would probably look something like this:</p>\n\n<pre><code>extern crate libc;\n\n#[no_mangle]\npub extern fn make_vec() -&gt; *mut Vec&lt;i32&gt; {\n    Box::into_raw(Box::new(Vec::new()))\n}\n\n#[no_mangle]\npub extern fn add_number(vec: *mut Vec&lt;i32&gt;, val: libc::int32_t)  {\n    let vec = unsafe {\n        assert!(!vec.is_null());\n        &amp;mut *vec\n    };\n\n    vec.push(val);    \n}\n\n#[no_mangle]\npub extern fn print_vec(vec: *const Vec&lt;i32&gt;)  {\n    let vec = unsafe {\n        assert!(!vec.is_null());\n        &amp;*vec\n    };\n\n    println!(\"{:?}\", vec);    \n}\n\n#[no_mangle]\npub extern fn drop_vec(vec: *mut Vec&lt;i32&gt;)  {\n    unsafe {\n        assert!(!vec.is_null());\n        Box::from_raw(vec);\n    }\n}\n</code></pre>\n\n<p>And would be used like (untested):</p>\n\n<pre><code>// Add extern declarations\n\nint main(int argc, char *argv[]) {\n    void *v = make_vec(); // Use a real typedef here\n    add_number(v, 42);\n    print_vec(v);\n    drop_vec(v);\n}\n</code></pre>\n\n<p>You'd want to run this under valgrind to make sure I didn't do anything stupid memory-wise.</p>\n"}], "owner": {"reputation": 1214, "user_id": 2507567, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/ae46f1011962d615214aeef23306619c?s=128&d=identicon&r=PG", "display_name": "Rom&#225;rio", "link": "https://stackoverflow.com/users/2507567/rom%c3%a1rio"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2106, "favorite_count": 0, "accepted_answer_id": 37437838, "answer_count": 1, "score": 4, "last_activity_date": 1464199392, "creation_date": 1464178410, "last_edit_date": 1464199392, "question_id": 37436779, "link": "https://stackoverflow.com/questions/37436779/is-it-possible-to-call-a-rust-function-taking-a-vec-from-c", "title": "Is it possible to call a Rust function taking a Vec from C?", "body": "<p>Suppose I have the following Rust library:</p>\n\n<pre><code>// lib.rs\n#![crate_type = staticlib]\n\n#[no_mangle]\npub extern fn do_something(number: i32) {\n    // something\n}\n\n#[no_mangle]\npub extern fn do_something_else(collection: &amp;Vec&lt;i32&gt;) {\n    // something \n}\n</code></pre>\n\n<p>I know that, to call <code>do_something</code> from C, I'd just need to declare an <code>extern</code> function taking an <code>int32_t</code>, but is it possible to call <code>do_something_else</code>? If so, how?</p>\n"}, {"tags": ["multithreading", "struct", "timer", "rust"], "answers": [{"comments": [{"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1464179038, "post_id": 37435320, "comment_id": 62376696, "body": "One more question - will this spawned thread be automatically dropped if <code>A</code>-object&#39;s lifetime has come to end?"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 1, "creation_date": 1464179807, "post_id": 37435320, "comment_id": 62377290, "body": "no, that thread runs forever until it panics. If you want it dropped together with <code>A</code>, you need to store the <code>JoinHandle</code> returned by the <code>spawn</code> function inside the object and implement <code>Drop</code> for <code>A</code> and call <code>join</code> on the handle."}, {"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1464182688, "post_id": 37435320, "comment_id": 62379694, "body": "Here is also a question - how can I modify the objects in such vector? For example, if it is a vector of some struct, increment a field inside this structure? All the ways I tried has errors about &quot;can&#39;t move out of borrowed content&quot; or &quot;the trait <code>core::iter::Iterator</code> is not implemented for the type <code>&amp;std::sync::mutex::MutexGuard&lt;&#39;_, collections::vec::Vec&lt;Player&gt;&gt;</code>&quot;. Suppose <code>Player</code> as some struct which has a field which I need to change in this thread."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1464182834, "post_id": 37435320, "comment_id": 62379814, "body": "you need to store the iterator in a local variable and access the inner <code>Vec</code> by dereferencing the local variable"}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 2, "last_activity_date": 1464174485, "creation_date": 1464174485, "answer_id": 37435320, "question_id": 37434695, "link": "https://stackoverflow.com/questions/37434695/how-do-i-emulate-a-timer-inside-an-object-that-will-periodically-mutate-the-obje/37435320#37435320", "title": "How do I emulate a timer inside an object that will periodically mutate the object?", "body": "<blockquote>\n  <p>I guess I should use Arc or something like that but don't really understand how to use it here.</p>\n</blockquote>\n\n<p>Indeed that is the simplest solution:</p>\n\n<p>You can wrap the <code>ints</code> field in an <code>Arc</code>, but then you wouldn't be able to modify the <code>Vec</code>, so you also wrap it in a <code>Mutex</code>:</p>\n\n<pre><code>struct A {\n    pub ints: Arc&lt;Mutex&lt;Vec&lt;u8&gt;&gt;&gt;,\n}\n</code></pre>\n\n<p>Then you can clone the <code>Arc</code> to receive a second handle to the same memory. </p>\n\n<pre><code>fn timer(&amp;mut self) {\n    let ints = self.ints.clone();\n    thread::spawn(move || {\n        loop {\n            thread::sleep(Duration::from_millis(1));\n</code></pre>\n\n<p>Instead of directly accessing the <code>Vec</code>, you then need to <code>lock</code> the <code>Mutex</code>, which can fail if another thread panicked while accessing the <code>Mutex</code>.</p>\n\n<pre><code>            ints.lock().unwrap().remove(0);\n        }\n    });\n}\n</code></pre>\n"}], "owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 180, "favorite_count": 0, "accepted_answer_id": 37435320, "answer_count": 1, "score": 1, "last_activity_date": 1464180014, "creation_date": 1464172890, "last_edit_date": 1464180014, "question_id": 37434695, "link": "https://stackoverflow.com/questions/37434695/how-do-i-emulate-a-timer-inside-an-object-that-will-periodically-mutate-the-obje", "title": "How do I emulate a timer inside an object that will periodically mutate the object?", "body": "<p>In my project I need to do something like: </p>\n\n<pre><code>use std::thread;\nuse std::time::Duration;\n\nstruct A {\n    pub ints: Vec&lt;u8&gt;,\n}\n\nimpl A {\n    fn new() -&gt; A {\n        let mut a = A {\n            ints: vec![1, 5, 6, 2, 3, 4],\n        };\n        a.timer();\n        a\n    }\n\n    fn timer(&amp;mut self) {\n        thread::spawn(move || {\n            loop {\n                thread::sleep(Duration::from_millis(1));\n                self.ints.remove(0);\n            }\n        });\n    }\n}\n\nfn main() {\n    let a = A::new();\n    loop {\n        println!(\"Remaining elements: {:?}\", a.ints);\n    }\n}\n</code></pre>\n\n<p>The idea is that some struct contains a vector of elements. These elements should be removed from the vector after some period of time. Think of it as a periodic timer that checks something and performs an action on mutable object (removes an element). This thread also needs to be dropped if the object on which it is working on is deleted. So I guess it should be a member of a struct of which it is manipulating.</p>\n\n<p>The problem with the code above is that it has a lot of borrow errors and I don't understand how to do that.</p>\n\n<p>I have seen few questions like this but each of them was about manipulating scalar in a thread. The reason why I can't apply it here is because the thread should be something that is <strong>inside</strong> <code>A</code> struct and it should call <code>remove</code> on a vector that is a member of that struct.</p>\n\n<p>I guess I should use <code>Arc</code> or something like that but don't really understand how to use it here.</p>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 2512, "user_id": 5808553, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/6be8254e63e22cc820bb14938d532814?s=128&d=identicon&r=PG&f=1", "display_name": "Rajeev Ranjan", "link": "https://stackoverflow.com/users/5808553/rajeev-ranjan"}, "edited": false, "score": 0, "creation_date": 1555051978, "post_id": 37430681, "comment_id": 97981400, "body": "How do we do for a u64 type of field?"}, {"owner": {"reputation": 1054, "user_id": 187769, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/9d0faacd977c18b42da378bcfe38927c?s=128&d=identicon&r=PG", "display_name": "RandomInsano", "link": "https://stackoverflow.com/users/187769/randominsano"}, "edited": false, "score": 2, "creation_date": 1580672119, "post_id": 37430681, "comment_id": 106164804, "body": "Note, in modern Rust you should use &quot;crate::Version&quot;"}, {"owner": {"reputation": 1012, "user_id": 10489787, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/92ZeR.jpg?s=128&g=1", "display_name": "OctaveL", "link": "https://stackoverflow.com/users/10489787/octavel"}, "reply_to_user": {"reputation": 1054, "user_id": 187769, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/9d0faacd977c18b42da378bcfe38927c?s=128&d=identicon&r=PG", "display_name": "RandomInsano", "link": "https://stackoverflow.com/users/187769/randominsano"}, "edited": false, "score": 0, "creation_date": 1609585181, "post_id": 37430681, "comment_id": 115870639, "body": "What @RandomInsano said. This answer needs a little update, it&#39;s no longer valid"}], "tags": [], "owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "is_accepted": true, "score": 16, "last_activity_date": 1618901487, "last_edit_date": 1618901487, "creation_date": 1464161941, "answer_id": 37430681, "question_id": 37430628, "link": "https://stackoverflow.com/questions/37430628/rust-constants-in-different-modules/37430681#37430681", "title": "Rust constants in different modules?", "body": "<p>As <code>VERSION</code> is declared in <code>main.rs</code>, which is a crate root, you can access it using its absolute path: <code>::VERSION</code>.</p>\n<p>This should work:</p>\n<pre><code>pub fn do_stuff() {\n    println!(&quot;This is version: {}&quot;, crate::VERSION);\n}\n</code></pre>\n"}], "owner": {"reputation": 861, "user_id": 3384741, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/b963cea8f41c91b8fb79eedccce04d80?s=128&d=identicon&r=PG&f=1", "display_name": "user3384741", "link": "https://stackoverflow.com/users/3384741/user3384741"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5294, "favorite_count": 0, "accepted_answer_id": 37430681, "answer_count": 1, "score": 15, "last_activity_date": 1618901487, "creation_date": 1464161733, "question_id": 37430628, "link": "https://stackoverflow.com/questions/37430628/rust-constants-in-different-modules", "title": "Rust constants in different modules?", "body": "<p>I have this \"main.rs\" file which I declare a version constant. </p>\n\n<pre><code>pub const VERSION: &amp;'static str = \"v2\";\nmod game;\nfn main() {\n   do_stuff();\n}\n</code></pre>\n\n<p>Then I want to access this global constant in a different module \"game.rs\":</p>\n\n<pre><code>pub fn do_stuff() {\n   println!(\"This is version: {}\", VERSION);\n}\n</code></pre>\n\n<p>How do I make the constant available everywhere?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "edited": false, "score": 0, "creation_date": 1464167875, "post_id": 37430870, "comment_id": 62368903, "body": "Note that you can print the pointer value with <code>{:p}</code> if you need to."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 2, "last_activity_date": 1464178601, "last_edit_date": 1464178601, "creation_date": 1464162471, "answer_id": 37430870, "question_id": 37430440, "link": "https://stackoverflow.com/questions/37430440/understanding-bindings-and-borrows/37430870#37430870", "title": "Understanding bindings and borrows", "body": "<p>Regarding <strong>1</strong>: Yes, because it's a primitive variable, more specifically a type that implements the <code>Copy</code> trait. All those <code>Copy</code>-types work with copy semantics instead of move semantics.</p>\n\n<p>Regarding <strong>3</strong>: <code>println!</code> automatically dereferences it's arguments -- this is what the user wants in 99% of all cases.</p>\n\n<p>Regarding <strong>4</strong>: Again, automatically dereferences arguments... until it's a non-reference type.</p>\n"}, {"tags": [], "owner": {"reputation": 1343, "user_id": 4365239, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/88acc4986ddaf51e21c254fb8c0f11b8?s=128&d=identicon&r=PG&f=1", "display_name": "tafia", "link": "https://stackoverflow.com/users/4365239/tafia"}, "is_accepted": false, "score": 2, "last_activity_date": 1464173254, "creation_date": 1464173254, "answer_id": 37434821, "question_id": 37430440, "link": "https://stackoverflow.com/questions/37430440/understanding-bindings-and-borrows/37434821#37434821", "title": "Understanding bindings and borrows", "body": "<p>1, 2 => You are working with <code>i32</code>, which is <a href=\"http://doc.rust-lang.org/std/marker/trait.Copy.html\" rel=\"nofollow\"><code>Copy</code></a>, so in practice <code>b = a.clone()</code></p>\n\n<p>3, 4, 5 => You're confused with the <a href=\"http://doc.rust-lang.org/std/ops/trait.Deref.html\" rel=\"nofollow\"><code>Deref</code> trait</a>. I find it easier to reason about ownership/borrowing than references in rust. <code>r = &amp;a</code> means <em><code>r</code> borrows <code>a</code> so I can access its value later on, someone else will own it and take care of dropping it</em></p>\n"}, {"comments": [{"owner": {"reputation": 35680, "user_id": 1206051, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/ZYa1h.png?s=128&g=1", "display_name": "treecoder", "link": "https://stackoverflow.com/users/1206051/treecoder"}, "edited": false, "score": 0, "creation_date": 1464227076, "post_id": 37437305, "comment_id": 62402035, "body": "Can you please explain why it is <code>&amp;**self</code> in that delegation, and why not <code>&amp;*self</code>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 35680, "user_id": 1206051, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/ZYa1h.png?s=128&g=1", "display_name": "treecoder", "link": "https://stackoverflow.com/users/1206051/treecoder"}, "edited": false, "score": 0, "creation_date": 1464227624, "post_id": 37437305, "comment_id": 62402153, "body": "@treecoder the implementation is <code>for &amp;&#39;a T</code>, and there&#39;s a <code>&amp;self</code> parameter (which is like saying <code>self: &amp;Self</code>). Since <code>Self</code> is <code>&amp;T</code>, the <code>self</code> parameter is a <code>&amp;&amp;T</code>, so it needs to be dereferenced twice. Maybe if I write <code>self</code> a few more times it will stop looking like a real word..."}, {"owner": {"reputation": 35680, "user_id": 1206051, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/ZYa1h.png?s=128&g=1", "display_name": "treecoder", "link": "https://stackoverflow.com/users/1206051/treecoder"}, "edited": false, "score": 0, "creation_date": 1464240792, "post_id": 37437305, "comment_id": 62405504, "body": "Okay, this makes sense. Can you point me to some doc where I can know more about the differences between <code>self</code> and <code>Self</code>?"}, {"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "reply_to_user": {"reputation": 35680, "user_id": 1206051, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/ZYa1h.png?s=128&g=1", "display_name": "treecoder", "link": "https://stackoverflow.com/users/1206051/treecoder"}, "edited": false, "score": 1, "creation_date": 1464346632, "post_id": 37437305, "comment_id": 62459949, "body": "@treecoder Self is a type shorthand referring to &quot;the type in the current scope&quot; (e.g. the T in <code>impl T</code>), self is just a reserved variable name that always refers to type <code>Self</code> (or &amp;Self etc)."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1464179622, "last_edit_date": 1495540721, "creation_date": 1464179622, "answer_id": 37437305, "question_id": 37430440, "link": "https://stackoverflow.com/questions/37430440/understanding-bindings-and-borrows/37437305#37437305", "title": "Understanding bindings and borrows", "body": "<p>The other answers are mostly right, but have some small errors.</p>\n\n<p><strong>1.</strong> <code>i32</code> implements <a href=\"http://doc.rust-lang.org/std/marker/trait.Copy.html\" rel=\"nofollow noreferrer\"><code>Copy</code></a>, so when you assign it to a second variable binding, the first binding does not need to be invalidated. Any type that implements <code>Copy</code> will have this property.</p>\n\n<p><strong>3.</strong> You have asked to format the value with <code>{}</code> which corresponds to the <a href=\"http://doc.rust-lang.org/std/fmt/trait.Display.html\" rel=\"nofollow noreferrer\"><code>Display</code> trait</a>. There is <a href=\"https://github.com/rust-lang/rust/blob/1.8.0/src/libcore/fmt/mod.rs#L1306-L1321\" rel=\"nofollow noreferrer\">an implementation</a> of this trait for references to types that implement <code>Display</code>:</p>\n\n<pre><code>impl&lt;'a, T&gt; Display for &amp;'a T where T: Display + ?Sized {\n    fn fmt(&amp;self, f: &amp;mut Formatter) -&gt; Result { Display::fmt(&amp;**self, f) }\n}\n</code></pre>\n\n<p>This simply delegates to the implementation of the referred-to type.</p>\n\n<p><strong>4.</strong> The same as #3 - a reference to a reference to a type that implements <code>Display</code> will just delegate twice. <code>Deref</code> does not come into play.</p>\n\n<hr>\n\n<p>Here's the sneaky thing that no one else has mentioned. <code>println!</code> is a <em>macro</em>, which means it has more power than a regular function call. One of the things that it does is <em>automatically take a reference</em> to any arguments. That's what allows you to print out a value that doesn't implement <code>Copy</code> without losing ownership.</p>\n\n<p>With this code:</p>\n\n<pre><code>let a = 10;\nprintln!(\"{}\", a);\n</code></pre>\n\n<p>The expanded version is actually something like this (slightly cleaned up):</p>\n\n<pre><code>let a = 10;\n\nstatic __STATIC_FMTSTR: &amp;'static [&amp;'static str] = &amp;[\"\", \"\\n\"];\n\n::std::io::_print(::std::fmt::Arguments::new_v1(__STATIC_FMTSTR, &amp;match (&amp;a,) {\n    (__arg0,) =&gt; [::std::fmt::ArgumentV1::new(__arg0, ::std::fmt::Display::fmt)],\n}));\n</code></pre>\n\n<p>Therefore, <em>everything</em> passed to <code>println!</code> is a reference. It wouldn't be very useful if references printed out memory addresses.</p>\n\n<p>Besides the usefulness, Rust focuses more on value semantics as opposed to reference semantics. When you have values moving and changing addresses frequently, the location of the value isn't very consistent or useful.</p>\n\n<p>See also </p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/27852613/155423\">Auto-dereference when printing a pointer, or did I miss something?</a></li>\n<li><a href=\"https://stackoverflow.com/q/29705268/155423\">Reference to a vector still prints as a vector?</a></li>\n</ul>\n"}], "owner": {"reputation": 35680, "user_id": 1206051, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/ZYa1h.png?s=128&g=1", "display_name": "treecoder", "link": "https://stackoverflow.com/users/1206051/treecoder"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 69, "favorite_count": 0, "accepted_answer_id": 37437305, "answer_count": 3, "score": 0, "last_activity_date": 1464179622, "creation_date": 1464161229, "last_edit_date": 1495540367, "question_id": 37430440, "link": "https://stackoverflow.com/questions/37430440/understanding-bindings-and-borrows", "title": "Understanding bindings and borrows", "body": "<p>I have the following simple program</p>\n\n<pre><code>fn main() {\n    let a = 10;\n    let b: i32;\n    let r: &amp;i32;\n\n    b = a;      // move?\n    r = &amp;a;     // borrow?\n\n    println!(\"{}\", a);\n    println!(\"{}\", b);\n    println!(\"{}\", r);\n    println!(\"{}\", &amp;r);\n    println!(\"{}\", *r);\n}\n</code></pre>\n\n<p>The output is</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>10\n10\n10\n10\n10\n</code></pre>\n\n<ol>\n<li>The first print does not fail even when the value is moved. Is this because of primitive type or am I missing something?</li>\n<li>The second print seems ok.</li>\n<li>The third one prints a reference directly - shouldn't we get the memory address as this is a reference?</li>\n<li>The fourth print is a reference to a reference, which should print a memory address, I think?</li>\n<li>The fifth print seems reasonable as (I think) <code>*</code> is the <code>value at</code> operator that de-references the reference.</li>\n</ol>\n\n<p>It seems I am not quite getting the whole thing.</p>\n\n<p>Please explain <strong>in detail</strong> what's going on.</p>\n\n<p>Related:\n<a href=\"https://stackoverflow.com/questions/24253344/move-vs-copy-in-rust/24253573#24253573\">Move vs Copy in Rust</a></p>\n"}, {"tags": ["error-handling", "rust"], "comments": [{"owner": {"reputation": 1118, "user_id": 3456632, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/eb0b27a1ed62f5e5c125f72768024d37?s=128&d=identicon&r=PG&f=1", "display_name": "edoput", "link": "https://stackoverflow.com/users/3456632/edoput"}, "edited": false, "score": 1, "creation_date": 1464165085, "post_id": 37430408, "comment_id": 62367079, "body": "Please add from where you are trying to get the <code>num_traits::Num</code> trait, the first compile error is <code>error: failed to resolve. Use of undeclared type or module </code>num_traits` [E0433]`"}, {"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1464194899, "post_id": 37430408, "comment_id": 62388810, "body": "It&#39;s fetching traits from crate called <code>num_traits</code>. However you can partially copy the implementation. See <a href=\"https://play.rust-lang.org/?gist=0b7a2c5790e1c344a76663cc767f8790&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a> for details."}], "answers": [{"comments": [{"owner": {"reputation": 43, "user_id": 6379590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9c46470605d621875f8bdc00151bd2ef?s=128&d=identicon&r=PG&f=1", "display_name": "stefan322935", "link": "https://stackoverflow.com/users/6379590/stefan322935"}, "edited": false, "score": 0, "creation_date": 1464203634, "post_id": 37437271, "comment_id": 62393665, "body": "Thanks malbarbo. Your hint about the types being <i>defined</i> as equal was the missing link. And I would never have guessed the syntax to require that."}, {"owner": {"reputation": 43, "user_id": 6379590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9c46470605d621875f8bdc00151bd2ef?s=128&d=identicon&r=PG&f=1", "display_name": "stefan322935", "link": "https://stackoverflow.com/users/6379590/stefan322935"}, "edited": false, "score": 0, "creation_date": 1464204108, "post_id": 37437271, "comment_id": 62393935, "body": "I already had tried the restriction <code>T: num::traits::PrimInt</code> since this is what I&#39;m interested in. But your proposal just works :-)"}], "tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 3, "last_activity_date": 1464195179, "last_edit_date": 1464195179, "creation_date": 1464179546, "answer_id": 37437271, "question_id": 37430408, "link": "https://stackoverflow.com/questions/37430408/how-to-convert-fromstrradixerr-to-parseinterror/37437271#37437271", "title": "How to convert FromStrRadixErr to ParseIntError?", "body": "<blockquote>\n  <p>How to convert <code>FromStrRadixErr</code> to <code>ParseIntError</code>?</p>\n</blockquote>\n\n<p>It's not possible. Some errors, like <a href=\"https://doc.rust-lang.org/stable/std/io/struct.Error.html\" rel=\"nofollow\"><code>io::Error</code></a>, allow you to create a instance with a causing error, so you can create a error that wraps another error. If <code>ParseIntError</code> had such functionality, you could create a <code>ParseIntError</code> caused by a <code>FromStrRadixErr</code> error, but <code>ParseIntError</code> does not.</p>\n\n<blockquote>\n  <p>Can anybody explain to me the difference?</p>\n</blockquote>\n\n<p>This code:</p>\n\n<pre><code>fn foo&lt;T: num_traits::Num&gt;() -&gt; Result&lt;T, std::num::ParseIntError&gt; {\n    T::from_str_radix(\"4242\", 10)\n}\n</code></pre>\n\n<p>does not compile because the returned type of <code>T::from_str_radix</code> is <code>Result&lt;T, FromStrRadixErr&gt;</code> not <code>Result&lt;T, ParseIntError&gt;</code>. Changing the return type (as you did) to <code>Result&lt;T, FromStrRadixErr&gt;</code>, solves the problem. </p>\n\n<p>This code:</p>\n\n<pre><code>fn main() {\n    let x: Result&lt;u8, std::num::ParseIntError&gt; = foo();\n    println!(\"{:?}\", x);\n}\n\nfn foo&lt;T: num_traits::Num&gt;() -&gt; Result&lt;T, &lt;T as num_traits::Num&gt;::FromStrRadixErr&gt; {\n    T::from_str_radix(\"4242\", 10)\n}\n</code></pre>\n\n<p>compiles fine because the <code>Num</code> trait implementation for <code>u8</code> <a href=\"https://github.com/rust-num/num/blob/ace0951f2ad4e1e48299a5d80d70a65d8a2f78b9/traits/src/lib.rs#L48\" rel=\"nofollow\">defines</a> <code>FromStrRadixErr = ParseIntError</code>.</p>\n\n<p>If you change <code>u8</code> to <code>f32</code>:</p>\n\n<pre><code>let x: Result&lt;f32, std::num::ParseIntError&gt; = foo();\n</code></pre>\n\n<p>it fails to compile. The reason it that the <code>Num</code> implementation for <code>f32</code> <a href=\"https://github.com/rust-num/num/blob/ace0951f2ad4e1e48299a5d80d70a65d8a2f78b9/traits/src/lib.rs#L77\" rel=\"nofollow\">defines</a> <code>FromStrRadixErr = ParseFloatError</code> and <code>ParseFloatError</code> is not <code>ParseIntError</code>.</p>\n\n<blockquote>\n  <p>and possibly show me a solution?</p>\n</blockquote>\n\n<p>You said that you are trying to build a generic wrapper around <code>std::&lt;T&gt;::from_str_radix</code>, but your examples use <code>T::from_str_radix</code> where <code>T: Num</code>, so you are trying to write a wrapper around <code>Num::from_str_radix</code>.</p>\n\n<p>One option is to use <code>Num</code> and <code>FromStrRadixErr</code> directly instead of creating a wrapper, in the end, <code>Num</code> is the wrapper.</p>\n\n<p>Maybe you want to restrict the wrapper to primitive integers and use <code>ParseIntError</code>. In this case, you can add the restriction <code>FromStrRadixErr = ParseIntError</code>:</p>\n\n<pre><code>fn foo&lt;T&gt;() -&gt; Result&lt;T, std::num::ParseIntError&gt;\n    where T: num_traits::Num&lt;FromStrRadixErr = std::num::ParseIntError&gt;,\n{\n    T::from_str_radix(\"4242\", 10)\n}\n</code></pre>\n"}], "owner": {"reputation": 43, "user_id": 6379590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9c46470605d621875f8bdc00151bd2ef?s=128&d=identicon&r=PG&f=1", "display_name": "stefan322935", "link": "https://stackoverflow.com/users/6379590/stefan322935"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 274, "favorite_count": 0, "accepted_answer_id": 37437271, "answer_count": 1, "score": 4, "last_activity_date": 1464195179, "creation_date": 1464161108, "last_edit_date": 1464180137, "question_id": 37430408, "link": "https://stackoverflow.com/questions/37430408/how-to-convert-fromstrradixerr-to-parseinterror", "title": "How to convert FromStrRadixErr to ParseIntError?", "body": "<p>I'm trying to build a generic wrapper around <code>std::&lt;T&gt;::from_str_radix</code>. According to the documentation, <code>from_str_radix</code> returns <code>Result&lt;T, ParseIntError&gt;</code>. But </p>\n\n<pre><code>fn foo&lt;T: num_traits::Num&gt;() -&gt; Result&lt;T, std::num::ParseIntError&gt; {\n    T::from_str_radix(\"4242\", 10)\n}\n</code></pre>\n\n<p>won't compile:</p>\n\n<blockquote>\n  <p>error: mismatched types:  expected <code>core::result::Result&lt;T,\n  core::num::ParseIntError&gt;</code>,\n      found <code>core::result::Result&lt;T, &lt;T as num_traits::Num&gt;::FromStrRadixErr&gt;</code></p>\n</blockquote>\n\n<p>On the other hand, this</p>\n\n<pre><code>fn main() {\n    let x: Result&lt;u8, std::num::ParseIntError&gt; = foo();\n    println!(\"{:?}\", x);\n}\n\nfn foo&lt;T: num_traits::Num&gt;() -&gt; Result&lt;T, &lt;T as num_traits::Num&gt;::FromStrRadixErr&gt; {\n    T::from_str_radix(\"4242\", 10)\n}\n</code></pre>\n\n<p>compiles fine and prints the expected result </p>\n\n<blockquote>\n  <p>Err(ParseIntError { kind: Overflow })</p>\n</blockquote>\n\n<p>To my mind, both are the same situation, but obviously I'm wrong. Can anybody explain to me the difference and possibly show me a solution? </p>\n"}, {"tags": ["rust", "lifetime", "lifetime-scoping"], "answers": [{"tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": false, "score": 1, "last_activity_date": 1464158038, "creation_date": 1464158038, "answer_id": 37429442, "question_id": 37429233, "link": "https://stackoverflow.com/questions/37429233/what-is-the-advantage-of-using-the-same-lifetime-for-multiple-arguments/37429442#37429442", "title": "What is the advantage of using the same lifetime for multiple arguments?", "body": "<p>With the same lifetime you're saying that the return value could be borrowed from either <code>x</code> or <code>y</code>, so from the point of view of the function body, it's more flexible.\nFrom the caller it's more restrictive as both <code>x</code> and <code>y</code> need to be valid for as long as the result is kept, rather than just <code>x</code> (say).</p>\n"}, {"comments": [{"owner": {"reputation": 1604, "user_id": 442859, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/1ecb6761cd7c9d2a1b876f8195af2ca1?s=128&d=identicon&r=PG", "display_name": "Snark", "link": "https://stackoverflow.com/users/442859/snark"}, "edited": false, "score": 0, "creation_date": 1464162403, "post_id": 37430779, "comment_id": 62365519, "body": "Oh,  the output has to unify if it depends on both inputs."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 2, "last_activity_date": 1464179891, "last_edit_date": 1464179891, "creation_date": 1464162213, "answer_id": 37430779, "question_id": 37429233, "link": "https://stackoverflow.com/questions/37429233/what-is-the-advantage-of-using-the-same-lifetime-for-multiple-arguments/37430779#37430779", "title": "What is the advantage of using the same lifetime for multiple arguments?", "body": "<p>It really depends on your use case. Given the exact code you wrote:</p>\n\n<pre><code>fn xory&lt;'a&gt;(x: &amp;'a str, y: &amp;'a str) -&gt; &amp;'a str { \n    x \n}\n</code></pre>\n\n<p>Here it is an disadvantage to use only one lifetime, because the return value only depends on the <code>x</code> argument, not on the <code>y</code> one. Let's imagine this user code:</p>\n\n<pre><code>let x_in = \"paul\".to_owned();\nlet out = {\n    let y_in = \"peter\".to_owned();\n    xory(&amp;x_in, &amp;y_in)\n};\n</code></pre>\n\n<p>We would expect that this works fine, because <code>out</code> is basically <code>x_in</code>. But the compiler complains:</p>\n\n<pre><code>&lt;anon&gt;:12:22: 12:26 error: `y_in` does not live long enough\n&lt;anon&gt;:12         xory(&amp;x_in, &amp;y_in)\n                               ^~~~\n&lt;anon&gt;:13:7: 14:2 note: reference must be valid for the block suffix following statement 1 at 13:6...\n&lt;anon&gt;:13     };\n&lt;anon&gt;:14 }\n&lt;anon&gt;:11:39: 13:6 note: ...but borrowed value is only valid for the block suffix following statement 0 at 11:38\n&lt;anon&gt;:11         let y_in = \"peter\".to_owned();\n&lt;anon&gt;:12         xory(&amp;x_in, &amp;y_in)\n&lt;anon&gt;:13     };\n</code></pre>\n\n<p>This is because the compiler assumes (from the <code>xory</code> signature) that the output from <code>xory</code> references both arguments. So it's often better to specify lifetimes as detailed as possible to avoid unnecessary conditions/assumptions/relationships between parameters.</p>\n\n<hr>\n\n<p>In some cases you need to use only one lifetime (or a slightly different solution): suppose you want to return either <code>x</code> or <code>y</code> depending on some condition:</p>\n\n<pre><code>fn xory&lt;'a&gt;(x: &amp;'a str, y: &amp;'a str) -&gt; &amp;'a str { \n    if x.len() == 42 { \n        x\n    } else {\n        y\n    }\n}\n</code></pre>\n\n<p>Here the lifetime of the output can depend on both arguments' lifetimes and we don't know on which one at compile time. Therefore we have to prepare for the worst and do it like this.</p>\n"}], "owner": {"reputation": 1604, "user_id": 442859, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/1ecb6761cd7c9d2a1b876f8195af2ca1?s=128&d=identicon&r=PG", "display_name": "Snark", "link": "https://stackoverflow.com/users/442859/snark"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 66, "favorite_count": 0, "accepted_answer_id": 37430779, "answer_count": 2, "score": 1, "last_activity_date": 1464179891, "creation_date": 1464157330, "last_edit_date": 1464179868, "question_id": 37429233, "link": "https://stackoverflow.com/questions/37429233/what-is-the-advantage-of-using-the-same-lifetime-for-multiple-arguments", "title": "What is the advantage of using the same lifetime for multiple arguments?", "body": "<pre><code>fn xory&lt;'a&gt;(x: &amp;'a str, y: &amp;'a str) -&gt; &amp;'a str { x }\n</code></pre>\n\n<p>What is the advantage of the above code over using two lifetimes? Are there any situations in which the above code will work, but 2 lifetimes won't?</p>\n"}, {"tags": ["generics", "rust", "constraints", "generic-programming"], "comments": [{"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 3, "creation_date": 1464157640, "post_id": 37428187, "comment_id": 62362869, "body": "Can you explain why you want to have such conditions? Usually if you&#39;re constraining type parameters it&#39;s so that the impls can make use of the traits&#39; methods; with conditionals the implementation can only type check if you use only the overlapping subset. However the recently accepted [Specialisation RFC]( <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1210-impl-specialization.md\" rel=\"nofollow noreferrer\">github.com/rust-lang/rfcs/blob/master/text/&hellip;</a>) would effectively make at least some conditionals possible."}], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 3, "last_activity_date": 1530235450, "last_edit_date": 1530235450, "creation_date": 1464161098, "answer_id": 37430406, "question_id": 37428187, "link": "https://stackoverflow.com/questions/37428187/is-there-any-way-to-put-complex-conditions-and-constraints-on-a-generic-type/37430406#37430406", "title": "Is there any way to put complex conditions and constraints on a generic type?", "body": "<p>It's not that easily possible. First of all: negative trait bounds (saying <em>not</em> trait <code>Foo</code>) do not exist in Rust yet. There were a few RFCs, but AFAIK there are no specific plans on implementing something like that in near future. However, specialization could enable you to simulate negative trait bounds.</p>\n\n<p>Rust's type system is Turing complete, but as far as I can tell, exactly what you want is not possible without using specialization and negative trait bounds, both of which are not implemented/not stable. </p>\n\n<p>What you ask for is a pretty general case; there are some specific cases where it's possible. If you have this struct <code>D</code> and want to add methods to it which need those trait bounds, you can just write two <code>impl</code> blocks:</p>\n\n<pre><code>impl&lt;T, X&gt; D&lt;T, X&gt;\nwhere\n    T: A,\n    X: NotB, // assume `NotB` is just another trait\n{   \n    // ...\n}\n\nimpl&lt;T, X&gt; D&lt;T, X&gt;\nwhere \n    T: C,\n    X: B,\n{\n    // ...\n}\n</code></pre>\n\n<p>If you think about it, you would have to write two implementations anyway: When <code>T</code> is <code>A</code>, you can use methods of <code>A</code> on objects of <code>T</code>, when <code>T</code> is <code>C</code>, you can use methods of <code>C</code> on objects of <code>T</code>, but you can't just tell the compiler \"either <code>A</code> or <code>C</code>\".</p>\n\n<h3>Solution to your specific problem</h3>\n\n<p>In your case, I would create another trait that denotes a combination of vertex and material that works well together. Something like:</p>\n\n<pre><code>trait VertexMaterialPair {\n    // ...\n}\n\nimpl&lt;V, M&gt; VertexMaterialPair for (V, M) \nwhere\n    V: VertexWithTextureCoordinate, \n    M: MaterialWithTexture,\n{ /* ... */ }\n\nimpl&lt;V, M&gt; VertexMaterialPair for (V, M) \nwhere\n    V: SimpleVertex, \n    M: SimpleMaterial, \n{ /* ... */ }\n</code></pre>\n\n<p>As you can see, I implemented the trait for a pair (tuple) of a vertex and a material. Thus your function would look like:</p>\n\n<pre><code>fn do_something&lt;V, M&gt;(/* some arguments */) -&gt; /* ... */ \nwhere\n    (V, M): VertexMaterialPair,\n{ /* ... */ }\n</code></pre>\n\n<p>This should work fairly well; however, it might not be the very best solution for your ray tracer... </p>\n"}], "owner": {"reputation": 647, "user_id": 5429050, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/da7e1d765858cc119fc86fa3e48e410b?s=128&d=identicon&r=PG", "display_name": "Hossein Noroozpour", "link": "https://stackoverflow.com/users/5429050/hossein-noroozpour"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 933, "favorite_count": 0, "accepted_answer_id": 37430406, "answer_count": 1, "score": 1, "last_activity_date": 1530235450, "creation_date": 1464152612, "last_edit_date": 1530235250, "question_id": 37428187, "link": "https://stackoverflow.com/questions/37428187/is-there-any-way-to-put-complex-conditions-and-constraints-on-a-generic-type", "title": "Is there any way to put complex conditions and constraints on a generic type?", "body": "<p>In form of a pseudo example:</p>\n\n<pre><code>trait A {}\ntrait B {}\ntrait C {}\nstruct D&lt;T, X&gt;\nwhere\n    if T: A \n        then X: is not B\n    else if X: B\n        then T: C\n{}\n</code></pre>\n\n<p>I've already found some way to bypass this, but I want a way to do it with language features.</p>\n\n<h3>More Explanation</h3>\n\n<p>In my project, a small ray tracer, I have a vertex type that has a position and a normal. I have another vertex type with a position, a normal, and a texture coordinate.</p>\n\n<p>I also have some material types which work with specific vertex types.</p>\n\n<p>I want to make a constraint on some of the functions that use vertices and materials together:</p>\n\n<pre><code>fn do_something&lt;V, M&gt;(/* some arguments */) \n    -&gt; /* some returned value */ \nwhere \n    if V: VertexWithTextureCoordinate \n        then M: MaterialWithTexture \n    else if V: SimpleVertex\n        then M: SimpleMaterial,\n{\n}\n</code></pre>\n\n<p>This is the simplest condition I face.</p>\n"}, {"tags": ["rust", "ffi"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1464116447, "creation_date": 1464116447, "answer_id": 37421797, "question_id": 37421392, "link": "https://stackoverflow.com/questions/37421392/convert-from-a-fixed-sized-c-char-array-to-cstring/37421797#37421797", "title": "Convert from a fixed-sized c_char array to CString", "body": "<p>C strings that you don't own should be translated using <code>CStr</code>, not <code>CString</code>. You can then convert it into an owned representation (<code>CString</code>) or convert it into a <code>String</code>:</p>\n\n<pre><code>extern crate libc;\n\nuse libc::c_char;\nuse std::ffi::CStr;\n\npub fn main() {\n    let id = [0 as c_char; 256];\n    let rust_id = unsafe { CStr::from_ptr(id.as_ptr()) };\n    let rust_id = rust_id.to_owned();\n    println!(\"{:?}\", rust_id);\n}\n</code></pre>\n\n<p>You should also use the <code>libc</code> crate for types like <code>c_char</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 305, "user_id": 2825707, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/4f10f8d778ac2097fc46202496199555?s=128&d=identicon&r=PG&f=1", "display_name": "noshusan", "link": "https://stackoverflow.com/users/2825707/noshusan"}, "is_accepted": false, "score": 1, "last_activity_date": 1464116874, "creation_date": 1464116874, "answer_id": 37421922, "question_id": 37421392, "link": "https://stackoverflow.com/questions/37421392/convert-from-a-fixed-sized-c-char-array-to-cstring/37421922#37421922", "title": "Convert from a fixed-sized c_char array to CString", "body": "<p>you can create std::ffi::CStr from a pointer but you have to use unsafe keyword.Like this</p>\n\n<pre><code>use std::ffi::CStr;\n//use std::os::raw::c_char;\n\n#[repr(C)]\npub struct FFIStruct {\n    pub id: [::std::os::raw::c_char; 256usize],\n    pub description: [::std::os::raw::c_char; 256usize],\n}\n\n\nfn get_struct() -&gt; Option&lt;FFIStruct&gt; {\n    println!(\"cheating\");\n    None\n}\npub fn main() {\n    match get_struct() {\n        Some(thing) =&gt; \n            println!(\"Got id:{:?}\",unsafe{CStr::from_ptr(thing.id.as_ptr())}),\n\n        None =&gt; (),\n    }\n}\n</code></pre>\n\n<p>you can also convert CStr into String by using this method</p>\n\n<pre><code>CStr::from_ptr(thing.id.as_ptr()).to_string_lossy()\n</code></pre>\n"}], "owner": {"reputation": 3822, "user_id": 91585, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/58b7ea3d38398e9e2882d23f57762cb6?s=128&d=identicon&r=PG", "display_name": "Florian Doyon", "link": "https://stackoverflow.com/users/91585/florian-doyon"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1867, "favorite_count": 0, "accepted_answer_id": 37421797, "answer_count": 2, "score": 3, "last_activity_date": 1464116874, "creation_date": 1464115031, "last_edit_date": 1464116116, "question_id": 37421392, "link": "https://stackoverflow.com/questions/37421392/convert-from-a-fixed-sized-c-char-array-to-cstring", "title": "Convert from a fixed-sized c_char array to CString", "body": "<p>My FFI binding returns a struct with fixed-size <code>c_char</code> arrays, and I would like to turn those into <code>std::ffi::CString</code> or <code>std::String</code>.</p>\n\n<p>It looks like the <code>CString::new</code> function coerces the pointer to a vector.</p>\n\n<pre><code>use std::ffi::CString;\nuse std::os::raw::c_char;\n\n#[repr(C)]\npub struct FFIStruct {\n    pub Id: [::std::os::raw::c_char; 256usize],\n    pub Description: [::std::os::raw::c_char; 256usize],\n}\n\nfn get_struct() -&gt; Option&lt;FFIStruct&gt; {\n    println!(\"cheating\");\n    None\n}\n\npub fn main() {\n    match get_struct() {\n        Some(thing) =&gt; \n            println!(\"Got id:{}\",CString::new(thing.Id.as_ptr())),\n\n        None =&gt; (),\n    }\n}\n</code></pre>\n\n<p>Here is the <a href=\"https://play.rust-lang.org/?code=use%20std%3A%3Affi%3A%3ACString%3B%0Ause%20std%3A%3Aos%3A%3Araw%3A%3Ac_char%3B%0A%0A%23%5Brepr(C)%5D%0Apub%20struct%20FFIStruct%20%7B%0A%20%20%20%20pub%20Id%3A%20%5B%3A%3Astd%3A%3Aos%3A%3Araw%3A%3Ac_char%3B%20256usize%5D%2C%0A%20%20%20%20pub%20Description%3A%20%5B%3A%3Astd%3A%3Aos%3A%3Araw%3A%3Ac_char%3B%20256usize%5D%2C%0A%7D%0A%0A%0Afn%20get_struct()%20-%3E%20Option%3CFFIStruct%3E%20%7B%0A%20%20%20%20println!(%22cheating%22)%3B%0A%20%20%20%20None%0A%7D%0Apub%20fn%20main()%20%7B%0A%20%20%20%20match%20get_struct()%20%7B%0A%20%20%20%20%20%20%20%20Some(thing)%20%3D%3E%20%0A%20%20%20%20%20%20%20%20%20%20%20%20println!(%22Got%20id%3A%7B%7D%22%2CCString%3A%3Anew(thing.Id.as_ptr()))%2C%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20None%20%3D%3E%20()%2C%0A%20%20%20%20%7D%0A%7D%0A&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">Rust Playground</a> link.</p>\n"}, {"tags": ["rust", "rust-chrono"], "answers": [{"comments": [{"owner": {"reputation": 1772, "user_id": 2398020, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0b986575e9a1c32e48f95ba0d879ab19?s=128&d=identicon&r=PG", "display_name": "Mingwei Samuel", "link": "https://stackoverflow.com/users/2398020/mingwei-samuel"}, "edited": false, "score": 0, "creation_date": 1580247831, "post_id": 37418858, "comment_id": 106033795, "body": "Updated: <code>NaiveDateTime::parse_from_str(date_str, &quot;%Y-%m-%d %H:%M:%S&quot;).map(|ndt| DateTime::&lt;Utc&gt;::from_utc(ndt, Utc))</code>"}, {"owner": {"reputation": 163, "user_id": 9611967, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/76e313ba2cb987998fa6f454ec4c85e9?s=128&d=identicon&r=PG", "display_name": "Brendano257", "link": "https://stackoverflow.com/users/9611967/brendano257"}, "reply_to_user": {"reputation": 1772, "user_id": 2398020, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0b986575e9a1c32e48f95ba0d879ab19?s=128&d=identicon&r=PG", "display_name": "Mingwei Samuel", "link": "https://stackoverflow.com/users/2398020/mingwei-samuel"}, "edited": false, "score": 0, "creation_date": 1608989125, "post_id": 37418858, "comment_id": 115724591, "body": "@MingweiSamuel I&#39;m guessing the update is due to &quot;UTC&quot; no longer being a part of Chrono? But is your suggestion seriously the most succinct way of parsing a datetime with a known timezone (that isn&#39;t included in the string)? I&#39;m just a bit astounded as this seems like a fairly common need."}], "tags": [], "owner": {"reputation": 305, "user_id": 2825707, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/4f10f8d778ac2097fc46202496199555?s=128&d=identicon&r=PG&f=1", "display_name": "noshusan", "link": "https://stackoverflow.com/users/2825707/noshusan"}, "is_accepted": true, "score": 5, "last_activity_date": 1464106508, "creation_date": 1464106508, "answer_id": 37418858, "question_id": 37418464, "link": "https://stackoverflow.com/questions/37418464/what-does-parseerrornotenough-from-rust-chrono-mean/37418858#37418858", "title": "What does ParseError(NotEnough) from rust-chrono mean?", "body": "<p>You should use</p>\n\n<pre><code>UTC.datetime_from_str(&amp;date_str, \"%Y-%m-%d %H:%M:%S\");\n</code></pre>\n\n<p>Like:</p>\n\n<pre><code>extern crate chrono;\n\nuse chrono::*;\n\nfn main() {\n\n    let date_str = \"2013-02-14 15:41:07\";\n    let date = UTC.datetime_from_str(&amp;date_str, \"%Y-%m-%d %H:%M:%S\");\n    match date {\n        Ok(v) =&gt; println!(\"{:?}\", v),\n        Err(e) =&gt; println!(\"{:?}\", e)\n    }\n\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 9, "last_activity_date": 1464106588, "creation_date": 1464106588, "answer_id": 37418886, "question_id": 37418464, "link": "https://stackoverflow.com/questions/37418464/what-does-parseerrornotenough-from-rust-chrono-mean/37418886#37418886", "title": "What does ParseError(NotEnough) from rust-chrono mean?", "body": "<p>Types that implement <code>Error</code> have more user-friendly error messages via <code>Error::description</code> or <code>Display</code>:</p>\n\n<pre><code>Err(e) =&gt; println!(\"{}\", e)\n</code></pre>\n\n<p>This prints:</p>\n\n<blockquote>\n  <p>input is not enough for unique date and time</p>\n</blockquote>\n\n<p>Presumably this is because you haven't provided a timezone, thus the time is ambiguous.</p>\n"}, {"tags": [], "owner": {"reputation": 592, "user_id": 2037998, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/W4XBV.png?s=128&g=1", "display_name": "Ralph Bisschops", "link": "https://stackoverflow.com/users/2037998/ralph-bisschops"}, "is_accepted": false, "score": 1, "last_activity_date": 1586730966, "creation_date": 1586730966, "answer_id": 61179107, "question_id": 37418464, "link": "https://stackoverflow.com/questions/37418464/what-does-parseerrornotenough-from-rust-chrono-mean/61179107#61179107", "title": "What does ParseError(NotEnough) from rust-chrono mean?", "body": "<p>The ParseError(NotEnough) shows up when there is not enough information to fill out the whole object. For example the date, time or timezone is missing.</p>\n\n<p>In the example above the timezone is missing. So we can store it in a <a href=\"https://docs.rs/chrono/0.4.11/chrono/naive/struct.NaiveDateTime.html\" rel=\"nofollow noreferrer\">NaiveDateTime</a>. This object does not store a timezone:</p>\n\n<pre><code>let naive_datetime = NaiveDateTime::parse_from_str(date_str, \"%Y-%m-%d %H:%M:%S\").unwrap();\n</code></pre>\n\n<p>For more info: <a href=\"https://stackoverflow.com/a/61179071/2037998\">https://stackoverflow.com/a/61179071/2037998</a></p>\n"}], "owner": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1472, "favorite_count": 1, "accepted_answer_id": 37418858, "answer_count": 3, "score": 10, "last_activity_date": 1586730966, "creation_date": 1464105331, "last_edit_date": 1464106349, "question_id": 37418464, "link": "https://stackoverflow.com/questions/37418464/what-does-parseerrornotenough-from-rust-chrono-mean", "title": "What does ParseError(NotEnough) from rust-chrono mean?", "body": "<p>I'm using <a href=\"https://github.com/lifthrasiir/rust-chrono\" rel=\"noreferrer\"><code>rust-chrono</code></a> and I'm trying to parse a date like this:</p>\n\n<pre><code>extern crate chrono;\n\nuse chrono::*;\n\nfn main() {\n\n    let date_str = \"2013-02-14 15:41:07\";\n    let date = DateTime::parse_from_str(&amp;date_str, \"%Y-%m-%d %H:%M:%S\");\n    match date {\n        Ok(v) =&gt; println!(\"{:?}\", v),\n        Err(e) =&gt; println!(\"{:?}\", e)\n    }\n\n}\n</code></pre>\n\n<p>And this is the output:</p>\n\n<pre><code>ParseError(NotEnough)\n</code></pre>\n\n<p>What does this mean? Not enough of what? Should I be using some other library?</p>\n"}, {"tags": ["rust", "trait-objects"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1464104728, "last_edit_date": 1464104728, "creation_date": 1464104201, "answer_id": 37418073, "question_id": 37417871, "link": "https://stackoverflow.com/questions/37417871/why-do-some-stdfmtdebug-methods-use-dynamic-dispatch/37418073#37418073", "title": "Why do some std::fmt::Debug* methods use dynamic dispatch?", "body": "<p>Static dispatch uses <em>monomorphization</em>, which causes a separate copy of the code to be created for every concrete type.</p>\n\n<p>When you have a function that is used with <em>many</em> concrete types, you may incur a large penalty at compile time to create and optimize all of these versions. This will happen even if monomorphization doesn't add performance in these cases.</p>\n\n<p>Instead, you can choose to use a <a href=\"https://doc.rust-lang.org/book/trait-objects.html\" rel=\"nofollow\"><em>trait object</em></a>, which creates a single implementation of the code (for <code>&amp;Trait</code>). </p>\n\n<hr>\n\n<p>These methods were added as part of <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0640-debug-improvements.md\" rel=\"nofollow\">RFC 640</a>, but the <a href=\"https://github.com/rust-lang/rfcs/pull/640\" rel=\"nofollow\">discussion</a> doesn't seem to mention this aspect. In fact, they were <a href=\"https://github.com/rust-lang/rust/commit/e3656bd8#diff-9729cfe9d582af94e05e3b580dbc0e28R193\" rel=\"nofollow\">originally implemented with static dispatch</a>. Only later were they <a href=\"https://github.com/rust-lang/rust/commit/8121cf077c68fa1d18a1a538deb5acdf79c5e732\" rel=\"nofollow\">changed to accept a trait object</a>:</p>\n\n<blockquote>\n  <p>Restructure debug builders to minimize codegen</p>\n  \n  <p>Switching from generic bounds to trait objects and having un-inlined\n  inner methods should cut down on the size of Debug impls, since we care\n  about the speed of a Debug implementation way less than binary bloat.</p>\n</blockquote>\n"}], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 148, "favorite_count": 0, "accepted_answer_id": 37418073, "answer_count": 1, "score": 4, "last_activity_date": 1464104728, "creation_date": 1464103626, "last_edit_date": 1464104522, "question_id": 37417871, "link": "https://stackoverflow.com/questions/37417871/why-do-some-stdfmtdebug-methods-use-dynamic-dispatch", "title": "Why do some std::fmt::Debug* methods use dynamic dispatch?", "body": "<p>These methods use dynamic dispatch (receive a trait object <code>&amp;Debug</code> as parameter):</p>\n\n<ul>\n<li><a href=\"https://doc.rust-lang.org/stable/std/fmt/struct.DebugMap.html#method.entry\" rel=\"nofollow\"><code>DebugMap::entry</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/stable/std/fmt/struct.DebugSet.html#method.entry\" rel=\"nofollow\"><code>DebugSet::entry</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/stable/std/fmt/struct.DebugStruct.html#method.field\" rel=\"nofollow\"><code>DebugStruct::field</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/stable/std/fmt/struct.DebugTuple.html#method.field\" rel=\"nofollow\"><code>DebugTuple::field</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/stable/std/fmt/struct.DebugList.html#method.entry\" rel=\"nofollow\"><code>DebugList::entry</code></a></li>\n</ul>\n\n<p>These methods use static dispatch and are written in terms of the related <code>entry</code> method:</p>\n\n<ul>\n<li><a href=\"https://doc.rust-lang.org/stable/std/fmt/struct.DebugMap.html#method.entries\" rel=\"nofollow\"><code>DebugMap::entries</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/stable/std/fmt/struct.DebugSet.html#method.entries\" rel=\"nofollow\"><code>DebugSet::entries</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/stable/std/fmt/struct.DebugList.html#method.entries\" rel=\"nofollow\"><code>DebugList::entries</code></a></li>\n</ul>\n\n<p>Why does the first list of methods use dynamic dispatch instead of static dispatch? If static dispatch was used, would their use be restricted?</p>\n"}, {"tags": ["rust", "llvm-ir", "bitcode"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1464099986, "post_id": 37416272, "comment_id": 62338850, "body": "<code>rustc</code> is the Rust compiler, it doesn&#39;t compile other input formats. Why not use LLVM&#39;s <code>llc</code> or equivalent if you have the bitcode?"}, {"owner": {"reputation": 3299, "user_id": 230504, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/acadd9b0700b9fcdfbc74aa6faffeb86?s=128&d=identicon&r=PG", "display_name": "Leonardo Marques", "link": "https://stackoverflow.com/users/230504/leonardo-marques"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1464100152, "post_id": 37416272, "comment_id": 62338964, "body": "That was my initial guess but I&#39;m not very familiar with llc and only found this: -filetype                                                      - Choose a file type (not all types are supported by all targets):     =asm                                                         -   Emit an assembly (&#39;.s&#39;) file     =obj                                                         -   Emit a native object (&#39;.o&#39;) file     =null                                                        -   Emit nothing, for performance testing. None of them seemed what I was looking for."}], "answers": [{"comments": [{"owner": {"reputation": 3299, "user_id": 230504, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/acadd9b0700b9fcdfbc74aa6faffeb86?s=128&d=identicon&r=PG", "display_name": "Leonardo Marques", "link": "https://stackoverflow.com/users/230504/leonardo-marques"}, "edited": false, "score": 0, "creation_date": 1464104065, "post_id": 37417117, "comment_id": 62341843, "body": "What is the DYLD_LIBRARY_PATH=/path/to/stage2/lib/rustlib/x86_64-apple-d&zwnj;&#8203;arwin/lib/ for?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 3299, "user_id": 230504, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/acadd9b0700b9fcdfbc74aa6faffeb86?s=128&d=identicon&r=PG", "display_name": "Leonardo Marques", "link": "https://stackoverflow.com/users/230504/leonardo-marques"}, "edited": false, "score": 1, "creation_date": 1464104320, "post_id": 37417117, "comment_id": 62342007, "body": "@LeonardoMarques When I linked the object files with the standard library, it used dynamic linking. Since the Rust standard library isn&#39;t in my default library search path, I have to inform the dynamic linker where to find it at program execution time. You could build a static binary instead (which is a bit tricky for me on OS X, so I skipped it) or if the standard library was in the search path the runtime linker would know where to find it."}, {"owner": {"reputation": 3299, "user_id": 230504, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/acadd9b0700b9fcdfbc74aa6faffeb86?s=128&d=identicon&r=PG", "display_name": "Leonardo Marques", "link": "https://stackoverflow.com/users/230504/leonardo-marques"}, "edited": false, "score": 0, "creation_date": 1464105088, "post_id": 37417117, "comment_id": 62342542, "body": "isn&#39;t -lstd-2f39a9bd suposed to have a .dylib extension? Why is it tricky to build a static binary?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 3299, "user_id": 230504, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/acadd9b0700b9fcdfbc74aa6faffeb86?s=128&d=identicon&r=PG", "display_name": "Leonardo Marques", "link": "https://stackoverflow.com/users/230504/leonardo-marques"}, "edited": false, "score": 1, "creation_date": 1464105224, "post_id": 37417117, "comment_id": 62342646, "body": "@LeonardoMarques that&#39;s just how the <code>-l</code> flag works. It prepends a <code>lib</code> and adds <code>.dylib</code> (or <code>.so</code>, or whatever is appropriate for the platform)."}, {"owner": {"reputation": 3299, "user_id": 230504, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/acadd9b0700b9fcdfbc74aa6faffeb86?s=128&d=identicon&r=PG", "display_name": "Leonardo Marques", "link": "https://stackoverflow.com/users/230504/leonardo-marques"}, "edited": false, "score": 0, "creation_date": 1464105465, "post_id": 37417117, "comment_id": 62342784, "body": "Why is it tricky to build a static binary? (I&#39;m also working on MacOSX)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 3299, "user_id": 230504, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/acadd9b0700b9fcdfbc74aa6faffeb86?s=128&d=identicon&r=PG", "display_name": "Leonardo Marques", "link": "https://stackoverflow.com/users/230504/leonardo-marques"}, "edited": false, "score": 1, "creation_date": 1464105710, "post_id": 37417117, "comment_id": 62342934, "body": "@LeonardoMarques <a href=\"https://developer.apple.com/library/mac/qa/qa1118/_index.html\" rel=\"nofollow noreferrer\">&quot;Apple does not support statically linked binaries on Mac OS X&quot;</a>. Also see <a href=\"http://stackoverflow.com/q/5259249/155423\">Creating static Mac OS X C build</a>. Stack Overflow has lots of these details fleshed out. :-)"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1464101670, "creation_date": 1464101670, "answer_id": 37417117, "question_id": 37416272, "link": "https://stackoverflow.com/questions/37416272/generating-rust-executable-from-llvm-bitcode/37417117#37417117", "title": "Generating Rust executable from LLVM bitcode", "body": "<p>Starting with this source code:</p>\n\n<pre><code>fn main() {\n    println!(\"Hello, world!\");\n}\n</code></pre>\n\n<p>You can create LLVM <em>intermediate representation</em> (IR) or <em>bitcode</em> (BC):</p>\n\n<pre class=\"lang-none prettyprint-override\"><code># IR in hello.ll\nrustc hello.rs --emit=llvm-ir\n# BC in hello.bc\nrustc hello.rs --emit=llvm-bc\n</code></pre>\n\n<p>These files can then be further processed by LLVM to produce <em>assembly</em> or an <em>object file</em>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code># Assembly in hello.s\nllc hello.bc\n# Object in hello.o\nllc hello.bc --filetype=obj\n</code></pre>\n\n<p>Then you need to link the files to produce an executable. This requires linking to the Rust standard libraries. The path is platform- and version-dependent:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>cc -L/path/to/stage2/lib/rustlib/x86_64-apple-darwin/lib/ -lstd-2f39a9bd -o hello2 hello.o\n</code></pre>\n\n<p>You can then run the program:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>DYLD_LIBRARY_PATH=/path/to/stage2/lib/rustlib/x86_64-apple-darwin/lib/ ./hello2\n</code></pre>\n\n<p>This answer has OS X specific solutions, but the general concepts <em>should</em> be extendable to Linux and Windows. The implementation will differ slightly for Linux and probably greatly for Windows.</p>\n"}, {"tags": [], "owner": {"reputation": 51, "user_id": 6388087, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/uNySj.jpg?s=128&g=1", "display_name": "Peter Caven", "link": "https://stackoverflow.com/users/6388087/peter-caven"}, "is_accepted": false, "score": 5, "last_activity_date": 1464294379, "creation_date": 1464294379, "answer_id": 37470352, "question_id": 37416272, "link": "https://stackoverflow.com/questions/37416272/generating-rust-executable-from-llvm-bitcode/37470352#37470352", "title": "Generating Rust executable from LLVM bitcode", "body": "<p>It isn't obvious since the LLVM documentation is very obscure, but <em>clang</em> will compile both LLVM IR files (\".ll\") and bitcode files (\".bc\"), and link with your system libraries.</p>\n\n<p>On Linux with Rust 1.9:</p>\n\n<pre><code>clang -dynamic-linker /usr/local/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd-d16b8f0e.so  hello.ll -o hello\n</code></pre>\n"}], "owner": {"reputation": 3299, "user_id": 230504, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/acadd9b0700b9fcdfbc74aa6faffeb86?s=128&d=identicon&r=PG", "display_name": "Leonardo Marques", "link": "https://stackoverflow.com/users/230504/leonardo-marques"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1895, "favorite_count": 2, "accepted_answer_id": 37417117, "answer_count": 2, "score": 10, "last_activity_date": 1480257809, "creation_date": 1464099393, "last_edit_date": 1480257809, "question_id": 37416272, "link": "https://stackoverflow.com/questions/37416272/generating-rust-executable-from-llvm-bitcode", "title": "Generating Rust executable from LLVM bitcode", "body": "<p>How can I generate an executable of an application written in Rust that was compiled into LLVM-IR bitcode?</p>\n\n<p>If I try to compile the .bc file with rustc it tells me <code>stream did not contain valid UTF-8</code> and I can't seem to figure out if there is a specific option in rustc for this.</p>\n\n<p>Basically I want to achieve this:\n<code>program.rs</code> -> <code>program.bc</code> -> <code>program</code>.\nWhere <code>program</code> is the final executable. What steps should I make to achieve this?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "is_accepted": true, "score": 3, "last_activity_date": 1464096567, "creation_date": 1464096567, "answer_id": 37415121, "question_id": 37414973, "link": "https://stackoverflow.com/questions/37414973/rust-serialize-error-the-type-of-this-value-must-be-known-in-this-context/37415121#37415121", "title": "rust_serialize error: the type of this value must be known in this context", "body": "<p>If you want to get a <code>Json</code>, you cannot use <code>json::decode</code> since <code>Json</code> does not implement <code>Decodable</code>.</p>\n\n<p>But you can do the following:</p>\n\n<pre><code>extern crate rustc_serialize;\n\nuse rustc_serialize::json::Json;\n\nfn main() {\n    let json_str = \"{\\\"foo\\\": \\\"bar\\\"}\";\n    let json = Json::from_str(&amp;json_str).unwrap();\n    let foo = json.as_object().unwrap().get(\"foo\").unwrap().as_string().unwrap();\n    println!(\"{}\", foo);\n}\n</code></pre>\n"}], "owner": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 62, "favorite_count": 1, "accepted_answer_id": 37415121, "answer_count": 1, "score": 3, "last_activity_date": 1464096567, "creation_date": 1464096216, "question_id": 37414973, "link": "https://stackoverflow.com/questions/37414973/rust-serialize-error-the-type-of-this-value-must-be-known-in-this-context", "title": "rust_serialize error: the type of this value must be known in this context", "body": "<p>The example below is not working, but I can't figure out why:</p>\n\n<pre><code>extern crate rustc_serialize;\n\nuse rustc_serialize::json;\n\nfn main() {\n\n    let json_str = \"{\\\"foo\\\": \\\"bar\\\"}\";\n    let foo: String = json::decode(&amp;json_str).unwrap().as_object().get(\"foo\").unwrap().as_string().unwrap();\n    println!(\"{}\", foo);\n\n}\n</code></pre>\n\n<p>Error:</p>\n\n<pre><code>src/main.rs:8:23: 8:67 error: the type of this value must be known in this context\nsrc/main.rs:8     let foo: String = json::decode(&amp;json_str).unwrap().as_object().get(\"foo\").unwrap().as_string().unwrap();\n                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>I think at the very least error is pointing to the wrong location here?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 1, "creation_date": 1464094158, "post_id": 37413364, "comment_id": 62334368, "body": "You&#39;re trying to store <code>&amp;self.s</code> inside <code>self</code> which is not allowed, despite that it is indirect in this case."}, {"owner": {"reputation": 1534, "user_id": 1595430, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/GC3hf.png?s=128&g=1", "display_name": "Hot.PxL", "link": "https://stackoverflow.com/users/1595430/hot-pxl"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1464144058, "post_id": 37413364, "comment_id": 62358733, "body": "@VladimirMatveev Thanks. It all makes sense now. I should really take reference as raw pointers in C and wrap lifetime-complicated stuff in Arcs."}], "owner": {"reputation": 1534, "user_id": 1595430, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/GC3hf.png?s=128&g=1", "display_name": "Hot.PxL", "link": "https://stackoverflow.com/users/1595430/hot-pxl"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 36, "favorite_count": 0, "closed_date": 1464094035, "answer_count": 0, "score": 0, "last_activity_date": 1464092357, "creation_date": 1464092357, "question_id": 37413364, "link": "https://stackoverflow.com/questions/37413364/rust-cannot-infer-an-appropriate-lifetime", "closed_reason": "Duplicate", "title": "Rust cannot infer an appropriate lifetime", "body": "<p>I have the following code. I'm using <code>mio</code>, and a server to accept connections. After it has accepted a client, it puts a reference of its <code>s</code> into the client, and puts the client into its own <code>HashMap</code>.</p>\n\n<pre><code>use std::sync::Arc;\nuse std::collections::HashMap;\nuse mio::EventLoop;\nuse mio::EventSet;\nuse mio::Token;\nuse mio::Handler;\nuse mio::tcp::TcpListener;\nuse mio::tcp::TcpStream;\n\nconst SERVER_TOKEN: Token = Token(0);\n\nstruct FunctionWrapper&lt;'a&gt; {\n    f: Arc&lt;Fn() -&gt; () + 'a&gt;,\n}\n\nstruct Client&lt;'a&gt; {\n    socket: TcpStream,\n    s: &amp;'a Vec&lt;FunctionWrapper&lt;'a&gt;&gt;,\n}\n\nstruct Server&lt;'a&gt; {\n    s: Vec&lt;FunctionWrapper&lt;'a&gt;&gt;,\n    token_counter: usize,\n    socket: TcpListener,\n    clients: HashMap&lt;Token, Client&lt;'a&gt;&gt;,\n}\n\nimpl&lt;'a&gt; Handler for Server&lt;'a&gt; {\n    type Timeout = ();\n    type Message = ();\n    fn ready(&amp;mut self, event_loop: &amp;mut EventLoop&lt;Self&gt;, token: Token, _: EventSet) {\n        match token {\n            SERVER_TOKEN =&gt; {\n                let client_socket = match self.socket.accept() {\n                    Ok(Some((sock, addr))) =&gt; sock,\n                    Ok(None) =&gt; unreachable!(),\n                    Err(_) =&gt; unreachable!(),\n                };\n                let new_token = Token(self.token_counter);\n                self.token_counter += 1;\n                let c = Client {\n                    socket: client_socket,\n                    s: &amp;self.s,\n                };\n                self.clients.insert(new_token, c);\n            },\n            token =&gt; {\n                // ...\n            },\n        }\n    }\n}\n\nfn main() {\n}\n</code></pre>\n\n<p>The compiler says:</p>\n\n<pre><code>main.rs:155:24: 155:31 error: cannot infer an appropriate lifetime for borrow expression due to conflicting requirements [E0495]\nmain.rs:155                     s: &amp;self.s,\n                                   ^~~~~~~\nmain.rs:144:5: 163:6 help: consider using an explicit lifetime parameter as shown: fn ready(&amp;'a mut self, event_loop: &amp;mut EventLoop&lt;Self&gt;, token: Token,\n         _: EventSet)\nmain.rs:144     fn ready(&amp;mut self, event_loop: &amp;mut EventLoop&lt;Self&gt;, token: Token, _: EventSet) {\nmain.rs:145         match token {\nmain.rs:146             SERVER_TOKEN =&gt; {\nmain.rs:147                 let client_socket = match self.socket.accept() {\nmain.rs:148                     Ok(Some((sock, addr))) =&gt; sock,\nmain.rs:149                     Ok(None) =&gt; unreachable!(),\n</code></pre>\n\n<p>Looks like the compiler is unable to figure out lifetimes between clients and servers. Since the clients are contained in a map in the server, they will never outlast the server. So I think that a reference to a field in server would be fine.</p>\n\n<p>How do I fix this?</p>\n"}, {"tags": ["rust", "iron"], "answers": [{"comments": [{"owner": {"reputation": 2647, "user_id": 2057867, "user_type": "registered", "accept_rate": 27, "profile_image": "https://www.gravatar.com/avatar/a02ac3125fd67db27a3870119a93fa92?s=128&d=identicon&r=PG", "display_name": "Jacob Clark", "link": "https://stackoverflow.com/users/2057867/jacob-clark"}, "edited": false, "score": 0, "creation_date": 1464099751, "post_id": 37413559, "comment_id": 62338680, "body": "Thanks for the brilliant response, is there any reason why &#39;Modifier&#39; implements tuples up to 5 and not beyond?"}, {"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 0, "creation_date": 1464100539, "post_id": 37413559, "comment_id": 62339239, "body": "My guess is that it is just annoying to type too much trait implementations"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 2647, "user_id": 2057867, "user_type": "registered", "accept_rate": 27, "profile_image": "https://www.gravatar.com/avatar/a02ac3125fd67db27a3870119a93fa92?s=128&d=identicon&r=PG", "display_name": "Jacob Clark", "link": "https://stackoverflow.com/users/2057867/jacob-clark"}, "edited": false, "score": 1, "creation_date": 1464103731, "post_id": 37413559, "comment_id": 62341599, "body": "@JacobClark Basically what aochagavia says. The problem is that Rust doesn&#39;t offer functionality to implement a trait for tuples of all sizes. So each implementation has to be written out manually (more or less) and adds more code to the project. So you have to stop at some point... Iron decided 5 is a good point to stop ;)"}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 5, "last_activity_date": 1464092821, "creation_date": 1464092821, "answer_id": 37413559, "question_id": 37413086, "link": "https://stackoverflow.com/questions/37413086/how-does-the-iron-framework-apply-a-tuple-of-modifiers-to-responsewith/37413559#37413559", "title": "How does the Iron framework apply a tuple of modifiers to Response::with?", "body": "<p>Interesting question! Let's look at the function signature again:</p>\n\n<pre><code>fn with&lt;M: Modifier&lt;Response&gt;&gt;(m: M) -&gt; Response\n</code></pre>\n\n<p>This means that <code>with</code> accepts exactly one argument that implements <code>Modifier&lt;Response&gt;</code>. So next <a href=\"http://ironframework.io/doc/modifier/trait.Modifier.html\" rel=\"noreferrer\">we could look up</a> what types do implement the trait <code>Modifier</code>. In the documentation we see that it's not only implemented for <code>String</code> or <code>Status</code>, but for tuple types, too! Those implementations are written in <a href=\"https://github.com/reem/rust-modifier/blob/42b30e4953ea68a5471cb3145bcb4ea05b156792/src/impls.rs\" rel=\"noreferrer\">this file</a>. For example, let's look at this impl:</p>\n\n<pre><code>impl&lt;X, M1, M2, M3&gt; Modifier&lt;X&gt; for (M1, M2, M3)\n    where M1: Modifier&lt;X&gt;,\n          M2: Modifier&lt;X&gt;,\n          M3: Modifier&lt;X&gt; \n{\n    fn modify(self, x: &amp;mut X) {\n        self.0.modify(x);\n        self.1.modify(x);\n        self.2.modify(x);\n    }\n}\n</code></pre>\n\n<p>This implements the trait for every tuple of size 3 which elements also implement <code>Modifier</code>. And the implementation of <code>modify</code> is just to call the <code>modify</code>-implementation of each tuple element; this is the <em>foreach</em> you were searching for.</p>\n"}], "owner": {"reputation": 2647, "user_id": 2057867, "user_type": "registered", "accept_rate": 27, "profile_image": "https://www.gravatar.com/avatar/a02ac3125fd67db27a3870119a93fa92?s=128&d=identicon&r=PG", "display_name": "Jacob Clark", "link": "https://stackoverflow.com/users/2057867/jacob-clark"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 113, "favorite_count": 1, "accepted_answer_id": 37413559, "answer_count": 1, "score": 4, "last_activity_date": 1464093362, "creation_date": 1464091622, "last_edit_date": 1464093362, "question_id": 37413086, "link": "https://stackoverflow.com/questions/37413086/how-does-the-iron-framework-apply-a-tuple-of-modifiers-to-responsewith", "title": "How does the Iron framework apply a tuple of modifiers to Response::with?", "body": "<p>I am looking into the Iron source code for <code>Response::with()</code>, trying to understand how it applies a tuple as modifiers to the response.</p>\n\n<p>As I understand, a modifier is simply a builder object, taking in a reference to the current context (<code>self</code>) and taking the object you wish to build on as a parameter (as long as you implement the <code>modify</code> function).</p>\n\n<p>Assuming we have the following code:</p>\n\n<pre><code>use iron::modifiers::Header;\n\nfn hello_world(_: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\n    let string = get_file_as_string(\"./public/index.html\");\n    let content_type = Header(ContentType(Mime(TopLevel::Text, SubLevel::Html, vec![])));\n    Ok(Response::with((status::Ok, string, content_type)))\n}\n</code></pre>\n\n<p>Digging through the docs, I can see the implementation of <code>Response::with()</code> in Iron is as follows:</p>\n\n<pre><code>pub fn new() -&gt; Response {\n    Response {\n        status: None, // Start with no response code.\n        body: None, // Start with no body.\n        headers: Headers::new(),\n        extensions: TypeMap::new()\n    }\n}\n\n/// Construct a Response with the specified modifier pre-applied.\npub fn with&lt;M: Modifier&lt;Response&gt;&gt;(m: M) -&gt; Response {\n    Response::new().set(m)\n}\n</code></pre>\n\n<p>I'm struggling to see how my tuple of objects are translated into modifiers? I'd expect to see a foreach potentially iterating over each modifier, but here I simply see a set operation.</p>\n\n<p>Could somebody explain the order to execution here and uncover what is actually happening? </p>\n"}, {"tags": ["c", "windows", "dll", "rust"], "comments": [{"owner": {"reputation": 153119, "user_id": 584518, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/RZLo7.png?s=128&g=1", "display_name": "Lundin", "link": "https://stackoverflow.com/users/584518/lundin"}, "edited": false, "score": 0, "creation_date": 1464088430, "post_id": 37411029, "comment_id": 62330176, "body": "Why is this tagged C? There is no C here."}, {"owner": {"reputation": 31, "user_id": 6375383, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6359fd4fce913f9b57a2ff729c12c1c9?s=128&d=identicon&r=PG&f=1", "display_name": "dancing.in.the.air", "link": "https://stackoverflow.com/users/6375383/dancing-in-the-air"}, "reply_to_user": {"reputation": 153119, "user_id": 584518, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/RZLo7.png?s=128&g=1", "display_name": "Lundin", "link": "https://stackoverflow.com/users/584518/lundin"}, "edited": false, "score": 0, "creation_date": 1464088848, "post_id": 37411029, "comment_id": 62330484, "body": "In my example Rusl compiles dll with C abi. And as I understand Windows C professionals understand structure of dll file better than others."}, {"owner": {"reputation": 153119, "user_id": 584518, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/RZLo7.png?s=128&g=1", "display_name": "Lundin", "link": "https://stackoverflow.com/users/584518/lundin"}, "edited": false, "score": 0, "creation_date": 1464089105, "post_id": 37411029, "comment_id": 62330677, "body": "In pure C Winapi it would have been trivial, just call <code>GetLastError</code>. But I&#39;m guessing you can&#39;t do that, since you seem to have ten or so abstraction layers between the API and the application..."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1464094909, "post_id": 37411029, "comment_id": 62334958, "body": "Have you tried <a href=\"https://technet.microsoft.com/en-us/sysinternals/bb896645.aspx\" rel=\"nofollow noreferrer\">procmon</a>? Potentially a duplicate of <a href=\"http://stackoverflow.com/q/3722087/155423\">stackoverflow.com/q/3722087/155423</a>."}, {"owner": {"reputation": 31, "user_id": 6375383, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6359fd4fce913f9b57a2ff729c12c1c9?s=128&d=identicon&r=PG&f=1", "display_name": "dancing.in.the.air", "link": "https://stackoverflow.com/users/6375383/dancing-in-the-air"}, "edited": false, "score": 0, "creation_date": 1464117707, "post_id": 37411029, "comment_id": 62349596, "body": "Yes, I&#39;ve tried ProcessMonitor: <a href=\"http://pastebin.com/LCYRJDmB\" rel=\"nofollow noreferrer\">several DLLs failed to load</a>. The most strange is \u6574\u7473\u642e\u6c6c.DLL. But how to find out exact problem?"}], "owner": {"reputation": 31, "user_id": 6375383, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6359fd4fce913f9b57a2ff729c12c1c9?s=128&d=identicon&r=PG&f=1", "display_name": "dancing.in.the.air", "link": "https://stackoverflow.com/users/6375383/dancing-in-the-air"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 1445, "favorite_count": 0, "answer_count": 0, "score": 3, "last_activity_date": 1464094576, "creation_date": 1464085960, "last_edit_date": 1464094576, "question_id": 37411029, "link": "https://stackoverflow.com/questions/37411029/how-to-find-out-why-a-dll-fails-to-load-in-different-programs", "title": "How to find out why a DLL fails to load in different programs?", "body": "<p><strong>Question in general</strong></p>\n\n<p>Is there some way to find out why a DLL fails to load in a program? I periodically bump into errors while loading DLLs in both my and 3rd party software. It'd be nice to have common way to solve this situations and determine what is wrong with the specific DLL on a specific system.</p>\n\n<p><strong>For example</strong></p>\n\n<p>I've compiled a simple DLL with Rust (x64, MSVC ABI):</p>\n\n<pre><code>use std::fs::File;\nuse std::io::Write;\n\n#[no_mangle]\npub extern fn test_dll_call() -&gt; u8 {\n    let mut f = File::create(\"C:\\\\test.txt\").unwrap();\n    f.write(b\"Hello, world!\").unwrap();\n    return 0\n}\n</code></pre>\n\n<p>It's built via:</p>\n\n<pre><code>cargo build --release\n</code></pre>\n\n<p>DependencyWalker shows a lot of API-MS-WIN-CORE-* DLLs missing in my system for the compiled DLL:</p>\n\n<ul>\n<li>API-MS-WIN-CORE-APIQUERY-L1-1-0.DLL</li>\n<li>API-MS-WIN-CORE-APPCOMPAT-L1-1-1.DLL</li>\n<li>API-MS-WIN-CORE-APPINIT-L1-1-0.DLL</li>\n<li>API-MS-WIN-CORE-ATOMS-L1-1-0.DLL</li>\n<li>...</li>\n</ul>\n\n<p>However on my Windows 10 x64 system I've already installed MS Visual Studio 2015 and MS C++ Redistributables 2005, 2010, 2012, 2013 and 2015.</p>\n\n<p>A lot of DLLs with missing dependencies in DependencyWalker work fine, so I've tried to use my DLL in Lua:</p>\n\n<pre><code>require(\"test\");\n\nfunction main()\n    test.test_dll_call();\nend\n</code></pre>\n\n<p>However I get laconic error <em>\"loop or previous error loading module 'test'\"</em>. Some other 3rd party DLLs have loaded like a charm. How do I check what is wrong with my DLL?</p>\n"}, {"tags": ["types", "compiler-errors", "rust", "type-inference"], "answers": [{"comments": [{"owner": {"reputation": 647, "user_id": 5429050, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/da7e1d765858cc119fc86fa3e48e410b?s=128&d=identicon&r=PG", "display_name": "Hossein Noroozpour", "link": "https://stackoverflow.com/users/5429050/hossein-noroozpour"}, "edited": false, "score": 1, "creation_date": 1464085686, "post_id": 37410775, "comment_id": 62328348, "body": "Oh really u8 does not play as a preserved word in here! interesting! Is there no other way for it?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 647, "user_id": 5429050, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/da7e1d765858cc119fc86fa3e48e410b?s=128&d=identicon&r=PG", "display_name": "Hossein Noroozpour", "link": "https://stackoverflow.com/users/5429050/hossein-noroozpour"}, "edited": false, "score": 0, "creation_date": 1464088727, "post_id": 37410775, "comment_id": 62330396, "body": "@HosseinNoroozpour: There are multiple possibilities, at the very least: (1) a trait with a generic method (as you did), where the method remains generic, (2) a generic trait (as ker did), where the method is specific to the trait parameter and (3) a trait with an associated type, where the method is specific (customized by the associated type). The latter is <code>trait A { type T; fn a(&amp;self) -&gt; T; }</code> and <code>impl A for AA { type T = u8; fn a(&amp;self) -&gt; u8 { self.b }</code>."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1464090963, "post_id": 37410775, "comment_id": 62332039, "body": "curiously stable reports a much better error message, I reported this as a regression"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1464118355, "post_id": 37410775, "comment_id": 62349932, "body": "It&#39;s not a regression, nightly just allows shadowing builtin types for forwards compatibility"}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 9, "last_activity_date": 1493381580, "last_edit_date": 1493381580, "creation_date": 1464085355, "answer_id": 37410775, "question_id": 37410672, "link": "https://stackoverflow.com/questions/37410672/expected-type-parameter-found-u8-but-the-type-parameter-is-u8/37410775#37410775", "title": "Expected type parameter, found u8, but the type parameter is u8", "body": "<p>The following code does not do what you expect</p>\n\n<pre><code>impl Foo for Bar {\n    fn foo&lt;u8&gt;(&amp;self) -&gt; u8 {\n        self.b\n    }\n}\n</code></pre>\n\n<p>It introduces a generic type called <code>u8</code> which shadows the concrete type <code>u8</code>. Your function would be 100% the same as </p>\n\n<pre><code>impl Foo for Bar {\n    fn foo&lt;T&gt;(&amp;self) -&gt; T {\n        self.b\n    }\n}\n</code></pre>\n\n<p>Which cannot work in this case because <code>T</code>, chosen by the <em>caller</em> of <code>foo</code>, isn't guaranteed to be <code>u8</code>.</p>\n\n<p>To solve this problem in general, choose generic type names that do not conflict with concrete type names. Remember that the function signature in the implementation <em>has</em> to match the signature in the trait definition.</p>\n\n<hr>\n\n<p>To solve the issue presented, where you wish to <em>fix</em> the generic type as a specific value, you can move the generic parameter to the trait, and implement the trait just for <code>u8</code>:</p>\n\n<pre><code>trait Foo&lt;T&gt; {\n    fn foo(&amp;self) -&gt; T;\n}\n\nstruct Bar {\n    b: u8,\n}\n\nimpl Foo&lt;u8&gt; for Bar {\n    fn foo(&amp;self) -&gt; u8 {\n        self.b\n    }\n}\n</code></pre>\n\n<p>Or you can use an associated trait, if you never want multiple <code>Foo</code> impls for a specific type (thanks @MatthieuM):</p>\n\n<pre><code>trait Foo {\n    type T;\n    fn foo(&amp;self) -&gt; T;\n}\n\nstruct Bar {\n    b: u8,\n}\n\nimpl Foo for Bar {\n    type T = u8;\n    fn foo(&amp;self) -&gt; u8 {\n        self.b\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1493384441, "last_edit_date": 1495541436, "creation_date": 1493384441, "answer_id": 43680882, "question_id": 37410672, "link": "https://stackoverflow.com/questions/37410672/expected-type-parameter-found-u8-but-the-type-parameter-is-u8/43680882#43680882", "title": "Expected type parameter, found u8, but the type parameter is u8", "body": "<p>Let's look at a slightly more general example. We will define a trait with a function that takes and returns a generic type:</p>\n\n<pre><code>trait Foo {\n    fn foo&lt;T&gt;(&amp;self, value: T) -&gt; T;\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn foo&lt;u8&gt;(&amp;self, value: u8) -&gt; u8 {\n        value\n    }\n\n    // Equivalent to \n    // fn foo&lt;T&gt;(&amp;self, value: T) -&gt; T {\n    //    value\n    // }\n}\n</code></pre>\n\n<p>As <a href=\"https://stackoverflow.com/a/37410775/155423\">oli_obk - ker has already explained</a>, <code>fn foo&lt;u8&gt;(&amp;self, value: u8) -&gt; u8</code> defines a <em>generic type parameter</em> called <code>u8</code> which shadows the built in type <code>u8</code>. This is allowed for forwards compatibility reasons \u2014 what if you decided to call your generic type <code>Fuzzy</code> and then a crate (or the standard library!) introduced a type also called <code>Fuzzy</code>? If shadowing wasn't allowed, your code would stop compiling!</p>\n\n<p>However, you should <em>avoid</em> using generic type parameters that are existing types - as shown, it's just confusing.</p>\n\n<hr>\n\n<p>Many times, people fall into this trap because they are trying to specify a concrete type for a generic parameter. This shows that there is a misunderstanding of how generic types work: generic types are <strong>chosen by the caller of the function</strong>; the implementation doesn't get to pick what they are!</p>\n\n<p>The solutions outlined in the <a href=\"https://stackoverflow.com/a/37410775/155423\">other answer</a> remove the ability for the caller to choose the generic.</p>\n\n<ul>\n<li><p>Moving the generic type to the trait and only implementing it for a handful of types means that there's only a small set of implementations available. If the caller tries to use a type that doesn't have a corresponding implementation, it will just fail to compile.</p></li>\n<li><p>Choosing an associated type is <em>designed</em> to allow the implementor of the trait to choose the type, and is often the correct solution in this case. </p></li>\n</ul>\n\n<p>See <a href=\"https://stackoverflow.com/q/32059370/155423\">When is it appropriate to use an associated type versus a generic type?</a> for more details on picking between the two.</p>\n\n<p>This problem is more common for people learning Rust that haven't yet internalized what the various syntaxes of generics do. A quick refresher...</p>\n\n<p>Functions / methods:</p>\n\n<pre><code>fn foo&lt;T&gt;(a: T) -&gt; T\n//    ^-^ declares a generic type parameter\n\nfn foo&lt;T&gt;(a: T) -&gt; T\n//           ^     ^ a type, which can use a previously declared parameter\n</code></pre>\n\n<p>Traits:</p>\n\n<pre><code>trait Foo&lt;T&gt;\n//       ^-^ declares a generic type parameter\n</code></pre>\n\n<p>Structs / enums:</p>\n\n<pre><code>enum Wuuf&lt;T&gt;\n//       ^-^ declares a generic type parameter\n\nstruct Quux&lt;T&gt;\n//         ^-^ declares a generic type parameter\n</code></pre>\n\n<p>Implementations:</p>\n\n<pre><code>impl&lt;T&gt; Foo&lt;T&gt; for Bar&lt;T&gt;\n//  ^-^ declares a generic type parameter\n\nimpl&lt;T&gt; Foo&lt;T&gt; for Bar&lt;T&gt;\n//      ^----^     ^----^ a type, which can use a previously declared parameter\n</code></pre>\n\n<p>In these examples, only a <em>type</em> is allowed to specify a concrete type, which is why <code>impl Foo&lt;u8&gt; for Bar</code> makes sense. You could get back into the original situation by declaring a generic called <code>u8</code> on a trait too!</p>\n\n<pre><code>impl&lt;u8&gt; Foo&lt;u8&gt; for Bar // Right back where we started\n</code></pre>\n\n<hr>\n\n<p>There's another, rarer case: you didn't mean for the type to be generic in any fashion in the first place! If that's the case, rename or remove the generic type declaration and write a standard function. For our example, if we always wanted to return a <code>u8</code>, regardless of what type was passed in, we'd just write that:</p>\n\n<pre><code>trait Foo {\n    fn foo&lt;T&gt;(&amp;self, value: T) -&gt; u8;\n}\n\nimpl Foo for Bar {\n    fn foo&lt;T&gt;(&amp;self, value: T) -&gt; u8 {\n        42\n    }\n}\n</code></pre>\n\n<hr>\n\n<p>Good news! At least as of Rust 1.17, introducing this type of error is a bit easier to spot thanks to a warning:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>warning: type parameter `u8` should have a camel case name such as `U8`\n</code></pre>\n"}], "owner": {"reputation": 647, "user_id": 5429050, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/da7e1d765858cc119fc86fa3e48e410b?s=128&d=identicon&r=PG", "display_name": "Hossein Noroozpour", "link": "https://stackoverflow.com/users/5429050/hossein-noroozpour"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1860, "favorite_count": 1, "accepted_answer_id": 37410775, "answer_count": 2, "score": 5, "last_activity_date": 1493384441, "creation_date": 1464085076, "last_edit_date": 1492459667, "question_id": 37410672, "link": "https://stackoverflow.com/questions/37410672/expected-type-parameter-found-u8-but-the-type-parameter-is-u8", "title": "Expected type parameter, found u8, but the type parameter is u8", "body": "<pre><code>trait Foo {\n    fn foo&lt;T&gt;(&amp;self) -&gt; T;\n}\n\nstruct Bar {\n    b: u8,\n}\n\nimpl Foo for Bar {\n    fn foo&lt;u8&gt;(&amp;self) -&gt; u8 {\n        self.b\n    }\n}\n\nfn main() {\n    let bar = Bar {\n        b: 2,\n    };\n    println!(\"{:?}\", bar.foo());\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=fa601bca89894e0150306a2e1b57841a&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground</a>)</p>\n\n<p>The above code results in the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; &lt;anon&gt;:11:9\n   |\n11 |         self.b\n   |         ^^^^^^ expected type parameter, found u8\n   |\n   = note: expected type `u8` (type parameter)\n              found type `u8` (u8)\n</code></pre>\n\n<p>My guess is, the problem comes from generic function in trait. </p>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 1, "creation_date": 1464090507, "post_id": 37407664, "comment_id": 62331710, "body": "Could you please explain why you consider the latter two options &quot;bad in this case&quot;? I would personally have written this with <code>cloned()</code> or <code>into_iter()</code>, for instance."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1464091930, "post_id": 37407664, "comment_id": 62332764, "body": "@VladimirMatveev Thanks, that was indeed a confusing formulation. I didn&#39;t mean to talk about &quot;<i>this</i>&quot; case, but rather about the general case. Of course in my example code it would not make a difference to use the latter two options. But in the general case of having a vector and wanting to find the min/max, <code>into_iter</code> and <code>cloned</code> are probably not what you want."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 2, "last_activity_date": 1464093987, "last_edit_date": 1464093987, "creation_date": 1464076995, "answer_id": 37407664, "question_id": 37407663, "link": "https://stackoverflow.com/questions/37407663/result-of-iteratormax-does-not-live-long-enough-although-the-item-is-returned/37407664#37407664", "title": "Result of Iterator::max does not live long enough although the item is returned directly", "body": "<p>The problem is that you are using <a href=\"http://doc.rust-lang.org/std/vec/struct.Vec.html#method.iter\" rel=\"nofollow\"><code>Vec::iter</code></a> which returns an iterator that iterates over the <em>references</em> to the vector's elements. The associated type of that iterator is already a reference (<code>Self::Item = &amp;usize</code>) There are a few solution to your problem:</p>\n\n<ul>\n<li><p><strong>Dereference the result</strong></p>\n\n<pre><code>*v.iter().max().unwrap()\n</code></pre>\n\n<p>This works fine here, because the elements of <code>v</code> are <code>Copy</code> types. It does not work for non-<code>Copy</code> types!</p>\n\n<p>\u21d2 <em>good in your case</em></p></li>\n<li><p><strong>Clone the result</strong></p>\n\n<pre><code>v.iter().max().unwrap().clone()\nv.iter().max().cloned().unwrap()\n</code></pre>\n\n<p>This works for types that implement <code>Clone</code>. Any type that implements <code>Copy</code> will also implement <code>Clone</code>, but not all types that implement <code>Clone</code> will implement <code>Copy</code>.</p>\n\n<p>\u21d2 <em>good in the general case of using <code>max</code>/<code>min</code></em></p></li>\n<li><p><strong>Use <a href=\"http://doc.rust-lang.org/std/iter/trait.Iterator.html#method.cloned\" rel=\"nofollow\"><code>Iterator::cloned</code></a></strong> </p>\n\n<pre><code>v.iter().cloned().max().unwrap()\n</code></pre>\n\n<p>Efficiency-wise, this is only acceptable for <code>Copy</code> types, as it clones every element in the iterator. This will be expensive if cloning isn't cheap.</p>\n\n<p>\u21d2 <em>bad for using <code>min</code>/<code>max</code> in general, but handy in other situations</em></p></li>\n<li><p><strong>Use <code>Vec::into_iter</code></strong></p>\n\n<pre><code>v.into_iter().max().unwrap()\n</code></pre>\n\n<p>The problem with this method is that you can't use <code>v</code> afterwards.</p>\n\n<p>\u21d2 <em>bad for using <code>min</code>/<code>max</code> in general, but handy in other situations</em></p></li>\n</ul>\n"}], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 72, "favorite_count": 0, "accepted_answer_id": 37407664, "answer_count": 1, "score": 1, "last_activity_date": 1464093987, "creation_date": 1464076995, "question_id": 37407663, "link": "https://stackoverflow.com/questions/37407663/result-of-iteratormax-does-not-live-long-enough-although-the-item-is-returned", "title": "Result of Iterator::max does not live long enough although the item is returned directly", "body": "<p>This code (<a href=\"https://play.rust-lang.org/?gist=08f99d1231c549f9676624bc10c9e687&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">Playground</a>):</p>\n\n<pre><code>let max = {\n    let mut v = vec![3, 1, 5, 1, 5, 9, 2, 6];\n    v.iter().max().unwrap()\n};\nprintln!(\"{}\", max);\n</code></pre>\n\n<p>... leads to this error:</p>\n\n<pre><code>&lt;anon&gt;:4:9: 4:10 error: `v` does not live long enough\n&lt;anon&gt;:4         v.iter().max().unwrap()\n                 ^\n&lt;anon&gt;:5:7: 7:2 note: reference must be valid for the block suffix following statement 0 at 5:6...\n&lt;anon&gt;:5     };\n&lt;anon&gt;:6     println!(\"{}\", max);\n&lt;anon&gt;:7 }\n&lt;anon&gt;:3:50: 5:6 note: ...but borrowed value is only valid for the block suffix following statement 0 at 3:49\n&lt;anon&gt;:3         let mut v = vec![3, 1, 5, 1, 5, 9, 2, 6];\n&lt;anon&gt;:4         v.iter().max().unwrap()\n&lt;anon&gt;:5     };\n</code></pre>\n\n<p>I don't understand this error: <a href=\"http://doc.rust-lang.org/std/iter/trait.Iterator.html#method.max\" rel=\"nofollow\"><code>Iterator::max</code></a> returns <code>Option&lt;Self::Item&gt;</code>, and not <code>Option&lt;&amp;Self::Item&gt;</code>, so max shouldn't be a reference and hence everything should be fine...</p>\n"}, {"tags": ["static", "environment-variables", "rust", "constants"], "answers": [{"comments": [{"owner": {"reputation": 938, "user_id": 1032905, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/8667c63c7cad748aa08f8ebc20f6d202?s=128&d=identicon&r=PG", "display_name": "dave", "link": "https://stackoverflow.com/users/1032905/dave"}, "edited": false, "score": 0, "creation_date": 1464075850, "post_id": 37406642, "comment_id": 62321893, "body": "Is there a better way? I&#39;d prefer the variables to be loaded and have their presence validated at the time the service starts rather than when they are first requested. But if you don&#39;t like globals how else would you handle environment variables? Assuming they&#39;re not to change after the service starts would there be somewhere better I could put them?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 938, "user_id": 1032905, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/8667c63c7cad748aa08f8ebc20f6d202?s=128&d=identicon&r=PG", "display_name": "dave", "link": "https://stackoverflow.com/users/1032905/dave"}, "edited": false, "score": 3, "creation_date": 1464076127, "post_id": 37406642, "comment_id": 62322035, "body": "@dave: that&#39;s how globals are handled in Rust, just access them at the first opportunity (in main) and they will be loaded at the earliest possible point. As for not using globals, why not simply retrieve the password in a variable and then pass it (via arguments) to whoever needs it? Same functionality, but it makes it explicit which block of code accesses the password."}, {"owner": {"reputation": 938, "user_id": 1032905, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/8667c63c7cad748aa08f8ebc20f6d202?s=128&d=identicon&r=PG", "display_name": "dave", "link": "https://stackoverflow.com/users/1032905/dave"}, "edited": false, "score": 0, "creation_date": 1464076619, "post_id": 37406642, "comment_id": 62322308, "body": "Haha, almost too simple. But yeah I should probably just do it that way and validate their presence while I load them. Thanks for the shot of clarity."}, {"owner": {"reputation": 1733, "user_id": 1460102, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/e70df89ccf5e5509e4aae9ef4ed5b865?s=128&d=identicon&r=PG", "display_name": "xxks-kkk", "link": "https://stackoverflow.com/users/1460102/xxks-kkk"}, "edited": false, "score": 0, "creation_date": 1535909324, "post_id": 37406642, "comment_id": 91228493, "body": "<code>lazy_static</code> crate will lead to error <code>multiple matching crates for </code>lazy_static``."}, {"owner": {"reputation": 650, "user_id": 996314, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/4d6f299c3fe907046a23f106f7b56995?s=128&d=identicon&r=PG&f=1", "display_name": "Rokit", "link": "https://stackoverflow.com/users/996314/rokit"}, "edited": false, "score": 0, "creation_date": 1571954246, "post_id": 37406642, "comment_id": 103420155, "body": "I needed <code>ref</code>: <code>static ref PASSWORD: String = var(&quot;PASSWORD&quot;).unwrap();</code>"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 650, "user_id": 996314, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/4d6f299c3fe907046a23f106f7b56995?s=128&d=identicon&r=PG&f=1", "display_name": "Rokit", "link": "https://stackoverflow.com/users/996314/rokit"}, "edited": false, "score": 1, "creation_date": 1571986523, "post_id": 37406642, "comment_id": 103426898, "body": "@Rokit: Indeed. I also updated the snippet to provide a [MVCE], if we ask for it in questions, no reasons not to also provide it in answers :)"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 9, "last_activity_date": 1571986461, "last_edit_date": 1571986461, "creation_date": 1464073706, "answer_id": 37406642, "question_id": 37405835, "link": "https://stackoverflow.com/questions/37405835/populating-a-static-const-with-an-environment-variable-at-runtime-in-rust/37406642#37406642", "title": "Populating a static/const with an environment variable at runtime in Rust", "body": "<p><code>const</code> and <code>static</code> fill different roles in Rust.</p>\n\n<p><code>const</code> does not only mean a constant, it means a <em>compile-time</em> constant, a value determined at compile-time and inscribed in the read-only memory of the program. It is not suitable for your usecase.</p>\n\n<p><code>static</code> means a global variable, with a lifetime that will span the entire program. It may be mutable, in which case it must be <code>Sync</code> to avoid concurrent modifications. A <code>static</code> variable must be initialized from a constant, in order to be available from the start of the program.</p>\n\n<p>So, how to read a variable at run-time and have it available? Well, a clean solution would be to avoid globals altogether...</p>\n\n<p>... but since it can be convenient, there is a crate for it: <a href=\"https://crates.io/crates/lazy_static\" rel=\"noreferrer\"><code>lazy_static!</code></a>.</p>\n\n<pre><code>use std::env::var;\nuse lazy_static::lazy_static;\n\nlazy_static! {\n    static ref PASSWORD: String = var(\"PASSWORD\").unwrap();\n}\n\nfn main() {\n    println!(\"{:?}\", *PASSWORD);\n}\n</code></pre>\n\n<p>On first access to the variable, the expression is executed to load its value, the value is then memorized and available until the end of the program.</p>\n"}], "owner": {"reputation": 938, "user_id": 1032905, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/8667c63c7cad748aa08f8ebc20f6d202?s=128&d=identicon&r=PG", "display_name": "dave", "link": "https://stackoverflow.com/users/1032905/dave"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2560, "favorite_count": 2, "accepted_answer_id": 37406642, "answer_count": 1, "score": 7, "last_activity_date": 1571986461, "creation_date": 1464070971, "last_edit_date": 1464094372, "question_id": 37405835, "link": "https://stackoverflow.com/questions/37405835/populating-a-static-const-with-an-environment-variable-at-runtime-in-rust", "title": "Populating a static/const with an environment variable at runtime in Rust", "body": "<p>I'm trying to load passwords and sensitive data from the system's environment when my service starts up. I've tried a number of different ways but can't seem to figure out the right way to do this in Rust.</p>\n\n<pre><code>const PASSWORD: String = var(\"PASSWORD\").unwrap();\n</code></pre>\n\n<p>Doesn't work because <code>method calls in constants are limited to constant  inherent methods</code>. The same applies to <code>static</code> (except the error says statics, obviously).</p>\n\n<p>The other way I've seen to do it is</p>\n\n<pre><code>const PASSWORD: &amp;'static str = env!(\"PASSWORD\");\n</code></pre>\n\n<p>But the problem with that is it will be defined at compile time as <code>env!</code> is a macro (at least that is my understanding).</p>\n\n<p>I also considered simply wrapping the call to <code>var(\"...\").unwrap()</code> in a function but that solution doesn't really sit right with me, and would also allow the values to change throughout runtime AND not validate them when the service starts.</p>\n\n<p>As you can tell I'm new to Rust. I'd really appreciate if in your answer you could not just explain how to load the const/static at runtime but also explain why what I'm doing is dumb and wrong :)</p>\n"}, {"tags": ["macos", "openssl", "rust", "homebrew", "rust-cargo"], "comments": [{"owner": {"reputation": 1343, "user_id": 4365239, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/88acc4986ddaf51e21c254fb8c0f11b8?s=128&d=identicon&r=PG&f=1", "display_name": "tafia", "link": "https://stackoverflow.com/users/4365239/tafia"}, "edited": false, "score": 0, "creation_date": 1464069597, "post_id": 37404343, "comment_id": 62318568, "body": "Have a look at <a href=\"http://stackoverflow.com/questions/37375712/cross-compile-rust-openssl-for-raspberry-pi-2\" title=\"cross compile rust openssl for raspberry pi 2\">stackoverflow.com/questions/37375712/&hellip;</a>, and adapt it for osx. I suppose compiling your own version of openssl and not specifying a target could work. Also I found I need to do a <code>cargo clean</code> sometimes for the rust-openssl to understand the new environment variables."}, {"owner": {"reputation": 2340, "user_id": 2250791, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e72d4f734d39c777f543025d36d4de4e?s=128&d=identicon&r=PG", "display_name": "Camden Narzt", "link": "https://stackoverflow.com/users/2250791/camden-narzt"}, "reply_to_user": {"reputation": 1343, "user_id": 4365239, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/88acc4986ddaf51e21c254fb8c0f11b8?s=128&d=identicon&r=PG&f=1", "display_name": "tafia", "link": "https://stackoverflow.com/users/4365239/tafia"}, "edited": false, "score": 0, "creation_date": 1471206304, "post_id": 37404343, "comment_id": 65247507, "body": "Answered at: <a href=\"http://stackoverflow.com/questions/34612395/openssl-crate-fails-compilation-on-mac-os-x-10-11/38946292#38946292\" title=\"openssl crate fails compilation on mac os x 10 11\">stackoverflow.com/questions/34612395/&hellip;</a>"}], "owner": {"reputation": 2340, "user_id": 2250791, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e72d4f734d39c777f543025d36d4de4e?s=128&d=identicon&r=PG", "display_name": "Camden Narzt", "link": "https://stackoverflow.com/users/2250791/camden-narzt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 108, "favorite_count": 0, "closed_date": 1464089114, "answer_count": 0, "score": 0, "last_activity_date": 1464992343, "creation_date": 1464063728, "last_edit_date": 1495542776, "question_id": 37404343, "link": "https://stackoverflow.com/questions/37404343/what-should-i-override-in-cargo-for-the-openssl-rust-crate-to-build", "closed_reason": "Duplicate", "title": "What should I override in cargo for the openssl-rust crate to build?", "body": "<p>I tried to add hyper as a dependency to a project of mine, and the build blew up on openssl-rust, because it relies on the openssl headers and libraries being part of the OS, which is not true of OS X anymore (the libraries are there but it's a custom build so grabbing the headers elsewhere won't work). I've seen <a href=\"https://github.com/sfackler/rust-openssl/issues/255\" rel=\"nofollow noreferrer\">https://github.com/sfackler/rust-openssl/issues/255</a>, <a href=\"https://github.com/sfackler/rust-openssl/issues/316\" rel=\"nofollow noreferrer\">https://github.com/sfackler/rust-openssl/issues/316</a>, and <a href=\"https://github.com/alexcrichton/gcc-rs/issues/63\" rel=\"nofollow noreferrer\">https://github.com/alexcrichton/gcc-rs/issues/63</a> so I know I need to override something to set the equivalent of the following environment variables in cargo's build system:</p>\n\n<pre><code>OPENSSL_INCLUDE_DIR=/usr/local/opt/openssl/include\nOPENSSL_LIB_DIR=/usr/local/opt/openssl/lib\n</code></pre>\n\n<p>however looking at <a href=\"http://doc.crates.io/build-script.html#overriding-build-scripts\" rel=\"nofollow noreferrer\">http://doc.crates.io/build-script.html#overriding-build-scripts</a> I haven't been able to figure out how I do that.</p>\n\n<p>Some things that I've seen but don't think make for acceptable answers:</p>\n\n<ul>\n<li><code>brew link --force openssl</code></li>\n<li>setting the environment variables every time I call <code>cargo build</code></li>\n</ul>\n\n<p>Note I've seen <a href=\"https://stackoverflow.com/questions/34612395/openssl-crate-fails-compilation-on-mac-os-x-10-11\">OpenSSL crate fails compilation on Mac OS X 10.11</a> (I'd even seen it before posting this, should have said so earlier) but that answer just says to set the env variables every time you compile (one way or another) which I'm not willing to accept as an answer when there's a system for overriding the build script that might work if someone could explain how it works.</p>\n"}, {"tags": ["generics", "rust"], "answers": [{"comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 2, "creation_date": 1464047625, "post_id": 37401930, "comment_id": 62312974, "body": "Nice answer. Another thing is that the compilers&#39; inference reach is quite high - so you could potentially omit the type parameters if your code satisfied the inference mechanisms.. via using <code>add_foo</code> and <code>add_bar</code> methods, like this: <a href=\"https://play.rust-lang.org/?gist=c507bbcd0ad94bfa892c09e097354b5b&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 217, "user_id": 6189743, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/99f741f9304c500014cb55f92edca4d9?s=128&d=identicon&r=PG&f=1", "display_name": "FizzBazer", "link": "https://stackoverflow.com/users/6189743/fizzbazer"}, "edited": false, "score": 0, "creation_date": 1464101116, "post_id": 37401930, "comment_id": 62339691, "body": "Thank you both for your comments! My biggest question in response to Chris, was exactly what you brought up Simon! My issue was that i cannot provide concrete types like in Chris&#39; example - IE: <code>MyA</code> and <code>MyB</code> structs. I&#39;m using traits <i>because</i> i don&#39;t have a specific, concrete type - i have multiple types that i&#39;m adding, like in Simon&#39;s example."}, {"owner": {"reputation": 217, "user_id": 6189743, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/99f741f9304c500014cb55f92edca4d9?s=128&d=identicon&r=PG&f=1", "display_name": "FizzBazer", "link": "https://stackoverflow.com/users/6189743/fizzbazer"}, "edited": false, "score": 0, "creation_date": 1464101548, "post_id": 37401930, "comment_id": 62339998, "body": "With that said, maybe i&#39;m designing this wrong. Is it not possible to accept multiple concrete types that implement the same interface in a single function? Ie, <a href=\"https://play.rust-lang.org/?gist=0b350bc006fee6528b28c1720ae75180&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">play example</a>  Both <code>MyB</code> and <code>MyC</code> implement <code>Foo</code>, and <code>Test::add_bar()</code> implements accepts a <code>B&lt;Foo&gt;</code>, yet it appears that <code>add_bar()</code> is only accepting a single concrete type, rather than traits over the type. Thoughts? Perhaps i fundamentally misunderstand Rust&#39;s implementation of Traits (i was thinking of them more like Go interfaces)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 217, "user_id": 6189743, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/99f741f9304c500014cb55f92edca4d9?s=128&d=identicon&r=PG&f=1", "display_name": "FizzBazer", "link": "https://stackoverflow.com/users/6189743/fizzbazer"}, "edited": false, "score": 1, "creation_date": 1464102379, "post_id": 37401930, "comment_id": 62340614, "body": "@FizzBazer perhaps you want a <a href=\"https://doc.rust-lang.org/book/trait-objects.html\" rel=\"nofollow noreferrer\">trait object</a>?"}, {"owner": {"reputation": 217, "user_id": 6189743, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/99f741f9304c500014cb55f92edca4d9?s=128&d=identicon&r=PG&f=1", "display_name": "FizzBazer", "link": "https://stackoverflow.com/users/6189743/fizzbazer"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1464108716, "post_id": 37401930, "comment_id": 62344691, "body": "@Shepmaster Seems so, thanks! For anyone else, i think i figured out a problem with the design. Static Dispatch works by creating alternate, type specific methods - but this is incompatible for a Vector. If you&#39;re going to store them in a data structure (i imagine vector, hashmap, etcetc) it cannot be duplicated at compile time via Static Dispatch. So, if you use a Vector, Dynamic Dispatch is apparently required. I have yet to use Dynamic Dispatch, so a&#39; learning i must go. Thanks all!"}, {"owner": {"reputation": 217, "user_id": 6189743, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/99f741f9304c500014cb55f92edca4d9?s=128&d=identicon&r=PG&f=1", "display_name": "FizzBazer", "link": "https://stackoverflow.com/users/6189743/fizzbazer"}, "edited": false, "score": 0, "creation_date": 1464110027, "post_id": 37401930, "comment_id": 62345439, "body": "I summarized my findings regarding vectors and static dispatch here: <a href=\"http://stackoverflow.com/a/37419935/6189743\">stackoverflow.com/a/37419935/6189743</a>"}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 6, "last_activity_date": 1464044807, "creation_date": 1464044807, "answer_id": 37401930, "question_id": 37401681, "link": "https://stackoverflow.com/questions/37401681/error-unable-to-infer-enough-type-information-about-type-annotations-or-ge/37401930#37401930", "title": "Error: unable to infer enough type information about `_`; type annotations or generic parameter binding required", "body": "<p>The short answer is that you haven't told it what type to use.</p>\n\n<p>Paraphrasing your declarations:</p>\n\n<pre><code>pub trait Foo {}\n</code></pre>\n\n<p>\"There is a trait <code>Foo</code>\"</p>\n\n<pre><code>pub trait Bar&lt;A: Foo&gt; {}\n</code></pre>\n\n<p>\"If you give me a type <code>A</code> which implements <code>Foo</code>, I can give you a trait <code>Bar&lt;A&gt;</code>.\"</p>\n\n<pre><code>pub struct Test&lt;A, B&gt;\n    where A: Foo,\n          B: Bar&lt;A&gt; {}\n</code></pre>\n\n<p>\"If you give me types <code>A</code>, which implements <code>Foo</code>, and <code>B</code>, which implements <code>Bar&lt;A&gt;</code>, I'll give you a type <code>Test&lt;A,B&gt;</code>.</p>\n\n<pre><code>let t = Test::new();\n</code></pre>\n\n<p>\"Make me a <code>Test</code>\".  This is the problem - <code>Test</code> isn't a type, it's a template for making a type given two other types (with some restrictions).  In the example above you haven't provided any such types, just narrowed down what such types might be like.</p>\n\n<p>To actually use <code>Test</code>, you need to provide the types:</p>\n\n<pre><code>struct MyA {}\nimpl Foo for MyA {\n    fn foo(&amp;self) { println!(\"MyA::foo\"); }\n}\n\nstruct MyB {}\nimpl Bar&lt;MyA&gt; for MyB {\n    fn bar(&amp;self, a: MyA) { println!(\"MyB::bar\"); }\n\n}\n\nfn main() {\n    let test = Test::&lt;MyA, MyB&gt;::new();\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=c3c7ccc8f54daa8340e09490a195249d&amp;version=stable&amp;backtrace=0\">Playground</a>)</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 0, "last_activity_date": 1464044846, "creation_date": 1464044846, "answer_id": 37401937, "question_id": 37401681, "link": "https://stackoverflow.com/questions/37401681/error-unable-to-infer-enough-type-information-about-type-annotations-or-ge/37401937#37401937", "title": "Error: unable to infer enough type information about `_`; type annotations or generic parameter binding required", "body": "<p>You can boil the first error down to this:</p>\n\n<pre><code>fn main() {\n    let v = Vec::new();\n}\n</code></pre>\n\n<p>The problem here is that the compiler has no way to determine what the concrete type will be contained by the vector. In your case, you create a structure (<code>Test</code>) that can be created without passing in concrete types for <code>A</code> and <code>B</code>, but the underlying reasoning is the same.</p>\n\n<p>The second issue is related. Neither <code>Foo</code> nor <code>Bar</code> are concrete types with a size known at compile time. Trying to use them in a location that requires a fixed size (represented by the <code>Sized</code> trait) will fail.</p>\n\n<p>When you instantiate a type, the size of the type <strong>must</strong> be known and that's done by providing concrete types in place of the generic type parameters. </p>\n"}, {"tags": [], "owner": {"reputation": 217, "user_id": 6189743, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/99f741f9304c500014cb55f92edca4d9?s=128&d=identicon&r=PG&f=1", "display_name": "FizzBazer", "link": "https://stackoverflow.com/users/6189743/fizzbazer"}, "is_accepted": false, "score": 0, "last_activity_date": 1464109997, "creation_date": 1464109997, "answer_id": 37419935, "question_id": 37401681, "link": "https://stackoverflow.com/questions/37401681/error-unable-to-infer-enough-type-information-about-type-annotations-or-ge/37419935#37419935", "title": "Error: unable to infer enough type information about `_`; type annotations or generic parameter binding required", "body": "<p>A note about the accepted answer - The accepted answer covers the problem with identifying traits, however there are some comments within that thread that explain additional details with this question. I'm summarizing one of them here for ease of reading (since comments are a bit hard to read).</p>\n\n<p><a href=\"https://doc.rust-lang.org/book/trait-objects.html#static-dispatch\" rel=\"nofollow\">Static Dispatch</a> <em>(which is used when you us a Trait like in the above code)</em> will not work with multiple concrete types on a vector.</p>\n\n<p>For example, take this example:</p>\n\n<pre><code>trait Foo {\n    fn method(&amp;self) -&gt; String;\n}\nimpl Foo for u8 {\n    fn method(&amp;self) -&gt; String {\n        format!(\"u8: {}\", *self)\n    }\n}\n\nimpl Foo for String {\n    fn method(&amp;self) -&gt; String {\n        format!(\"string: {}\", *self)\n    }\n}\n\nstruct Test&lt;T: Foo&gt; {\n    foos: Vec&lt;T&gt;,\n}\nimpl&lt;T:Foo&gt; Test&lt;T&gt; {\n    pub fn do_something(&amp;self, x: T) {\n        self.foos.push(x);\n    }\n}\n\nfn main() {\n    let x = 5u8;\n    let y = \"Hello\".to_string();\n\n    let t = Test {foos:Vec::new()};\n    t.do_something(x);\n    t.do_something(y);\n}\n</code></pre>\n\n<p>This will <strong>not</strong> work, because while <code>do_something()</code> <em>could</em> use Static Dispatch, <code>Test::foos</code> <em>cannot</em>. If we instead changed <code>Test</code> to:</p>\n\n<pre><code>struct Test {\n}\nimpl Test {\n    pub fn do_something&lt;T: Foo&gt;(&amp;self, x: T) {\n        x.method();\n    }\n}\n</code></pre>\n\n<p>It will work. The <code>main()</code> function did not need to change at all <em>(aside from removing the vector)</em>, it entirely had to do with the Vector causing static dispatch <em>(apparently)</em> to not work.</p>\n\n<p>In this case, i believe <a href=\"https://doc.rust-lang.org/book/trait-objects.html#dynamic-dispatch\" rel=\"nofollow\">Dynamic Dispatch</a> will work - but i'm not familiar enough with it just yet to give any in depth answer/example here. Hope this helps future readers.</p>\n"}], "owner": {"reputation": 217, "user_id": 6189743, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/99f741f9304c500014cb55f92edca4d9?s=128&d=identicon&r=PG&f=1", "display_name": "FizzBazer", "link": "https://stackoverflow.com/users/6189743/fizzbazer"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1396, "favorite_count": 0, "accepted_answer_id": 37401930, "answer_count": 3, "score": 0, "last_activity_date": 1464109997, "creation_date": 1464043214, "last_edit_date": 1464101676, "question_id": 37401681, "link": "https://stackoverflow.com/questions/37401681/error-unable-to-infer-enough-type-information-about-type-annotations-or-ge", "title": "Error: unable to infer enough type information about `_`; type annotations or generic parameter binding required", "body": "<p>Apologies for the generic title.</p>\n\n<p>Here is some example code:</p>\n\n<pre><code>use std::marker::PhantomData;\n\npub trait Foo {\n    fn foo(&amp;self);\n}\n\npub trait Bar&lt;A: Foo&gt; {\n    fn bar(&amp;self, a: A);\n}\n\npub struct Test&lt;A, B&gt;\n    where A: Foo,\n          B: Bar&lt;A&gt;\n{\n    _phantom_r: PhantomData&lt;A&gt;,\n    bars: Vec&lt;B&gt;,\n}\n\nimpl&lt;A, B&gt; Test&lt;A, B&gt;\n    where A: Foo,\n          B: Bar&lt;A&gt;\n{\n    pub fn new() -&gt; Test&lt;A, B&gt; {\n        Test {\n            _phantom_r: PhantomData,\n            bars: Vec::new(),\n        }\n    }\n\n    pub fn add_bar(&amp;mut self, b: B) {\n        self.bars.push(b);\n    }\n}\n\nfn main() {\n    let t = Test::new();\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=989824eb1e4d1a594eebab1b421dc987&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">Playground</a>)</p>\n\n<p>The error is:</p>\n\n<pre><code>&lt;anon&gt;:32:13: 36:22 error: unable to infer enough type information about `_`; type annotations or generic parameter binding required [E0282]\n&lt;anon&gt;:32     let t = Test::new();\n</code></pre>\n\n<p>I'm quite confused on what Rust is having trouble inferring the trait types, and how I can specify what it wants. That is, I'm not sure if this is right, because then I run into <code>Sized</code> issues:</p>\n\n<pre><code>let t = Test::new() as Test&lt;Foo,Bar&lt;Foo&gt;&gt;;\n</code></pre>\n\n<p>error:</p>\n\n<pre><code>&lt;anon&gt;:36:28: 36:46 error: the trait `core::marker::Sized` is not implemented for the type `Foo` [E0277]\n&lt;anon&gt;:36     let t = Test::new() as Test&lt;Foo,Bar&lt;Foo&gt;&gt;;\n</code></pre>\n\n<p>I have two main questions:</p>\n\n<ol>\n<li>Why is Rust unable to infer the trait types of <code>Test&lt;A,B&lt;A&gt;&gt;</code>?</li>\n<li>What is the solution to make this code work?</li>\n</ol>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1464036611, "post_id": 37400139, "comment_id": 62309225, "body": "Removing <code>.count()</code> has the same error, <a href=\"https://play.rust-lang.org/?gist=5a204c4e748c6cb5138533947591e0cd&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">as far as I see</a>."}], "answers": [{"comments": [{"owner": {"reputation": 115, "user_id": 1959884, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/xcmtm.jpg?s=128&g=1", "display_name": "Xiaohong Deng", "link": "https://stackoverflow.com/users/1959884/xiaohong-deng"}, "edited": false, "score": 0, "creation_date": 1464038146, "post_id": 37400275, "comment_id": 62309971, "body": "Could it be done elsewhere? Such as <code>filter_map::&lt;i32, ?&gt;()</code> I&#39;m not sure what the &quot;?&quot; part should be."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 1, "creation_date": 1464039289, "post_id": 37400275, "comment_id": 62310503, "body": "You can do <code>filter_map::&lt;i32, _&gt;(...)</code>, and the compiler will infer the closure type.  You can&#39;t explicitly name the concrete type of a closure, though."}, {"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 4, "creation_date": 1464040018, "post_id": 37400275, "comment_id": 62310843, "body": "However, I would claim that explicitly specifying the parameter for <code>parse</code> is more idiomatic and readable, since that&#39;s really where the ambiguity comes from."}], "tags": [], "owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "is_accepted": true, "score": 4, "last_activity_date": 1464036537, "creation_date": 1464036537, "answer_id": 37400275, "question_id": 37400139, "link": "https://stackoverflow.com/questions/37400139/how-to-specify-type-information-for-iteratorfilter-map/37400275#37400275", "title": "How to specify type information for Iterator::filter_map?", "body": "<p>The compiler doesn't know the result type of the parse, because the way you wrote it the code could work for any type. You need to annotate this method call specifically: <code>s.parse::&lt;i32&gt;().ok()</code></p>\n"}], "owner": {"reputation": 115, "user_id": 1959884, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/xcmtm.jpg?s=128&g=1", "display_name": "Xiaohong Deng", "link": "https://stackoverflow.com/users/1959884/xiaohong-deng"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 364, "favorite_count": 0, "accepted_answer_id": 37400275, "answer_count": 1, "score": 1, "last_activity_date": 1464036538, "creation_date": 1464035994, "last_edit_date": 1464036538, "question_id": 37400139, "link": "https://stackoverflow.com/questions/37400139/how-to-specify-type-information-for-iteratorfilter-map", "title": "How to specify type information for Iterator::filter_map?", "body": "<pre><code>fn main() {\n    let a = [\"1\", \"2\", \"lol\"];\n    let cnt = a.iter().filter_map(|s| s.parse().ok()).count();\n}\n</code></pre>\n\n<p>Error message</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>&lt;anon&gt;:3:24: 3:34 error: unable to infer enough type information about `_`; type annotations or generic parameter binding required [E0282]\n\n&lt;anon&gt;:3     let cnt = a.iter().filter_map(|s| s.parse().ok()).count();\n                                ^~~~~~~~~~\n</code></pre>\n\n<p>I tried to specify types for <code>filter_map()</code> but was not successful. If possible, I also want to know why compiler does not complain if I remove the <code>count()</code> method.</p>\n"}, {"tags": ["rust", "iron"], "answers": [{"comments": [{"owner": {"reputation": 2647, "user_id": 2057867, "user_type": "registered", "accept_rate": 27, "profile_image": "https://www.gravatar.com/avatar/a02ac3125fd67db27a3870119a93fa92?s=128&d=identicon&r=PG", "display_name": "Jacob Clark", "link": "https://stackoverflow.com/users/2057867/jacob-clark"}, "edited": false, "score": 0, "creation_date": 1464040937, "post_id": 37400114, "comment_id": 62311178, "body": "Thanks, could you explain why I cannot pass headers into the tuple as I understand Response::with accepts a tuple of modifiers for the response object?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2647, "user_id": 2057867, "user_type": "registered", "accept_rate": 27, "profile_image": "https://www.gravatar.com/avatar/a02ac3125fd67db27a3870119a93fa92?s=128&d=identicon&r=PG", "display_name": "Jacob Clark", "link": "https://stackoverflow.com/users/2057867/jacob-clark"}, "edited": false, "score": 0, "creation_date": 1464042192, "post_id": 37400114, "comment_id": 62311571, "body": "@JacobClark ah yes, I forgot the important part of the answer!"}, {"owner": {"reputation": 2647, "user_id": 2057867, "user_type": "registered", "accept_rate": 27, "profile_image": "https://www.gravatar.com/avatar/a02ac3125fd67db27a3870119a93fa92?s=128&d=identicon&r=PG", "display_name": "Jacob Clark", "link": "https://stackoverflow.com/users/2057867/jacob-clark"}, "edited": false, "score": 0, "creation_date": 1464071775, "post_id": 37400114, "comment_id": 62319615, "body": "excellent, thank you! Possibly out of the scope now, but how is the tuple applied? I would normally expect to see a form each iterating through each modifier, but in the Iron modifier source I do not see this, can you point me to where/how each modifier in a tuple is applied?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 11, "last_activity_date": 1498222410, "last_edit_date": 1498222410, "creation_date": 1464035888, "answer_id": 37400114, "question_id": 37399635, "link": "https://stackoverflow.com/questions/37399635/cannot-set-headers-of-an-iron-framework-response/37400114#37400114", "title": "Cannot set headers of an Iron framework Response", "body": "<p>You can modify the headers on the <code>Response</code> object:</p>\n\n<pre><code>fn hello_world(_: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\n    let string = get_file_as_string(\"./public/index.html\");\n    let mut resp = Response::with((status::Ok, string));\n    resp.headers.set(ContentType(Mime(TopLevel::Text, SubLevel::Html, vec![])));\n    Ok(resp)\n}\n</code></pre>\n\n<hr>\n\n<p>To figure out the original error, let's check the error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `iron::Headers: iron::modifier::Modifier&lt;iron::Response&gt;` is not satisfied\n  --&gt; src/main.rs:24:12\n   |\n24 |         Ok(Response::with((status::Ok, string, headers)))\n   |            ^^^^^^^^^^^^^^ the trait `iron::modifier::Modifier&lt;iron::Response&gt;` is not implemented for `iron::Headers`\n   |\n   = note: required because of the requirements on the impl of `iron::modifier::Modifier&lt;iron::Response&gt;` for `(hyper::status::StatusCode, std::string::String, iron::Headers)`\n   = note: required by `iron::Response::with`\n</code></pre>\n\n<p>The first line tells us the immediate issue: <code>iron::Headers</code> does not implement the trait <code>iron::modifier::Modifier&lt;iron::Response&gt;</code>. If we check the <a href=\"https://docs.rs/iron/0.3.1/iron/struct.Headers.html\" rel=\"nofollow noreferrer\">documentation for <code>Headers</code></a>, we can see under the <em>Trait Implementations</em> section that it indeed does not implement <code>Modifier</code>.</p>\n\n<p>We can then look at the problem from the other end: what <em>does</em> implement <code>Modifier</code>? The docs for <code>Modifier</code>, when built in conjunction with Iron, answer that question. One thing we can see is:</p>\n\n<pre><code>impl&lt;H&gt; Modifier&lt;Response&gt; for Header&lt;H&gt;\nwhere\n    H: Header + HeaderFormat,\n</code></pre>\n\n<p>This leads to an alternate possibility:</p>\n\n<pre><code>use iron::modifiers::Header;\n\nfn hello_world(_: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\n    let string = get_file_as_string(\"./public/index.html\");\n    let content_type = Header(ContentType(Mime(TopLevel::Text, SubLevel::Html, vec![])));\n    Ok(Response::with((status::Ok, string, content_type)))\n}\n</code></pre>\n\n<p>And if we look at <a href=\"https://github.com/iron/iron/blob/0.3.0/src/modifiers.rs#L162-L170\" rel=\"nofollow noreferrer\">the implementation of <code>Modifier</code> for <code>Header</code></a>:</p>\n\n<pre><code>fn modify(self, res: &amp;mut Response) {\n    res.headers.set(self.0);\n}\n</code></pre>\n\n<p>It just sets the headers as we did above.</p>\n\n<hr>\n\n<p>FYI, Rust style is <code>snake_case</code> for variables and methods and <code>Error::description(&amp;why)</code> is normally written <code>why.description()</code>.</p>\n"}], "owner": {"reputation": 2647, "user_id": 2057867, "user_type": "registered", "accept_rate": 27, "profile_image": "https://www.gravatar.com/avatar/a02ac3125fd67db27a3870119a93fa92?s=128&d=identicon&r=PG", "display_name": "Jacob Clark", "link": "https://stackoverflow.com/users/2057867/jacob-clark"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1687, "favorite_count": 0, "accepted_answer_id": 37400114, "answer_count": 1, "score": 3, "last_activity_date": 1498222410, "creation_date": 1464034044, "last_edit_date": 1498222058, "question_id": 37399635, "link": "https://stackoverflow.com/questions/37399635/cannot-set-headers-of-an-iron-framework-response", "title": "Cannot set headers of an Iron framework Response", "body": "<p>I am looking to set the headers of a Iron <code>Response</code> with the following code:</p>\n\n<pre><code>extern crate iron;  // 0.3.0\nextern crate hyper; // 0.8.1\n\nuse iron::prelude::*;\nuse iron::status;\n\nuse hyper::header::{Headers, ContentType};\nuse hyper::mime::{Mime, TopLevel, SubLevel};\n\nuse std::error::Error;\nuse std::fs::File;\nuse std::io::prelude::*;\nuse std::path::Path;\n\nfn main() {\n    fn hello_world(_: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\n        let mut headers = Headers::new();\n        let string = getFileAsString(\"./public/index.html\");\n\n        headers.set(\n            ContentType(Mime(TopLevel::Text, SubLevel::Html, vec![]))\n        );\n\n        Ok(Response::with((status::Ok, string, headers)))\n    }\n\n    Iron::new(hello_world).http(\"localhost:3000\").unwrap();\n    println!(\"On 3000\");\n}\n\nfn getFileAsString(fileStr: &amp;str) -&gt; String {\n    let path = Path::new(fileStr);\n    let display = path.display();\n    let mut fileContents = String::new();\n\n    let mut file = match File::open(&amp;path) {\n        Err(why) =&gt; panic!(\"couldn't open {}: {}\", display, Error::description(&amp;why)),\n        Ok(file) =&gt; file,\n    };\n\n    match file.read_to_string(&amp;mut fileContents) {\n        Err(why) =&gt; panic!(\"couldn't read {}: {}\", display, Error::description(&amp;why)),\n        Ok(_) =&gt; fileContents\n    }    \n}\n</code></pre>\n\n<p>However I get the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `iron::Headers: iron::modifier::Modifier&lt;iron::Response&gt;` is not satisfied\n  --&gt; src/main.rs:24:12\n   |\n24 |         Ok(Response::with((status::Ok, string, headers)))\n   |            ^^^^^^^^^^^^^^ the trait `iron::modifier::Modifier&lt;iron::Response&gt;` is not implemented for `iron::Headers`\n   |\n   = note: required because of the requirements on the impl of `iron::modifier::Modifier&lt;iron::Response&gt;` for `(hyper::status::StatusCode, std::string::String, iron::Headers)`\n   = note: required by `iron::Response::with`\n</code></pre>\n\n<p>Why am I not able to pass headers into this tuple to be modified by the <code>Request</code> builder? </p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1464020516, "post_id": 37391993, "comment_id": 62300586, "body": "What if I want to avoid returning value of <code>Vec::remove</code>? I mean, I want <code>perform_if_exists</code> not only to be able to accept <code>Vec::remove</code> as argument because of it&#39;s return type. So, for example, I want to have a chance to pass a closure which takes only vector and index of the item, and then performs an action without returning a value and without taking any other arguments"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1464024283, "post_id": 37391993, "comment_id": 62302591, "body": "@VictorPolevoy the code as shown (and also in <a href=\"http://stackoverflow.com/a/37392107/155423\">Lukas Kalbertodt&#39;s answer</a>) will work with that. <i>Every</i> function in Rust returns a value. &quot;Without returning a value&quot; just means that the function returns the empty tuple: <code>()</code>. In those cases, <code>R</code> would be the empty tuple."}, {"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1464033839, "post_id": 37391993, "comment_id": 62307684, "body": "Excuse me, just understood this."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1464009211, "creation_date": 1464009211, "answer_id": 37391993, "question_id": 37391695, "link": "https://stackoverflow.com/questions/37391695/is-it-possible-to-pass-an-object-method-as-argument-to-a-function-and-bind-it-to/37391993#37391993", "title": "Is it possible to pass an object method as argument to a function and bind it to the object?", "body": "<blockquote>\n  <p>Is it possible </p>\n</blockquote>\n\n<p>Sure it is. You have to fix the multiple cascading errors first:</p>\n\n<ol>\n<li>Invalid syntax: <code>Vec&lt;_&gt;::remove</code> isn't valid.</li>\n<li>Incompatible argument types: <code>Vec::remove</code> modifies <strong>a <code>Vec</code></strong>, so you have to pass in a <code>Vec</code> somehow.</li>\n<li>Mutability: <code>Vec::remove</code> <strong>modifies</strong> a <code>Vec</code>, so you have to declare that the function is allowed to do so.</li>\n<li><code>Vec::remove</code> returns the removed value, so you have to allow the function to return a value, even if it's thrown away.</li>\n</ol>\n\n\n\n<pre><code>fn perform_if_exists&lt;F, R&gt;(item: u8, vector: &amp;mut Vec&lt;u8&gt;, func: F)\n    where F: Fn(&amp;mut Vec&lt;u8&gt;, usize) -&gt; R\n{\n    let idx = vector.iter().position(|i| *i == item );\n    if let Some(i) = idx {\n        func(vector, i);\n    }\n}\n\nfn main() {\n    let mut v = vec![1, 2, 3];\n    perform_if_exists(1, &amp;mut v, Vec::remove);\n    println!(\"{:?}\", v);\n}\n</code></pre>\n\n<p>I switched to a generic as that's generally how you will accept closures. A function pointer is fine but more restrictive.</p>\n"}, {"comments": [{"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1464020472, "post_id": 37392107, "comment_id": 62300562, "body": "What if I want to avoid returning value of <code>Vec::remove</code>? I mean, I want <code>perform_if_exists</code> not only to be able to accept <code>Vec::remove</code> as argument because of it&#39;s return type. So, for example, I want to have a chance to pass a closure which takes only vector and index of the item, and then performs an action without returning a value and without taking any other arguments"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 1, "creation_date": 1464021168, "post_id": 37392107, "comment_id": 62300950, "body": "I&#39;m not sure if I understand your problem, but you can pass a function to <code>perform_if_exists</code> that returns nothing, too. &quot;returns nothing&quot; is just saying: &quot;returns unit&quot; (where unit = <code>void</code> in other languages). <code>perform_if_exists(1, &amp;mut v, |_, _| {});</code> works."}, {"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1464033879, "post_id": 37392107, "comment_id": 62307708, "body": "Excuse me, just understood this."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 4, "last_activity_date": 1464009505, "creation_date": 1464009505, "answer_id": 37392107, "question_id": 37391695, "link": "https://stackoverflow.com/questions/37391695/is-it-possible-to-pass-an-object-method-as-argument-to-a-function-and-bind-it-to/37392107#37392107", "title": "Is it possible to pass an object method as argument to a function and bind it to the object?", "body": "<p>A method in Rust is nothing more than a function, which also takes a first <code>self</code> parameter. The method <code>Vec::remove</code> takes two arguments: <code>&amp;mut self</code> and <code>index: usize</code>. The <code>self</code> parameter is always of type <code>Self</code>, which is <code>Vec&lt;u8&gt;</code> in this case. The complete type of <a href=\"http://doc.rust-lang.org/collections/vec/struct.Vec.html#method.remove\" rel=\"nofollow\"><code>Vec::&lt;u8&gt;::remove</code></a> is: <code>fn(&amp;mut Vec&lt;u8&gt;, usize) -&gt; u8</code> (yes it also returns the removed element).</p>\n\n<p>After changing the type in your code (+ a few minor mistakes), it works:</p>\n\n<pre><code>//                                      vvv-- has to be mutable\nfn perform_if_exists(item: u8, vector: &amp;mut Vec&lt;u8&gt;, func: fn(&amp;mut Vec&lt;u8&gt;, usize) -&gt; u8) {\n    let idx = vector.iter().position(|i| *i == item );\n    match idx {\n        Some(i) =&gt; { \n            func(vector, i);\n        }, \n        None    =&gt; {},\n    }\n}\n\nfn main() {\n    let mut v: Vec&lt;u8&gt; = vec![1, 2, 3];\n    perform_if_exists(1, &amp;mut v, Vec::remove);\n}\n</code></pre>\n\n<p>But <code>fn(...) -&gt; ...</code> types are raw pointer types and just work for ordinary functions. Often you also want to enable the user to pass <em>anything</em> that is \"callable\", like closures. There are traits exactly for that purpose: <code>Fn(...) -&gt; ...</code>.</p>\n\n<p>Let me propose another solution:</p>\n\n<pre><code>fn perform_if_exists&lt;T, F, R&gt;(item: T, vector: &amp;mut Vec&lt;T&gt;, func: F) -&gt; Option&lt;R&gt;\n    where F: FnOnce(&amp;mut Vec&lt;T&gt;, usize) -&gt; R,\n          T: PartialEq\n{\n    let idx = vector.iter().position(|i| *i == item );\n    idx.map(|i| func(vector, i))\n}\n</code></pre>\n\n<p>This solution is far more generic as it allows arbitrary item types, arbitrary \"callable\" types and returns the value that is returned by the given function. Note that the <code>main</code> function didn't change; the solution is more generic, but all old uses still work.</p>\n"}], "owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3346, "favorite_count": 1, "accepted_answer_id": 37391993, "answer_count": 2, "score": 8, "last_activity_date": 1464009505, "creation_date": 1464008393, "last_edit_date": 1464009375, "question_id": 37391695, "link": "https://stackoverflow.com/questions/37391695/is-it-possible-to-pass-an-object-method-as-argument-to-a-function-and-bind-it-to", "title": "Is it possible to pass an object method as argument to a function and bind it to the object?", "body": "<p>Is it possible to make a bind to object method? For example, I have a vector and a lot of functions which do something if some item exists in the vector. I would implement it as follows:</p>\n\n<pre><code>fn perform_if_exists(item: u8, vector: &amp;Vec&lt;u8&gt;, func: fn(usize)) {\n    let idx = vector.iter().position(|i| *i == item );\n    match idx {\n        Some(i) =&gt; func(i), \n        None    =&gt; {},\n    }\n}\n\nfn main() {\n    let v: Vec&lt;u8&gt; = vec![1, 2, 3];\n    perform_if_exists(1, &amp;v, Vec&lt;_&gt;::remove);\n}\n</code></pre>\n\n<p>but it gives a lot of errors. I think they are reasonable but it's because I don't understand how to put vector's method as argument to a function.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 14813, "user_id": 141502, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/zgvfq.png?s=128&g=1", "display_name": "Daniel", "link": "https://stackoverflow.com/users/141502/daniel"}, "is_accepted": true, "score": 2, "last_activity_date": 1464004904, "creation_date": 1464004904, "answer_id": 37390486, "question_id": 37389946, "link": "https://stackoverflow.com/questions/37389946/cannot-borrow-immutable-content-as-mutable-when-moving-a-closure-into-a-thread/37390486#37390486", "title": "&quot;Cannot borrow immutable content as mutable&quot; when moving a closure into a thread", "body": "<p>Mutability in Rust is inherited: because the variable <code>f</code> holding the box is immutable, the contents of the box are also immutable. An immutable <code>FnMut</code> closure cannot be called (<code>FnMut</code> requires the ability to mutate its environment).</p>\n\n<p>Solution: make the variable <code>f</code> mutable:</p>\n\n<p><code>fn spawner(mut f: Box&lt;FnMut()-&gt;()+Send&gt;) -&gt; thread::JoinHandle&lt;()&gt;</code></p>\n"}, {"tags": [], "owner": {"reputation": 11, "user_id": 6371072, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1486c4546300f42e7870bde12e83de91?s=128&d=identicon&r=PG&f=1", "display_name": "jaugustosaba", "link": "https://stackoverflow.com/users/6371072/jaugustosaba"}, "is_accepted": false, "score": 1, "last_activity_date": 1464008335, "last_edit_date": 1464008335, "creation_date": 1464005653, "answer_id": 37390754, "question_id": 37389946, "link": "https://stackoverflow.com/questions/37389946/cannot-borrow-immutable-content-as-mutable-when-moving-a-closure-into-a-thread/37390754#37390754", "title": "&quot;Cannot borrow immutable content as mutable&quot; when moving a closure into a thread", "body": "<p>The Rust compiler is not allowing you to move the immutable argument <code>f</code> into the closure. Changing it to mutable (adding <code>mut</code> before the variable) the compiler will stop complaining and you will get the desired behaviour.</p>\n\n<pre><code>use std::thread;\n\nfn spawner(mut f: Box&lt;FnMut()-&gt;()+Send&gt;) -&gt; thread::JoinHandle&lt;()&gt; {\n    thread::spawn(move || {\n        f();\n    })\n}\n\n\nfn main() {\n    let cb = || {\n        println!(\"callback\");\n    };\n    spawner(Box::new(cb)).join().unwrap();\n}\n</code></pre>\n"}], "owner": {"reputation": 191, "user_id": 4313550, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/840d70062d48dd04df28fff3d07ef6d3?s=128&d=identicon&r=PG&f=1", "display_name": "TheBender", "link": "https://stackoverflow.com/users/4313550/thebender"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1112, "favorite_count": 0, "accepted_answer_id": 37390486, "answer_count": 2, "score": 0, "last_activity_date": 1464008390, "creation_date": 1464003422, "last_edit_date": 1464008390, "question_id": 37389946, "link": "https://stackoverflow.com/questions/37389946/cannot-borrow-immutable-content-as-mutable-when-moving-a-closure-into-a-thread", "title": "&quot;Cannot borrow immutable content as mutable&quot; when moving a closure into a thread", "body": "<p>In Rust, I want to specify a callback (e.g. a closure) to be called by a worker thread when something interesting happens. What would be the correct type signature for the callback?</p>\n\n<p>This is an example of what I am trying to do:</p>\n\n<pre><code>use std::thread;\n\nfn spawner(f: Box&lt;FnMut()-&gt;()+Send&gt;) -&gt; thread::JoinHandle&lt;()&gt; {\n    thread::spawn(move || {\n        f();\n    })\n}\n\n\nfn main() {\n    let cb = || {\n        println!(\"callback\");\n    };\n    spawner(Box::new(cb)).join().unwrap();\n}\n</code></pre>\n\n<blockquote>\n<pre><code>src/main.rs:5:9: 5:10 error: cannot borrow immutable `Box` content\n`*f` as mutable\n\nsrc/main.rs:5         f();\n</code></pre>\n</blockquote>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1464008248, "post_id": 37389432, "comment_id": 62292503, "body": "What are you trying to accomplish with this hypothetical syntax?"}, {"owner": {"user_type": "does_not_exist", "display_name": "user266003"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1464010671, "post_id": 37389432, "comment_id": 62294068, "body": "@Shepmaster, guess my friend."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1464012362, "post_id": 37389432, "comment_id": 62295329, "body": "I apologize, I must have been unclear. The syntax <code>r reg_str</code> doesn&#39;t make any sense. A string variable doesn&#39;t need any special escaping, it&#39;s just a handle to a thing. What <b>problem</b> do you have that you think this syntax would solve?"}, {"owner": {"user_type": "does_not_exist", "display_name": "user266003"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1464061050, "post_id": 37389432, "comment_id": 62316034, "body": "@Shepmaster, I want to get the same output string as I do when I use &quot;r&quot;. But with a string being variable. Why doesn&#39;t it make sense?"}, {"owner": {"reputation": 9272, "user_id": 241544, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/d27ca4e9a9a41ec8732046e6a272f091?s=128&d=identicon&r=PG", "display_name": "Matthew Walton", "link": "https://stackoverflow.com/users/241544/matthew-walton"}, "edited": false, "score": 1, "creation_date": 1464076523, "post_id": 37389432, "comment_id": 62322256, "body": "It doesn&#39;t make sense because <code>r</code> only has anything to do with how the compiler reads a string literal. Once things are inside a string, that part is over and done with and the contents are the same. So if you&#39;re getting your regex from a function, you can just pass the result of that function into <code>Regex::new</code> and it&#39;ll work."}, {"owner": {"user_type": "does_not_exist", "display_name": "user266003"}, "reply_to_user": {"reputation": 9272, "user_id": 241544, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/d27ca4e9a9a41ec8732046e6a272f091?s=128&d=identicon&r=PG", "display_name": "Matthew Walton", "link": "https://stackoverflow.com/users/241544/matthew-walton"}, "edited": false, "score": 0, "creation_date": 1464077307, "post_id": 37389432, "comment_id": 62322670, "body": "@MatthewWalton, thx. so what characters does &quot;r&quot; change?"}, {"owner": {"reputation": 9272, "user_id": 241544, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/d27ca4e9a9a41ec8732046e6a272f091?s=128&d=identicon&r=PG", "display_name": "Matthew Walton", "link": "https://stackoverflow.com/users/241544/matthew-walton"}, "edited": false, "score": 1, "creation_date": 1464080962, "post_id": 37389432, "comment_id": 62325007, "body": "Using <code>r</code> stops <code>` being special, so you can&#39;t use something like </code>\\n` to get a newline in a raw string literal. It also changes how <code>&quot;</code> is interpreted as the end of a string - if you want <code>&quot;</code> inside a raw string literal, you can add some hashes to the delimiters: <code>r#&quot; my string with a &quot; in it &quot;#</code>, or as many hashes as you like (provided the count is the same at each end). So with that you can put basically anything at all inside a raw string literal."}], "answers": [{"comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user266003"}, "edited": false, "score": 0, "creation_date": 1464061073, "post_id": 37389734, "comment_id": 62316040, "body": "Why doesn&#39;t it make sense with variables?"}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 1, "creation_date": 1464070111, "post_id": 37389734, "comment_id": 62318801, "body": "I thought my answer covered it. Can you say how you think it might change  a variable?"}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 5, "last_activity_date": 1464002724, "creation_date": 1464002724, "answer_id": 37389734, "question_id": 37389432, "link": "https://stackoverflow.com/questions/37389432/how-to-use-r-or-b-or-the-likes-with-variables-not-literals/37389734#37389734", "title": "How to use &quot;r&quot; or &quot;b&quot; or the likes with variables, not literals?", "body": "<p>The <code>r\"\"</code> (raw string) and <code>b\"\"</code> (byte) only make sense for literals - they're part of literal string syntax.  Think of them as a different type of quote - it wouldn't make sense to use plain double quotes (<code>\"\"</code>) with non-literals.</p>\n\n<p>The only difference between <code>r\"blah\"</code> and <code>\"blah\"</code> is that some special characters are escaped differently; the result is still an object of type <code>&amp;'static str</code>.</p>\n\n<p>Byte string literals (<code>b\"foo\"</code>) and raw byte string literals (<code>br\"foo\"</code>) are analogous, but are <code>&amp;'static [u8;n]</code>.</p>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user266003"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 145, "favorite_count": 0, "accepted_answer_id": 37389734, "answer_count": 1, "score": 0, "last_activity_date": 1464002724, "creation_date": 1464001836, "question_id": 37389432, "link": "https://stackoverflow.com/questions/37389432/how-to-use-r-or-b-or-the-likes-with-variables-not-literals", "title": "How to use &quot;r&quot; or &quot;b&quot; or the likes with variables, not literals?", "body": "<p>I can do this:</p>\n\n<pre><code> Regex::new(r\"some reg exp\")\n</code></pre>\n\n<p>However, how can I use \"r\" and dynamically created string together, that is, a variable?</p>\n\n<pre><code> let reg_str = get_some_reg_exp();\n Regex::new(r  reg_str????)\n</code></pre>\n"}, {"tags": ["string", "rust", "directory", "path"], "answers": [{"comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1464005438, "post_id": 37389394, "comment_id": 62290556, "body": "Could you add a short explanation about <code>Cow</code> and the hint to use <code>into_owned()</code>? Or may I edit your answer to add it?"}, {"owner": {"reputation": 501, "user_id": 2655960, "user_type": "registered", "profile_image": "https://graph.facebook.com/100000447293078/picture?type=large", "display_name": "xiaoai", "link": "https://stackoverflow.com/users/2655960/xiaoai"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1464088349, "post_id": 37389394, "comment_id": 62330122, "body": "Thank you very much. @lukas kalbertodt, for the usage of Cow, you can refer to this blog: <a href=\"http://hermanradtke.com/2015/05/29/creating-a-rust-function-that-returns-string-or-str.html\" rel=\"nofollow noreferrer\">hermanradtke.com/2015/05/29/&hellip;</a>"}], "tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": false, "score": 21, "last_activity_date": 1464007513, "last_edit_date": 1464007513, "creation_date": 1464001734, "answer_id": 37389394, "question_id": 37388107, "link": "https://stackoverflow.com/questions/37388107/how-to-convert-the-pathbuf-to-string/37389394#37389394", "title": "How to convert the PathBuf to String", "body": "<p>It is not easy on purpose: <code>String</code> are UTF-8 encoded, but <code>PathBuf</code> might not be (eg. on Windows). So the conversion might fail.</p>\n\n<p>There are also <a href=\"https://doc.rust-lang.org/std/path/struct.PathBuf.html#method.to_str\" rel=\"noreferrer\"><code>to_str</code></a> and <a href=\"https://doc.rust-lang.org/std/path/struct.PathBuf.html#method.to_string_lossy\" rel=\"noreferrer\"><code>to_string_lossy</code></a> methods for convenience. The former returns an <code>Option&lt;&amp;str&gt;</code> to indicate possible failure and the later will always succeed but will replace non-UTF-8 characters with <code>U+FFFD REPLACEMENT CHARACTER</code> (which is why it returns <code>Cow&lt;str&gt;</code>: if the path is already valid UTF-8, it will return a reference to the inner buffer but if some characters are to be replaced, it will allocate a new <code>String</code> for that; in both case you can then use <a href=\"https://doc.rust-lang.org/collections/borrow/enum.Cow.html#method.into_owned\" rel=\"noreferrer\"><code>into_owned</code></a> if you really need a <code>String</code>).</p>\n"}, {"tags": [], "owner": {"reputation": 16853, "user_id": 4101725, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-dGwoPMFb_tM/AAAAAAAAAAI/AAAAAAAABks/tMMqc6E9REg/photo.jpg?sz=128", "display_name": "Michele d&#39;Amico", "link": "https://stackoverflow.com/users/4101725/michele-damico"}, "is_accepted": false, "score": 39, "last_activity_date": 1618695107, "last_edit_date": 1618695107, "creation_date": 1488546108, "answer_id": 42579588, "question_id": 37388107, "link": "https://stackoverflow.com/questions/37388107/how-to-convert-the-pathbuf-to-string/42579588#42579588", "title": "How to convert the PathBuf to String", "body": "<p>As mcarton has already said it is not so simple as not all paths are <a href=\"https://en.wikipedia.org/wiki/UTF-8\" rel=\"nofollow noreferrer\">UTF-8 encoded</a>. But you can use:</p>\n<pre><code>p.into_os_string().into_string()\n</code></pre>\n<p>In order to have a fine control of it utilize <code>?</code> to send error to upper level or simply ignore it by calling <code>unwrap()</code>:</p>\n<pre><code>let my_str = cwd.into_os_string().into_string().unwrap();\n</code></pre>\n<p>A nice thing about <code>into_string()</code> is that the error wrap the original <code>OsString</code> value.</p>\n"}, {"comments": [{"owner": {"reputation": 143, "user_id": 10087197, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8bb2dce8b46248b37e70f4224753e0b9?s=128&d=identicon&r=PG&f=1", "display_name": "danda", "link": "https://stackoverflow.com/users/10087197/danda"}, "edited": false, "score": 1, "creation_date": 1591202755, "post_id": 61142928, "comment_id": 109968767, "body": "I&#39;ve been using this because it is convenient.  Do you know if it uses to_string_lossy() internally?   Otherwise, I wonder how it does the conversion without returning any possible error?"}, {"owner": {"reputation": 33207, "user_id": 1399491, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/a1cb3dec3a6f3411ce3460276e44b292?s=128&d=identicon&r=PG", "display_name": "Alex W", "link": "https://stackoverflow.com/users/1399491/alex-w"}, "edited": false, "score": 1, "creation_date": 1611471930, "post_id": 61142928, "comment_id": 116458390, "body": "The <code>.as_path()</code> method is not necessary per the documentation: &quot;It also implements <code>Deref</code> to <code>Path</code>, meaning that all methods on <code>Path</code> slices are available on <code>PathBuf</code> values as well.&quot;"}], "tags": [], "owner": {"reputation": 189, "user_id": 9402798, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=128", "display_name": "Paras Bhattrai", "link": "https://stackoverflow.com/users/9402798/paras-bhattrai"}, "is_accepted": false, "score": 9, "last_activity_date": 1586611513, "last_edit_date": 1586611513, "creation_date": 1586530538, "answer_id": 61142928, "question_id": 37388107, "link": "https://stackoverflow.com/questions/37388107/how-to-convert-the-pathbuf-to-string/61142928#61142928", "title": "How to convert the PathBuf to String", "body": "<p>One way to convert PathBuf to String would be:</p>\n\n<p><code>your_path.as_path().display().to_string();</code></p>\n"}], "owner": {"reputation": 501, "user_id": 2655960, "user_type": "registered", "profile_image": "https://graph.facebook.com/100000447293078/picture?type=large", "display_name": "xiaoai", "link": "https://stackoverflow.com/users/2655960/xiaoai"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 21685, "favorite_count": 8, "answer_count": 3, "score": 50, "last_activity_date": 1618695107, "creation_date": 1463998004, "last_edit_date": 1611472002, "question_id": 37388107, "link": "https://stackoverflow.com/questions/37388107/how-to-convert-the-pathbuf-to-string", "title": "How to convert the PathBuf to String", "body": "<p>I have to convert the <code>PathBuf</code> variable to a <code>String</code> to feed my function. My code is like this:</p>\n\n<pre><code>let cwd = env::current_dir().unwrap();\nlet my_str: String = cwd.as_os_str().to_str().unwrap().to_string();\nprintln!(\"{:?}\", my_str);\n</code></pre>\n\n<p>it works but is awful with the <code>cwd.as_os_str\u2026</code>.\nDo you have a more convenient method or any suggestions on how to handle it?</p>\n"}, {"tags": ["rust", "lifetime", "borrow-checker"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1463996529, "post_id": 37387262, "comment_id": 62284838, "body": "You are taking a reference to the value generated by <code>to_string</code>. Just remove the <code>&amp;</code> and your code will work: <a href=\"https://play.rust-lang.org/?gist=b41ea549d5b4add70559827b7d41e58a&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1463996690, "post_id": 37387262, "comment_id": 62284975, "body": "Possible duplicate of <a href=\"http://stackoverflow.com/questions/29428227/return-local-string-as-a-slice-str\">Return local String as a slice (&amp;str)</a>"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1463996818, "post_id": 37387262, "comment_id": 62285057, "body": "@ker I don&#39;t think it&#39;s a duplicate. Similar yes, but still different enough IMO :)"}, {"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 0, "creation_date": 1463996916, "post_id": 37387262, "comment_id": 62285117, "body": "You probably don&#39;t want to insert references to strings into the map. Just remove all the &amp; operators."}], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 5, "last_activity_date": 1463996759, "creation_date": 1463996759, "answer_id": 37387700, "question_id": 37387262, "link": "https://stackoverflow.com/questions/37387262/to-string-causes-error-borrowed-value-does-not-live-long-enough/37387700#37387700", "title": "to_string() causes error &quot;borrowed value does not live long enough&quot;", "body": "<p>You are creating a <code>HashMap</code> that saves references to strings, namely <code>&amp;String</code>. If we would annotate the type, it would look like this:</p>\n\n<pre><code>let mut map: HashMap&lt;&amp;str, &amp;String&gt; = HashMap::new();\n</code></pre>\n\n<p>This means that the map contains a lot of references to objects that live <strong>somewhere else</strong>. In your first insert, that works perfectly fine, since <code>foo.name</code> lives somewhere else, specifically in the object <code>foo</code>.</p>\n\n<pre><code>map.insert(\"name\", &amp;foo.name);\n</code></pre>\n\n<p>But your second insert has a problem: you want to reference a <code>String</code> object, that lives somewhere. <code>to_string()</code> creates a <code>String</code> which is returned by the function, but in your case it's just a temporary object. The object will be destroyed after the line is executed.</p>\n\n<pre><code>map.insert(\"id\", &amp;foo.id.unwrap().to_string());\n</code></pre>\n\n<p>The compiler is right: a <code>let</code> binding would solve the problem here.</p>\n\n<pre><code>let mut map = HashMap::new();\nmap.insert(\"name\", &amp;foo.name);\nlet id_string = foo.id.unwrap().to_string();\nmap.insert(\"id\", &amp;id_string);\n</code></pre>\n\n<p>This works fine in your small example, but it could be more complicated when you are working on something bigger. For example, if the <code>HashMap</code> would be defined outside of the loop, you would have a problem because the reference you insert into the map needs to live at least as long as the map itself.</p>\n"}], "owner": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 472, "favorite_count": 2, "accepted_answer_id": 37387700, "answer_count": 1, "score": 3, "last_activity_date": 1463996759, "creation_date": 1463995515, "question_id": 37387262, "link": "https://stackoverflow.com/questions/37387262/to-string-causes-error-borrowed-value-does-not-live-long-enough", "title": "to_string() causes error &quot;borrowed value does not live long enough&quot;", "body": "<p>Why is <code>to_string()</code> causing <code>borrowed value does not live long enough</code> error? Example below:</p>\n\n<pre><code>use std::collections::HashMap;\n\nstruct Foo {\n    id: Option&lt;usize&gt;,\n    name: String\n}\n\nfn main() {\n\n    let foos = getFoos();\n\n    for foo in foos {\n        let mut map = HashMap::new();\n        map.insert(\"name\", &amp;foo.name);\n        map.insert(\"id\", &amp;foo.id.unwrap().to_string());\n    }\n\n}\n\nfn getFoos() -&gt; Vec&lt;Foo&gt; {\n    Vec::new()\n}\n</code></pre>\n\n<p>Error:</p>\n\n<pre><code>src/main.rs:15:27: 15:54 error: borrowed value does not live long enough\nsrc/main.rs:15         map.insert(\"id\", &amp;foo.id.unwrap().to_string());\n                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~\nsrc/main.rs:13:38: 16:6 note: reference must be valid for the block suffix following statement 0 at 13:37...\nsrc/main.rs:13         let mut map = HashMap::new();\nsrc/main.rs:14         map.insert(\"name\", &amp;foo.name);\nsrc/main.rs:15         map.insert(\"id\", &amp;foo.id.unwrap().to_string());\nsrc/main.rs:16     }\nsrc/main.rs:15:9: 15:56 note: ...but borrowed value is only valid for the statement at 15:8\nsrc/main.rs:15         map.insert(\"id\", &amp;foo.id.unwrap().to_string());\n                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nsrc/main.rs:15:9: 15:56 help: consider using a `let` binding to increase its lifetime\nsrc/main.rs:15         map.insert(\"id\", &amp;foo.id.unwrap().to_string());\n                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>Why is compiler suggesting to create intermediate value? This error is confusing.</p>\n"}, {"tags": ["rust", "lifetime", "lifetime-scoping"], "comments": [{"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 0, "creation_date": 1463997764, "post_id": 37387068, "comment_id": 62285619, "body": "Weird, looking at rust-xcb&#39;s source I can&#39;t find any lifetime annotations; in particular, the Setup struct doesn&#39;t have any."}, {"owner": {"reputation": 113, "user_id": 3520761, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/1b243b0b21684c107f4b91d82fe4a729?s=128&d=identicon&r=PG", "display_name": "dimcha", "link": "https://stackoverflow.com/users/3520761/dimcha"}, "reply_to_user": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 0, "creation_date": 1463998468, "post_id": 37387068, "comment_id": 62286035, "body": "@SebastianRedl As I see lifetimes exists <a href=\"http://rtbo.github.io/rust-xcb/src/xcb/xproto.rs.html#1516\" rel=\"nofollow noreferrer\">rtbo.github.io/rust-xcb/src/xcb/xproto.rs.html#1516</a>"}, {"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 0, "creation_date": 1464002324, "post_id": 37387068, "comment_id": 62288495, "body": "Ah, I was looking at the outdated Aatch repo."}, {"owner": {"reputation": 113, "user_id": 3520761, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/1b243b0b21684c107f4b91d82fe4a729?s=128&d=identicon&r=PG", "display_name": "dimcha", "link": "https://stackoverflow.com/users/3520761/dimcha"}, "reply_to_user": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 0, "creation_date": 1464005458, "post_id": 37387068, "comment_id": 62290577, "body": "I seems like returned vis depends on previously binded variables. When I remove <code>Some(vis)</code> compile become success."}], "answers": [{"comments": [{"owner": {"reputation": 113, "user_id": 3520761, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/1b243b0b21684c107f4b91d82fe4a729?s=128&d=identicon&r=PG", "display_name": "dimcha", "link": "https://stackoverflow.com/users/3520761/dimcha"}, "edited": false, "score": 0, "creation_date": 1464005023, "post_id": 37389845, "comment_id": 62290263, "body": "I&#39;ve change the xcb ffi generator and gain  an &quot;error: lifetime name <code>&#39;a</code> shadows a lifetime name that is already in scope&quot;. It seems like we can&#39;t use the same lifetime name as in impl&lt;&#39;a&gt; Screen&lt;&#39;a&gt;"}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 1, "creation_date": 1464006936, "post_id": 37389845, "comment_id": 62291611, "body": "The point is that you shouldn&#39;t declare a new lifetime, but use the existing one.  So it should look like:     &quot;pub fn roots(&amp;&#39;a self) -&gt; ScreenIterator&lt;&#39;a&gt; { ... }&quot;, not &quot;pub fn roots&lt;&#39;a&gt;(...)&quot;."}], "tags": [], "owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "is_accepted": true, "score": 2, "last_activity_date": 1464212082, "last_edit_date": 1464212082, "creation_date": 1464003100, "answer_id": 37389845, "question_id": 37387068, "link": "https://stackoverflow.com/questions/37387068/does-not-live-long-enough-error-when-calling-roots-from-rust-xcb/37389845#37389845", "title": "&quot;does not live long enough&quot; error when calling `roots` from rust-xcb", "body": "<p>It looks like the lifetime annotations of the bindings are faulty. Here's <code>roots()</code>:</p>\n\n<pre><code>impl&lt;'a&gt; Screen&lt;'a&gt; {\n    pub fn roots(&amp;self) -&gt; ScreenIterator {\n        unsafe {\n            xcb_setup_roots_iterator(self.ptr)\n        }\n    }\n}\n</code></pre>\n\n<p>Note that because there are no annotations on the function, this is implicitly annotated as</p>\n\n<pre><code>impl&lt;'a&gt; Screen&lt;'a&gt; {\n    pub fn &lt;'b&gt; roots(&amp;'b self) -&gt; ScreenIterator&lt;'b&gt; {\n        unsafe {\n            xcb_setup_roots_iterator(self.ptr)\n        }\n    }\n}\n</code></pre>\n\n<p>And this is wrong. The returned <code>ScreenIterator</code> needs to be explicitly annotated with lifetime <code>'a</code> instead, which is the lifetime of the underlying connection, and XCB appears to have the convention that all the pointers it hands out are bound by lifetime to the lifetime of the connection (see the comment for the wrapper type <code>base::StructPtr</code>. This means the generator scripts need to be adjusted to account for this. You should file an issue with the crate.</p>\n\n<p><strong>upd from requestor:</strong>\n@SebastianRedl was right. Problem is in unset lifetimes in xcb crate for all functions which returns Iterators. Next lifetime changes in rust-xcb crate allows to compile code successfully:</p>\n\n<pre><code>impl&lt;'a&gt; Setup&lt;'a&gt; {\n    pub fn roots(&amp;self) -&gt; ScreenIterator&lt;'a&gt; {\n        unsafe {\n             xcb_setup_roots_iterator(self.ptr)\n        }\n    }\n}\n\nimpl&lt;'a&gt; Depth&lt;'a&gt; {\n    pub fn visuals(&amp;self) -&gt; VisualtypeIterator&lt;'a&gt; {\n        unsafe {\n            xcb_depth_visuals_iterator(self.ptr)\n        }\n    }\n}\n\nimpl&lt;'a&gt; Screen&lt;'a&gt; {\n    pub fn allowed_depths(&amp;self) -&gt; DepthIterator&lt;'a&gt; {\n        unsafe {\n            xcb_screen_allowed_depths_iterator(self.ptr)\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 113, "user_id": 3520761, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/1b243b0b21684c107f4b91d82fe4a729?s=128&d=identicon&r=PG", "display_name": "dimcha", "link": "https://stackoverflow.com/users/3520761/dimcha"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 161, "favorite_count": 1, "accepted_answer_id": 37389845, "answer_count": 1, "score": 4, "last_activity_date": 1464212082, "creation_date": 1463994931, "last_edit_date": 1464008576, "question_id": 37387068, "link": "https://stackoverflow.com/questions/37387068/does-not-live-long-enough-error-when-calling-roots-from-rust-xcb", "title": "&quot;does not live long enough&quot; error when calling `roots` from rust-xcb", "body": "<p>I'm trying to use a Cairo surface in xcb-created window. I have a C example as well as Rust XCB and Cairo bindings. I'm almost finished, but this error remains a mystery to me.</p>\n\n<p>My code:</p>\n\n<pre><code>fn find_visual&lt;'a&gt;(conn: &amp;'a xcb::Connection, visual: xcb_visualid_t) -&gt; Option&lt;Visualtype&lt;'a&gt;&gt; {\n    let setup: Setup&lt;'a&gt; = conn.get_setup();\n    for screen in setup.roots() {\n        let d_iter: DepthIterator = screen.allowed_depths();\n        for depth in d_iter {\n            for vis in depth.visuals() {\n                if visual == vis.visual_id() {\n                    println!(\"Found visual\");\n                    return Some(vis)\n                }\n            }\n        }\n    }\n    None\n}\n</code></pre>\n\n<p>I call this as:</p>\n\n<pre><code>let visual = find_visual(&amp;conn, screen.root_visual()).unwrap();\n</code></pre>\n\n<p>And gain errors like this:</p>\n\n<pre><code>src/main.rs:56:19: 56:24 error: `setup` does not live long enough\nsrc/main.rs:56     for screen in setup.roots() {\n                                 ^~~~~\nsrc/main.rs:54:97: 68:2 note: reference must be valid for the lifetime 'a as defined on the block at 54:96...\nsrc/main.rs:54 fn find_visual&lt;'a&gt;(conn: &amp;'a xcb::Connection, visual: xcb_visualid_t) -&gt; Option&lt;Visualtype&lt;'a&gt;&gt; {\nsrc/main.rs:55     let setup: Setup&lt;'a&gt; = conn.get_setup();\nsrc/main.rs:56     for screen in setup.roots() {\nsrc/main.rs:57         let d_iter: DepthIterator = screen.allowed_depths();\nsrc/main.rs:58         for depth in d_iter {\nsrc/main.rs:59             for vis in depth.visuals() {\n               ...\nsrc/main.rs:55:45: 68:2 note: ...but borrowed value is only valid for the block suffix following statement 0 at 55:44\nsrc/main.rs:55     let setup: Setup&lt;'a&gt; = conn.get_setup();\nsrc/main.rs:56     for screen in setup.roots() {\nsrc/main.rs:57         let d_iter: DepthIterator = screen.allowed_depths();\nsrc/main.rs:58         for depth in d_iter {\nsrc/main.rs:59             for vis in depth.visuals() {\nsrc/main.rs:60                 if visual == vis.visual_id() {\n               ...\n</code></pre>\n\n<p>And the same errors for <code>screen</code> and <code>depth</code> variables. </p>\n\n<p>Can someone explain - why \"<code>setup</code> does not live long enough\"? As I understand, <code>setup</code> will be destroyed when function <code>return</code> Option, and it can be used in function without limitations.</p>\n\n<p><code>get_setup()</code> code:</p>\n\n<pre><code>pub fn get_setup(&amp;self) -&gt; Setup {\n    unsafe {\n\n        let setup = xcb_get_setup(self.c);\n        if setup.is_null() {\n            panic!(\"NULL setup on connection\")\n        }\n        mem::transmute(setup)\n    }\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 2, "creation_date": 1463965540, "post_id": 37381212, "comment_id": 62273415, "body": "Being able to copy a mutable reference would infer that you can have multiple mutable references to the same object at the same time in Rust... when you can&#39;t."}, {"owner": {"reputation": 2785, "user_id": 684921, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/990a99ab00235dd85bce612eabe79357?s=128&d=identicon&r=PG", "display_name": "yohjp", "link": "https://stackoverflow.com/users/684921/yohjp"}, "reply_to_user": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1463971842, "post_id": 37381212, "comment_id": 62274700, "body": "Thanks for your comment. Why they behave is understandable, and I&#39;m looking for some documented resources."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 2, "creation_date": 1463993314, "post_id": 37381212, "comment_id": 62282755, "body": "See this issue about rustdoc not showing <code>Copy</code> impls for builtin types: <a href=\"https://github.com/rust-lang/rust/issues/25893\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/25893</a>"}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 5, "creation_date": 1464001386, "post_id": 37381212, "comment_id": 62287857, "body": "The <a href=\"https://doc.rust-lang.org/std/marker/trait.Copy.html\" rel=\"nofollow noreferrer\">documentation for Copy</a> mentions <code>&amp;mut T</code> not being <code>Copy</code>."}], "answers": [{"comments": [{"owner": {"reputation": 522, "user_id": 153612, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ba347a31bc66bb2654de01850e914021?s=128&d=identicon&r=PG", "display_name": "Ta Thanh Dinh", "link": "https://stackoverflow.com/users/153612/ta-thanh-dinh"}, "edited": false, "score": 1, "creation_date": 1570492826, "post_id": 37539040, "comment_id": 102923191, "body": "This link became <a href=\"https://doc.rust-lang.org/std/marker/trait.Copy.html#when-cant-my-type-be-copy\" rel=\"nofollow noreferrer\">When can&#39;t my type be Copy?</a>."}], "tags": [], "owner": {"reputation": 2785, "user_id": 684921, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/990a99ab00235dd85bce612eabe79357?s=128&d=identicon&r=PG", "display_name": "yohjp", "link": "https://stackoverflow.com/users/684921/yohjp"}, "is_accepted": true, "score": 4, "last_activity_date": 1464678445, "last_edit_date": 1495541418, "creation_date": 1464678445, "answer_id": 37539040, "question_id": 37381212, "link": "https://stackoverflow.com/questions/37381212/copy-move-semantics-documentation-of-t-mut-t-types-itself/37539040#37539040", "title": "Copy/move semantics documentation of &amp;T/&amp;mut T types itself", "body": "<p>Rust's <code>std::marker::Copy</code> trait reference says (thanks to <a href=\"https://stackoverflow.com/users/4529124/chris-emerson\">@Chris Emerson</a>):</p>\n\n<blockquote>\n  <p><a href=\"https://doc.rust-lang.org/std/marker/trait.Copy.html#when-can-my-type-not-be-copy\" rel=\"nofollow noreferrer\">When can my type not be Copy?</a><br>\n  Some types can't be copied safely. For example, copying <code>&amp;mut T</code> would create an aliased mutable reference, and copying <code>String</code> would result in two attempts to free the same buffer.<br>\n  [...]</p>\n</blockquote>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1490900823, "creation_date": 1490900823, "answer_id": 43126435, "question_id": 37381212, "link": "https://stackoverflow.com/questions/37381212/copy-move-semantics-documentation-of-t-mut-t-types-itself/43126435#43126435", "title": "Copy/move semantics documentation of &amp;T/&amp;mut T types itself", "body": "<p>As an addition to your code, you can always ask the compiler to tell you if a type can be copied, even without being able to construct that type:</p>\n\n<pre><code>fn is_this_type_copy&lt;T: Copy&gt;() {}\n\nfn main() {\n    is_this_type_copy::&lt;&amp;u8&gt;();\n}\n</code></pre>\n\n<p>If a type does <strong>not</strong> implement <code>Copy</code>, the compiler will produce an error.</p>\n\n<p>You can extend this to ask the question for <em>every</em> reference to a type. Your existing code only shows that an immutable reference to a <em>specific</em> type implements <code>Copy</code>:</p>\n\n<pre><code>fn is_every_reference_copy&lt;T&gt;() {\n    is_this_copy::&lt;&amp;T&gt;()\n}\n</code></pre>\n\n<p>Doing the same thing for <code>&amp;mut T</code>:</p>\n\n<pre><code>fn is_every_mut_reference_copy&lt;T&gt;() {\n    is_this_copy::&lt;&amp;mut T&gt;()\n}\n</code></pre>\n\n<p>Produces the same error you saw:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `&amp;mut T: std::marker::Copy` is not satisfied\n --&gt; src/main.rs:8:5\n  |\n8 |     is_this_copy::&lt;&amp;mut T&gt;()\n  |     ^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `&amp;mut T`\n  |\n  = note: required by `is_this_copy`\n</code></pre>\n\n<hr>\n\n<p>We've already seen why <code>&amp;mut T</code> cannot be copied, but why can <code>&amp;T</code> be copied? In a way, that's kind of the <em>entire point</em> of a reference. A reference is a way of cheaply sharing data. Instead of needing to clone (potentially expensively) something to give to multiple things, we can simply give each thing a lightweight reference to the original thing. If references couldn't be copied, they wouldn't have nearly the same amount of value.</p>\n"}], "owner": {"reputation": 2785, "user_id": 684921, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/990a99ab00235dd85bce612eabe79357?s=128&d=identicon&r=PG", "display_name": "yohjp", "link": "https://stackoverflow.com/users/684921/yohjp"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 664, "favorite_count": 1, "accepted_answer_id": 37539040, "answer_count": 2, "score": 7, "last_activity_date": 1490900823, "creation_date": 1463964859, "last_edit_date": 1463973410, "question_id": 37381212, "link": "https://stackoverflow.com/questions/37381212/copy-move-semantics-documentation-of-t-mut-t-types-itself", "title": "Copy/move semantics documentation of &amp;T/&amp;mut T types itself", "body": "<p>I'm looking for the document about copy/move semantics of reference and mutable reference types.</p>\n\n<p>The following code snippet shows immutable references (<code>&amp; T</code>) implement the <code>Copy</code> trait and mutable references (<code>&amp;mut T</code>) do not.</p>\n\n<pre><code>struct T;\nfn copyable&lt;U&gt;(_: U) where U: Copy {}\n\nfn main() {\n    let a = &amp;T;\n    copyable(a);  // OK\n\n    let b = &amp;mut T;\n    copyable(b);\n    // error: the trait `core::marker::Copy` is not implemented for the type `&amp;mut T`\n}\n</code></pre>\n\n<p>But I can't find the description of this behavior. Someone know some (un)official documents? (or am I wrong?)</p>\n"}, {"tags": ["thread-safety", "rust"], "comments": [{"owner": {"reputation": 10831, "user_id": 23760, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/6b24e6790cb03535ea082d8d73d0a235?s=128&d=identicon&r=PG", "display_name": "ZeissS", "link": "https://stackoverflow.com/users/23760/zeisss"}, "edited": false, "score": 0, "creation_date": 1463954312, "post_id": 37379952, "comment_id": 62271184, "body": "Did you try to assign the clone to a variable, then do the rest in a separate statement?"}, {"owner": {"reputation": 861, "user_id": 1681590, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/42686c3aa6908ce6a7b320d2ba1f2dd2?s=128&d=identicon&r=PG", "display_name": "bge0", "link": "https://stackoverflow.com/users/1681590/bge0"}, "reply_to_user": {"reputation": 10831, "user_id": 23760, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/6b24e6790cb03535ea082d8d73d0a235?s=128&d=identicon&r=PG", "display_name": "ZeissS", "link": "https://stackoverflow.com/users/23760/zeisss"}, "edited": false, "score": 0, "creation_date": 1463954374, "post_id": 37379952, "comment_id": 62271200, "body": "Yes, that is what I did: self.layer_storage.clone() and then work with that as a variable."}], "answers": [{"comments": [{"owner": {"reputation": 861, "user_id": 1681590, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/42686c3aa6908ce6a7b320d2ba1f2dd2?s=128&d=identicon&r=PG", "display_name": "bge0", "link": "https://stackoverflow.com/users/1681590/bge0"}, "edited": false, "score": 0, "creation_date": 1464041352, "post_id": 37380532, "comment_id": 62311292, "body": "Thank you @swizard. This is a valid answer as well. Just decided to go with  the one below for cleanliness."}], "tags": [], "owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "is_accepted": false, "score": 1, "last_activity_date": 1463973328, "last_edit_date": 1463973328, "creation_date": 1463958208, "answer_id": 37380532, "question_id": 37379952, "link": "https://stackoverflow.com/questions/37379952/arc-lifetime-does-not-live-long-enough-from-clone/37380532#37380532", "title": "Arc lifetime does not live long enough from clone()", "body": "<p>I think the compiler is right in your case. </p>\n\n<p>There are two obvious errors here: </p>\n\n<ol>\n<li><p>The <code>layers_arc</code> value lives just until the block end, and then it's destructor will decrement the reference counter and maybe drop the whole value. Or it could be dropped in other thread in any time. So it is illegal to return a pointer to it's contents.</p></li>\n<li><p><code>Mutex::get_mut</code> method requires <code>&amp;mut self</code>, while it is impossible to get it directly from <code>Arc</code>.</p></li>\n</ol>\n\n<p>So you have to refactor your code somehow. For example, you could guard each separate item in vector with <code>Arc&lt;Mutex&gt;</code> and return them by value using <code>.clone()</code>.</p>\n"}, {"comments": [{"owner": {"reputation": 861, "user_id": 1681590, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/42686c3aa6908ce6a7b320d2ba1f2dd2?s=128&d=identicon&r=PG", "display_name": "bge0", "link": "https://stackoverflow.com/users/1681590/bge0"}, "edited": false, "score": 0, "creation_date": 1464017023, "post_id": 37388340, "comment_id": 62298361, "body": "Thank you, this is a pretty elegant way to handle the problem. Only issue I see here is the generalizability: i.e. the closure only accepts one parameter. If some context were needed this might not work as well (especially since rust doesn&#39;t have overloading)."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "reply_to_user": {"reputation": 861, "user_id": 1681590, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/42686c3aa6908ce6a7b320d2ba1f2dd2?s=128&d=identicon&r=PG", "display_name": "bge0", "link": "https://stackoverflow.com/users/1681590/bge0"}, "edited": false, "score": 0, "creation_date": 1464020156, "post_id": 37388340, "comment_id": 62300377, "body": "Being a closure rather than just a function pointer means it can include context. Can you give an example that shows what might not be possible?"}, {"owner": {"reputation": 861, "user_id": 1681590, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/42686c3aa6908ce6a7b320d2ba1f2dd2?s=128&d=identicon&r=PG", "display_name": "bge0", "link": "https://stackoverflow.com/users/1681590/bge0"}, "edited": false, "score": 0, "creation_date": 1464040918, "post_id": 37388340, "comment_id": 62311171, "body": "Since you have <code>where F: FnMut(&amp;mut Params)</code> the only type of acceptable closure would be one that takes in just <code>&amp;mut Params</code>, correct? Supposing a function would need a few, eg: <code>where F: FnMut(&amp;mut Params)</code> <b>and</b> where <code>F: FnMut(&amp;mut Params, &amp;MyContext, i32)</code> it would need two different overloaded ops for this which is not possible (without a bunch of <code>Optional&lt;&gt;</code> &#39;s which is a little ugly"}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "reply_to_user": {"reputation": 861, "user_id": 1681590, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/42686c3aa6908ce6a7b320d2ba1f2dd2?s=128&d=identicon&r=PG", "display_name": "bge0", "link": "https://stackoverflow.com/users/1681590/bge0"}, "edited": false, "score": 0, "creation_date": 1464041132, "post_id": 37388340, "comment_id": 62311234, "body": "I&#39;ll edit my answer to show how a closure solves that, as a comment is too short."}, {"owner": {"reputation": 861, "user_id": 1681590, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/42686c3aa6908ce6a7b320d2ba1f2dd2?s=128&d=identicon&r=PG", "display_name": "bge0", "link": "https://stackoverflow.com/users/1681590/bge0"}, "edited": false, "score": 0, "creation_date": 1464041230, "post_id": 37388340, "comment_id": 62311250, "body": "I think I realize! Did a quick read from the rust book. It takes into account local scope as well!"}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 2, "last_activity_date": 1464041276, "last_edit_date": 1464041276, "creation_date": 1463998595, "answer_id": 37388340, "question_id": 37379952, "link": "https://stackoverflow.com/questions/37379952/arc-lifetime-does-not-live-long-enough-from-clone/37388340#37388340", "title": "Arc lifetime does not live long enough from clone()", "body": "<p>As @Shepmaster says you can't just return a reference to something inside the <code>Arc&lt;Mutex&lt;T&gt;&gt;</code> from the <code>get_mut_params</code>; this is one of the guarantees you get from them!</p>\n\n<p>One solution which works in may cases is to turn the function inside out; rather than returning a mutable reference, take a closure which is given the mutable reference:</p>\n\n<pre><code>impl ParamManager {\n    pub fn with_mut_params&lt;F&gt;(&amp;mut self, layer_index: usize, mut f: F)\n                     where F: FnMut(&amp;mut Params) {\n        let layers_arc = self.layer_storage.clone();\n        let layers = layers_arc.lock().unwrap();\n        f(&amp;mut layers[layer_index]);\n    }\n}\n\nfn main() {\n    let mut bla = ParamManager::default();\n\n    // Context used by the closure\n    let some_var: i32 = 7;\n    let other_var: mut MyContext = do_something();\n\n    bla.with_mut_params(0, |i| {\n       // do stuff with i\n       ...\n       // A closure has access to surrounding variables\n       other_var.foo(i, some_var);\n    });\n\n}\n</code></pre>\n"}], "owner": {"reputation": 861, "user_id": 1681590, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/42686c3aa6908ce6a7b320d2ba1f2dd2?s=128&d=identicon&r=PG", "display_name": "bge0", "link": "https://stackoverflow.com/users/1681590/bge0"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 796, "favorite_count": 0, "accepted_answer_id": 37388340, "answer_count": 2, "score": 1, "last_activity_date": 1464041276, "creation_date": 1463953378, "last_edit_date": 1463973272, "question_id": 37379952, "link": "https://stackoverflow.com/questions/37379952/arc-lifetime-does-not-live-long-enough-from-clone", "title": "Arc lifetime does not live long enough from clone()", "body": "<p>I'm trying to create a parameter structure that will possibly be shared between threads. It has a member called <code>layer_storage</code> which some members will need to mutate. I tried the following code, but am getting an error saying that the cloned <code>Arc</code> does not live long enough. This same member worked fine before the addition of <code>Arc&lt;Mutex&lt;&gt;&gt;</code>.</p>\n\n<pre><code>use std::sync::{Arc, Mutex};\n\n#[derive(Clone)]\npub struct Params {\n    pub optional: Vec&lt;f32&gt;,\n}\n\npub struct ParamManager {\n    layer_storage: Arc&lt;Mutex&lt;Vec&lt;Params&gt;&gt;&gt;,\n}\n\nimpl Default for ParamManager {\n    fn default() -&gt; ParamManager {\n        ParamManager {\n            layer_storage: Arc::new(Mutex::new(vec![Params { optional: vec![1.0f32, 2.0f32] },\n                                                    Params { optional: vec![3.0f32, 4.0f32] }])),\n        }\n    }\n}\n\nimpl ParamManager {\n    pub fn get_mut_params(&amp;mut self, layer_index: usize) -&gt; &amp;mut Params {\n        let layers_arc = self.layer_storage.clone();\n        let layers = layers_arc.get_mut().unwrap();\n        // tried this initially:\n        // let layers = self.layer_storage.clone().get_mut().unwrap();\n        assert!(layers.len() - 1 &gt;= layer_index);\n        &amp;mut layers[layer_index]\n    }\n}\n\nfn main() {\n    let mut bla = ParamManager::default();\n    let i = bla.get_mut_params(0);\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=93b3b4eb62cae98f47fac660563e47ef&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">Playground</a>)</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1464007537, "post_id": 37377490, "comment_id": 62292002, "body": "Oh, thanks! So, if I understood correctly, the only valid solution is to move argument parameter from associated type to trait signature. Maybe you know why closure arguments are not in associated types in <code>Fn*</code> declarations, like return type?"}], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 5, "last_activity_date": 1557571963, "last_edit_date": 1557571963, "creation_date": 1464231472, "answer_id": 37450797, "question_id": 37377490, "link": "https://stackoverflow.com/questions/37377490/why-do-i-get-the-type-parameter-is-not-constrained-when-creating-a-blanket-imp/37450797#37450797", "title": "Why do I get &quot;the type parameter is not constrained&quot; when creating a blanket implementation for a closure trait (Fn)?", "body": "<p>Type parameters represent \"input\" types, while associated types represent \"output\" types.</p>\n\n<p>Rust allows you to implement multiple instances of a generic trait so long as the combination of type parameters are unique. For example, a single <code>struct Foo</code> could implement <code>PartialEq&lt;Foo&gt;</code> and <code>PartialEq&lt;Bar&gt;</code> together.</p>\n\n<p>In contrast, associated types are assigned by the trait implementation. For example, the <code>Add</code> trait has a type parameter, <code>RHS</code>, and an associated type, <code>Output</code>. For each combination of <code>Self</code> (the type on which the trait is implemented) and <code>RHS</code>, the associated type <code>Output</code> is fixed.</p>\n\n<p>The main reason for using associated types is to reduce the number of type parameters on traits, especially where uses of that trait might have to define a type parameter just to properly bound that trait. However, associated types are not always appropriate; that's why we still have type parameters!</p>\n\n<hr>\n\n<p>The <code>Fn(Args) -&gt; Output</code> syntax for the <code>Fn</code> trait (and its friends <code>FnMut</code> and <code>FnOnce</code>) hides the underlying implementation of these traits. Here's your first <code>impl</code> again with the unstable \"low-level\" syntax:</p>\n\n<pre><code>#![feature(unboxed_closures)]\n\nimpl&lt;F, S, E&gt; Invoke for F\nwhere\n    F: Fn&lt;(), Output = Result&lt;S, E&gt;&gt;,\n{\n    type S = S;\n    type E = E;\n\n    fn fun(&amp;mut self) -&gt; Result&lt;S, E&gt; {\n        self()\n    }\n}\n</code></pre>\n\n<p>As you can see, the function's result type is an associated type, named <code>Output</code>. <code>Output = Result&lt;S, E&gt;</code> is a predicate, so that satisfies one of the compiler's conditions for type parameters on <code>impl</code> blocks.</p>\n\n<p>Now, here's your second <code>impl</code> with the unstable syntax:</p>\n\n<pre><code>#![feature(unboxed_closures)]\n\nimpl&lt;F, A, S, E&gt; Invoke for F\nwhere\n    F: Fn&lt;(A,), Output = Result&lt;S, E&gt;&gt;,\n{\n    type A = A;\n    type S = S;\n    type E = E;\n\n    fn fun(&amp;mut self, arg: A) -&gt; Result&lt;S, E&gt; {\n        self(arg)\n    }\n}\n</code></pre>\n\n<p>Here, <code>A</code> is used in <code>Fn</code>'s type parameter.</p>\n\n<p>Why is this not valid? In theory<sup>1</sup>, a single type could have multiple implementations of <code>Fn&lt;Args&gt;</code> with different values of <code>Args</code>. Which implementation should the compiler select in that case? You can only choose one, because <code>A</code> is not passed as a type parameter to <code>Invoke</code>, and thus <code>F</code> can only have a single implementation of <code>Invoke</code>.</p>\n\n<p><sup>1</sup> In practice, you need to use a nightly compiler to do this, because implementing <code>Fn</code>, <code>FnMut</code> or <code>FnOnce</code> directly is an unstable feature. On a stable versions, the compiler will only generate up to one implementation of each of these traits for functions and closures. Also, you could have the same issue with any other trait that has type parameters, even on a stable compiler.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/42613974/155423\">Why can&#39;t I add a blanket impl on a trait with a type parameter?</a></li>\n<li>Rust issue 25041: <a href=\"https://github.com/rust-lang/rust/issues/25041\" rel=\"nofollow noreferrer\">type parameter not constrained when using closure bounds</a></li>\n</ul>\n"}], "owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1861, "favorite_count": 0, "accepted_answer_id": 37450797, "answer_count": 1, "score": 4, "last_activity_date": 1557571963, "creation_date": 1463938610, "last_edit_date": 1557571753, "question_id": 37377490, "link": "https://stackoverflow.com/questions/37377490/why-do-i-get-the-type-parameter-is-not-constrained-when-creating-a-blanket-imp", "title": "Why do I get &quot;the type parameter is not constrained&quot; when creating a blanket implementation for a closure trait (Fn)?", "body": "<p>The compiler allows me to write blanket implementation a function like this:</p>\n\n<pre><code>trait Invoke {\n    type S;\n    type E;\n\n    fn fun(&amp;mut self) -&gt; Result&lt;Self::S, Self::E&gt;;\n}\n\nimpl&lt;F, S, E&gt; Invoke for F\nwhere\n    F: Fn() -&gt; Result&lt;S, E&gt;,\n{\n    type S = S;\n    type E = E;\n\n    fn fun(&amp;mut self) -&gt; Result&lt;S, E&gt; {\n        self()\n    }\n}\n</code></pre>\n\n<p>but it starts complaining when I try to add a function parameter:</p>\n\n<pre><code>trait Invoke {\n    type A;\n    type S;\n    type E;\n\n    fn fun(&amp;mut self, arg: Self::A) -&gt; Result&lt;Self::S, Self::E&gt;;\n}\n\nimpl&lt;F, A, S, E&gt; Invoke for F\nwhere\n    F: Fn(A) -&gt; Result&lt;S, E&gt;,\n{\n    type A = A;\n    type S = S;\n    type E = E;\n\n    fn fun(&amp;mut self, arg: A) -&gt; Result&lt;S, E&gt; {\n        self(arg)\n    }\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0207]: the type parameter `A` is not constrained by the impl trait, self type, or predicates\n --&gt; src/lib.rs:9:9\n  |\n9 | impl&lt;F, A, S, E&gt; Invoke for F\n  |         ^ unconstrained type parameter\n\nerror[E0207]: the type parameter `S` is not constrained by the impl trait, self type, or predicates\n --&gt; src/lib.rs:9:12\n  |\n9 | impl&lt;F, A, S, E&gt; Invoke for F\n  |            ^ unconstrained type parameter\n\nerror[E0207]: the type parameter `E` is not constrained by the impl trait, self type, or predicates\n --&gt; src/lib.rs:9:15\n  |\n9 | impl&lt;F, A, S, E&gt; Invoke for F\n  |               ^ unconstrained type parameter\n</code></pre>\n\n<p>I cannot understand why these two cases are different. Isn't <code>A</code> a part of constraint signature?</p>\n\n<p>I realized I can rewrite it like the <code>Fn</code> trait declaration, but I still do not get the idea:</p>\n\n<pre><code>trait Invoke&lt;A&gt; {\n    type S;\n    type E;\n\n    fn fun(&amp;mut self, arg: A) -&gt; Result&lt;Self::S, Self::E&gt;;\n}\n\nimpl&lt;F, A, S, E&gt; Invoke&lt;A&gt; for F\nwhere\n    F: Fn(A) -&gt; Result&lt;S, E&gt;,\n{\n    type S = S;\n    type E = E;\n\n    fn fun(&amp;mut self, arg: A) -&gt; Result&lt;S, E&gt; {\n        self(arg)\n    }\n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": false, "score": 14, "last_activity_date": 1485211004, "last_edit_date": 1485211004, "creation_date": 1463939837, "answer_id": 37377699, "question_id": 37377442, "link": "https://stackoverflow.com/questions/37377442/how-to-compare-an-array-and-a-part-of-a-vector/37377699#37377699", "title": "How to compare an array and a part of a vector?", "body": "<blockquote>\n  <p>Is there a better way to do that than comparing their elements one by one?</p>\n</blockquote>\n\n<p>Yes, you can compare a <a href=\"https://doc.rust-lang.org/std/primitive.slice.html\" rel=\"noreferrer\">slice</a> of the array with a slice of the vector:</p>\n\n<pre><code>fn main() {\n    let a = [3, 4, 5, 6];\n    let v = vec![0, 1, 2, 3, 4, 5, 6];\n    assert_eq!(&amp;a[..], &amp;v[v.len() - 4..]);\n}\n</code></pre>\n\n<p>A slice can be created with any <a href=\"https://doc.rust-lang.org/std/ops/index.html#structs\" rel=\"noreferrer\">range</a> form. Here are some examples of creating slices:</p>\n\n<pre><code>fn main() {\n    let v = vec![0, 1, 2, 3, 4, 5, 6];\n\n    // indexes 0, 1, 2 (3 not included)\n    assert_eq!(&amp;[0, 1, 2], &amp;v[..3]);\n\n    // indexes 2, 3 (4 not included)\n    assert_eq!(&amp;[2, 3], &amp;v[2..4]);\n\n    // indexes 3, 4, ..until the last\n    assert_eq!(&amp;[3, 4, 5, 6], &amp;v[3..]);\n\n    // all indexes\n    assert_eq!(&amp;[0, 1, 2, 3, 4, 5, 6], &amp;v[..]);\n}\n</code></pre>\n"}], "owner": {"reputation": 21726, "user_id": 1708058, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/4a0b611077fcb9f7ede011fdc46e4d4c?s=128&d=identicon&r=PG", "display_name": "Alan Coromano", "link": "https://stackoverflow.com/users/1708058/alan-coromano"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5272, "favorite_count": 0, "answer_count": 1, "score": 5, "last_activity_date": 1485211004, "creation_date": 1463938331, "last_edit_date": 1464008666, "question_id": 37377442, "link": "https://stackoverflow.com/questions/37377442/how-to-compare-an-array-and-a-part-of-a-vector", "title": "How to compare an array and a part of a vector?", "body": "<p>I have an array and vector and the vector is populated in a loop. In each iteration of the loop, I want to check whether the last 4 elements of the vector is equal to 4 elements of the array. The size of the array is 4.</p>\n\n<p>Is there a better way to do that than comparing their elements one by one? I'd like something like <code>my_array == my_vector[4, -4]</code></p>\n"}, {"tags": ["rust", "assignment-operator"], "answers": [{"comments": [{"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1488276365, "post_id": 37377418, "comment_id": 72149034, "body": "How is this related to your question? This has nothing in common to &quot;overloading assignment operator&quot;."}, {"owner": {"reputation": 647, "user_id": 5429050, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/da7e1d765858cc119fc86fa3e48e410b?s=128&d=identicon&r=PG", "display_name": "Hossein Noroozpour", "link": "https://stackoverflow.com/users/5429050/hossein-noroozpour"}, "reply_to_user": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1489298786, "post_id": 37377418, "comment_id": 72605903, "body": "@VictorPolevoy What do want exactly?"}, {"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1489302769, "post_id": 37377418, "comment_id": 72606633, "body": "You asked about &quot;overloading assignment operator&quot; which is <code>=</code>. That means you wanna know how to make custom logic during assignment. Deriving <code>Clone</code> and <code>Copy</code> traits does not overload anything and here is nothing related to <code>overloading assignment operator</code> in this answer. Simply, I have looked such information in the internet and found this question. I was very excited about this but your answer is really useless."}, {"owner": {"reputation": 647, "user_id": 5429050, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/da7e1d765858cc119fc86fa3e48e410b?s=128&d=identicon&r=PG", "display_name": "Hossein Noroozpour", "link": "https://stackoverflow.com/users/5429050/hossein-noroozpour"}, "reply_to_user": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1489405758, "post_id": 37377418, "comment_id": 72640862, "body": "That is easy, I think you forgot the meaning of Derivation in Rust. It only generate code for you, for different logic, you can easily implement Copy and Clone yourself."}, {"owner": {"reputation": 221394, "user_id": 366904, "user_type": "moderator", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/3f8912af19fe86b7b34a0b011a962460?s=128&d=identicon&r=PG", "display_name": "Cody Gray", "link": "https://stackoverflow.com/users/366904/cody-gray"}, "edited": false, "score": 0, "creation_date": 1505645289, "post_id": 37377418, "comment_id": 79489416, "body": "If the answer is wrong, please delete it. It&#39;s confusing to have wrong answers listed here. If you don&#39;t want to delete it, <a href=\"https://stackoverflow.com/posts/37377418/edit\">edit</a> it so it contains the <i>correct</i> answer."}, {"owner": {"reputation": 647, "user_id": 5429050, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/da7e1d765858cc119fc86fa3e48e410b?s=128&d=identicon&r=PG", "display_name": "Hossein Noroozpour", "link": "https://stackoverflow.com/users/5429050/hossein-noroozpour"}, "edited": false, "score": 0, "creation_date": 1505728171, "post_id": 37377418, "comment_id": 79515256, "body": "I can&#39;t. First Shepmaster&#39;s answer references to it. Second, Lot of people think in a wrong as I did, it is good for them to see that this answer is wrong."}], "tags": [], "owner": {"reputation": 647, "user_id": 5429050, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/da7e1d765858cc119fc86fa3e48e410b?s=128&d=identicon&r=PG", "display_name": "Hossein Noroozpour", "link": "https://stackoverflow.com/users/5429050/hossein-noroozpour"}, "is_accepted": false, "score": -2, "last_activity_date": 1494267475, "last_edit_date": 1592644375, "creation_date": 1463938208, "answer_id": 37377418, "question_id": 37377250, "link": "https://stackoverflow.com/questions/37377250/how-can-i-overload-the-assignment-operation-in-rust/37377418#37377418", "title": "How can I overload the assignment operation in Rust?", "body": "<h1>WRONG ANSWER</h1>\n<p>As I said, I was confused :D.\nThe answer to my question is to derive the <code>Copy</code> and <code>Clone</code> traits. I just have to add</p>\n<pre><code>#[derive(Clone, Copy)]\n</code></pre>\n<p>above my type definition; that way I can get my desired functionality.</p>\n<p>For a customized logic of assigning and copying, you can easily implement <code>Copy</code> and <code>Clone</code> yourself, instead of using derivation.</p>\n"}, {"comments": [{"owner": {"reputation": 647, "user_id": 5429050, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/da7e1d765858cc119fc86fa3e48e410b?s=128&d=identicon&r=PG", "display_name": "Hossein Noroozpour", "link": "https://stackoverflow.com/users/5429050/hossein-noroozpour"}, "edited": false, "score": 0, "creation_date": 1493703234, "post_id": 42764095, "comment_id": 74504637, "body": "I realized, my understanding of Rust assignment was wrong, as I said in my question, I came in Rust with C++ back. (that most of the time makes confusion.)"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 9, "last_activity_date": 1489409460, "creation_date": 1489409460, "answer_id": 42764095, "question_id": 37377250, "link": "https://stackoverflow.com/questions/37377250/how-can-i-overload-the-assignment-operation-in-rust/42764095#42764095", "title": "How can I overload the assignment operation in Rust?", "body": "<p>You <strong>cannot</strong> overload assignment. Moving a variable from one location to another is a core component of Rust's ownership semantics and is not overridable.</p>\n\n<p>Another answer suggests that you custom-implement the <code>Copy</code> trait. This makes no sense, as <a href=\"https://doc.rust-lang.org/std/marker/trait.Copy.html\" rel=\"noreferrer\"><em>there's nothing to implement</em></a>:</p>\n\n<pre><code>pub trait Copy: Clone { }\n</code></pre>\n\n<p>You could implement <a href=\"https://doc.rust-lang.org/std/clone/trait.Clone.html\" rel=\"noreferrer\"><code>Clone</code></a> for a type, but to use <code>clone</code> you have to call it explicitly:</p>\n\n<pre><code>let foo = bar.clone();\n</code></pre>\n\n<p>The <em>actual assignment</em> is still just copying bits from the right-hand side to the left-hand side, the only difference is that you don't give up ownership of <code>bar</code>.</p>\n\n<hr>\n\n<p><strong>If</strong> your type can be duplicated by simply copying bits, then it's appropriate to implement <code>Copy</code>. <strong>If</strong> it can be duplicated by executing some kind of function, then it's appropriate to implement <code>Clone</code>. There is no way I know of to implicitly execute code at any given assignment of a type (and I count that as a <strong>good thing</strong>).</p>\n"}], "owner": {"reputation": 647, "user_id": 5429050, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/da7e1d765858cc119fc86fa3e48e410b?s=128&d=identicon&r=PG", "display_name": "Hossein Noroozpour", "link": "https://stackoverflow.com/users/5429050/hossein-noroozpour"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2094, "favorite_count": 0, "accepted_answer_id": 42764095, "answer_count": 2, "score": 8, "last_activity_date": 1494267475, "creation_date": 1463937316, "last_edit_date": 1489409898, "question_id": 37377250, "link": "https://stackoverflow.com/questions/37377250/how-can-i-overload-the-assignment-operation-in-rust", "title": "How can I overload the assignment operation in Rust?", "body": "<p>There are lots of operations in <a href=\"https://doc.rust-lang.org/std/ops/index.html\" rel=\"noreferrer\"><code>std::ops</code></a>, but there is nothing for a simple assignment.</p>\n\n<p>I'm coming from a C++ background, where there are copy constructor and assignment operator overloading that do the work for you. I need something like that in Rust.</p>\n"}, {"tags": ["openssl", "raspberry-pi", "rust", "cross-compiling"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1463928395, "post_id": 37375712, "comment_id": 62262778, "body": "Having that <code>&#47;usr&#47;include&#47;openssl&#47;hmac.h</code> in the output is really suspicious. That&#39;s going to be your normally installed version of OpenSSL, not the custom version. I wonder if the <a href=\"https://github.com/sfackler/rust-openssl/blob/875f4ccb39e3863c6592b6275e067bd7692031d7/openssl-sys-extras/src/openssl_shim.c#L1-L4\" rel=\"nofollow noreferrer\"><code>#include &lt;foo&gt;</code> instead of <code>#include &quot;foo&quot;</code></a> is going to cause a problem..."}, {"owner": {"reputation": 1343, "user_id": 4365239, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/88acc4986ddaf51e21c254fb8c0f11b8?s=128&d=identicon&r=PG&f=1", "display_name": "tafia", "link": "https://stackoverflow.com/users/4365239/tafia"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1463929830, "post_id": 37375712, "comment_id": 62263266, "body": "Thanks for the comment! I tried cloning rust-openssl and manually compile openssl-sys-extra ... and it worked!! So I did a <code>cargo update</code>, rust-openssl upgraded from 0.7.11 to 0.7.13 and now I have a <code>linking with </code>arm-linux-gnueabihf-gcc` failed` error"}], "answers": [{"tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 12, "last_activity_date": 1463965089, "last_edit_date": 1463965089, "creation_date": 1463946886, "answer_id": 37378989, "question_id": 37375712, "link": "https://stackoverflow.com/questions/37375712/cross-compile-rust-openssl-for-raspberry-pi-2/37378989#37378989", "title": "Cross compile rust-openssl for Raspberry Pi 2", "body": "<p>You must pass <code>shared</code> option when configuring openssl compilation (this will make <code>-fPIC</code> parameter be passed to the compiler).</p>\n\n<p>Here is a sequence of commands that I used to test cross compiling a Rust program that prints the openssl version:</p>\n\n<pre class=\"lang-sh prettyprint-override\"><code>cd /tmp\n\nwget https://www.openssl.org/source/openssl-1.0.1t.tar.gz\ntar xzf openssl-1.0.1t.tar.gz\nexport MACHINE=armv7\nexport ARCH=arm\nexport CC=arm-linux-gnueabihf-gcc\ncd openssl-1.0.1t &amp;&amp; ./config shared &amp;&amp; make &amp;&amp; cd -\n\nexport OPENSSL_LIB_DIR=/tmp/openssl-1.0.1t/\nexport OPENSSL_INCLUDE_DIR=/tmp/openssl-1.0.1t/include\ncargo new xx --bin\ncd xx\nmkdir .cargo\ncat &gt; .cargo/config &lt;&lt; EOF\n[target.armv7-unknown-linux-gnueabihf]\nlinker = \"arm-linux-gnueabihf-gcc\"\nEOF\n\ncat &gt; src/main.rs &lt;&lt; EOF\nextern crate openssl;\n\nfn main() {\n    println!(\"{}\", openssl::version::version())\n}\nEOF\n\ncargo add openssl # requires cargo install cargo-add\ncargo build --target armv7-unknown-linux-gnueabihf\n</code></pre>\n\n<p><strong>Testing the compiled program on  the host computer</strong></p>\n\n<p><a href=\"https://github.com/sfackler/rust-openssl#manual-configuration\" rel=\"noreferrer\">Setting</a> <code>OPENSSL_STATIC</code> makes <code>rust-openssl</code> be statically linked. If you use the static linked version of <code>rust-openssl</code>, install a libc for armhf (<code>crossbuild-essential-armhf</code> <a href=\"https://wiki.debian.org/CrossToolchains\" rel=\"noreferrer\">on Debian</a>) and <code>qemu-static</code>, you can the run the compiled program with the command:</p>\n\n<pre class=\"lang-sh prettyprint-override\"><code>qemu-arm-static target/armv7-unknown-linux-gnueabihf/debug/xx\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 42073, "user_id": 113632, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/f0aa6977c75f54ca9033d4f4d0244023?s=128&d=identicon&r=PG", "display_name": "dimo414", "link": "https://stackoverflow.com/users/113632/dimo414"}, "is_accepted": false, "score": 3, "last_activity_date": 1612173155, "creation_date": 1612173155, "answer_id": 65990512, "question_id": 37375712, "link": "https://stackoverflow.com/questions/37375712/cross-compile-rust-openssl-for-raspberry-pi-2/65990512#65990512", "title": "Cross compile rust-openssl for Raspberry Pi 2", "body": "<p>This is an older question but it shows up highly on Google, so I wanted to call out that nowadays you don't need to manually compile OpenSSL (if you don't want to). The <code>openssl</code> crate provides a <a href=\"https://docs.rs/openssl/#vendored\" rel=\"nofollow noreferrer\"><code>vendored</code> feature</a> that causes OpenSSL to be compiled from source when you build your project.</p>\n<p>You can propagate the feature into your own project to optionally depend on <code>vendored</code> by adding something like this to your <code>Cargo.toml</code>:</p>\n<pre><code>[features]\n...\n\n# If compiling on a system without OpenSSL installed, or cross-compiling for a different\n# architecture, enable this feature to compile OpenSSL as part of the build.\n# See https://docs.rs/openssl/#vendored for more.\nstatic_ssl = ['openssl/vendored']\n\n[dependencies]\n...\n\n[dependencies.openssl]\noptional = true\nversion = ...\n</code></pre>\n<p>Enabling the <code>static_ssl</code> feature when building your project will then compile OpenSSL against the same target architecture as the rest of your build.</p>\n<p><a href=\"https://github.com/rust-embedded/cross/issues/229#issuecomment-597898074\" rel=\"nofollow noreferrer\">This post</a> goes into some more details about different ways of compiling with OpenSSL.</p>\n"}], "owner": {"reputation": 1343, "user_id": 4365239, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/88acc4986ddaf51e21c254fb8c0f11b8?s=128&d=identicon&r=PG&f=1", "display_name": "tafia", "link": "https://stackoverflow.com/users/4365239/tafia"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3101, "favorite_count": 5, "accepted_answer_id": 37378989, "answer_count": 2, "score": 9, "last_activity_date": 1612173155, "creation_date": 1463927938, "last_edit_date": 1463930891, "question_id": 37375712, "link": "https://stackoverflow.com/questions/37375712/cross-compile-rust-openssl-for-raspberry-pi-2", "title": "Cross compile rust-openssl for Raspberry Pi 2", "body": "<p>I am on a Debian machine and I want to cross compile a project for my Raspberry Pi 2. I've managed to do it for a simple hello world using rustup, but couldn't figure out how to cross compile the rust-openssl crate.</p>\n\n<p>I have compiled openssl with arm-linux-gnueabihf-gcc and installed it in my <code>home/opensslArm</code> directory.</p>\n\n<p>When I run</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>OPENSSL_LIB_DIR=/home/johann/opensslArm/lib OPENSSL_INCLUDE_DIR=/home/johann/opensslArm/include cargo build --target=armv7-unknown-linux-gnueabihf\n</code></pre>\n\n<p>I get this error: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>failed to run custom build command for `openssl-sys-extras v0.7.11`\nProcess didn't exit successfully: `/home/johann/projects/test/target/debug/build/openssl-sys-extras-e1c84960cd35bc93/build-script-build` (exit code: 101)\n--- stdout\nTARGET = Some(\"armv7-unknown-linux-gnueabihf\")\nOPT_LEVEL = Some(\"0\")\nPROFILE = Some(\"debug\")\nTARGET = Some(\"armv7-unknown-linux-gnueabihf\")\ndebug=true opt-level=0\nHOST = Some(\"x86_64-unknown-linux-gnu\")\nTARGET = Some(\"armv7-unknown-linux-gnueabihf\")\nTARGET = Some(\"armv7-unknown-linux-gnueabihf\")\nHOST = Some(\"x86_64-unknown-linux-gnu\")\nCC_armv7-unknown-linux-gnueabihf = None\nCC_armv7_unknown_linux_gnueabihf = None\nTARGET_CC = None\nCC = None\nHOST = Some(\"x86_64-unknown-linux-gnu\")\nTARGET = Some(\"armv7-unknown-linux-gnueabihf\")\nHOST = Some(\"x86_64-unknown-linux-gnu\")\nCFLAGS_armv7-unknown-linux-gnueabihf = None\nCFLAGS_armv7_unknown_linux_gnueabihf = None\nTARGET_CFLAGS = None\nCFLAGS = None\nrunning: \"arm-linux-gnueabihf-gcc\" \"-O0\" \"-ffunction-sections\" \"-fdata-sections\" \"-g\" \"-fPIC\" \"-march=armv7-a\" \"-o\" \"/home/johann/projects/test/target/armv7-unknown-linux-gnueabihf/debug/build/openssl-sys-extras-e1c84960cd35bc93/out/src/openssl_shim.o\" \"-c\" \"src/openssl_shim.c\"\nExitStatus(ExitStatus(256))\n\n\ncommand did not execute successfully, got: exit code: 1\n\n\n\n--- stderr\nIn file included from src/openssl_shim.c:1:0:\n/usr/include/openssl/hmac.h:61:34: fatal error: openssl/opensslconf.h: No such file or directory\ncompilation terminated.\nthread '&lt;main&gt;' panicked at 'explicit panic', /home/johann/.cargo/registry/src/github.com-88ac128001ac3a9a/gcc-0.3.28/src/lib.rs:840\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\n</code></pre>\n\n<p>I get the same error if I export the variables in question.</p>\n\n<p>I don't know exactly what I am supposed to do, I am not an expert in cross compiling. Has anyone managed to do this?</p>\n\n<p>EDIT: I was using rust-openssl 0.7.11. Upgrading to 0.7.13 fixed this issue (I can now see cargo compiling rust-openssl dependencies without an error) but I have now another one:</p>\n\n<pre><code>error: linking with `arm-linux-gnueabihf-gcc` failed: exit code: 1\n...\n\nnote: /usr/lib/gcc-cross/arm-linux-gnueabihf/5/../../../../arm-linux-gnueabihf/bin/ld: /home/johann/opensslArm/lib/libssl.a(s23_meth.o): relocation R_ARM_THM_MOVW_ABS_NC against `a local symbol' can not be used when making a shared object; recompile with -fPIC\n/home/johann/opensslArm/lib/libssl.a: error adding symbols: Bad value\n</code></pre>\n\n<p>How can I add <code>-fPIC</code> flag? Should I recompile opensslArm with specific flags?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1463920881, "post_id": 37374330, "comment_id": 62260215, "body": "Everything looks awesome but should I care for <code>fmt.write_str()</code> return value? The compiler complains that result must be used and gives a warning."}, {"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "reply_to_user": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1463921083, "post_id": 37374330, "comment_id": 62260287, "body": "You are right. The call must be wrapped by <a href=\"https://doc.rust-lang.org/stable/std/macro.try!.html\" rel=\"nofollow noreferrer\"><code>try!</code></a> macro. I updated the answer. Thanks."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1463925440, "post_id": 37374330, "comment_id": 62261757, "body": "What do you think of closing as a duplicate of <a href=\"http://stackoverflow.com/q/22243527/155423\">stackoverflow.com/q/22243527/155423</a> ?"}, {"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1463933605, "post_id": 37374330, "comment_id": 62264581, "body": "@Shepmaster I think that this question is not duplicate. This question is about implementing <code>ToString</code> and although in the end it maybe means implementing <code>Display</code>, the concern is different  from implementing <code>Debug</code>."}, {"owner": {"reputation": 185, "user_id": 6165740, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/f365e2ce66ac98048b63e6d1a35b3d32?s=128&d=identicon&r=PG&f=1", "display_name": "Cryptor", "link": "https://stackoverflow.com/users/6165740/cryptor"}, "edited": false, "score": 0, "creation_date": 1520157760, "post_id": 37374330, "comment_id": 85193446, "body": "May someone point to a resource which clarifies the underhood magic which automatically enables <code>ToString</code> for <code>Display</code> please? <a href=\"https://doc.rust-lang.org/std/fmt/trait.Display.html\" rel=\"nofollow noreferrer\">Display</a> trait documentation itself doesn&#39;t mention about such &quot;free&quot; implementation, while <a href=\"https://doc.rust-lang.org/stable/std/string/trait.ToString.html\" rel=\"nofollow noreferrer\">ToString</a> does. It seems counterintuitive"}], "tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 24, "last_activity_date": 1524866426, "last_edit_date": 1524866426, "creation_date": 1463919795, "answer_id": 37374330, "question_id": 37374077, "link": "https://stackoverflow.com/questions/37374077/how-to-implement-the-tostring-trait-to-create-a-comma-delimited-string-without-a/37374330#37374330", "title": "How to implement the ToString trait to create a comma-delimited string without a trailing comma?", "body": "<p>According to <a href=\"https://doc.rust-lang.org/stable/std/string/trait.ToString.html\" rel=\"noreferrer\">the <code>ToString</code> documentation</a>:</p>\n\n<blockquote>\n  <p>This trait is automatically implemented for any type which implements the <a href=\"https://doc.rust-lang.org/stable/std/fmt/trait.Display.html\" rel=\"noreferrer\"><code>Display</code></a> trait. As such, <code>ToString</code> shouldn't be implemented directly: <code>Display</code> should be implemented instead, and you get the <code>ToString</code> implementation for free.</p>\n</blockquote>\n\n<p>You can implement <code>Display</code> like this:</p>\n\n<pre><code>use std::fmt;\n\nimpl fmt::Display for A {\n    fn fmt(&amp;self, fmt: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        let mut str = \"\";\n        for name in &amp;self.names {\n            fmt.write_str(str)?;\n            fmt.write_str(name)?;\n            str = \", \";\n        }\n        Ok(())\n    }\n}\n</code></pre>\n\n<p>And you don't need to call <code>to_string</code> (but you can):</p>\n\n<pre><code>fn main() {\n    let a = A {\n        names: vec![\"Victor\".to_string(), \"Paul\".to_string()],\n    };\n    println!(\"A struct contains: [{}].\", a);\n}\n</code></pre>\n\n<p>Note the purpose of the <code>Display</code>:</p>\n\n<blockquote>\n  <p><code>Display</code> is similar to <a href=\"https://doc.rust-lang.org/stable/std/fmt/trait.Debug.html\" rel=\"noreferrer\"><code>Debug</code></a>, but <code>Display</code> is for user-facing output, and so cannot be derived.</p>\n</blockquote>\n\n<p>If your intent is debug, you can derive <code>Debug</code>:</p>\n\n<pre><code>#[derive(Debug)]\nstruct A {\n    names: Vec&lt;String&gt;,\n}\n\nfn main() {\n    let a = A { names: vec![\n        \"Victor\".to_string(),\n        \"Paul\".to_string(),\n    ]};\n    // {:?} is used for debug\n    println!(\"{:?}\", a);\n}\n</code></pre>\n\n<p>Outputs:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>A { names: [\"Victor\", \"Paul\"] }\n</code></pre>\n\n<p>The <a href=\"https://doc.rust-lang.org/stable/std/fmt/struct.Formatter.html\" rel=\"noreferrer\"><code>Formatter</code></a> struct offers a rich collections of methods, so you can write your own <code>Debug</code> implementation:</p>\n\n<pre><code>impl fmt::Debug for A {\n    fn fmt(&amp;self, fmt: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        fmt.debug_struct(\"A\")\n           .field(\"names\", &amp;self.names)\n           .finish()\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7222, "favorite_count": 1, "accepted_answer_id": 37374330, "answer_count": 1, "score": 15, "last_activity_date": 1524866426, "creation_date": 1463918378, "last_edit_date": 1524866209, "question_id": 37374077, "link": "https://stackoverflow.com/questions/37374077/how-to-implement-the-tostring-trait-to-create-a-comma-delimited-string-without-a", "title": "How to implement the ToString trait to create a comma-delimited string without a trailing comma?", "body": "<p>I have this code:</p>\n\n<pre><code>struct A {\n    names: Vec&lt;String&gt;,\n}\n\nimpl ToString for A {\n    fn to_string(&amp;self) -&gt; String {\n        // code here\n    }\n}\n\nfn main() {\n    let a = A {\n        names: vec![\"Victor\".to_string(), \"Paul\".to_string()],\n    };\n    println!(\"A struct contains: [{}].\", a.to_string());\n}\n</code></pre>\n\n<p>Expected output:</p>\n\n<blockquote>\n  <p>A struct contains: [Victor, Paul].</p>\n</blockquote>\n\n<p>What is the best way to implement this trait to achieve the goal? I have tried some weird 'for each' and other variants, but each one gives me a trailing comma like this:</p>\n\n<blockquote>\n  <p>Victor, Paul,</p>\n</blockquote>\n\n<p>Of course I can pop it off later, but I am interested in the language so I want to know the best practice of this. This is just an example of what I've tried, but it does not matter, I am asking how to do this most efficiently.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 1230, "user_id": 2406927, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/38c6546e4cb923597b976e8cb9b9ebb2?s=128&d=identicon&r=PG", "display_name": "franklynd", "link": "https://stackoverflow.com/users/2406927/franklynd"}, "edited": false, "score": 0, "creation_date": 1463889710, "post_id": 37370293, "comment_id": 62252973, "body": "That first error is embarassing. The second one, doesn&#39;t make sense to me. I&#39;m going to make an issue about it."}, {"owner": {"reputation": 485, "user_id": 3162842, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/YoHEn.png?s=128&g=1", "display_name": "Limeth", "link": "https://stackoverflow.com/users/3162842/limeth"}, "edited": false, "score": 5, "creation_date": 1469002100, "post_id": 37370293, "comment_id": 64354178, "body": "It&#39;s simple -- the compiler thinks that you are trying to execute a method that is implemented on <code>Self</code>, but what you want is to access the field <code>get_func</code> and call it as a method instead."}, {"owner": {"reputation": 485, "user_id": 3162842, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/YoHEn.png?s=128&g=1", "display_name": "Limeth", "link": "https://stackoverflow.com/users/3162842/limeth"}, "edited": false, "score": 0, "creation_date": 1469002183, "post_id": 37370293, "comment_id": 64354236, "body": "I used to bind the value to a new field and then call it, but this solution is more elegant."}], "tags": [], "owner": {"reputation": 13948, "user_id": 283342, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e3ef6dbec3a443e7cda5b5624311ca08?s=128&d=identicon&r=PG&f=1", "display_name": "Adrian", "link": "https://stackoverflow.com/users/283342/adrian"}, "is_accepted": true, "score": 10, "last_activity_date": 1463888548, "creation_date": 1463888548, "answer_id": 37370293, "question_id": 37370120, "link": "https://stackoverflow.com/questions/37370120/right-way-to-have-function-pointers-in-struct/37370293#37370293", "title": "Right way to have Function pointers in struct", "body": "<p>It looks like you just have two simple errors in your code. If you change this</p>\n\n<pre><code>fn get(&amp;self, key: &amp;str) -&gt; Container\n{\n    self.get_func(self, key)\n}\n</code></pre>\n\n<p>to this</p>\n\n<pre><code>fn get(&amp;self, key: &amp;str) -&gt; i32\n{\n    (self.get_func)(self, key)\n}\n</code></pre>\n\n<p>then it works. I don't know why the syntax <code>self.get_func(self, key)</code> doesn't work; it's probably just an oversight in the rust compiler.</p>\n"}], "owner": {"reputation": 1230, "user_id": 2406927, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/38c6546e4cb923597b976e8cb9b9ebb2?s=128&d=identicon&r=PG", "display_name": "franklynd", "link": "https://stackoverflow.com/users/2406927/franklynd"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 11276, "favorite_count": 0, "closed_date": 1463922223, "accepted_answer_id": 37370293, "answer_count": 1, "score": 11, "last_activity_date": 1463893944, "creation_date": 1463886269, "last_edit_date": 1463893944, "question_id": 37370120, "link": "https://stackoverflow.com/questions/37370120/right-way-to-have-function-pointers-in-struct", "closed_reason": "Duplicate", "title": "Right way to have Function pointers in struct", "body": "<p>I'm trying to make a struct that has a mutable function pointer. I have it setup so that the function pointer is initialized to a particular function, but rust doesn't recognize the pointer when i try to use it. </p>\n\n<p>i get </p>\n\n<pre><code>hello.rs:24:14: 24:22 error: no method named `get_func` found for type `&amp;Container` in the current scope\nhello.rs:24         self.get_func(self, key)\n                         ^~~~~~~~\n</code></pre>\n\n<p>here's my code</p>\n\n<pre><code>use std::collections::HashMap;\n\nstruct Container {\n    field: HashMap&lt;String, i32&gt;,\n    get_func: fn(&amp;Container, &amp;str) -&gt; i32\n}\n\nfn regular_get(obj: &amp;Container, key: &amp;str) -&gt; i32 {\n    obj.field[key]\n}\n\nimpl Container {\n    fn new(val: HashMap&lt;String, i32&gt;) -&gt; Container {\n        Container {\n            field: val,\n            get_func: regular_get\n        }\n    }\n\n    fn get(&amp;self, key: &amp;str) -&gt; i32 {\n        self.get_func(self, key)\n    }\n}\n\nfn main() {\n    let mut c:HashMap&lt;String, i32&gt; = HashMap::new();\n    c.insert(\"dog\".to_string(), 123);\n    let s = Container::new(c);\n    println!(\"{} {}\", 123, s.get(\"dog\"));\n}\n</code></pre>\n"}, {"tags": ["rust", "type-inference"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1463885595, "post_id": 37369811, "comment_id": 62252388, "body": "Please produce an <a href=\"/help/mcve\">MCVE</a> and post that code here. Links to off-site resources as the primary means of understanding the problem are not appropriate for Stack Overflow, but you can include the link as further information."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2806, "user_id": 377956, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/9da9bc8f4173bfa2fbf2773f0a59942e?s=128&d=identicon&r=PG", "display_name": "Heptic", "link": "https://stackoverflow.com/users/377956/heptic"}, "edited": false, "score": 0, "creation_date": 1464089258, "post_id": 37369811, "comment_id": 62330796, "body": "@heptic can you provide a MCVE?"}], "answers": [{"tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 1, "last_activity_date": 1464095867, "last_edit_date": 1464095867, "creation_date": 1464090261, "answer_id": 37412603, "question_id": 37369811, "link": "https://stackoverflow.com/questions/37369811/moving-local-type-inference-out-to-a-struct/37412603#37412603", "title": "Moving local type inference out to a struct", "body": "<p>You got close.</p>\n\n<p>I never used piston, but you left a tip in the comment:</p>\n\n<pre><code>// let glyphs =\n//        &amp;mut Glyphs::new(font, factory).unwrap() as\n//        &amp;mut character::CharacterCache&lt; Texture = Texture&lt;gfx_device_gl::Resources&gt; &gt;\n//    ;\n</code></pre>\n\n<p>You are saying that <code>glyphs</code> implements <code>character::CharacterCache</code> and the associated type <code>Texture</code> must be <code>Texture&lt;gfx_device_gl::Resources&gt;</code>.</p>\n\n<p>Adding this constraint to <code>on_draw</code> solves the problem:</p>\n\n<pre><code>fn on_draw&lt;W, E&gt;(&amp;mut self, ren: RenderArgs, w: &amp;mut PistonWindow&lt;W&gt;, e: &amp;E)\n    where W: Window, W::Event: GenericEvent, E: GenericEvent,\n          T: character::CharacterCache&lt; Texture = Texture&lt;gfx_device_gl::Resources&gt;&gt;\n{\n    \\\\...\n}\n</code></pre>\n\n<p>Looking at the solution, the error makes more sense:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>&lt;...&gt;::Texture == &lt;T as graphics::character::CharacterCache&gt;::Texture\nexpected struct `gfx_texture::Texture`,\n  found associated type [E0271]\n</code></pre>\n\n<p>the expected associated type <code>Texture</code> was a specific one (<code>gfx_texture::Texture</code> - it seems that <code>Texture&lt;gfx_device_gl::Resources&gt;</code> and <code>gfx_texture::Texture</code> are the same type, I tried to use <code>gfx_texture::Texture</code> direct but was unable to do so...), but <code>T</code> can have any associated type for <code>Texture</code>, not necessarily <code>gfx_texture::Texture</code>. So adding the restriction that <code>T::Texture = Texture&lt;gfx_device_gl::Resources&gt;</code>\nsolves the problem.</p>\n"}], "owner": {"reputation": 289, "user_id": 5901356, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/4c666fecb5274110986882d680082cf9?s=128&d=identicon&r=PG&f=1", "display_name": "Ronald Smith", "link": "https://stackoverflow.com/users/5901356/ronald-smith"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 138, "favorite_count": 0, "accepted_answer_id": 37412603, "answer_count": 1, "score": -2, "last_activity_date": 1464568838, "creation_date": 1463882329, "last_edit_date": 1464568838, "question_id": 37369811, "link": "https://stackoverflow.com/questions/37369811/moving-local-type-inference-out-to-a-struct", "title": "Moving local type inference out to a struct", "body": "<p>I have some code which works absolutely correctly when the type is defined locally and uses type inference:</p>\n\n<p>but the problem is that it's loading the font in the update loop of the game. So what I'd like to do is store the <code>glyph</code> as part of the <code>Game</code> struct and let it infer the type</p>\n\n<p><a href=\"https://github.com/RustyRails/rustoid\" rel=\"nofollow\">https://github.com/RustyRails/rustoid</a></p>\n\n<p>and even though the Game  struct has correct type inference, the code won't compile with the error:</p>\n\n<pre><code>src/main.rs:89:13: 89:17 error: type mismatch resolving `&lt;object::gfx_graphics::back_end::GfxGraphics&lt;'_, gfx_device_gl::Resources, gfx_device_gl::command::CommandBuffer&gt; as graphics::graphics::Graphics&gt;::Texture == &lt;T as graphics::character::CharacterCache&gt;::Texture`:\n expected struct `gfx_texture::Texture`,\n    found associated type [E0271]\nsrc/main.rs:89             text(red, 32, \"Hello World\", &amp;mut self.glyphs, transform, graphics)\n                           ^~~~\n</code></pre>\n\n<p>What am I missing here?</p>\n"}, {"tags": ["rust", "filenames"], "comments": [{"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "edited": false, "score": 0, "creation_date": 1463865543, "post_id": 37368100, "comment_id": 62248981, "body": "What you want to do with the contents (like <code>file_name</code>)?"}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "reply_to_user": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "edited": false, "score": 0, "creation_date": 1463865846, "post_id": 37368100, "comment_id": 62249045, "body": "I&#39;m doing things with messages in <a href=\"https://cr.yp.to/proto/maildir.html\" rel=\"nofollow noreferrer\">Maildirs</a>; the filename is an unspecified unique part followed by <code>&#39;:&#39;</code> and some flag characters.  I want to examine or modify the flags, without touching the unique portion."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1463866084, "post_id": 37368100, "comment_id": 62249109, "body": "<i>is it really still experimental</i> \u2014 if it&#39;s not <code>unstable</code>, you should be able to count on it existing for all of Rust 1.x."}], "answers": [{"comments": [{"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1463868236, "post_id": 37368435, "comment_id": 62249590, "body": "Thanks, that answers my doubts perfectly!"}, {"owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "edited": false, "score": 0, "creation_date": 1463929154, "post_id": 37368435, "comment_id": 62263019, "body": "On windows there are both ASCII and Unicode versions of a lot of functions. Possibly going via the ASCII encoded versions, the conversion to the internal WTF-8 could be left to the system libraries instead of finding an approach within Rust. Not sure, which choice is better, though. In one embedded project we created a portable facility which works both for *nix and windows (desktop, CE, ...) by writing a set of classes working similar to the respective objects in the .NET library. We were happy with that."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1464029177, "post_id": 37368435, "comment_id": 62305151, "body": "Rust uses the Unicode versions, because the &quot;ANSI&quot; versions don&#39;t let you use characters outside the &quot;ANSI&quot; code page, thus there may be files your application couldn&#39;t access. I suspect that Rust converts potentially ill-formed UTF-16 (WTF-16?) to WTF-8 because the vast majority of paths are legal UTF-16, and thus can be converted to legal UTF-8, which means those paths can be accessed as UTF-8 like the rest of the strings in Rust."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 2, "last_activity_date": 1463867983, "creation_date": 1463867983, "answer_id": 37368435, "question_id": 37368100, "link": "https://stackoverflow.com/questions/37368100/how-do-i-split-the-final-component-of-a-path-at-a-specific-character/37368435#37368435", "title": "How do I split the final component of a &amp;Path at a specific character?", "body": "<p>There's no standard way to deal with file system paths because not all platforms have the same rules regarding the representation and validity of paths.</p>\n\n<p>On Unix-based systems (Linux, Mac OS X, etc.), paths are a sequence of bytes (<code>u8</code>) that cannot contain null bytes. The <code>std::os::unix</code> module is available on those platforms. Although the module's description says \"experimental\", most of it is stable, so the stable features are guaranteed to remain available in future Rust 1.x releases.</p>\n\n<p>On Windows NT, paths are a sequence of 16-bit words (usually interpreted as UTF-16 code units), which may contain unpaired surrogates. Internally, Rust converts these paths to <a href=\"https://simonsapin.github.io/wtf-8/\" rel=\"nofollow\">WTF-8</a> (which is just UTF-8 with the addition of allowing the encoding of unpaired surrogates, U+D800&ndash;U+DFFF). The <code>std::os::windows</code> module is available on this platform; it's not shown on Rust's documentation website, but if you build the documentation for <code>std</code> locally, it should be there. <a href=\"https://github.com/rust-lang/rust/tree/master/src/libstd/sys/windows/ext\" rel=\"nofollow\">The source for this module is here.</a> It provides <a href=\"https://github.com/rust-lang/rust/blob/master/src/libstd/sys/windows/ext/ffi.rs\" rel=\"nofollow\"><em>different</em> <code>OsStrExt</code> and <code>OsStringExt</code> traits</a> that let you encode an <code>OsStr</code> to potentially ill-formed UTF-16 or decode a potentially ill-formed UTF-16 path to an <code>OsString</code>, but don't provide access to the WTF-8 representation.</p>\n"}], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 388, "favorite_count": 0, "accepted_answer_id": 37368435, "answer_count": 1, "score": 0, "last_activity_date": 1463867983, "creation_date": 1463865404, "last_edit_date": 1463865870, "question_id": 37368100, "link": "https://stackoverflow.com/questions/37368100/how-do-i-split-the-final-component-of-a-path-at-a-specific-character", "title": "How do I split the final component of a &amp;Path at a specific character?", "body": "<p>I have a <code>&amp;Path</code> and I need to split the final component filename into two parts at the first colon.</p>\n\n<p>I can get the final component as an <code>&amp;OsStr</code> (<code>path.file_name()</code>) - but then I'm a bit stuck on actually doing anything with the contents.  The <a href=\"https://doc.rust-lang.org/std/ffi/struct.OsStr.html\" rel=\"nofollow\">documentation</a> gives me a few options:</p>\n\n<ul>\n<li><code>to_str()</code> or <code>to_string_lossy()</code>, which either fail or return a corrupted string if it's not UTF-8 (which isn't guaranteed!)</li>\n<li><code>to_bytes()</code> or <code>to_cstring()</code>, but they're marked as deprecated since Rust 1.6.</li>\n<li>Right at the bottom I see <code>impl OsStrExt</code> with an <code>as_bytes()</code> method.  <code>OsStrExt</code> is <code>std::os::unix::ffi::OsStrExt</code> which is described as \"Unix-specific extensions to <code>OsStr</code>\".  However <a href=\"https://doc.rust-lang.org/std/os/unix/\" rel=\"nofollow\">std::os::unix</a> is apparently \"Experimental extensions to std for Unix platforms.\"</li>\n</ul>\n\n<p>Have I missed anything more standard?</p>\n\n<p>As it happens I'm happy to limit to Unix for this application, so the <code>OsStrExt::as_bytes</code> looks like the best option for now; but is it really still experimental, or is the documentation out of date?</p>\n"}, {"tags": ["iterator", "rust", "mutable"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 3, "last_activity_date": 1463866102, "creation_date": 1463866102, "answer_id": 37368189, "question_id": 37367892, "link": "https://stackoverflow.com/questions/37367892/modifying-an-object-during-iteration/37368189#37368189", "title": "Modifying an object during iteration", "body": "<p>You cannot mutate a <code>BTreeSet</code> while you're iterating on it &ndash; that would invalidate the iterator. Unfortunately, unlike C++, Rust doesn't have <code>insert</code> or <code>remove</code> methods that return updated iterators (and if it did, they would have to be methods on the iterator itself).</p>\n\n<p><code>BTreeSet</code> doesn't offer a mutable iterator, because the only additional operation you could do is obtain a mutable reference to the elements in the set. However, doing this could potentially screw up the set's ordering, so it's not available.</p>\n\n<p>The most straightforward solution is to build a list of operations to perform during the iteration, then perform them once the iteration is complete. However, for this algorithm, this won't quite work, since you might need to merge an interval that is the result of a previous merge. So, once you've found a pair of intervals to merge, you need to keep track of the relevant values, break out of the iteration, perform the merge, then restart the iteration. <code>BTreeSet</code> provides a <a href=\"https://doc.rust-lang.org/stable/std/collections/struct.BTreeSet.html#method.range\" rel=\"nofollow\"><code>range</code></a> method that lets you iterate over a subset of the set's values, so you might want to use that instead of <code>iter</code>, which always iterates over all the values. However, <code>range</code> is unstable as of Rust 1.8, so you'll need a nightly compiler to be able to use it.</p>\n"}], "owner": {"reputation": 285, "user_id": 2780313, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/47d3121e4f92349cdcd4dda8379e5502?s=128&d=identicon&r=PG&f=1", "display_name": "BioInfoBrett", "link": "https://stackoverflow.com/users/2780313/bioinfobrett"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 255, "favorite_count": 1, "closed_date": 1463868459, "answer_count": 1, "score": 1, "last_activity_date": 1463869620, "creation_date": 1463864045, "last_edit_date": 1463869620, "question_id": 37367892, "link": "https://stackoverflow.com/questions/37367892/modifying-an-object-during-iteration", "closed_reason": "Duplicate", "title": "Modifying an object during iteration", "body": "<p>I'm trying to translate some simple data structures I use in C++ over to Rust, starting with an interval tree, but I don't understand how to modify my underlying data structure (here an <code>std::collections::BTreeSet</code>) during iteration - essentially so I can merge overlapping entries as they appear.</p>\n\n<p>If I use the standard idiom for iterating over a collection, I get the following message about it being immutable \"cannot borrow <code>self.storage</code> as mutable because it is also borrowed as immutable\", and there doesn't appear to be an option to get a mutable iterator that I can see ... what am I missing?</p>\n\n<p>C++ code:</p>\n\n<pre><code>inline void Insert(const Interval&amp; interval)\n{\n    auto it = storage.insert(interval);\n\n    // check to see if we overlap the previous element,\n    // if we do, start our merge loop from there\n    if (it != begin()) {\n        const_iterator prev = std::prev(it);\n\n        if (prev-&gt;Overlaps(*it)) it = prev;\n    }\n\n    while (it != end()) {\n        const_iterator nx = std::next(it);\n\n        if (nx != end() &amp;&amp; it-&gt;Overlaps(*nx)) {\n            const Interval u = it-&gt;Union(*nx);\n            it = storage.erase(it);\n            it = storage.erase(it);\n            it = storage.insert(it, u);\n        } else\n            break;\n    }\n}\n</code></pre>\n\n<p>Rust code:</p>\n\n<pre><code>/// Add a new interval into the tree\npub fn insert(&amp;mut self, other: Interval) -&gt; () {\n    self.storage.insert(other);\n\n    for int in self.storage.iter() {\n        if other &lt;= *int {\n            break\n        } else if other.overlaps(int) {\n            self.storage.remove(&amp;other);\n            self.storage.remove(int);\n            self.storage.insert(other.union(int).unwrap());\n        }\n    }\n}\n</code></pre>\n"}, {"tags": ["iterator", "rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 193, "user_id": 1941280, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/26647042ac8d5aa0a1841694fe4cb876?s=128&d=identicon&r=PG", "display_name": "Kerollmops", "link": "https://stackoverflow.com/users/1941280/kerollmops"}, "edited": false, "score": 0, "creation_date": 1463868808, "post_id": 37366514, "comment_id": 62249729, "body": "That&#39;s a beautiful explanation you do here, I think I will see another way to do this, the <code>Rc&lt;RefCell&lt;T&gt;&gt;</code> is not appropriate for what I want, I need performances, And I need to use the real <code>Iterator</code> Trait too. Thanks for that, you seem to know many things on Traits and Lifetimes :)"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 2, "last_activity_date": 1463855672, "last_edit_date": 1463855672, "creation_date": 1463854658, "answer_id": 37366514, "question_id": 37366203, "link": "https://stackoverflow.com/questions/37366203/how-to-implement-an-iterator-giving-struct-with-lifetimes/37366514#37366514", "title": "How to implement an iterator giving struct with lifetimes?", "body": "<p>You won't be able to get this to work with simple mutable references, unless you're OK with <em>not</em> implementing the standard <code>Iterator</code> trait. That's because it's not legal in Rust to have more than one usable mutable alias to a particular value at the same time (because it can lead to memory unsafety). Let's see why your code violates this restriction.</p>\n\n<p>First, I can instantiate a <code>FitnessIterMut</code> object. From this object, I can call <code>next</code> to obtain a <code>FitnessModifier</code>. At this point, both the <code>FitnessIterMut</code> and the <code>FitnessModifier</code> contain a mutable reference to a <code>RouletteWheel</code> object, and both the <code>FitnessIterMut</code> and the <code>FitnessModifier</code> are still usable &ndash; that's not legal! I could call <code>next</code> again on the <code>FitnessIterMut</code> to obtain another <code>FitnessModifier</code>, and now I'd have 3 mutable aliases to the <code>RouletteWheel</code>.</p>\n\n<p>Your code fails to compile because you assumed that mutable references can be copied, which is not the case. Immutable references (<code>&amp;'a T</code>) implement <code>Copy</code>, but mutable references (<code>&amp;'a mut T</code>) do not, so they cannot be copied.</p>\n\n<p>What could we do to fix this? Rust lets us temporarily make a mutable reference unusable (i.e. you'll get a compiler error if you try to use it) by <em>reborrowing</em> from it. Normally, for types that don't implement <code>Copy</code>, the compiler will move a value instead of copying it, but for mutable references, the compiler will reborrow instead of moving. Reborrowing can be seen as \"flattening\" or \"collapsing\" references to references, while keeping the shortest lifetime.</p>\n\n<p>Let's see how this works in practice. Here's a valid implementation of <code>next</code>. Note that this doesn't conform to the contract of the standard <code>Iterator</code> trait, so I made this an inherent method instead.</p>\n\n<pre><code>impl&lt;'a, T&gt; FitnessIterMut&lt;'a, T&gt; {\n    fn next&lt;'b&gt;(&amp;'b mut self) -&gt; Option&lt;FitnessModifier&lt;'b, T&gt;&gt; {\n        if let Some(value) = self.iterator.next() {\n            Some(FitnessModifier { wheel: self.wheel, value: value })\n        }\n        else {\n            None\n        }\n    }\n}\n</code></pre>\n\n<p>Instead of returning an <code>Option&lt;FitnessModifier&lt;'a, T&gt;&gt;</code>, we now return an <code>Option&lt;FitnessModifier&lt;'b, T&gt;&gt;</code>, where <code>'b</code> is linked to the lifetime of the <code>self</code> argument. When initializing the <code>wheel</code> field of the result <code>FitnessModifier</code>, the compiler will automatically reborrow from <code>self.wheel</code> (we could make this explicit by writing <code>&amp;mut *self.wheel</code> instead of <code>self.wheel</code>).</p>\n\n<p>Since this expression references a <code>&amp;'a mut RouletteWheel&lt;T&gt;</code>, you thought the type of this expression would also be <code>&amp;'a mut RouletteWheel&lt;T&gt;</code>. However, because this expression borrows from <code>self</code>, which is a <code>&amp;'b mut FitnessIterMut&lt;'a, T&gt;</code>, the type of this expression is actually <code>&amp;'b mut RouletteWheel&lt;T&gt;</code>. In your code, you tried to assign a <code>&amp;'b mut RouletteWheel&lt;T&gt;</code> to a field expecting a <code>&amp;'a mut RouletteWheel&lt;T&gt;</code>, but <code>'a</code> is longer than <code>'b</code>, which is why you got a compiler error.</p>\n\n<p>If Rust didn't allow reborrowing, then instead of storing a <code>&amp;'b mut RouletteWheel&lt;T&gt;</code> in <code>FitnessModifier</code>, you'd have to store a <code>&amp;'b &amp;'a mut RouletteWheel&lt;T&gt;</code>, where <code>'a</code> is the lifetime of the <code>RouletteWheel&lt;T&gt;</code> and <code>'b</code> is the lifetime of the <code>&amp;'a mut RouletteWheel&lt;T&gt;</code> in the <code>FitnessIterMut&lt;'a, T&gt;</code>. However, Rust lets us \"collapse\" this reference to a reference and we can just store a <code>&amp;'b mut RouletteWheel&lt;T&gt;</code> instead (the lifetime is <code>'b</code>, not <code>'a</code>, because <code>'b</code> is the shorter lifetime).</p>\n\n<p>The net effect of this change is that, after you call <code>next</code>, you can't use the <code>FitnessIterMut</code> at all until the resulting <code>Option&lt;FitnessModifier&lt;'b, T&gt;&gt;</code> goes out of scope. That's because the <code>FitnessModifier</code> is borrowing from <code>self</code>, and since the method passed <code>self</code> by mutable reference, the compiler assumes that the <code>FitnessModifier</code> keeps a mutable reference to the <code>FitnessIterMut</code> or to one of its fields (which is true here, not is not always true in general). Thus, while there's a <code>FitnessModifier</code> in scope, there's only one <em>usable</em> mutable alias to the <code>RouletteWheel</code>, which is the one in the <code>FitnessModifier</code> object. When the <code>FitnessModifier&lt;'b, T&gt;</code> goes out of scope, the <code>FitnessIterMut</code> object will become usable again.</p>\n\n<p>If you absolutely need to conform to the <code>Iterator</code> trait, then I suggest you replace your mutable references with <code>Rc&lt;RefCell&lt;T&gt;&gt;</code> instead. <a href=\"http://doc.rust-lang.org/stable/std/rc/struct.Rc.html\" rel=\"nofollow\"><code>Rc</code></a> doesn't implement <code>Copy</code>, but it implements <code>Clone</code> (which only clones the pointer, not the underlying data), so you need to call <code>.clone()</code> explicitly to clone an <code>Rc</code>. <a href=\"http://doc.rust-lang.org/stable/std/cell/struct.RefCell.html\" rel=\"nofollow\"><code>RefCell</code></a> does dynamic borrow checking at runtime, which has a bit of runtime overhead, but gives you more freedom in how you pass mutable objects around.</p>\n"}], "owner": {"reputation": 193, "user_id": 1941280, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/26647042ac8d5aa0a1841694fe4cb876?s=128&d=identicon&r=PG", "display_name": "Kerollmops", "link": "https://stackoverflow.com/users/1941280/kerollmops"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 289, "favorite_count": 0, "accepted_answer_id": 37366514, "answer_count": 1, "score": 3, "last_activity_date": 1463855672, "creation_date": 1463852556, "last_edit_date": 1463853433, "question_id": 37366203, "link": "https://stackoverflow.com/questions/37366203/how-to-implement-an-iterator-giving-struct-with-lifetimes", "title": "How to implement an iterator giving struct with lifetimes?", "body": "<p>I want to create a mutable iterator that control modifications, for this I  create a struct named <code>FitnessIterMut</code> that <code>impl</code> the <code>Iterator</code> trait.\nThe <code>next()</code> method gives a struct that can do things on the container itself when a modification is done. (Is it a good way to do this sort of things ?)</p>\n\n<pre><code>pub struct FitnessModifier&lt;'a, T: 'a&gt; {\n    wheel: &amp;'a mut RouletteWheel&lt;T&gt;,\n    value: &amp;'a mut (f32, T)\n}\n\nimpl&lt;'a, T&gt; FitnessModifier&lt;'a, T&gt; {\n    pub fn read(&amp;'a self) -&gt; &amp;'a (f32, T) {\n        self.value\n    }\n\n    pub fn set_fitness(&amp;'a self, new: f32) {\n        let &amp;mut (ref mut fitness, _) = self.value;\n        self.wheel.proba_sum -= *fitness;\n        self.wheel.proba_sum += new;\n        *fitness = new;\n    }\n}\n\npub struct FitnessIterMut&lt;'a, T: 'a&gt; {\n    wheel: &amp;'a mut RouletteWheel&lt;T&gt;,\n    iterator: &amp;'a mut IterMut&lt;'a, (f32, T)&gt;\n}\n\nimpl&lt;'a, T&gt; Iterator for FitnessIterMut&lt;'a, T&gt; {\n    type Item = FitnessModifier&lt;'a, T&gt;;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        if let Some(value) = self.iterator.next() {\n            Some(FitnessModifier { wheel: self.wheel, value: value })\n        }\n        else {\n            None\n        }\n    }\n}\n</code></pre>\n\n<p>This gives me this error, I think I have to do a <code>'b</code> lifetime but I'm a little lost.</p>\n\n<pre><code>error: cannot infer an appropriate lifetime for automatic coercion due to conflicting requirements [E0495]\n        Some(FitnessModifier { wheel: self.wheel, value: value })\n                                      ^~~~~~~~~~\nhelp: consider using an explicit lifetime parameter as shown: fn next(&amp;'a mut self) -&gt; Option&lt;Self::Item&gt;\nfn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n    if let Some(value) = self.iterator.next() {\n        Some(FitnessModifier { wheel: self.wheel, value: value })\n    }\n    else {\n        None\n</code></pre>\n"}, {"tags": ["compiler-errors", "macros", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1463851640, "post_id": 37365864, "comment_id": 62244827, "body": "You should probably produce a <a href=\"/help/mcve\">MCVE</a> and then <a href=\"https://github.com/rust-lang/rust/issues\" rel=\"nofollow noreferrer\">file an issue</a>. When I compile <a href=\"https://play.rust-lang.org/?gist=78da72deb2690a3166bea3dd4f3735d9&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">code that produces a similar error</a> I get an error that points directly to the line in question: <code>&lt;anon&gt;:4:5: 4:25 note: in this expansion of try!</code> (the <code>&lt;anon&gt;:4:5</code> bit; &quot;anon&quot; because I used the Playground). Maybe also <a href=\"https://stackoverflow.com/posts/37365864/edit\">edit</a> your question to include the version of Rust, in case it&#39;s relevant."}, {"owner": {"reputation": 8175, "user_id": 5123895, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/9bacc8506650426ce32d14f161108978?s=128&d=identicon&r=PG&f=1", "display_name": "\u0141ukasz", "link": "https://stackoverflow.com/users/5123895/%c5%81ukasz"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1463855418, "post_id": 37365864, "comment_id": 62246053, "body": "Thanks for your help. I <a href=\"https://github.com/rust-lang/rust/issues/33774\" rel=\"nofollow noreferrer\">filed an issue</a>, I used your example as it was more concise, hope you don&#39;t mind."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1463856568, "post_id": 37365864, "comment_id": 62246441, "body": "No worries at all; hopefully it is fixed before 1.10 is released :-)"}], "owner": {"reputation": 8175, "user_id": 5123895, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/9bacc8506650426ce32d14f161108978?s=128&d=identicon&r=PG&f=1", "display_name": "\u0141ukasz", "link": "https://stackoverflow.com/users/5123895/%c5%81ukasz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 68, "favorite_count": 0, "answer_count": 0, "score": 2, "last_activity_date": 1463854306, "creation_date": 1463850643, "last_edit_date": 1592644375, "question_id": 37365864, "link": "https://stackoverflow.com/questions/37365864/how-do-i-find-out-where-a-compiler-error-involving-macros-originates", "title": "How do I find out where a compiler error involving macros originates?", "body": "<p>When I compile code that contains an error, the compiler doesn't point me to the actual line that I made error in. This happens when I use macros, e.g. <code>try!</code>.</p>\n<p>This is an example error:</p>\n<pre><code>&lt;std macros&gt;:5:8: 6:45 error: mismatched types [E0308]\n&lt;std macros&gt;:5 return $ crate :: result :: Result :: Err (\n                      ^\n&lt;std macros&gt;:5:8: 6:45 note: in this expansion of try! (defined in &lt;std macros&gt;)\n&lt;std macros&gt;:5:8: 6:45 help: run `rustc --explain E0308` to see a detailed explanation\n&lt;std macros&gt;:5:8: 6:45 note: expected type `std::path::PathBuf`\n&lt;std macros&gt;:5:8: 6:45 note:    found type `std::result::Result&lt;_, _&gt;`\n</code></pre>\n<p>I would expect <code>rustc</code> to point me to line in file that I actually edited that causes the error but instead I only see lines from <code>std::macros</code>.</p>\n<p>Is there a way to find out where the problem originates or should I just comment and uncomment all lines that are possible candidates?</p>\n<h2>Edit</h2>\n<p>The general problem looks more or less like this</p>\n<pre><code>use std::result::Result;\nuse std::path::PathBuf;\n\nfn get_destination_path() -&gt; PathBuf {\n   PathBuf::from(try!(get_res()))\n}\n\nfn get_res() -&gt; Result&lt;String, String&gt; {\n  Ok(&quot;a&quot;.to_string())\n}\n</code></pre>\n<p>I declared <code>get_destination_path</code> as returning <code>PathBuf</code> instead of  <code>Result&lt;PathBuf, String&gt;</code> and that causes the error.</p>\n<p>I found that this happens only when I use nigtly version of <code>rustc</code> (I executed <code>multirust override nightly</code> in my cargo project directory)</p>\n<p>When I use regular rust I get much nicer error</p>\n<pre><code>error: main function not found\n&lt;std macros&gt;:5:8: 6:42 error: mismatched types:\n expected `std::path::PathBuf`,\nfound `core::result::Result&lt;_, _&gt;`\n(expected struct `std::path::PathBuf`,\nfound enum `core::result::Result`) [E0308]\n&lt;std macros&gt;:5 return $ crate:: result:: Result:: Err (\n&lt;std macros&gt;:6 $ crate:: convert:: From:: from ( err ) ) } } )\nsrc/main.rs:6:18: 6:33 note: in this expansion of try! (defined in &lt;std macros&gt;)\n</code></pre>\n<p>So this happens on <code>rustc 1.10.0-nightly (d91f8ab0f 2016-05-07)</code> and is likely to be just a bug.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1463845539, "post_id": 37364950, "comment_id": 62242967, "body": "Or (mostly) conversely <code>T: Into&lt;StoredValue&gt;</code>. <a href=\"http://stackoverflow.com/q/29812530/155423\">When should I implement std::convert::From vs std::convert::Into?</a> may have more detail on the difference."}, {"owner": {"reputation": 11, "user_id": 6364804, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3b50e535eb39093cf31f5e3ab3be5b97?s=128&d=identicon&r=PG&f=1", "display_name": "cpichard", "link": "https://stackoverflow.com/users/6364804/cpichard"}, "edited": false, "score": 0, "creation_date": 1463847890, "post_id": 37364950, "comment_id": 62243615, "body": "Thanks ! I understand my mistake now, I didn&#39;t think it was possible to add types different than he generic ones in a where clause. That totally makes sense now."}, {"owner": {"reputation": 11, "user_id": 6364804, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3b50e535eb39093cf31f5e3ab3be5b97?s=128&d=identicon&r=PG&f=1", "display_name": "cpichard", "link": "https://stackoverflow.com/users/6364804/cpichard"}, "edited": false, "score": 0, "creation_date": 1463902820, "post_id": 37364950, "comment_id": 62255305, "body": "indeed, where T: Into&lt;StoredValue&gt; feels more readable. Thanks !"}, {"owner": {"reputation": 11, "user_id": 6364804, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3b50e535eb39093cf31f5e3ab3be5b97?s=128&d=identicon&r=PG&f=1", "display_name": "cpichard", "link": "https://stackoverflow.com/users/6364804/cpichard"}, "edited": false, "score": 0, "creation_date": 1463903710, "post_id": 37364950, "comment_id": 62255494, "body": "unfortunately <code>where T: Into&lt;StoredValue&gt;</code> doesn&#39;t compile with this example, it looks like <code>Into</code> has to be implemented, too bad."}, {"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1463913623, "post_id": 37364950, "comment_id": 62258039, "body": "Works for me, but you also have to change the following line. (I forgot that, added it now.)"}], "tags": [], "owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "is_accepted": false, "score": 1, "last_activity_date": 1463913536, "last_edit_date": 1463913536, "creation_date": 1463845266, "answer_id": 37364950, "question_id": 37364634, "link": "https://stackoverflow.com/questions/37364634/from-trait-called-inside-a-generic-function/37364950#37364950", "title": "From trait called inside a generic function", "body": "<p>To make <code>do_stuff()</code> work, it must be possible to convert type <code>T</code> into <code>StoredValue</code>. So its declaration should be</p>\n\n<pre><code>fn do_stuff&lt;T&gt;(value: T) -&gt; i32 where StoredValue: From&lt;T&gt; {\n</code></pre>\n\n<p><strong>Edit:</strong> I agree with Shepmaster that that should better be</p>\n\n<pre><code>fn do_stuff&lt;T&gt;(value: T) -&gt; i32 where T: Into&lt;StoredValue&gt; {\n    let result = value.into();\n    // ...\n</code></pre>\n\n<p>Since there is a generic implementation that turns <code>T: From&lt;U&gt;</code> into <code>U: Into&lt;T&gt;</code>, this allows to use both kinds of conversions, those implementing <code>From</code> and those implementing <code>Into</code>.  With my first version only conversions implementing <code>From</code> would work.</p>\n"}, {"comments": [{"owner": {"reputation": 11, "user_id": 6364804, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3b50e535eb39093cf31f5e3ab3be5b97?s=128&d=identicon&r=PG&f=1", "display_name": "cpichard", "link": "https://stackoverflow.com/users/6364804/cpichard"}, "edited": false, "score": 0, "creation_date": 1463847664, "post_id": 37365034, "comment_id": 62243558, "body": "Thanks for the explanation, I chose to use From because I saw in the documentation that it was preferable to use From instead of Into. Is there any reason for that ?"}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 11, "user_id": 6364804, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3b50e535eb39093cf31f5e3ab3be5b97?s=128&d=identicon&r=PG&f=1", "display_name": "cpichard", "link": "https://stackoverflow.com/users/6364804/cpichard"}, "edited": false, "score": 0, "creation_date": 1463850163, "post_id": 37365034, "comment_id": 62244360, "body": "@cpichard It&#39;s preferable to <i>implement</i> <code>From</code>, but <i>consuming</i> <code>Into</code> is often better than consuming <code>From</code> since it reads more naturally and allows more conversions than <code>From</code>."}], "tags": [], "owner": {"reputation": 126, "user_id": 3281907, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/167b5d70056ea34fa24058a251d63964?s=128&d=identicon&r=PG", "display_name": "kbknapp", "link": "https://stackoverflow.com/users/3281907/kbknapp"}, "is_accepted": false, "score": 2, "last_activity_date": 1463846154, "last_edit_date": 1463846154, "creation_date": 1463845824, "answer_id": 37365034, "question_id": 37364634, "link": "https://stackoverflow.com/questions/37364634/from-trait-called-inside-a-generic-function/37365034#37365034", "title": "From trait called inside a generic function", "body": "<p>Your generic function is saying, \"I accept any type that implements being created from itself.\" Which isn't what you want.</p>\n\n<p>There's a few things you <em>could</em> be wanting to say:</p>\n\n<p>\"I accept any type that can be converted into an <code>i32</code> so that I can create a <code>StoredValue</code>.\" This works because you know <code>StoredValue</code> implements <code>From&lt;i32&gt;</code>.</p>\n\n<pre><code>fn do_stuff&lt;T&gt;(value: T) -&gt; i32 where T: Into&lt;i32&gt; {\n    let result = StoredValue::from(value.into());\n    // ...\n}\n</code></pre>\n\n<p>Or, \"I accept any type that can be converted <em>into</em> a <code>StoredValue</code>.\" There is a handy trait that goes along with the <code>From&lt;T&gt;</code> trait, and it's called <a href=\"https://doc.rust-lang.org/std/convert/trait.Into.html\" rel=\"nofollow\"><code>Into&lt;T&gt;</code></a>. </p>\n\n<pre><code>fn do_stuff&lt;T&gt;(value: T) -&gt; i32 where T: Into&lt;StoredValue&gt; {\n    let result = value.into();\n    // ...\n}\n</code></pre>\n\n<p>The way to remember how/when to use these two traits that go hand in hand is this:</p>\n\n<ul>\n<li>Use <code>Into&lt;T&gt;</code> when you know what you want the end result to be, i.e from <code>?-&gt;T</code></li>\n<li>Use <code>From&lt;T&gt;</code> when you know what you have to start with, but not the end result, i.e. <code>T-&gt;?</code></li>\n</ul>\n\n<p>The reason these two traits can go hand in hand together, is if you have a  <code>T</code> that implements <code>Into&lt;U&gt;</code>, and you have <code>V</code> that implements <code>From&lt;U&gt;</code> you can get from a <code>T-&gt;U-&gt;V</code>.</p>\n\n<p>The Rust std lib has such a conversion already baked in that says, \"Any type <code>T</code> that implements <code>From&lt;U&gt;</code>, than <code>U</code> implements <code>Into&lt;T&gt;</code>.\"</p>\n\n<p>Because of this, when you implemented <code>From&lt;i32&gt; for StoredValue</code> you can assume there is a <code>Into&lt;StoredValue&gt; for i32</code>.</p>\n"}], "owner": {"reputation": 11, "user_id": 6364804, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3b50e535eb39093cf31f5e3ab3be5b97?s=128&d=identicon&r=PG&f=1", "display_name": "cpichard", "link": "https://stackoverflow.com/users/6364804/cpichard"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 104, "favorite_count": 0, "answer_count": 2, "score": 1, "last_activity_date": 1463913536, "creation_date": 1463843567, "last_edit_date": 1463845503, "question_id": 37364634, "link": "https://stackoverflow.com/questions/37364634/from-trait-called-inside-a-generic-function", "title": "From trait called inside a generic function", "body": "<p>I am using the <code>From</code> trait to convert an <code>i32</code> to a structure of my own. I use this conversion in a generic function <code>do_stuff</code> that doesn't compile:</p>\n\n<pre><code>use std::convert::*;\n\nstruct StoredValue {\n    val: i32,\n}\n\nimpl From&lt;i32&gt; for StoredValue {\n    fn from(value: i32) -&gt; StoredValue {\n        return StoredValue {val: value};\n    }\n}\n\n/// Generic function that stores a value and do stuff\nfn do_stuff&lt;T&gt;(value: T) -&gt; i32 where T: From&lt;T&gt; {\n    let result = StoredValue::from(value);\n    // .... do stuff and\n    return 0;\n}\n\nfn main () {\n    let result = do_stuff(0); // call with explicit type\n}\n</code></pre>\n\n<p>and the compilation error:</p>\n\n<pre><code>main.rs:15:18: 15:35 error: the trait `core::convert::From&lt;T&gt;` is not implemented for the type `StoredValue` [E0277]\nmain.rs:15     let result = StoredValue::from(value);\n</code></pre>\n\n<p>Does it make sense to implement a generic version of <code>From&lt;T&gt;</code> for <code>StoredValue</code>?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 2, "creation_date": 1463832566, "post_id": 37362640, "comment_id": 62238882, "body": "Type-checking and borrow-checking I guess. Also note that <code>println!</code> expands to some pretty complex code, unlike C&#39;s <code>printf</code> which is a simple function call."}, {"owner": {"reputation": 27031, "user_id": 1968972, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/bfdd4ec8dff5c7635520fe98348524ec?s=128&d=identicon&r=PG", "display_name": "exebook", "link": "https://stackoverflow.com/users/1968972/exebook"}, "reply_to_user": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 1, "creation_date": 1463833173, "post_id": 37362640, "comment_id": 62239078, "body": "@kennytm, 500 ms to type-check one line of code?"}, {"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "edited": false, "score": 2, "creation_date": 1463836071, "post_id": 37362640, "comment_id": 62239958, "body": "See <a href=\"https://www.reddit.com/r/rust/comments/2uxt46/rust_vs_c_inc_compile_speed/\" rel=\"nofollow noreferrer\">this</a> discussion and take a look at this <a href=\"https://ruudvanasseldonk.com/2014/10/20/writing-a-path-tracer-in-rust-part-7-conclusion\" rel=\"nofollow noreferrer\">compilation times</a> of a C++ program ported to Rust."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 5, "creation_date": 1463836928, "post_id": 37362640, "comment_id": 62240232, "body": "You can check how long each pass of the compiler takes by passing <code>-Z time-passes</code> to the compiler. Experience suggest you&#39;ll find that the majority of time is spent in the backend (translation to LLVM IR, LLVM&#39;s optimization and codegen, linking)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 6, "creation_date": 1463839252, "post_id": 37362640, "comment_id": 62240897, "body": "A single data point is pretty much irrelevant, especially considering that very few real-world programs are only one line of code. Perform the same analysis with multiple like-for-like projects. How long does a 10KLOC program compile in both? Then you can start getting into the discussion of whether the overhead (if there is any) at compile time prevents programmer time elsewhere, such as in debugging (see all previous discussions of &quot;it takes too long to write and run tests&quot; for similar arguments)."}, {"owner": {"reputation": 26917, "user_id": 1892179, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/umfON.jpg?s=128&g=1", "display_name": "Theodoros Chatzigiannakis", "link": "https://stackoverflow.com/users/1892179/theodoros-chatzigiannakis"}, "edited": false, "score": 1, "creation_date": 1463839532, "post_id": 37362640, "comment_id": 62240982, "body": "Why do you think they should compile in comparable times? LLVM is used for the code generation phase. Compilation is more than just code generation and Rust isn&#39;t as simple as C."}, {"owner": {"reputation": 1003, "user_id": 1103760, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/OInfA.png?s=128&g=1", "display_name": "don bright", "link": "https://stackoverflow.com/users/1103760/don-bright"}, "edited": false, "score": 1, "creation_date": 1546916505, "post_id": 37362640, "comment_id": 95002510, "body": "There are massive C++ template header files like CGAL which, when used, can take 30 minutes to compile a hundred line file... hard locking cloud build machines by eating all the RAM. I actually worked on a project that got kicked out of Ubuntu because it crashed compiling templates on MIPS so debian said it was broken. With header libs its never really &#39;a hundred line file&#39;. There are precompiled headers but of course they dont always work. I know &quot;plain rust&quot; can be slow, but Im looking at Rust precisely to get away from C++ template headers slowness."}, {"owner": {"reputation": 7096, "user_id": 3990767, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0a5741a212e3b0e6bd46a8a1e6d76a4a?s=128&d=identicon&r=PG", "display_name": "SOFe", "link": "https://stackoverflow.com/users/3990767/sofe"}, "edited": false, "score": 1, "creation_date": 1552722806, "post_id": 37362640, "comment_id": 97126964, "body": "In light of this question, it is inspiring for the Rust compiler team to write a conditional compiler that converts to an inefficient binary generation when input is less than 5 lines just to get this kind of critics more fair."}, {"owner": {"reputation": 27031, "user_id": 1968972, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/bfdd4ec8dff5c7635520fe98348524ec?s=128&d=identicon&r=PG", "display_name": "exebook", "link": "https://stackoverflow.com/users/1968972/exebook"}, "reply_to_user": {"reputation": 7096, "user_id": 3990767, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0a5741a212e3b0e6bd46a8a1e6d76a4a?s=128&d=identicon&r=PG", "display_name": "SOFe", "link": "https://stackoverflow.com/users/3990767/sofe"}, "edited": false, "score": 0, "creation_date": 1552780162, "post_id": 37362640, "comment_id": 97142247, "body": "@SOFe although I feel your sarcasm, I still wish every compiler out there had an option for &quot;favor compilation speed&quot;."}], "answers": [{"comments": [{"owner": {"reputation": 36931, "user_id": 225757, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/e7140b12949e4652885f6bb02b435f42?s=128&d=identicon&r=PG", "display_name": "Roland Illig", "link": "https://stackoverflow.com/users/225757/roland-illig"}, "edited": false, "score": 13, "creation_date": 1582759926, "post_id": 37365065, "comment_id": 106892439, "body": "Too bad that C++ compilation times are unacceptably slow. &quot;Look, when we compare to the worst language out there, we are on par.&quot; That&#39;s not a convincing argument."}, {"owner": {"reputation": 13885, "user_id": 1509695, "user_type": "registered", "accept_rate": 38, "profile_image": "https://www.gravatar.com/avatar/04a3ca8cd41bf8e170b901072fcc667f?s=128&d=identicon&r=PG", "display_name": "matanster", "link": "https://stackoverflow.com/users/1509695/matanster"}, "reply_to_user": {"reputation": 36931, "user_id": 225757, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/e7140b12949e4652885f6bb02b435f42?s=128&d=identicon&r=PG", "display_name": "Roland Illig", "link": "https://stackoverflow.com/users/225757/roland-illig"}, "edited": false, "score": 2, "creation_date": 1598708415, "post_id": 37365065, "comment_id": 112549845, "body": "@RolandIllig but it&#39;s kind of good to know if you are comparing Rust to C++, which many people would."}], "tags": [], "owner": {"reputation": 11496, "user_id": 5438433, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/OJ1qY.png?s=128&g=1", "display_name": "TheInnerLight", "link": "https://stackoverflow.com/users/5438433/theinnerlight"}, "is_accepted": false, "score": 56, "last_activity_date": 1556838484, "last_edit_date": 1592644375, "creation_date": 1463846008, "answer_id": 37365065, "question_id": 37362640, "link": "https://stackoverflow.com/questions/37362640/why-does-rust-compile-a-simple-program-5-10-times-slower-than-gcc-clang/37365065#37365065", "title": "Why does Rust compile a simple program 5-10 times slower than gcc/clang?", "body": "<p>First of all, I don't think it's very meaningful to compare the compile time of two extremely simple programs and expect the result to be representative of compilation times between two languages more generally.</p>\n<p>That said, I do expect that Rust, being a language that provides a level of abstraction much more common to higher level languages with little to no runtime performance cost, would have to pay for that to some extent at compile time.</p>\n<p>This excerpt is taken from <a href=\"https://prev.rust-lang.org/en-US/faq.html#why-is-rustc-slow\" rel=\"noreferrer\">the Rust FAQ</a>:</p>\n<blockquote>\n<p><strong>Rust compilation seems slow. Why is that?</strong></p>\n<p>Code translation and optimizations. Rust provides high level\nabstractions that compile down into efficient machine code, and those\ntranslations take time to run, especially when optimizing.</p>\n<p>But Rust\u2019s compilation time is not as bad as it may seem, and there is\nreason to believe it will improve. When comparing projects of similar\nsize between C++ and Rust, compilation time of the entire project is\ngenerally believed to be comparable. The common perception that Rust\ncompilation is slow is in large part due to the differences in the\ncompilation model between C++ and Rust: C++\u2019s compilation unit is the\nfile, while Rust\u2019s is the crate, composed of many files. Thus, during\ndevelopment, modifying a single C++ file can result in much less\nrecompilation than in Rust. There is a major effort underway to\nrefactor the compiler to introduce incremental compilation, which will\nprovide Rust the compile time benefits of C++\u2019s model.</p>\n<p>Aside from the compilation model, there are several other aspects of\nRust\u2019s language design and compiler implementation that affect\ncompile-time performance.</p>\n<p>First, Rust has a moderately-complex type system, and must spend a\nnon-negligible amount of compile time enforcing the constraints that\nmake Rust safe at runtime.</p>\n<p>Secondly, the Rust compiler suffers from long-standing technical debt,\nand notably generates poor-quality LLVM IR which LLVM must spend time\n\u201cfixing\u201d. There is hope that future MIR-based optimization and\ntranslation passes will ease the burden the Rust compiler places on\nLLVM.</p>\n<p>Thirdly, Rust\u2019s use of LLVM for code generation is a double-edged\nsword: while it enables Rust to have world-class runtime performance,\nLLVM is a large framework that is not focused on compile-time\nperformance, particularly when working with poor-quality inputs.</p>\n<p>Finally, while Rust\u2019s preferred strategy of monomorphising generics\n(ala C++) produces fast code, it demands that significantly more code\nbe generated than other translation strategies. Rust programmers can\nuse trait objects to trade away this code bloat by using dynamic\ndispatch instead.</p>\n</blockquote>\n"}], "owner": {"reputation": 27031, "user_id": 1968972, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/bfdd4ec8dff5c7635520fe98348524ec?s=128&d=identicon&r=PG", "display_name": "exebook", "link": "https://stackoverflow.com/users/1968972/exebook"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 12973, "favorite_count": 6, "answer_count": 1, "score": 21, "last_activity_date": 1556838484, "creation_date": 1463831953, "last_edit_date": 1546936549, "question_id": 37362640, "link": "https://stackoverflow.com/questions/37362640/why-does-rust-compile-a-simple-program-5-10-times-slower-than-gcc-clang", "title": "Why does Rust compile a simple program 5-10 times slower than gcc/clang?", "body": "<p>Follow-up to <a href=\"https://stackoverflow.com/questions/37362130/rust-minimal-compiled-program-size\">Rust minimal compiled program size</a>.</p>\n\n<pre><code>rustc hello.rs\n&gt; 600 ms\n</code></pre>\n\n<p>Why does <code>rustc</code> compile a simple Hello World 5-10 times slower than gcc/clang?</p>\n\n<p>Rust uses LLVM so it should be on par with <code>clang</code>. Anyway we are talking about a program that has only three lines of code.</p>\n\n<pre><code>rustc hello.rs -C opt-level=0 -C prefer-dynamic\n&gt; 400 ms\n\ngcc hello.c\n&gt; 60 ms\n\nclang hello.c\n&gt; 110 ms\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": true, "score": 5, "last_activity_date": 1463829228, "creation_date": 1463829228, "answer_id": 37362189, "question_id": 37362130, "link": "https://stackoverflow.com/questions/37362130/rust-minimal-compiled-program-size/37362189#37362189", "title": "Rust minimal compiled program size", "body": "<p>The executable size is mostly because rust's standard library is statically linked in by default. Try compiling with <code>rustc -O -C prefer-dynamic</code> and you should get a binary that's comparable to the C version.</p>\n"}], "owner": {"reputation": 27031, "user_id": 1968972, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/bfdd4ec8dff5c7635520fe98348524ec?s=128&d=identicon&r=PG", "display_name": "exebook", "link": "https://stackoverflow.com/users/1968972/exebook"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1322, "favorite_count": 1, "closed_date": 1463838975, "accepted_answer_id": 37362189, "answer_count": 1, "score": 2, "last_activity_date": 1463839303, "creation_date": 1463828903, "last_edit_date": 1463839303, "question_id": 37362130, "link": "https://stackoverflow.com/questions/37362130/rust-minimal-compiled-program-size", "closed_reason": "Duplicate", "title": "Rust minimal compiled program size", "body": "<pre><code>fn main() {\n    println!(\"hello\");\n}\n</code></pre>\n\n<p>This program compiles 600 ms and the resulting binary is 600KB in size. Why is that? I am just trying Rust, and comparing it to C. C would compile similar program 10 times faster and the binary output will be 100 times smaller. So why is that?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 27031, "user_id": 1968972, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/bfdd4ec8dff5c7635520fe98348524ec?s=128&d=identicon&r=PG", "display_name": "exebook", "link": "https://stackoverflow.com/users/1968972/exebook"}, "edited": false, "score": 1, "creation_date": 1463824505, "post_id": 37361350, "comment_id": 62236621, "body": "so this means the example from that website is not in rust?"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 27031, "user_id": 1968972, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/bfdd4ec8dff5c7635520fe98348524ec?s=128&d=identicon&r=PG", "display_name": "exebook", "link": "https://stackoverflow.com/users/1968972/exebook"}, "edited": false, "score": 0, "creation_date": 1463824553, "post_id": 37361350, "comment_id": 62236630, "body": "Where did you find the example? Can you link the website?"}, {"owner": {"reputation": 27031, "user_id": 1968972, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/bfdd4ec8dff5c7635520fe98348524ec?s=128&d=identicon&r=PG", "display_name": "exebook", "link": "https://stackoverflow.com/users/1968972/exebook"}, "edited": false, "score": 0, "creation_date": 1463824618, "post_id": 37361350, "comment_id": 62236653, "body": "Yes, the link is in the question"}, {"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "edited": false, "score": 5, "creation_date": 1463824810, "post_id": 37361350, "comment_id": 62236701, "body": "I think Rust may have had <code>int</code> in 2014 (when that article was written), and was changed to <code>isize</code> sometime before 1.0"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 2, "creation_date": 1463824815, "post_id": 37361350, "comment_id": 62236703, "body": "Oh, I&#39;m sorry, haven&#39;t seen that. Yes the website&#39;s example is no valid Rust <code>1.x</code>. The article on the website was written a few months before Rust was officially released and I think that Rust had <code>int</code> at that time still. Information on Rust that was written before May 2015 is probably outdated :/"}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 10, "last_activity_date": 1607724808, "last_edit_date": 1607724808, "creation_date": 1463824295, "answer_id": 37361350, "question_id": 37361322, "link": "https://stackoverflow.com/questions/37361322/type-name-int-is-undefined-or-not-in-scope/37361350#37361350", "title": "type name `int` is undefined or not in scope", "body": "<p>There is no <code>int</code> type in Rust. Rust has the following integer types:</p>\n<ul>\n<li><code>i8</code>, <code>i16</code>, <code>i32</code>, <code>i64</code>, <code>i128</code>: signed integer with 8/16/32/64/128 bits</li>\n<li><code>u8</code>, <code>u16</code>, <code>u32</code>, <code>u64</code>, <code>u128</code>: <strong>un</strong>signed integer with 8/16/32/64/128 bits</li>\n<li><code>isize</code>, <code>usize</code>: signed/unsigned integer with pointer size (64 bit on 64 bit systems)</li>\n</ul>\n<p>You can learn more about this in <a href=\"https://doc.rust-lang.org/book/primitive-types.html#numeric-types\" rel=\"nofollow noreferrer\">this chapter of the Rust book</a>.</p>\n"}], "owner": {"reputation": 27031, "user_id": 1968972, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/bfdd4ec8dff5c7635520fe98348524ec?s=128&d=identicon&r=PG", "display_name": "exebook", "link": "https://stackoverflow.com/users/1968972/exebook"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1640, "favorite_count": 0, "accepted_answer_id": 37361350, "answer_count": 1, "score": 4, "last_activity_date": 1607724808, "creation_date": 1463824139, "question_id": 37361322, "link": "https://stackoverflow.com/questions/37361322/type-name-int-is-undefined-or-not-in-scope", "title": "type name `int` is undefined or not in scope", "body": "<p>What does this mean?</p>\n\n<pre><code>error: type name `int` is undefined or not in scope\n</code></pre>\n\n<p>I am trying to compile this <a href=\"http://kukuruku.co/hub/rust/comparing-rust-and-cpp\" rel=\"nofollow\">example</a>:</p>\n\n<pre><code>fn minval(A: &amp;[int]) -&gt; int {\n  A.iter().fold(A[0], |u,&amp;a| {\n    if a&lt;u {a} else {u}\n  })\n}\n\nfn main() {\n    let A = [1i,2i,3i];\n    let min = minval(A.as_slice());\n    println!(\"{}\", min);\n}\n</code></pre>\n"}, {"tags": ["concurrency", "rust"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1463819893, "post_id": 37360667, "comment_id": 62235445, "body": "Have you compiled with <code>cargo build --release</code> or <code>cargo run --release</code>? If not, the compiler did not optimize the code at all and it&#39;s probably slow as funk."}, {"owner": {"reputation": 11, "user_id": 5709928, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/ECjS3.jpg?s=128&g=1", "display_name": "Tony Ding", "link": "https://stackoverflow.com/users/5709928/tony-ding"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1463820419, "post_id": 37360667, "comment_id": 62235570, "body": "thanks for comments, but i tried."}], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 4, "last_activity_date": 1463820787, "creation_date": 1463820787, "answer_id": 37360808, "question_id": 37360667, "link": "https://stackoverflow.com/questions/37360667/why-is-matrix-multiplication-with-concurrency-slower-than-without-concurrency/37360808#37360808", "title": "Why is matrix multiplication with concurrency slower than without concurrency?", "body": "<p>Without looking into too much detail: you are spawning n\u00b2 threads -- one for each cell in the result matrix. Spawning threads is expensive (note that Rust doesn't use \"green thread\", but system threads by default).</p>\n\n<p>Concurrency doesn't simply speed up everything; one has to be a bit smart about it. Usually you just want to utilize all CPU cores, hence you should only spawn roughly as many threads as there are cores. In your case, spawning the thread probably takes much more time than what the thread does, thus the slowdown.</p>\n"}, {"comments": [{"owner": {"reputation": 11, "user_id": 5709928, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/ECjS3.jpg?s=128&g=1", "display_name": "Tony Ding", "link": "https://stackoverflow.com/users/5709928/tony-ding"}, "edited": false, "score": 0, "creation_date": 1463893342, "post_id": 37360859, "comment_id": 62253491, "body": "thanks for your answer, but I am still confused with how can i get rid of arc&lt;T&gt; when I want thread to read matrix data?"}, {"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "reply_to_user": {"reputation": 11, "user_id": 5709928, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/ECjS3.jpg?s=128&g=1", "display_name": "Tony Ding", "link": "https://stackoverflow.com/users/5709928/tony-ding"}, "edited": false, "score": 0, "creation_date": 1463980381, "post_id": 37360859, "comment_id": 62276572, "body": "@rapirent Give each thread an &amp; instead. You don&#39;t need the  reference counting. Like  I said, though, it&#39;s possible Rust&#39;s borrow checker won&#39;t play nicely and you may  have to use <code>crossbeam</code>"}], "tags": [], "owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "is_accepted": false, "score": 4, "last_activity_date": 1463822238, "last_edit_date": 1463822238, "creation_date": 1463821064, "answer_id": 37360859, "question_id": 37360667, "link": "https://stackoverflow.com/questions/37360667/why-is-matrix-multiplication-with-concurrency-slower-than-without-concurrency/37360859#37360859", "title": "Why is matrix multiplication with concurrency slower than without concurrency?", "body": "<p>There are several reasons, but the few that jump out:</p>\n\n<ol>\n<li>You're cloning two Arcs each time, which involves an atomic addition, which is slow. While they're not in the threads, it is delaying the START of each thread.</li>\n<li>You're using a Read-Write mutex (RWLock)  each time. Even if it's just a read, this still almost certainly involves at least one atomic write, and an atomic read of some Mutex state, to some internal counter.</li>\n<li>Spawning OS threads is not free or instantaneous. It has a startup cost.</li>\n<li>Make sure you're using sufficiently sized data! We're usually talking at least n*n=10000 to get anything noticeable from parallelism. Usually several orders of magnitude more. This is part of why 3 is bad.</li>\n<li>Rust doesn't use lightweight coroutines. These are full-on OS threads. You'd be better spawning as many threads as you have logical cores (logical means physical+hyperthreading, your OS should report them all as actual cores) and evenly distributing the cost across all cores.</li>\n</ol>\n\n<p>You could probably get a pretty significant speed-up by ditching the RWLock (you don't need it since your data is read-only), since the Arc is only delaying the startup time, and the time it takes a thread to join (since it needs to drop the Arc). However, by far your biggest speedup is going to be only spawning 4-8  threads depending on your processor. I'll leave it to you how  to best split it into chunks, but it's fairly straightforward.</p>\n\n<p>Edit: In fact, you can probably get rid of the <code>Arc</code> too, since the threads immediately join, but depending on Rust thread lifetime weirdness, you may need the <code>crossbeam::scoped</code> functionality from the <code>crossbeam</code> crate to actually make it work.</p>\n\n<p>As an aside, once you move to concurrent <strong>writing</strong> to the same data structures, I highly encourage you to look up info on the processor cache, specifically, false sharing. While Mutexes are likely to be the higher cost in Rust, if you can somehow eschew them (e.g. by splitting a slice with <code>split_mut</code>), you'll likely get bad flailing by constantly invalidating your cache around the boundaries.</p>\n"}], "owner": {"reputation": 11, "user_id": 5709928, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/ECjS3.jpg?s=128&g=1", "display_name": "Tony Ding", "link": "https://stackoverflow.com/users/5709928/tony-ding"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 391, "favorite_count": 1, "answer_count": 2, "score": 1, "last_activity_date": 1463822238, "creation_date": 1463819779, "last_edit_date": 1463820327, "question_id": 37360667, "link": "https://stackoverflow.com/questions/37360667/why-is-matrix-multiplication-with-concurrency-slower-than-without-concurrency", "title": "Why is matrix multiplication with concurrency slower than without concurrency?", "body": "<p>There are some parts of my program, which import a file that contains two matrices and multiply them.</p>\n\n<p>But I am confused with why the duration time with concurrency is longer than that without concurrency?</p>\n\n<p>Are there any bugs in my code?</p>\n\n<pre><code>// without concurrency\nlet mut result = vec![];\n\nlet time1 = Instant::now();\nfor i in 0..n {\n    let mut temp_vector = vec![];\n    for j in 0..n {\n        let mut temp_num = 0;\n        for multiple_count in 0..m {\n            temp_num = temp_num + arr1[i][multiple_count] * arr2[multiple_count][j];\n        }\n        temp_vector.push(temp_num);\n    }\n    result.push(temp_vector);\n}\nlet time2 = Instant::now();\nprintln!(\"normal solving result:\\n\");\n\nfor i in 0..n {\n    for j in 0..n {\n        print!(\"{:?} \", result[i][j]);\n    }\n   println!(\"\");\n}\nlet pass = time2.duration_since(time1);\nprintln!(\"{:?}\\n\",pass);\n\nprintln!(\"concurrency solving solution:\\n\");\n\n\n// start the concurrency\n\nlet mut handles = vec![];\n\nlet arr1 = Arc::new(RwLock::new(arr1));\nlet arr2 = Arc::new(RwLock::new(arr2));\n\nlet count_time1 = Instant::now();\nfor i in 0..n {\n    for j in 0..n {\n        let arr1 = arr1.clone();\n        let arr2 = arr2.clone();\n        let handle = thread::spawn(move || {\n            let mut count = 0;\n            let arr1 = arr1.try_read().unwrap();\n            let arr2 = arr2.try_read().unwrap();\n            for k in 0..m {\n                count = count + arr1[i][k] * arr2[k][j];\n            }\n            count\n        });\n        handles.push(handle);\n    }\n}\nlet count_time2 = Instant::now();\nlet pass_time = count_time2.duration_since(count_time1);\n</code></pre>\n"}, {"tags": ["multithreading", "algorithm", "rust", "lifetime", "type-systems"], "comments": [{"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "edited": false, "score": 1, "creation_date": 1463823373, "post_id": 37360514, "comment_id": 62236302, "body": "Don&#39;t quote me, but I think the issue is that since Rust doesn&#39;t really understand thread lifetimes, it&#39;s scared that the threads outlive the function and thus the borrow of visited and friends. You may want to try with <code>crossbeam::scoped</code> from the <code>crossbeam</code> crate.  Also, I&#39;m not entirely sure you&#39;re actually doing anything in parallel since you spawn one thread per function, do it at the end of the function, and join before returning."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1463840061, "post_id": 37360514, "comment_id": 62241148, "body": "<i>Rust doesn&#39;t really understand thread lifetimes</i> \u2014 not the best way of putting it. It <i>does</i> understand thread lifetimes, specifically it understands that <code>thread::spawn</code> requires all items given to it meet the <code>&#39;static</code> lifetime because spawned threads <b>may</b> outlive their parent thread. As you mention, tools like crossbeam ensure that the thread <i>does not</i> outlive the parent."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "edited": false, "score": 0, "creation_date": 1463840154, "post_id": 37360514, "comment_id": 62241178, "body": "@Jsor I believe that the idea is that the recursive call occurs in a thread, and the child call may spawn more threads (up to some global limit?). The code seems to be attempting to emulate a thread pool that never reuses the threads."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1463840367, "post_id": 37360514, "comment_id": 62241239, "body": "Please take the time to produce an <a href=\"/help/mcve\">MCVE</a>, emphasis on the <b>M</b>inimal and <b>C</b>omplete. Right now, we cannot reproduce the error you state. For example, <code>CYCLE</code> and <code>NTHREADS</code> are undefined variables. Are they even needed to reproduce the problem? My arbitrary guess is that they aren&#39;t. The better the question you ask, the better answer you will get. I&#39;d bet that you could get the <b>entire</b> example down to 15 lines."}, {"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1463864912, "post_id": 37360514, "comment_id": 62248838, "body": "@Shepmaster Maybe a better  way to put it is &quot;Rust doesn&#39;t really understand that joins mark the end of lifetimes.&quot; But no, I&#39;m pretty much certain the code (as written) isn&#39;t parallel, it&#39;s just a really expensive function call."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "edited": false, "score": 0, "creation_date": 1463866527, "post_id": 37360514, "comment_id": 62249222, "body": "@Jsor yeah, I agree with your clarification with respect to <code>join</code>. And I must be crazy; not sure what I was seeing with the parallel aspect. ^_^"}], "owner": {"reputation": 19, "user_id": 5788334, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-bwJ72t5gpAA/AAAAAAAAAAI/AAAAAAAATXc/HagJapgu6tk/photo.jpg?sz=128", "display_name": "Tony Varghese", "link": "https://stackoverflow.com/users/5788334/tony-varghese"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 178, "favorite_count": 0, "answer_count": 0, "score": 0, "last_activity_date": 1463819158, "creation_date": 1463818544, "last_edit_date": 1463819158, "question_id": 37360514, "link": "https://stackoverflow.com/questions/37360514/lifetime-issues-during-recursive-calls", "title": "Lifetime issues during recursive calls", "body": "<p>I am trying to implement a BFS algorithm to check whether a graph is a tree using Rust. I am an absolute beginner in Rust and I am confused with lifetime specification when it comes to threads. My code currently looks like this:</p>\n\n<p>The graph is passed as adjacency matrix named <code>adj_mat</code> which is a vector of vectors. Nodes visited will be marked as <code>true</code> in the <code>visited</code> vector. And the <code>parent</code> vector stores the parent of each node visited. The function <code>is_tree_parallel</code> will call the <code>bfs</code> function, which will then spawn a new thread for each child of the current thread. This algorithm works fine when I use <code>adj_mat</code>, <code>visited</code> and <code>parent</code> vector as global variables.</p>\n\n<pre><code>fn is_tree_parallel(adj_mat: &amp;Vec&lt;Vec&lt;usize&gt;&gt;, nodes: usize) {\n\n    let mut visited = vec![false; nodes + 1];\n    let mut parent = vec![0; nodes + 1];\n\n    let mut node_current = 1;\n\n    bfs(&amp;mut parent, &amp;adj_mat, &amp;mut visited, node_current, nodes);\n\n    // Do checking of visited array and CYCLE (shared memory variable used to \n    // detect cycle) and decide whether it is a tree  \n\n}\n</code></pre>\n\n<p>When I use below function to spawn new threads, this is giving me errors like:</p>\n\n<pre><code>cannot infer an appropriate lifetime due to conflicting requirements first, the lifetime cannot outlive the expression.\n</code></pre>\n\n<p>I understand that this is due to the recursive calls inside the <code>bfs</code> function. </p>\n\n<pre><code>fn bfs(mut parent: &amp;mut Vec&lt;usize&gt;, adj_mat: &amp;Vec&lt;Vec&lt;usize&gt;&gt;, mut visited: &amp;mut Vec&lt;bool&gt;, mut currentnode: usize, nodes: usize) {\n\n    visited[currentnode as usize] = true;\n\n    for i in 0..nodes {\n        if adj_mat[currentnode - 1][i as usize] == 1 &amp;&amp; (i + 1) != parent[currentnode]  {\n            if visited[i + 1 ] {\n              CYCLE = true;\n              return;\n            } else {\n                if RUNTHREADS &lt; NTHREADS {     //RUNTHREADS and NTHREADS will limit the number of threads spawned\n                    RUNTHREADS += 1;\n\n                    let mut visited = Arc::new(Mutex::new(visited));\n                    let mut parent = Arc::new(Mutex::new(parent));\n                    let adj_mat = Arc::new(adj_mat);\n\n                    let visited = visited.clone();\n                    let parent = parent.clone();\n                    let adj_mat = adj_mat.clone();\n\n                    thread::spawn(move || {\n                        let visited = visited.lock().unwrap();\n                        let parent = parent.lock().unwrap();\n                        bfs(&amp;mut parent, &amp;adj_mat, &amp;mut visited, i, nodes);\n                    }).join();\n\n                } else {\n                    bfs(parent, adj_mat, visited, i, nodes);\n                }\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>The error that I receive:</p>\n\n<pre><code>src/main.rs:134:69: 134:76 error: cannot infer an appropriate lifetime due to conflicting requirements [E0495]\nsrc/main.rs:134                             let mut visited = Arc::new(Mutex::new(visited));\nsrc/main.rs:134:49: 134:57 note: first, the lifetime cannot outlive the expression at 134:48...\nsrc/main.rs:134                             let mut visited = Arc::new(Mutex::new(visited));\nsrc/main.rs:134:49: 134:57 note: ...so that a type/lifetime parameter is in scope here\nsrc/main.rs:134                             let mut visited = Arc::new(Mutex::new(visited));\nsrc/main.rs:134:49: 134:78 note: but, the lifetime must be valid for the call at 134:48...\nsrc/main.rs:134                             let mut visited = Arc::new(Mutex::new(visited));\nsrc/main.rs:134:58: 134:77 note: ...so that argument is valid for the call\nsrc/main.rs:134                             let mut visited = Arc::new(Mutex::new(visited));\n</code></pre>\n\n<p>Am I doing it correct? How can I correct them? Is there any other way to achieve these recursive calls using threads? </p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "edited": false, "score": 1, "creation_date": 1463780098, "post_id": 37356131, "comment_id": 62227713, "body": "I think that&#39;s not possible. <code>str::replace</code> returns a <code>String</code>, someone must own this string..."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1463780181, "post_id": 37356131, "comment_id": 62227744, "body": "I think you could simplify your code further to create a <a href=\"http://stackoverflow.com/help/mcve\">MCVE</a>. For example: <code>nom</code> has probably nothing to do with your problem and thus this parsing code could be removed."}, {"owner": {"reputation": 640, "user_id": 219614, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/703ea9b0434a9b328ec5b89d78ab2740?s=128&d=identicon&r=PG", "display_name": "Luke Cycon", "link": "https://stackoverflow.com/users/219614/luke-cycon"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1463780371, "post_id": 37356131, "comment_id": 62227808, "body": "@Lukas Yep, sorry about that. @malbarbo You&#39;re right! I&#39;m just being dense. The <code>String</code> is the heap allocated byte array I&#39;m looking for. This is only doable with <code>String</code>"}, {"owner": {"reputation": 640, "user_id": 219614, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/703ea9b0434a9b328ec5b89d78ab2740?s=128&d=identicon&r=PG", "display_name": "Luke Cycon", "link": "https://stackoverflow.com/users/219614/luke-cycon"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1463786158, "post_id": 37356131, "comment_id": 62229410, "body": "@Shepmaster You have your minimum reproducible example"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 4, "last_activity_date": 1578323524, "last_edit_date": 1578323524, "creation_date": 1463791298, "answer_id": 37357759, "question_id": 37356131, "link": "https://stackoverflow.com/questions/37356131/replacing-part-of-str-in-rust-vec/37357759#37357759", "title": "Replacing part of &amp;str in Rust Vec", "body": "<p>If you are worried about needlessly allocating strings, there is the possibility of using a <a href=\"https://doc.rust-lang.org/std/borrow/enum.Cow.html\" rel=\"nofollow noreferrer\"><code>Cow</code></a>:</p>\n\n<pre><code>use std::borrow::Cow;\n\nstruct JSONPointer&lt;'a&gt; {\n    segments: Vec&lt;Cow&lt;'a, str&gt;&gt;,\n}\n\nfn replace_if&lt;'a&gt;(s: Cow&lt;'a, str&gt;, from: &amp;str, to: &amp;str) -&gt; Cow&lt;'a, str&gt; {\n    if s.contains(from) {\n        Cow::Owned(s.replace(from, to))\n    } else {\n        s\n    }\n}\n\nfn build_json_pointer&lt;'a&gt;(s: &amp;[&amp;'a str]) -&gt; JSONPointer&lt;'a&gt; {\n    let segments = s\n        .iter()\n        .copied()\n        .map(Cow::Borrowed)\n        .map(|x| replace_if(x, \"~1\", \"/\"))\n        .map(|x| replace_if(x, \"~0\", \"~\"))\n        .collect();\n\n    JSONPointer { segments }\n}\n\nfn main() {\n    let v = vec![\"foo\", \"bar\", \"baz~1\"];\n    let p = build_json_pointer(&amp;v);\n\n    println!(\"Hello world! {:?}\", p.segments);\n}\n</code></pre>\n\n<p>This has the advantage that it doesn't need to allocate <em>any</em> memory when no replacements need to be made, but has the downside that each pattern has be be searched twice. It could potentially be even more efficient with a structure like a <a href=\"https://en.wikipedia.org/wiki/Rope_(data_structure)\" rel=\"nofollow noreferrer\">rope</a>.</p>\n\n<p>For your original case that accepted a <code>String</code>, you could do something similar without <code>Cow</code> by keeping the original <code>String</code> and not unconditionally replacing it:</p>\n\n<pre><code>struct JSONPointer {\n    segments: Vec&lt;String&gt;,\n}\n\nfn replace_if(s: String, from: &amp;str, to: &amp;str) -&gt; String {\n    if s.contains(from) {\n        s.replace(from, to)\n    } else {\n        s\n    }\n}\n\nfn build_json_pointer(s: &amp;[String]) -&gt; JSONPointer {\n    let segments = s\n        .iter()\n        .cloned()\n        .map(|x| replace_if(x, \"~1\", \"/\"))\n        .map(|x| replace_if(x, \"~0\", \"~\"))\n        .collect();\n\n    JSONPointer { segments }\n}\n\nfn main() {\n    let v = vec![\"foo\".to_string(), \"bar\".to_string(), \"baz~1\".to_string()];\n    let p = build_json_pointer(&amp;v);\n\n    println!(\"Hello world! {:?}\", p.segments);\n}\n</code></pre>\n"}], "owner": {"reputation": 640, "user_id": 219614, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/703ea9b0434a9b328ec5b89d78ab2740?s=128&d=identicon&r=PG", "display_name": "Luke Cycon", "link": "https://stackoverflow.com/users/219614/luke-cycon"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1130, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1578323524, "creation_date": 1463779645, "last_edit_date": 1463786131, "question_id": 37356131, "link": "https://stackoverflow.com/questions/37356131/replacing-part-of-str-in-rust-vec", "title": "Replacing part of &amp;str in Rust Vec", "body": "<p>I have written the following code:</p>\n\n<pre><code>use std::str::{from_utf8};\n\nstruct JSONPointer {\n    segments: Vec&lt;String&gt;\n}\n\nfn build_json_pointer(s: Vec&lt;String&gt;) -&gt; JSONPointer {\n    JSONPointer { segments: s.iter().map(|x| x.replace(\"~1\", \"/\").replace(\"~0\", \"~\")).collect() }\n}\n\nfn main() {\n    let v = vec![\"foo\".to_string(), \"bar\".to_string(), \"baz~1\".to_string()];\n    let p = build_json_pointer(v);\n\n    println!(\"Hello world! {:?}\", p.segments);\n}\n</code></pre>\n\n<p>This all works well with <code>String</code>s, but ideally my <code>JSONPointer</code> struct would contain a <code>Vec&lt;&amp;str&gt;</code> (if only for learning purposes). The issue I run into takes place in the call to <code>map</code> the replaces a few reserved strings. No matter the combination of conversions I use, I am always told that my <code>borrowed value does not live long enough</code>.</p>\n\n<p>I understand that I am taking a reference to a local value and trying to return it (leading to a possible use-after-delete error), but I can't seem to find a way to take a copy of the string.</p>\n\n<p><strong>EDIT:</strong> Updated to minimum reproducible form</p>\n\n<p>I realize now that when I was referring to wanting a \"copy\" (heap allocated), that's exactly what <code>String</code> is. There was talk about a cleaner way of doing this possibly though.</p>\n"}, {"tags": ["rust", "sdl", "sdl-2"], "comments": [{"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1463767723, "post_id": 37350854, "comment_id": 62221848, "body": "Why the sdl-2 requirement? Also it appears that what you want to build could be misused as a key logger."}, {"owner": {"reputation": 517, "user_id": 1600598, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/OATKF.jpg?s=128&g=1", "display_name": "Yury Solovyov", "link": "https://stackoverflow.com/users/1600598/yury-solovyov"}, "reply_to_user": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1463918749, "post_id": 37350854, "comment_id": 62259501, "body": "I&#39;d be glad to use anything to subscribe to system-wide shortcut events, if that would be more secure. I also chrose sdl2 because it is obviouly newer , but if there is a way to do what I want with sdl1 I&#39;d be happy to switch"}], "answers": [{"comments": [{"owner": {"reputation": 517, "user_id": 1600598, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/OATKF.jpg?s=128&g=1", "display_name": "Yury Solovyov", "link": "https://stackoverflow.com/users/1600598/yury-solovyov"}, "edited": false, "score": 0, "creation_date": 1466685890, "post_id": 37990614, "comment_id": 63427642, "body": "And even if I&#39;ll create video subsystem, I would only be able to listen for events that belong to the associated window, right?"}, {"owner": {"reputation": 118, "user_id": 2207361, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xcBwU.png?s=128&g=1", "display_name": "user2207361", "link": "https://stackoverflow.com/users/2207361/user2207361"}, "reply_to_user": {"reputation": 517, "user_id": 1600598, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/OATKF.jpg?s=128&g=1", "display_name": "Yury Solovyov", "link": "https://stackoverflow.com/users/1600598/yury-solovyov"}, "edited": false, "score": 0, "creation_date": 1466691622, "post_id": 37990614, "comment_id": 63432265, "body": "@YurySolovyov I can not tell right now because it requires more thorough studying of SDL sources."}], "tags": [], "owner": {"reputation": 118, "user_id": 2207361, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xcBwU.png?s=128&g=1", "display_name": "user2207361", "link": "https://stackoverflow.com/users/2207361/user2207361"}, "is_accepted": true, "score": 1, "last_activity_date": 1466682103, "creation_date": 1466682103, "answer_id": 37990614, "question_id": 37350854, "link": "https://stackoverflow.com/questions/37350854/headless-sdl-event-handling/37990614#37990614", "title": "Headless SDL event handling", "body": "<p>I have similar situation (the need to pump/process events without creating a window) and from what I have understood from studying SDL2 sources it is currently impossible to pump events without video system being initialized (at least in version 2.0.4).</p>\n\n<p>Please see <a href=\"http://hg.libsdl.org/SDL/file/e12c38730512/src/events/SDL_events.c\" rel=\"nofollow\">http://hg.libsdl.org/SDL/file/e12c38730512/src/events/SDL_events.c</a> (I used SDL 2.0.4), function <strong>SDL_PumpEvents</strong>, lines 397-402. That code checks whether video system was initialized and if it was calls <strong>PumpEvents</strong> method for that window system (I suppose it calls appropriate implementation for X11/Wayland/etc).</p>\n"}], "owner": {"reputation": 517, "user_id": 1600598, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/OATKF.jpg?s=128&g=1", "display_name": "Yury Solovyov", "link": "https://stackoverflow.com/users/1600598/yury-solovyov"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 531, "favorite_count": 1, "accepted_answer_id": 37990614, "answer_count": 1, "score": 1, "last_activity_date": 1466682103, "creation_date": 1463759657, "question_id": 37350854, "link": "https://stackoverflow.com/questions/37350854/headless-sdl-event-handling", "title": "Headless SDL event handling", "body": "<p>Is it possible to listen for events in system using SDL without creating a window?\nI want my app to listen on events in a system, and when certain shortcuts are pressed, I'll create a window with actual UI.</p>\n\n<pre><code>extern crate sdl2;\n\nfn main() {\n    let ctx = sdl2::init().unwrap();\n\n    let mut event_pump = ctx.event_pump().unwrap();\n\n    event_pump.pump_events();\n\n    for event in event_pump.wait_iter() {\n        match event {\n            _ =&gt; { print!(\"event\") }\n        }\n    }\n}\n</code></pre>\n\n<p>If this is not possible, is there a cross-platform way to listen for global shortcuts or I have to re-implement it for every platform myself?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1463756071, "post_id": 37349820, "comment_id": 62215790, "body": "I know this question has been answered before, but I can&#39;t find the previous case. Feel free to close as duplicate when it&#39;s found."}, {"owner": {"reputation": 508, "user_id": 3920448, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/i5uSO.jpg?s=128&g=1", "display_name": "NeilShen", "link": "https://stackoverflow.com/users/3920448/neilshen"}, "edited": false, "score": 0, "creation_date": 1463758439, "post_id": 37349820, "comment_id": 62216702, "body": "Thank you for your greate answer! It really helps a LOT!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1463755772, "last_edit_date": 1495542700, "creation_date": 1463755772, "answer_id": 37349820, "question_id": 37347695, "link": "https://stackoverflow.com/questions/37347695/error-when-a-trait-is-used-as-a-type-but-not-when-used-as-a-bound-in-a-where-cla/37349820#37349820", "title": "Error when a trait is used as a type but not when used as a bound in a where clause", "body": "<p>Short answer: the two pieces of code are not equivalent, the second one doesn't really even make sense. You probably want the first one.</p>\n\n<p>Let's look at a simpler example:</p>\n\n<pre><code>trait Foo {\n    fn foo(&amp;self) {}\n}\n\nfn in_where&lt;T&gt;(x: T)\n    where T: Foo\n{\n    x.foo()\n}\n\nfn in_declaration&lt;T: Foo&gt;(x: T) {\n    x.foo()\n}\n\nfn in_type(x: Foo) {\n    x.foo()\n}\n</code></pre>\n\n<p>This captures the original case that uses the <code>where</code>, adds an identical case that places the trait bound in the generic declaration, and includes the failing case where the trait is directly used as the argument type.</p>\n\n<p>The key point here is that the first two versions <strong>are not</strong> the same as the third. The working versions state that <em>any</em> type may be passed to the function by value, so long as it implements the <code>Foo</code> trait. The non-working version states that it accepts exactly one type, the trait's type itself.</p>\n\n<p>As the compiler states:</p>\n\n<blockquote>\n  <p>the trait <code>core::marker::Sized</code> is not implemented for the type <code>Foo + 'static</code></p>\n  \n  <p><code>Foo + 'static</code> does not have a constant size known at compile-time; all local variables must have a statically known size.</p>\n</blockquote>\n\n<p>When one of the working versions is used, the compiler generates a version of the code for every concrete type used (a process called <em>monomorphization</em>). It knows how much space the type requires and can appropriately allocate space on the stack to accommodate it.</p>\n\n<p>However, a trait creates an <em>unsized type</em> of the same name as the trait. The compiler <strong>doesn't</strong> know how much space to allocate, so it would be impossible to actually produce machine code for that function.</p>\n\n<p>The trait type can be used, but only through a level of indirection (a <em>trait object</em>). Two common examples would be <code>&amp;Foo</code> and <code>Box&lt;Foo&gt;</code>. Both of these indirectly access the underlying trait through a pointer. Since a pointer has a known size, code can be generated. </p>\n\n<pre><code>fn in_type_ref(x: &amp;Foo) {\n    x.foo()\n}\n\nfn in_type_box(x: Box&lt;Foo&gt;) {\n    x.foo()\n}\n</code></pre>\n\n<p>Further reading:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/27567849/155423\">What makes something a &quot;trait object&quot;?</a></li>\n<li><a href=\"https://stackoverflow.com/q/34438755/155423\">Why would I implement methods on a trait instead of as part of the trait?</a></li>\n<li><a href=\"https://stackoverflow.com/q/25740916/155423\">How do you actually use dynamically sized types in Rust?</a></li>\n</ul>\n\n<hr>\n\n<blockquote>\n  <p>Why does the Rust complier require <code>'static</code></p>\n</blockquote>\n\n<p>It doesn't. There's an implicit <code>'static</code> bound added to the trait type because you haven't specified a lifetime. The complete type of the argument is <code>Foo + 'static</code>.</p>\n"}], "owner": {"reputation": 508, "user_id": 3920448, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/i5uSO.jpg?s=128&g=1", "display_name": "NeilShen", "link": "https://stackoverflow.com/users/3920448/neilshen"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1403, "favorite_count": 0, "accepted_answer_id": 37349820, "answer_count": 1, "score": 1, "last_activity_date": 1593112641, "creation_date": 1463750095, "last_edit_date": 1593112641, "question_id": 37347695, "link": "https://stackoverflow.com/questions/37347695/error-when-a-trait-is-used-as-a-type-but-not-when-used-as-a-bound-in-a-where-cla", "title": "Error when a trait is used as a type but not when used as a bound in a where clause", "body": "<p>It seems that the Rust compiler has different behaviour on <code>where</code> clauses.</p>\n<pre><code>mod sub {\n    use std::mem;\n\n    static mut FF : *const Foo = &amp;NopFoo;\n\n    pub trait Foo: Send + Sync {\n        fn foo(&amp;self);\n    }\n\n    pub struct NopFoo;\n\n    impl Foo for NopFoo {\n        fn foo(&amp;self) { println!(&quot;Nop&quot;); }\n    }\n\n    pub struct HelloFoo {\n        pub num: i64,\n    }\n\n    impl Foo for HelloFoo {\n        fn foo(&amp;self) { println!(&quot;Hello, {}&quot;, self.num ); }\n    }\n\n    pub fn set_ff&lt;M&gt;(make_foo: M) -&gt; bool\n        where M: FnOnce() -&gt; Box&lt;Foo&gt; // &lt;== Here\n    {\n        unsafe {\n            FF = mem::transmute(make_foo());\n        }\n        false\n    }\n\n    pub fn get_ff() -&gt; Option&lt;&amp;'static Foo&gt; {\n        Some(unsafe { &amp;*FF })\n    }\n}\n\nfn main() {\n    sub::get_ff().unwrap().foo();\n\n    let f = sub::HelloFoo{num: 42};\n    sub::set_ff(|| Box::new(f));\n\n    sub::get_ff().unwrap().foo();\n}\n</code></pre>\n<p>(<a href=\"https://play.rust-lang.org/?gist=0ad2281fb636d62a50441203681c63d0&amp;version=nightly&amp;backtrace=1\" rel=\"nofollow noreferrer\">Playground</a>)</p>\n<p>With a <code>where</code> clause it works fine, prints:</p>\n<pre class=\"lang-none prettyprint-override\"><code>Nop\nHello, 42\n</code></pre>\n<hr />\n<p>If I remove the <code>where</code> clause from <code>sub::set_ff()</code> the Rust compiler reports errors <code>E0277</code> and <code>E0308</code>:</p>\n<pre><code>mod sub {\n    use std::mem;\n\n    static mut FF : *const Foo = &amp;NopFoo;\n\n    pub trait Foo: Send + Sync {\n        fn foo(&amp;self);\n    }\n\n    pub struct NopFoo;\n\n    impl Foo for NopFoo {\n        fn foo(&amp;self) { println!(&quot;Nop&quot;); }\n    }\n\n    pub struct HelloFoo {\n        pub num: i64,\n    }\n\n    impl Foo for HelloFoo {\n        fn foo(&amp;self) { println!(&quot;Hello, {}&quot;, self.num ); }\n    }\n\n    pub fn set_ff(make_foo: Box&lt;Foo&gt;) -&gt; bool  // &lt;== Here\n    {\n        unsafe {\n            FF = mem::transmute(make_foo());\n        }\n        false\n    }\n\n    pub fn get_ff() -&gt; Option&lt;&amp;'static Foo&gt; {\n        Some(unsafe { &amp;*FF })\n    }\n}\n\nfn main() {\n    sub::get_ff().unwrap().foo();\n\n    let f = sub::HelloFoo{num: 42};\n    sub::set_ff(|| Box::new(f));\n\n    sub::get_ff().unwrap().foo();\n}\n</code></pre>\n<p>(<a href=\"https://play.rust-lang.org/?gist=8c94e5103a222e845cda2e5de23630de&amp;version=nightly&amp;backtrace=1\" rel=\"nofollow noreferrer\">Playground</a>)</p>\n<p>I thought it should work fine, but the compiler reports an error instead:</p>\n<pre class=\"lang-none prettyprint-override\"><code>error: the trait bound `std::ops::FnOnce() -&gt; Box&lt;sub::Foo + 'static&gt; + 'static: std::marker::Sized` is not satisfied [--explain E0277]\n  --&gt; &lt;anon&gt;:24:19\n24 |&gt;     pub fn set_ff(make_foo: FnOnce() -&gt; Box&lt;Foo&gt;) -&gt; bool\n   |&gt;                   ^^^^^^^^\nnote: `std::ops::FnOnce() -&gt; Box&lt;sub::Foo + 'static&gt; + 'static` does not have a constant size known at compile-time\nnote: all local variables must have a statically known size\n\nerror: mismatched types [--explain E0308]\n  --&gt; &lt;anon&gt;:41:17\n41 |&gt;     sub::set_ff(|| Box::new(f));\n   |&gt;                 ^^^^^^^^^^^^^^ expected trait std::ops::FnOnce, found closure\nnote: expected type `std::ops::FnOnce() -&gt; Box&lt;sub::Foo + 'static&gt; + 'static`\nnote:    found type `[closure@&lt;anon&gt;:41:17: 41:31 f:_]`\n</code></pre>\n<p>Why does the Rust complier require <code>'static</code> and <code>Sized</code> in the second one and why does the first one work?</p>\n<p>My OS and Rust versions:</p>\n<pre class=\"lang-none prettyprint-override\"><code>\u279c  ~ uname -a\nLinux laptop 4.2.0-35-generic #40~14.04.1-Ubuntu SMP Fri Mar 18 16:37:35 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux\n\u279c  ~ rustc --version\nrustc 1.10.0-nightly (9c6904ca1 2016-05-18)\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 41983, "user_id": 866732, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/f09f0253204000d6083ed1de21afc6fd?s=128&d=identicon&r=PG", "display_name": "WiSaGaN", "link": "https://stackoverflow.com/users/866732/wisagan"}, "edited": false, "score": 0, "creation_date": 1463749706, "post_id": 37347504, "comment_id": 62211261, "body": "Has the extension been implemented in nightly now?"}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "reply_to_user": {"reputation": 41983, "user_id": 866732, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/f09f0253204000d6083ed1de21afc6fd?s=128&d=identicon&r=PG", "display_name": "WiSaGaN", "link": "https://stackoverflow.com/users/866732/wisagan"}, "edited": false, "score": 0, "creation_date": 1463749824, "post_id": 37347504, "comment_id": 62211346, "body": "No, and in fact the restricted form is still available only in nightly. I believe the intention is to let that bake for a bit/iron out the bugs before diving into the more flexible/powerful versions."}, {"owner": {"reputation": 65308, "user_id": 2556117, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/cde5c1d8e38358013a16a3f7a686ae87?s=128&d=identicon&r=PG", "display_name": "Fraser", "link": "https://stackoverflow.com/users/2556117/fraser"}, "edited": false, "score": 1, "creation_date": 1463749869, "post_id": 37347504, "comment_id": 62211373, "body": "A clear answer: thanks.  I guess the error message could be a bit clearer if it said something like there <i>could be</i> conflicting implementations rather than implying there already are."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "reply_to_user": {"reputation": 65308, "user_id": 2556117, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/cde5c1d8e38358013a16a3f7a686ae87?s=128&d=identicon&r=PG", "display_name": "Fraser", "link": "https://stackoverflow.com/users/2556117/fraser"}, "edited": false, "score": 0, "creation_date": 1463750089, "post_id": 37347504, "comment_id": 62211510, "body": "@Fraser, yeah, definitely, I guess it may be covered by <a href=\"https://github.com/rust-lang/rust/issues/23980\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/23980</a> (I&#39;ll write a comment summarising this particular piece of confusion there)."}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 18, "last_activity_date": 1463750675, "last_edit_date": 1463750675, "creation_date": 1463749490, "answer_id": 37347504, "question_id": 37347311, "link": "https://stackoverflow.com/questions/37347311/how-is-there-a-conflicting-implementation-of-from-when-using-a-generic-type/37347504#37347504", "title": "How is there a conflicting implementation of `From` when using a generic type?", "body": "<p>The problem here is someone may implement <code>Storage</code> so that the <code>From</code> impl you have written overlaps with the impl in the standard library of <code>impl&lt;T&gt; From&lt;T&gt; for T</code> (that is, anything can be converted to itself).</p>\n\n<p>Specifically,</p>\n\n<pre><code>struct Tricky;\n\nimpl Storage for Tricky {\n    type Error = MyError&lt;Tricky&gt;;\n}\n</code></pre>\n\n<p>(The set-up here means this doesn't actually compile&mdash;<code>MyError&lt;Tricky&gt;</code> is infinitely large&mdash;but that error is unrelated to the reasoning about <code>impl</code>s/coherence/overlap, and indeed small changes to <code>MyError</code> can make it compile without changing the fundamental problem, e.g. adding a <code>Box</code> like <code>StorageProblem(Box&lt;S::Error&gt;),</code>.)</p>\n\n<p>If we substitute <code>Tricky</code> in place of <code>S</code> in your impl, we get:</p>\n\n<pre><code>impl From&lt;MyError&lt;Tricky&gt;&gt; for MyError&lt;Tricky&gt; {\n    ...\n}\n</code></pre>\n\n<p>This <code>impl</code> exactly matches the self-conversion one with <code>T</code> == <code>MyError&lt;Tricky&gt;</code>, and hence the compiler wouldn't know which one to choose. Instead of making an arbitrary/random choice, the Rust compiler avoids situations like this, and thus the original code must be rejected due to this risk.</p>\n\n<p>This coherence restriction can definitely be annoying, and is one of reasons that <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1210-impl-specialization.md\" rel=\"noreferrer\">specialisation</a> is a much-anticipated feature: essentially allows manually instructing the compiler how to handle overlap... at least, <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1210-impl-specialization.md#the-lattice-rule\" rel=\"noreferrer\">one of the extensions</a> to the current restricted form allows that.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 8, "last_activity_date": 1610469331, "last_edit_date": 1610469331, "creation_date": 1507562838, "answer_id": 46649962, "question_id": 37347311, "link": "https://stackoverflow.com/questions/37347311/how-is-there-a-conflicting-implementation-of-from-when-using-a-generic-type/46649962#46649962", "title": "How is there a conflicting implementation of `From` when using a generic type?", "body": "<p>A workaround for the coherence issue is to use some other method or trait.</p>\n<p>In the specific posted example involving <code>Result</code>s, you can use <a href=\"https://doc.rust-lang.org/std/result/enum.Result.html#method.map_err\" rel=\"nofollow noreferrer\"><code>Result::map_err</code></a> to perform the conversion yourself. You can then use the transformed <code>Result</code>  with <code>?</code>:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn example&lt;S: Storage&gt;(s: S) -&gt; Result&lt;i32, MyError&lt;S&gt;&gt; {\n    s.do_a_thing().map_err(MyError::StorageProblem)?;\n    Ok(42)\n}\n</code></pre>\n<p>This solution is also valuable when there are error variants that have the same underlying <code>Error</code>, such as if you want to separate &quot;file opening&quot; and &quot;file reading&quot; errors, both of which are <code>io::Error</code>.</p>\n<p>In other cases, you might need to create a brand new method on your type or an alternate trait:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>struct Wrapper&lt;T&gt;(T);\n\n// Instead of this\n//\n// impl&lt;T, U&gt; From&lt;Wrapper&lt;T&gt;&gt; for Wrapper&lt;U&gt;\n// where\n//     T: Into&lt;U&gt;,\n// {\n//     fn from(other: Wrapper&lt;T&gt;) -&gt; Self {\n//         Wrapper(other.0.into())\n//     }\n// }\n\n// Use an inherent method\n\nimpl&lt;T&gt; Wrapper&lt;T&gt; {\n    fn from_another&lt;U&gt;(other: Wrapper&lt;U&gt;) -&gt; Self\n    where\n        U: Into&lt;T&gt;,\n    {\n        Wrapper(other.0.into())\n    }\n}\n\n// Or create your own trait\n\ntrait MyFrom&lt;T&gt; {\n    fn my_from(other: T) -&gt; Self;\n}\n\nimpl&lt;T, U&gt; MyFrom&lt;Wrapper&lt;T&gt;&gt; for Wrapper&lt;U&gt;\nwhere\n    T: Into&lt;U&gt;,\n{\n    fn my_from(other: Wrapper&lt;T&gt;) -&gt; Self {\n        Wrapper(other.0.into())\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 65308, "user_id": 2556117, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/cde5c1d8e38358013a16a3f7a686ae87?s=128&d=identicon&r=PG", "display_name": "Fraser", "link": "https://stackoverflow.com/users/2556117/fraser"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4239, "favorite_count": 5, "accepted_answer_id": 37347504, "answer_count": 2, "score": 26, "last_activity_date": 1610469331, "creation_date": 1463748881, "last_edit_date": 1564500938, "question_id": 37347311, "link": "https://stackoverflow.com/questions/37347311/how-is-there-a-conflicting-implementation-of-from-when-using-a-generic-type", "title": "How is there a conflicting implementation of `From` when using a generic type?", "body": "<p>I'm trying to implement an error enum which can contain an error associated with one of our traits like this:</p>\n\n<pre><code>trait Storage {\n    type Error;\n}\n\nenum MyError&lt;S: Storage&gt; {\n    StorageProblem(S::Error),\n}\n</code></pre>\n\n<p>I have also tried to implement the <code>From</code> trait to allow construction of <code>MyError</code> from an instance of a <code>Storage::Error</code>:</p>\n\n<pre><code>impl&lt;S: Storage&gt; From&lt;S::Error&gt; for MyError&lt;S&gt; {\n    fn from(error: S::Error) -&gt; MyError&lt;S&gt; {\n        MyError::StorageProblem(error)\n    }\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=30ff7a5205117f0a22c58b965609bd95&amp;version=stable\" rel=\"noreferrer\">playground</a>)</p>\n\n<p>However this fails to compile:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0119]: conflicting implementations of trait `std::convert::From&lt;MyError&lt;_&gt;&gt;` for type `MyError&lt;_&gt;`:\n --&gt; src/lib.rs:9:1\n  |\n9 | impl&lt;S: Storage&gt; From&lt;S::Error&gt; for MyError&lt;S&gt; {\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: conflicting implementation in crate `core`:\n          - impl&lt;T&gt; std::convert::From&lt;T&gt; for T;\n</code></pre>\n\n<p>I don't understand why the compiler reckons this has already been implemented.  The error message is telling me that there's already an implementation of <code>From&lt;MyError&lt;_&gt;&gt;</code> (which there is), but I'm not trying to implement that here - I'm trying to implement <code>From&lt;S::Error&gt;</code> and <code>MyError</code> is not the same type as <code>S::Error</code> from what I can see.</p>\n\n<p>Am I missing something fundamental to generics here?</p>\n"}, {"tags": ["generics", "rust"], "answers": [{"comments": [{"owner": {"reputation": 87, "user_id": 2101550, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/H93xI.jpg?s=128&g=1", "display_name": "John", "link": "https://stackoverflow.com/users/2101550/john"}, "edited": false, "score": 0, "creation_date": 1463698357, "post_id": 37335194, "comment_id": 62188373, "body": "I got it to work but I had to change the &quot;asset&quot; variable in the second example to be mutable for the load function to work correctly."}, {"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "reply_to_user": {"reputation": 87, "user_id": 2101550, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/H93xI.jpg?s=128&g=1", "display_name": "John", "link": "https://stackoverflow.com/users/2101550/john"}, "edited": false, "score": 0, "creation_date": 1463698703, "post_id": 37335194, "comment_id": 62188475, "body": "That makes sense, <code>load</code> will modify <code>self</code>."}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "edited": false, "score": 2, "creation_date": 1463709615, "post_id": 37335194, "comment_id": 62191131, "body": "Tiny note: every fn deccared in an impl block is an associated fn. we have a more specific name for those that take self, methods, but methods are associated functions."}, {"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "reply_to_user": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "edited": false, "score": 0, "creation_date": 1463746181, "post_id": 37335194, "comment_id": 62208867, "body": "@SteveKlabnik Thanks Steve. I updated the answer and this lapse was removed."}], "tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 5, "last_activity_date": 1463745651, "last_edit_date": 1463745651, "creation_date": 1463697660, "answer_id": 37335194, "question_id": 37335021, "link": "https://stackoverflow.com/questions/37335021/can-i-use-generic-function-arguments-in-rust-to-create-new-variables/37335194#37335194", "title": "Can I use generic function arguments in Rust to create new variables?", "body": "<p>In C++ when you declare a variable like <code>T asset;</code> you are assuming that <code>T</code> has a default constructor (compile time version of duck typing). It is an compiler error to instantiated <code>T</code> with a type that does not have a default constructor, but it's ok if no such instantiation happens.</p>\n\n<p>In Rust you cannot \"assume\" that a type parameter supports an operation. You have to specify the supported operations with bounds on the type parameter.</p>\n\n<p>That said, you have to options:</p>\n\n<p><strong>Define your own constructor like associated function in <code>AssetTrait</code></strong></p>\n\n<p>For example, you can declare <code>load</code> as an associated function that do not take a <code>self</code> parameter and returns <code>Self</code>, and call <code>T::load(path)</code> to instantiate <code>T</code>:</p>\n\n<pre><code>use std::collections::HashMap;\n\ntrait AssetTrait {\n    fn load(path: String) -&gt; Self;\n}\n\nstruct AssetManager {\n    assets: HashMap&lt;String, Box&lt;AssetTrait + 'static&gt;&gt;,\n}\n\nimpl AssetManager {\n    fn new() -&gt; AssetManager {\n        let asset_manager = AssetManager { assets: HashMap::new() };\n        return asset_manager;\n    }\n\n    fn load&lt;T&gt;(&amp;mut self, id: String, path: String)\n        where T: AssetTrait + 'static\n    {\n        let asset = T::load(path);\n        self.assets.insert(id, Box::new(asset));\n    }\n}\n</code></pre>\n\n<p><strong>Use a predefined trait that has a constructor like associated function</strong> </p>\n\n<p>In Rust, the <a href=\"https://doc.rust-lang.org/stable/std/default/trait.Default.html\" rel=\"nofollow\"><code>Default</code></a> trait is used for this purpose:</p>\n\n<pre><code>use std::collections::HashMap;\n\ntrait AssetTrait {\n    fn load(&amp;mut self, path: String);\n}\n\nstruct AssetManager {\n    assets: HashMap&lt;String, Box&lt;AssetTrait + 'static&gt;&gt;,\n}\n\nimpl AssetManager {\n    fn new() -&gt; AssetManager {\n        let asset_manager = AssetManager { assets: HashMap::new() };\n        return asset_manager;\n    }\n\n    fn load&lt;T&gt;(&amp;mut self, id: String, path: String)\n        where T: Default + AssetTrait + 'static\n    {\n        let mut asset = T::default();\n        asset.load(path);\n        self.assets.insert(id, Box::new(asset));\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 87, "user_id": 2101550, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/H93xI.jpg?s=128&g=1", "display_name": "John", "link": "https://stackoverflow.com/users/2101550/john"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2235, "favorite_count": 1, "accepted_answer_id": 37335194, "answer_count": 1, "score": 3, "last_activity_date": 1463747970, "creation_date": 1463696630, "last_edit_date": 1463747970, "question_id": 37335021, "link": "https://stackoverflow.com/questions/37335021/can-i-use-generic-function-arguments-in-rust-to-create-new-variables", "title": "Can I use generic function arguments in Rust to create new variables?", "body": "<p>Is it possible to create an instance of a generic parameter type in Rust?</p>\n\n<p>I'm coming from a C++ background where it's perfectly valid to use template types to create types in the actual function body.</p>\n\n<p>I'm trying to create a variable with type <code>T</code> in this function but I'm not sure how. </p>\n\n<p>I just want to be able to create an object of type <code>T</code>, load it, and then insert it into the <code>HashMap</code>:</p>\n\n<pre><code>fn load&lt;T&gt;(&amp;mut self, id: String, path: String)\n    where T: AssetTrait + 'static\n{\n    // let asset : T = T; this doesn't work?\n\n    asset.load(path);\n\n    // self.assets.insert(id, Box::new&lt;T&gt;(asset));\n}\n</code></pre>\n\n<p>Here is all my code:</p>\n\n<pre><code>trait AssetTrait {\n    fn load(&amp;self, path: String) {\n        // Do nothing\n        // Implement this in child asset object\n    }\n}\n\nstruct AssetManager {\n    assets: HashMap&lt;String, Box&lt;AssetTrait + 'static&gt;&gt;,\n}\n\nimpl AssetManager {\n    fn new() -&gt; AssetManager {\n        let asset_manager = AssetManager { assets: HashMap::new() };\n\n        return asset_manager;\n    }\n\n    fn load&lt;T&gt;(&amp;mut self, id: String, path: String)\n        where T: AssetTrait + 'static\n    {\n        // let asset : T = T; this doesn't work?\n\n        asset.load(path);\n\n        // self.assets.insert(id, Box::new&lt;T&gt;(asset));\n    }\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "edited": false, "score": 1, "creation_date": 1463694649, "post_id": 37334604, "comment_id": 62187073, "body": "This is similar to <a href=\"http://stackoverflow.com/q/37223741/5189607\">stackoverflow.com/q/37223741/5189607</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1463707809, "post_id": 37334604, "comment_id": 62190684, "body": "What benefit does your code (or users of your code) gain by limiting to only two concrete types?"}, {"owner": {"reputation": 2956, "user_id": 272689, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/d765f09f68f08a92a904571e7244fa87?s=128&d=identicon&r=PG", "display_name": "vimalloc", "link": "https://stackoverflow.com/users/272689/vimalloc"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1463709689, "post_id": 37334604, "comment_id": 62191147, "body": "@Shepmaster: It&#39;s an API implementation to a service only available over tcp."}, {"owner": {"reputation": 2956, "user_id": 272689, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/d765f09f68f08a92a904571e7244fa87?s=128&d=identicon&r=PG", "display_name": "vimalloc", "link": "https://stackoverflow.com/users/272689/vimalloc"}, "reply_to_user": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "edited": false, "score": 0, "creation_date": 1463709709, "post_id": 37334604, "comment_id": 62191158, "body": "@malbarbo: That is hugely helpful, thanks! :)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1463709845, "post_id": 37334604, "comment_id": 62191191, "body": "That doesn&#39;t provide a benefit to limiting the types, it&#39;s just an implementation detail. What about dependency injection during testing or adding a logging layer for debugging or a compression layer or a ..."}], "answers": [{"tags": [], "owner": {"reputation": 2956, "user_id": 272689, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/d765f09f68f08a92a904571e7244fa87?s=128&d=identicon&r=PG", "display_name": "vimalloc", "link": "https://stackoverflow.com/users/272689/vimalloc"}, "is_accepted": true, "score": 1, "last_activity_date": 1465172798, "last_edit_date": 1465172798, "creation_date": 1463758076, "answer_id": 37350351, "question_id": 37334604, "link": "https://stackoverflow.com/questions/37334604/handling-tcpstream-or-sslstream-idiomatically/37350351#37350351", "title": "Handling TcpStream or SslStream idiomatically", "body": "<p>Turns out there is a solution for this built into the openssl library: <a href=\"https://doc.servo.org/openssl/ssl/enum.MaybeSslStream.html\" rel=\"nofollow\"><code>openssl::ssl::MaybeSslStream</code></a>.</p>\n"}], "owner": {"reputation": 2956, "user_id": 272689, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/d765f09f68f08a92a904571e7244fa87?s=128&d=identicon&r=PG", "display_name": "vimalloc", "link": "https://stackoverflow.com/users/272689/vimalloc"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 206, "favorite_count": 0, "accepted_answer_id": 37350351, "answer_count": 1, "score": 0, "last_activity_date": 1465172798, "creation_date": 1463694445, "last_edit_date": 1463707754, "question_id": 37334604, "link": "https://stackoverflow.com/questions/37334604/handling-tcpstream-or-sslstream-idiomatically", "title": "Handling TcpStream or SslStream idiomatically", "body": "<p>I'm working on a project that can use either <code>TcpStream</code>s or <code>SslStream</code>s, depending on what the user configured. I have a few simple methods such as <code>send_cmd(stream)</code> and <code>recv_msg(stream)</code> which operates on these streams. </p>\n\n<p>Would it be more idiomatic to create an enum that could be either <code>TcpStream</code> or <code>SslStream</code> and pass that to these methods? Or would it be better to do something with traits, such as requiring the stream argument to these methods implement the <code>Read</code> and <code>Write</code> traits?</p>\n\n<p>My thought is that the enum solution would be better, as it explicitly says what kind of data we expect to be handling instead of allowing for anything that implements <code>Read</code> or <code>Write</code>, such as files. On the flip side though, it would require a match on all of these methods before using the stream. Thoughts?</p>\n"}, {"tags": ["performance", "rust", "game-engine"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1463682650, "post_id": 37331386, "comment_id": 62181123, "body": "Are you building your code in release mode? <code>cargo build --release</code> or <code>cargo run --release</code>?"}, {"owner": {"reputation": 907, "user_id": 900540, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/b5d720646701a0f61a5f782c9181c9d0?s=128&d=identicon&r=PG", "display_name": "DukeOf1Cat", "link": "https://stackoverflow.com/users/900540/dukeof1cat"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1463683086, "post_id": 37331386, "comment_id": 62181332, "body": "I was not (Rookie mistake), and it improved performance (Thanks!). But I still feel it should be faster - at 5K objects I get 27 FPS, at 10K objects I get 11 FPS."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1463683380, "post_id": 37331386, "comment_id": 62181499, "body": "What FPS do you expect at various numbers of polygons on screen?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1463683566, "post_id": 37331386, "comment_id": 62181604, "body": "Perhaps <a href=\"https://github.com/PistonDevelopers/fps_counter\" rel=\"nofollow noreferrer\">fps_counter</a> can help make sure you are getting appropriate values?"}, {"owner": {"reputation": 907, "user_id": 900540, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/b5d720646701a0f61a5f782c9181c9d0?s=128&d=identicon&r=PG", "display_name": "DukeOf1Cat", "link": "https://stackoverflow.com/users/900540/dukeof1cat"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1463683723, "post_id": 37331386, "comment_id": 62181695, "body": "The purpose of this question is partly to set my expectations before I delve into this project. If what I&#39;m seeing is expected performance of piston, I can use that when I design my game. If, however, I&#39;ve made a mistake in my design that greatly affects performance, I want to know about it before I build any further. But my experience from other game engines says that 11FPS with 10K polygons is a bit low. I will test fps_counter, but when I look at it I can see that it starts to lag significantly below 15 FPS. So my homegrown counter is probably not way off."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 1, "creation_date": 1463720810, "post_id": 37331386, "comment_id": 62193795, "body": "Could you give a complete example? You can&#39;t debug performance problems without being able to measure performance."}, {"owner": {"reputation": 907, "user_id": 900540, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/b5d720646701a0f61a5f782c9181c9d0?s=128&d=identicon&r=PG", "display_name": "DukeOf1Cat", "link": "https://stackoverflow.com/users/900540/dukeof1cat"}, "edited": false, "score": 0, "creation_date": 1463738673, "post_id": 37331386, "comment_id": 62204060, "body": "Updated the question with a complete example. I have some code that makes the squares colored and moving (so that you can se when it starts to lag) but even when drawing all the squares in the same place with a static color you get the same framerate."}, {"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "edited": false, "score": 2, "creation_date": 1463799180, "post_id": 37331386, "comment_id": 62231485, "body": "I haven&#39;t used Piston, but I feel like maybe you shouldn&#39;t be creating a brand new square every frame?"}], "owner": {"reputation": 907, "user_id": 900540, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/b5d720646701a0f61a5f782c9181c9d0?s=128&d=identicon&r=PG", "display_name": "DukeOf1Cat", "link": "https://stackoverflow.com/users/900540/dukeof1cat"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 816, "favorite_count": 0, "answer_count": 0, "score": 4, "last_activity_date": 1464288617, "creation_date": 1463682582, "last_edit_date": 1463738504, "question_id": 37331386, "link": "https://stackoverflow.com/questions/37331386/low-framerate-when-running-piston-example", "title": "Low framerate when running Piston example", "body": "<p>I'm building a simple 2D game in Rust using Piston. I used examples from the Piston documentation and expanded it and it works quite well. However, I get pretty bad performance:</p>\n\n<ul>\n<li>Drawing only 2 squares gives me a framerate of about 30-40 FPS</li>\n<li>Drawing 5 000 squares gives me a framerate of about 5 FPS</li>\n</ul>\n\n<p>This is on a Core i7 @ 2.2GHz running Windows 10. Rust version 1.8, Piston version 0.19.0. </p>\n\n<p>Is this expected or have I made any mistakes in my code? Am I even measuring the FPS correctly?</p>\n\n<pre><code>extern crate piston_window;\nextern crate piston;\nextern crate rand;\n\nuse piston_window::*;\nuse rand::Rng;\n\nfn main() {\n\n    const SIZE: [u32; 2] = [600,600];\n\n    const GREEN: [f32; 4] = [0.0, 1.0, 0.0, 1.0];\n\n\n    const NUM: u32 = 1000; //change this to change number of polygons\n    const SQUARESIZE: f64 = 10.0;\n\n\n    // Create an Glutin window.\n    let window: PistonWindow = WindowSettings::new(\"test\",SIZE)\n        .exit_on_esc(true)\n        .build()\n        .unwrap();\n\n    let mut frames = 0;\n    let mut passed = 0.0;\n\n    let mut rng = rand::thread_rng();\n\n    for e in window {\n\n        if let Some(_) = e.render_args() {\n            e.draw_2d(|c, g| {\n\n                //clear the screen.\n                clear(GREEN, g);\n\n                for i in 0..NUM {\n\n                    //setting up so that it looks pretty\n                    let x = (i % SIZE[0]) as f64;\n                    let y = (i % SIZE[1]) as f64;\n                    let fill = (x / (SIZE[0] as f64)) as f32;\n                    let color: [f32; 4] = [fill,1.0-fill,fill,fill];\n\n                    let x = rng.gen_range::&lt;f64&gt;(0.0,SIZE[0] as f64);\n\n                    //draw the square\n                    let square = rectangle::square(0.0, 0.0, SQUARESIZE);\n                    let transform = c.transform.trans(x-SQUARESIZE/2.0,y-SQUARESIZE/2.0);\n                    rectangle(color, square, transform, g);\n\n                }\n\n                frames+=1;\n            });\n        }\n\n        if let Some(u) = e.update_args() {\n\n            passed += u.dt;\n\n            if passed &gt; 1.0 {\n\n                let fps = (frames as f64) / passed;\n\n                println!(\"FPS: {}\",fps);\n\n                frames = 0;\n                passed = 0.0;\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>Thank you for your help.</p>\n\n<p>EDIT: taskmgr tells me that it only uses about 17K memory, but one of my physical CPU cores maxes out when the FPS drops below about 20.</p>\n\n<p>EDIT 2: Changed the code to a complete working example.</p>\n"}, {"tags": ["multidimensional-array", "rust", "row-major-order", "column-major-order"], "comments": [{"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "edited": false, "score": 0, "creation_date": 1463642221, "post_id": 37316336, "comment_id": 62152594, "body": "For OpenGL  and Vulkan you can specify using <code>layout</code> in the shader whether your data is row-major or column-major."}, {"owner": {"reputation": 647, "user_id": 5429050, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/da7e1d765858cc119fc86fa3e48e410b?s=128&d=identicon&r=PG", "display_name": "Hossein Noroozpour", "link": "https://stackoverflow.com/users/5429050/hossein-noroozpour"}, "reply_to_user": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "edited": false, "score": 0, "creation_date": 1463642351, "post_id": 37316336, "comment_id": 62152685, "body": "I&#39;m new to vulkan but for OpenGL it is recommended to place your matrix elements in column major order."}, {"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 2, "creation_date": 1463643513, "post_id": 37316336, "comment_id": 62153439, "body": "Rust has wrappers for OpenGL (glium) and Vulkan (Volkano I think) that you should probably use instead of directly using the APIs."}], "answers": [{"comments": [{"owner": {"reputation": 647, "user_id": 5429050, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/da7e1d765858cc119fc86fa3e48e410b?s=128&d=identicon&r=PG", "display_name": "Hossein Noroozpour", "link": "https://stackoverflow.com/users/5429050/hossein-noroozpour"}, "edited": false, "score": 0, "creation_date": 1463646733, "post_id": 37316739, "comment_id": 62155522, "body": "Tnx, I defined my matrix as: type Mat4x4&lt;T&gt; = [[T; 4]; 4]; i&#39;m not using Vec for it."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 7, "last_activity_date": 1463651378, "last_edit_date": 1463651378, "creation_date": 1463643224, "answer_id": 37316739, "question_id": 37316336, "link": "https://stackoverflow.com/questions/37316336/is-rust-multi-dimensional-array-row-major-and-tightly-packed/37316739#37316739", "title": "Is Rust multi-dimensional array row major and tightly packed?", "body": "<p>Well, let's find out:</p>\n\n<pre><code>let arr: [[i8; 2]; 2] = [[1, 2], [8, 9]];\n\nprintln!(\n    \"{:?} {:?} {:?} {:?}\", \n    &amp;arr[0][0] as *const _,\n    &amp;arr[0][1] as *const _,\n    &amp;arr[1][0] as *const _,\n    &amp;arr[1][1] as *const _,\n);\n</code></pre>\n\n<p>Prints <code>0x7fff5584ae74 0x7fff5584ae75 0x7fff5584ae76 0x7fff5584ae77</code> for example. So: yes these arrays with length known to compile time are tightly packed and (considering the common definition of the terms) row major.</p>\n\n<p><em>Note:</em> the test above doesn't say that this <em>always</em> works! You can read more about this topic <a href=\"https://doc.rust-lang.org/nomicon/repr-rust.html\" rel=\"noreferrer\">here</a>.</p>\n\n<p><strong>But:</strong> usually you use heap allocated arrays since you can't know the length beforehand. For that purpose it's idiomatic to use <code>Vec</code>. But there are no special rules for this type, so <code>Vec&lt;Vec&lt;T&gt;&gt;</code> is <strong>not</strong> tightly packed! For that reason <code>Vec&lt;Vec&lt;T&gt;&gt;</code> is <em>not</em> idiomatic anymore -- you should use a simple <code>Vec&lt;T&gt;</code> and do the calculation of the index yourself.</p>\n\n<p>Of course, writing the indexing calculation multiple times is not a good solution either. Instead, you should define some wrapper type which does the indexing for you. But as Sebastian Redl already mentioned: you are not the only one having this problem and there exist types exactly for this purpose already.</p>\n"}], "owner": {"reputation": 647, "user_id": 5429050, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/da7e1d765858cc119fc86fa3e48e410b?s=128&d=identicon&r=PG", "display_name": "Hossein Noroozpour", "link": "https://stackoverflow.com/users/5429050/hossein-noroozpour"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1791, "favorite_count": 0, "accepted_answer_id": 37316739, "answer_count": 1, "score": 1, "last_activity_date": 1463651378, "creation_date": 1463642076, "question_id": 37316336, "link": "https://stackoverflow.com/questions/37316336/is-rust-multi-dimensional-array-row-major-and-tightly-packed", "title": "Is Rust multi-dimensional array row major and tightly packed?", "body": "<p>I'm writing a 3D math library for my project, I want to know is the Rust column major or row major? For example I have a 2 dimensional array as matrix and I want to serve it to a C library (like OpenGL or Vulkan), for those library this is important to have a tightly packed column major array.</p>\n"}, {"tags": ["rust", "type-inference", "generic-programming"], "answers": [{"comments": [{"owner": {"reputation": 647, "user_id": 5429050, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/da7e1d765858cc119fc86fa3e48e410b?s=128&d=identicon&r=PG", "display_name": "Hossein Noroozpour", "link": "https://stackoverflow.com/users/5429050/hossein-noroozpour"}, "edited": false, "score": 0, "creation_date": 1463638074, "post_id": 37315021, "comment_id": 62150366, "body": "In most of the times you don&#39;t need to use &#39;_&#39; for inferencing, is this something expected in here?"}, {"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "reply_to_user": {"reputation": 647, "user_id": 5429050, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/da7e1d765858cc119fc86fa3e48e410b?s=128&d=identicon&r=PG", "display_name": "Hossein Noroozpour", "link": "https://stackoverflow.com/users/5429050/hossein-noroozpour"}, "edited": false, "score": 0, "creation_date": 1463638378, "post_id": 37315021, "comment_id": 62150496, "body": "@HosseinNoroozpour: You mean when you infer the whole type, e.g. <code>let m = [0.4f32; 16];</code>? But here you are restricting it to a <code>Mat4x4&lt;T&gt;</code>."}], "tags": [], "owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "is_accepted": false, "score": 4, "last_activity_date": 1552846456, "last_edit_date": 1552846456, "creation_date": 1463637723, "answer_id": 37315021, "question_id": 37314620, "link": "https://stackoverflow.com/questions/37314620/unexpected-type-inference-failure-wrong-number-of-type-arguments/37315021#37315021", "title": "Unexpected type inference failure: wrong number of type arguments", "body": "<p>You cannot omit required type parameters, but you can use <code>_</code> to infer them:</p>\n\n<pre><code>let m: Mat4x4&lt;_&gt; = [0.4323f32; 16];\n</code></pre>\n\n<p>Alternatively, you could add a default type parameter so you could omit the <code>&lt;\u2026&gt;</code> when the type <code>T</code> is exactly <code>f32</code> (but this is not type inference, you still need to write <code>Mat4x4&lt;f64&gt;</code> explicitly).</p>\n\n<pre><code>type Mat4x4&lt;T = f32&gt; = [T; 16];\n</code></pre>\n\n<pre><code>let m: Mat4x4 = [0.4323f32; 16];\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 647, "user_id": 5429050, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/da7e1d765858cc119fc86fa3e48e410b?s=128&d=identicon&r=PG", "display_name": "Hossein Noroozpour", "link": "https://stackoverflow.com/users/5429050/hossein-noroozpour"}, "edited": false, "score": 0, "creation_date": 1463639802, "post_id": 37315388, "comment_id": 62151127, "body": "I liked your waffle example. :D"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 6, "last_activity_date": 1552846387, "last_edit_date": 1552846387, "creation_date": 1463639231, "answer_id": 37315388, "question_id": 37314620, "link": "https://stackoverflow.com/questions/37314620/unexpected-type-inference-failure-wrong-number-of-type-arguments/37315388#37315388", "title": "Unexpected type inference failure: wrong number of type arguments", "body": "<p>This is not a type inference issue:</p>\n\n<pre><code>type Mat4x4&lt;T&gt; = [T; 16];\n\nfn main() {\n    let m: Mat4x4 = [0.4323f32; 16];\n    println!(\"{:?}\", m);\n}\n</code></pre>\n\n<p>Yields the following error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0107]: wrong number of type arguments: expected 1, found 0\n --&gt; src/main.rs:4:12\n  |\n4 |     let m: Mat4x4 = [0.4323f32; 16];\n  |            ^^^^^^ expected 1 type argument\n</code></pre>\n\n<p>The complaint here is that <code>Mat4x4</code> is not a type, it's a <em>template</em> or <em>blueprint</em> to create a type.</p>\n\n<p>An analogy would be that <code>Mat4x4</code> is a waffle iron, and <code>Mat4x4&lt;f32&gt;</code> is a waffle that comes out of it. If you are served the waffle iron (with maple syrup on top, of course) you will likely be disappointed!</p>\n\n<p>The same applies here: when you give the compiler the blueprint where it expects the final product, it signals you that it was not what it expected.</p>\n\n<hr>\n\n<p>You can supply a dummy argument (<code>_</code>), and it will be inferred:</p>\n\n<pre><code>let m: Mat4x4&lt;_&gt; = [0.4323f32; 16];\n</code></pre>\n"}], "owner": {"reputation": 647, "user_id": 5429050, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/da7e1d765858cc119fc86fa3e48e410b?s=128&d=identicon&r=PG", "display_name": "Hossein Noroozpour", "link": "https://stackoverflow.com/users/5429050/hossein-noroozpour"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 132, "favorite_count": 0, "accepted_answer_id": 37315388, "answer_count": 2, "score": 2, "last_activity_date": 1552846456, "creation_date": 1463636033, "last_edit_date": 1552846336, "question_id": 37314620, "link": "https://stackoverflow.com/questions/37314620/unexpected-type-inference-failure-wrong-number-of-type-arguments", "title": "Unexpected type inference failure: wrong number of type arguments", "body": "<p>In this example, the compiler can not infer the matrix type:</p>\n\n<pre><code>type Mat4x4&lt;T&gt; = [T; 16];\n\nfn main() {\n    let m: Mat4x4 = [0.4323f32; 16];\n    println!(\"{:?}\", m);\n}\n</code></pre>\n\n<p>The working code is:</p>\n\n<pre><code>type Mat4x4&lt;T&gt; = [T; 16];\n\nfn main() {\n    let m: Mat4x4&lt;f32&gt; = [0.4323f32; 16];\n    println!(\"{:?}\", m);\n}\n</code></pre>\n\n<p>Is this an expected act?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1463628365, "post_id": 37313335, "comment_id": 62147517, "body": "See also <a href=\"http://stackoverflow.com/q/28595075/155423\">stackoverflow.com/q/28595075/155423</a>, <a href=\"http://stackoverflow.com/q/29926724/155423\">stackoverflow.com/q/29926724/155423</a>, <a href=\"http://stackoverflow.com/q/30974593/155423\">stackoverflow.com/q/30974593/155423</a>, <a href=\"http://stackoverflow.com/q/28527702/155423\">stackoverflow.com/q/28527702/155423</a>, <a href=\"http://stackoverflow.com/q/34621969/155423\">stackoverflow.com/q/34621969/155423</a>, and <a href=\"http://stackoverflow.com/q/28843931/155423\">stackoverflow.com/q/28843931/155423</a>."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1463628159, "post_id": 37313390, "comment_id": 62147455, "body": "It may be worth commenting on ownership and the fact that <code>Add</code> consumes the addends by value, maybe even touching on why such a thing is useful and why implementing <code>Add</code> on a reference would allow someone to avoid implementing <code>Copy</code> if they needed to."}, {"owner": {"reputation": 9586, "user_id": 1000282, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/371832f83b79a41443fa50d3793b0cfd?s=128&d=identicon&r=PG", "display_name": "pepper_chico", "link": "https://stackoverflow.com/users/1000282/pepper-chico"}, "edited": false, "score": 0, "creation_date": 1463628211, "post_id": 37313390, "comment_id": 62147467, "body": "I think it deserves to recall Rust is <i>move by default</i> (in args just like in assignments), which is generally alien to newcomers, with a reference. Good answer."}, {"owner": {"reputation": 20458, "user_id": 122087, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/431c64e3e3fd0c892ad2a7e4150cf63e?s=128&d=identicon&r=PG", "display_name": "Paul A Jungwirth", "link": "https://stackoverflow.com/users/122087/paul-a-jungwirth"}, "edited": false, "score": 0, "creation_date": 1463630216, "post_id": 37313390, "comment_id": 62147992, "body": "Thank you for this great answer. Copy/move/borrow is slowly sinking in. This answer helps a lot! Also pedagogically, binaries are easier to understand, and the Book never to my knowledge really presents them as (Copy vs Move) vs Borrow---it always seems to contrast two and not mention the third. Putting all three together is very helpful."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 9, "last_activity_date": 1463628502, "last_edit_date": 1463628502, "creation_date": 1463628000, "answer_id": 37313390, "question_id": 37313335, "link": "https://stackoverflow.com/questions/37313335/cannot-move-out-of-borrowed-content-with-operator-overloading/37313390#37313390", "title": "&quot;cannot move out of borrowed content&quot; with operator overloading", "body": "<p>You're implementing the operators on <code>Money</code> rather than <code>&amp;Money</code>. This means that the operator will <em>take ownership</em> of its operands. Therefore, in <code>total</code>, to perform the addition, you'd have to move <code>self.absolute</code>, which isn't allowed because you can't move out of a borrowed pointer (you can only move values you have ownership of). Rust will <em>copy</em> values if their type implements <a href=\"http://doc.rust-lang.org/stable/std/marker/trait.Copy.html\" rel=\"noreferrer\"><code>Copy</code></a> (which is the case for primitives like <code>i32</code> or <code>f64</code>); otherwise, it will <em>move</em> them, which means that the source will be unusable after the move.</p>\n\n<p>If your <code>Money</code> struct really only contains a <code>cents</code> field, I recommend you make it implement <code>Copy</code> (which also requires implementing <a href=\"http://doc.rust-lang.org/stable/std/clone/trait.Clone.html\" rel=\"noreferrer\"><code>Clone</code></a>, which would be a good idea to implement even if you don't implement <code>Copy</code>). You can implement <code>Copy</code> and <code>Clone</code> easily with <code>#[derive]</code>:</p>\n\n<pre><code>#[derive(Copy, Clone, Debug, Eq, PartialEq)]\npub struct Money {\n    cents: i64,\n}\n</code></pre>\n\n<p>Now, in <code>total</code>, instead of moving <code>self.absolute</code>, Rust will copy it instead. If you can't implement <code>Copy</code>, then replace <code>self.absolute</code> with <code>self.absolute.clone()</code>.</p>\n\n<hr>\n\n<p>If you had implemented the operators on <code>&amp;Money</code>, then you could just pass references to your <code>Money</code> values. For example, with such implementations, <code>total</code> could be implemented like this:</p>\n\n<pre><code>pub fn total(&amp;self, basis: Money) -&gt; Money {\n    &amp;self.absolute + &amp;(self.percent * &amp;basis)\n}\n</code></pre>\n"}], "owner": {"reputation": 20458, "user_id": 122087, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/431c64e3e3fd0c892ad2a7e4150cf63e?s=128&d=identicon&r=PG", "display_name": "Paul A Jungwirth", "link": "https://stackoverflow.com/users/122087/paul-a-jungwirth"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 830, "favorite_count": 2, "accepted_answer_id": 37313390, "answer_count": 1, "score": 8, "last_activity_date": 1463630389, "creation_date": 1463627589, "last_edit_date": 1495542749, "question_id": 37313335, "link": "https://stackoverflow.com/questions/37313335/cannot-move-out-of-borrowed-content-with-operator-overloading", "title": "&quot;cannot move out of borrowed content&quot; with operator overloading", "body": "<p>I'm getting a compilation error from a simple helper method, when using a class with operator overloading. Here is a self-contained test (simplified from my real code, but still demonstrating the problem):</p>\n\n<pre><code>use std::ops::{Add, Sub, Neg, Mul, Div};\n\n#[derive(Debug, Eq, PartialEq)]\npub struct Money {\n    cents: i64,\n}\nimpl Money {\n    pub fn new(cents: i64) -&gt; Money {\n        Money { cents: cents }\n    }\n}\nimpl Add for Money {\n    type Output = Money;\n    fn add(self, other: Money) -&gt; Money {\n        Money { cents: self.cents + other.cents }\n    }\n}\nimpl Mul&lt;Money&gt; for f64 {\n    type Output = Money;\n    fn mul(self, rhs: Money) -&gt; Money {\n        Money { cents: (self * rhs.cents as f64) as i64 }\n    }\n}\n\n#[derive(Debug)]\npub struct AbsOrPerc {\n    pub absolute: Money,\n    pub percent: f64,\n}\nimpl AbsOrPerc {\n    pub fn new(abs: Money, perc: f64) -&gt; AbsOrPerc {\n        AbsOrPerc {\n            absolute: abs,\n            percent: perc,\n        }\n    }\n\n    pub fn total(&amp;self, basis: Money) -&gt; Money {\n        // This works:\n        // Money::new((self.absolute.cents as f64 + self.percent * basis.cents as f64) as i64)\n        // This doesn't:\n        self.absolute + self.percent * basis\n    }\n}\n</code></pre>\n\n<p>I'm trying to compile this with Rust 1.8, but I'm getting this error:</p>\n\n<pre><code>src/lib.rs:42:5: 42:9 error: cannot move out of borrowed content [E0507]\nsrc/lib.rs:42     self.absolute + self.percent * basis\n</code></pre>\n\n<p>I've read the Rust Book, and the parts about ownership and borrowing over and over. I've read numerous questions here on StackOverflow about this question, e.g.:</p>\n\n<p><a href=\"https://stackoverflow.com/questions/28158738/cannot-move-out-of-borrowed-content\">Cannot move out of borrowed content</a></p>\n\n<p>I don't think my own question is a duplicate because while the error is the same, the circumstances are different. Also if I knew how those other questions applied to this one, I wouldn't have to ask. :-)</p>\n\n<p>So my question is: how can I resolve this error? I don't want to change <code>&amp;self</code> to <code>self</code>, because that causes other problems.</p>\n\n<p>Besides just fixing the problem, I would also like to know what Rust is scared of. I don't see any dangers here.</p>\n"}]