[{"tags": ["rust"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1454519657, "post_id": 35182474, "comment_id": 58083899, "body": "it&#39;s hard do do arbitrary constant propagation. Rust&#39;s constant evaluator isn&#39;t powerful enough yet, but it&#39;s very likely your second case will be warned about at some point. If you use constants instead of let bindings, then you will get a warning even with the multiplication: <a href=\"http://is.gd/1k9xtX\" rel=\"nofollow noreferrer\">is.gd/1k9xtX</a>"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1454519880, "post_id": 35182474, "comment_id": 58084048, "body": "oh. I misunderstood. I guess the assumption is that everyone tries to create a warning-free build."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 1, "creation_date": 1454535294, "post_id": 35182474, "comment_id": 58093519, "body": "Note that the second program only panics in a debug build; there are no overflow checks in a release build. A release build of the second program prints <code>-1294967296</code>, just like the first program."}, {"owner": {"reputation": 67160, "user_id": 1078084, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/wApmM.jpg?s=128&g=1", "display_name": "Akavall", "link": "https://stackoverflow.com/users/1078084/akavall"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1454535596, "post_id": 35182474, "comment_id": 58093683, "body": "@FrancisGagn&#233;, Thanks I did not realize that. Perhaps the inconsistency is not as big as I initially thought."}], "answers": [{"comments": [{"owner": {"reputation": 67160, "user_id": 1078084, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/wApmM.jpg?s=128&g=1", "display_name": "Akavall", "link": "https://stackoverflow.com/users/1078084/akavall"}, "edited": false, "score": 0, "creation_date": 1454598753, "post_id": 35196283, "comment_id": 58124857, "body": "Thank You. Very insightful."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 3, "last_activity_date": 1454575562, "creation_date": 1454575562, "answer_id": 35196283, "question_id": 35182474, "link": "https://stackoverflow.com/questions/35182474/rustc-only-warns-when-value-that-overflows-is-assigned/35196283#35196283", "title": "Rustc only warns when value that overflows is assigned", "body": "<p>Actually, your comments are not consistent with the behavior you observe:</p>\n\n<ul>\n<li>in your first example: you get a compile-time warning, which you ignore, and thus the compiler deduces that you want wrapping behavior</li>\n<li>in your second example: you get a run-time error</li>\n</ul>\n\n<p>The Go example is similar to the first Rust example (except that Go, by design, does not have warnings).</p>\n\n<hr>\n\n<p>In Rust, an underflow or overflow results in an <strong>unspecified value</strong> which can be <code>!</code> or <em>bottom</em> in computer science, a special value indicating that the control flow diverge which in general means either abortion or exception.</p>\n\n<p>This specification allows:</p>\n\n<ul>\n<li>instrumenting the Debug mode to catch all overflows at the very point at which they occur</li>\n<li>not instrumenting<sup>1</sup> the Release mode (and using wrapping arithmetic there)</li>\n</ul>\n\n<p>and yet have both modes be consistent with the specification.</p>\n\n<p><sup>1</sup> <em>Not instrumenting by default, you can if you choose and for a relatively modest performance cost outside of heavy numeric code activate the overflow checks in Release with a simple flag.</em></p>\n\n<hr>\n\n<p>On the cost of overflow checks: the current Rust/LLVM situation is helpful for debugging but has not really been optimized. Thus, in this framework, overflow checks cost. If the situation improves, then rustc might decide, one day, to activate overflow checking by default even in Release.</p>\n\n<p>In <a href=\"http://joeduffyblog.com/2015/12/19/safe-native-code/\" rel=\"nofollow\">Midori</a> (a Microsoft experimental OS developed in a language similar to C#), overflow check was turned on even in Release builds:</p>\n\n<blockquote>\n  <p>In Midori, we compiled with overflow checking on by default. This is different from stock C#, where you must explicitly pass the /checked flag for this behavior. In our experience, the number of surprising overflows that were caught, and unintended, was well worth the inconvenience and cost. But it did mean that our compiler needed to get really good at understanding how to eliminate unnecessary ones.</p>\n</blockquote>\n\n<p>Apparently, they improved their compiler so that:</p>\n\n<ul>\n<li>it would reason about the ranges of variables, and statically eliminate bounds checks and overflow checks when possible</li>\n<li>it would aggregate checks as much as possible (a single check for multiple potentially overflowing operations)</li>\n</ul>\n\n<p>The latter is only to be done in Release (you lose precision) but reduces the number of branches.</p>\n\n<p>So, what cost remain?</p>\n\n<p>Potentially different arithmetic rules that get in the way of optimizations:</p>\n\n<ul>\n<li>in regular arithmetic, <code>64 + x - 128</code> can be optimized to <code>x - 64</code>; with overflow checks activated the compiler might not be able to perform this optimization</li>\n<li>vectorization can be hampered too, if the compiler does not have overflow checking vector built-ins</li>\n<li>...</li>\n</ul>\n\n<p>Still, unless the code is heavily numeric (scientific simulations or graphics, for example), then it might impact it indeed.</p>\n"}], "owner": {"reputation": 67160, "user_id": 1078084, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/wApmM.jpg?s=128&g=1", "display_name": "Akavall", "link": "https://stackoverflow.com/users/1078084/akavall"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 219, "favorite_count": 0, "accepted_answer_id": 35196283, "answer_count": 1, "score": 5, "last_activity_date": 1454575562, "creation_date": 1454516949, "last_edit_date": 1454555727, "question_id": 35182474, "link": "https://stackoverflow.com/questions/35182474/rustc-only-warns-when-value-that-overflows-is-assigned", "title": "Rustc only warns when value that overflows is assigned", "body": "<p>I am finding what I think is a very strange behaviour. Rustc panics when when a variable overflows at runtime; this makes sense to me. However, it only raises a warning when value that overflows is assigned at compile time. Shouldn't that be a compile time error? Otherwise, two behaviours seem inconsistent. </p>\n\n<p>I expect a compile time error:</p>\n\n<pre><code>fn main() {\n    let b: i32 = 3_000_000_000;\n    println!(\"{}\", b);\n}\n</code></pre>\n\n<p>Produces: </p>\n\n<pre><code>&lt;anon&gt;:2:18: 2:31 warning: literal out of range for i32, #[warn(overflowing_literals)] on by default\n&lt;anon&gt;:2     let b: i32 = 3_000_000_000;\n</code></pre>\n\n<p><a href=\"http://is.gd/Af8igW\" rel=\"nofollow\">Playground 1</a></p>\n\n<p>This makes sense to me:</p>\n\n<pre><code>fn main() {\n    let b: i32 = 30_000;\n    let c: i32 = 100_000;\n    let d = b * c;\n    println!(\"{}\", d);\n}\n</code></pre>\n\n<p>Produces:</p>\n\n<pre><code>thread '&lt;main&gt;' panicked at 'arithmetic operation overflowed', &lt;anon&gt;:4\nplaypen: application terminated with error code 101\n</code></pre>\n\n<p><a href=\"http://is.gd/k78a4Y\" rel=\"nofollow\">Playground 2</a></p>\n\n<p><strong>Edit:</strong></p>\n\n<p>Given the comment by FrancisGagn\u00e9, and me discovering that Rust implements operators that check for overflow during the operation, for example <a href=\"https://doc.rust-lang.org/std/primitive.i64.html#method.checked_mul\" rel=\"nofollow\">checked_mul</a>, I see that one needs to implement overflow checks themselves. Which makes sense, because release version should be optimized, and constantly checking for overflows could get expensive. So I no longer see the \"inconsistency\". However, I am still surprised, that assigning a value that would overflow does not lead to compile time error. In <code>golang</code> it would: <a href=\"https://play.golang.org/p/pjR--tRq0h\" rel=\"nofollow\">Go Playground</a></p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 3, "last_activity_date": 1454482784, "creation_date": 1454482784, "answer_id": 35170457, "question_id": 35169985, "link": "https://stackoverflow.com/questions/35169985/how-to-idiomatically-construct-struct-with-heap-references/35170457#35170457", "title": "How to idiomatically construct struct with heap references?", "body": "<p>You are trying to move out of a borrowed pointer (because <code>rules[str]</code> returns a <code>&amp;Yaml</code>), but that's not legal. We need to use functions that allow us to move a value out of the main <code>Yaml</code> object. This will alter the main <code>Yaml</code> object, but that's OK here, since we will discard it by the end of the function.</p>\n\n<p>First, we need to understand what indexing with a string does. <a href=\"https://github.com/chyh1990/yaml-rust/blob/840a560e0e20cffd744251c1d9d245029145de39/src/yaml.rs#L262-L272\" rel=\"nofollow\">The implementation</a> only returns a significant value if the value is a hash and gets to the underlying value by constructing a <code>Yaml::String</code> value to index the hash.</p>\n\n<p>The <code>Yaml::Hash</code> variant wraps a <a href=\"http://doc.rust-lang.org/stable/std/collections/struct.BTreeMap.html\" rel=\"nofollow\"><code>BTreeMap&lt;Yaml, Yaml&gt;</code></a>. The library provides the <code>as_hash</code> convenience method to access it, but this only gives an immutable pointer. We need to use pattern matching to get a mutable pointer.</p>\n\n<p>Next, we'll use the <a href=\"http://doc.rust-lang.org/stable/std/collections/struct.BTreeMap.html#method.remove\" rel=\"nofollow\"><code>remove</code> method</a> on the <code>BTreeMap</code> to extract the value associated with the keys that interest us.</p>\n\n<p>Here's the result:</p>\n\n<pre><code>impl Petrovich {\n    fn new() -&gt; Petrovich {\n        use yaml_rust::yaml::Hash as YamlHash;\n\n        // Open Rules File (Panics on error)\n        let mut f = fs::File::open(\"./src/rules.yml\").unwrap();\n        // Create String Buffer and Read to it\n        let mut buffer = String::new();\n        f.read_to_string(&amp;mut buffer).unwrap();\n        // Pass Buffer to Yaml and unwrap\n        let rules: &amp;mut Yaml = &amp;mut YamlLoader::load_from_str(&amp;buffer).unwrap()[0];\n        let rules: &amp;mut YamlHash = match *rules {\n            Yaml::Hash(ref mut hash) =&gt; hash,\n            _ =&gt; panic!(\"not a hash\"),\n        };\n\n        // Return Petrovich with preloaded rules\n        Petrovich {\n            middlename: rules.remove(&amp;Yaml::String(\"middlename\".into())).unwrap(),\n            firstname: rules.remove(&amp;Yaml::String(\"firstname\".into())).unwrap(),\n            lastname: rules.remove(&amp;Yaml::String(\"lastname\".into())).unwrap(),\n        }\n    }\n}\n</code></pre>\n\n<p>Note that this code will panic in situations in which your original code (if it worked) wouldn't, as you would get <code>BadValue</code>s instead. I'll leave it to you to handle errors as you need.</p>\n"}, {"tags": [], "owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "is_accepted": true, "score": 2, "last_activity_date": 1454591610, "creation_date": 1454591610, "answer_id": 35201952, "question_id": 35169985, "link": "https://stackoverflow.com/questions/35169985/how-to-idiomatically-construct-struct-with-heap-references/35201952#35201952", "title": "How to idiomatically construct struct with heap references?", "body": "<p><code>Yaml</code> is <code>Clone</code>, so you can simply call .clone() on the reference to copy its contents \"out\":</p>\n\n<pre><code>    Petrovich { \n        middlename: rules[\"middlename\"].clone(),\n        firstname: rules[\"firstname\"].clone(),\n        lastname: rules[\"lastname\"].clone(),\n    }\n</code></pre>\n\n<p>I prefer this to the accepted solution because the data being copied is small and it doesn't rely on the implementation of <code>yaml::Hash</code>. Cloning an entire document tree might be another matter.</p>\n\n<p>You may have an argument here for a feature to be added to yaml-rust. Moving an element out of a tree seems like a reasonable request, but the API doesn't support it directly.</p>\n"}, {"comments": [{"owner": {"reputation": 46207, "user_id": 74496, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/633fe8d1b4783bb73748a75e0e768bba?s=128&d=identicon&r=PG", "display_name": "rjh", "link": "https://stackoverflow.com/users/74496/rjh"}, "edited": false, "score": 0, "creation_date": 1489407891, "post_id": 36107332, "comment_id": 72642236, "body": "Does this work on stable Rust versions, or only nightly?"}], "tags": [], "owner": {"reputation": 6357, "user_id": 6086311, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cb99289473f6393b89474785f2d294d1?s=128&d=identicon&r=PG", "display_name": "dtolnay", "link": "https://stackoverflow.com/users/6086311/dtolnay"}, "is_accepted": false, "score": 2, "last_activity_date": 1489417616, "last_edit_date": 1489417616, "creation_date": 1458422575, "answer_id": 36107332, "question_id": 35169985, "link": "https://stackoverflow.com/questions/35169985/how-to-idiomatically-construct-struct-with-heap-references/36107332#36107332", "title": "How to idiomatically construct struct with heap references?", "body": "<p>I recently implemented <a href=\"https://github.com/serde-rs/serde\" rel=\"nofollow noreferrer\">Serde</a> support for YAML: <a href=\"https://github.com/dtolnay/serde-yaml\" rel=\"nofollow noreferrer\">https://github.com/dtolnay/serde-yaml</a></p>\n\n<p>Serde is a powerful serialization framework that allows Rust structs to be converted to and from a variety of formats: JSON, YAML, XML, TOML, MessagePack, Bincode.</p>\n\n<p>Here is a complete working example that demonstrates deserializing a Petrovich from a file rules.yml:</p>\n\n<pre><code>extern crate serde;\nextern crate serde_yaml;\n\n#[macro_use]\nextern crate serde_derive;\n\n#[derive(Deserialize)]\nstruct Petrovich {\n    middlename: String,\n    firstname: String,\n    lastname: String\n}\n\nfn main() {\n    let f = std::fs::File::open(\"test.yml\").unwrap();\n    let p: Petrovich = serde_yaml::from_reader(f).unwrap();\n    assert_eq!(&amp;p.firstname, \"latrasis\");\n}\n</code></pre>\n\n<p>Serde supports arbitrarily complicated nested types, so the struct that you deserialize could contain vectors, maps, or other structs inside and the code would remain just as simple.</p>\n"}], "owner": {"reputation": 150, "user_id": 4381016, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fd89e6057dd2316bb696d0648fc0cce8?s=128&d=identicon&r=PG&f=1", "display_name": "latrasis", "link": "https://stackoverflow.com/users/4381016/latrasis"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 498, "favorite_count": 0, "accepted_answer_id": 35201952, "answer_count": 3, "score": 7, "last_activity_date": 1489417616, "creation_date": 1454480878, "last_edit_date": 1454481973, "question_id": 35169985, "link": "https://stackoverflow.com/questions/35169985/how-to-idiomatically-construct-struct-with-heap-references", "title": "How to idiomatically construct struct with heap references?", "body": "<p>So i'm currently stumped on initializing a <code>struct</code> by loading a <code>Yaml</code> file into heap memory:</p>\n\n<p></p>\n\n<pre><code>extern crate yaml_rust;\n\nuse std::io::prelude::*;\nuse std::fs;\nuse yaml_rust::{Yaml, YamlLoader};\n\nstruct Petrovich {\n    middlename: Yaml,\n    firstname: Yaml,\n    lastname: Yaml\n}\n\nimpl  Petrovich {\n\n    fn new() -&gt; Petrovich {\n\n        // Open Rules File (Panics on error)\n        let mut f = fs::File::open(\"./src/rules.yml\").unwrap();\n        // Create String Buffer and Read to it\n        let mut buffer = String::new();\n        f.read_to_string(&amp;mut buffer).unwrap();\n        // Pass Buffer to Yaml and unwrap\n        let rules: &amp;Yaml = &amp;YamlLoader::load_from_str(&amp;buffer).unwrap()[0];\n\n        // Return Petrovich with preloaded rules\n        Petrovich { \n            middlename: rules[\"middlename\"],\n            firstname: rules[\"firstname\"],\n            lastname: rules[\"lastname\"]\n        }\n    }\n}\n</code></pre>\n\n<p>However i get a <code>cannot move out of indexed content</code> error. How do i tackle this?</p>\n\n<p>EDIT: I am using <code>yaml-rust</code> for this and have a file <code>rules.yml</code> with <code>firstname</code>, <code>lastname</code> and <code>middlename</code> fields included within <code>./src</code></p>\n\n<p>Source can be found here: <a href=\"https://github.com/Latrasis/petrovich-rs\" rel=\"noreferrer\">https://github.com/Latrasis/petrovich-rs</a></p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "reply_to_user": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1454519290, "post_id": 35169402, "comment_id": 58083675, "body": "@huon Good point. This is because Regex implements Deref correct?"}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1454539832, "post_id": 35169402, "comment_id": 58095780, "body": "@squiguy, no (Regex doesn&#39;t implement Deref): it&#39;s because <code>lazy_static!</code> allows you to assign any expression of the right type to the <code>static ref</code>, and <code>Regex::new(...).unwrap()</code> has type <code>Regex</code>."}, {"owner": {"reputation": 6045, "user_id": 1036670, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/8d2dr.jpg?s=128&g=1", "display_name": "vitiral", "link": "https://stackoverflow.com/users/1036670/vitiral"}, "edited": false, "score": 0, "creation_date": 1454607309, "post_id": 35169402, "comment_id": 58130825, "body": "In actual implementation I did even better. I created a <code>make_regex</code> function and assigned directly to the output. Very convenient!"}], "tags": [], "owner": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "is_accepted": true, "score": 26, "last_activity_date": 1555449446, "last_edit_date": 1555449446, "creation_date": 1454478428, "answer_id": 35169402, "question_id": 35169259, "link": "https://stackoverflow.com/questions/35169259/how-to-make-a-compiled-regexp-a-global-variable/35169402#35169402", "title": "How to make a compiled Regexp a global variable?", "body": "<p>You can use the <a href=\"https://crates.io/crates/lazy_static\" rel=\"noreferrer\">lazy_static</a> macro like this:</p>\n\n<pre><code>use lazy_static::lazy_static; // 1.3.0\nuse regex::Regex; // 1.1.5\n\nlazy_static! {\n    static ref RE: Regex = Regex::new(r\"hello (\\w+)!\").unwrap();\n}\n\nfn main() {\n    let text = \"hello bob!\\nhello sue!\\nhello world!\\n\";\n    for cap in RE.captures_iter(text) {\n        println!(\"your name is: {}\", &amp;cap[1]);\n    }\n}\n</code></pre>\n\n<p>If you are using the 2015 edition of Rust, you can still use <code>lazy_static</code> via:</p>\n\n<pre><code>#[macro_use]\nextern crate lazy_static;\n</code></pre>\n"}], "owner": {"reputation": 6045, "user_id": 1036670, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/8d2dr.jpg?s=128&g=1", "display_name": "vitiral", "link": "https://stackoverflow.com/users/1036670/vitiral"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4134, "favorite_count": 0, "accepted_answer_id": 35169402, "answer_count": 1, "score": 25, "last_activity_date": 1555449446, "creation_date": 1454477793, "last_edit_date": 1555161973, "question_id": 35169259, "link": "https://stackoverflow.com/questions/35169259/how-to-make-a-compiled-regexp-a-global-variable", "title": "How to make a compiled Regexp a global variable?", "body": "<p>I have several regular expressions that are defined at runtime and I would like to make them global variables.</p>\n\n<p>To give you an idea, the following code works:</p>\n\n<pre><code>use regex::Regex; // 1.1.5\n\nfn main() {\n    let RE = Regex::new(r\"hello (\\w+)!\").unwrap();\n    let text = \"hello bob!\\nhello sue!\\nhello world!\\n\";\n    for cap in RE.captures_iter(text) {\n        println!(\"your name is: {}\", &amp;cap[1]);\n    }\n}\n</code></pre>\n\n<p>But I would like it to be something like this:</p>\n\n<pre><code>use regex::Regex; // 1.1.5\n\nstatic RE: Regex = Regex::new(r\"hello (\\w+)!\").unwrap();\n\nfn main() {\n    let text = \"hello bob!\\nhello sue!\\nhello world!\\n\";\n    for cap in RE.captures_iter(text) {\n        println!(\"your name is: {}\", &amp;cap[1]);\n    }\n}\n</code></pre>\n\n<p>However, I get the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n --&gt; src/main.rs:3:20\n  |\n3 | static RE: Regex = Regex::new(r\"hello (\\w+)!\").unwrap();\n  |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>Does this mean that I need nightly Rust in order to make these variables global, or is there another way to do it?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 171, "user_id": 2915584, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0e102afcfde7b6fee8b2d4ca2ed87ba5?s=128&d=identicon&r=PG", "display_name": "azmr", "link": "https://stackoverflow.com/users/2915584/azmr"}, "edited": false, "score": 0, "creation_date": 1454459140, "post_id": 35166246, "comment_id": 58051099, "body": "Ahh, I missed that... The doc states that the borrows for <code>RefCell</code> are tracked at runtime... is there a solution where everything is tracked statically at compile time?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 171, "user_id": 2915584, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0e102afcfde7b6fee8b2d4ca2ed87ba5?s=128&d=identicon&r=PG", "display_name": "azmr", "link": "https://stackoverflow.com/users/2915584/azmr"}, "edited": false, "score": 0, "creation_date": 1454468655, "post_id": 35166246, "comment_id": 58053677, "body": "If you only have a <code>&amp;Action</code> (rather than a <code>&amp;mut Action</code>), then no, that&#39;s not possible. The other option is to use <code>UnsafeCell</code> and <code>unsafe</code> code to update the value, but then the compiler will not be able to tell you if you do something wrong."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 171, "user_id": 2915584, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0e102afcfde7b6fee8b2d4ca2ed87ba5?s=128&d=identicon&r=PG", "display_name": "azmr", "link": "https://stackoverflow.com/users/2915584/azmr"}, "edited": false, "score": 1, "creation_date": 1454472255, "post_id": 35166246, "comment_id": 58054673, "body": "@azmr: That said, you haven&#39;t shown <i>where</i> you need the mutation to occur. Therefore, we have no idea what kind of references you have available; maybe you don&#39;t need cells at all!"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 4, "last_activity_date": 1454458352, "creation_date": 1454458352, "answer_id": 35166246, "question_id": 35166150, "link": "https://stackoverflow.com/questions/35166150/how-can-you-mutate-or-avoid-the-need-to-mutate-nested-constructed-fields-in-r/35166246#35166246", "title": "How can you mutate (or avoid the need to mutate) nested, constructed fields in Rust, without making everything mutable, when Cell can&#39;t be used?", "body": "<p>Use <a href=\"http://doc.rust-lang.org/stable/std/cell/struct.RefCell.html\" rel=\"nofollow\"><code>RefCell</code></a> for non-<code>Copy</code> types.</p>\n\n<pre><code>struct Action {\n    func: Box&lt;Fn(&amp;mut Phi) -&gt; ViewAction&gt;,\n    label: &amp;'static str,\n    sprite: RefCell&lt;Sprite&gt;,\n    // ...\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 31, "user_id": 4212628, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5c822c3d9c10447aee0d9780db07b794?s=128&d=identicon&r=PG&f=1", "display_name": "iadicicco", "link": "https://stackoverflow.com/users/4212628/iadicicco"}, "is_accepted": false, "score": 3, "last_activity_date": 1454471710, "creation_date": 1454471710, "answer_id": 35168216, "question_id": 35166150, "link": "https://stackoverflow.com/questions/35166150/how-can-you-mutate-or-avoid-the-need-to-mutate-nested-constructed-fields-in-r/35168216#35168216", "title": "How can you mutate (or avoid the need to mutate) nested, constructed fields in Rust, without making everything mutable, when Cell can&#39;t be used?", "body": "<p>If you can mutate a struct (you either own it or have a mutable reference to it) then you can mutably borrow any of its fields. What that means in this case is that if you are ever given the opportunity to mutate <code>MainMenuView</code>, then you can take a moment to mutate any of the <code>actions</code> as well. Using <code>RefCell</code> or <code>Cell</code> on a field also works when you <em>can't</em> mutate a struct, but obscures when the value may be changing. <code>RefCell</code> also runs the risk of runtime borrow panics. You should avoid <code>RefCell</code> if possible!</p>\n\n<p>I don't know how this framework works, which affects how this question can be answered. It looks like <code>phi</code> takes ownership over your <code>MainMenuView</code>, which means <code>phi</code> decides when you get to mutate it from then on. If you're never given the opportunity to mutate the <code>MainMenuView</code> regularly to perform animation, it may still be possible. Another option that avoids <code>RefCell</code> might be to encode the animation when you mutate <code>selected</code> and compute how it should affect the drawing during the draw call. For example, if you store the timestamp when the selection was changed then you can compute at draw time how the sprite should be drawn.</p>\n"}, {"tags": [], "owner": {"reputation": 1763, "user_id": 624010, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2835aa961ed87f794876ae2f2e74a2b4?s=128&d=identicon&r=PG", "display_name": "SteveMcQwark", "link": "https://stackoverflow.com/users/624010/stevemcqwark"}, "is_accepted": true, "score": 2, "last_activity_date": 1454518506, "creation_date": 1454518506, "answer_id": 35183070, "question_id": 35166150, "link": "https://stackoverflow.com/questions/35166150/how-can-you-mutate-or-avoid-the-need-to-mutate-nested-constructed-fields-in-r/35183070#35183070", "title": "How can you mutate (or avoid the need to mutate) nested, constructed fields in Rust, without making everything mutable, when Cell can&#39;t be used?", "body": "<p>From your tutorial, it looks like the <code>View::render</code> already takes the <code>MainMenuView</code> as a mutable reference. The <code>MainMenuView</code> has ownership of all the <code>Action</code> values through the <code>Vec</code>, which means mutability transfers through to them. This means you didn't actually have to change anything in order to get mutable access to the <code>Action</code> values, except to call <code>iter_mut()</code> instead of <code>iter()</code> in the <code>for</code> loop in the implementation of <code>View::render</code> for <code>MainMenuView</code>.</p>\n"}], "owner": {"reputation": 171, "user_id": 2915584, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0e102afcfde7b6fee8b2d4ca2ed87ba5?s=128&d=identicon&r=PG", "display_name": "azmr", "link": "https://stackoverflow.com/users/2915584/azmr"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1112, "favorite_count": 0, "accepted_answer_id": 35183070, "answer_count": 3, "score": 3, "last_activity_date": 1454874277, "creation_date": 1454457654, "last_edit_date": 1454874277, "question_id": 35166150, "link": "https://stackoverflow.com/questions/35166150/how-can-you-mutate-or-avoid-the-need-to-mutate-nested-constructed-fields-in-r", "title": "How can you mutate (or avoid the need to mutate) nested, constructed fields in Rust, without making everything mutable, when Cell can&#39;t be used?", "body": "<p>I'm pretty new to Rust and I've been slowly following <a href=\"http://jadpole.github.io/arcaders/arcaders-1-0/\" rel=\"nofollow\">an arcade game tutorial</a> which has been a great help with the concepts it goes through.</p>\n\n<p>In <a href=\"http://jadpole.github.io/arcaders/arcaders-1-9/\" rel=\"nofollow\">part nine</a> of the tutorial, in which the main menu is created, the author suggests 'homework' for the reader of making the labels on the main menu (\"New Game\", \"Quit\") animate their change in size when focused and unfocused, rather than jump to their idle/focused size. This is where I have been having difficulty...</p>\n\n<p>The basic layout of the relevant parts of the code before I started to implement the change is the following:</p>\n\n<pre><code>// equivalent to 'menu option'\nstruct Action {\n    /// function executed if action chosen\n    func: Box&lt;Fn(&amp;mut Phi) -&gt; ViewAction&gt;,\n    label: &amp;'static str,\n    idle_sprite: Sprite, // smaller (32)\n    focus_sprite: Sprite, // larger (38)\n    // ...\n}\nimpl Action {\n    fn new(phi: &amp;mut Phi, label: &amp;'static str, func: Box&lt;Fn(&amp;mut Phi) -&gt; ViewAction&gt;) -&gt; Action {\n        // ...\n    }\n\nstruct MainMenuView {\n    actions: Vec&lt;Action&gt;,\n    selected: i8,\n    // ...\n}\nimpl MainMenuView {\n    pub fn new(phi: &amp;mut Phi) -&gt; MainMenuView {\n        // ...\n    }\n}\nimpl View for MainMenuView {\n    fn render(&amp;mut self, phi: &amp;mut Phi, elapsed: f64) -&gt; ViewAction {\n        // ...\n        for (i, action) in self.actions.iter().enumerate() {\n            // ...\n        }\n    }\n}\n\nfn main() {\n    ::phi::spawn(\"Arcade Shooter\", |phi| {\n        Box::new(::views::main_menu::MainMenuView::new(phi))\n    });\n}\n</code></pre>\n\n<p>&nbsp;</p>\n\n<p>My first thought for the animation was to make it dynamically create a sprite based on an interpolated size between <code>idle_size</code>and <code>focus_size</code> using time elapsed since focus change using methods on <code>Action</code> to focus and defocus to change a <code>current_size</code> field that would be used to generate a sprite for a <code>sprite</code> field.</p>\n\n<p>This required a mutable binding of the <code>Action</code> struct, which took me a little while to work out as there was no <code>let</code> binding anywhere, but seemed to be just about possible by changing the constructor: <code>Action::new(...) -&gt; &amp;mut action</code>, and lots of explicitly marking lifetimes (which had its own issues, but this is getting too long as it is). I then realised that the <code>MainMenuView</code> would have to be mutably bound as well, at which point I stopped this path (I hadn't managed to successfully compile since starting it), as this seemed a really inelegant solution that made basically everything mutable, surely defeating the point of rust's immutability default...</p>\n\n<p>I then wondered whether I could just create a new <code>MainMenuView</code> with a new <code>Action</code> with the new <code>sprite</code>, which could probably work (changing view to another <code>MainMenuView</code>), but this seems like a really wasteful way to just change the size of some text and again is pretty inelegant.</p>\n\n<p>After that, I remembered <code>Cell</code>, but when trying this to make the <code>actions</code> for <code>MainMenuView</code> a <code>Vec&lt;Cell&lt;Actions&gt;&gt;</code>, I found <code>Cell</code> only works with <code>Copy</code> types. This might have been ok (I don't have enough experience to know), but the <code>func</code> field of <code>Action</code> does not implement <code>Copy</code> (and I'm not sure if it can?) and so <code>Action</code> cannot <code>#[derive(Copy)]</code>. Dead end without restructuring a large section of the program to not have <code>func</code> in <code>Action</code>?</p>\n\n<p><strong>This is the end of my main question - basically, what do you do when you have structs nested and you want to have a deep field mutate, but can't put a <code>Cell</code> around it (afaik)? And is this a structural issue with the code such that I should be avoiding this issue in the first place?</strong></p>\n\n<p>I also realised that a solution with a <code>Vec&lt;Sprite&gt;</code> in <code>Action</code> with a lot of sprites of different sizes for the transition would eliminate the need for any of the aforementioned to be mutable. This instinctively felt slightly hacky, as it was effectively hardcoding something that shouldn't have to be. I could also see issues in the implementation with properly aligning to frames (I'm new to synchronising things with frame timing as well), and working for a maximum fps - although the number of sprites could be dynamically created based on the max fps when <code>MainMenuView</code> is constructed...</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 20, "last_activity_date": 1454441200, "last_edit_date": 1454441200, "creation_date": 1454438366, "answer_id": 35161356, "question_id": 35161176, "link": "https://stackoverflow.com/questions/35161176/checking-equality-of-custom-structs/35161356#35161356", "title": "Checking equality of custom structs", "body": "<p>Deriving <code>PartialEq</code> does work; but Rust does not have a notion of structural equality of different types. If you write <code>#[derive(PartialEq)]</code> on one type, it does not mean that values of this type could be compared with values of another type, even if it has the same internal structure. It only means that values of this type can be compared between themselves.</p>\n\n<p>However, <code>PartialEq</code> has a type parameter for the right-hand side operand (creatively named <code>Rhs</code>), which means you can implement <code>PartialEq</code> multiple times for a single type with different type arguments. <code>#[derive(PartialEq)]</code> will only implement <code>PartialEq&lt;X&gt;</code> when applied on <code>X</code>, but that doesn't stop you from implementing <code>PartialEq&lt;Y&gt;</code> for other values of <code>Y</code> yourself.</p>\n\n<p>In this case, you do need to implement <code>PartialEq</code> manually for these types, in both directions:</p>\n\n<pre><code>impl&lt;'a, 'b&gt; PartialEq&lt;TypeB&lt;'b&gt;&gt; for TypeA&lt;'a&gt; {\n    fn eq(&amp;self, other: &amp;TypeB&lt;'b&gt;) -&gt; bool {\n        self.0 == other.0\n    }\n}\n\nimpl&lt;'a, 'b&gt; PartialEq&lt;TypeA&lt;'a&gt;&gt; for TypeB&lt;'b&gt; {\n    fn eq(&amp;self, other: &amp;TypeA&lt;'a&gt;) -&gt; bool {\n        self.0 == other.0\n    }\n}\n</code></pre>\n\n<p>Afterwards you will be able to use <code>==</code> or <code>assert_eq!()</code> for these pairs of types. Remember that you can still keep <code>#[derive(PartialEq)]</code> on your types if you need it too!</p>\n"}], "owner": {"reputation": 1091, "user_id": 3745005, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/yvS7i.png?s=128&g=1", "display_name": "andrey", "link": "https://stackoverflow.com/users/3745005/andrey"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5277, "favorite_count": 0, "accepted_answer_id": 35161356, "answer_count": 1, "score": 11, "last_activity_date": 1516550458, "creation_date": 1454437744, "last_edit_date": 1516550458, "question_id": 35161176, "link": "https://stackoverflow.com/questions/35161176/checking-equality-of-custom-structs", "title": "Checking equality of custom structs", "body": "<p>I'm trying to check equality of two (functionally identical) structs.</p>\n\n<pre><code>#[derive(PartialEq, Debug)]\npub struct TypeA&lt;'a&gt;(&amp;'a str);\n\n#[derive(PartialEq, Debug)]\npub struct TypeB&lt;'a&gt;(&amp;'a str);\n\nimpl&lt;'a&gt; TypeA&lt;'a&gt; {\n    pub fn new(n: &amp;str) -&gt; TypeA {\n        TypeA(n)\n    }\n}\n\nimpl&lt;'a&gt; TypeB&lt;'a&gt; {\n    pub fn new(n: &amp;str) -&gt; TypeB {\n        TypeB(n)\n    }\n}\n\nfn main() {\n    assert_eq!(TypeA::new(\"A\"), TypeB::new(\"A\"));\n}\n</code></pre>\n\n<p>It returns the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:20:5\n   |\n20 |     assert_eq!(TypeA::new(\"A\"), TypeB::new(\"A\"));\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `TypeA`, found struct `TypeB`\n   |\n   = note: expected type `TypeA&lt;'_&gt;`\n              found type `TypeB&lt;'_&gt;`\n   = note: this error originates in a macro outside of the current crate\n</code></pre>\n\n<p>It seems like deriving <code>PartialEq</code> isn't working. Is the only solution to implement it manually between these two types? Is the problem somewhere else entirely?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 292, "user_id": 9858935, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3dd41cd42ff6e384f973954dc90e6945?s=128&d=identicon&r=PG&f=1", "display_name": "Folling", "link": "https://stackoverflow.com/users/9858935/folling"}, "edited": false, "score": 0, "creation_date": 1617361415, "post_id": 35161415, "comment_id": 118288027, "body": "Why is it considered an antipattern?"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 292, "user_id": 9858935, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3dd41cd42ff6e384f973954dc90e6945?s=128&d=identicon&r=PG&f=1", "display_name": "Folling", "link": "https://stackoverflow.com/users/9858935/folling"}, "edited": false, "score": 1, "creation_date": 1617406608, "post_id": 35161415, "comment_id": 118302628, "body": "@Folling check this out: <a href=\"https://stackoverflow.com/questions/45086595/is-it-considered-a-bad-practice-to-implement-deref-for-newtypes\" title=\"is it considered a bad practice to implement deref for newtypes\">stackoverflow.com/questions/45086595/&hellip;</a>"}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 10, "last_activity_date": 1454438657, "creation_date": 1454438657, "answer_id": 35161415, "question_id": 35160995, "link": "https://stackoverflow.com/questions/35160995/implement-foreign-trait-for-foreign-type/35161415#35161415", "title": "Implement foreign trait for foreign type", "body": "<p>The simplest way would be to use newtype pattern:</p>\n\n<pre><code>extern crate a;\nextern crate b;\n\nuse a::SomeTrait;\nuse b::SomeStruct;\n\npub struct MySomeStruct(SomeStruct);\n\nimpl SomeTrait for MySomeStruct {\n    ...\n}\n</code></pre>\n\n<p>Here you create a wrapper around the foreign struct, and since this wrapper is a completely different type which belongs to your crate, you are free to implement <code>a::SomeTrait</code> for it. This is similar to your 2nd point, except that you absolutely don't need to reimplement the type from scratch.</p>\n\n<p>Naturally, you won't be able to call all methods of <code>SomeStruct</code> on <code>MySomeStruct</code>. You must either forward all methods you want, or unwrap the inner value when you don't need its trait implementation anymore, or you can <code>impl Deref for MySomeStruct { type Target = SomeStruct; ... }</code>, but the latter is considered an antipattern.</p>\n"}, {"tags": [], "owner": {"reputation": 7455, "user_id": 5432501, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/8MGE3.png?s=128&g=1", "display_name": "Alex Knauth", "link": "https://stackoverflow.com/users/5432501/alex-knauth"}, "is_accepted": false, "score": 3, "last_activity_date": 1454438711, "creation_date": 1454438711, "answer_id": 35161430, "question_id": 35160995, "link": "https://stackoverflow.com/questions/35160995/implement-foreign-trait-for-foreign-type/35161430#35161430", "title": "Implement foreign trait for foreign type", "body": "<p>I'm not sure what would be the most idiomatic, but it looks like the best approach would be to use the newtype pattern, which is a tuple-struct with one field. This creates a new type distinct from the old one, and you can implement the traits for that new type. To use the trait methods, you will need to wrap it in the newtype, but to use the normal methods, you'll use the normal struct without your newtype wrapper.</p>\n\n<pre><code>struct MyType(TheirType);\n\nimpl TheTrait for MyType {\n    ....\n}\n\nfn main() {\n    let a = TheirType::new(....);\n    a.method_on_their_type();\n    let b = MyType(TheirType::new(....));\n    b.method_on_the_trait();\n}\n</code></pre>\n"}], "owner": {"reputation": 4874, "user_id": 595304, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/e4cc4011841c2a363c66e259c68a567f?s=128&d=identicon&r=PG", "display_name": "evotopid", "link": "https://stackoverflow.com/users/595304/evotopid"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3114, "favorite_count": 0, "closed_date": 1454443010, "accepted_answer_id": 35161415, "answer_count": 2, "score": 6, "last_activity_date": 1454438711, "creation_date": 1454437137, "question_id": 35160995, "link": "https://stackoverflow.com/questions/35160995/implement-foreign-trait-for-foreign-type", "closed_reason": "Duplicate", "title": "Implement foreign trait for foreign type", "body": "<p>So I see there are reasons to forbid orphan trait implementations because of forward compatibility considerations (to prevent the addition of a further trait implementation in a library from breaking somewhere where the type's trait is used) and it possibly making compilation a lot more difficult. But I wonder which workaround would be considered by the Rust community to be the most ideal one:</p>\n\n<p>(Just in case this wasn't enough background: I am trying to use <a href=\"https://crates.io/crates/rusqlite/\" rel=\"noreferrer\">rusqlite</a> with <a href=\"https://crates.io/crates/chrono/\" rel=\"noreferrer\">chrono</a>'s <code>DateTime</code>. So I want to implement rusqlite's <code>FromSql</code> and <code>ToSql</code> traits for <code>DateTime&lt;UTC&gt;</code> but that's apparently not as easy as I thought it'd be - I'm just starting out with Rust currently.)</p>\n\n<ul>\n<li>Fork rusqlite and implement the trait. (I kind of feel like this is not the nicest way to do it because maybe it's just me who needs this trait implementation there and so I might end up having to keep my own fork up to date. <em>Also I wasn't able to implement the traits because there are some complicated generics things that I don't understand perfectly yet.</em>)</li>\n<li>Implement my own <code>DateTime</code> struct (probably the best workaround but I feel like this is just some replication of work that shouldn't be nescessary).</li>\n<li>Somehow \"copy\" the <code>DateTime&lt;UTC&gt;</code> trait and give it an alias and implement the <code>FromSql</code> and <code>ToSql</code> traits for my aliased type (however I think this is not trivial either and when I tried it I wasn't able to get it to work since it was still treated as an external type).</li>\n</ul>\n\n<p>I hope somebody can explain to me how to best solve this issue, from my pure OOP experience I would just like to be able to inherit <code>DateTime</code> and implement the interface but (for valid reasons) this is not how it gets done in Rust...</p>\n"}, {"tags": ["collections", "rust", "traits", "standard-library"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1454434632, "post_id": 35159530, "comment_id": 58038582, "body": "I seem to remember having heard that HKT might be needed to get useful collection traits but I am wondering if the current &quot;associated items&quot; would not be sufficient..."}, {"owner": {"reputation": 32469, "user_id": 1529673, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/O6MQS.jpg?s=128&g=1", "display_name": "Strawberry", "link": "https://stackoverflow.com/users/1529673/strawberry"}, "edited": false, "score": 0, "creation_date": 1454892587, "post_id": 35159530, "comment_id": 58234291, "body": "This question was included in the review queue as a &#39;test&#39; question, i.e. the moderators felt that this question had no major problems. I disagree, This question strikes me as OT for SO."}], "answers": [{"tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": true, "score": 10, "last_activity_date": 1454505333, "creation_date": 1454505333, "answer_id": 35178119, "question_id": 35159530, "link": "https://stackoverflow.com/questions/35159530/does-rust-have-collection-traits/35178119#35178119", "title": "Does Rust have Collection traits?", "body": "<p>No, right now there's only <a href=\"http://doc.rust-lang.org/std/iter/trait.Iterator.html\" rel=\"noreferrer\">Iterator</a>. <code>MutableMap</code> and <code>Map</code> have been removed somewhere along the road to stabilization of std for Rust 1.0.</p>\n\n<p>There have been various discussions about re-adding traits to std. See these discussions on Rust internals:</p>\n\n<ul>\n<li><a href=\"https://internals.rust-lang.org/t/traits-that-should-be-in-std-but-arent/3002\" rel=\"noreferrer\">Traits that should be in std, but aren\u2019t</a></li>\n</ul>\n\n<p>or (less recent but more specifically on collections):</p>\n\n<ul>\n<li><a href=\"https://internals.rust-lang.org/t/collection-traits-take-2/1272\" rel=\"noreferrer\">Collection Traits, Take 2</a></li>\n</ul>\n\n<p>Bottom line: everybody wants some form of those traits in std but nobody wants to commit adding and supporting the <em>wrong</em> ones in the standard library until a clearer picture of what is ergonomic emerges.</p>\n"}], "owner": {"reputation": 45410, "user_id": 109549, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7d9c3b5cc4495ac7a328541287e1de87?s=128&d=identicon&r=PG", "display_name": "zslayton", "link": "https://stackoverflow.com/users/109549/zslayton"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1355, "favorite_count": 1, "accepted_answer_id": 35178119, "answer_count": 1, "score": 14, "last_activity_date": 1454505333, "creation_date": 1454432681, "question_id": 35159530, "link": "https://stackoverflow.com/questions/35159530/does-rust-have-collection-traits", "title": "Does Rust have Collection traits?", "body": "<p>I'd like to write a library that's a thin wrapper around some of the functionality in <a href=\"https://doc.rust-lang.org/std/collections/btree_map/struct.BTreeMap.html\">BTreeMap</a>. I'd prefer not to tightly couple it to that particular data structure though. Strictly speaking, I only need a subset of its functionality, something along the lines of the <a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/NavigableMap.html\">NavigableMap</a> interface in Java. I was hoping to find an analogous trait I could use. I seem to recall that at some point there were traits like <code>Map</code> and <code>MutableMap</code> in the standard library, but they seem to be absent now.</p>\n\n<p>Is there a crate that defines these? Or will they eventually be re-added to std?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1454429284, "post_id": 35157399, "comment_id": 58034935, "body": "Take a look at <code>lazy_static</code>: <a href=\"https://github.com/rust-lang-nursery/lazy-static.rs\" rel=\"nofollow noreferrer\">github.com/rust-lang-nursery/lazy-static.rs</a>"}, {"owner": {"reputation": 544, "user_id": 5686353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5cacb4cc0fb47b55236d297e0f65104d?s=128&d=identicon&r=PG&f=1", "display_name": "CodeMonkey", "link": "https://stackoverflow.com/users/5686353/codemonkey"}, "reply_to_user": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1454429590, "post_id": 35157399, "comment_id": 58035140, "body": "@starblue Quoting from the README: &quot;Using this macro, it is possible to have statics that require code to be executed at runtime in order to be initialized.&quot; In my example, no code should have to be executed at runtime."}], "answers": [{"comments": [{"owner": {"reputation": 544, "user_id": 5686353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5cacb4cc0fb47b55236d297e0f65104d?s=128&d=identicon&r=PG&f=1", "display_name": "CodeMonkey", "link": "https://stackoverflow.com/users/5686353/codemonkey"}, "edited": false, "score": 1, "creation_date": 1454429130, "post_id": 35158196, "comment_id": 58034837, "body": "So, as I feared, I&#39;ll have to write the same literal over and over again."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 544, "user_id": 5686353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5cacb4cc0fb47b55236d297e0f65104d?s=128&d=identicon&r=PG&f=1", "display_name": "CodeMonkey", "link": "https://stackoverflow.com/users/5686353/codemonkey"}, "edited": false, "score": 1, "creation_date": 1454430880, "post_id": 35158196, "comment_id": 58035999, "body": "You can always try to improve the <code>concat</code> macro to support constants ;) But it&#39;ll take a month or so until it&#39;s in stable rust"}, {"owner": {"reputation": 544, "user_id": 5686353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5cacb4cc0fb47b55236d297e0f65104d?s=128&d=identicon&r=PG&f=1", "display_name": "CodeMonkey", "link": "https://stackoverflow.com/users/5686353/codemonkey"}, "edited": false, "score": 0, "creation_date": 1454431694, "post_id": 35158196, "comment_id": 58036623, "body": "<code>concat</code> seems to be a compiler built-in: <a href=\"https://github.com/rust-lang/rust/blob/master/src/libstd/macros.rs#L311\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/blob/master/src/libstd/macros.rs#L&zwnj;&#8203;311</a> I really don&#39;t want to patch the compiler ;)"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 544, "user_id": 5686353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5cacb4cc0fb47b55236d297e0f65104d?s=128&d=identicon&r=PG&f=1", "display_name": "CodeMonkey", "link": "https://stackoverflow.com/users/5686353/codemonkey"}, "edited": false, "score": 0, "creation_date": 1454487149, "post_id": 35158196, "comment_id": 58060707, "body": "You can still put up an issue in the issue tracker. It shouldn&#39;t be too much of a problem to allow simple constants in <code>concat!</code>"}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 11, "last_activity_date": 1454429054, "creation_date": 1454429054, "answer_id": 35158196, "question_id": 35157399, "link": "https://stackoverflow.com/questions/35157399/how-to-concatenate-static-strings-in-rust/35158196#35158196", "title": "How to concatenate static strings in Rust", "body": "<p>The compiler error is</p>\n\n<blockquote>\n  <p>error: expected a literal</p>\n</blockquote>\n\n<p>A literal is anything you type directly like <code>\"hello\"</code> or <code>5</code>. The moment you start working with constants, you are not using literals anymore, but identifiers. So right now the best you can do is</p>\n\n<pre><code>const VERSION_STRING: &amp;'static str =\n    concat!(\"my program v\", env!(\"CARGO_PKG_VERSION\"));\n</code></pre>\n\n<p>Since the <code>env!</code> macro expands to a literal, you can use it inside <code>concat!</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 544, "user_id": 5686353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5cacb4cc0fb47b55236d297e0f65104d?s=128&d=identicon&r=PG&f=1", "display_name": "CodeMonkey", "link": "https://stackoverflow.com/users/5686353/codemonkey"}, "is_accepted": true, "score": 14, "last_activity_date": 1454432104, "creation_date": 1454432104, "answer_id": 35159310, "question_id": 35157399, "link": "https://stackoverflow.com/questions/35157399/how-to-concatenate-static-strings-in-rust/35159310#35159310", "title": "How to concatenate static strings in Rust", "body": "<p>Since I was essentially trying to emulate C macros, I tried to solve the problem with Rust macros and succeeded:</p>\n\n<pre><code>macro_rules! description {\n    () =&gt; ( \"my program\" )\n}\nmacro_rules! version {\n    () =&gt; ( env!(\"CARGO_PKG_VERSION\") )\n}\nmacro_rules! version_string {\n    () =&gt; ( concat!(description!(), \" v\", version!()) )\n}\n</code></pre>\n\n<p>It feels a bit ugly to use macros instead of constants, but it works as expected.</p>\n"}], "owner": {"reputation": 544, "user_id": 5686353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5cacb4cc0fb47b55236d297e0f65104d?s=128&d=identicon&r=PG&f=1", "display_name": "CodeMonkey", "link": "https://stackoverflow.com/users/5686353/codemonkey"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5170, "favorite_count": 0, "accepted_answer_id": 35159310, "answer_count": 2, "score": 20, "last_activity_date": 1454432104, "creation_date": 1454426796, "question_id": 35157399, "link": "https://stackoverflow.com/questions/35157399/how-to-concatenate-static-strings-in-rust", "title": "How to concatenate static strings in Rust", "body": "<p>I'm trying to concatenate static strings and string literals to build another static string. The following is the best I could come up with, but it doesn't work:</p>\n\n<pre><code>const DESCRIPTION: &amp;'static str = \"my program\";\nconst VERSION: &amp;'static str = env!(\"CARGO_PKG_VERSION\");\nconst VERSION_STRING: &amp;'static str = concat!(DESCRIPTION, \" v\", VERSION);\n</code></pre>\n\n<p>Is there any way to do that in Rust or do I have to write the same literal over and over again?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 1, "creation_date": 1454424373, "post_id": 35144488, "comment_id": 58031289, "body": "@FrancisGagn&#233; couldn&#39;t <code>AsRef&lt;str&gt;</code> be used instead of custom <code>IntoStrSlice</code>?"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 1, "creation_date": 1454424465, "post_id": 35144488, "comment_id": 58031369, "body": "And indeed, it <a href=\"https://play.rust-lang.org/?gist=7b83be09dcbc22fb3055&amp;version=stable\" rel=\"nofollow noreferrer\">does work</a>."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 1, "creation_date": 1454440005, "post_id": 35144488, "comment_id": 58041811, "body": "I didn&#39;t know <code>AsRef</code> could be used like that! Edited."}, {"owner": {"reputation": 4989, "user_id": 1685095, "user_type": "registered", "accept_rate": 42, "profile_image": "https://www.gravatar.com/avatar/5f06068bb9b4c00f12582ccc0ba64c4a?s=128&d=identicon&r=PG", "display_name": "user1685095", "link": "https://stackoverflow.com/users/1685095/user1685095"}, "edited": false, "score": 0, "creation_date": 1561313930, "post_id": 35144488, "comment_id": 100013130, "body": "Can this be abstracted for any type that implements <code>AsRef</code> and say <code>Debug</code>?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 4989, "user_id": 1685095, "user_type": "registered", "accept_rate": 42, "profile_image": "https://www.gravatar.com/avatar/5f06068bb9b4c00f12582ccc0ba64c4a?s=128&d=identicon&r=PG", "display_name": "user1685095", "link": "https://stackoverflow.com/users/1685095/user1685095"}, "edited": false, "score": 0, "creation_date": 1561556333, "post_id": 35144488, "comment_id": 100103835, "body": "@user1685095 <code>where I::Item: AsRef&lt;str&gt; + Debug</code>, or do you mean <code>where I::Item: AsRef&lt;T&gt;, T: Debug</code> (where <code>T</code> is a second generic type)?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1561557112, "post_id": 35144488, "comment_id": 100104358, "body": "Or the fancy new syntax: <code>pub fn history(i: impl IntoIterator&lt;Item = impl AsRef&lt;str&gt;&gt;)</code>."}, {"owner": {"reputation": 4989, "user_id": 1685095, "user_type": "registered", "accept_rate": 42, "profile_image": "https://www.gravatar.com/avatar/5f06068bb9b4c00f12582ccc0ba64c4a?s=128&d=identicon&r=PG", "display_name": "user1685095", "link": "https://stackoverflow.com/users/1685095/user1685095"}, "edited": false, "score": 0, "creation_date": 1561573549, "post_id": 35144488, "comment_id": 100113075, "body": "@FrancisGagn&#233; I wanted to mean that item after transforming to reference can be formatted with debug formatter."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 4989, "user_id": 1685095, "user_type": "registered", "accept_rate": 42, "profile_image": "https://www.gravatar.com/avatar/5f06068bb9b4c00f12582ccc0ba64c4a?s=128&d=identicon&r=PG", "display_name": "user1685095", "link": "https://stackoverflow.com/users/1685095/user1685095"}, "edited": false, "score": 0, "creation_date": 1561573757, "post_id": 35144488, "comment_id": 100113170, "body": "@user1685095 <a href=\"https://doc.rust-lang.org/edition-guide/rust-2018/trait-system/impl-trait-for-returning-complex-types-with-ease.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/edition-guide/rust-2018/trait-system/&hellip;</a>"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 3, "last_activity_date": 1561556219, "last_edit_date": 1561556219, "creation_date": 1454383496, "answer_id": 35144488, "question_id": 35144386, "link": "https://stackoverflow.com/questions/35144386/passing-slice-as-an-intoiterator/35144488#35144488", "title": "Passing slice as an IntoIterator", "body": "<p>Let's take a look at <a href=\"http://doc.rust-lang.org/stable/std/primitive.slice.html#implementations\" rel=\"nofollow noreferrer\">how <code>IntoIterator</code> is implemented for slices</a>:</p>\n\n<pre><code>impl&lt;'a, T&gt; IntoIterator for &amp;'a [T]\n    type Item = &amp;'a T\n    type IntoIter = Iter&lt;'a, T&gt;\n    fn into_iter(self) -&gt; Iter&lt;'a, T&gt;\n</code></pre>\n\n<p>Note that <code>Item</code> is defined as a <em>reference</em> to <code>T</code>, where <code>T</code> is the type of the items in the slice. Since you have a slice of <code>&amp;str</code>, this means that <code>Item</code> is <code>&amp;&amp;str</code>.</p>\n\n<p>You can use <code>.map(|s| *s)</code>, as you tried, to dereference the outer reference and yield an iterator of <code>&amp;str</code>.</p>\n\n<p>Another solution is to generalize your <code>history</code> function to accept both <code>I: IntoIterator&lt;Item = &amp;'a str&gt;</code> and <code>I: IntoIterator&lt;Item = &amp;'b &amp;'a str&gt;</code>. In order to do that, we need a trait that both <code>&amp;'a str</code> and <code>&amp;'b &amp;'a str</code> implement. We can use <a href=\"http://doc.rust-lang.org/stable/std/convert/trait.AsRef.html\" rel=\"nofollow noreferrer\"><code>AsRef&lt;str&gt;</code></a> for this (thanks to Vladimir Matveev for pointing this out):</p>\n\n<pre><code>pub fn history&lt;I&gt;(i: I)\nwhere\n    I: IntoIterator,\n    I::Item: AsRef&lt;str&gt;,\n{\n    for s in i {\n        println!(\"{}\", s.as_ref());\n    }\n}\n\nfn main() {\n    history(&amp;[\"s\"]);\n}\n</code></pre>\n"}], "owner": {"reputation": 1477, "user_id": 3908710, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff12a3f70e9c9ef63fd94970aa52ba69?s=128&d=identicon&r=PG&f=1", "display_name": "skyler", "link": "https://stackoverflow.com/users/3908710/skyler"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 831, "favorite_count": 1, "accepted_answer_id": 35144488, "answer_count": 1, "score": 3, "last_activity_date": 1561556219, "creation_date": 1454382789, "question_id": 35144386, "link": "https://stackoverflow.com/questions/35144386/passing-slice-as-an-intoiterator", "title": "Passing slice as an IntoIterator", "body": "<p>I have a function with the following signature:</p>\n\n<pre><code>pub fn history&lt;'a, I: IntoIterator&lt;Item = &amp;'a str&gt;&gt;(&amp;self, _: I)\n</code></pre>\n\n<p>Later on, I have a struct with a field called <code>main</code> that is a boxed closure.</p>\n\n<pre><code>main: box |args: &amp;[&amp;str], shell: &amp;mut Shell| {\n    shell.history.history(args);\n},\n</code></pre>\n\n<p>The important part is that I am calling the function I showed the signature for with <code>&amp;[&amp;str]</code> as an argument. I get the following compile error:</p>\n\n<pre><code>src/main.rs:281:47: 281:54 error: type mismatch resolving `&lt;&amp;[&amp;str] as core::iter::IntoIterator&gt;::Item == &amp;str`:\n expected &amp;-ptr,\n    found str [E0271]\nsrc/main.rs:281         shell.history.history(args);\n</code></pre>\n\n<p>So apparently <code>&amp;[&amp;str]</code> doesn't work as an <code>IntoIterator</code>. I tried <code>shell.history.history(args.into_iter());</code> and got a similar error message.</p>\n\n<p>Strangely, <code>shell.history.history(args.iter().map(|s|*s));</code> does work. This hardly seems like the correct solution though.</p>\n"}, {"tags": ["rust", "encapsulation"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 4, "creation_date": 1454404787, "post_id": 35142292, "comment_id": 58017463, "body": "Not possible yet. Wait for <a href=\"https://github.com/rust-lang/rfcs/pull/1422\" rel=\"nofollow noreferrer\">RFC 1422</a> to solve this issue."}, {"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "edited": false, "score": 1, "creation_date": 1462547244, "post_id": 35142292, "comment_id": 61696034, "body": "The RFC 1422 was <a href=\"https://github.com/rust-lang/rfcs/pull/1422#issuecomment-199443868\" rel=\"nofollow noreferrer\">accept</a> on 21 Mar 2016."}], "answers": [{"tags": [], "owner": {"reputation": 3376, "user_id": 134409, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/e1ec6b4e77bfbae1b992957792572630?s=128&d=identicon&r=PG", "display_name": "dpc.pw", "link": "https://stackoverflow.com/users/134409/dpc-pw"}, "is_accepted": false, "score": 1, "last_activity_date": 1469304345, "creation_date": 1469304345, "answer_id": 38545967, "question_id": 35142292, "link": "https://stackoverflow.com/questions/35142292/c-friend-like-construct-for-rust/38545967#38545967", "title": "C++ Friend-like construct for Rust", "body": "<p>As a workaround, it's possible to make something public, and then hide in from documentation with <code>#[doc(hidden)]</code>. Hidden bits are supposed to be not a part of the API, etc. and generally people won't use them anyway since they rely on docs and examples.</p>\n"}, {"comments": [{"owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "edited": false, "score": 0, "creation_date": 1504962163, "post_id": 46130978, "comment_id": 79224010, "body": "Ah brilliant .. will try out"}], "tags": [], "owner": {"reputation": 905, "user_id": 3025267, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/b304a447c1c17ed7baf22f270b85853b?s=128&d=identicon&r=PG&f=1", "display_name": "Isaac Woods", "link": "https://stackoverflow.com/users/3025267/isaac-woods"}, "is_accepted": true, "score": 16, "last_activity_date": 1504962035, "creation_date": 1504962035, "answer_id": 46130978, "question_id": 35142292, "link": "https://stackoverflow.com/questions/35142292/c-friend-like-construct-for-rust/46130978#46130978", "title": "C++ Friend-like construct for Rust", "body": "<p>Now <a href=\"https://github.com/rust-lang/rfcs/pull/1422\" rel=\"noreferrer\">RFC 1422</a> has been accepted, this is possible! You can replace <code>pub</code> in structure definitions with:</p>\n\n<ul>\n<li><code>pub(crate)</code> to allow access within the current crate</li>\n<li><code>pub(super)</code> to allow access to the current module's parent as well</li>\n<li><code>pub(in some_module)</code> to allow access from <code>some_module</code></li>\n</ul>\n"}], "owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1650, "favorite_count": 0, "accepted_answer_id": 46130978, "answer_count": 2, "score": 13, "last_activity_date": 1504962035, "creation_date": 1454368671, "last_edit_date": 1454369337, "question_id": 35142292, "link": "https://stackoverflow.com/questions/35142292/c-friend-like-construct-for-rust", "title": "C++ Friend-like construct for Rust", "body": "<p>In certain cases I would like to leverage whatever alternative there is in Rust to C++'s <code>friend</code> keyword. In crate <strong>A</strong> I have the following modules:</p>\n\n<p><strong>mod a0</strong>:</p>\n\n<pre><code>pub struct A {\n    pub a0: u8,\n    a1: SomeType,\n}\n\nimpl A {\n    pub fn fa0(...) { ... }\n    fn fa1(...) { ... }\n}\n</code></pre>\n\n<p>Modules <code>b0</code> and <code>c0</code> need access to all public and private members of <code>A</code>. Code cannot do that unless it is in <code>mod a0</code>. I want to expose only <code>A</code>, <code>A::a0</code> and <code>A::fa0</code> to other crates interfacing with this crate, but within this crate I want access to the complete implementation of <code>A</code> (public and private).</p>\n\n<p>I usually end up doing something like:</p>\n\n<p><strong>mod a0</strong>:</p>\n\n<pre><code>pub struct A {\n    pub a0: u8,\n    inner: Inner\n}\n\npub struct Inner { /* all pub fields */ }\n\npub fn get_inner&lt;'a&gt;(obj: &amp;'a mut A) -&gt; &amp;'a Inner {\n     &amp;mut obj.inner\n}\n</code></pre>\n\n<p>Modules <code>b0</code> and <code>c0</code> access <code>get_inner</code> and hence <code>Inner</code>, while in <code>lib.rs</code> I do:</p>\n\n<pre><code>mod a0;\nmod b0;\nmod c0;\n\npub use a0::A; // so other crates cannot use get_inner(...) etc.\n</code></pre>\n\n<p>This seems very convoluted and I seem to be missing something. Or is this the only way to do it ?</p>\n"}, {"tags": ["hash", "enums", "hashmap", "rust"], "answers": [{"comments": [{"owner": {"reputation": 3039, "user_id": 2851815, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/37MCt.png?s=128&g=1", "display_name": "\u043d\u0430\u0431\u0438\u044f\u0447\u043b\u044d\u0432\u044d\u043b\u0438", "link": "https://stackoverflow.com/users/2851815/%d0%bd%d0%b0%d0%b1%d0%b8%d1%8f%d1%87%d0%bb%d1%8d%d0%b2%d1%8d%d0%bb%d0%b8"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1454364847, "post_id": 35141128, "comment_id": 58003209, "body": "@Shepmaster Then you cry."}, {"owner": {"reputation": 13, "user_id": 5869853, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7e13920246ba80a4d4c722d1018d3318?s=128&d=identicon&r=PG&f=1", "display_name": "Alex", "link": "https://stackoverflow.com/users/5869853/alex"}, "edited": false, "score": 0, "creation_date": 1454447719, "post_id": 35141128, "comment_id": 58046279, "body": "Thanks Francis. I did not know you could convert an enum with &#39;as&#39;. I managed to implement it into my code with no problems."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 1, "last_activity_date": 1454363727, "creation_date": 1454363727, "answer_id": 35141128, "question_id": 35140960, "link": "https://stackoverflow.com/questions/35140960/how-do-you-make-a-non-hashable-c-like-enum-from-a-library-hashable/35141128#35141128", "title": "How do you make a non-hashable, C-like enum from a library hashable?", "body": "<p>The <a href=\"http://www.rust-sfml.org/doc/rsfml/window/keyboard/enum.Key.html\" rel=\"nofollow\"><code>Key</code></a> enum is a C-like enum (i.e. no variants have additional data), so we can use <code>as</code> to convert an enum of this type to an integer, e.g. <code>u32</code>. Then, we can defer to <code>u32</code>'s implementation of <code>Hash</code>.</p>\n\n<p>Here's a minimal example that doesn't use external libraries:</p>\n\n<pre><code>use std::hash::{Hash, Hasher};\n\n#[derive(Copy, Clone)]\nenum E {\n    A, B, C\n}\n\nstruct NE(E);\n\nimpl Hash for NE {\n    fn hash&lt;H&gt;(&amp;self, state: &amp;mut H) where H: Hasher {\n        (self.0 as u32).hash(state)\n    }\n}\n</code></pre>\n\n<p><code>E</code> doesn't implement <code>Hash</code>. <code>NE</code> wraps an <code>E</code> and implements <code>Hash</code> by converting the enum to <code>u32</code>, then using <code>u32</code>'s implementation of <code>Hash</code>.</p>\n"}], "owner": {"reputation": 13, "user_id": 5869853, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7e13920246ba80a4d4c722d1018d3318?s=128&d=identicon&r=PG&f=1", "display_name": "Alex", "link": "https://stackoverflow.com/users/5869853/alex"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 193, "favorite_count": 0, "accepted_answer_id": 35141128, "answer_count": 1, "score": 1, "last_activity_date": 1454365017, "creation_date": 1454363151, "last_edit_date": 1454365017, "question_id": 35140960, "link": "https://stackoverflow.com/questions/35140960/how-do-you-make-a-non-hashable-c-like-enum-from-a-library-hashable", "title": "How do you make a non-hashable, C-like enum from a library hashable?", "body": "<p>I am learning how to use Rust by making a little Pac-Man clone game in SFML (using RSFML) but I have ran into a problem with mapping the <a href=\"http://www.rust-sfml.org/doc/rsfml/window/keyboard/enum.Key.html\" rel=\"nofollow\"><code>Key</code></a> enum.</p>\n\n<p>I have created this struct which has maps of keys tied to booleans, I used this in a previous C++ project so I am just trying to replicate it.</p>\n\n<pre><code>use sfml::window::keyboard::Key;\nuse std::collections::HashMap;\n\npub struct Input {\n    held_keys: HashMap&lt;Key, bool&gt;,\n    pressed_keys: HashMap&lt;Key, bool&gt;,\n    released_keys: HashMap&lt;Key, bool&gt;\n}\n</code></pre>\n\n<p>I then received an error about <code>Key</code> being not hashable. I checked the library and the enum did not derive <code>Hash</code> to make it usable as a key. I looked around for advice about this but did not come with many answers; someone suggested to try and wrap the enum in a new struct type and derive <code>Hash</code> from there.</p>\n\n<p>So I tried adding the following:</p>\n\n<pre><code>#[derive(Hash, Eq, PartialEq)]\nstruct HKey {\n     key: Key\n}\n\npub struct Input {\n    held_keys: HashMap&lt;HKey, bool&gt;,\n    pressed_keys: HashMap&lt;HKey, bool&gt;,\n    released_keys: HashMap&lt;HKey, bool&gt;\n}\n</code></pre>\n\n<p>But that still ended up with this error, as I am assuming all it does is mix in the hashable trait for each property in the struct.</p>\n\n<pre><code>the trait `core::hash::Hash` is not implemented for the type `sfml::window::keyboard::Key`\n    key: Key\n    ^~~~~~~~\nin this expansion of #[derive_Hash] (defined in src/input.rs)\nhelp: run `rustc --explain E0277` to see a detailed explanation\nnote: required by `core::hash::Hash::hash`\n</code></pre>\n\n<p>I now am guessing I need to try and manually add the <code>Hash</code> trait implementation to the new <code>HKey</code> struct I made but I don't know how to generate a hash from an enum, as it seems it is not easy to turn it into an int. I ideally want do it safely, if Rust allows it. Does anyone have any advice on how to do this?</p>\n\n<p><a href=\"https://github.com/Giacom/Rust-Man/blob/master/src/input.rs\" rel=\"nofollow\">I am uploading my progress to GitHub, if you need a bigger picture.</a></p>\n"}, {"tags": ["json", "rust", "deserialization", "serde"], "answers": [{"comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user35288"}, "edited": false, "score": 1, "creation_date": 1454358141, "post_id": 35139333, "comment_id": 57999412, "body": "Yes, this will deserialize the enum, but when a struct has a member which has type <code>enum Foo</code>, deserializing the struct does not utilize the <code>Deserialize</code> impl for <code>Foo</code>."}], "tags": [], "owner": {"reputation": 854, "user_id": 3989982, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6941e7388870864da83acedf9e9c7693?s=128&d=identicon&r=PG&f=1", "display_name": "Tibor Benke", "link": "https://stackoverflow.com/users/3989982/tibor-benke"}, "is_accepted": false, "score": 2, "last_activity_date": 1454357092, "creation_date": 1454357092, "answer_id": 35139333, "question_id": 35134684, "link": "https://stackoverflow.com/questions/35134684/deserialize-to-struct-with-an-enum-member/35139333#35139333", "title": "Deserialize to struct with an enum member", "body": "<p>Here is an example. I'm not sure about the best way to handle unknown fields, but  this works:</p>\n\n<pre><code>extern crate serde;\n\nuse serde::de::{Deserialize, Deserializer, Visitor, Error};\n\npub enum Foo {\n    Bar,\n    Baz,\n}\n\nimpl Deserialize for Foo {\n    fn deserialize&lt;D&gt;(deserializer: &amp;mut D) -&gt; Result&lt;Foo, D::Error&gt;\n        where D: Deserializer\n    {\n        struct FieldVisitor;\n\n        impl Visitor for FieldVisitor {\n            type Value = Foo;\n\n            fn visit_str&lt;E&gt;(&amp;mut self, value: &amp;str) -&gt; Result&lt;Foo, E&gt;\n                where E: Error\n            {\n                match value {\n                    \"bar\" =&gt; Ok(Foo::Bar),\n                    \"baz\" =&gt; Ok(Foo::Baz),\n                    _ =&gt; Err(E::syntax(&amp;format!(\"Unexpected field: {}\", value))),\n                }\n            }\n        }\n\n        deserializer.visit(FieldVisitor)\n    }\n}\n</code></pre>\n\n<p>I used Rust 1.6.</p>\n"}, {"tags": [], "owner": {"reputation": 8171, "user_id": 311655, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/6bad9300ce17b6a89678ed9343647906?s=128&d=identicon&r=PG", "display_name": "DenisKolodin", "link": "https://stackoverflow.com/users/311655/deniskolodin"}, "is_accepted": false, "score": 3, "last_activity_date": 1493065476, "last_edit_date": 1493065476, "creation_date": 1492194503, "answer_id": 43417155, "question_id": 35134684, "link": "https://stackoverflow.com/questions/35134684/deserialize-to-struct-with-an-enum-member/43417155#43417155", "title": "Deserialize to struct with an enum member", "body": "<p>There is a full example for Rust 1.18 / serde 1.0.0:</p>\n\n<pre><code>impl&lt;'de&gt; Deserialize&lt;'de&gt; for EventKind {\n    fn deserialize&lt;D&gt;(deserializer: D) -&gt; result::Result&lt;EventKind, D::Error&gt;\n        where D: Deserializer&lt;'de&gt;\n    {\n        struct FieldVisitor {\n            min: usize,\n        };\n\n        impl&lt;'de&gt; Visitor&lt;'de&gt; for FieldVisitor {\n            type Value = EventKind;\n\n            fn expecting(&amp;self, formatter: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n                write!(formatter, \"a string containing at least {} bytes\", self.min)\n            }\n\n            fn visit_str&lt;E&gt;(self, value: &amp;str) -&gt; result::Result&lt;EventKind, E&gt;\n                where E: serde::de::Error\n            {\n                let kind = match value {\n                    \"request\" =&gt; EventKind::Request,\n                    \"ready\" =&gt; EventKind::Ready,\n                    \"next\" =&gt; EventKind::Next,\n                    \"reject\" =&gt; EventKind::Reject,\n                    \"fail\" =&gt; EventKind::Fail,\n                    \"done\" =&gt; EventKind::Done,\n                    \"cancel\" =&gt; EventKind::Cancel,\n                    \"suspended\" =&gt; EventKind::Suspended,\n                    s =&gt; {\n                        return Err(serde::de::Error::invalid_value(serde::de::Unexpected::Str(s),\n                                                                   &amp;self));\n                    }\n                };\n                Ok(kind)\n            }\n        }\n        deserializer.deserialize_str(FieldVisitor { min: 4 })\n    }\n}\n\nenum EventKind {\n    Request,\n    Ready,\n    Next,\n    Reject,\n    Fail,\n    Done,\n    Cancel,\n    Suspended,\n}\n\nimpl Serialize for EventKind {\n    fn serialize&lt;S&gt;(&amp;self, serializer: S) -&gt; result::Result&lt;S::Ok, S::Error&gt;\n        where S: Serializer\n    {\n        let kind = match *self {\n            EventKind::Request =&gt; \"request\",\n            EventKind::Ready =&gt; \"ready\",\n            EventKind::Next =&gt; \"next\",\n            EventKind::Reject =&gt; \"reject\",\n            EventKind::Fail =&gt; \"fail\",\n            EventKind::Done =&gt; \"done\",\n            EventKind::Cancel =&gt; \"cancel\",\n            EventKind::Suspended =&gt; \"suspended\",\n        };\n        serializer.serialize_str(kind)\n    }\n}\n</code></pre>\n\n<p>You can see a similar example <a href=\"https://docs.serde.rs/serde/de/trait.Visitor.html\" rel=\"nofollow noreferrer\">here</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 6357, "user_id": 6086311, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cb99289473f6393b89474785f2d294d1?s=128&d=identicon&r=PG", "display_name": "dtolnay", "link": "https://stackoverflow.com/users/6086311/dtolnay"}, "is_accepted": false, "score": 2, "last_activity_date": 1542060042, "last_edit_date": 1542060042, "creation_date": 1542059338, "answer_id": 53270605, "question_id": 35134684, "link": "https://stackoverflow.com/questions/35134684/deserialize-to-struct-with-an-enum-member/53270605#53270605", "title": "Deserialize to struct with an enum member", "body": "<p>I would recommend using <a href=\"https://crates.io/crates/serde_derive\" rel=\"nofollow noreferrer\">serde_derive</a> to generate the <code>Deserialize</code> implementations rather than writing them out by hand.</p>\n\n<p>In the code below, I use a <code>#[serde(rename_all = \"lowercase\")]</code> to make <code>Foo</code> accept the JSON representations <code>\"bar\"</code> and <code>\"baz\"</code> instead of the default <code>\"Bar\"</code> and <code>\"Baz\"</code> corresponding to their capitalization in the Rust code.</p>\n\n<pre><code>#[macro_use]\nextern crate serde_derive;\nextern crate serde;\n\n#[derive(Deserialize, Debug)]\nstruct Quux {\n    foo: Foo,\n    name: String,\n}\n\n#[derive(Deserialize, Debug)]\n#[serde(rename_all = \"lowercase\")]\nenum Foo {\n    Bar,\n    Baz,\n}\n\nfn main() {\n    let j = r#\"\n        {\n            \"foo\": \"bar\",\n            \"name\": \"some name\"\n        }\n        \"#;\n\n    println!(\"{:#?}\", serde_json::from_str::&lt;Quux&gt;(j).unwrap());\n}\n</code></pre>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user35288"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1686, "favorite_count": 0, "answer_count": 3, "score": 3, "last_activity_date": 1542060042, "creation_date": 1454341928, "last_edit_date": 1538856905, "question_id": 35134684, "link": "https://stackoverflow.com/questions/35134684/deserialize-to-struct-with-an-enum-member", "title": "Deserialize to struct with an enum member", "body": "<p>I am trying to take some json that looks like this:</p>\n\n<pre><code>{\n    \"foo\": \"bar\",\n    \"name\": \"some name\"\n}\n</code></pre>\n\n<p>and use <code>serde</code> to deserialize it to a data structure like this:</p>\n\n<pre><code>#[derive(Clone, PartialEq, Debug)]\npub struct Quux {\n    foo: Foo,\n    name: String,\n\n}\n\npub enum Foo {\n    Bar,\n    Baz,\n}\n</code></pre>\n\n<p>I <a href=\"https://github.com/pwoolcoc/test-deser-struct-w-enum\" rel=\"nofollow\">have some code</a>, but to be honest, it is pretty much straight out of the <code>serde</code> guide to \"deserializing without macros,\" and I'm not sure exactly what I would need to do to get it to deserialize the <code>foo</code> field to a <code>Foo</code>.</p>\n\n<p>I have implemented <code>Deserialize</code> for the <code>Foo</code> enum, which I thought would be enough for the <code>visitor.visit_value()</code> call in my <code>impl serde::de::Vistor for QuuxVisitor</code> to call that version of <code>deserialize</code>, but does not seem to be the case.</p>\n\n<p>The error I get when I try to deserialize to <code>Quux</code> is <code>called 'Result::unwrap()' on an 'Err' value: SyntaxError(\"expected value\", 2, 20)</code>, but if I change <code>Quux</code> to use a <code>String</code> for <code>foo</code> instead of a <code>Foo</code>, it deserializes fine.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1454327790, "post_id": 35127870, "comment_id": 57979465, "body": "you can&#39;t. There&#39;s an RFC to allow it though: <a href=\"https://github.com/rust-lang/rfcs/pull/1210\" rel=\"nofollow noreferrer\">github.com/rust-lang/rfcs/pull/1210</a>"}], "answers": [{"tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": true, "score": 0, "last_activity_date": 1454328126, "creation_date": 1454328126, "answer_id": 35130052, "question_id": 35127870, "link": "https://stackoverflow.com/questions/35127870/conflicting-implementations-error-in-complex-generic-code-how-to-fix-it/35130052#35130052", "title": "&quot;conflicting implementations&quot; error in complex generic code, how to fix it?", "body": "<p>Your impls are overlapping and there is no general fix to this (other than \"avoid the blanket impl if you want to specialize it later\").</p>\n\n<p>Having the possibility to have a more specialized version of the impl is currently in <a href=\"https://github.com/rust-lang/rfcs/pull/1210\" rel=\"nofollow\">a RFC</a>. An attempt at implementation is in <a href=\"https://github.com/rust-lang/rust/pull/30652\" rel=\"nofollow\">this pull request</a>.</p>\n"}], "owner": {"reputation": 1187, "user_id": 1137004, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b5ebaa8eb2711795cbf1c9cdda773328?s=128&d=identicon&r=PG", "display_name": "kiyomi", "link": "https://stackoverflow.com/users/1137004/kiyomi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 150, "favorite_count": 0, "accepted_answer_id": 35130052, "answer_count": 1, "score": 0, "last_activity_date": 1454328126, "creation_date": 1454321601, "last_edit_date": 1454322386, "question_id": 35127870, "link": "https://stackoverflow.com/questions/35127870/conflicting-implementations-error-in-complex-generic-code-how-to-fix-it", "title": "&quot;conflicting implementations&quot; error in complex generic code, how to fix it?", "body": "<p>I have <code>Base</code> trait, implement <code>Foo&lt;B&gt;</code> for all type that implemented <code>Bar&lt;B&gt;</code>, now I want to special implement <code>Foo&lt;B&gt;</code> for all <code>Foobar&lt;B&gt;</code> struct, where <code>B: Base</code>:</p>\n\n<pre><code>trait Base {}\n\n\ntrait Foo&lt;B: Base&gt; {}\n\n\ntrait Bar&lt;B: Base&gt; {}\n\n\nstruct Foobar&lt;B: Base&gt; { _b: B }\n\n\n// delete either, compile success\nimpl&lt;B: Base, T: Bar&lt;B&gt;&gt; Foo&lt;B&gt; for T {}\nimpl&lt;B: Base&gt; Foo&lt;B&gt; for Foobar&lt;B&gt; {}\n\n\nfn main()\n{\n}\n</code></pre>\n\n<p>The compile error is:</p>\n\n<pre><code>&lt;anon&gt;:14:1: 14:41 error: conflicting implementations for trait `Foo` [E0119]\n&lt;anon&gt;:14 impl&lt;B: Base, T: Bar&lt;B&gt;&gt; Foo&lt;B&gt; for T {}\n          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n&lt;anon&gt;:14:1: 14:41 help: see the detailed explanation for E0119\n&lt;anon&gt;:15:1: 15:38 note: note conflicting implementation here\n&lt;anon&gt;:15 impl&lt;B: Base&gt; Foo&lt;B&gt; for Foobar&lt;B&gt; {}\n          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>This is <a href=\"https://play.rust-lang.org/?gist=8ccb9def1f010ed7625d&amp;version=nightly\" rel=\"nofollow\">playground</a></p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1454311862, "post_id": 35123824, "comment_id": 57970107, "body": "It would help if you posted a self-contained example that compiles except for your problem. You probably need to either return a reference or require <code>Copy</code> for <code>T</code>, but I can&#39;t easily test that."}, {"owner": {"reputation": 2189, "user_id": 1477992, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/22e212e1defd6cf572fe11aa79f1dace?s=128&d=identicon&r=PG", "display_name": "le_me", "link": "https://stackoverflow.com/users/1477992/le-me"}, "edited": false, "score": 0, "creation_date": 1454358288, "post_id": 35123824, "comment_id": 57999500, "body": "I think you want something similar to what I coded in <a href=\"https://github.com/flo-l/rust-sliding_windows/\" rel=\"nofollow noreferrer\">sliding_windows</a>. Check out <a href=\"https://github.com/flo-l/rust-sliding_windows/blob/master/src/sliding_windows.rs#L103\" rel=\"nofollow noreferrer\">this</a> for example. My Iterator returns a custom struct Window which dereferences to a slice, see <a href=\"https://github.com/flo-l/rust-sliding_windows/blob/master/src/sliding_windows.rs#L123\" rel=\"nofollow noreferrer\">here</a>. (<a href=\"https://github.com/flo-l/rust-sliding_windows/blob/master/src/sliding_windows.rs#L174\" rel=\"nofollow noreferrer\">Iterator impl</a>)"}, {"owner": {"reputation": 2189, "user_id": 1477992, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/22e212e1defd6cf572fe11aa79f1dace?s=128&d=identicon&r=PG", "display_name": "le_me", "link": "https://stackoverflow.com/users/1477992/le-me"}, "edited": false, "score": 0, "creation_date": 1454358978, "post_id": 35123824, "comment_id": 57999932, "body": "The deeper problem here is: Rusts Iterator trait is defined so that the values returned by next() can outlive the Iterator itself. This is reflected in the <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#tymethod.next\" rel=\"nofollow noreferrer\">signature</a>: <code>fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt;</code>. No lifetimes. But you&#39;re trying to return a slice, which needs a lifetime. You&#39;d need <code>fn next(&amp;&#39;a mut self) -&gt; Option&lt;&amp;&#39;a Self::Item&gt;</code> (or something similar...this is called a streaming Iterator, it&#39;s not part of rust&#39;s stdlib yet)."}, {"owner": {"reputation": 2189, "user_id": 1477992, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/22e212e1defd6cf572fe11aa79f1dace?s=128&d=identicon&r=PG", "display_name": "le_me", "link": "https://stackoverflow.com/users/1477992/le-me"}, "edited": false, "score": 0, "creation_date": 1454359684, "post_id": 35123824, "comment_id": 58000332, "body": "the solution I chose in sliding_sindows is decoupling storage and Iterator, so that the lifetime of the window is bound to the lifetime of the storage and not the adaptor."}], "answers": [{"comments": [{"owner": {"reputation": 1386, "user_id": 778774, "user_type": "registered", "accept_rate": 38, "profile_image": "https://www.gravatar.com/avatar/6cc560392a27c4987c435120292aed27?s=128&d=identicon&r=PG", "display_name": "acsmith", "link": "https://stackoverflow.com/users/778774/acsmith"}, "edited": false, "score": 0, "creation_date": 1454348021, "post_id": 35125520, "comment_id": 57993439, "body": "I see. I&#39;m modeling my functionality after IterMut, however, which does something similar. But I suppose that if the stdlib authors had to use <code>unsafe</code>, then I probably do as well."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 1, "last_activity_date": 1454313577, "creation_date": 1454313577, "answer_id": 35125520, "question_id": 35123824, "link": "https://stackoverflow.com/questions/35123824/how-can-i-correct-cannot-infer-an-appropriate-lifetime-without-editing-functio/35125520#35125520", "title": "How can I correct &quot;cannot infer an appropriate lifetime&quot; without editing function signature?", "body": "<p>Rust prevents you from having more than one alias to an object if one of them is a mutable alias.</p>\n\n<p>Here, <code>Windower::out_data</code> is a mutable alias to some slice, and you're trying to return an immutable alias to the same data from your <code>next</code> method. In order for this to be safe, Rust must prevent you from being able to use <code>Windower::out_data</code> for as long as the slice returned by <code>next</code> is in scope. This means that the signature <code>fn next(&amp;'b mut self) -&gt; Option&lt;Self::Item&gt;</code> is indeed required, which means you simply cannot implement <code>Iterator</code> with your current implementation.</p>\n"}], "owner": {"reputation": 1386, "user_id": 778774, "user_type": "registered", "accept_rate": 38, "profile_image": "https://www.gravatar.com/avatar/6cc560392a27c4987c435120292aed27?s=128&d=identicon&r=PG", "display_name": "acsmith", "link": "https://stackoverflow.com/users/778774/acsmith"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 823, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1454313577, "creation_date": 1454306135, "question_id": 35123824, "link": "https://stackoverflow.com/questions/35123824/how-can-i-correct-cannot-infer-an-appropriate-lifetime-without-editing-functio", "title": "How can I correct &quot;cannot infer an appropriate lifetime&quot; without editing function signature?", "body": "<p>Background: I'm creating an iterator that returns a reference to a slice <code>&amp;[T]</code>, but the data vector needs to remain immutable. The iterator <strong>cannot</strong> modify the original data, but must return the same slice pointer repeatedly after it has modified it. I've considered having my iterator own a <code>Vec&lt;T&gt;</code>, but I would like to avoid that (and it didn't seem to work). I avoid allocations since I plan to use it mostly in realtime audio and allocations could potentially block. Code: </p>\n\n<pre><code>pub struct Windower&lt;'a, 'b, T: 'a + 'b&gt; {\n    window_type: WindowType,\n    hop_size: usize,\n    bin_size: usize,\n    current_index: usize,\n    data: &amp;'a [T],\n    out_data: &amp;'b mut [T]\n}\n\nimpl&lt;'a, 'b, T: Float + FromPrimitive&gt; Iterator for Windower&lt;'a, 'b, T&gt; {\n    type Item = &amp;'b [T];\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        if self.current_index &lt; (self.len() - 1) {\n            let start = self.current_index * self.hop_size;\n            let end = start + self.bin_size;\n            self.current_index += 1;\n            let window = self.window();\n            let data_iter = self.data[start..end].iter();\n\n            for &amp;mut v in self.out_data {\n                let val: T = window.next().unwrap() * \n                     *data_iter.next().unwrap();\n                v = val;\n            }\n\n            Some(self.out_data)\n        } else {\n            None\n        }\n    }\n}\n</code></pre>\n\n<p>Returns the error:</p>\n\n<pre><code>src/waves.rs:160:18: 160:31 error: cannot infer an appropriate lifetime for automatic coercion due to conflicting requirements [E0495]\nsrc/waves.rs:160             Some(self.out_data)\n                                  ^~~~~~~~~~~~~\nsrc/waves.rs:146:5: 164:6 help: consider using an explicit lifetime parameter as shown: fn next(&amp;'b mut self) -&gt; Option&lt;Self::Item&gt;\n</code></pre>\n\n<p>I cannot figure out how to fix this. I can't make the change suggested, because the trait implementation for Iterator does not have an explicit lifetime parameter.</p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1454240898, "post_id": 35112929, "comment_id": 57947307, "body": "Maybe you want the <code>--manifest-path</code> option? (The <code>--help</code> argument will print the arguments and descriptions of them.)"}, {"owner": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "reply_to_user": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1454265987, "post_id": 35112929, "comment_id": 57956064, "body": "I want to be able to compile and run a project placed not in current working directory, but in path which I specify"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1454278824, "post_id": 35112929, "comment_id": 57961068, "body": "In *nix shell terminology, you could use <code>(cd $project_path; cargo run)</code>: start a new subshell, in which you change directory and then execute the desired task. For Windows I think that\u2019d be something vaguely along the lines of <code>cmd -c &quot;cd %project_path%; cargo run&quot;</code>."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 2, "creation_date": 1454289308, "post_id": 35112929, "comment_id": 57963847, "body": "@AlexZhukovskiy, did you try the <code>--manifest-path</code> option?"}, {"owner": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "reply_to_user": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1454315611, "post_id": 35112929, "comment_id": 57971943, "body": "@huon i was thinking that it&#39;s for metadata info and so on, but it has needed behaviour. Thanks."}], "answers": [{"comments": [{"owner": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "edited": false, "score": 1, "creation_date": 1454349015, "post_id": 35130273, "comment_id": 57994062, "body": "I know what <code>-h</code> command does but I didn&#39;t expect that <code>manifest to execute</code> is <code>cargo.toml</code>. Just a misunderstanding. I was thinking it&#39;s an additional metadata file (like application manifest in <code>.Net</code>), this is why I didn&#39;t use this key. Thanks for an answer."}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 14, "last_activity_date": 1454328893, "creation_date": 1454328893, "answer_id": 35130273, "question_id": 35112929, "link": "https://stackoverflow.com/questions/35112929/how-to-specify-the-path-to-a-cargo-toml/35130273#35130273", "title": "How to specify the path to a Cargo.toml", "body": "<p>The <code>--manifest-path path/to/Cargo.toml</code> option to almost all <code>cargo</code> subcommands allows pointing it to a specific <code>Cargo.toml</code> file to use, overriding the default of searching the current directory and its parents for a file called <code>Cargo.toml</code> (this file is the \"manifest\").</p>\n\n<p>Incidentally, unix-y commands usually take a <code>-h</code> or <code>--help</code> argument which prints information about their command line options, <code>cargo</code> and <code>rustc</code> are no exception. E.g.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ cargo run --help\nRun the main binary of the local package (src/main.rs)\n\nUsage:\n    cargo run [options] [--] [&lt;args&gt;...]\n\nOptions:\n    -h, --help              Print this message\n    --bin NAME              Name of the bin target to run\n    --example NAME          Name of the example target to run\n    -j N, --jobs N          The number of jobs to run in parallel\n    --release               Build artifacts in release mode, with optimizations\n    --features FEATURES     Space-separated list of features to also build\n    --no-default-features   Do not build the `default` feature\n    --target TRIPLE         Build for the target triple\n    --manifest-path PATH    Path to the manifest to execute\n    -v, --verbose           Use verbose output\n    -q, --quiet             No output printed to stdout\n    --color WHEN            Coloring: auto, always, never\n\nIf neither `--bin` nor `--example` are given, then if the project only has one\nbin target it will be run. Otherwise `--bin` specifies the bin target to run,\nand `--example` specifies the example target to run. At most one of `--bin` or\n`--example` can be provided.\n\nAll of the trailing arguments are passed to the binary to run. If you're passing\narguments to both Cargo and the binary, the ones after `--` go to the binary,\n</code></pre>\n"}], "owner": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5486, "favorite_count": 0, "accepted_answer_id": 35130273, "answer_count": 1, "score": 11, "last_activity_date": 1454328893, "creation_date": 1454237191, "last_edit_date": 1454253113, "question_id": 35112929, "link": "https://stackoverflow.com/questions/35112929/how-to-specify-the-path-to-a-cargo-toml", "title": "How to specify the path to a Cargo.toml", "body": "<p>I'm new to Rust and I want to build and run my project. I use something like:</p>\n\n<pre><code>cd %project_path%\ncargo run\n</code></pre>\n\n<p>I want to be able to write <code>cargo run -path %project_path%</code> in a single line because I want to create a build script that doesn't allow changing the working directory. It seems that cargo doesn't have any <code>-path</code> or <code>-target</code> keys, which would define target directory, and I always get the message</p>\n\n<blockquote>\n  <p>could not find <code>Cargo.toml</code> in <code>C:\\WINDOWS\\system32</code> or any parent\n  directory</p>\n</blockquote>\n"}, {"tags": ["methods", "rust", "implementation"], "answers": [{"comments": [{"owner": {"reputation": 509, "user_id": 3419211, "user_type": "registered", "accept_rate": 64, "profile_image": "https://graph.facebook.com/100000859618233/picture?type=large", "display_name": "user3419211", "link": "https://stackoverflow.com/users/3419211/user3419211"}, "edited": false, "score": 0, "creation_date": 1454183402, "post_id": 35106186, "comment_id": 57933509, "body": "So This means that when I define a type, from that point on I have to type it whenever I use it."}, {"owner": {"reputation": 7519, "user_id": 5747548, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/45e0667746a2b2050babf6e83ce467a3?s=128&d=identicon&r=PG&f=1", "display_name": "jkiiski", "link": "https://stackoverflow.com/users/5747548/jkiiski"}, "reply_to_user": {"reputation": 509, "user_id": 3419211, "user_type": "registered", "accept_rate": 64, "profile_image": "https://graph.facebook.com/100000859618233/picture?type=large", "display_name": "user3419211", "link": "https://stackoverflow.com/users/3419211/user3419211"}, "edited": false, "score": 1, "creation_date": 1454184285, "post_id": 35106186, "comment_id": 57933822, "body": "@user3419211 Rust can infer the type in many situations, but for <code>impl</code> blocks and functions you need to specify it. That particular implementation of <code>length</code> depends on <code>self.start.x</code>/etc. being <code>f64</code>, so you have to tell Rust that it only works with those. You could however leave the type out from the variable declarations (use just <code>let dx = ...</code> instead <code>let dx:f64 = ...</code>) since it&#39;s already there in the <code>impl</code>."}, {"owner": {"reputation": 12035, "user_id": 603094, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/325af9a946cb4337c6640f0e95044be1?s=128&d=identicon&r=PG", "display_name": "kirelagin", "link": "https://stackoverflow.com/users/603094/kirelagin"}, "reply_to_user": {"reputation": 509, "user_id": 3419211, "user_type": "registered", "accept_rate": 64, "profile_image": "https://graph.facebook.com/100000859618233/picture?type=large", "display_name": "user3419211", "link": "https://stackoverflow.com/users/3419211/user3419211"}, "edited": false, "score": 0, "creation_date": 1454228611, "post_id": 35106186, "comment_id": 57944200, "body": "@user3419211 Well, it doesn\u2019t. You can write <code>impl&lt;T&gt; Line&lt;T&gt; { \u2026 }</code>. But the question is, how useful the functions <i>that</i> generic (that actually do not depend on type <code>T</code>) can be. They can be, but clearly not in your particular case, since you need to know at least <i>something</i> about <code>T</code> to perform calculations."}], "tags": [], "owner": {"reputation": 7519, "user_id": 5747548, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/45e0667746a2b2050babf6e83ce467a3?s=128&d=identicon&r=PG&f=1", "display_name": "jkiiski", "link": "https://stackoverflow.com/users/5747548/jkiiski"}, "is_accepted": true, "score": 3, "last_activity_date": 1517258884, "last_edit_date": 1517258884, "creation_date": 1454182598, "answer_id": 35106186, "question_id": 35105788, "link": "https://stackoverflow.com/questions/35105788/how-do-i-fix-wrong-number-of-type-arguments-while-trying-to-implement-a-method/35106186#35106186", "title": "How do I fix &quot;wrong number of type arguments&quot; while trying to implement a method?", "body": "<p>You need to add a type parameter to the impl:</p>\n\n<pre><code>impl Line&lt;f64&gt; {\n    fn length(&amp;self) -&gt; f64 {\n        let dx: f64 = self.start.x - self.end.x;\n        let dy: f64 = self.start.y - self.end.y;\n        (dx * dx + dy * dy).sqrt()\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 509, "user_id": 3419211, "user_type": "registered", "accept_rate": 64, "profile_image": "https://graph.facebook.com/100000859618233/picture?type=large", "display_name": "user3419211", "link": "https://stackoverflow.com/users/3419211/user3419211"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3423, "favorite_count": 0, "accepted_answer_id": 35106186, "answer_count": 1, "score": 1, "last_activity_date": 1517258884, "creation_date": 1454180427, "last_edit_date": 1517258824, "question_id": 35105788, "link": "https://stackoverflow.com/questions/35105788/how-do-i-fix-wrong-number-of-type-arguments-while-trying-to-implement-a-method", "title": "How do I fix &quot;wrong number of type arguments&quot; while trying to implement a method?", "body": "<p>I'm trying to implement a method:</p>\n\n<pre><code>struct Point&lt;T&gt; {\n    x: T,\n    y: T,\n}\n\nstruct Line&lt;T&gt; {\n    start: Point&lt;T&gt;,\n    end: Point&lt;T&gt;,\n}\n\nimpl Line {\n    fn length(&amp;self) -&gt; f64 {\n        let dx: f64 = self.start.x - self.end.x;\n        let dy: f64 = self.start.y - self.end.y;\n        (dx * dx + dy * dy).sqrt()\n    }\n}\n\nfn main() {\n    let point_start: Point&lt;f64&gt; = Point { x: 1.4, y: 1.24 };\n    let point_end: Point&lt;f64&gt; = Point { x: 20.4, y: 30.64 };\n\n    let line_a: Line&lt;f64&gt; = Line {\n        start: point_start,\n        end: point_end,\n    };\n    println!(\"length of line_a = {}\", line_a.length());\n}\n</code></pre>\n\n<p>I'm getting this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0243]: wrong number of type arguments: expected 1, found 0\n  --&gt; src/main.rs:11:6\n   |\n11 | impl Line {\n   |      ^^^^ expected 1 type argument\n</code></pre>\n\n<p>What is causing this problem?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "is_accepted": true, "score": 47, "last_activity_date": 1575324767, "last_edit_date": 1575324767, "creation_date": 1454125560, "answer_id": 35097744, "question_id": 35097710, "link": "https://stackoverflow.com/questions/35097710/dividing-two-integers-doesnt-print-as-a-decimal-number-in-rust/35097744#35097744", "title": "Dividing two integers doesn&#39;t print as a decimal number in Rust", "body": "<p>Just like in C and C++, dividing integers results in another integer.  Try this C++ program to see:</p>\n\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n{\n    cout &lt;&lt; 22 / 7 &lt;&lt; endl;            // 3\n    cout &lt;&lt; 22.0 / 7.0 &lt;&lt; endl;        // 3.14286\n}\n</code></pre>\n\n<p>Similarly in Rust, you need to specify both numbers as floats instead, which is done by putting a decimal anywhere in the number.  Try this Rust equivalent of the above program:</p>\n\n<pre><code>fn main() {\n    println!(\"{:.3}\", 22 / 7);         // 3\n    println!(\"{:.3}\", 22.0 / 7.0);     // 3.143\n}\n</code></pre>\n\n<p>If you have variables, you can convert them with <code>as</code> to either <code>f32</code> or <code>f64</code>, depending on your needs:</p>\n\n<pre><code>fn main() {\n    let x = 22;\n    println!(\"{:.3}\", x / 7);          // 3\n    println!(\"{:.3}\", x as f32 / 7.0); // 3.143\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 4924, "user_id": 2862719, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/yzhk5.png?s=128&g=1", "display_name": "m00am", "link": "https://stackoverflow.com/users/2862719/m00am"}, "is_accepted": false, "score": 28, "last_activity_date": 1511969183, "creation_date": 1511969183, "answer_id": 47556269, "question_id": 35097710, "link": "https://stackoverflow.com/questions/35097710/dividing-two-integers-doesnt-print-as-a-decimal-number-in-rust/47556269#47556269", "title": "Dividing two integers doesn&#39;t print as a decimal number in Rust", "body": "<p>When you are working with integer variables and do not have the option to add decimal points you can convert the integer variables into floats using the <a href=\"https://doc.rust-lang.org/book/first-edition/casting-between-types.html#as\" rel=\"noreferrer\"><code>as</code> keyword</a>:</p>\n\n<pre><code>fn main() {\n    let a = 42;\n    let b = 23;\n    let c = a / b;  // integer division\n    let d = a as f64 / b as f64;  // cast both variables to float before division\n    println!(\"integer division: {}\\nfloat division: {}\", c, d);\n}\n</code></pre>\n\n<p>This returns the following values:</p>\n\n<pre><code>integer division: 1\nfloat division: 1.826086956521739\n</code></pre>\n"}], "owner": {"reputation": 433, "user_id": 5840022, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d0ecb4e70cbcd967722d9803f4e060da?s=128&d=identicon&r=PG&f=1", "display_name": "plafhz", "link": "https://stackoverflow.com/users/5840022/plafhz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 13676, "favorite_count": 3, "accepted_answer_id": 35097744, "answer_count": 2, "score": 31, "last_activity_date": 1575324767, "creation_date": 1454125206, "last_edit_date": 1454253317, "question_id": 35097710, "link": "https://stackoverflow.com/questions/35097710/dividing-two-integers-doesnt-print-as-a-decimal-number-in-rust", "title": "Dividing two integers doesn&#39;t print as a decimal number in Rust", "body": "<p>I'm learning Rust, but when I print a decimal number, only the integer part is printed, not the decimal part:</p>\n\n<pre><code>fn main(){\n    println!(\"{:.3}\", 22/7);\n}\n// This only show 3\n</code></pre>\n\n<p>but when I print the decimal number explicitly, it works correctly:</p>\n\n<pre><code>fn main(){\n    println!(\"{:.3}\", 0.25648);\n}\n// this print 0.256\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 1589, "user_id": 2770092, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2321a7b8ee2a179e16b50242ecb21c4f?s=128&d=identicon&r=PG&f=1", "display_name": "Cecilio Pardo", "link": "https://stackoverflow.com/users/2770092/cecilio-pardo"}, "edited": false, "score": 0, "creation_date": 1454104649, "post_id": 35094649, "comment_id": 57911362, "body": "You can use the <code>and_then</code> method of <code>Option</code> to streamline the code."}], "answers": [{"tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": true, "score": 5, "last_activity_date": 1454106651, "creation_date": 1454106651, "answer_id": 35095224, "question_id": 35094649, "link": "https://stackoverflow.com/questions/35094649/how-do-i-reduce-the-nesting-of-my-code-when-dealing-with-nested-option-types/35095224#35095224", "title": "How do I reduce the nesting of my code when dealing with nested Option types?", "body": "<p>There are a few things you could do. One option would be to use a match and <code>continue</code> in the <code>None</code> arm, similar to your C# code:</p>\n\n<pre><code>fn main() {\n    for i in 1..100 {\n\n        let data = match some_data::get_some_data() {\n            None =&gt; continue,\n            Some(data) =&gt; data\n        };\n        let result = match data.some_work(i) {\n            None =&gt; continue,\n            Some(result) =&gt; result\n        };\n\n        if result &gt; 80 {\n            break;\n        }\n\n        println!(\"{}\", i);\n    }\n}\n</code></pre>\n\n<p>Another thing you could do, as @Cecilio Pardo suggested, is use the <code>is_then</code> method of the <code>Option</code> type to chain your operations:</p>\n\n<pre><code>fn main() {\n    for i in 1..100 {\n\n        if let Some(result) = some_data::get_some_data()\n                              .and_then(|data| data.some_work(i)) {\n            if result &gt; 80 {\n                break;\n            }\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 612, "favorite_count": 0, "accepted_answer_id": 35095224, "answer_count": 1, "score": 3, "last_activity_date": 1454253535, "creation_date": 1454104161, "last_edit_date": 1454253535, "question_id": 35094649, "link": "https://stackoverflow.com/questions/35094649/how-do-i-reduce-the-nesting-of-my-code-when-dealing-with-nested-option-types", "title": "How do I reduce the nesting of my code when dealing with nested Option types?", "body": "<p>I'm new to Rust and I'd like to reduce the nesting of my code. Take this C# code as an example:</p>\n\n<pre><code>for (int i = 0; i &lt; 100; i++)\n{\n    var obj = arr[i];\n    if (obj != null)\n    {\n        var something = obj.Something;\n        if (something == null)\n        {\n            if (i % 3 == 0)\n                Console.WriteLine(i);\n            break;\n        }\n    }\n}\n</code></pre>\n\n<p>ReSharper suggests rewriting it to reduce nesting:</p>\n\n<pre><code>for (int i = 0; i &lt; 100; i++)\n{\n    var obj = arr[i];\n    if (obj == null)\n        continue;\n    var something = obj.Something;\n    if (something != null)\n        continue;\n    if (i % 3 == 0)\n        Console.WriteLine(i);\n    break;\n}\n</code></pre>\n\n<p>Is there way to do the same thing in Rust? If I have nested <code>Option&lt;Option&lt;Option&lt;T&gt;&gt;&gt;</code> and so on I should write something like:</p>\n\n<pre><code>fn main() {\n    for i in 1..100 {\n\n        if let Some(data) = some_data::get_some_data() {\n            if let Some(result) = data.some_work(i) {\n                if result &gt; 80 {\n                    break;\n                }\n            }\n        }\n\n        println!(\"{}\", i);\n    }\n}\n\nmod some_data\n{\n    pub struct SomeData {\n        value : i32\n    }\n\n    impl SomeData {\n        pub fn some_work(&amp;self, i : i32) -&gt; Option&lt;i32&gt; {\n            Some(self.value + i)\n        }\n    }\n\n    pub fn get_some_data() -&gt; Option&lt;SomeData&gt; {\n        Some(SomeData { value : 50 })\n    }\n}\n</code></pre>\n\n<p>this example is simplified, but it shows the core problem.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 12035, "user_id": 603094, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/325af9a946cb4337c6640f0e95044be1?s=128&d=identicon&r=PG", "display_name": "kirelagin", "link": "https://stackoverflow.com/users/603094/kirelagin"}, "edited": false, "score": 1, "creation_date": 1454228329, "post_id": 35093869, "comment_id": 57944125, "body": "Hm, this seems to be a good question to ask in the issue tracker."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 12035, "user_id": 603094, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/325af9a946cb4337c6640f0e95044be1?s=128&d=identicon&r=PG", "display_name": "kirelagin", "link": "https://stackoverflow.com/users/603094/kirelagin"}, "edited": false, "score": 0, "creation_date": 1497172963, "post_id": 35093869, "comment_id": 75958826, "body": "Busy waiting with <a href=\"https://doc.rust-lang.org/std/process/struct.Child.html#method.try_wait\" rel=\"nofollow noreferrer\"><code>Child::try_wait()</code></a> is possible since Rust 1.18. But that doesn&#39;t really solve the problem..."}], "answers": [{"tags": [], "owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "is_accepted": false, "score": 2, "last_activity_date": 1454146369, "last_edit_date": 1454146369, "creation_date": 1454144840, "answer_id": 35099918, "question_id": 35093869, "link": "https://stackoverflow.com/questions/35093869/kill-child-process-while-waiting-for-it/35099918#35099918", "title": "Kill child process while waiting for it", "body": "<p>Obviously, you can just kill the process yourself. The <code>Child::id</code> method gives you the \"OS-assigned process identifier\" that should be sufficient for that.</p>\n\n<p>The only problem is that killing a process is a platform-dependent action. On UNIX killing a process is handled with the <a href=\"http://pubs.opengroup.org/onlinepubs/9699919799/functions/kill.html\" rel=\"nofollow\">kill</a> function:</p>\n\n<pre><code>#![feature(libc)]\nextern crate libc;\nuse std::env::args;\nuse std::process::Command;\nuse std::thread::{spawn, sleep};\nuse std::time::Duration;\nuse libc::{kill, SIGTERM};\n\nfn main() {\n    let mut child = Command::new(\"/bin/sh\").arg(\"-c\").arg(\"sleep 1; echo foo\").spawn().unwrap();\n    let child_id = child.id();\n    if args().any(|arg| arg == \"--kill\") {\n        spawn(move || {\n            sleep(Duration::from_millis(100));\n            unsafe {\n                kill(child_id as i32, SIGTERM);\n            }\n        });\n    }\n    child.wait().unwrap();\n}\n</code></pre>\n\n<p>On Windows you might try the <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms684320%28v=vs.85%29.aspx\" rel=\"nofollow\">OpenProcess</a> and <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms686714%28v=vs.85%29.aspx\" rel=\"nofollow\">TerminateProcess</a> functions (available with the <a href=\"https://crates.io/crates/kernel32-sys/\" rel=\"nofollow\">kernel32-sys</a> crate).</p>\n"}, {"tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": false, "score": 2, "last_activity_date": 1461689071, "creation_date": 1461689071, "answer_id": 36870954, "question_id": 35093869, "link": "https://stackoverflow.com/questions/35093869/kill-child-process-while-waiting-for-it/36870954#36870954", "title": "Kill child process while waiting for it", "body": "<p>If the child subprocess do not close stdout before finishing, it's possible to wait reading stdout. Here is an example</p>\n\n<pre><code>use std::io::Read;\nuse std::process::*;\nuse std::thread;\nuse std::time::Duration;\n\nfn wait_on_output(mut out: ChildStdout) {\n    while out.read_exact(&amp;mut [0; 1024]).is_ok() { }\n}\n\nfn wait_or_kill(cmd: &amp;mut Command, max: Duration) {\n    let mut child = cmd.stdout(Stdio::piped())\n                       .spawn()\n                       .expect(\"Cannot spawn child\");\n\n    let out = child.stdout.take().expect(\"No stdout on child\");\n\n    let h = thread::spawn(move || {\n        thread::sleep(max);\n        child.kill().expect(\"Cannot kill child\");\n        println!(\"{:?}\", child.wait());\n    });\n\n    wait_on_output(out);\n    h.join().expect(\"join fail\");\n}\n\nfn main() {\n    wait_or_kill(Command::new(\"sleep\").arg(\"1\"), Duration::new(2, 0));\n    wait_or_kill(Command::new(\"sleep\").arg(\"3\"), Duration::new(2, 0));\n}\n</code></pre>\n\n<p>The output of this program on my system is</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Ok(ExitStatus(ExitStatus(0)))\nOk(ExitStatus(ExitStatus(9)))\n</code></pre>\n\n<p>Although not in the docs, killing a finished child returns <code>Ok</code>.</p>\n\n<p>This works because killing a process close the files associated with it. However, if the child spawn new processes, killing the child may not kill these other processes and they may keep the stdout opened.</p>\n"}], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2074, "favorite_count": 1, "answer_count": 2, "score": 4, "last_activity_date": 1461689071, "creation_date": 1454100828, "last_edit_date": 1454101227, "question_id": 35093869, "link": "https://stackoverflow.com/questions/35093869/kill-child-process-while-waiting-for-it", "title": "Kill child process while waiting for it", "body": "<p>I want to execute another process and normally want to wait until it has finished. Lets say we spawn and wait for the process in thread T1:</p>\n\n<pre><code>let child = Command::new(\"rustc\").spawn().unwrap();\nchild.wait();\n</code></pre>\n\n<p>Now, if a special event occurs (which thread T0 is waiting for) I want to kill the spawned process:</p>\n\n<pre><code>if let Ok(event) = special_event_notifier.recv() {\n    child.kill();\n}\n</code></pre>\n\n<p>But I don't see a way to do it: both <code>kill</code> and <code>wait</code> take a mutable reference to <code>Child</code> and are therefore mutually exclusive. After calling <code>wait</code> no one can have any reference to <code>child</code> anymore.</p>\n\n<p>I've found the <a href=\"https://github.com/alexcrichton/wait-timeout\" rel=\"nofollow\"><code>wait-timeout</code></a> crate, but I want to know if there's another way.</p>\n"}, {"tags": ["arrays", "rust", "stack-overflow"], "answers": [{"comments": [{"owner": {"reputation": 221, "user_id": 4481876, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/dedc3f9101eaa933cec2ab03a546d0ed?s=128&d=identicon&r=PG&f=1", "display_name": "estw272", "link": "https://stackoverflow.com/users/4481876/estw272"}, "edited": false, "score": 0, "creation_date": 1454154744, "post_id": 35101212, "comment_id": 57923798, "body": "Yes, I tried using <code>Box::new</code> and it didn&#39;t work. Didn&#39;t know about <code>box</code>. Thanks, it makes sense now."}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 7, "last_activity_date": 1546268205, "last_edit_date": 1546268205, "creation_date": 1454153339, "answer_id": 35101212, "question_id": 35092788, "link": "https://stackoverflow.com/questions/35092788/thread-main-has-overflowed-its-stack-when-creating-a-large-array/35101212#35101212", "title": "thread &#39;&lt;main&gt;&#39; has overflowed its stack when creating a large array", "body": "<p>The problem here is almost certainly the huge <code>result</code> array that is being placed on the stack when the initialisation code of <code>A_INTERSECTS_A</code> runs. It is 1356<sup>2</sup> &approx; 1.8 MB, which is of a similar order of magnitude to the size of the stack. In fact, it is larger than Windows' default size of 1 MB (and I suspect you are on Windows, given you've got that error message).</p>\n\n<p>The solution here is to reduce the stack size by moving it to the heap, by, for instance, using <code>Vec</code> instead (as you indicate works), or using a <code>Box</code>. This will have the added benefit that the initialisation code doesn't have to do a 2MB copy from the stack to <code>A_INTERSECTS_A</code>'s memory (it only needs to copy some pointers around).</p>\n\n<p>A direct translation to using a <code>Box</code>:</p>\n\n<pre><code>pub static ref A_INTERSECTS_A: Box&lt;[[bool; A_COUNT as usize]; A_COUNT as usize]&gt; = {\n    let mut result = Box::new([[false; A_COUNT as usize]; A_COUNT as usize]);\n    // ...\n}\n</code></pre>\n\n<p>unfortunately doesn't work: <code>Box::new</code> is a normal function call, and hence its argument is placed directly onto the stack.</p>\n\n<p>However, if you're using a nightly compiler and are willing to use unstable features, you can use <a href=\"https://github.com/rust-lang/rust/issues/27779\" rel=\"nofollow noreferrer\">\"placement box\"</a>, which is literally designed for this purpose: it allocates space on the heap and constructs the value straight into that memory, avoiding intermediate copies, and avoiding the need to have the data on the stack. This simply requires replacing <code>Box::new</code> with <code>box</code>:</p>\n\n<pre><code>let mut result = box [[false; A_COUNT as usize]; A_COUNT as usize];\n</code></pre>\n\n<p>If you (very sensibly) prefer to stick to stable releases, an alternative until that stabilises is to just replace the <em>outer</em> layer of the arrays with a <code>Vec</code>: this retains all the data locality benefits of the arrays (everything is laid out contiguously in memory), although is slightly weaker in terms of static knowledge (the compiler can't be sure that the length is 1356). Since <code>[_; A_COUNT]</code> doesn't implement <code>Clone, this cannot use the</code>vec!` macro and hence (unfortunately) looks like:</p>\n\n<pre><code>pub static ref A_INTERSECTS_A: Vec&lt;[bool; A_COUNT as usize]&gt; = {\n    let mut result =\n        (0..A_COUNT as usize)\n            .map(|_| [false; A_COUNT as usize])\n            .collect::&lt;Vec&lt;_&gt;&gt;();\n    // ...\n}\n</code></pre>\n\n<p>If you absolutely need all the arrays, one could do some <code>unsafe</code> magic to extract this down to the original <code>Box&lt;[[bool; ...]; ...]&gt;</code> from the <code>Vec</code>. It requires two steps (via <code>into_boxed_slice</code>), because a <code>Box&lt;T&gt;</code> needs to have an allocation sized perfectly for <code>T</code>, while a <code>Vec</code> may overallocate in order to achieve its O(1) amortization. This version would look like:</p>\n\n<pre><code>pub static ref A_INTERSECTS_A: Box&lt;[[bool; A_COUNT as usize]; A_COUNT as usize]&gt; = {\n    let mut result =\n        (0..A_COUNT as usize)\n            .map(|_| [false; A_COUNT as usize])\n            .collect::&lt;Vec&lt;_&gt;&gt;();\n\n    // ...\n\n    // ensure the allocation is correctly sized\n    let mut slice: Box&lt;[[bool; A_COUNT as usize]]&gt; = result.into_boxed_slice();\n    // pointer to the start of the slices in memory\n    let ptr: *mut [bool; A_COUNT as usize] = slice.as_mut_ptr();\n    // stop `slice`'s destructor deallocating the memory\n    mem::forget(slice);\n\n    // `ptr` is actually a pointer to exactly A_COUNT of the arrays! \n    let new_ptr = ptr as *mut [[bool; A_COUNT as usize]; A_COUNT as usize];\n    unsafe {\n        // let this `Box` manage that memory\n        Box::from_raw(new_ptr)\n    }\n}\n</code></pre>\n\n<p>I've added in some explicit types so that what's going in is a little more clear. This works because <code>Vec&lt;T&gt;</code> exposes <code>into_boxed_slice</code>, and hence we can munge that <code>Box&lt;[T]&gt;</code> (i.e. dynamic length) into a <code>Box&lt;[T; len]&gt;</code> given we know the exact length at compile time.</p>\n"}], "owner": {"reputation": 221, "user_id": 4481876, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/dedc3f9101eaa933cec2ab03a546d0ed?s=128&d=identicon&r=PG&f=1", "display_name": "estw272", "link": "https://stackoverflow.com/users/4481876/estw272"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 860, "favorite_count": 0, "accepted_answer_id": 35101212, "answer_count": 1, "score": 2, "last_activity_date": 1546268205, "creation_date": 1454096796, "last_edit_date": 1546268078, "question_id": 35092788, "link": "https://stackoverflow.com/questions/35092788/thread-main-has-overflowed-its-stack-when-creating-a-large-array", "title": "thread &#39;&lt;main&gt;&#39; has overflowed its stack when creating a large array", "body": "<p><code>static</code> variable <code>A_INTERSECTS_A</code> from the following code returns the error.\nThis piece of code should return a big 1356x1356 2D array of <code>bool</code>.</p>\n\n<pre><code>use lazy_static::lazy_static; // 1.2.0\n\n#[derive(Debug, Copy, Clone, Default)]\npub struct A {\n    pub field_a: [B; 2],\n    pub ordinal: i32,\n}\n\n#[derive(Debug, Copy, Clone, Default)]\npub struct B {\n    pub ordinal: i32,\n}\n\npub const A_COUNT: i32 = 1356;\n\nlazy_static! {\n    pub static ref A_VALUES: [A; A_COUNT as usize] = { [A::default(); A_COUNT as usize] };\n\n    pub static ref A_INTERSECTS_A: [[bool; A_COUNT as usize]; A_COUNT as usize] = {\n        let mut result = [[false; A_COUNT as usize]; A_COUNT as usize];\n\n        for item_one in A_VALUES.iter() {\n            for item_two in A_VALUES.iter() {\n                if item_one.field_a[0].ordinal == item_two.field_a[0].ordinal\n                    || item_one.field_a[0].ordinal == item_two.field_a[1].ordinal\n                    || item_one.field_a[1].ordinal == item_two.field_a[0].ordinal\n                    || item_one.field_a[1].ordinal == item_two.field_a[1].ordinal\n                {\n                    result[item_one.ordinal as usize][item_two.ordinal as usize] = true;\n                }\n            }\n        }\n        result\n    };\n}\n\nfn main() {\n    A_INTERSECTS_A[1][1];\n}\n</code></pre>\n\n<p>I've seen people dealing with this by implementing <code>Drop</code> for structs in a large list, but there aren't any structs in my list and you cant implement it for bool. </p>\n\n<p>If I change <code>A_INTERSECTS_A: [[bool; A_COUNT as usize]; A_COUNT as usize]</code> to <code>A_INTERSECTS_A: Box&lt;Vec&lt;Vec&lt;bool&gt;&gt;&gt;</code> the code works fine, but I really would like to use an array here.</p>\n"}, {"tags": ["return", "rust", "match"], "comments": [{"owner": {"reputation": 360, "user_id": 4743935, "user_type": "registered", "accept_rate": 40, "profile_image": "https://lh3.googleusercontent.com/-D0UsDqm2eGw/AAAAAAAAAAI/AAAAAAAAAJ8/lc0gehFEEdQ/photo.jpg?sz=128", "display_name": "Tristan Storch", "link": "https://stackoverflow.com/users/4743935/tristan-storch"}, "reply_to_user": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 0, "creation_date": 1454097907, "post_id": 35086605, "comment_id": 57907944, "body": "@paolo Actually it turns aout, that it is :)"}], "answers": [{"comments": [{"owner": {"reputation": 360, "user_id": 4743935, "user_type": "registered", "accept_rate": 40, "profile_image": "https://lh3.googleusercontent.com/-D0UsDqm2eGw/AAAAAAAAAAI/AAAAAAAAAJ8/lc0gehFEEdQ/photo.jpg?sz=128", "display_name": "Tristan Storch", "link": "https://stackoverflow.com/users/4743935/tristan-storch"}, "edited": false, "score": 0, "creation_date": 1454080021, "post_id": 35086748, "comment_id": 57897159, "body": "Thanks! Is there a way to do this, if <code>bar</code>&#39;s return type is different from the the type of <code>i</code>? Currently I get an <code>error: match arms have incompatible types</code>"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 360, "user_id": 4743935, "user_type": "registered", "accept_rate": 40, "profile_image": "https://lh3.googleusercontent.com/-D0UsDqm2eGw/AAAAAAAAAAI/AAAAAAAAAJ8/lc0gehFEEdQ/photo.jpg?sz=128", "display_name": "Tristan Storch", "link": "https://stackoverflow.com/users/4743935/tristan-storch"}, "edited": false, "score": 0, "creation_date": 1454080156, "post_id": 35086748, "comment_id": 57897262, "body": "@TristanStorch I don&#39;t believe so.  In that case, if you&#39;re doing this frequently, you might want to define a <code>map</code> method on the <code>Status</code> enum itself."}, {"owner": {"reputation": 360, "user_id": 4743935, "user_type": "registered", "accept_rate": 40, "profile_image": "https://lh3.googleusercontent.com/-D0UsDqm2eGw/AAAAAAAAAAI/AAAAAAAAAJ8/lc0gehFEEdQ/photo.jpg?sz=128", "display_name": "Tristan Storch", "link": "https://stackoverflow.com/users/4743935/tristan-storch"}, "edited": false, "score": 0, "creation_date": 1454080307, "post_id": 35086748, "comment_id": 57897365, "body": "I don&#39;t know, what exactly you mean by this. Could you give me a hint or link?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 360, "user_id": 4743935, "user_type": "registered", "accept_rate": 40, "profile_image": "https://lh3.googleusercontent.com/-D0UsDqm2eGw/AAAAAAAAAAI/AAAAAAAAAJ8/lc0gehFEEdQ/photo.jpg?sz=128", "display_name": "Tristan Storch", "link": "https://stackoverflow.com/users/4743935/tristan-storch"}, "edited": false, "score": 0, "creation_date": 1454080435, "post_id": 35086748, "comment_id": 57897448, "body": "@TristanStorch Something akin to <a href=\"http://doc.rust-lang.org/std/option/enum.Option.html#method.map\" rel=\"nofollow noreferrer\"><code>Option::map</code></a> (see <a href=\"http://doc.rust-lang.org/src/core/option.rs.html#425-430\" rel=\"nofollow noreferrer\">its source code for reference</a>)."}, {"owner": {"reputation": 360, "user_id": 4743935, "user_type": "registered", "accept_rate": 40, "profile_image": "https://lh3.googleusercontent.com/-D0UsDqm2eGw/AAAAAAAAAAI/AAAAAAAAAJ8/lc0gehFEEdQ/photo.jpg?sz=128", "display_name": "Tristan Storch", "link": "https://stackoverflow.com/users/4743935/tristan-storch"}, "edited": false, "score": 0, "creation_date": 1454081455, "post_id": 35086748, "comment_id": 57898103, "body": "Thanks a lot! I&#39;ll have to give it some thought, but this might be the right thing"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1454254138, "post_id": 35086748, "comment_id": 57951575, "body": "You may want to make sure your answer is also represented on the linked duplicate."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 3, "last_activity_date": 1454077164, "creation_date": 1454077164, "answer_id": 35086748, "question_id": 35086605, "link": "https://stackoverflow.com/questions/35086605/match-returning-straight-input-in-all-but-one-case/35086748#35086748", "title": "Match returning straight input in all but one case", "body": "<p>Just bind the other cases to a name and return that</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>match foo(x) {\n  Complete(i) =&gt; Complete(bar(i)),\n  other       =&gt; other,\n}\n</code></pre>\n"}], "owner": {"reputation": 360, "user_id": 4743935, "user_type": "registered", "accept_rate": 40, "profile_image": "https://lh3.googleusercontent.com/-D0UsDqm2eGw/AAAAAAAAAAI/AAAAAAAAAJ8/lc0gehFEEdQ/photo.jpg?sz=128", "display_name": "Tristan Storch", "link": "https://stackoverflow.com/users/4743935/tristan-storch"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 60, "favorite_count": 0, "closed_date": 1454254094, "accepted_answer_id": 35086748, "answer_count": 1, "score": 1, "last_activity_date": 1454078084, "creation_date": 1454076729, "question_id": 35086605, "link": "https://stackoverflow.com/questions/35086605/match-returning-straight-input-in-all-but-one-case", "closed_reason": "Duplicate", "title": "Match returning straight input in all but one case", "body": "<p>Let's say I have an enum like this</p>\n\n<pre><code>pub enum Status&lt;T&gt; {\n  Error,\n  NotStarted,\n  Incomplete,\n  Complete(T),\n}\n</code></pre>\n\n<p>and I want to do this</p>\n\n<pre><code>match foo(x) {\n  Complete(i) =&gt; Complete(bar(i)),\n  Error       =&gt; Error,\n  NotStarted  =&gt; NotStarted,\n  Incomplete  =&gt; Incomplete,\n}\n</code></pre>\n\n<p>i.e. only do something with it, if it matched one \"special\" option and return match input unseen otherwise. In my code this happens a lot.</p>\n\n<p>Is there another way to do this in a shorter way? Probably something like this:</p>\n\n<pre><code>match foo(x) {\n  Complete(i) =&gt; Complete(bar(i)),\n  _           =&gt; _,\n}\n</code></pre>\n"}, {"tags": ["rust", "iron"], "answers": [{"comments": [{"owner": {"reputation": 67160, "user_id": 1078084, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/wApmM.jpg?s=128&g=1", "display_name": "Akavall", "link": "https://stackoverflow.com/users/1078084/akavall"}, "edited": false, "score": 0, "creation_date": 1454037085, "post_id": 35076186, "comment_id": 57875048, "body": "Thank you. In my case it was google chrome that lead to two log lines, firefox to one log line. So the issue seems to be with the browser."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 2, "last_activity_date": 1454036742, "creation_date": 1454036742, "answer_id": 35076186, "question_id": 35076170, "link": "https://stackoverflow.com/questions/35076170/function-called-twice-in-simple-web-server-using-iron/35076186#35076186", "title": "Function called twice in simple web server using Iron", "body": "<p>Your browser might be automatically trying to fetch <code>favicon.ico</code>. Check the contents of the <code>Request</code> to know for sure! :) Your browser may also have a network monitor as part of its developer tools; this should show you the request for <code>favicon.ico</code> (I know it does in Firefox, don't know about other browsers).</p>\n"}], "owner": {"reputation": 67160, "user_id": 1078084, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/wApmM.jpg?s=128&g=1", "display_name": "Akavall", "link": "https://stackoverflow.com/users/1078084/akavall"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 87, "favorite_count": 0, "accepted_answer_id": 35076186, "answer_count": 1, "score": 1, "last_activity_date": 1454036742, "creation_date": 1454036660, "question_id": 35076170, "link": "https://stackoverflow.com/questions/35076170/function-called-twice-in-simple-web-server-using-iron", "title": "Function called twice in simple web server using Iron", "body": "<p>I have a super simple web server, and for some reason the <code>println!</code> statement is printed out twice. Why could this be?</p>\n\n<pre><code>extern crate iron;\n\nuse iron::prelude::*;\nuse iron::status;\n\nfn hello_world(_: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\n    println!(\"Said Hello World\");\n    Ok(Response::with((status::Ok, \"Hello World\\n\")))\n}\n\nfn main() {\n    Iron::new(hello_world).http(\"localhost:8000\").unwrap();\n}\n</code></pre>\n\n<p>Every time I refresh my browser the output in the shell is:</p>\n\n<pre><code>Said Hello World\nSaid Hello World\n</code></pre>\n\n<p>I would only expect the line to be printed out once.It seems that my <code>hello_world</code> functions is being called twice. What am I missing?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 2, "last_activity_date": 1454036375, "creation_date": 1454036375, "answer_id": 35076134, "question_id": 35076068, "link": "https://stackoverflow.com/questions/35076068/vector-index-out-of-bounds-when-converting-large-floating-point-numbers-to-int/35076134#35076134", "title": "Vector index &quot;out of bounds&quot; when converting large floating point numbers to integer indices", "body": "<p>You are casting integers to <code>f32</code>, but <code>f32</code> is not precise enough. Use <code>f64</code> instead.</p>\n\n<pre><code>fn main() {\n    println!(\"{}\", 33333333.0f32); // prints 33333332\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "is_accepted": false, "score": 7, "last_activity_date": 1454227636, "last_edit_date": 1454227636, "creation_date": 1454055943, "answer_id": 35079913, "question_id": 35076068, "link": "https://stackoverflow.com/questions/35076068/vector-index-out-of-bounds-when-converting-large-floating-point-numbers-to-int/35079913#35079913", "title": "Vector index &quot;out of bounds&quot; when converting large floating point numbers to integer indices", "body": "<p><code>f32</code> can only represent all 24-bit integers exactly, which corresponds to about 16 million (actually 16777216). Above that there are gaps, up to 33554432 only even numbers can be represented.  So in your example 33333333 cannot be represented as <code>f32</code> and is rounded to 33333334.</p>\n\n<p>You don't need to use float to round the result of an integer division. Using integers directly is both faster and doesn't have precision issues. For non-negative integers you can do the following:</p>\n\n<pre><code>fn main() {\n    let a = 12;\n    let b = 7;\n    println!(\"rounded down: {}\", a / b);\n    println!(\"rounded:      {}\", (a + b / 2) / b);\n    println!(\"rounded up:   {}\", (a + b - 1) / b);\n}\n</code></pre>\n"}], "owner": {"reputation": 147, "user_id": 5818746, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f98e59d175ae95cd3e0b328637b9bd41?s=128&d=identicon&r=PG&f=1", "display_name": "lochnesscookie", "link": "https://stackoverflow.com/users/5818746/lochnesscookie"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 139, "favorite_count": 0, "accepted_answer_id": 35076134, "answer_count": 2, "score": 1, "last_activity_date": 1454253891, "creation_date": 1454035968, "last_edit_date": 1454253891, "question_id": 35076068, "link": "https://stackoverflow.com/questions/35076068/vector-index-out-of-bounds-when-converting-large-floating-point-numbers-to-int", "title": "Vector index &quot;out of bounds&quot; when converting large floating point numbers to integer indices", "body": "<p>I've been trying to generate primes between m and n with the following function:</p>\n\n<pre><code>//the variable sieve is a list of primes between 1 and 32000\n//The primes up to 100 are definitely correct\nfn sieve_primes(sieve: &amp;Vec&lt;usize&gt;, m: &amp;usize, n: &amp;usize) -&gt; Vec&lt;usize&gt; {\n    let size: usize = *n - *m + 1;\n    let mut list: Vec&lt;usize&gt; = Vec::with_capacity(size);\n\n    for i in *m..(*n + 1) {\n        list.push(i);\n    }   \n    for i in sieve {\n        for j in ( ((*m as f32) / (*i as f32)).ceil() as usize)..( (((*n as f32) / (*i as f32)).floor() + 1.0) as usize) {\n                println!(\"{} \",j);\n                if j != 1 {list[i * j - *m] = 0;} \n        }\n    }   \n\n    let mut primes: Vec&lt;usize&gt; = Vec::new();\n    for num in &amp;list{\n        if *num &gt;= 2 {primes.push(*num);}\n    }   \n    primes\n}\n</code></pre>\n\n<p>This works for smaller (less than 1000000-ish) values of m and n, but \nit fails at runtime for numbers around the billions / hundred-millions.</p>\n\n<p>The output for m = 99999999, n = 100000000 is:</p>\n\n<blockquote>\n  <p>33333334<br>\n  thread '' panicked at 'index out of bounds: the len is 2 but the index is 3'  </p>\n</blockquote>\n\n<p>If you look at the numbers this doesn't make any sense. First of all, it seems to skip the number 2 in the list of primes. Second, when i = 3 the for statement should simplify to <code>for j in 33333333..333333334</code>, which for some reason starts j at 33333334.  </p>\n"}, {"tags": ["mongodb", "rust"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 2, "last_activity_date": 1454035419, "creation_date": 1454035419, "answer_id": 35075984, "question_id": 35070853, "link": "https://stackoverflow.com/questions/35070853/how-to-convert-the-rust-mongo-drivers-bson-type-to-objectid/35075984#35075984", "title": "How to convert the Rust Mongo driver&#39;s BSON type to ObjectId?", "body": "<p>The <code>get()</code> methods returns an <code>Option&lt;&amp;Bson&gt;</code>. <a href=\"http://mongodb-labs.github.io/mongo-rust-driver-prototype/bson/enum.Bson.html\" rel=\"nofollow\"><code>Bson</code></a> is an <code>enum</code>, so in order to access the data in a variant, you need to use pattern matching with <code>match</code> or <code>if let</code>.</p>\n\n<pre><code>let mongo_id  =\n  match *item.get(\"_id\").unwrap() {\n    Bson::ObjectId(oid) =&gt; oid,\n    _ =&gt; panic!(\"_id is not an ObjectId!\"),\n  };\n</code></pre>\n\n<p>This initializes <code>mongo_id</code> with the <a href=\"http://mongodb-labs.github.io/mongo-rust-driver-prototype/bson/oid/struct.ObjectId.html\" rel=\"nofollow\"><code>ObjectId</code></a> value for the <code>_id</code> field.</p>\n"}, {"comments": [{"owner": {"reputation": 925, "user_id": 130687, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8f4b861a5b83575337b98d144a4ef4ca?s=128&d=identicon&r=PG", "display_name": "Paul", "link": "https://stackoverflow.com/users/130687/paul"}, "edited": false, "score": 0, "creation_date": 1454086446, "post_id": 35079507, "comment_id": 57901653, "body": "Both answers are correct, but this one is simpler. I agree, it would have been nice if that <code>get_object_id</code> had been documented or used in an example anywhere. Thanks!"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1454188286, "post_id": 35079507, "comment_id": 57935286, "body": "The reason there&#39;s no documentation is because <code>OrderedDocument</code> is in a private module (<code>ordered</code>), but there&#39;s a public type alias <code>Document</code> in a public module (<code>bson</code>) so you can still use the type."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1454230496, "post_id": 35079507, "comment_id": 57944619, "body": "@FrancisGagn&#233; the reason that there is no documentation is that it is not published anywhere :) <code>OrderedDocument</code> has doc comments, and they would be visible on <code>bson::Document</code> doc page, it&#39;s just you can&#39;t find it online."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1454263214, "post_id": 35079507, "comment_id": 57954951, "body": "I found documentation from the <a href=\"http://mongodb-labs.github.io/mongo-rust-driver-prototype/bson/type.Document.html\" rel=\"nofollow noreferrer\">mongo-rust-driver-prototype project</a>, but that&#39;s only because rustdoc generates documentation for dependencies by default... And you can see from this link that the documentation for <code>OrderedDocument</code> is not available (perhaps if it had been a <code>pub use</code> instead of a <code>type</code>, it would have been)."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1454314124, "post_id": 35079507, "comment_id": 57971236, "body": "@FrancisGagn&#233;, wow, indeed, I didn&#39;t get that it is just a type alias. In fact, I&#39;m surprised that a type alias may point to private type, I&#39;d personally consider it a bug in Rust."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 2, "last_activity_date": 1454054391, "creation_date": 1454054391, "answer_id": 35079507, "question_id": 35070853, "link": "https://stackoverflow.com/questions/35070853/how-to-convert-the-rust-mongo-drivers-bson-type-to-objectid/35079507#35079507", "title": "How to convert the Rust Mongo driver&#39;s BSON type to ObjectId?", "body": "<p>Use <a href=\"https://github.com/zonyitoo/bson-rs/blob/d5c12b07bdda945d49c74b4eaa9aa3774be48daa/src/ordered.rs#L283\" rel=\"nofollow\"><code>OrderedDocument::get_object_id()</code></a> method:</p>\n\n<pre><code>let mongo_id = item.get_object_id(\"_id\").unwrap();\nlet mongo_id_hex = mongo_id.to_hex();\n</code></pre>\n\n<p>It is sad that bson-rs does not have any docs published anywhere.</p>\n"}], "owner": {"reputation": 925, "user_id": 130687, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8f4b861a5b83575337b98d144a4ef4ca?s=128&d=identicon&r=PG", "display_name": "Paul", "link": "https://stackoverflow.com/users/130687/paul"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2142, "favorite_count": 0, "accepted_answer_id": 35079507, "answer_count": 2, "score": 1, "last_activity_date": 1454253636, "creation_date": 1454011089, "last_edit_date": 1454253636, "question_id": 35070853, "link": "https://stackoverflow.com/questions/35070853/how-to-convert-the-rust-mongo-drivers-bson-type-to-objectid", "title": "How to convert the Rust Mongo driver&#39;s BSON type to ObjectId?", "body": "<p>I'm working on a tool to sync a collection of Mongo documents to a Postgres database:</p>\n\n<pre><code>extern crate bson;\nextern crate mongodb;\nuse mongodb::{Client, ThreadedClient};\nuse mongodb::db::ThreadedDatabase;\n\nextern crate docopt;\nuse docopt::Docopt;\n\nextern crate postgres;\nuse postgres::{Connection, SslMode};\n\nstatic USAGE : &amp;'static str = \"\nUSAGE: user_importer  --mongo-url &lt;mongo_url&gt; --pg-url &lt;pg_url&gt;\n       user_importer (--help)\n\nOptions:\n  --mongo-url  Mongo Connection URI to the DB that has to users to be imported\n  --pg-url   Postgres Connection URI to mizuna's DB\n  -h, --help        Show this message\n\";\n\nfn main() {\n  let argv = std::env::args();\n  let args = Docopt::new(USAGE).and_then(|d| d.argv(argv).parse()).unwrap_or_else(|e| e.exit());\n\n  let mongo_url = args.get_str(\"&lt;mongo_url&gt;\");\n  let pg_url = args.get_str(\"&lt;pg_url&gt;\");\n\n  let pg = Connection::connect(pg_url, SslMode::None).unwrap();\n  let stmt = pg.prepare(\"INSERT INTO mongo_users (mongo_id, email, name, sfdc_id) VALUES ($1, $2, $3, $4)\").unwrap();\n\n  let mongo = Client::with_uri(mongo_url)\n             .ok().expect(\"Failed to initialize client.\");\n  let coll = mongo.db(\"napa\").collection(\"users\");\n  let cursor = coll.find(None, None).unwrap();\n\n  for result in cursor {\n    if let Ok(item) = result {\n      println!(\"{:?}\", item.get(\"_id\").unwrap());\n      println!(\"to_string {:?}\", item.get(\"_id\").unwrap().to_string());\n      println!(\"to_json {:?}\", item.get(\"_id\").unwrap().to_json());\n      let mongo_id  = item.get(\"_id\").unwrap().to_string();\n      let email     = item.get(\"email\").map(|s| s.to_string());\n      let name      = item.get(\"name\").map(|s| s.to_string());\n      let sfdc_id   = item.get(\"sfdc_id\").map(|s| s.to_string());\n\n\n      stmt.execute(&amp;[&amp;mongo_id, &amp;email, &amp;name, &amp;sfdc_id]).unwrap();\n    }\n  }\n}\n</code></pre>\n\n<p>(<a href=\"http://is.gd/QYzkBD\" rel=\"nofollow\">Playground</a>)</p>\n\n<p>The part I'm having trouble with is converting the document's <code>_id</code> field to a hex string (Line 43). It seems that <code>item.get(\"_id\")</code> returns an object of type <code>BSON</code>, which has a few converters: <code>to_string()</code> returns <code>ObjectId(\"566740710ed3bc0a8f000001\")</code>, and <code>to_json()</code> returns <code>{\"$oid\": \"566740710ed3bc0a8f000001\"}</code>, neither of which are the plan hex string that I want to insert. I see in the docs that <code>ObjectId</code> has a <code>to_hex()</code> function, but I can't figure out how to get from the <code>get()</code> method's <code>BSON</code> return type to the underlying <code>ObjectId</code> type that has that method implemented.</p>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 3822, "user_id": 91585, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/58b7ea3d38398e9e2882d23f57762cb6?s=128&d=identicon&r=PG", "display_name": "Florian Doyon", "link": "https://stackoverflow.com/users/91585/florian-doyon"}, "edited": false, "score": 0, "creation_date": 1453993704, "post_id": 35064950, "comment_id": 57853052, "body": "I don&#39;t know whether this is good etiquette or not, here is a rust playground link for this code snippet: <a href=\"https://play.rust-lang.org/?gist=10bd0d565e9106e1900c&amp;version=stable\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}], "answers": [{"comments": [{"owner": {"reputation": 3822, "user_id": 91585, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/58b7ea3d38398e9e2882d23f57762cb6?s=128&d=identicon&r=PG", "display_name": "Florian Doyon", "link": "https://stackoverflow.com/users/91585/florian-doyon"}, "edited": false, "score": 0, "creation_date": 1453997715, "post_id": 35066269, "comment_id": 57856143, "body": "Thank you, I completely forgot the ?Sized trait."}, {"owner": {"reputation": 3822, "user_id": 91585, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/58b7ea3d38398e9e2882d23f57762cb6?s=128&d=identicon&r=PG", "display_name": "Florian Doyon", "link": "https://stackoverflow.com/users/91585/florian-doyon"}, "edited": false, "score": 0, "creation_date": 1454060030, "post_id": 35066269, "comment_id": 57884218, "body": "I would like to thank you for the very clear and detailed explanation @Pablo. This was very helpful."}], "tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": true, "score": 2, "last_activity_date": 1454057940, "last_edit_date": 1454057940, "creation_date": 1453997059, "answer_id": 35066269, "question_id": 35064950, "link": "https://stackoverflow.com/questions/35064950/trait-is-not-implemented-for-the-type-str-e0277/35066269#35066269", "title": "Trait is not implemented for the type `&amp;str` [E0277]", "body": "<p>You need to tell <code>method_on_trait</code> that it can work on unsized types and pass it a reference to T (not directly T, which at this point might not be sized and can't be passed by value).\nThe first you can do adding the <code>?Sized</code> \"bound\" to <code>T</code>, the second by making <code>thing</code> a <code>&amp;T</code>.</p>\n\n<pre><code>fn method_on_trait&lt;T: MyTrait + ?Sized&gt; (thing: &amp;T) {\n   let v = thing.to_thingie();\n   println!(\"Method on trait: {:?}\",v);\n}\n</code></pre>\n\n<p>What's going on here, is that <code>MyTrait</code> is only implemented for <code>str</code>, which is an unsized type. You try passing \"test\" (which is a <code>&amp;'static str</code>) to <code>method_on_trait</code> in main, which leads to the <code>E0277</code> error.</p>\n\n<p>Your commented code is implementing <code>MyTrait</code> for <code>&amp;str</code>, which makes your original code compile because you're indeed passing a <code>&amp;str</code> to <code>method_on_trait</code>. There is no copying of the original string, <code>&amp;str</code> is only basically <a href=\"http://doc.rust-lang.org/src/core/raw.rs.html#62-65\" rel=\"nofollow\">a pointer to it plus a length info</a>.</p>\n"}], "owner": {"reputation": 3822, "user_id": 91585, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/58b7ea3d38398e9e2882d23f57762cb6?s=128&d=identicon&r=PG", "display_name": "Florian Doyon", "link": "https://stackoverflow.com/users/91585/florian-doyon"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 736, "favorite_count": 1, "accepted_answer_id": 35066269, "answer_count": 1, "score": 2, "last_activity_date": 1454058824, "creation_date": 1453993454, "last_edit_date": 1454058824, "question_id": 35064950, "link": "https://stackoverflow.com/questions/35064950/trait-is-not-implemented-for-the-type-str-e0277", "title": "Trait is not implemented for the type `&amp;str` [E0277]", "body": "<p>I have a trait definition for str where I define a function taking &amp;self. If I call this function from main on a static &amp;str, all is fine. If I call the same function from a function taking a trait object parameter, I am greeted with the following error: <code>MyTrait is not implemented for the type</code>&amp;str<code>[E0277]</code></p>\n\n<p>I have a workaround at the end, but I am not clear on the costs, am I copying the string? </p>\n\n<pre><code>#[derive(Debug)]\nstruct Thingie{\n pub name: String, // rather than &amp;a str for Thingie&lt;'a&gt;\n}\n\ntrait MyTrait{\n    fn to_thingie(&amp;self)-&gt;Option&lt;Thingie&gt;;\n}\n\nimpl MyTrait for str{\n    fn to_thingie(&amp;self)-&gt;Option&lt;Thingie&gt;{\n        println!(\"&gt;&gt;MyTrait for str\");\n        Some(Thingie{name:self.to_string()})\n    }\n}\n\n\nfn method_on_trait &lt;T:MyTrait&gt; (thing:T){\n   let v= thing.to_thingie();\n   println!(\"Method on trait: {:?}\",v);\n}\n\nfn main(){\n println!(\"in main: {:?}\",\"test\".to_thingie());\n method_on_trait(\"test\");\n}\n\n//TODO: Uncomment this for a fix. WHY?\n//Is this creating a copy of the string or just transfering the binding?\n// impl&lt;'a&gt; MyTrait for &amp;'a str{\n//     fn to_thingie(&amp;self)-&gt;Option&lt;Thingie&gt;{\n//         println!(\"&gt;&gt;MyTrait&lt;'a&gt; for &amp;'a str\");\n//         (*self).to_thingie()\n//     }\n// }\n</code></pre>\n"}, {"tags": ["generics", "struct", "rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 1204, "user_id": 3241447, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/unNbh.jpg?s=128&g=1", "display_name": "Haru Atari", "link": "https://stackoverflow.com/users/3241447/haru-atari"}, "edited": false, "score": 0, "creation_date": 1453992510, "post_id": 35064466, "comment_id": 57852031, "body": "Yes. You are right! I am beginner in rust and his rules of ownership is not evident for me. Because of this i often search answers for wrong questions. Thank you wery much."}], "tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": true, "score": 3, "last_activity_date": 1453992893, "last_edit_date": 1453992893, "creation_date": 1453992127, "answer_id": 35064466, "question_id": 35064376, "link": "https://stackoverflow.com/questions/35064376/how-to-set-generic-trait-as-type-of-function-argument/35064466#35064466", "title": "How to set generic trait as type of function argument?", "body": "<p>You need to pass <code>&amp;mut adjacency_list</code>. That's what the error is saying, and it's correct: you've defined the function as taking a <code>&amp;mut</code> pointer, but you're passing the value directly.</p>\n"}], "owner": {"reputation": 1204, "user_id": 3241447, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/unNbh.jpg?s=128&g=1", "display_name": "Haru Atari", "link": "https://stackoverflow.com/users/3241447/haru-atari"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 302, "favorite_count": 0, "accepted_answer_id": 35064466, "answer_count": 1, "score": 0, "last_activity_date": 1486473261, "creation_date": 1453991896, "last_edit_date": 1486473261, "question_id": 35064376, "link": "https://stackoverflow.com/questions/35064376/how-to-set-generic-trait-as-type-of-function-argument", "title": "How to set generic trait as type of function argument?", "body": "<p>There is generic trait <code>Graph</code></p>\n\n<pre><code>type NodeKey = usize;\ntype EdgeWeight = usize;\n\ntrait Graph&lt;T&gt; {\n    fn add_node(&amp;mut self, node: T) -&gt; NodeKey;\n    fn add_edge(&amp;mut self, begin: NodeKey, end: NodeKey, weight: EdgeWeight);\n    fn new() -&gt; Self;\n}\n</code></pre>\n\n<p>and its implementation <code>AdjacencyList</code> struct</p>\n\n<pre><code>struct AdjacencyList&lt;T&gt; {\n    // ...\n}\nimpl&lt;T&gt; Graph&lt;T&gt; for AdjacencyList&lt;T&gt; {\n    // ...\n}\n</code></pre>\n\n<p>I need a function that takes an empty graph and does something with it.</p>\n\n<pre><code>fn create_sample_graph&lt;T: Graph&lt;&amp;'static str&gt;&gt;(graph: &amp;mut T) {\n    let key1 = graph.add_node(\"node1\");\n    // ...\n}\n</code></pre>\n\n<p>I create an instance of <code>AdjacencyList</code> with the <code>&amp;str</code> type and send it to the function.</p>\n\n<pre><code>fn main() {\n    let mut adjacency_list = AdjacencyList::&lt;&amp;str&gt;::new();\n    create_sample_graph(adjacency_list);\n}\n</code></pre>\n\n<p>But the compiler fails with the following error:</p>\n\n<pre><code>error: mismatched types:\n expected `&amp;mut _`,\n    found `AdjacencyList&lt;&amp;str&gt;`\n(expected &amp;-ptr,\n    found struct `AdjacencyList`) [E0308]\ncreate_sample_graph(adjacency_list);\n                    ~~~~~~~~~~~~~~\n</code></pre>\n\n<p>How can I set the trait as a type of the function's argument and pass there a struct that implements this trait?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 615, "user_id": 1325109, "user_type": "registered", "accept_rate": 22, "profile_image": "https://www.gravatar.com/avatar/503cdb1e62fb2c8e86674c23b394e298?s=128&d=identicon&r=PG&f=1", "display_name": "dmgcodevil", "link": "https://stackoverflow.com/users/1325109/dmgcodevil"}, "edited": false, "score": 0, "creation_date": 1453989100, "post_id": 35055398, "comment_id": 57849269, "body": "is it possible to explicitly specify that variable &#39;foo&#39; lives longer than array variable whithout brackets ?"}, {"owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "reply_to_user": {"reputation": 615, "user_id": 1325109, "user_type": "registered", "accept_rate": 22, "profile_image": "https://www.gravatar.com/avatar/503cdb1e62fb2c8e86674c23b394e298?s=128&d=identicon&r=PG&f=1", "display_name": "dmgcodevil", "link": "https://stackoverflow.com/users/1325109/dmgcodevil"}, "edited": false, "score": 0, "creation_date": 1453996221, "post_id": 35055398, "comment_id": 57855049, "body": "No, I do not think that&#39;s possible."}, {"owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "reply_to_user": {"reputation": 615, "user_id": 1325109, "user_type": "registered", "accept_rate": 22, "profile_image": "https://www.gravatar.com/avatar/503cdb1e62fb2c8e86674c23b394e298?s=128&d=identicon&r=PG&f=1", "display_name": "dmgcodevil", "link": "https://stackoverflow.com/users/1325109/dmgcodevil"}, "edited": false, "score": 0, "creation_date": 1453996518, "post_id": 35055398, "comment_id": 57855274, "body": "Looks like there is some borrow checker bug. The <code>Bar</code> struct contains immutable reference to the <code>Foo</code>, but Rust thinks <code>foo</code> borrowed as mutable."}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 0, "creation_date": 1453998296, "post_id": 35055398, "comment_id": 57856591, "body": "@aSpex <code>create_bar</code> takes a <code>&amp;&#39;a mut self</code>: that is what is borrowing foo mutably. Even though you&#39;re not actually using <code>self</code> at all in this example, the <code>&#39;a</code> lifetime will be from the assignment to <code>array</code> to the moment <code>array</code> goes out of scope. With brackets you&#39;re limiting the scope of <code>array</code> and ending the mutable borrow. There&#39;s ongoing work to add &quot;non-lexical lifetimes&quot; that would make Rust smart enough to figure out by itself that <code>&#39;a</code> in this case does not actually need to go to the end of the function, as <code>array</code> is not <i>used</i> after <code>foo.read_data</code>"}, {"owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "edited": false, "score": 0, "creation_date": 1453999295, "post_id": 35055398, "comment_id": 57857381, "body": "Thanks for the explanation. But look at this code <a href=\"http://is.gd/Ml2L7G\" rel=\"nofollow noreferrer\">is.gd/Ml2L7G</a>. I am assign mutable reference to immutable reference variable and first variable borrowed as mutable as long as immutable variable still alive. Why? There is no way to modify first variable."}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 0, "creation_date": 1454000588, "post_id": 35055398, "comment_id": 57858292, "body": "@aSpex what you&#39;re is roughly equivalent to <a href=\"http://is.gd/fxmH2R\" rel=\"nofollow noreferrer\">this</a>. I agree that Rust is a bit too restrictive here and you&#39;re dooing nothing actually unsafe. It&#39;s just that Rust does not know how to look at lifetimes with that level of granularity right now"}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 1, "creation_date": 1454000714, "post_id": 35055398, "comment_id": 57858356, "body": "@aSpex <a href=\"https://doc.rust-lang.org/nightly/nomicon/lifetime-mismatch.html\" rel=\"nofollow noreferrer\">limits of lifetimes</a> in the Rustonomicon covers this much more in detail"}], "tags": [], "owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "is_accepted": true, "score": 5, "last_activity_date": 1530540190, "last_edit_date": 1530540190, "creation_date": 1453966653, "answer_id": 35055398, "question_id": 35054404, "link": "https://stackoverflow.com/questions/35054404/cannot-borrow-as-immutable-because-it-is-also-borrowed-as-mutable/35055398#35055398", "title": "cannot borrow as immutable because it is also borrowed as mutable", "body": "<p>You can limit the lifetime of the <code>array</code> variable by placing it in a new scope with curly braces (<code>{ ... }</code>):</p>\n\n<pre><code>fn main() {\n    let mut foo = Foo { some_str: \"test\" };\n    {\n        let mut array: [Bar; 1] = [foo.create_bar()];\n        process(&amp;mut array);\n    }\n    foo.read_data();\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 4, "last_activity_date": 1530540349, "creation_date": 1530540349, "answer_id": 51138060, "question_id": 35054404, "link": "https://stackoverflow.com/questions/35054404/cannot-borrow-as-immutable-because-it-is-also-borrowed-as-mutable/51138060#51138060", "title": "cannot borrow as immutable because it is also borrowed as mutable", "body": "<p>You original code will work as-is once <a href=\"https://stackoverflow.com/q/50251487/155423\">non-lexical lifetimes</a> are enabled by default:</p>\n\n<pre><code>#![feature(nll)]\n\nuse std::marker::PhantomData;\n\nstruct Foo {\n    some_str: &amp;'static str,\n}\n\nstruct Bar&lt;'a&gt; {\n    some_str: &amp;'static str,\n    marker: PhantomData&lt;&amp;'a Foo&gt;,\n}\n\nimpl Foo {\n    fn read_data(&amp;self) {\n        // add code here\n    }\n    fn create_bar&lt;'a&gt;(&amp;'a mut self) -&gt; Bar&lt;'a&gt; {\n        Bar {\n            some_str: \"test2\",\n            marker: PhantomData,\n        }\n    }\n}\n\nfn process(_arr: &amp;mut [Bar]) {}\n\nfn main() {\n    let mut foo = Foo { some_str: \"test\" };\n    let mut array: [Bar; 1] = [foo.create_bar()];\n    process(&amp;mut array);\n    foo.read_data();\n}\n</code></pre>\n\n<p>With NLL, the borrow checker becomes more advanced and precise; it can now understand that you aren't using <code>array</code> after the call to <code>process</code> so it is safe to use <code>foo</code> in a new manner.</p>\n"}], "owner": {"reputation": 615, "user_id": 1325109, "user_type": "registered", "accept_rate": 22, "profile_image": "https://www.gravatar.com/avatar/503cdb1e62fb2c8e86674c23b394e298?s=128&d=identicon&r=PG&f=1", "display_name": "dmgcodevil", "link": "https://stackoverflow.com/users/1325109/dmgcodevil"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4718, "favorite_count": 4, "accepted_answer_id": 35055398, "answer_count": 2, "score": 8, "last_activity_date": 1530540349, "creation_date": 1453963103, "last_edit_date": 1530540128, "question_id": 35054404, "link": "https://stackoverflow.com/questions/35054404/cannot-borrow-as-immutable-because-it-is-also-borrowed-as-mutable", "title": "cannot borrow as immutable because it is also borrowed as mutable", "body": "<p>I'm using the structs <code>Foo</code> and <code>Bar</code> from a library and I'm getting a compilation error in the client code. I simplified the code to this:</p>\n\n<pre><code>use std::marker::PhantomData;\n\nstruct Foo {\n    some_str: &amp;'static str,\n}\n\nstruct Bar&lt;'a&gt; {\n    some_str: &amp;'static str,\n    marker: PhantomData&lt;&amp;'a Foo&gt;,\n}\n\nimpl Foo {\n    fn read_data(&amp;self) {\n        // add code here\n    }\n    fn create_bar&lt;'a&gt;(&amp;'a mut self) -&gt; Bar&lt;'a&gt; {\n        Bar {\n            some_str: \"test2\",\n            marker: PhantomData,\n        }\n    }\n}\n\nfn process(_arr: &amp;mut [Bar]) {}\n\nfn main() {\n    let mut foo = Foo { some_str: \"test\" };\n    let mut array: [Bar; 1] = [foo.create_bar()];\n    process(&amp;mut array);\n    foo.read_data();\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=b47a832014a7b1df0bca&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a>)</p>\n\n<p>Output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `foo` as immutable because it is also borrowed as mutable\n  --&gt; src/main.rs:30:5\n   |\n28 |     let mut array: [Bar; 1] = [foo.create_bar()];\n   |                                --- mutable borrow occurs here\n29 |     process(&amp;mut array);\n30 |     foo.read_data();\n   |     ^^^ immutable borrow occurs here\n31 | }\n   | - mutable borrow ends here\n</code></pre>\n\n<p>The error in the console output is very clear, but I cannot fix the problem. </p>\n"}]