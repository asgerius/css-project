[{"tags": ["rust"], "comments": [{"owner": {"reputation": 3039, "user_id": 2851815, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/37MCt.png?s=128&g=1", "display_name": "\u043d\u0430\u0431\u0438\u044f\u0447\u043b\u044d\u0432\u044d\u043b\u0438", "link": "https://stackoverflow.com/users/2851815/%d0%bd%d0%b0%d0%b1%d0%b8%d1%8f%d1%87%d0%bb%d1%8d%d0%b2%d1%8d%d0%bb%d0%b8"}, "edited": false, "score": 0, "creation_date": 1461100857, "post_id": 36729210, "comment_id": 61043263, "body": "You can make all return paths return a value, in this case via removing the semicolon after <code>[0usize, 0usize]</code>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1461104010, "post_id": 36729210, "comment_id": 61044599, "body": "Did you &quot;run <code>rustc --explain E0269</code> to see a detailed explanation&quot; as suggested by the compiler?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1461104377, "post_id": 36729210, "comment_id": 61044739, "body": "You would probably be interested in <a href=\"http://stackoverflow.com/q/28512394/155423\">How to lookup from and insert into a HashMap efficiently?</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1461104625, "post_id": 36729210, "comment_id": 61044842, "body": "The errors are also listed online: <a href=\"https://doc.rust-lang.org/error-index.html#E0269\" rel=\"nofollow noreferrer\">E0269</a>"}], "answers": [{"tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": false, "score": 3, "last_activity_date": 1461104062, "last_edit_date": 1461104062, "creation_date": 1461102701, "answer_id": 36730154, "question_id": 36729210, "link": "https://stackoverflow.com/questions/36729210/not-all-control-paths-return-a-value/36730154#36730154", "title": "Not all control paths return a value?", "body": "<p>You can remove the semicolon after <code>[0usize, 0usize]</code> (<a href=\"https://doc.rust-lang.org/book/functions.html\" rel=\"nofollow\">this is idiomatic</a>) or add a <code>return [0usize, 0usize]</code>.</p>\n\n<p>To improve your code you can return an <a href=\"https://doc.rust-lang.org/stable/std/option/enum.Option.html\" rel=\"nofollow\"><code>Option</code></a>. Also, in this case, it is better to return a tuple.</p>\n\n<pre><code>use std::collections::HashMap;\n\nfn two_sum(nums: &amp;[i32], target: i32) -&gt; Option&lt;(usize, usize)&gt; {\n    let mut map: HashMap&lt;i32, usize&gt; = HashMap::new();\n\n    for i in 0..nums.len() {\n        let want = target - nums[i];\n        match map.get(&amp;nums[i]) {\n            Some(&amp;seen) =&gt; return Some((seen, i)),\n            _ =&gt; map.insert(want, i),\n        };\n    }\n\n    None\n}\n\nfn main() {\n    let nums = [1, 3, 7, 4];\n    let res = two_sum(&amp;nums, 10);\n    println!(\"{:?}\", res);\n}\n</code></pre>\n"}], "owner": {"reputation": 118, "user_id": 2632397, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/84c50873578d9e51046a596693ff3ba9?s=128&d=identicon&r=PG", "display_name": "Min Zhou", "link": "https://stackoverflow.com/users/2632397/min-zhou"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 252, "favorite_count": 0, "answer_count": 1, "score": -1, "last_activity_date": 1608753823, "creation_date": 1461099082, "last_edit_date": 1608753823, "question_id": 36729210, "link": "https://stackoverflow.com/questions/36729210/not-all-control-paths-return-a-value", "title": "Not all control paths return a value?", "body": "<p>Here's my code to find the indices of two numbers such that they add up to a specific target:</p>\n<pre><code>use std::collections::HashMap;\n\nfn two_sum(nums: &amp;[i32], target: i32) -&gt; [usize;2] {\n    let mut map: HashMap&lt;i32, usize&gt;  = HashMap::new();\n\n   for i in  0..nums.len() {\n        let want = target - nums[i];\n        match map.get(&amp;nums[i]) {\n            Some(&amp;seen) =&gt; return [seen, i],\n            _ =&gt;  map.insert(want, i),\n            };\n    }\n\n    [0usize, 0usize];\n}\n\nfn main() {\n    let nums = [1,3,7,4];\n    let res = two_sum(&amp;nums, 10);\n    println! (&quot;{},{}&quot;, res[0], res[1]);\n}\n</code></pre>\n<p>Which throws this error:</p>\n<pre><code>src/bin/2sum.rs:3:1: 15:2 error: not all control paths return a value [E0269]\nsrc/bin/2sum.rs:3 fn two_sum(nums: &amp;[i32], target: i32) -&gt; [usize;2] {\nsrc/bin/2sum.rs:4     let mut map: HashMap&lt;i32, usize&gt;  = HashMap::new();\nsrc/bin/2sum.rs:5 \nsrc/bin/2sum.rs:6     for i in  0..nums.len() {\nsrc/bin/2sum.rs:7         let want = target - nums[i];\nsrc/bin/2sum.rs:8         match map.get(&amp;nums[i]) {\n              ...\nsrc/bin/2sum.rs:3:1: 15:2 help: run `rustc --explain E0269` to see a detailed     explanation\nerror: aborting due to previous error\n</code></pre>\n<p>How can I solve this problem?</p>\n"}, {"tags": ["ssh", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1461093858, "post_id": 36727386, "comment_id": 61039142, "body": "FYI, your second <code>match</code> is more idiomatically written as <code>let mut channel = ssh.channel_session().expect(&quot;Unable to create channel&quot;);</code>"}, {"owner": {"reputation": 211, "user_id": 3429608, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17fb0f77c04c2ad6956abe0a2f585fda?s=128&d=identicon&r=PG&f=1", "display_name": "MrSpock", "link": "https://stackoverflow.com/users/3429608/mrspock"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1461095132, "post_id": 36727386, "comment_id": 61039987, "body": "This is on purpose. Later there will be error handling. panic! is there because I wanted to print error."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1461095218, "post_id": 36727386, "comment_id": 61040051, "body": "Yep! <code>expect</code> will panic with the error message, just the same as the code does now, and will return the <code>Ok</code> value on success."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1461332511, "post_id": 36727386, "comment_id": 61165312, "body": "The issue <a href=\"https://github.com/alexcrichton/ssh2-rs/issues/16\" rel=\"nofollow noreferrer\">Sessions are unable to be returned</a> in the ssh2 repository might be of use?"}, {"owner": {"reputation": 93, "user_id": 1552674, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/616fbf622dc84d86e672c176698dd732?s=128&d=identicon&r=PG", "display_name": "cundd", "link": "https://stackoverflow.com/users/1552674/cundd"}, "edited": false, "score": 1, "creation_date": 1492878671, "post_id": 36727386, "comment_id": 74174300, "body": "Try to keep the <code>TcpStream</code> variable in scope until the request has finished."}], "owner": {"reputation": 211, "user_id": 3429608, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17fb0f77c04c2ad6956abe0a2f585fda?s=128&d=identicon&r=PG&f=1", "display_name": "MrSpock", "link": "https://stackoverflow.com/users/3429608/mrspock"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 643, "favorite_count": 0, "answer_count": 0, "score": 2, "last_activity_date": 1461093752, "creation_date": 1461093103, "last_edit_date": 1461093752, "question_id": 36727386, "link": "https://stackoverflow.com/questions/36727386/unable-to-send-channel-open-request-when-using-ssh2-crate", "title": "&quot;Unable to send channel-open request&quot; when using ssh2 crate", "body": "<p>I'm trying to implement a module for interacting with some network gear over SSH.</p>\n\n<p>My code generates an error about SSH session creation I don't know how to fix.</p>\n\n<p>Here is the code:</p>\n\n<pre><code>extern crate ssh2;\n\n// cut some init code\n\nmatch ssh.authenticated() {\n    true =&gt; println!(\"Logged in !\"),\n    false =&gt; println!(\"Failed to login\"),\n};\n\nlet mut channel = match ssh.channel_session() {\n    Ok(ch) =&gt; ch,\n    Err(e) =&gt; panic!(\"Unable to create channel: {}\", e),\n};\n</code></pre>\n\n<p>And here is result:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Running `target/debug/e6000`\nTrying to connect\nConnection successfull\nLogged in !\nthread '&lt;main&gt;' panicked at 'Unable to create channel: [-7] Unable to send channel-open request', src/main.rs:25\n</code></pre>\n\n<p>I see on my device that authentication was successful, but why I can't create channel?</p>\n"}, {"tags": ["floating-point", "rust", "rounding"], "comments": [{"owner": {"reputation": 659, "user_id": 1886200, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/3c2cfc7d5826f8d4a2b0b941ac461324?s=128&d=identicon&r=PG", "display_name": "Houss_gc", "link": "https://stackoverflow.com/users/1886200/houss-gc"}, "edited": false, "score": 0, "creation_date": 1461084852, "post_id": 36724622, "comment_id": 61033741, "body": "if you know how, share your knowledge with us please."}, {"owner": {"reputation": 2233, "user_id": 2669128, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/430a24425fb593f00def23e45c454c39?s=128&d=identicon&r=PG", "display_name": "thurizas", "link": "https://stackoverflow.com/users/2669128/thurizas"}, "edited": false, "score": 0, "creation_date": 1461085318, "post_id": 36724622, "comment_id": 61034006, "body": "<a href=\"http://www.gnu.org/software/libc/manual/html_node/Rounding.html\" rel=\"nofollow noreferrer\">gnu.org/software/libc/manual/html_node/Rounding.html</a> might help.  It probably will apply to gcc&#39;s implementation of C and C++.  No clue about Rust or how Clang implements C/C++.  Note the comments at the very end, as well as comments under &quot;round to nearest&quot;."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 2, "creation_date": 1461107023, "post_id": 36724622, "comment_id": 61045694, "body": "Relevant: <a href=\"http://stackoverflow.com/questions/28121957/how-do-i-specify-the-rounding-mode-for-floating-point-numbers\" title=\"how do i specify the rounding mode for floating point numbers\">stackoverflow.com/questions/28121957/&hellip;</a>"}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 2, "creation_date": 1461107152, "post_id": 36724622, "comment_id": 61045744, "body": "Relevant: <a href=\"https://users.rust-lang.org/t/request-for-some-numerics-related-features/3530/5\" rel=\"nofollow noreferrer\">users.rust-lang.org/t/&hellip;</a>"}], "answers": [{"comments": [{"owner": {"reputation": 659, "user_id": 1886200, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/3c2cfc7d5826f8d4a2b0b941ac461324?s=128&d=identicon&r=PG", "display_name": "Houss_gc", "link": "https://stackoverflow.com/users/1886200/houss-gc"}, "edited": false, "score": 0, "creation_date": 1461322187, "post_id": 36791618, "comment_id": 61157970, "body": "ok. I see, maybe if I can desible such optimisation and change rounding using some inline assembly I can get the bahavior that I want."}, {"owner": {"reputation": 7214, "user_id": 392585, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/5ac7b1da0f2e9107b5020f88023a15e5?s=128&d=identicon&r=PG", "display_name": "Simon Byrne", "link": "https://stackoverflow.com/users/392585/simon-byrne"}, "reply_to_user": {"reputation": 659, "user_id": 1886200, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/3c2cfc7d5826f8d4a2b0b941ac461324?s=128&d=identicon&r=PG", "display_name": "Houss_gc", "link": "https://stackoverflow.com/users/1886200/houss-gc"}, "edited": false, "score": 0, "creation_date": 1461326468, "post_id": 36791618, "comment_id": 61160797, "body": "I would call <code>fesetround</code> rather than use assembly: on x86 there are actually 2 different registers you need to change: the MXCSR for SSE operations, and FPSCR for x87 operations."}, {"owner": {"reputation": 659, "user_id": 1886200, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/3c2cfc7d5826f8d4a2b0b941ac461324?s=128&d=identicon&r=PG", "display_name": "Houss_gc", "link": "https://stackoverflow.com/users/1886200/houss-gc"}, "edited": false, "score": 0, "creation_date": 1461342452, "post_id": 36791618, "comment_id": 61171991, "body": "Yes, I have to change the two registers, but now I am facing another problem which I address in this <a href=\"http://stackoverflow.com/questions/36789681/which-llvm-passes-are-responsible-for-floating-point-optimizations\">post</a>"}], "tags": [], "owner": {"reputation": 7214, "user_id": 392585, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/5ac7b1da0f2e9107b5020f88023a15e5?s=128&d=identicon&r=PG", "display_name": "Simon Byrne", "link": "https://stackoverflow.com/users/392585/simon-byrne"}, "is_accepted": true, "score": 3, "last_activity_date": 1461326498, "last_edit_date": 1461326498, "creation_date": 1461321776, "answer_id": 36791618, "question_id": 36724622, "link": "https://stackoverflow.com/questions/36724622/can-the-floating-point-rounding-mode-be-set-at-compile-time-in-rust/36791618#36791618", "title": "Can the floating point rounding mode be set at compile time in Rust?", "body": "<p>Not reliably, no. The problem is that the LLVM backend doesn't provide any support for modifying the rounding mode, though recently there have been <a href=\"http://lists.llvm.org/pipermail/llvm-dev/2016-February/094869.html\" rel=\"nofollow\">some proposals to fix this</a>, it's not likely to be resolved in the near future.</p>\n\n<p>You might be able to call out to the C <code>fesetround</code> function (in <code>fenv.h</code>) at the start of your program, but the problem is that certain optimisations (such as constant folding) would have already been performed using the default rounding mode.</p>\n"}], "owner": {"reputation": 659, "user_id": 1886200, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/3c2cfc7d5826f8d4a2b0b941ac461324?s=128&d=identicon&r=PG", "display_name": "Houss_gc", "link": "https://stackoverflow.com/users/1886200/houss-gc"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 618, "favorite_count": 1, "accepted_answer_id": 36791618, "answer_count": 1, "score": 3, "last_activity_date": 1461326498, "creation_date": 1461084482, "last_edit_date": 1461086513, "question_id": 36724622, "link": "https://stackoverflow.com/questions/36724622/can-the-floating-point-rounding-mode-be-set-at-compile-time-in-rust", "title": "Can the floating point rounding mode be set at compile time in Rust?", "body": "<p>I want to play with interval arithmetic in Rust, and to do so I need to set the rounding mode upward or downward. As I understand from some searching, setting the rounding mode will affect the performance, so I'd want to set it at compile time.</p>\n"}, {"tags": ["macros", "rust"], "comments": [{"owner": {"reputation": 2289, "user_id": 1454653, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/FvI1V.jpg?s=128&g=1", "display_name": "dragostis", "link": "https://stackoverflow.com/users/1454653/dragostis"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1461077716, "post_id": 36721733, "comment_id": 61028700, "body": "It&#39;s not about doing maths in macros, it&#39;s about having precedence in macros."}, {"owner": {"reputation": 2289, "user_id": 1454653, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/FvI1V.jpg?s=128&g=1", "display_name": "dragostis", "link": "https://stackoverflow.com/users/1454653/dragostis"}, "edited": false, "score": 0, "creation_date": 1461078664, "post_id": 36721733, "comment_id": 61029420, "body": "I&#39;ve updated the question. The idea here is to be able to parse the operations. It doesn&#39;t matter if you simply reimplement default Rust arithmetic."}], "answers": [{"comments": [{"owner": {"reputation": 2289, "user_id": 1454653, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/FvI1V.jpg?s=128&g=1", "display_name": "dragostis", "link": "https://stackoverflow.com/users/1454653/dragostis"}, "edited": false, "score": 0, "creation_date": 1461081450, "post_id": 36723373, "comment_id": 61031552, "body": "So the basic limitation would be the fact that you&#39;re not allowed to have <code>+</code> after <code>expr</code> because it would be ambiguous, right? Which means that ambiguity also applies to patterns, not only Rust rules."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 2289, "user_id": 1454653, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/FvI1V.jpg?s=128&g=1", "display_name": "dragostis", "link": "https://stackoverflow.com/users/1454653/dragostis"}, "edited": false, "score": 0, "creation_date": 1461081778, "post_id": 36723373, "comment_id": 61031782, "body": "I&#39;m not sure what you mean by &quot;Rust rules&quot;. But obviously if you have an expression that is followed by a <code>+</code>, then you need another expression after that. Rust can&#39;t possibly know that you meant to parse an expression until the first <code>+</code>, and that would be very weird in general. There might be a way to use <code>tt</code> instead of <code>expr</code>, but I haven&#39;t been able to get it to work."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 4, "last_activity_date": 1461080900, "creation_date": 1461080900, "answer_id": 36723373, "question_id": 36721733, "link": "https://stackoverflow.com/questions/36721733/is-there-a-way-to-pattern-match-infix-operations-with-precedence-in-rust-macros/36723373#36723373", "title": "Is there a way to pattern match infix operations with precedence in Rust macros?", "body": "<p>There are serious limitations to what you can do with macros. E.g. you cannot have parsing ambiguities. So you can't have an expression that expects a <code>+</code> after it. This means we need to separate our parsing tokens by e.g. a comma. Then we need to specify the basic binary operations. And finally a mapping from infix to infix with brackets or to prefix. An example using the infix to infix with brackets method is:</p>\n\n<pre><code>macro_rules! compute {\n    ($a:expr, +, $b:expr) =&gt; {{ add($a, $b) }};\n    ($a:expr, *, $b:expr) =&gt; {{ mul($a, $b) }};\n    ($a:expr, +, $($rest:tt)*) =&gt; {{\n        compute!($a, +, compute!($($rest)*))\n    }};\n    ($a:expr, *, $b:expr, $($rest:tt)*) =&gt; {{\n        compute!(compute!($a, *, $b), $($rest)*)\n    }};\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=dc873bd18076cf29f629c82d911136b1&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">Playground</a></p>\n\n<p>You can now call this macro almost like in your question: <code>compute!(1, +, 2, *, 3)</code></p>\n"}, {"comments": [{"owner": {"reputation": 2289, "user_id": 1454653, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/FvI1V.jpg?s=128&g=1", "display_name": "dragostis", "link": "https://stackoverflow.com/users/1454653/dragostis"}, "edited": false, "score": 0, "creation_date": 1461349274, "post_id": 36800597, "comment_id": 61175634, "body": "I haven&#39;t given the The Little Book of Rust Macros a read just yet, but maybe this would be a nice addition to it."}, {"owner": {"reputation": 1295, "user_id": 1114328, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d211889b453feb9210d9645cbcfd524e?s=128&d=identicon&r=PG", "display_name": "durka42", "link": "https://stackoverflow.com/users/1114328/durka42"}, "reply_to_user": {"reputation": 2289, "user_id": 1454653, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/FvI1V.jpg?s=128&g=1", "display_name": "dragostis", "link": "https://stackoverflow.com/users/1454653/dragostis"}, "edited": false, "score": 1, "creation_date": 1461349595, "post_id": 36800597, "comment_id": 61175812, "body": "I have several crazy macros like this. I&#39;m considering starting my own macro blog series."}], "tags": [], "owner": {"reputation": 1295, "user_id": 1114328, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d211889b453feb9210d9645cbcfd524e?s=128&d=identicon&r=PG", "display_name": "durka42", "link": "https://stackoverflow.com/users/1114328/durka42"}, "is_accepted": true, "score": 9, "last_activity_date": 1461349690, "last_edit_date": 1461349690, "creation_date": 1461348364, "answer_id": 36800597, "question_id": 36721733, "link": "https://stackoverflow.com/questions/36721733/is-there-a-way-to-pattern-match-infix-operations-with-precedence-in-rust-macros/36800597#36800597", "title": "Is there a way to pattern match infix operations with precedence in Rust macros?", "body": "<p>In theory, you can do it. In practice, it's a bad idea. I did it anyway. I posted this on reddit and was requested to transfer it here.</p>\n\n<p>Such a macro would necessarily be a \"tt muncher\", a macro which recurses to itself to parse one token of its input at a time. This is required because as pointed out in the comments above, it's the only way to pull apart an expression like <code>a + b</code>. These so-called <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0550-macro-future-proofing.md\" rel=\"noreferrer\">\"future-proofing restrictions\"</a> are in place for good reason, and tt munchers circumvent them. The recursion also means that the time to expand the macro is linear in the length of the expression, at least. And rustc will give up expanding macros after recursing 64 times, by default (but you can change the limit on stable).</p>\n\n<p>With those caveats in mind, let's see the macro! The strategy I have chosen is to transform the infix expression into postfix, and then evaluate the postfix expression, which is fairly simple to do. I very vaguely remember how to do this but since the objective here is macro craziness, not algorithmic tricks, I just followed the rules at the bottom of <a href=\"http://csis.pace.edu/~wolf/CS122/infix-postfix.htm\" rel=\"noreferrer\">this helpful page</a>.</p>\n\n<p>Without further ado, the code (<a href=\"https://play.rust-lang.org/?gist=971606d4b311a2841ed9565c26f462c4&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">runnable version</a>):</p>\n\n<pre><code>macro_rules! infix {\n    // done converting\n    (@cvt () $postfix:tt) =&gt; { infix!(@pfx () $postfix) };\n    //                                |    |  ^ postfix expression\n    //                                |    ^ operand stack\n    //                                ^ postfix interpreter\n\n    // infix to postfix conversion using the rules at the bottom of this page: http://csis.pace.edu/~wolf/CS122/infix-postfix.htm\n\n    // at end of input, flush the operators to postfix\n    (@cvt ($ophead:tt $($optail:tt)*) ($($postfix:tt)*)) =&gt; { infix!(@cvt ($($optail)*) ($($postfix)* $ophead)) };\n\n    // 2. push an operator onto the stack if it's empty or has a left-paren on top\n    (@cvt (                 ) $postfix:tt + $($tail:tt)*) =&gt; { infix!(@cvt (+               ) $postfix $($tail)*) };\n    (@cvt (                 ) $postfix:tt - $($tail:tt)*) =&gt; { infix!(@cvt (-               ) $postfix $($tail)*) };\n    (@cvt (                 ) $postfix:tt * $($tail:tt)*) =&gt; { infix!(@cvt (*               ) $postfix $($tail)*) };\n    (@cvt (                 ) $postfix:tt / $($tail:tt)*) =&gt; { infix!(@cvt (/               ) $postfix $($tail)*) };\n    (@cvt (LP $($optail:tt)*) $postfix:tt + $($tail:tt)*) =&gt; { infix!(@cvt (+ LP $($optail)*) $postfix $($tail)*) };\n    (@cvt (LP $($optail:tt)*) $postfix:tt - $($tail:tt)*) =&gt; { infix!(@cvt (- LP $($optail)*) $postfix $($tail)*) };\n    (@cvt (LP $($optail:tt)*) $postfix:tt * $($tail:tt)*) =&gt; { infix!(@cvt (* LP $($optail)*) $postfix $($tail)*) };\n    (@cvt (LP $($optail:tt)*) $postfix:tt / $($tail:tt)*) =&gt; { infix!(@cvt (/ LP $($optail)*) $postfix $($tail)*) };\n\n    // 3. push a left-paren onto the stack\n    (@cvt ($($operator:tt)*) $postfix:tt ($($inner:tt)*) $($tail:tt)*) =&gt; { infix!(@cvt (LP $($operator)*) $postfix $($inner)* RP $($tail)*) };\n\n    // 4. see right-paren, pop operators to postfix until left-paren\n    (@cvt (LP         $($optail:tt)*) $postfix:tt       RP $($tail:tt)*) =&gt; { infix!(@cvt ($($optail)*) $postfix               $($tail)*   ) };\n    (@cvt ($ophead:tt $($optail:tt)*) ($($postfix:tt)*) RP $($tail:tt)*) =&gt; { infix!(@cvt ($($optail)*) ($($postfix)* $ophead) RP $($tail)*) };\n\n    // 5. if an operator w/ lower precedence is on top, just push\n    (@cvt (+ $($optail:tt)*) $postfix:tt * $($tail:tt)*) =&gt; { infix!(@cvt (* + $($optail)*) $postfix $($tail)*) };\n    (@cvt (- $($optail:tt)*) $postfix:tt * $($tail:tt)*) =&gt; { infix!(@cvt (* - $($optail)*) $postfix $($tail)*) };\n    (@cvt (+ $($optail:tt)*) $postfix:tt / $($tail:tt)*) =&gt; { infix!(@cvt (/ + $($optail)*) $postfix $($tail)*) };\n    (@cvt (- $($optail:tt)*) $postfix:tt / $($tail:tt)*) =&gt; { infix!(@cvt (/ - $($optail)*) $postfix $($tail)*) };\n\n    // 6. if an operator w/ equal precedence is on top, pop and push\n    (@cvt (+ $($optail:tt)*) ($($postfix:tt)*) + $($tail:tt)*) =&gt; { infix!(@cvt (+ $($optail)*) ($($postfix)* +) $($tail)*) };\n    (@cvt (- $($optail:tt)*) ($($postfix:tt)*) - $($tail:tt)*) =&gt; { infix!(@cvt (- $($optail)*) ($($postfix)* -) $($tail)*) };\n    (@cvt (+ $($optail:tt)*) ($($postfix:tt)*) - $($tail:tt)*) =&gt; { infix!(@cvt (- $($optail)*) ($($postfix)* +) $($tail)*) };\n    (@cvt (- $($optail:tt)*) ($($postfix:tt)*) + $($tail:tt)*) =&gt; { infix!(@cvt (+ $($optail)*) ($($postfix)* -) $($tail)*) };\n    (@cvt (* $($optail:tt)*) ($($postfix:tt)*) * $($tail:tt)*) =&gt; { infix!(@cvt (* $($optail)*) ($($postfix)* *) $($tail)*) };\n    (@cvt (/ $($optail:tt)*) ($($postfix:tt)*) / $($tail:tt)*) =&gt; { infix!(@cvt (/ $($optail)*) ($($postfix)* /) $($tail)*) };\n    (@cvt (* $($optail:tt)*) ($($postfix:tt)*) / $($tail:tt)*) =&gt; { infix!(@cvt (/ $($optail)*) ($($postfix)* *) $($tail)*) };\n    (@cvt (/ $($optail:tt)*) ($($postfix:tt)*) * $($tail:tt)*) =&gt; { infix!(@cvt (* $($optail)*) ($($postfix)* /) $($tail)*) };\n\n    // 7. if an operator w/ higher precedence is on top, pop it to postfix\n    (@cvt (* $($optail:tt)*) ($($postfix:tt)*) + $($tail:tt)*) =&gt; { infix!(@cvt ($($optail)*) ($($postfix)* *) + $($tail)*) };\n    (@cvt (* $($optail:tt)*) ($($postfix:tt)*) - $($tail:tt)*) =&gt; { infix!(@cvt ($($optail)*) ($($postfix)* *) - $($tail)*) };\n    (@cvt (/ $($optail:tt)*) ($($postfix:tt)*) + $($tail:tt)*) =&gt; { infix!(@cvt ($($optail)*) ($($postfix)* /) + $($tail)*) };\n    (@cvt (/ $($optail:tt)*) ($($postfix:tt)*) - $($tail:tt)*) =&gt; { infix!(@cvt ($($optail)*) ($($postfix)* /) - $($tail)*) };\n\n    // 1. operands go to the postfix output\n    (@cvt $operators:tt ($($postfix:tt)*) $head:tt $($tail:tt)*) =&gt; { infix!(@cvt $operators ($($postfix)* ($head)) $($tail)*) };\n\n    // postfix interpreter\n    (@pfx ($result:expr                     ) (                     )) =&gt; { $result };\n    (@pfx (($a:expr) ($b:expr) $($stack:tt)*) (+        $($tail:tt)*)) =&gt; { infix!(@pfx ((($b + $a)) $($stack)*) ($($tail)*)) };\n    (@pfx (($a:expr) ($b:expr) $($stack:tt)*) (-        $($tail:tt)*)) =&gt; { infix!(@pfx ((($b - $a)) $($stack)*) ($($tail)*)) };\n    (@pfx (($a:expr) ($b:expr) $($stack:tt)*) (*        $($tail:tt)*)) =&gt; { infix!(@pfx ((($b * $a)) $($stack)*) ($($tail)*)) };\n    (@pfx (($a:expr) ($b:expr) $($stack:tt)*) (/        $($tail:tt)*)) =&gt; { infix!(@pfx ((($b / $a)) $($stack)*) ($($tail)*)) };\n    (@pfx ($($stack:tt)*                    ) ($head:tt $($tail:tt)*)) =&gt; { infix!(@pfx ($head       $($stack)*) ($($tail)*)) };\n\n    ($($t:tt)*) =&gt; { infix!(@cvt () () $($t)*) }\n    //                      |    |  |  ^ infix expression\n    //                      |    |  ^ postfix expression\n    //                      |    ^ operator stack\n    //                      ^ convert infix to postfix\n}\n\nfn main() {\n    println!(\"{}\", infix!(1 + 2 * 3));\n    println!(\"{}\", infix!(1 * 2 + 3));\n    println!(\"{}\", infix!(((1 + 2) * 3) * 3));\n    println!(\"{}\", infix!(( 1 + 2  * 3) * 3));\n    println!(\"{}\", infix!(1 - 2 - 1));\n}\n</code></pre>\n\n<p>Most of the macro tricks I used here can be found in <a href=\"http://danielkeep.github.io/tlborm/book/\" rel=\"noreferrer\">The Little Book of Rust Macros</a>. You can see that the macro is divided into three sections: the infix-to-postfix conversion (all rules that start with <code>@cvt</code>), the postfix interpreter (all rules that start with <code>@pfx</code>), and the single entry point (the last rule, with no prefix).</p>\n\n<p>The converter uses an operator stack and builds up the postfix output string as it chews through the input. Parentheses are converted to <code>LP</code> and <code>RP</code> to keep the input as a linear stream of tokens (normally <code>macro_rules</code> requires parentheses to stay balanced and matches a parenthesized group as a single token-tree). All operators are considered to be right-associative, and PEMDAS applies (<code>*</code> and <code>/</code> have precedence over <code>+</code> and <code>-</code>).</p>\n\n<p>The interpreter uses an operand stack and evaluates the expression in a rather straightforward way: push operands onto the stack, and when encountering an operator pop off two operands and apply the operator. The result of the postfix interpreter is an expression quite similar to the original infix expression, but with everything parenthesized to simulate operator precedence. We then rely on rustc to do the actual arithmetic :)</p>\n\n<p>A few examples are included at the end of the code. Let me know if you find any bugs! One limitation is that each operand must be a single token-tree, so input like <code>5.0f32.sqrt()</code> will cause a parse error and multi-token literals like <code>-2</code> might cause wrong answers. You can fix this with curly braces, e.g. <code>infix!({-2.0} - {5.0f32.sqrt()})</code> (it could be fixed by complicating the macro, too).</p>\n"}], "owner": {"reputation": 2289, "user_id": 1454653, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/FvI1V.jpg?s=128&g=1", "display_name": "dragostis", "link": "https://stackoverflow.com/users/1454653/dragostis"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1416, "favorite_count": 2, "accepted_answer_id": 36800597, "answer_count": 2, "score": 4, "last_activity_date": 1461349690, "creation_date": 1461077009, "last_edit_date": 1461079261, "question_id": 36721733, "link": "https://stackoverflow.com/questions/36721733/is-there-a-way-to-pattern-match-infix-operations-with-precedence-in-rust-macros", "title": "Is there a way to pattern match infix operations with precedence in Rust macros?", "body": "<p>A very simple example would be to implement basic addition and multiplication in Rust macros.</p>\n\n<pre><code>compute!(1 + 2 * 3) // should evaluate to 7\n</code></pre>\n\n<p>I'm not completely sure it's possible due to Rust macro's limited grammar.</p>\n\n<p>The point here is not to compute something at compile-time, but to be able to somehow parse the tokens (with precedence):</p>\n\n<pre><code>(term, terms*) =&gt; { parse_mul!(term) + (parse_mul!(terms))* } // this is not actual Rust!\n</code></pre>\n"}, {"tags": ["c++", "rust", "compiler-optimization"], "comments": [{"owner": {"reputation": 1964, "user_id": 1320881, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b69670b7cc6bce132f443eee557c9448?s=128&d=identicon&r=PG", "display_name": "Unimportant", "link": "https://stackoverflow.com/users/1320881/unimportant"}, "edited": false, "score": 1, "creation_date": 1461070304, "post_id": 36718916, "comment_id": 61022996, "body": "Try <code>volatile int i</code>."}, {"owner": {"reputation": 20017, "user_id": 2282011, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/p8sXJ.jpg?s=128&g=1", "display_name": "Devolus", "link": "https://stackoverflow.com/users/2282011/devolus"}, "edited": false, "score": 0, "creation_date": 1461070397, "post_id": 36718916, "comment_id": 61023084, "body": "Another option would be to put it in a separate module and compile with <code>-O0</code>"}, {"owner": {"reputation": 19779, "user_id": 878532, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/5fbebb625a289267abd098c0e676c760?s=128&d=identicon&r=PG", "display_name": "Klaus", "link": "https://stackoverflow.com/users/878532/klaus"}, "edited": false, "score": 2, "creation_date": 1461070645, "post_id": 36718916, "comment_id": 61023290, "body": "And what is the intention? If compiler can optimize the theoretical result of such tests are absolute useless. So why spend time on this hypothetical issues?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1461071037, "post_id": 36718916, "comment_id": 61023633, "body": "This question cannot have one answer for both Rust and C++. Please pick one and adjust the question as appropriate."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1461071048, "post_id": 36718916, "comment_id": 61023640, "body": "This question is unfortunately quite incomplete. Measuring the performance of unoptimized code is pointless, so what do you want to measure here if not the loop? The cost of <code>*up2 += 1;</code>?"}, {"owner": {"reputation": 17580, "user_id": 493106, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/48b0c7ab491edf2f69e63773181a22b5?s=128&d=identicon&r=PG", "display_name": "xaxxon", "link": "https://stackoverflow.com/users/493106/xaxxon"}, "edited": false, "score": 0, "creation_date": 1461071193, "post_id": 36718916, "comment_id": 61023774, "body": "go watch this video on microbenchmarking.   It&#39;s long, but it&#39;s very informative and entertaining as well.  It has a lot of good info as well as a very specific, very good answer to your question involving inserting 0-instruction inline assembly.  <a href=\"https://www.youtube.com/watch?v=nXaxk27zwlk\" rel=\"nofollow noreferrer\">youtube.com/watch?v=nXaxk27zwlk</a>"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1461071268, "post_id": 36718916, "comment_id": 61023836, "body": "Have you seen <a href=\"https://www.youtube.com/watch?v=nXaxk27zwlk\" rel=\"nofollow noreferrer\">Tuning C++: Benchmarks, and CPUs, and Compilers! Oh My!</a> by Chandler Carruth (CppCon 2015)? Highly informational."}, {"owner": {"reputation": 17580, "user_id": 493106, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/48b0c7ab491edf2f69e63773181a22b5?s=128&d=identicon&r=PG", "display_name": "xaxxon", "link": "https://stackoverflow.com/users/493106/xaxxon"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1461071317, "post_id": 36718916, "comment_id": 61023868, "body": "@MatthieuM. beat you"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 17580, "user_id": 493106, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/48b0c7ab491edf2f69e63773181a22b5?s=128&d=identicon&r=PG", "display_name": "xaxxon", "link": "https://stackoverflow.com/users/493106/xaxxon"}, "edited": false, "score": 0, "creation_date": 1461071319, "post_id": 36718916, "comment_id": 61023869, "body": "@xaxxon: I see no link in your comment, but might you be talking about the video I linked? Okay I NOW see a link in your comment, cheater :P"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 1964, "user_id": 1320881, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b69670b7cc6bce132f443eee557c9448?s=128&d=identicon&r=PG", "display_name": "Unimportant", "link": "https://stackoverflow.com/users/1320881/unimportant"}, "edited": false, "score": 0, "creation_date": 1461071730, "post_id": 36718916, "comment_id": 61024176, "body": "@user1320881: <code>volatile</code> is likely to prevent vectorization, so unless we know what the OP wishes to measure, it may or may not be the right answer."}, {"owner": {"reputation": 688, "user_id": 4157647, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/82e77ab7941218ff6733d668b8049185?s=128&d=identicon&r=PG&f=1", "display_name": "Harvey Adcock", "link": "https://stackoverflow.com/users/4157647/harvey-adcock"}, "reply_to_user": {"reputation": 19779, "user_id": 878532, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/5fbebb625a289267abd098c0e676c760?s=128&d=identicon&r=PG", "display_name": "Klaus", "link": "https://stackoverflow.com/users/878532/klaus"}, "edited": false, "score": 0, "creation_date": 1461073563, "post_id": 36718916, "comment_id": 61025572, "body": "@Klaus I&#39;m trying to measure the difference between Rust and C++ code when something that&#39;s statically checked at compile time in Rust has to be manually checked in C++. This has to be checked on each access of the pointer in C++ so I want multiple accesses of the pointer to happen, hence the loop that I don&#39;t want optimised out."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1461073679, "post_id": 36718916, "comment_id": 61025665, "body": "@HarveyAdcock: What&#39;s <code>up2</code>? Can we get a <a href=\"http://stackoverflow.com/help/mcve\">MCVE</a>? Do you want to measure the performance of the <code>*up2 += 1;</code> statement?"}, {"owner": {"reputation": 688, "user_id": 4157647, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/82e77ab7941218ff6733d668b8049185?s=128&d=identicon&r=PG&f=1", "display_name": "Harvey Adcock", "link": "https://stackoverflow.com/users/4157647/harvey-adcock"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1461073874, "post_id": 36718916, "comment_id": 61025811, "body": "@Shepmaster but if there&#39;s a solution for LLVM wouldn&#39;t that be applicable to both Rust and C++? The only reason I didn&#39;t phrase this as a solely LLVM question is in case there was a decent way without changing optimisation settings."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1461074163, "post_id": 36718916, "comment_id": 61026020, "body": "You&#39;d have to be able to pass LLVM options to both compilers and doing that would require compiler-specific options, making the answer specific to one compiler or another. If someone provides a great answer for C++ and another person a great answer for Rust, which will you accept?"}, {"owner": {"reputation": 688, "user_id": 4157647, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/82e77ab7941218ff6733d668b8049185?s=128&d=identicon&r=PG&f=1", "display_name": "Harvey Adcock", "link": "https://stackoverflow.com/users/4157647/harvey-adcock"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1461074314, "post_id": 36718916, "comment_id": 61026126, "body": "@MatthieuM. Have updated the question to show the relevant parts of the question to what I&#39;m looking at in terms of performance improvement in Rust. So it&#39;s essentially what the overhead of checking for null-ness would be that I&#39;m interested in."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1461075605, "post_id": 36718916, "comment_id": 61027128, "body": "@HarveyAdcock: Thanks for the update :) Are you trying to check the overhead of null checks specifically? And if so, are you interested in null checks in loops? Or null checks in &quot;straight&quot; code (no loop)? Because of branch prediction the &quot;overhead&quot; might vary between both cases."}, {"owner": {"reputation": 688, "user_id": 4157647, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/82e77ab7941218ff6733d668b8049185?s=128&d=identicon&r=PG&f=1", "display_name": "Harvey Adcock", "link": "https://stackoverflow.com/users/4157647/harvey-adcock"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1461075888, "post_id": 36718916, "comment_id": 61027345, "body": "@MatthieuM. Ah, I hadn&#39;t thought about branch prediction, I was mainly thinking about in straight code, which is probably what&#39;s making any attempts I&#39;ve made at forcing the loop end up similar times for both! Although the check would still need to be processed, so I would&#39;ve imagined at least a small slowdown."}], "answers": [{"comments": [{"owner": {"reputation": 205167, "user_id": 4323, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/qqgFU.png?s=128&g=1", "display_name": "John Zwinck", "link": "https://stackoverflow.com/users/4323/john-zwinck"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1461071125, "post_id": 36719124, "comment_id": 61023721, "body": "@MatthieuM.: Right, but the OP seems to be interested in &quot;running this loop rather than just evaluating the overall result&quot; which unrolling doesn&#39;t harm."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1461071415, "post_id": 36719124, "comment_id": 61023925, "body": "It&#39;s the &quot;seems&quot; that I&#39;m trying to unravel. It&#39;s not clear to me what they are trying to measure here..."}], "tags": [], "owner": {"reputation": 205167, "user_id": 4323, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/qqgFU.png?s=128&g=1", "display_name": "John Zwinck", "link": "https://stackoverflow.com/users/4323/john-zwinck"}, "is_accepted": false, "score": 1, "last_activity_date": 1461070607, "creation_date": 1461070607, "answer_id": 36719124, "question_id": 36718916, "link": "https://stackoverflow.com/questions/36718916/is-there-a-way-to-turn-off-loop-optimisation-on-both-c-and-rust-compilation/36719124#36719124", "title": "Is there a way to turn off loop optimisation on both C++ and Rust compilation?", "body": "<p>One typical way to avoid having the compiler optimize away loops is to make their bounds indeterminate at compile time.  In this example, rather than looping up to <code>10000000</code>, loop up to a count which is read from <code>stdin</code> or <code>argv</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": false, "score": 2, "last_activity_date": 1461071154, "last_edit_date": 1495541772, "creation_date": 1461071116, "answer_id": 36719338, "question_id": 36718916, "link": "https://stackoverflow.com/questions/36718916/is-there-a-way-to-turn-off-loop-optimisation-on-both-c-and-rust-compilation/36719338#36719338", "title": "Is there a way to turn off loop optimisation on both C++ and Rust compilation?", "body": "<p>In Rust you can use <a href=\"https://doc.rust-lang.org/book/benchmark-tests.html\" rel=\"nofollow noreferrer\"><code>test::black_box</code></a>.</p>\n\n<p>In C++ (using gcc) <code>asm volatile(\"\" : \"+r\" (datum));</code>. See <a href=\"https://stackoverflow.com/questions/28287064/how-not-to-optimize-away-mechanics-of-a-folly-function\">this</a>.</p>\n"}], "owner": {"reputation": 688, "user_id": 4157647, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/82e77ab7941218ff6733d668b8049185?s=128&d=identicon&r=PG&f=1", "display_name": "Harvey Adcock", "link": "https://stackoverflow.com/users/4157647/harvey-adcock"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 277, "favorite_count": 0, "answer_count": 2, "score": 1, "last_activity_date": 1461074186, "creation_date": 1461070149, "last_edit_date": 1461074186, "question_id": 36718916, "link": "https://stackoverflow.com/questions/36718916/is-there-a-way-to-turn-off-loop-optimisation-on-both-c-and-rust-compilation", "title": "Is there a way to turn off loop optimisation on both C++ and Rust compilation?", "body": "<p>I'm looking for a compiler flag that will allow me to prevent the compiler optimising away the loop in code like this:</p>\n\n<pre><code>void func() {\n    std::unique_ptr&lt;int&gt; up1(new int(0)), up2;\n    up2 = move(up1);\n    for(int i = 0; i &lt; 1000000000; i++) {\n        if(up2) {\n            *up2 += 1;\n        }\n    }\n    if(up2)\n        printf(\"%d\", *up2);\n}\n</code></pre>\n\n<p>in both C++ and Rust code. I'm trying to compare similar sections of code in terms of speed and running this loop rather than just evaluating the overall result is important. Since Rust statically guarantees that the pointer ownership hasn't been moved, it doesn't need the null pointer checks on each iteration of the loop and I would imagine therefore it would produce faster code if the loop couldn't be optimised out for whatever reason.</p>\n\n<p>Rust compiles using an LLVM backend, so I would preferably be using that for C++ as well.</p>\n"}, {"tags": ["rust", "rustdoc"], "comments": [{"owner": {"reputation": 3039, "user_id": 2851815, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/37MCt.png?s=128&g=1", "display_name": "\u043d\u0430\u0431\u0438\u044f\u0447\u043b\u044d\u0432\u044d\u043b\u0438", "link": "https://stackoverflow.com/users/2851815/%d0%bd%d0%b0%d0%b1%d0%b8%d1%8f%d1%87%d0%bb%d1%8d%d0%b2%d1%8d%d0%bb%d0%b8"}, "edited": false, "score": 0, "creation_date": 1461069721, "post_id": 36717541, "comment_id": 61022517, "body": "Why not use regex?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1461069811, "post_id": 36717541, "comment_id": 61022592, "body": "I&#39;d highly encourage you to explain what it is you are trying to accomplish. It&#39;s absolutely <b>possible</b> to do this - generate the documentation, open it up in an editor or web browser, then copy and paste the desired documentation."}, {"owner": {"reputation": 2912, "user_id": 40220, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/d9287234ee8436b5631a8ae3206c6121?s=128&d=identicon&r=PG", "display_name": "macropas", "link": "https://stackoverflow.com/users/40220/macropas"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1461077537, "post_id": 36717541, "comment_id": 61028561, "body": "@Shepmaster And I&#39;d highly encourage you to explain that in Netbeans or Eclipse you can obtain context help for current Java class entirely automatically"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1461077887, "post_id": 36717541, "comment_id": 61028822, "body": "I&#39;m not understanding what you mean; I have a feeling that the intended tone in your comment (sarcasm?) isn&#39;t translating well in text form. Are you trying to generate documentation from inside an IDE? Are you trying to automatically insert skeleton documentation comments based on the code present? It certainly seems like one answer to the question as currently phrased is to run <code>cargo doc --open</code> and look at the result."}, {"owner": {"reputation": 2912, "user_id": 40220, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/d9287234ee8436b5631a8ae3206c6121?s=128&d=identicon&r=PG", "display_name": "macropas", "link": "https://stackoverflow.com/users/40220/macropas"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1461079313, "post_id": 36717541, "comment_id": 61029927, "body": "@Shepmaster It seems to me that my wish to obtain context help (e.g. in IDE like RustDT) for current code entity is quite natural and does not require much explanation."}], "owner": {"reputation": 2912, "user_id": 40220, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/d9287234ee8436b5631a8ae3206c6121?s=128&d=identicon&r=PG", "display_name": "macropas", "link": "https://stackoverflow.com/users/40220/macropas"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 77, "favorite_count": 1, "answer_count": 0, "score": 1, "last_activity_date": 1461066697, "creation_date": 1461066697, "question_id": 36717541, "link": "https://stackoverflow.com/questions/36717541/obtaining-rustdoc-for-particular-function-or-trait", "title": "Obtaining rustdoc for particular function or trait", "body": "<p>Is it possible to obtain a rustdoc fragment for particular function or trait from a programming library written in Rust like it's done in Javadoc tooling? Is there some tool for this?</p>\n"}, {"tags": ["rust", "libc"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1461066289, "post_id": 36716567, "comment_id": 61020004, "body": "What&#39;s wrong with a high resolution timer like <a href=\"https://doc.rust-lang.org/time/time/fn.precise_time_ns.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/time/time/fn.precise_time_ns.html</a> ?"}, {"owner": {"reputation": 3039, "user_id": 2851815, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/37MCt.png?s=128&g=1", "display_name": "\u043d\u0430\u0431\u0438\u044f\u0447\u043b\u044d\u0432\u044d\u043b\u0438", "link": "https://stackoverflow.com/users/2851815/%d0%bd%d0%b0%d0%b1%d0%b8%d1%8f%d1%87%d0%bb%d1%8d%d0%b2%d1%8d%d0%bb%d0%b8"}, "edited": false, "score": 2, "creation_date": 1461066290, "post_id": 36716567, "comment_id": 61020005, "body": "<code>libc</code> crate, <code>clock</code> function"}, {"owner": {"reputation": 41983, "user_id": 866732, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/f09f0253204000d6083ed1de21afc6fd?s=128&d=identicon&r=PG", "display_name": "WiSaGaN", "link": "https://stackoverflow.com/users/866732/wisagan"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 2, "creation_date": 1461066682, "post_id": 36716567, "comment_id": 61020276, "body": "@Ker , OP is asking about user cpu time, not wall clock time."}, {"owner": {"reputation": 688, "user_id": 4157647, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/82e77ab7941218ff6733d668b8049185?s=128&d=identicon&r=PG&f=1", "display_name": "Harvey Adcock", "link": "https://stackoverflow.com/users/4157647/harvey-adcock"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1461066732, "post_id": 36716567, "comment_id": 61020316, "body": "@ker as far as I can tell from the documentation (it&#39;s very brief!) doesn&#39;t this just tell you an exact time and from that you can work out a difference in times? Unlike the <code>clock</code> function which uses how much time the processor has been running on the process?"}], "answers": [{"tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": false, "score": 3, "last_activity_date": 1466769530, "last_edit_date": 1466769530, "creation_date": 1461070594, "answer_id": 36719115, "question_id": 36716567, "link": "https://stackoverflow.com/questions/36716567/is-there-a-rust-equivalent-to-the-clock-function-in-c/36719115#36719115", "title": "Is there a Rust equivalent to the clock function in C++?", "body": "<p>I've been using this code:</p>\n\n<pre><code>extern crate libc;\n\nuse std::mem;\nuse std::io;\nuse std::time::Duration;\n\npub fn cpu_time() -&gt; Duration {\n    unsafe {\n        let mut tp = mem::uninitialized();\n        if sys::clock_gettime(sys::CLOCK_PROCESS_CPUTIME_ID, &amp;mut tp) == 0 {\n            Duration::new(tp.tv_sec as u64, tp.tv_nsec as u32)\n        } else {\n            panic!(\"cpu_time: {}\", io::Error::last_os_error());\n        }\n    }\n}\n\nmod sys {\n    use libc::{c_int, timespec};\n    extern \"C\" {\n        pub fn clock_gettime(clk_id: c_int, tp: *mut timespec) -&gt; c_int;\n    }\n    pub const CLOCK_PROCESS_CPUTIME_ID: c_int = 2;\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 41983, "user_id": 866732, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/f09f0253204000d6083ed1de21afc6fd?s=128&d=identicon&r=PG", "display_name": "WiSaGaN", "link": "https://stackoverflow.com/users/866732/wisagan"}, "edited": false, "score": 2, "creation_date": 1461312349, "post_id": 36719255, "comment_id": 61151590, "body": "Know any reason why <code>libc</code> does not include <code>clock</code>. <code>clock</code> seems to be in <code>C</code> stdlib."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1461070937, "creation_date": 1461070937, "answer_id": 36719255, "question_id": 36716567, "link": "https://stackoverflow.com/questions/36716567/is-there-a-rust-equivalent-to-the-clock-function-in-c/36719255#36719255", "title": "Is there a Rust equivalent to the clock function in C++?", "body": "<p>If it's <strong>required</strong> to use <code>clock</code>, then you will need to add a bit of a shim. At least on OS X, it appears that libc doesn't expose <code>clock</code>, but it <em>does</em> give you <code>clock_t</code> (which is the harder part of the equation). Exposing <code>clock</code> is then straight-forward: </p>\n\n<pre><code>extern crate libc;\n\nmod ffi {\n    extern {\n        pub fn clock() -&gt; ::libc::clock_t;\n    }\n}\n\nfn main() {\n    let start = unsafe { ffi::clock() };\n\n    let mut dummy = 0;\n    for i in 0..20000 { dummy += i };\n\n    let end = unsafe { ffi::clock() };\n    println!(\"{}, {}, {}, {}\", dummy, start, end, end - start);\n}\n</code></pre>\n\n<p>I'd probably make a wrapper that marks <code>clock</code> as safe to call in any circumstance though.</p>\n"}], "owner": {"reputation": 688, "user_id": 4157647, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/82e77ab7941218ff6733d668b8049185?s=128&d=identicon&r=PG&f=1", "display_name": "Harvey Adcock", "link": "https://stackoverflow.com/users/4157647/harvey-adcock"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 915, "favorite_count": 0, "accepted_answer_id": 36719255, "answer_count": 2, "score": 7, "last_activity_date": 1466769530, "creation_date": 1461063996, "last_edit_date": 1461065382, "question_id": 36716567, "link": "https://stackoverflow.com/questions/36716567/is-there-a-rust-equivalent-to-the-clock-function-in-c", "title": "Is there a Rust equivalent to the clock function in C++?", "body": "<p>I'm trying to test the efficiency of parts of my code, and C++ has a <code>clock</code> function in <code>ctime</code> that allows measurement of the processor time consumed by the program using the <code>clock_t</code> type. Is there some Rust equivalent that isn't just measuring the absolute time between two points in the code?</p>\n"}, {"tags": ["macros", "rust"], "answers": [{"comments": [{"owner": {"reputation": 89, "user_id": 4837852, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b7179ba8db61f24485ef85461f0dd268?s=128&d=identicon&r=PG&f=1", "display_name": "divinites", "link": "https://stackoverflow.com/users/4837852/divinites"}, "edited": false, "score": 0, "creation_date": 1461067585, "post_id": 36716719, "comment_id": 61020929, "body": "Thanks!  I have updated the question with a recursive macro,  but it still does not work. Could you please point out what is wrong?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 89, "user_id": 4837852, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b7179ba8db61f24485ef85461f0dd268?s=128&d=identicon&r=PG&f=1", "display_name": "divinites", "link": "https://stackoverflow.com/users/4837852/divinites"}, "edited": false, "score": 0, "creation_date": 1461068204, "post_id": 36716719, "comment_id": 61021377, "body": "@divinites You still haven&#39;t indicated <i>what</i> you want the macro to do?  I&#39;ve taken a guess at what you wanted."}, {"owner": {"reputation": 89, "user_id": 4837852, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b7179ba8db61f24485ef85461f0dd268?s=128&d=identicon&r=PG&f=1", "display_name": "divinites", "link": "https://stackoverflow.com/users/4837852/divinites"}, "edited": false, "score": 0, "creation_date": 1461068512, "post_id": 36716719, "comment_id": 61021594, "body": "Thanks! That&#39;s exactly what I want."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 2, "last_activity_date": 1461068195, "last_edit_date": 1461068195, "creation_date": 1461064383, "answer_id": 36716719, "question_id": 36716497, "link": "https://stackoverflow.com/questions/36716497/can-rust-macros-deal-with-multiple-layer-nested-expressions/36716719#36716719", "title": "Can Rust macros deal with multiple-layer nested expressions?", "body": "<p>You asked it to parse an expression, so that's exactly what it <em>tried</em> to do.</p>\n\n<p>The first thing it sees is <code>[[1, 2], 3]</code> which is invalid because it's an array literal where the first element is of type <code>[i32; 2]</code> and the second element is of type <code>i32</code>.  So, it fails.</p>\n\n<p>If you want to macro to deal with recursive syntax, you're going to have to write it to handle it.  I have no idea what you're trying to do (\"deal with bracket\" <em>how?</em>), so I can't offer a concrete example.  Try adding an extra rule <em>before</em> the existing ones that explicitly deals with <code>[[$($stuff:tt)*] ...</code>.  Rules are processed top-to-bottom, so you need to put the most specific rule first. The following prints out <code>[1, 2]</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>macro_rules! test {\n    ([$target:tt, $($inner_rest:tt),*], $($rest:tt),*) =&gt; {\n        test!($target)\n    };\n    ($target:tt) =&gt; {\n        println!(\"{:?}\", $target);\n    };\n    ($target:tt, $($rest:tt),*) =&gt; {\n        test!($target)\n    };\n}\n\nfn main() {\n    test![[[1,2],3],[[5,6],3],4];\n}\n</code></pre>\n"}], "owner": {"reputation": 89, "user_id": 4837852, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b7179ba8db61f24485ef85461f0dd268?s=128&d=identicon&r=PG&f=1", "display_name": "divinites", "link": "https://stackoverflow.com/users/4837852/divinites"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 488, "favorite_count": 0, "accepted_answer_id": 36716719, "answer_count": 1, "score": 1, "last_activity_date": 1461069349, "creation_date": 1461063807, "last_edit_date": 1461069349, "question_id": 36716497, "link": "https://stackoverflow.com/questions/36716497/can-rust-macros-deal-with-multiple-layer-nested-expressions", "title": "Can Rust macros deal with multiple-layer nested expressions?", "body": "<p>The following code is a simple test of <code>macro_rule!</code>'s limit. It correctly prints <code>[1, 2]</code> as the target.</p>\n\n<pre><code>macro_rules! test {\n    ($target:tt) =&gt; {\n        println!(\"{:?}\", $target);\n    };\n    ($target:tt, $($rest:tt),*) =&gt; {\n        test!($target)\n    };\n    ([$target:tt, $($inner_rest:tt),*],$($rest:tt),*) =&gt; {\n        test!($target)\n    }\n}\n\nfn main() {\n    test![[1, 2], [[5, 6], 3], 4];\n}\n</code></pre>\n\n<p>However, if I change <code>[[1,2]</code> to <code>[[1,2],3]</code>, the compiler complains:</p>\n\n<pre><code>&lt;anon&gt;:16:15: 16:16 error: mismatched types:\n expected `[_; 2]`,\n    found `_`\n(expected array of 2 elements,\n    found integral variable) [E0308]\n&lt;anon&gt;:16  test![[[1,2],3],[[5,6],3],4];\n                        ^\n&lt;std macros&gt;:2:25: 2:56 note: in this expansion of format_args!\n&lt;std macros&gt;:3:1: 3:54 note: in this expansion of print! (defined in &lt;std macros&gt;)\n&lt;anon&gt;:4:5: 4:30 note: in this expansion of println! (defined in &lt;std macros&gt;)\n&lt;anon&gt;:7:6: 7:20 note: in this expansion of test! (defined in &lt;anon&gt;)\n&lt;anon&gt;:16:2: 16:31 note: in this expansion of test! (defined in &lt;anon&gt;)\n&lt;anon&gt;:16:15: 16:16 help: see the detailed explanation for E0308\nerror: aborting due to previous error\nplaypen: application terminated with error code 101\n</code></pre>\n\n<p>Is there a way to let the macro recursively deal with brackets and print the first item? I have studied <a href=\"https://doc.rust-lang.org/book/macros.html\" rel=\"nofollow\">the example given by the Rust documentation</a>, but still have no idea about how to implement it in my case.</p>\n"}, {"tags": ["rust", "ownership"], "answers": [{"comments": [{"owner": {"reputation": 4690, "user_id": 2019549, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/900a3735d55a0473c975ba9266bf0c68?s=128&d=identicon&r=PG", "display_name": "cambunctious", "link": "https://stackoverflow.com/users/2019549/cambunctious"}, "edited": false, "score": 0, "creation_date": 1594838204, "post_id": 36707468, "comment_id": 111270501, "body": "In real life, if you have a borrowed cow, you should just return it to its owner."}], "tags": [], "owner": {"reputation": 41983, "user_id": 866732, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/f09f0253204000d6083ed1de21afc6fd?s=128&d=identicon&r=PG", "display_name": "WiSaGaN", "link": "https://stackoverflow.com/users/866732/wisagan"}, "is_accepted": true, "score": 21, "last_activity_date": 1547516909, "last_edit_date": 1547516909, "creation_date": 1461032922, "answer_id": 36707468, "question_id": 36706429, "link": "https://stackoverflow.com/questions/36706429/is-it-possible-to-return-either-a-borrowed-or-owned-type-in-rust/36707468#36707468", "title": "Is it possible to return either a borrowed or owned type in Rust?", "body": "<p>Since <code>BigInt</code> implements <code>Clone</code>, you can use a <a href=\"https://doc.rust-lang.org/std/borrow/enum.Cow.html\" rel=\"noreferrer\"><code>std::borrow::Cow</code></a>:</p>\n\n<pre><code>use num::bigint::BigInt; // 0.2.0\nuse std::borrow::Cow;\n\nfn cal(a: BigInt, b: BigInt, floor: &amp;BigInt) -&gt; Cow&lt;BigInt&gt; {\n    let c: BigInt = a - b;\n    if c.ge(floor) {\n        Cow::Owned(c)\n    } else {\n        Cow::Borrowed(floor)\n    }\n}\n</code></pre>\n\n<p>Later, you can use <a href=\"https://doc.rust-lang.org/std/borrow/enum.Cow.html#method.into_owned\" rel=\"noreferrer\"><code>Cow::into_owned()</code></a> to get a owned version of <code>BigInt</code>, or just use it as a reference:</p>\n\n<pre><code>fn main() {\n    let a = BigInt::from(1);\n    let b = BigInt::from(2);\n    let c = &amp;BigInt::from(3);\n\n    let result = cal(a, b, c);\n\n    let ref_result = &amp;result;\n    println!(\"ref result: {}\", ref_result);\n\n    let owned_result = result.into_owned();\n    println!(\"owned result: {}\", owned_result);\n}\n</code></pre>\n"}], "owner": {"reputation": 518, "user_id": 945764, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4f1f5f8984d14b5d1c6d4f048ce1581e?s=128&d=identicon&r=PG", "display_name": "lucian", "link": "https://stackoverflow.com/users/945764/lucian"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2212, "favorite_count": 2, "accepted_answer_id": 36707468, "answer_count": 1, "score": 13, "last_activity_date": 1547516909, "creation_date": 1461025266, "last_edit_date": 1547516738, "question_id": 36706429, "link": "https://stackoverflow.com/questions/36706429/is-it-possible-to-return-either-a-borrowed-or-owned-type-in-rust", "title": "Is it possible to return either a borrowed or owned type in Rust?", "body": "<p>In the following code, how can I return the reference of <code>floor</code> instead of a new object? Is it possible to let the function return either a borrowed reference or an owned value? </p>\n\n<pre><code>extern crate num; // 0.2.0\n\nuse num::bigint::BigInt;\n\nfn cal(a: BigInt, b: BigInt, floor: &amp;BigInt) -&gt; BigInt {\n    let c: BigInt = a - b;\n    if c.ge(floor) {\n        c\n    } else {\n        floor.clone()\n    }\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1461013648, "post_id": 36704115, "comment_id": 60996553, "body": "It&#39;s unclear to me what the problem is with the solution presented. <code>T</code> has to outlive <code>&#39;a</code> to prevent dangling pointers; <code>T</code> has to be <code>Copy</code> because you defined <code>CircularBuffer</code> as such."}, {"owner": {"reputation": 361, "user_id": 4890331, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-IHI95-UokOs/AAAAAAAAAAI/AAAAAAAAACY/EfPJ_paD388/photo.jpg?sz=128", "display_name": "David Beck", "link": "https://stackoverflow.com/users/4890331/david-beck"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1461014007, "post_id": 36704115, "comment_id": 60996737, "body": "Thank you for the formatting help. I am not sure if there is a problem. I just don&#39;t fully understand how it works. The part I don&#39;t see is why do I need to add &#39;a lifetime to T. Cannot that be T: Copy, without a lifetime? In other words I cannot see a case when T reference outlives the CircularBuffer. It is the CircularBuffer reference that outlives the CBIterator. So I was looking for a nicer way to express exactly that."}], "answers": [{"comments": [{"owner": {"reputation": 361, "user_id": 4890331, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-IHI95-UokOs/AAAAAAAAAAI/AAAAAAAAACY/EfPJ_paD388/photo.jpg?sz=128", "display_name": "David Beck", "link": "https://stackoverflow.com/users/4890331/david-beck"}, "edited": false, "score": 0, "creation_date": 1461041116, "post_id": 36705962, "comment_id": 61004813, "body": "This clarifies a lot, thank you very much! I really like the slice idea. I will experiment with it. I believe that is the closest to what I wanted to achieve."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1461021881, "creation_date": 1461021881, "answer_id": 36705962, "question_id": 36704115, "link": "https://stackoverflow.com/questions/36704115/how-to-express-lifetime-for-rust-iterator-for-a-container/36705962#36705962", "title": "How to express lifetime for Rust iterator for a container", "body": "<blockquote>\n  <p>why do I need to add the <code>'a</code> lifetime to <code>T</code></p>\n</blockquote>\n\n<p>You aren't adding a lifetime to <code>T</code>; you are saying that whatever <code>T</code> is chosen, it can only <strong>contain</strong> references that outlive <code>'a</code>. If that wasn't the case, then we might have a reference to a type that has a reference that is now invalid. Using that invalid reference would lead to memory unsafety; a key thing that Rust seeks to avoid. </p>\n\n<hr>\n\n<p><em>I originally thought you were asking how to remove the <code>Copy</code> bound, so here's all that I typed up.</em></p>\n\n<p>One change would be to remove the <code>Copy</code> bound from <code>CircularBuffer</code> but leaving it on the implementation of the methods. Then you don't need it on the iterator at all:</p>\n\n<pre><code>struct CircularBuffer&lt;T&gt; {\n    seqno: usize,\n    data: Vec&lt;T&gt;,\n}\n\nstruct CircularBufferIterator&lt;'a, T: 'a&gt; {\n    buffer: &amp;'a CircularBuffer&lt;T&gt;,\n    position: usize,\n    limit: usize,\n}\n</code></pre>\n\n<p>Another change would be to completely eschew the direct reference to the <code>CircularBuffer</code> altogether, and keep direct iterators into the <code>Vec</code>:</p>\n\n<pre><code>struct CircularBufferIterator&lt;'a, T: 'a&gt; {\n    first: std::slice::Iter&lt;'a, T&gt;,\n    second: Option&lt;std::slice::Iter&lt;'a, T&gt;&gt;,\n}\n</code></pre>\n\n<p>However, looking at the <code>Iterator</code> implementation, I see it returns a <code>T</code>, not a <code>&amp;T</code>, so you ultimately need a type that is <code>Copy</code> or <code>Clone</code>. You'll note that the standard library doesn't require this because it returns a reference to the item in the collection. If you do need a non-reference, that's what <code>into_iter</code> or <a href=\"http://doc.rust-lang.org/std/iter/trait.Iterator.html#method.cloned\" rel=\"nofollow\"><code>Iterator::cloned</code></a> is for.</p>\n"}], "owner": {"reputation": 361, "user_id": 4890331, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-IHI95-UokOs/AAAAAAAAAAI/AAAAAAAAACY/EfPJ_paD388/photo.jpg?sz=128", "display_name": "David Beck", "link": "https://stackoverflow.com/users/4890331/david-beck"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 438, "favorite_count": 0, "accepted_answer_id": 36705962, "answer_count": 1, "score": 2, "last_activity_date": 1461021881, "creation_date": 1461012877, "last_edit_date": 1461021433, "question_id": 36704115, "link": "https://stackoverflow.com/questions/36704115/how-to-express-lifetime-for-rust-iterator-for-a-container", "title": "How to express lifetime for Rust iterator for a container", "body": "<p>I have a circular buffer like this:</p>\n\n<pre><code>struct CircularBuffer&lt;T: Copy&gt; {\n    seqno: usize,\n    data: Vec&lt;T&gt;,\n}\n</code></pre>\n\n<p>And I want to create an external struct being an iterator. This struct would refer to the internal data vector of the <code>CircularBuffer</code> like this one:</p>\n\n<pre><code>struct CircularBufferIterator&lt;'a, T: 'a + Copy&gt; {\n    buffer: &amp;'a CircularBuffer&lt;T&gt;,\n    position: usize,\n    limit: usize,\n}\n</code></pre>\n\n<p>This is the best I could come up with that actually compiles. Can you please suggest a better way to express that the <code>CircularBufferIterator</code> depends on the <code>CircularBuffer</code> object?</p>\n\n<p>What troubles me is <code>T: 'a + Copy</code>. I wonder if it is possible or it makes sense to say that not the <code>T</code> type, but <code>CircularBuffer&lt;T&gt;</code> is the one <code>CircularBufferIterator</code> depends on.</p>\n\n<p>The part I don't see is why do I need to add the <code>'a</code> lifetime to <code>T</code>. Cannot that be <code>T: Copy</code>, without a lifetime? In other words, I cannot see a case when <code>T</code> reference outlives the <code>CircularBuffer</code>. It is the <code>CircularBuffer</code> reference that outlives the <code>CircularBufferIterator</code>.</p>\n\n<p>The <code>CircularBuffer</code> and the context comes from <a href=\"http://dbeck.github.io/Learning-Rust-Iterator/\" rel=\"nofollow\">this blog post</a>.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "edited": false, "score": 0, "creation_date": 1461013527, "post_id": 36703997, "comment_id": 60996484, "body": "Thanks for your answer, I really doubt arises for this in thread::spwan -&gt; <i>Panics if the OS fails to create a thread; use Builder::spawn to recover from such errors.</i> I do not know if this will happen, or not so wondered whether it was better to always use Builder. Thanks for your time."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "edited": false, "score": 1, "creation_date": 1461013785, "post_id": 36703997, "comment_id": 60996624, "body": "@AngelAngel it depends; how do you plan on handling the failure? If you have something that makes more sense than panicking, then sure, use <code>Builder</code>."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1461013710, "last_edit_date": 1461013710, "creation_date": 1461012421, "answer_id": 36703997, "question_id": 36703806, "link": "https://stackoverflow.com/questions/36703806/when-should-i-use-stdthreadbuilder-instead-of-stdthreadspawn/36703997#36703997", "title": "When should I use std::thread::Builder instead of std::thread::spawn?", "body": "<p>The <a href=\"http://doc.rust-lang.org/std/thread/struct.Builder.html\" rel=\"noreferrer\">documentation for <code>thread::Builder</code></a> answers all of your questions by listing all the functions and types that don't directly correspond to <code>thread::spawn</code>:</p>\n\n<blockquote>\n<pre><code>fn name(self, name: String) -&gt; Builder\n</code></pre>\n  \n  <p>Names the thread-to-be. Currently the name is used for identification\n  only in panic messages.</p>\n\n<pre><code>fn stack_size(self, size: usize) -&gt; Builder\n</code></pre>\n  \n  <p>Sets the size of the stack for the new thread.</p>\n\n<pre><code>fn spawn&lt;F, T&gt;(self, f: F) -&gt; Result&lt;JoinHandle&lt;T&gt;&gt;\n    where F: FnOnce() -&gt; T,\n          F: Send + 'static,\n          T: Send + 'static\n</code></pre>\n  \n  <p>...</p>\n  \n  <p>Unlike the spawn free function, this method yields an <code>io::Result</code> to\n  capture any failure to create the thread at the OS level.</p>\n</blockquote>\n\n<p>So a <code>thread::Builder</code> allows you to:</p>\n\n<ol>\n<li>Set a thread name.</li>\n<li>Set the stack size.</li>\n<li>Handle an error to start the thread.</li>\n</ol>\n\n<p>Use <code>thread::spawn</code> when you don't care about any of those.</p>\n"}], "owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 562, "favorite_count": 0, "accepted_answer_id": 36703997, "answer_count": 1, "score": 6, "last_activity_date": 1461013710, "creation_date": 1461011732, "last_edit_date": 1461012213, "question_id": 36703806, "link": "https://stackoverflow.com/questions/36703806/when-should-i-use-stdthreadbuilder-instead-of-stdthreadspawn", "title": "When should I use std::thread::Builder instead of std::thread::spawn?", "body": "<p>After reading these <a href=\"https://doc.rust-lang.org/std/thread/struct.Builder.html\" rel=\"noreferrer\"><code>std::thread::Builder</code></a> and <a href=\"https://doc.rust-lang.org/std/thread/fn.spawn.html\" rel=\"noreferrer\"><code>std::thread::spawn</code></a> I understand their differences (more or less), but is it recommended to use always <a href=\"https://doc.rust-lang.org/std/thread/struct.Builder.html\" rel=\"noreferrer\"><code>std::thread::Builder</code></a>?. </p>\n\n<p>I do not understand why there are two; can someone explain to me when is best to use one or the other? Perhaps one or the other cannot or should not be used in some cases?</p>\n\n<hr>\n\n<pre><code>let child: std::thread::JoinHandle&lt;()&gt; = std::thread::spawn(move || {\n      for a in 0..100{\n        println!(\"D\");   \n        std::thread::sleep(std::time::Duration::from_millis(50));\n    }\n});\n\nchild.join();\n</code></pre>\n\n<hr>\n\n<pre><code>let child: Result&lt;std::thread::JoinHandle&lt;()&gt;,_&gt; = std::thread::Builder::new().name(\"child1\".to_string()).spawn(move || {\n    for a in 0..100{\n        println!(\"D\");   \n        std::thread::sleep(std::time::Duration::from_millis(50));\n    }\n});\n\nchild.unwrap().join();\n</code></pre>\n"}, {"tags": ["rust", "nickel"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1460985243, "post_id": 36694984, "comment_id": 60978206, "body": "Do you understand what the error message is and means, and just need help overcoming it?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1460985650, "post_id": 36694984, "comment_id": 60978500, "body": "Side note, you don&#39;t need to specify the type of the vector; <code>let mut out = Vec::new()</code> is enough. Even better: <code>let out: Vec&lt;_&gt; = iter.map(|comment| comment.unwrap()).collect()</code>"}, {"owner": {"reputation": 307, "user_id": 2659047, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/a75a1eac5f3c9c7baf26e98fa07d051b?s=128&d=identicon&r=PG", "display_name": "Mike Nishizawa", "link": "https://stackoverflow.com/users/2659047/mike-nishizawa"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1460997392, "post_id": 36694984, "comment_id": 60987047, "body": "I need help overcoming it.  I think I understand why it is doing it.  I&#39;m assuming it&#39;s because I have created the instance and then tried to use it in a closure and that variable is probably destroyed once my main function completes.   I&#39;m really trying to just store some data to test the round trip.  In Java I might have created a static Map or some other data structure to just hold the data, I don&#39;t really need a database.  But I couldn&#39;t figure out how to do the other so I thought I would try a simple in memory database."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1461001731, "last_edit_date": 1495542798, "creation_date": 1461001731, "answer_id": 36700936, "question_id": 36694984, "link": "https://stackoverflow.com/questions/36694984/how-to-create-a-nickel-handler-that-uses-a-database-connection/36700936#36700936", "title": "How to create a Nickel handler that uses a database connection?", "body": "<p>Here's an <a href=\"/help/mcve\">MCVE</a> that reproduces the problem (you should provide these when asking questions):</p>\n\n<pre><code>extern crate rusqlite;\n#[macro_use]\nextern crate nickel;\n\nuse nickel::{Nickel, HttpRouter};\nuse rusqlite::Connection;\n\nfn main() {\n    let mut server = Nickel::new();\n    let conn = Connection::open_in_memory().unwrap();\n\n    server.get(\"/comments\", middleware! {\n        let _stmt = conn.prepare(\"SELECT * FROM comment\").unwrap();\n        \"\"\n    });\n\n    server.listen(\"127.0.0.1:6767\");\n}\n</code></pre>\n\n<p>The <a href=\"http://doc.rust-lang.org/std/marker/trait.Sync.html\" rel=\"nofollow noreferrer\"><code>Sync</code> trait says</a>:</p>\n\n<blockquote>\n  <p>Types that are not <code>Sync</code> are those that have \"interior mutability\" in a non-thread-safe way, such as <code>Cell</code> and <code>RefCell</code></p>\n</blockquote>\n\n<p>Which matches with the error message you get. Something inside the <code>Connection</code> has interior mutability which means that the compiler cannot automatically guarantee that sharing it across threads is safe. I had a <a href=\"https://stackoverflow.com/q/36649865/155423\">recent question</a> that <em>might</em> be useful to the implementor of <code>Connection</code>, if they can guarantee it's safe to share (perhaps SQLite itself makes guarantees).</p>\n\n<p>The simplest thing you can do is to ensure that only one thread has access to the database object at a time:</p>\n\n<pre><code>use std::sync::Mutex;\n\nfn main() {\n    let mut server = Nickel::new();\n    let conn = Mutex::new(Connection::open_in_memory().unwrap());\n\n    server.get(\"/comments\", middleware! {\n        let conn = conn.lock().unwrap();\n        let _stmt = conn.prepare(\"SELECT * FROM comment\").unwrap();\n        \"\"\n    });\n\n    server.listen(\"127.0.0.1:6767\");\n}\n</code></pre>\n"}], "owner": {"reputation": 307, "user_id": 2659047, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/a75a1eac5f3c9c7baf26e98fa07d051b?s=128&d=identicon&r=PG", "display_name": "Mike Nishizawa", "link": "https://stackoverflow.com/users/2659047/mike-nishizawa"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 303, "favorite_count": 0, "accepted_answer_id": 36700936, "answer_count": 1, "score": 2, "last_activity_date": 1476828404, "creation_date": 1460985051, "last_edit_date": 1476828404, "question_id": 36694984, "link": "https://stackoverflow.com/questions/36694984/how-to-create-a-nickel-handler-that-uses-a-database-connection", "title": "How to create a Nickel handler that uses a database connection?", "body": "<p>I'm trying to do a simple extension to the comments example by creating a REST API and committing the post to the database.  I'm creating the connection outside the scope of the handler itself which I'm assuming is where my problem lies.  I'm just not sure how to fix it.</p>\n\n<p>This is the code for the post handler:</p>\n\n<pre><code>server.get(\"/comments\", middleware! {\n    let mut stmt = conn.prepare(\"SELECT * FROM comment\").unwrap();\n    let mut iter = stmt.query_map(&amp;[], |row| {\n        Comment { id: row.get(0), author: row.get(1), text: row.get(2) }\n    }).unwrap();\n\n    let mut out: Vec&lt;Comment&gt; = Vec::new();\n    for comment in iter {\n        out.push(comment.unwrap());\n    }\n\n    json::encode(&amp;out).unwrap() \n});\n</code></pre>\n\n<p>This is the error I get:</p>\n\n<pre><code>&lt;nickel macros&gt;:22:50: 22:66 error: the trait `core::marker::Sync` is not implemented for the type `core::cell::UnsafeCell&lt;rusqlite::InnerConnection&gt;` [E0277]\n</code></pre>\n\n<p>I assume the error is because I have created the instance and then tried to use it in a closure and that variable is probably destroyed once my main function completes.</p>\n"}, {"tags": ["c++", "floating-point", "rust", "rounding", "computation"], "comments": [{"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1460924047, "post_id": 36681157, "comment_id": 60953149, "body": "The representation is in binary, so it&#39;s not that simple. Your C++ program shows a difference in the last digit for the two rounding modes, so it seems to be working."}, {"owner": {"reputation": 659, "user_id": 1886200, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/3c2cfc7d5826f8d4a2b0b941ac461324?s=128&d=identicon&r=PG", "display_name": "Houss_gc", "link": "https://stackoverflow.com/users/1886200/houss-gc"}, "reply_to_user": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1460924817, "post_id": 36681157, "comment_id": 60953407, "body": "for me the output of the c++ program is : 0.1000000....006 for both representations. I understand that the floating point representation due to its limitation can represent only a subset of real numbers, normally 1/3 in real is 0.33333...etc. to be represented in floating point need to round it, when i set the rounding toward +inf i expect to get 0.333334."}, {"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1460929024, "post_id": 36681157, "comment_id": 60954738, "body": "I get <code>0.100000000000000006</code> and <code>0.100000000000000005</code> for one tenth, and <code>0.333333333333333315</code> and <code>0.333333333333333314</code> for one third."}, {"owner": {"reputation": 659, "user_id": 1886200, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/3c2cfc7d5826f8d4a2b0b941ac461324?s=128&d=identicon&r=PG", "display_name": "Houss_gc", "link": "https://stackoverflow.com/users/1886200/houss-gc"}, "reply_to_user": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1460964099, "post_id": 36681157, "comment_id": 60964051, "body": "I don&#39;t get the the same results on my desktop computer (windows 10 i7 4790 (from memory)), for 1/3 i get  0.333333333333333315 for both upward and downward, and for 1/10 i get 0.100000000000000006 for both rounding direction. Maybe it is platform dependent."}, {"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1461009984, "post_id": 36681157, "comment_id": 60994393, "body": "<code>g++ (Debian 4.9.2-10) 4.9.2</code> here."}, {"owner": {"reputation": 659, "user_id": 1886200, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/3c2cfc7d5826f8d4a2b0b941ac461324?s=128&d=identicon&r=PG", "display_name": "Houss_gc", "link": "https://stackoverflow.com/users/1886200/houss-gc"}, "reply_to_user": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1461056048, "post_id": 36681157, "comment_id": 61012814, "body": "It worked for me when I used the <a href=\"http://systemmanager.ru/svcsunix.en/extfile/sir/_controlfp.htm\" rel=\"nofollow noreferrer\"><code>_controlfp(mask,rounding)</code></a> function from the <code>float.h</code> file."}, {"owner": {"reputation": 659, "user_id": 1886200, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/3c2cfc7d5826f8d4a2b0b941ac461324?s=128&d=identicon&r=PG", "display_name": "Houss_gc", "link": "https://stackoverflow.com/users/1886200/houss-gc"}, "reply_to_user": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1461056669, "post_id": 36681157, "comment_id": 61013295, "body": "gcc 5.3.0 clang 3.8 rust 1.10 nightly"}], "answers": [{"comments": [{"owner": {"reputation": 659, "user_id": 1886200, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/3c2cfc7d5826f8d4a2b0b941ac461324?s=128&d=identicon&r=PG", "display_name": "Houss_gc", "link": "https://stackoverflow.com/users/1886200/houss-gc"}, "edited": false, "score": 0, "creation_date": 1460986141, "post_id": 36695265, "comment_id": 60978871, "body": "Thank you for the detailed explanation. If the <code>#pragma STDC FENV_ACCESS</code> is off how could I set the rounding mode at compile time?."}, {"owner": {"reputation": 159118, "user_id": 15416, "user_type": "registered", "accept_rate": 63, "profile_image": "https://www.gravatar.com/avatar/a2b11b9662b5155aada74191fbe7cb9e?s=128&d=identicon&r=PG", "display_name": "MSalters", "link": "https://stackoverflow.com/users/15416/msalters"}, "reply_to_user": {"reputation": 659, "user_id": 1886200, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/3c2cfc7d5826f8d4a2b0b941ac461324?s=128&d=identicon&r=PG", "display_name": "Houss_gc", "link": "https://stackoverflow.com/users/1886200/houss-gc"}, "edited": false, "score": 0, "creation_date": 1460986506, "post_id": 36695265, "comment_id": 60979146, "body": "@Houss_gc: No idea; you I don&#39;t know which compiler you have. Check your manual."}, {"owner": {"reputation": 659, "user_id": 1886200, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/3c2cfc7d5826f8d4a2b0b941ac461324?s=128&d=identicon&r=PG", "display_name": "Houss_gc", "link": "https://stackoverflow.com/users/1886200/houss-gc"}, "edited": false, "score": 0, "creation_date": 1460986613, "post_id": 36695265, "comment_id": 60979216, "body": "Ok (sorry for that dumb question :p ) actually I am using gcc 5.3.0, clang 3.8 (both under Msys2) and Rust 1.10 nightly. I will check the manual of those and see what i can do, thank you again."}, {"owner": {"reputation": 159118, "user_id": 15416, "user_type": "registered", "accept_rate": 63, "profile_image": "https://www.gravatar.com/avatar/a2b11b9662b5155aada74191fbe7cb9e?s=128&d=identicon&r=PG", "display_name": "MSalters", "link": "https://stackoverflow.com/users/15416/msalters"}, "reply_to_user": {"reputation": 659, "user_id": 1886200, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/3c2cfc7d5826f8d4a2b0b941ac461324?s=128&d=identicon&r=PG", "display_name": "Houss_gc", "link": "https://stackoverflow.com/users/1886200/houss-gc"}, "edited": false, "score": 0, "creation_date": 1460994562, "post_id": 36695265, "comment_id": 60985310, "body": "@Houss_gc: There&#39;s a remarkable lack of magic in computers. The numerical code that performs the rounding is compiled by either gcc, clang or Rust, and you presumably know which."}], "tags": [], "owner": {"reputation": 159118, "user_id": 15416, "user_type": "registered", "accept_rate": 63, "profile_image": "https://www.gravatar.com/avatar/a2b11b9662b5155aada74191fbe7cb9e?s=128&d=identicon&r=PG", "display_name": "MSalters", "link": "https://stackoverflow.com/users/15416/msalters"}, "is_accepted": true, "score": 3, "last_activity_date": 1460985768, "creation_date": 1460985768, "answer_id": 36695265, "question_id": 36681157, "link": "https://stackoverflow.com/questions/36681157/setting-fpu-rounding-direction-from-rust-and-c-changes-nothing/36695265#36695265", "title": "Setting FPU rounding direction from Rust and C++ changes nothing", "body": "<p>Starblue's comment is right, but let me expand it.</p>\n\n<p>\"Rounding\" means approximating a real number by a finite set of digits, in some unspecified base. Your example 1/3 = 0.333333 assumes rounding to 6 <em>decimal</em> digits, i.e. base 10. </p>\n\n<p>Computers work in base 2, however. Binary 1/11 is <code>.1010101010101...</code> As you can see, rounding this is a bit peculiar. If you round to nearest to 6 bits, it would be <code>.101011</code> and if you round it to 7 bits it's <code>.1010100</code> - the last bit is always the same as the penultimate bit, and that's because the bits alternate.</p>\n\n<p>Round up and round down is simpler, of course. Rounding <code>.10101010...</code> down simply truncates the result to N bits: <code>0.101010</code>. And rounding up merely adds 1 to the last bit.</p>\n\n<p>Now you do the rounding in binary, but you print the result in decimal. That means that these patterns aren't obvious at all.</p>\n\n<p>Here's where things get complicated\": Rounding is needed almost everywhere in FP functions, so it should be fast. That means you'd want the rounding mode compiled in. But you can't recompile your code on every call to <code>fesetround</code>. That means a compromise is needed, and the compromise is <a href=\"http://en.cppreference.com/w/cpp/numeric/fenv\" rel=\"nofollow\"><code>#pragma STDC FENV_ACCESS</code></a>. If it's <code>ON</code>, you get the slow code and <code>fesetround</code> works. If it's off (the default), <code>fesetround</code> has <strong>unspecified</strong> results.</p>\n"}], "owner": {"reputation": 659, "user_id": 1886200, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/3c2cfc7d5826f8d4a2b0b941ac461324?s=128&d=identicon&r=PG", "display_name": "Houss_gc", "link": "https://stackoverflow.com/users/1886200/houss-gc"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 362, "favorite_count": 0, "accepted_answer_id": 36695265, "answer_count": 1, "score": 2, "last_activity_date": 1460985768, "creation_date": 1460921158, "last_edit_date": 1460984001, "question_id": 36681157, "link": "https://stackoverflow.com/questions/36681157/setting-fpu-rounding-direction-from-rust-and-c-changes-nothing", "title": "Setting FPU rounding direction from Rust and C++ changes nothing", "body": "<p>In my understanding, setting the rounding direction toward <code>+Inf</code> will yield <code>0.333334</code> when evaluating 1/3, and <code>0.33333</code> when setting it toward <code>-Inf</code>.</p>\n\n<p>That is not the case when I tried in C++ using <code>fesetround(0x400)</code> and <code>fesetround(0x800)</code>. I get the same behavior in Rust using FFI to call <code>fsetround</code> from C.</p>\n\n<p>C++ code:</p>\n\n<pre><code>#include &lt;cfenv&gt;\n#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\n\nusing namespace std;\n\nint main() {\n    double ratio = (double)1/(double)10;\n    fesetround(FE_UPWARD);\n    cout &lt;&lt; fegetround() &lt;&lt; \" upward \" &lt;&lt; setprecision(18) &lt;&lt;  ratio &lt;&lt; std::endl;\n    fesetround(FE_DOWNWARD);\n    cout &lt;&lt; fegetround() &lt;&lt; \" downward \" &lt;&lt; setprecision(18) &lt;&lt; ratio &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n\n<p>(<a href=\"http://pastebin.com/WQjHwaVx\" rel=\"nofollow\">Pastebin</a>)</p>\n\n<p>Rust code:</p>\n\n<pre><code>extern crate libc;\n\nuse libc::c_int;\n\n#[link(name = \"rounding\")]\nextern {\n    pub static fe_upward: c_int;\n    pub static fe_downward: c_int;\n    fn fesetround(rount: c_int) -&gt; c_int;\n    fn fegetround() -&gt; c_int;\n}\n\npub fn upward_round() -&gt; i64 {\n    unsafe {\n        fesetround(fe_upward);\n        fegetround() as i64\n    }\n}\n\npub fn downward_round() -&gt; i64 {\n    unsafe {\n        fesetround(fe_downward);\n        fegetround() as i64\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n    #[test]\n    fn test_upward() {\n        unsafe {\n            assert_eq!(fe_upward as i64, upward_round());\n        }\n    }\n    #[test]\n    fn test_downward() {\n        unsafe {\n            assert_eq!(fe_downward as i64, downward_round());\n        }\n    }\n}\n</code></pre>\n\n<p>(<a href=\"http://pastebin.com/zRvARfUE\" rel=\"nofollow\">Pastebin</a>)</p>\n"}, {"tags": ["memory", "hashmap", "rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1460898769, "post_id": 36676726, "comment_id": 60943876, "body": "I am afraid I did not understand what you were attempting to do (I can see you thought quite a lot about it, but unfortunately your attempts at solution clutter the explanation somewhat). Would it possible to show an example of what you want to do using an array of key-values and a few &quot;rounds&quot; of the loop? Are you trying to <i>modify</i> the keys?"}, {"owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 0, "creation_date": 1460898769, "post_id": 36676726, "comment_id": 60943877, "body": "Re #2: Rust Nightly includes an unstable <code>key</code> method on <code>OccupiedEntry</code>: <a href=\"https://doc.rust-lang.org/nightly/std/collections/hash_map/struct.OccupiedEntry.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/nightly/std/collections/hash_map/&hellip;</a>"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 0, "creation_date": 1460898853, "post_id": 36676726, "comment_id": 60943909, "body": "@Dogbert: Beware. I am afraid that Fuine is attempting to modify the keys, which would be a very bad idea..."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1460904002, "post_id": 36676726, "comment_id": 60945705, "body": "Is there a reason you do not have a hashmap <code>{ &quot;AB&quot; =&gt; val0, &quot;BC&quot; =&gt; val1, ...}</code> and instead use this vector look-aside?"}, {"owner": {"reputation": 39, "user_id": 6215906, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e89319ef02e4f59d8675b22e1d7c39ed?s=128&d=identicon&r=PG&f=1", "display_name": "Fuine", "link": "https://stackoverflow.com/users/6215906/fuine"}, "edited": false, "score": 0, "creation_date": 1460904731, "post_id": 36676726, "comment_id": 60945966, "body": "I reuse the keys quite a lot in the value structs, and as i mentioned above keeping an int yields smaller memory overheads than keeping and reusing a window of size 50-100 (that&#39;s roughly 50 + 24 bytes per one key usage as opposed to 8 bytes for usize on 64 bit machine (or 16 if i would go with Rc + idx struct). The solution should really scale up."}, {"owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "edited": false, "score": 0, "creation_date": 1460907162, "post_id": 36676726, "comment_id": 60946864, "body": "How about additional <code>HashMap&lt;u64, usize&gt;</code>, where <code>key</code> is just a subsring hash of some kind, and value is the index in <code>vec</code>?"}, {"owner": {"reputation": 39, "user_id": 6215906, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e89319ef02e4f59d8675b22e1d7c39ed?s=128&d=identicon&r=PG&f=1", "display_name": "Fuine", "link": "https://stackoverflow.com/users/6215906/fuine"}, "reply_to_user": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "edited": false, "score": 0, "creation_date": 1460916805, "post_id": 36676726, "comment_id": 60950396, "body": "@swizard It is an option, but it requires 2 lookups for each window and it has an overhead of roughly 24 bytes per window (calculated_hash + hash_hashmap + idx). I might consider it, although i think that it&#39;s worse than Rc + idx as key struct. I know I&#39;m being very picky, but this problem requires really well-thought solution."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1460985037, "post_id": 36676726, "comment_id": 60978055, "body": "<a href=\"http://meta.stackexchange.com/q/39223/281829\">One question per question</a>, please."}], "owner": {"reputation": 39, "user_id": 6215906, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e89319ef02e4f59d8675b22e1d7c39ed?s=128&d=identicon&r=PG&f=1", "display_name": "Fuine", "link": "https://stackoverflow.com/users/6215906/fuine"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 1391, "favorite_count": 0, "answer_count": 0, "score": 1, "last_activity_date": 1460985011, "creation_date": 1460897416, "last_edit_date": 1460985011, "question_id": 36676726, "link": "https://stackoverflow.com/questions/36676726/lowering-memory-usage-in-hashmap-in-rust", "title": "Lowering memory usage in HashMap in Rust", "body": "<p>I'm trying to parse a very long file by using a fixed-size sliding window over it. For each such window I'd like to either insert it to a <code>HashMap</code> as the key with custom struct as value, or modify existing value for the window. My main problem is memory usage, since it should scale into very large quantities (up to several billions of distinct windows) and I want to reuse existing keys.</p>\n\n<p>I would like to append windows (or more specifically bytes) to a vector and use the index as a key in the <code>HashMap</code>, but use the window under index for hash computation and key comparison. Because windows are overlapping, I will append only the part of the window which is new (if I have an input AAAB and size 3 I would have 2 windows: AAA and AAB, but would only store 4 bytes - AAAB; windows would have indices 0 and 1 respectively), which is the reason behind not keying the HM with window itself. </p>\n\n<p>Here's the simplified pseudo-code, in which I omitted the minimal-input problem:</p>\n\n<pre><code>let file =  // content of the file on which i can call windows()\nlet vec = Rc::new(RefCell::new(Vec::new()));  // RefCell allows me to store Rc in the hashmap while mutating the underlying vector\nlet hm: HashMap&lt;KeyStruct, ValueStruct&gt; = HashMap::new();\nfor i in file.windows(FIXED_SIZE) {\n    let idx = vec.len();\n    vec.borrow_mut().push(i);\n    if hm.contains_key(KeyStruct::new(idx)) {\n        // get the key associated with i\n        // modify the value associated with i\n        // do something with the key\n        vec.borrow_mut().pop();  // window is already in the vector\n    }\n    else {\n        hm.insert(KeyStruct::new(idx), ValueStruct::new(...));\n    }\n}\n</code></pre>\n\n<p>I have came up with 2 different approaches: either modifying the existing <code>HashMap</code> implementation so that it works as intended, or using a custom struct as key to the <code>HashMap</code>. Since I would only use one vector in order to store windows, I could store a <code>Rc</code> to it in the <code>HashMap</code> and then use that for lookups.</p>\n\n<p>I could also create a struct which would hold both a <code>Rc</code> and index, using it as a key to the <code>HashMap</code>. The latter solution works with a vanilla <code>HashMap</code>, but stores a lot of redundant <code>Rc</code>s to the same vector. I also thought about storing a static pointer to <code>Rc</code> and then get <code>Rc</code> in <code>unsafe</code> blocks, but I would have to guarantee that the position of the <code>Rc</code> on the stack never changes and I'm not sure if I can guarantee that.</p>\n\n<p>I tried to implement the first approach (custom <code>HashMap</code>), but it turns out that <code>Bucket</code>s use a lot of features which are gated, and I can't compile the project using the stable compiler.</p>\n\n<p>What's even worse is that I would like to get the key that is already in the <code>HashMap</code> on a successful lookup (because different indices can store the same window, for which the <code>hash</code>/<code>cmp</code> would be identical) and use it inside the value structure. I couldn't find a way to do this using the provided API for <code>HashMap</code> - the closest I get is by using <code>entry()</code>, which can contain an <code>OccupiedEntry</code>, but it doesn't have any way to retrieve the key, and there's no way to get it by unsafe memory lookups, because documentation on <code>repr()</code> says that the order in structs is not guaranteed in the default representation. I can store the key (or only the index) in the value struct, but that adds yet another <code>size_of::&lt;usize&gt;()</code> bytes per entry, only to store the index/key in a reachable manner, which is kept with that entry either way.</p>\n\n<p>My questions are:</p>\n\n<ul>\n<li>Is it possible to compile/reuse parts of std::collections which are not pub, such that I could modify few methods of <code>HashMap</code> and compile the whole project?</li>\n<li>Is there any way of getting the key after successful lookup in the <code>HashMap</code>? (I even <a href=\"https://github.com/rust-lang/rfcs/pull/1194#issuecomment-130482818\" rel=\"nofollow\">found out</a> that libs team decided against implementing method over <code>Entry</code> which would allow me to get the key...)</li>\n<li>Can you see any alternative to solutions that I mentioned?</li>\n</ul>\n\n<p><strong>EDIT</strong></p>\n\n<p>To clarify the problem let's consider a simple example - input ABABCBACBC and window size of 2.  <em>We should give index as a key to the <code>HashMap</code>, and it should get the window-size number of bytes as window starting from that index: with vector [A, A, C], index 1 and window-size 2 <code>HashMap</code> should try to find a hash/key for AC.</em></p>\n\n<p>We get windows like this:</p>\n\n<pre><code>AB -&gt; BA -&gt; AB -&gt; BC -&gt; CB -&gt; BA -&gt; AC -&gt; CB -&gt; BC\n</code></pre>\n\n<p>First pair is AB, we append it into the empty vector and give it an index of 0.</p>\n\n<pre><code>vec = [A, B]\nhm = [(0, val)]\n</code></pre>\n\n<p>The next pair is BA:</p>\n\n<ol>\n<li>start with vec = [A, B]</li>\n<li>using algorithm not shown here, I know that I have a common part between last inserted window (AB) and current window (BA), namely B</li>\n<li>append part of the window to the existing vector, so we have vec = [A, B, A]</li>\n<li>perform a lookup using index 1 as the index of window</li>\n<li>it has not been found so the new key, val is inserted to <code>HashMap</code></li>\n</ol>\n\n<p>vec = [A, B, A]\nhm = [(0, val0), (1, val1)]</p>\n\n<p>Next up is window AB:</p>\n\n<ol>\n<li>once again we have a common part - A</li>\n<li>append: vec = [A, B, A, B]</li>\n<li>lookup using index 2</li>\n<li>it is successful, so I should delete the newly inserted part of window and get the index of the window inside vector - in this case 0</li>\n<li><p>modify value, do something with the key etc...</p>\n\n<p>vec = [A, B, A]\nhm = [(0, val0_modified), (1, val1)]</p></li>\n</ol>\n\n<p>After looping over this input i should end up with:</p>\n\n<pre><code>vec = [A, B, A, B, C, B, A, C]\n</code></pre>\n\n<p>and indices for pairs could be represented as: [(AB, 0), (BA, 1), (BC, 3), (CB, 4), (AC, 6)]</p>\n\n<p>I <strong>do not</strong> want to modify keys. I also don't want to modify the vector with the exception of pushing/popping the window during lookup/insertion.</p>\n\n<p>Sidenote: even though I still have redundant information in this particular example after putting everything into vector, it won't be the case while working with the original data.</p>\n"}, {"tags": ["iterator", "rust"], "comments": [{"owner": {"reputation": 240669, "user_id": 224132, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/N4ivW.png?s=128&g=1", "display_name": "Peter Cordes", "link": "https://stackoverflow.com/users/224132/peter-cordes"}, "edited": false, "score": 1, "creation_date": 1460875482, "post_id": 36672845, "comment_id": 60937574, "body": "<a href=\"https://doc.rust-lang.org/book/iterators.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/book/iterators.html</a> says some stuff about <code>for x in &amp;v</code> vs. <code>for x in v.iter()</code>, which is also valid.  I don&#39;t know Rust (yet) so I can&#39;t actually explain or summarize it, though!"}], "answers": [{"comments": [{"owner": {"reputation": 124, "user_id": 10626823, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5f7904500a04ad0a46f74bf608d9426e?s=128&d=identicon&r=PG&f=1", "display_name": "Binou", "link": "https://stackoverflow.com/users/10626823/binou"}, "edited": false, "score": 0, "creation_date": 1608097299, "post_id": 36673695, "comment_id": 115475429, "body": "is there a reason to prefer doing <code>for foo in vec</code> rather than <code>for foo in vec.iter()</code>?"}, {"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "reply_to_user": {"reputation": 124, "user_id": 10626823, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5f7904500a04ad0a46f74bf608d9426e?s=128&d=identicon&r=PG&f=1", "display_name": "Binou", "link": "https://stackoverflow.com/users/10626823/binou"}, "edited": false, "score": 2, "creation_date": 1610306710, "post_id": 36673695, "comment_id": 116085408, "body": "That depend on what you are doing, and whether you still need <code>vec</code> after the loop. With <code>for foo in vec</code> each element of the vector is moved into <code>foo</code>, and the code in the loop can move it somewhere else, i.e. reuse it without cloning it, so if the elements are big that will be more efficient. It&#39;s also less to write, so you can always try <code>for foo in vec</code> first, and the borrow checker will remind you if that isn&#39;t OK."}], "tags": [], "owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "is_accepted": true, "score": 47, "last_activity_date": 1565543248, "last_edit_date": 1565543248, "creation_date": 1460877123, "answer_id": 36673695, "question_id": 36672845, "link": "https://stackoverflow.com/questions/36672845/in-rust-is-a-vector-an-iterator/36673695#36673695", "title": "In Rust, is a vector an Iterator?", "body": "<p>No, a vector is not an iterator.</p>\n\n<p>But it implements the trait <a href=\"https://doc.rust-lang.org/std/iter/trait.IntoIterator.html\" rel=\"noreferrer\"><code>IntoIterator</code></a>, which the <code>for</code> loop uses to convert the vector into the required iterator.</p>\n\n<p>In the <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html\" rel=\"noreferrer\">documentation for <code>Vec</code></a> you can see that <code>IntoIterator</code> is implemented in three ways: </p>\n\n<ul>\n<li>for <code>Vec&lt;T&gt;</code>, which is moved and the iterator returns items of type <code>T</code>, </li>\n<li>for a shared reference <code>&amp;Vec&lt;T&gt;</code>, where the iterator returns shared references <code>&amp;T</code>,</li>\n<li>and for <code>&amp;mut Vec&lt;T&gt;</code>, where mutable references are returned.</li>\n</ul>\n\n<p><a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.iter\" rel=\"noreferrer\"><code>iter()</code></a> is just a method in <code>Vec</code> to convert <code>Vec&lt;T&gt;</code> directly into an iterator that returns shared references, without first converting it into a reference. There is a sibling method <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.iter_mut\" rel=\"noreferrer\"><code>iter_mut()</code></a> for producing mutable references.</p>\n"}], "owner": {"reputation": 9369, "user_id": 71079, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/3e302415f77b6c398abc0b16efc653f3?s=128&d=identicon&r=PG", "display_name": "Ralph Caraveo", "link": "https://stackoverflow.com/users/71079/ralph-caraveo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 11645, "favorite_count": 2, "accepted_answer_id": 36673695, "answer_count": 1, "score": 22, "last_activity_date": 1565543248, "creation_date": 1460869112, "last_edit_date": 1517508441, "question_id": 36672845, "link": "https://stackoverflow.com/questions/36672845/in-rust-is-a-vector-an-iterator", "title": "In Rust, is a vector an Iterator?", "body": "<p>Is it accurate to state that a vector (among other collection types) is an <code>Iterator</code>?</p>\n\n<p>For example, I can loop over a vector in the following way, because it implements the <code>Iterator</code> trait (as I understand it):</p>\n\n<pre><code>let v = vec![1, 2, 3, 4, 5];\n\nfor x in &amp;v {\n    println!(\"{}\", x);\n}\n</code></pre>\n\n<p>However, if I want to use functions that are part of the <code>Iterator</code> trait (such as <code>fold</code>, <code>map</code> or <code>filter</code>) why must I first call <code>iter()</code> on that vector?</p>\n\n<p>Another thought I had was maybe that a vector can be converted into an <code>Iterator</code>, and, in that case, the syntax above makes more sense.</p>\n"}, {"tags": ["rust", "borrowing"], "comments": [{"owner": {"reputation": 31241, "user_id": 242493, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/8893e2e206c0377ff776d2535887d23f?s=128&d=identicon&r=PG", "display_name": "Jimmy Cuadra", "link": "https://stackoverflow.com/users/242493/jimmy-cuadra"}, "edited": false, "score": 0, "creation_date": 1460879238, "post_id": 36672245, "comment_id": 60938447, "body": "Did you mean to paste two different examples of your match block? They look the same to me."}, {"owner": {"reputation": 355, "user_id": 1574106, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b194afd8e8777547fff445a99c918296?s=128&d=identicon&r=PG", "display_name": "Dave Mason", "link": "https://stackoverflow.com/users/1574106/dave-mason"}, "reply_to_user": {"reputation": 31241, "user_id": 242493, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/8893e2e206c0377ff776d2535887d23f?s=128&d=identicon&r=PG", "display_name": "Jimmy Cuadra", "link": "https://stackoverflow.com/users/242493/jimmy-cuadra"}, "edited": false, "score": 1, "creation_date": 1460899685, "post_id": 36672245, "comment_id": 60944198, "body": "the second one assigns to both v1 and v2 on every branch, but have excessive clone operations"}], "answers": [{"comments": [{"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 1, "creation_date": 1460891960, "post_id": 36675652, "comment_id": 60941788, "body": "There is also no need for all those <code>clone</code>s thanks to the <code>drain</code>ed iterators."}], "tags": [], "owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "is_accepted": true, "score": 1, "last_activity_date": 1460983848, "last_edit_date": 1460983848, "creation_date": 1460890876, "answer_id": 36675652, "question_id": 36672245, "link": "https://stackoverflow.com/questions/36672245/use-of-moved-value-when-matching-while-merging-two-vectors/36675652#36675652", "title": "&quot;use of moved value&quot; when matching while merging two vectors", "body": "<p>Variables <code>v1</code> and <code>v2</code> move out when creating a tuple in the <code>match</code> expression. You need to modify these variables inside the <code>match</code>, so you can`t borrow them. </p>\n\n<p>With <code>Option&lt;T&gt;</code> you can use <a href=\"https://doc.rust-lang.org/core/option/enum.Option.html#method.take\" rel=\"nofollow\"><code>take()</code></a> method:</p>\n\n<pre><code>fn merge(mut l1: Vec&lt;(String, u32)&gt;, mut l2: Vec&lt;(String, u32)&gt;) -&gt; Vec&lt;(String, u32)&gt; {\n    let mut d1 = l1.drain(..);\n    let mut d2 = l2.drain(..);\n    let mut result = Vec::new();\n    let mut v1 = d1.next();\n    let mut v2 = d2.next();\n    loop {\n        match (v1.take(), v2.take()) {//Takes the value out of the option, leaving a None in its place.\n            (None, None) =&gt; return result,\n            (None, Some(x)) =&gt; {\n                result.push(x);\n                v2 = d2.next()\n            }//v1 is None\n            (Some(x), None) =&gt; {\n                result.push(x);\n                v1 = d1.next()\n            }//v2 is None\n            (Some(p1), Some(p2)) =&gt; {\n                use std::cmp::Ordering::{Equal, Less, Greater};\n                match p1.0.cmp(&amp;p2.0) {\n                    Equal =&gt; {\n                        result.push((p1.0, p1.1 + p2.1));\n                        v1 = d1.next();\n                        v2 = d2.next();\n                    }\n                    Less =&gt; {\n                        result.push(p1);\n                        v1 = d1.next();\n                        v2 = Some(p2);\n                    }//restore v2\n                    Greater =&gt; {\n                        result.push(p2);\n                        v1 = Some(p1); //restore v1\n                        v2 = d2.next();\n                    }\n                };\n            }\n        };\n    }\n}\n</code></pre>\n\n<p>I have altered the code of the last branch to avoid unnecessary borrowing.</p>\n\n<hr>\n\n<p>Disadvantage of this approach is that you may forget to assign a new value to a variable. I would recommend to return the values from the <code>match</code> expression:</p>\n\n<pre><code>fn merge(mut l1: Vec&lt;(String, u32)&gt;, mut l2: Vec&lt;(String, u32)&gt;) -&gt; Vec&lt;(String, u32)&gt; {\n    let mut d1 = l1.drain(..);\n    let mut d2 = l2.drain(..);\n    let mut result = Vec::new();\n    let mut v = (d1.next(), d2.next());\n    loop {\n        v = match (v.0.take(), v.1.take()) {\n            (None, None) =&gt; return result,\n            (None, Some(x)) =&gt; {\n                result.push(x);\n                (None, d2.next())\n            }\n            (Some(x), None) =&gt; {\n                result.push(x);\n                (d1.next(), None)\n            }\n            (Some(p1), Some(p2)) =&gt; {\n                use std::cmp::Ordering::{Equal, Less, Greater};\n                match p1.0.cmp(&amp;p2.0) {\n                    Equal =&gt; {\n                        result.push((p1.0, p1.1 + p2.1));\n                        (d1.next(), d2.next())\n                    }\n                    Less =&gt; {\n                        result.push(p1);\n                        (d1.next(), Some(p2))\n                    }\n                    Greater =&gt; {\n                        result.push(p2);\n                        (Some(p1), d2.next())\n                    }\n                }\n            }\n        };\n    }\n}\n</code></pre>\n\n<p>Removed unnecessary <code>clone</code>s as mentioned by @mcarton</p>\n"}], "owner": {"reputation": 355, "user_id": 1574106, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b194afd8e8777547fff445a99c918296?s=128&d=identicon&r=PG", "display_name": "Dave Mason", "link": "https://stackoverflow.com/users/1574106/dave-mason"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 618, "favorite_count": 0, "accepted_answer_id": 36675652, "answer_count": 1, "score": 0, "last_activity_date": 1460983848, "creation_date": 1460862348, "last_edit_date": 1460983800, "question_id": 36672245, "link": "https://stackoverflow.com/questions/36672245/use-of-moved-value-when-matching-while-merging-two-vectors", "title": "&quot;use of moved value&quot; when matching while merging two vectors", "body": "<p>I am writing a merge function for vectors of tags with counts, but am getting borrowing errors.</p>\n\n<pre><code>fn merge(mut l1: Vec&lt;(String, u32)&gt;, mut l2: Vec&lt;(String, u32)&gt;) -&gt; Vec&lt;(String, u32)&gt; {\n    let mut d1 = l1.drain(..);\n    let mut d2 = l2.drain(..);\n    let mut result = Vec::new();\n    let mut v1 = d1.next();\n    let mut v2 = d2.next();\n    loop {\n        match (v1, v2) {\n            (None, None) =&gt; return result,\n            (None, Some(x)) =&gt; {\n                result.push(x.clone());\n                v2 = d2.next()\n            }\n            (Some(x), None) =&gt; {\n                result.push(x.clone());\n                v1 = d1.next()\n            }\n            (Some(p1), Some(p2)) =&gt; {\n                let (ref s1, t1) = p1;\n                let (ref s2, t2) = p2;\n                if s1 == s2 {\n                    result.push((s1.clone(), t1 + t2));\n                    v1 = d1.next();\n                    v2 = d2.next();\n                } else if s1 &lt; s2 {\n                    result.push(p1.clone());\n                    v1 = d1.next();\n                } else {\n                    result.push(p2.clone());\n                    v2 = d2.next();\n                }\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>gives the error:</p>\n\n<pre><code>error: use of moved value: `v1` [E0382]\n         match (v1,v2) {\n                ^~\nhelp: run `rustc --explain E0382` to see a detailed explanation\nnote: `v1` was previously moved here because it has type `core::option::Option&lt;(collections::string::String, u32)&gt;`, which is non-copyable\n</code></pre>\n\n<p>and a similar error for <code>v2</code>.  It usually shows the problem location and the previous move that causes the problem, but not here.</p>\n\n<p>I've tried many permutations, and with the following change I've gotten it to compile, but I'm not happy about all the cloning and recreating tuples and recreating <code>Option</code>s.</p>\n\n<pre><code>match (v1, v2) {\n    (None, None) =&gt; return result,\n    (None, Some(x)) =&gt; {\n        result.push(x.clone());\n        v1 = None;\n        v2 = d2.next();\n    }\n    (Some(x), None) =&gt; {\n        result.push(x.clone());\n        v1 = d1.next();\n        v2 = None;\n    }\n    (Some(p1), Some(p2)) =&gt; {\n        let (ref s1, t1) = p1;\n        let (ref s2, t2) = p2;\n        if s1 == s2 {\n            result.push((s1.clone(), t1 + t2));\n            v1 = d1.next();\n            v2 = d2.next();\n        } else if s1 &lt; s2 {\n            result.push(p1.clone());\n            v1 = d1.next();\n            v2 = Some((s2.clone(), t2));\n        } else {\n            result.push(p2.clone());\n            v1 = Some((s1.clone(), t1));\n            v2 = d2.next();\n        }\n    }\n}\n</code></pre>\n\n<p>Adding what I'd <strong>really</strong> like to write, for reference, in case someone is looking for a challenge for the borrow checker:</p>\n\n<pre><code>fn merge(mut l1: Vec&lt;(String, u32)&gt;, mut l2: Vec&lt;(String, u32)&gt;) -&gt; Vec&lt;(String, u32)&gt; {\n    let mut d1 = l1.drain(..);\n    let mut d2 = l2.drain(..);\n    let mut result = Vec::new();\n    let mut v1 = d1.next();\n    let mut v2 = d2.next();\n    loop {\n        match (v1, v2) {\n            (None, None) =&gt; return result,\n            (None, Some(p2)) =&gt; {\n                result.push(p2);\n                v1 = None;\n                v2 = d2.next()\n            }\n            (Some(p1), None) =&gt; {\n                result.push(p1);\n                v1 = d1.next();\n                v2 = None\n            }\n            (Some(p1 @ (s1, _)), o2 @ Some((s2, _))) if s1 &lt; s2 =&gt; {\n                result.push(p1);\n                v1 = d1.next();\n                v2 = o2\n            }\n            (o1 @ Some((s1, _)), Some(p2 @ (s2, _))) if s1 &gt; s2 =&gt; {\n                result.push(p2);\n                v1 = o1;\n                v2 = d2.next()\n            }\n            (Some((s1, t1)), Some((_, t2))) =&gt; {\n                result.push((s1, t1 + t2));\n                v1 = d1.next();\n                v2 = d2.next()\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>Note that the match on <code>(v1, v2)</code> should move the values so that each path is enforced to set <code>v1</code> and <code>v2</code>.  Still not as clean as Haskell, but closer.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": true, "score": 4, "last_activity_date": 1460844258, "creation_date": 1460844258, "answer_id": 36670314, "question_id": 36670098, "link": "https://stackoverflow.com/questions/36670098/type-annotations-required-why-are-associated-types-treated-differently/36670314#36670314", "title": "Type annotations required - why are associated types treated differently?", "body": "<p>If your method is</p>\n\n<pre><code>fn bar(mut this: Self::Assoc) -&gt; Result&lt;Self::Assoc, Self::Assoc&gt;\n</code></pre>\n\n<p>and you try to call it with</p>\n\n<pre><code>FooBar::bar(Box::new(tt))\n</code></pre>\n\n<p>how is Rust supposed to know what type <code>Self</code> is? <code>Box::new(tt)</code> is <code>Self::Assoc</code> right, but you can\u2019t get <code>Self</code> from that, several types could have the same <code>Assoc</code>.</p>\n\n<p>And that\u2019s what <code>rustc</code> is complaining about:</p>\n\n<blockquote>\n  <p>type annotations required</p>\n</blockquote>\n\n<p>You\u2019d have to annotate what type <code>Self</code> is:</p>\n\n<pre><code>let tt_bar: Box&lt;Test&gt; = &lt;Test as FooBar&gt;::bar(Box::new(tt)).unwrap();\n</code></pre>\n\n<p>or equivalently:</p>\n\n<pre><code>let tt_bar: Box&lt;Test&gt; = Test::bar(Box::new(tt)).unwrap();\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "is_accepted": false, "score": 1, "last_activity_date": 1460844687, "creation_date": 1460844687, "answer_id": 36670372, "question_id": 36670098, "link": "https://stackoverflow.com/questions/36670098/type-annotations-required-why-are-associated-types-treated-differently/36670372#36670372", "title": "Type annotations required - why are associated types treated differently?", "body": "<p>The problem is you are trying to access the associated type from the trait. You can only access it from a type that implements the trait, such as from <code>Test</code>:</p>\n\n<pre><code>let tt_bar: Box&lt;Test&gt; = Test::bar(Box::new(tt)).unwrap();\n</code></pre>\n\n<p><code>FooBar::Assoc</code> is not a concrete type, so you cannot use it. When you implemented <code>FooBar</code> for <code>Test</code>, you gave <code>Test::Assoc</code> a concrete type, which is accessible:</p>\n\n<pre><code>type Assoc = Box&lt;Test&gt;;\n</code></pre>\n\n<p>In the code with the generic type, a new copy of <code>FooBar::bar</code> was created with a concrete type. Because you requested a <code>Box&lt;Test&gt;</code>, the new function's signature would be this:</p>\n\n<pre><code>fn bar(mut this: Box&lt;Test&gt;) -&gt; Result&lt;Box&lt;Test&gt;, Box&lt;Test&gt;&gt;\n</code></pre>\n\n<p><code>Box&lt;Test&gt;</code> is a concrete type, so it works.</p>\n"}], "owner": {"reputation": 1457, "user_id": 2849934, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3ff0a46f18c8d548fa91c12b922290b6?s=128&d=identicon&r=PG", "display_name": "John", "link": "https://stackoverflow.com/users/2849934/john"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 805, "favorite_count": 0, "accepted_answer_id": 36670314, "answer_count": 2, "score": 3, "last_activity_date": 1460984389, "creation_date": 1460842702, "last_edit_date": 1460984389, "question_id": 36670098, "link": "https://stackoverflow.com/questions/36670098/type-annotations-required-why-are-associated-types-treated-differently", "title": "Type annotations required - why are associated types treated differently?", "body": "<p>In the following program (<a href=\"https://play.rust-lang.org/?gist=ec5b43e81b286a638c543e06740aaeda&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">play</a>), the <code>FooBar</code> trait provides the <code>bar</code> method, but the actual type of the object returned by <code>bar</code> seems to be hidden. If I use a type argument instead of an associated type, it works (<a href=\"https://play.rust-lang.org/?gist=ba018bc864edc76aa44c153b79f0c662&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">play</a>).</p>\n\n<p>Why are associated types treated differently? Or am I doing it wrong?</p>\n\n<pre><code>use std::ops::DerefMut;\n\npub trait FooBar: Sized {\n    type Assoc: Sized + DerefMut&lt;Target=Self&gt;;\n\n    fn foo(&amp;mut self) -&gt; Option&lt;Self::Assoc&gt;;\n\n    fn bar(mut this: Self::Assoc) -&gt; Result&lt;Self::Assoc, Self::Assoc&gt; {\n        unimplemented!()\n    }\n}\n\n#[derive(Debug)]\nstruct Test(u32);\n\nimpl FooBar for Test {\n    type Assoc = Box&lt;Test&gt;;\n    fn foo(&amp;mut self) -&gt; Option&lt;Self::Assoc&gt; {\n        unimplemented!()\n    }\n}\n\nfn main() {\n    let mut tt = Test(20);\n    let tt_foo: Box&lt;Test&gt; = tt.foo().unwrap(); // this is ok\n    let tt_bar: Box&lt;Test&gt; = FooBar::bar(Box::new(tt)).unwrap(); // but not this\n    assert_eq!(tt_bar.0, 20);\n}\n</code></pre>\n"}, {"tags": ["numbers", "type-conversion", "rust"], "answers": [{"comments": [{"owner": {"reputation": 514, "user_id": 5327043, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0a8f5b77fe7e7cccd4e630d0a73cd05f?s=128&d=identicon&r=PG&f=1", "display_name": "Walking.In.The.Air", "link": "https://stackoverflow.com/users/5327043/walking-in-the-air"}, "edited": false, "score": 0, "creation_date": 1460840020, "post_id": 36669549, "comment_id": 60930816, "body": "As I understand T::from_str_radix convert from string, not from hex. And &quot;format!&quot; seems to be slowpoke, however I do really need performance."}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "reply_to_user": {"reputation": 514, "user_id": 5327043, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0a8f5b77fe7e7cccd4e630d0a73cd05f?s=128&d=identicon&r=PG&f=1", "display_name": "Walking.In.The.Air", "link": "https://stackoverflow.com/users/5327043/walking-in-the-air"}, "edited": false, "score": 0, "creation_date": 1460840147, "post_id": 36669549, "comment_id": 60930863, "body": "What do you call hex then? The base only matters when the number is represented as a string. Otherwise <code>42</code> and <code>0x2a</code> are the same integer."}, {"owner": {"reputation": 514, "user_id": 5327043, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0a8f5b77fe7e7cccd4e630d0a73cd05f?s=128&d=identicon&r=PG&f=1", "display_name": "Walking.In.The.Air", "link": "https://stackoverflow.com/users/5327043/walking-in-the-air"}, "edited": false, "score": 0, "creation_date": 1460840299, "post_id": 36669549, "comment_id": 60930926, "body": "For example I have several bytes (bytes: &amp;[u8; 4]) and need to get int (u32) from it."}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "reply_to_user": {"reputation": 514, "user_id": 5327043, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0a8f5b77fe7e7cccd4e630d0a73cd05f?s=128&d=identicon&r=PG&f=1", "display_name": "Walking.In.The.Air", "link": "https://stackoverflow.com/users/5327043/walking-in-the-air"}, "edited": false, "score": 0, "creation_date": 1460840417, "post_id": 36669549, "comment_id": 60930955, "body": "In that case the base does not matter at all, it\u2019s just bytes."}, {"owner": {"reputation": 514, "user_id": 5327043, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0a8f5b77fe7e7cccd4e630d0a73cd05f?s=128&d=identicon&r=PG&f=1", "display_name": "Walking.In.The.Air", "link": "https://stackoverflow.com/users/5327043/walking-in-the-air"}, "edited": false, "score": 0, "creation_date": 1460840515, "post_id": 36669549, "comment_id": 60930985, "body": "Yes I mean exactly it. Base doesn&#39;t matter. But how to get value of this 4 bytes into u32 variable?"}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "reply_to_user": {"reputation": 514, "user_id": 5327043, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0a8f5b77fe7e7cccd4e630d0a73cd05f?s=128&d=identicon&r=PG&f=1", "display_name": "Walking.In.The.Air", "link": "https://stackoverflow.com/users/5327043/walking-in-the-air"}, "edited": false, "score": 0, "creation_date": 1460842079, "post_id": 36669549, "comment_id": 60931457, "body": "I\u2019ve added an example with transmute taking care of endianess issues."}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "edited": false, "score": 5, "creation_date": 1460844466, "post_id": 36669549, "comment_id": 60932088, "body": "I would recommend the byte order crate over raw transmutes; it is a safe interface, and makes sure you&#39;re considering endianness."}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1460844792, "post_id": 36669549, "comment_id": 60932170, "body": "Looks even better, I did not know it"}, {"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 2, "creation_date": 1460876690, "post_id": 36669549, "comment_id": 60937866, "body": "Don&#39;t use transmute, it is dangerous and will cause portability headaches when endianness changes. If you don&#39;t want to use the byte_order crate use bit operations (shift by multiples of 8 bits  and or), the compiler will compile it into efficient code."}], "tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": true, "score": 11, "last_activity_date": 1593561811, "last_edit_date": 1593561811, "creation_date": 1460839643, "answer_id": 36669549, "question_id": 36669427, "link": "https://stackoverflow.com/questions/36669427/does-rust-have-a-way-to-convert-several-bytes-to-a-number/36669549#36669549", "title": "Does Rust have a way to convert several bytes to a number?", "body": "<p>There is <a href=\"https://doc.rust-lang.org/std/primitive.i32.html#method.from_str_radix\" rel=\"nofollow noreferrer\"><code>T::from_str_radix</code></a> to convert from a string (you can choose the base and <code>T</code> can be any integer type).</p>\n<p>To convert an integer to a <code>String</code> you can use <a href=\"https://doc.rust-lang.org/std/fmt/#formatting-traits\" rel=\"nofollow noreferrer\"><code>format!</code></a>:</p>\n<pre><code>format!(&quot;{:x}&quot;, 42) == &quot;2a&quot;\nformat!(&quot;{:X}&quot;, 42) == &quot;2A&quot;\n</code></pre>\n<p>To reinterpret an integer as bytes, just use the <code>byte_order</code> crate.</p>\n<hr />\n<p>Old answer, I don't advise this any more:</p>\n<p>If you want to convert between <code>u32</code> and <code>[u8; 4]</code> (for example) you can use <code>transmute</code>, it\u2019s what it is for.</p>\n<p>Note also that Rust has <a href=\"https://doc.rust-lang.org/std/primitive.i32.html#method.to_be\" rel=\"nofollow noreferrer\"><code>to_be</code></a> and <a href=\"https://doc.rust-lang.org/std/primitive.i32.html#method.to_le\" rel=\"nofollow noreferrer\"><code>to_le</code></a> functions to deal with endianess:</p>\n<pre><code>unsafe { std::mem::transmute::&lt;u32, [u8; 4]&gt;(42u32.to_le()) } == [42, 0, 0, 0]\nunsafe { std::mem::transmute::&lt;u32, [u8; 4]&gt;(42u32.to_be()) } == [0, 0, 0, 42]\nunsafe { std::mem::transmute::&lt;[u8; 4], u32&gt;([0, 0, 0, 42]) }.to_le() == 0x2a000000\nunsafe { std::mem::transmute::&lt;[u8; 4], u32&gt;([0, 0, 0, 42]) }.to_be() == 0x0000002a\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 2, "creation_date": 1460917516, "post_id": 36676814, "comment_id": 60950654, "body": "As a matter of style I would use <code>|</code> instead of <code>+</code> (and Rob Pike seems to agree)."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 12, "last_activity_date": 1460897856, "creation_date": 1460897856, "answer_id": 36676814, "question_id": 36669427, "link": "https://stackoverflow.com/questions/36669427/does-rust-have-a-way-to-convert-several-bytes-to-a-number/36676814#36676814", "title": "Does Rust have a way to convert several bytes to a number?", "body": "<p>A <code>u32</code> being 4 bytes, you <strong>may</strong> be able to use <code>std::mem::transmute</code> to interpret a <code>[u8; 4]</code> as a <code>u32</code> however:</p>\n\n<ul>\n<li>beware of <strong>alignment</strong></li>\n<li>beware of <strong>endianness</strong></li>\n</ul>\n\n<p>A no-dependency solution is simply to perform the maths, following in <a href=\"http://commandcenter.blogspot.fr/2012/04/byte-order-fallacy.html\" rel=\"noreferrer\">Rob Pike's steps</a>:</p>\n\n<pre><code>fn as_u32_be(array: &amp;[u8; 4]) -&gt; u32 {\n    ((array[0] as u32) &lt;&lt; 24) +\n    ((array[1] as u32) &lt;&lt; 16) +\n    ((array[2] as u32) &lt;&lt;  8) +\n    ((array[3] as u32) &lt;&lt;  0)\n}\n\nfn as_u32_le(array: &amp;[u8; 4]) -&gt; u32 {\n    ((array[0] as u32) &lt;&lt;  0) +\n    ((array[1] as u32) &lt;&lt;  8) +\n    ((array[2] as u32) &lt;&lt; 16) +\n    ((array[3] as u32) &lt;&lt; 24)\n}\n</code></pre>\n\n<p>It compiles down to reasonably efficient code.</p>\n\n<p>If dependencies are an option though, using the <a href=\"https://crates.io/crates/byteorder\" rel=\"noreferrer\">byteorder</a> crate is just simpler.</p>\n"}], "owner": {"reputation": 514, "user_id": 5327043, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0a8f5b77fe7e7cccd4e630d0a73cd05f?s=128&d=identicon&r=PG&f=1", "display_name": "Walking.In.The.Air", "link": "https://stackoverflow.com/users/5327043/walking-in-the-air"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 15182, "favorite_count": 2, "closed_date": 1460983618, "accepted_answer_id": 36669549, "answer_count": 2, "score": 6, "last_activity_date": 1593561811, "creation_date": 1460838943, "last_edit_date": 1460983558, "question_id": 36669427, "link": "https://stackoverflow.com/questions/36669427/does-rust-have-a-way-to-convert-several-bytes-to-a-number", "closed_reason": "Duplicate", "title": "Does Rust have a way to convert several bytes to a number?", "body": "<p>And convert a number to a byte array?</p>\n\n<p>I'd like to avoid using <code>transmute</code>, but it's most important to reach maximum performance.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "is_accepted": false, "score": 1, "last_activity_date": 1460837822, "creation_date": 1460837822, "answer_id": 36669242, "question_id": 36669049, "link": "https://stackoverflow.com/questions/36669049/assign-value-from-match-statement/36669242#36669242", "title": "Assign value from match statement", "body": "<p>What is happening is that the scope of the match statement takes ownership of the <code>PathBuf</code> object returned from <code>env::home_dir()</code>. You then attempt to return a reference to that object, but the object ceases to exist immediately.</p>\n\n<p>The solution is to return <code>PathBuf</code> rather than a reference to it (or convert it to a String and return that instead, in any case, it has to be some type that owns the data). You may have to change what <code>matches.value_of(\"some_dir\").unwrap()</code> returns so that both branches return the same type.</p>\n"}, {"tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": true, "score": 2, "last_activity_date": 1460838618, "last_edit_date": 1460838618, "creation_date": 1460837830, "answer_id": 36669243, "question_id": 36669049, "link": "https://stackoverflow.com/questions/36669049/assign-value-from-match-statement/36669243#36669243", "title": "Assign value from match statement", "body": "<p><code>path.to_str()</code> will return a <code>&amp;str</code> reference to the inner string contained in <code>path</code>, which will only live as long as <code>path</code>, that is inside the <code>match</code> arm.\nYou can use <a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.to_owned\" rel=\"nofollow\"><code>to_owned</code></a> to get an owned copy of that <code>&amp;str</code>. You will have to adapt the value from <code>clap</code> accordingly to have the same types in both branches of your if:</p>\n\n<pre><code>let some_dir = if matches.is_present(\"some_dir\") {\n    matches.value_of(\"some_dir\").unwrap().to_owned()\n} else {\n    match env::home_dir() {\n        Some(path) =&gt; path.to_str().unwrap().to_owned(),\n        None       =&gt; panic!(\"Uh, oh!\"),\n    }\n};\n</code></pre>\n\n<p>Alternatively, you could use <code>Cow</code> to avoid the copy in the first branch:</p>\n\n<pre><code>use std::borrow::Cow;\n\nlet some_dir: Cow&lt;str&gt; = if matches.is_present(\"some_dir\") {\n    matches.value_of(\"some_dir\").unwrap().into()\n} else {\n    match env::home_dir() {\n        Some(path) =&gt; path.to_str().unwrap().to_owned().into(),\n        None       =&gt; panic!(\"Uh, oh!\"),\n    }\n};\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 116, "user_id": 4769416, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/d9a246dc38ac5cfa1514b4d447f53611?s=128&d=identicon&r=PG", "display_name": "James Durand", "link": "https://stackoverflow.com/users/4769416/james-durand"}, "edited": false, "score": 0, "creation_date": 1460917242, "post_id": 36676688, "comment_id": 60950545, "body": "I did actually end up converting the string to a PathBuf object so that I could modify the path as you advised."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 1, "last_activity_date": 1460897213, "creation_date": 1460897213, "answer_id": 36676688, "question_id": 36669049, "link": "https://stackoverflow.com/questions/36669049/assign-value-from-match-statement/36676688#36676688", "title": "Assign value from match statement", "body": "<p>There is a rather simple trick: increase the scope of <code>path</code> (and thus its lifetime) so that you can take a reference into it.</p>\n\n<pre><code>use std::env;\n\nfn main() {\n    // Do some argument parsing stuff...\n\n    let path; // &lt;--\n\n    let some_dir = if matches.is_present(\"some_dir\") {\n        matches.value_of(\"some_dir\").unwrap()\n    } else {\n        match env::home_dir() {\n            Some(p)    =&gt; { path = p; path.to_str().unwrap() },\n            None       =&gt; panic!(\"Uh, oh!\"),\n        }\n    };\n\n    // Do more things\n}\n</code></pre>\n\n<p>It is efficient, as <code>path</code> is only ever used when necessary, and does not require changing the types in the program.</p>\n\n<p><em>Note: I added an <code>.unwrap()</code> after <code>.to_str()</code> because <code>.to_str()</code> returns an <code>Option</code>. And do note that the reason it returns an <code>Option&lt;&amp;str&gt;</code> is because not all paths are valid UTF-8 sequences. You might want to stick to <code>Path</code>/<code>PathBuf</code>.</em></p>\n"}], "owner": {"reputation": 116, "user_id": 4769416, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/d9a246dc38ac5cfa1514b4d447f53611?s=128&d=identicon&r=PG", "display_name": "James Durand", "link": "https://stackoverflow.com/users/4769416/james-durand"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 432, "favorite_count": 0, "accepted_answer_id": 36669243, "answer_count": 3, "score": 0, "last_activity_date": 1460983495, "creation_date": 1460836759, "last_edit_date": 1460983495, "question_id": 36669049, "link": "https://stackoverflow.com/questions/36669049/assign-value-from-match-statement", "title": "Assign value from match statement", "body": "<p>I'm trying to make a Git command in Rust. I'm using the <code>clap</code> argument parser crate to do the command line handling. I want my command to take an optional argument for which directory to do work in. If the command does not receive the option it assumes the users home directory.</p>\n\n<p>I know that I can use the <code>std::env::home_dir</code> function to get the user's home directory if it is set but the part that confuses me is how to properly use the <code>match</code> operator to get the value of the path. Here is what I've been trying:</p>\n\n<pre><code>use std::env;\n\nfn main() {\n    // Do some argument parsing stuff...\n\n    let some_dir = if matches.is_present(\"some_dir\") {\n        matches.value_of(\"some_dir\").unwrap()\n    } else {\n        match env::home_dir() {\n            Some(path) =&gt; path.to_str(),\n            None       =&gt; panic!(\"Uh, oh!\"),\n        }\n    };\n\n    // Do more things\n</code></pre>\n\n<p>I get an error message when I try to compile this saying that <code>path.to_str()</code> doesn't live long enough. I get that the value returned from <code>to_str</code> lives for the length of the <code>match</code> scope but how can you return a value from a match statement that has to call another function?</p>\n"}, {"tags": ["rust", "borrow-checker", "borrowing"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1460830504, "post_id": 36667723, "comment_id": 60927652, "body": "Can you just pass <code>&amp;mut state.lut_index</code> to <code>modify_state</code>?"}, {"owner": {"reputation": 483, "user_id": 4280035, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e442215473aa322da127ee74c79c7477?s=128&d=identicon&r=PG&f=1", "display_name": "hellcatv", "link": "https://stackoverflow.com/users/4280035/hellcatv"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1460833873, "post_id": 36667723, "comment_id": 60928864, "body": "The code about is a simplification...modify state calls tons of helpers"}], "answers": [{"comments": [{"owner": {"reputation": 483, "user_id": 4280035, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e442215473aa322da127ee74c79c7477?s=128&d=identicon&r=PG&f=1", "display_name": "hellcatv", "link": "https://stackoverflow.com/users/4280035/hellcatv"}, "edited": false, "score": 0, "creation_date": 1460833997, "post_id": 36668013, "comment_id": 60928910, "body": "Is there a way to do the std::mem::replace in a try/finally-sort of block (maybe using RAII) ? The real code I&#39;m working with has tons of returns all over?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 483, "user_id": 4280035, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e442215473aa322da127ee74c79c7477?s=128&d=identicon&r=PG&f=1", "display_name": "hellcatv", "link": "https://stackoverflow.com/users/4280035/hellcatv"}, "edited": false, "score": 1, "creation_date": 1460859225, "post_id": 36668013, "comment_id": 60935060, "body": "@hellcatv Not really: that would imply giving the scope guard a mutable borrow of <code>DoubleIndirect</code> and, <i>oh look</i>, you&#39;re back to the original problem again.  You could wrap the &quot;lots of returns&quot; part of the function inside a closure, letting you &quot;trap&quot; said returns."}, {"owner": {"reputation": 483, "user_id": 4280035, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e442215473aa322da127ee74c79c7477?s=128&d=identicon&r=PG&f=1", "display_name": "hellcatv", "link": "https://stackoverflow.com/users/4280035/hellcatv"}, "edited": false, "score": 0, "creation_date": 1460863300, "post_id": 36668013, "comment_id": 60935632, "body": "I ended up solving this by teasing out the parts of state that were modified in the modify_state function and placing those in a separate struct that was a member of my state struct."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 3, "last_activity_date": 1460983389, "last_edit_date": 1460983389, "creation_date": 1460831137, "answer_id": 36668013, "question_id": 36667723, "link": "https://stackoverflow.com/questions/36667723/can-i-reset-a-borrow-of-a-local-in-a-loop/36668013#36668013", "title": "Can I reset a borrow of a local in a loop?", "body": "<p>The simplest way to do this is to ensure the borrows of <code>state</code> are all disjoint:</p>\n\n<pre><code>#[cold]\nfn modify_state(lut_index: &amp;mut usize) {\n    *lut_index += 63;\n    *lut_index %= 16384;\n}\n\nfn process(state: &amp;mut DoubleIndirect) -&gt; [u8; 65536] {\n    let mut ret: [u8; 65536] = [0; 65536];\n    let mut count = 0;\n    let mut lut_index = &amp;mut state.lut_index;\n    let mut data_slice = &amp;state.data[state.lut[*lut_index]..];\n    for ret_item in ret.iter_mut() {\n        *ret_item = data_slice[count];\n        if count % 197 == 196 {\n            modify_state(lut_index);\n            data_slice = &amp;state.data[state.lut[*lut_index]..];\n        }\n        count += 1\n    }\n    return ret;\n}\n</code></pre>\n\n<p>The problem is basically two things: first, Rust <em>will not</em> look beyond a function's signature to find out what it does.  As far as the compiler knows, your call to <code>modify_state</code> could be changing <code>state.data</code> as well, and it can't allow that.</p>\n\n<p>The second problem is that borrows are <em>lexical</em>; the compiler looks at the block of code where the borrow <em>might</em> be used as goes with that.  It doesn't (currently) bother to try and reduce the length of borrows to match where they're <em>actually</em> active.</p>\n\n<p>You can also play games with, for example, using <code>std::mem::replace</code> to pull <code>state.data</code> out into a local variable, do your work, then <code>replace</code> it back just before you return.</p>\n"}], "owner": {"reputation": 483, "user_id": 4280035, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e442215473aa322da127ee74c79c7477?s=128&d=identicon&r=PG&f=1", "display_name": "hellcatv", "link": "https://stackoverflow.com/users/4280035/hellcatv"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 126, "favorite_count": 0, "accepted_answer_id": 36668013, "answer_count": 1, "score": 1, "last_activity_date": 1460983389, "creation_date": 1460829687, "last_edit_date": 1460983350, "question_id": 36667723, "link": "https://stackoverflow.com/questions/36667723/can-i-reset-a-borrow-of-a-local-in-a-loop", "title": "Can I reset a borrow of a local in a loop?", "body": "<p>I have a processing loop that needs a pointer to a large lookup table.\nThe pointer is unfortunately triply indirected from the source data, so keeping that pointer around for the inner loop is essential for performance.</p>\n\n<p>Is there any way I can tell the borrow checker that I'm \"unborrowing\" the state variable in the unlikely event I need to modify the state... so I can only re-lookup the slice in the event that the <code>modify_state</code> function triggers?</p>\n\n<p>One solution I thought of was to change data to be a slice reference and do a <code>mem::replace</code> on the struct at the beginning of the function and pull the slice into local scope, then replace it back at the end of the function \u2014 but that is very brittle and error prone (as I need to remember to replace the item on every return). Is there another way to accomplish this?</p>\n\n<pre><code>struct DoubleIndirect {\n    data: [u8; 512 * 512],\n    lut: [usize; 16384],\n    lut_index: usize,\n}\n\n#[cold]\nfn modify_state(s: &amp;mut DoubleIndirect) {\n    s.lut_index += 63;\n    s.lut_index %= 16384;\n}\n\nfn process(state: &amp;mut DoubleIndirect) -&gt; [u8; 65536] {\n    let mut ret: [u8; 65536] = [0; 65536];\n    let mut count = 0;\n    let mut data_slice = &amp;state.data[state.lut[state.lut_index]..];\n    for ret_item in ret.iter_mut() {\n        *ret_item = data_slice[count];\n        if count % 197 == 196 {\n            data_slice = &amp;[];\n            modify_state(state);\n            data_slice = &amp;state.data[state.lut[state.lut_index]..];\n        }\n        count += 1\n    }\n    return ret;\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 361, "user_id": 4237232, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-9O5kKSPEl6Y/AAAAAAAAAAI/AAAAAAAAAB0/ht9QINTIVnQ/photo.jpg?sz=128", "display_name": "Demur Rumed", "link": "https://stackoverflow.com/users/4237232/demur-rumed"}, "edited": false, "score": 0, "creation_date": 1460827731, "post_id": 36667241, "comment_id": 60926555, "body": "Please include a complete example of the erroneous code, including stub methods for parse_hra/parse_mat/parse_trn/exec_tad &amp; without removing main/uses"}, {"owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "edited": false, "score": 1, "creation_date": 1460957555, "post_id": 36667241, "comment_id": 60960959, "body": "You store references to the elements of <code>m_list</code> in the <code>h_list</code> using function <code>parse_hra</code>. Therefore <code>m_list</code> borrow ends when <code>h_list</code> go out of scope. Try to use <code>Rc</code> instead references."}], "answers": [{"tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": false, "score": 1, "last_activity_date": 1461069362, "last_edit_date": 1461069362, "creation_date": 1461009915, "answer_id": 36703323, "question_id": 36667241, "link": "https://stackoverflow.com/questions/36667241/cannot-borrow-variable-as-mutable-because-it-is-also-borrowed-as-immutable-while/36703323#36703323", "title": "Cannot borrow variable as mutable because it is also borrowed as immutable while refactoring a parser", "body": "<p>@aSpex comment is right.</p>\n\n<p>To solve this problem you can replace the references inside <code>Hora</code> and <code>Dia</code> with the corresponding indices. That is</p>\n\n<pre><code>struct Hora {\n    materia: usize; //index in m_list \n}\n\nstruct Dia {\n    horas: Vec&lt;usize&gt;; //indices in h_list\n}\n</code></pre>\n\n<p>You can also create a struct with fields <code>m_list</code>, <code>h_list</code> and <code>t_list</code>, so they are keeped together.</p>\n\n<p>See <a href=\"http://smallcultfollowing.com/babysteps/blog/2015/04/06/modeling-graphs-in-rust-using-vector-indices/\" rel=\"nofollow\">this</a> for a comparison with the approach using <code>Rc</code> and <code>RefCell</code>.</p>\n"}], "owner": {"reputation": 41, "user_id": 6213593, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/8hKMC.jpg?s=128&g=1", "display_name": "Darthkpo", "link": "https://stackoverflow.com/users/6213593/darthkpo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 372, "favorite_count": 0, "answer_count": 1, "score": 4, "last_activity_date": 1461069362, "creation_date": 1460827062, "last_edit_date": 1460984601, "question_id": 36667241, "link": "https://stackoverflow.com/questions/36667241/cannot-borrow-variable-as-mutable-because-it-is-also-borrowed-as-immutable-while", "title": "Cannot borrow variable as mutable because it is also borrowed as immutable while refactoring a parser", "body": "<p>To learn Rust, I began working on a simple parser. I got it working, but I used a ton of bad practices like using <code>.clone()</code> for saving data in my structs.</p>\n\n<p>Today I started refactoring the code to use references to the object rather than cloning them. I got pretty far before getting stuck with these two errors:</p>\n\n<pre><code>error: cannot borrow 'm_list' as mutable because it is also borrowed as immutable [E0502]\n</code></pre>\n\n<p>and</p>\n\n<pre><code>error: cannot borrow 'h_list' as mutable because it is also borrowed as immutable [E0502]\n</code></pre>\n\n<p>After reading about the error, I'm very confused. Some say it's a bug in Rust's borrow checker, but I'm 99% sure that its a bug with my code.</p>\n\n<p>Code where the error manifests:</p>\n\n<pre><code>mod utypes;\n\nuse std::env;\nuse std::fs::File;\nuse std::io::BufRead;\nuse std::io::BufReader;\nuse std::error::Error;\n\nuse utypes::*;\n\nfn main() {    \n\n    let args: Vec&lt;_&gt; = env::args().collect();\n\n    let file = match File::open(&amp;args[1]) {\n\n        Ok(file) =&gt; file,\n        Err(why) =&gt; panic!(\"IO Error on line: {}, cause: {}\", line!(), Error::description(&amp;why)),\n\n    };\n    let buffer = BufReader::new(file);\n\n    let mut m_list: Vec&lt;Materia&gt; = Vec::new(); \n    let mut h_list: Vec&lt;Hora&gt; = Vec::new();\n    let mut t_list: Vec&lt;Turno&gt; = Vec::new();\n\n    for line in buffer.lines() {\n\n        let l = line.unwrap();\n        let spl_line: Vec&lt;&amp;str&gt; = l.split(':').collect();\n\n        if spl_line[0].starts_with('#') { continue; }\n\n        match spl_line[0] {\n\n            \"mat\" =&gt; { parse_mat(&amp;mut m_list,spl_line) },\n            \"hra\" =&gt; { parse_hra(&amp;m_list,&amp;mut h_list,spl_line) },\n            \"trn\" =&gt; { parse_trn(&amp;mut t_list,spl_line) },\n            \"tad\" =&gt; { exec_tad(&amp;h_list,&amp;mut t_list,spl_line) },\n            \"\"    =&gt; continue,\n            _     =&gt; panic!(\"Unknown type identifier: {}.\", spl_line[0]),\n\n        }\n\n    }\n\n    for turno in t_list.iter() {\n\n        println!(\"\\nTurno: {}:\\n\", turno.nombre);\n        for dia in turno.dias.iter() {\n\n            print!(\"{:?}: \", dia.enum_id);\n            for hora in dia.horas.iter() {\n\n                print!(\"\\n\\t{} \", hora);\n\n            }\n            println!(\"\");\n\n        }\n\n    }\n\n    /*\n    println!(\"\\nDEBUG INFO:\\n\");\n    println!(\"{:?}\", m_list);\n    println!(\"{:?}\", h_list);\n    println!(\"{:?}\", t_list);\n    */\n\n}\n\nfn get_trn( t_list: &amp;Vec&lt;Turno&gt;, gid: u32 ) -&gt; Option&lt;usize&gt; {\n\n    for (i,trn) in t_list.iter().enumerate() {\n\n        if trn.id == gid {\n\n            return Some(i);\n\n        }\n\n    }\n\n    None\n\n}\n\nfn get_hra ( h_list: &amp;Vec&lt;Hora&gt;, gid: u32 ) -&gt; Option&lt;usize&gt; {\n\n    for (i,hra) in h_list.iter().enumerate() {\n\n        if hra.id == gid {\n\n            return Some(i);\n\n        }\n\n    }\n\n    None\n\n}\n\nfn get_mat ( m_list: &amp;Vec&lt;Materia&gt;, gid: u32 ) -&gt; Option&lt;usize&gt; {\n\n    for (i,mat) in m_list.iter().enumerate() {\n\n        if mat.id == gid {\n\n            return Some(i);\n\n        }\n\n    }\n\n    None\n\n}\n\nfn parse_mat&lt;'a&gt; ( m_list: &amp;'a mut Vec&lt;Materia&gt;, line: Vec&lt;&amp;str&gt; ) {\n\n    assert_eq!(4,line.len());\n\n    let id: u32 = match line[1].parse::&lt;u32&gt;() {\n\n        Ok(id)    =&gt; id,\n        Err(_)    =&gt; panic!(\"Error parsing u32 at {}.\", line!()),\n\n    };   \n\n    m_list.push(Materia::new(id,line[2].to_string(),line[3].to_string()));\n\n    }\n\nfn parse_hra&lt;'a&gt; ( m_list: &amp;'a Vec&lt;Materia&gt;, h_list: &amp;mut Vec&lt;Hora&lt;'a&gt;&gt;, line: Vec&lt;&amp;str&gt; ) {\n\n    assert_eq!(5,line.len());\n\n    let id: u32 = match line[1].parse::&lt;u32&gt;() {\n\n        Ok(id)    =&gt; id,\n        Err(_)    =&gt; panic!(\"Error parsing u32 at {}.\", line!()),\n\n    };\n    let start: u32 = match line[2].parse::&lt;u32&gt;() {\n\n        Ok(start) =&gt; start,\n        Err(_)    =&gt; panic!(\"Error parsing u32 at {}.\", line!()),\n\n    };\n    let durat: u32 = match line[3].parse::&lt;u32&gt;() {\n\n        Ok(durat) =&gt; durat,\n        Err(_)    =&gt; panic!(\"Error parsing u32 at {}.\", line!()),\n\n    };\n    let matid: u32 = match line[4].parse::&lt;u32&gt;() {\n\n        Ok(matid) =&gt; matid,\n        Err(_)    =&gt; panic!(\"Error parsing u32 at {}.\", line!()),\n\n    };\n    let mat_i: usize = match get_mat(m_list,matid) {\n\n        Some(x) =&gt; x,\n        None      =&gt; panic!(\"Error matid not found in m_list!\")\n\n    };\n\n    h_list.push(Hora::new(id,start,durat,&amp;m_list[mat_i]));\n\n}\n\nfn parse_trn&lt;'a&gt; ( t_list: &amp;mut Vec&lt;Turno&lt;'a&gt;&gt;, line: Vec&lt;&amp;str&gt; ) {\n\n    assert_eq!(3,line.len());\n\n    let id: u32 = match line[1].parse::&lt;u32&gt;() {\n\n        Ok(id) =&gt; id,\n        Err(_) =&gt; panic!(\"Error parsing u32 at {}.\", line!()),\n\n    };\n\n    t_list.push(Turno::new(id,line[2].to_string()));\n\n}\n\nfn exec_tad&lt;'a&gt; ( h_list: &amp;'a Vec&lt;Hora&lt;'a&gt;&gt;, t_list: &amp;mut Vec&lt;Turno&lt;'a&gt;&gt;, line: Vec&lt;&amp;str&gt; ) {\n\n    assert_eq!(4,line.len());\n\n    let hid: u32 = match line[2].parse::&lt;u32&gt;(){\n\n        Ok(hid) =&gt; hid,\n        Err(_)  =&gt; panic!(\"Error parsing u32 at {}.\", line!()),\n\n    };\n    let tid: u32 = match line[3].parse::&lt;u32&gt;(){\n\n        Ok(tid) =&gt; tid,\n        Err(_)  =&gt; panic!(\"Error parsing u32 at {}.\", line!()),\n\n    };\n\n    let hra_i: usize = match get_hra(h_list,hid) {\n\n        Some(x) =&gt; x,\n        None    =&gt; panic!(\"Error matid not found in m_list!\")\n\n    };\n    let trn_i: usize = match get_trn(t_list,tid) {\n\n        Some(x) =&gt; x,\n        None    =&gt; panic!(\"Error matid not found in m_list!\")\n\n    };\n\n    match line[1] {\n\n        \"Dom\" =&gt; t_list[trn_i].addhra(Dias::Dom,&amp;h_list[hra_i]),\n        \"Lun\" =&gt; t_list[trn_i].addhra(Dias::Lun,&amp;h_list[hra_i]),\n        \"Mar\" =&gt; t_list[trn_i].addhra(Dias::Mar,&amp;h_list[hra_i]),\n        \"Mie\" =&gt; t_list[trn_i].addhra(Dias::Mie,&amp;h_list[hra_i]),\n        \"Jue\" =&gt; t_list[trn_i].addhra(Dias::Jue,&amp;h_list[hra_i]),\n        \"Vie\" =&gt; t_list[trn_i].addhra(Dias::Vie,&amp;h_list[hra_i]),\n        \"Sab\" =&gt; t_list[trn_i].addhra(Dias::Sab,&amp;h_list[hra_i]),\n        _     =&gt; panic!(\"Unknown day error!\") \n\n    }\n\n}\n</code></pre>\n\n<p>And utypes.rs:</p>\n\n<pre><code>use std::fmt;\n\n//Dias\n#[derive(Debug)]\npub enum Dias {\n\n    Dom,\n    Lun,\n    Mar,\n    Mie,\n    Jue,\n    Vie,\n    Sab,\n\n}\n\n//Materia\n\n#[derive(Debug)]\npub struct Materia {\n\n    pub id: u32,\n    pub nombre: String,\n    pub profesor: String,\n\n}\n\nimpl Materia {\n\n    pub fn new( i: u32, nom: String, prof: String ) -&gt; Materia {\n\n        Materia {\n\n            id: i,\n            nombre: nom,\n            profesor: prof,\n\n\n        }\n\n    }\n}\n\n//Hora\n\n#[derive(Debug,Clone)]\npub struct Hora&lt;'a&gt; {\n\n    pub id: u32,\n    pub comienzo: u32,\n    pub duracion: u32,\n    pub materia: &amp;'a Materia,\n\n}\n\nimpl&lt;'a&gt; Hora&lt;'a&gt; {\n\n    pub fn new ( id: u32, com: u32, dur: u32, mat: &amp;'a Materia ) -&gt; Hora&lt;'a&gt; {\n\n        Hora {\n\n           id: id,\n            comienzo: com,\n            duracion: dur,\n            materia: mat,\n\n        }\n\n    }\n\n    pub fn fin ( &amp;self ) -&gt; u32 {\n\n        self.comienzo + self.duracion\n\n    }\n\n    pub fn fmt_time ( tot: u32 ) -&gt; String {\n\n        let min = ( tot / 60 ) % 60;\n        let hra = tot / 3600;\n\n        format!(\"{:02}:{:02}\", hra, min)\n\n    }\n\n}\n\nimpl&lt;'a&gt; fmt::Display for Hora&lt;'a&gt; {\n\n    fn fmt( &amp;self, f: &amp;mut fmt::Formatter ) -&gt; fmt::Result {\n\n        write!(f, \"[{}-{}, {}]\", Hora::fmt_time(self.comienzo), Hora::fmt_time(self.fin()), self.materia.nombre)\n\n    }\n\n}\n\n//Dia\n\n#[derive(Debug)]\npub struct Dia&lt;'a&gt; {\n\n    pub enum_id: Dias,\n    pub nombre: String,\n    pub horas: Vec&lt;&amp;'a Hora&lt;'a&gt;&gt;,\n\n}\n\nimpl&lt;'a&gt; Dia&lt;'a&gt; {\n\n    pub fn new( ei: Dias, nom: String ) -&gt; Dia&lt;'a&gt; {\n\n        Dia {\n\n            enum_id: ei,\n            nombre: nom,\n            horas: Vec::new(),\n\n        }\n\n    }\n\n    pub fn addhra( &amp;mut self, hra: &amp;'a Hora&lt;'a&gt; ){\n\n        self.horas.push(hra);\n\n    }   \n\n}\n\n//Turno\n\n#[derive(Debug)]\npub struct Turno&lt;'a&gt; {\n\n    pub id: u32,\n    pub nombre: String,\n    pub dias: [Dia&lt;'a&gt;; 7],\n\n}\n\nimpl&lt;'a&gt; Turno&lt;'a&gt; {\n\n    pub fn new( i: u32, nom: String ) -&gt; Turno&lt;'a&gt; {\n\n        Turno {\n\n            id: i,\n            nombre: nom,\n            dias: [\n\n                    Dia::new(Dias::Dom,\"Domingo\"  .to_string()),\n                    Dia::new(Dias::Lun,\"Lunes\"    .to_string()),\n                    Dia::new(Dias::Mar,\"Martes\"   .to_string()),\n                    Dia::new(Dias::Mie,\"Miercoles\".to_string()),\n                    Dia::new(Dias::Jue,\"Jueves\"   .to_string()),\n                    Dia::new(Dias::Vie,\"Viernes\"  .to_string()),\n                    Dia::new(Dias::Sab,\"Sabado\"   .to_string())\n\n                   ],\n\n        }\n\n    }\n\n    pub fn addhra( &amp;mut self, dia: Dias, hra: &amp;'a Hora&lt;'a&gt; ) {\n\n        match dia {\n\n            Dias::Dom =&gt; self.dias[0].addhra(hra),\n            Dias::Lun =&gt; self.dias[1].addhra(hra),\n            Dias::Mar =&gt; self.dias[2].addhra(hra),\n            Dias::Mie =&gt; self.dias[3].addhra(hra),\n            Dias::Jue =&gt; self.dias[4].addhra(hra),\n            Dias::Vie =&gt; self.dias[5].addhra(hra),\n            Dias::Sab =&gt; self.dias[6].addhra(hra),\n\n        }\n\n    }\n\n}\n</code></pre>\n\n<p>I think the mutable reference <code>&amp;mut m_list</code> ends after the function <code>parse_mat()</code> returns so I should be able to, in another iteration of the for loop, call <code>parse_hra()</code> and pass <code>&amp;m_list</code> without problems, right?</p>\n\n<p>Full error:</p>\n\n<pre><code>src/main.rs:36:39: 36:45 error: cannot borrow `m_list` as mutable because it is also borrowed as immutable [E0502]\nsrc/main.rs:36             \"mat\" =&gt; { parse_mat(&amp;mut m_list,spl_line) },\n                                                 ^~~~~~\nsrc/main.rs:37:35: 37:41 note: previous borrow of `m_list` occurs here; the immutable borrow prevents subsequent moves or mutable borrows of `m_list` until the borrow ends\nsrc/main.rs:37             \"hra\" =&gt; { parse_hra(&amp;m_list,&amp;mut h_list,spl_line) },\n                                             ^~~~~~\nsrc/main.rs:71:2: 71:2 note: previous borrow ends here\nsrc/main.rs:11 fn main() {    \n           ...\nsrc/main.rs:71 }\n           ^\nsrc/main.rs:37:47: 37:53 error: cannot borrow `h_list` as mutable because it is also borrowed as immutable [E0502]\nsrc/main.rs:37             \"hra\" =&gt; { parse_hra(&amp;m_list,&amp;mut h_list,spl_line) },\n                                                         ^~~~~~\nsrc/main.rs:39:34: 39:40 note: previous borrow of `h_list` occurs here; the immutable borrow prevents subsequent moves or mutable borrows of `h_list` until the borrow ends\nsrc/main.rs:39             \"tad\" =&gt; { exec_tad(&amp;h_list,&amp;mut t_list,spl_line) },\n                                            ^~~~~~\nsrc/main.rs:71:2: 71:2 note: previous borrow ends here\nsrc/main.rs:11 fn main() {    \n           ...\nsrc/main.rs:71 }\n           ^\n</code></pre>\n\n<p>I'm not a native speaker so sorry for any mistakes.</p>\n\n<p><kbd><a href=\"https://play.rust-lang.org/?gist=9da0f05c8d33f00a18dfae74bb13d415&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">play-rust</a></kbd></p>\n"}, {"tags": ["memory", "rust", "sizeof"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 19, "last_activity_date": 1460820563, "last_edit_date": 1460820563, "creation_date": 1460811486, "answer_id": 36664483, "question_id": 36664327, "link": "https://stackoverflow.com/questions/36664327/how-to-get-the-size-of-a-user-defined-struct-sizeof/36664483#36664483", "title": "How to get the size of a user defined struct? (sizeof)", "body": "<p>For two reasons:</p>\n\n<ol>\n<li><p>There is <em>no such function</em> as \"<code>sizeof</code>\", so the compiler is going to have a rather difficult time calling it.</p></li>\n<li><p>That's not how you invoke generic functions.</p></li>\n</ol>\n\n<p>If you check the documentation for <code>mem::size_of</code> (which you can find even if you <a href=\"http://doc.rust-lang.org/std/?search=sizeof\">search for \"sizeof\"</a>), you will see that it includes a <a href=\"http://doc.rust-lang.org/std/mem/fn.size_of.html#examples\">runnable example</a> which shows you how to call it.  For posterity, the example in question is:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    use std::mem;\n    assert_eq!(4, mem::size_of::&lt;i32&gt;());\n}\n</code></pre>\n\n<p>In your specific case, you'd get the size of that structure using</p>\n\n<pre><code>mem::size_of::&lt;Scard_IO_Request&gt;()\n</code></pre>\n"}], "owner": {"reputation": 81, "user_id": 2226693, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/57518ab2bd6d8b37a8dfed438a63760d?s=128&d=identicon&r=PG", "display_name": "DDT", "link": "https://stackoverflow.com/users/2226693/ddt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4972, "favorite_count": 0, "accepted_answer_id": 36664483, "answer_count": 1, "score": 7, "last_activity_date": 1484834593, "creation_date": 1460810589, "last_edit_date": 1484834593, "question_id": 36664327, "link": "https://stackoverflow.com/questions/36664327/how-to-get-the-size-of-a-user-defined-struct-sizeof", "title": "How to get the size of a user defined struct? (sizeof)", "body": "<p>I've got a structure with C representation:</p>\n\n<pre><code>struct Scard_IO_Request {\n    proto: u32,\n    pciLength: u32\n}\n</code></pre>\n\n<p>when I want to ask the <code>sizeof</code> (like in C <code>sizeof()</code>) using:</p>\n\n<p><code>mem::sizeof&lt;Scard_IO_Request&gt;();</code></p>\n\n<p>I get compilation error:</p>\n\n<pre><code>\"error: `sizeof` is a reserved keyword\"\n</code></pre>\n\n<p>Why can't I use this <code>sizeof</code> function like in C? Is there an alternative?</p>\n"}, {"tags": ["string", "struct", "rust", "match"], "answers": [{"comments": [{"owner": {"reputation": 261, "user_id": 1942629, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/5faf5fd185d8abe20ba323bd6209737d?s=128&d=identicon&r=PG", "display_name": "ebaklund", "link": "https://stackoverflow.com/users/1942629/ebaklund"}, "edited": false, "score": 0, "creation_date": 1460792446, "post_id": 36661139, "comment_id": 60915498, "body": "Thanks! That will do."}], "tags": [], "owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "is_accepted": false, "score": 5, "last_activity_date": 1460789724, "creation_date": 1460789724, "answer_id": 36661139, "question_id": 36660941, "link": "https://stackoverflow.com/questions/36660941/how-to-pattern-match-a-string-in-a-struct-against-a-literal/36661139#36661139", "title": "How to pattern match a String in a struct against a literal", "body": "<p>Its probably not \"elegant\" or any nicer.. but one option is to move the conditional into the match expression:</p>\n\n<pre><code>match foo_text {\n    &amp;FooText { ref text } if text == \"pattern\" =&gt; (),\n    _ =&gt; ()\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?code=struct%20FooText%20%7B%0A%20%20%20%20text%3A%20String%0A%7D%0A%0Afn%20match_text_fails(foo_text%3A%20%26FooText)%20%7B%0A%20%20%20%20match%20foo_text%20%7B%0A%20%20%20%20%20%20%20%20%26FooText%20%7B%20ref%20text%20%7D%20if%20text%20%3D%3D%20%22pattern%22%20%3D%3E%20println!(%22Matches%3A%20%27%7B%7D%27%22%2C%20text)%2C%0A%20%20%20%20%20%20%20%20_%20%3D%3E%20()%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20foo%20%3D%20FooText%20%7B%20text%3A%22pattern%22.to_string()%20%7D%3B%0A%20%20%20%20match_text_fails(%26foo)%3B%0A%7D&amp;version=stable&amp;backtrace=0\">Working sample: Playpen link</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 4217, "user_id": 1540573, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c789ced41870af6caeef3afe24c09974?s=128&d=identicon&r=PG", "display_name": "Simo Kinnunen", "link": "https://stackoverflow.com/users/1540573/simo-kinnunen"}, "is_accepted": false, "score": 0, "last_activity_date": 1472538829, "creation_date": 1472538829, "answer_id": 39220325, "question_id": 36660941, "link": "https://stackoverflow.com/questions/36660941/how-to-pattern-match-a-string-in-a-struct-against-a-literal/39220325#39220325", "title": "How to pattern match a String in a struct against a literal", "body": "<p>Note that your desired pattern would actually work with a <code>&amp;str</code>. You can't directly pattern match a <code>String</code> because it's a more complex value that includes an unexposed internal buffer.</p>\n\n<pre><code>struct FooText&lt;'a&gt; {\n    text: &amp;'a str,\n    _other: u32,\n}\n\nfn main() {\n    let foo = FooText { text: \"foo\", _other: 5 };\n    match foo {\n        FooText { text: \"foo\", .. } =&gt; println!(\"Match!\"),\n        _ =&gt; println!(\"No match\"),\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=d30f449ef8dd16ea02c587116b6fd7cc&amp;version=stable&amp;backtrace=1\" rel=\"nofollow\">Playground</a></p>\n"}], "owner": {"reputation": 261, "user_id": 1942629, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/5faf5fd185d8abe20ba323bd6209737d?s=128&d=identicon&r=PG", "display_name": "ebaklund", "link": "https://stackoverflow.com/users/1942629/ebaklund"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 158, "favorite_count": 0, "answer_count": 2, "score": 1, "last_activity_date": 1472538829, "creation_date": 1460788187, "last_edit_date": 1460984132, "question_id": 36660941, "link": "https://stackoverflow.com/questions/36660941/how-to-pattern-match-a-string-in-a-struct-against-a-literal", "title": "How to pattern match a String in a struct against a literal", "body": "<p>In my code below I find that the code in <code>match_num_works()</code> has a certain elegance. I would like to write a <code>String</code> match with a similar formulation but cannot get it to work. I end up with <code>match_text_works()</code> which is less elegant. </p>\n\n<pre><code>struct FooNum {\n    number: i32,\n}\n\n// Elegant\nfn match_num_works(foo_num: &amp;FooNum) {\n    match foo_num {\n        &amp;FooNum { number: 1 } =&gt; (),\n        _ =&gt; (),\n    }\n}\n\nstruct FooText {\n    text: String,\n}\n\n// Clunky\nfn match_text_works(foo_text: &amp;FooText) {\n    match foo_text {\n        &amp;FooText { ref text } =&gt; {\n            if text == \"pattern\" {\n            } else {\n            }\n        }\n    }\n}\n\n// Possible?\nfn match_text_fails(foo_text: &amp;FooText) {\n    match foo_text {\n        &amp;FooText { text: \"pattern\" } =&gt; (),\n        _ =&gt; (),\n    }\n}\n</code></pre>\n"}, {"tags": ["rust", "ownership-semantics"], "answers": [{"comments": [{"owner": {"reputation": 9369, "user_id": 71079, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/3e302415f77b6c398abc0b16efc653f3?s=128&d=identicon&r=PG", "display_name": "Ralph Caraveo", "link": "https://stackoverflow.com/users/71079/ralph-caraveo"}, "edited": false, "score": 0, "creation_date": 1460781954, "post_id": 36660189, "comment_id": 60913113, "body": "This is one of those doh! moments...when you say it like that...makes perfect sense.  Thanks for helping me."}, {"owner": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "reply_to_user": {"reputation": 9369, "user_id": 71079, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/3e302415f77b6c398abc0b16efc653f3?s=128&d=identicon&r=PG", "display_name": "Ralph Caraveo", "link": "https://stackoverflow.com/users/71079/ralph-caraveo"}, "edited": false, "score": 0, "creation_date": 1460849820, "post_id": 36660189, "comment_id": 60933327, "body": "@RalphCaraveo When learning new languages, I always recommend <a href=\"http://www.rubberduckdebugging.com/\" rel=\"nofollow noreferrer\">rubber duck debugging</a>."}], "tags": [], "owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "is_accepted": true, "score": 5, "last_activity_date": 1460781983, "last_edit_date": 1460781983, "creation_date": 1460781769, "answer_id": 36660189, "question_id": 36660144, "link": "https://stackoverflow.com/questions/36660144/do-rust-collections-have-the-ability-to-own-the-data-they-store/36660189#36660189", "title": "Do Rust collections have the ability to own the data they store?", "body": "<p>The vector will own it.. as long as you don't pass a reference to it.</p>\n\n<p>Changing your code to this:</p>\n\n<pre><code>fn main() {\n    let mut v = vec!();\n    {\n        let name = \"Bob the Builder\".to_string();\n\n        v.push(name); // &lt;--- no ampersand\n\n        println!(\"{}\", name); // &lt;---- error, use of moved value\n    }\n\n    for m in &amp;v {\n        println!(\"{}\", m);\n    }\n}\n</code></pre>\n\n<p>..throws an error because <code>name</code> is now owned by the Vector. If you allow for the fact that the Vector now owns the string.. your code compiles (by removing my <code>println!</code> call):</p>\n\n<pre><code>fn main() {\n    let mut v = vec!();\n    {\n        let name = \"Bob the Builder\".to_string();\n\n        v.push(name); // &lt;--- no ampersand\n    }\n\n    for m in &amp;v {\n        println!(\"{}\", m); // &lt;--- works fine\n    }\n}\n</code></pre>\n\n<p>So your problem is that you're passing a reference to your string into the vector. Essentially, at the end of the block your <code>name</code> value will be dropped and your <code>&amp;name</code> reference in the Vector could potentially point to invalid memory.. making <code>v[0].something_here()</code> potentially dangerous. So the compiler stops you. <em>But</em>, if you transfer ownership of the <code>name</code> variable into the vector (by not passing a reference.. but passing the whole thing) then Rust knows to clean the string up when it cleans the Vector up.</p>\n"}], "owner": {"reputation": 9369, "user_id": 71079, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/3e302415f77b6c398abc0b16efc653f3?s=128&d=identicon&r=PG", "display_name": "Ralph Caraveo", "link": "https://stackoverflow.com/users/71079/ralph-caraveo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 253, "favorite_count": 0, "accepted_answer_id": 36660189, "answer_count": 1, "score": 2, "last_activity_date": 1460983187, "creation_date": 1460781271, "last_edit_date": 1460983187, "question_id": 36660144, "link": "https://stackoverflow.com/questions/36660144/do-rust-collections-have-the-ability-to-own-the-data-they-store", "title": "Do Rust collections have the ability to own the data they store?", "body": "<p>Given the following code (which does not compile):</p>\n\n<pre><code>fn main() {\n    let mut v = vec!();\n\n    {\n        let name = \"Bob the Builder\".to_string();\n\n        v.push(&amp;name);\n    }\n\n    for m in &amp;v{\n        println!(\"{}\", m);\n    }\n}\n</code></pre>\n\n<p>I have created a variable binding to a Rust <code>String</code> type which will go out of scope within the first set of curly braces. <strong>Is there a way to somehow move the ownership of the String such that the vector itself owns it?</strong></p>\n\n<p>This is an arbitrary example however I'm just trying to understand if this concept is possible.</p>\n\n<p>I already know that if I use a string literal this will be regarded as a static string which will exist for the lifetime of the entire app and therefore this code would compile but I'm just trying to understand if a collection in Rust can own data. I know Rust is not Objective-C but Objective-C has collections with the ability to retain their data.</p>\n"}, {"tags": ["data-structures", "rust", "b-tree"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1460772633, "post_id": 36658988, "comment_id": 60911557, "body": "You are looking for <i>type level integers</i>. One such thing (which may or may not be useful) is <a href=\"https://github.com/paholg/typenum\" rel=\"nofollow noreferrer\">typenum</a>. Note that earlier versions of Rust exposed the <code>b</code> parameter as a constructor parameter; the array size was then probably just a <code>Vec</code>."}, {"owner": {"reputation": 83, "user_id": 1232246, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f00fc3fbb4e2d05e043a6cd089d4a663?s=128&d=identicon&r=PG", "display_name": "Ben Weinstein-Raun", "link": "https://stackoverflow.com/users/1232246/ben-weinstein-raun"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1460785221, "post_id": 36658988, "comment_id": 60913745, "body": "I don&#39;t think it quite does what I want, but it&#39;s really cool, and I think its existence shows that arrays are unique by design, in that their type is dependent on an integer literal."}], "answers": [{"comments": [{"owner": {"reputation": 83, "user_id": 1232246, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f00fc3fbb4e2d05e043a6cd089d4a663?s=128&d=identicon&r=PG", "display_name": "Ben Weinstein-Raun", "link": "https://stackoverflow.com/users/1232246/ben-weinstein-raun"}, "edited": false, "score": 0, "creation_date": 1460770999, "post_id": 36659235, "comment_id": 60911270, "body": "As per <a href=\"http://rustbyexample.com/primitives/array.html\" rel=\"nofollow noreferrer\">Rust by example</a>, &quot;Arrays are created using brackets [], and their size, which is known at compile time, is part of their type signature [T; size]&quot;. I&#39;m not trying to use <code>b</code> as a variable any more than I would be if I were creating an array using it (it&#39;s exactly as constant here as it is for regular arrays, since Rust does compile-time polymorphism per type instance). Any particular instance will have a size that&#39;s known at compile time; if you like, ignore that <code>b-1</code> line; you still get compile errors."}, {"owner": {"reputation": 83, "user_id": 1232246, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f00fc3fbb4e2d05e043a6cd089d4a663?s=128&d=identicon&r=PG", "display_name": "Ben Weinstein-Raun", "link": "https://stackoverflow.com/users/1232246/ben-weinstein-raun"}, "edited": false, "score": 0, "creation_date": 1460771387, "post_id": 36659235, "comment_id": 60911344, "body": "I&#39;m imagining creating a 2-3 Tree of u32s by writing <code>BTree&lt;u32, 3&gt;</code>, or a 2-3-4 Tree of u32s by writing <code>BTree&lt;u32, 4&gt;</code>"}, {"owner": {"reputation": 98, "user_id": 2012847, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f6be5fcb4b07736e4aba0f3f46dc0ade?s=128&d=identicon&r=PG", "display_name": "GaiusOctavian", "link": "https://stackoverflow.com/users/2012847/gaiusoctavian"}, "reply_to_user": {"reputation": 83, "user_id": 1232246, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f00fc3fbb4e2d05e043a6cd089d4a663?s=128&d=identicon&r=PG", "display_name": "Ben Weinstein-Raun", "link": "https://stackoverflow.com/users/1232246/ben-weinstein-raun"}, "edited": false, "score": 2, "creation_date": 1460771434, "post_id": 36659235, "comment_id": 60911355, "body": "Ah! But Rust is going to interpret <code>b</code> as a type because the angle brackets after the type indicate type parameters for a generic. If you don&#39;t know the size of the vals array at runtime, then you&#39;ll have to use something else, probably a Vector. You can dynamically choose the size of the vector in a constructor that takes an appropriate parameter."}, {"owner": {"reputation": 83, "user_id": 1232246, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f00fc3fbb4e2d05e043a6cd089d4a663?s=128&d=identicon&r=PG", "display_name": "Ben Weinstein-Raun", "link": "https://stackoverflow.com/users/1232246/ben-weinstein-raun"}, "edited": false, "score": 0, "creation_date": 1460771938, "post_id": 36659235, "comment_id": 60911441, "body": "That sounds reasonable; I was just hoping to get the same level of compile-time benefits that you get from arrays."}], "tags": [], "owner": {"reputation": 98, "user_id": 2012847, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f6be5fcb4b07736e4aba0f3f46dc0ade?s=128&d=identicon&r=PG", "display_name": "GaiusOctavian", "link": "https://stackoverflow.com/users/2012847/gaiusoctavian"}, "is_accepted": false, "score": 1, "last_activity_date": 1460770507, "creation_date": 1460770507, "answer_id": 36659235, "question_id": 36658988, "link": "https://stackoverflow.com/questions/36658988/size-type-parameters-in-custom-datatypes-in-rust/36659235#36659235", "title": "Size type parameters in custom datatypes in Rust?", "body": "<p>First of all, you're using <code>b</code> as a type, then as a value, the length of the array? I'm not sure what you want that to mean.</p>\n\n<p>Second, the size of an array has to be known at compile time. Since you don't know the size of the array at compile-time, you might be better off using a Vector.</p>\n"}], "owner": {"reputation": 83, "user_id": 1232246, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f00fc3fbb4e2d05e043a6cd089d4a663?s=128&d=identicon&r=PG", "display_name": "Ben Weinstein-Raun", "link": "https://stackoverflow.com/users/1232246/ben-weinstein-raun"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 107, "favorite_count": 0, "closed_date": 1471180022, "answer_count": 1, "score": 0, "last_activity_date": 1460771554, "creation_date": 1460767960, "last_edit_date": 1460771554, "question_id": 36658988, "link": "https://stackoverflow.com/questions/36658988/size-type-parameters-in-custom-datatypes-in-rust", "closed_reason": "Duplicate", "title": "Size type parameters in custom datatypes in Rust?", "body": "<p>I'm trying to implement a B-Tree class for practice in Rust, which can be instantiated at various different values of <code>b</code>. I've tried the following code:</p>\n\n<pre><code>struct BTreeNode&lt;T, b&gt; {\n    vals: [Option&lt;T&gt;; b-1],\n    children: [Option&lt;Box&lt;BTreeNode&lt;T, b&gt;&gt;&gt;; b],\n}\n\nstruct BTree&lt;T, b&gt; {\n    root: Option&lt;BTreeNode&lt;T, b&gt;&gt;,\n}\n</code></pre>\n\n<p>but the compiler (reasonably) complains that</p>\n\n<pre><code>src/two_three_tree.rs:2:15: 2:16 error: unresolved name `b` [E0425]\nsrc/two_three_tree.rs:2     vals: [Option&lt;T&gt;; b-1],\n                                  ^\n...\nsrc/two_three_tree.rs:2:15: 2:16 error: array length constant evaluation error: non-constant path in constant expression [E0250]\nsrc/two_three_tree.rs:2     vals: [Option&lt;T&gt;; b-1],\n                                  ^\n...\n</code></pre>\n\n<p>It looks like the B-Tree class in the standard library just uses a constant (which is a reasonable choice, since B-Trees are usually meant to take maximum advantage of caching; I'm just trying to do this in a more general way). Is this possible in the current version of Rust? If not, will it ever be possible?</p>\n\n<p>(I'm imagining creating a 2-3 Tree of u32s by writing <code>BTree&lt;u32, 3&gt;</code>, or a 2-3-4 Tree of u32s by writing <code>BTree&lt;u32, 4&gt;</code>)</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 3039, "user_id": 2851815, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/37MCt.png?s=128&g=1", "display_name": "\u043d\u0430\u0431\u0438\u044f\u0447\u043b\u044d\u0432\u044d\u043b\u0438", "link": "https://stackoverflow.com/users/2851815/%d0%bd%d0%b0%d0%b1%d0%b8%d1%8f%d1%87%d0%bb%d1%8d%d0%b2%d1%8d%d0%bb%d0%b8"}, "edited": false, "score": 0, "creation_date": 1460733463, "post_id": 36650238, "comment_id": 60895108, "body": "<code>vector[0].0 + &amp;vector[0].1</code>, but it will move out of <code>vector[0].0</code>"}], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 4, "last_activity_date": 1460735840, "creation_date": 1460735840, "answer_id": 36651788, "question_id": 36650238, "link": "https://stackoverflow.com/questions/36650238/string-concatenation-from-vector-tuple/36651788#36651788", "title": "String concatenation from vector tuple", "body": "<p>This does not work because concatenation is defined only on <code>String</code>, and it consumes its left operand:</p>\n\n<pre><code>let s = \"hello \".to_string();\nlet c = s + \"world\";\nprintln!(\"{}\", c);  // hello world\nprintln!(\"{}\", s);  // compilation error\n</code></pre>\n\n<p>Therefore it needs by-value access to the string, but it cannot be done with indexing on a vector - they can only return references into the vector, not values.</p>\n\n<p>There are several ways to overcome this, for example, you can clone the string:</p>\n\n<pre><code>let string = vector[0].0.clone() + &amp;vector[0].1;\n</code></pre>\n\n<p>Or you can use formatting:</p>\n\n<pre><code>let string = format!(\"{}{}\", vector[0].0, vector[0].1);\n</code></pre>\n\n<p>Or you can take the value out of the vector with <a href=\"http://doc.rust-lang.org/collections/vec/struct.Vec.html#method.remove\" rel=\"nofollow\"><code>remove()</code></a> or <a href=\"http://doc.rust-lang.org/collections/vec/struct.Vec.html#method.swap_remove\" rel=\"nofollow\"><code>swap_remove()</code></a>:</p>\n\n<pre><code>let string = match vector.swap_remove(0) {\n    (left, right) =&gt; left + right\n};\n</code></pre>\n\n<p>The latter, naturally, is appropriate if it's okay for you to lose the state of the vector. If you want to do this for the whole vector, it is better to iterate it by value, consuming it in the process:</p>\n\n<pre><code>for (left, right) in vector {\n    let string = left + right;\n}\n</code></pre>\n"}], "owner": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 260, "favorite_count": 1, "accepted_answer_id": 36651788, "answer_count": 1, "score": 0, "last_activity_date": 1460735840, "creation_date": 1460731388, "question_id": 36650238, "link": "https://stackoverflow.com/questions/36650238/string-concatenation-from-vector-tuple", "title": "String concatenation from vector tuple", "body": "<p>This is as simple as it gets, yet I have no clue why it doesn't work.</p>\n\n<pre><code>fn main() {\n    let vector = vec![(\"foo\".to_string(), \"bar\".to_string())];\n    let string = vector[0].0 + vector[0].1;\n}\n</code></pre>\n\n<p>Error</p>\n\n<pre><code>src/main.rs:3:29: 3:40 error: mismatched types:\n expected `&amp;str`,\n    found `collections::string::String`\n(expected &amp;-ptr,\n    found struct `collections::string::String`) [E0308]\nsrc/main.rs:3   let string = vector[0].0 + vector[0].1;\n                                           ^~~~~~~~~~~\n</code></pre>\n\n<p>So then I change it to this:</p>\n\n<pre><code>fn main() {\n    let vector = vec![(\"foo\".to_string(), \"bar\".to_string())];\n    let string = &amp;*vector[0].0 + &amp;*vector[0].1;\n}\n</code></pre>\n\n<p>Get another error</p>\n\n<pre><code>src/main.rs:3:15: 3:28 error: binary operation `+` cannot be applied to type `&amp;str` [E0369]\nsrc/main.rs:3   let string = &amp;*vector[0].0 + &amp;*vector[0].1;\n                             ^~~~~~~~~~~~~\nsrc/main.rs:3:15: 3:28 help: run `rustc --explain E0369` to see a detailed explanation\nsrc/main.rs:3:15: 3:28 note: an implementation of `std::ops::Add` might be missing for `&amp;str`\nsrc/main.rs:3   let string = &amp;*vector[0].0 + &amp;*vector[0].1;\n                             ^~~~~~~~~~~~~\n</code></pre>\n\n<p>I've exhausted all the combinations I could think of. What am I missing here?</p>\n"}, {"tags": ["thread-safety", "rust", "unsafe"], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 4, "last_activity_date": 1582133096, "last_edit_date": 1582133096, "creation_date": 1460736208, "answer_id": 36651909, "question_id": 36649865, "link": "https://stackoverflow.com/questions/36649865/how-can-i-guarantee-that-a-type-that-doesnt-implement-sync-can-actually-be-safe/36651909#36651909", "title": "How can I guarantee that a type that doesn&#39;t implement Sync can actually be safely shared between threads?", "body": "<p>One way would be to use a wrapper with an <code>unsafe impl Sync</code>:</p>\n\n<pre><code>use crossbeam; // 0.7.3\nuse std::cell::RefCell;\n\nfn main() {\n    struct Wrap(RefCell&lt;i32&gt;);\n    unsafe impl Sync for Wrap {};\n    let val = Wrap(RefCell::new(1));\n\n    crossbeam::scope(|scope| {\n        scope.spawn(|_| *val.0.borrow());\n    })\n    .unwrap();\n}\n</code></pre>\n\n<p>As usual with <code>unsafe</code>, it is now up to you to guarantee that the inner <code>RefCell</code> is indeed never accessed from multiple threads simultaneously. As far as I understand, this should be enough for it not to cause a data race.</p>\n"}, {"comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 3, "creation_date": 1461008998, "post_id": 36695408, "comment_id": 60993840, "body": "This is allowed because <code>RefCell&lt;i32&gt;</code> implements <code>Send</code>."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 8, "last_activity_date": 1582132811, "last_edit_date": 1582132811, "creation_date": 1460986086, "answer_id": 36695408, "question_id": 36649865, "link": "https://stackoverflow.com/questions/36649865/how-can-i-guarantee-that-a-type-that-doesnt-implement-sync-can-actually-be-safe/36695408#36695408", "title": "How can I guarantee that a type that doesn&#39;t implement Sync can actually be safely shared between threads?", "body": "<p>Another solution for this case is to move a mutable reference to the item into the thread, even though mutability isn't required. Since there can be only one mutable reference, the compiler knows that it's safe to be used in another thread.</p>\n\n<pre><code>use crossbeam; // 0.7.3\nuse std::cell::RefCell;\n\nfn main() {\n    let mut val = RefCell::new(1);\n    let val2 = &amp;mut val;\n\n    crossbeam::scope(|scope| {\n        scope.spawn(move |_| *val2.borrow());\n    })\n    .unwrap();\n}\n</code></pre>\n\n<p>As <a href=\"https://stackoverflow.com/questions/36649865/how-can-i-guarantee-that-a-type-that-doesnt-implement-sync-can-actually-be-safe#comment60993840_36695408\">bluss points out</a>:</p>\n\n<blockquote>\n  <p>This is allowed because <code>RefCell&lt;i32&gt;</code> implements <code>Send</code>.</p>\n</blockquote>\n"}], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1489, "favorite_count": 0, "accepted_answer_id": 36651909, "answer_count": 2, "score": 6, "last_activity_date": 1582133096, "creation_date": 1460730427, "last_edit_date": 1582133047, "question_id": 36649865, "link": "https://stackoverflow.com/questions/36649865/how-can-i-guarantee-that-a-type-that-doesnt-implement-sync-can-actually-be-safe", "title": "How can I guarantee that a type that doesn&#39;t implement Sync can actually be safely shared between threads?", "body": "<p>I have code that creates a <code>RefCell</code> and then wants to pass a reference to that <code>RefCell</code> to a <strong>single</strong> thread:</p>\n\n<pre><code>use crossbeam; // 0.7.3\nuse std::cell::RefCell;\n\nfn main() {\n    let val = RefCell::new(1);\n\n    crossbeam::scope(|scope| {\n        scope.spawn(|_| *val.borrow());\n    })\n    .unwrap();\n}\n</code></pre>\n\n<p>In the complete code, I'm using a type that has a <code>RefCell</code> embedded in it (a <a href=\"https://docs.rs/typed-arena/2.0.1/typed_arena/struct.Arena.html\" rel=\"nofollow noreferrer\"><code>typed_arena::Arena</code></a>). I'm using <a href=\"https://crates.io/crates/crossbeam\" rel=\"nofollow noreferrer\">crossbeam</a> to ensure that the thread does not outlive the reference it takes.</p>\n\n<p>This produces the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: `std::cell::RefCell&lt;i32&gt;` cannot be shared between threads safely\n --&gt; src/main.rs:8:15\n  |\n8 |         scope.spawn(|_| *val.borrow());\n  |               ^^^^^ `std::cell::RefCell&lt;i32&gt;` cannot be shared between threads safely\n  |\n  = help: the trait `std::marker::Sync` is not implemented for `std::cell::RefCell&lt;i32&gt;`\n  = note: required because of the requirements on the impl of `std::marker::Send` for `&amp;std::cell::RefCell&lt;i32&gt;`\n  = note: required because it appears within the type `[closure@src/main.rs:8:21: 8:38 val:&amp;std::cell::RefCell&lt;i32&gt;]`\n</code></pre>\n\n<p>I believe I understand why this error happens: <code>RefCell</code> is not designed to be called concurrently from multiple threads, and since it uses internal mutability, the normal mechanism of requiring a single mutable borrow won't prevent multiple concurrent actions. This is even documented on <a href=\"https://doc.rust-lang.org/std/marker/trait.Sync.html\" rel=\"nofollow noreferrer\"><code>Sync</code></a>:</p>\n\n<blockquote>\n  <p>Types that are not <code>Sync</code> are those that have \"interior mutability\" in a non-thread-safe form, such as <a href=\"https://doc.rust-lang.org/std/cell/struct.Cell.html\" rel=\"nofollow noreferrer\"><code>cell::Cell</code></a> and <a href=\"https://doc.rust-lang.org/std/cell/struct.RefCell.html\" rel=\"nofollow noreferrer\"><code>cell::RefCell</code></a>.</p>\n</blockquote>\n\n<p>This is all well and good, but <em>in this case</em>, I know that only one thread is able to access the <code>RefCell</code>. How can I affirm to the compiler that I understand what I am doing and I ensure this is the case? Of course, if my reasoning that this is actually safe is incorrect, I'd be more than happy to be told why.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1460728177, "post_id": 36648769, "comment_id": 60891245, "body": "Or <a href=\"http://stackoverflow.com/q/25233925/155423\">Can&#39;t figure out a function to return a reference to a given type stored in RefCell&lt;Box&lt;Any&gt;&gt;</a> or <a href=\"http://stackoverflow.com/questions/29401626/encapsulation-and-refcell\">Encapsulation and RefCell</a>. All found via searching for &quot;rust return refcell&quot;."}, {"owner": {"reputation": 285, "user_id": 6198487, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/lUrJE.png?s=128&g=1", "display_name": "Tsukki", "link": "https://stackoverflow.com/users/6198487/tsukki"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1460728646, "post_id": 36648769, "comment_id": 60891629, "body": "Not a duplicate. See edit."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1460729196, "post_id": 36648769, "comment_id": 60892073, "body": "<i>There is not even <code>RefCell</code> usage</i>  \u2014 all three linked posts definitely use <code>RefCell</code>, so I&#39;m not sure how this statement arises. The problem you are asking is the same as all three posts - you <i>cannot</i> preserve the reference from <code>borrow</code> any longer than the value returned from <code>borrow</code>; that&#39;s the entire point of <code>RefCell</code>. Wrapping it in an <code>Rc</code> or putting different types inside can not change that."}, {"owner": {"reputation": 285, "user_id": 6198487, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/lUrJE.png?s=128&g=1", "display_name": "Tsukki", "link": "https://stackoverflow.com/users/6198487/tsukki"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1460731197, "post_id": 36648769, "comment_id": 60893560, "body": "Sorry, but did you even read the answers? The answer to the first post you linked removed all uses of <code>RefCell</code>. The answer to the second post clones an <code>Rc</code>, which is not part of my <code>Foo</code>. The borrow was only used to make the clone."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 1, "creation_date": 1461121947, "post_id": 36648769, "comment_id": 61049692, "body": "<i>The answer to the first post you linked removed all uses of <code>RefCell</code>.</i> That&#39;s because you just can&#39;t return a borrowed pointer to a value owned by <code>RefCell</code>; it&#39;s not memory-safe. Somebody could clear the contents of the <code>RefCell</code> while somebody else still has a pointer to it. A <code>&amp;T</code> is supposed to be a pointer to an <b>immutable</b> <code>T</code>."}], "owner": {"reputation": 285, "user_id": 6198487, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/lUrJE.png?s=128&g=1", "display_name": "Tsukki", "link": "https://stackoverflow.com/users/6198487/tsukki"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 146, "favorite_count": 0, "closed_date": 1460727985, "answer_count": 0, "score": 0, "last_activity_date": 1460729015, "creation_date": 1460727517, "last_edit_date": 1460729015, "question_id": 36648769, "link": "https://stackoverflow.com/questions/36648769/return-struct-member-inside-rcrefcellfoot-borrow", "closed_reason": "Duplicate", "title": "Return struct member inside Rc&lt;RefCell&lt;Foo&lt;T&gt;&gt;&gt; borrow", "body": "<p><strong>EDIT: Not a duplicate. Please read the entire post.</strong></p>\n\n<p>Say I have a struct <code>Foo&lt;T&gt;</code>:</p>\n\n<pre><code>struct Foo&lt;T&gt; {\n  data: T\n}\n</code></pre>\n\n<p>which is used by an implementation that works with objects of type <code>Rc&lt;RefCell&lt;Foo&lt;T&gt;&gt;&gt;</code>. I need to return a reference to the data inside of a <code>Foo&lt;T&gt;</code>:</p>\n\n<pre><code>fn get(&amp;self, some_arg) -&gt; &amp;T {\n  // ... some code ...\n  // foo is of type Rc&lt;RefCell&lt;Foo&lt;T&gt;&gt;&gt;\n  &amp;foo.borrow().data  // this doesn't work\n}\n</code></pre>\n\n<p>But the <code>Ref&lt;'b, T&gt;</code> returned by <code>foo.borrow()</code> is only alive for the scope of <code>get()</code>, so the compiler complains. I want to be able to do this:</p>\n\n<pre><code>// bar has the get() method above\nlet val = bar.get(some_arg);  // bind val to a &amp;T\n// do stuff with val\n</code></pre>\n\n<p>How do I do this?</p>\n\n<p><strong>EDIT:</strong> I've already read all other SO posts that could be relevant. This is not a duplicate. The other posts suggested by Shepmaster all have different types (not <code>Rc&lt;RefCell&lt;Foo&lt;T&gt;&gt;&gt;</code>): 1) There is no <code>Rc</code>-wrapped member in <code>Foo</code>. 2) There is not even <code>RefCell</code> usage in the second \"duplicate\" post.</p>\n"}, {"tags": ["csv", "rust", "lifetime"], "answers": [{"tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": true, "score": 2, "last_activity_date": 1460719571, "creation_date": 1460719571, "answer_id": 36645898, "question_id": 36645452, "link": "https://stackoverflow.com/questions/36645452/variable-does-not-live-long-enough-when-storing-a-csvdecodedrecords-iterator/36645898#36645898", "title": "variable does not live long enough when storing a csv::DecodedRecords iterator", "body": "<p>According to the documentation, <a href=\"http://burntsushi.net/rustdoc/csv/struct.Reader.html#method.decode\" rel=\"nofollow\"><code>Reader::decode</code> is defined as</a>:</p>\n\n<pre><code>fn decode&lt;'a, D: Decodable&gt;(&amp;'a mut self) -&gt; DecodedRecords&lt;'a, R, D&gt;\n</code></pre>\n\n<p>That is <code>reader.decode()</code> cannot outlive <code>reader</code> (because of <code>'a</code>).\nAnd with this declaration:</p>\n\n<pre><code>struct CSVBarSource {\n    records: csv::DecodedRecords&lt;'static, std::fs::File, BarRecord&gt;,\n                              // ^~~~~~~\n}\n</code></pre>\n\n<p><code>reader</code> would need a <code>'static</code> lifetime, that is it would need to live forever, which it does not hence the error you get \u201c<code>reader</code> does not live long enough\u201d.</p>\n\n<p>You should store <code>reader</code> directly in <code>CSVBarSource</code>:</p>\n\n<pre><code>struct CSVBarSource {\n    reader: csv::Reader&lt;std::fs::File&gt;,\n}\n</code></pre>\n\n<p>And call <code>decode</code> only as needed.</p>\n"}], "owner": {"reputation": 13, "user_id": 6208795, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/81ca44886cd429f8266b2b60e55c1794?s=128&d=identicon&r=PG&f=1", "display_name": "Mike Fern", "link": "https://stackoverflow.com/users/6208795/mike-fern"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 94, "favorite_count": 0, "accepted_answer_id": 36645898, "answer_count": 1, "score": 1, "last_activity_date": 1460727232, "creation_date": 1460718314, "last_edit_date": 1460727232, "question_id": 36645452, "link": "https://stackoverflow.com/questions/36645452/variable-does-not-live-long-enough-when-storing-a-csvdecodedrecords-iterator", "title": "variable does not live long enough when storing a csv::DecodedRecords iterator", "body": "<p>I'm trying to create an iterator trait that provides a specific type of resource, so I can implement multiple source types. I'd like to create a source for reading from a CSV file, a binary etc.. </p>\n\n<p>I'm using the <code>rust-csv</code> library for deserializing CSV data:</p>\n\n<pre><code>#[derive(RustcDecodable)]\nstruct BarRecord {\n    bar: u32\n}\n\ntrait BarSource : Iterator {}\n\nstruct CSVBarSource {\n    records: csv::DecodedRecords&lt;'static, std::fs::File, BarRecord&gt;,\n}\n\nimpl CSVBarSource {\n    pub fn new(path: String) -&gt; Option&lt;CSVBarSource&gt; {\n        match csv::Reader::from_file(path) {\n            Ok(reader) =&gt; Some(CSVBarSource { records: reader.decode() }),\n            Err(_) =&gt; None\n        }\n    }\n}\n\nimpl Iterator for CSVBarSource {\n    type Item = BarRecord;\n\n    fn next(&amp;mut self) -&gt; Option&lt;BarRecord&gt; {\n        match self.records.next() {\n            Some(Ok(e)) =&gt; Some(e),\n            _ =&gt; None\n        }\n    }\n}\n</code></pre>\n\n<p>I cannot seem to store a reference to the <code>DecodedRecords</code> iterator returned by the CSV reader due to lifetime issues:</p>\n\n<blockquote>\n  <p>error: reader does not live long enough</p>\n</blockquote>\n\n<p>How can I store a reference to the decoded records iterator and what am I doing wrong?</p>\n"}, {"tags": ["string", "rust"], "answers": [{"tags": [], "owner": {"reputation": 2371, "user_id": 270006, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/874bcba40024d48919097b29a25e852d?s=128&d=identicon&r=PG", "display_name": "\u0179V -", "link": "https://stackoverflow.com/users/270006/%c5%b9v"}, "is_accepted": false, "score": 2, "last_activity_date": 1460656322, "last_edit_date": 1460656322, "creation_date": 1460655998, "answer_id": 36630377, "question_id": 36630238, "link": "https://stackoverflow.com/questions/36630238/is-there-a-less-verbose-way-to-get-a-default-string-from-a-vector-of-strings/36630377#36630377", "title": "Is there a less verbose way to get a default string from a vector of strings?", "body": "<p>It is important to remember the coercion rules of <a href=\"https://doc.rust-lang.org/book/strings.html\" rel=\"nofollow\">strings</a> when deciding between <code>&amp;str</code> and <code>String</code>.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main()\n{\n     let words = vec![\"apple\", \"orange\", \"banana\"]; // Vec&lt;&amp;str&gt;\n     let word = match words.get(2) {               // &amp;str\n         Some(&amp;s) =&gt; s\n         None =&gt; \"nil\"\n     };\n     println!(\"word: {}\", word);\n }\n</code></pre>\n\n<p>You could consolidate the <code>words</code> and <code>word</code> matching code if length was still a concern for you, but I think this (perhaps including type annotations) is the most succinct without compromising clarity.</p>\n"}, {"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 2, "last_activity_date": 1460656223, "creation_date": 1460656223, "answer_id": 36630434, "question_id": 36630238, "link": "https://stackoverflow.com/questions/36630238/is-there-a-less-verbose-way-to-get-a-default-string-from-a-vector-of-strings/36630434#36630434", "title": "Is there a less verbose way to get a default string from a vector of strings?", "body": "<p>I'm not exactly sure, what you want to achieve, but this is probably the best way to do exactly what you did in your code:</p>\n\n<pre><code>fn main() {\n    let words = vec![\"apple\", \"orange\", \"banana\"];\n    let word = words.get(4).cloned().unwrap_or(\"nil\").to_string();\n    println!(\"word: {}\", word);\n}\n</code></pre>\n\n<p>The tricky part is <code>cloned()</code>: the <code>get()</code> method will return an optional reference to the value inside of the vector. But since the vector already holds references, we end up with <code>Option&lt;&amp;&amp;str&gt;</code> (two references). The <code>cloned()</code> call removes one reference, thus we have <code>Option&lt;&amp;str&gt;</code>.</p>\n\n<p>Also note that in this example the final <code>to_string()</code> call isn't necessary -- we can do everything only with <code>&amp;str</code>.</p>\n"}, {"comments": [{"owner": {"reputation": 4973, "user_id": 236671, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/hG3tE.png?s=128&g=1", "display_name": "shinkou", "link": "https://stackoverflow.com/users/236671/shinkou"}, "edited": false, "score": 0, "creation_date": 1460657016, "post_id": 36630461, "comment_id": 60856766, "body": "Very nice and clear.  I missed the <code>Some(&amp;s)</code> in my first try with <code>&amp;str</code>.  Thanks!"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 5, "last_activity_date": 1460656303, "creation_date": 1460656303, "answer_id": 36630461, "question_id": 36630238, "link": "https://stackoverflow.com/questions/36630238/is-there-a-less-verbose-way-to-get-a-default-string-from-a-vector-of-strings/36630461#36630461", "title": "Is there a less verbose way to get a default string from a vector of strings?", "body": "<p>There are two things that will immediately help shorten this program:</p>\n\n<ol>\n<li>Type inference: you very rarely have to write types out</li>\n<li><code>&amp;str</code>: way too many calls to <code>to_string</code> here</li>\n</ol>\n\n<p>I would write it as:</p>\n\n<pre><code>fn main() {\n    let words = vec![\"apple\", \"orange\", \"banana\"];\n    let word = match words.get(4) {\n        Some(&amp;s) =&gt; s,\n        None =&gt; \"nil\"\n    };\n    println!(\"word: {}\", word);\n}\n</code></pre>\n\n<p>Note that <code>Vec&lt;T&gt;::get</code> returns an <code>Option&lt;&amp;T&gt;</code>, thus here an <code>Option&lt;&amp;&amp;str&gt;</code>, since we want <code>s</code> to be of type <code>&amp;str</code> (single <code>&amp;</code>), we use <code>Some(&amp;s)</code> as the pattern. Another option would be <code>Some(s) =&gt; *s,</code> (here, having <code>s</code> be <code>&amp;&amp;str</code> and dereferencing it).</p>\n\n<p>Of course, this can all be further reduced by looking at the specific API of <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html\"><code>Option</code></a>. Somewhat less universal, but <code>Option</code> and <code>Result</code> are very often used in Rust (so much they are in the prelude!!!) and therefore it's worth learning their APIs.</p>\n\n<p>In this case <code>unwrap_or</code> will provide either the value inside <code>Option</code> or the value passed to it:</p>\n\n<pre><code>fn main() {\n    let words = vec![\"apple\", \"orange\", \"banana\"];\n    let word = *words.get(4).unwrap_or(&amp;\"nil\");\n    println!(\"word: {}\", word);\n}\n</code></pre>\n\n<p>Bit of reference juggling to line-up the types (aka type Tetris) and it's all good.</p>\n"}], "owner": {"reputation": 4973, "user_id": 236671, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/hG3tE.png?s=128&g=1", "display_name": "shinkou", "link": "https://stackoverflow.com/users/236671/shinkou"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 333, "favorite_count": 0, "accepted_answer_id": 36630461, "answer_count": 3, "score": 0, "last_activity_date": 1460657796, "creation_date": 1460655543, "last_edit_date": 1460657796, "question_id": 36630238, "link": "https://stackoverflow.com/questions/36630238/is-there-a-less-verbose-way-to-get-a-default-string-from-a-vector-of-strings", "title": "Is there a less verbose way to get a default string from a vector of strings?", "body": "<p>I've tried using <code>&amp;str</code> instead of <code>String</code>, but that has compilation errors. I ended up with:</p>\n\n<pre><code>fn main()\n{\n    let words: Vec&lt;String&gt; = vec![\"apple\".to_string(), \"orange\".to_string(), \"banana\".to_string()];\n    let word: String = match words.get(4)\n    {\n        Some(s) =&gt; s.to_string()\n        , None =&gt; \"nil\".to_string()\n    };\n    println!(\"word: {}\", word);\n}\n</code></pre>\n"}, {"tags": ["debugging", "rust", "pdb-files"], "answers": [{"tags": [], "owner": {"reputation": 4985, "user_id": 1164485, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/87d7172258eb6f62a87cbc2fc3108a05?s=128&d=identicon&r=PG", "display_name": "cynic", "link": "https://stackoverflow.com/users/1164485/cynic"}, "is_accepted": true, "score": 3, "last_activity_date": 1461594422, "creation_date": 1461594422, "answer_id": 36843452, "question_id": 36621130, "link": "https://stackoverflow.com/questions/36621130/how-can-i-inspect-variable-values-while-debugging-msvc-abi-rust-programs/36843452#36843452", "title": "How can I inspect variable values while debugging MSVC ABI Rust programs?", "body": "<p>Features don't exist until they're implemented. Rust is built upon LLVM and <a href=\"http://lists.llvm.org/pipermail/llvm-dev/2015-October/091847.html\" rel=\"nofollow\">full PDB support has only recently been considered for LLVM</a>. For now LLVM has only a limited PDB support, with the limitations best described on the <a href=\"http://clang.llvm.org/docs/MSVCCompatibility.html\" rel=\"nofollow\">Clang project's MSVC compatibility page</a>. In my opinion, it's best to wait until the support is there, although for other programming languages <a href=\"https://github.com/rainers/cv2pdb\" rel=\"nofollow\">interesting workarounds</a> have been implemented.</p>\n"}], "owner": {"reputation": 4985, "user_id": 1164485, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/87d7172258eb6f62a87cbc2fc3108a05?s=128&d=identicon&r=PG", "display_name": "cynic", "link": "https://stackoverflow.com/users/1164485/cynic"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1833, "favorite_count": 1, "accepted_answer_id": 36843452, "answer_count": 1, "score": 11, "last_activity_date": 1461594422, "creation_date": 1460631680, "last_edit_date": 1460642139, "question_id": 36621130, "link": "https://stackoverflow.com/questions/36621130/how-can-i-inspect-variable-values-while-debugging-msvc-abi-rust-programs", "title": "How can I inspect variable values while debugging MSVC ABI Rust programs?", "body": "<p>I've downloaded the MSVC ABI version of Rust 1.7.0 and followed the guessing game section from the docs.</p>\n\n<p>I notice that the builds use the native toolchain (Visual Studio 2015 Update 2 in my case) and therefore generate native PDBs (debugging symbols) consumable by native debuggers, such as WinDBG, CDB or the Visual Studio debugger. I can easily set breakpoints, step into standard library source and so on.</p>\n\n<p>What I cannot do is to inspect variable values. Regardless of the debugger used, the 'Locals' display is empty.</p>\n\n<p>From what I can gather, the Visual Rust/RustDT IDEs display locals when using GDB or LLDB as a backend, not the native Windows debugging engine. I'm not entirely sure if I can use these to debug Rust programs compiled for MSVC ABI (with PDBs and so on). </p>\n\n<p>If I want to have the necessary debugging experience, is my only option to switch to the GNU ABI? Barring that, is there an easy way to map to Rust symbols (variable values) from the raw debugging tools (registers, memory map)?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 131, "user_id": 4871468, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c3e3d862cfdecf7fc2eafa8f4408657b?s=128&d=identicon&r=PG", "display_name": "Restioson", "link": "https://stackoverflow.com/users/4871468/restioson"}, "edited": false, "score": 0, "creation_date": 1512222846, "post_id": 36614695, "comment_id": 82175617, "body": "Since most primitives (including u16) impl Copy it&#39;s more idiomatic to just take them by value since they&#39;ll be copied, afaict"}], "answers": [{"tags": [], "owner": {"reputation": 30697, "user_id": 31667, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/082b069c287878a1bd5731f44c8f10e7?s=128&d=identicon&r=PG", "display_name": "viraptor", "link": "https://stackoverflow.com/users/31667/viraptor"}, "is_accepted": false, "score": 3, "last_activity_date": 1460612773, "creation_date": 1460612773, "answer_id": 36614722, "question_id": 36614695, "link": "https://stackoverflow.com/questions/36614695/binary-operation-cannot-be-applied-to-type/36614722#36614722", "title": "binary operation `|` cannot be applied to type", "body": "<p>You probably want to <code>or</code> the value, not the reference.</p>\n\n<pre><code>let mut addr: u16 = *op | 0xFFF;\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "edited": false, "score": 0, "creation_date": 1460614473, "post_id": 36614742, "comment_id": 60826674, "body": "Now I know that there is no apparent reason to implement, using *, but could be implemented for &amp;mut, it&#39;s just a hypothetical question"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "edited": false, "score": 1, "creation_date": 1460615434, "post_id": 36614742, "comment_id": 60827164, "body": "@AngelAngel Well, sure, you <i>could</i> implement it for <code>&amp;mut</code>.  And <code>Box</code>.  And <code>Rc</code>.  And <code>Arc</code>.  And <code>P</code> (used in <code>rustc</code>).  And <code>Cell</code>.  And <code>*const</code>.  And <code>*mut</code>.  There are probably more, but you have to <i>stop</i> at some point; might as well be the minimal set."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 1, "creation_date": 1460618304, "post_id": 36614742, "comment_id": 60828852, "body": "@DK. Sure, but <i>I think</i> that implementing it only for immutable references is pretty arbitrary and leads to confusion :/  Implementing it for raw pointers is highly unsafe. So with an impl for <code>&amp;mut</code>, <code>BitOr</code> would be implemented for all safe primitive types."}], "tags": [], "owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "is_accepted": true, "score": 7, "last_activity_date": 1460612886, "creation_date": 1460612886, "answer_id": 36614742, "question_id": 36614695, "link": "https://stackoverflow.com/questions/36614695/binary-operation-cannot-be-applied-to-type/36614742#36614742", "title": "binary operation `|` cannot be applied to type", "body": "<p>Because the <a href=\"https://doc.rust-lang.org/std/ops/trait.BitOr.html\" rel=\"noreferrer\">BitOr trait is not implemented</a> for <code>&amp;mut u16</code>.. however, it is for <code>&amp;u16</code>.</p>\n\n<p><a href=\"https://i.stack.imgur.com/VQ5mN.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/VQ5mN.png\" alt=\"BitOr trait\"></a></p>\n\n<p>As viraptor points out, you could also dereference it with:</p>\n\n<pre><code>*op | 0xFFF;\n</code></pre>\n\n<p>.. which would make it a <code>u16</code>.. which also implements the <code>BitOr</code> trait as you can see above.</p>\n"}], "owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1192, "favorite_count": 0, "accepted_answer_id": 36614742, "answer_count": 2, "score": 4, "last_activity_date": 1460615118, "creation_date": 1460612651, "last_edit_date": 1460615118, "question_id": 36614695, "link": "https://stackoverflow.com/questions/36614695/binary-operation-cannot-be-applied-to-type", "title": "binary operation `|` cannot be applied to type", "body": "<p>I have this error </p>\n\n<blockquote>\n  <p>error: binary operation <code>|</code> cannot be applied to type <code>&amp;mut u16</code></p>\n</blockquote>\n\n<p>With this code,</p>\n\n<pre><code>fn f_op(op: &amp;mut u16) {\n\n    let mut addr: u16 = (op | 0xFFF);\n    ..//\n}\n</code></pre>\n\n<p>Solve it change <code>&amp;mut</code> to <code>&amp;</code></p>\n\n<pre><code>fn f_op(op: &amp; u16) {\n</code></pre>\n\n<p>But I wonder why I can not use <code>|</code> with <code>&amp;mut</code>, sure there exists a good reason, but someone can explain to me.</p>\n\n<p><kbd><a href=\"https://play.rust-lang.org/?gist=f0c3f998171e9bfa77d6fec94807911b&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">Play-Rust</a></kbd></p>\n"}]