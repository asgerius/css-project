[{"tags": ["string", "rust", "lifetime"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1490827697, "post_id": 43105441, "comment_id": 73292359, "body": "You cannot. Since <code>to_lowercase</code> returns a <code>String</code> and nothing owns that <code>String</code>, any references to it will become invalid as soon as the closure ends and the memory is deallocated. That&#39;s why you get the error that the <code>String</code> doesn&#39;t live long enough. If you could, you&#39;d end up triggering memory unsafety. Your only option is to return the <code>String</code>, transferring ownership of the allocation. That may involve you changing your <code>Term</code> struct likewise."}, {"owner": {"reputation": 28096, "user_id": 375966, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/add92525ab635b5119671269d24c1449?s=128&d=identicon&r=PG", "display_name": "Afshin Mehrabani", "link": "https://stackoverflow.com/users/375966/afshin-mehrabani"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490860759, "post_id": 43105441, "comment_id": 73303718, "body": "thanks @Shepmaster. What do you mean by returning the <code>String</code> and then transferring the ownership? could you please provide a short example?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490878776, "post_id": 43105441, "comment_id": 73316305, "body": "Even better, there&#39;s an <a href=\"https://doc.rust-lang.org/stable/book/ownership.html\" rel=\"nofollow noreferrer\">entire chapter of <i>The Rust Programming Language</i> dedicated to ownership</a>."}], "owner": {"reputation": 28096, "user_id": 375966, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/add92525ab635b5119671269d24c1449?s=128&d=identicon&r=PG", "display_name": "Afshin Mehrabani", "link": "https://stackoverflow.com/users/375966/afshin-mehrabani"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 32, "favorite_count": 0, "closed_date": 1490827537, "answer_count": 0, "score": 0, "last_activity_date": 1490827483, "creation_date": 1490827138, "last_edit_date": 1490827483, "question_id": 43105441, "link": "https://stackoverflow.com/questions/43105441/converting-string-to-str-with-lifetime", "closed_reason": "Duplicate", "title": "Converting String to &amp;str with lifetime", "body": "<p>I have a struct with one member:</p>\n\n<pre><code>pub struct Term&lt;'a&gt;(pub &amp;'a str);\n</code></pre>\n\n<p>I also have a <code>Vec&lt;Term&gt;</code> and I want to convert the <code>Vec</code> to <code>Iterator</code> and then lowercase the <code>&amp;str</code>, like:</p>\n\n<pre><code>pub fn add_vec(document: Vec&lt;Term&lt;'a&gt;&gt;) {\n    let m_term = document.into_iter().map(\n        |dx| Term(dx.0.to_lowercase().as_str())\n    ).collect::&lt;Vec&lt;_&gt;&gt;();\n}\n</code></pre>\n\n<p>but I'm seeing this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: borrowed value does not live long enough\n  --&gt; src/tfidf.rs:47:23\n   |\n47 |             |dx| Term(dx.0.to_lowercase().as_str())\n   |                       ^^^^^^^^^^^^^^^^^^^         - temporary value only lives until here\n   |                       |\n   |                       temporary value created here\n   |\nnote: borrowed value must be valid for the lifetime 'a as defined on the block at 44:55...\n</code></pre>\n\n<p>I think I understand what the problem is, but I don't know how can I convert the <code>String</code> result of <code>to_lowercase()</code> to a <code>&amp;str</code> with lifetime of <code>'a</code>. </p>\n"}, {"tags": ["rust", "borrowing"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1490820507, "post_id": 43103520, "comment_id": 73289315, "body": "Welcome to Stack Overflow! This is an <i>extremely common question</i>; <a href=\"http://stackoverflow.com/search?q=%5Brust%5D+cannot+borrow+as+mutable+because+it+is+also+borrowed+as+immutable+is%3Aq\">there are now <b>94 questions with the same error message</b></a>. SO expects that you have <a href=\"https://meta.stackoverflow.com/q/261592/155423\">put a lot of effort into your question before asking</a>, so you should take the time to read through those existing questions, then explain how <i>this</i> question is different from those. If people don&#39;t read existing answers, there&#39;s not much reason to have a site like SO."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490820863, "post_id": 43103520, "comment_id": 73289496, "body": "Additionally, I&#39;d highly suggest using more prose to describe your problem in the body. This will also naturally translate into a better <i>title</i>, which is invaluable. Saying &quot;something like this&quot; forces a future answer searcher to read, parse, and understand your code before being able to understand if the solutions will be useful to them. It forces the same effort on every potential answerer, slowing down or otherwise discouraging any potential answerers."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1490821095, "post_id": 43103520, "comment_id": 73289628, "body": "Adding on, it&#39;s a <i>very good idea</i> to read through the free online documentation provided by the Rust community. <a href=\"https://doc.rust-lang.org/stable/book/\" rel=\"nofollow noreferrer\"><i>The Rust Programming Language</i></a> explains the rationale for many of Rust&#39;s decisions, as well as showcasing examples. The <a href=\"https://doc.rust-lang.org/stable/book/references-and-borrowing.html#the-rules\" rel=\"nofollow noreferrer\">chapter on references and borrowing</a> covers the fact that you may not have any other references at the same time you have a mutable reference, for example."}, {"owner": {"reputation": 1084, "user_id": 4302668, "user_type": "registered", "accept_rate": 44, "profile_image": "https://i.stack.imgur.com/EmGum.png?s=128&g=1", "display_name": "Michael Hewson", "link": "https://stackoverflow.com/users/4302668/michael-hewson"}, "edited": false, "score": 1, "creation_date": 1490828189, "post_id": 43103520, "comment_id": 73292504, "body": "@fazibear for questions like this, I recommend asking on IRC. People are super nice and helpful, and no one gets up in your face about &quot;this question has been asked before&quot;."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490830370, "post_id": 43103520, "comment_id": 73293155, "body": "There&#39;s information on <a href=\"https://www.rust-lang.org/en-US/community.html\" rel=\"nofollow noreferrer\">accessing Rust&#39;s IRC</a> on Rust&#39;s website. Additional resources include the <a href=\"http://users.rust-lang.org/\" rel=\"nofollow noreferrer\">user&#39;s forum</a> and the <a href=\"https://www.reddit.com/r/rust/\" rel=\"nofollow noreferrer\">Rust subreddit</a>, which has a weekly &quot;easy question&quot; thread that is always full of helpful people."}], "answers": [{"comments": [{"owner": {"reputation": 1084, "user_id": 4302668, "user_type": "registered", "accept_rate": 44, "profile_image": "https://i.stack.imgur.com/EmGum.png?s=128&g=1", "display_name": "Michael Hewson", "link": "https://stackoverflow.com/users/4302668/michael-hewson"}, "edited": false, "score": 0, "creation_date": 1490827876, "post_id": 43105460, "comment_id": 73292415, "body": "And if Sprite ends up being this huge structure that you don&#39;t want to copy around, you can put them in a <code>Box</code>."}, {"owner": {"reputation": 1084, "user_id": 4302668, "user_type": "registered", "accept_rate": 44, "profile_image": "https://i.stack.imgur.com/EmGum.png?s=128&g=1", "display_name": "Michael Hewson", "link": "https://stackoverflow.com/users/4302668/michael-hewson"}, "edited": false, "score": 0, "creation_date": 1490827941, "post_id": 43105460, "comment_id": 73292431, "body": "<a href=\"https://play.rust-lang.org/?gist=017bf2f07d346ee393107c9fe0e882e8&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Updated code</a> using <code>Box</code>"}], "tags": [], "owner": {"reputation": 1084, "user_id": 4302668, "user_type": "registered", "accept_rate": 44, "profile_image": "https://i.stack.imgur.com/EmGum.png?s=128&g=1", "display_name": "Michael Hewson", "link": "https://stackoverflow.com/users/4302668/michael-hewson"}, "is_accepted": false, "score": 2, "last_activity_date": 1490827196, "creation_date": 1490827196, "answer_id": 43105460, "question_id": 43103520, "link": "https://stackoverflow.com/questions/43103520/multiple-borrow-in-rust/43105460#43105460", "title": "Multiple borrow in Rust", "body": "<p>Intuitively, <code>Game</code>s should probably own their <code>Sprite</code>s. Here is an updated version reflecting that design change. Also on the <a href=\"https://play.rust-lang.org/?code=struct%20Sprite%20%7B%0A%20%20%20%20position%3A%20i32%2C%0A%7D%0A%0Aimpl%20Sprite%20%7B%0A%20%20%20%20pub%20fn%20left(%26mut%20self)%20%7B%0A%20%20%20%20%20%20%20%20self.position%20%2B%3D%201%3B%0A%20%20%20%20%7D%0A%7D%0A%0Astruct%20Game%20%7B%0A%20%20%20%20sprite%3A%20Sprite%2C%0A%7D%0A%0Aimpl%20Game%20%7B%0A%20%20%20%20pub%20fn%20new(sprite%3A%20Sprite)%20-%3E%20Game%20%7B%0A%20%20%20%20%20%20%20%20Game%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20sprite%3A%20sprite%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%7D%0A%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20sprite%20%3D%20Sprite%7B%20position%3A%203%20%7D%3B%0A%20%20%20%20%0A%20%20%20%20let%20mut%20game%20%3D%20Game%3A%3Anew(sprite)%3B%0A%20%20%20%20%0A%20%20%20%20game.sprite.left()%3B%0A%7D%0A&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">playground</a>.</p>\n\n<pre><code>struct Sprite {\n    position: i32,\n}\n\nimpl Sprite {\n    pub fn left(&amp;mut self) {\n        self.position += 1;\n    }\n}\n\nstruct Game {\n    sprite: Sprite,\n}\n\nimpl Game {\n    pub fn new(sprite: Sprite) -&gt; Game {\n        Game {\n            sprite: sprite\n        }\n    }\n}\n\n\nfn main() {\n    let sprite = Sprite{ position: 3 };\n\n    let mut game = Game::new(sprite);\n\n    game.sprite.left();\n}\n</code></pre>\n"}], "owner": {"reputation": 127, "user_id": 2319486, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/b5b8eec3fd886a7d72b3ac29368f5073?s=128&d=identicon&r=PG", "display_name": "fazibear", "link": "https://stackoverflow.com/users/2319486/fazibear"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 783, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1490827196, "creation_date": 1490819275, "last_edit_date": 1490820343, "question_id": 43103520, "link": "https://stackoverflow.com/questions/43103520/multiple-borrow-in-rust", "title": "Multiple borrow in Rust", "body": "<p>There is any common pattern to implement something like this in Rust? </p>\n\n<p>The error is </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>cannot borrow `sprite` as mutable because it is also borrowed as immutable\n</code></pre>\n\n<p>I understand the problem but have no idea how to implement something like this in Rust.</p>\n\n<pre><code>struct Sprite {\n    position: i32,\n}\n\nimpl Sprite {\n    pub fn left(&amp;mut self) {\n        self.position += 1;\n    }\n}\n\nstruct Game&lt;'g&gt; {\n    sprite: &amp;'g Sprite,\n}\n\nimpl&lt;'g&gt; Game&lt;'g&gt; {\n    pub fn new(sprite: &amp;Sprite) -&gt; Game {\n        Game { sprite: sprite }\n    }\n}\n\nfn main() {\n    let mut sprite = Sprite { position: 3 };\n\n    let game = Game::new(&amp;sprite);\n\n    sprite.left();\n}\n</code></pre>\n\n<p>The code is also available on the <a href=\"https://play.rust-lang.org/?gist=642a6dcb773d6fbcd859821912db49c3&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">playground</a>.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 11, "last_activity_date": 1490808174, "creation_date": 1490808174, "answer_id": 43100162, "question_id": 43100123, "link": "https://stackoverflow.com/questions/43100123/how-can-a-vector-be-both-dynamic-and-known-at-compile-time-in-rust/43100162#43100162", "title": "How can a vector be both dynamic and known at compile time in Rust?", "body": "<p>Note the wording:</p>\n\n<blockquote>\n  <p>they must be able to know the size of <code>T</code></p>\n</blockquote>\n\n<p>This says that the size <em>of an individual element</em> must be known. The total count of elements, and thus the total amount of memory allocated, is not known.</p>\n\n<p>When the vector allocates memory, it says \"I want to store 12 <code>FooBar</code> structs. One <code>FooBar</code> is 24 bytes, therefore I need to allocate 288 bytes total\".</p>\n\n<p>The <strong>12</strong> is the dynamic capacity of the vector, the <strong>24</strong> is the static size of one element (the <code>T</code>).</p>\n"}], "owner": {"reputation": 2806, "user_id": 2077574, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/Kdit8.png?s=128&g=1", "display_name": "KPD", "link": "https://stackoverflow.com/users/2077574/kpd"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 389, "favorite_count": 0, "accepted_answer_id": 43100162, "answer_count": 1, "score": 4, "last_activity_date": 1490809003, "creation_date": 1490808090, "last_edit_date": 1490809003, "question_id": 43100123, "link": "https://stackoverflow.com/questions/43100123/how-can-a-vector-be-both-dynamic-and-known-at-compile-time-in-rust", "title": "How can a vector be both dynamic and known at compile time in Rust?", "body": "<p>I'm confused by what seem to be conflicting statements in the <a href=\"https://doc.rust-lang.org/book/vectors.html\" rel=\"nofollow noreferrer\">documentation for vectors in Rust</a>:</p>\n\n<blockquote>\n  <p>A \u2018vector\u2019 is a dynamic or \u2018growable\u2019 array, implemented as the standard library type <code>Vec&lt;T&gt;</code>.</p>\n</blockquote>\n\n<p>and </p>\n\n<blockquote>\n  <p>Vectors store their contents as contiguous arrays of <code>T</code> on the heap. This means that they must be able to know the size of <code>T</code> at compile time (that is, how many bytes are needed to store a <code>T</code>?). The size of some things can't be known at compile time. For these you'll have to store a pointer to that thing: thankfully, the <code>Box</code> type works perfectly for this.</p>\n</blockquote>\n\n<p>Rust vectors are dynamically growable, but I don't see how that fits with the statement that their size must be known at compile time. </p>\n\n<p>It's been a while since I've worked with a lower-level language where I have to think about memory allocation so I'm probably missing something obvious.</p>\n"}, {"tags": ["rust", "containers"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1490806293, "post_id": 43099040, "comment_id": 73280673, "body": "Is there anything preventing you from making your own trait?"}, {"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 2, "creation_date": 1490806414, "post_id": 43099040, "comment_id": 73280751, "body": "Couple gotchas here: (1) you actually would want to use <code>From</code> and flip the types and (2) an implementation like this needs to be either where <code>usize</code>, <code>Vec&lt;u8&gt;</code>, or <code>From</code> is defined. Your options are to: make a new wrapper type or make a new trait."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490807335, "post_id": 43099040, "comment_id": 73281384, "body": "As the other commenters have said; this is deliberately disallowed in Rust. You either need to wrap one of the values in a type that you own <b>or</b> implement your own trait. You will then own the trait or the type, and will be allowed to implement a trait for it."}], "owner": {"reputation": 1054, "user_id": 4201205, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/7186d11fd2ae12a5da22d2a8e7a684ad?s=128&d=identicon&r=PG&f=1", "display_name": "Constantine", "link": "https://stackoverflow.com/users/4201205/constantine"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 37, "favorite_count": 0, "closed_date": 1490807241, "answer_count": 0, "score": 0, "last_activity_date": 1490807218, "creation_date": 1490804543, "last_edit_date": 1490807218, "question_id": 43099040, "link": "https://stackoverflow.com/questions/43099040/into-trait-implemented-for-arbitrary-types-in-rust", "closed_reason": "Duplicate", "title": "Into trait implemented for arbitrary types in Rust", "body": "<p>How can I implement <code>Into</code> trait for arbitrary types, or receive same functionality in whatever way?</p>\n\n<p>For example, I'd like to convert <code>usize</code> into <code>Vec&lt;u8&gt;</code> </p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1490808077, "creation_date": 1490808077, "answer_id": 43100119, "question_id": 43097676, "link": "https://stackoverflow.com/questions/43097676/how-to-build-a-standard-linux-so-library-with-stable-rust-without-using-std/43100119#43100119", "title": "How to build a standard Linux .so library with stable Rust without using std?", "body": "<p>I believe that the documentation is misleading in this case. The problem is in the definition of the word \"library\".</p>\n\n<p>A Rust library (sometimes known as an <em>rlib</em>) can use <code>#[no_std]</code> and not require definitions for <code>panic_fmt</code> or <code>eh_personality</code>. That's because <em>eventually</em> it will be linked against into a binary that does use the standard library, which defines these symbols.</p>\n\n<p>A native library (either <code>dylib</code>, <code>cdylib</code>, or probably <code>staticlib</code>) has no guarantee of being linked with these symbols / language items, so they must be defined up front.</p>\n\n<p>As you can see, both of these could be called a \"library\". I think that the book is being a little loose with the terminology, leading to the confusion.</p>\n"}], "owner": {"reputation": 833, "user_id": 3297655, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/df1bc6c2cef925a8f52d36b3290958b9?s=128&d=identicon&r=PG&f=1", "display_name": "chabapok", "link": "https://stackoverflow.com/users/3297655/chabapok"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 387, "favorite_count": 0, "accepted_answer_id": 43100119, "answer_count": 1, "score": 2, "last_activity_date": 1490808077, "creation_date": 1490800808, "last_edit_date": 1490807325, "question_id": 43097676, "link": "https://stackoverflow.com/questions/43097676/how-to-build-a-standard-linux-so-library-with-stable-rust-without-using-std", "title": "How to build a standard Linux .so library with stable Rust without using std?", "body": "<p>Cargo.toml:</p>\n\n<pre><code>[package]\nname = \"proba\"\nversion = \"0.1.0\"\n\n[lib]\nname = \"mycoollib\"\npath = \"src/mycoollib.rs\"\ncrate-type = [\"cdylib\"]\n</code></pre>\n\n<p>src/mycoollib.rs:</p>\n\n<pre><code>#![no_std]\n\nfn func(v: i32) -&gt; i32 {\n    v + 10\n}\n</code></pre>\n\n<p>When I try to run <code>cargo build</code>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: language item required, but not found: `panic_fmt`\nerror: language item required, but not found: `eh_personality`\n</code></pre>\n\n<p>A nightly build is needed to implement <code>panic_fmt</code> and <code>eh_personality</code>, but <a href=\"https://doc.rust-lang.org/book/using-rust-without-the-standard-library.html\" rel=\"nofollow noreferrer\">\"Using Rust Without the Standard Library\"</a> of the Rust book says that libs can build on stable.</p>\n"}, {"tags": ["linux", "rust", "sensors", "i2c", "rust-tokio"], "owner": {"reputation": 215, "user_id": 890662, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/fb3908e37ada8f1e4ae73223eebd8680?s=128&d=identicon&r=PG", "display_name": "Nordmoen", "link": "https://stackoverflow.com/users/890662/nordmoen"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 170, "favorite_count": 0, "answer_count": 0, "score": 1, "last_activity_date": 1490774030, "creation_date": 1490774030, "question_id": 43087555, "link": "https://stackoverflow.com/questions/43087555/tokio-rs-based-i2c-interface-for-sensor", "title": "Tokio.rs based I2C interface for sensor", "body": "<p>I have been reading up on <a href=\"https://tokio.rs/\" rel=\"nofollow noreferrer\">Tokio.rs</a> for doing async IO and it seems a good fit for modelling a <a href=\"https://docs.rs/futures/0.1.11/futures/stream/index.html\" rel=\"nofollow noreferrer\">Stream</a> of sensor values. However, Tokio is complex and I don't quite understand how I would interface I2C sensor reading with Tokio.</p>\n\n<p>My concrete task is to implement support for <a href=\"https://store.invensense.com/datasheets/invensense/MPU9250REV1.0.pdf\" rel=\"nofollow noreferrer\">MPU9250</a> on the <a href=\"http://beagleboard.org/blue\" rel=\"nofollow noreferrer\">BeagleBone Blue</a> where I would like to utilize Tokio for the number of combinators that would make interfacing easier (having the ability to join streams of sensor data ensuring that they arrive at the same time is one advantage I see straight away).</p>\n\n<p>The most straight forward way I can see is to use <a href=\"https://docs.rs/tokio-timer/0.1.0/tokio_timer/\" rel=\"nofollow noreferrer\">Tokio-Timer</a> setting up an interval and read sensor values when the timer fires. Is this a good design or are there better ways of doing this? I should also mention that I need other sensors connected so a general method is preferred.</p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1509488070, "post_id": 43086296, "comment_id": 81037929, "body": "<i>I am trying to update cargo: <code>cargo install cargo-update</code></i> \u2014 This is <b>not</b> how you update cargo. This installs a cargo subcommand called <code>cargo-update</code>. You update cargo itself by the same mechanism that you installed it originally (rustup or your system package manager, whichever)."}], "answers": [{"tags": [], "owner": {"reputation": 2255, "user_id": 499126, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/e4b2449c095d724fdc19b1a3bed8b28d?s=128&d=identicon&r=PG", "display_name": "demonking", "link": "https://stackoverflow.com/users/499126/demonking"}, "is_accepted": true, "score": 1, "last_activity_date": 1509487911, "last_edit_date": 1509487911, "creation_date": 1495715080, "answer_id": 44180523, "question_id": 43086296, "link": "https://stackoverflow.com/questions/43086296/error-the-operator-is-not-stable-error-when-installing-cargo-update/44180523#44180523", "title": "error: the `?` operator is not stable error when installing cargo-update", "body": "<p>It depends on your Rust version \u2014 with <a href=\"https://blog.rust-lang.org/2016/11/10/Rust-1.13.html\" rel=\"nofollow noreferrer\">versions of Rust before 1.13</a> you will receive the error because the operator wasn't stable in these versions.</p>\n\n<p>Your error message refers to <a href=\"https://github.com/rust-lang/rust/issues/31436\" rel=\"nofollow noreferrer\">a GitHub issue number</a>.</p>\n"}], "owner": {"reputation": 1490, "user_id": 2402577, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/Fn7Ch.png?s=128&g=1", "display_name": "alper", "link": "https://stackoverflow.com/users/2402577/alper"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 160, "favorite_count": 0, "accepted_answer_id": 44180523, "answer_count": 1, "score": 1, "last_activity_date": 1509488077, "creation_date": 1490770170, "last_edit_date": 1509488077, "question_id": 43086296, "link": "https://stackoverflow.com/questions/43086296/error-the-operator-is-not-stable-error-when-installing-cargo-update", "title": "error: the `?` operator is not stable error when installing cargo-update", "body": "<p>I am trying to update cargo: <code>cargo install cargo-update</code>, but I'm faced with the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>   Compiling semver-parser v0.7.0\nerror: the `?` operator is not stable (see issue #31436)\n  --&gt; /home/netlab/.cargo/registry/src/github.com-1ecc6299db9ec823/semver-parser-0.7.0/src/version.rs:56:26\n   |\n56 |     let (pre, pre_len) = common::parse_optional_meta(&amp;s[i..], b'-')?;\n   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: the `?` operator is not stable (see issue #31436)\n  --&gt; /home/netlab/.cargo/registry/src/github.com-1ecc6299db9ec823/semver-parser-0.7.0/src/version.rs:58:30\n   |\n58 |     let (build, build_len) = common::parse_optional_meta(&amp;s[i..], b'+')?;\n   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: the `?` operator is not stable (see issue #31436)\n   --&gt; /home/netlab/.cargo/registry/src/github.com-1ecc6299db9ec823/semver-parser-0.7.0/src/range.rs:133:26\n    |\n133 |     let (pre, pre_len) = common::parse_optional_meta(&amp;s[i..], b'-')?;\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre>\n"}, {"tags": ["string", "rust"], "comments": [{"owner": {"reputation": 3416, "user_id": 2484972, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ea1c4b2c5aa3c7da2f2740bc1a643ee0?s=128&d=identicon&r=PG", "display_name": "Tatsuyuki Ishi", "link": "https://stackoverflow.com/users/2484972/tatsuyuki-ishi"}, "edited": false, "score": 2, "creation_date": 1490756650, "post_id": 43083544, "comment_id": 73249748, "body": "Questions seeking debugging help (&quot;<b>why isn&#39;t this code working?</b>&quot;) must include  the desired behavior, a specific problem or error and the shortest code  necessary  to reproduce it <b>in the question itself</b>. Questions without a <b>clear problem  statement</b> are not useful to other readers. See: <a href=\"http://stackoverflow.com/help/mcve\">How to create a Minimal, Complete, and  Verifiable example</a>."}, {"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "reply_to_user": {"reputation": 3416, "user_id": 2484972, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ea1c4b2c5aa3c7da2f2740bc1a643ee0?s=128&d=identicon&r=PG", "display_name": "Tatsuyuki Ishi", "link": "https://stackoverflow.com/users/2484972/tatsuyuki-ishi"}, "edited": false, "score": 0, "creation_date": 1490759519, "post_id": 43083544, "comment_id": 73250592, "body": "@TatsuyukiIshi What is unclear about the question? This isn&#39;t about debugging..."}, {"owner": {"reputation": 3416, "user_id": 2484972, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ea1c4b2c5aa3c7da2f2740bc1a643ee0?s=128&d=identicon&r=PG", "display_name": "Tatsuyuki Ishi", "link": "https://stackoverflow.com/users/2484972/tatsuyuki-ishi"}, "edited": false, "score": 1, "creation_date": 1490759554, "post_id": 43083544, "comment_id": 73250600, "body": "&gt; <b>must include the desired behavior, a specific problem or error and the shortest code necessary to reproduce it</b>"}, {"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "reply_to_user": {"reputation": 3416, "user_id": 2484972, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ea1c4b2c5aa3c7da2f2740bc1a643ee0?s=128&d=identicon&r=PG", "display_name": "Tatsuyuki Ishi", "link": "https://stackoverflow.com/users/2484972/tatsuyuki-ishi"}, "edited": false, "score": 0, "creation_date": 1490759923, "post_id": 43083544, "comment_id": 73250697, "body": "@TatsuyukiIshi Notice the passage you quoted is preceded with &quot;Questions seeking debugging help&quot;. This isn&#39;t the case here. OP is looking for a function that behaves like <code>as_bytes</code> but works on windows. There is nothing to fix, hence it makes no sense to ask for a MCVE."}, {"owner": {"reputation": 3416, "user_id": 2484972, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ea1c4b2c5aa3c7da2f2740bc1a643ee0?s=128&d=identicon&r=PG", "display_name": "Tatsuyuki Ishi", "link": "https://stackoverflow.com/users/2484972/tatsuyuki-ishi"}, "reply_to_user": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 0, "creation_date": 1490759966, "post_id": 43083544, "comment_id": 73250710, "body": "@Alec I&#39;m asking to clarify &quot;does not work&quot;."}, {"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "reply_to_user": {"reputation": 3416, "user_id": 2484972, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ea1c4b2c5aa3c7da2f2740bc1a643ee0?s=128&d=identicon&r=PG", "display_name": "Tatsuyuki Ishi", "link": "https://stackoverflow.com/users/2484972/tatsuyuki-ishi"}, "edited": false, "score": 1, "creation_date": 1490760088, "post_id": 43083544, "comment_id": 73250741, "body": "@TatsuyukiIshi The function is not defined for windows. As in does not exist. It is OS specific. I&#39;ll clarify the question for the OP."}, {"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 0, "creation_date": 1490760273, "post_id": 43083544, "comment_id": 73250785, "body": "There is always <a href=\"https://docs.rs/os-str-generic/0.2.0/os_str_generic/index.html\" rel=\"nofollow noreferrer\">this crate</a>. But you&#39;ll need to figure out the conversion from <code>u16</code> to <code>u8</code> since windows is UTF-16."}, {"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 1, "creation_date": 1490785674, "post_id": 43083544, "comment_id": 73264710, "body": "OsStr itself uses WTF-8 (i.e., UTF-8 with surrogates) internally, even on Windows, which is an implementation detail. The only way to get the raw bytes is to do an unsafe transmute from an OsStr to a &amp;[u8], but this could not be guaranteed to always work."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 5, "last_activity_date": 1490791952, "last_edit_date": 1490791952, "creation_date": 1490791605, "answer_id": 43093946, "question_id": 43083544, "link": "https://stackoverflow.com/questions/43083544/how-can-i-convert-osstr-to-u8-vecu8-on-windows/43093946#43093946", "title": "How can I convert OsStr to &amp;[u8]/Vec&lt;u8&gt; on Windows?", "body": "<p>There is no defined interface for getting  the bytes of an <code>OsStr</code> on Windows in Rust 1.16. The actual implementation of <code>OsStr</code> <a href=\"https://github.com/rust-lang/rust/blob/1.16.0/src/libstd/ffi/os_str.rs#L18\" rel=\"noreferrer\">delegates to system-specific code</a>. On *nix, this is a <a href=\"https://github.com/rust-lang/rust/blob/1.16.0/src/libstd/sys/unix/os_str.rs#L21-L23\" rel=\"noreferrer\">wrapper around a <code>Vec&lt;u8&gt;</code></a>; on Windows, this is a <a href=\"https://github.com/rust-lang/rust/blob/1.16.0/src/libstd/sys/windows/os_str.rs#L20-L23\" rel=\"noreferrer\">wrapper around a <code>Wtf8Buf</code></a>. While <code>Wtf8Buf</code> is implemented with a <code>Vec&lt;u8&gt;</code>, that implementation detail is not exposed. More detail about WTF-8 is available <a href=\"https://simonsapin.github.io/wtf-8/\" rel=\"noreferrer\">on its website</a>, which includes this quote, emphasis mine:</p>\n\n<blockquote>\n  <p>On Windows (which uses potentially ill-formed UTF-16 in its APIs), the\n  Rust standard library uses WTF-8 internally for OS strings, but <strong>does\n  not expose the WTF-8 byte sequences</strong>.</p>\n</blockquote>\n\n<p>The \"problem\" is that on different platforms, there's no unified concept of a \"string\" when it comes to passing it to an operating system interface. On *nix, <em>usually</em> interfaces accept something <em>almost</em> like UTF-8, except they don't handle embedded NUL values. On Windows, it depends on if you are calling the <code>W</code> or <code>A</code> variant of the API, although the <code>W</code> variant is strongly preferred.</p>\n\n<p>This is made more difficult because libraries may also use different encodings from the OS. This is especially true if you use a C library created on *nix on Windows \u2014\u00a0it's almost guaranteed to take in a pseudo-UTF-8 string and then some sort of lossy transformation occurs to call the right underlying API.</p>\n\n<p>Rust avoids all that by providing the opaque types <code>OsStr</code> and <code>OsString</code>.</p>\n\n<hr>\n\n<p>If you need to pass an <code>OsStr</code> to a function that accepts UTF-8 data, you need to convert it to a <code>String</code> or <code>&amp;str</code>, then you can get the bytes of that. If you need to pass it to a function that accepts a <code>LPCWSTR</code>, you first need to convert to a <code>Vec&lt;u16&gt;</code> and then pass the pointer to that buffer to the Windows API. You can see <a href=\"https://github.com/rust-lang/rust/blob/1.16.0/src/libstd/sys/windows/mod.rs#L98-L109\" rel=\"noreferrer\">an example of how Rust itself does this</a>.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490796832, "post_id": 43095717, "comment_id": 73273280, "body": "IIRC, Windows and Java actually use UCS-2."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490798267, "post_id": 43095717, "comment_id": 73274609, "body": "@Shepmaster Yeah, that&#39;s quite correct, but the very term UCS-2 can generate confusion which I wanted to avoid in the answer. UCS-2 is obsolete and is no longer considered an encoding of Unicode (see <a href=\"http://www.unicode.org/versions/Unicode9.0.0/appC.pdf#G1823\" rel=\"nofollow noreferrer\">page 900 here</a>. It comes from a time when Unicode was constrained to the BMP, and the consortium has good reasons to discourage its use. The <a href=\"http://docs.oracle.com/javase/6/docs/api/java/lang/Character.html#unicode\" rel=\"nofollow noreferrer\">Java documentation</a> is careful not to name the encoding UCS-2, preferring to refer to UTF-16 and the BMP."}, {"owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "edited": false, "score": 1, "creation_date": 1533476045, "post_id": 43095717, "comment_id": 90350853, "body": "<code>OsStr</code> can&#39;t possibly be anything other than a UTF-8 superset, because Rust supports no-allocation zero-cost conversion of <code>&amp;str</code> to <code>&amp;Path</code>, and <code>&amp;Path</code> to <code>&amp;OsStr</code>, so every valid <code>&amp;str</code> memory representation must be a valid <code>&amp;OsStr</code>, which wouldn&#39;t hold true for UCS-2."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "edited": false, "score": 0, "creation_date": 1533483804, "post_id": 43095717, "comment_id": 90352992, "body": "@Kornel Yes, WTF16 is used on Windows internally, but AFAIK it is not exposed in the API."}, {"owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "edited": false, "score": 2, "creation_date": 1533487979, "post_id": 43095717, "comment_id": 90354092, "body": "Not WTF-16, but WTF-8, which is UTF-8 with extra sequences for broken surrogate pairs. The whole point is that Rust has exposed this fact, and made the API impossible to implement with an 16-bit internal representation of <code>OsStr</code>. <code>OsStr</code> is de-facto guaranteed to always be internally implemented as UTF-8 with hacks (it has to be <code>&amp;[u8]</code>, it can&#39;t be <code>&amp;[u16]</code>), as otherwise it couldn&#39;t satisfy required <code>AsRef</code> implementations."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "edited": false, "score": 0, "creation_date": 1533503394, "post_id": 43095717, "comment_id": 90357984, "body": "@Kornel Thanks for the clarification, but the key question is can you access the underlying WTF-8 data using the public API? The OP was concerned with converting <code>OsStr</code> to bytes."}, {"owner": {"reputation": 14956, "user_id": 544557, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ad1df76ef4fab96ec67b2afa080b3a0c?s=128&d=identicon&r=PG", "display_name": "Jim Balter", "link": "https://stackoverflow.com/users/544557/jim-balter"}, "edited": false, "score": 0, "creation_date": 1540794641, "post_id": 43095717, "comment_id": 92979071, "body": "These answers are wrong but reflect how badly broken Rust is. Consider trying to iterate over a directory whose name came from running a Windows program ... Command::new(...).output().unwrap() .stdout() returns Vec&lt;u8&gt;, but std::fs::read_dir takes a std::path::Path, which is constructed from an OsStr. Good luck converting the former to the latter ... OsStrExt::from_bytes is only available on Unix. What&#39;s the point of an abstraction like OsString if it&#39;s not usable on every OS?"}, {"owner": {"reputation": 14956, "user_id": 544557, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ad1df76ef4fab96ec67b2afa080b3a0c?s=128&d=identicon&r=PG", "display_name": "Jim Balter", "link": "https://stackoverflow.com/users/544557/jim-balter"}, "edited": false, "score": 0, "creation_date": 1540795614, "post_id": 43095717, "comment_id": 92979417, "body": "... You can convert the Command output to a string via String::from_utf8_lossy, but that&#39;s just it ... it&#39;s lossy, so there are Windows command outputs that cannot be passed to Windows API&#39;s via Rust. &quot;While an OsStr could be converted to bytes inasmuch anything can be converted to bytes, such representation is not useful because those bytes would be neither meaningful to the user nor to the system.&quot; -- sorry, but this is completely wrongheaded. I/O is byte streams -- you can&#39;t maintain Rust&#39;s abstractions externally; it&#39;s all just bytes."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 14956, "user_id": 544557, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ad1df76ef4fab96ec67b2afa080b3a0c?s=128&d=identicon&r=PG", "display_name": "Jim Balter", "link": "https://stackoverflow.com/users/544557/jim-balter"}, "edited": false, "score": 0, "creation_date": 1540796623, "post_id": 43095717, "comment_id": 92979873, "body": "@JimBalter That&#39;s exactly the problem, I/O is byte streams and Windows file names are not bytes, they&#39;re UCS-2 (masquerading as UTF-16). I agree that a public API for non-lossy conversion between path names and bytes would be useful, but it would need to be invented as a Rust-specific abstraction because Win32 itself doesn&#39;t provide one."}, {"owner": {"reputation": 14956, "user_id": 544557, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ad1df76ef4fab96ec67b2afa080b3a0c?s=128&d=identicon&r=PG", "display_name": "Jim Balter", "link": "https://stackoverflow.com/users/544557/jim-balter"}, "edited": false, "score": 0, "creation_date": 1540798577, "post_id": 43095717, "comment_id": 92980742, "body": "Of course Windows file names are bytes; everything is bytes. &quot;a public API for non-lossy conversion between path names and bytes would be useful&quot; -- it already exists, but it was made POSIX-only several years ago by people who don&#39;t understand the subject. Of course it&#39;s a Rust-specific abstraction ... because it&#39;s the Rust library we&#39;re talking about, not because of Win32. Every other &quot;systems programming&quot; language gets this right. If I run a command on Windows that prints a file name, the output is bytes, Command returns it as bytes, but Rust doesn&#39;t allow converting it back. Feh."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 14956, "user_id": 544557, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ad1df76ef4fab96ec67b2afa080b3a0c?s=128&d=identicon&r=PG", "display_name": "Jim Balter", "link": "https://stackoverflow.com/users/544557/jim-balter"}, "edited": false, "score": 0, "creation_date": 1540803711, "post_id": 43095717, "comment_id": 92983087, "body": "@JimBalter &quot;Everything is bytes&quot; - sure, but on Windows the bytes are UCS-2, so you cannot print the even an ASCII file name as &quot;bytes&quot; without garbling the output. On Windows you need to <i>encode</i> the names, and you can&#39;t just use UTF-8 because UTF-8 can&#39;t represent all of UCS-2, by design (UCS-2 is obsolete). I agree it would be useful to have a way to format file names as bytes, but it&#39;s not simple. Such a solution might end up being Rust-specific, in the sense that it wouldn&#39;t work correctly (for weird enough file names) if the other command is not written in Rust."}, {"owner": {"reputation": 14956, "user_id": 544557, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ad1df76ef4fab96ec67b2afa080b3a0c?s=128&d=identicon&r=PG", "display_name": "Jim Balter", "link": "https://stackoverflow.com/users/544557/jim-balter"}, "edited": false, "score": 0, "creation_date": 1540806095, "post_id": 43095717, "comment_id": 92984591, "body": "I think you&#39;re ignoring most of what I wrote and repeating yourself, but this isn&#39;t a chat room and I&#39;ve already typed more than enough. Have a good day. Over and out."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 14956, "user_id": 544557, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ad1df76ef4fab96ec67b2afa080b3a0c?s=128&d=identicon&r=PG", "display_name": "Jim Balter", "link": "https://stackoverflow.com/users/544557/jim-balter"}, "edited": false, "score": 0, "creation_date": 1540807331, "post_id": 43095717, "comment_id": 92985330, "body": "@JimBalter You don&#39;t seem to be offering a concrete suggestion here, except &quot;just use bytes&quot;. Can you at least provide a reference for the other systems languages that get this right?"}], "tags": [], "owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "is_accepted": true, "score": 5, "last_activity_date": 1493207978, "last_edit_date": 1495540012, "creation_date": 1490795968, "answer_id": 43095717, "question_id": 43083544, "link": "https://stackoverflow.com/questions/43083544/how-can-i-convert-osstr-to-u8-vecu8-on-windows/43095717#43095717", "title": "How can I convert OsStr to &amp;[u8]/Vec&lt;u8&gt; on Windows?", "body": "<p>The point of <code>OsStr</code> is that its very representation is OS-specific. The implementation is somewhat convoluted for technical reasons (<a href=\"https://stackoverflow.com/a/43093946/1600898\">@Shepmaster's answer</a> provides more details), but you can think of it like this:</p>\n\n<ul>\n<li>on POSIX systems, <code>OsStr</code> boils down to <code>&amp;[u8]</code>, because POSIX functions accept and return byte strings;</li>\n<li>on Windows, <code>OsStr</code> can be thought of as an <code>&amp;[u16]</code>, because Win32 Unicode functions accept and return strings as arrays of 16-bit units.</li>\n</ul>\n\n<p>Since native Windows APIs accept sequences of 16-bit \"wide characters\"<sup>1</sup>, that is what <code>OsStr</code> is designed to store. While an <code>OsStr</code> <em>could</em> be converted to bytes inasmuch anything can be converted to bytes, such representation is not useful because those bytes would be neither meaningful to the user nor to the system. This is why <code>OsStr</code> does not provide a method to retrieve the contents as bytes on Windows. However, it does provide <code>OsStr::encode_wide()</code> that iterates over the underlying <code>u16</code> values which <em>is</em> useful in Win32. In the other direction, <code>OsString::from_wide()</code> can be used to create an <code>OsString</code> from a slice of <code>u16</code> values.</p>\n\n<p>It is up to you to decide how your persistence layer will deal with this difference between platforms. What Rust's <code>OsStr</code> provides are the necessary <strong>tools</strong> to implement the round-trip, but the code will necessarily differ between platforms. For example, serde resolves the difference by <a href=\"https://serde.rs/data-model.html#mapping-into-the-data-model\" rel=\"nofollow noreferrer\">effectively treating</a> as <code>enum OsString { Unix(Vec&lt;u8&gt;), Windows(Vec&lt;u16&gt;) }</code>.</p>\n\n<p><hr>\n<sup>1</sup> Windows wide character strings are sometimes described as UTF-16 because that is how they are interpreted at a higher level, but this is not correct for <em>all</em> OS strings. A Windows file name can contain pairs of <code>u16</code> values that are <em>not</em> valid UTF-16, and still be usable. This is why it's not possible to represent Windows strings as bytes by e.g. converting them to UTF-8.</p>\n"}], "owner": {"reputation": 113, "user_id": 1269763, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c69007dda509f59157f494ae2571e36f?s=128&d=identicon&r=PG", "display_name": "0xMingYang", "link": "https://stackoverflow.com/users/1269763/0xmingyang"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2261, "favorite_count": 0, "accepted_answer_id": 43095717, "answer_count": 2, "score": 11, "last_activity_date": 1550550073, "creation_date": 1490756591, "last_edit_date": 1490789001, "question_id": 43083544, "link": "https://stackoverflow.com/questions/43083544/how-can-i-convert-osstr-to-u8-vecu8-on-windows", "title": "How can I convert OsStr to &amp;[u8]/Vec&lt;u8&gt; on Windows?", "body": "<p>I'm trying to persistent raw OS file names to storage, so I need to get the raw bytes of an <code>OsStr</code>. </p>\n\n<p>It seems possible to call <a href=\"https://doc.rust-lang.org/std/os/unix/ffi/trait.OsStrExt.html#tymethod.as_bytes\" rel=\"noreferrer\"><code>as_bytes()</code></a> on *nix platforms, but that isn't defined on MS Windows. </p>\n\n<p>Is there a portable way to convert <code>OsStr</code> to bytes?</p>\n"}, {"tags": ["generics", "rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 43, "user_id": 6039244, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-wYkLXux1ue0/AAAAAAAAAAI/AAAAAAAAAEE/3w8-KT2J20g/photo.jpg?sz=128", "display_name": "idlys", "link": "https://stackoverflow.com/users/6039244/idlys"}, "edited": false, "score": 0, "creation_date": 1490756899, "post_id": 43083333, "comment_id": 73249834, "body": "Thank you for your answer. Is this use of generics discouraged, then?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 43, "user_id": 6039244, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-wYkLXux1ue0/AAAAAAAAAAI/AAAAAAAAAEE/3w8-KT2J20g/photo.jpg?sz=128", "display_name": "idlys", "link": "https://stackoverflow.com/users/6039244/idlys"}, "edited": false, "score": 0, "creation_date": 1490796272, "post_id": 43083333, "comment_id": 73272860, "body": "Generics and associated types both have their use. Associated types are best suited when the <i>implementation</i> decides the type. You&#39;ll usually make a generic trait when a single type could implement multiple instances of the generic trait (e.g. <a href=\"https://doc.rust-lang.org/stable/std/convert/trait.From.html\" rel=\"nofollow noreferrer\"><code>From&lt;T&gt;</code></a>)."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 1, "last_activity_date": 1490755281, "creation_date": 1490755281, "answer_id": 43083333, "question_id": 43083134, "link": "https://stackoverflow.com/questions/43083134/generic-traits-dependent-on-each-other-in-rust/43083333#43083333", "title": "Generic Traits dependent on each other in Rust", "body": "<p>You can't do this with trait objects, because trait objects erase the real type of the underlying object. The giveaway is that, in order to use <code>Self</code> on the bound for <code>T</code>, you need the bound <code>Self: Sized</code>, yet that very bound disables the ability to use trait objects (like <code>Box&lt;Entity&gt;</code>). And we haven't even addressed the fact that <code>Box&lt;Entity&gt;</code> doesn't even specify a value for the type parameter <code>T</code> on <code>Entity</code>.</p>\n\n<hr>\n\n<p>It looks like <code>Entity</code> (and maybe <code>EntityRenderer</code> too) should use <a href=\"https://doc.rust-lang.org/book/associated-types.html\" rel=\"nofollow noreferrer\">an associated type</a> instead of a type parameter. However, associated types won't solve your original problem; you'll get essentially the same problem, because you'd still need the <code>Self: Sized</code> bound and because you'd need to specify a value for the associated type on the trait object (<code>Box&lt;Entity&lt;Renderer=???&gt;&gt;</code>).</p>\n"}], "owner": {"reputation": 43, "user_id": 6039244, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-wYkLXux1ue0/AAAAAAAAAAI/AAAAAAAAAEE/3w8-KT2J20g/photo.jpg?sz=128", "display_name": "idlys", "link": "https://stackoverflow.com/users/6039244/idlys"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 433, "favorite_count": 0, "accepted_answer_id": 43083333, "answer_count": 1, "score": 0, "last_activity_date": 1490755281, "creation_date": 1490753974, "last_edit_date": 1490754520, "question_id": 43083134, "link": "https://stackoverflow.com/questions/43083134/generic-traits-dependent-on-each-other-in-rust", "title": "Generic Traits dependent on each other in Rust", "body": "<p>I have two generic traits that need to be passed to each other as type parameters. The code boils down to this</p>\n\n<pre><code>pub trait Entity&lt;T: EntityRenderer&lt;Self&gt;&gt;\n    where Self: Sized\n{\n    fn get_renderer(&amp;self) -&gt; &amp;T;\n}\n\npub trait EntityRenderer&lt;T: Entity&lt;Self&gt;&gt;\n    where Self: Sized\n{\n    fn get_animation_frame(&amp;T) -&gt; u32;\n}\n</code></pre>\n\n<p><code>Entity</code> needs to know what type it's <code>EntityRenderer</code> is, and vice versa. Later, I have</p>\n\n<pre><code>entities: Vec&lt;Box&lt;Entity&gt;&gt;\n</code></pre>\n\n<p>This is an issue, as I can't resolve the type parameter of <code>Entity</code>. I also can't make either of the functions which need the type parameter generic, because Rust's compiler won't let traits with generic methods become trait objects.</p>\n\n<p>Is there any workaround? Or am I violating some sort of memory safety law that I am unaware of?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 1, "creation_date": 1490748954, "post_id": 43082384, "comment_id": 73247698, "body": "&quot;I also looked at <code>std::io::copy</code>, but it doesn&#39;t work with <code>Read</code> and <code>Write</code> instances.&quot; Huh? The type parameters <code>R</code> and <code>W</code> have bounds <code>R: Read</code> and <code>W: Write</code>, so it should work."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1490749130, "post_id": 43082384, "comment_id": 73247744, "body": "<a href=\"https://doc.rust-lang.org/std/io/fn.copy.html\" rel=\"nofollow noreferrer\"><code>std::io::copy</code></a> should definitely work. Can you make an MCVE?"}, {"owner": {"reputation": 8906, "user_id": 105389, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/4b9e888299f2bbb84b996583df056a8c?s=128&d=identicon&r=PG", "display_name": "Michael Tiller", "link": "https://stackoverflow.com/users/105389/michael-tiller"}, "edited": false, "score": 0, "creation_date": 1490750502, "post_id": 43082384, "comment_id": 73248083, "body": "You are correct.  I mistakenly read that as meaning that <code>reader</code> and <code>writer</code> had to have the <code>Sized</code> trait.  My apologies, I should not have missed that. :-("}], "answers": [{"comments": [{"owner": {"reputation": 8906, "user_id": 105389, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/4b9e888299f2bbb84b996583df056a8c?s=128&d=identicon&r=PG", "display_name": "Michael Tiller", "link": "https://stackoverflow.com/users/105389/michael-tiller"}, "edited": false, "score": 1, "creation_date": 1490750589, "post_id": 43082520, "comment_id": 73248099, "body": "Thanks.  First off, you are correct, of course.  Also, your answer was useful because it helped me to realize why <code>std::io::copy</code> didn&#39;t work for me the first time which was that lack of <code>&amp;mut</code> in front of the variable.  The error message confused me, but your example helped me understand what it was trying to tell me.  Thanks again."}], "tags": [], "owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "is_accepted": true, "score": 10, "last_activity_date": 1490749520, "creation_date": 1490749520, "answer_id": 43082520, "question_id": 43082384, "link": "https://stackoverflow.com/questions/43082384/what-is-the-simplest-way-to-pipe-from-a-read-to-a-write/43082520#43082520", "title": "What is the simplest way to pipe from a Read to a Write", "body": "<blockquote>\n  <p>I also looked at <code>std::io::copy</code>, but it doesn't work with <code>Read</code> and <code>Write</code> instances.</p>\n</blockquote>\n\n<p>It does. Look at the where clause in <a href=\"https://doc.rust-lang.org/std/io/fn.copy.html\" rel=\"noreferrer\">its signature</a>:</p>\n\n<pre><code>pub fn copy&lt;R: ?Sized, W: ?Sized&gt;(reader: &amp;mut R, writer: &amp;mut W) -&gt; Result&lt;u64&gt; \nwhere R: Read, W: Write\n</code></pre>\n\n<p>For instance, here I redirect stdin to stdout:</p>\n\n<pre><code>use std::io;\n\nfn main() {\n  let mut stdin = io::stdin();\n  let mut stdout = io::stdout();\n  io::copy(&amp;mut stdin,&amp;mut stdout);\n}\n</code></pre>\n\n<p>If you are looking for a buffer to right into and read out of, <a href=\"http://alexcrichton.com/bufstream/bufstream/struct.BufStream.html\" rel=\"noreferrer\"><code>BufStream</code></a> from the <code>bufstream</code> crate should be of use.</p>\n\n<blockquote>\n  <p>I can imagine several different ways to do this (read/write one byte at a time, read/write chunks). But I am hoping that there is some function in std that does all this (with all the requisite error handling, chunk size management, etc) but if it is there, I haven't been able to find it.</p>\n</blockquote>\n\n<p>That is <em>exactly</em> <a href=\"https://doc.rust-lang.org/1.8.0/src/std/up/src/libstd/io/util.rs.html#46-61\" rel=\"noreferrer\">what <code>std::io::copy</code> does</a> - it allocates a buffer and then loops between reading into that buffer and writing out from that buffer until there is nothing left to read.</p>\n"}], "owner": {"reputation": 8906, "user_id": 105389, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/4b9e888299f2bbb84b996583df056a8c?s=128&d=identicon&r=PG", "display_name": "Michael Tiller", "link": "https://stackoverflow.com/users/105389/michael-tiller"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2089, "favorite_count": 0, "closed_date": 1503064450, "accepted_answer_id": 43082520, "answer_count": 1, "score": 5, "last_activity_date": 1490749520, "creation_date": 1490748541, "question_id": 43082384, "link": "https://stackoverflow.com/questions/43082384/what-is-the-simplest-way-to-pipe-from-a-read-to-a-write", "closed_reason": "Duplicate", "title": "What is the simplest way to pipe from a Read to a Write", "body": "<p>I've got two objects.  One implements the <code>std::io::Read</code> trait and the other implements the <code>std::io::Write</code> trait (e.g., two <code>std::fs::File</code> instances).  I'm trying to figure out a simple and efficient way to pipe the data from the <code>Read</code> instance into the <code>Write</code> instance.</p>\n\n<p>Let me add that I'm fully aware of <code>std::fs::copy</code>, but that only applies to files on a file system...these are not that.  I also looked at <code>std::io::copy</code>, but it doesn't work with <code>Read</code> and <code>Write</code> instances.</p>\n\n<p>I know that I can read the contents of the <code>Read</code> into a <code>Vec&lt;u8&gt;</code> with something like this:</p>\n\n<pre><code>let mut data = Vec::new();\nfile.read_to_end(&amp;mut data);\n</code></pre>\n\n<p>But <code>read_to_end</code> fills a <code>Vec&lt;u8&gt;</code> but the corresponding function on <code>Write</code>, <code>write_all</code>, takes a <code>&amp;[u8]</code> and I don't see any method on <code>Vec&lt;u8&gt;</code> that allows me to create a new array, only a slice of some pre-specified size.</p>\n\n<p>I can imagine several different ways to do this (read/write one byte at a time, read/write chunks).  But I am hoping that there is some function in <code>std</code> that does all this (with all the requisite error handling, chunk size management, etc) but if it is there, I haven't been able to find it.</p>\n\n<p>Any suggestions on a simple way to do this?  I am admittedly relatively new to Rust, but believe me when I say I spent quite a bit of time looking for such a thing and couldn't find it.  Yes, I realize in that time I could have implemented but I wanted something that would be efficient and I'm concerned that what I would write wouldn't be optimal.</p>\n\n<p>Thanks for any assistance.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 1878, "user_id": 3013715, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/gfzGT.jpg?s=128&g=1", "display_name": "Patrick Allen", "link": "https://stackoverflow.com/users/3013715/patrick-allen"}, "edited": false, "score": 0, "creation_date": 1490744715, "post_id": 43081481, "comment_id": 73246691, "body": "Cool, looking at the link now. To clarify: If I&#39;m passing &amp;lfq and need to iterate over it, what traits need to be implemented for LimitedFifoQueue? What do I have to specify in the annotation? Thanks again @Shepmaster"}, {"owner": {"reputation": 1878, "user_id": 3013715, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/gfzGT.jpg?s=128&g=1", "display_name": "Patrick Allen", "link": "https://stackoverflow.com/users/3013715/patrick-allen"}, "edited": false, "score": 0, "creation_date": 1490749385, "post_id": 43081481, "comment_id": 73247813, "body": "Okay, I think I&#39;m getting closer... I added the suggested trait implementation and then annotated <code>print_all</code> with a lifetime bound, and <code>&amp;&#39;a I::IntoIter: Iterator</code> bound. It&#39;s now telling me that <code>&amp;_</code> does not have the trait Iterator in <code>print_all</code>. What gives?   <a href=\"https://play.rust-lang.org/?gist=e46d4c5071563f66291267af763b3378&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">New Playground Link</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1878, "user_id": 3013715, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/gfzGT.jpg?s=128&g=1", "display_name": "Patrick Allen", "link": "https://stackoverflow.com/users/3013715/patrick-allen"}, "edited": false, "score": 0, "creation_date": 1490753202, "post_id": 43081481, "comment_id": 73248822, "body": "@PatrickAllen why did you annotate it with a lifetime bound? The same implementation shown above works."}, {"owner": {"reputation": 1878, "user_id": 3013715, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/gfzGT.jpg?s=128&g=1", "display_name": "Patrick Allen", "link": "https://stackoverflow.com/users/3013715/patrick-allen"}, "edited": false, "score": 0, "creation_date": 1490755392, "post_id": 43081481, "comment_id": 73249396, "body": "Wow. You&#39;re right. I just went down a crazy rabbit hole because I had slipped and had <code>fn print_all(lines: &amp;I)</code>. Thanks so much :)"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1490744939, "last_edit_date": 1495540450, "creation_date": 1490742543, "answer_id": 43081481, "question_id": 43081345, "link": "https://stackoverflow.com/questions/43081345/how-can-i-implement-stdfmtdisplay-for-a-custom-intoiteratoritem/43081481#43081481", "title": "How can I implement std::fmt::Display for a custom IntoIterator::Item?", "body": "<blockquote>\n  <p>How can I implement <code>std::fmt::Display</code> for a custom <code>IntoIterator::Item</code>?</p>\n</blockquote>\n\n<p>You cannot. <code>Item</code> might be a type you don't own, and <code>Display</code> is a trait you don't own. <a href=\"https://stackoverflow.com/q/25413201/155423\">You cannot implement a trait you don't own for a type you don't own</a>.</p>\n\n<p>All you can do is require that <code>Item</code> implements <code>Display</code>:</p>\n\n<pre><code>fn print_all&lt;I&gt;(lines: I)\n    where I: IntoIterator,\n          I::Item: fmt::Display, \n{\n    for string in lines.into_iter() {\n        println!(\"{}\", string);\n    }\n}\n</code></pre>\n\n<p>You don't need any of the other <code>T: Display</code> bounds on your data structure or its methods, as none of those implementations care to print out a value.</p>\n\n<p>Incidentally, <code>into_iter</code> is automatically called on the for-loops argument, so you only need to say:</p>\n\n<pre><code>fn print_all&lt;I&gt;(lines: I)\n    where I: IntoIterator,\n          I::Item: fmt::Display, \n{\n    for string in lines {\n        println!(\"{}\", string);\n    }\n}\n</code></pre>\n\n<p>You may also wish to review <a href=\"https://stackoverflow.com/q/30218886/155423\">How to implement Iterator and IntoIterator for a simple struct?</a>, as you are passing <code>&amp;lfq</code> into <code>print_all</code>, but <code>&amp;LimitedFifoQueue</code> doesn't implement <code>IntoIterator</code>, only <code>LimitedFifoQueue</code> does. These are different types. You'll need something like</p>\n\n<pre><code>impl&lt;'a, T&gt; IntoIterator for &amp;'a LimitedFifoQueue&lt;T&gt; {\n    type Item = &amp;'a T;\n    type IntoIter = vec_deque::Iter&lt;'a, T&gt;;\n    fn into_iter(self) -&gt; Self::IntoIter {\n        self.store.iter()\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 1878, "user_id": 3013715, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/gfzGT.jpg?s=128&g=1", "display_name": "Patrick Allen", "link": "https://stackoverflow.com/users/3013715/patrick-allen"}, "edited": false, "score": 0, "creation_date": 1490744913, "post_id": 43081492, "comment_id": 73246748, "body": "Thanks, very true regarding the &amp;I. I however actually need it to be borrowed as it is owned by another struct. What will be required for me to be able to iterate over this borrowed &amp;lfq?"}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 2, "last_activity_date": 1490743114, "last_edit_date": 1490743114, "creation_date": 1490742586, "answer_id": 43081492, "question_id": 43081345, "link": "https://stackoverflow.com/questions/43081345/how-can-i-implement-stdfmtdisplay-for-a-custom-intoiteratoritem/43081492#43081492", "title": "How can I implement std::fmt::Display for a custom IntoIterator::Item?", "body": "<p>This problem has nothing to do with your <code>IntoIterator</code> implementation or the rest of your type definition. Just take a look at this code:</p>\n\n<pre><code>fn print_all&lt;I&gt;(lines: &amp;I) where I: IntoIterator {\n    for string in lines.into_iter() {\n        println!(\"{}\", string);\n    }\n}\n</code></pre>\n\n<p>This piece of code doesn't even know about your <code>LimitedFifoQueue</code> type! It takes a value of generic type <code>I</code>. What do we know about <code>I</code>? It implements <code>IntoIterator</code>. Great, what does that tell us about the values the iterator will spit out? Nothing!</p>\n\n<p>So it could be anything, in particular also stuff that doesn't implement <code>fmt::Display</code>. So what we want to do is to annotate that the items of the iterator should at least implement <code>fmt::Display</code>. How is that done? By adding a bound to the associated type <code>Item</code> of the <code>IntoIterator</code> trait:</p>\n\n<pre><code>fn print_all&lt;I&gt;(lines: &amp;I)\n    where I: IntoIterator,\n          I::Item: fmt::Display,\n{ ... }\n</code></pre>\n\n<p>Once you understand that you can also add bounds to associated items this makes intuitive sense. </p>\n\n<p>After you fixed that error, another error will be reported, about \"moving out of borrowed content\". This is a fairly standard error, which I won't explain in detail here. But in summary: your <code>print_all()</code> function should receive a <code>I</code> instead of a <code>&amp;I</code>.</p>\n"}], "owner": {"reputation": 1878, "user_id": 3013715, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/gfzGT.jpg?s=128&g=1", "display_name": "Patrick Allen", "link": "https://stackoverflow.com/users/3013715/patrick-allen"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1858, "favorite_count": 0, "accepted_answer_id": 43081481, "answer_count": 2, "score": 2, "last_activity_date": 1490744939, "creation_date": 1490741672, "last_edit_date": 1490743020, "question_id": 43081345, "link": "https://stackoverflow.com/questions/43081345/how-can-i-implement-stdfmtdisplay-for-a-custom-intoiteratoritem", "title": "How can I implement std::fmt::Display for a custom IntoIterator::Item?", "body": "<p><code>LimitedFifoQueue</code> is a struct that wraps the functionality of a <code>VecDeque</code> to limit the number of items it will store at any time:</p>\n\n<pre><code>use std::collections::{vec_deque, VecDeque};\nuse std::fmt;\nuse std;\n\n#[derive(Debug)]\npub struct LimitedFifoQueue&lt;T&gt; {\n    size: usize,\n    store: VecDeque&lt;T&gt;,\n}\n\nimpl&lt;T&gt; LimitedFifoQueue&lt;T&gt; where T: fmt::Display {\n    pub fn new(size: usize) -&gt; LimitedFifoQueue&lt;T&gt; {\n        LimitedFifoQueue {\n            size: size,\n            store: VecDeque::with_capacity(size),\n        }\n    }\n    pub fn push(&amp;mut self, elem: T) {\n        self.store.push_front(elem);\n        if self.store.len() &gt; self.size {\n            self.store.pop_back();\n        }\n    }\n    pub fn clear(&amp;mut self) {\n        self.store.clear();\n    }\n}\n</code></pre>\n\n<p>I've implemented the <code>IntoIterator</code> trait as follows:</p>\n\n<pre><code>impl&lt;T&gt; IntoIterator for LimitedFifoQueue&lt;T&gt; where T: fmt::Display {\n    type Item = T;\n    type IntoIter = vec_deque::IntoIter&lt;T&gt;;\n    fn into_iter(self) -&gt; Self::IntoIter {\n        self.store.into_iter()\n    }\n}\n</code></pre>\n\n<p>And a simplified function that loops through and prints each Item:</p>\n\n<pre><code>fn print_all&lt;I&gt;(lines: &amp;I) where I: IntoIterator {\n    for string in lines.into_iter() {\n        println!(\"{}\", string);\n    }\n}\n</code></pre>\n\n<p>This gives me the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>println!(\"{}\", string);\n               ^^^^^^ the trait `std::fmt::Display` is not implemented for `&lt;I as std::iter::IntoIterator&gt;::Item`\n</code></pre>\n\n<p>I have created a playground of the code with a full stack trace <a href=\"https://play.rust-lang.org/?gist=87ad9f1610ce072f04264172d03c13a4&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">here</a>.</p>\n\n<hr>\n\n<p>Also, I'm aware that there may be a better way to accomplish what I'm trying to do. I'd love to hear any additional suggestions.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 155, "user_id": 1455008, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0e12862dc9b8c574b1451155060b6e4d?s=128&d=identicon&r=PG", "display_name": "bluejekyll", "link": "https://stackoverflow.com/users/1455008/bluejekyll"}, "edited": false, "score": 2, "creation_date": 1490733207, "post_id": 43079077, "comment_id": 73242058, "body": "I don&#39;t really see how you can avoid this. You can try and make it cheaper, by preallocating buffers, but someone has to own this memory. You can&#39;t know the length of your string before reading it from the command&#39;s output. Allocating on the heap makes sense to me."}, {"owner": {"reputation": 4150, "user_id": 7470620, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/49f3026fe13841e41d1805178eed9a3c?s=128&d=identicon&r=PG", "display_name": "eiko", "link": "https://stackoverflow.com/users/7470620/eiko"}, "reply_to_user": {"reputation": 155, "user_id": 1455008, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0e12862dc9b8c574b1451155060b6e4d?s=128&d=identicon&r=PG", "display_name": "bluejekyll", "link": "https://stackoverflow.com/users/1455008/bluejekyll"}, "edited": false, "score": 0, "creation_date": 1490736424, "post_id": 43079077, "comment_id": 73243718, "body": "@bluejekyll i&#39;ve clarified my question to show one way you seemingly can get a &amp;str out of a function simply by providing a dummy parameter to have a lifetime."}], "answers": [{"comments": [{"owner": {"reputation": 5385, "user_id": 973795, "user_type": "registered", "accept_rate": 54, "profile_image": "https://i.stack.imgur.com/xIqI6.jpg?s=128&g=1", "display_name": "JohnTortugo", "link": "https://stackoverflow.com/users/973795/johntortugo"}, "edited": false, "score": 0, "creation_date": 1609187335, "post_id": 43080280, "comment_id": 115772529, "body": "Aren&#39;t references just like a (C/C++) pointer to a memory location? Isn&#39;t <code>String::from(&quot;hello world&quot;)</code> allocated in the heap? Why can&#39;t Rust just return a reference (pointer) to that heap location then? I&#39;m really confused by this point."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 5385, "user_id": 973795, "user_type": "registered", "accept_rate": 54, "profile_image": "https://i.stack.imgur.com/xIqI6.jpg?s=128&g=1", "display_name": "JohnTortugo", "link": "https://stackoverflow.com/users/973795/johntortugo"}, "edited": false, "score": 0, "creation_date": 1609245706, "post_id": 43080280, "comment_id": 115787499, "body": "@JohnTortugo yes, references <i>are</i> like a pointer in many ways (and not, in others). If you saw a C function like <code>char *foo()</code>, do you free the returned data or not? <code>String</code> is effectively a struct with <code>(allocated_capacity, used_size, pointer_to_heap_allocation)</code>."}, {"owner": {"reputation": 5385, "user_id": 973795, "user_type": "registered", "accept_rate": 54, "profile_image": "https://i.stack.imgur.com/xIqI6.jpg?s=128&g=1", "display_name": "JohnTortugo", "link": "https://stackoverflow.com/users/973795/johntortugo"}, "edited": false, "score": 0, "creation_date": 1609284167, "post_id": 43080280, "comment_id": 115801915, "body": "Thanks, @Shepmaster. With <code>char *foo()</code> at least I have the option to [not] free if I need to keep the reference longer."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 5385, "user_id": 973795, "user_type": "registered", "accept_rate": 54, "profile_image": "https://i.stack.imgur.com/xIqI6.jpg?s=128&g=1", "display_name": "JohnTortugo", "link": "https://stackoverflow.com/users/973795/johntortugo"}, "edited": false, "score": 1, "creation_date": 1609285379, "post_id": 43080280, "comment_id": 115802191, "body": "@JohnTortugo not really, because you don\u2019t know <i>if</i> you can free it in the C code based on just the signature. Rust removes the ambiguity by splitting the two concepts into two types."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 62, "last_activity_date": 1529189793, "last_edit_date": 1529189793, "creation_date": 1490736509, "answer_id": 43080280, "question_id": 43079077, "link": "https://stackoverflow.com/questions/43079077/proper-way-to-return-a-new-string-in-rust/43080280#43080280", "title": "Proper way to return a new string in Rust", "body": "<p>You <a href=\"https://stackoverflow.com/q/29428227/155423\">cannot return a <code>&amp;str</code> if you've allocated the <code>String</code> in the function</a>. There's further discussion about <a href=\"https://stackoverflow.com/q/29781331/155423\">why</a>, as well as the fact that it's <a href=\"https://stackoverflow.com/q/32682876/155423\">not limited to strings</a>. That makes your choice <em>much</em> easier: return the <code>String</code>.</p>\n\n<blockquote>\n  <p><code>String</code>s are heap-allocated and built to be mutable.</p>\n</blockquote>\n\n<p><code>String</code>s are heap-allocated because they have an unknown length. Since that allocation is solely owned by the <code>String</code>, that's what grants the ability to mutate the string.</p>\n\n<blockquote>\n  <p>My function just returns a filepath for reference purposes, and I'd rather leave it up to the caller to decide if they need a heap-stored mutable string.</p>\n</blockquote>\n\n<p>This isn't possible. Your function has performed an allocation. If you don't return the allocation to the caller, then the value must be deallocated to prevent memory leaks. If it was returned after deallocation, that would be an invalid reference, leading to memory safety violations.</p>\n\n<blockquote>\n  <p>But I can also seemingly do this:</p>\n\n<pre><code>fn hello_string(x: &amp;str) -&gt; &amp;str {\n    return \"hello world\";\n}\n</code></pre>\n  \n  <p>to get a <code>&amp;str</code> out of my function. Can someone explain to me why this\n  is bad and why I should never do it? Or maybe it's not bad and okay in\n  certain situations?</p>\n</blockquote>\n\n<p>It's not <em>bad</em>, it just doesn't really allow you to do what you want in your original case. That <code>\"hello world\"</code> is a <code>&amp;'static str</code>, a string slice that's been stored inside the code of the program itself. It has a fixed length and is known to live longer than <code>main</code>.</p>\n\n<p>The signature <code>fn hello_string(x: &amp;str) -&gt; &amp;str</code> can be expanded to <code>fn hello_string&lt;'a&gt;(x: &amp;'a str) -&gt; &amp;'a str</code>. This indicates that the resulting string slice must have the <em>same</em> lifetime as the input string. A static string will outlive <em>any</em> lifetime, so that's valid to substitute.</p>\n\n<p>This would be useful for a function where the result is based on the input string only:</p>\n\n<pre><code>fn long_string(x: &amp;str) -&gt; &amp;str {\n    if x.len() &gt; 10 {\n        \"too long\"\n    } else {\n        x\n    }\n}\n</code></pre>\n\n<p>However, in your case, the function owns the <code>String</code>. If you attempted to return a reference to a <code>String</code>, completely unrelated to the input string:</p>\n\n<pre><code>fn hello_string(x: &amp;str) -&gt; &amp;str {\n    &amp;String::from(\"hello world\")\n}\n</code></pre>\n\n<p>You'll run into the common error message \"borrowed value does not live long enough\". That's because the borrowed value only lives until the end of method, not as long as the input string slice. You can't \"trick\" the compiler (or if you can, that's a major bug).</p>\n"}], "owner": {"reputation": 4150, "user_id": 7470620, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/49f3026fe13841e41d1805178eed9a3c?s=128&d=identicon&r=PG", "display_name": "eiko", "link": "https://stackoverflow.com/users/7470620/eiko"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 20979, "favorite_count": 7, "accepted_answer_id": 43080280, "answer_count": 1, "score": 51, "last_activity_date": 1529189793, "creation_date": 1490732094, "last_edit_date": 1490736281, "question_id": 43079077, "link": "https://stackoverflow.com/questions/43079077/proper-way-to-return-a-new-string-in-rust", "title": "Proper way to return a new string in Rust", "body": "<p>I just spent a week reading the Rust Book, and now I'm working on my first program, which returns the filepath to the system wallpaper:</p>\n\n<pre><code>pub fn get_wallpaper() -&gt; &amp;str {\n    let output = Command::new(\"gsettings\");\n    // irrelevant code\n    if let Ok(message) = String::from_utf8(output.stdout) {\n        return message;\n    } else {\n        return \"\";\n    }\n}\n</code></pre>\n\n<p>I'm getting the error <code>expected lifetime parameter on &amp;str</code> and I know Rust wants an input <code>&amp;str</code> which will be returned as the output because any <code>&amp;str</code> I create inside the function will be cleaned up immediately after the function ends.</p>\n\n<p>I know I can sidestep the issue by returning a <code>String</code> instead of a <code>&amp;str</code>, and many answers to similar questions have said as much. But I can also seemingly do this:</p>\n\n<pre><code>fn main() {\n    println!(\"message: {}\", hello_string(\"\"));\n}\n\nfn hello_string(x: &amp;str) -&gt; &amp;str {\n    return \"hello world\";\n}\n</code></pre>\n\n<p>to get a <code>&amp;str</code> out of my function. Can someone explain to me why this is bad and why I should never do it? Or maybe it's not bad and okay in certain situations?</p>\n"}, {"tags": ["generics", "rust", "traits", "generic-function"], "comments": [{"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 0, "creation_date": 1490725502, "post_id": 43076870, "comment_id": 73237574, "body": "Note that every time <code>test</code> is called, it is expected that <code>V</code> can be instantiated to <i>one</i> type. You would like to move the universal quantification of <code>V</code> to <code>Fn</code>. Unfortunately, that isn&#39;t directly possible. Maybe <a href=\"http://stackoverflow.com/questions/37606035/pass-generic-function-as-argument\">this will help?</a>"}, {"owner": {"reputation": 87, "user_id": 5304008, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/161b26cefcabbf272ba2f9eb67b9230b?s=128&d=identicon&r=PG&f=1", "display_name": "Cooki3Tube", "link": "https://stackoverflow.com/users/5304008/cooki3tube"}, "reply_to_user": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 0, "creation_date": 1490726729, "post_id": 43076870, "comment_id": 73238318, "body": "This wouldn&#39;t solve my problem since I want to pass in several diffrent functions. A Trait can&#39;t help either, because the generics would have to be speciefied on a method. Therefore I can&#39;t make it into an Object... Is there no way to avoid the monomorphization in this context ?"}], "answers": [{"tags": [], "owner": {"reputation": 155, "user_id": 1455008, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0e12862dc9b8c574b1451155060b6e4d?s=128&d=identicon&r=PG", "display_name": "bluejekyll", "link": "https://stackoverflow.com/users/1455008/bluejekyll"}, "is_accepted": false, "score": 1, "last_activity_date": 1490727162, "creation_date": 1490727162, "answer_id": 43077644, "question_id": 43076870, "link": "https://stackoverflow.com/questions/43076870/call-generic-closure-with-concrete-type/43077644#43077644", "title": "Call generic closure with concrete type", "body": "<p>This may not be exactly what you want, but it works:</p>\n\n<pre><code>trait T {}\ntrait T2 {}\nstruct S1 {}\nstruct S2 {}\nimpl T for S1 {}\nimpl T for S2 {}\n\nfn test&lt;F&gt;(foo: &amp;S1, bar: &amp;S2, f: F) \nwhere F: Fn (&amp;T)\n{\n   f(foo as &amp;T);\n   f(bar as &amp;T);\n}\n\nfn main() {\n   test(&amp;S1{}, &amp;S2{}, |_| println!(\"called\"));\n}\n</code></pre>\n\n<p>This causes foo and bar to be cast to a Trait object, which means that it will carry a vtable pointer (may not be desirable). It makes the F a polymorphic call.</p>\n\n<p>Without more information about your types, it's hard to understand what you're trying to do.</p>\n"}, {"comments": [{"owner": {"reputation": 87, "user_id": 5304008, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/161b26cefcabbf272ba2f9eb67b9230b?s=128&d=identicon&r=PG&f=1", "display_name": "Cooki3Tube", "link": "https://stackoverflow.com/users/5304008/cooki3tube"}, "edited": false, "score": 0, "creation_date": 1490727755, "post_id": 43077670, "comment_id": 73238919, "body": "Thought so too, just wanted to be sure. It needed to be a trait object since I need this closure to be <code>Sized</code>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 87, "user_id": 5304008, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/161b26cefcabbf272ba2f9eb67b9230b?s=128&d=identicon&r=PG&f=1", "display_name": "Cooki3Tube", "link": "https://stackoverflow.com/users/5304008/cooki3tube"}, "edited": false, "score": 0, "creation_date": 1490727947, "post_id": 43077670, "comment_id": 73239040, "body": "@Cooki3Tube <code>f</code> would be <code>Sized</code> in the last code block I show (otherwise it couldn&#39;t be a parameter!); so I must be misunderstanding you."}, {"owner": {"reputation": 87, "user_id": 5304008, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/161b26cefcabbf272ba2f9eb67b9230b?s=128&d=identicon&r=PG&f=1", "display_name": "Cooki3Tube", "link": "https://stackoverflow.com/users/5304008/cooki3tube"}, "edited": false, "score": 0, "creation_date": 1490728181, "post_id": 43077670, "comment_id": 73239173, "body": "I tried this an hour ago and the compiler complained... Now I tried this again and the compiler doesn&#39;t complain about this anymore. Strange"}, {"owner": {"reputation": 87, "user_id": 5304008, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/161b26cefcabbf272ba2f9eb67b9230b?s=128&d=identicon&r=PG&f=1", "display_name": "Cooki3Tube", "link": "https://stackoverflow.com/users/5304008/cooki3tube"}, "edited": false, "score": 0, "creation_date": 1490728278, "post_id": 43077670, "comment_id": 73239240, "body": "Do you have any advice how I could do this? I just need some logic to be given as a colsure which can operate on S1 and S2"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 87, "user_id": 5304008, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/161b26cefcabbf272ba2f9eb67b9230b?s=128&d=identicon&r=PG&f=1", "display_name": "Cooki3Tube", "link": "https://stackoverflow.com/users/5304008/cooki3tube"}, "edited": false, "score": 0, "creation_date": 1490728542, "post_id": 43077670, "comment_id": 73239395, "body": "@Cooki3Tube you&#39;d have to expand on your question a bit more. The code in both answers shows calling the closure with both <code>S1</code> and <code>S2</code>."}, {"owner": {"reputation": 87, "user_id": 5304008, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/161b26cefcabbf272ba2f9eb67b9230b?s=128&d=identicon&r=PG&f=1", "display_name": "Cooki3Tube", "link": "https://stackoverflow.com/users/5304008/cooki3tube"}, "edited": false, "score": 0, "creation_date": 1490729587, "post_id": 43077670, "comment_id": 73239978, "body": "Okay the less simplified version is: I want to be able to do something like the following <a href=\"https://play.rust-lang.org/?gist=ef8cbfa01aae4cbd82b0ecab39b4c96e&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">link</a> I explain my problem there in a bit more detail"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1490727244, "creation_date": 1490727244, "answer_id": 43077670, "question_id": 43076870, "link": "https://stackoverflow.com/questions/43076870/call-generic-closure-with-concrete-type/43077670#43077670", "title": "Call generic closure with concrete type", "body": "<p>This is not possible:</p>\n\n<pre><code>fn test&lt;V: T&gt;(foo: &amp;S1, bar: &amp;S2, f: &amp;Fn(&amp;V)) {\n    f::&lt;S1&gt;(foo);\n}\n</code></pre>\n\n<p>In effect, the function signature says:</p>\n\n<ul>\n<li>Please give me an <code>f</code> that takes a trait object of the trait <code>Fn</code> which takes a reference to a <code>V</code></li>\n<li>The <em>caller</em> is allowed to pick any concrete type for <code>V</code>, so long as it implements the trait <code>T</code></li>\n</ul>\n\n<p>Then the body of the function says:</p>\n\n<ul>\n<li>HAHAHA, just kidding, I'm going to call that <code>f</code> with the concrete type <code>S1</code>, regardless of what the caller picked.</li>\n</ul>\n\n<p>This cannot work because the <code>V</code> that the caller picked <em>might not be <code>S1</code></em>. In fact, it's most likely <strong>not</strong> going to be <code>S1</code>.</p>\n\n<p>About the only suggestion I can offer is to accept another trait object as the argument:</p>\n\n<pre><code>fn test(foo: &amp;S1, bar: &amp;S2, f: &amp;Fn(&amp;T)) {\n    f(foo);\n    f(bar);\n}\n</code></pre>\n\n<p>but you've already ruled that out, so...</p>\n\n<hr>\n\n<p>As a side note, I'm not sure why you are taking the closure as a trait object. Normally, I'd just accept a generic:</p>\n\n<pre><code>fn test&lt;F&gt;(foo: &amp;S1, bar: &amp;S2, f: F)\n    where F: Fn(&amp;T),\n</code></pre>\n\n<p>This allows for some level of monomorphization to occur.</p>\n"}], "owner": {"reputation": 87, "user_id": 5304008, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/161b26cefcabbf272ba2f9eb67b9230b?s=128&d=identicon&r=PG&f=1", "display_name": "Cooki3Tube", "link": "https://stackoverflow.com/users/5304008/cooki3tube"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 589, "favorite_count": 1, "accepted_answer_id": 43077670, "answer_count": 2, "score": 0, "last_activity_date": 1490727244, "creation_date": 1490724490, "last_edit_date": 1490726885, "question_id": 43076870, "link": "https://stackoverflow.com/questions/43076870/call-generic-closure-with-concrete-type", "title": "Call generic closure with concrete type", "body": "<p>Is it possible to call a generic function using a concrete type, with a concrete struct?</p>\n\n<p>Here a small example of what I want to do:</p>\n\n<pre><code>trait T {}\ntrait T2 {}\nstruct S1 {}\nstruct S2 {}\nimpl T for S1 {}\nimpl T for S2 {}\n\nfn test&lt;V: T&gt;(foo: &amp;S1, bar: &amp;S2, f: &amp;Fn(&amp;V)) {\n    f::&lt;S1&gt;(foo);\n    f(bar);\n}\n\nfn main() {\n    test(&amp;S1{}, &amp;S2{}, &amp;|_| println!(\"called\"));\n}\n</code></pre>\n\n<p>I can't get rid of the generic parameter <code>V</code> because the actual problem  I want to solve is much more involved. Furthermore I can't create a wrapping trait, because sometimes I have got a weak signature and sometimes <code>f</code> requires many more traits.</p>\n"}, {"tags": ["string", "rust"], "comments": [{"owner": {"reputation": 148712, "user_id": 19750, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/13b41b2620da0b1e630715e0c91a0b03?s=128&d=identicon&r=PG", "display_name": "Josh Lee", "link": "https://stackoverflow.com/users/19750/josh-lee"}, "edited": false, "score": 0, "creation_date": 1490722139, "post_id": 43074592, "comment_id": 73235664, "body": "<a href=\"https://stackoverflow.com/questions/26544542/modifying-chars-in-a-string-by-index\" title=\"modifying chars in a string by index\">stackoverflow.com/questions/26544542/&hellip;</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490727835, "post_id": 43074592, "comment_id": 73238967, "body": "Do you know if the whole string will be ASCII, or is it only guaranteed that the first / last character might be ASCII?"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490728844, "post_id": 43074592, "comment_id": 73239547, "body": "@Shepmaster I know nothing about the ascii-ness of the string. If the first/last character are <code>&quot;</code>, then they are ascii (obviously...), otherwise no guarantee."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 1, "creation_date": 1490802443, "post_id": 43074592, "comment_id": 73278019, "body": "I guess what you&#39;d want is if <a href=\"https://doc.rust-lang.org/std/ascii/trait.AsciiExt.html\" rel=\"nofollow noreferrer\">AsciiExt</a> had a <code>set_ascii_char_at(index, new_char)</code> which returns a <code>Result&lt;&gt;</code> rather than panics if it can&#39;t work.  But there doesn&#39;t seem to be anything like that today."}], "answers": [{"comments": [{"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 1, "creation_date": 1490718324, "post_id": 43074869, "comment_id": 73233382, "body": "Noob question, but doesn&#39;t this copy the whole string and then re-assign it to <code>s</code>? Shouldn&#39;t there be a way to do this by just mutating the first and last bytes?"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 0, "creation_date": 1490718675, "post_id": 43074869, "comment_id": 73233601, "body": "@Alec Exactly, this will copy and reassign the string, so I admit this isn&#39;t the best solution to the problem. Nevertheless, I&#39;ll just keep it here in case someone is ok with a copy."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 0, "creation_date": 1490727795, "post_id": 43074869, "comment_id": 73238935, "body": "@Alec <i>by just mutating the first and last bytes</i> \u2014 that&#39;s what OP&#39;s solution does, but it has to be unsafe because the type system can&#39;t guarantee that the first/last byte <i>was</i> ASCII and <i>remains</i> ASCII."}], "tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": false, "score": 1, "last_activity_date": 1490718627, "last_edit_date": 1490718627, "creation_date": 1490718132, "answer_id": 43074869, "question_id": 43074592, "link": "https://stackoverflow.com/questions/43074592/concise-and-safe-way-to-replace-certain-ascii-chars-with-other-ascii-chars-in-a/43074869#43074869", "title": "Concise and safe way to replace certain ASCII chars with other ASCII chars in a string", "body": "<p>Here is a safe, shortened version of that function, although it won't be memory efficient. This will create a copy and reassign the given string, so a pure function prototype returning a new string would probably be more fitting here. It also relies on the fact that the double quote character is 1-byte sized in UTF-8.</p>\n\n<pre><code>fn replace_wrapping_char(s: &amp;mut String) {\n    if s.len() &gt; 1 &amp;&amp; s.starts_with('\"') &amp;&amp; s.ends_with('\"') {\n        *s = format!(\"`{}`\", &amp;s[1 .. s.len()-1])\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=e3909df15c1bc128f2771a11fc1ae3eb&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground</a></p>\n"}], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 119, "favorite_count": 1, "answer_count": 1, "score": 3, "last_activity_date": 1490727467, "creation_date": 1490717282, "last_edit_date": 1490727467, "question_id": 43074592, "link": "https://stackoverflow.com/questions/43074592/concise-and-safe-way-to-replace-certain-ascii-chars-with-other-ascii-chars-in-a", "title": "Concise and safe way to replace certain ASCII chars with other ASCII chars in a string", "body": "<p>I want to write a function which takes a mutable string and checks if the first and last character are the <code>\"</code> character. If so, those two characters should be replaced with the backtick character <code>`</code>. I've come up with this solution:</p>\n\n<pre><code>fn replace_wrapping_char(s: &amp;mut String) {\n    if s.len() &gt; 1 &amp;&amp; s.starts_with('\"') &amp;&amp; s.ends_with('\"') {\n        unsafe {\n            let v = s.as_mut_vec();\n            v[0] = '`' as u8;\n            *v.last_mut().unwrap() = '`' as u8;\n        }\n    }\n}\n</code></pre>\n\n<p>This seems to work (yes, <code>'`'.is_ascii()</code> returns true), but it uses <code>unsafe</code> <em>and</em> looks a bit ugly to me.</p>\n\n<p>Is there a safe and concise way to achieve what I want?</p>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490712986, "post_id": 43072710, "comment_id": 73229412, "body": "I&#39;d <i>strongly</i> encourage to to review what a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> is and work on the <i>minimal</i> aspect. Something that specifies <b>12</b> where clauses is... very unusual, to say the least. Additionally, why have you decided to not paste the error message you get?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490713165, "post_id": 43072710, "comment_id": 73229552, "body": "Also <i>&quot;<b>Nothing</b> from the &amp;params reference will <b>not be</b> embedded&quot;</i>, vs. <i>&quot;<b>There no references</b> will be embedded in <code>R::Attrs</code>&quot;</i>"}, {"owner": {"reputation": 8357, "user_id": 89509, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/cd7501ce7690d916269249ed9feac68b?s=128&d=identicon&r=PG", "display_name": "Blake Pettersson", "link": "https://stackoverflow.com/users/89509/blake-pettersson"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490715722, "post_id": 43072710, "comment_id": 73231566, "body": "Sorry about the lack of clarity. I had already tried to strip it down, and I was trying to reduce the test case further, but I now see that you have answered my question. Thanks (and sorry yet again for my crappy question)!"}], "answers": [{"comments": [{"owner": {"reputation": 8357, "user_id": 89509, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/cd7501ce7690d916269249ed9feac68b?s=128&d=identicon&r=PG", "display_name": "Blake Pettersson", "link": "https://stackoverflow.com/users/89509/blake-pettersson"}, "edited": false, "score": 0, "creation_date": 1490715780, "post_id": 43073413, "comment_id": 73231596, "body": "Thanks yet again, I see that I&#39;ll have to do some reading about higher ranked trait bounds now!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1490714145, "creation_date": 1490714145, "answer_id": 43073413, "question_id": 43072710, "link": "https://stackoverflow.com/questions/43072710/correct-lifetime-for-intofoo-with-reference-as-a-parameter/43073413#43073413", "title": "Correct lifetime for Into&lt;Foo&gt; with reference as a parameter", "body": "<p>The error you get (which I don't know why you didn't share):</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0373]: closure may outlive the current function, but it borrows `params`, which is owned by the current function\n  --&gt; src/main.rs:22:64\n   |\n22 |     let data: Vec&lt;&lt;R as ToJson&gt;::Attrs&gt; = list.into_iter().map(|e| (e, &amp;params).into()).collect();\n   |                                                                ^^^      ------ `params` is borrowed here\n   |                                                                |\n   |                                                                may outlive borrowed value `params`\n   |\nhelp: to force the closure to take ownership of `params` (and any other referenced variables), use the `move` keyword, as shown:\n   |     let data: Vec&lt;&lt;R as ToJson&gt;::Attrs&gt; = list.into_iter().map(move |e| (e, &amp;params).into()).collect();\n</code></pre>\n\n<p>You create <code>params</code> inside your function, but then all of the trait bounds require that the lifetime of <code>params</code> must match the lifetime of the string passed in from outside. It's not possible to satisfy that bound, and it looks like the reference to <code>params</code> has to live longer than the function, via the closure. Thus the so-so error message. </p>\n\n<p>You should not tie these lifetimes together. Use <a href=\"https://doc.rust-lang.org/nomicon/hrtb.html\" rel=\"nofollow noreferrer\"><em>higher-ranked trait bounds</em></a> instead:</p>\n\n<pre><code>pub fn index&lt;T, R, P, S, F&gt;\n    (repository: T,\n     query: &amp;str)\n     -&gt; Result&lt;JsonApiArray&lt;&lt;R as ToJson&gt;::Attrs&gt;, QueryStringParseError&gt;\n    where T: JsonApiRepository&lt;T = R&gt;,\n          P: Params,\n          P: Default,\n          P: TypedParams&lt;SortField = S, FilterField = F&gt;,\n          P: for&lt;'b&gt; TryFrom&lt;(&amp;'b str, SortOrder, P), Err = QueryStringParseError&gt;,\n          P: for&lt;'b&gt; TryFrom&lt;(&amp;'b str, Vec&lt;&amp;'b str&gt;, P), Err = QueryStringParseError&gt;,\n          R: ToJson,\n          R: for&lt;'b&gt; QueryString&lt;'b, Params = P, SortField = S, FilterField = F&gt;,\n          R: JsonApiResource&lt;Params = P&gt;,\n          &lt;R as ToJson&gt;::Attrs: for&lt;'b&gt; From&lt;(R, &amp;'b P)&gt;,\n          QueryStringParseError: From&lt;&lt;T as JsonApiRepository&gt;::Error&gt;\n{\n</code></pre>\n"}], "owner": {"reputation": 8357, "user_id": 89509, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/cd7501ce7690d916269249ed9feac68b?s=128&d=identicon&r=PG", "display_name": "Blake Pettersson", "link": "https://stackoverflow.com/users/89509/blake-pettersson"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 51, "favorite_count": 0, "accepted_answer_id": 43073413, "answer_count": 1, "score": 0, "last_activity_date": 1490716193, "creation_date": 1490712367, "last_edit_date": 1490716193, "question_id": 43072710, "link": "https://stackoverflow.com/questions/43072710/correct-lifetime-for-intofoo-with-reference-as-a-parameter", "title": "Correct lifetime for Into&lt;Foo&gt; with reference as a parameter", "body": "<p>I'm not sure what the appropriate question to ask here, but I have an issue with getting the correct lifetime set in a generic method. The full code is <a href=\"https://play.rust-lang.org/?gist=3b4d76708605dfbdedaa943528678c51&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">here</a>, but the basic issue is that I have a method looking something like below, but I get a lifetime error. Nothing from the <code>&amp;params</code> reference will be embedded into the struct that's returned from <code>.into()</code>, so this should be safe. What do I need to get this to work?</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub fn index&lt;'a, T, R, P&gt;(repository: T, query: &amp;'a str) -&gt; Result&lt;Vec&lt;&lt;R as ToJson&gt;::Attrs&gt;, QueryStringParseError&gt;\n    where\n        T: JsonApiRepository&lt;'a, T = R&gt;,\n        P: 'a,\n        R: ToJson,\n        R: QueryString&lt;'a, Params = P&gt;,\n        &lt;R as ToJson&gt;::Attrs: From&lt;(R, &amp;'a P)&gt;,\n        QueryStringParseError: From&lt;&lt;T as JsonApiRepository&lt;'a&gt;&gt;::Error&gt;\n{\n    let params = &lt;R as QueryString&gt;::from_str(query)?;\n    let list = repository.find_all(&amp;params)?;\n\n    // What's the correct lifetime incantation for this to work?\n    // No references will be embedded in `R::Attrs`, so this\n    // should be safe\n    let data: Vec&lt;&lt;R as ToJson&gt;::Attrs&gt; = list.into_iter().map(|e| (e, &amp;params).into()).collect();\n    Ok(data)\n}\n</code></pre>\n\n<p>(amended question with error below)</p>\n\n<pre><code>rustc 1.16.0 (30cf806ef 2017-03-10)\nerror[E0373]: closure may outlive the current function, but it borrows `params`, which is owned by the current function\n  --&gt; &lt;anon&gt;:16:64\n   |\n16 |     let data: Vec&lt;&lt;R as ToJson&gt;::Attrs&gt; = list.into_iter().map(|e| (e, &amp;params).into()).collect();\n   |                                                                ^^^      ------ `params` is borrowed here\n   |                                                                |\n   |                                                                may outlive borrowed value `params`\n   |\nhelp: to force the closure to take ownership of `params` (and any other referenced variables), use the `move` keyword, as shown:\n   |     let data: Vec&lt;&lt;R as ToJson&gt;::Attrs&gt; = list.into_iter().map(move |e| (e, &amp;params).into()).collect();\n</code></pre>\n"}, {"tags": ["objective-c", "rust", "core-graphics", "ffi"], "answers": [{"tags": [], "owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "is_accepted": true, "score": 1, "last_activity_date": 1490712703, "last_edit_date": 1495542324, "creation_date": 1490712703, "answer_id": 43072854, "question_id": 43071345, "link": "https://stackoverflow.com/questions/43071345/how-do-i-determine-the-actual-values-of-certain-objective-c-constants/43072854#43072854", "title": "How do I determine the actual values of certain Objective-C constants?", "body": "<p><code>extern const</code> in C can be declared in Rust as a <code>static</code>.</p>\n\n<pre><code>extern {\n    pub static CGRectInfinite: CGRect;\n}\n</code></pre>\n\n<p>The use of <code>CGRectInfinite</code> is unsafe. You'd better provide a safe wrapper to access it.</p>\n\n<pre><code>impl CGRect {\n    pub fn infinite() -&gt; CGRect {\n        unsafe { CGRectInfinite }\n    }\n}\n</code></pre>\n\n<p>The <a href=\"https://stackoverflow.com/questions/25135341/why-is-there-a-difference-between-cgrectinfinite-and-a-cgrect-with-all-members-s\">actual value of <code>CGRectInfinite</code></a>, by the way, is:</p>\n\n<pre><code>#[cfg(target_pointer_width=\"64\")]\npub const CGRectInfinite: CGRect = CGRect {\n    origin: CGPoint {\n        x: -0.5 * f64::MAX,\n        y: -0.5 * f64::MAX,\n    },\n    size: CGSize {\n        width: f64::MAX,\n        height: f64::MAX,\n    },\n};\n\n// similar on 32-bit, replacing f64 by f32.\n</code></pre>\n\n<p>but you should not rely on the actual value of the constant. </p>\n"}], "owner": {"reputation": 575, "user_id": 1408421, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/1b26a9d9a04980f0f366addb50cec23a?s=128&d=identicon&r=PG", "display_name": "ScienceSE", "link": "https://stackoverflow.com/users/1408421/sciencese"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 66, "favorite_count": 0, "accepted_answer_id": 43072854, "answer_count": 1, "score": 1, "last_activity_date": 1490712703, "creation_date": 1490708873, "question_id": 43071345, "link": "https://stackoverflow.com/questions/43071345/how-do-i-determine-the-actual-values-of-certain-objective-c-constants", "title": "How do I determine the actual values of certain Objective-C constants?", "body": "<p>I'm using Objective-C functions in my Rust application through the layer of different bindings. So far it was simple to call Objective-C functions and to implement the required functionality without any problems. But now it seems that I found an impediment which I don't know how to solve, some of the functions from <code>CoreGraphics</code> require several constants to work properly. </p>\n\n<p>So the question is how can I get the actual value of a particular constant? For instance, let's say that I want to get the value of <code>CGRectInfinite</code> constant (CoreGraphics), is it possible to get it?</p>\n\n<p>For integer constants/enums it was quite simple -- I just opened XCode and navigated to the appropriate header file, which contained the required values, then I just copy-pasted the values into my application.  But what to do if a constant is something like <code>CGRect</code>?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1490714721, "post_id": 43070636, "comment_id": 73230779, "body": "One question - why is this <code>else</code> block necessary?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1490714800, "post_id": 43070636, "comment_id": 73230839, "body": "@VictorPolevoy because the macro is defined to expect it. I don&#39;t know if it could be changed or not."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 15, "last_activity_date": 1490706933, "creation_date": 1490706933, "answer_id": 43070636, "question_id": 43070430, "link": "https://stackoverflow.com/questions/43070430/is-there-a-way-to-use-the-cfgfeature-check-on-multiple-statements/43070636#43070636", "title": "Is there a way to use the cfg(feature) check on multiple statements?", "body": "<p>The <a href=\"https://crates.io/crates/cfg-if\" rel=\"noreferrer\">cfg-if crate</a> provides the <code>cfg-if!</code> macro that should do what you want:</p>\n\n<pre><code>#[macro_use]\nextern crate cfg_if;\n\ncfg_if! {\n    if #[cfg(feature = \"eugene\")] {\n        pub mod eugene_set_steam_id;\n        pub mod eugene_balance;\n        pub mod eugene_force_map;\n        pub mod eugene_rating;\n        pub mod eugene_stat;\n        pub mod eugene_steam_id;\n        pub mod eugene_top;\n    } else {\n    }\n}\n</code></pre>\n\n<p>In fact, it even describes itself using your words:</p>\n\n<blockquote>\n  <p>A macro to ergonomically define an item depending on a large number of <code>#[cfg]</code> parameters. Structured like an if-else chain, the first matching branch is the item that gets emitted.</p>\n</blockquote>\n"}, {"comments": [{"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1490949114, "post_id": 43070938, "comment_id": 73349377, "body": "Actually I have decided to use your approach because it does not need a dependency and it can be done simply using the language itself."}, {"owner": {"reputation": 2072, "user_id": 6409041, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7db77a32274727bdb912a64e7b99335e?s=128&d=identicon&r=PG&f=1", "display_name": "MaxV", "link": "https://stackoverflow.com/users/6409041/maxv"}, "edited": false, "score": 0, "creation_date": 1563167854, "post_id": 43070938, "comment_id": 100595676, "body": "Unfortunately it won&#39;t work for external crate imports."}], "tags": [], "owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "is_accepted": false, "score": 13, "last_activity_date": 1569848123, "last_edit_date": 1569848123, "creation_date": 1490707667, "answer_id": 43070938, "question_id": 43070430, "link": "https://stackoverflow.com/questions/43070430/is-there-a-way-to-use-the-cfgfeature-check-on-multiple-statements/43070938#43070938", "title": "Is there a way to use the cfg(feature) check on multiple statements?", "body": "<p>You could create a private module that import all the files, and then let the parent module re-export everything from that private module:</p>\n\n<pre><code>#[cfg(feature = \"eugene\")]\n#[path = \"\"]\nmod reexport_eugene_modules {\n    pub mod eugene_set_steam_id;\n    pub mod eugene_balance;\n    pub mod eugene_force_map;\n    pub mod eugene_rating;\n    pub mod eugene_stat;\n    pub mod eugene_steam_id;\n    pub mod eugene_top;\n}\n\n#[cfg(feature = \"eugene\")]\npub use reexport_eugene_modules::*;\n</code></pre>\n\n<p>You still need to write that <code>#[cfg]</code> line twice though.</p>\n"}], "owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2439, "favorite_count": 4, "accepted_answer_id": 43070636, "answer_count": 2, "score": 16, "last_activity_date": 1569848123, "creation_date": 1490706361, "last_edit_date": 1490706632, "question_id": 43070430, "link": "https://stackoverflow.com/questions/43070430/is-there-a-way-to-use-the-cfgfeature-check-on-multiple-statements", "title": "Is there a way to use the cfg(feature) check on multiple statements?", "body": "<p>Is there a way to minimize the following feature check?</p>\n\n<pre><code>#[cfg(feature = \"eugene\")]\npub mod eugene_set_steam_id;\n#[cfg(feature = \"eugene\")]\npub mod eugene_balance;\n#[cfg(feature = \"eugene\")]\npub mod eugene_force_map;\n#[cfg(feature = \"eugene\")]\npub mod eugene_rating;\n#[cfg(feature = \"eugene\")]\npub mod eugene_stat;\n#[cfg(feature = \"eugene\")]\npub mod eugene_steam_id;\n#[cfg(feature = \"eugene\")]\npub mod eugene_top;\n</code></pre>\n\n<p>To something like:</p>\n\n<pre><code>#[cfg(feature = \"eugene\")] {\n    pub mod eugene_set_steam_id;\n    pub mod eugene_balance;\n    pub mod eugene_force_map;\n    pub mod eugene_rating;\n    pub mod eugene_stat;\n    pub mod eugene_steam_id;\n    pub mod eugene_top;\n}\n</code></pre>\n\n<p>This would better convey meaning and be more ergonomic.</p>\n"}, {"tags": ["reference", "rust", "closures"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1555530690, "last_edit_date": 1555530690, "creation_date": 1490704783, "answer_id": 43069855, "question_id": 43069178, "link": "https://stackoverflow.com/questions/43069178/how-can-i-pass-a-fnmut-closure-to-a-function-using-a-reference-in-rust/43069855#43069855", "title": "How can I pass a FnMut closure to a function using a reference in Rust?", "body": "<p>As the error message says:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>expected type `&amp;mut _`\n   found type `&amp;[closure@src/main.rs:3:25: 3:53 string:_]`\n</code></pre>\n\n<p>It is expecting a mutable reference to <em>something</em> (<code>&amp;mut _</code>), but you are providing an immutable reference to a closure (<code>&amp;...</code>). Take a mutable reference:</p>\n\n<pre><code>call(&amp;mut change_string);\n</code></pre>\n\n<p>Which leads to the next error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: cannot borrow immutable local variable `change_string` as mutable\n --&gt; src/main.rs:9:15\n  |\n3 |     let change_string = || string.push_str(\" world\");\n  |         ------------- use `mut change_string` here to make mutable\n...\n9 |     call(&amp;mut change_string);\n  |               ^^^^^^^^^^^^^ cannot borrow mutably\n</code></pre>\n\n<p>Taking a mutable reference requires that the value itself be mutable:</p>\n\n<pre><code>let mut change_string = || string.push_str(\" world\");\n</code></pre>\n\n<hr>\n\n<p>In this case, you don't need to take a <code>&amp;mut F</code> at all, as <code>FnMut</code> is implemented for mutable references to <code>FnMut</code>. That is, this works:</p>\n\n<pre><code>fn call(mut f: impl FnMut()) {\n    f();\n}\n\ncall(&amp;mut change_string);\ncall(&amp;mut change_string);\n</code></pre>\n"}], "owner": {"reputation": 699, "user_id": 7093297, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/Pi7EY.jpg?s=128&g=1", "display_name": "wind2412", "link": "https://stackoverflow.com/users/7093297/wind2412"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 854, "favorite_count": 0, "accepted_answer_id": 43069855, "answer_count": 1, "score": 1, "last_activity_date": 1555530690, "creation_date": 1490702941, "last_edit_date": 1555530509, "question_id": 43069178, "link": "https://stackoverflow.com/questions/43069178/how-can-i-pass-a-fnmut-closure-to-a-function-using-a-reference-in-rust", "title": "How can I pass a FnMut closure to a function using a reference in Rust?", "body": "<p>I've learned how to pass a closure argument to a function so I can call <code>closure</code> twice:</p>\n\n<pre><code>let closure = || println!(\"hello\");\nfn call&lt;F&gt;(f: &amp;F)\nwhere\n    F: Fn(),\n{\n    f();\n}\ncall(&amp;closure);\ncall(&amp;closure);\n</code></pre>\n\n<p>When I use <code>FnMut</code>:</p>\n\n<pre><code>let mut string: String = \"hello\".to_owned();\nlet change_string = || string.push_str(\" world\");\nfn call&lt;F&gt;(mut f: &amp;mut F)\nwhere\n    F: FnMut(),\n{\n    f();\n}\ncall(&amp;change_string);\ncall(&amp;change_string);\n</code></pre>\n\n<p>It will turn out an error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:10:10\n   |\n10 |     call(&amp;change_string);\n   |          ^^^^^^^^^^^^^^ types differ in mutability\n   |\n   = note: expected type `&amp;mut _`\n              found type `&amp;[closure@src/main.rs:3:25: 3:53 string:_]`\n</code></pre>\n\n<p>How can I solve it?</p>\n"}, {"tags": ["enums", "rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1490700751, "post_id": 43067620, "comment_id": 73220123, "body": "I agree with you that I&#39;d rather it be a warning. You may want to start a discussion on the Rust internals forum (<a href=\"https://internals.rust-lang.org/\" rel=\"nofollow noreferrer\">internals.rust-lang.org</a>) or the reddit channel (<a href=\"https://www.reddit.com/r/rust/\" rel=\"nofollow noreferrer\">reddit.com/r/rust</a>) to gauge the mood about moving this to a warning."}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1490700391, "post_id": 43067883, "comment_id": 73219878, "body": "I think that there&#39;s a big difference between the two though. It is known that <code>bool</code> will never get any other value, however it is not known that an <code>enum</code> will not."}, {"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1490700512, "post_id": 43067883, "comment_id": 73219951, "body": "Though I understand your answer, personally I do not treat this as a error. Yes, this branch will always be executed, so what? Why not to let it go? And example of <code>enum</code> shows good that we can&#39;t guarantee that the <code>if let</code> will compile because someday the <code>enum</code> may be changed because of conditional compilation and it will break everything. I don&#39;t think this is a good error, even more - that this is a problem. This makes sense only in certain well-defined situations where conditional compilation is absent."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1490702621, "post_id": 43067883, "comment_id": 73221358, "body": "&quot;Why not to let it go?&quot;  Because always taking one branch over the other is quite possibly a mistake the programmer isn&#39;t aware of.  <code>cfg!(...)</code> exists, though, which makes unconditional branching &quot;useful&quot; for <code>if</code>, but <code>if let</code> has no such use.  &quot;... someday the <code>enum</code> may be changed ...&quot;  Which is why Rust makes non-exhaustive matching a hard error, so that you&#39;re far less likely to forget to update matches after changing the enum.  Unconditional <code>if let</code> being a hard error makes sense if you consider the full context: Rust errs on the side of disallowing probable mistakes."}, {"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1490703396, "post_id": 43067883, "comment_id": 73221890, "body": "@DK. that sounds good but only sounds good. So, I have disabled some features and now my code does not compile. I have to rewrite it by using <code>match</code>es instead of <code>if let</code>. And so will happen more and more times because I will not trust <code>if let</code> anymore. Also, however, this <b>may</b> lead to a problem you wrote, this also <b>may not</b> lead to such problems in other cases, it depends on what engineer intentions were. So this definitely should be a silenceable warning instead of a error."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 2, "creation_date": 1490703520, "post_id": 43067883, "comment_id": 73221984, "body": "@VictorPolevoy I didn&#39;t say it shouldn&#39;t be; I was trying to provide context as to why it&#39;s designed the way it is.  Degenerate enums caused by conditional compilation + <code>if let</code> is such a niche combination that it&#39;s possible very few people have ever had this problem."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 1, "last_activity_date": 1490699114, "creation_date": 1490699114, "answer_id": 43067883, "question_id": 43067620, "link": "https://stackoverflow.com/questions/43067620/conditional-compilation-with-a-if-let-enum-matching-which-consists-of-one-item/43067883#43067883", "title": "Conditional compilation with a if let enum matching which consists of one item", "body": "<p><code>if let</code> expects a refutable pattern, similar to how <code>if</code> expects a <code>bool</code>. You can't write <code>if () { something }</code>, even though <code>()</code> is \"valid\" in some sense. If you had <code>if () {} else { something_else }</code> it would be statically known that the else cannot occur.</p>\n\n<p>Arguably <code>if true { something }</code> is also statically known, but there's a difference: The condition is a <code>bool</code>, which has two values, so even if you statically know the value, the type still offers multiple variants.</p>\n\n<p>With <code>if let</code> it's the same, but you can use user defined types instead of just <code>bool</code>. If your enum has multiple variants, you can't statically decide that the if let is always taken. If the enum has a single variant, you know for a fact that the if condition is always true, so even if you had an <code>else</code> branch, it would not make any sense at all to exist.</p>\n"}], "owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 482, "favorite_count": 0, "accepted_answer_id": 43067883, "answer_count": 1, "score": 2, "last_activity_date": 1490699114, "creation_date": 1490698279, "last_edit_date": 1490698792, "question_id": 43067620, "link": "https://stackoverflow.com/questions/43067620/conditional-compilation-with-a-if-let-enum-matching-which-consists-of-one-item", "title": "Conditional compilation with a if let enum matching which consists of one item", "body": "<p>I have the following <code>enum</code>:</p>\n\n<pre><code>pub enum Game {\n    Match(GameWorker),\n    #[cfg(feature = \"cups\")]\n    Cup(CupWorker),\n}\n</code></pre>\n\n<p>So, this <code>enum</code> consists of one item if <code>cups</code> feature is disabled. The code below with <code>match</code> compiles okay but in place where I use <code>if let</code>s on matching this <code>enum</code> there is a error:</p>\n\n<p>Working <code>match</code>:</p>\n\n<pre><code>fn clear(&amp;mut self, silent: bool) {\n    match *self {\n        Game::Match(ref mut gm) =&gt; gm.clear(silent),\n        #[cfg(feature = \"cups\")]\n        Game::Cup(ref mut c) =&gt; c.clear(silent),\n    }\n}\n</code></pre>\n\n<p><code>if let</code> which leads to a compile error:</p>\n\n<pre><code>let m: &amp;mut Game = Game::Match(...);\nif let Game::Match(ref mut gamematch) = *m {\n    // ...\n}\n</code></pre>\n\n<p>Error:</p>\n\n<pre><code>error[E0162]: irrefutable if-let pattern\n   --&gt; src/game.rs:436:32\n    |\n436 |                         if let Game::Match(ref mut gamematch) = *m {\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ irrefutable pattern\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=59933830de9f7ed68521e1ba48386de4&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Minimal example</a></p>\n\n<p>Is there a way to allow such <code>if let</code>s ? I like this construction but somewhy it is not allowed to use it, I don't understand why. As shown above, <code>match</code> construction works okay in the same case. In my personal opinion here should be a silenceable <code>warning</code> instead of <code>error</code>.</p>\n"}, {"tags": ["rust", "glium"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1490704877, "post_id": 43059662, "comment_id": 73222994, "body": "<i>My suspicion is that cloning the entire screen buffer via clone_from_slice is really inefficient.</i> \u2014 what does your <b>profiling say</b>? There&#39;s no reason to make guesses."}], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 1, "last_activity_date": 1490710771, "creation_date": 1490710771, "answer_id": 43072099, "question_id": 43059662, "link": "https://stackoverflow.com/questions/43059662/efficient-2d-rendering-with-glium/43072099#43072099", "title": "Efficient 2D rendering with Glium", "body": "<p><em>This won't be a very good answer, but maybe a few things here could help you.</em></p>\n\n<hr>\n\n<p>First of all: is this really inefficient? That's really hard to say, especially the OpenGL part, as OpenGL performance depends a lot on when synchronization is required/requested.</p>\n\n<p>As for the cloning of the screen buffer: you are merely copying 180kb, which is not too much. I quickly benchmarked it on my machine and cloning a 180kb vector takes around 5\u00b5s, which is really not a lot. </p>\n\n<p>Note that you can create a <code>RawImage2d</code> without using a method, because all fields are public. This means that you can avoid the simple 5\u00b5s clone if you create a reversed vector yourself. <em>However</em>, reversing the vector with <a href=\"https://docs.rs/glium/0.16.0/src/glium/texture/mod.rs.html#427-432\" rel=\"nofollow noreferrer\">the method glium uses</a> is a lot slower than just cloning the vector; on my machine it takes 170\u00b5s for a vector of the same length. This is probably still <em>tolerable</em> if you just want to achieve 60fps = 17ms per frame, but still not very nice.</p>\n\n<p>You could think about using the correct row ordering in your original array to avoid this problem. OR you could, instead of directly copying the texture to the framebuffer, just draw a fullscreen quad (one vertex for each screen corner) with the texture on it. Sure, then you need a mesh, a shader and all that stuff, but you could just \"reverse\" the image by tweaking the texture coordinates.</p>\n\n<p>Lastly, I unfortunately don't know a lot about the time the GPU takes to execute the OpenGL commands. I'd <em>guess</em> that it's not optimal because OpenGL doesn't have a lot of room to schedule your commands, but has to execute them right away (forced synchronization). But maybe that's not avoidable in your case.</p>\n"}], "owner": {"reputation": 13635, "user_id": 547365, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/ddefbca930fdd39846b698bab7ac3146?s=128&d=identicon&r=PG", "display_name": "w.brian", "link": "https://stackoverflow.com/users/547365/w-brian"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 781, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1490710771, "creation_date": 1490668193, "question_id": 43059662, "link": "https://stackoverflow.com/questions/43059662/efficient-2d-rendering-with-glium", "title": "Efficient 2D rendering with Glium", "body": "<p>I'm using Glium to do rendering for an emulator I'm writing. I've pieced together something that works (based on <a href=\"https://github.com/tomaka/glium/blob/master/examples/image.rs\" rel=\"nofollow noreferrer\">this example</a>) but I suspect that it's pretty inefficient.  Here's the relevant function:</p>\n\n<pre><code>fn update_screen(display: &amp;Display, screen: &amp;Rc&lt;RefCell&lt;NesScreen&gt;&gt;) {\n    let target = display.draw();\n\n    // Write screen buffer\n    let borrowed_scr = screen.borrow();\n    let mut buf = vec![0_u8; 256 * 240 * 3];\n    buf.clone_from_slice(&amp;borrowed_scr.screen_buffer[..]);\n    let screen = RawImage2d::from_raw_rgb_reversed(buf, SCREEN_DIMENSIONS);\n    glium::Texture2d::new(display, screen)\n        .unwrap()\n        .as_surface()\n        .fill(&amp;target, MagnifySamplerFilter::Nearest);\n\n    target.finish().unwrap();\n}\n</code></pre>\n\n<p>At a high level, this is what I'm doing:</p>\n\n<ul>\n<li>Borrow <code>NesScreen</code> which contains the screen buffer, which is an array.</li>\n<li>Clone the screen buffer into a vector</li>\n<li>Create a texture from the vector data and render it</li>\n</ul>\n\n<p>My suspicion is that cloning the entire screen buffer via <code>clone_from_slice</code> is really inefficient.  The <code>RawImage2d::from_raw_rgb_reversed</code> function takes ownership of the vector passed into it, so I'm not sure how to do this in a way that avoids the clone.</p>\n\n<p>So, two questions:</p>\n\n<ul>\n<li><p>Is this <em>actually</em> inefficient? I don't have enough experience rendering stuff to know intuitively.</p></li>\n<li><p>If so, is there a more efficient way to do this? I've scoured Glium quite  a bit but there isn't much specific to 2D rendering. </p></li>\n</ul>\n"}, {"tags": ["sockets", "tcp", "rust"], "answers": [{"comments": [{"owner": {"reputation": 115, "user_id": 4817207, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-iAcsTAIriao/AAAAAAAAAAI/AAAAAAAAAJA/QDrFa2DhV6k/photo.jpg?sz=128", "display_name": "f3rn0s", "link": "https://stackoverflow.com/users/4817207/f3rn0s"}, "edited": false, "score": 0, "creation_date": 1490665305, "post_id": 43059202, "comment_id": 73202883, "body": "Thank you very much, I just started out with Rust recently and are still getting used to the general syntax/ methodology. This really helps."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1490665011, "creation_date": 1490665011, "answer_id": 43059202, "question_id": 43059102, "link": "https://stackoverflow.com/questions/43059102/how-can-i-stop-on-a-new-line-when-using-read-to-string/43059202#43059202", "title": "How can I stop on a new line when using read_to_string?", "body": "<p>You want to read a single line, the method for which is called <a href=\"https://doc.rust-lang.org/std/io/trait.BufRead.html#method.read_line\" rel=\"nofollow noreferrer\"><code>BufRead::read_line</code></a>. You can wrap something implementing <code>Read</code> in a <a href=\"https://doc.rust-lang.org/std/io/trait.BufReader.html\" rel=\"nofollow noreferrer\"><code>BufReader</code></a>:</p>\n\n<pre><code>use std::io::{Write, BufRead, BufReader};\nuse std::net::TcpStream;\n\nfn handle_client(mut conn: TcpStream) {\n    writeln!(&amp;mut conn, \"Hello!\").expect(\"Unable to write\");\n    writeln!(&amp;mut conn, \"Bye!\").expect(\"Unable to write\");\n\n    let mut response = String::new();\n    let mut conn = BufReader::new(conn);\n    let length = conn.read_line(&amp;mut response).expect(\"unable to read\");\n    println!(\"Message:\\n{}\\n\\nLength: {}\", response, length);\n}\n\nfn main() {}\n</code></pre>\n\n<hr>\n\n<p>Additional notes on the original code:</p>\n\n<ol>\n<li><p><strong>Don't ignore errors</strong>. If you want to ignore errors, then Rust may not be a language you enjoy using. Errors are designed to be hard to ignore.</p></li>\n<li><p>There's no reason to re-bind <code>stream</code> to <code>conn</code>, just make it mutable.</p></li>\n<li><p>Use the <code>write!</code> and <code>writeln!</code> macros to simplify formatting to something that implements <code>Read</code>.</p></li>\n<li><p>Don't use <code>\"\".to_string</code>, just use <code>String::new</code>.</p></li>\n<li><p>There's no reason to list the type for <code>response</code> twice (<code>: String</code>, <code>= String::new()</code>), just let type inference handle it.</p></li>\n<li><p>Explicit <code>return</code> statements are not idiomatic Rust.</p></li>\n</ol>\n"}], "owner": {"reputation": 115, "user_id": 4817207, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-iAcsTAIriao/AAAAAAAAAAI/AAAAAAAAAJA/QDrFa2DhV6k/photo.jpg?sz=128", "display_name": "f3rn0s", "link": "https://stackoverflow.com/users/4817207/f3rn0s"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 562, "favorite_count": 0, "accepted_answer_id": 43059202, "answer_count": 1, "score": 1, "last_activity_date": 1490665011, "creation_date": 1490664361, "last_edit_date": 1490664824, "question_id": 43059102, "link": "https://stackoverflow.com/questions/43059102/how-can-i-stop-on-a-new-line-when-using-read-to-string", "title": "How can I stop on a new line when using read_to_string?", "body": "<p>I am writing a socket server in Rust, and have implemented response/send code. The main problem is that the method <code>read_to_string</code> works until the connection is closed, not until a newline is presented.</p>\n\n<p>For example, in this code,</p>\n\n<pre><code>use std::net::{TcpListener, TcpStream};\nuse std::io::Write;\nuse std::io::Read;\n\nfn handle_client(stream: TcpStream) {\n    let conn = stream;\n    let conn = send(conn, \"Hello!\");\n    let mut conn = send(conn, \"Bye!\");\n    fn send(mut stream: TcpStream, s: &amp;str) -&gt; TcpStream {\n        let giver = format!(\"{}\\n\", s);\n        let _ = stream.write(giver.into_bytes().as_slice());\n        return stream;\n    }\n    let mut response: String = \"\".to_string();\n    let length = conn.read_to_string(&amp;mut response); // ignore here too\n    println!(\"Message:\\n{}\\n\\nLength: {}\", response, length.unwrap());\n}\n</code></pre>\n\n<p>The server will wait for a disconnect before presenting any data.</p>\n\n<p>How can I make it so that the response will parse on newline?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 5, "last_activity_date": 1490662587, "creation_date": 1490662587, "answer_id": 43058883, "question_id": 43058762, "link": "https://stackoverflow.com/questions/43058762/how-to-do-in-place-assignments-in-rust/43058883#43058883", "title": "How to do in-place assignments in Rust?", "body": "<p>The assignment operators in Rust don't evaluate to the assigned value; they evaluate to <code>()</code>. Therefore, you need to read the variable after the assignment to obtain the new value. You can do this with a block, since blocks are also expressions.</p>\n\n<pre><code>let mut counter = 0;\nprintln!(\"{}\", { counter += 1; counter });\n</code></pre>\n\n<p>If you're going to do this often, consider defining a macro:</p>\n\n<pre><code>macro_rules! inc {\n    ($e:expr) =&gt; {\n        { $e += 1; $e }\n    }\n}\n\nlet mut counter = 0;\nprintln!(\"{}\", inc!(counter));\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 5, "last_activity_date": 1490705612, "last_edit_date": 1490705612, "creation_date": 1490662691, "answer_id": 43058897, "question_id": 43058762, "link": "https://stackoverflow.com/questions/43058762/how-to-do-in-place-assignments-in-rust/43058897#43058897", "title": "How to do in-place assignments in Rust?", "body": "<p>The shortest solution is to return the value:</p>\n\n<pre><code>let mut counter = 0;\nprintln!(\"{}\", {counter += 1; counter});\n</code></pre>\n\n<p>But honestly, I would say that this isn't idiomatic Rust, and you might as well just write it on another line:</p>\n\n<pre><code>let mut counter = 0;\ncounter += 1;\nprintln!(\"{}\", counter);\n</code></pre>\n\n<hr>\n\n<p>The longer answer is that you cannot get the value of the assignment. The trait for <a href=\"https://doc.rust-lang.org/std/ops/trait.AddAssign.html\" rel=\"nofollow noreferrer\"><code>AddAssign</code></a> is defined as</p>\n\n<pre><code>pub trait AddAssign&lt;Rhs = Self&gt; {\n    fn add_assign(&amp;mut self, Rhs);\n}\n</code></pre>\n\n<p>Notably, there is no value returned from the method. Rust does not have a useful value for the result of an assignment because <em>there isn't one</em>, in general. Ownership semantics make it complicated to figure out what the \"return value\" of something like <code>let x = String::new();</code> should be. If it were a <code>String</code>, then what would have happened to the ownership held by <code>x</code>? </p>\n\n<p>Since all expressions return <em>some</em> type, assignments return the empty tuple (<code>()</code>), also known as the <em>unit type</em>.</p>\n\n<p>In <em>this</em> case, the value is an integer, which implements the <a href=\"https://doc.rust-lang.org/std/marker/trait.Copy.html\" rel=\"nofollow noreferrer\"><code>Copy</code></a> trait. That means that you can trivially return a copy from the block. </p>\n\n<p>The same solution would \"work\" for a <code>String</code>, until you tried to use it afterwards:</p>\n\n<pre><code>let mut string = String::new();\nprintln!(\"{}\", {string += \"a\"; string});\nprintln!(\"{}\", string); // use of moved value: `string`\n</code></pre>\n\n<p>Which could be fixed by returning a reference:</p>\n\n<pre><code>println!(\"{}\", {string += \"a\"; &amp;string});\n</code></pre>\n\n<p>But at this point, there's not really any \"saving\" to be done.</p>\n"}], "owner": {"reputation": 5700, "user_id": 4934640, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/2f69527ae459cbbda0ab5c2e08686a50?s=128&d=identicon&r=PG&f=1", "display_name": "user", "link": "https://stackoverflow.com/users/4934640/user"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 551, "favorite_count": 0, "accepted_answer_id": 43058883, "answer_count": 2, "score": 0, "last_activity_date": 1490705612, "creation_date": 1490661828, "last_edit_date": 1490662376, "question_id": 43058762, "link": "https://stackoverflow.com/questions/43058762/how-to-do-in-place-assignments-in-rust", "title": "How to do in-place assignments in Rust?", "body": "<p>In C++, I can do in-place assignments that increment the variable <code>var</code> while printing it out to the screen:</p>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>int var = 5;\nstd::cout &lt;&lt; ( var += 1 ) &lt;&lt; std::endl;\n</code></pre>\n\n<p>I am doing this because Rust does not have the in/decrement operators <code>++</code> &amp; <code>--</code>. I tried it in Rust:</p>\n\n<pre><code>let mut counter = 0;\nprintln!(\"{}\", (counter += 1));\n</code></pre>\n\n<p>It is saying:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `(): std::fmt::Display` is not satisfied\n --&gt; src/main.rs:3:20\n  |\n3 |     println!(\"{}\", (counter += 1));\n  |                    ^^^^^^^^^^^^^^ the trait `std::fmt::Display` is not implemented for `()`\n  |\n  = note: `()` cannot be formatted with the default formatter; try using `:?` instead if you are using a format string\n  = note: required by `std::fmt::Display::fmt`\n</code></pre>\n"}, {"tags": ["arrays", "vector", "rust", "slice"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 2, "creation_date": 1490656987, "post_id": 43057950, "comment_id": 73200451, "body": "&quot;<i>I never gave this value to <code>output</code></i>&quot; =&gt; correct. In fact, you never gave any data to <code>output</code>. Neither <code>with_capacity()</code> nor <code>set_len()</code> initializes the memory, that&#39;s why the latter is even marked as <code>unsafe</code>. Why do you expect <code>output</code> to hold any useful data? [By the way: welcome to StackOverflow! If you have any questions about this format, just ask here in the comments]"}, {"owner": {"reputation": 229185, "user_id": 251311, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/b6b0ca5d4ef200ec8e3cd1fa2aefd836?s=128&d=identicon&r=PG", "display_name": "zerkms", "link": "https://stackoverflow.com/users/251311/zerkms"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 2, "creation_date": 1490657039, "post_id": 43057950, "comment_id": 73200466, "body": "@LukasKalbertodt is it just a coincidence that it contains <code>lorem ipsum.</code>?"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 229185, "user_id": 251311, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/b6b0ca5d4ef200ec8e3cd1fa2aefd836?s=128&d=identicon&r=PG", "display_name": "zerkms", "link": "https://stackoverflow.com/users/251311/zerkms"}, "edited": false, "score": 0, "creation_date": 1490657663, "post_id": 43057950, "comment_id": 73200649, "body": "@zerkms Wow, I haven&#39;t noticed that. The answer is probably what Francis said below. But it had me go &quot;wat&quot; for a moment... &#176;_&#176;"}, {"owner": {"reputation": 229185, "user_id": 251311, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/b6b0ca5d4ef200ec8e3cd1fa2aefd836?s=128&d=identicon&r=PG", "display_name": "zerkms", "link": "https://stackoverflow.com/users/251311/zerkms"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1490657705, "post_id": 43057950, "comment_id": 73200662, "body": "@LukasKalbertodt their answer does not sound convincing, since <code>.resize</code> is supposed to be in-place. Especially when you downsize it."}, {"owner": {"reputation": 229185, "user_id": 251311, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/b6b0ca5d4ef200ec8e3cd1fa2aefd836?s=128&d=identicon&r=PG", "display_name": "zerkms", "link": "https://stackoverflow.com/users/251311/zerkms"}, "edited": false, "score": 1, "creation_date": 1490658571, "post_id": 43057950, "comment_id": 73200917, "body": "If someone files a documentation issue - please put a link here."}], "answers": [{"comments": [{"owner": {"reputation": 229185, "user_id": 251311, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/b6b0ca5d4ef200ec8e3cd1fa2aefd836?s=128&d=identicon&r=PG", "display_name": "zerkms", "link": "https://stackoverflow.com/users/251311/zerkms"}, "edited": false, "score": 0, "creation_date": 1490657103, "post_id": 43058069, "comment_id": 73200487, "body": "But why does the <code>data.resize(data_len, 2);</code> line trigger this behaviour? If it&#39;s commented the <code>output</code> vector is full of zeroes."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 2, "creation_date": 1490657561, "post_id": 43058069, "comment_id": 73200628, "body": "<code>data.resize</code> probably allocates new storage with the requested length, copies the data over, then frees the old storage. When <code>output</code> is created, it looks like it reuses the old storage for the <code>data</code> vector."}, {"owner": {"reputation": 229185, "user_id": 251311, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/b6b0ca5d4ef200ec8e3cd1fa2aefd836?s=128&d=identicon&r=PG", "display_name": "zerkms", "link": "https://stackoverflow.com/users/251311/zerkms"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 2, "creation_date": 1490657641, "post_id": 43058069, "comment_id": 73200644, "body": "@FrancisGagn&#233; <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.resize\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/vec/struct.Vec.html#method.resize</a> &quot;Resizes the Vec in-place so that len() is equal to new_len.&quot;"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 229185, "user_id": 251311, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/b6b0ca5d4ef200ec8e3cd1fa2aefd836?s=128&d=identicon&r=PG", "display_name": "zerkms", "link": "https://stackoverflow.com/users/251311/zerkms"}, "edited": false, "score": 1, "creation_date": 1490657848, "post_id": 43058069, "comment_id": 73200702, "body": "@zerkms I&#39;m not sure about the documentation here, but at some point it has to allocate. If it&#39;s longer than the old capacity it can&#39;t be <i>in place</i>. Probably a documentation bug (or at least not clear enough). If you look in <a href=\"https://doc.rust-lang.org/src/collections/vec.rs.html#1196-1208\" rel=\"nofollow noreferrer\">the source code</a> you can see that <code>reserve()</code> will be called."}, {"owner": {"reputation": 229185, "user_id": 251311, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/b6b0ca5d4ef200ec8e3cd1fa2aefd836?s=128&d=identicon&r=PG", "display_name": "zerkms", "link": "https://stackoverflow.com/users/251311/zerkms"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1490657892, "post_id": 43058069, "comment_id": 73200719, "body": "@LukasKalbertodt yep, and in this case the new length is less, so it must truncate."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490658005, "post_id": 43058069, "comment_id": 73200745, "body": "The &quot;in-place&quot; probably refers to the <code>Vec</code> itself. The <code>Vec</code> is not moved, only the pointer inside the <code>Vec</code> might get a new value."}, {"owner": {"reputation": 229185, "user_id": 251311, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/b6b0ca5d4ef200ec8e3cd1fa2aefd836?s=128&d=identicon&r=PG", "display_name": "zerkms", "link": "https://stackoverflow.com/users/251311/zerkms"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1490658089, "post_id": 43058069, "comment_id": 73200770, "body": "@Shepmaster then it makes very little sense. In-place operation for collections is an established term, that means that it&#39;s sub-linear in terms of memory."}], "tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": false, "score": 3, "last_activity_date": 1490712106, "last_edit_date": 1490712106, "creation_date": 1490657040, "answer_id": 43058069, "question_id": 43057950, "link": "https://stackoverflow.com/questions/43057950/why-does-calling-vecresize-before-calling-vecset-len-cause-the-vec-to-have-d/43058069#43058069", "title": "Why does calling Vec::resize before calling Vec::set_len cause the Vec to have data?", "body": "<p>You are using unsafe Rust, which can give you unpredictable results.</p>\n\n<p>In this particular case, you are extending the size of the <code>Vec</code> into uninitialized memory. The values are whatever happens to be there already.</p>\n\n<p>So let's look at some of the code:</p>\n\n<pre><code>let mut data = data.to_vec();\n</code></pre>\n\n<p>This copies the data \"lorem ipsum.\" onto the heap in the form of a vector.</p>\n\n<pre><code>data.resize(data_len, 2); // data_len = 16\n</code></pre>\n\n<p>This increases the capacity of the <code>Vec</code> from 12 to 16 items, which happen to be bytes in this case. But actually, based on what we are seeing, it looks like the implementation (or possibly the optimiser) decided it was better to just abandon the first allocated memory range and copy the data to new memory instead.</p>\n\n<pre><code>let mut output = Vec::&lt;u8&gt;::with_capacity(data_len);\nunsafe { output.set_len(data_len) }\n</code></pre>\n\n<p>This creates a new vector and <em>unsafely</em> gives it a length. But you didn't initialise it, so the data will be what was there previously.</p>\n\n<p>It looks like <code>data.resize()</code> actually copied the value instead of just dropping the end of the vector. When <code>output</code> was allocated, it was allocated the same block of memory that was previously used, which is why it contains <code>\"lorem ipsum.\"</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1490660475, "last_edit_date": 1495540934, "creation_date": 1490660475, "answer_id": 43058604, "question_id": 43057950, "link": "https://stackoverflow.com/questions/43057950/why-does-calling-vecresize-before-calling-vecset-len-cause-the-vec-to-have-d/43058604#43058604", "title": "Why does calling Vec::resize before calling Vec::set_len cause the Vec to have data?", "body": "<p>To add some details to <a href=\"https://stackoverflow.com/a/43058069/155423\">Peter's answer</a>, check out this annotated version:</p>\n\n<pre><code>fn cipher_with(key: &amp;[u8], data: &amp;[u8]) -&gt; Vec&lt;u8&gt; {\n    let data_len = 16;\n\n    let mut data = data.to_vec();\n    println!(\"{:?}\", data.as_ptr());\n    data.resize(data_len, 2);\n    println!(\"{:?}\", data.as_ptr());\n\n    let mut output = Vec::&lt;u8&gt;::with_capacity(data_len);\n    println!(\"{:?}\", output.as_ptr());\n    unsafe { output.set_len(data_len) }\n\n    output\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>0x7fa6dba27000\n0x7fa6dba1e0c0\n0x7fa6dba27000\n</code></pre>\n\n<p>When the first vector is created, it has a length of 12. When it's resized to 16, a new allocation is made and the data copied. This is likely due to the implementation of the allocator, which usually chunks allocations into buckets. 16 would be a reasonable bucket size.</p>\n\n<p>When the second vector is created, the allocator hands back the same pointer that the first vector just gave up. Since nothing else has changed this memory in the mean time, it still contains whatever data was in <code>data</code>.</p>\n"}], "owner": {"reputation": 33, "user_id": 7776780, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/12388d34b1bbf46174c615fd4790bfe5?s=128&d=identicon&r=PG&f=1", "display_name": "Ogromny", "link": "https://stackoverflow.com/users/7776780/ogromny"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 219, "favorite_count": 0, "accepted_answer_id": 43058604, "answer_count": 2, "score": 3, "last_activity_date": 1490712106, "creation_date": 1490656375, "last_edit_date": 1490684326, "question_id": 43057950, "link": "https://stackoverflow.com/questions/43057950/why-does-calling-vecresize-before-calling-vecset-len-cause-the-vec-to-have-d", "title": "Why does calling Vec::resize before calling Vec::set_len cause the Vec to have data?", "body": "<p>I have a problem that I do not understand:</p>\n\n<pre><code>fn cipher_with(key: &amp;[u8], data: &amp;[u8]) -&gt; Vec&lt;u8&gt; {\n    let data_len = 16;\n\n    let mut data = data.to_vec();\n    data.resize(data_len, 2);\n\n    let mut output = Vec::&lt;u8&gt;::with_capacity(data_len);\n    unsafe { output.set_len(data_len) }\n\n    output\n}\n\nfn main() {\n    let key = \"blabla\".as_bytes();\n    let data = \"lorem ipsum.\".as_bytes();\n    println!(\"{:?}\", cipher_with(&amp;key, &amp;data));\n}\n</code></pre>\n\n<p>This prints:</p>\n\n<blockquote>\n  <p>[108, 111, 114, 101, 109, 32, 105, 112, 115, 117, 109, 46, 0, 0, 0, 0]</p>\n</blockquote>\n\n<p>But how is it done? I never gave this value to <code>output</code>.</p>\n"}, {"tags": ["generics", "rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 1257, "user_id": 649140, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/ff4ce275d6b5e7986cc235e90c90a07b?s=128&d=identicon&r=PG", "display_name": "Sam Kellett", "link": "https://stackoverflow.com/users/649140/sam-kellett"}, "edited": false, "score": 0, "creation_date": 1490657326, "post_id": 43058022, "comment_id": 73200562, "body": "this is nice as it doesn&#39;t add the extra type parameter"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1490657489, "post_id": 43058022, "comment_id": 73200611, "body": "Yep, this is better than my original solution. I added this solution to my answer as well, as you (Sam) already accepted mine. I hope you don&#39;t mind, Francis."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 1, "creation_date": 1490657751, "post_id": 43058022, "comment_id": 73200680, "body": "No problem. Our solutions are not quite identical, though: my version requests an iterator of doubles, while your version requests an iterator of <i>references</i> to doubles; you might want to mention this."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1490658041, "post_id": 43058022, "comment_id": 73200754, "body": "@FrancisGagn&#233; Oh thank you \u2665 Wasn&#39;t paying attention to that. Mentioned it :)"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 3, "last_activity_date": 1490657762, "last_edit_date": 1490657762, "creation_date": 1490656742, "answer_id": 43058022, "question_id": 43057946, "link": "https://stackoverflow.com/questions/43057946/how-do-i-write-a-function-in-rust-that-accepts-any-iterator-whose-item-fulfills/43058022#43058022", "title": "How do I write a function in Rust that accepts any iterator whose Item fulfills a trait?", "body": "<p>Yes, it's possible. You need to use a <code>where</code> clause to specify a bound on the associated type <code>I::Item</code>.</p>\n\n<pre><code>fn foo&lt;I&gt;(is: I)\n    where I: Iterator,\n          I::Item: Double,\n{\n    for i in is {\n        println!(\"{}\", i.get());\n    }\n}\n</code></pre>\n\n<p>(I've also moved the <code>I: Iterator</code> bound to the <code>where</code> clause to keep all the bounds together.)</p>\n"}, {"comments": [{"owner": {"reputation": 1257, "user_id": 649140, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/ff4ce275d6b5e7986cc235e90c90a07b?s=128&d=identicon&r=PG", "display_name": "Sam Kellett", "link": "https://stackoverflow.com/users/649140/sam-kellett"}, "edited": false, "score": 0, "creation_date": 1490656940, "post_id": 43058027, "comment_id": 73200436, "body": "ah nice, so this is static dispatch yeah? i don&#39;t want to introduce an overhead by doing this."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 1257, "user_id": 649140, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/ff4ce275d6b5e7986cc235e90c90a07b?s=128&d=identicon&r=PG", "display_name": "Sam Kellett", "link": "https://stackoverflow.com/users/649140/sam-kellett"}, "edited": false, "score": 1, "creation_date": 1490657307, "post_id": 43058027, "comment_id": 73200553, "body": "@SamKellett Yes, exactly, this is static dispatch (dynamic dispatch is only used if you see something like <code>&amp;MyTrait</code>, <code>&amp;mut MyTrait</code> or <code>Box&lt;MyTrait&gt;</code>)"}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 3, "last_activity_date": 1490658019, "last_edit_date": 1495540462, "creation_date": 1490656770, "answer_id": 43058027, "question_id": 43057946, "link": "https://stackoverflow.com/questions/43057946/how-do-i-write-a-function-in-rust-that-accepts-any-iterator-whose-item-fulfills/43058027#43058027", "title": "How do I write a function in Rust that accepts any iterator whose Item fulfills a trait?", "body": "<p>The bound <code>Iterator&lt;Item = &amp;'a Double&gt;&gt;</code> says that you want an iterator which yields items of exactly the type <code>&amp;Double</code> which denotes the trait object of the trait <code>Double</code>. But you want an iterator that yields any type which implements the trait <code>Double</code>. This sounds very similar and thus confusing, but this is all about dynamic vs static dispatch. You should read the Rust book chapter about <a href=\"https://doc.rust-lang.org/book/trait-objects.html\" rel=\"nofollow noreferrer\">trait objects</a> to understand what exactly is going on. </p>\n\n<p>But a quick summary: there is a difference between writing</p>\n\n<pre><code>fn foo&lt;T: MyTrait&gt;(t: &amp;T) {}\n</code></pre>\n\n<p>and</p>\n\n<pre><code>fn foo(t: &amp;MyTrait) {}\n</code></pre>\n\n<p>You wrote code equivalent to the latter, but actually want the former.</p>\n\n<hr>\n\n<p>So how do you express your intend in code? One possibility is to introduce another type parameter!</p>\n\n<pre><code>fn foo&lt;'a, T, I&gt;(is: I) \n    where T: Double,\n          I: Iterator&lt;Item = &amp;'a T&gt;,\n{\n    for i in is {\n        println!(\"{}\", i.get());\n    }\n}\n</code></pre>\n\n<p>But you can also just bound the associated type of the iterator (see <a href=\"https://stackoverflow.com/a/43058022/2408867\">Francis Gagn\u00e9's answer</a>):</p>\n\n<pre><code>fn foo&lt;I&gt;(is: I) \n    where I: Iterator,\n          I::Item: Double,\n{ ... }\n</code></pre>\n\n<p>However, these two versions are slightly different as one accepts an iterator over references to types implementing <code>Double</code> while the other one iterates over types implementing <code>Double</code> directly. Just use what fits you the best or generalize those two things with traits like <a href=\"https://doc.rust-lang.org/stable/std/convert/trait.AsRef.html\" rel=\"nofollow noreferrer\"><code>AsRef</code></a>.</p>\n"}], "owner": {"reputation": 1257, "user_id": 649140, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/ff4ce275d6b5e7986cc235e90c90a07b?s=128&d=identicon&r=PG", "display_name": "Sam Kellett", "link": "https://stackoverflow.com/users/649140/sam-kellett"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 110, "favorite_count": 0, "accepted_answer_id": 43058027, "answer_count": 2, "score": 1, "last_activity_date": 1490658019, "creation_date": 1490656348, "last_edit_date": 1490656827, "question_id": 43057946, "link": "https://stackoverflow.com/questions/43057946/how-do-i-write-a-function-in-rust-that-accepts-any-iterator-whose-item-fulfills", "title": "How do I write a function in Rust that accepts any iterator whose Item fulfills a trait?", "body": "<p>Here is a contrived example of what I'm trying to achieve:</p>\n\n<pre><code>trait Double {\n    fn get(&amp;self) -&gt; i32;\n}\n\nimpl Double for i32 {\n    fn get(&amp;self) -&gt; i32 { self * 2 }\n}\n\nfn foo&lt;'a, I: Iterator&lt;Item = &amp;'a Double&gt;&gt;(is: I) {\n    for i in is {\n        println!(\"{}\", i.get());\n    }\n}\n\nfn main() {\n    let is = vec![1, 2, 3, 4];\n    foo(is.into_iter());\n}\n</code></pre>\n\n<p>The error here says \"expected integral variable, found <code>&amp;Double</code>\".</p>\n\n<p>I'm having trouble googling for this as everywhere talks about iterators as traits. Is what I'm trying to do even possible?</p>\n"}, {"tags": ["arrays", "rust"], "answers": [{"comments": [{"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 7, "creation_date": 1490637901, "post_id": 43050968, "comment_id": 73191313, "body": "It could be written easier as <code>vec![0; slice.len()]</code>."}], "tags": [], "owner": {"reputation": 30739, "user_id": 1804599, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/v91P3.jpg?s=128&g=1", "display_name": "rightfold", "link": "https://stackoverflow.com/users/1804599/rightfold"}, "is_accepted": true, "score": 3, "last_activity_date": 1490630443, "last_edit_date": 1490630443, "creation_date": 1490629812, "answer_id": 43050968, "question_id": 43050876, "link": "https://stackoverflow.com/questions/43050876/how-to-use-another-arrays-length-to-initialize-an-array-in-rust/43050968#43050968", "title": "How to use another array&#39;s length to initialize an array in Rust?", "body": "<p>You are actually taking the length of a slice, not an array. Array lengths must be known at compile time. <code>array.len()</code>, being the length of a slice, is potentially derived from runtime input, and as such cannot be used as an array length. You can create a vector instead. For example:</p>\n\n<pre><code>use std::iter::repeat;\n\nfn foo(slice: &amp;[i32]){\n    let mut sum: Vec&lt;i32&gt; = repeat(0).take(slice.len()).collect();\n    // ......\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1617030233, "last_edit_date": 1617030233, "creation_date": 1490658553, "answer_id": 43058305, "question_id": 43050876, "link": "https://stackoverflow.com/questions/43050876/how-to-use-another-arrays-length-to-initialize-an-array-in-rust/43058305#43058305", "title": "How to use another array&#39;s length to initialize an array in Rust?", "body": "<p>To answer the question asked:</p>\n<blockquote>\n<p>How to use another array's length to initialize an array in Rust?</p>\n</blockquote>\n<p>As of Rust 1.51, you can write generic code like:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn foo&lt;const N: usize&gt;(array: [u8; N]) -&gt; [u8; N] {\n    unimplemented!()\n}\n</code></pre>\n<p>See <a href=\"https://stackoverflow.com/q/28136739/155423\">Is it possible to control the size of an array using the type parameter of a generic?</a> for further details.</p>\n<p>The solution for previous versions of Rust involves a combination of traits and macros. This has the distinct disadvantage of being limited to a set of types. This is discussed further in questions like <a href=\"https://stackoverflow.com/q/33036859/155423\">Why does println! work only for arrays with a length less than 33?</a></p>\n<hr />\n<p>Showcasing the shorter, more idiomatic version of the <code>Vec</code>-based code:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn foo(slice: &amp;[i32]) {\n    let mut sum = vec![0; slice.len()];\n}\n</code></pre>\n"}], "owner": {"reputation": 699, "user_id": 7093297, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/Pi7EY.jpg?s=128&g=1", "display_name": "wind2412", "link": "https://stackoverflow.com/users/7093297/wind2412"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 846, "favorite_count": 1, "accepted_answer_id": 43050968, "answer_count": 2, "score": 1, "last_activity_date": 1617030233, "creation_date": 1490629587, "last_edit_date": 1490630411, "question_id": 43050876, "link": "https://stackoverflow.com/questions/43050876/how-to-use-another-arrays-length-to-initialize-an-array-in-rust", "title": "How to use another array&#39;s length to initialize an array in Rust?", "body": "<p>I want to initialize an array whose length is equal to another array's length:</p>\n\n<pre><code>fn foo(array: &amp;[i32]) {\n    let mut sum = [0; array.len()];\n}\n</code></pre>\n\n<p>It will make an error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0080]: constant evaluation error\n  --&gt; test.rs:22:18\n   |\n22 |    let mut sum = [0; array.len()];\n   |                      ^^^^^^^^^^^ unsupported constant expr\n</code></pre>\n\n<p>I think I must use this <code>len()</code> argument... How can I solve this?</p>\n"}, {"tags": ["arrays", "split", "rust"], "answers": [{"comments": [{"owner": {"reputation": 1054, "user_id": 4201205, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/7186d11fd2ae12a5da22d2a8e7a684ad?s=128&d=identicon&r=PG&f=1", "display_name": "Constantine", "link": "https://stackoverflow.com/users/4201205/constantine"}, "edited": false, "score": 0, "creation_date": 1490623422, "post_id": 43048520, "comment_id": 73181386, "body": "And if I want to make &#39;a&#39; and &#39;b&#39; arrays instead of slices? &quot;couple of copies&quot; -&gt; means to make a, b independent from source."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1490623521, "last_edit_date": 1495542746, "creation_date": 1490623234, "answer_id": 43048520, "question_id": 43047999, "link": "https://stackoverflow.com/questions/43047999/what-is-the-proper-way-to-split-one-source-array-into-a-couple-of-copies/43048520#43048520", "title": "What is the proper way to split one source array into a couple of copies?", "body": "<p>Use <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.split_at\" rel=\"nofollow noreferrer\"><code>slice::split_at</code></a>:</p>\n\n<pre><code>fn main() {\n    let source = [0u8; 40];\n    let (a, b) = source.split_at(11);\n    println!(\"{}, {}\", a.len(), b.len())\n}\n</code></pre>\n\n<p>There's also <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.split_at_mut\" rel=\"nofollow noreferrer\"><code>split_at_mut</code></a>, discussed in <a href=\"https://stackoverflow.com/questions/36244762/how-to-operate-on-2-mutable-slices-of-a-rust-array\">How to operate on 2 mutable slices of a Rust array</a>.</p>\n\n<p>In this case, you can also take multiple subslices because it's immutable. These may be overlapping:</p>\n\n<pre><code>fn main() {\n    let source = [0u8; 40];\n    let a = &amp;source[0..11];\n    let b = &amp;source[11..40];\n    println!(\"{}, {}\", a.len(), b.len())\n}\n</code></pre>\n\n<blockquote>\n  <p>into couple of copies?</p>\n</blockquote>\n\n<p>The point of slices is that copies <strong>aren't</strong> made. A slice is just a pointer to the start of the data and a length. The data itself is shared.</p>\n\n<blockquote>\n  <p>I want to make 'a' and 'b' arrays instead of slices</p>\n</blockquote>\n\n<p>Then you should check out  <a href=\"https://stackoverflow.com/questions/25428920/how-to-get-a-slice-as-an-array-in-rust\">How to get a slice as an array in Rust?</a></p>\n"}], "owner": {"reputation": 1054, "user_id": 4201205, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/7186d11fd2ae12a5da22d2a8e7a684ad?s=128&d=identicon&r=PG&f=1", "display_name": "Constantine", "link": "https://stackoverflow.com/users/4201205/constantine"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 220, "favorite_count": 1, "accepted_answer_id": 43048520, "answer_count": 1, "score": 0, "last_activity_date": 1490623521, "creation_date": 1490621825, "last_edit_date": 1490623434, "question_id": 43047999, "link": "https://stackoverflow.com/questions/43047999/what-is-the-proper-way-to-split-one-source-array-into-a-couple-of-copies", "title": "What is the proper way to split one source array into a couple of copies?", "body": "<p>Something like this:</p>\n\n<pre><code>let source = [0u8; 40];\nlet a = source[0..11];\nlet b = source[11..40];\n</code></pre>\n"}, {"tags": ["rust", "clone", "borrow-checker"], "comments": [{"owner": {"reputation": 3416, "user_id": 2484972, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ea1c4b2c5aa3c7da2f2740bc1a643ee0?s=128&d=identicon&r=PG", "display_name": "Tatsuyuki Ishi", "link": "https://stackoverflow.com/users/2484972/tatsuyuki-ishi"}, "edited": false, "score": 3, "creation_date": 1490591665, "post_id": 43038332, "comment_id": 73161761, "body": "<code>CloneMut</code> is simply too hard to understand. IMO, references are basically useful at only one level, and you shouldn&#39;t try to achieve something more complex by nesting them or assigning them to each other."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1490598998, "post_id": 43038332, "comment_id": 73164808, "body": "I would NOT call this <code>CloneXXX</code> seeing as mutable references are not <code>Clone</code>."}, {"owner": {"reputation": 799, "user_id": 3096774, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/1dd1ee89121ffeb86343b5e70b20beb1?s=128&d=identicon&r=PG&f=1", "display_name": "apt1002", "link": "https://stackoverflow.com/users/3096774/apt1002"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1490654099, "post_id": 43038332, "comment_id": 73199498, "body": "@MatthieuM. <code>FnMut</code> things are not always <code>Fn</code>, but we are happy with &quot;<code>FnMut</code>&quot;. I think you need a better reason."}, {"owner": {"reputation": 799, "user_id": 3096774, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/1dd1ee89121ffeb86343b5e70b20beb1?s=128&d=identicon&r=PG&f=1", "display_name": "apt1002", "link": "https://stackoverflow.com/users/3096774/apt1002"}, "edited": false, "score": 0, "creation_date": 1490654693, "post_id": 43038332, "comment_id": 73199688, "body": "ToOwned is another candidate. It has the associated type, and it puts a bound on it to relate it to the Self type. However, the bound is not satisfied in my case (you can&#39;t lengthen a lifetime by borrowing) so I guess that&#39;s wrong too."}, {"owner": {"reputation": 799, "user_id": 3096774, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/1dd1ee89121ffeb86343b5e70b20beb1?s=128&d=identicon&r=PG&f=1", "display_name": "apt1002", "link": "https://stackoverflow.com/users/3096774/apt1002"}, "edited": false, "score": 0, "creation_date": 1490655195, "post_id": 43038332, "comment_id": 73199862, "body": "Actually maybe that does work. If <code>&#39;b: &#39;a</code> as in the question and I reborrow an <code>&amp;&#39;b mut T</code> as an <code>&amp;&#39;a mut T</code>, then can I implement <code>borrow_mut()</code> so that it turns <code>&amp;&#39;c mut &amp;&#39;a mut T</code> into <code>&amp;&#39;c mut &amp;&#39;b mut T</code>? If so, then this is the bound I want on the associated type, and my CloneMut is perhaps better called ToOwnedMut?"}, {"owner": {"reputation": 942, "user_id": 4071916, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/0e5e1cf67dcbd7ef75af13d0c6833ea5?s=128&d=identicon&r=PG", "display_name": "qbt937", "link": "https://stackoverflow.com/users/4071916/qbt937"}, "edited": false, "score": 1, "creation_date": 1502656480, "post_id": 43038332, "comment_id": 78286968, "body": "<a href=\"https://github.com/rust-lang/rfcs/issues/1403\" rel=\"nofollow noreferrer\">github.com/rust-lang/rfcs/issues/1403</a> seems to be related."}], "answers": [{"tags": [], "owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "is_accepted": false, "score": 1, "last_activity_date": 1563964104, "creation_date": 1563964104, "answer_id": 57180756, "question_id": 43038332, "link": "https://stackoverflow.com/questions/43038332/is-there-a-clonemut-trait/57180756#57180756", "title": "Is there a CloneMut trait?", "body": "<p>The key property of <code>&amp;mut</code> references is that they are unique <em>exclusive</em> references. </p>\n\n<p>So it's not really a clone. You can't have two <em>exclusive</em> references. It's a reborrow, as the source will be completely unusable as long as the \"clone\" is in scope.</p>\n"}], "owner": {"reputation": 799, "user_id": 3096774, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/1dd1ee89121ffeb86343b5e70b20beb1?s=128&d=identicon&r=PG&f=1", "display_name": "apt1002", "link": "https://stackoverflow.com/users/3096774/apt1002"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 372, "favorite_count": 1, "answer_count": 1, "score": 5, "last_activity_date": 1563964104, "creation_date": 1490591228, "last_edit_date": 1495542749, "question_id": 43038332, "link": "https://stackoverflow.com/questions/43038332/is-there-a-clonemut-trait", "title": "Is there a CloneMut trait?", "body": "<p>An easily overlooked feature of <code>clone()</code> is that it can shorten the lifetimes of any references hidden inside the value being cloned. This is usually useless for immutable references, which are the only kind for which <code>Clone</code> is implemented.</p>\n\n<p>It would, however, be useful to be able to shorten the lifetimes of <em>mutable</em> references hidden inside a value. Is there something like a <code>CloneMut</code> trait?</p>\n\n<p>I've managed to write one. My question is whether there is a trait in the standard library that I should use instead, i.e. am I reinventing the wheel?</p>\n\n<p>The rest of this question consists of details and examples.</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=85754b3d027dbc2782a0aab1b08d7e57\" rel=\"nofollow noreferrer\">Playground</a>.</p>\n\n<h2>Special case: the type <em>is</em> a mutable reference</h2>\n\n<p>As a warm-up, the following is good enough when the type you're cloning is a mutable reference, not wrapped in any way:</p>\n\n<pre><code>fn clone_mut&lt;'a, 'b: 'a&gt;(q: &amp;'a mut &amp;'b mut f32) -&gt; &amp;'a mut f32 {\n    *q\n}\n</code></pre>\n\n<p>See <a href=\"https://stackoverflow.com/questions/43036156/how-can-i-reborrow-a-mutable-reference-without-passing-it-to-a-function\">this question</a> (where it is called <code>reborrow()</code>) for an example caller.</p>\n\n<h2>Special case: the reference type, though user-defined, is known</h2>\n\n<p>A more interesting case is a user-defined mutable-reference-like type. Here's how to write a <code>clone_mut()</code> function specific to a particular type:</p>\n\n<pre><code>struct Foo&lt;'a&gt;(&amp;'a mut f32);\n\nimpl&lt;'b&gt; Foo&lt;'b&gt; {\n    fn clone_mut&lt;'a&gt;(self: &amp;'a mut Foo&lt;'b&gt;) -&gt; Foo&lt;'a&gt; {\n        Foo(self.0)\n    }\n}\n</code></pre>\n\n<p>Here's an example caller:</p>\n\n<pre><code>fn main() {\n    let mut x: f32 = 3.142;\n    let mut p = Foo(&amp;mut x);\n    {\n        let q = p.clone_mut();\n        *q.0 = 2.718;\n    }\n    println!(\"{:?}\", *p.0)\n}\n</code></pre>\n\n<p>Note that this won't compile unless <code>q</code> gets a shorter lifetime than <code>p</code>. I'd like to view that as a unit test for <code>clone_mut()</code>.</p>\n\n<h2>Higher-kinded type?</h2>\n\n<p>When trying to write a trait that admits both the above implementations, the problem at first feels like a higher-kinded-type problem. For example, I want to write this:</p>\n\n<pre><code>trait CloneMut {\n    fn clone_mut&lt;'a, 'b&gt;(self: &amp;'a mut Self&lt;'b&gt;) -&gt; Self&lt;'a&gt;;\n}\n\nimpl CloneMut for Foo {\n    fn clone_mut&lt;'a, 'b&gt;(self: &amp;'a mut Self&lt;'b&gt;) -&gt; Self&lt;'a&gt; {\n        Foo(self.0)\n    }\n}\n</code></pre>\n\n<p>Of course that's not allowed in Rust (the <code>Self&lt;'a&gt;</code> and <code>Self&lt;'b&gt;</code> parts in particular). However, the problem can be worked around.</p>\n\n<h2>General case</h2>\n\n<p>The following code compiles (using the preceding definition of <code>Foo&lt;'a&gt;</code>) and is compatible with the caller:</p>\n\n<pre><code>trait CloneMut&lt;'a&gt; {\n    type To: 'a;\n\n    fn clone_mut(&amp;'a mut self) -&gt; Self::To;\n}\n\nimpl&lt;'a, 'b&gt; CloneMut&lt;'a&gt; for Foo&lt;'b&gt; {\n    type To = Foo&lt;'a&gt;;\n\n    fn clone_mut(&amp;'a mut self) -&gt; Self::To {\n        Foo(self.0)\n    }\n}\n</code></pre>\n\n<p>It's a little ugly that there is no formal relationship between <code>Self</code> and <code>Self::To</code>. For example, you could write an implementation of <code>clone_mut()</code> that returns <code>77</code>, completely ignoring the <code>Self</code> type. The following two attempts show why I think the associated type is unavoidable.</p>\n\n<h2>Attempt 1</h2>\n\n<p>This compiles:</p>\n\n<pre><code>trait CloneMut&lt;'a&gt; {\n    fn clone_mut(&amp;'a mut self) -&gt; Self;\n}\n\nimpl&lt;'a&gt; CloneMut&lt;'a&gt; for Foo&lt;'a&gt; {\n    fn clone_mut(&amp;'a mut self) -&gt; Self {\n        Foo(self.0)\n    }\n}\n</code></pre>\n\n<p>However, it's not compatible with the caller, because it does not have two distinct lifetime variables.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `*p.0` as immutable because `p` is also borrowed as mutable\n</code></pre>\n\n<p>The immutable borrow mentioned in the error message is the one in the <code>println!()</code> statement, and the mutable borrow is the call to <code>clone_mut()</code>. The trait constrains the two lifetimes to be the same.</p>\n\n<h2>Attempt 2</h2>\n\n<p>This uses the same trait definition as attempt 1, but a different implementation:</p>\n\n<pre><code>trait CloneMut&lt;'a&gt; {\n    fn clone_mut(&amp;'a mut self) -&gt; Self;\n}\n\nimpl&lt;'a, 'b: 'a&gt; CloneMut&lt;'a&gt; for Foo&lt;'b&gt; {\n    fn clone_mut(&amp;'a mut self) -&gt; Self {\n        Foo(self.0)\n    }\n}\n</code></pre>\n\n<p>This doesn't even compile. The return type has the longer lifetime, and can't be made from the argument, which has the shorter lifetime.</p>\n\n<p>Moving the lifetime parameter onto the method declaration gives the same error:</p>\n\n<pre><code>trait CloneMut {\n    fn clone_mut&lt;'a&gt;(&amp;'a mut self) -&gt; Self;\n}\n\nimpl&lt;'b&gt; CloneMut for Foo&lt;'b&gt; {\n    fn clone_mut&lt;'a&gt;(&amp;'a mut self) -&gt; Self {\n        Foo(self.0)\n    }\n}\n</code></pre>\n\n<h2>Relationship with Clone</h2>\n\n<p>Incidentally, notice that <code>CloneMut&lt;'a, To=Self&gt;</code> is strictly stronger than <code>Clone</code>:</p>\n\n<pre><code>impl&lt;'a, T: 'a&gt; CloneMut&lt;'a&gt; for T where T: Clone {\n    type To = Self;\n\n    fn clone_mut(&amp;'a mut self) -&gt; Self {\n        self.clone()\n    }\n}\n</code></pre>\n\n<p>That's why I think \"<code>CloneMut</code>\" is a good name.</p>\n"}, {"tags": ["compiler-errors", "rust", "borrow-checker"], "comments": [{"owner": {"reputation": 4013, "user_id": 2156113, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/e604b68b621a152399eec2182c1cb988?s=128&d=identicon&r=PG", "display_name": "Nick Sweeting", "link": "https://stackoverflow.com/users/2156113/nick-sweeting"}, "edited": false, "score": 1, "creation_date": 1490586412, "post_id": 43037583, "comment_id": 73160401, "body": "Maybe something to do with the vector element&#39;s lifetime being separate from the vector itself?  i.e. each vector elem needs to have a lifetime at least as long as <code>self.a</code>."}], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 2, "last_activity_date": 1516110505, "last_edit_date": 1516110505, "creation_date": 1490587269, "answer_id": 43037740, "question_id": 43037583, "link": "https://stackoverflow.com/questions/43037583/cannot-move-out-of-borrowed-content-for-vec-but-not-u64/43037740#43037740", "title": "&quot;cannot move out of borrowed content&quot; for Vec but not u64", "body": "<p>The difference is that <code>u64</code> implements <a href=\"https://doc.rust-lang.org/stable/std/marker/trait.Copy.html\" rel=\"nofollow noreferrer\"><code>Copy</code></a> while <code>Vec&lt;u64&gt;</code> does not. When you try to move a value of a type that implements <code>Copy</code> but the value being moved from cannot be moved, the compiler will not actually move it, but will copy it instead, which is why the version with <code>u64</code> compiles fine.</p>\n"}, {"tags": [], "owner": {"reputation": 420, "user_id": 4284367, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a3387cd64f46111d2b4be0af24b7ece7?s=128&d=identicon&r=PG&f=1", "display_name": "Emilgardis", "link": "https://stackoverflow.com/users/4284367/emilgardis"}, "is_accepted": true, "score": 2, "last_activity_date": 1516110467, "last_edit_date": 1516110467, "creation_date": 1490587557, "answer_id": 43037780, "question_id": 43037583, "link": "https://stackoverflow.com/questions/43037583/cannot-move-out-of-borrowed-content-for-vec-but-not-u64/43037780#43037780", "title": "&quot;cannot move out of borrowed content&quot; for Vec but not u64", "body": "<p>The primitive type <code>u64</code> implements <a href=\"https://doc.rust-lang.org/std/marker/trait.Copy.html\" rel=\"nofollow noreferrer\"><code>Copy</code></a>. This means that <code>u64</code> has \"copy semantics\": if the compiler finds that we are trying to take ownership of <code>T: Copy</code> but the value being moved from is still used, <code>T</code> will be copied.</p>\n\n<p><code>Vec</code> is not <code>Copy</code>, but it is <code>Clone</code>, meaning that we can do </p>\n\n<pre><code>self.a = choose(&amp; self.a, &amp; new_a).clone();\n</code></pre>\n\n<p>To fix this problem.</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=d5912a0bf746f05141a43bba025731c5&amp;version=nightly&amp;backtrace=0\" rel=\"nofollow noreferrer\">Here</a> is another example of copy semantics using your example</p>\n"}], "owner": {"reputation": 2338, "user_id": 1096777, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/fde3c611ccc38a69ec6fccfaa11bedaf?s=128&d=identicon&r=PG&f=1", "display_name": "mavix", "link": "https://stackoverflow.com/users/1096777/mavix"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 294, "favorite_count": 0, "accepted_answer_id": 43037780, "answer_count": 2, "score": 0, "last_activity_date": 1516110505, "creation_date": 1490585992, "last_edit_date": 1516110399, "question_id": 43037583, "link": "https://stackoverflow.com/questions/43037583/cannot-move-out-of-borrowed-content-for-vec-but-not-u64", "title": "&quot;cannot move out of borrowed content&quot; for Vec but not u64", "body": "<p>The following code throws an error:</p>\n\n<pre><code>struct Foo {\n    a: Vec&lt;u64&gt;,\n}\n\nimpl Foo {\n    fn change_a(&amp;mut self, new_a: Vec&lt;u64&gt;) {\n        self.a = *choose(&amp;self.a, &amp;new_a);\n    }\n}\n\nfn choose&lt;'a&gt;(x: &amp;'a Vec&lt;u64&gt;, y: &amp;'a Vec&lt;u64&gt;) -&gt; &amp;'a Vec&lt;u64&gt; {\n    return if x &gt; y { x } else { y };\n}\n\nfn main() {\n    let mut foo = Foo { a: vec![1] };\n    foo.change_a(vec![3]);\n    println!(\"{:?}\", foo.a);\n}\n</code></pre>\n\n<p>The error is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of borrowed content\n --&gt; src/main.rs:7:18\n  |\n7 |         self.a = *choose(&amp;self.a, &amp;new_a);\n  |                  ^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=023a7879295c6b7d6cc93d556efed52a&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">This code works fine</a> if I replace the <code>Vec&lt;u64&gt;</code>s with just <code>u64</code>s.</p>\n\n<p>What is the difference?</p>\n"}, {"tags": ["reference", "rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490578408, "post_id": 43036547, "comment_id": 73158528, "body": "I guess my problem stems from the fact that while nothing ever says it&#39;s restricted to function arguments, that&#39;s how it&#39;s always demonstrated (even in the docs you linked to). My brain must have fused the two concepts together. Thinking back on it, I even <b>use</b> deref coercions in my own code: <code>struct Foo(String); impl Foo { fn name(&amp;self) -&gt; &amp;str { &amp;self.0 } }</code>."}, {"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490578614, "post_id": 43036547, "comment_id": 73158581, "body": "@Shepmaster Are you seeing what I&#39;m missing for type ascriptions though? It&#39;s bugging me a bit because my mental model of type checking around <code>let x: T = y;</code> has been <code>let x = y: T;</code>...."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490579181, "post_id": 43036547, "comment_id": 73158724, "body": "Skimming through the <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0803-type-ascription.md\" rel=\"nofollow noreferrer\">ascription RFC</a>, I don&#39;t see anything obvious. The &quot;Type ascription and temporaries&quot; section <i>might</i> be relevant though. The <a href=\"https://github.com/rust-lang/rust/issues/23416\" rel=\"nofollow noreferrer\">tracking issue</a> also does not have any obvious mention of <code>Deref</code>. Could be worth adding a comment on that issue to see if it&#39;s deliberate or not."}, {"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490579955, "post_id": 43036547, "comment_id": 73158928, "body": "@Shepmaster Looks like it is an ongoing issue. See my edit."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1500312172, "post_id": 43036547, "comment_id": 77269411, "body": "A <a href=\"https://github.com/rust-lang/rust/issues/23416#issuecomment-315785799\" rel=\"nofollow noreferrer\">more recent comment about type ascription and coercion</a> indicates that there are some soundness issues."}], "tags": [], "owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "is_accepted": true, "score": 3, "last_activity_date": 1542386028, "last_edit_date": 1542386028, "creation_date": 1490577914, "answer_id": 43036547, "question_id": 43036307, "link": "https://stackoverflow.com/questions/43036307/what-allows-a-function-to-implicitly-dereference-an-argument-when-its-returned/43036547#43036547", "title": "What allows a function to implicitly dereference an argument when it&#39;s returned?", "body": "<p>Reading the <a href=\"https://doc.rust-lang.org/book/first-edition/deref-coercions.html\" rel=\"nofollow noreferrer\">relevant docs</a>, it seems that the <code>Deref</code> conversion always happens as many times as it needs to - wherever it needs to. The only really funky additional trick that <code>Deref</code> pulls is that it also works magic on <code>self</code> arguments.</p>\n\n<p>The following snippets both work - and the expressions here are definitely not constrained to be arguments or return values.</p>\n\n<pre><code>// &amp;&amp;&amp;&amp;1 gets dereferenced to &amp;i32 from &amp;&amp;&amp;&amp;i32\nlet x: &amp;i32 = &amp;&amp;&amp;&amp;1;\nlet x: (&amp;i32,) = (&amp;&amp;&amp;&amp;1,);\n</code></pre>\n\n<p>The only gotcha with this sort of thing that remains is that <code>Deref</code> only applies to types of the form <code>&amp;U</code>, so something like <code>&amp;1</code> can never be coerced to <code>&amp;i32</code> from <code>i32</code>, even if <code>&amp;&amp;1</code> can be coerced from <code>&amp;&amp;i32</code> to <code>&amp;i32</code>.</p>\n\n<hr>\n\n<p>As a side note, I realize that type ascriptions are a bit special, but it seems <code>Deref</code> doesn't do conversions there. I'm not sure if it is by design or not, or if I'm just misunderstanding something. The following <em>doesn't</em> work.</p>\n\n<pre><code>#![feature(type_ascription)]\n\n// ....\n\nlet x = &amp;&amp;1i32: &amp;i32;\n</code></pre>\n\n<p>Based on <a href=\"https://github.com/rust-lang/rfcs/pull/1539#issuecomment-195570246\" rel=\"nofollow noreferrer\">this comment</a> (and the very relevant thread from which it originates), it looks like this <em>is</em> just a type ascription issue. It appears that for now, type ascription is implemented <em>without</em> coercions, but almost everyone agrees that that should not be the case (in fact, one of the good use cases of type ascriptions would be to hint to the compiler which coercions to apply).</p>\n"}], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 168, "favorite_count": 1, "accepted_answer_id": 43036547, "answer_count": 1, "score": 2, "last_activity_date": 1542386028, "creation_date": 1490575670, "last_edit_date": 1495542734, "question_id": 43036307, "link": "https://stackoverflow.com/questions/43036307/what-allows-a-function-to-implicitly-dereference-an-argument-when-its-returned", "title": "What allows a function to implicitly dereference an argument when it&#39;s returned?", "body": "<p>While reading <a href=\"https://stackoverflow.com/q/43036156/155423\">How can I reborrow a mutable reference without passing it to a function?</a>, the OP had a function like:</p>\n\n<pre><code>fn deref&lt;'a, 'b: 'a, T&gt;(t: &amp;'a mut &amp;'b mut T) -&gt; &amp;'a mut T {\n    *t\n}\n</code></pre>\n\n<p>This makes sense to me. However, they also pointed out that the explicit dereference in the body <code>*</code> wasn't required: </p>\n\n<pre><code>fn deref&lt;'a, 'b: 'a, T&gt;(t: &amp;'a mut &amp;'b mut T) -&gt; &amp;'a mut T {\n    t\n}\n</code></pre>\n\n<p>This compiles, and I don't know why. I'm familiar with <a href=\"https://stackoverflow.com/questions/28519997/what-are-rusts-exact-auto-dereferencing-rules\">automatic dereferencing</a>, but I was under the impression that only came into play with function <em>arguments</em>, not <em>return values</em>.</p>\n"}, {"tags": ["for-loop", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1490576970, "post_id": 43036279, "comment_id": 73158149, "body": "FWIW, there&#39;s <a href=\"http://stackoverflow.com/q/21747136/155423\">other ways of figuring out the type of a value</a> that don&#39;t require the nightly compiler."}], "answers": [{"comments": [{"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 2, "creation_date": 1490576278, "post_id": 43036358, "comment_id": 73157986, "body": "Probably worth mentioning the third one too: <code>impl&lt;&#39;a, T&gt; IntoIterator for &amp;&#39;a mut Vec&lt;T&gt;</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 0, "creation_date": 1490576687, "post_id": 43036358, "comment_id": 73158081, "body": "@Alec not a bad idea, although I sometimes worry about overloading newcomer&#39;s minds ;-)"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 8, "last_activity_date": 1527551429, "last_edit_date": 1527551429, "creation_date": 1490576163, "answer_id": 43036358, "question_id": 43036279, "link": "https://stackoverflow.com/questions/43036279/what-does-it-mean-to-pass-in-a-vector-into-a-for-loop-versus-a-reference-to-a/43036358#43036358", "title": "What does it mean to pass in a vector into a `for` loop versus a reference to a vector?", "body": "<p>The argument to a <code>for</code> loop must implement <a href=\"https://doc.rust-lang.org/std/iter/trait.IntoIterator.html\" rel=\"noreferrer\"><code>IntoIterator</code></a>. If you check out the <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html\" rel=\"noreferrer\">docs for <code>Vec</code></a>, you will see these two <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#implementations\" rel=\"noreferrer\">implementations</a> of <code>IntoIterator</code>: </p>\n\n<pre><code>impl&lt;T&gt; IntoIterator for Vec&lt;T&gt; {\n    type Item = T;\n    type IntoIter = IntoIter&lt;T&gt;\n}\n\nimpl&lt;'a, T&gt; IntoIterator for &amp;'a Vec&lt;T&gt; {\n    type Item = &amp;'a T;\n    type IntoIter = Iter&lt;'a, T&gt;\n}\n</code></pre>\n\n<p>You get references for <code>&amp;vec</code> and values for <code>vec</code> because that's how the iterators are defined.</p>\n\n<p>Sometimes, you'll see these as the more explicit forms: <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.iter\" rel=\"noreferrer\"><code>iter</code></a> or <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.into_iter\" rel=\"noreferrer\"><code>into_iter</code></a>. The same logic applies; see <a href=\"https://stackoverflow.com/q/34733811/155423\">What is the difference between iter and into_iter?</a></p>\n\n<p>There's another form that you will encounter: <code>&amp;mut vec</code> and <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.iter_mut\" rel=\"noreferrer\"><code>iter_mut</code></a>. These return <em>mutable references</em> to the elements in the vector.</p>\n\n<hr>\n\n<p>As to why the differences at all...</p>\n\n<p>Using a reference to the vector allows you to access the vector after the loop is done. This compiles:</p>\n\n<pre><code>let v = vec![1, 2, 3];\nfor i in &amp;v {}\nfor i in &amp;v {}\n</code></pre>\n\n<p>This does not:</p>\n\n<pre><code>let v = vec![1, 2, 3];\nfor i in v {}\nfor i in v {}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0382]: use of moved value: `v`\n --&gt; src/main.rs:4:14\n  |\n3 |     for i in v {}\n  |              - value moved here\n4 |     for i in v {}\n  |              ^ value used here after move\n  |\n  = note: move occurs because `v` has type `std::vec::Vec&lt;i32&gt;`, which does not implement the `Copy` trait\n</code></pre>\n\n<p>Ownership-wise, you can't get a value from a reference unless you clone the value (assuming the type can even be cloned!). This means <code>&amp;vec</code> is unable to yield values that aren't references.</p>\n\n<p>The implementer of <code>Vec</code>'s iterator <em>could</em> have chosen to only yield references, but transferring ownership of the elements to the iterator allows the iterator's consumer to do more things; from a capability perspective it's preferred.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/34733811/155423\">What is the difference between iter and into_iter?</a></li>\n<li><a href=\"https://stackoverflow.com/q/34572784/155423\">Why can I iterate over a slice twice, but not a vector?</a></li>\n</ul>\n"}], "owner": {"reputation": 11606, "user_id": 1002430, "user_type": "registered", "accept_rate": 53, "profile_image": "https://i.stack.imgur.com/ufy7U.png?s=128&g=1", "display_name": "Ana", "link": "https://stackoverflow.com/users/1002430/ana"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1528, "favorite_count": 1, "accepted_answer_id": 43036358, "answer_count": 1, "score": 8, "last_activity_date": 1527551429, "creation_date": 1490575460, "last_edit_date": 1490575937, "question_id": 43036279, "link": "https://stackoverflow.com/questions/43036279/what-does-it-mean-to-pass-in-a-vector-into-a-for-loop-versus-a-reference-to-a", "title": "What does it mean to pass in a vector into a `for` loop versus a reference to a vector?", "body": "<p>I'm confused by how Rust <code>for</code> loops work. Consider the following:</p>\n\n<pre><code>#![feature(core_intrinsics)]\n\nfn print_type_of&lt;T&gt;(_: T) {\n    println!(\"{}\", unsafe { std::intrinsics::type_name::&lt;T&gt;() });\n}\n\nfn main() {\n    let nums = vec![1, 2, 3];\n    for num in &amp;nums { print_type_of(num); }\n    for num in  nums { print_type_of(num); }\n}\n</code></pre>\n\n<p>It outputs the following:</p>\n\n<pre><code>&amp;i32\n&amp;i32\n&amp;i32\ni32\ni32\ni32\n</code></pre>\n\n<p>What does it mean to pass in a vector into <code>for</code> versus a reference to a vector? Why, when you pass in a reference, do you get a reference to the items and when you pass in an actual vector, you get the actual items?</p>\n"}, {"tags": ["rust", "borrow-checker"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1490575726, "post_id": 43036156, "comment_id": 73157853, "body": "FWIW, I had a <a href=\"http://stackoverflow.com/q/43036307/155423\">follow-up question</a> based on your <code>reborrow</code> method."}, {"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 1, "creation_date": 1490576408, "post_id": 43036156, "comment_id": 73158009, "body": "This might help a little: <a href=\"https://bluss.github.io/rust/fun/2015/10/11/stuff-the-identity-function-does/\" rel=\"nofollow noreferrer\">bluss.github.io/rust/fun/2015/10/11/&hellip;</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 2, "creation_date": 1490576868, "post_id": 43036156, "comment_id": 73158119, "body": "@BurntSushi5 I had similar thoughts, but the <code>{}</code> trick <i>doesn&#39;t</i> work here, which seems to indicate it&#39;s different somehow."}, {"owner": {"reputation": 799, "user_id": 3096774, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/1dd1ee89121ffeb86343b5e70b20beb1?s=128&d=identicon&r=PG&f=1", "display_name": "apt1002", "link": "https://stackoverflow.com/users/3096774/apt1002"}, "reply_to_user": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 0, "creation_date": 1490577980, "post_id": 43036156, "comment_id": 73158419, "body": "@BurntSushi5 Entertaining, though. :-)"}], "answers": [{"comments": [{"owner": {"reputation": 799, "user_id": 3096774, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/1dd1ee89121ffeb86343b5e70b20beb1?s=128&d=identicon&r=PG&f=1", "display_name": "apt1002", "link": "https://stackoverflow.com/users/3096774/apt1002"}, "edited": false, "score": 1, "creation_date": 1490575693, "post_id": 43036265, "comment_id": 73157847, "body": "Gosh, even <code>let r: &amp;mut f32 = *q;</code> works. Very odd. I&#39;m really looking forward to an explanation!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1490575355, "creation_date": 1490575355, "answer_id": 43036265, "question_id": 43036156, "link": "https://stackoverflow.com/questions/43036156/how-can-i-reborrow-a-mutable-reference-without-passing-it-to-a-function/43036265#43036265", "title": "How can I reborrow a mutable reference without passing it to a function?", "body": "<p>I can't possibly begin to explain this, but you can do a similar trick as the implicit dereference and say that <code>r</code> is <code>&amp;mut f32</code>:</p>\n\n<pre><code>fn main() {\n    let mut x: f32 = 3.142;\n    let mut p = &amp;mut x;\n    {\n        let q = &amp;mut p;\n        let r: &amp;mut f32 = q;\n        *r = 2.718;\n    }\n    assert_eq!(*p, 2.718);\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 799, "user_id": 3096774, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/1dd1ee89121ffeb86343b5e70b20beb1?s=128&d=identicon&r=PG&f=1", "display_name": "apt1002", "link": "https://stackoverflow.com/users/3096774/apt1002"}, "edited": false, "score": 0, "creation_date": 1490654444, "post_id": 43040718, "comment_id": 73199616, "body": "Well, I suppose this confirms what I wrote in the question at least. Do you have a model of how the type inference is working/breaking in this case?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 799, "user_id": 3096774, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/1dd1ee89121ffeb86343b5e70b20beb1?s=128&d=identicon&r=PG&f=1", "display_name": "apt1002", "link": "https://stackoverflow.com/users/3096774/apt1002"}, "edited": false, "score": 0, "creation_date": 1490682613, "post_id": 43040718, "comment_id": 73208334, "body": "@apt1002: Sorry, no. I understand what happens, but I don&#39;t know for sure. It could be as simple as re-borrow if the variable is used down the line, move otherwise, but there may be edge cases I am failing to account for."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 11, "last_activity_date": 1490601093, "creation_date": 1490601093, "answer_id": 43040718, "question_id": 43036156, "link": "https://stackoverflow.com/questions/43036156/how-can-i-reborrow-a-mutable-reference-without-passing-it-to-a-function/43040718#43040718", "title": "How can I reborrow a mutable reference without passing it to a function?", "body": "<p>The obvious solution works, as one could expect:</p>\n\n<pre><code>fn main() {\n    let mut x: f32 = 3.142;\n    let mut p = &amp;mut x;\n    {\n        let r: &amp;mut f32 = p;\n        *r = 2.718;\n    }\n    assert_eq!(*p, 2.718);\n}\n</code></pre>\n\n<p>It seems relatively intuitive and is what I would expect a newcomer to end up with.</p>\n\n<hr>\n\n<p>If you start thinking about it, however, it will not make sense. As described, it looks like:</p>\n\n<ul>\n<li><code>let r: &amp;mut f32 = p;</code> moves <em>out</em> of <code>p</code></li>\n<li>and yet we use <code>p</code> later in <code>assert_eq!(*p, 2.718);</code></li>\n</ul>\n\n<p>A reasonable explanation would be that <code>p</code> is <code>Copy</code>, however it's not<sup>1</sup>!</p>\n\n<p>The answer is that, implicitly, Rust is performing a <em>re-borrowing</em> behind the scenes. That is, the explicit code is:</p>\n\n<pre><code>fn main() {\n    let mut x: f32 = 3.142;\n    let mut p = &amp;mut x;\n    {\n        let r: &amp;mut f32 = &amp;mut *p;\n        *r = 2.718;\n    }\n    assert_eq!(*p, 2.718);\n}\n</code></pre>\n\n<p>We can check this by attempting to read <code>p</code> after re-borrowing it, and check the compiler error:</p>\n\n<blockquote>\n<pre><code>error[E0502]: cannot borrow `p` as immutable because `*p` is also borrowed as mutable\n --&gt; &lt;anon&gt;:6:24\n  |\n5 |         let r: &amp;mut f32 = p;\n  |                           - mutable borrow occurs here\n6 |         println!(\"{}\", p);\n  |                        ^ immutable borrow occurs here\n7 |         *r = 2.718;\n8 |     }\n  |     - mutable borrow ends here\n\nerror: aborting due to previous error\n</code></pre>\n</blockquote>\n\n<p>Which confirms that <code>p</code> is indeed only borrowed mutably, and not moved, cloned or copied.</p>\n\n<p><sup>1</sup> <em>A mutable reference cannot be <code>Copy</code> or even <code>Clone</code> as it would violate the Aliasing XOR Mutability principle which underpins Rust safety.</em></p>\n"}], "owner": {"reputation": 799, "user_id": 3096774, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/1dd1ee89121ffeb86343b5e70b20beb1?s=128&d=identicon&r=PG&f=1", "display_name": "apt1002", "link": "https://stackoverflow.com/users/3096774/apt1002"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1475, "favorite_count": 2, "answer_count": 2, "score": 8, "last_activity_date": 1490601093, "creation_date": 1490574225, "last_edit_date": 1490574529, "question_id": 43036156, "link": "https://stackoverflow.com/questions/43036156/how-can-i-reborrow-a-mutable-reference-without-passing-it-to-a-function", "title": "How can I reborrow a mutable reference without passing it to a function?", "body": "<p>I have found a case where manually inlining a function changes the way the borrow-checker treats it, such that it no longer compiles. Presumably it is relying on the information in the function signature. How can I provide this information in the inlined version?</p>\n\n<h2>How I think it's working</h2>\n\n<p>Let <code>'a</code> and <code>'b</code> be lifetimes with <code>'a</code> shorter than <code>'b</code> (which can be written <code>'b: 'a</code>).</p>\n\n<p>Suppose I have a <code>p: &amp;'b mut f32</code>. I can borrow <code>p</code> briefly (with <code>&amp;mut p</code>) to obtain <code>q: &amp;'a mut &amp;'b mut f32</code>.</p>\n\n<ol>\n<li>Have I correctly understood that <code>&amp;'a mut &amp;'b mut f32</code> is equivalent to <code>&amp;'a mut &amp;'a mut f32</code> because <code>'b: 'a</code>?</li>\n</ol>\n\n<p>I can then dereference <code>q</code> (with <code>*q</code>) to obtain <code>r: &amp;'a mut f32</code>. I can write to the <code>f32</code> via <code>r</code> (with <code>*r = something</code>), and I can later (outside lifetime <code>'a</code>) read back the value via <code>p</code> (with <code>*p</code>).</p>\n\n<h2>With a function call</h2>\n\n<p>Here is some working code that I think uses the above sequence:</p>\n\n<pre><code>fn reborrow&lt;'a, 'b: 'a&gt;(q: &amp;'a mut &amp;'b mut f32) -&gt; &amp;'a mut f32 {\n    *q\n}\n\nfn main() {\n    let mut x: f32 = 3.142;\n    let mut p = &amp;mut x;\n    {\n        let q = &amp;mut p;\n        let r = reborrow(q);\n        *r = 2.718;\n    }\n    assert_eq!(*p, 2.718);\n}\n</code></pre>\n\n<p>(Replacing <code>*q</code> with <code>q</code> in the body of <code>reborrow()</code> also works, because Rust inserts the necessary dereference if it is missing).</p>\n\n<h2>Manually inlined</h2>\n\n<p>If I manually inline the <code>reborrow()</code> call, it no longer compiles:</p>\n\n<pre><code>fn main() {\n    let mut x: f32 = 3.142;\n    let mut p = &amp;mut x;\n    {\n        let q = &amp;mut p;\n        let r = *q; &lt;-- ERROR REPORTED HERE.\n        *r = 2.718;\n    }\n    assert_eq!(*p, 2.718);\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of borrowed content\n</code></pre>\n\n<ol start=\"2\">\n<li><p>Who took away my toys? What is the type inference thinking/missing?</p></li>\n<li><p>Can I annotate the <code>let</code> binding somehow to make the compiler infer the same types as in the previous version?</p></li>\n</ol>\n\n<h2>Some other attempts</h2>\n\n<p>Here's another version that works, but which doesn't define the name <code>r</code>:</p>\n\n<pre><code>fn main() {\n    let mut x: f32 = 3.142;\n    let mut p = &amp;mut x;\n    {\n        let q = &amp;mut p;\n        **q = 2.718;\n    }\n    assert_eq!(*p, 2.718);\n}\n</code></pre>\n\n<p>Here's a work-around that defines the name <code>r</code> and works, but does not use the same sequence of borrows and dereferences:</p>\n\n<pre><code>fn main() {\n    let mut x: f32 = 3.142;\n    let mut p = &amp;mut x;\n    {\n        let q = &amp;mut p;\n        let r = &amp;mut **q;\n        *r = 2.718;\n    }\n    assert_eq!(*p, 2.718);\n}\n</code></pre>\n\n<p>I made a <a href=\"https://play.rust-lang.org/?gist=e5c5658e05cff967c1e4b1df0c3d50ce\" rel=\"noreferrer\">playground</a> combining all four versions.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 2, "creation_date": 1490533435, "post_id": 43029026, "comment_id": 73143892, "body": "Why are you passing <code>&amp;i32</code> instead of <code>i32</code>?"}, {"owner": {"reputation": 145, "user_id": 844564, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/f94dd76e35de04e243fc26a447080f60?s=128&d=identicon&r=PG", "display_name": "Donald Whyte", "link": "https://stackoverflow.com/users/844564/donald-whyte"}, "reply_to_user": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 0, "creation_date": 1490533555, "post_id": 43029026, "comment_id": 73143927, "body": "Good point. There&#39;s no real reason to pass a reference here instead of moving. I&#39;ll update the question."}], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 7, "last_activity_date": 1490539607, "last_edit_date": 1490539607, "creation_date": 1490536401, "answer_id": 43029605, "question_id": 43029026, "link": "https://stackoverflow.com/questions/43029026/idiomatic-way-of-binding-function-arguments-and-passing-around-bound-functions/43029605#43029605", "title": "Idiomatic way of binding function arguments and passing around bound functions", "body": "<blockquote>\n  <p>Is there an idiomatic Rust way of binding function arguments and producing a new function?</p>\n</blockquote>\n\n<p>Yes, Rust has closures which are literally functions + a bound environment.</p>\n\n<p>Therefore, binding a function arguments, or partially applying it, is simply a matter of forming a closure which will invoke this function with a few fixed arguments.</p>\n\n<blockquote>\n  <p>Is the <code>Box</code> mechanism used by <code>eq</code> a sane way of binding an argument to a function for usage in <code>evaluate</code>?</p>\n</blockquote>\n\n<p>It is, for now.</p>\n\n<p>The problem of Rust closures is that they are Voldemort types (i.e., types that cannot be named). As a result, while you can assign a closure to a local variable, and let inference deduce the type, you cannot actually return it from a function<sup>1</sup>.</p>\n\n<p>At the moment, the work around is thus to return <code>-&gt; Box&lt;Fn(..) -&gt; ..&gt;</code> in this situation.</p>\n\n<p>However, your signature for <code>evaluate</code> is needlessly constraining. Instead of taking a <code>Box</code>, you could take a reference:</p>\n\n<pre><code>fn evaluate(f: &amp;Fn(i32) -&gt; bool, value: i32) -&gt; bool { f(value) }\n</code></pre>\n\n<p>This will let a user who can call <code>evaluate</code> directly free NOT to allocate on the heap (which <code>Box</code> does).</p>\n\n<p><sup>1</sup> <em>There is ongoing work to allow specifying a return type as <code>-&gt; impl SomeTrait</code> which would allow you to do so.</em></p>\n\n<blockquote>\n  <p>There's also the issue of lifetimes. I'm wondering what the correct semantics would be for extending the lifetime of <code>target</code> in <code>eq()</code>, so its lifetime is bound to the lifetime of the boxed function.</p>\n</blockquote>\n\n<p>It is not possible to <em>extend</em> a lifetime; a lifetime is descriptive, not prescriptive: it is merely a notation to denote the actual lifetime, not a way to specify the lifetime a value should have.</p>\n\n<p>For closures, you may want to <code>move</code> their environments inside the closure; taking to capture by value and not reference. It should solve most lifetime issues.</p>\n\n<p>For the remaining lifetime issues, you actually go the other way around and constrain the type of the closure by denoting the lifetime of its environment: <code>F: Fn(i32) -&gt; bool + 'a</code> marks that <code>F</code> is only valid for <code>'a</code>.</p>\n"}], "owner": {"reputation": 145, "user_id": 844564, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/f94dd76e35de04e243fc26a447080f60?s=128&d=identicon&r=PG", "display_name": "Donald Whyte", "link": "https://stackoverflow.com/users/844564/donald-whyte"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1556, "favorite_count": 0, "accepted_answer_id": 43029605, "answer_count": 1, "score": 2, "last_activity_date": 1490539607, "creation_date": 1490533138, "last_edit_date": 1490535864, "question_id": 43029026, "link": "https://stackoverflow.com/questions/43029026/idiomatic-way-of-binding-function-arguments-and-passing-around-bound-functions", "title": "Idiomatic way of binding function arguments and passing around bound functions", "body": "<p>Is there an idiomatic Rust way of binding function arguments and producing a new function?</p>\n\n<p>For example, suppose I had the following functions:</p>\n\n<pre><code>fn eq(a: i32) -&gt; Box&lt;Fn(i32) -&gt; bool&gt; {\n    let target = a;  // copy\n    Box::new(move |value| value == target)\n}\n\nfn evaluate(func: Box&lt;Fn(i32) -&gt; bool&gt;, value: i32) -&gt; bool {\n    func(value)\n}\n</code></pre>\n\n<p>Is the <code>Box</code> mechanism used by <code>eq</code> a sane way of binding an argument to a function for usage in <code>evaluate</code>? e.g. something like this:</p>\n\n<pre><code>let is_42 = eq(42);\nassert_eq!(true, evaluate(is_42, 42));\n</code></pre>\n\n<p>There's also the issue of lifetimes. I'm wondering what the correct semantics would be for extending the lifetime of <code>target</code> in <code>eq()</code>, so its lifetime is bound to the lifetime of the boxed function.</p>\n"}, {"tags": ["performance", "file", "io", "rust"], "comments": [{"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 11, "creation_date": 1490531887, "post_id": 43028653, "comment_id": 73143380, "body": "Your C program is using buffered IO. Your Rust program is not."}, {"owner": {"reputation": 27438, "user_id": 4756299, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e38adc5559df095cfe10c664916e8ffa?s=128&d=identicon&r=PG&f=1", "display_name": "Andrew Henle", "link": "https://stackoverflow.com/users/4756299/andrew-henle"}, "edited": false, "score": 3, "creation_date": 1490531911, "post_id": 43028653, "comment_id": 73143389, "body": "Those <code>sys</code> times under Rust are horrible.  If you&#39;re running on Linux, run the processes under <code>strace</code> and see what system calls the different processes are actually making."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 27438, "user_id": 4756299, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e38adc5559df095cfe10c664916e8ffa?s=128&d=identicon&r=PG&f=1", "display_name": "Andrew Henle", "link": "https://stackoverflow.com/users/4756299/andrew-henle"}, "edited": false, "score": 1, "creation_date": 1490535841, "post_id": 43028653, "comment_id": 73144702, "body": "@AndrewHenle: Good advice; it will reveal that the I/O is not buffered by default in Rust, which of course means a whole lot of system calls."}], "answers": [{"tags": [], "owner": {"reputation": 586, "user_id": 5356629, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/sHXyu.jpg?s=128&g=1", "display_name": "gyu-don", "link": "https://stackoverflow.com/users/5356629/gyu-don"}, "is_accepted": true, "score": 21, "last_activity_date": 1490540174, "last_edit_date": 1490540174, "creation_date": 1490533258, "answer_id": 43029048, "question_id": 43028653, "link": "https://stackoverflow.com/questions/43028653/rust-file-i-o-is-very-slow-compared-with-c-is-something-wrong/43029048#43029048", "title": "Rust file I/O is very slow compared with C. Is something wrong?", "body": "<p>My Rust program was not using buffered IO. Thanks to BurntSushi5 and Andrew Henle's comments, the problem is solved.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ strace ./rswrite\nwrite(3, \"test\", 4)                     = 4\nwrite(3, \"test\", 4)                     = 4\n...\n$ strace ./rswrite\nread(3, \"test\", 4)                      = 4\nread(3, \"test\", 4)                      = 4\n...\n</code></pre>\n\n<p>I modified the code:</p>\n\n<pre><code>use std::fs;\nuse std::io::{BufWriter, Write};\nfn main() {\n    let b = b\"test\";\n    /**** Use std::io::BufWriter ****/\n    let mut f = BufWriter::new(fs::File::create(\"rs.dump\").unwrap());\n    for _ in 0 .. 100_000_000 {\n        f.write(b).unwrap();\n    }\n}\n</code></pre>\n\n<p>and </p>\n\n<pre><code>use std::{fs, mem};\nuse std::io::{BufReader, Read};\nfn main() {\n    /**** Use std::io::BufReader ****/\n    let mut f = BufReader::new(fs::File::open(\"rs.dump\").unwrap());\n    let mut b: [u8; 4] = unsafe { mem::uninitialized() };\n    for _ in 0 .. 100_000_000 {\n        f.read_exact(&amp;mut b).unwrap();\n    }\n}\n</code></pre>\n\n<p>Now, I/O is buffered.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>write(3, \"testtesttesttesttesttesttesttest\"..., 8192) = 8192\nwrite(3, \"testtesttesttesttesttesttesttest\"..., 8192) = 8192\n...\n</code></pre>\n\n<p>The performance is as fast as C.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ time ./rswrite\nreal    0m1.341s\nuser    0m0.213s\nsys     0m0.200s\n$ time ./rsread_buf\nreal    0m0.596s\nuser    0m0.540s\nsys     0m0.050s\n</code></pre>\n"}], "owner": {"reputation": 586, "user_id": 5356629, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/sHXyu.jpg?s=128&g=1", "display_name": "gyu-don", "link": "https://stackoverflow.com/users/5356629/gyu-don"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4219, "favorite_count": 3, "accepted_answer_id": 43029048, "answer_count": 1, "score": 14, "last_activity_date": 1490540174, "creation_date": 1490531079, "last_edit_date": 1490540106, "question_id": 43028653, "link": "https://stackoverflow.com/questions/43028653/rust-file-i-o-is-very-slow-compared-with-c-is-something-wrong", "title": "Rust file I/O is very slow compared with C. Is something wrong?", "body": "<p>To compare file I/O performance between C and Rust, I write \"test\" to a file 100,000,000 times and read 4 bytes from a file 100,000,000 times.</p>\n\n<p>Compared to C, the Rust code spent over 450 times of the sys time for writing, and 140 times for reading.</p>\n\n<p>I suspect there are better ways to achieve fast I/O; how do I improve the performance of file I/O in Rust?</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ rustc --version\nrustc 1.16.0\n$ rustc rswrite.rs -C opt-level=3  # Rust for writing\n$ time ./rswrite\nreal    1m8.411s\nuser    0m3.817s\nsys     1m4.533s\n$ rustc rsread.rs -C opt-level=3  # Rust for reading\n$ time ./rsread\nreal    0m18.077s\nuser    0m2.130s\nsys     0m15.910s\n$ gcc -O3 cwrite.c -ocwrite  # C for writing\n$ time ./cwrite\nreal    0m1.564s\nuser    0m1.397s\nsys     0m0.143s\n$ gcc -O3 cread.c -ocread  # C for reading\n$ time ./cread\nreal    0m1.353s\nuser    0m1.240s\nsys     0m0.113s\n</code></pre>\n\n<p>Rust code for writing:</p>\n\n<pre><code>use std::fs;\nuse std::io::Write;\nfn main() {\n    let b = b\"test\";\n    let mut f = fs::File::create(\"rs.dump\").unwrap();\n    for _ in 0 .. 100_000_000 {\n        f.write(b).unwrap();\n    }\n}\n</code></pre>\n\n<p>Rust code for Reading:</p>\n\n<pre><code>use std::{fs, mem};\nuse std::io::Read;\nfn main() {\n    let mut f = fs::File::open(\"rs.dump\").unwrap();\n    let mut b: [u8; 4] = unsafe { mem::uninitialized() };\n    for _ in 0 .. 100_000_000 {\n        f.read_exact(&amp;mut b).unwrap();\n    }\n}\n</code></pre>\n\n<p>C code for Writing:</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>#include &lt;stdio.h&gt;\n#define N 100000000\nint main()\n{\n    const char *teststr = \"test\";\n    FILE *fp = fopen(\"c.dump\", \"wb\");\n    unsigned long long i;\n    for (i=0; i&lt;N; i++) fwrite(teststr, 4, 1, fp);\n    fclose(fp);\n    return 0;\n}\n</code></pre>\n\n<p>C code for Reading:</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>#include &lt;stdio.h&gt;\n#define N 100000000\n\nint main() {\n    FILE *fp = fopen(\"c.dump\", \"rb\");\n    long long i;\n    char buf[4];\n    for (i=0; i&lt;N; i++) fread(buf, 4, 1, fp);\n    fclose(fp);\n    return 0;\n}\n</code></pre>\n"}, {"tags": ["macros", "rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1490529935, "post_id": 43027644, "comment_id": 73142818, "body": "Note: <code>to_num(self)</code> can be written as <code>self as i32</code>. The reverse conversion is not as easy, obviously, seeing as not all integers are valid values. Also, you can use <code>#[repr(i32)]</code> to force the compiler&#39;s hand as to how <code>Foo</code> is representing in memory, allowing <code>transmute</code> to be used for the reverse conversion."}, {"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1490539076, "post_id": 43027644, "comment_id": 73145852, "body": "@MatthieuM. In fact, the main feature is array of all values(<code>ITEMS</code>), from/to i32 is not such important, at least <code>mactch</code> and <code>rustc</code> can control that I mention all values in match, but array defined by hand can have only several values of match, and compiler report nothing about that."}, {"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 1, "creation_date": 1490545372, "post_id": 43027644, "comment_id": 73148157, "body": "@user1244932 You mean <code>concat_idents!</code>? <a href=\"https://github.com/rust-lang/rust/issues/29599\" rel=\"nofollow noreferrer\">It is basically useless</a>."}, {"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "reply_to_user": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 0, "creation_date": 1490545760, "post_id": 43027644, "comment_id": 73148332, "body": "@kennytm I need something like <code>concat_idents!</code>, not exactly it"}], "answers": [{"tags": [], "owner": {"reputation": 6357, "user_id": 6086311, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cb99289473f6393b89474785f2d294d1?s=128&d=identicon&r=PG", "display_name": "dtolnay", "link": "https://stackoverflow.com/users/6086311/dtolnay"}, "is_accepted": true, "score": 3, "last_activity_date": 1538960366, "creation_date": 1538960366, "answer_id": 52694193, "question_id": 43027644, "link": "https://stackoverflow.com/questions/43027644/is-it-possible-to-define-a-macro-that-generates-a-static-array-of-all-enum-value/52694193#52694193", "title": "Is it possible to define a macro that generates a static array of all enum values from numbers?", "body": "<p>My <a href=\"https://github.com/dtolnay/mashup\" rel=\"nofollow noreferrer\"><code>mashup</code></a> crate makes it possible to form concatenated identifiers like you intended. It supports any stable Rust compiler since 1.15, although in the implementation below I have used an associated constant which requires Rust 1.20+.</p>\n\n<pre><code>#[macro_use]\nextern crate mashup;\n\nmacro_rules! define_foo_enum {\n    ($name:ident { $($number:tt),* }) =&gt; {\n        mashup! {\n            $(\n                m[\"A\" $number] = A $number;\n            )*\n        }\n        m! {\n            #[derive(Debug, PartialEq)]\n            pub enum $name {\n                $(\n                    \"A\" $number,\n                )*\n            }\n            impl $name {\n                pub const VALUES: &amp;'static [Self] = &amp;[$($name::\"A\" $number,)*];\n            }\n        }\n    }\n}\n\ndefine_foo_enum!(Foo { 1, 17, 42 });\n\nfn main() {\n    assert_eq!(Foo::VALUES, [Foo::A1, Foo::A17, Foo::A42]);\n}\n</code></pre>\n"}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 300, "favorite_count": 0, "accepted_answer_id": 52694193, "answer_count": 1, "score": 4, "last_activity_date": 1538960366, "creation_date": 1490524545, "last_edit_date": 1490544292, "question_id": 43027644, "link": "https://stackoverflow.com/questions/43027644/is-it-possible-to-define-a-macro-that-generates-a-static-array-of-all-enum-value", "title": "Is it possible to define a macro that generates a static array of all enum values from numbers?", "body": "<p>I want to write this code:</p>\n\n<pre><code>enum Foo {\n    A1 = 1,\n    A17 = 17,\n    A42 = 42,\n}\n\nstatic FOO_VALUES: [Foo; 3] = [Foo::A1, Foo::A17, Foo::A42];\n\nimpl Foo {\n    fn to_num(self) -&gt; i32 {\n        match self {\n            Foo::A1 =&gt; 1,\n            //...\n        }\n        fn from_num(a: i32) -&gt; Result&lt;Foo, ()&gt; {\n            //...\n        }\n    }\n}\n</code></pre>\n\n<p>To prevent errors, I thought to generate the code with macros:</p>\n\n<pre><code>macro_rules! define_foo_enum {\n    ($Name:ident { $($Variant:ident),* }) =&gt; {\n        pub enum $Name {\n            $(concat_ident!(A, $Variant)),*,\n        }\n        const concat_indent!($Name, _VALUES): &amp;'static [$Name] = &amp;[$($Name::concat_ident!(A, $Variant)),*];\n    }\n}\n</code></pre>\n\n<p>The macro would be used like <code>define_foo_enum!(1, 17, 42);</code></p>\n\n<p>This code does not compile, I suppose because <code>concat_ident!</code> does not work in the way that I'm attempting to use it. Additionally, I'm supplying numbers to the macro, not identifiers, but I don't know what type to use, <code>tt</code>?</p>\n\n<p>I'm using Rust 1.17.</p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490540978, "post_id": 43026916, "comment_id": 73146510, "body": "<i>I use explicit versions to make sure that build is reproducible</i> \u2014 that&#39;s <b>not</b> the idiomatic solution. Please review what the <a href=\"http://doc.crates.io/guide.html#cargotoml-vs-cargolock\" rel=\"nofollow noreferrer\">Cargo.lock</a> file is for."}, {"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490544140, "post_id": 43026916, "comment_id": 73147633, "body": "@Shepmaster Idiomatic solution not really help for many reasons. For workspace only one Cargo.lock exists for several crates, part of them libraries, part of them executables. Even if I use workspace Cargo.lock, I need first build to generate it, to generate it I need specify dependicies of each sub-crates, and after that I need manage this dependicies which move us to my question."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490544489, "post_id": 43026916, "comment_id": 73147765, "body": "I&#39;m not sure I&#39;m following you, there may be a language barrier. What I&#39;m trying to convey is that you should not have <code>X = &quot;=1.2.3&quot;</code> in any Cargo.toml file. Instead, you&#39;d say <code>X = &quot;1.2.3&quot;</code>. Version 1.2.3 will be recorded in the Cargo.lock file initially. When a bug fix to X is released, you type <code>cargo update</code>, which will resolve all the dependencies again and change the Cargo.lock file to have 1.2.4. Every crate in the workspace will have been upgraded to use the same updated version. That&#39;s the beauty of semantic versioning + lockfiles."}, {"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490544991, "post_id": 43026916, "comment_id": 73147978, "body": "@Shepmaster This is not exactly how it in real life. Bug fix may be with API change, so it from <code>1.2</code> become <code>1.3</code>, I update dependicies of one subcrate, fix compile time error, do <code>cargo update</code>, after that I want type <code>cargo --all check-that-all-have-same-dependicies-versions</code> so it automaticaly find other packages that still depend on <code>1.2</code>, so I can fix them. At now after <code>cargo update</code> I only have one sub-crate that depend on bug fixed version, and other that depend on buggy version of package?"}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 155, "favorite_count": 0, "answer_count": 0, "score": 1, "last_activity_date": 1490541099, "creation_date": 1490518905, "last_edit_date": 1490541099, "question_id": 43026916, "link": "https://stackoverflow.com/questions/43026916/is-there-a-way-to-check-that-all-cargo-toml-files-in-a-workspace-specify-the-exa", "title": "Is there a way to check that all Cargo.toml files in a workspace specify the exact same version of a crate?", "body": "<p>I have several crates inside a workspace, all of which depend on the\noutside crate <strong>X</strong> from crates.io. I use explicit versions to make sure that build is reproducible and not get random failures on CI.</p>\n\n<p>When <strong>X</strong> has a bugfix and version bump, I need to find and fix all of its mentions in all sub-crates of my workspace.</p>\n\n<p>I can not use the <code>replace</code> section in the workspaces Cargo.toml because I use also sub-crates of my workspace as separate crates in other projects.</p>\n\n<p>Is there a way to check that <strong>X</strong> inside all Cargo.toml of my sub-crates have the same version? I thought about running a Python script inside build.rs, but maybe there is a simpler solution?</p>\n"}, {"tags": ["vector", "rust"], "comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1490512637, "post_id": 43026118, "comment_id": 73138644, "body": "Note that this question is quite similar to <a href=\"http://stackoverflow.com/questions/28952411\">stackoverflow.com/questions/28952411</a> - only it asks about the start of the vector instead of the end."}], "answers": [{"comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1490514312, "post_id": 43026281, "comment_id": 73138994, "body": "Thanks, assume this is roughly as efficient as doing (<code>ptr::drop_in_place</code>, <code>ptr::copy</code>, <code>Vec::set_len</code>)"}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1490516612, "post_id": 43026281, "comment_id": 73139474, "body": "@ideasman42 That is certainly the intent - see <a href=\"https://doc.rust-lang.org/src/collections/vec.rs.html#2120\" rel=\"nofollow noreferrer\"><code>impl Drop for Drain</code></a> for the details. The compiler is hopefully smart enough to make the fetched and discarded objects in the loop equivalent to <code>ptr::drop_in_place</code>, but if in doubt, measure to check if it works for your use case."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1490541748, "post_id": 43026281, "comment_id": 73146776, "body": "Note: a <code>VecDeque</code> does not use contiguous storage (it uses two slices of contiguous storage into a single contiguous buffer; but that&#39;s not sufficient for interaction with C)."}], "tags": [], "owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "is_accepted": true, "score": 25, "last_activity_date": 1490564174, "last_edit_date": 1490564174, "creation_date": 1490513836, "answer_id": 43026281, "question_id": 43026118, "link": "https://stackoverflow.com/questions/43026118/what-is-the-idiomatic-way-to-remove-the-first-n-elements-in-a-mutable-vec/43026281#43026281", "title": "What is the idiomatic way to remove the first N elements in a mutable Vec?", "body": "<p>Use <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.drain\" rel=\"noreferrer\"><code>drain</code></a> to remove multiple contiguous elements from a vector at once as efficiently as possible (the <a href=\"https://doc.rust-lang.org/1.16.0/src/collections/vec.rs.html#2120\" rel=\"noreferrer\">implementation</a> uses <code>ptr::copy</code> to move the elements that remain):</p>\n\n<pre><code>let mut v = vec![1, 2, 3, 4];\nv.drain(0..2);\nassert!(v == vec![3, 4]);\n</code></pre>\n\n<p>Regarding #2, it is not feasible to avoid shifting the remaining elements. That optimization would require changes to the representation of the vector, changes to the allocator, or both, and all for a use case the vector is <strong>not</strong> designed to cover. If you need efficient removal from the front, use a <a href=\"https://doc.rust-lang.org/std/collections/vec_deque/struct.VecDeque.html\" rel=\"noreferrer\"><code>VecDeque</code></a>.</p>\n\n<p><code>Vec</code> is represented by a triple comprising &lt;<a href=\"https://github.com/rust-lang/rust/blob/1.16.0/src/liballoc/raw_vec.rs#L47-L50\" rel=\"noreferrer\">pointer-to-first-element, capacity</a>, <a href=\"https://github.com/rust-lang/rust/blob/1.16.0/src/libcollections/vec.rs#L296-L299\" rel=\"noreferrer\">length</a>&gt;. If removal from the front avoided shifting the remaining elements by moving the start pointer forward, deallocation would crash because the start pointer would no longer be the one provided by the allocator. Either the vector would need to get a new field for \"original pointer\", which would make all vectors pay for the optimization, or the allocation interface would need to be extended with a method for freeing the beginning of a block. <em>Every</em> front removal would call into the allocator, which would have performance consequences that are hard to assess, given that the allocator must perform its own bookkeeping and possibly acquire a lock. It would also add burden to the allocator, requiring it to keep track of these potentially tiny unaligned free blocks positioned before the blocks it originally delivered. It would also make vectors incompatible with virtually all native allocators such as <code>malloc()</code> and <code>mmap()</code>.</p>\n\n<p>Finally, the optimization would contradict the guarantees currently provided by <code>Vec</code>. The documentation <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#guarantees\" rel=\"noreferrer\">explicitly states</a> that shrinking a <code>Vec</code> will not reduce its capacity or deallocate it, unless a call to <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.shrink_to_fit\" rel=\"noreferrer\"><code>shrink_to_fit</code></a> is made. This is to avoid excessive allocations for vectors that shrink and grow a lot.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490544082, "post_id": 43030703, "comment_id": 73147616, "body": "Did you really intend to link to the user page, or the other answer?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490549976, "post_id": 43030703, "comment_id": 73149955, "body": "@Shepmaster: The user page, some users have an annoying habit of changing nicknames, so I prefer to pin them down :)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490550100, "post_id": 43030703, "comment_id": 73149998, "body": "But if you link to the answer, it will always be associated to the poster of that answer, regardless of name changes.  If your answer ends up above the other answer, a link to another answer provides an easy way to jump."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 2, "creation_date": 1490552802, "post_id": 43030703, "comment_id": 73151024, "body": "You probably meant <code>DVec::drain(..n)</code>. Also, bumping offset is not enough, one must still <code>drop_in_place</code> the drained objects. Taking that into account, <code>drain(..n)</code> is O(1) if objects don&#39;t implement <code>Drop</code>, otherwise O(n). But in either case the complexity is not related to the size of the whole vector, which is crucial when you e.g. need to remove a small number of elements from the front of a huge array."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1490597011, "post_id": 43030703, "comment_id": 73163788, "body": "@user4815162342: Indeed, I made it clear that by O(1) insertions and removal I meant insertion and removal of a single element. This is not a linked list where you can splice things in."}, {"owner": {"reputation": 1084, "user_id": 4302668, "user_type": "registered", "accept_rate": 44, "profile_image": "https://i.stack.imgur.com/EmGum.png?s=128&g=1", "display_name": "Michael Hewson", "link": "https://stackoverflow.com/users/4302668/michael-hewson"}, "edited": false, "score": 0, "creation_date": 1490849975, "post_id": 43030703, "comment_id": 73298126, "body": "How would you actually allocate the DVec on the heap, and resize it? I can imagine a hack using <code>Vec::with_capacity</code> and <code>Vec::set_len</code>, but is there a less hacky way to allocate a boxed slice of an arbitrary length in stable Rust?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 1084, "user_id": 4302668, "user_type": "registered", "accept_rate": 44, "profile_image": "https://i.stack.imgur.com/EmGum.png?s=128&g=1", "display_name": "Michael Hewson", "link": "https://stackoverflow.com/users/4302668/michael-hewson"}, "edited": false, "score": 0, "creation_date": 1490855445, "post_id": 43030703, "comment_id": 73300472, "body": "@MichaelHewson: <code>Vec::with_capacity</code> gives you a raw buffer, which is exactly what you want. You extract it from the <code>Vec</code> using <code>as_mut_ptr</code>, <code>capacity</code>; and you can rebuild the <code>Vec</code> to drop it using <code>Vec::from_raw_parts</code>. The rest of the time, you manipulate raw memory because part of it is uninitialized (at both ends)."}, {"owner": {"reputation": 1084, "user_id": 4302668, "user_type": "registered", "accept_rate": 44, "profile_image": "https://i.stack.imgur.com/EmGum.png?s=128&g=1", "display_name": "Michael Hewson", "link": "https://stackoverflow.com/users/4302668/michael-hewson"}, "edited": false, "score": 0, "creation_date": 1491111854, "post_id": 43030703, "comment_id": 73404540, "body": "I started implementing a DVec data structure like you described. It&#39;s really just a proof-of-concept to show myself that this is possible, and it needs a lot more methods and traits to be implemented before it&#39;s useful, but if you&#39;re interested, <a href=\"https://github.com/mikeyhew/rust-dvec\" rel=\"nofollow noreferrer\">here&#39;s the code</a>."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 3, "last_activity_date": 1490596941, "last_edit_date": 1495539985, "creation_date": 1490542317, "answer_id": 43030703, "question_id": 43026118, "link": "https://stackoverflow.com/questions/43026118/what-is-the-idiomatic-way-to-remove-the-first-n-elements-in-a-mutable-vec/43030703#43030703", "title": "What is the idiomatic way to remove the first N elements in a mutable Vec?", "body": "<p>If you are hell-bent on using a <code>Vec</code> directly, then <a href=\"https://stackoverflow.com/users/1600898/user4815162342\">@user4815162342</a> explained why what you are asking for is impossible.</p>\n\n<p>However, if (1) you really need efficient removal from the front and (2) contiguity matters so that <code>VecDeque</code> is not appropriate, then it is also possible to build your own container. I once had those (two) stringent requirements in C++, and C++ is much more onerous than Rust in this instance.</p>\n\n<p>The basic structure is:</p>\n\n<pre><code>struct DVec&lt;T&gt; {\n    data: *mut T,\n    length: usize,\n    offset: usize,\n    capacity: usize,\n    _marker: PhantomData&lt;T&gt;,\n}\n</code></pre>\n\n<p>Depending on your requirements, you can generally shrink the size down by using <code>u32</code> in place of <code>usize</code> (which still allows 4 billion elements!).</p>\n\n<p>After that, <code>DVec::drain(..n)</code> and <code>DVec::drain(0..n)</code> are implemented by bumping <code>offset</code> by <code>n</code>.</p>\n\n<p>This data-structure offers an interface similar to <code>VecDeque</code>, with the following changes:</p>\n\n<ul>\n<li>data is stored contiguously, thus it implements <code>Deref&lt;Target = [T]&gt;</code>,</li>\n<li>insertion of an element at either end is <strong>amortized</strong> O(1),</li>\n<li>removal of an element at either end is O(1).</li>\n</ul>\n\n<p>In C++, it is painful to write because not all objects are movable and moves can cause exception; in Rust all objects are movable and moves are exception-free, so it is considerably simpler.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 12069, "favorite_count": 2, "accepted_answer_id": 43026281, "answer_count": 2, "score": 17, "last_activity_date": 1490616181, "creation_date": 1490512591, "last_edit_date": 1490616181, "question_id": 43026118, "link": "https://stackoverflow.com/questions/43026118/what-is-the-idiomatic-way-to-remove-the-first-n-elements-in-a-mutable-vec", "title": "What is the idiomatic way to remove the first N elements in a mutable Vec?", "body": "<p>Is there a good way to remove multiple elements at the start of a vector?</p>\n\n<p>I would like to avoid multiple removals which cause unnecessary memory copying operations.</p>\n\n<pre><code>while vec.len() &gt; n {\n    vec.remove(0);\n}\n</code></pre>\n\n<hr>\n\n<ol>\n<li><p>I could use unsafe API's (<code>ptr::drop_in_place</code>, <code>ptr::copy</code>, <code>Vec::set_len</code>), but was hoping there were a more convenient way to handle this.</p></li>\n<li><p>Might an alternative solution be possible where the <code>Vec</code> pointer is offset and the range at the start is marked as free? (no memory copying required). <em>I now realize this requires Rust's underlying allocator to free memory by range not the initially allocated pointer, but it turns out this isn't the case.</em></p></li>\n</ol>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 3, "last_activity_date": 1490504367, "creation_date": 1490504367, "answer_id": 43025192, "question_id": 43025105, "link": "https://stackoverflow.com/questions/43025105/is-the-order-of-stdenvargs-guaranteed-to-remain-consistent-over-multiple-cal/43025192#43025192", "title": "Is the order of std::env::args guaranteed to remain consistent over multiple calls?", "body": "<p>Well, the documentation doesn't say so, so no, it's not guaranteed.</p>\n\n<p>Now, that having been said...</p>\n\n<blockquote>\n  <p>Returns the arguments which this program was started with (normally passed via the command line).</p>\n  \n  <p>-<a href=\"https://doc.rust-lang.org/std/env/fn.args.html\" rel=\"nofollow noreferrer\"><code>std::env::args</code> documentation</a></p>\n</blockquote>\n\n<p>That would strongly imply that the result won't change.  It's not <em>impossible</em> that the result could change, but it's clearly not the intent for that to happen.</p>\n"}], "owner": {"reputation": 435, "user_id": 6517909, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/542422dbe372e54be780ad815e253206?s=128&d=identicon&r=PG&f=1", "display_name": "Doe", "link": "https://stackoverflow.com/users/6517909/doe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 53, "favorite_count": 0, "accepted_answer_id": 43025192, "answer_count": 1, "score": 1, "last_activity_date": 1490539259, "creation_date": 1490503590, "last_edit_date": 1490539259, "question_id": 43025105, "link": "https://stackoverflow.com/questions/43025105/is-the-order-of-stdenvargs-guaranteed-to-remain-consistent-over-multiple-cal", "title": "Is the order of std::env::args guaranteed to remain consistent over multiple calls?", "body": "<p>Is the iterator returned by the <code>std::env::args</code> family of functions guaranteed to remain consistent throughout the execution of the program (i.e. only set at most once during process startup)?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490558221, "post_id": 43033801, "comment_id": 73152974, "body": "Some of my explanation is a bit fuzzy, so hopefully more knowledgable people will chime in."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1490558214, "last_edit_date": 1495540923, "creation_date": 1490558214, "answer_id": 43033801, "question_id": 43023441, "link": "https://stackoverflow.com/questions/43023441/how-can-you-resolve-the-need-to-mutably-borrow-in-different-match-arms-in-rust/43033801#43033801", "title": "How can you resolve the need to mutably borrow in different match arms in Rust?", "body": "<p><strong>tl;dr</strong> Give your wrapper struct two different lifetimes:</p>\n\n<pre><code>struct Game&lt;'a, 'b: 'a&gt; {\n    glyph_cache: &amp;'a mut GlyphCache&lt;'b&gt;,\n}\n\nimpl&lt;'a, 'b&gt; Game&lt;'a, 'b&gt; {\n    pub fn new(glyph_cache: &amp;'a mut GlyphCache&lt;'b&gt;) -&gt; Self {\n        Game { glyph_cache: glyph_cache }\n    }\n}\n</code></pre>\n\n<hr>\n\n<p>Through commenting out code, removing wrapping code, creating replacement structs, etc., your example can be further minimized:</p>\n\n<pre><code>struct GlyphCache&lt;'a&gt;(&amp;'a str);\nstruct Game&lt;'a&gt;(&amp;'a mut GlyphCache&lt;'a&gt;);\n\nfn main() {\n    let mut glyph_cache = GlyphCache(\"dummy\");\n    loop {\n        if true {\n            &amp;mut glyph_cache;\n        } else {\n            Game(&amp;mut glyph_cache);\n        }\n    }\n}\n</code></pre>\n\n<p>You can then unroll the loop one time and play with inlining the conditionals to find the case the compiler is complaining about:</p>\n\n<pre><code>struct GlyphCache&lt;'a&gt;(&amp;'a str);\nstruct Game&lt;'a&gt;(&amp;'a mut GlyphCache&lt;'a&gt;);\n\nfn main() {\n    let mut glyph_cache = GlyphCache(\"dummy\");\n\n    Game(&amp;mut glyph_cache);\n    &amp;mut glyph_cache;\n}\n</code></pre>\n\n<p>Amusingly, <a href=\"https://stackoverflow.com/q/43011827/155423\">a related question was asked in the last few days</a>, and <a href=\"https://stackoverflow.com/q/32165917/155423\">Why does linking lifetimes matter only with mutable references?</a> is relevant to this question as well. This <strong>thoroughly</strong> describes the cause, which ends up being lifetime variance (or the lack thereof, perhaps).</p>\n\n<p>As I understand it (and I might not), there's two pieces combining:</p>\n\n<ol>\n<li><p>When the outer and inner lifetimes are the same, there's the possibility that the <code>Game</code> constructor function might take ownership of a reference from the <code>GlyphCache</code>. This checking is only done at the function signature level; the body of the constructor is not checked for the usage in <code>main</code></p></li>\n<li><p>Lifetimes are currently lexical. That means that although the struct is dropped immediately, the borrow/re-borrow/transfer of a borrow that <em>might</em> have happened lasts longer, conflicting with the next iteration of the loop.</p></li>\n</ol>\n"}], "owner": {"reputation": 3908, "user_id": 1398841, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/s8gQQ.png?s=128&g=1", "display_name": "phoenix", "link": "https://stackoverflow.com/users/1398841/phoenix"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 245, "favorite_count": 0, "accepted_answer_id": 43033801, "answer_count": 1, "score": 0, "last_activity_date": 1490558214, "creation_date": 1490486864, "last_edit_date": 1490550587, "question_id": 43023441, "link": "https://stackoverflow.com/questions/43023441/how-can-you-resolve-the-need-to-mutably-borrow-in-different-match-arms-in-rust", "title": "How can you resolve the need to mutably borrow in different match arms in Rust?", "body": "<p>When compiling this part of a <a href=\"http://www.piston.rs/\" rel=\"nofollow noreferrer\">Piston</a> game, I need to mutably borrow an object in different match arms. As far as I can tell, they should all go out of scope of each other, but yet a compile error is generated.</p>\n\n<p>A simplified example that demonstrates the issue:</p>\n\n<pre><code>extern crate opengl_graphics;\nextern crate piston_window;\n\nuse opengl_graphics::GlGraphics;\nuse opengl_graphics::glyph_cache::GlyphCache;\nuse piston_window::{Button, Context, Input, Key, OpenGL, PistonWindow, Size, text, WindowSettings};\n\nstruct Game&lt;'a&gt; {\n    glyph_cache: &amp;'a mut GlyphCache&lt;'a&gt;,\n}\n\nimpl&lt;'a&gt; Game&lt;'a&gt; {\n    pub fn new(glyph_cache: &amp;'a mut GlyphCache&lt;'a&gt;) -&gt; Self {\n        Game { glyph_cache: glyph_cache }\n    }\n}\n\nfn main() {\n    let mut glyph_cache = GlyphCache::new(\"./FiraSans-Regular.ttf\").unwrap();\n    let opengl = OpenGL::V3_2;\n    let mut window: PistonWindow = WindowSettings::new(\"Title\",\n                                                       Size {\n                                                           width: 1024,\n                                                           height: 768,\n                                                       })\n            .opengl(opengl)\n            .build()\n            .unwrap();\n    let mut gl = GlGraphics::new(opengl);\n\n    while let Some(event) = window.next() {\n        match event {\n            Input::Render(args) =&gt; {\n                gl.draw(args.viewport(),\n                        |context, graphics| draw(context, graphics, &amp;mut glyph_cache));\n            }\n\n            Input::Press(Button::Keyboard(key)) =&gt; {\n                match key {\n                    Key::Space =&gt; {\n                        Game::new(&amp;mut glyph_cache);\n                        // In real code, the `Game` instance is then used here,\n                        // until going out of scope.\n                    }\n                    _ =&gt; {}\n                }\n            }\n            _ =&gt; {}\n        }\n    }\n}\n\nfn draw(context: Context, graphics: &amp;mut GlGraphics, glyph_cache: &amp;mut GlyphCache) {\n    text([1.0, 1.0, 1.0, 1.0],\n         72,\n         \"Hello, World!\",\n         glyph_cache,\n         context.transform,\n         graphics);\n}\n</code></pre>\n\n<p>I would think that when <code>Game</code> goes out of scope and is dropped, it would no longer effect the borrow. The compile error generated from stable Rust 1.16.0:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0499]: cannot borrow `glyph_cache` as mutable more than once at a time\n  --&gt; src\\main.rs:35:25\n   |\n35 |                         |context, graphics| draw(context, graphics, &amp;mut glyph_cache));\n   |                         ^^^^^^^^^^^^^^^^^^^                              ----------- borrow occurs due to use of `glyph_cache` in closure\n   |                         |\n   |                         second mutable borrow occurs here\n...\n41 |                         Game::new(&amp;mut glyph_cache);\n   |                                        ----------- first mutable borrow occurs here\n...\n49 | }\n   | - first borrow ends here\n\nerror[E0499]: cannot borrow `glyph_cache` as mutable more than once at a time\n  --&gt; src\\main.rs:41:40\n   |\n41 |                         Game::new(&amp;mut glyph_cache);\n   |                                        ^^^^^^^^^^^\n   |                                        |\n   |                                        second mutable borrow occurs here\n   |                                        first mutable borrow occurs here\n...\n49 | }\n   | - first borrow ends here\n</code></pre>\n"}, {"tags": ["rust", "typenum"], "answers": [{"comments": [{"owner": {"reputation": 5777, "user_id": 1485877, "user_type": "registered", "accept_rate": 63, "profile_image": "https://i.stack.imgur.com/tkdN8.jpg?s=128&g=1", "display_name": "drhagen", "link": "https://stackoverflow.com/users/1485877/drhagen"}, "edited": false, "score": 0, "creation_date": 1490474120, "post_id": 43021421, "comment_id": 73130776, "body": "There is just no end to the good stuff one can find behind a Rust feature gate."}, {"owner": {"reputation": 59630, "user_id": 636019, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/38ba39c7ba510ac2951c010c26afb6a6?s=128&d=identicon&r=PG", "display_name": "ildjarn", "link": "https://stackoverflow.com/users/636019/ildjarn"}, "edited": false, "score": 0, "creation_date": 1490537821, "post_id": 43021421, "comment_id": 73145421, "body": "Where can I find documentation for <code>specialization</code>? It&#39;s not listed <a href=\"https://doc.rust-lang.org/nightly/reference/attributes.html#compiler-features\" rel=\"nofollow noreferrer\">here</a> or <a href=\"https://doc.rust-lang.org/reference.html#compiler-features\" rel=\"nofollow noreferrer\">here</a>; is there somewhere else I should be looking to see a list of available/possible <code>feature</code>s?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 1, "creation_date": 1490541786, "post_id": 43021421, "comment_id": 73146788, "body": "The best documentation on specialization at this time is probably the RFC I linked to. The lack of documentation for new features is a <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1636-document_all_features.md\" rel=\"nofollow noreferrer\">known problem</a>. An exhaustive list of the available compiler features probably only exists in the compiler&#39;s source code."}, {"owner": {"reputation": 1417, "user_id": 2977291, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/66afbccc6043392125ac0f0de57ccfa7?s=128&d=identicon&r=PG&f=1", "display_name": "paholg", "link": "https://stackoverflow.com/users/2977291/paholg"}, "edited": false, "score": 0, "creation_date": 1495767814, "post_id": 43021421, "comment_id": 75399591, "body": "This doesn&#39;t work. Specialization does not currently work with associated types, and as far as I know, it is an open question as to whether it ever will."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 1417, "user_id": 2977291, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/66afbccc6043392125ac0f0de57ccfa7?s=128&d=identicon&r=PG&f=1", "display_name": "paholg", "link": "https://stackoverflow.com/users/2977291/paholg"}, "edited": false, "score": 0, "creation_date": 1495769715, "post_id": 43021421, "comment_id": 75400003, "body": "@paholg: Can you elaborate? When you multiply a <code>Matrix&lt;N, D&gt;</code> by a <code>Matrix&lt;D, N&gt;</code>, the result type is indeed <code>SquareMatrix&lt;N&gt;</code>, which shows that specialization works with associated types. However, I am noticing now that trying to multiply a <code>Matrix&lt;N, D&gt;</code> by a <code>Matrix&lt;D, M&gt;</code> gives a compiler error (expected <code>N</code>, found <code>M</code>). It looks like the compiler is trying to use the specialized implementation even though it doesn&#39;t apply. But removing <code>default</code> on the associated type doesn&#39;t fix the problem, so the problem is not related to associated types."}, {"owner": {"reputation": 1417, "user_id": 2977291, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/66afbccc6043392125ac0f0de57ccfa7?s=128&d=identicon&r=PG&f=1", "display_name": "paholg", "link": "https://stackoverflow.com/users/2977291/paholg"}, "edited": false, "score": 0, "creation_date": 1495770251, "post_id": 43021421, "comment_id": 75400103, "body": "@FrancisGagn&#233; <a href=\"https://github.com/rust-lang/rust/issues/31844\" rel=\"nofollow noreferrer\">The tracking issue</a> shows it as a question still, and I was under the impression that it was never answered or implemented, but I may be operating on outdated information. I had run a quick test, and verified it didn&#39;t work without looking too closely. This behavior does seem very strange; the specific implementation works, and removing the specific implementation makes the default one work, even with the default keywords still there. On second look, it seems to just ignore the default impl when the specialized one exists."}, {"owner": {"reputation": 1417, "user_id": 2977291, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/66afbccc6043392125ac0f0de57ccfa7?s=128&d=identicon&r=PG&f=1", "display_name": "paholg", "link": "https://stackoverflow.com/users/2977291/paholg"}, "edited": false, "score": 0, "creation_date": 1495771351, "post_id": 43021421, "comment_id": 75400335, "body": "@FrancisGagn&#233; I have managed to get simplified code to exhibit this bug <a href=\"https://play.rust-lang.org/?gist=255df3d3853a9c428c7658cb5c2a199c&amp;version=nightly&amp;backtrace=0\" rel=\"nofollow noreferrer\">here</a>. You&#39;re right, it has nothing to do with the associated types."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 2, "last_activity_date": 1490472684, "creation_date": 1490472684, "answer_id": 43021421, "question_id": 43021272, "link": "https://stackoverflow.com/questions/43021272/use-different-impl-when-type-parameters-are-the-same/43021421#43021421", "title": "Use different impl when type parameters are the same", "body": "<p>With <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1210-impl-specialization.md\" rel=\"nofollow noreferrer\">specialization</a> (which is still unstable as of Rust 1.16.0), you can. Basically, all you need is to declare the items in the more general implementation with <code>default</code> to say \"this can be specialized\".</p>\n\n<pre><code>#![feature(specialization)]\n\nimpl&lt;N: Unsigned, D: Unsigned, M: Unsigned&gt; Mul&lt;Matrix&lt;D, M&gt;&gt; for Matrix&lt;N, D&gt; {\n    default type Output = Matrix&lt;N, M&gt;;\n\n    default fn mul(self, rhs: Matrix&lt;D, M&gt;) -&gt; Self::Output {\n        unimplemented!()\n    }\n}\n\n// The more specific implementation\nimpl&lt;N: Unsigned, D: Unsigned&gt; Mul&lt;Matrix&lt;D, N&gt;&gt; for Matrix&lt;N, D&gt; {\n    type Output = SquareMatrix&lt;N&gt;;\n\n    fn mul(self, rhs: Matrix&lt;D, N&gt;) -&gt; Self::Output {\n        unimplemented!()\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 1417, "user_id": 2977291, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/66afbccc6043392125ac0f0de57ccfa7?s=128&d=identicon&r=PG&f=1", "display_name": "paholg", "link": "https://stackoverflow.com/users/2977291/paholg"}, "is_accepted": false, "score": 3, "last_activity_date": 1495768174, "last_edit_date": 1495768174, "creation_date": 1495767521, "answer_id": 44192881, "question_id": 43021272, "link": "https://stackoverflow.com/questions/43021272/use-different-impl-when-type-parameters-are-the-same/44192881#44192881", "title": "Use different impl when type parameters are the same", "body": "<p>You can do this in stable Rust right now, it just requires some extra boiler-plate.</p>\n\n<p>First, we will create an internal multiplication trait that will do the actual work:</p>\n\n<pre><code>pub trait MulPrivate&lt;Rhs, AreEqual&gt; {\n    type Output;\n    fn mul_private(self, rhs: Rhs) -&gt; Self::Output;\n}\n</code></pre>\n\n<p>Note the extra type parameter: This is how we will differentiate the two cases.</p>\n\n<p>Then, we make our regular <code>Mul</code> implementation call out to this internal one:</p>\n\n<pre><code>use typenum::{IsEqual, Eq};\nimpl&lt;N, M, D&gt; Mul&lt;Matrix&lt;D, M&gt;&gt; for Matrix&lt;N, D&gt;\n    where D: Unsigned,\n          M: Unsigned,\n          N: Unsigned + IsEqual&lt;M&gt;,\n          Matrix&lt;N, D&gt;: MulPrivate&lt;Matrix&lt;D, M&gt;, Eq&lt;N, M&gt;&gt;,\n{\n    type Output = &lt;Matrix&lt;N, D&gt; as MulPrivate&lt;Matrix&lt;D, M&gt;, Eq&lt;N, M&gt;&gt;&gt;::Output;\n    fn mul(self, rhs: Matrix&lt;D, M&gt;) -&gt; Self::Output {\n        self.mul_private(rhs)\n    }\n}\n</code></pre>\n\n<p>This allows us to compare <code>N</code> and <code>M</code>. If they are equal, that extra type parameter will be <code>True</code>, otherwise it will be <code>False</code>. Now we are free to make the two different implementations of <code>MulPrivate</code>:</p>\n\n<pre><code>use typenum::{True, False};\nimpl&lt;N: Unsigned, D: Unsigned, M: Unsigned&gt; MulPrivate&lt;Matrix&lt;D, M&gt;, False&gt; for Matrix&lt;N, D&gt; {\n    type Output = Matrix&lt;N, M&gt;;\n    fn mul_private(self, rhs: Matrix&lt;D, M&gt;) -&gt; Self::Output {\n        println!(\"not square!\");\n        unimplemented!()\n    }\n}\n\n// The more specific implementation\nimpl&lt;N: Unsigned, D: Unsigned&gt; MulPrivate&lt;Matrix&lt;D, N&gt;, True&gt; for Matrix&lt;N, D&gt; {\n    type Output = SquareMatrix&lt;N&gt;;\n    fn mul_private(self, rhs: Matrix&lt;D, N&gt;) -&gt; Self::Output {\n        println!(\"square!\");\n        unimplemented!()\n    }\n}\n</code></pre>\n\n<hr>\n\n<p>Note that once <a href=\"https://github.com/rust-lang/rust/issues/20400\" rel=\"nofollow noreferrer\">this issue</a> is resolved, you will be able to get rid of all of this boilerplate and can write it as:</p>\n\n<pre><code>impl&lt;N: Unsigned, D: Unsigned, M: Unsigned&gt; Mul&lt;Matrix&lt;D, M&gt;&gt; for Matrix&lt;N, D&gt; where N: IsEqual&lt;M, Output = False&gt; {\n    type Output = Matrix&lt;N, M&gt;;\n    fn mul(self, rhs: Matrix&lt;D, M&gt;) -&gt; Self::Output {\n        unimplemented!()\n    }\n}\n\n// The more specific implementation\nimpl&lt;N: Unsigned, D: Unsigned&gt; Mul&lt;Matrix&lt;D, N&gt;&gt; for Matrix&lt;N, D&gt; where N: IsEqual&lt;N, Output = True&gt;  {\n    type Output = SquareMatrix&lt;N&gt;;\n    fn mul(self, rhs: Matrix&lt;D, N&gt;) -&gt; Self::Output {\n        unimplemented!()\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 5777, "user_id": 1485877, "user_type": "registered", "accept_rate": 63, "profile_image": "https://i.stack.imgur.com/tkdN8.jpg?s=128&g=1", "display_name": "drhagen", "link": "https://stackoverflow.com/users/1485877/drhagen"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 544, "favorite_count": 0, "accepted_answer_id": 43021421, "answer_count": 2, "score": 3, "last_activity_date": 1495768174, "creation_date": 1490471887, "last_edit_date": 1490472935, "question_id": 43021272, "link": "https://stackoverflow.com/questions/43021272/use-different-impl-when-type-parameters-are-the-same", "title": "Use different impl when type parameters are the same", "body": "<p>I have an impl with two generic <code>typenum</code> parameters. The impl's function should return a different type when the parameters are the same. (The different type is a more compact representation that can only be realized when the type parameters are the same.) Is it possible to use a different impl based on type equality? The naive method below produces a \"conflicting implementations\" error because Rust does not take the more specific implementation.</p>\n\n<pre><code>extern crate typenum;\nuse typenum::Unsigned;\n\nuse std::ops::Mul;\nuse std::marker::PhantomData;\n\nstruct Matrix&lt;N: Unsigned, M: Unsigned&gt; {\n    n: usize,\n    m: usize,\n    elements: Vec&lt;f64&gt;,\n    _marker: PhantomData&lt;(N, M)&gt;\n}\n\n// The more compact representation\nstruct SquareMatrix&lt;N: Unsigned&gt; {\n    n: usize,\n    elements: Vec&lt;f64&gt;,\n    _marker: PhantomData&lt;(N)&gt;\n}\n\nimpl&lt;N: Unsigned, D: Unsigned, M: Unsigned&gt; Mul&lt;Matrix&lt;D, M&gt;&gt; for Matrix&lt;N, D&gt; {\n    type Output = Matrix&lt;N, M&gt;;\n    fn mul(self, rhs: Matrix&lt;D, M&gt;) -&gt; Self::Output {\n        unimplemented!()\n    }\n}\n\n// The more specific implementation\nimpl&lt;N: Unsigned, D: Unsigned&gt; Mul&lt;Matrix&lt;D, N&gt;&gt; for Matrix&lt;N, D&gt; {\n    type Output = SquareMatrix&lt;N&gt;;\n    fn mul(self, rhs: Matrix&lt;D, N&gt;) -&gt; Self::Output {\n        unimplemented!()\n    }\n}\n</code></pre>\n"}, {"tags": ["string", "path", "rust"], "comments": [{"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 0, "creation_date": 1490468746, "post_id": 43019846, "comment_id": 73129146, "body": "Is this a path to path or string to string conversion?"}, {"owner": {"reputation": 1149, "user_id": 3446870, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/14f1014c20985c75b419658190be97fe?s=128&d=identicon&r=PG&f=1", "display_name": "Palisand", "link": "https://stackoverflow.com/users/3446870/palisand"}, "reply_to_user": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 0, "creation_date": 1490473941, "post_id": 43019846, "comment_id": 73130722, "body": "string to path to string, so I guess string to string (but I would like to use methods like <code>Path::file_stem</code> and <code>Path::extension</code>)"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1490476305, "creation_date": 1490476305, "answer_id": 43022005, "question_id": 43019846, "link": "https://stackoverflow.com/questions/43019846/best-way-to-format-a-file-name-based-on-another-path-in-rust/43022005#43022005", "title": "Best way to format a file name based on another path in Rust", "body": "<p>No, there's not really anything better than what you have. A path is <strong>not</strong> a UTF-8 string, and a path might <strong>not</strong> have a <code>file_stem</code> or <code>extension</code>. You have to deal with all of those cases, this is what makes Rust a nice language.</p>\n\n<p>The only thing I can suggest is to avoid transforming to a UTF-8 string at all. You can also use placeholder empty values or conditionally act if a component is missing:</p>\n\n<pre><code>use std::path::Path;\nuse std::ffi::OsStr;\n\nfn main() {\n    let path = Path::new(\"/path/to/foo.txt\");\n\n    let stem = path.file_stem().unwrap_or(OsStr::new(\"\"));\n\n    let mut filename = stem.to_os_string();\n    filename.push(\"%d.\");\n\n    if let Some(extension) = path.extension() {\n        filename.push(extension);\n    }\n\n    assert_eq!(OsStr::new(\"foo%d.txt\"), filename);\n}\n</code></pre>\n"}], "owner": {"reputation": 1149, "user_id": 3446870, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/14f1014c20985c75b419658190be97fe?s=128&d=identicon&r=PG&f=1", "display_name": "Palisand", "link": "https://stackoverflow.com/users/3446870/palisand"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1141, "favorite_count": 1, "accepted_answer_id": 43022005, "answer_count": 1, "score": 1, "last_activity_date": 1490476305, "creation_date": 1490464214, "question_id": 43019846, "link": "https://stackoverflow.com/questions/43019846/best-way-to-format-a-file-name-based-on-another-path-in-rust", "title": "Best way to format a file name based on another path in Rust", "body": "<p>Is there a more concise way of writing the following?</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::path::Path;\n\nlet path = Path::new(\"/path/to/foo.txt\");\nlet formatted = &amp;format!(\"{}%d.{}\", path.file_stem().unwrap().to_str().unwrap(), path.extension().unwrap().to_str().unwrap());\n\nassert_eq!(\"foo%d.txt\", formatted);\n</code></pre>\n\n<p>(I want to convert <code>/path/to/foo.txt</code> to <code>foo%d.txt</code>)</p>\n"}, {"tags": ["rust", "stdout", "stderr", "unsafe"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490460577, "post_id": 43019131, "comment_id": 73126303, "body": "The ownership semantics of this <code>unsafe</code> code is <a href=\"https://doc.rust-lang.org/std/os/unix/io/trait.FromRawFd.html#tymethod.from_raw_fd\" rel=\"nofollow noreferrer\">clearly documented</a>. OP would be well-served by <b>completely reading</b> the documentation for any <code>unsafe</code> code they use."}, {"owner": {"reputation": 2559, "user_id": 665869, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b73cd84b791b01148061a5dab96eebc6?s=128&d=identicon&r=PG", "display_name": "mitnk", "link": "https://stackoverflow.com/users/665869/mitnk"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1490461124, "post_id": 43019131, "comment_id": 73126507, "body": "@Francis thanks! <code>libc::dup()</code> works here! @Shepmaster thanks for pointing this out, you&#39;re right ;)"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 2, "last_activity_date": 1490460489, "creation_date": 1490460489, "answer_id": 43019131, "question_id": 43018956, "link": "https://stackoverflow.com/questions/43018956/crash-when-redirecting-stdout-to-stderr-for-a-second-time/43019131#43019131", "title": "Crash when redirecting stdout to stderr for a second time", "body": "<p><code>Stdio::from_raw_fd(2)</code> gives ownership of file descriptor 2 to the newly constructed <code>Stdio</code> object. <code>Stdio</code>'s destructor will close the file descriptor. <code>Stdio</code>'s destructor will run when the <code>Command</code> is dropped, because the <code>Command</code> owns the <code>Stdio</code>.</p>\n\n<p>Of course, the reason you're not getting any output on the second call to <code>foo</code> is that standard error has been closed!</p>\n\n<p>The simple solution would be to duplicate file descriptor 2 and pass the duplicate to <code>Stdio::from_raw_fd</code>.</p>\n"}], "owner": {"reputation": 2559, "user_id": 665869, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b73cd84b791b01148061a5dab96eebc6?s=128&d=identicon&r=PG", "display_name": "mitnk", "link": "https://stackoverflow.com/users/665869/mitnk"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 89, "favorite_count": 0, "accepted_answer_id": 43019131, "answer_count": 1, "score": 1, "last_activity_date": 1490460552, "creation_date": 1490459569, "last_edit_date": 1490460552, "question_id": 43018956, "link": "https://stackoverflow.com/questions/43018956/crash-when-redirecting-stdout-to-stderr-for-a-second-time", "title": "Crash when redirecting stdout to stderr for a second time", "body": "<p>The second run of <code>foo()</code> will crash without an error message. When I remove this <code>unsafe</code> line, it works ok.</p>\n\n<pre><code>use std::process::{Command, Stdio};\nuse std::os::unix::io::FromRawFd;\n\nfn foo() {\n    let mut p = Command::new(\"ls\");\n    unsafe { p.stdout(Stdio::from_raw_fd(2)) };\n    let mut child = p.spawn().expect(\"spawn error\");\n    child.wait().expect(\"wait error\");\n    println!(\"process: {:?}\", p);\n}\n\nfn main() {\n    foo();\n    foo();\n}\n</code></pre>\n\n<ol>\n<li>It seems the <code>unsafe</code> code here has some issue. Maybe it's not releasing some resource?</li>\n<li>Is there a way to do the stdout -> stderr redirection without using unsafe code?</li>\n</ol>\n"}, {"tags": ["ssl", "rust", "rust-tokio"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490823893, "post_id": 43016684, "comment_id": 73290981, "body": "<i>I can add them if things are unclear</i> \u2014 have you tried <b>removing</b> things? For example, I strongly doubt that having a thread pool on the server side has any effect on the SSL, nor should <code>consume_single_quote</code> and probably lots of other parts. In fact, having all of these makes it <i>harder</i> to see the problem. Please review what a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> is and why it benefits not only potential answerers but also yourself."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490823963, "post_id": 43016684, "comment_id": 73291008, "body": "I&#39;d also suggest adding a bit of text on exactly <i>why</i> you think that the error you are getting is invalid."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490824230, "post_id": 43016684, "comment_id": 73291120, "body": "Continuing in the removal direction, what about removing tokio completely? I&#39;d be surprised if this had anything directly to do with tokio, and think that you could probably just set up a a TCP socket with TLS and then try connecting to it."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1490827382, "post_id": 43016684, "comment_id": 73292260, "body": "You may also wish to use a tool like <code>openssl s_client -showcerts -connect www.domain.com:443</code> to validate that your server is or is not working, which will allow you to decide if the server or client is at fault."}, {"owner": {"reputation": 563, "user_id": 3366443, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/68857b02d2a34389d07fba497e41e7ba?s=128&d=identicon&r=PG&f=1", "display_name": "rykeeboy", "link": "https://stackoverflow.com/users/3366443/rykeeboy"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490830097, "post_id": 43016684, "comment_id": 73293066, "body": "That seems to work so I guess it&#39;s the client. I get the following response  <a href=\"https://pastebin.com/xeXAvrzx\" rel=\"nofollow noreferrer\">pastebin.com/xeXAvrzx</a>"}, {"owner": {"reputation": 563, "user_id": 3366443, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/68857b02d2a34389d07fba497e41e7ba?s=128&d=identicon&r=PG&f=1", "display_name": "rykeeboy", "link": "https://stackoverflow.com/users/3366443/rykeeboy"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490830222, "post_id": 43016684, "comment_id": 73293105, "body": "Looking at it closer it does seem to be throwing a verification error <code>verify error:num=18:self signed certificate verify return:1</code>"}], "answers": [{"comments": [{"owner": {"reputation": 563, "user_id": 3366443, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/68857b02d2a34389d07fba497e41e7ba?s=128&d=identicon&r=PG&f=1", "display_name": "rykeeboy", "link": "https://stackoverflow.com/users/3366443/rykeeboy"}, "edited": false, "score": 0, "creation_date": 1490873896, "post_id": 43108016, "comment_id": 73312692, "body": "I did that and running SSL connect no longer shows the self signed cert error. I still get the same error when trying to connect using my client. Would the rust openssl crate know about these new certs?"}, {"owner": {"reputation": 20458, "user_id": 122087, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/431c64e3e3fd0c892ad2a7e4150cf63e?s=128&d=identicon&r=PG", "display_name": "Paul A Jungwirth", "link": "https://stackoverflow.com/users/122087/paul-a-jungwirth"}, "reply_to_user": {"reputation": 563, "user_id": 3366443, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/68857b02d2a34389d07fba497e41e7ba?s=128&d=identicon&r=PG&f=1", "display_name": "rykeeboy", "link": "https://stackoverflow.com/users/3366443/rykeeboy"}, "edited": false, "score": 0, "creation_date": 1490874595, "post_id": 43108016, "comment_id": 73313175, "body": "The rust crate is just wrapping the C OpenSSL library. Did you do anything special to build the openssl crate, like point it at a custom compiled <code>libssl</code>? By default it should just use your <code>libssl-dev</code> apt package. You might want to spin up a fresh Ubuntu VM, <code>sudo apt-get libssl-dev</code>, install the cert there per my instructions, build your project there, and see if it works."}, {"owner": {"reputation": 563, "user_id": 3366443, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/68857b02d2a34389d07fba497e41e7ba?s=128&d=identicon&r=PG&f=1", "display_name": "rykeeboy", "link": "https://stackoverflow.com/users/3366443/rykeeboy"}, "edited": false, "score": 0, "creation_date": 1490874787, "post_id": 43108016, "comment_id": 73313304, "body": "It got compiled through cargo so I would assume it should be correct. I&#39;ll try clearing out all the complied cargo stuff to see if that helps. If not I could try a vm"}, {"owner": {"reputation": 20458, "user_id": 122087, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/431c64e3e3fd0c892ad2a7e4150cf63e?s=128&d=identicon&r=PG", "display_name": "Paul A Jungwirth", "link": "https://stackoverflow.com/users/122087/paul-a-jungwirth"}, "reply_to_user": {"reputation": 563, "user_id": 3366443, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/68857b02d2a34389d07fba497e41e7ba?s=128&d=identicon&r=PG&f=1", "display_name": "rykeeboy", "link": "https://stackoverflow.com/users/3366443/rykeeboy"}, "edited": false, "score": 0, "creation_date": 1490875475, "post_id": 43108016, "comment_id": 73313815, "body": "Okay, good luck! If you are doing things like <a href=\"https://github.com/sfackler/rust-openssl#manual-configuration\" rel=\"nofollow noreferrer\">setting envvars to find openssl</a> then I would be suspicious there are two versions installed: the distro library that looks in the standard place for trusted certs, and another one that looks elsewhere."}, {"owner": {"reputation": 20458, "user_id": 122087, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/431c64e3e3fd0c892ad2a7e4150cf63e?s=128&d=identicon&r=PG", "display_name": "Paul A Jungwirth", "link": "https://stackoverflow.com/users/122087/paul-a-jungwirth"}, "reply_to_user": {"reputation": 563, "user_id": 3366443, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/68857b02d2a34389d07fba497e41e7ba?s=128&d=identicon&r=PG&f=1", "display_name": "rykeeboy", "link": "https://stackoverflow.com/users/3366443/rykeeboy"}, "edited": false, "score": 0, "creation_date": 1490876045, "post_id": 43108016, "comment_id": 73314194, "body": "Oh another thing: in the past I have gotten errors about <code>openssl-sys</code>, but the fix was simply <code>sudo apt-get install pkg-config</code> (so cargo could find the already-installed libssl), not anything more involved. I just mention it in case that was causing you to use a self-compiled copy."}, {"owner": {"reputation": 20458, "user_id": 122087, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/431c64e3e3fd0c892ad2a7e4150cf63e?s=128&d=identicon&r=PG", "display_name": "Paul A Jungwirth", "link": "https://stackoverflow.com/users/122087/paul-a-jungwirth"}, "reply_to_user": {"reputation": 563, "user_id": 3366443, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/68857b02d2a34389d07fba497e41e7ba?s=128&d=identicon&r=PG&f=1", "display_name": "rykeeboy", "link": "https://stackoverflow.com/users/3366443/rykeeboy"}, "edited": false, "score": 0, "creation_date": 1490896351, "post_id": 43108016, "comment_id": 73329090, "body": "Okay, I added notes to my answer fixing a second problem (CN mismatch), as well as a link to a working example on github. Let me know if that doesn&#39;t fix the problem for you!"}, {"owner": {"reputation": 563, "user_id": 3366443, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/68857b02d2a34389d07fba497e41e7ba?s=128&d=identicon&r=PG&f=1", "display_name": "rykeeboy", "link": "https://stackoverflow.com/users/3366443/rykeeboy"}, "edited": false, "score": 0, "creation_date": 1490898371, "post_id": 43108016, "comment_id": 73330270, "body": "Thanks for the help, I&#39;ll give it a shot in a couple hours and reply back"}, {"owner": {"reputation": 563, "user_id": 3366443, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/68857b02d2a34389d07fba497e41e7ba?s=128&d=identicon&r=PG&f=1", "display_name": "rykeeboy", "link": "https://stackoverflow.com/users/3366443/rykeeboy"}, "edited": false, "score": 0, "creation_date": 1490910126, "post_id": 43108016, "comment_id": 73336444, "body": "So I&#39;ve gotten openssl and curl to connect without complaining but still no luck with my rust client. <a href=\"https://github.com/RyanBluth/rem/blob/master/script/gencert.sh\" rel=\"nofollow noreferrer\">github.com/RyanBluth/rem/blob/master/script/gencert.sh</a>   I&#39;m running that script to do everything with the certs but still get the same error. I&#39;m using remdev as the domain and have added it to my hosts like so &quot;127.0.0.1      remdev&quot;"}, {"owner": {"reputation": 20458, "user_id": 122087, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/431c64e3e3fd0c892ad2a7e4150cf63e?s=128&d=identicon&r=PG", "display_name": "Paul A Jungwirth", "link": "https://stackoverflow.com/users/122087/paul-a-jungwirth"}, "reply_to_user": {"reputation": 563, "user_id": 3366443, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/68857b02d2a34389d07fba497e41e7ba?s=128&d=identicon&r=PG&f=1", "display_name": "rykeeboy", "link": "https://stackoverflow.com/users/3366443/rykeeboy"}, "edited": false, "score": 0, "creation_date": 1490990216, "post_id": 43108016, "comment_id": 73374783, "body": "I cloned your repo and got it working. On line 16 of <code>client.rs</code> you changed the code to ignore the <code>ip</code> param and use the hardcoded string <code>&quot;remdev&quot;</code> instead. But you must <i>also</i> change line 19, because that is where you tell the SSL system whom you think you&#39;re talking to. Passing the IP there causes the CN mismatch."}, {"owner": {"reputation": 563, "user_id": 3366443, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/68857b02d2a34389d07fba497e41e7ba?s=128&d=identicon&r=PG&f=1", "display_name": "rykeeboy", "link": "https://stackoverflow.com/users/3366443/rykeeboy"}, "edited": false, "score": 0, "creation_date": 1490990952, "post_id": 43108016, "comment_id": 73375137, "body": "Sorry about that, I actually noticed that as well and changed it after committing. I&#39;ll check it again. Did you use my script to create the cert?"}, {"owner": {"reputation": 20458, "user_id": 122087, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/431c64e3e3fd0c892ad2a7e4150cf63e?s=128&d=identicon&r=PG", "display_name": "Paul A Jungwirth", "link": "https://stackoverflow.com/users/122087/paul-a-jungwirth"}, "reply_to_user": {"reputation": 563, "user_id": 3366443, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/68857b02d2a34389d07fba497e41e7ba?s=128&d=identicon&r=PG&f=1", "display_name": "rykeeboy", "link": "https://stackoverflow.com/users/3366443/rykeeboy"}, "edited": false, "score": 0, "creation_date": 1490991635, "post_id": 43108016, "comment_id": 73375419, "body": "Yes, I ran <code>gencert.sh</code>. I did notice that I had to manually copy the pfx file into <code>target</code> though. Also, watch out with <code>update-ca-certificates</code>. I think if the filename is already present, it won&#39;t update it. So if it says <code>0 added</code>, your new cert hasn&#39;t been registered. But in that case <code>curl</code> (with no <code>-k</code>) will start failing too."}, {"owner": {"reputation": 563, "user_id": 3366443, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/68857b02d2a34389d07fba497e41e7ba?s=128&d=identicon&r=PG&f=1", "display_name": "rykeeboy", "link": "https://stackoverflow.com/users/3366443/rykeeboy"}, "edited": false, "score": 0, "creation_date": 1490991853, "post_id": 43108016, "comment_id": 73375514, "body": "Hmm okay, I&#39;ll give it another shot. I&#39;m probably missing one little thing, thanks for all the help"}, {"owner": {"reputation": 563, "user_id": 3366443, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/68857b02d2a34389d07fba497e41e7ba?s=128&d=identicon&r=PG&f=1", "display_name": "rykeeboy", "link": "https://stackoverflow.com/users/3366443/rykeeboy"}, "edited": false, "score": 0, "creation_date": 1490993797, "post_id": 43108016, "comment_id": 73376337, "body": "I finally got it to work, I think it was failing to actually update the ca-certs properly when using <code>&#47;usr&#47;sbin&#47;update-ca-certificates</code>. I used <code>sudo dpkg-reconfigure ca-certificates</code> instead and was able to add the new cert properly"}, {"owner": {"reputation": 20458, "user_id": 122087, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/431c64e3e3fd0c892ad2a7e4150cf63e?s=128&d=identicon&r=PG", "display_name": "Paul A Jungwirth", "link": "https://stackoverflow.com/users/122087/paul-a-jungwirth"}, "reply_to_user": {"reputation": 563, "user_id": 3366443, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/68857b02d2a34389d07fba497e41e7ba?s=128&d=identicon&r=PG&f=1", "display_name": "rykeeboy", "link": "https://stackoverflow.com/users/3366443/rykeeboy"}, "edited": false, "score": 0, "creation_date": 1490994031, "post_id": 43108016, "comment_id": 73376432, "body": "Hooray! Best of luck with your project. :-)"}], "tags": [], "owner": {"reputation": 20458, "user_id": 122087, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/431c64e3e3fd0c892ad2a7e4150cf63e?s=128&d=identicon&r=PG", "display_name": "Paul A Jungwirth", "link": "https://stackoverflow.com/users/122087/paul-a-jungwirth"}, "is_accepted": true, "score": 5, "last_activity_date": 1490895758, "last_edit_date": 1490895758, "creation_date": 1490844703, "answer_id": 43108016, "question_id": 43016684, "link": "https://stackoverflow.com/questions/43016684/tokio-tls-self-signed-certificate/43108016#43108016", "title": "Tokio Tls Self Signed Certificate", "body": "<p>This is more an OpenSSL issue than a Rust issue. Assuming the client is running Ubuntu also, copy the <code>*.crt</code> file to its <code>/usr/local/share/ca-certificates/</code>, then run <code>sudo /usr/sbin/update-ca-certificates</code>. That will tell the client to trust your certificate, and OpenSSL will no longer report an error about it.</p>\n\n<p>(Edit:) You still have a remaining problem, which is that the cert's Common Name (CN) does not match the name the client is using to reach the server. Your <code>ssl.conf</code> gives it a CN of <code>localhost</code>, but the client asks for it by IP. Obviously if the client asks for <a href=\"https://localhost/\" rel=\"noreferrer\">https://localhost/</a> it's not going to work. So you should re-generate your cert with a different DNS name, have the client trust the new cert, and then use that name for making requests. If necessary you could just use a name like <code>rustsslserver</code> and put that in your client's <code>/etc/hosts</code>.</p>\n\n<p>I have <a href=\"https://github.com/pjungwir/rust-ssl-self-signed\" rel=\"noreferrer\">a git repo that shows a working example here</a>. Note it uses hyper, not tokio, but the results should be the same.</p>\n"}], "owner": {"reputation": 563, "user_id": 3366443, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/68857b02d2a34389d07fba497e41e7ba?s=128&d=identicon&r=PG&f=1", "display_name": "rykeeboy", "link": "https://stackoverflow.com/users/3366443/rykeeboy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1734, "favorite_count": 1, "accepted_answer_id": 43108016, "answer_count": 1, "score": 2, "last_activity_date": 1490895758, "creation_date": 1490447056, "last_edit_date": 1490830695, "question_id": 43016684, "link": "https://stackoverflow.com/questions/43016684/tokio-tls-self-signed-certificate", "title": "Tokio Tls Self Signed Certificate", "body": "<p>Update: This seems to be more of an issue with generating and trusting a self signed cert properly</p>\n\n<p>I am building a server and client using tokio-rs. I have everything working but am now trying to add SSL/TLS to the system. I've generated a self signed certificate and installed it correctly as far as I know, but every time I try to get the client to connect to the server I get the following error: </p>\n\n<pre><code>thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Failure(Ssl(ErrorStack([Error { code: 336134278, library: \"SSL routines\", function: \"ssl3_get_server_certificate\", reason: \"certificate verify failed\", file: \"s3_clnt.c\", line: 1264 }])))', /buildslave/rust-buildbot/slave/stable-dist-rustc-linux/build/src/libcore/result.rs:837\n</code></pre>\n\n<p>I am using the following script to generate a crt, key and pfx file:</p>\n\n<pre><code>openssl req -nodes -x509 -newkey rsa:2048 -config ssl.conf -extensions ext -subj /C=CA/ST=EH/L=Canadia/O=Dis/CN=localhost -keyout localhost.key -out localhost.crt -days 365\nopenssl pkcs12 -export -nodes -inkey localhost.key -in localhost.crt -out localhost.pfx\nmv localhost.pfx ../\n</code></pre>\n\n<p>with this conf file </p>\n\n<pre><code>[req]\ndistinguished_name=dn\n[ dn ]\nCN=localhost\n[ ext ]\nbasicConstraints=CA:FALSE,pathlen:0\nsubjectAltName = @alt_names\n[alt_names]\nDNS.1 = localhost\n</code></pre>\n\n<p>The pfx file is moved up a level and then copied into the debug folder on build.</p>\n\n<p>I am running Ubuntu and have copied localhost.crt to /etc/ssl/certs and localhost.key to /etc/ssl/private</p>\n\n<p>My server code is using tokio-proto and the tokio-tls tokio-proto Server protocol wrapper</p>\n\n<p>Protocol: </p>\n\n<pre><code>use tokio_proto::pipeline::ServerProto;\nuse tokio_io::codec::{Framed};\nuse tokio_io::{AsyncRead, AsyncWrite};\nuse tokio_tls::{TlsAcceptorExt};\nuse rem::codec::CacheCodec;\nuse std::io;\n\npub struct CacheProto {}\n\nimpl&lt;T: AsyncRead + AsyncWrite + 'static&gt; ServerProto&lt;T&gt; for CacheProto {\n    /// For this protocol style, `Request` matches the codec `In` type\n    type Request = String;\n\n    /// For this protocol style, `Response` matches the coded `Out` type\n    type Response = String;\n\n    /// A bit of boilerplate to hook in the codec:\n    type Transport = Framed&lt;T, CacheCodec&gt;;\n    type BindTransport = Result&lt;Self::Transport, io::Error&gt;;\n    fn bind_transport(&amp;self, io: T) -&gt; Self::BindTransport {\n        Ok(io.framed(CacheCodec{}))\n    }\n}\n</code></pre>\n\n<p>Server: </p>\n\n<pre><code>use std::string::String;\nuse std::sync::{Arc, Mutex};\n\nuse rem::cache::Cache;\nuse rem::service::CacheService;\nuse rem::proto::CacheProto;\n\nuse futures_cpupool::CpuPool;\n\nuse tokio_tls::{TlsAcceptorExt};\nuse native_tls::{Pkcs12, TlsAcceptor};\n\nuse tokio_tls::proto::Server;\nuse tokio_proto::TcpServer;\n\nuse std::fs::File;\nuse std::io::{Read};\n\npub fn launch(ip: String, port: String) {\n   // Specify the localhost address\n    let addr = format!(\"{}:{}\", ip, port).parse().unwrap();\n\n    let pkcs12 = get_pkcs12();\n    let acceptor = TlsAcceptor::builder(pkcs12).unwrap().build().unwrap();\n\n    let proto = Server::new(CacheProto{}, acceptor);\n\n    // The builder requires a protocol and an address\n    let server = TcpServer::new(proto, addr);\n\n    let pool = Box::new(CpuPool::new_num_cpus());\n\n    // We provide a way to *instantiate* the service for each new\n    // connection; here, we just immediately return a new instance.\n    let cache = Arc::new(Mutex::new(Cache::new()));\n    let cache_service = CacheService {\n        cache: cache.clone(),\n        pool : pool\n    };\n\n    server.serve( move || Ok(cache_service.clone()));\n}\n\nfn get_pkcs12() -&gt; Pkcs12{\n    let mut file = File::open(\"localhost.pfx\").unwrap();\n    let mut pkcs12 = vec![];\n    file.read_to_end(&amp;mut pkcs12).unwrap();\n    let pkcs12 = Pkcs12::from_der(&amp;pkcs12, \"password\").unwrap();\n    return pkcs12;\n}\n</code></pre>\n\n<p>Client: (Not using tokio-proto, just native tls and TCP)</p>\n\n<pre><code>use std::io::prelude::*;\nuse std::io;\nuse std::string::String;\nuse std::vec::Vec;\nuse std::net::{TcpStream};\nuse std::mem;\n\nuse native_tls::{TlsConnector, TlsStream};\n\nuse rem::op;\nuse rem::error::*;\n\npub fn launch(ip: String, port: String) {\n    info!(\"Connection to {}:{}\", ip, port);\n\n    match TcpStream::connect(format!(\"{}:{}\", ip, port).as_str()) {\n        Ok(mut tcp_stream) =&gt; {\n            let connector = TlsConnector::builder().unwrap().build().unwrap();\n            let mut stream = connector.connect(ip.as_str(), tcp_stream).unwrap();\n            loop {\n                // Contine looping, executing any commands from the user\n                let handle = io::stdin();\n                for line_res in handle.lock().lines() {\n                    let line: String = line_res.unwrap();\n                    let args:Vec&lt;String&gt; = parse_input(line);\n                    if args.len() &gt; 0{\n                        let arg_ref = args[0].as_ref();\n                        match arg_ref {\n                            \"write\" =&gt; {\n                                if args.len() == 3 {\n                                    match client_exec_write(&amp;args[1], &amp;args[2], &amp;mut stream){\n                                        Ok(_) =&gt; (),\n                                        Err(why) =&gt; why.log()\n                                    }\n                                }else{\n                                    error!(\"Write expects two arguments - key and value\");\n                                }\n                            },\n                            \"read\" =&gt; {\n                                if args.len() == 2 {\n                                    match client_exec_read(&amp;args[1], &amp;mut stream){\n                                        Ok(_) =&gt; (),\n                                        Err(why) =&gt; why.log()\n                                    }\n                                }else{\n                                    error!(\"Read expects one argument - key\");\n                                }\n                            },\n                            \"delete\" =&gt; {\n                                if args.len() == 2 {\n                                    match client_exec_delete(&amp;args[1], &amp;mut stream){\n                                        Ok(_) =&gt; (),\n                                        Err(why) =&gt; why.log()\n                                    }\n                                }else{\n                                    error!(\"Delete expects one argument - key\");\n                                }\n                            }\n                            _ =&gt; error!(\"Not a valid command\")\n                        }\n                    }\n                }\n            }\n        }\n        Err(e) =&gt; {\n            panic!(\"Failed to connect to server. Error '{}'\", e);\n        }\n    }\n}\n\n\n/// Executres a write operation by parsing the client command and converting it to REM format\n/// ex: write abc:def would be converted to 9|W$abc:def and sent to the REM server\nfn client_exec_write(key:&amp;String, val:&amp;String, mut stream: &amp;mut TlsStream&lt;TcpStream&gt;)-&gt; Result&lt;(), RemError&gt; {\n    let sized_val = String::from(format!(\"W${}:{}\", key, val));\n    let res = op::write_str_to_stream_with_size(&amp;mut stream, sized_val);\n    try!(print_response(&amp;mut stream));\n    return res;\n}\n\n/// Executres a read operation by parsing the client command and converting it to REM format\n/// ex: read abc:def would be converted to 5|R$abc and sent to the REM launch_server\n/// The respone from the REM server is writen to stdout\n/// If stdout::flush fail a warning will be logged\nfn client_exec_read(key: &amp;String, mut stream: &amp;mut TlsStream&lt;TcpStream&gt;)-&gt; Result&lt;(), RemError&gt;{\n    let cmd_val = String::from(format!(\"R${}\", key));\n    try!(op::write_str_to_stream_with_size(&amp;mut stream, cmd_val));\n    try!(print_response(&amp;mut stream));\n    return Ok(());\n}\n\n/// Executes a delete operation by parsing the client command and converting it to REM format\n/// ex: delete abc would be converted to 5|D$abc and sent to the REM server\nfn client_exec_delete(key: &amp;String, mut stream: &amp;mut TlsStream&lt;TcpStream&gt;) -&gt; Result&lt;(), RemError&gt;{\n    let cmd_val = String::from(format!(\"D${}\", key));\n    let res = op::write_str_to_stream_with_size(&amp;mut stream, cmd_val);\n    try!(print_response(&amp;mut stream));\n    return res;\n}\n\nfn print_response(mut stream: &amp;mut TlsStream&lt;TcpStream&gt;) -&gt; Result&lt;(), RemError&gt;{\n    let val: String = try!(op::string_from_stream(&amp;mut stream));\n    println!(\"{}\", val);\n    try!(io::stdout().flush());\n    return Ok(());\n}\n\nstruct InputParser{\n    args:Vec&lt;String&gt;,\n    current:String,\n    consumed_double_quote:bool,\n    consumed_single_quote:bool\n}\n\nimpl InputParser{\n\n    /// Consumes a space charater taking quotes into consideration\n    /// If the parser has consumed an opening quote then the space will be consumed as a character\n    pub fn consume_space(&amp;mut self){\n        // If neither a single quote or a double quote has been consumed then its a new argument\n        if !self.consumed_double_quote &amp;&amp; !self.consumed_single_quote {\n            self.push_current();\n        }else{\n            self.current.push(' ');\n        }\n    }\n\n    /// Consumes a double quote, keeping track of whether it is an opening or cloing quote\n    /// Takes single quotes into account when determening if the double quote is a delimiter or character\n    pub fn consume_double_quote(&amp;mut self){\n        // If a single quote hasn't been consumed we're at the end or \n        // beginning of an argument in double quotes\n        if  !self.consumed_single_quote {\n            if self.consumed_double_quote{\n                self.push_current();\n            }\n            // Flip the value so we know the sate for the next double quote that is consumed\n            self.consumed_double_quote = !self.consumed_double_quote;\n        }else{\n            // If we're in double quotes just treat the double quote as a regular character \n            self.current.push('\"');\n        }\n    }\n\n    /// Consumes a single quote, keeping track of whether it is an opening or cloing quote\n    /// Takes double quotes into account when determening if the single quote is a delimiter or character\n    pub fn consume_single_quote(&amp;mut self){\n         // If a double quote hasn't been consumed we're at the end or \n        // beginning of an argument in single quotes\n         if !self.consumed_double_quote {\n            if self.consumed_single_quote{\n                self.push_current();\n            }\n            // Flip the value so we know the sate for the next single quote that is consumed\n            self.consumed_single_quote = !self.consumed_single_quote;\n        }else{\n            // If we're in double quotes just treat the single quote as a regular character \n            self.current.push('\\'');\n        }\n    }\n\n    /// Adds the character onto the current argument\n    pub fn consume_char(&amp;mut self, c:char){\n        self.current.push(c);\n    }\n\n    /// To be called when everything has been parsed\n    pub fn end(&amp;mut self){\n        self.push_current();\n    }\n\n    /// Pushes the current string into the list of args\n    /// If the length of current is 0 no actions are performed\n    pub fn push_current(&amp;mut self){\n        if self.current.len() &gt; 0 {\n            let arg = mem::replace(&amp;mut self.current, String::new());\n            self.args.push(arg);\n        }\n    }\n\n}\n\n/// Parses the arguments out of an input string taking quotes and spaces into consideration\npub fn parse_input(input: String) -&gt; Vec&lt;String&gt;{\n    let mut parser = InputParser{\n        args:Vec::new(),\n        current:String::new(),\n        consumed_double_quote:false,\n        consumed_single_quote:false\n    };    \n    for c in input.chars(){\n        match c {\n            '\"'  =&gt; parser.consume_double_quote(),\n            ' '  =&gt; parser.consume_space(),\n            '\\'' =&gt; parser.consume_single_quote(), \n            _    =&gt; parser.consume_char(c)\n        }\n    }\n    parser.end();\n\n    return parser.args;\n}\n</code></pre>\n\n<p>Op:</p>\n\n<pre><code>use std::io::prelude::*;\nuse std::string::String;\nuse std::vec::Vec;\nuse std::net::{TcpStream};\nuse std::sync::{Mutex};\n\nuse native_tls::{TlsConnector, TlsStream};\n\nuse rem::cache::Cache;\nuse rem::error::*;\n\n\npub fn read_value_from_cache(key: String,\n                         cache_mtx: &amp;Mutex&lt;Cache&gt;)\n                         -&gt; Result&lt;(Vec&lt;u8&gt;), RemError&gt; {\n    let cache = cache_mtx.lock().unwrap();\n    let cache_opt: Option&lt;Box&lt;Vec&lt;u8&gt;&gt;&gt; = try!(cache.read_item(key));\n    match cache_opt {\n        Some(boxed_val) =&gt; {\n            let val: Vec&lt;u8&gt; = *boxed_val;\n            return Ok(val.clone());\n        }\n        None =&gt; {\n            return Err(RemError::with_reason(String::from(REM_00005)));\n        }\n    }\n}\n\n/// Parses a TCP input stream and extracts the data\n/// Allocates a 64 byte buffer which is used to read the input info from the stream\n/// The expected format is ```{size}|{content}```\n/// Ex. ```5|W$a:b```\npub fn string_from_stream(stream: &amp;mut TlsStream&lt;TcpStream&gt;) -&gt; Result&lt;String, RemError&gt; {\n    //Read in the first 54 bytes of the stram\n    //try!(stream.set_nodelay(true));\n    let mut buf_arr: [u8; 64] = [0; 64];\n    try!(stream.read(&amp;mut buf_arr));\n    // Parse the message size\n    let mut size_str = String::new();\n    let mut buf_size: usize = 0;\n    for i in 0..64 {\n        buf_size += 1;\n        if buf_arr[i] == '|' as u8 {\n            break;\n        }\n        size_str.push(buf_arr[i as usize] as char);\n    }\n\n    // Convert the size string to a usize so it can be used to drain the buffer\n    let upper_idx: usize = try!(size_str.parse::&lt;i32&gt;()) as usize;\n    let mut buf_temp: Vec&lt;u8&gt; = buf_arr.to_vec();\n    // Create a new buffer using the parsed indicies\n    let buf: Vec&lt;u8&gt; = buf_temp.drain(buf_size..upper_idx + buf_size).collect();\n\n    stream.flush().unwrap();\n\n    // Return the value as a string\n    let buf_str: String = String::from_utf8(buf).unwrap();\n    return Ok(buf_str);\n}\n\npub fn write_stream_str_to_cache(stream_str: String,\n                             cache_mtx: &amp;Mutex&lt;Cache&gt;)\n                             -&gt; Result&lt;(), RemError&gt; {\n    let mut key: String = String::new();\n    let mut val: String = String::new();\n    let mut idx = 0;\n    let chars_iter = stream_str.chars();\n    for c in chars_iter {\n        idx += 1;\n        if c == ':' {\n            val = String::from(&amp;stream_str[idx..]);\n            break;\n        }\n        key.push(c);\n    }\n    let bytes = val.into_bytes();\n    let mut cache = cache_mtx.lock().unwrap();\n    return cache.cache_item(key.as_str(), bytes);\n}\n\npub fn delete_value_from_cache(key: String, cache_mtx: &amp;Mutex&lt;Cache&gt;) -&gt; Result&lt;(), RemError&gt; {\n    let mut cache = cache_mtx.lock().unwrap();\n    return cache.delete_item(key);\n}\n\npub fn write_str_to_stream_with_size(stream: &amp;mut TlsStream&lt;TcpStream&gt;, value: String) -&gt; Result&lt;(), RemError&gt; {\n    let sized_val = String::from(format!(\"{}|{}\", value.len(), value));\n    try!(stream.write(String::from(sized_val).as_bytes()));\n    try!(stream.flush());\n    return Ok(());\n}\n</code></pre>\n\n<p>There are more files to this project but I don't think they're relevant, however I can add them if things are unclear</p>\n"}, {"tags": ["rust", "borrowing"], "answers": [{"comments": [{"owner": {"reputation": 275, "user_id": 7762670, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/gRcks.png?s=128&g=1", "display_name": "Sogomn", "link": "https://stackoverflow.com/users/7762670/sogomn"}, "edited": false, "score": 0, "creation_date": 1490454844, "post_id": 43012195, "comment_id": 73124214, "body": "First of all, thank you for the detailed answer! I wasn&#39;t 100% sure what the cause of the problem was, hence I didn&#39;t know how to break down the code even more. The type parameter <code>C</code> is used for a list of callbacks which get called by the <code>dispatch</code> function. Now I know that the problem has to do with the fact that a reference to <code>TickData</code> is a reference to a reference. The answer from the link you provided sais &quot;[make sure] that the lifetime of the outer reference is at least as large as the lifetime of the inner one&quot;, which really confuses me. Shouldn&#39;t it be the other way around?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1490412864, "last_edit_date": 1495542326, "creation_date": 1490412552, "answer_id": 43012195, "question_id": 43011827, "link": "https://stackoverflow.com/questions/43011827/cannot-infer-an-appropriate-lifetime-when-calling-a-mutable-method-with-referenc/43012195#43012195", "title": "Cannot infer an appropriate lifetime when calling a mutable method with references passed as closure arguments", "body": "<p>There's no <em>one</em> right solution to your code. It appears overly complicated and I don't know why you've made some of the design decisions you have. If nothing I say applies, then I apologize and you'll have to wait for the next answerer.</p>\n\n<hr>\n\n<p>Reducing your problem is the right idea, but why did you <em>stop</em>? It can be reduced all the way down to</p>\n\n<pre><code>struct Something;\n\nstruct World&lt;'a&gt; {\n    x: TickData&lt;'a&gt;,\n}\n\nimpl&lt;'a&gt; World&lt;'a&gt; {\n    fn dispatch(&amp;mut self, context: &amp;TickData&lt;'a&gt;) {}\n}\n\nstruct TickData&lt;'a&gt;(&amp;'a Something);\n\nfn update_fnc(world: &amp;mut World, sth: &amp;Something) {\n    let tick_data = TickData(sth);\n    world.dispatch(&amp;tick_data);\n}\n\nfn main() {}\n</code></pre>\n\n<p>By trial-and-error, one can find some \"solutions\":</p>\n\n<pre><code>impl&lt;'a&gt; World&lt;'a&gt; {\n    fn dispatch(&amp;self, context: &amp;TickData&lt;'a&gt;) {}\n}\n</code></pre>\n\n<p>or</p>\n\n<pre><code>impl&lt;'a&gt; World&lt;'a&gt; {\n    fn dispatch(&amp;mut self, context: &amp;TickData) {}\n}\n</code></pre>\n\n<p>or</p>\n\n<pre><code>impl&lt;'a&gt; World&lt;'a&gt; {\n    fn dispatch&lt;'b&gt;(&amp;'b mut self, context: &amp;'b TickData&lt;'b&gt;) {}\n}\n</code></pre>\n\n<p>For an <strong>extremely thorough</strong> analysis of this problem, better than I can give, check out <a href=\"https://stackoverflow.com/q/32165917/155423\">Why does linking lifetimes matter only with mutable references?</a>.</p>\n\n<hr>\n\n<p>Let's look at another aspect, back at your main method:</p>\n\n<pre><code>let mut world = World::&lt;TickData&gt;::new();\n</code></pre>\n\n<p>We know that <code>TickData</code> has a lifetime in it, so what is it in this case? We can't specify it like a type, it must be inferred from the usage. So where is it used?</p>\n\n<p>One analogy to look to is a <code>Vec</code>. We create a <code>Vec</code> and then <code>push</code> things onto it later. Those <code>push</code>es tell us what the concrete type of <code>T</code> is. What does your code do:</p>\n\n<pre><code>let mut world = World::&lt;TickData&gt;::new();\n// ...\nworld.dispatch(&amp;mut tick_data);\n</code></pre>\n\n<p>You create a type that you've said contains a <code>TickData</code> (that's what <code>PhantomData</code> does), then you call a method that \"push\"es that type (<code>fn dispatch(&amp;mut self, context: &amp;mut C)</code>), therefore the second argument <em>must</em> be of the type contained, resolving the final type.</p>\n\n<p>This leads to another problem: there's no clue how long the lifetimes of those arguments are.</p>\n\n<p>However, simply annotating the lifetimes isn't enough:</p>\n\n<pre><code>fn update&lt;'a, F&gt;(&amp;'a mut self, mut f: F)\n    where F: FnMut(u64, &amp;'a Something, &amp;'a mut Something)\n{\n    f(0, &amp;self.sth, &amp;mut self.sth2);\n}\n</code></pre>\n\n<p>This further complication is because we are passing the <em>mutable</em> reference <code>sth2</code> to <code>dispatch</code>. The definition of <code>dispatch</code> allows it to <strong>store</strong> that mutable reference inside itself - the lifetimes and types match and it's a <code>&amp;mut self</code>.</p>\n\n<p>This could lead to multiple mutable aliases, which is disallowed.</p>\n\n<p>I <em>don't know why</em> you've parameterized your <code>World</code>, but you might be able to just move the <code>C</code> to the <code>dispatch</code> method, removing <code>PhantomData</code> completely. This removes the ability for <code>World</code> to store <code>C</code>.</p>\n"}], "owner": {"reputation": 275, "user_id": 7762670, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/gRcks.png?s=128&g=1", "display_name": "Sogomn", "link": "https://stackoverflow.com/users/7762670/sogomn"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 128, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1490413023, "creation_date": 1490408674, "last_edit_date": 1490413023, "question_id": 43011827, "link": "https://stackoverflow.com/questions/43011827/cannot-infer-an-appropriate-lifetime-when-calling-a-mutable-method-with-referenc", "title": "Cannot infer an appropriate lifetime when calling a mutable method with references passed as closure arguments", "body": "<p>I'm trying to make a small game in Rust. I want to use something similar to the entity-component-system pattern to handle all the game objects.</p>\n\n<p>My general idea is to have a <code>GameLoop</code> struct which holds all the necessary data to update and draw the game (the screen, a timestamp, ...).</p>\n\n<p>The <code>World</code> struct is supposed to hold all the game entities and update them in the <code>dispatch</code> function. It calls all the registered callbacks which are stored in the <code>World</code> struct as well (those are the \"systems\"). They're redundant in the sample code, though.</p>\n\n<p>I've tried to break down the code as much as possible and only include the relevant parts.</p>\n\n<pre><code>use std::marker::PhantomData;\n\nstruct Something;\n\n///The \"somethings\" are things like the display, a timestamp, ...\nstruct GameLoop {\n    sth: Something,\n    sth2: Something,\n}\n\n///C = Context\n///The type that is passed to every entity to give it access to things like the delta time\nstruct World&lt;C&gt; {\n    phantom: PhantomData&lt;C&gt;, //This is here so Rust doesn't complain about the type parameter not being used\n}\n\n///The data that is passed to the system functions every frame\nstruct TickData&lt;'a&gt; {\n    delta: u64,\n    sth: &amp;'a Something,\n    sth2: &amp;'a mut Something,\n}\n\nimpl GameLoop {\n    fn new() -&gt; GameLoop {\n        GameLoop {\n            sth: Something {},\n            sth2: Something {},\n        }\n    }\n\n    ///One game \"tick\" - Supposed to do things like calculating delta time, swapping buffers, ...\n    ///Those are then passed to the callback\n    fn update&lt;F: FnMut(u64, &amp;Something, &amp;mut Something)&gt;(&amp;mut self, f: &amp;mut F) {\n        f(0, &amp;self.sth, &amp;mut self.sth2);\n    }\n}\n\nimpl&lt;C&gt; World&lt;C&gt; {\n    fn new() -&gt; World&lt;C&gt; {\n        World { phantom: PhantomData }\n    }\n\n    ///Supposed to update all the game entities\n    fn dispatch(&amp;mut self, context: &amp;mut C) {\n        //...\n    }\n}\n\nimpl&lt;'a&gt; TickData&lt;'a&gt; {\n    fn new&lt;'b&gt;(delta: u64, sth: &amp;'b Something, sth2: &amp;'b mut Something) -&gt; TickData&lt;'b&gt; {\n        TickData {\n            delta: delta,\n            sth: sth,\n            sth2: sth2,\n        }\n    }\n}\n\nfn main() {\n    let mut game_loop = GameLoop::new();\n    let mut world = World::&lt;TickData&gt;::new();\n\n    //The game update function, called once per frame\n    let mut update_fnc = |delta: u64, sth: &amp;Something, sth2: &amp;mut Something| {\n        let mut tick_data = TickData::new(delta, sth, sth2);\n\n        &amp;world.dispatch(&amp;mut tick_data); //If this line is commented out, it compiles fine\n\n        //...\n    };\n\n    loop {\n        game_loop.update(&amp;mut update_fnc); //Calculate the delta time, call the specified function and swap buffers\n    }\n}\n</code></pre>\n\n<p>There seems to be a problem with borrowing / lifetimes. The compiler is everything else but verbose.</p>\n\n<p>The problem seems to be the <code>&amp;world.dispatch(&amp;mut tick_data)</code> call in the update function of the game, which is supposed to update all the game entities. If I comment it out the program compiles without any errors.</p>\n\n<p>This is what the compiler tells me:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0495]: cannot infer an appropriate lifetime for lifetime parameter 'b in function call due to conflicting requirements\n  --&gt; src/main.rs:66:29\n   |\n66 |         let mut tick_data = TickData::new(delta, sth, sth2);\n   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nnote: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the body at 65:77...\n  --&gt; src/main.rs:65:78\n   |\n65 |       let mut update_fnc = |delta: u64, sth: &amp;Something, sth2: &amp;mut Something| {\n   |  ______________________________________________________________________________^ starting here...\n66 | |         let mut tick_data = TickData::new(delta, sth, sth2);\n67 | |\n68 | |         &amp;world.dispatch(&amp;mut tick_data); //If this line is commented out, it compiles fine\n69 | |\n70 | |         //...\n71 | |     };\n   | |_____^ ...ending here\nnote: ...so that reference does not outlive borrowed content\n  --&gt; src/main.rs:66:55\n   |\n66 |         let mut tick_data = TickData::new(delta, sth, sth2);\n   |                                                       ^^^^\nnote: but, the lifetime must be valid for the expression at 74:25...\n  --&gt; src/main.rs:74:26\n   |\n74 |         game_loop.update(&amp;mut update_fnc); //Calculate the delta time, call the specified function and swap buffers\n   |                          ^^^^^^^^^^^^^^^\nnote: ...so that reference is valid at the time of borrow\n  --&gt; src/main.rs:74:26\n   |\n74 |         game_loop.update(&amp;mut update_fnc); //Calculate the delta time, call the specified function and swap buffers\n   |                          ^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>I simply can't spot the cause of the error. The functions get called in a kind of procedural way and since I'm only borrowing most of the data there should be no problem with the lifetimes.</p>\n\n<p>When I remove the references from the <code>TickData</code> struct so it only contains values that are implemented for the <code>Copy</code> trait, it works as well.</p>\n\n<p>I'm usually not the kind of person to post a wall of code and ask people to fix it but I'm really clueless right now. </p>\n"}, {"tags": ["methods", "struct", "rust"], "comments": [{"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 1, "creation_date": 1490393856, "post_id": 43009835, "comment_id": 73109603, "body": "This lets you provide implementations for user-defined traits for types that you didn&#39;t define. That means the set of &quot;methods&quot; on a struct can grow even outside the file in which the struct is defined."}], "answers": [{"tags": [], "owner": {"reputation": 275, "user_id": 7762670, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/gRcks.png?s=128&g=1", "display_name": "Sogomn", "link": "https://stackoverflow.com/users/7762670/sogomn"}, "is_accepted": true, "score": 11, "last_activity_date": 1490398744, "last_edit_date": 1490398744, "creation_date": 1490393316, "answer_id": 43009939, "question_id": 43009835, "link": "https://stackoverflow.com/questions/43009835/why-do-i-have-to-declare-methods-outside-a-struct-in-rust/43009939#43009939", "title": "Why do I have to declare methods outside a struct in Rust?", "body": "<p>In most languages, \"methods\" are just some syntactic sugar. You don't actually have an object and call its methods, you have a function that takes a reference to that object and then does stuff with it. In contrast to regular functions, the reference to the object is passed implicitly by using the dot notation.</p>\n\n<pre><code>struct Foo {\n    //...\n}\n\nimpl Foo {\n    fn do_something(self: &amp;Self) {   //\"self: &amp;Self\" is a more verbose notation for \"&amp;self\"\n        //...\n    }\n}\n</code></pre>\n\n<p>So calling it like this</p>\n\n<pre><code>my_foo.do_something();\n</code></pre>\n\n<p>Is essentially the same as</p>\n\n<pre><code>Foo::do_something(&amp;my_foo);\n</code></pre>\n\n<p>I think it's a decision made by the Rust developers to make it more clear that a struct is nothing else than just a set of data.</p>\n\n<p>This is also what allows trait implementation for already existing types.</p>\n"}], "owner": {"reputation": 2809, "user_id": 6720987, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/0TSHr.png?s=128&g=1", "display_name": "Jan-Fokke", "link": "https://stackoverflow.com/users/6720987/jan-fokke"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 401, "favorite_count": 0, "accepted_answer_id": 43009939, "answer_count": 1, "score": 5, "last_activity_date": 1490398744, "creation_date": 1490392789, "last_edit_date": 1490398684, "question_id": 43009835, "link": "https://stackoverflow.com/questions/43009835/why-do-i-have-to-declare-methods-outside-a-struct-in-rust", "title": "Why do I have to declare methods outside a struct in Rust?", "body": "<p>Why are methods created outside the struct?</p>\n\n<p>In languages like C#, you can add the methods inside the struct. I know that in languages like C and C++ you have header files so it makes sense, but as far as I know I can't create header files in Rust.</p>\n"}, {"tags": ["rust", "borrow-checker"], "comments": [{"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 1, "creation_date": 1490381219, "post_id": 43006556, "comment_id": 73103510, "body": "(Not solution, just styling) <code>players.get_mut(0).unwrap();</code> can be written as <code>&amp;mut players[0]</code> instead."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1490381279, "last_edit_date": 1495535410, "creation_date": 1490381279, "answer_id": 43007050, "question_id": 43006556, "link": "https://stackoverflow.com/questions/43006556/can-structs-in-a-vec-reference-one-another/43007050#43007050", "title": "Can structs in a Vec reference one another?", "body": "<p>I'll assume that you've already searched for the error message and read through <em>some</em> of the <a href=\"https://stackoverflow.com/search?q=%5Brust%5D+%22sized+is+not+implemented%22+is%3Aq\">10+ questions and answers about it already</a>, so I'll return the favor and won't waste your time with that. Instead, I'll move on to the problem regarding borrow checking:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `players` as immutable because it is also borrowed as mutable\n  --&gt; src/main.rs:40:25\n   |\n39 |     let mut alice = players.get_mut(0).unwrap();\n   |                     ------- mutable borrow occurs here\n40 |     alice.friends.push(&amp;players[1]);\n   |                         ^^^^^^^ immutable borrow occurs here\n...\n48 | }\n   | - mutable borrow ends here\n</code></pre>\n\n<p>Rust only allows you to have <a href=\"https://doc.rust-lang.org/stable/book/references-and-borrowing.html#the-rules\" rel=\"nofollow noreferrer\">a single mutable reference <em>or</em> one-or-more immutable references to the same value</a>. This code already creates a mutable reference to the vector and is trying to get a second immutable reference. </p>\n\n<p>This must be disallowed because as far as the compiler knows, changing the mutable reference might invalidate the immutable reference. That would lead to memory unsafety, which Rust disallows.</p>\n\n<p>In this case, once you've created your <code>players</code> vector, you won't be adding any more values to it. The vector itself is immutable, but the components within it want to be mutable. This is a good fit for a <code>RefCell</code>:</p>\n\n<pre><code>struct Player&lt;'a&gt; {\n    name: String,\n    friends: RefCell&lt;Vec&lt;&amp;'a Player&lt;'a&gt;&gt;&gt;,\n}\n</code></pre>\n\n<p>Now a <code>Player</code> can have their friends modified without the containing element knowing about the mutability.</p>\n\n<p>Then it's just a matter of removing the mutable borrow of the vector and borrowing <code>friends</code> as mutable instead:</p>\n\n<pre><code>let alice = &amp;players[0];\nalice.friends.borrow_mut().push(&amp;players[1]);\nalice.friends.borrow_mut().push(&amp;players[2]);\n</code></pre>\n\n<p>You also have to add a missing lifetime to <code>Game::new</code>, and it compiles:</p>\n\n<pre><code>use std::cell::RefCell;\n\nstruct Player&lt;'a&gt; {\n    name: String,\n    friends: RefCell&lt;Vec&lt;&amp;'a Player&lt;'a&gt;&gt;&gt;,\n}\n\nimpl&lt;'a&gt; Player&lt;'a&gt; {\n    fn new(name: &amp;str) -&gt; Player {\n        Player {\n            name: name.into(),\n            friends: RefCell::new(Vec::new()),\n        }\n    }\n}\n\nstruct Game&lt;'a&gt; {\n    players: Vec&lt;&amp;'a Player&lt;'a&gt;&gt;,\n}\n\nimpl&lt;'a&gt; Game&lt;'a&gt; {\n    fn new(players: &amp;[&amp;'a Player&lt;'a&gt;]) -&gt; Game&lt;'a&gt; {\n        Game { players: players.to_vec() }\n    }\n}\n\nfn main() {\n    let players = vec![\n        Player::new(\"alice\"),\n        Player::new(\"bob\"),\n        Player::new(\"eve\"), \n        Player::new(\"dave\"),\n    ];\n\n    let alice = &amp;players[0];\n    alice.friends.borrow_mut().push(&amp;players[1]);\n    alice.friends.borrow_mut().push(&amp;players[2]);\n\n    Game::new(&amp;[&amp;players[0], &amp;players[1]]);\n}\n</code></pre>\n\n<hr>\n\n<p>Your question is very close to <a href=\"https://stackoverflow.com/questions/32300132\">Why can&#39;t I store a value and a reference to that value in the same struct?</a>, but is subtly different. You are encouraged to read that for highly-related information.</p>\n"}], "owner": {"reputation": 372, "user_id": 2722784, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/17935d19c83cba797a7c8e1470dc20bb?s=128&d=identicon&r=PG", "display_name": "Feenaboccles", "link": "https://stackoverflow.com/users/2722784/feenaboccles"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 448, "favorite_count": 1, "accepted_answer_id": 43007050, "answer_count": 1, "score": 2, "last_activity_date": 1490381526, "creation_date": 1490379509, "last_edit_date": 1490381526, "question_id": 43006556, "link": "https://stackoverflow.com/questions/43006556/can-structs-in-a-vec-reference-one-another", "title": "Can structs in a Vec reference one another?", "body": "<p>The following code creates a list of players then adds references to some of the other players as friends. I can't get this past the borrow-checker. Could anyone explain where I'm going wrong?</p>\n\n<pre><code>fn main() {\n    let mut players =\n        vec![Player::new(\"alice\"), Player::new(\"bob\"), Player::new(\"eve\"), Player::new(\"dave\")];\n\n    let mut alice = players.get_mut(0).unwrap();\n    alice.friends.push(&amp;players[1]);\n    alice.friends.push(&amp;players[2]);\n    // The list is borrowed by the existence of Alice, how do I\n    // put Bob and Eve into Alice's group?\n\n    let game = Game::new(GameType::Checkers,\n                         \"Game #23\",\n                         vec![&amp;players[0], &amp;players[1]][..]);\n    // the trait bound `[&amp;'a Player&lt;'_&gt;]: std::marker::Sized` is not satisfied\n}\n</code></pre>\n\n<p>For a bonus, how do I equally get players into the game? </p>\n\n<p>The rest of the code is as follows:</p>\n\n<pre><code>struct Player&lt;'a&gt; {\n    name: String,\n    friends: Vec&lt;&amp;'a Player&lt;'a&gt;&gt;,\n}\nimpl&lt;'a&gt; Player&lt;'a&gt; {\n    fn new(name: &amp;str) -&gt; Player {\n        Player {\n            name: name.into(),\n            friends: Vec::new(),\n        }\n    }\n}\n\nenum GameType {\n    Chess,\n    Checkers,\n    SnakesAndLadders,\n}\n\nstruct Game&lt;'a&gt; {\n    game: GameType,\n    name: String,\n    players: Vec&lt;&amp;'a Player&lt;'a&gt;&gt;,\n}\nimpl&lt;'a&gt; Game&lt;'a&gt; {\n    fn new(game: GameType, name: &amp;str, players: [&amp;'a Player]) -&gt; Game&lt;'a&gt; {\n        Game {\n            game: game,\n            name: name.into(),\n            players: players.to_vec(),\n        }\n    }\n}\n</code></pre>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 6, "creation_date": 1490372487, "post_id": 43004405, "comment_id": 73098276, "body": "You don&#39;t need to build Rust or Cargo yourself just because you are not a privileged user. <a href=\"https://rustup.rs/\" rel=\"nofollow noreferrer\">Rustup</a> installs everything to your home directory."}, {"owner": {"reputation": 2966, "user_id": 3022310, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7f10ec2b45320ee843e539d705c31d08?s=128&d=identicon&r=PG", "display_name": "turbulencetoo", "link": "https://stackoverflow.com/users/3022310/turbulencetoo"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490373656, "post_id": 43004405, "comment_id": 73099060, "body": "Well I&#39;ll be..."}], "answers": [{"tags": [], "owner": {"reputation": 671, "user_id": 7551820, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh6.googleusercontent.com/-qFYkSwbZduE/AAAAAAAAAAI/AAAAAAAAAdQ/MmHqIWG-_xQ/photo.jpg?sz=128", "display_name": "Laurence", "link": "https://stackoverflow.com/users/7551820/laurence"}, "is_accepted": true, "score": 1, "last_activity_date": 1490505601, "creation_date": 1490505601, "answer_id": 43025315, "question_id": 43004405, "link": "https://stackoverflow.com/questions/43004405/is-cargo-a-dependency-to-build-cargo-itself-from-source/43025315#43025315", "title": "Is Cargo a dependency to build Cargo itself from source?", "body": "<p>According to the discussion here <a href=\"https://github.com/rust-lang/cargo/issues/3772\" rel=\"nofollow noreferrer\">Issue 3772</a>:</p>\n\n<blockquote>\n  <p>Indeed yeah Cargo is required to compile Cargo. In future Rust releases we'll have --enable-extended which will compile Cargo as well as Rust.</p>\n</blockquote>\n\n<p>But some cargo bootstrapping scripts could be found. For example: <a href=\"https://github.com/dhuseby/cargo-bootstrap\" rel=\"nofollow noreferrer\">https://github.com/dhuseby/cargo-bootstrap</a>.</p>\n"}], "owner": {"reputation": 2966, "user_id": 3022310, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7f10ec2b45320ee843e539d705c31d08?s=128&d=identicon&r=PG", "display_name": "turbulencetoo", "link": "https://stackoverflow.com/users/3022310/turbulencetoo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 639, "favorite_count": 0, "accepted_answer_id": 43025315, "answer_count": 1, "score": 3, "last_activity_date": 1490505601, "creation_date": 1490372180, "last_edit_date": 1490372442, "question_id": 43004405, "link": "https://stackoverflow.com/questions/43004405/is-cargo-a-dependency-to-build-cargo-itself-from-source", "title": "Is Cargo a dependency to build Cargo itself from source?", "body": "<p>The <a href=\"https://github.com/rust-lang/cargo\" rel=\"nofollow noreferrer\">Cargo README</a> states the following:</p>\n\n<blockquote>\n  <h2>Compiling from Source</h2>\n  \n  <p>Cargo requires the following tools and packages to build:</p>\n  \n  <ul>\n  <li><code>python</code></li>\n  <li><code>curl</code> (on Unix)</li>\n  <li><code>cmake</code></li>\n  <li>OpenSSL headers (only for Unix, this is the <code>libssl-dev</code> package on ubuntu)</li>\n  <li><code>cargo</code> and <code>rustc</code></li>\n  </ul>\n  \n  <p>First, you'll want to check out this repository</p>\n\n<pre><code>git clone --recursive https://github.com/rust-lang/cargo \ncd cargo\n</code></pre>\n  \n  <p>With <code>cargo</code> already installed, you can simply run:</p>\n\n<pre><code>cargo build --release\n</code></pre>\n  \n  <p>Otherwise, you can also use a more traditional approach:</p>\n\n<pre><code>./configure\nmake\nmake install\n</code></pre>\n</blockquote>\n\n<p>It indicates that Cargo is a dependency for building Cargo, but also seems to indicate that if Cargo is not installed then the method starting with <code>./configure</code> should work.</p>\n\n<p>When I clone that repo and run <code>./configure</code> I get an error</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>...\nconfigure: found cmake\nconfigure: found make\nconfigure: recreating config.tmp\nconfigure: \nconfigure: processing ./configure args\nconfigure: \nconfigure: CFG_PREFIX           := /usr/local \nconfigure: CFG_LOCAL_RUST_ROOT  :=  \nconfigure: CFG_CARGO            := cargo \nconfigure: CFG_RUSTC            := rustc \nconfigure: CFG_RUSTDOC          := rustdoc \nconfigure: CFG_CARGO            :=  \nconfigure: error: needed, but unable to find any of: CFG_CARGO cargo\n</code></pre>\n\n<p>Does this mean I can't build Cargo from source without having Cargo installed? Maybe an argument to <code>configure</code> is missing? </p>\n\n<p>I built Rust from source because I am not a privileged user on this system and have the installation in my user directory.</p>\n"}, {"tags": ["c", "linux", "rust", "out-of-memory", "stack-overflow"], "comments": [{"owner": {"reputation": 1636, "user_id": 3370124, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f73352b4adb282c092738f34883488dd?s=128&d=identicon&r=PG&f=1", "display_name": "Richard Critten", "link": "https://stackoverflow.com/users/3370124/richard-critten"}, "edited": false, "score": 6, "creation_date": 1490339506, "post_id": 42993387, "comment_id": 73077462, "body": "Overflow will only happen when the stack page-faults.  That is when the stack pointer runs into an unloaded / unowned page.  Where the stack starts need not be on a exact page boundary but can depend on where the program is loaded so the overflow condition (page fault) trigger will be different."}, {"owner": {"reputation": 18509, "user_id": 939410, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/bb161e6bf2e1dded07d3fd921f487334?s=128&d=identicon&r=PG", "display_name": "Art", "link": "https://stackoverflow.com/users/939410/art"}, "edited": false, "score": 1, "creation_date": 1490339818, "post_id": 42993387, "comment_id": 73077603, "body": "Does <a href=\"http://stackoverflow.com/questions/31180563/why-are-stackoverflow-errors-chaotic\">this</a> look similar?"}, {"owner": {"reputation": 2755, "user_id": 3244776, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/a3E89.jpg?s=128&g=1", "display_name": "nohup", "link": "https://stackoverflow.com/users/3244776/nohup"}, "reply_to_user": {"reputation": 1636, "user_id": 3370124, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f73352b4adb282c092738f34883488dd?s=128&d=identicon&r=PG&f=1", "display_name": "Richard Critten", "link": "https://stackoverflow.com/users/3370124/richard-critten"}, "edited": false, "score": 0, "creation_date": 1490339819, "post_id": 42993387, "comment_id": 73077604, "body": "@RichardCritten So any page outside the allocated stack size must be an unowned page right? Please correct me if I&#39;m wrong."}, {"owner": {"reputation": 1636, "user_id": 3370124, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f73352b4adb282c092738f34883488dd?s=128&d=identicon&r=PG&f=1", "display_name": "Richard Critten", "link": "https://stackoverflow.com/users/3370124/richard-critten"}, "edited": false, "score": 1, "creation_date": 1490340604, "post_id": 42993387, "comment_id": 73077973, "body": "It will depends on which way the stack grows.  It might grow into your program static data or heap.  This will depend on architecture and implementation details.  For example the implementer may place a guard-page at the end of the stack frame.  We are very close to Undefined Behaviour is Undefined Behaviour and any explanation will need the target hardware and implementation details."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1490361745, "post_id": 42993387, "comment_id": 73090738, "body": "For your Rust implementation, you don&#39;t need to declare a <b>static</b> mutable. A local variable would work just as well, avoiding the need for <code>unsafe</code> code as well."}], "answers": [{"comments": [{"owner": {"reputation": 114796, "user_id": 214671, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/f82954c7134fbe63282dc033fd52f3ab?s=128&d=identicon&r=PG", "display_name": "Matteo Italia", "link": "https://stackoverflow.com/users/214671/matteo-italia"}, "edited": false, "score": 0, "creation_date": 1490340465, "post_id": 42993583, "comment_id": 73077910, "body": "16 bytes is actually the most restrictive alignment requirement on x86 AFAIK."}, {"owner": {"reputation": 2755, "user_id": 3244776, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/a3E89.jpg?s=128&g=1", "display_name": "nohup", "link": "https://stackoverflow.com/users/3244776/nohup"}, "edited": false, "score": 0, "creation_date": 1490340644, "post_id": 42993583, "comment_id": 73077991, "body": "sorry I accidentally deleted my comment, so adding it here again. I was asking, if stack is randomized, shouldn&#39;t it be aligned to the page for efficient access? Thank you for the update."}, {"owner": {"reputation": 1636, "user_id": 3370124, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f73352b4adb282c092738f34883488dd?s=128&d=identicon&r=PG&f=1", "display_name": "Richard Critten", "link": "https://stackoverflow.com/users/3370124/richard-critten"}, "edited": false, "score": 1, "creation_date": 1490340934, "post_id": 42993583, "comment_id": 73078124, "body": "It only need to be aligned for the most restrictive data type."}, {"owner": {"reputation": 114796, "user_id": 214671, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/f82954c7134fbe63282dc033fd52f3ab?s=128&d=identicon&r=PG", "display_name": "Matteo Italia", "link": "https://stackoverflow.com/users/214671/matteo-italia"}, "edited": false, "score": 1, "creation_date": 1490341017, "post_id": 42993583, "comment_id": 73078165, "body": "As I said, it&#39;s enough that it&#39;s 16 byte aligned (so the most picky SSE types can be pushed correctly aligned); page boundaries aren&#39;t particularly interesting for quick stack access - stack is accessed virtually at every offset (sensible for the target type) during execution, where it begins doesn&#39;t hold much importance as long as it is aligned."}, {"owner": {"reputation": 2755, "user_id": 3244776, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/a3E89.jpg?s=128&g=1", "display_name": "nohup", "link": "https://stackoverflow.com/users/3244776/nohup"}, "edited": false, "score": 4, "creation_date": 1490342030, "post_id": 42993583, "comment_id": 73078646, "body": "Verified it by disabling <code>ASLR</code> in <code>&#47;proc&#47;sys&#47;kernel&#47;randomize_va_space</code> and the result is consistent now. Thanks again."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2755, "user_id": 3244776, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/a3E89.jpg?s=128&g=1", "display_name": "nohup", "link": "https://stackoverflow.com/users/3244776/nohup"}, "edited": false, "score": 3, "creation_date": 1490361819, "post_id": 42993583, "comment_id": 73090782, "body": "@nohup just in case you didn&#39;t re-enable ASLR after testing, you definitely should. ASLR is a key security protection and shouldn&#39;t be disabled."}, {"owner": {"reputation": 2755, "user_id": 3244776, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/a3E89.jpg?s=128&g=1", "display_name": "nohup", "link": "https://stackoverflow.com/users/3244776/nohup"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1490373485, "post_id": 42993583, "comment_id": 73098947, "body": "Thank you @Shepmaster. I&#39;ve enabled it back.I was learning a bit of systems programming, and was just curious."}], "tags": [], "owner": {"reputation": 114796, "user_id": 214671, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/f82954c7134fbe63282dc033fd52f3ab?s=128&d=identicon&r=PG", "display_name": "Matteo Italia", "link": "https://stackoverflow.com/users/214671/matteo-italia"}, "is_accepted": true, "score": 16, "last_activity_date": 1490342867, "last_edit_date": 1495535409, "creation_date": 1490339845, "answer_id": 42993583, "question_id": 42993387, "link": "https://stackoverflow.com/questions/42993387/why-does-a-stack-overflow-occur-at-varying-stack-usage-each-run-instead-of-a-fix/42993583#42993583", "title": "Why does a stack overflow occur at varying stack usage each run instead of a fixed amount?", "body": "<p>Most probably this is due to <a href=\"https://en.wikipedia.org/wiki/Address_space_layout_randomization\" rel=\"nofollow noreferrer\">ASLR</a>.</p>\n\n<p>The base address of the stack is randomized at each run to make certain types of exploits more difficult; on Linux this <a href=\"https://en.wikipedia.org/wiki/Address_space_layout_randomization#Linux\" rel=\"nofollow noreferrer\">has a granularity of 16 bytes</a> (which is the biggest alignment requirement on x86 and almost any other platform I know).</p>\n\n<p>On the other hand, <a href=\"https://stackoverflow.com/questions/11543748/why-is-the-page-size-of-linux-x86-4-kb-how-is-that-calcualted\">the page size is (normally) 4 KB on x86</a>, and the system detects the stack overflow when you touch the first forbidden page; this means that you'll always have available a partial page first (with the offset depending from ASLR), and then two full pages before the system detects a stack overflow. Hence the total usable stack size is at least the 8192 bytes you requested, plus the first partial page, whose available size is different at each run.<sup>1</sup></p>\n\n<hr>\n\n<ol>\n<li>All this in the \"regular\" case where the offset is nonzero; if you are very lucky and the random offset is zero you probably get exactly two pages.</li>\n</ol>\n"}], "owner": {"reputation": 2755, "user_id": 3244776, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/a3E89.jpg?s=128&g=1", "display_name": "nohup", "link": "https://stackoverflow.com/users/3244776/nohup"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 308, "favorite_count": 1, "accepted_answer_id": 42993583, "answer_count": 1, "score": 11, "last_activity_date": 1490361605, "creation_date": 1490339108, "last_edit_date": 1490361605, "question_id": 42993387, "link": "https://stackoverflow.com/questions/42993387/why-does-a-stack-overflow-occur-at-varying-stack-usage-each-run-instead-of-a-fix", "title": "Why does a stack overflow occur at varying stack usage each run instead of a fixed amount?", "body": "<p>I am running a program with a recursive call on a Debian OS. My stack size is </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>-s: stack size (kbytes)             8192\n</code></pre>\n\n<p>As far as I've learned, the stack size must be fixed, and should be the same that must be allocated to a program at every run unless it is explicitly changed with <code>ulimit</code>.</p>\n\n<p>The recursive function is a decrements a given number until it reaches <code>0</code>. This is written in Rust.</p>\n\n<pre><code>fn print_till_zero(x: &amp;mut i32) {\n    *x -= 1;\n    println!(\"Variable is {}\", *x);\n    while *x != 0 {\n        print_till_zero(x);\n    }\n}\n</code></pre>\n\n<p>and the value is passed as </p>\n\n<pre><code>static mut Y: i32 = 999999999;\nunsafe {\n    print_till_zero(&amp;mut Y);\n}\n</code></pre>\n\n<p>Since the stack allocated to the program is fixed, and theoretically must not change, I was expecting a stack overflow at the same value each time, but it is not, which means the stack allocation is variadic.</p>\n\n<p>Run 1:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>====snip====\nVariable is 999895412\nVariable is 999895411\n\nthread 'main' has overflowed its stack\nfatal runtime error: stack overflow\n</code></pre>\n\n<p>Run 2:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>====snip====\nVariable is 999895352\nVariable is 999895351\n\nthread 'main' has overflowed its stack\nfatal runtime error: stack overflow\n</code></pre>\n\n<p>Although the difference is subtle, shouldn't it be ideally causing the stack overflow at the same variable? Why is it happening at different times, implying different stack size for each run? This is not specific to Rust; a similar behavior is observed in C:</p>\n\n<pre><code>#pragma GCC push_options\n#pragma GCC optimize (\"O0\")\n#include&lt;stdio.h&gt;\nvoid rec(int i){\n    printf(\"%d,\",i);\n    rec(i-1);\n    fflush(stdout);\n}\nint main(){\nsetbuf(stdout,NULL);\nrec(1000000);\n}\n#pragma GCC pop_options\n</code></pre>\n\n<p>Output:</p>\n\n<p>Run 1:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>738551,738550,[1]    7052 segmentation fault\n</code></pre>\n\n<p>Run 2:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>738438,738437,[1]    7125 segmentation fault\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 4115, "user_id": 1817435, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/3JaIM.jpg?s=128&g=1", "display_name": "Viraj", "link": "https://stackoverflow.com/users/1817435/viraj"}, "edited": false, "score": 1, "creation_date": 1490330900, "post_id": 42991597, "comment_id": 73074330, "body": "Why this is allowed in language ? Doesn&#39;t this cause logic errors not easy to figure in large program ? What is the purpose of shadowing and is there any other language which uses these concept ?"}, {"owner": {"reputation": 109956, "user_id": 159145, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/r8ryC.png?s=128&g=1", "display_name": "Dai", "link": "https://stackoverflow.com/users/159145/dai"}, "edited": false, "score": 0, "creation_date": 1490331229, "post_id": 42991597, "comment_id": 73074422, "body": "How can you reference a previously-shadowed variable?"}, {"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "reply_to_user": {"reputation": 109956, "user_id": 159145, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/r8ryC.png?s=128&g=1", "display_name": "Dai", "link": "https://stackoverflow.com/users/159145/dai"}, "edited": false, "score": 3, "creation_date": 1490331468, "post_id": 42991597, "comment_id": 73074484, "body": "@Dai I don&#39;t think you can... You could always pass ownership to another variable <code>let y = x</code>."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 4115, "user_id": 1817435, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/3JaIM.jpg?s=128&g=1", "display_name": "Viraj", "link": "https://stackoverflow.com/users/1817435/viraj"}, "edited": false, "score": 4, "creation_date": 1490342422, "post_id": 42991597, "comment_id": 73078843, "body": "@Viraj: It&#39;s allowed because it&#39;s found to be useful. Most languages allow shadowing to a degree, although Rust may be unique in that it allows shadowing in the same block. As for logic errors... it swing both ways. Sometimes being able to guarantee that the argument/variable is not accessed afterward is quite useful too. Honestly though I prefer not to use it."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 8, "creation_date": 1490344448, "post_id": 42991597, "comment_id": 73079891, "body": "I use shadowing for when I have an intermediary type, and I convert it into something else, knowing that I won&#39;t need it again. For example, a function has an argument  <code>foo: Option&lt;u32&gt;</code>, and I immediately unwrap it with <code>let foo = foo.unwrap_or(0)</code>. This saves me having to think of a new name for this variable, and prevents a future maintainer having to think about which similar-looking variable to use."}], "tags": [], "owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "is_accepted": true, "score": 13, "last_activity_date": 1490331845, "last_edit_date": 1490331845, "creation_date": 1490330688, "answer_id": 42991597, "question_id": 42991325, "link": "https://stackoverflow.com/questions/42991325/why-does-this-rust-program-ignore-immutability/42991597#42991597", "title": "Why does this Rust program ignore immutability", "body": "<p>Rust actually lets you shadow other variables in a block, so <code>let x: i32 = 565;</code> is defining a <em>new</em> variable <code>x</code> that shadows the <code>x</code> defined earlier with <code>let (x,y) = (1,3);</code>. Note that you could even have redefined <code>x</code> to have a different type since the second <code>x</code> is a whole new variable!</p>\n\n<pre><code>fn main(){\n   let x = 1;\n   println!(\"Now X is {}\",x);\n\n   let x = \"hi\";\n   println!(\"Now X is {}\",x);\n}\n</code></pre>\n\n<p>This <a href=\"https://www.reddit.com/r/rust/comments/2cho4g/why_does_rust_need_local_variable_shadowing/\" rel=\"noreferrer\">reddit thread</a> goes into more detail about why this is useful. The two things that are mentioned that seem interesting are:</p>\n\n<ul>\n<li><p>For operations which take ownership of the variable, but return another variable of the same type, it sometimes \"looks nice\" to redefine the returned variable to have the same name. From <a href=\"https://users.rust-lang.org/t/how-to-avoid-accidentally-redeclaring-a-variable-inside-a-code-block/8315/3\" rel=\"noreferrer\">here</a>:</p>\n\n<pre><code>let iter = vec.into_iter();\nlet iter = modify(iter);\nlet iter = double(iter);\n</code></pre></li>\n<li><p>Or to make a variable immutable:</p>\n\n<pre><code>let mut x;\n// Code where `x` is mutable\nlet x = x;\n// Code where `x` is immutable\n</code></pre></li>\n</ul>\n"}], "owner": {"reputation": 4115, "user_id": 1817435, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/3JaIM.jpg?s=128&g=1", "display_name": "Viraj", "link": "https://stackoverflow.com/users/1817435/viraj"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 254, "favorite_count": 0, "accepted_answer_id": 42991597, "answer_count": 1, "score": 7, "last_activity_date": 1490347894, "creation_date": 1490329007, "last_edit_date": 1490347894, "question_id": 42991325, "link": "https://stackoverflow.com/questions/42991325/why-does-this-rust-program-ignore-immutability", "title": "Why does this Rust program ignore immutability", "body": "<p>I have the following Rust program and I expect it to result in an compilation error since <code>x</code> is reassigned later. But it complies and gives output. Why?</p>\n\n<pre><code>fn main() {\n   let (x, y) = (1, 3);\n   println!(\"X is {} and Y is {}\", x, y);\n\n   let x: i32 = 565;\n   println!(\"Now X is {}\", x);\n}\n</code></pre>\n"}, {"tags": ["windows", "rust", "rust-cargo"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1490322785, "post_id": 42990101, "comment_id": 73072168, "body": "Rust doesn&#39;t &quot;determine&quot; the toolchain to use; you do. You choose to install a version of Rust that uses the MSVC toolchain or the GNU toolchain, and you can tell which you have by running <code>rustc -v --verbose</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1490322990, "post_id": 42990101, "comment_id": 73072216, "body": "You have not provided enough information to reproduce your problem. Please review how to create a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> (taking special note of <i>minimal</i> and <i>verifiable</i>). For example, you do not show how the C code is being compiled or linked, or the Rust code that calls it."}, {"owner": {"reputation": 8906, "user_id": 105389, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/4b9e888299f2bbb84b996583df056a8c?s=128&d=identicon&r=PG", "display_name": "Michael Tiller", "link": "https://stackoverflow.com/users/105389/michael-tiller"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490354488, "post_id": 42990101, "comment_id": 73086075, "body": "You wrote <code>rustc -v --verbose</code>, but I assume you meant <code>rustc -V --verbose</code>.  That says I&#39;m using <code>x86_64-pc-windows-msvc</code>.  So it is odd that I&#39;m getting this error that seems to be related to MinGW.  But at least now I know what host it is using.  I&#39;ll work the problem from there.  It is hard to provide a verifiable case here because I&#39;m pretty sure this has to do with the tools that are installed on my computer."}, {"owner": {"reputation": 8906, "user_id": 105389, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/4b9e888299f2bbb84b996583df056a8c?s=128&d=identicon&r=PG", "display_name": "Michael Tiller", "link": "https://stackoverflow.com/users/105389/michael-tiller"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490354588, "post_id": 42990101, "comment_id": 73086122, "body": "You say that Rust doesn&#39;t &quot;determine&quot; the toolchain.  Note that the Rustup installation notes say &quot;Despite being built against the GNU toolchain, the Windows build of rustup will install Rust for the MSVC toolchain if it detects that MSVC is installed.&quot;  That is what I was referring to."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490363419, "post_id": 42990101, "comment_id": 73091920, "body": "Yes, I was trying to be precise (and not doing a good job of it). The <i>Rust compiler</i> does not determine which toolchain to use. Rustup will pick a toolchain-specific version of the compiler to install for you if you don&#39;t specify, but tools built around the compiler aren&#39;t Rust <i>per se</i>. Even if you can&#39;t provide a verifiable example, you can update with additional information and the community can try and help as best we can. For example, if you&#39;ve compiled your C code to an object with the MinGW toolchain, that would be a key factor."}], "answers": [{"tags": [], "owner": {"reputation": 8906, "user_id": 105389, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/4b9e888299f2bbb84b996583df056a8c?s=128&d=identicon&r=PG", "display_name": "Michael Tiller", "link": "https://stackoverflow.com/users/105389/michael-tiller"}, "is_accepted": false, "score": 0, "last_activity_date": 1490381732, "last_edit_date": 1490381732, "creation_date": 1490380242, "answer_id": 43006769, "question_id": 42990101, "link": "https://stackoverflow.com/questions/42990101/cannot-compile-rust-code-that-calls-c-code-which-calls-vsnprintf-on-windows/43006769#43006769", "title": "Cannot compile Rust code that calls C code which calls vsnprintf on Windows", "body": "<p>My machine had MSVC, MinGW64 and MinGW installed on it.  Given the error messages, I fell into the trap of thinking that it was related to <code>rustc</code> invoking the wrong compiler/linker because of issues in my path or its own assumptions about the tools on my machine.</p>\n\n<p>It turns out the build script I was using was calling <code>gcc</code> and <code>ar</code> directly, which invoked the MinGW commands.  I thought Rust had \"wrappers\" for these commands so they behaved the same on all platforms (hence my lack of concern about these).</p>\n\n<p>When I read the <a href=\"http://doc.crates.io/build-script.html\" rel=\"nofollow noreferrer\">documentation on build scripts</a> more closely, I see that they repeat the same (non-portable) approach, but then talk about the lack of cross-platform support for that approach and then show a much simpler and more portable way to do this.</p>\n\n<p>Bottom line, use:</p>\n\n<pre><code>[build-dependencies]\ngcc = \"0.3\"\n</code></pre>\n\n<p>...and read the build script documentation carefully. Now everything compiles fine on both macOS and Windows.</p>\n"}], "owner": {"reputation": 8906, "user_id": 105389, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/4b9e888299f2bbb84b996583df056a8c?s=128&d=identicon&r=PG", "display_name": "Michael Tiller", "link": "https://stackoverflow.com/users/105389/michael-tiller"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 242, "favorite_count": 1, "answer_count": 1, "score": 0, "last_activity_date": 1490381732, "creation_date": 1490320557, "last_edit_date": 1490323083, "question_id": 42990101, "link": "https://stackoverflow.com/questions/42990101/cannot-compile-rust-code-that-calls-c-code-which-calls-vsnprintf-on-windows", "title": "Cannot compile Rust code that calls C code which calls vsnprintf on Windows", "body": "<p>I'm trying to compile Rust code on Windows that calls <code>vsnprintf</code>.  My C code looks like this:</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>#include &lt;stdarg.h&gt;\n#include &lt;stdio.h&gt;\n\n// A static buffer for storing any formatted messages.\nstatic char buffer[4096];\n\nvoid rust_logger(const char *fmt, ...) {\n    // Reconstruct the variable arguments as a va_list.  This is necessary so we \n    // can chain together a call to vsnprintf.\n    va_list varargs;\n    va_start(varargs, fmt);\n\n    // Write the formatted string to our target (static) buffer.\n    vsnprintf(buffer, sizeof(buffer)-1, fmt, varargs);\n\n    // Call Rust back with final string\n    ...\n\n    // Clean up processing of variable arguments\n    va_end(varargs);\n}\n</code></pre>\n\n<p>This works fine on macOS (and I would guess under Linux, although I have not tried it).  But on Windows, I'm having problems.  The error I get is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code> \"C:\\\\Program Files (x86)\\\\Microsoft Visual Studio 14.0\\\\VC\\\\bin\\\\amd64\\\\link.exe\" \"/LIBPATH:C:\\\\Program Files (x86)\\\\Microsoft Visual Studio 14.0\\\\VC\\\\lib\\\\amd64\" \"/LIBPATH:C:\\\\Program Files (x86)\\\\Windows Kits\\\\10\\\\lib\\\\10.0.10240.0\\\\ucrt\\\\x64\" \"/LIBPATH:C:\\\\Program Files (x86)\\\\Windows Kits\\\\8.1\\\\lib\\\\winv6.3\\\\um\\\\x64\" \"/NOLOGO\" \"/NXCOMPAT\" \"/LIBPATH:C:\\\\Users\\\\mtiller\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\" \"C:\\\\Users\\\\mtiller\\\\Source\\\\rust-fmu\\\\target\\\\debug\\\\deps\\\\rust_fmu-dd167e2c1e3583f1.0.o\" \"/OUT:C:\\\\Users\\\\mtiller\\\\Source\\\\rust-fmu\\\\target\\\\debug\\\\deps\\\\rust_fmu-dd167e2c1e3583f1.exe\" \"/OPT:REF,NOICF\" \"/DEBUG\" \"/LIBPATH:C:\\\\Users\\\\mtiller\\\\Source\\\\rust-fmu\\\\target\\\\debug\\\\deps\" \"/LIBPATH:C:\\\\Users\\\\mtiller\\\\Source\\\\rust-fmu\\\\target\\\\debug\\\\build\\\\rust-fmu-e434516f4288772d\\\\out\" \"/LIBPATH:C:\\\\Users\\\\mtiller\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\" \"logger.lib\" \"C:\\\\Users\\\\mtiller\\\\Source\\\\rust-fmu\\\\target\\\\debug\\\\deps\\\\liblibloading-c41a2f71457b39f3.rlib\" \"C:\\\\Users\\\\mtiller\\\\Source\\\\rust-fmu\\\\target\\\\debug\\\\deps\\\\liblibc-5dc7b85e748840b4.rlib\" \"C:\\\\Users\\\\mtiller\\\\Source\\\\rust-fmu\\\\target\\\\debug\\\\deps\\\\libkernel32-835ed4d4f4dc2d3e.rlib\" \"C:\\\\Users\\\\mtiller\\\\Source\\\\rust-fmu\\\\target\\\\debug\\\\deps\\\\libwinapi-a5898d7aceb63fac.rlib\" \"C:\\\\Users\\\\mtiller\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\\\\libstd-90fbcc8c07b4a644.rlib\" \"C:\\\\Users\\\\mtiller\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\\\\libpanic_unwind-d2e7baf2c0a36eaf.rlib\" \"C:\\\\Users\\\\mtiller\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\\\\libunwind-112baa0117a60076.rlib\" \"C:\\\\Users\\\\mtiller\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\\\\liblibc-ad15457034b2bf37.rlib\" \"C:\\\\Users\\\\mtiller\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\\\\librand-fa1852079e0fefd1.rlib\" \"C:\\\\Users\\\\mtiller\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\\\\libcollections-27e4c8cc19e6faac.rlib\" \"C:\\\\Users\\\\mtiller\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\\\\liballoc-588bb0bd8c9dd8ca.rlib\" \"C:\\\\Users\\\\mtiller\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\\\\liballoc_system-dbfe715efb71d408.rlib\" \"C:\\\\Users\\\\mtiller\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\\\\libstd_unicode-a2e15800b52a7a60.rlib\" \"C:\\\\Users\\\\mtiller\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\\\\libcore-b2880fdfb9b2b596.rlib\" \"C:\\\\Users\\\\mtiller\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\\\\libcompiler_builtins-9d27746f5ba8488f.rlib\" \"kernel32.lib\" \"advapi32.lib\" \"ws2_32.lib\" \"userenv.lib\" \"shell32.lib\" \"msvcrt.lib\"\n note: logger.lib(logger.o) : error LNK2019: unresolved external symbol __ms_vsnprintf referenced in function vsnprintf\n          C:\\Users\\mtiller\\Source\\rust-fmu\\target\\debug\\deps\\rust_fmu-dd167e2c1e3583f1.exe : fatal error LNK1120: 1 unresolved externals\n</code></pre>\n\n<p>From my research, it seems like this has something to do with some mismatch between MinGW and MinGW64, but when I look at the output of the Rust build, it seems to be using Visual Studio 14.0.</p>\n\n<p>I'm totally confused.  I don't quite know how Rust determines which toolchain to use.  I used the <code>rustup-init.exe</code> installer which I assumed would \"do the right thing\", but it seems confused here (or is it just me).</p>\n\n<p>Any suggestions on how to get my toolchain aligned?  One other constraint is that I'm using the <code>libloading</code> crate because my program is loading DLLs. I want that part to work as well, but haven't gotten to test that under Windows yet because of build issues.</p>\n\n<p>P.S. - I need the <code>v</code> version of <code>vsnprintf</code> because I'm getting passed varargs and I need a way to actually process them.</p>\n"}, {"tags": ["hashmap", "rust"], "comments": [{"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 3, "creation_date": 1490292870, "post_id": 42983662, "comment_id": 73059754, "body": "Since tuples work so well in rust, why not use <code>HashMap&lt;(i32,i32),i32&gt;</code>?"}, {"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 0, "creation_date": 1490295853, "post_id": 42983662, "comment_id": 73061423, "body": "After your edit, you can still use <code>HashMap&lt;(example, example),i32&gt;</code>. Do you really ever need to do a lookup with only the first <code>example</code>? If not, you should be using tuples..."}, {"owner": {"reputation": 2103, "user_id": 1865694, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bP5UU.jpg?s=128&g=1", "display_name": "Alex Zywicki", "link": "https://stackoverflow.com/users/1865694/alex-zywicki"}, "reply_to_user": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 0, "creation_date": 1490296336, "post_id": 42983662, "comment_id": 73061669, "body": "@Alec is the argument that using tuples would provide a more compact representation? or faster lookup? both? what is the rationale? I am not opposed to the idea, I just want to understand the reasoning rather than just the solution."}, {"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 1, "creation_date": 1490297329, "post_id": 42983662, "comment_id": 73062235, "body": "The argument is more about the semantics. Incidentally, the representation <i>will</i> be more compact and faster. There will be no overhead for extra <code>HashMap</code>s each allocating more memory than they need and only one lookup in a table is needed instead of two."}], "answers": [{"comments": [{"owner": {"reputation": 2103, "user_id": 1865694, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bP5UU.jpg?s=128&g=1", "display_name": "Alex Zywicki", "link": "https://stackoverflow.com/users/1865694/alex-zywicki"}, "edited": false, "score": 0, "creation_date": 1490293328, "post_id": 42983988, "comment_id": 73060032, "body": "What would the lookup syntax be?"}, {"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "reply_to_user": {"reputation": 2103, "user_id": 1865694, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bP5UU.jpg?s=128&g=1", "display_name": "Alex Zywicki", "link": "https://stackoverflow.com/users/1865694/alex-zywicki"}, "edited": false, "score": 1, "creation_date": 1490293697, "post_id": 42983988, "comment_id": 73060265, "body": "@AlexZywicki <code>map.get(&amp;(0,1))</code>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490298964, "post_id": 42983988, "comment_id": 73063237, "body": "There&#39;s no reason to specify the type of the <code>HashMap</code>, type inference will handle it."}, {"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1490299166, "post_id": 42983988, "comment_id": 73063359, "body": "@Shepmaster Oh sure. But, as someone who has worked for most of my programming life in languages that support type inference (Haskell and Scala), I still like to add annotations at definition sites where the type isn&#39;t <i>immediately</i> obvious. Future-me ends up being happier with present-me."}, {"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "reply_to_user": {"reputation": 2103, "user_id": 1865694, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bP5UU.jpg?s=128&g=1", "display_name": "Alex Zywicki", "link": "https://stackoverflow.com/users/1865694/alex-zywicki"}, "edited": false, "score": 0, "creation_date": 1490305759, "post_id": 42983988, "comment_id": 73066928, "body": "@AlexZywicki Note that if you want to <i>unsafely</i> get a value from the map, you can do this too: <code>map[&amp;(0,1)]</code>."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 2, "creation_date": 1490307764, "post_id": 42983988, "comment_id": 73067791, "body": "@Alec The word &quot;unsafe&quot; has a specific meaning in Rust. <code>map[&amp;(0, 1)]</code> is safe (in the Rust sense), but it can panic."}], "tags": [], "owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "is_accepted": true, "score": 9, "last_activity_date": 1490298940, "last_edit_date": 1495535449, "creation_date": 1490293193, "answer_id": 42983988, "question_id": 42983662, "link": "https://stackoverflow.com/questions/42983662/how-do-i-concisely-fill-a-2d-hashmap/42983988#42983988", "title": "How do I concisely fill a 2D HashMap?", "body": "<p>In Rust, tuples work really well. You probably should just use <code>HashMap&lt;(i32, i32), i32&gt;</code>. Then, you end up with something very close to the C++ code.</p>\n\n<pre><code>let mut map: HashMap&lt;(i32, i32), i32&gt; = HashMap::new();\nsub1.insert((0, 0), 0);\nsub1.insert((0, 1), 1);\n// ...\n</code></pre>\n\n<p>Naturally, it would be nice if we had a macro like <code>vec!</code> for this, and <a href=\"https://github.com/rust-lang/rfcs/issues/542\" rel=\"nofollow noreferrer\">an RFC is in the works</a>. Using the macro from <a href=\"https://stackoverflow.com/questions/28392008/more-concise-hashmap-initialization\">this answer</a>, you can write:</p>\n\n<pre><code>let map = hashmap![(0,0) =&gt; 0, (0,1) =&gt; 1, ...];\n</code></pre>\n\n<p>Nothing changes if you are using an enum - just make sure you derive <code>Eq</code>, <code>PartialEq</code>, and <code>Hash</code> for it.</p>\n\n<pre><code>let mut sub1: HashMap&lt;(Example, Example), i32&gt; = HashMap::new();\nsub1.insert((Example::Variant1, Example::Variant1), 0);\nsub1.insert((Example::Variant1, Example::Variant2), 1);\n// ...\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 7, "last_activity_date": 1490296619, "last_edit_date": 1495542897, "creation_date": 1490293737, "answer_id": 42984177, "question_id": 42983662, "link": "https://stackoverflow.com/questions/42983662/how-do-i-concisely-fill-a-2d-hashmap/42984177#42984177", "title": "How do I concisely fill a 2D HashMap?", "body": "<p>Use the <a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.entry\" rel=\"nofollow noreferrer\"><code>entry</code></a> API:</p>\n\n<pre><code>use std::collections::HashMap;\n\nfn main() {\n    let mut map = HashMap::new();\n    map.entry(0).or_insert_with(HashMap::new).insert(0, 0);\n    map.entry(0).or_insert_with(HashMap::new).insert(1, 1);\n\n    println!(\"{:?}\", map);\n    println!(\"{}\", map[&amp;0][&amp;1]);\n}\n</code></pre>\n\n<p>Unlike C++, constructing the nested <code>HashMap</code> is not implicit - you have to be very clear that you wish to allow a new <code>HashMap</code> to be created. </p>\n\n<hr>\n\n<p>Unlike <a href=\"https://stackoverflow.com/a/42983988/1554230\">the other answer</a>, this preserves the original data structure and ability to get a subset of the overall map based on just the initial key:</p>\n\n<pre><code>println!(\"{:?}\", map.get(&amp;0));\nprintln!(\"{:?}\", map.get(&amp;0).and_then(|m| m.get(&amp;1)));\n</code></pre>\n\n<p>If you <strong>always</strong> provide both numeric indices, then a tuple is a much better solution as it more accurately models the problem \u2014 there's only one true key, it just happens to have two components. It also is likely to have better data locality as there's one big slab of memory, as opposed to the extra level of pointer-chasing a hash of hashes would entail.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490312805, "post_id": 42988666, "comment_id": 73069524, "body": "You could implement a wrapper type that does implement <code>IndexMut</code> though?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1490324420, "post_id": 42988666, "comment_id": 73072600, "body": "Actually, maybe not. <a href=\"http://stackoverflow.com/a/30414450/155423\">There&#39;s a reason that <code>HashMap</code> doesn&#39;t implement <code>IndexMut</code></a>, so you can&#39;t really do it. The method is the better choice for now."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490340262, "post_id": 42988666, "comment_id": 73077809, "body": "@Shepmaster Thanks for the hint, I&#39;ll try to experiment with implementing <code>IndexMut::get_mut</code> similar to <code>ensure</code> on the wrapper type. <code>HashMap</code> itself cannot implement the kind of <code>IndexMut</code> presented in the answer because its values do not require the <code>Default</code> trait (nor should they, IMHO - the feature is not worth it). The <code>IndexMut</code> that was previously present and removed would simply <a href=\"https://github.com/rust-lang/rust/pull/23559/files#diff-2315431fee3b24e47693061ba8319e44L928\" rel=\"nofollow noreferrer\"><i>panic</i></a> on a non-existent key, which is definitely not the semantics programmers expect of <code>map[k] = v</code>."}], "tags": [], "owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "is_accepted": false, "score": 2, "last_activity_date": 1490339951, "last_edit_date": 1490339951, "creation_date": 1490310781, "answer_id": 42988666, "question_id": 42983662, "link": "https://stackoverflow.com/questions/42983662/how-do-i-concisely-fill-a-2d-hashmap/42988666#42988666", "title": "How do I concisely fill a 2D HashMap?", "body": "<p>The C++ code snippet owes its brevity to the convenient <code>operator []</code> which automatically default-constructs the value if it is missing in the map. While Rust doesn't do this by default, it's easy enough to tell it to do so, as shown in Shepmaster's answer.</p>\n\n<p>To avoid having to spell out <code>entry(key).or_insert_with(ValueType::new)</code>, it is possible to <em>add</em> the method equivalent to C++'s <code>operator []</code> to Rust's <code>HashMap</code>. After all, Rust has the necessary tools - it supports adding methods to existing types using traits, and it has a trait roughly equivalent to C++'s default constructor.</p>\n\n<p>The C++ expressions:</p>\n\n<pre><code>map[0][0] = 0;\nmap[0][1] = 1;\n</code></pre>\n\n<p>would be written as the following Rust, using a method that returns a reference in place of <code>operator []</code>:</p>\n\n<pre><code>*map.ensure(0).ensure(0) = 0;\n*map.ensure(0).ensure(1) = 1;\n</code></pre>\n\n<p><code>ensure</code> would be declared in a trait which must be imported by code that wants to get the method:</p>\n\n<pre><code>use std::collections::HashMap;\nuse std::hash::Hash;\n\ntrait MapDefault&lt;K, V: Default&gt; {\n    fn ensure(&amp;mut self, key: K) -&gt; &amp;mut V;\n}\n</code></pre>\n\n<p>...and defined like this:</p>\n\n<pre><code>impl&lt;K: Eq + Hash, V: Default&gt; MapDefault&lt;K, V&gt; for HashMap&lt;K, V&gt; {\n    fn ensure(&amp;mut self, key: K) -&gt; &amp;mut V {\n        self.entry(key).or_insert_with(V::default)\n    }\n}\n</code></pre>\n\n<p>It would be nice to be able to define <code>IndexMut</code> for <code>HashMap</code>, which would shorten the expression to <code>*map[0][0] = 0</code>, which is almost exactly like the C++ original, but unfortunately Rust doesn't allow implementing operators for types from other modules.</p>\n"}], "owner": {"reputation": 2103, "user_id": 1865694, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bP5UU.jpg?s=128&g=1", "display_name": "Alex Zywicki", "link": "https://stackoverflow.com/users/1865694/alex-zywicki"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1107, "favorite_count": 0, "accepted_answer_id": 42983988, "answer_count": 3, "score": 7, "last_activity_date": 1490339951, "creation_date": 1490292152, "last_edit_date": 1490296830, "question_id": 42983662, "link": "https://stackoverflow.com/questions/42983662/how-do-i-concisely-fill-a-2d-hashmap", "title": "How do I concisely fill a 2D HashMap?", "body": "<p>Is there a simple way to fill a 2 dimensional <code>HashMap</code>?  In C++ I could do something along the lines of:</p>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>std::unordered_map&lt;int,std::unordered_map&lt;int,int&gt;&gt; 2dmap;\n//...\n2dmap[0][0] = 0;\n2dmap[0][1] = 1;\n//...\n</code></pre>\n\n<p>In my Rust project I am trying to fill a similar map:</p>\n\n<pre><code>let mut map: HashMap&lt;i32, HashMap&lt;i32, i32&gt;&gt; = HashMap::new();\n//...fill the hash map here.\n</code></pre>\n\n<p>The only way that I can think to do this would be to build each sub map then move them into the super map, something like this:</p>\n\n<pre><code>let mut sub1: HashMap&lt;i32, i32&gt; = HashMap::new();\nsub1.insert(0, 0);\nsub1.insert(1, 1);\nlet mut map: HashMap&lt;i32, HashMap&lt;i32, i32&gt;&gt;::new();\nmap.insert(0, sub1);\n</code></pre>\n\n<p>Is there a more concise way to do this?</p>\n\n<p>The above code is a simplification of my actual use case which uses an enum as the index of the <code>HashMap</code>:</p>\n\n<pre><code>enum Example {\n    Variant1,\n    Variant2,\n    //...\n}\n</code></pre>\n\n<p>None of the variants hold a value. I am using this syntax for the lookup from my <code>HashMap</code>:</p>\n\n<pre><code>let value = map[Example::Variant1][Example::Variant2];\n</code></pre>\n"}, {"tags": ["exception-handling", "rust", "try-catch"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1490283204, "post_id": 42980104, "comment_id": 73053034, "body": "Actually, only the question mark operator is in the language right now. That link merely points to an RFC."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1490284389, "post_id": 42980104, "comment_id": 73054007, "body": "Chances are good that most people don&#39;t want to use <code>catch</code> anyway. It&#39;s unlikely to be a commonly-used thing, in my opinion."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1490292965, "post_id": 42980104, "comment_id": 73059809, "body": "I would suggest that you accept Alec&#39;s answer instead of mine: explaining why the error message is cool and all, but explaining how to actually use <code>catch</code> is probably more useful :) No pressure though, and you are free to accept any answer you want to."}, {"owner": {"reputation": 517, "user_id": 2692494, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ed4b0aaeaa9f87c9aae2ca0f20a88a33?s=128&d=identicon&r=PG&f=1", "display_name": "tav", "link": "https://stackoverflow.com/users/2692494/tav"}, "edited": false, "score": 0, "creation_date": 1507440061, "post_id": 42980104, "comment_id": 80205725, "body": "This is a problem with Rust compiler as it fails to output correct error message."}], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 5, "last_activity_date": 1490292889, "last_edit_date": 1490292889, "creation_date": 1490283211, "answer_id": 42980563, "question_id": 42980104, "link": "https://stackoverflow.com/questions/42980104/how-to-use-and-catch-in-rust/42980563#42980563", "title": "How to use ? and catch in Rust?", "body": "<p><strong>TL;DR: The RFC is accepted, but your syntax is slightly off (unfortunately) and the feature is still gated.</strong></p>\n\n<p><em>See Alec's excellent answer on how to actually use <code>catch</code>.</em></p>\n\n<hr>\n\n<p>I encourage you to read the <em>full</em> error log:</p>\n\n<blockquote>\n<pre><code>error: expected identifier, found `1`\n --&gt; &lt;anon&gt;:2:21\n  |\n2 |     let x = catch { 1 };\n  |                     ^\n\nerror[E0422]: cannot find struct, variant or union type `catch` in this scope\n --&gt; &lt;anon&gt;:2:13\n  |\n2 |     let x = catch { 1 };\n  |             ^^^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n</code></pre>\n</blockquote>\n\n<p>The clue is in the second error message:</p>\n\n<blockquote>\n  <p>cannot find struct, variant or union type <code>catch</code> in this scope</p>\n</blockquote>\n\n<p>which really lets us know that <code>catch</code> is not recognized as a keyword by the compiler.</p>\n\n<p>Since <code>catch</code> looks like any regular word, what happens is that the compiler attempts to parse this as building a <code>struct</code> or <code>enum</code>. Indeed, the syntax for building a <code>struct</code> or <code>enum</code> is:</p>\n\n<pre><code>struct X { name: i32 }\n\nlet x = X { name: 1 };\n</code></pre>\n\n<p>Therefore, the compiler sees <code>&lt;identifier&gt; {</code> and expects it to be followed by a list of <code>&lt;identifier&gt;: &lt;expression&gt;</code>. It reads <code>1</code>, which is not an identifier, and reports the error that <code>1</code> is not an identifier.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 6, "creation_date": 1490288110, "post_id": 42981557, "comment_id": 73056747, "body": "<i>when 2.0 comes around</i> \u2014 there are no plans for a Rust 2.0, and one might even say there are <i>anti-plans</i> \u2014 no one is excited to break backwards compatibility due to the reluctance to upgrade in many of the domains that Rust targets."}, {"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 9, "creation_date": 1490288348, "post_id": 42981557, "comment_id": 73056911, "body": "@Shepmaster I hope you are wrong. :) TBH, for a lot of these changes, very little code in the wild actually breaks - the problem is that one can imagine code that <i>could</i> break. Making <code>union</code> a keyword would probably be a very good idea in the long run - but it should be a very slow process. First come the warnings &quot;<code>union</code> will become a keyword, don&#39;t use it as a variable&quot;, then an error you can disable with a flag, then finally a hard error. Otherwise, Rust&#39;s grammar is going to go the same way C++&#39;s did."}, {"owner": {"reputation": 553, "user_id": 395763, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/54f5eda87ee0c28ba55a1523c1c07689?s=128&d=identicon&r=PG", "display_name": "avl_sweden", "link": "https://stackoverflow.com/users/395763/avl-sweden"}, "edited": false, "score": 2, "creation_date": 1523730440, "post_id": 42981557, "comment_id": 86684672, "body": "Since the previous comments were made, work in introducing a Rust &quot;2018 Edition&quot; has happened, and new keywords are back on the table!"}], "tags": [], "owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "is_accepted": false, "score": 6, "last_activity_date": 1490288183, "last_edit_date": 1490288183, "creation_date": 1490285839, "answer_id": 42981557, "question_id": 42980104, "link": "https://stackoverflow.com/questions/42980104/how-to-use-and-catch-in-rust/42981557#42981557", "title": "How to use ? and catch in Rust?", "body": "<p>This is going to sound very dumb, because it kind of is. You need to have</p>\n\n<pre><code>#![feature(catch_expr)]\n\nfn main() {\n    let x = do catch {\n        1\n    };\n}\n</code></pre>\n\n<p>Basically, <code>catch</code>, like <code>default</code> and <code>union</code>, cannot be made a keyword without breaking backwards compatibility. Since Rust has tried to guarantee that any code on 1.x will still work on 1.y, introducing <code>default</code>, <code>union</code> and now <code>catch</code> into the grammar has been all about figuring out the conflicts. For <code>union</code> and <code>default</code>, there are none - identifiers are never expected in those positions.</p>\n\n<p>For <code>catch</code>, <code>catch { 1 }</code> can also be interpreted as a struct literal. Unless you require <code>do</code> (a reserved keyword) occur before <code>catch</code> - then there is no ambiguity. Yes, this is ugly, and everyone knows it.</p>\n\n<p>Hopefully these nightmares go away when 2.0 comes around and we can break backwards compatibility. Quoted from the <a href=\"https://internals.rust-lang.org/t/grammatical-ambiguity-around-catch-blocks/4807\" rel=\"nofollow noreferrer\">rust-internals discussion around the grammar woes of <code>catch</code></a>:</p>\n\n<blockquote>\n  <p>There's a growing list of other syntax we would ultimately like to repurpose in this way, but we generally avoid breaking the ability to run code that worked on 1.x on 1.y where y > x except in cases where the code was exploiting a compiler bug or was just a terrifically rare construction. Our stability guarantees demand we wait until 2.0 for most of these.</p>\n</blockquote>\n"}], "owner": {"reputation": 11606, "user_id": 1002430, "user_type": "registered", "accept_rate": 53, "profile_image": "https://i.stack.imgur.com/ufy7U.png?s=128&g=1", "display_name": "Ana", "link": "https://stackoverflow.com/users/1002430/ana"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5351, "favorite_count": 1, "accepted_answer_id": 42980563, "answer_count": 2, "score": 1, "last_activity_date": 1490292889, "creation_date": 1490282134, "last_edit_date": 1490283424, "question_id": 42980104, "link": "https://stackoverflow.com/questions/42980104/how-to-use-and-catch-in-rust", "title": "How to use ? and catch in Rust?", "body": "<p>It seems that <a href=\"https://www.reddit.com/r/rust/comments/44chyr/the_traitbased_exceptions_rfc_has_been_accepted/\" rel=\"nofollow noreferrer\"><code>?</code> and <code>catch</code> have been accepted into Rust</a>, but I am not able to use it properly:</p>\n\n<pre><code>let x = catch {\n    1\n}\n</code></pre>\n\n<p>I think this should give me <code>Ok(1)</code>. Instead, I get the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: expected identifier, found `1`\n  --&gt; src/main.rs:15:9\n   |\n15 |         1\n   |         ^\n</code></pre>\n\n<p>Is this syntax not yet supported in Rust, or is there a problem with my code?</p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 2959, "user_id": 5903309, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/665cdb14fb46d20c11a176c92e6ed663?s=128&d=identicon&r=PG", "display_name": "Jan Nils Ferner", "link": "https://stackoverflow.com/users/5903309/jan-nils-ferner"}, "edited": false, "score": 0, "creation_date": 1499413317, "post_id": 42979096, "comment_id": 76905226, "body": "Sounds a bit like an <a href=\"https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem\">XY Problem</a>. What exactly are you trying to achieve with this?"}, {"owner": {"reputation": 81, "user_id": 7757366, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8e67706157d94e2df90b4de9fc2e68e4?s=128&d=identicon&r=PG", "display_name": "Christian Kauhaus", "link": "https://stackoverflow.com/users/7757366/christian-kauhaus"}, "reply_to_user": {"reputation": 2959, "user_id": 5903309, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/665cdb14fb46d20c11a176c92e6ed663?s=128&d=identicon&r=PG", "display_name": "Jan Nils Ferner", "link": "https://stackoverflow.com/users/5903309/jan-nils-ferner"}, "edited": false, "score": 0, "creation_date": 1499863865, "post_id": 42979096, "comment_id": 77089672, "body": "My concrete use case is to create a Cargo.lock that works with a specific crates.io snapshot in NixOS&#39; Rust infrastructure."}, {"owner": {"reputation": 2959, "user_id": 5903309, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/665cdb14fb46d20c11a176c92e6ed663?s=128&d=identicon&r=PG", "display_name": "Jan Nils Ferner", "link": "https://stackoverflow.com/users/5903309/jan-nils-ferner"}, "edited": false, "score": 0, "creation_date": 1499954075, "post_id": 42979096, "comment_id": 77138018, "body": "I get that, but why does it have to be a snapshot? Why can&#39;t it be live?"}], "answers": [{"tags": [], "owner": {"reputation": 206, "user_id": 8657995, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d6fc01302442a64f4627f579a81ca71e?s=128&d=identicon&r=PG&f=1", "display_name": "Ben Stern", "link": "https://stackoverflow.com/users/8657995/ben-stern"}, "is_accepted": false, "score": 1, "last_activity_date": 1517186791, "last_edit_date": 1592644375, "creation_date": 1517182585, "answer_id": 48492549, "question_id": 42979096, "link": "https://stackoverflow.com/questions/42979096/how-to-generate-cargo-lock-based-on-last-months-crates-io/48492549#48492549", "title": "How to generate Cargo.lock based on last month&#39;s crates.io?", "body": "<p>Since you say you've already tried cloning the index, I'll assume you still have it lying around.  For the benefit of other readers, the repository appears to be maintained in Git and is available at <a href=\"https://github.com/rust-lang/crates.io-index\" rel=\"nofollow noreferrer\">https://github.com/rust-lang/crates.io-index</a>.</p>\n<p>You'll need to tell <code>cargo</code> to run with <code>--frozen</code> so that it doesn't touch the network, q.v. the <a href=\"https://doc.rust-lang.org/cargo/faq.html\" rel=\"nofollow noreferrer\" title=\"Cargo FAQ\">Cargo FAQ</a>, and it will blow up if it thinks it needs to.  If it has already downloaded stuff, you'll need to <code>cargo clean</code> too, or otherwise nuke the cache.</p>\n<p>If you don't already all of the packages you need in the checkout, you'll also need to download the specific versions you're interested in.  <a href=\"https://gmjosack.github.io/posts/dissecting-cratesio-minimum-mirror/\" rel=\"nofollow noreferrer\">Dissecting Crates.io: Bare Minimum Mirror</a> has an explanation, which I'll summarize here in case the link blows up.</p>\n<blockquote>\n<p><code>config.json</code> in the root of the Crates repo has the URLs for downloading packages, which are officially considered unstable, but works right now.</p>\n<p>The example from the <code>libc</code> crate used by the &quot;gmjosack&quot; shows a path of <code>/api/v1/crates/libc/0.1.10/download</code> to download it, based upon the <code>dl</code> key of <code>https://crates.io/api/v1/crates</code> in <code>config.json</code> and the version available at the time of the post.</p>\n</blockquote>\n<p>You'll probably need to script the downloads in order to build up your mirror.  See also: <a href=\"https://stackoverflow.com/questions/45304541/downloading-rust-crates-using-a-web-browser\">Downloading Rust crates using a web browser</a> on stackoverflow.</p>\n"}], "owner": {"reputation": 81, "user_id": 7757366, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8e67706157d94e2df90b4de9fc2e68e4?s=128&d=identicon&r=PG", "display_name": "Christian Kauhaus", "link": "https://stackoverflow.com/users/7757366/christian-kauhaus"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 490, "favorite_count": 1, "answer_count": 1, "score": 8, "last_activity_date": 1517186791, "creation_date": 1490279623, "last_edit_date": 1490280997, "question_id": 42979096, "link": "https://stackoverflow.com/questions/42979096/how-to-generate-cargo-lock-based-on-last-months-crates-io", "title": "How to generate Cargo.lock based on last month&#39;s crates.io?", "body": "<p>I want to create a Cargo.lock file in a Rust project from Cargo.toml based on what was available on 22 Feb 2017. I need to make version selection compatible to what would happen on that specific day. (No, don't have a version controlled Cargo.lock around somewhere.)</p>\n\n<p>I tried this to no avail:</p>\n\n<ol>\n<li>Clone the crates.io index into a local directory and check out an older commit that matches the desired date.</li>\n<li><p>Use the following lines in .cargo/config:</p>\n\n<pre><code>[source.mycrates]\nregistry = \"file:///path/to/crates.io-index\"  # contains old checkout\n\n[source.crates-io]\nreplace-with = \"mycrates\"\n</code></pre></li>\n</ol>\n\n<p>Nevertheless, cargo resolves dependencies in Cargo.toml to the newest ones available, not to the newest ones in the specified checkout.</p>\n\n<p>How could I warp Cargo's version selection back in time?</p>\n"}, {"tags": ["annotations", "attributes", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490273701, "post_id": 42976626, "comment_id": 73045230, "body": "Just skip the &quot;an existing function&quot; part of the linked duplicate if needed."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490273894, "post_id": 42976626, "comment_id": 73045385, "body": "You may also be interested in <a href=\"https://doc.rust-lang.org/stable/book/procedural-macros.html\" rel=\"nofollow noreferrer\">the official book section on procedural macros</a> or the normal use case, which is <a href=\"http://stackoverflow.com/q/32626316/155423\">custom derive</a>. <a href=\"https://rocket.rs/\" rel=\"nofollow noreferrer\">Rocket</a> also makes use of custom attributes, so you can look at that implementation."}, {"owner": {"reputation": 488, "user_id": 2904507, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/89fa3cf087339a65c4cc8389134b0252?s=128&d=identicon&r=PG", "display_name": "Gedweb", "link": "https://stackoverflow.com/users/2904507/gedweb"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490275617, "post_id": 42976626, "comment_id": 73046760, "body": "@Shepmaster, nope, custom derive is not the same. I imagined some way like <code>proc_macro</code>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490275950, "post_id": 42976626, "comment_id": 73047020, "body": "I know they aren&#39;t the <i>same</i>, but there&#39;s a lot of information that&#39;s related between the two (taking in an AST, walking it, transforming it, etc.)."}], "owner": {"reputation": 488, "user_id": 2904507, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/89fa3cf087339a65c4cc8389134b0252?s=128&d=identicon&r=PG", "display_name": "Gedweb", "link": "https://stackoverflow.com/users/2904507/gedweb"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 40, "favorite_count": 0, "closed_date": 1490273682, "answer_count": 0, "score": 0, "last_activity_date": 1490273754, "creation_date": 1490273558, "last_edit_date": 1490273754, "question_id": 42976626, "link": "https://stackoverflow.com/questions/42976626/custom-method-tag-in-rust", "closed_reason": "Duplicate", "title": "Custom method tag in Rust", "body": "<p>I am searching for a way to set tags (attributes) on methods in Rust</p>\n\n<p>An example:</p>\n\n<pre><code>struct Subject {\n    state: bool,\n}\n\nimpl Subject {\n    pub fn new() -&gt; Source {\n        Source { state: false }\n    }\n\n    #[subscribe(update, delete)]\n    fn notify(&amp;mut self) {\n        // change state\n        self.state = true;\n    }\n}\n</code></pre>\n\n<p>Something like described in <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1566-proc-macros.md\" rel=\"nofollow noreferrer\">RFC 1566</a>, but I cannot find any example. </p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1490271486, "post_id": 42974412, "comment_id": 73043492, "body": "You are going to hurt yourself by slicing strings like that. See the book on <a href=\"https://doc.rust-lang.org/stable/book/strings.html#slicing\" rel=\"nofollow noreferrer\">slicing strings</a>."}, {"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1490271914, "post_id": 42974412, "comment_id": 73043814, "body": "@E_net4 I read about <code>str</code> slicing before. You mean I will have problem with utf-8? It is not problem in my case, because of I parse old protocol which work with ascii"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490273571, "post_id": 42974412, "comment_id": 73045120, "body": "It really sounds like you are writing a parser. Instead of hand-rolling it all, you may want to look into tools that allow you to write efficient parsers. A popular choice, nom, was specifically created for parsing binary file formats."}, {"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490273872, "post_id": 42974412, "comment_id": 73045364, "body": "@Shepmaster it is not binary protocol, it is old text protocol. Messages are lines, splitted by &#39;/&#39;, like <code>csv</code> for example, but number of field vary depending on the first field."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490273971, "post_id": 42974412, "comment_id": 73045455, "body": "@user1244932 ASCII text <b>is</b> binary data, just a highly restricted subset of it."}], "answers": [{"comments": [{"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1490273175, "post_id": 42976185, "comment_id": 73044796, "body": "In my case, with ascii, I better use <code>str::slice_unchecked</code>, plus in this way it is too much code, if I write something like this for  each &quot;header&quot; check, I will be buried by tons of code."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1490273284, "post_id": 42976185, "comment_id": 73044879, "body": "@user1244932 then parameterize it for <code>T</code> and <code>D</code>?"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1490273437, "post_id": 42976185, "comment_id": 73045009, "body": "@user1244932 On that I impose two recommendations. One of them is to generalize your function for other types of headers (maybe even use macros). The other one is to <i>be specific</i> about your context <i>in</i> the question, otherwise answers will not consider it."}, {"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490273481, "post_id": 42976185, "comment_id": 73045039, "body": "@Shepmaster plus also position of <code>T</code> and <code>D</code> may vary, that&#39;s why I think that check of optional slice can fix code mess."}, {"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1490273686, "post_id": 42976185, "comment_id": 73045219, "body": "@E_net4 Sorry, the idea that data pure ascii was obvious for me, so I not mentioned in my question. I updated question."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1490273713, "post_id": 42976185, "comment_id": 73045238, "body": "The position may vary, you say? <code>let mut code_iter = s.chars().skip(offset);</code>. And if your pattern may vary in size, just <code>take(pattern.len()).collect()</code> to a string and compare. But then again, this is out of the question&#39;s scope."}], "tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": false, "score": 5, "last_activity_date": 1490272415, "creation_date": 1490272415, "answer_id": 42976185, "question_id": 42974412, "link": "https://stackoverflow.com/questions/42974412/get-none-instead-of-a-string-slice-if-an-index-range-is-not-valid/42976185#42976185", "title": "Get None instead of a string slice if an index range is not valid", "body": "<blockquote>\n  <p>get None instead of slice if index range not valid</p>\n</blockquote>\n\n<p>There is no function for that in the standard, that I know of.</p>\n\n<blockquote>\n  <p>I want to check if string starts with \"|&lt;any char&gt;&lt;any char&gt;TD\",</p>\n</blockquote>\n\n<p>But for that goal, I propose a solution that is (in my opinion) more elegant than slicing:</p>\n\n<pre><code>fn is_good(s: &amp;str) -&gt; bool {\n    if !s.starts_with('|') {\n        return false;\n    }\n    let mut td_iter = s.chars().skip(3);\n    (td_iter.next(), td_iter.next()) == (Some('T'), Some('D'))\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=30cbe7748de97814d3584f3582ec1fe6&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">Playground</a>. It is compatible with any UTF-8 string and will ensure that no panics occur from reading code points outside of string/character boundaries.</p>\n"}, {"comments": [{"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1490273605, "post_id": 42976524, "comment_id": 73045156, "body": "Is <code>s.len() &gt; range.start</code> check necessary?  <code>Range</code> not check that <code>start &lt;= end</code> during creation?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1490274137, "post_id": 42976524, "comment_id": 73045577, "body": "@user1244932 Using your local compiler to create a range where the start is greater than the end will answer your question much more quickly."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1490273987, "last_edit_date": 1495541414, "creation_date": 1490273254, "answer_id": 42976524, "question_id": 42974412, "link": "https://stackoverflow.com/questions/42974412/get-none-instead-of-a-string-slice-if-an-index-range-is-not-valid/42976524#42976524", "title": "Get None instead of a string slice if an index range is not valid", "body": "<p>I agree with <a href=\"https://stackoverflow.com/a/42976185/155423\">E_net4's answer</a>, but for posterity, the literal answer to your question is straight-forward:</p>\n\n<pre><code>use std::ops::Range;\n\nfn get_slice(s: &amp;str, range: Range&lt;usize&gt;) -&gt; Option&lt;&amp;str&gt; {\n    if s.len() &gt; range.start &amp;&amp; s.len() &gt; range.end {\n        Some(&amp;s[range])\n    } else {\n        None\n    }\n}\n\nfn main() {\n    println!(\"{:?}\", get_slice(\"\", 0..5));\n    println!(\"{:?}\", get_slice(\"abc\", 0..2));\n    println!(\"{:?}\", get_slice(\"abc\", 2..5));\n    println!(\"{:?}\", get_slice(\"abc\", 1..2));\n}\n</code></pre>\n\n<p>Although I'd avoid using this for string slices and use it only on regular slices, due to the UTF-8 nature of strings.</p>\n"}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 250, "favorite_count": 0, "accepted_answer_id": 42976524, "answer_count": 2, "score": 0, "last_activity_date": 1490274417, "creation_date": 1490267606, "last_edit_date": 1490274417, "question_id": 42974412, "link": "https://stackoverflow.com/questions/42974412/get-none-instead-of-a-string-slice-if-an-index-range-is-not-valid", "title": "Get None instead of a string slice if an index range is not valid", "body": "<p>I want to check if a string starts with <code>\"|&lt;any char&gt;&lt;any char&gt;TD\"</code>. I have already verified that the string only contains 0..9, a-z, A-Z, space, ',' and '*'.</p>\n\n<p>Including the regex crate for such a task is too much overhead, instead I think I need something like</p>\n\n<pre><code>fn get_slice(s: &amp;str, range: Range&lt;usize&gt;) -&gt; Option&lt;&amp;str&gt; {\n    unimplemented!();\n}\n</code></pre>\n\n<p>It can be used like:</p>\n\n<pre><code>let is_good_string: bool = \n  get_slice(s, (0..5)).map_or(false, |v: &amp;str| &amp;v[0..1] == \"|\" &amp;&amp; &amp;v[3..5] == \"TD\");\n</code></pre>\n\n<p>Are there any functions in the standard library similar to my <code>get_slice</code>? Is it possible to solve my task with the help of standard library  functions in some other way?</p>\n"}]