[{"tags": ["multithreading", "rust", "lifetime", "serde-json"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1559778282, "post_id": 56467686, "comment_id": 99530001, "body": "Please attempt harder to produce a <b>minimal</b> example next time. This could be reduced to <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=ebbec9e8692367db593f210c56cc3672\" rel=\"nofollow noreferrer\">this</a>."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1559778468, "post_id": 56468412, "comment_id": 99530028, "body": "<i>This is incompatible with something that is going to be deserialized from an input string</i> \u2014 this is incorrect or at the least imprecise. Please be careful with your wording when answering questions, otherwise people will build up incorrect mental models."}, {"owner": {"reputation": 125, "user_id": 4847426, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/05dfde52ab9c1ac46d8786e76d40b74e?s=128&d=identicon&r=PG&f=1", "display_name": "ggriffiniii", "link": "https://stackoverflow.com/users/4847426/ggriffiniii"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1559828436, "post_id": 56468412, "comment_id": 99548115, "body": "Oh, I must be one of those people with an incorrect mental model. Could you elaborate on what&#39;s incorrect? How&#39;s it possible to deserialize into a &amp;&#39;static str?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1559829448, "post_id": 56468412, "comment_id": 99548763, "body": "<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=2a70ce90441413105af2788bdb1fa34c\" rel=\"nofollow noreferrer\">By starting from a <code>&amp;&#39;static str</code></a>."}, {"owner": {"reputation": 125, "user_id": 4847426, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/05dfde52ab9c1ac46d8786e76d40b74e?s=128&d=identicon&r=PG&f=1", "display_name": "ggriffiniii", "link": "https://stackoverflow.com/users/4847426/ggriffiniii"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1559843609, "post_id": 56468412, "comment_id": 99555840, "body": "Thanks. I had overlooked the case of providing a &amp;&#39;static str as input."}], "tags": [], "owner": {"reputation": 125, "user_id": 4847426, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/05dfde52ab9c1ac46d8786e76d40b74e?s=128&d=identicon&r=PG&f=1", "display_name": "ggriffiniii", "link": "https://stackoverflow.com/users/4847426/ggriffiniii"}, "is_accepted": true, "score": 3, "last_activity_date": 1559778248, "last_edit_date": 1559778248, "creation_date": 1559770948, "answer_id": 56468412, "question_id": 56467686, "link": "https://stackoverflow.com/questions/56467686/using-serde-jsonfrom-str-to-deserialize-into-a-struct-with-a-static-string-h/56468412#56468412", "title": "Using serde_json::from_str to deserialize into a struct with a &amp;&#39;static string has a lifetime error", "body": "<pre class=\"lang-rust prettyprint-override\"><code>struct BridgeResult {\n    result: &amp;'static str,\n    data: Vec&lt;String&gt;,\n}\n</code></pre>\n\n<p><code>BridgeResult</code> is defined to hold a <code>result</code> that is a static string. This is incompatible with something that is going to be deserialized from an input string. You either need result to be an owned <code>String</code> or something that is borrowed from the input.</p>\n\n<p>Try</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct BridgeResult&lt;'a&gt; {\n    result: &amp;'a str,\n    data: Vec&lt;String&gt;,\n}\n</code></pre>\n"}], "owner": {"reputation": 43, "user_id": 10368429, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-l712ssXbPJ4/AAAAAAAAAAI/AAAAAAAAA3U/UZm0MgsKpIg/photo.jpg?sz=128", "display_name": "J. A. Kierstead", "link": "https://stackoverflow.com/users/10368429/j-a-kierstead"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1117, "favorite_count": 0, "accepted_answer_id": 56468412, "answer_count": 1, "score": 4, "last_activity_date": 1559778248, "creation_date": 1559767129, "last_edit_date": 1559778185, "question_id": 56467686, "link": "https://stackoverflow.com/questions/56467686/using-serde-jsonfrom-str-to-deserialize-into-a-struct-with-a-static-string-h", "title": "Using serde_json::from_str to deserialize into a struct with a &amp;&#39;static string has a lifetime error", "body": "<p>I am attempting to test a JSON bridge which I set up for use with Dart, JS and Python UI frameworks. It works fine for those, but when I attempted the same UI/logic split in a Rust program using tui-rs, I get a lifetime error when trying to deserialize a logic thread result on the UI thread.</p>\n\n<p>I understand that using JSON for communication between layers both written in Rust is not the ideal way to do things, but given my goals, I hope it is understandable.</p>\n\n<p>I've tried cloning which worked for things to be serialized and sent from UI to logic but this did not work for deserializing from logic to UI</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::sync::mpsc;\nuse std::sync::mpsc::{Receiver, Sender};\nextern crate serde;\nextern crate serde_json;\n#[macro_use]\nextern crate serde_derive;\nuse serde::{Deserialize, Serialize};\n\n#[macro_export]\nmacro_rules! BridgeResult {\n    ($result:expr, $data:expr) =&gt; {\n        BridgeResult {\n            result: $result,\n            data: vec![$data.to_string()],\n        }\n    };\n}\n\n#[derive(Serialize, Deserialize)]\nstruct BridgeResult {\n    result: &amp;'static str,\n    data: Vec&lt;String&gt;,\n}\n\n#[derive(Serialize, Deserialize)]\nstruct App {\n    state: i64,\n}\n\nimpl Default for App {\n    fn default() -&gt; App {\n        App { state: 0 }\n    }\n}\n\nfn main() {\n    let (to_logic, from_ui) = mpsc::channel();\n    let (to_ui, from_logic) = mpsc::channel();\n\n    ui(to_logic, from_logic);\n    logic(to_ui, from_ui);\n}\n\nfn ui(tx: Sender&lt;(String, String)&gt;, rx: Receiver&lt;(String)&gt;) {\n    let app = App::default();\n\n    let app_string = serde_json::to_string(&amp;app)\n        .expect(\"failed to encode app struct for sending to logic heard\");\n\n    tx.send((\"binary_switch\".to_string(), app_string))\n        .expect(\"failed to send binary_switch call and data to logic thread\");\n    let output_string = rx\n        .recv()\n        .expect(\"failed to get a result from logic's initialize\");\n    let output: BridgeResult = serde_json::from_str(&amp;output_string)\n        .expect(\"failed to decode result from logic's binary_switch\");\n\n    if output.result != \"Ok()\" {\n        panic!(\"init failed due to: \\n {:?}\", output.data);\n    } else {\n        println!(\"{:?}\", output.data);\n    }\n}\n\nfn logic(tx: Sender&lt;(String)&gt;, rx: Receiver&lt;(String, String)&gt;) {\n    loop {\n        let (function, arguments) = rx\n            .recv()\n            .expect(\"failed to receive function and arguments from ui thread\");\n        let result = match function.as_str() {\n            \"binary_switch\" =&gt; binary_switch(&amp;arguments),\n            _ =&gt; {\n                BridgeResult! {\"Err()\", format!(\"cannot find rust function branch matching {}\", function)}\n            }\n        };\n\n        let output = match serde_json::to_string(&amp;result) {\n            Ok(output) =&gt; output,\n            Err(_) =&gt; \"{'result' : 'Err()', 'data': 'failed exit encoding!!!'}\".to_string(),\n        };\n        tx.send(output)\n            .expect(\"failed to send the output back to the ui thread\");\n    }\n}\n\nfn binary_switch(data: &amp;String) -&gt; BridgeResult {\n    #[derive(Deserialize)]\n    struct Arguments {\n        state: i64,\n    }\n\n    let mut arguments: Arguments = match serde_json::from_str(&amp;data) {\n        Ok(data) =&gt; data,\n        Err(err) =&gt; return BridgeResult! {\"Err()\", format!(\"failed to parse arguments\\n, {}\", err)},\n    };\n\n    if arguments.state == 0 {\n        arguments.state += 1;\n    } else {\n        arguments.state -= 1;\n    }\n\n    BridgeResult! {\"Ok()\", arguments.state}\n}\n</code></pre>\n\n<p>I expect this to deserialize the <code>BridgeResult</code> type and use the data field which should have a string 1 in it. In reality I get:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `output_string` does not live long enough\n  --&gt; src/main.rs:55:53\n   |\n55 |     let output: BridgeResult = serde_json::from_str(&amp;output_string)\n   |                                ---------------------^^^^^^^^^^^^^^-\n   |                                |                    |\n   |                                |                    borrowed value does not live long enough\n   |                                argument requires that `output_string` is borrowed for `'static`\n...\n63 | }\n   | - `output_string` dropped here while still borrowed\n</code></pre>\n"}, {"tags": ["rust", "iterator", "ownership"], "comments": [{"owner": {"reputation": 36902, "user_id": 223424, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e97c628a88337b15e76a4690e916a2cd?s=128&d=identicon&r=PG", "display_name": "9000", "link": "https://stackoverflow.com/users/223424/9000"}, "edited": false, "score": 0, "creation_date": 1559765159, "post_id": 56467085, "comment_id": 99526025, "body": "Why are you passing a <code>Box&lt;T&gt;</code> and not just <code>&amp;T</code> in your functions? Do you want multiple references to your iterators? If you want to pass a flow of data between threads / tasks, did you consider <code>std::collections::VecDeque</code> which can be fed from one end and drained from another? I&#39;m just trying to understand your design considerations."}, {"owner": {"reputation": 761, "user_id": 5817114, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/78992637e6f7102dcb25b0d6885108c1?s=128&d=identicon&r=PG&f=1", "display_name": "John Stanford", "link": "https://stackoverflow.com/users/5817114/john-stanford"}, "reply_to_user": {"reputation": 36902, "user_id": 223424, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e97c628a88337b15e76a4690e916a2cd?s=128&d=identicon&r=PG", "display_name": "9000", "link": "https://stackoverflow.com/users/223424/9000"}, "edited": false, "score": 1, "creation_date": 1559766160, "post_id": 56467085, "comment_id": 99526433, "body": "I&#39;m using a <code>Box&lt;T&gt;</code> because it implements <code>Sized</code> and I want to be able to use it in structs.  In the first case, I want to have one master copy of the data in a <code>Vec</code> and create iterators over immutable references to the elements.  I don&#39;t want to use <code>VecDeque</code> because I don&#39;t want to drain it on the receiving end.  I also don&#39;t want to just pass immutable references to the <code>Vec</code> because I also want to be able to stream samples into the consumer without storing them in memory."}], "answers": [{"tags": [], "owner": {"reputation": 125, "user_id": 4847426, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/05dfde52ab9c1ac46d8786e76d40b74e?s=128&d=identicon&r=PG&f=1", "display_name": "ggriffiniii", "link": "https://stackoverflow.com/users/4847426/ggriffiniii"}, "is_accepted": true, "score": 2, "last_activity_date": 1559778622, "last_edit_date": 1559778622, "creation_date": 1559767523, "answer_id": 56467766, "question_id": 56467085, "link": "https://stackoverflow.com/questions/56467085/using-an-iterator-as-an-argument-to-a-function-multiple-times-from-one-vector/56467766#56467766", "title": "Using an iterator as an argument to a function multiple times from one vector", "body": "<p>The current error you're running into is here:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let iterbox:Box&lt;Iterator&lt;Item = usize&gt;&gt; = Box::new(small_data.iter());\n</code></pre>\n\n<p>You're declaring that you want an iterator that returns <code>usize</code> items, but <code>small_data.iter()</code> is an iterator that returns references to <code>usize</code> items (<code>&amp;usize</code>). That why you get the error \"expected reference, found usize\". <code>usize</code> is a small type that's cloneable so you can simply use the <code>.cloned()</code> iterator adapter to provide an iterator that actually returns a usize.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let iterbox: Box&lt;Iterator&lt;Item = usize&gt;&gt; = Box::new(small_data.iter().cloned());\n</code></pre>\n\n<p>Once you're past that hurdle, the next problem is that the iterator returned over <code>small_data</code> contains a reference to the <code>small_data</code>. Since <code>sum_squares_plus</code> is defined to accept a <code>Box&lt;Iterator&lt;Item = usize&gt;&gt;</code>, it's implied in that signature that the <code>Iterator</code> trait object within the box has a <code>'static</code> lifetime. The iterator you're providing does not because it borrows <code>small_data</code>. To fix that you need to adjust the <code>sum_squares_plus</code> definition to</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn sum_squares_plus&lt;'a&gt;(iter: Box&lt;Iterator&lt;Item = usize&gt; + 'a&gt;, x: usize) -&gt; usize\n</code></pre>\n\n<p>Note the <code>'a</code> lifetime annotations. The code should then compile, but unless there's some constraints other than what's clearly defined here, a more idiomatic and efficient approach would be to avoid using trait objects and the associated allocations. The below code should work using static dispatch without any trait objects.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn sum_squares_plus&lt;I: Iterator&lt;Item = usize&gt;&gt;(iter: I, x: usize) -&gt; usize {\n    let mut ans: usize = 0;\n    for i in iter {\n        ans += i * i;\n    }\n    ans + x\n}\n\nfn main() {\n    // Pretend this is an expensive operation that I don't want to repeat five times\n    let small_data: Vec&lt;usize&gt; = (0..10).collect();\n\n    for x in 0..5 {\n        println!(\"{}: {}\", x, sum_squares_plus(small_data.iter().cloned(), x));\n    }\n\n    // 0..100 is more than 0..10 and I'm only using it once,\n    // so I want to 'stream' it instead of storing it all in memory\n    let x = 55;\n    println!(\"{}: {}\", x, sum_squares_plus(Box::new(0..100), x));\n}\n</code></pre>\n"}], "owner": {"reputation": 761, "user_id": 5817114, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/78992637e6f7102dcb25b0d6885108c1?s=128&d=identicon&r=PG&f=1", "display_name": "John Stanford", "link": "https://stackoverflow.com/users/5817114/john-stanford"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 106, "favorite_count": 0, "accepted_answer_id": 56467766, "answer_count": 1, "score": 2, "last_activity_date": 1559778750, "creation_date": 1559764177, "last_edit_date": 1559778750, "question_id": 56467085, "link": "https://stackoverflow.com/questions/56467085/using-an-iterator-as-an-argument-to-a-function-multiple-times-from-one-vector", "title": "Using an iterator as an argument to a function multiple times from one vector", "body": "<p>I'm trying to write some Rust code to decode GPS data from an SDR receiver.  I'm reading samples in from a file and converting the binary data to a series of complex numbers, which is a time-consuming process.  However, there are times when I want to stream samples in without keeping them in memory (e.g. one very large file processed only one way or samples directly from the receiver) and other times when I want to keep the whole data set in memory (e.g. one small file processed in multiple different ways) to avoid repeating the work of parsing the binary file.</p>\n\n<p>Therefore, I want to write functions or structs with iterators to be as general as possible, but I know they aren't sized, so I need to put them in a <code>Box</code>.  I would have expected something like this to work. </p>\n\n<p>This is the simplest example I could come up with to demonstrate the same basic problem.</p>\n\n<pre><code>fn sum_squares_plus(iter: Box&lt;Iterator&lt;Item = usize&gt;&gt;, x: usize) -&gt; usize {\n    let mut ans: usize = 0;\n    for i in iter {\n        ans += i * i;\n    }\n    ans + x\n}\n\nfn main() {\n    // Pretend this is an expensive operation that I don't want to repeat five times\n    let small_data: Vec&lt;usize&gt; = (0..10).collect();\n\n    for x in 0..5 {\n        // Want to iterate over immutable references to the elements of small_data\n        let iterbox: Box&lt;Iterator&lt;Item = usize&gt;&gt; = Box::new(small_data.iter());\n        println!(\"{}: {}\", x, sum_squares_plus(iterbox, x));\n    }\n\n    // 0..100 is more than 0..10 and I'm only using it once,\n    // so I want to 'stream' it instead of storing it all in memory\n    let x = 55;\n    println!(\"{}: {}\", x, sum_squares_plus(Box::new(0..100), x));\n}\n</code></pre>\n\n<p>I've tried several different variants of this, but none seem to work.  In this particular case, I'm getting</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0271]: type mismatch resolving `&lt;std::slice::Iter&lt;'_, usize&gt; as std::iter::Iterator&gt;::Item == usize`\n  --&gt; src/main.rs:15:52\n   |\n15 |         let iterbox: Box&lt;Iterator&lt;Item = usize&gt;&gt; = Box::new(small_data.iter());\n   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found usize\n   |\n   = note: expected type `&amp;usize`\n              found type `usize`\n   = note: required for the cast to the object type `dyn std::iter::Iterator&lt;Item = usize&gt;`\n</code></pre>\n\n<p>I'm not worried about concurrency and I'd be happy to just get it working sequentially on a single thread, but a concurrent solution would be a nice bonus.</p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1559760869, "post_id": 56466367, "comment_id": 99524249, "body": "<i>the Cargo.toml files look for the library</i> \u2014 no different. <i>the directory tree look like for the library and each application</i> \u2014 no different."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1559762150, "post_id": 56466367, "comment_id": 99524791, "body": "<i>removing rust from the title causes this article to not appear in searches using the keyword rust; that would be bad</i> \u2014 <a href=\"https://meta.stackexchange.com/q/19190/281829\">no it wont</a>"}, {"owner": {"reputation": 1907, "user_id": 995935, "user_type": "registered", "accept_rate": 55, "profile_image": "https://i.stack.imgur.com/uO0in.gif?s=128&g=1", "display_name": "Mutant Bob", "link": "https://stackoverflow.com/users/995935/mutant-bob"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1559762675, "post_id": 56466367, "comment_id": 99524996, "body": "The question I am duplicating did not have any answers to my question, so I added a more complete answer based on what I was able to figure out after the old answer got me partway there.  Also, the question absolutely did not appear in a stackexchange search for &quot;rust cargo mvn install&quot; until I reverted the title."}], "owner": {"reputation": 1907, "user_id": 995935, "user_type": "registered", "accept_rate": 55, "profile_image": "https://i.stack.imgur.com/uO0in.gif?s=128&g=1", "display_name": "Mutant Bob", "link": "https://stackoverflow.com/users/995935/mutant-bob"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 37, "favorite_count": 0, "closed_date": 1559760634, "answer_count": 0, "score": 0, "last_activity_date": 1559762303, "creation_date": 1559760518, "last_edit_date": 1559762303, "question_id": 56466367, "link": "https://stackoverflow.com/questions/56466367/what-is-the-rust-cargo-equivalent-of-mvn-install-for-a-personal-library-not-up", "closed_reason": "Duplicate", "title": "What is the Rust/Cargo equivalent of `mvn install` for a personal library not uploaded to crates.io?", "body": "<p>I would like to take some code that is in one of my Rust apps and put it in a reusable library that can be used by other Rust projects.  I have not yet found a good article focusing on how to do this.  I suspect the individual pieces are there in documentation, but not collected into a coherent narrative.</p>\n\n<p>I know that the code can be put into a module of the project, but I am pretty sure I want to put it into a module <em>outside</em> of the project.  I have found a few articles talking about uploading to crates.io, but that seems deeply inappropriate for code that is either personal, super-niche, or proprietary.</p>\n\n<p>The example that comes to mind is from the Java ecosystem with <code>mvn install</code> which compiles your library and puts a copy in <code>~/.m2/repo/</code> where any of your other multiple source trees can find it and use it.</p>\n\n<p>I expect this to work with multiple independent source trees, each of which would be its own git repository.</p>\n\n<p>What is the Cargo equivalent of this?  How should the Cargo.toml files look for the library and for each application that uses the library?  What would the directory tree look like for the library and each application?</p>\n"}, {"tags": ["sockets", "rust"], "comments": [{"owner": {"reputation": 109324, "user_id": 21926, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f6e61d47f9a6ec0a7a286835e51f3332?s=128&d=identicon&r=PG", "display_name": "Sean Bright", "link": "https://stackoverflow.com/users/21926/sean-bright"}, "edited": false, "score": 1, "creation_date": 1559758182, "post_id": 56465813, "comment_id": 99523102, "body": "<a href=\"https://doc.rust-lang.org/1.6.0/book/patterns.html\" rel=\"nofollow noreferrer\">Patterns</a>"}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 3, "creation_date": 1559758185, "post_id": 56465813, "comment_id": 99523106, "body": "I recommend reading the <a href=\"https://doc.rust-lang.org/book/ch06-02-match.html\" rel=\"nofollow noreferrer\">chapter on <code>match</code> in the book</a>, in particular the subsection &quot;Patterns that Bind to Values&quot;. The variable <code>n</code> is declared and bound in the pattern <code>Ok(n)</code>, similar to <code>err</code> being declared in the pattern <code>Err(err)</code>."}, {"owner": {"reputation": 2953, "user_id": 5133088, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/d0efad94ced5dcd194c0a482cafd4f7b?s=128&d=identicon&r=PG&f=1", "display_name": "Jeroen Heier", "link": "https://stackoverflow.com/users/5133088/jeroen-heier"}, "edited": false, "score": 0, "creation_date": 1559758489, "post_id": 56465813, "comment_id": 99523220, "body": "You need to perform more <a href=\"https://stackoverflow.com/questions/14154753/how-do-i-make-an-http-request-from-rust\">research</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1559759092, "post_id": 56465813, "comment_id": 99523477, "body": "Based on the code you&#39;ve provided, there&#39;s nothing about 20 bytes. Since there&#39;s no link to your original source, we can&#39;t tell you if you&#39;ve transcribed the code incorrectly, there&#39;s information outside of the provided code that would explain it, or the author is wrong."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 0, "last_activity_date": 1559758887, "creation_date": 1559758887, "answer_id": 56466025, "question_id": 56465813, "link": "https://stackoverflow.com/questions/56465813/where-does-a-variable-in-a-match-arm-in-a-loop-come-from/56466025#56466025", "title": "Where does a variable in a match arm in a loop come from?", "body": "<p>I strongly encourage you to read the documentation for the tools you use. In this case, <a href=\"https://doc.rust-lang.org/book/ch06-02-match.html\" rel=\"nofollow noreferrer\">The <code>match</code> Control Flow Operator</a> from <em>The Rust Programming Language</em> explains what you need to know.</p>\n\n<p>From the <a href=\"https://doc.rust-lang.org/book/ch06-02-match.html#patterns-that-bind-to-values\" rel=\"nofollow noreferrer\">Patterns that Bind to Values</a> section:</p>\n\n<blockquote>\n  <p>In the match expression for this code, we add a variable called <code>state</code> to the pattern that matches values of the variant <code>Coin::Quarter</code>. When a <code>Coin::Quarter</code> matches, the <code>state</code> variable will bind to the value of that quarter\u2019s state. Then we can use <code>state</code> in the code for that arm, like so:</p>\n\n<pre><code>fn value_in_cents(coin: Coin) -&gt; u8 {\n    match coin {\n        Coin::Penny =&gt; 1,\n        Coin::Nickel =&gt; 5,\n        Coin::Dime =&gt; 10,\n        Coin::Quarter(state) =&gt; {\n            println!(\"State quarter from {:?}!\", state);\n            25\n        },\n    }\n}\n</code></pre>\n  \n  <p>If we were to call <code>value_in_cents(Coin::Quarter(UsState::Alaska))</code>, <code>coin</code> would be <code>Coin::Quarter(UsState::Alaska)</code>. When we compare that value with each of the match arms, none of them match until we reach <code>Coin::Quarter(state)</code>. At that point, the binding for state will be the value <code>UsState::Alaska</code>. We can then use that binding in the <code>println!</code> expression, thus getting the inner state value out of the <code>Coin</code> enum variant for <code>Quarter</code>.</p>\n</blockquote>\n\n<p>There is <a href=\"https://doc.rust-lang.org/book/ch18-00-patterns.html\" rel=\"nofollow noreferrer\">an entire chapter</a> about the pattern matching syntax available and where it can be used.</p>\n"}, {"tags": [], "owner": {"reputation": 95, "user_id": 11349033, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0b244b721a06e20f7de3b92edd93d76b?s=128&d=identicon&r=PG&f=1", "display_name": "leaustinwile", "link": "https://stackoverflow.com/users/11349033/leaustinwile"}, "is_accepted": false, "score": -1, "last_activity_date": 1559758993, "creation_date": 1559758993, "answer_id": 56466044, "question_id": 56465813, "link": "https://stackoverflow.com/questions/56465813/where-does-a-variable-in-a-match-arm-in-a-loop-come-from/56466044#56466044", "title": "Where does a variable in a match arm in a loop come from?", "body": "<p>Figured it out, this is what's happening:</p>\n\n<p><code>match stream.read(&amp;mut read) {</code></p>\n\n<p>This line is telling the software to pass <code>stream.read(&amp;mut read)</code> to <code>Ok(n)</code> because stream.read returns the number of bytes read. I'm still not sure why they specify 20 bytes at a time as being read. </p>\n"}], "owner": {"reputation": 95, "user_id": 11349033, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0b244b721a06e20f7de3b92edd93d76b?s=128&d=identicon&r=PG&f=1", "display_name": "leaustinwile", "link": "https://stackoverflow.com/users/11349033/leaustinwile"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 89, "favorite_count": 0, "answer_count": 2, "score": -6, "last_activity_date": 1559778068, "creation_date": 1559757896, "last_edit_date": 1559778068, "question_id": 56465813, "link": "https://stackoverflow.com/questions/56465813/where-does-a-variable-in-a-match-arm-in-a-loop-come-from", "title": "Where does a variable in a match arm in a loop come from?", "body": "<p>I am trying to implement an HTTP client in Rust using <a href=\"https://gist.github.com/fortruce/828bcc3499eb291e7e17\" rel=\"nofollow noreferrer\">this as a starting point</a>. I was sent to this link by the rust-lang.org site via one of their rust-by-example suggestions in their <code>TcpStream</code> page. I'm figuring out how to read from a <code>TcpStream</code>. I'm trying to follow this code:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn handle_client(mut stream: TcpStream) {\n    // read 20 bytes at a time from stream echoing back to stream\n    loop {\n        let mut read = [0; 1028];\n        match stream.read(&amp;mut read) {\n            Ok(n) =&gt; {\n                if n == 0 { \n                    // connection was closed\n                    break;\n                }\n                stream.write(&amp;read[0..n]).unwrap();\n            }\n            Err(err) =&gt; {\n                panic!(err);\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>Where does the <code>n</code> variable come from? What exactly is it? The author says it reads 20 bytes at a time; where is this coming from?</p>\n\n<p>I haven't really tried anything yet because I want to understand before I do. </p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 3358, "user_id": 852385, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/5c0eac51aaa99541fb966854b5dcb131?s=128&d=identicon&r=PG", "display_name": "Helin Wang", "link": "https://stackoverflow.com/users/852385/helin-wang"}, "edited": false, "score": 0, "creation_date": 1559753056, "post_id": 56464651, "comment_id": 99521095, "body": "Does Rust converts <code>a = b.clone()</code> to <code>a.clone_from(&amp;b)</code> automatically? If not, what prevents it to do so?"}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "reply_to_user": {"reputation": 3358, "user_id": 852385, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/5c0eac51aaa99541fb966854b5dcb131?s=128&d=identicon&r=PG", "display_name": "Helin Wang", "link": "https://stackoverflow.com/users/852385/helin-wang"}, "edited": false, "score": 4, "creation_date": 1559754083, "post_id": 56464651, "comment_id": 99521488, "body": "No, because <code>Clone</code> isn&#39;t a special trait as far as the compiler is concerned, so the compiler doesn&#39;t know <code>a.clone_from(&amp;b)</code> is semantically equivalent to <code>a = b.clone()</code>."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1559913355, "post_id": 56464651, "comment_id": 99578990, "body": "I would actually say that it&#39;s not equivalent. In <code>a = b.clone()</code> the elements of <code>b</code> are cloned then the elements of <code>a</code> are destructed. In <code>a.clone_from(&amp;b)</code> the elements of <code>a</code> are destructed then the elements of <code>b</code> are cloned. If both destruction and cloning have side effects, then a  difference is observable."}], "tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": true, "score": 5, "last_activity_date": 1559759191, "last_edit_date": 1559759191, "creation_date": 1559752509, "answer_id": 56464651, "question_id": 56464300, "link": "https://stackoverflow.com/questions/56464300/how-can-cloneclone-from-avoid-unnecessary-allocations/56464651#56464651", "title": "How can Clone::clone_from avoid unnecessary allocations?", "body": "<p>Let's take for example two vectors <code>a</code> and <code>b</code>. Each vector has to allocate an internal buffer to store the elements.</p>\n\n<p>Here is what happens for each case:</p>\n\n<ul>\n<li><code>a = b.clone()</code> always executes <code>b.clone()</code>, which creates a brand new vector with its own buffer, then <code>a = brand_new_vector</code> throws away <code>a</code>'s buffer and steals the one from <code>brand_new_vector</code>.</li>\n<li><code>a.clone_from(&amp;b)</code>: If <code>a</code>'s buffer is too small, it will allocate a big enough buffer, but if <code>a</code>'s buffer is already big enough, it will copy each element from <code>b</code> directly to <code>a</code>'s buffer. In the latter case, <code>a</code>'s buffer was recycled and a memory allocation was avoided.</li>\n</ul>\n"}], "owner": {"reputation": 3358, "user_id": 852385, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/5c0eac51aaa99541fb966854b5dcb131?s=128&d=identicon&r=PG", "display_name": "Helin Wang", "link": "https://stackoverflow.com/users/852385/helin-wang"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 77, "favorite_count": 0, "accepted_answer_id": 56464651, "answer_count": 1, "score": 2, "last_activity_date": 1559759191, "creation_date": 1559751107, "last_edit_date": 1592644375, "question_id": 56464300, "link": "https://stackoverflow.com/questions/56464300/how-can-cloneclone-from-avoid-unnecessary-allocations", "title": "How can Clone::clone_from avoid unnecessary allocations?", "body": "<p>The documentation of <a href=\"https://doc.servo.org/std/clone/trait.Clone.html#method.clone_from\" rel=\"nofollow noreferrer\"><code>clone_from</code></a> says:</p>\n<blockquote>\n<p>Performs copy-assignment from source.</p>\n<p><code>a.clone_from(&amp;b)</code> is equivalent to <code>a = b.clone()</code> in functionality, but can be overridden to reuse the resources of a to avoid unnecessary allocations.</p>\n</blockquote>\n<p>Why does <code>clone_from</code> (copy-assignment) avoid unnecessary allocations? What is an example?</p>\n<p>I think this is a well known concept in C++, but I don't have a strong C++ background.</p>\n"}, {"tags": ["rust", "macros"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1559751263, "post_id": 56464251, "comment_id": 99520209, "body": "Your second question is answered by <a href=\"https://stackoverflow.com/q/28163772/155423\">Why and when should be comma used at the end of a block?</a>; third question is answered by <a href=\"https://stackoverflow.com/q/43143327/155423\">How to allow optional trailing commas in macros?</a>"}, {"owner": {"reputation": 79, "user_id": 9201617, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/INMBz.png?s=128&g=1", "display_name": "AntiInsect", "link": "https://stackoverflow.com/users/9201617/antiinsect"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1559751300, "post_id": 56464251, "comment_id": 99520226, "body": "I am so sorry and thanks for telling me that. I will change this now."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1559751523, "post_id": 56464251, "comment_id": 99520349, "body": "See also <a href=\"https://stackoverflow.com/q/53672206/155423\">Why is a trailing comma in a function call not a syntax error?</a>"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1559754208, "last_edit_date": 1559754208, "creation_date": 1559751989, "answer_id": 56464518, "question_id": 56464251, "link": "https://stackoverflow.com/questions/56464251/why-do-we-call-the-vec-macro-using-square-brackets-instead-of-the-parenthesis-it/56464518#56464518", "title": "Why do we call the vec macro using square brackets instead of the parenthesis it is defined with?", "body": "<p>As you note, you can use parenthesis, square brackets, or curly braces to call a macro:</p>\n\n<pre><code>let a = vec!(0, 1, 2);\nlet b = vec![0, 1, 2];\nlet c = vec! { 0, 1, 2 };\n</code></pre>\n\n<p>Macros don't care about which of these syntaxes you use<sup>1</sup>. <strong>Programmers</strong> care about which syntax you use. </p>\n\n<p>Rust's array and slicing syntax uses square brackets and <code>Vec</code>s are highly related to both of these. Using square brackets for constructing a <code>Vec</code> is simply the language convention. Rustfmt will automatically convert calls to <code>vec!</code> into square brackets.</p>\n\n<hr>\n\n<p><strong>1</strong> - There's a small interaction between which brace style you use when invoking a macro and semicolons. A macro used as an <em>item</em> or <em>statement</em> is required to end with a semicolon if it doesn't use curly braces:</p>\n\n<pre><code>macro_rules! dummy {\n    () =&gt; {};\n}\n\n// Not OK\ndummy!()\n\n// OK\ndummy! {} \n\n// OK\ndummy!();\n</code></pre>\n"}], "owner": {"reputation": 79, "user_id": 9201617, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/INMBz.png?s=128&g=1", "display_name": "AntiInsect", "link": "https://stackoverflow.com/users/9201617/antiinsect"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 752, "favorite_count": 0, "accepted_answer_id": 56464518, "answer_count": 1, "score": 5, "last_activity_date": 1559754208, "creation_date": 1559750908, "last_edit_date": 1559751597, "question_id": 56464251, "link": "https://stackoverflow.com/questions/56464251/why-do-we-call-the-vec-macro-using-square-brackets-instead-of-the-parenthesis-it", "title": "Why do we call the vec macro using square brackets instead of the parenthesis it is defined with?", "body": "<p>I am learning Rust macros and am confused about the syntax while using <code>vec</code>. The <a href=\"https://github.com/rust-lang/rust/blob/1.35.0/src/liballoc/macros.rs#L38-L46\" rel=\"nofollow noreferrer\">source code</a> implementing <code>vec!</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>macro_rules! vec {\n    ($elem:expr; $n:expr) =&gt; (\n        $crate::vec::from_elem($elem, $n)\n    );\n    ($($x:expr),*) =&gt; (\n        &lt;[_]&gt;::into_vec(box [$($x),*])\n    );\n    ($($x:expr,)*) =&gt; (vec![$($x),*])\n}\n</code></pre>\n\n<p>Let's forget the standard way to use it:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let v0 = vec![1, 2, 3];\n</code></pre>\n\n<p>If we look at the source code, shouldn't we use it like below?</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let v1 = vec!(3; 1);\nlet v2 = vec!(1, 2, 3); \n</code></pre>\n\n<p>Why do we use <code>[]</code> instead of <code>()</code> in <code>v1</code> and <code>v2</code> compared to <code>v0</code>?</p>\n"}, {"tags": ["rust", "lifetime", "continuations"], "answers": [{"tags": [], "owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "is_accepted": false, "score": 1, "last_activity_date": 1560172027, "last_edit_date": 1560172027, "creation_date": 1560150919, "answer_id": 56522063, "question_id": 56463637, "link": "https://stackoverflow.com/questions/56463637/resumable-continuation-passing-style-iterator-reduce-in-rust/56522063#56522063", "title": "Resumable continuation-passing style iterator reduce in Rust", "body": "<p>Let's start with <code>some_operation</code>; it's always easier to examine regular functions than closures because the compiler only checks their signatures.</p>\n\n<p>Putting back the elided lifetimes, it looks like:</p>\n\n<pre><code>fn some_operation&lt;'s&gt;(state: &amp;'s mut Store, continuation: Box&lt;dyn for&lt;'r&gt; FnOnce(&amp;'r mut Store) + 'static&gt;) {\n    let mut new_state = Store { foo: state.foo };\n    continuation(&amp;mut new_state);\n}\n</code></pre>\n\n<p>There are two distinct lifetimes involved: <code>'s</code> and <code>'r</code> \u2014 there is no connection between them.</p>\n\n<p>Now let's look here:</p>\n\n<pre><code>Box::new(move |store| {\n    continuation((store, vec));\n}),\n</code></pre>\n\n<p>The <code>continuation</code> type should be <code>Box&lt;dyn FnOnce(A) + 'a&gt;</code> according to <code>reduce_async</code>'s signature. What is the type of <code>A</code> after monomorphising? The argument passed to the function is a tuple:</p>\n\n<pre><code>(&amp;mut some_state, Vec::new()),\n</code></pre>\n\n<p>The first element has type <code>&amp;'state mut State</code> for some <code>'state</code> and the second has <code>Vec&lt;u8&gt;</code>. Revisiting <code>some_operation</code>'s signature: the first argument is <code>&amp;'s mut State</code>, so we have chosen <code>'state = 's</code> here. Then we call the closure using an argument with type <code>&amp;'r mut State</code>.</p>\n\n<p>Back in the main procedure, we are trying to build the accumulator from a value of type <code>(&amp;'r mut State, Vec&lt;u8&gt;)</code> which is not the same as <code>(&amp;'state mut State, Vec&lt;u8&gt;)</code>. </p>\n\n<p>That's what the compiler is trying to explain :) Let's check this explanation by changing <code>some_operation</code>'s signature:</p>\n\n<pre><code>fn some_operation&lt;'s&gt;(state: &amp;'s mut Store, continuation: Box&lt;dyn FnOnce(&amp;'s mut Store) + 's&gt;) {\n    continuation(state);\n}\n</code></pre>\n\n<p>Here we explicitly mark that both lifetimes should be the same, and now the code compiles without any error.</p>\n\n<p>Note that there were no problems in your first code snippet because the lifetime of <code>store: &amp;mut Store</code> argument is different each time you invoke <code>reduce_async_with_store</code>! In the second snippet it is fixed to <code>'state</code>.</p>\n\n<p>In my opinion, the easiest fix would be to get rid of mutable references at all and passing <code>Store</code> by transferring ownership.</p>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f6fb9206ed7a65e5ef38802d93047d8d\" rel=\"nofollow noreferrer\">Rust playground link</a></p>\n\n<pre><code>fn reduce_async&lt;'a, I, A, F, C&gt;(mut iterator: I, accumulator: A, mut f: F, continuation: C)\nwhere\n    I: Iterator + 'a,\n    F: FnMut(I::Item, A, Box&lt;dyn FnOnce(A) + 'a&gt;) + Clone + 'a,\n    C: FnOnce(A) + 'a,\n{\n    match iterator.next() {\n        None =&gt; continuation(accumulator),\n        Some(item) =&gt; {\n            let next: Box&lt;dyn FnOnce(A) + 'a&gt; = {\n                let f = f.clone();\n                Box::new(move |accumulator| reduce_async(iterator, accumulator, f, continuation))\n            };\n            f(item, accumulator, next);\n        }\n    }\n}\n\nfn some_operation(state: Store, continuation: Box&lt;dyn FnOnce(Store) + 'static&gt;) {\n    let new_state = Store { foo: state.foo };\n    continuation(new_state);\n}\n\n#[derive(Debug)]\npub struct Store {\n    foo: u8,\n}\n\nfn main() {\n    let some_state = Store { foo: 0 };\n    let arr = vec![1u8, 2u8, 3u8];\n    reduce_async(\n        arr.into_iter(),\n        (some_state, Vec::new()),\n        |item, acc, continuation| {\n            let (mut store, mut vec) = acc;\n            println!(\"Item: {}\", item);\n            store.foo += item;\n            vec.push(item);\n            some_operation(\n                store,\n                Box::new(move |store| {\n                    continuation((store, vec));\n                }),\n            );\n        },\n        |(store, vec)| {\n            println!(\"Done!! {:?} {:?}\", store, vec);\n        },\n    )\n}\n</code></pre>\n\n<p>Keep in mind that the continuation invocations are not tail-recursive, so stack will grow on each iteration. You will probably need a trampoline here.</p>\n"}], "owner": {"reputation": 554, "user_id": 915718, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/295ef8baf65cab4f0aa4b27d11c57e37?s=128&d=identicon&r=PG", "display_name": "Ari Lotter", "link": "https://stackoverflow.com/users/915718/ari-lotter"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 489, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1560172067, "creation_date": 1559748701, "last_edit_date": 1560172067, "question_id": 56463637, "link": "https://stackoverflow.com/questions/56463637/resumable-continuation-passing-style-iterator-reduce-in-rust", "title": "Resumable continuation-passing style iterator reduce in Rust", "body": "<p>I'm trying to write a continuation-passing-style \"reduce\" function that can be resumed at any point. I've got a version working, but in this I need to explicitly write a new version of the function if I want it to be able to make use of a borrow of some state. \n<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f10de85d4bcc50c6526e666463999166\" rel=\"nofollow noreferrer\">Rust Playground Link</a></p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn reduce_async_with_store&lt;'a, I, A, F, C&gt;(\n    store: &amp;mut Store,\n    mut iterator: I,\n    accumulator: A,\n    mut f: F,\n    continuation: C,\n) where\n    I: Iterator + 'a,\n    F: FnMut(&amp;mut Store, I::Item, A, Box&lt;dyn FnOnce(&amp;mut Store, A) + 'a&gt;) + Clone + 'a,\n    C: FnOnce(&amp;mut Store, A) + 'a,\n{\n    match iterator.next() {\n        None =&gt; continuation(store, accumulator),\n        Some(item) =&gt; {\n            let next: Box&lt;dyn FnOnce(&amp;mut Store, A) + 'a&gt; = {\n                let f = f.clone();\n                Box::new(move |store, accumulator| {\n                    reduce_async_with_store(store, iterator, accumulator, f, continuation)\n                })\n            };\n            f(store, item, accumulator, next);\n        }\n    }\n}\n\nfn some_operation(state: &amp;mut Store, continuation: Box&lt;dyn FnOnce(&amp;mut Store) + 'static&gt;) {\n    let mut new_state = Store { foo: state.foo };\n    continuation(&amp;mut new_state);\n}\n\n#[derive(Debug)]\npub struct Store {\n    foo: u8,\n}\n\nfn main() {\n    let mut some_state = Store { foo: 0 };\n    let arr = vec![1u8, 2u8, 3u8];\n    reduce_async_with_store(\n        &amp;mut some_state,\n        arr.into_iter(),\n        Vec::new(),\n        |store, item, mut acc, continuation| {\n            println!(\"Item: {}\", item);\n            store.foo += item;\n            acc.push(item);\n            some_operation(\n                store,\n                Box::new(move |stor| {\n                    continuation(stor, acc);\n                }),\n            );\n        },\n        |store, acc| {\n            println!(\"Done!! {:?} {:?}\", store, acc);\n        },\n    )\n}\n</code></pre>\n\n<p>Here's the version of this function I'd like to write, where I can pass the <code>Store</code> in as part of the accumulator, and get it out - however, if I do this, I get <code>cannot infer an appropriate lifetime due to conflicting requirements</code>.</p>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8e715a66880deaa61f724b9b90900e97\" rel=\"nofollow noreferrer\">Rust Playground Link</a></p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn reduce_async&lt;'a, I, A, F, C&gt;(mut iterator: I, accumulator: A, mut f: F, continuation: C)\nwhere\n    I: Iterator + 'a,\n    F: FnMut(I::Item, A, Box&lt;dyn FnOnce(A) + 'a&gt;) + Clone + 'a,\n    C: FnOnce(A) + 'a,\n{\n    match iterator.next() {\n        None =&gt; continuation(accumulator),\n        Some(item) =&gt; {\n            let next: Box&lt;dyn FnOnce(A) + 'a&gt; = {\n                let f = f.clone();\n                Box::new(move |accumulator| reduce_async(iterator, accumulator, f, continuation))\n            };\n            f(item, accumulator, next);\n        }\n    }\n}\n\nfn some_operation(state: &amp;mut Store, continuation: Box&lt;dyn FnOnce(&amp;mut Store) + 'static&gt;) {\n    let mut new_state = Store { foo: state.foo };\n    continuation(&amp;mut new_state);\n}\n\n#[derive(Debug)]\npub struct Store {\n    foo: u8,\n}\n\nfn main() {\n    let mut some_state = Store { foo: 0 };\n    let arr = vec![1u8, 2u8, 3u8];\n    reduce_async(\n        arr.into_iter(),\n        (&amp;mut some_state, Vec::new()),\n        |item, mut acc, continuation| {\n            let (store, vec) = acc;\n            println!(\"Item: {}\", item);\n            store.foo += item;\n            vec.push(item);\n            some_operation(\n                store,\n                Box::new(move |store| {\n                    continuation((store, vec));\n                }),\n            );\n        },\n        |(store, vec)| {\n            println!(\"Done!! {:?} {:?}\", store, vec);\n        },\n    )\n}\n</code></pre>\n\n<p>How can I write this non-specialized version of my function, and pass things like <code>&amp;mut Store</code> through while respecting Rust's lifetimes?</p>\n\n<p>How is it that my first example with <code>reduce_async_with_store</code> is permitted, even though I don't specify an explicit lifetime for <code>&amp;mut Store</code>, and it could live until <code>'static</code>?</p>\n\n<p><code>some_operation</code> takes a boxed closure because that's what the 3rd party API function I'm calling takes. I would like to eventually replace this code with async iterators, but the library I'm using doesn't have support for futures yet.</p>\n"}, {"tags": ["rust", "generator"], "comments": [{"owner": {"reputation": 14946, "user_id": 8188846, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/85a7614508b329eb4a495c59ccf64ac7?s=128&d=identicon&r=PG", "display_name": "Maximilian Burszley", "link": "https://stackoverflow.com/users/8188846/maximilian-burszley"}, "edited": false, "score": 0, "creation_date": 1559736914, "post_id": 56460206, "comment_id": 99511927, "body": "If you&#39;re trying to access data between threads, you should be using some form of <code>Mutex</code> instead of <code>RefCell</code>"}, {"owner": {"reputation": 65, "user_id": 11587913, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-Rbrg2Bno_2k/AAAAAAAAAAI/AAAAAAAAAAc/TLIU5Oe85hM/photo.jpg?sz=128", "display_name": "epishman", "link": "https://stackoverflow.com/users/11587913/epishman"}, "reply_to_user": {"reputation": 14946, "user_id": 8188846, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/85a7614508b329eb4a495c59ccf64ac7?s=128&d=identicon&r=PG", "display_name": "Maximilian Burszley", "link": "https://stackoverflow.com/users/8188846/maximilian-burszley"}, "edited": false, "score": 0, "creation_date": 1559737480, "post_id": 56460206, "comment_id": 99512231, "body": "@TheIncorrigible1, Thanks, but the current program is single-threaded, the problem as far as I understood is that the generator has a &#39;static lifetime, and my RefCell(...) live less, and I still do not understand how to synchronize lifetimes."}, {"owner": {"reputation": 14946, "user_id": 8188846, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/85a7614508b329eb4a495c59ccf64ac7?s=128&d=identicon&r=PG", "display_name": "Maximilian Burszley", "link": "https://stackoverflow.com/users/8188846/maximilian-burszley"}, "edited": false, "score": 1, "creation_date": 1559739513, "post_id": 56460206, "comment_id": 99513407, "body": "<code>long-lived asynchronous threads</code> can you clarify this then?"}, {"owner": {"reputation": 65, "user_id": 11587913, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-Rbrg2Bno_2k/AAAAAAAAAAI/AAAAAAAAAAc/TLIU5Oe85hM/photo.jpg?sz=128", "display_name": "epishman", "link": "https://stackoverflow.com/users/11587913/epishman"}, "reply_to_user": {"reputation": 14946, "user_id": 8188846, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/85a7614508b329eb4a495c59ccf64ac7?s=128&d=identicon&r=PG", "display_name": "Maximilian Burszley", "link": "https://stackoverflow.com/users/8188846/maximilian-burszley"}, "edited": false, "score": 0, "creation_date": 1559741155, "post_id": 56460206, "comment_id": 99514353, "body": "Perhaps put it badly, I mean the analogue of gorutin only on generators or async / await. Gorutin takes up to 8Kb under the stack, which is sensitive, asynchronous is more economical. The problem is that in Rust these are nightly builds and weak documentation."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1559743753, "post_id": 56461993, "comment_id": 99515950, "body": "<i>a planned extension for generators</i> \u2014 can you link something for this so we can read up on it?"}, {"owner": {"reputation": 65, "user_id": 11587913, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-Rbrg2Bno_2k/AAAAAAAAAAI/AAAAAAAAAAc/TLIU5Oe85hM/photo.jpg?sz=128", "display_name": "epishman", "link": "https://stackoverflow.com/users/11587913/epishman"}, "edited": false, "score": 0, "creation_date": 1559745657, "post_id": 56461993, "comment_id": 99517057, "body": "How to get a link to the data from the generator code, because in Rust there are no global variables or singletons. The only way is to pass the cell reference when the generator is initialized:  <code>Box::pin(user_scenario(&amp;some_ref))</code> But the compiler prohibits this, since the lifetime of the generator is &#39;static, and any variable lives less (in our case, until we remove session from the HashMap)."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 65, "user_id": 11587913, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-Rbrg2Bno_2k/AAAAAAAAAAI/AAAAAAAAAAc/TLIU5Oe85hM/photo.jpg?sz=128", "display_name": "epishman", "link": "https://stackoverflow.com/users/11587913/epishman"}, "edited": false, "score": 0, "creation_date": 1559745883, "post_id": 56461993, "comment_id": 99517196, "body": "@epishman: don&#39;t pass a link, pass a clone of the <code>Rc</code> :) I updated the answer to show how to."}, {"owner": {"reputation": 65, "user_id": 11587913, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-Rbrg2Bno_2k/AAAAAAAAAAI/AAAAAAAAAAc/TLIU5Oe85hM/photo.jpg?sz=128", "display_name": "epishman", "link": "https://stackoverflow.com/users/11587913/epishman"}, "edited": false, "score": 0, "creation_date": 1559761784, "post_id": 56461993, "comment_id": 99524623, "body": "@Matthieu M. Thank you very much for notes about <code>borrow()</code>, without you I would be stuck for a couple of days :)"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 1, "last_activity_date": 1559745948, "last_edit_date": 1559745948, "creation_date": 1559742965, "answer_id": 56461993, "question_id": 56460206, "link": "https://stackoverflow.com/questions/56460206/how-can-i-transfer-some-values-into-a-rust-generator-at-each-step/56461993#56461993", "title": "How can I transfer some values \u200binto a Rust generator at each step?", "body": "<p><em>Disclaimer: resumption arguments are a planned extension for generators, so at some point in the future it will be possible to resume the argument with <code>&amp;UserData</code>.</em></p>\n\n<hr>\n\n<p>For now, I will recommend sharing ownership. The cost is fairly minor (one memory allocation, one indirection) and will save you a lot of troubles:</p>\n\n<pre><code>struct UserSession {\n    user_data: Rc&lt;RefCell&lt;UserData&gt;&gt;,\n    scenario: ..,\n}\n</code></pre>\n\n<p>Which is built with:</p>\n\n<pre><code>let user_data = Rc::new(RefCell::new(udata));\nUserSession {\n    user_data: user_data.clone(),\n    scenario: Box::pin(user_scenario(user_data))\n}\n</code></pre>\n\n<p>Then, both the session and the generator have access to the <code>UserData</code> each on their turn, and everything is fine.</p>\n\n<p>There is one little wrinkle: be careful of scopes. If you keep a <code>.borrow()</code> alive across a <code>yield</code> point, which is possible, then you will have a run-time error when trying to write to it outside the generator.</p>\n\n<hr>\n\n<p>A more involved solution would be using a queue of messages; which would also involve memory allocation, etc... I would consider your <code>UserData</code> structure to be a degenerate form of a pair of queues: it's two queues with capacity for one message. You could make it more explicit with a regular queue, but that would not buy you much.</p>\n"}], "owner": {"reputation": 65, "user_id": 11587913, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-Rbrg2Bno_2k/AAAAAAAAAAI/AAAAAAAAAAc/TLIU5Oe85hM/photo.jpg?sz=128", "display_name": "epishman", "link": "https://stackoverflow.com/users/11587913/epishman"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 730, "favorite_count": 0, "accepted_answer_id": 56461993, "answer_count": 1, "score": 2, "last_activity_date": 1559747144, "creation_date": 1559736544, "last_edit_date": 1559747144, "question_id": 56460206, "link": "https://stackoverflow.com/questions/56460206/how-can-i-transfer-some-values-into-a-rust-generator-at-each-step", "title": "How can I transfer some values \u200binto a Rust generator at each step?", "body": "<p>I use generators as long-lived asynchronous threads (see\n<a href=\"https://stackoverflow.com/questions/56415904/how-to-implement-a-lightweight-long-lived-thread-based-on-a-generator-or-asynchr\">How to implement a lightweight long-lived thread based on a generator or asynchronous function in Rust?</a>) in a user interaction scenario. I need to pass user input into the generator at each step. I think I can do it with a <code>RefCell</code>, but it is not clear how to transfer the reference to the <code>RefCell</code> inside the generator when creating its instance?</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn user_scenario() -&gt; impl Generator&lt;Yield = String, Return = String&gt; {\n    || {\n        yield format!(\"what is your name?\");\n        yield format!(\"{}, how are you feeling?\", \"anon\");\n        return format!(\"{}, bye !\", \"anon\");\n    }\n}\n</code></pre>\n\n<p>The <code>UserData</code> structure contains user input, the second structure contains a user session consisting of <code>UserData</code> and the generator instance. Sessions are collected in a <code>HashMap</code>.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct UserData {\n    sid: String,\n    msg_in: String,\n    msg_out: String,\n}\n\nstruct UserSession {\n    udata_cell: RefCell&lt;UserData&gt;,\n    scenario: Pin&lt;Box&lt;dyn Generator&lt;Yield = String, Return = String&gt;&gt;&gt;,\n}\n\ntype UserSessions = HashMap&lt;String, UserSession&gt;;\n\nlet mut sessions: UserSessions = HashMap::new();\n</code></pre>\n\n<p><code>UserData</code> is created at the time of receiving user input - at this moment I need to send a link to <code>UserData</code> inside the generator, wrapping it in <code>RefCell</code>, but I don\u2019t know how to do it since the generator has a <code>'static</code> lifetime, and the <code>RefCell</code> lives less!</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let mut udata: UserData = read_udata(&amp;mut stream);\nlet mut session: UserSession;\n\nif udata.sid == \"\" { //new session\n    let sid = rnd.gen::&lt;u64&gt;().to_string();\n    udata.sid = sid.clone();\n    sessions.insert(\n        sid.clone(),\n        UserSession {\n            udata_cell: RefCell::new(udata),\n            scenario: Box::pin(user_scenario())\n        }\n    );\n    session = sessions.get_mut(&amp;sid).unwrap();\n} \n</code></pre>\n\n<p>The <a href=\"https://github.com/epishman/habr_samples/blob/fcd4a1f9c943c8d274d88bf5ce686dce00b9e56a/chatbot/main.rs\" rel=\"nofollow noreferrer\">full code is here</a>, but the generator here does not see user input.</p>\n"}, {"tags": ["mysql", "rust"], "comments": [{"owner": {"reputation": 1602, "user_id": 5947247, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f5212b96ae435bb73b9980f34b2913e8?s=128&d=identicon&r=PG&f=1", "display_name": "Isaac van Bakel", "link": "https://stackoverflow.com/users/5947247/isaac-van-bakel"}, "edited": false, "score": 0, "creation_date": 1560255463, "post_id": 56460185, "comment_id": 99668613, "body": "Could you please include the contents of <code>func1</code> and <code>func2</code>? How are you accessing the <code>Pool</code>?"}, {"owner": {"reputation": 20521, "user_id": 1135424, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/rvwBS.jpg?s=128&g=1", "display_name": "nbari", "link": "https://stackoverflow.com/users/1135424/nbari"}, "reply_to_user": {"reputation": 1602, "user_id": 5947247, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f5212b96ae435bb73b9980f34b2913e8?s=128&d=identicon&r=PG&f=1", "display_name": "Isaac van Bakel", "link": "https://stackoverflow.com/users/5947247/isaac-van-bakel"}, "edited": false, "score": 0, "creation_date": 1560327150, "post_id": 56460185, "comment_id": 99695217, "body": "@IsaacvanBakel I updated the question with an example of what it could be <code>func1</code> or <code>func2</code>"}], "owner": {"reputation": 20521, "user_id": 1135424, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/rvwBS.jpg?s=128&g=1", "display_name": "nbari", "link": "https://stackoverflow.com/users/1135424/nbari"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 77, "favorite_count": 0, "answer_count": 0, "score": 1, "last_activity_date": 1560327109, "creation_date": 1559736435, "last_edit_date": 1560327109, "question_id": 56460185, "link": "https://stackoverflow.com/questions/56460185/how-to-modify-the-retry-interval-of-the-mysqlpool-when-servers-goes-down", "title": "How to modify the retry interval of the mysql::Pool when servers goes down?", "body": "<p>Currently, I am creating a <a href=\"https://docs.rs/mysql/16.0.2/mysql/struct.Pool.html\" rel=\"nofollow noreferrer\">pool</a> and sharing it among multiple threads, something similar to:</p>\n\n<pre><code>fn main() {\n    let mut opts = mysql::OptsBuilder::from_opts(dsn);\n    opts.stmt_cache_size(0);\n    opts.read_timeout(Some(Duration::new(3, 0)));\n    opts.write_timeout(Some(Duration::new(3, 0)));\n\n    let pool = mysql::Pool::new_manual(1, 5, opts).expect(\"Could not connect to MySQL\");\n\n    loop {\n        let wait_time = Duration::from_secs(30);\n        let start = Instant::now();\n\n        let mut funcs: Vec&lt;fn(mysql::Pool)&gt; = Vec::new();\n\n        funcs.push(func1);\n        funcs.push(func2);\n\n        let mut threads = Vec::new();\n\n        for f in funcs {\n            let pool = pool.clone();\n            threads.push(thread::spawn(move || {\n                f(pool);\n            }));\n        }\n        for t in threads {\n            let _ = t.join();\n        }\n\n        let runtime = start.elapsed();\n        if let Some(remaining) = wait_time.checked_sub(runtime) {\n           eprintln!(\"sleeping for: {}\", remaining.as_secs());\n           thread::sleep(remaining);\n        }\n\n        // (how to improve this) ?\n        eprintln!(\"pool ping: {:?}\", pool);\n    }\n}\n\nfn func1(pool: mysql::Pool){\n    let mut stmt = match pool.prepare(\"SELECT user, time, state, info FROM information_schema.processlist WHERE command != 'Sleep' AND time &gt;= ? ORDER BY time DESC, id LIMIT 1;\") {\n        Ok(stmt) =&gt; stmt,\n        Err(e) =&gt; {\n            eprintln!(\"{}\", e);\n            return;\n        }\n    };\n\n    for row in stmt.execute((30,)).unwrap() {\n        let (user, time, state, info) =\n            mysql::from_row::&lt;(String, i64, String, String)&gt;(row.unwrap());\n        println!(\"{} {} {} {}\", user, time, state, info);\n    }\n}\n</code></pre>\n\n<p>So far all good but, when the MySQL server goes down, I see:</p>\n\n<pre><code>DriverError { Could not connect to address `mydb.host:3306': Connection refused (os error 61) }\n</code></pre>\n\n<p>When the MySQL server is up/reachable again, the pool establishes the connection and the queries work as expected. Therefore I would like to know if the <code>pool</code> retries indefinitely or if there is a limit of retries, besides how could the retry interval be defined/modified?</p>\n\n<p>Also wondering how to handle the pool errors so that an alert could be sent for example when MySQL server is down.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 332774, "user_id": 263525, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/ec289925069b35f18f1230b90dc654e5?s=128&d=identicon&r=PG", "display_name": "Denys S&#233;guret", "link": "https://stackoverflow.com/users/263525/denys-s%c3%a9guret"}, "edited": false, "score": 3, "creation_date": 1559714597, "post_id": 56454715, "comment_id": 99502280, "body": "You don&#39;t even have to change the function declaration. You can just add <code>let mut x = x;</code> at the beginning. As you understood, the fonction took ownership of the variable, it owns it."}], "answers": [{"comments": [{"owner": {"reputation": 20310, "user_id": 525980, "user_type": "registered", "accept_rate": 48, "profile_image": "https://www.gravatar.com/avatar/8dafe66793ee2f32192e9fcefb389a12?s=128&d=identicon&r=PG", "display_name": "Clinton", "link": "https://stackoverflow.com/users/525980/clinton"}, "edited": false, "score": 0, "creation_date": 1559713161, "post_id": 56454743, "comment_id": 99501950, "body": "Oh I&#39;m silly I just wrote <code>x : mut Vec&lt;u32&gt;</code> instead and it didn&#39;t compile. That does the job perfectly. Only been using Rust for a few weeks (but enjoying it). Thanks! Will accept your answer after the minimum time expires."}], "tags": [], "owner": {"reputation": 9010, "user_id": 2588800, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/847da843d41921363502159c8b7e5549?s=128&d=identicon&r=PG", "display_name": "Svetlin Zarev", "link": "https://stackoverflow.com/users/2588800/svetlin-zarev"}, "is_accepted": true, "score": 4, "last_activity_date": 1559744952, "last_edit_date": 1559744952, "creation_date": 1559712993, "answer_id": 56454743, "question_id": 56454715, "link": "https://stackoverflow.com/questions/56454715/how-can-i-mutate-a-parameter-that-was-passed-by-move/56454743#56454743", "title": "How can I mutate a parameter that was passed by move?", "body": "<p>You should declare the <code>x</code> argument to be mutable: <code>mut x: Whatever</code></p>\n\n<pre><code>fn main() {\n    let x = vec![];\n    mutate(x);\n}\n\nfn mutate(mut x: Vec&lt;u32&gt;) {\n    x.push(1);\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 9010, "user_id": 2588800, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/847da843d41921363502159c8b7e5549?s=128&d=identicon&r=PG", "display_name": "Svetlin Zarev", "link": "https://stackoverflow.com/users/2588800/svetlin-zarev"}, "edited": false, "score": 0, "creation_date": 1559719952, "post_id": 56455820, "comment_id": 99504139, "body": "But why ? Isn&#39;t that just one additional line that can be easily avoided?"}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "reply_to_user": {"reputation": 9010, "user_id": 2588800, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/847da843d41921363502159c8b7e5549?s=128&d=identicon&r=PG", "display_name": "Svetlin Zarev", "link": "https://stackoverflow.com/users/2588800/svetlin-zarev"}, "edited": false, "score": 0, "creation_date": 1559720651, "post_id": 56455820, "comment_id": 99504399, "body": "@SvetlinZarev I didn&#39;t said &quot;must&quot;, style preference I guess. I found it&#39;s better than <code>mut x: Vec&lt;u32&gt;</code>. This &quot;hide&quot; the fact we are doing terrible side effect."}], "tags": [], "owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "is_accepted": false, "score": 2, "last_activity_date": 1559719111, "creation_date": 1559719111, "answer_id": 56455820, "question_id": 56454715, "link": "https://stackoverflow.com/questions/56454715/how-can-i-mutate-a-parameter-that-was-passed-by-move/56455820#56455820", "title": "How can I mutate a parameter that was passed by move?", "body": "<p>You could shadow <code>x</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let x = vec![];\n    mutate(x);\n}\n\nfn mutate(x: Vec&lt;u32&gt;) {\n    let mut x = x;\n    // ...\n}\n</code></pre>\n"}], "owner": {"reputation": 20310, "user_id": 525980, "user_type": "registered", "accept_rate": 48, "profile_image": "https://www.gravatar.com/avatar/8dafe66793ee2f32192e9fcefb389a12?s=128&d=identicon&r=PG", "display_name": "Clinton", "link": "https://stackoverflow.com/users/525980/clinton"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 69, "favorite_count": 0, "accepted_answer_id": 56454743, "answer_count": 2, "score": 2, "last_activity_date": 1559744952, "creation_date": 1559712746, "last_edit_date": 1559744934, "question_id": 56454715, "link": "https://stackoverflow.com/questions/56454715/how-can-i-mutate-a-parameter-that-was-passed-by-move", "title": "How can I mutate a parameter that was passed by move?", "body": "<p>My understanding is if I have a function like:</p>\n\n<pre><code>fn f(x: Vec&lt;u32&gt;) -&gt; (some result)\n</code></pre>\n\n<p><code>f</code> takes ownership of <code>x</code>. <code>f</code> is now responsible for <code>x</code>'s destruction. </p>\n\n<p>If this is the case, can I mutate <code>x</code>, and if so how? To get a mutable iterator to <code>x</code> requires a <code>&amp;mut</code>, which I don't have.</p>\n\n<p>It seems reasonable that I should be able to mutate a variable I now have ownership over without any ill effects I'm just not sure how. The calling function has relinquished ownership of <code>x</code> to <code>f</code>, so it shouldn't care what happens to it. </p>\n\n<p>Perhaps I could change the type <code>f</code> to <code>f(x: &amp;mut Vec&lt;u32&gt;)</code>, but I don't really want to do that for a variety of reasons, for example it prevents chaining functions in a natural way like <code>f(g(x))</code>, and also if my \"(some result)\" is something other than a <code>Vec&lt;u32&gt;</code> (like a type that contains a <code>Vec&lt;u32&gt;</code>) then I'll have to split the function into two and ensure the caller does what they're supposed to do. </p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1559691325, "post_id": 56452305, "comment_id": 99498141, "body": "Your question is unclear, no <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>."}], "answers": [{"comments": [{"owner": {"reputation": 9958, "user_id": 2188562, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/DMWEc.png?s=128&g=1", "display_name": "Peter Varo", "link": "https://stackoverflow.com/users/2188562/peter-varo"}, "edited": false, "score": 1, "creation_date": 1559690544, "post_id": 56452454, "comment_id": 99498024, "body": "Moreover, to understand what <code>for</code> is actually doing under the hood consult the relevant chapters of <a href=\"https://doc.rust-lang.org/reference/expressions/loop-expr.html#iterator-loops\" rel=\"nofollow noreferrer\">The Rust Reference</a>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1559690168, "creation_date": 1559690168, "answer_id": 56452454, "question_id": 56452305, "link": "https://stackoverflow.com/questions/56452305/how-can-you-access-methods-of-an-iterator-while-using-it-in-a-for-loop/56452454#56452454", "title": "How can you access methods of an iterator while using it in a for loop?", "body": "<blockquote>\n  <p>When I use it in a <code>for</code> loop, it takes ownership of the object:</p>\n</blockquote>\n\n<p>Then don't use a <code>for</code> loop:</p>\n\n<pre><code>fn main() {\n    let s = \"a b c\";\n    let mut it = s.chars();\n\n    while let Some(_) = it.next() {\n        println!(\"remaining: {},\", it.as_str());\n    }\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/28519745/155423\">How do I pass an iterator I am iterating on to a function?</a></li>\n<li><a href=\"https://stackoverflow.com/q/45122446/155423\">How do I iterate over a list of chars while still being able to skip in the iteration?</a></li>\n<li><a href=\"https://stackoverflow.com/q/37508081/155423\">How do I call Peekable::next based on the result of Peekable::peek?</a></li>\n<li><a href=\"https://stackoverflow.com/q/31374051/155423\">Why does Iterator::take_while take ownership of the iterator?</a></li>\n<li><a href=\"https://stackoverflow.com/q/38779588/155423\">Nesting an iterator&#39;s loops</a></li>\n</ul>\n"}], "owner": {"reputation": 4733, "user_id": 922445, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/a469120d35647d9aa50646cb4d778c71?s=128&d=identicon&r=PG&f=1", "display_name": "Nulik", "link": "https://stackoverflow.com/users/922445/nulik"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 73, "favorite_count": 0, "closed_date": 1559691934, "accepted_answer_id": 56452454, "answer_count": 1, "score": -1, "last_activity_date": 1559690168, "creation_date": 1559688745, "last_edit_date": 1559689752, "question_id": 56452305, "link": "https://stackoverflow.com/questions/56452305/how-can-you-access-methods-of-an-iterator-while-using-it-in-a-for-loop", "closed_reason": "Duplicate", "title": "How can you access methods of an iterator while using it in a for loop?", "body": "<p>I have implemented a custom iterator for a graph traversal. The iterator contains state variables which I plan to access inside the body of the loop:</p>\n\n<pre><code>#[derive(Clone, Debug)]\npub struct NodeIterator&lt;'a, T: 'a + Data&gt; {\n    graph: &amp;'a DAG&lt;T&gt;,\n\n    /// true if we should fetch the nodes recursively (default = true)\n    pub recursive: bool,\n\n    /// true if we explore depth first, and after that go for neighour nodes (default=false)\n    pub depth_first: bool,\n\n    /// maximum depth to iterate on lower levels\n    /// recursive = true : we use recursion to iterate down the hierarchy\n    /// recursive =false : we only iterate either through children or parents\n    ///                                  (depending on follow_direction field)\n    pub max_depth: NodeID,\n\n    /// follow_direction = true : we iterate using 'parents' vec\n    /// follow_direction =false : we iterate using 'children' vec\n    pub follow_direction: bool,\n\n    /// current node, that was already provided by the iterator\n    pub cur_node_id: Option&lt;NodeID&gt;,\n\n    /// index to the current children or parent (while iterating corresponding collection)\n    pub cur_index: Option&lt;NodeID&gt;,\n\n    /// current Edge being iterated\n    pub cur_edge: Option&lt;Edge&gt;,\n\n    /// current depth (starts from 0)\n    cur_depth: u32,\n}\n\nimpl&lt;'a, T&gt; NodeIterator&lt;'a, T&gt;\nwhere\n    T: 'a + Data,\n{\n    pub fn get_cur_depth(&amp;self) -&gt; u32 {\n        self.cur_depth\n    }\n}\n</code></pre>\n\n<p>When I use it in a <code>for</code> loop, it takes ownership of the object:</p>\n\n<pre><code>let it = graph.iter();\nfor node_entry in it {\n    println!(\n        \"node_id: {}, depth: {},\",\n        node_entry.node_id,\n        it.get_cur_depth()\n    );\n}\n</code></pre>\n\n<p>If I try to use it inside the code block, I get this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>     ^^ value used here after move\n</code></pre>\n\n<p>The error occurs when I am trying to acces to <code>it.get_cur_depth()</code> function. How would you get around this error to access internal state of the iterator through methods?</p>\n"}, {"tags": ["rust", "macros", "traits"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1559678923, "post_id": 56450533, "comment_id": 99494612, "body": "Note that the answer you reference is about <code>macro_rules</code> macros; I don&#39;t know that it applies to procedural macros; you should try the procedural macro route."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1559679273, "post_id": 56450533, "comment_id": 99494748, "body": "You could probably also do something like <code>my_derive! { struct Foo(i32) }</code> which would add all the derives, but that wouldn&#39;t create a <i>new</i> derive."}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 2, "creation_date": 1559679514, "post_id": 56450533, "comment_id": 99494835, "body": "I&#39;m not sure it&#39;s a good thing to do."}, {"owner": {"reputation": 1498, "user_id": 6844327, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9fWJl.jpg?s=128&g=1", "display_name": "HiDefender", "link": "https://stackoverflow.com/users/6844327/hidefender"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1559682116, "post_id": 56450533, "comment_id": 99495937, "body": "@Shepmaster Procedural macro route doesn&#39;t work either. I thought about creating the struct inside of the derive procedural macro (It does work that way.), but I feel like it would make the code less maintainable. Someone else, would not be able to quickly see where the struct is defined."}, {"owner": {"reputation": 1498, "user_id": 6844327, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9fWJl.jpg?s=128&g=1", "display_name": "HiDefender", "link": "https://stackoverflow.com/users/6844327/hidefender"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1559682260, "post_id": 56450533, "comment_id": 99495996, "body": "@Stargateur Why is that?"}, {"owner": {"reputation": 2659, "user_id": 8050514, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/6CRdl.jpg?s=128&g=1", "display_name": "Optimistic Peach", "link": "https://stackoverflow.com/users/8050514/optimistic-peach"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1559686082, "post_id": 56450533, "comment_id": 99497110, "body": "@Shepmaster Something like <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=5198e168ccd6ae52c52f3fc1f0bb03da\" rel=\"nofollow noreferrer\">so</a>?"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1559725582, "post_id": 56450533, "comment_id": 99506723, "body": "In your situation, I would ask the <code>derive_more</code> team to add new derives, like <code>Int</code> and <code>Float</code> that expand to this"}], "answers": [{"tags": [], "owner": {"reputation": 4500, "user_id": 8858995, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/44d1981ec5dd8311a79e695d512716ef?s=128&d=identicon&r=PG&f=1", "display_name": "Ibraheem Ahmed", "link": "https://stackoverflow.com/users/8858995/ibraheem-ahmed"}, "is_accepted": true, "score": 1, "last_activity_date": 1617920595, "last_edit_date": 1617920595, "creation_date": 1617920218, "answer_id": 67012591, "question_id": 56450533, "link": "https://stackoverflow.com/questions/56450533/is-there-a-way-to-alias-multiple-derives-as-a-single-one/67012591#67012591", "title": "Is there a way to alias multiple derives as a single one?", "body": "<p>As you mentioned, emitted attributes must be attached to an item, making a proc-macro like this impossible:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>#[proc_macro_derive(Num)]\npub fn num_derive(_: TokenStream) -&gt; TokenStream {\n    let gen = quote! {\n        #[derive(Eq, PartialEq, Ord, PartialOrd)]\n    };\n    gen.into()\n}\n</code></pre>\n<p><code>proc-macros</code> also come with the hassle of having to be defined in a separate crate, so generating them, or creating simple ones for ergonomic reasons is not worth it.</p>\n<p>With proc-macros ruled out, we can look to <code>macro_rules</code>. They have the same restriction regarding attributes. However, it is possible to wrap an item definition in a proc-macro and attach attributes to it:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>macro_rules! derive_stuff {\n     ($i:item) =&gt; {\n        #[derive(Eq, PartialEq, Ord, PartialOrd)]\n        $i\n    }\n}\n\nderive_stuff! { struct Foo(i32); }\n</code></pre>\n<p>Given this, we can create a macro that <em>generates</em> a macro like above:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>macro_rules! derive_alias {\n    ($name:ident =&gt; #[derive($($derive:ident),*)]) =&gt; {\n        macro_rules! $name {\n            ($i:item) =&gt; {\n                #[derive($($derive),*)]\n                $i\n            }\n        }\n    }\n}\n\nderive_alias! {\n    derive_stuff =&gt; #[derive(Eq, PartialEq, Ord, PartialOrd)]\n}\n\nderive_stuff! { struct Foo(i32); }\n</code></pre>\n<p>So I create a crate (<a href=\"https://docs.rs/derive-alias/0.1.0/derive_alias/\" rel=\"nofollow noreferrer\"><code>derive_alias</code></a>) that does exactly that:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>use derive_alias::derive_alias;\nuse derive_more::*;\n\nderive_alias! {\n    derive_num =&gt; #[derive(Add, Sub, Mul, Div, ..., Copy, Clone, Debug, Eq, PartialEq, Hash, Ord, PartialOrd)]\n}\n\nderive_num! { struct Foo(i32); }\n</code></pre>\n"}], "owner": {"reputation": 1498, "user_id": 6844327, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9fWJl.jpg?s=128&g=1", "display_name": "HiDefender", "link": "https://stackoverflow.com/users/6844327/hidefender"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 506, "favorite_count": 0, "accepted_answer_id": 67012591, "answer_count": 1, "score": 11, "last_activity_date": 1617920595, "creation_date": 1559678317, "last_edit_date": 1559678874, "question_id": 56450533, "link": "https://stackoverflow.com/questions/56450533/is-there-a-way-to-alias-multiple-derives-as-a-single-one", "title": "Is there a way to alias multiple derives as a single one?", "body": "<p>When using the newtype pattern I often have lengthy derives:</p>\n\n<pre><code>extern crate derive_more;\nuse derive_more::*;\n\n#[derive(Add, Sub, Mul, Div, ..., Copy, Clone, Debug, Eq, PartialEq, Hash, Ord, PartialOrd)]\nstruct Foo(i32);\n</code></pre>\n\n<p>Is there a way to shorten this to something like this:</p>\n\n<pre><code>#[derive(Num)]\nstruct Foo(i32);\n</code></pre>\n\n<p>Where <code>Num</code> is a derive macro?</p>\n\n<p>I found <a href=\"https://github.com/rust-lang/rfcs/issues/831\" rel=\"noreferrer\">this</a>, but it seems like one can't expand macros in attributes.  <a href=\"https://stackoverflow.com/questions/41945628/is-it-possible-to-emit-rust-attributes-from-within-macros\">This answer</a> discusses how attributes must be attached to items, ruling this out:</p>\n\n<pre><code>#[proc_macro_derive(Num)]\npub fn num_derive(_: TokenStream) -&gt; TokenStream {\n    let gen = quote! {\n        #[derive(Add, Sub, Mul, Div, ..., Copy, Clone, Debug, Eq, PartialEq, Hash, Ord, PartialOrd)]\n    };\n    gen.into()\n}\n</code></pre>\n"}, {"tags": ["rust", "actix-web"], "answers": [{"comments": [{"owner": {"reputation": 610, "user_id": 4678839, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/59JRP.jpg?s=128&g=1", "display_name": "Wahyu Kodar", "link": "https://stackoverflow.com/users/4678839/wahyu-kodar"}, "edited": false, "score": 0, "creation_date": 1578848512, "post_id": 57529019, "comment_id": 105564618, "body": "In solution no.2, you don&#39;t add dev enough to ServiceResponse. It should be    dev :: ServiceResponse :: new (      res.request (). clone (),      HttpResponse :: Ok (). Body (&quot;fredbob&quot;). Into_body (), );"}], "tags": [], "owner": {"reputation": 586, "user_id": 2738247, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-wBoWJzL5n2I/AAAAAAAAAAI/AAAAAAAAADg/lEWJ2PPAVT8/photo.jpg?sz=128", "display_name": "robertohuertasm", "link": "https://stackoverflow.com/users/2738247/robertohuertasm"}, "is_accepted": false, "score": 2, "last_activity_date": 1565977565, "creation_date": 1565977565, "answer_id": 57529019, "question_id": 56449508, "link": "https://stackoverflow.com/questions/56449508/how-do-i-modify-the-response-body-in-an-actix-web-1-0-middleware/57529019#57529019", "title": "How do I modify the response body in an actix-web 1.0 middleware?", "body": "<p>You can try one of these two approaches. Both of them work for me:</p>\n\n<ol>\n<li>Use <code>map_body</code> method from <code>ServiceResponse</code>:</li>\n</ol>\n\n<pre><code>let new_res = res.map_body(|_head, _body| {\n    ResponseBody::Other(Body::Message(Box::new(\"fredbob\")))\n});\n\nreturn Ok(new_res);\n</code></pre>\n\n<ol start=\"2\">\n<li>Access to the <code>HttpRequest</code>, clone it, and build a new <code>ServiceResponse</code>:</li>\n</ol>\n\n<pre><code>let new_res = ServiceResponse::new(\n    res.request().clone(),\n    HttpResponse::Ok().body(\"fredbob\").into_body(),\n);\n\nreturn Ok(new_res);\n</code></pre>\n\n<p>Hope it helps!</p>\n"}], "owner": {"reputation": 3173, "user_id": 116751, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/c6f153da0c942369289863942e65433b?s=128&d=identicon&r=PG", "display_name": "Chris McKenzie", "link": "https://stackoverflow.com/users/116751/chris-mckenzie"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 866, "favorite_count": 1, "answer_count": 1, "score": 2, "last_activity_date": 1565977565, "creation_date": 1559673258, "last_edit_date": 1559678038, "question_id": 56449508, "link": "https://stackoverflow.com/questions/56449508/how-do-i-modify-the-response-body-in-an-actix-web-1-0-middleware", "title": "How do I modify the response body in an actix-web 1.0 middleware?", "body": "<p>I'd like to modify the response body in Actix-Web. I've implemented the v1.0.0 middleware but I've not been successful in changing the response body so far.</p>\n\n<p>I've tried two basic approaches: return a new <code>ServiceResponse</code> and use the method chains on <code>ServiceResponse</code> to attempt to set a new body. Both approaches have resulted in varying kinds of compiler errors and move violations that I haven't been able to resolve. While I'm new to Rust, other members of my team are more experienced and weren't able to work though these challenges either. I have not been able to find any examples that are on point.</p>\n\n<p>Here is my implementation of <code>call()</code>.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn call(&amp;mut self, req: ServiceRequest) -&gt; Self::Future {\n    let content_type = req.get_header_value(\"content-type\");\n\n    println!(\n        \"Request Started: {}; content type: {};\",\n        req.path(),\n        content_type\n    );\n\n    Box::new(self.service.call(req).and_then(move |mut res| {\n        match res.response().error() {\n            Some(e) =&gt; {\n                println!(\n                    \"Response: Error Code: {}; content type: {};\",\n                    res.status(),\n                    content_type\n                );\n\n                dbg!(e);\n\n                // I'd really like to modify the response body here.\n\n                return Ok(res);\n            }\n            None =&gt; {\n                println!(\"Middleware detected the response is not an error. \");\n                return Ok(res);\n            }\n        }\n    }))\n}\n</code></pre>\n\n<p>I'd like to modify the response body to be the text \"fredbob\". If I can get that far, I can accomplish the rest of what I want to do.</p>\n\n<p><a href=\"https://gist.github.com/crmckenzie/028b617e5dc272492485c1629151fe42\" rel=\"nofollow noreferrer\">Complete code</a>:</p>\n\n<pre><code>use actix_service::{Service, Transform};\nuse actix_web::http::StatusCode;\nuse actix_web::{dev::ServiceRequest, dev::ServiceResponse, Error, HttpResponse};\nuse futures::future::{ok, FutureResult};\nuse futures::{Future, Poll};\n\nuse serde::Serialize;\nuse serde_json;\n\npub trait Headers {\n    fn get_header_value(&amp;self, name: &amp;str) -&gt; String;\n}\n\nimpl Headers for ServiceRequest {\n    fn get_header_value(&amp;self, name: &amp;str) -&gt; String {\n        self.headers()\n            .get(name)\n            .unwrap()\n            .to_str()\n            .unwrap()\n            .to_string()\n    }\n}\n\n// There are two step in middleware processing.\n// 1. Middleware initialization, middleware factory get called with\n//    next service in chain as parameter.\n// 2. Middleware's call method get called with normal request.\npub struct SayHi;\n\n// Middleware factory is `Transform` trait from actix-service crate\n// `S` - type of the next service\n// `B` - type of response's body\nimpl&lt;S, B&gt; Transform&lt;S&gt; for SayHi\nwhere\n    S: Service&lt;Request = ServiceRequest, Response = ServiceResponse&lt;B&gt;, Error = Error&gt;,\n    S::Future: 'static,\n    B: 'static,\n{\n    type Request = ServiceRequest;\n    type Response = ServiceResponse&lt;B&gt;;\n    type Error = Error;\n    type InitError = ();\n    type Transform = SayHiMiddleware&lt;S&gt;;\n    type Future = FutureResult&lt;Self::Transform, Self::InitError&gt;;\n\n    fn new_transform(&amp;self, service: S) -&gt; Self::Future {\n        ok(SayHiMiddleware { service })\n    }\n}\n\npub struct SayHiMiddleware&lt;S&gt; {\n    service: S,\n}\n\nfn is_error(status: StatusCode) -&gt; bool {\n    status.as_u16() &gt;= 400\n}\n\nimpl&lt;S, B&gt; Service for SayHiMiddleware&lt;S&gt;\nwhere\n    S: Service&lt;Request = ServiceRequest, Response = ServiceResponse&lt;B&gt;, Error = Error&gt;,\n    S::Future: 'static,\n    B: 'static,\n{\n    type Request = ServiceRequest;\n    type Response = ServiceResponse&lt;B&gt;;\n    type Error = Error;\n    type Future = Box&lt;Future&lt;Item = Self::Response, Error = Self::Error&gt;&gt;;\n\n    fn poll_ready(&amp;mut self) -&gt; Poll&lt;(), Self::Error&gt; {\n        self.service.poll_ready()\n    }\n\n    fn call(&amp;mut self, req: ServiceRequest) -&gt; Self::Future {\n        let content_type = req.get_header_value(\"content-type\");\n\n        println!(\n            \"Request Started: {}; content type: {};\",\n            req.path(),\n            content_type\n        );\n\n        Box::new(self.service.call(req).and_then(move |mut res| {\n            match res.response().error() {\n                Some(e) =&gt; {\n                    println!(\n                        \"Response: Error Code: {}; content type: {};\",\n                        res.status(),\n                        content_type\n                    );\n\n                    dbg!(e);\n\n                    // I'd really like to modify the response body here.\n\n                    return Ok(res);\n                }\n                None =&gt; {\n                    println!(\"Middleware detected the response is not an error. \");\n                    return Ok(res);\n                }\n            }\n        }))\n    }\n}\n</code></pre>\n"}, {"tags": ["string", "parsing", "optimization", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1559671109, "post_id": 56449027, "comment_id": 99491506, "body": "<i>I&#39;m guessing it has to do</i> \u2014 don&#39;t guess, <b>profile</b>. What does the profiler say? You are obviously going to be using a profiler if you are so concerned about runtime performance, yes?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1559671327, "post_id": 56449027, "comment_id": 99491617, "body": "<i>with the extra <code>String</code> and <code>Vec</code> allocations, and UTF-8 validation</i> \u2014 none of these have anything to do with <code>FromStr</code>. If you started with a static string, presumably your implementation would be just as fast."}, {"owner": {"reputation": 111, "user_id": 1843982, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/54655bb23b5adb9fe2f362f3043e5d9d?s=128&d=identicon&r=PG", "display_name": "EbTech", "link": "https://stackoverflow.com/users/1843982/ebtech"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1559672455, "post_id": 56449027, "comment_id": 99492017, "body": "Right, I&#39;m not blaming <code>FromStr</code>. To the contrary, seeing as the <code>impl FromStr for i64</code> defers to the <code>as_bytes()</code> representation anyway, I feel this must be possible to do efficiently. It might just be a matter of finding a more efficient way to obtain tokens from a <code>BufRead</code>. You&#39;re right though, I oughta get some practice with a profiler..."}, {"owner": {"reputation": 13767, "user_id": 2413201, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/rxfuw.jpg?s=128&g=1", "display_name": "Armali", "link": "https://stackoverflow.com/users/2413201/armali"}, "edited": false, "score": 0, "creation_date": 1561727608, "post_id": 56449027, "comment_id": 100169232, "body": "I know nearly nothing about Rust, but I wouldn&#39;t favor a program going into an endless loop on unexpected EOF."}, {"owner": {"reputation": 9790, "user_id": 544721, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/690b6f4d543b41e22e795a42ca67dfc2?s=128&d=identicon&r=PG", "display_name": "Grzegorz Wierzowiecki", "link": "https://stackoverflow.com/users/544721/grzegorz-wierzowiecki"}, "edited": false, "score": 0, "creation_date": 1619264118, "post_id": 56449027, "comment_id": 118855433, "body": "I also would love sth like <code>cin&gt;&gt;x</code> or <code>(f)scanf(..)</code> in C++. I considered if to maybe rewrite text_io::read into short snippet tailored for programming contests <a href=\"https://github.com/oli-obk/rust-si/blob/master/src/lib.rs\" rel=\"nofollow noreferrer\">github.com/oli-obk/rust-si/blob/master/src/lib.rs</a>"}, {"owner": {"reputation": 9790, "user_id": 544721, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/690b6f4d543b41e22e795a42ca67dfc2?s=128&d=identicon&r=PG", "display_name": "Grzegorz Wierzowiecki", "link": "https://stackoverflow.com/users/544721/grzegorz-wierzowiecki"}, "edited": false, "score": 0, "creation_date": 1619264219, "post_id": 56449027, "comment_id": 118855459, "body": "This looks like some direction to go, but not perfect to me : <a href=\"https://stackoverflow.com/questions/30355185/how-to-read-an-integer-input-from-the-user-in-rust-1-0/57200055#57200055\" title=\"how to read an integer input from the user in rust 1 0\">stackoverflow.com/questions/30355185/&hellip;</a> , I would love sth that reads word by word."}], "answers": [{"tags": [], "owner": {"reputation": 2348, "user_id": 864406, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/fd625e8a9c68a44bee8185847b7b59b0?s=128&d=identicon&r=PG", "display_name": "Lucretiel", "link": "https://stackoverflow.com/users/864406/lucretiel"}, "is_accepted": false, "score": 2, "last_activity_date": 1587416574, "last_edit_date": 1587416574, "creation_date": 1587415424, "answer_id": 61331713, "question_id": 56449027, "link": "https://stackoverflow.com/questions/56449027/fastest-idiomatic-i-o-routine-in-rust-for-programming-contests/61331713#61331713", "title": "Fastest idiomatic I/O routine in Rust for programming contests?", "body": "<p>I'm so glad you asked, as I solved this exact problem in my LibCodeJam rust implementation. Specifically, reading raw tokens from a <code>BufRead</code> is handled by the <a href=\"https://github.com/Lucretiel/LibCodeJam/blob/fcd6201e693082d3db334ad53116d2cc00ae1a17/rust/src/tokens.rs#L185-L227\" rel=\"nofollow noreferrer\"><code>TokensReader</code> type</a> as well as some tiny related helpers.</p>\n\n<p>Here's the relevant excerpt. The basic idea here is to scan the <code>BufRead::fill_buf</code> buffer for whitespace, and copying non-whitespace characters into a local buffer, which is reused between token calls. Once a whitespace character is found, or the stream ends, the local buffer is interpreted as UTF-8 and returned as an <code>&amp;str</code>.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[derive(Debug)]\npub enum LoadError {\n    Io(io::Error),\n    Utf8Error(Utf8Error),\n    OutOfTokens,\n}\n\n/// TokenBuffer is a resuable buffer into which tokens are\n/// read into, one-by-one. It is cleared but not deallocated\n/// between each token.\n#[derive(Debug)]\nstruct TokenBuffer(Vec&lt;u8&gt;);\n\nimpl TokenBuffer {\n    /// Clear the buffer and start reading a new token\n    fn lock(&amp;mut self) -&gt; TokenBufferLock {\n        self.0.clear();\n        TokenBufferLock(&amp;mut self.0)\n    }\n}\n\n/// TokenBufferLock is a helper type that helps manage the lifecycle\n/// of reading a new token, then interpreting it as UTF-8.\n#[derive(Debug, Default)]\nstruct TokenBufferLock&lt;'a&gt;(&amp;'a mut Vec&lt;u8&gt;);\n\nimpl&lt;'a&gt; TokenBufferLock&lt;'a&gt; {\n    /// Add some bytes to a token\n    fn extend(&amp;mut self, chunk: &amp;[u8]) {\n        self.0.extend(chunk)\n    }\n\n    /// Complete the token and attempt to interpret it as UTF-8\n    fn complete(self) -&gt; Result&lt;&amp;'a str, LoadError&gt; {\n        from_utf8(self.0).map_err(LoadError::Utf8Error)\n    }\n}\n\npub struct TokensReader&lt;R: io::BufRead&gt; {\n    reader: R,\n    token: TokenBuffer,\n}\n\nimpl&lt;R: io::BufRead&gt; Tokens for TokensReader&lt;R&gt; {\n    fn next_raw(&amp;mut self) -&gt; Result&lt;&amp;str, LoadError&gt; {\n        use std::io::ErrorKind::Interrupted;\n\n        // Clear leading whitespace\n        loop {\n            match self.reader.fill_buf() {\n                Err(ref err) if err.kind() == Interrupted =&gt; continue,\n                Err(err) =&gt; return Err(LoadError::Io(err)),\n                Ok([]) =&gt; return Err(LoadError::OutOfTokens),\n                // Got some content; scan for the next non-whitespace character\n                Ok(buf) =&gt; match buf.iter().position(|byte| !byte.is_ascii_whitespace()) {\n                    Some(i) =&gt; {\n                        self.reader.consume(i);\n                        break;\n                    }\n                    None =&gt; self.reader.consume(buf.len()),\n                },\n            };\n        }\n\n        // If we reach this point, there is definitely a non-empty token ready to be read.\n        let mut token_buf = self.token.lock();\n\n        loop {\n            match self.reader.fill_buf() {\n                Err(ref err) if err.kind() == Interrupted =&gt; continue,\n                Err(err) =&gt; return Err(LoadError::Io(err)),\n                Ok([]) =&gt; return token_buf.complete(),\n                // Got some content; scan for the next whitespace character\n                Ok(buf) =&gt; match buf.iter().position(u8::is_ascii_whitespace) {\n                    Some(i) =&gt; {\n                        token_buf.extend(&amp;buf[..i]);\n                        self.reader.consume(i + 1);\n                        return token_buf.complete();\n                    }\n                    None =&gt; {\n                        token_buf.extend(buf);\n                        self.reader.consume(buf.len());\n                    }\n                },\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>This implementation <em>doesn't</em> handle parsing strings into <code>FromStr</code> types\u2014 that's handled separately\u2014 but it does handle correctly accumulating bytes, separating them into whitespace-separated tokens, and interpreting those tokens as UTF-8. It does assume that only ASCII whitespace will be used to separate Tokens.</p>\n\n<p>It's worth noting that <code>FromStr</code> cannot be used directly on the <code>fill_buf</code> buffer, because there's no guarantee that a token doesn't straddle the boundary between two <code>fill_buf</code> calls, and there's no way to force a <code>BufRead</code> to read more bytes until the existing buffer is fully consumed. I'm assuming it's pretty obvious that once you have an <code>Ok(&amp;str)</code>, you can perform <code>FromStr</code> on it at your leisure.</p>\n\n<p>This implementation is not 0-copy, but is is (amortized) 0-allocation, and it minimizes unnecessary copying or buffering. It uses a single persistent buffer that is only resized if it's too small for a single token, and it reuses this buffer between tokens. Bytes are copied into this buffer directly from the input <code>BufRead</code> buffer, without extra intermediary copying.</p>\n"}], "owner": {"reputation": 111, "user_id": 1843982, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/54655bb23b5adb9fe2f362f3043e5d9d?s=128&d=identicon&r=PG", "display_name": "EbTech", "link": "https://stackoverflow.com/users/1843982/ebtech"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 777, "favorite_count": 6, "answer_count": 1, "score": 11, "last_activity_date": 1587416574, "creation_date": 1559670715, "last_edit_date": 1559844877, "question_id": 56449027, "link": "https://stackoverflow.com/questions/56449027/fastest-idiomatic-i-o-routine-in-rust-for-programming-contests", "title": "Fastest idiomatic I/O routine in Rust for programming contests?", "body": "<p><em>My question has been partially answered, so I've revised it in response to things I've learned from comments and additional experiments.</em></p>\n\n<p>In summary, I want a fast I/O routine for programming contests, in which problems are solved with a single file and no external crates. It should read in a sequence of whitespace-separated tokens from a <code>BufRead</code> (either stdin or a file). The tokens may be integers, floats or ASCII words, separated by spaces and newlines, so it seems I should support <code>FromStr</code> types generically. A small minority of problems are interactive, meaning not all of the input is available initially, but it always comes in complete lines.</p>\n\n<p>For context, here's <a href=\"https://codeforces.com/blog/entry/67391?#comment-515711\" rel=\"noreferrer\">the discussion that led me to post here</a>. Someone wrote very fast custom code to parse integers directly from the <code>&amp;[u8]</code> output of <code>BufRead::fill_buf()</code>, but it's not generic in <code>FromStr</code>.</p>\n\n<p>Here is my <a href=\"https://codeforces.com/contest/1151/submission/55185471\" rel=\"noreferrer\">best solution so far</a> (emphasis on the <code>Scanner</code> struct):</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::io::{self, prelude::*};\n\nfn solve&lt;B: BufRead, W: Write&gt;(mut scan: Scanner&lt;B&gt;, mut w: W) {\n    let n = scan.token();\n    let mut a = Vec::with_capacity(n);\n    let mut b = Vec::with_capacity(n);\n    for _ in 0..n {\n        a.push(scan.token::&lt;i64&gt;());\n        b.push(scan.token::&lt;i64&gt;());\n    }\n    let mut order: Vec&lt;_&gt; = (0..n).collect();\n    order.sort_by_key(|&amp;i| b[i] - a[i]);\n    let ans: i64 = order\n        .into_iter()\n        .enumerate()\n        .map(|(i, x)| a[x] * i as i64 + b[x] * (n - 1 - i) as i64)\n        .sum();\n    writeln!(w, \"{}\", ans);\n}\n\nfn main() {\n    let stdin = io::stdin();\n    let stdout = io::stdout();\n    let reader = Scanner::new(stdin.lock());\n    let writer = io::BufWriter::new(stdout.lock());\n    solve(reader, writer);\n}\n\npub struct Scanner&lt;B&gt; {\n    reader: B,\n    buf_str: String,\n    buf_iter: std::str::SplitWhitespace&lt;'static&gt;,\n}\nimpl&lt;B: BufRead&gt; Scanner&lt;B&gt; {\n    pub fn new(reader: B) -&gt; Self {\n        Self {\n            reader,\n            buf_str: String::new(),\n            buf_iter: \"\".split_whitespace(),\n        }\n    }\n    pub fn token&lt;T: std::str::FromStr&gt;(&amp;mut self) -&gt; T {\n        loop {\n            if let Some(token) = self.buf_iter.next() {\n                return token.parse().ok().expect(\"Failed parse\");\n            }\n            self.buf_str.clear();\n            self.reader\n                .read_line(&amp;mut self.buf_str)\n                .expect(\"Failed read\");\n            self.buf_iter = unsafe { std::mem::transmute(self.buf_str.split_whitespace()) };\n        }\n    }\n}\n</code></pre>\n\n<p>By avoiding unnecessary allocations, this <code>Scanner</code> is quite fast. If we didn't care about unsafety, it can be made even faster by, instead of doing <code>read_line()</code> into a <code>String</code>, doing <code>read_until(b'\\n')</code> into a <code>Vec&lt;u8&gt;</code>, followed by <code>str::from_utf8_unchecked()</code>.</p>\n\n<p>However, I'd also like to know what's the fastest <strong>safe</strong> solution. Is there a clever way to tell Rust that what my <code>Scanner</code> implementation does is actually safe, eliminating the <code>mem::transmute</code>? Intuitively, it seems we should think of the <code>SplitWhitespace</code> object as <strong>owning</strong> the buffer until it's effectively dropped after it returns <code>None</code>.</p>\n\n<p>All else being equal, I'd like a \"nice\" idiomatic standard library solution, as I'm trying to present Rust to others who do programming contests.</p>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1559669091, "post_id": 56448638, "comment_id": 99490719, "body": "As mentioned in your deleted previous question, why do you believe that a feature flag is required to reproduce the problem? Replace all your <code>feature = &quot;serde-orm&quot;</code> with the equivalent of <code>true</code> (a.k.a. remove them); do you get the same problem? If so, then the feature flag aspect is meaningless for the question."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1559669164, "post_id": 56448638, "comment_id": 99490743, "body": "It looks like your question might be answered by the answers of <a href=\"https://stackoverflow.com/q/42620022/155423\">Why does a generic method inside a trait require trait object to be sized?</a>. If not, please <b><a href=\"https://stackoverflow.com/posts/56448638/edit\">edit</a></b> your question to explain the differences. Otherwise, we can mark this question as already answered."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1559669243, "post_id": 56448638, "comment_id": 99490780, "body": "Please review the <a href=\"//stackoverflow.com/tags/rust/info\">Rust-specific MCVE tips</a> to reduce your original code for posting here. For example, you can combine all of your files into one (like you did for <code>mod integrations</code>)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1559669391, "post_id": 56448638, "comment_id": 99490848, "body": "See also <a href=\"https://stackoverflow.com/q/49952612/155423\">Is it possible to have a generic function on a trait?</a>;"}, {"owner": {"reputation": 395, "user_id": 1390727, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/95lDZ.png?s=128&g=1", "display_name": "Empty2k12", "link": "https://stackoverflow.com/users/1390727/empty2k12"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1559669657, "post_id": 56448638, "comment_id": 99490942, "body": "@Shepmaster I have updated the question. As you can clearly tell, it&#39;s about the Rust compilers inability to detect that a method is implemented. Are you habe to help me in this case?  <a href=\"https://stackoverflow.com/q/42620022/1390727\">stackoverflow.com/q/42620022/1390727</a> does not answer my question. If you would have taken the time to actually look at my question, you&#39;d have seen that my error happens when I am calling a method which is implemented on a trait, not when using a trait inside a struct."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1559669737, "post_id": 56448638, "comment_id": 99490963, "body": "You could likely remove the return value from <code>json_query</code>, the <code>DeserializeOwned</code> bound; many other things. We really emphasize the <b>M</b>inimal part. <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=6cb69b62ae33a0900d65b37f8c53a435\" rel=\"nofollow noreferrer\">Example</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1559669837, "post_id": 56448638, "comment_id": 99491007, "body": "You are paying attention to the wrong part of the error message. It&#39;s unfortunate that it suggests that, but the important part is the <code>error</code> not the <code>note</code>: the <code>json_query</code> method cannot be invoked on a trait object. That&#39;s what all the linked questions talk about."}, {"owner": {"reputation": 395, "user_id": 1390727, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/95lDZ.png?s=128&g=1", "display_name": "Empty2k12", "link": "https://stackoverflow.com/users/1390727/empty2k12"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1559669855, "post_id": 56448638, "comment_id": 99491020, "body": "Do you have a concrete example for a fix? I think this question warrants a separate answer, as it might be a similar to the questions linked, but the context of the error occurring is definitely different. I tried solving my specific error by searching for causes on Google first, which netted no, or insignificant answers which were unhelpful in actually solving the problem."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1559670073, "post_id": 56448638, "comment_id": 99491116, "body": "There <i>is</i> no fix; that&#39;s what the answers I&#39;m linking to say."}, {"owner": {"reputation": 395, "user_id": 1390727, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/95lDZ.png?s=128&g=1", "display_name": "Empty2k12", "link": "https://stackoverflow.com/users/1390727/empty2k12"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1559670382, "post_id": 56448638, "comment_id": 99491248, "body": "There&#39;s an answer. Thanks! The second part from my question specifically asks how to do this in a rustic way. For that part of the question, a more concrete Minimal Reproducible Example would have been good, as the specific use case of guarding Serde (or any other crate of matter of fact) as I am sure I am not the first and won&#39;t be the last to do something like that.  I tried Googling &quot;Serde behind a feature flag&quot; which netted no meaningful results, so having a reference implementation here would be insanely useful."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1559670405, "post_id": 56448638, "comment_id": 99491254, "body": "<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=e5e40326e1960bd10d88abd9857ffb79\" rel=\"nofollow noreferrer\">Further reduced</a> \u2014 this was accomplished by just deleting things while the error message stayed consistent."}, {"owner": {"reputation": 6355, "user_id": 3755692, "user_type": "registered", "accept_rate": 62, "profile_image": "https://i.stack.imgur.com/F7x32.png?s=128&g=1", "display_name": "msrd0", "link": "https://stackoverflow.com/users/3755692/msrd0"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1559671432, "post_id": 56448638, "comment_id": 99491655, "body": "@Shepmaster: In your reduced example, simple remove the <code>::&lt;ToString&gt;</code> fixes everything"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 6355, "user_id": 3755692, "user_type": "registered", "accept_rate": 62, "profile_image": "https://i.stack.imgur.com/F7x32.png?s=128&g=1", "display_name": "msrd0", "link": "https://stackoverflow.com/users/3755692/msrd0"}, "edited": false, "score": 0, "creation_date": 1559671516, "post_id": 56448638, "comment_id": 99491696, "body": "@msrd0 sure; but why did OP include that? Presumably they have a good reason."}, {"owner": {"reputation": 395, "user_id": 1390727, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/95lDZ.png?s=128&g=1", "display_name": "Empty2k12", "link": "https://stackoverflow.com/users/1390727/empty2k12"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1559671569, "post_id": 56448638, "comment_id": 99491717, "body": "@Shepmaster I included it, since <code>Q</code> needed to be of type <code>ToString</code>, I never knew you could simply use <code>_</code>."}, {"owner": {"reputation": 6355, "user_id": 3755692, "user_type": "registered", "accept_rate": 62, "profile_image": "https://i.stack.imgur.com/F7x32.png?s=128&g=1", "display_name": "msrd0", "link": "https://stackoverflow.com/users/3755692/msrd0"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1559671638, "post_id": 56448638, "comment_id": 99491729, "body": "@Shepmaster the OP probably included it since he specified the <code>T</code> type and didn&#39;t know he could leave the <code>Q</code> type out (as <code>_</code>) and simple copied it from the <code>where</code> clause"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1559671661, "post_id": 56448638, "comment_id": 99491738, "body": "@Empty2k12 but the two things are different and have different meanings. In that case, <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=c863d4a41c4b421eef6000be19e1622a\" rel=\"nofollow noreferrer\">you should have just passed <code>String</code></a>"}, {"owner": {"reputation": 395, "user_id": 1390727, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/95lDZ.png?s=128&g=1", "display_name": "Empty2k12", "link": "https://stackoverflow.com/users/1390727/empty2k12"}, "edited": false, "score": 0, "creation_date": 1559671901, "post_id": 56448638, "comment_id": 99491804, "body": "In this case correct. In the deleted question you referred to earlier, you have seen that I am not actually passing a <code>String</code>, but rather a <code>MyDbQuery</code>. This is what happens when you reduce code down so much, it looses the meaning it had before."}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1559678800, "post_id": 56448638, "comment_id": 99494557, "body": "Possible duplicate of <a href=\"https://stackoverflow.com/questions/42620022/why-does-a-generic-method-inside-a-trait-require-trait-object-to-be-sized\">Why does a generic method inside a trait require trait object to be sized?</a>"}, {"owner": {"reputation": 6355, "user_id": 3755692, "user_type": "registered", "accept_rate": 62, "profile_image": "https://i.stack.imgur.com/F7x32.png?s=128&g=1", "display_name": "msrd0", "link": "https://stackoverflow.com/users/3755692/msrd0"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1559680891, "post_id": 56448638, "comment_id": 99495420, "body": "@Stargateur well that only solves part of the issue. Also hard to find with that error message, since it never mentioned <code>Sized</code> anywhere"}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "reply_to_user": {"reputation": 6355, "user_id": 3755692, "user_type": "registered", "accept_rate": 62, "profile_image": "https://i.stack.imgur.com/F7x32.png?s=128&g=1", "display_name": "msrd0", "link": "https://stackoverflow.com/users/3755692/msrd0"}, "edited": false, "score": 0, "creation_date": 1559681330, "post_id": 56448638, "comment_id": 99495617, "body": "@msrd0 first ask two questions in one is bad. secondly the duplicate perfectly answer the real issue with high quality answer. third duplicate is about answer not question even if the error doesn&#39;t match, the answer could still be the same. four the second question is a little of topic on SO."}, {"owner": {"reputation": 6355, "user_id": 3755692, "user_type": "registered", "accept_rate": 62, "profile_image": "https://i.stack.imgur.com/F7x32.png?s=128&g=1", "display_name": "msrd0", "link": "https://stackoverflow.com/users/3755692/msrd0"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1559681944, "post_id": 56448638, "comment_id": 99495870, "body": "@Stargateur asking two questions in one is bad, but in this case the OP didn&#39;t/couldn&#39;t know that there were multiple issues in his/her code that prevented the code from compiling"}], "answers": [{"comments": [{"owner": {"reputation": 395, "user_id": 1390727, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/95lDZ.png?s=128&g=1", "display_name": "Empty2k12", "link": "https://stackoverflow.com/users/1390727/empty2k12"}, "edited": false, "score": 0, "creation_date": 1559671473, "post_id": 56449155, "comment_id": 99491675, "body": "Thank you for actually answering my question. This <i>was</i> a pretty easy fix after all. Your method, which not being 100% the same with my original, works perfectly in my case."}], "tags": [], "owner": {"reputation": 6355, "user_id": 3755692, "user_type": "registered", "accept_rate": 62, "profile_image": "https://i.stack.imgur.com/F7x32.png?s=128&g=1", "display_name": "msrd0", "link": "https://stackoverflow.com/users/3755692/msrd0"}, "is_accepted": true, "score": 2, "last_activity_date": 1559671410, "last_edit_date": 1559671410, "creation_date": 1559671315, "answer_id": 56449155, "question_id": 56448638, "link": "https://stackoverflow.com/questions/56448638/the-method-cannot-be-invoked-on-a-trait-object-on-separate-trait-implementatio/56449155#56449155", "title": "&quot;the method cannot be invoked on a trait object&quot; on separate trait implementation", "body": "<p>There <em>is</em> a simple fix to your problem: Since you have defined the <code>MyDbClient</code> struct in your own crate, you can simply implement the methods you want for it without specifying another trait. This will work with your original example:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use futures::Future;\nuse serde::{de::DeserializeOwned, Deserialize, Serialize};\n\npub struct MyDbClient {\n    pub url: String,\n}\n\n#[cfg(feature = \"serde-orm\")]\nimpl MyDbClient {\n    pub fn json_query&lt;T: 'static, Q&gt;(self, q: Q) -&gt; Box&lt;dyn Future&lt;Item = Option&lt;T&gt;, Error = ()&gt;&gt;\n    where\n        Q: ToString,\n        T: DeserializeOwned,\n    {\n        Box::new(futures::future::ok(Some(\n            serde_json::from_str(&amp;q.to_string()).unwrap(),\n        )))\n    }\n}\n\n#[cfg_attr(feature = \"serde-orm\", derive(Serialize, Deserialize, Debug))]\npub struct Weather {\n    temperature: i32,\n}\n\n#[cfg(test)]\n#[cfg(feature = \"serde-orm\")]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn mrp() {\n        let weather = Weather { temperature: 82 };\n\n        let client: MyDbClient = MyDbClient {\n            url: \"localhost\".to_owned(),\n        };\n\n        client.json_query::&lt;Weather, _&gt;(serde_json::to_string(&amp;weather).unwrap());\n    }\n}\n</code></pre>\n\n<p>This has one drawback though, since you can't reuse the implementation for a type other than <code>MyDbClient</code>. While that won't work for everyone, this can probably accommodate your use case.</p>\n"}], "owner": {"reputation": 395, "user_id": 1390727, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/95lDZ.png?s=128&g=1", "display_name": "Empty2k12", "link": "https://stackoverflow.com/users/1390727/empty2k12"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 636, "favorite_count": 0, "accepted_answer_id": 56449155, "answer_count": 1, "score": 1, "last_activity_date": 1559671410, "creation_date": 1559668932, "last_edit_date": 1559669403, "question_id": 56448638, "link": "https://stackoverflow.com/questions/56448638/the-method-cannot-be-invoked-on-a-trait-object-on-separate-trait-implementatio", "title": "&quot;the method cannot be invoked on a trait object&quot; on separate trait implementation", "body": "<p>I am running into the error \"the method cannot be invoked on a trait object\" with a separate trait implementation.</p>\n\n<p>This is my Minimal Reproducible Example:</p>\n\n<p><strong>Cargo.toml</strong></p>\n\n<pre><code>[package]\nname = \"mrp\"\nversion = \"0.1.0\"\nauthors = [\"Empty2k12\"]\nedition = \"2018\"\n\n[dependencies]\nfutures = \"0.1.27\"\ntokio = \"0.1.20\"\nserde = { version = \"1.0.92\", features = [\"derive\"] }\nserde_json = { version = \"1.0\" }\n</code></pre>\n\n<p><strong>main.rs</strong></p>\n\n<pre><code>use serde::{Deserialize, Serialize};\n\npub mod integrations {\n    pub mod serde_integration;\n}\n\nstruct MyDbClient {}\n\n#[derive(Serialize, Deserialize, Debug)]\npub struct Weather {\n    temperature: i32,\n}\n\n#[cfg(test)]\nmod tests {\n    use super::Weather;\n    use super::MyDbClient;\n    use crate::integrations::serde_integration::MyDbSerdeORM;\n\n    #[test]\n    fn mrp() {\n        let weather = Weather { temperature: 82 };\n\n        MyDbClient {}.json_query::&lt;Weather, ToString&gt;(serde_json::to_string(&amp;weather).unwrap())\n    }\n}\n</code></pre>\n\n<p><strong>integrations/serde_integration.rs</strong></p>\n\n<pre><code>use serde::de::DeserializeOwned;\n\nuse super::super::MyDbClient;\n\nuse futures::Future;\n\npub trait MyDbSerdeORM {\n    fn json_query&lt;T: 'static, Q&gt;(self, q: Q) -&gt; Box&lt;dyn Future&lt;Item = Option&lt;T&gt;, Error = ()&gt;&gt;\n    where\n        Q: ToString,\n        T: DeserializeOwned;\n}\n\nimpl MyDbSerdeORM for MyDbClient {\n    fn json_query&lt;T: 'static, Q&gt;(self, q: Q) -&gt; Box&lt;dyn Future&lt;Item = Option&lt;T&gt;, Error = ()&gt;&gt;\n    where\n        Q: ToString,\n        T: DeserializeOwned,\n    {\n        Box::new(futures::future::ok(Some(\n            serde_json::from_str(&amp;q.to_string()).unwrap(),\n        )))\n    }\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: the `json_query` method cannot be invoked on a trait object\n  --&gt; src/main.rs:27:23\n   |\n27 |         MyDbClient {}.json_query::&lt;Weather, ToString&gt;(serde_json::to_string(&amp;weather).unwrap())\n   |                       ^^^^^^^^^^\n   |\n   = note: another candidate was found in the following trait, perhaps add a `use` for it:\n           `use crate::integrations::serde_integration::MyDbSerdeORM;`\n</code></pre>\n\n<p>The error is also unhelpful, as it's suggesting to add an already existing import.</p>\n\n<p><strong>How do I fix the error present in my MRE? How might this be implemented in a better, more rustic way?</strong></p>\n"}, {"tags": ["rust", "dynamic-linking"], "comments": [{"owner": {"reputation": 1165, "user_id": 869271, "user_type": "registered", "accept_rate": 38, "profile_image": "https://www.gravatar.com/avatar/ae486e9ebb18f0cd4dd3f512abc3a3e1?s=128&d=identicon&r=PG", "display_name": "Siscia", "link": "https://stackoverflow.com/users/869271/siscia"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1559668383, "post_id": 56447075, "comment_id": 99490458, "body": "Edited to remove the C part. Usually this kind of things are related to the executable, not the language that is used to write it. I was asking how to determine why a specific symbol is needed in a binary written in plain old C."}, {"owner": {"reputation": 152277, "user_id": 438992, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/QouOz.jpg?s=128&g=1", "display_name": "Dave Newton", "link": "https://stackoverflow.com/users/438992/dave-newton"}, "edited": false, "score": 0, "creation_date": 1559668448, "post_id": 56447075, "comment_id": 99490475, "body": "Because it&#39;s used, directly or indirectly?"}, {"owner": {"reputation": 1165, "user_id": 869271, "user_type": "registered", "accept_rate": 38, "profile_image": "https://www.gravatar.com/avatar/ae486e9ebb18f0cd4dd3f512abc3a3e1?s=128&d=identicon&r=PG", "display_name": "Siscia", "link": "https://stackoverflow.com/users/869271/siscia"}, "reply_to_user": {"reputation": 152277, "user_id": 438992, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/QouOz.jpg?s=128&g=1", "display_name": "Dave Newton", "link": "https://stackoverflow.com/users/438992/dave-newton"}, "edited": false, "score": 0, "creation_date": 1559668544, "post_id": 56447075, "comment_id": 99490510, "body": "@Dave, it is used by a dependencies... Which one I don&#39;t know and I would like to found out."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1559788983, "post_id": 56470151, "comment_id": 99531672, "body": "Combined with <a href=\"https://stackoverflow.com/q/50642574/155423\">How can I specify linker flags/arguments in a build script?</a>"}], "tags": [], "owner": {"reputation": 162629, "user_id": 50617, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/YFykQ.png?s=128&g=1", "display_name": "Employed Russian", "link": "https://stackoverflow.com/users/50617/employed-russian"}, "is_accepted": false, "score": 1, "last_activity_date": 1559787343, "creation_date": 1559787343, "answer_id": 56470151, "question_id": 56447075, "link": "https://stackoverflow.com/questions/56447075/how-can-i-determine-why-a-compiled-rust-binary-requires-a-specific-symbol/56470151#56470151", "title": "How can I determine why a compiled Rust binary requires a specific symbol?", "body": "<blockquote>\n  <p>How can I tell which dependencies require this specific function?</p>\n</blockquote>\n\n<p>You can find out which code <em>referenced</em> it by adding <code>-Wl,-y,secure_getenv</code> to the link line.</p>\n"}], "owner": {"reputation": 1165, "user_id": 869271, "user_type": "registered", "accept_rate": 38, "profile_image": "https://www.gravatar.com/avatar/ae486e9ebb18f0cd4dd3f512abc3a3e1?s=128&d=identicon&r=PG", "display_name": "Siscia", "link": "https://stackoverflow.com/users/869271/siscia"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 55, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1559787343, "creation_date": 1559662471, "last_edit_date": 1559668901, "question_id": 56447075, "link": "https://stackoverflow.com/questions/56447075/how-can-i-determine-why-a-compiled-rust-binary-requires-a-specific-symbol", "title": "How can I determine why a compiled Rust binary requires a specific symbol?", "body": "<p>I wrote a program in Rust. When compiled, it requires glibc symbols as well as <code>secure_getenv</code>.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>objdump -T ~/Downloads/redisql_v1.0.1_x86_64.so | grep secure -C 3\n0000000000000000      DF *UND*  0000000000000000  GLIBC_2.2.5 rewind\n0000000000000000      DF *UND*  0000000000000000  GLIBC_2.2.5 bind\n0000000000000000      D  *UND*  0000000000000000              secure_getenv ### &lt;--- here\n0000000000000000      DF *UND*  0000000000000000  GLIBC_2.2.5 socket\n0000000000000000      DF *UND*  0000000000000000  GLIBC_2.2.5 pthread_mutex_trylock\n</code></pre>\n\n<p>How can I tell which dependencies require this specific function? </p>\n"}, {"tags": ["pointers", "rust"], "comments": [{"owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 1, "creation_date": 1559646804, "post_id": 56441791, "comment_id": 99478782, "body": "You don&#39;t cast between pointers in Rust (and you don&#39;t do that in C++ as well!). Instead use traits. I don&#39;t see how this question is related to FFI. Please clarify your question."}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1559649745, "post_id": 56441791, "comment_id": 99480368, "body": "&quot;Rust C FFI universal pointer type, analog of \u201cvoid *\u201d?&quot; no no no and no. Sorry ;). <code>void *</code> is not a &quot;magic&quot; pointer, it&#39;s not &quot;universal&quot;. It&#39;s a nothing pointer type. One must know it&#39;s true type to be able to use it. There is nothing universal, a pointer of <code>struct A</code> can&#39;t be convert to <code>void *</code> and then convert to a pointer to <code>struct B</code>. So it&#39;s clearly not universal. Of course my note is just pedantic, but it&#39;s important to know."}, {"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "reply_to_user": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 0, "creation_date": 1559649807, "post_id": 56441791, "comment_id": 99480396, "body": "@hellow <code>t as *mut c_void</code> is cast of pointers from my point of view, what term do you want here?"}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1559649824, "post_id": 56441791, "comment_id": 99480406, "body": "&quot;but there is guarantee that  <code>sizeof(void *) &gt;= sizeof(T *)</code>&quot;, can you quote the standard that say that ? In C, I really doubt of that, I don&#39;t know for C++."}, {"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 1, "creation_date": 1559649924, "post_id": 56441791, "comment_id": 99480480, "body": "@Stargateur universal in terms that you convert <code>X *</code> without losing anything,"}, {"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1559649998, "post_id": 56441791, "comment_id": 99480527, "body": "@Stargateur 4.10 Pointer conversions  2 An rvalue of type &quot;pointer to cv T,&quot; where T is an object type, can be converted to an rvalue of type &quot;pointer to cv  void.&quot;"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1559650195, "post_id": 56441791, "comment_id": 99480633, "body": "Your question is unclear, tho. In Rust, there is something somewhat analog to the void pointer, that is the <code>Any</code> trait, but this has nothing to do with FFI"}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1559650260, "post_id": 56441791, "comment_id": 99480685, "body": "@user1244932 You didn&#39;t understand what I try to explain probably my fault, explain <code>void *</code> in comment is impossible combine with my poor english. When you convert <code>X *</code> to <code>void *</code>, you loose type information. You do loose something, and sometime very important. Your quote doesn&#39;t at all justify <code>sizeof(void *) &gt;= sizeof(T *)</code>"}, {"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1559650679, "post_id": 56441791, "comment_id": 99480905, "body": "@Stargateur I do not care about type information at all. I am care about different pointers size to different things. Like far/near pointers in old 16bit days. <code>4.10</code> clear says <code>The result of converting a &quot;pointer to cv T&quot; to a &quot;pointer to cv void&quot; points to the start of the storage location where the object of type T resides</code>, so it is impossible that <code>sizeof(void *) &lt; sizeof(T *)</code>, becase then it is impossible to have real address of <code>storage location</code>."}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1559650918, "post_id": 56441791, "comment_id": 99481039, "body": "The only thing I found in C, is that <code>sizeof(void *) == sizeof(character_type *)</code> same for alignment requirement. &quot;so it is impossible that sizeof(void *) &lt; sizeof(T *), becase then it is impossible to have real address of storage location.&quot; Yes it is possible. Nothing in all C standard disallow pointer to be whatever then want, remember C is very flexible to implement, some embedded system have a strange implementation. I mean in theory a pointer could be just a hash, and each time you use a pointer the implementation could just do a lot of thing that end up by doing what you ask for."}], "answers": [{"comments": [{"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1559661312, "post_id": 56445730, "comment_id": 99486981, "body": "In fact I don&#39;t care about fat pointers. I care about case when <code>size_of</code> <code>*mut T1</code>  and <code>size_of</code> <code>*mut T2</code> is not equal. In C/C++ standard there is no garantee that sizeof pointers are equal, there is only garantee that you can convert pointers to/from <code>void *</code> without information lost. So in Rust all normal pointers have the same size?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1559661736, "post_id": 56445730, "comment_id": 99487240, "body": "@user1244932 There is no Rust standard so it&#39;s impossible to state with 100% certainty, but as far as I know, <b>yes</b>, all thin pointers are the same size."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 6, "last_activity_date": 1593456223, "last_edit_date": 1593456223, "creation_date": 1559657641, "answer_id": 56445730, "question_id": 56441791, "link": "https://stackoverflow.com/questions/56441791/is-there-a-universal-rust-pointer-type-that-can-store-any-other-kind-of-pointer/56445730#56445730", "title": "Is there a universal Rust pointer type that can store any other kind of pointer, an analog of C&#39;s void *?", "body": "<p>No.</p>\n<p>Rust's raw pointers (and references) currently come in two flavors:</p>\n<ul>\n<li>thin (one native-sized integer in size)</li>\n<li>fat (two native-sized integers in size)</li>\n</ul>\n<pre><code>use std::mem;\n\nfn main() {\n    println!(&quot;{}&quot;, mem::size_of::&lt;*const u8&gt;());   //  8\n    println!(&quot;{}&quot;, mem::size_of::&lt;*const [u8]&gt;()); // 16\n}\n</code></pre>\n<p>There's no type that allows storing both; even the Big Hammer of <code>mem::transmute</code> won't work:</p>\n<pre><code>use std::mem;\n\nunsafe fn example(mut thin: *const u8, mut fat: *const [u8]) {\n    fat = mem::transmute(thin);\n    thin = mem::transmute(fat);\n}\n</code></pre>\n<pre class=\"lang-none prettyprint-override\"><code>error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n --&gt; src/main.rs:4:11\n  |\n4 |     fat = mem::transmute(thin);\n  |           ^^^^^^^^^^^^^^\n  |\n  = note: source type: `*const u8` (64 bits)\n  = note: target type: `*const [u8]` (128 bits)\n\nerror[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n --&gt; src/main.rs:5:12\n  |\n5 |     thin = mem::transmute(fat);\n  |            ^^^^^^^^^^^^^^\n  |\n  = note: source type: `*const [u8]` (128 bits)\n  = note: target type: `*const u8` (64 bits)\n</code></pre>\n<p>Since the layout of fat pointers is a Rust-specific concept, they should never be accessed via FFI. This means that only thin pointers should be used, all of which have a uniform known size.</p>\n<p>For those types, you should use an <a href=\"https://stackoverflow.com/q/38315383/155423\">opaque pointer</a> to provide better type safety. You could also use <code>*const ()</code> or <a href=\"https://docs.rs/libc/0.2.71/libc/enum.c_void.html\" rel=\"nofollow noreferrer\"><code>*const libc::c_void</code></a>.</p>\n<p>See also:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/38315383/155423\">What&#39;s the Rust idiom to define a field pointing to a C opaque pointer?</a></li>\n<li><a href=\"https://stackoverflow.com/q/47489449/155423\">Why can comparing two seemingly equal pointers with == return false?</a></li>\n<li><a href=\"https://stackoverflow.com/q/38995701/155423\">How do I pass a closure through raw pointers as an argument to a C function?</a></li>\n</ul>\n<blockquote>\n<p>In C or C++, there is special <code>void *</code> pointer and the C++ standard declares that it is safe to cast to it.</p>\n</blockquote>\n<p>This isn't always true:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/36645660/why-cant-i-cast-a-function-pointer-to-void\">Why can&#39;t I cast a function pointer to (void *)?</a></li>\n</ul>\n"}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 762, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1593456223, "creation_date": 1559643057, "last_edit_date": 1559656962, "question_id": 56441791, "link": "https://stackoverflow.com/questions/56441791/is-there-a-universal-rust-pointer-type-that-can-store-any-other-kind-of-pointer", "title": "Is there a universal Rust pointer type that can store any other kind of pointer, an analog of C&#39;s void *?", "body": "<p>I want to create a C FFI API for my crate, but it's not clear how safe it is to cast pointers. Pseudocode:</p>\n\n<pre><code>#[no_mangle]\nextern \"C\" fn f(...) -&gt; *mut c_void {\n    let t: Box&lt;T&gt; = ...;\n    let p = Box::into_raw(t);\n    p as *mut c_void\n}\n</code></pre>\n\n<p>This works as expected, but how safe is it? In C or C++, there is special <code>void *</code> pointer and the C++ standard declares that it is safe to cast to it. Potentially, <code>sizeof(void *)</code> may be not equal <code>sizeof(T *)</code>, but there is a guarantee that <code>sizeof(void *)</code> >= <code>sizeof(T *)</code>.</p>\n\n<p>What about Rust? Is there any guarantee about the <code>std::mem::size_of</code> of a pointer or safe casting between pointers? Or do all pointers have equal size by implementation, equal to <code>usize</code>?</p>\n\n<p>By \"universal\", I mean that you can convert <code>X *</code> without losing anything. I do not care about type information; I care about different sizes of pointers to different things, like <code>near</code>/<code>far</code> pointers in the 16-bit days.</p>\n\n<p>4.10 says </p>\n\n<blockquote>\n  <p>The result of converting a \"pointer to cv T\" to a \"pointer to cv void\" points to the start of the storage location where the object of type T resides,</p>\n</blockquote>\n\n<p>It is impossible that <code>sizeof(void *) &lt; sizeof(T *)</code>, because then it is impossible to have real address of storage location. </p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 4, "creation_date": 1559621098, "post_id": 56437176, "comment_id": 99468210, "body": "The macro <i>is</i> returning the value, but you&#39;re using the macro in a context where a <code>()</code> is expected (because <code>main</code> returns <code>()</code>). Try assigning the result to a variable."}, {"owner": {"reputation": 842, "user_id": 523060, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/d75657f4b4c80a3eaf3db8c3c77104d8?s=128&d=identicon&r=PG", "display_name": "Jimmy Chu", "link": "https://stackoverflow.com/users/523060/jimmy-chu"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1559622219, "post_id": 56437176, "comment_id": 99468380, "body": "I think I know what&#39;s wrong with it. In the original src code, it should end each <code>calculate! {...}</code> macro call with a semi-colon!  Thanks for your input @FrancisGagn&#233;"}], "answers": [{"tags": [], "owner": {"reputation": 842, "user_id": 523060, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/d75657f4b4c80a3eaf3db8c3c77104d8?s=128&d=identicon&r=PG", "display_name": "Jimmy Chu", "link": "https://stackoverflow.com/users/523060/jimmy-chu"}, "is_accepted": true, "score": 3, "last_activity_date": 1559622458, "creation_date": 1559622458, "answer_id": 56437356, "question_id": 56437176, "link": "https://stackoverflow.com/questions/56437176/returning-value-from-macro-rules-in-rust/56437356#56437356", "title": "Returning value from macro_rules! in Rust", "body": "<p>I think I know what's wrong with it. In the original src code, it should end each <code>calculate! {...}</code> macro call with a semi-colon.</p>\n"}], "owner": {"reputation": 842, "user_id": 523060, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/d75657f4b4c80a3eaf3db8c3c77104d8?s=128&d=identicon&r=PG", "display_name": "Jimmy Chu", "link": "https://stackoverflow.com/users/523060/jimmy-chu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2234, "favorite_count": 0, "closed_date": 1559656457, "accepted_answer_id": 56437356, "answer_count": 1, "score": 6, "last_activity_date": 1559622458, "creation_date": 1559620836, "question_id": 56437176, "link": "https://stackoverflow.com/questions/56437176/returning-value-from-macro-rules-in-rust", "closed_reason": "Duplicate", "title": "Returning value from macro_rules! in Rust", "body": "<p>I am going through <a href=\"https://doc.rust-lang.org/stable/rust-by-example/macros/dsl.html\" rel=\"noreferrer\">Rust by Examples - Macros/DSL</a></p>\n\n<p>The code shows:</p>\n\n<pre><code>macro_rules! calculate {\n    (eval $e:expr) =&gt; {{\n        {\n            let val: usize = $e; // Force types to be integers\n            println!(\"{} = {}\", stringify!{$e}, val);\n        }\n    }};\n}\n\nfn main() {\n    calculate! {\n        eval 1 + 2 // hehehe `eval` is _not_ a Rust keyword!\n    }\n\n    calculate! {\n        eval (1 + 2) * (3 / 4)\n    }\n}\n</code></pre>\n\n<p>Now I want my custom macro <code>calculate</code> to return the calculated value. I tried with the following:</p>\n\n<pre><code>macro_rules! calculate {\n  (eval $e:expr) =&gt; {{\n    let val: usize = $e;\n    println!(\"{} = {}\", stringify!{$e}, val);\n    val\n  }};\n}\n</code></pre>\n\n<p>But it returns me error saying <code>error[E0308]: mismatched types in val, expected type (), found type i32</code>.</p>\n\n<p>How can I modify the above macro to return the calculated value? Thanks.</p>\n"}, {"tags": ["rust", "rust-tokio", "hyper"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1578078424, "last_edit_date": 1578078424, "creation_date": 1559608789, "answer_id": 56436053, "question_id": 56435409, "link": "https://stackoverflow.com/questions/56435409/how-do-i-stream-a-hyper-requests-body-from-a-slow-processing-side-thread-that-p/56436053#56436053", "title": "How do I stream a hyper Request&#39;s Body from a slow-processing side thread that produces chunks of data?", "body": "<p>Spin up a thread in a thread pool and send chunks of data across a channel. The channel implements <code>Stream</code> and a hyper <code>Body</code> can be constructed from a <code>Stream</code> using <a href=\"https://docs.rs/hyper/0.13.1/hyper/struct.Body.html#method.wrap_stream\" rel=\"nofollow noreferrer\"><code>wrap_stream</code></a>:</p>\n\n<pre><code>use futures::{channel::mpsc, executor::ThreadPool, task::SpawnExt, SinkExt, Stream}; // 0.3.1, features = [\"thread-pool\"]\nuse hyper::{\n    service::{make_service_fn, service_fn},\n    Body, Response, Server,\n}; // 0.13.1\nuse std::{convert::Infallible, io, thread, time::Duration};\nuse tokio; // 0.2.6, features = [\"macros\"]\n\nstruct SlowData;\nimpl SlowData {\n    fn new(_initial: &amp;str) -&gt; SlowData {\n        thread::sleep(Duration::from_secs(1));\n        Self\n    }\n\n    fn next_block(&amp;self) -&gt; io::Result&lt;&amp;[u8]&gt; {\n        thread::sleep(Duration::from_secs(1));\n        Ok(b\"data\")\n    }\n}\n\nfn stream(pool: ThreadPool) -&gt; impl Stream&lt;Item = io::Result&lt;Vec&lt;u8&gt;&gt;&gt; {\n    let (mut tx, rx) = mpsc::channel(10);\n\n    pool.spawn(async move {\n        let sd = SlowData::new(\"dummy\");\n\n        for _ in 0..3 {\n            let block = sd.next_block().map(|b| b.to_vec());\n            tx.send(block).await.expect(\"Unable to send block\");\n        }\n    })\n    .expect(\"Unable to spawn thread\");\n\n    rx\n}\n\n#[tokio::main]\nasync fn main() {\n    // Construct our SocketAddr to listen on...\n    let addr = ([127, 0, 0, 1], 3000).into();\n\n    // Create a threadpool (cloning is cheap)...\n    let pool = ThreadPool::new().unwrap();\n\n    // Handle each connection...\n    let make_service = make_service_fn(|_socket| {\n        let pool = pool.clone();\n\n        async {\n            // Handle each request...\n            let svc_fn = service_fn(move |_request| {\n                let pool = pool.clone();\n\n                async {\n                    let data = stream(pool);\n                    let resp = Response::new(Body::wrap_stream(data));\n\n                    Result::&lt;_, Infallible&gt;::Ok(resp)\n                }\n            });\n\n            Result::&lt;_, Infallible&gt;::Ok(svc_fn)\n        }\n    });\n\n    // Bind and serve...\n    let server = Server::bind(&amp;addr).serve(make_service);\n\n    // Finally, run the server\n    if let Err(e) = server.await {\n        eprintln!(\"server error: {}\", e);\n    }\n}\n</code></pre>\n\n<p>When creating a thread, there's no way to avoid copying the slice to a <code>Vec</code>.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/revisions/56436053/1\">This answer for hyper 0.12 and futures 0.1</a></li>\n<li><a href=\"https://stackoverflow.com/q/55708392/155423\">How to send data through a futures Stream by writing through the io::Write trait?</a></li>\n<li><a href=\"https://stackoverflow.com/q/52835725/155423\">What is the purpose of async/await in Rust?</a></li>\n<li><a href=\"https://stackoverflow.com/q/41932137/155423\">What is the best approach to encapsulate blocking I/O in future-rs?</a></li>\n<li><a href=\"https://stackoverflow.com/q/38906680/155423\">How to implement a stream of futures for a blocking call using futures.rs and Redis PubSub?</a></li>\n</ul>\n"}], "owner": {"reputation": 409, "user_id": 2970121, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/d0b21cede510b0bbf986847693a9e075?s=128&d=identicon&r=PG&f=1", "display_name": "njaard", "link": "https://stackoverflow.com/users/2970121/njaard"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 691, "favorite_count": 0, "accepted_answer_id": 56436053, "answer_count": 1, "score": 3, "last_activity_date": 1578078424, "creation_date": 1559602039, "last_edit_date": 1559606335, "question_id": 56435409, "link": "https://stackoverflow.com/questions/56435409/how-do-i-stream-a-hyper-requests-body-from-a-slow-processing-side-thread-that-p", "title": "How do I stream a hyper Request&#39;s Body from a slow-processing side thread that produces chunks of data?", "body": "<p>I have a program which generates data slowly (we can say it's computationally intensive, like computing digits of pi). It produces a <em>lot</em> of data; each response can be 1GiB, will not fit in memory, and <strong>must</strong> be generated on demand. I'm using hyper to write a web service to generate the content when requested.</p>\n\n<p>Let's skip the boilerplate (<code>service_fn</code>, <code>Server::bind</code>).</p>\n\n<p>The API which generates the data slowly might be something like</p>\n\n<pre><code>use std::io;\n\nimpl SlowData {\n    fn new(initial: &amp;str) -&gt; SlowData {\n        unimplemented!()\n    }\n\n    fn next_block(&amp;self) -&gt; io::Result&lt;&amp;[u8]&gt; {\n        unimplemented!()\n    }\n}\n\ntype ResponseFuture = Box&lt;Future&lt;Item = Response, Error = GenericError&gt; + Send&gt;;\n\nfn run(req: Request) -&gt; ResponseFuture {\n    // spawn a thread and:\n    // initialize the generator\n    // SlowData::new(&amp;req.uri().path());\n\n    // spawn a thread and call slow.next_block() until len()==0\n    // each byte which comes from next_block should go to the client\n    // as part of the Body\n}\n</code></pre>\n\n<p>Note that <code>SlowData::new</code> is also computationally intensive.</p>\n\n<p>Optimally, we'd minimize the copies and send that <code>&amp;[u8]</code> directly to hyper without having to copy it into a <code>Vec</code> or something.</p>\n\n<p>How do I fulfill a hyper Request's body from a side thread?</p>\n"}, {"tags": ["visual-studio", "rust", "visual-studio-2017"], "answers": [{"comments": [{"owner": {"reputation": 14946, "user_id": 8188846, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/85a7614508b329eb4a495c59ccf64ac7?s=128&d=identicon&r=PG", "display_name": "Maximilian Burszley", "link": "https://stackoverflow.com/users/8188846/maximilian-burszley"}, "reply_to_user": {"reputation": 11, "user_id": 11019617, "user_type": "registered", "profile_image": "https://graph.facebook.com/2282578638685543/picture?type=large", "display_name": "Debjit Chowdhury", "link": "https://stackoverflow.com/users/11019617/debjit-chowdhury"}, "edited": false, "score": 0, "creation_date": 1559666599, "post_id": 56445339, "comment_id": 99489655, "body": "@DebjitChowdhury Did you restart VS before retrying?  And did you use the rustup containing folder? not a fully-qualified path to the executable?"}, {"owner": {"reputation": 11, "user_id": 11019617, "user_type": "registered", "profile_image": "https://graph.facebook.com/2282578638685543/picture?type=large", "display_name": "Debjit Chowdhury", "link": "https://stackoverflow.com/users/11019617/debjit-chowdhury"}, "edited": false, "score": 0, "creation_date": 1559667072, "post_id": 56445339, "comment_id": 99489886, "body": "Yes but I still think that there has to be something to do with the path to rustup.exe through the visual studio tools option. Actually I am not having a clear idea about where it can be."}], "tags": [], "owner": {"reputation": 14946, "user_id": 8188846, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/85a7614508b329eb4a495c59ccf64ac7?s=128&d=identicon&r=PG", "display_name": "Maximilian Burszley", "link": "https://stackoverflow.com/users/8188846/maximilian-burszley"}, "is_accepted": false, "score": 0, "last_activity_date": 1559656216, "creation_date": 1559656216, "answer_id": 56445339, "question_id": 56435282, "link": "https://stackoverflow.com/questions/56435282/configuring-rustup-for-visual-studio-2017-using-the-rust-extension-for-vs-2017/56445339#56445339", "title": "Configuring rustup for visual studio 2017 using the rust extension for vs 2017", "body": "<p>You need to add it to your <code>PATH</code> environment variable for VS to see it.</p>\n\n<p>In PowerShell:</p>\n\n<pre><code>$rustup = '/path/to/folder/containing/rustup'\n\n$path = (\n    @([Environment]::GetEnvironmentVariable('PATH', 'Machine').Split(';')) + $rustup\n) -join ';'\n\n[Environment]::SetEnvironmentVariable('PATH', $path, 'Machine')\n</code></pre>\n\n<p>You can change the target from <code>'Machine'</code> to <code>'User'</code> if you don't have elevated privileges.</p>\n"}], "owner": {"reputation": 11, "user_id": 11019617, "user_type": "registered", "profile_image": "https://graph.facebook.com/2282578638685543/picture?type=large", "display_name": "Debjit Chowdhury", "link": "https://stackoverflow.com/users/11019617/debjit-chowdhury"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 265, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1559656696, "creation_date": 1559601035, "last_edit_date": 1559656696, "question_id": 56435282, "link": "https://stackoverflow.com/questions/56435282/configuring-rustup-for-visual-studio-2017-using-the-rust-extension-for-vs-2017", "title": "Configuring rustup for visual studio 2017 using the rust extension for vs 2017", "body": "<p>I have installed the Rust extension and have opened a rust project.Now in Tools>Rust where am I supposed to find the rustup.exe file.Actually I found rustup.exe in .cargo>bin folder but I dont think this is the one, i added that but vs 2017 gives the message that\"could not start rls:rustup is not installed or not the path\".Also what should I add in toolchain section if i want stable toolchain.</p>\n"}, {"tags": ["rust", "rust-diesel"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1559589883, "creation_date": 1559589883, "answer_id": 56433410, "question_id": 56432822, "link": "https://stackoverflow.com/questions/56432822/how-do-i-specify-a-diesel-database-url-when-my-password-contains-an-at-sign/56433410#56433410", "title": "How do I specify a Diesel DATABASE_URL when my password contains an at-sign (@)?", "body": "<p>The <code>DATABASE_URL</code> you have provided is not the URL you are attempting to use. <code>@</code> is a special character that separates the credentials from the hostname. Since your credentials contain an <code>@</code>, it needs to be URL escaped:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>postgres://postgres:1schoollife%40@localhost/diesel_demo\n</code></pre>\n\n<p>Diesel maintainer <a href=\"https://github.com/diesel-rs/diesel/issues/871#issuecomment-298227608\" rel=\"nofollow noreferrer\">sgrif said</a>:</p>\n\n<blockquote>\n  <p>Yes, percent encoding is 100% the correct thing for us to be doing.</p>\n</blockquote>\n\n<p>This was implemented in <a href=\"https://github.com/diesel-rs/diesel/pull/1058\" rel=\"nofollow noreferrer\">PR 1058</a></p>\n"}], "owner": {"reputation": 1384, "user_id": 10240085, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/HBxgL.jpg?s=128&g=1", "display_name": "Muhammad Naufil", "link": "https://stackoverflow.com/users/10240085/muhammad-naufil"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1063, "favorite_count": 0, "accepted_answer_id": 56433410, "answer_count": 1, "score": 3, "last_activity_date": 1559589883, "creation_date": 1559587065, "last_edit_date": 1559588569, "question_id": 56432822, "link": "https://stackoverflow.com/questions/56432822/how-do-i-specify-a-diesel-database-url-when-my-password-contains-an-at-sign", "title": "How do I specify a Diesel DATABASE_URL when my password contains an at-sign (@)?", "body": "<p>I am getting started with Diesel by following their <a href=\"https://diesel.rs/guides/getting-started/\" rel=\"nofollow noreferrer\">official documentation</a>. I also have PostgreSQL installed. My database username is <code>postgres</code> and the password is <code>1schoollife@</code>.</p>\n\n<p>I started with</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ echo DATABASE_URL=postgres://postgres:1schoollife@@localhost/diesel_demo &gt; .env\n$ diesel setup\n</code></pre>\n\n<p>results:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Creating migrations directory at: /home/naufil/Desktop/rust/3june/testing/migrations\nCreating database: diesel_demo\ndatabase \"diesel_demo\" already exists\n</code></pre>\n\n<p>I created a migration:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ diesel migration generate create_posts\nCreating migrations/2019-06-03-182531_create_posts/up.sql\nCreating migrations/2019-06-03-182531_create_posts/down.sql\n</code></pre>\n\n<p>I get the following error when migrating the database:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ diesel migration run\nthread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: ConnectionError(BadConnection(\"could not translate host name \\\"@localhost\\\" to address: Name or service not known\\n\"))', src/libcore/result.rs:997:5\nnote: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 13, "user_id": 11594239, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/757729d6b0e07654b2d12b50ed044058?s=128&d=identicon&r=PG&f=1", "display_name": "prograe69", "link": "https://stackoverflow.com/users/11594239/prograe69"}, "edited": false, "score": 0, "creation_date": 1559574449, "post_id": 56429808, "comment_id": 99454528, "body": "Thanks, its working now! But it was pretty confusing to add the semicolon there, i&#39;ll guess i have to read more on this topic"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 13, "user_id": 11594239, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/757729d6b0e07654b2d12b50ed044058?s=128&d=identicon&r=PG&f=1", "display_name": "prograe69", "link": "https://stackoverflow.com/users/11594239/prograe69"}, "edited": false, "score": 1, "creation_date": 1559646967, "post_id": 56429808, "comment_id": 99478863, "body": "@prograe69: This is the difference between an <i>expression</i> which produces a value, and a <i>statement</i> which does not. Since the goal of an expression is to produce a value, it is unexpected when that value is unused. <code>;</code> transforms signals the intent of the programmer: it transforms the expression in a statement as a way of saying &quot;I know it produces a value, I just don&#39;t care about it, throw it away&quot;."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1583171924, "last_edit_date": 1583171924, "creation_date": 1559573448, "answer_id": 56429808, "question_id": 56429484, "link": "https://stackoverflow.com/questions/56429484/what-does-expected-type-mean-on-a-match-expression/56429808#56429808", "title": "What does &quot;expected type `()`&quot; mean on a match expression?", "body": "<p>Add a semicolon after your <code>match</code> expression.</p>\n\n<p>The type of all of the <code>match</code> arms is <code>usize</code>, so the resulting type of the <code>match</code> is also a <code>usize</code>. Your code is effectively</p>\n\n<pre><code>fn main() {\n    {\n        42\n    }\n\n    println!(\"Hi\");\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n --&gt; src/main.rs:3:9\n  |\n3 |         42\n  |         ^^ expected `()`, found integer\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/27668597/155423\">Why don&#39;t we add a semicolon (;) at the end of if/else?</a></li>\n<li><a href=\"https://stackoverflow.com/q/26665471/155423\">Are semicolons optional in Rust?</a></li>\n</ul>\n"}], "owner": {"reputation": 13, "user_id": 11594239, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/757729d6b0e07654b2d12b50ed044058?s=128&d=identicon&r=PG&f=1", "display_name": "prograe69", "link": "https://stackoverflow.com/users/11594239/prograe69"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 354, "favorite_count": 0, "accepted_answer_id": 56429808, "answer_count": 1, "score": 1, "last_activity_date": 1583171924, "creation_date": 1559572346, "last_edit_date": 1559573113, "question_id": 56429484, "link": "https://stackoverflow.com/questions/56429484/what-does-expected-type-mean-on-a-match-expression", "title": "What does &quot;expected type `()`&quot; mean on a match expression?", "body": "<p>I'm rewriting a simple TCP based server to experiment with Rust. It should retrieve input of an client and then match that input to run a function:</p>\n\n<pre><code>use std::io::BufRead;\nuse std::io::BufReader;\nuse std::io::BufWriter;\nuse std::io::Write;\nuse std::net::{TcpListener, TcpStream};\nuse std::thread;\n\nfn handle_connection(stream: TcpStream) {\n    let stream_clone = stream.try_clone().unwrap();\n    let mut reader = BufReader::new(stream);\n    let mut writer = BufWriter::new(stream_clone);\n    loop {\n        let mut s = String::new();\n        reader.read_line(&amp;mut s).unwrap();\n\n        match s.as_str() {\n            //\"test\" =&gt; writer.write(s.as_bytes()).unwrap();\n            \"test\" =&gt; writer.write(b\"test successfull\").unwrap(),\n            _ =&gt; writer.write(b\"Command not recognized...\").unwrap(),\n        }\n\n        writer.flush().unwrap();\n    }\n}\n\nfn main() {\n    let listener = TcpListener::bind(\"127.0.0.1:8888\").unwrap();\n    for stream in listener.incoming() {\n        thread::spawn(move || {\n            handle_connection(stream.unwrap());\n        });\n    }\n}\n</code></pre>\n\n<p>And the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:16:9\n   |\n16 | /         match s.as_str() {\n17 | |             //\"test\" =&gt; writer.write(s.as_bytes()).unwrap();\n18 | |             \"test\" =&gt; writer.write(b\"test successfull\").unwrap(),\n19 | |             _ =&gt; writer.write(b\"Command not recognized...\").unwrap(),\n20 | |         }\n   | |_________^ expected (), found usize\n   |\n   = note: expected type `()`\n              found type `usize`\n</code></pre>\n\n<p>My main problem now is to check the retrieved bytes if they belong to an match and I'm not quite sure how to achieve that.</p>\n\n<p>I couldn't find a fix for this online, <code>rustc --explain</code> didn't help me either</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 5152, "user_id": 1601571, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/56403b8ee9f5066ce3f75b9783cc9b2b?s=128&d=identicon&r=PG", "display_name": "&#214;mer Erden", "link": "https://stackoverflow.com/users/1601571/%c3%96mer-erden"}, "edited": false, "score": 0, "creation_date": 1559540495, "post_id": 56421645, "comment_id": 99438311, "body": "How about using into_iter then collect the results into another vec ?"}, {"owner": {"reputation": 20310, "user_id": 525980, "user_type": "registered", "accept_rate": 48, "profile_image": "https://www.gravatar.com/avatar/8dafe66793ee2f32192e9fcefb389a12?s=128&d=identicon&r=PG", "display_name": "Clinton", "link": "https://stackoverflow.com/users/525980/clinton"}, "reply_to_user": {"reputation": 5152, "user_id": 1601571, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/56403b8ee9f5066ce3f75b9783cc9b2b?s=128&d=identicon&r=PG", "display_name": "&#214;mer Erden", "link": "https://stackoverflow.com/users/1601571/%c3%96mer-erden"}, "edited": false, "score": 0, "creation_date": 1559540604, "post_id": 56421645, "comment_id": 99438342, "body": "I&#39;ve edited the question but no I want to avoid the new allocation as the return type is the same and I&#39;ve taken ownership I want to avoid the new allocation"}, {"owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 2, "creation_date": 1559541920, "post_id": 56421645, "comment_id": 99438670, "body": "Please note that <code>return x</code> as last statement is not concidered as good rust style. See <a href=\"https://stackoverflow.com/q/27961879\">stackoverflow.com/q/27961879</a>"}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1559549002, "post_id": 56421645, "comment_id": 99441391, "body": "Why do you suppose it will do a new allocation ? Compiler could be smart to avoid it. Anyway I don&#39;t think it will cost must."}], "answers": [{"comments": [{"owner": {"reputation": 34798, "user_id": 1362755, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/97aa8c37ffa60c4262955aefae56e605?s=128&d=identicon&r=PG", "display_name": "the8472", "link": "https://stackoverflow.com/users/1362755/the8472"}, "edited": false, "score": 0, "creation_date": 1559560338, "post_id": 56421809, "comment_id": 99446886, "body": "Those complications can be avoided by swapping in a placeholder while temporarily taking out the value"}, {"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "reply_to_user": {"reputation": 34798, "user_id": 1362755, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/97aa8c37ffa60c4262955aefae56e605?s=128&d=identicon&r=PG", "display_name": "the8472", "link": "https://stackoverflow.com/users/1362755/the8472"}, "edited": false, "score": 0, "creation_date": 1559565230, "post_id": 56421809, "comment_id": 99449421, "body": "For that you either need a placeholder supplied (doesn&#39;t even need to be <code>Clone</code>, you can reuse the same placeholder), or a type that is <code>Default</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1559575146, "post_id": 56421809, "comment_id": 99454907, "body": "I&#39;d recommend adding your answer to the duplicate; as it appears to not be present there."}], "tags": [], "owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "is_accepted": true, "score": 5, "last_activity_date": 1559541411, "creation_date": 1559541411, "answer_id": 56421809, "question_id": 56421645, "link": "https://stackoverflow.com/questions/56421645/map-on-a-vector-without-clone/56421809#56421809", "title": "Map on a vector without clone", "body": "<p>You are essentially encountering the problem the <a href=\"https://github.com/alecmocatta/replace_with\" rel=\"noreferrer\"><code>replace_with</code></a> and <a href=\"https://github.com/Sgeo/take_mut\" rel=\"noreferrer\"><code>take_mut</code></a> crates are trying to solve. Simply putting usage of one of those crates into the for-loop would solve your issue.</p>\n\n<p>Be aware of the caveats though. If the map callback panics, bad things happen. This is because what you want to do is move the object out of its location, call a function, then put the result back into the location. But if the function doesn't produce a result, i.e. panics, what do you put in the empty location?</p>\n"}, {"tags": [], "owner": {"reputation": 9958, "user_id": 2188562, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/DMWEc.png?s=128&g=1", "display_name": "Peter Varo", "link": "https://stackoverflow.com/users/2188562/peter-varo"}, "is_accepted": false, "score": 0, "last_activity_date": 1559542275, "last_edit_date": 1559542275, "creation_date": 1559541507, "answer_id": 56421828, "question_id": 56421645, "link": "https://stackoverflow.com/questions/56421645/map-on-a-vector-without-clone/56421828#56421828", "title": "Map on a vector without clone", "body": "<p>The only difference in this working example is that the callback takes a reference to <code>T</code> and not <code>T</code> itself but still not a mutable one:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn map_vec&lt;F, T&gt;(f: F, x: Vec&lt;T&gt;) -&gt; Vec&lt;T&gt;\nwhere\n    F: Fn(&amp;T) -&gt; T,\n{\n    let mut x = x;\n    for e in x.iter_mut() {\n        *e = f(e);\n    }\n    x\n}\n\nfn main() {\n    let x = vec![1, 2, 3];\n    let y = map_vec(|e| e + 1, x);\n    println!(\"{:?}\", y);\n}\n</code></pre>\n"}], "owner": {"reputation": 20310, "user_id": 525980, "user_type": "registered", "accept_rate": 48, "profile_image": "https://www.gravatar.com/avatar/8dafe66793ee2f32192e9fcefb389a12?s=128&d=identicon&r=PG", "display_name": "Clinton", "link": "https://stackoverflow.com/users/525980/clinton"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 134, "favorite_count": 0, "closed_date": 1559575119, "accepted_answer_id": 56421809, "answer_count": 2, "score": 2, "last_activity_date": 1559542275, "creation_date": 1559540077, "last_edit_date": 1559541886, "question_id": 56421645, "link": "https://stackoverflow.com/questions/56421645/map-on-a-vector-without-clone", "closed_reason": "Duplicate", "title": "Map on a vector without clone", "body": "<p>I'm trying to write a function with this signature, without using <code>clone()</code> or allocating a new vector:</p>\n\n<pre><code>fn mapVec(f: Fn(T) -&gt; T, x: Vec&lt;T&gt;) -&gt; Vec&lt;T&gt;\n</code></pre>\n\n<p>In my head, this seems to be doable. For each element in <code>x</code>, we pass it to <code>f</code>, with <code>f</code> taking ownership of it. We then produce a return value, and then as <code>f</code> has taken ownership this passed value, it destroys it if necessary. We then place the return value in place back into the vector. As we've taken ownership of <code>x</code>, we're allowed to modify it, and then we can return it to the caller. </p>\n\n<p>My attempt was the following:</p>\n\n<pre><code>for e in x.iter_mut() {\n    *e = f(e);\n}\nreturn x;\n</code></pre>\n\n<p>But unfortunately <code>f</code> expects a <code>T</code>, not a <code>&amp;mut T</code>. </p>\n\n<p>I don't want to change the signature of <code>mapVec</code> to for example, use mutable functions, I want this to look like a pure function from the outside if possible, just taking advantage of mutation on the inside because we can get away with it because the caller has passed us ownership of the object.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 22505, "user_id": 1411457, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/XqssD.png?s=128&g=1", "display_name": "harmic", "link": "https://stackoverflow.com/users/1411457/harmic"}, "edited": false, "score": 0, "creation_date": 1559545071, "post_id": 56420793, "comment_id": 99439721, "body": "The fact that <code>FnOnce</code> consumes self also means that if you require that, your function can only be used once, even if it is a <code>Fn</code>, right? That also seems restrictive"}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "reply_to_user": {"reputation": 22505, "user_id": 1411457, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/XqssD.png?s=128&g=1", "display_name": "harmic", "link": "https://stackoverflow.com/users/1411457/harmic"}, "edited": false, "score": 0, "creation_date": 1559559530, "post_id": 56420793, "comment_id": 99446488, "body": "@harmic that the opposite &quot;Since both Fn and FnMut are subtraits of FnOnce, any instance of Fn or FnMut can be used where a FnOnce is expected.&quot;"}], "tags": [], "owner": {"reputation": 2659, "user_id": 8050514, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/6CRdl.jpg?s=128&g=1", "display_name": "Optimistic Peach", "link": "https://stackoverflow.com/users/8050514/optimistic-peach"}, "is_accepted": false, "score": 2, "last_activity_date": 1559532454, "creation_date": 1559532454, "answer_id": 56420793, "question_id": 56420597, "link": "https://stackoverflow.com/questions/56420597/should-i-pass-function-objects-by-value-or-by-reference/56420793#56420793", "title": "Should I pass function objects by value or by reference?", "body": "<p>The reason that <code>Option::map</code> takes a closure by value, is that it has the <a href=\"https://doc.rust-lang.org/src/core/option.rs.html#412-417\" rel=\"nofollow noreferrer\">following signature</a>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub fn map&lt;U, F: FnOnce(T) -&gt; U&gt;(self, f: F) -&gt; Option&lt;U&gt;\n</code></pre>\n\n<p>This therefore means that it <em>needs</em> to take it by value, because the definition of <code>FnOnce</code> is the <a href=\"https://doc.rust-lang.org/src/core/ops/function.rs.html#224-232\" rel=\"nofollow noreferrer\">following</a>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub trait FnOnce&lt;Args&gt; {\n    type Output;\n    extern \"rust-call\" fn call_once(self, args: Args) -&gt; Self::Output;\n}\n</code></pre>\n\n<p>Also, this <code>Fn</code> variant is the least restrictive, and therefore the most usable, because <code>FnMut: FnOnce</code> and <code>Fn: FnMut</code>, so <code>FnOnce</code> is the least derived.<br>\nSo, from this we can infer:  </p>\n\n<ul>\n<li><code>Option::map</code> is trying to make its arguments the least restrictive  </li>\n<li><code>FnOnce</code> is the least restrictive  </li>\n<li><code>FnOnce</code> needs to take <code>self</code> by value  </li>\n<li>Therefore <code>Option::map</code> takes <code>f</code> by value because otherwise <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=17ee7d675623671843f0115a5b44fa80\" rel=\"nofollow noreferrer\">it'd be useless</a>. </li>\n</ul>\n"}, {"comments": [{"owner": {"reputation": 20310, "user_id": 525980, "user_type": "registered", "accept_rate": 48, "profile_image": "https://www.gravatar.com/avatar/8dafe66793ee2f32192e9fcefb389a12?s=128&d=identicon&r=PG", "display_name": "Clinton", "link": "https://stackoverflow.com/users/525980/clinton"}, "edited": false, "score": 0, "creation_date": 1559532815, "post_id": 56420814, "comment_id": 99436774, "body": "I&#39;m still not clear why I would go for the second option over the first? You stated: &quot;if some type F implements Fn, then &amp;F also implements Fn.&quot; You haven&#39;t said that if &amp;F implements Fn then F implements Fn, so that statement tends to imply that &amp;F is the more general approach."}, {"owner": {"reputation": 3683, "user_id": 4371758, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a60b9f124beca310b9bba6762c7aabbd?s=128&d=identicon&r=PG&f=1", "display_name": "Bubletan", "link": "https://stackoverflow.com/users/4371758/bubletan"}, "reply_to_user": {"reputation": 20310, "user_id": 525980, "user_type": "registered", "accept_rate": 48, "profile_image": "https://www.gravatar.com/avatar/8dafe66793ee2f32192e9fcefb389a12?s=128&d=identicon&r=PG", "display_name": "Clinton", "link": "https://stackoverflow.com/users/525980/clinton"}, "edited": false, "score": 0, "creation_date": 1559533375, "post_id": 56420814, "comment_id": 99436878, "body": "@Clinton What I meant by that, was that if you had a reference, you could still pass it without dereferencing. In the other case, if you required a reference, you would have to create one in case you had a non-reference. In the example given in the answer, you would have to pass <code>&amp;f</code> instead."}, {"owner": {"reputation": 20310, "user_id": 525980, "user_type": "registered", "accept_rate": 48, "profile_image": "https://www.gravatar.com/avatar/8dafe66793ee2f32192e9fcefb389a12?s=128&d=identicon&r=PG", "display_name": "Clinton", "link": "https://stackoverflow.com/users/525980/clinton"}, "edited": false, "score": 0, "creation_date": 1559533586, "post_id": 56420814, "comment_id": 99436921, "body": "I&#39;m still not understanding why you&#39;re suggesting the by value approach. All you&#39;ve seemed to say is that <i>most</i> of the time <code>Fn</code>s a copyable, but it seems to me that passing by reference works all the time. If you point out a downside to option 1 I might understand why option 2 is the better approach."}, {"owner": {"reputation": 3683, "user_id": 4371758, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a60b9f124beca310b9bba6762c7aabbd?s=128&d=identicon&r=PG&f=1", "display_name": "Bubletan", "link": "https://stackoverflow.com/users/4371758/bubletan"}, "reply_to_user": {"reputation": 20310, "user_id": 525980, "user_type": "registered", "accept_rate": 48, "profile_image": "https://www.gravatar.com/avatar/8dafe66793ee2f32192e9fcefb389a12?s=128&d=identicon&r=PG", "display_name": "Clinton", "link": "https://stackoverflow.com/users/525980/clinton"}, "edited": false, "score": 0, "creation_date": 1559534201, "post_id": 56420814, "comment_id": 99437034, "body": "@Clinton The downside is forced indirection. Like I said, you would have to write <code>&amp;f</code> instead of just <code>f</code>. If you have &amp;F that implements Fn, you can still pass it just as it is."}], "tags": [], "owner": {"reputation": 3683, "user_id": 4371758, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a60b9f124beca310b9bba6762c7aabbd?s=128&d=identicon&r=PG&f=1", "display_name": "Bubletan", "link": "https://stackoverflow.com/users/4371758/bubletan"}, "is_accepted": false, "score": 2, "last_activity_date": 1559532633, "creation_date": 1559532633, "answer_id": 56420814, "question_id": 56420597, "link": "https://stackoverflow.com/questions/56420597/should-i-pass-function-objects-by-value-or-by-reference/56420814#56420814", "title": "Should I pass function objects by value or by reference?", "body": "<p>The documentation of the <a href=\"https://doc.rust-lang.org/std/ops/trait.Fn.html\" rel=\"nofollow noreferrer\">Fn</a> trait states that if some type F implements Fn, then &amp;F also implements Fn.</p>\n\n<p>In the documentation of the <a href=\"https://doc.rust-lang.org/std/marker/trait.Copy.html\" rel=\"nofollow noreferrer\">Copy</a> trait, it is mentioned that the trait is automatically implemented for function pointers and closures (depending on what they capture of course). That is, they are copied when passed as a parameter to a function.</p>\n\n<p>Therefore you should go with the second option.</p>\n\n<p>An example:</p>\n\n<pre><code>fn foo(f: impl Fn(i32) -&gt; i32) -&gt; i32 { f(42) }\n\nfn bar() {\n    let f = |x| -&gt; 2 * x;\n    foo(f);\n    foo(f); // f is copied and can thus be used\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 7, "last_activity_date": 1559574687, "last_edit_date": 1559574687, "creation_date": 1559552433, "answer_id": 56424095, "question_id": 56420597, "link": "https://stackoverflow.com/questions/56420597/should-i-pass-function-objects-by-value-or-by-reference/56424095#56424095", "title": "Should I pass function objects by value or by reference?", "body": "<p><strong>TL;DR:</strong> You should use <code>F: Fn() -&gt; ()</code> or <code>impl Fn() -&gt; ()</code> as an argument.</p>\n\n<h1><code>Fn</code></h1>\n\n<p>As @Bubletan mentioned <a href=\"https://stackoverflow.com/a/56420814/147192\">in their answer</a>, the key point is that <code>Fn</code> is <a href=\"https://doc.rust-lang.org/std/ops/trait.Fn.html#implementors\" rel=\"nofollow noreferrer\">automatically implemented</a> for <code>&amp;F</code> if <code>F</code> implements <code>Fn</code>:</p>\n\n<pre><code>impl&lt;'_, A, F&gt; Fn&lt;A&gt; for &amp;'_ F\nwhere\n    F: Fn&lt;A&gt; + ?Sized,\n</code></pre>\n\n<p>The consequence is that:</p>\n\n<ul>\n<li><code>foo(f: impl Fn() -&gt; ())</code> can be called <em>both</em> with <code>foo(callable)</code> or <code>foo(&amp;callable)</code>.</li>\n<li><code>foo(f: &amp;impl Fn() -&gt; ())</code> <em>forces</em> the caller to use <code>foo(&amp;callable)</code> and disallow <code>foo(callable)</code>.</li>\n</ul>\n\n<p>In general, it is best to leave the choice to the caller when there is downside for the callee, and therefore the first form should be preferred.</p>\n\n<h1><code>FnMut</code></h1>\n\n<p>The same logic applies to <code>FnMut</code>, which is also <a href=\"https://doc.rust-lang.org/std/ops/trait.FnMut.html#implementors\" rel=\"nofollow noreferrer\">automatically implemented</a> for <code>&amp;mut F</code> if <code>F</code> implements <code>FnMut</code>:</p>\n\n<pre><code>impl&lt;'_, A, F&gt; FnMut&lt;A&gt; for &amp;'_ mut F\nwhere\n    F: FnMut&lt;A&gt; + ?Sized, \n</code></pre>\n\n<p>Which should therefore also be passed by value in arguments, leaving the choice to the caller as to whether they prefer <code>foo(callable)</code> or <code>foo(&amp;mut callable)</code>.</p>\n\n<h1><code>FnOnce</code></h1>\n\n<p>There is the argument of consistency with <code>FnOnce</code>, which can only be passed by value, which again points into the direction of taking arguments of the <code>Fn*</code> family by value.</p>\n"}], "owner": {"reputation": 20310, "user_id": 525980, "user_type": "registered", "accept_rate": 48, "profile_image": "https://www.gravatar.com/avatar/8dafe66793ee2f32192e9fcefb389a12?s=128&d=identicon&r=PG", "display_name": "Clinton", "link": "https://stackoverflow.com/users/525980/clinton"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 310, "favorite_count": 0, "accepted_answer_id": 56424095, "answer_count": 3, "score": 8, "last_activity_date": 1559574687, "creation_date": 1559530008, "last_edit_date": 1559574587, "question_id": 56420597, "link": "https://stackoverflow.com/questions/56420597/should-i-pass-function-objects-by-value-or-by-reference", "title": "Should I pass function objects by value or by reference?", "body": "<p>There seems to be two ways to pass functions as arguments which don't do dynamic dispatch:</p>\n\n<ol>\n<li><code>&amp;impl Fn(TIn) -&gt; TOut // By reference</code></li>\n<li><code>impl Fn(TIn) -&gt; TOut  // By value</code></li>\n</ol>\n\n<p>Assuming the function is pure (i.e. can be called multiple times), my initial thoughts were that the best way is to pass by reference. This means a function object can be used more than once (as ownership isn't transferred), and in the more common case where it's just an anonymous closure, the reference indirection should be optimised away because the compiler knows exactly the function itself (so it can just be inlined).</p>\n\n<p>However, I've noticed <code>Option::map</code> for example, passes it's closure by value, which made me think maybe I was doing something wrong.  </p>\n\n<p>Should I pass function objects by value or by reference? If there's no clear answer either way, what are the factors I should consider?</p>\n"}, {"tags": ["rust", "lifetime", "unsafe"], "comments": [{"owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 0, "creation_date": 1559539874, "post_id": 56420444, "comment_id": 99438147, "body": "Depends on many factors, e.g. does <code>Arena</code> drop its values when it goes out of scope? If yes, then it is not valid to do."}, {"owner": {"reputation": 1915, "user_id": 2682729, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/PZlkg.gif?s=128&g=1", "display_name": "typesanitizer", "link": "https://stackoverflow.com/users/2682729/typesanitizer"}, "reply_to_user": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 0, "creation_date": 1559540272, "post_id": 56420444, "comment_id": 99438256, "body": "If you look at the typed-arena crate, it does drop the data. If you can&#39;t store the references, then how do you use the arena for non-trivial code? Do people not face this problem with arenas in practice?"}, {"owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 2, "creation_date": 1559542035, "post_id": 56420444, "comment_id": 99438698, "body": "They don&#39;t use unsafe and the borrow checker is preventing them from doing bad things ;) (Also it&#39;s not my task to look at the crate (which you haven&#39;t linked!), but yours as the one who asks the question)."}, {"owner": {"reputation": 1915, "user_id": 2682729, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/PZlkg.gif?s=128&g=1", "display_name": "typesanitizer", "link": "https://stackoverflow.com/users/2682729/typesanitizer"}, "reply_to_user": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 0, "creation_date": 1559542664, "post_id": 56420444, "comment_id": 99438864, "body": "&quot;They don&#39;t use unsafe and the borrow checker is preventing them from doing bad things&quot; -- that is not very helpful. The question is: &quot;how do I solve this problem?&quot;. Answering &quot;don&#39;t do X&quot; without presenting alternatives doesn&#39;t solve my problem."}, {"owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 0, "creation_date": 1559545372, "post_id": 56420444, "comment_id": 99439852, "body": "True that. Have you thought about making it <code>static</code>, e.g. with the <code>lazy_static</code> crate?"}, {"owner": {"reputation": 1915, "user_id": 2682729, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/PZlkg.gif?s=128&g=1", "display_name": "typesanitizer", "link": "https://stackoverflow.com/users/2682729/typesanitizer"}, "reply_to_user": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 0, "creation_date": 1559579357, "post_id": 56420444, "comment_id": 99456994, "body": "@hellow no I cannot have static lifetimes, I need to deallocate the arena at some point later."}], "answers": [{"comments": [{"owner": {"reputation": 1915, "user_id": 2682729, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/PZlkg.gif?s=128&g=1", "display_name": "typesanitizer", "link": "https://stackoverflow.com/users/2682729/typesanitizer"}, "edited": false, "score": 1, "creation_date": 1559565014, "post_id": 56427189, "comment_id": 99449302, "body": "Ok, I understand what the problem is. Now, how do I solve it? How do I use the arena and store references into it? Do I refactor my data types (c.f. the reddit link where I consider some options)? Something else?"}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "reply_to_user": {"reputation": 1915, "user_id": 2682729, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/PZlkg.gif?s=128&g=1", "display_name": "typesanitizer", "link": "https://stackoverflow.com/users/2682729/typesanitizer"}, "edited": false, "score": 0, "creation_date": 1559572548, "post_id": 56427189, "comment_id": 99453442, "body": "@theindigamer Perhaps you could own the arena outside of the struct and avoid unsafe code altogether. I&#39;ll add an example."}, {"owner": {"reputation": 1915, "user_id": 2682729, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/PZlkg.gif?s=128&g=1", "display_name": "typesanitizer", "link": "https://stackoverflow.com/users/2682729/typesanitizer"}, "edited": false, "score": 0, "creation_date": 1559581006, "post_id": 56427189, "comment_id": 99457742, "body": "Hmm, this does solve the problem with using Arena. Thanks. However, I ran into the same problem with <a href=\"https://docs.rs/string-interner/0.7.0/string_interner/struct.StringInterner.html#method.get_or_intern\" rel=\"nofollow noreferrer\">string interning</a> which (correctly) needs <code>&amp;mut StringInterner</code> compared to <code>&amp;Arena</code> for the allocator. Moreover, the Arena potentially <a href=\"https://github.com/SimonSapin/rust-typed-arena/blob/9fd9b4ed4015790a60cf854899412c62b007c362/src/lib.rs#L167\" rel=\"nofollow noreferrer\">panics at runtime</a> in a multi-threaded situation behind this seemingly safe API. Oh well :-/."}], "tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": true, "score": 4, "last_activity_date": 1559581392, "last_edit_date": 1559581392, "creation_date": 1559564135, "answer_id": 56427189, "question_id": 56420444, "link": "https://stackoverflow.com/questions/56420444/when-is-it-safe-to-extend-the-lifetime-of-references-into-arenas/56427189#56427189", "title": "When is it safe to extend the lifetime of references into Arenas?", "body": "<blockquote>\n  <p>Is it safe to extend the lifetime of a reference into the arena so long as it is bound by the lifetime of the main struct?</p>\n</blockquote>\n\n<p>The <code>Arena</code> will be dropped along with <code>Foo</code> so, in principle, this <em>would</em> be safe, but it would also be unnecessary because the <code>Arena</code> <em>already</em> lives long enough.</p>\n\n<p>However, this is not what your code is actually doing! The lifetime <code>'f</code> could be longer that the lifetime of the struct \u2014 it can be as long as the shortest-lived reference inside <code>v</code>. For example:</p>\n\n<pre><code>fn main() {\n    let n = 1u64;\n    let v = vec![&amp;n];\n    let bar;\n    {\n        let mut foo = Foo { a: Arena::new(), v };\n        bar = foo.bar(2);\n        // foo is dropped here, along with the Arena\n    }\n    // bar is still useable here because 'f is the full scope of `n`\n    println!(\"bar = {:?}\", bar); // Some(8021790808186446178) - oops!\n}\n</code></pre>\n\n<p>Trying to pretend that the lifetime is longer than it really is has created an opportunity for Undefined Behaviour in safe code.</p>\n\n<hr>\n\n<p>A possible fix is to own the <code>Arena</code> outside of the <code>struct</code> and rely on the borrow checker to make sure that it is not dropped while it is still in use:</p>\n\n<pre><code>struct Foo&lt;'f&gt; {\n    a: &amp;'f Arena&lt;u64&gt;,\n    v: Vec&lt;&amp;'f u64&gt;,\n}\n\nimpl&lt;'f&gt; Foo&lt;'f&gt; {\n    pub bar(&amp;mut self, n: u64) -&gt; Option&lt;&amp;'f u64&gt; {\n        if n == 0 {\n            None\n        } else {\n            Some(self.a.alloc(n))\n        }\n    }\n}\n\nfn main() {\n    let arena = Arena::new();\n    let n = 1u64;\n    let v = vec![&amp;n];\n    let bar;\n    {\n        let mut foo = Foo { a: &amp;arena, v };\n        bar = foo.bar(2);\n    }\n    println!(\"bar = {:?}\", bar); // Some(2)\n}\n</code></pre>\n\n<p>Just like your unsafe version, the lifetimes express that the reference to the <code>Arena</code> must be valid for at least as long as the items in the <code>Vec</code>. However, this also enforces that this fact is true! Since there is no unsafe code, you can trust the borrow-checker that this will not trigger UB. </p>\n"}], "owner": {"reputation": 1915, "user_id": 2682729, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/PZlkg.gif?s=128&g=1", "display_name": "typesanitizer", "link": "https://stackoverflow.com/users/2682729/typesanitizer"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 92, "favorite_count": 0, "accepted_answer_id": 56427189, "answer_count": 1, "score": 1, "last_activity_date": 1559581392, "creation_date": 1559528425, "last_edit_date": 1559573778, "question_id": 56420444, "link": "https://stackoverflow.com/questions/56420444/when-is-it-safe-to-extend-the-lifetime-of-references-into-arenas", "title": "When is it safe to extend the lifetime of references into Arenas?", "body": "<p>I have a struct which uses <a href=\"https://docs.rs/typed-arena/1.4.1/typed_arena/struct.Arena.html\" rel=\"nofollow noreferrer\"><code>Arena</code></a>:</p>\n\n<pre><code>struct Foo&lt;'f&gt; {\n    a: Arena&lt;u64&gt;, // from the typed-arena crate\n    v: Vec&lt;&amp;'f u64&gt;,\n}\n</code></pre>\n\n<p>Is it safe to extend the lifetime of a reference into the arena so long as it is bound by the lifetime of the main struct?</p>\n\n<pre><code>impl&lt;'f&gt; Foo&lt;'f&gt; {\n    pub fn bar(&amp;mut self, n: u64) -&gt; Option&lt;&amp;'f u64&gt; {\n        if n == 0 {\n            None\n        } else {\n            let n_ref = unsafe { std::mem::transmute(self.a.alloc(n)) };\n            Some(n_ref)\n        }\n    }\n}\n</code></pre>\n\n<p>For more context, see this <a href=\"https://www.reddit.com/r/rust/comments/btj5ik/hey_rustaceans_got_an_easy_question_ask_here/eptkhan?utm_source=share&amp;utm_medium=web2x\" rel=\"nofollow noreferrer\">Reddit comment</a>.</p>\n"}, {"tags": ["c", "rust", "atomic", "memory-barriers"], "comments": [{"owner": {"reputation": 7287, "user_id": 963864, "user_type": "registered", "accept_rate": 17, "profile_image": "https://www.gravatar.com/avatar/94e2dd813e278309b6281b4a4b7fdddd?s=128&d=identicon&r=PG", "display_name": "curiousguy", "link": "https://stackoverflow.com/users/963864/curiousguy"}, "edited": false, "score": 4, "creation_date": 1559524005, "post_id": 56419723, "comment_id": 99435625, "body": "Correct according to which written specification or unwritten implicit set of assumptions? Technically a data race causes UB. With a volatile access you get the native CPU behavior for a data race (which is well defined). But I&#39;d think mixing volatile and atomics and fences is well defined; in particular fences are defined as ordering atomics not volatile accesses. Stuff might happen to &quot;work&quot; that is be compiled to code that happens to provide guaranteed correct behavior (provable at the generated asm level), by accident, and might break that with a newer, better compiler."}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 1, "creation_date": 1559560382, "post_id": 56419723, "comment_id": 99446904, "body": "I&#39;m think your question require a book so I vote as too broad, even if it&#39;s an interesting question"}, {"owner": {"reputation": 2371, "user_id": 4140668, "user_type": "registered", "accept_rate": 52, "profile_image": "https://www.gravatar.com/avatar/50c0905a6e33a9fa6f7e050c09ed1277?s=128&d=identicon&r=PG", "display_name": "lz96", "link": "https://stackoverflow.com/users/4140668/lz96"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1559584084, "post_id": 56419723, "comment_id": 99458997, "body": "@Stargateur Yeah... but I guess I&#39;m going to publish my understanding before it gets closed"}, {"owner": {"reputation": 7287, "user_id": 963864, "user_type": "registered", "accept_rate": 17, "profile_image": "https://www.gravatar.com/avatar/94e2dd813e278309b6281b4a4b7fdddd?s=128&d=identicon&r=PG", "display_name": "curiousguy", "link": "https://stackoverflow.com/users/963864/curiousguy"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1559596648, "post_id": 56419723, "comment_id": 99463586, "body": "@Stargateur Requires a book?"}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "reply_to_user": {"reputation": 7287, "user_id": 963864, "user_type": "registered", "accept_rate": 17, "profile_image": "https://www.gravatar.com/avatar/94e2dd813e278309b6281b4a4b7fdddd?s=128&d=identicon&r=PG", "display_name": "curiousguy", "link": "https://stackoverflow.com/users/963864/curiousguy"}, "edited": false, "score": 0, "creation_date": 1559600716, "post_id": 56419723, "comment_id": 99464742, "body": "@curiousguy when a question need an very long answer like the size of a book"}, {"owner": {"reputation": 7287, "user_id": 963864, "user_type": "registered", "accept_rate": 17, "profile_image": "https://www.gravatar.com/avatar/94e2dd813e278309b6281b4a4b7fdddd?s=128&d=identicon&r=PG", "display_name": "curiousguy", "link": "https://stackoverflow.com/users/963864/curiousguy"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1559603870, "post_id": 56419723, "comment_id": 99465437, "body": "@Stargateur Then reference that book and cite its conclusion. If the book doesn&#39;t exist, write the book and get some publicity. :D"}, {"owner": {"reputation": 61429, "user_id": 572743, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/9941673f566f229bc536c1c2b558884e?s=128&d=identicon&r=PG&f=1", "display_name": "Damon", "link": "https://stackoverflow.com/users/572743/damon"}, "edited": false, "score": 0, "creation_date": 1562178833, "post_id": 56419723, "comment_id": 100300744, "body": "The way I understand the memory model, <b>all</b> implementations are wrong (but Rigtorp&#39;s is the closest to being correct). An acquiring thread must see all writes that happened before a release [on the same variable] on another thread. Sequentially-consistent ordering imposes a total order. So... <code>seq_cst</code> for the first, and <code>release</code> for the second increment in <code>store()</code> and <code>acquire</code> in <code>load()</code> --- the rest needs not be atomic stuff, and no fences needed. Might be wrong, but this is how I understand it."}, {"owner": {"reputation": 149, "user_id": 9306292, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fefb83e0b1c0b3ab60e314b61d560c35?s=128&d=identicon&r=PG&f=1", "display_name": "Jay-Pi", "link": "https://stackoverflow.com/users/9306292/jay-pi"}, "reply_to_user": {"reputation": 7287, "user_id": 963864, "user_type": "registered", "accept_rate": 17, "profile_image": "https://www.gravatar.com/avatar/94e2dd813e278309b6281b4a4b7fdddd?s=128&d=identicon&r=PG", "display_name": "curiousguy", "link": "https://stackoverflow.com/users/963864/curiousguy"}, "edited": false, "score": 0, "creation_date": 1610038897, "post_id": 56419723, "comment_id": 116012632, "body": "@curiousguy &quot;newer, better compiler&quot; is an exaggeration, as compilers have no completely formalized and sound memory model to define what and how to apply their optimizations. You might even need an additional contract (abstracting/simplifying variable assumptions) to get optimal performance and soundness in all cases, because the corner-case detection could be technically too tricky."}], "owner": {"reputation": 2371, "user_id": 4140668, "user_type": "registered", "accept_rate": 52, "profile_image": "https://www.gravatar.com/avatar/50c0905a6e33a9fa6f7e050c09ed1277?s=128&d=identicon&r=PG", "display_name": "lz96", "link": "https://stackoverflow.com/users/4140668/lz96"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 507, "favorite_count": 4, "answer_count": 0, "score": 23, "last_activity_date": 1559585510, "creation_date": 1559518255, "last_edit_date": 1559585510, "question_id": 56419723, "link": "https://stackoverflow.com/questions/56419723/which-of-these-implementations-of-seqlock-are-correct", "title": "Which of these implementations of seqlock are correct?", "body": "<p>I am studying the implementation of <a href=\"https://en.wikipedia.org/wiki/Seqlock\" rel=\"noreferrer\">Seqlock</a>. However all sources I found implement them differently.</p>\n\n<h2>Linux Kernel</h2>\n\n<p><a href=\"https://github.com/torvalds/linux/blob/master/include/linux/seqlock.h\" rel=\"noreferrer\">Linux kernel implements it like this</a>:</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>static inline unsigned __read_seqcount_begin(const seqcount_t *s)\n{\n    unsigned ret;\n\nrepeat:\n    ret = READ_ONCE(s-&gt;sequence);\n    if (unlikely(ret &amp; 1)) {\n        cpu_relax();\n        goto repeat;\n    }\n    return ret;\n}\n\nstatic inline unsigned raw_read_seqcount_begin(const seqcount_t *s)\n{\n    unsigned ret = __read_seqcount_begin(s);\n    smp_rmb();\n    return ret;\n}\n</code></pre>\n\n<p>Basically, it uses a volatile read plus a read barrier with acquire semantics on the reader side.</p>\n\n<p>When used, subsequent reads are unprotected:</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>struct Data {\n    u64 a, b;\n};\n\n// ...\nread_seqcount_begin(&amp;seq);\nint v1 = d.a, v2 = d.b;\n// ...\n</code></pre>\n\n<h2><a href=\"https://github.com/rigtorp/Seqlock/blob/master/include/rigtorp/Seqlock.h\" rel=\"noreferrer\">rigtorp/Seqlock</a></h2>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>RIGTORP_SEQLOCK_NOINLINE T load() const noexcept {\n  T copy;\n  std::size_t seq0, seq1;\n  do {\n    seq0 = seq_.load(std::memory_order_acquire);\n    std::atomic_signal_fence(std::memory_order_acq_rel);\n    copy = value_;\n    std::atomic_signal_fence(std::memory_order_acq_rel);\n    seq1 = seq_.load(std::memory_order_acquire);\n  } while (seq0 != seq1 || seq0 &amp; 1);\n  return copy;\n}\n</code></pre>\n\n<p>The load of data is still performed without an atomic operation or protection. However, an <code>atomic_signal_fence</code> with acquire-release semantics is added prior to the read, in contrast to the <code>rmb</code> with acquire semantics in Kernel.</p>\n\n<h2><a href=\"https://github.com/Amanieu/seqlock/blob/master/src/lib.rs#L147\" rel=\"noreferrer\">Amanieu/seqlock</a> (Rust)</h2>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub fn read(&amp;self) -&gt; T {\n    loop {\n        // Load the first sequence number. The acquire ordering ensures that\n        // this is done before reading the data.\n        let seq1 = self.seq.load(Ordering::Acquire);\n\n        // If the sequence number is odd then it means a writer is currently\n        // modifying the value.\n        if seq1 &amp; 1 != 0 {\n            // Yield to give the writer a chance to finish. Writing is\n            // expected to be relatively rare anyways so this isn't too\n            // performance critical.\n            thread::yield_now();\n            continue;\n        }\n\n        // We need to use a volatile read here because the data may be\n        // concurrently modified by a writer.\n        let result = unsafe { ptr::read_volatile(self.data.get()) };\n\n        // Make sure the seq2 read occurs after reading the data. What we\n        // ideally want is a load(Release), but the Release ordering is not\n        // available on loads.\n        fence(Ordering::Acquire);\n\n        // If the sequence number is the same then the data wasn't modified\n        // while we were reading it, and can be returned.\n        let seq2 = self.seq.load(Ordering::Relaxed);\n        if seq1 == seq2 {\n            return result;\n        }\n    }\n}\n</code></pre>\n\n<p>No memory barrier between loading <code>seq</code> and <code>data</code>, but instead a volatile read is used here.</p>\n\n<h2><a href=\"http://safari.ece.cmu.edu/MSPC2012/slides_posters/boehm-poster.pdf\" rel=\"noreferrer\">Can Seqlocks Get Along with Programming Language Memory Models? (Variant 3)</a></h2>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>T reader() {\n  int r1, r2;\n  unsigned seq0, seq1;\n  do {\n    seq0 = seq.load(m_o_acquire);\n    r1 = data1.load(m_o_relaxed);\n    r2 = data2.load(m_o_relaxed);\n    atomic_thread_fence(m_o_acquire);\n    seq1 = seq.load(m_o_relaxed);\n  } while (seq0 != seq1 || seq0 &amp; 1);\n  // do something with r1 and r2;\n}\n</code></pre>\n\n<p>Similar to the Rust implementation, but atomic operations instead of <code>volatile_read</code> are used on data. </p>\n\n<h2>Arguments in <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1478r1.html\" rel=\"noreferrer\">P1478R1: Byte-wise atomic memcpy</a></h2>\n\n<p>This paper claims that:</p>\n\n<blockquote>\n  <p>In the general case, there are good semantic reasons to require that all data accesses inside such a seqlock \"critical section\" must be atomic. If we read a pointer p as part of reading the data, and then read *p as well, the code inside the critical section may read from a bad address if the read of p happened to see a half-updated pointer value. In such cases, there is probably no way to avoid reading the pointer with a conventional atomic load, and that's exactly what's desired.</p>\n  \n  <p>However, in many cases, particularly in the multiple process case, seqlock data consists of a single trivially copyable object, and the seqlock \"critical section\" consists of a simple copy operation. Under normal circumstances, this could have been written using memcpy. But that's unacceptable here, since memcpy does not generate atomic accesses, and is (according to our specification anyway) susceptable to data races.</p>\n  \n  <p>Currently to write such code correctly, we need to basically decompose such data into many small lock-free atomic subobjects, and copy them a piece at a time. Treating the data as a single large atomic object would defeat the purpose of the seqlock, since the atomic copy operation would acquire a conventional lock. Our proposal essentially adds a convenient library facility to automate this decomposition into small objects.</p>\n</blockquote>\n\n<h2>My question</h2>\n\n<ol>\n<li>Which of the above implementations are correct? Which are correct but inefficient?</li>\n<li>Can the <code>volatile_read</code> be reordered before the acquire-read of seqlock?</li>\n</ol>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1559513699, "post_id": 56419159, "comment_id": 99434246, "body": "maybe it&#39;s more clear with <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2015&amp;gist=7765d0286fae5d7bcc07cef9ab593884\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1559575922, "post_id": 56419159, "comment_id": 99455314, "body": "By the way, it&#39;s not idiomatic Rust to use explicit <code>return</code> at the end of a block."}], "answers": [{"tags": [], "owner": {"reputation": 183, "user_id": 5114106, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f77c14990b0d85b695f1ec0134140ef2?s=128&d=identicon&r=PG", "display_name": "Technocoder", "link": "https://stackoverflow.com/users/5114106/technocoder"}, "is_accepted": true, "score": 9, "last_activity_date": 1615934300, "last_edit_date": 1615934300, "creation_date": 1559518595, "answer_id": 56419746, "question_id": 56419159, "link": "https://stackoverflow.com/questions/56419159/second-mutable-borrow-error-with-only-one-mutable-borrow/56419746#56419746", "title": "Second mutable borrow error with only one mutable borrow", "body": "<p>The lifetime of <code>'a</code> encompasses the entire function body because the return value needs to borrow <code>self</code>. Hence, the first borrow's scope extends past the if expression and into the entire function body.</p>\n<p>Non Lexical Lifetimes were intended to fix this <a href=\"https://github.com/rust-lang/rust/issues/21906\" rel=\"nofollow noreferrer\">issue</a> by reducing the scope of the first borrow to only include the if expression. You can see this in effect by moving the borrowed value into a local variable <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2015&amp;gist=d56b7e45e1deca53b341b52405b215eb\" rel=\"nofollow noreferrer\">(playground)</a>:</p>\n<pre class=\"lang-rs prettyprint-override\"><code>fn get(&amp;mut self) -&gt; Option&lt;&amp;mut i32&gt; {\n    let value = &amp;mut self.value;\n    if let Some(val) = value {\n        return Some(val);\n    }\n    return value.as_mut();\n}\n</code></pre>\n<p>However, the support for conditionally returning values was <a href=\"http://smallcultfollowing.com/babysteps/blog/2018/06/15/mir-based-borrow-check-nll-status-update/\" rel=\"nofollow noreferrer\">removed</a> because it took too much compilation time. This feature is still being worked on and can be enabled with the <code>-Zpolonius</code> flag:<br />\n<code>RUSTFLAGS=&quot;-Zpolonius&quot; cargo +nightly build</code></p>\n<p>With which, the original code compiles fine.</p>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user9816780"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 360, "favorite_count": 0, "closed_date": 1559575972, "accepted_answer_id": 56419746, "answer_count": 1, "score": 2, "last_activity_date": 1615934300, "creation_date": 1559511926, "last_edit_date": 1559575896, "question_id": 56419159, "link": "https://stackoverflow.com/questions/56419159/second-mutable-borrow-error-with-only-one-mutable-borrow", "closed_reason": "Duplicate", "title": "Second mutable borrow error with only one mutable borrow", "body": "<p>This doesn't make much sense because it returns the same thing regardless of the <code>if let</code>, but it is a concise example of the problem that I am running into:</p>\n\n<pre><code>struct Data {\n    value: Option&lt;i32&gt;,\n}\n\nimpl Data {\n    fn get(&amp;mut self) -&gt; Option&lt;&amp;mut i32&gt; {\n        if let Some(val) = &amp;mut self.value {\n            return Some(val);\n        }\n\n        return self.value.as_mut();\n    }\n}\n</code></pre>\n\n<p>This code produces the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0499]: cannot borrow `self.value` as mutable more than once at a time\n  --&gt; src/lib.rs:11:16\n   |\n6  |     fn get(&amp;mut self) -&gt; Option&lt;&amp;mut i32&gt; {\n   |            - let's call the lifetime of this reference `'1`\n7  |         if let Some(val) = &amp;mut self.value {\n   |                            --------------- first mutable borrow occurs here\n8  |             return Some(val);\n   |                    --------- returning this value requires that `self.value` is borrowed for `'1`\n...\n11 |         return self.value.as_mut();\n   |                ^^^^^^^^^^ second mutable borrow occurs here\n</code></pre>\n\n<p>I don't understand why this is a second mutable borrow when the first one goes out of scope before the second one will ever occur.</p>\n\n<p>The <code>val</code> variable is not in scope after the <code>if let</code>, so how is this a second borrow? The first borrow should have already been released.</p>\n\n<p>Just to be completely sure, I even surrounded the <code>if let</code> with another block:</p>\n\n<pre><code>{\n    if let Some(val) = &amp;mut self.value {\n        return Some(val);\n    }\n}\n\nreturn self.value.as_mut();\n</code></pre>\n\n<p>This produced the same error. What is going on here?</p>\n"}, {"tags": ["methods", "rust", "function-pointers"], "answers": [{"comments": [{"owner": {"reputation": 4733, "user_id": 922445, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/a469120d35647d9aa50646cb4d778c71?s=128&d=identicon&r=PG&f=1", "display_name": "Nulik", "link": "https://stackoverflow.com/users/922445/nulik"}, "edited": false, "score": 0, "creation_date": 1559505412, "post_id": 56418489, "comment_id": 99432657, "body": "may I ask what would the type of the <code>func_ptr</code> variable be, if I would want to write it with colon notation, like this: <code>let func_ptr: Fn() = Foo::method;</code>"}, {"owner": {"reputation": 4733, "user_id": 922445, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/a469120d35647d9aa50646cb4d778c71?s=128&d=identicon&r=PG&f=1", "display_name": "Nulik", "link": "https://stackoverflow.com/users/922445/nulik"}, "edited": false, "score": 0, "creation_date": 1559505641, "post_id": 56418489, "comment_id": 99432692, "body": "so, this means, that  the <code>Fn</code> , <code>FnOnce</code>, and <code>FnMut</code>  traits are used only for closures, right?"}, {"owner": {"reputation": 9958, "user_id": 2188562, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/DMWEc.png?s=128&g=1", "display_name": "Peter Varo", "link": "https://stackoverflow.com/users/2188562/peter-varo"}, "reply_to_user": {"reputation": 4733, "user_id": 922445, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/a469120d35647d9aa50646cb4d778c71?s=128&d=identicon&r=PG&f=1", "display_name": "Nulik", "link": "https://stackoverflow.com/users/922445/nulik"}, "edited": false, "score": 0, "creation_date": 1559506132, "post_id": 56418489, "comment_id": 99432806, "body": "@Nulik the problem here with those traits is that they are not implementing the <code>std::marker::Sized</code> and all local variables must have a statically known size.  Function pointers on the other hand have fixed sizes, so they can be used as types of local variables."}, {"owner": {"reputation": 9958, "user_id": 2188562, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/DMWEc.png?s=128&g=1", "display_name": "Peter Varo", "link": "https://stackoverflow.com/users/2188562/peter-varo"}, "reply_to_user": {"reputation": 4733, "user_id": 922445, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/a469120d35647d9aa50646cb4d778c71?s=128&d=identicon&r=PG&f=1", "display_name": "Nulik", "link": "https://stackoverflow.com/users/922445/nulik"}, "edited": false, "score": 0, "creation_date": 1559506476, "post_id": 56418489, "comment_id": 99432884, "body": "@Nulik for further info on this, consult <b>The Book</b>: <a href=\"https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait\" rel=\"nofollow noreferrer\">doc.rust-lang.org/book/&hellip;</a>"}, {"owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "edited": false, "score": 0, "creation_date": 1559569676, "post_id": 56418489, "comment_id": 99451867, "body": "If you want to bind <code>self</code> so that you don&#39;t need to specify it at the call site, you can use a closure: <code>let mut func_ptr = |arg: i32| { self.method (arg) };</code>"}], "tags": [], "owner": {"reputation": 9958, "user_id": 2188562, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/DMWEc.png?s=128&g=1", "display_name": "Peter Varo", "link": "https://stackoverflow.com/users/2188562/peter-varo"}, "is_accepted": true, "score": 4, "last_activity_date": 1559573632, "last_edit_date": 1559573632, "creation_date": 1559505226, "answer_id": 56418489, "question_id": 56418439, "link": "https://stackoverflow.com/questions/56418439/how-to-call-a-method-through-a-function-pointer/56418489#56418489", "title": "How to call a method through a function pointer?", "body": "<p>Methods do not bind the <code>self</code> argument, but you can get access to the methods via their fully qualified names and you can save them in a function pointer if you like.  Later on, when you invoke the function pointer you have to provide the <code>self</code> argument yourself:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct Foo {\n    var: i32,\n}\n\nimpl Foo {\n    fn method(&amp;mut self, value: i32) {\n        self.var += value;\n        println!(\"var = {}\", self.var);\n    }\n}\n\nfn main() {\n    let mut foo = Foo { var: 11 };\n    let func_ptr = Foo::method;\n    func_ptr(&amp;mut foo, 12);\n}\n</code></pre>\n\n<p>If you'd like to manually define the type of this local variable then it would be the following:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let func_ptr: fn(&amp;mut Foo, i32) = Foo::method;\n</code></pre>\n\n<p>If you'd like to use the trait notation, you have to use it behind a reference:</p>\n\n<pre><code>let func_ptr: &amp;Fn(&amp;mut Foo, i32) = &amp;Foo::method;\n</code></pre>\n"}], "owner": {"reputation": 4733, "user_id": 922445, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/a469120d35647d9aa50646cb4d778c71?s=128&d=identicon&r=PG&f=1", "display_name": "Nulik", "link": "https://stackoverflow.com/users/922445/nulik"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 635, "favorite_count": 0, "closed_date": 1559574266, "accepted_answer_id": 56418489, "answer_count": 1, "score": 2, "last_activity_date": 1559574035, "creation_date": 1559504861, "last_edit_date": 1559574035, "question_id": 56418439, "link": "https://stackoverflow.com/questions/56418439/how-to-call-a-method-through-a-function-pointer", "closed_reason": "Duplicate", "title": "How to call a method through a function pointer?", "body": "<p>What is the correct syntax to call a method on an object using a function pointer?</p>\n\n<pre><code>struct Foo {\n    var: i32,\n}\n\nimpl Foo {\n    fn method(&amp;mut self, arg: i32) {\n        self.var = self.var + arg;\n        println!(\"var = {}\", self.var);\n    }\n}\n\nfn main() {\n    let foo = Foo { var: 11 };\n    let func_ptr: Fn() = &amp;foo.method;\n    (func_ptr).method(12);\n}\n</code></pre>\n\n<p>I am getting this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0615]: attempted to take value of method `method` on type `Foo`\n  --&gt; src/main.rs:14:31\n   |\n14 |     let func_ptr: Fn() = &amp;foo.method;\n   |                               ^^^^^^ help: use parentheses to call the method: `method(...)`\n\nerror[E0599]: no method named `method` found for type `dyn std::ops::Fn()` in the current scope\n  --&gt; src/main.rs:15:16\n   |\n15 |     (func_ptr).method(12);\n   |                ^^^^^^\n   |\n   = note: (func_ptr) is a function, perhaps you wish to call it\n\nerror[E0277]: the size for values of type `dyn std::ops::Fn()` cannot be known at compilation time\n  --&gt; src/main.rs:14:9\n   |\n14 |     let func_ptr: Fn() = &amp;foo.method;\n   |         ^^^^^^^^ doesn't have a size known at compile-time\n   |\n   = help: the trait `std::marker::Sized` is not implemented for `dyn std::ops::Fn()`\n   = note: to learn more, visit &lt;https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait&gt;\n   = note: all local variables must have a statically known size\n   = help: unsized locals are gated as an unstable feature\n</code></pre>\n\n<p>I guess I am not using correct type for <code>func_ptr</code> type; what is the correct type?</p>\n"}, {"tags": ["git", "rust"], "answers": [{"comments": [{"owner": {"reputation": 20521, "user_id": 1135424, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/rvwBS.jpg?s=128&g=1", "display_name": "nbari", "link": "https://stackoverflow.com/users/1135424/nbari"}, "edited": false, "score": 0, "creation_date": 1559568859, "post_id": 56418324, "comment_id": 99451400, "body": "<code>s if s.contains(git2::Status::INDEX_NEW) =&gt; &quot;A&quot;</code>  since it returns a string <code>&quot;A&quot;</code> is because of this that can use the std::string <code>contains</code> ? also if instead of <code>panic</code> how to return as string the returend status ?"}, {"owner": {"reputation": 9958, "user_id": 2188562, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/DMWEc.png?s=128&g=1", "display_name": "Peter Varo", "link": "https://stackoverflow.com/users/2188562/peter-varo"}, "reply_to_user": {"reputation": 20521, "user_id": 1135424, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/rvwBS.jpg?s=128&g=1", "display_name": "nbari", "link": "https://stackoverflow.com/users/1135424/nbari"}, "edited": false, "score": 0, "creation_date": 1559574536, "post_id": 56418324, "comment_id": 99454563, "body": "Look into the source of <code>git2-rs</code>!  If you do that, you would realise, that <code>git2::Status</code> is a <code>struct</code> generated by the macro from the <a href=\"https://crates.io/crates/bitflags\" rel=\"nofollow noreferrer\"><code>bitflags</code></a> crate and thus it has the <code>.contains</code> method, which has nothing to do with strings.  If you don&#39;t want to panic, then replace my panicing arm with the string representation of the error of your choice."}, {"owner": {"reputation": 20521, "user_id": 1135424, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/rvwBS.jpg?s=128&g=1", "display_name": "nbari", "link": "https://stackoverflow.com/users/1135424/nbari"}, "edited": false, "score": 0, "creation_date": 1559577537, "post_id": 56418324, "comment_id": 99456095, "body": "Thanks, instead of a custom error/panic,  I would like to return for example <code>INDEX_NEW</code> or <code>INDEX_NEW | WT_MODIFIED</code> as a string so that I could get an idea of the status instead of a panic, better said how to convert a <code>git2::Status::INDEX_MODIFIED</code> to be represented as a string"}], "tags": [], "owner": {"reputation": 9958, "user_id": 2188562, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/DMWEc.png?s=128&g=1", "display_name": "Peter Varo", "link": "https://stackoverflow.com/users/2188562/peter-varo"}, "is_accepted": true, "score": 4, "last_activity_date": 1559504962, "last_edit_date": 1559504962, "creation_date": 1559503999, "answer_id": 56418324, "question_id": 56417990, "link": "https://stackoverflow.com/questions/56417990/how-to-map-constants-to-custom-strings/56418324#56418324", "title": "How to map constants to custom strings", "body": "<p>The following code snippet takes your <code>map</code> and turns it into the desired representation.  The provided example collecs the values into another <code>HashMap</code> and it has an arm which panics, but feel free to convert the <code>git2::Status</code> values on the fly (i.e. when you first iterate over them).</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let mut output = HashMap::new();\nfor (key, value) in map.iter()\n{\n    let key = match key\n    {\n\n        s if s.contains(git2::Status::INDEX_NEW) &amp;&amp;\n             s.contains(git2::Status::WT_MODIFIED) =&gt; \"AM\",\n        s if s.contains(git2::Status::INDEX_NEW) =&gt; \"A\",\n        s if s.contains(git2::Status::INDEX_MODIFIED) =&gt; \"M\",\n        _ =&gt; panic!(\"Unexpected status\"),\n    };\n\n    output.insert(key, value);\n}\n\nprintln!(\"{:?}\", output);\n</code></pre>\n\n<p>If you are looking into the examples of your chosen library then you will find something very similar: <a href=\"https://github.com/rust-lang/git2-rs/blob/master/examples/status.rs#L262\" rel=\"nofollow noreferrer\"><code>git2-rs/examples/status.rs</code></a></p>\n\n<p>For further information on pattern matching syntax, consult <a href=\"https://doc.rust-lang.org/book/ch18-03-pattern-syntax.html\" rel=\"nofollow noreferrer\">The Rust Programming Book</a>.</p>\n"}], "owner": {"reputation": 20521, "user_id": 1135424, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/rvwBS.jpg?s=128&g=1", "display_name": "nbari", "link": "https://stackoverflow.com/users/1135424/nbari"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 85, "favorite_count": 0, "accepted_answer_id": 56418324, "answer_count": 1, "score": 2, "last_activity_date": 1559504962, "creation_date": 1559501487, "question_id": 56417990, "link": "https://stackoverflow.com/questions/56417990/how-to-map-constants-to-custom-strings", "title": "How to map constants to custom strings", "body": "<p>I am using the <a href=\"https://docs.rs/git2/\" rel=\"nofollow noreferrer\">git2 crate</a> to get a list of <a href=\"https://docs.rs/git2/0.8.0/git2/struct.Status.html\" rel=\"nofollow noreferrer\">statuses</a> on a git repository, this is the code I am using:</p>\n\n<pre><code>use git2::{Repository, StatusOptions, StatusShow};\nuse std::{collections::HashMap, env};\n\nfn main() {\n    let path = env::current_dir().unwrap();\n    let repo = Repository::discover(path).unwrap();\n    let mut status_opt = StatusOptions::new();\n    status_opt\n        .show(StatusShow::IndexAndWorkdir)\n        .include_untracked(true)\n        .include_unmodified(false)\n        .no_refresh(false);\n    let status_result = repo.statuses(Some(&amp;mut status_opt)).unwrap();\n\n    let mut map: HashMap&lt;git2::Status, u32&gt; = HashMap::new();\n\n    for status_entry in status_result.iter() {\n        *map.entry(status_entry.status()).or_insert(0) += 1;\n    }\n    println!(\"{:?}\", map);\n}\n</code></pre>\n\n<p>Based on the modifications of the current repository returns a map of <a href=\"https://docs.rs/git2/0.8.0/git2/struct.Status.html\" rel=\"nofollow noreferrer\"><code>git2::Status</code></a> and occurrences, but I would like to return a similar output to the command <code>git status --porcelain</code>.</p>\n\n<p>For example, depending on the changes of the repository, this is the output of <code>git status --porcelain</code>:</p>\n\n<pre><code>M  file_a\nAM file_b\nA  file_c\n?? file_e\n?? file_f\n</code></pre>\n\n<p>Passing the output to <code>awk</code>: </p>\n\n<pre><code>$ git status --porcelain | awk -v ORS=\", \" 'NR&gt;0{arr[$1]++}END{for (a in arr) print a, arr[a]}'\nA 1, ?? 2, M 1, AM 1,\n</code></pre>\n\n<p>Using the <a href=\"https://www.rust-lang.org\" rel=\"nofollow noreferrer\">Rust</a> code above will return:</p>\n\n<pre><code>{INDEX_NEW: 1, WT_NEW: 2, INDEX_NEW | WT_MODIFIED: 1, INDEX_MODIFIED: 1}\n</code></pre>\n\n<p>I would like to know how could I map the value of the <code>git2::Status</code> constants to custom strings (match the porceline strings), for example:</p>\n\n<pre><code>INDEX_NEW                -&gt; A \nINDEX_NEW | WT_MODIFIED  -&gt; AM\nINDEX_MODIFIED           -&gt; M\nWT_NEW                   -&gt; ??\n</code></pre>\n\n<p>Mainly how to deal with cases like <code>INDEX_NEW | WT_MODIFIED</code> that will map for example to <code>AM</code></p>\n"}, {"tags": ["rust", "sha"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1559497736, "post_id": 56417329, "comment_id": 99430722, "body": "This could be a lot improved with link and proper <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>"}], "answers": [{"comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1559497757, "post_id": 56417330, "comment_id": 99430729, "body": "So basically just create a slice ? I&#39;m sure we have duplicate"}], "tags": [], "owner": {"reputation": 679, "user_id": 5155574, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-FX9BZpOiVdk/AAAAAAAAAAI/AAAAAAAAAI0/cHgtmpGWfgM/photo.jpg?sz=128", "display_name": "Josh Abraham", "link": "https://stackoverflow.com/users/5155574/josh-abraham"}, "is_accepted": false, "score": 0, "last_activity_date": 1559498096, "last_edit_date": 1559498096, "creation_date": 1559496304, "answer_id": 56417330, "question_id": 56417329, "link": "https://stackoverflow.com/questions/56417329/how-do-i-take-the-first-4-bytes-of-sha256-in-rust/56417330#56417330", "title": "How do I take the first 4 bytes of SHA256 in Rust?", "body": "<p>This should work:</p>\n\n<pre><code>let first_bytes = &amp;(Sha256::new().chain(b\"blabla_93794926\").result()[0..4]);\n</code></pre>\n"}], "owner": {"reputation": 679, "user_id": 5155574, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-FX9BZpOiVdk/AAAAAAAAAAI/AAAAAAAAAI0/cHgtmpGWfgM/photo.jpg?sz=128", "display_name": "Josh Abraham", "link": "https://stackoverflow.com/users/5155574/josh-abraham"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 116, "favorite_count": 0, "answer_count": 1, "score": -3, "last_activity_date": 1559498096, "creation_date": 1559496304, "question_id": 56417329, "link": "https://stackoverflow.com/questions/56417329/how-do-i-take-the-first-4-bytes-of-sha256-in-rust", "title": "How do I take the first 4 bytes of SHA256 in Rust?", "body": "<p>How do I elegantly take first 4 bytes of SHA256 in Rust? Specifically from generic_array produced by:</p>\n\n<p><code>sha2::Sha256::new().chain(b\"blabla_93794926\").result();</code></p>\n\n<p>(without using unsafe Rust)</p>\n"}, {"tags": ["rust", "future", "actix-web"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1559576119, "post_id": 56417315, "comment_id": 99455410, "body": "It&#39;s hard to answer your question because it doesn&#39;t include a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>. We can&#39;t tell what crates (and their versions), types, traits, fields, etc. are present in the code. It would make it easier for us to help you if you try to reproduce your error on the <a href=\"https://play.rust-lang.org\" rel=\"nofollow noreferrer\">Rust Playground</a> if possible, otherwise in a brand new Cargo project, then <a href=\"https://stackoverflow.com/posts/56417315/edit\">edit</a> your question to include the additional info. There are <a href=\"//stackoverflow.com/tags/rust/info\">Rust-specific MCVE tips</a> you can use to reduce your original code for posting here. Thanks!"}], "answers": [{"tags": [], "owner": {"reputation": 2589, "user_id": 2597447, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/897978470ac2d52fe71d4071c53d6579?s=128&d=identicon&r=PG", "display_name": "arve0", "link": "https://stackoverflow.com/users/2597447/arve0"}, "is_accepted": true, "score": 1, "last_activity_date": 1562537620, "creation_date": 1562537620, "answer_id": 56926498, "question_id": 56417315, "link": "https://stackoverflow.com/questions/56417315/what-is-the-most-idiomatic-way-of-handling-errors-in-asynchronous-handlers-in-ac/56926498#56926498", "title": "What is the most idiomatic way of handling errors in asynchronous handlers in actix-web?", "body": "<p>To handle errors, return a failing <code>Future</code>. For example, do the header check as a <code>Future</code>, then chain your futures with <code>.and_then</code>. A trick is to keep error types of futures the same, to avoid <code>map_err</code>. For example:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn handler(req: HttpRequest) -&gt; impl Future&lt;Item = HttpResponse, Error = Error&gt; {\n    has_client_header(&amp;req)\n        .and_then(|client| operation_that_returns_future(client))\n        .map(|result| HttpResponse::Ok().body(result))\n}\n\nfn has_client_header(req: &amp;HttpRequest) -&gt; impl Future&lt;Item = String, Error = Error&gt; {\n    if let Some(Ok(client)) = req.headers().get(\"x-client-id\").map(|h| h.to_str()) {\n        future::ok(client.to_owned())\n    } else {\n        future::failed(ErrorBadRequest(\"invalid x-client-id header\"))\n    }\n}\n\nfn operation_that_returns_future(client: String) -&gt; impl Future&lt;Item = String, Error = Error&gt; {\n    future::ok(client)\n}\n</code></pre>\n\n<p>Result:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ curl localhost:8000\ninvalid x-client-id header\u23ce\n$ curl localhost:8000 -H 'x-client-id: asdf'\nasdf\u23ce\n</code></pre>\n\n<p>When <code>operation_that_returns_future</code> has another error type:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn handler(req: HttpRequest) -&gt; impl Future&lt;Item = HttpResponse, Error = Error&gt; {\n    has_client_header(&amp;req)\n        .and_then(|client| {\n            operation_that_returns_future(client)\n                .map_err(|_| ErrorInternalServerError(\"operation failed\"))\n        })\n        .map(|result| HttpResponse::Ok().body(result))\n}\n</code></pre>\n\n<p>Another trick is to use the <a href=\"https://docs.rs/failure/0.1.5/failure/\" rel=\"nofollow noreferrer\">failure crate</a>, which provides <code>failure::Error::from</code> that maps all errors to one type, <code>failure::Error</code>.</p>\n\n<p>Lastly, you might find <a href=\"https://docs.rs/actix-web/1.0.3/actix_web/guard/index.html\" rel=\"nofollow noreferrer\"><code>actix_web::guards</code></a> useful for checking header values:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>.guard(guard::Header(\"x-client-id\", \"special client\"))\n</code></pre>\n"}], "owner": {"reputation": 331, "user_id": 607523, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/c5db78fbfddbb2ddf9a429338e9c0580?s=128&d=identicon&r=PG", "display_name": "edrevo", "link": "https://stackoverflow.com/users/607523/edrevo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 423, "favorite_count": 0, "accepted_answer_id": 56926498, "answer_count": 1, "score": 1, "last_activity_date": 1562537620, "creation_date": 1559496238, "last_edit_date": 1559576213, "question_id": 56417315, "link": "https://stackoverflow.com/questions/56417315/what-is-the-most-idiomatic-way-of-handling-errors-in-asynchronous-handlers-in-ac", "title": "What is the most idiomatic way of handling errors in asynchronous handlers in actix-web?", "body": "<p>I have an async handler in actix_web that must fail if several headers are not set. I don't understand what the best way of handling errors in functions that return <code>Future</code> should be. I basically want an equivalent of the <code>?</code> operator for futures.</p>\n\n<p>This is my current code:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>r.post().with_async(\n    move |req: HttpRequest, path: Path&lt;EventPath&gt;, body: Json&lt;EventCreationRequest&gt;| {\n        let headers = req.headers();\n        let client_id = match headers\n            .get(\"x-client-id\")\n            .ok_or(\"Header not found\")\n            .and_then(|v| v.to_str().map_err(|_| \"Invalid header content\"))\n        {\n            Err(e) =&gt; return ok(HttpResponse::BadRequest().body(e)).responder(),\n            Ok(v) =&gt; v.to_string(),\n        };\n        operation_that_returns_future()\n            .map(|_| HttpResponse::Ok().body(\"OK!\"))\n            .responder()\n    },\n);\n</code></pre>\n\n<p>I have solved the lack of a <code>?</code> operator for futures by matching an doing an early return. However, in my code I actually need to ensure that a bunch of other headers exist.</p>\n\n<p>Ideally, I would like to extract the matching and early return logic to something reusable, but in this case that forces me to create a macro. That seems like a bit of an overkill, especially if there's already something in the language that allows me to do what I want.</p>\n\n<p>What is the most idiomatic way of handling this situation?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 2, "creation_date": 1559486205, "post_id": 56415904, "comment_id": 99427898, "body": "I don&#39;t understand why a generator should be able to receive argument. For me it should just generate the next value. What is the point to use a generator for this case ?"}, {"owner": {"reputation": 65, "user_id": 11587913, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-Rbrg2Bno_2k/AAAAAAAAAAI/AAAAAAAAAAc/TLIU5Oe85hM/photo.jpg?sz=128", "display_name": "epishman", "link": "https://stackoverflow.com/users/11587913/epishman"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 1, "creation_date": 1559501381, "post_id": 56415904, "comment_id": 99431691, "body": "In other languages \u200b\u200bit is possible, but how to act correctly in rust? I have my own event loop, and I just want to transfer control inside the asynchronous function when I get the value from the user."}, {"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 1, "creation_date": 1559550281, "post_id": 56415904, "comment_id": 99441961, "body": "Neither generators nor async functions will do what you want. Rethink your approach from the start."}, {"owner": {"reputation": 65310, "user_id": 201725, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/616f7a1cbb20fe949d883393657c039a?s=128&d=identicon&r=PG", "display_name": "Jan Hudec", "link": "https://stackoverflow.com/users/201725/jan-hudec"}, "reply_to_user": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 1, "creation_date": 1559561078, "post_id": 56415904, "comment_id": 99447268, "body": "@SebastianRedl, well, async functions kind of would. If you create an async function for getting next user response, you can then write an async function to manage the session, calling the async response getter\u2014but you&#39;ll have to write the response getter using the fundamental tools of your chosen reactor, because that&#39;s how the actual waiting happens."}], "answers": [{"comments": [{"owner": {"reputation": 65, "user_id": 11587913, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-Rbrg2Bno_2k/AAAAAAAAAAI/AAAAAAAAAAc/TLIU5Oe85hM/photo.jpg?sz=128", "display_name": "epishman", "link": "https://stackoverflow.com/users/11587913/epishman"}, "edited": false, "score": 0, "creation_date": 1559572531, "post_id": 56429110, "comment_id": 99453435, "body": "Thank you very much, you strongly promoted me in understanding Rust!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1581358675, "last_edit_date": 1581358675, "creation_date": 1559571095, "answer_id": 56429110, "question_id": 56415904, "link": "https://stackoverflow.com/questions/56415904/how-to-implement-a-lightweight-long-lived-thread-based-on-a-generator-or-asynchr/56429110#56429110", "title": "How to implement a lightweight long-lived thread based on a generator or asynchronous function in Rust?", "body": "<p>The return value from <code>yield</code> is effectively just another generator that has been implicitly passed to the first generator, except that it forces the two to be tied together in weird ways.</p>\n\n<p>You can see that in your original code by the junk <code>yield \"\"</code> that you need in order to get a value even though you don't have anything to return. Additionally, your example requires that the user of the generator <em>know the answer to the question before it is asked</em>, which seems very unorthodox.</p>\n\n<p>Explicitly pass in a second generator:</p>\n\n<pre><code>#![feature(generators, generator_trait)]\n\nuse std::{\n    io,\n    ops::{Generator, GeneratorState},\n};\n\nfn user_input() -&gt; impl Generator&lt;Yield = String&gt; {\n    || {\n        let input = io::stdin();\n        loop {\n            let mut line = String::new();\n            input.read_line(&amp;mut line).unwrap();\n            yield line;\n        }\n    }\n}\n\nfn my_scenario(\n    input: impl Generator&lt;Yield = String&gt;,\n) -&gt; impl Generator&lt;Yield = &amp;'static str, Return = String&gt; {\n    || {\n        let mut input = Box::pin(input);\n\n        yield \"What is your name?\";\n        let my_name = match input.as_mut().resume(()) {\n            GeneratorState::Yielded(v) =&gt; v,\n            GeneratorState::Complete(_) =&gt; panic!(\"input did not return a value\"),\n        };\n\n        yield \"How are you feeling?\";\n        let my_mood = match input.as_mut().resume(()) {\n            GeneratorState::Yielded(v) =&gt; v,\n            GeneratorState::Complete(_) =&gt; panic!(\"input did not return a value\"),\n        };\n\n        format!(\"{} is {}\", my_name.trim(), my_mood.trim())\n    }\n}\n\nfn main() {\n    let my_session = my_scenario(user_input());\n    let mut my_session = Box::pin(my_session);\n\n    loop {\n        match my_session.as_mut().resume(()) {\n            GeneratorState::Yielded(prompt) =&gt; {\n                println!(\"{}\", prompt);\n            }\n            GeneratorState::Complete(v) =&gt; {\n                println!(\"{}\", v);\n                break;\n            }\n        }\n    }\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ cargo run\nWhat is your name?\nShep\nHow are you feeling?\nOK\nShep is OK\n</code></pre>\n\n<p>You can provide hard-coded data as well:</p>\n\n<pre><code>let user_input = || {\n    yield \"Peter\".to_string();\n    yield \"happy\".to_string();\n};\n\nlet my_session = my_scenario(user_input);\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 0, "last_activity_date": 1582659177, "creation_date": 1582659177, "answer_id": 60401918, "question_id": 56415904, "link": "https://stackoverflow.com/questions/56415904/how-to-implement-a-lightweight-long-lived-thread-based-on-a-generator-or-asynchr/60401918#60401918", "title": "How to implement a lightweight long-lived thread based on a generator or asynchronous function in Rust?", "body": "<p>As of approximately Rust nightly <a href=\"https://github.com/rust-lang/rust/pull/68524\" rel=\"nofollow noreferrer\">2020-02-08</a>, Rust's generators now accept an argument to <code>resume</code>, more closely matching the original JavaScript example:</p>\n\n<pre><code>#![feature(generators, generator_trait)]\n\nuse std::{\n    io::{self, BufRead},\n    ops::{Generator, GeneratorState},\n};\n\nfn my_scenario() -&gt; impl Generator&lt;String, Yield = &amp;'static str, Return = String&gt; {\n    |_arg: String| {\n        let my_name = yield \"What is your name?\";\n        let my_mood = yield \"How are you feeling?\";\n\n        format!(\"{} is {}\", my_name.trim(), my_mood.trim())\n    }\n}\n\nfn main() {\n    let my_session = my_scenario();\n    let mut my_session = Box::pin(my_session);\n\n    let stdin = io::stdin();\n    let mut lines = stdin.lock().lines();\n\n    let mut line = String::new();\n\n    loop {\n        match my_session.as_mut().resume(line) {\n            GeneratorState::Yielded(prompt) =&gt; {\n                println!(\"{}\", prompt);\n            }\n            GeneratorState::Complete(v) =&gt; {\n                println!(\"{}\", v);\n                break;\n            }\n        }\n\n        line = lines.next().expect(\"User input ended\").expect(\"User input malformed\");\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 65, "user_id": 11587913, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-Rbrg2Bno_2k/AAAAAAAAAAI/AAAAAAAAAAc/TLIU5Oe85hM/photo.jpg?sz=128", "display_name": "epishman", "link": "https://stackoverflow.com/users/11587913/epishman"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 144, "favorite_count": 0, "accepted_answer_id": 56429110, "answer_count": 2, "score": 1, "last_activity_date": 1582659177, "creation_date": 1559485305, "last_edit_date": 1559568298, "question_id": 56415904, "link": "https://stackoverflow.com/questions/56415904/how-to-implement-a-lightweight-long-lived-thread-based-on-a-generator-or-asynchr", "title": "How to implement a lightweight long-lived thread based on a generator or asynchronous function in Rust?", "body": "<p>I want to implement a user interaction script in the form of a lightweight, long-lived thread written in Rust. Inside the script, I have points where I asynchronously await user input.</p>\n\n<p>In JavaScript, I would use a generator, inside which you can pass a question, and get back an answer, for example:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>function* my_scenario() {\n    yield \"What is your name?\";\n    let my_name = yield \"How are you feeling?\";\n    let my_mood = yield \"\";\n    ...\n}\n\nlet my_session = my_scenario();\n...\nmy_session.next(\"Peter\");\nmy_session.next(\"happy\");\n</code></pre>\n\n<p>However, Rust's generator method <code>resume()</code> contains no parameters! I cannot clone a generator or return it from a function in order to have many user sessions with different states. Instead of a generator, I thought of using an <code>async fn()</code>, but I do not understand how to call it at each step, passing the value there.</p>\n"}, {"tags": ["opengl", "rust", "ffi", "unsafe", "raw-pointer"], "answers": [{"tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": true, "score": 4, "last_activity_date": 1559483596, "last_edit_date": 1559483596, "creation_date": 1559481231, "answer_id": 56415396, "question_id": 56414980, "link": "https://stackoverflow.com/questions/56414980/unexpected-pixels-changing-in-opengl-texture-before-being-drawn-to-screen/56415396#56415396", "title": "Unexpected pixels changing in opengl texture before being drawn to screen", "body": "<p>The function <code>rand_pixel</code> creates an <code>image::Image</code> in a local variable, and then returns a pointer to it. The problem is that the image is dropped at the end of the function, so this pointer is left <em>dangling</em>.</p>\n\n<p>Dereferencing this pointer is <em>Undefined Behaviour</em>, which is apparently manifesting itself in your application as some pixels being drawn the wrong colour. After the <code>Image</code> is dropped, the memory it was using to store pixels can be re-used for anything else. It seems that most of it has not yet been re-used but some data has been written to the first few bytes.</p>\n\n<p>In safe code, Rust protects you from this kind of error by checking that the lifetimes of references do not exceed the scope of the referenced variables. But, when you dip into <code>unsafe</code> code and use raw pointers, you have to ensure memory safety yourself.</p>\n\n<p>A possible fix is to make the drawing function take a mutable reference to an <code>Image</code> instead of owning it itself:</p>\n\n<pre><code>fn rand_pixel(pixels: &amp;mut image::Image) -&gt; *const std::ffi::c_void {\n    // Define colors\n    let black_pixel = image::Color { red: 0, green: 0, blue: 0 };\n    let white_pixel = image::Color { red: 255, green: 255, blue: 255 };\n\n    // Overwrite with a blank image\n    *pixels = image::Image::new(pixels.width, pixels.height, black_pixel);\n\n    // Get two random numbers\n    use rand::Rng;\n    let mut rng = rand::thread_rng();\n    let rand_x = rng.gen() % pixels.width;\n    let rand_y = rng.gen() % pixels.height;\n\n    // Change pixels\n    pixels.set_pixel(rand_x, rand_y, white_pixel);\n\n    // return pointer (still valid because the image lives longer than this function)\n    pixels.get_ptr()\n}\n</code></pre>\n\n<p>In your main function you own the image and pass it via a mutable reference:</p>\n\n<pre><code>// this variable lives longer than the call to window::create_window\nlet mut pixels = image::Image::new(image_width, image_height, image::Color { red: 0, green: 0, blue: 0} );\n\n// Define draw function\nlet draw_fun = || rand_pixel(&amp;mut pixels);\n\n// Create new window\nwindow::create_window(1600.0, 900.0, image_width as i32, image_height as i32, draw_fun);\n</code></pre>\n\n<p>Note, you'll also have to change the signature of <code>create_window</code> to accept a <code>FnMut</code> instead of a <code>Fn</code>.</p>\n"}], "owner": {"reputation": 33, "user_id": 11584764, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4a0321e272bdc089a3249e3294e08785?s=128&d=identicon&r=PG&f=1", "display_name": "SamDickinson", "link": "https://stackoverflow.com/users/11584764/samdickinson"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 129, "favorite_count": 0, "accepted_answer_id": 56415396, "answer_count": 1, "score": 3, "last_activity_date": 1559485109, "creation_date": 1559478199, "last_edit_date": 1559485109, "question_id": 56414980, "link": "https://stackoverflow.com/questions/56414980/unexpected-pixels-changing-in-opengl-texture-before-being-drawn-to-screen", "title": "Unexpected pixels changing in opengl texture before being drawn to screen", "body": "<p>I am writing a framework to be able to draw pixels to the screen. However now that I am trying to update the screen the first 4 pixels are showing random colors.</p>\n\n<p>I did not have this problem when I was just sending a pointer to the image data to my window module however now that i am passing a drawing function as a closure this started happening. I do not think this is a problem within my drawing function as I wrote to those pixels and they were still modified.</p>\n\n<p>My main drawing function:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>// Define drawing function\nfn rand_pixel(image_width: usize, image_height: usize) -&gt; *const std::ffi::c_void\n{\n    // Define colors\n    let black_pixel = image::Color { red: 0, green: 0, blue: 0 };\n    let white_pixel = image::Color { red: 255, green: 255, blue: 255 };\n\n    // Create blank image\n    let mut pixels: image::Image = image::Image::new(image_width, image_height, black_pixel);\n\n    // Get two random numbers\n    use rand::Rng;\n    let mut rng = rand::thread_rng();\n    let rand_x = rng.gen::&lt;usize&gt;() % image_width;\n    let rand_y = rng.gen::&lt;usize&gt;() % image_height;\n\n    // Change pixels\n    pixels.set_pixel(rand_x, rand_y, white_pixel);\n\n    // return pointer\n    pixels.get_ptr()\n}\n</code></pre>\n\n<p>My window drawing routine:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>// Execute draw function\nlet image_ptr = draw_function();\n\nunsafe \n{\n    // Create texture\n    let mut tex_id: gl::types::GLuint = 0;\n    gl::GenTextures(1, &amp;mut tex_id);\n    gl::BindTexture(gl::TEXTURE_2D, tex_id);\n\n    // Move pixels to texture\n    gl::TexImage2D(gl::TEXTURE_2D, 0, gl::RGBA as i32, \n        image_width, image_height, 0, gl::RGBA, gl::UNSIGNED_BYTE, image_ptr);\n\n    gl::TexParameteri(gl::TEXTURE_2D, gl::TEXTURE_MIN_FILTER, gl::NEAREST as i32);\n    gl::TexParameteri(gl::TEXTURE_2D, gl::TEXTURE_MAG_FILTER, gl::NEAREST as i32);\n\n    // Create read framebuffer\n    let mut read_fbo_id: gl::types::GLuint = 0;\n    gl::GenFramebuffers(1, &amp;mut read_fbo_id);\n    gl::BindFramebuffer(gl::READ_FRAMEBUFFER, read_fbo_id);\n\n    // Bind texture to read framebuffer\n    gl::FramebufferTexture2D(gl::READ_FRAMEBUFFER, gl::COLOR_ATTACHMENT0, gl::TEXTURE_2D, tex_id, 0);\n\n    // Transfer from read framebuffer to draw framebuffer\n    gl::BlitFramebuffer(0, 0, image_width, image_height, \n        0, 0, window_width as i32, window_height as i32, \n        gl::COLOR_BUFFER_BIT, gl::NEAREST);\n\n    // Clear out read framebuffer\n    gl::BindFramebuffer(gl::READ_FRAMEBUFFER, 0);\n    gl::DeleteFramebuffers(1, &amp;mut read_fbo_id);\n};\n\n// Update screen\nlet _ = windowed_context.swap_buffers();\nstd::thread::sleep(std::time::Duration::from_millis(15));\n</code></pre>\n\n<p>The full project can be found:\n<a href=\"https://github.com/Pandabear314/sam_graphics\" rel=\"nofollow noreferrer\">https://github.com/Pandabear314/sam_graphics</a></p>\n\n<p>I am expecting a black screen with a single white pixel drawing randomly on the screen every frame. However the bottom left corner includes 4 random pixels. The first and third pixel change while the second and fourth do not change.</p>\n\n<p>An image showing the result: <a href=\"http://prntscr.com/nwl2gk\" rel=\"nofollow noreferrer\">http://prntscr.com/nwl2gk</a></p>\n"}, {"tags": ["function", "enums", "rust"], "answers": [{"tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": true, "score": 4, "last_activity_date": 1559475776, "last_edit_date": 1559475776, "creation_date": 1559474395, "answer_id": 56414528, "question_id": 56414420, "link": "https://stackoverflow.com/questions/56414420/how-to-write-a-function-that-only-takes-one-variant-of-the-enum-as-input/56414528#56414528", "title": "how to write a function that only takes one variant of the enum as input", "body": "<p>The variants of an <code>enum</code> are <em>values</em> and all have the same <em>type</em> - the <code>enum</code> itself. A function argument is a variable of a given type, and the function body must be valid for <em>any</em> value of that type. So what you want to do will just not work.</p>\n\n<p>However, there is a common pattern for designing enums, which might help here. That is, to use a separate <code>struct</code> to hold the data for each <code>enum</code> variant. For example:</p>\n\n<pre><code>enum Group {\n    OfTwo(OfTwo),\n    OfThree(OfThree),\n}\n\nstruct OfTwo { first: usize, second: usize }\nstruct OfThree { one: usize, two: usize, three: usize }\n\nfn proceed_pair(pair: OfTwo) {\n\n}\n</code></pre>\n\n<p>Anywhere that you previously matched on the <code>enum</code> like this:</p>\n\n<pre><code>match group {\n    Group::OfTwo { first, second } =&gt; {}\n    Group::OfThree { first, second, third } =&gt; {}\n}\n</code></pre>\n\n<p>You would replace with:</p>\n\n<pre><code>match group {\n    Group::OfTwo(OfTwo { first, second }) =&gt; {}\n    Group::OfThree(OfThree { first, second, third }) =&gt; {}\n}\n</code></pre>\n"}], "owner": {"reputation": 896, "user_id": 6314254, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-syObEwk9Mds/AAAAAAAAAAI/AAAAAAAAARU/Qz5nNseD1Pc/photo.jpg?sz=128", "display_name": "Hugo Trentesaux", "link": "https://stackoverflow.com/users/6314254/hugo-trentesaux"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 171, "favorite_count": 0, "accepted_answer_id": 56414528, "answer_count": 1, "score": 0, "last_activity_date": 1559475776, "creation_date": 1559473477, "last_edit_date": 1559474466, "question_id": 56414420, "link": "https://stackoverflow.com/questions/56414420/how-to-write-a-function-that-only-takes-one-variant-of-the-enum-as-input", "title": "how to write a function that only takes one variant of the enum as input", "body": "<p>I have an enum:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>enum Group {\n    OfTwo { first: usize, second: usize },\n    OfThree { one: usize, two: usize, three: usize },\n}\n</code></pre>\n\n<p>and I would like to write a function that only takes as argument the <code>Group::OfTwo</code> variant:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn proceed_pair(pair: Group::OfTwo) {\n}\n</code></pre>\n\n<p>But when I do that, I get the message:</p>\n\n<p><code>error[E0573]: expected type, found variant</code></p>\n\n<p>Is there a way to achieve this?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "is_accepted": true, "score": 5, "last_activity_date": 1559466639, "last_edit_date": 1559466639, "creation_date": 1559462777, "answer_id": 56413273, "question_id": 56412826, "link": "https://stackoverflow.com/questions/56412826/how-to-define-an-iterator-in-rust-over-a-struct-that-contains-items-that-are-ite/56413273#56413273", "title": "How to define an iterator in Rust over a struct that contains items that are iterable?", "body": "<p>You must at some point define what <code>Item</code> the <code>Iterator</code> will produce, for example <code>Iterator&lt;Item = &amp;'a f64&gt;</code>. Let simplify and transform to <code>Iterator&lt;Item = f64&gt;</code>, because <code>f64</code> is <code>Copy</code> so it's often better to avoid the reference if you don't need it.</p>\n\n<p>So, then we will have compile error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the size for values of type `(dyn std::iter::Iterator&lt;Item = f64&gt; + 'static)` cannot be known at compilation time\n  --&gt; src/main.rs:11:5\n   |\n11 |     foo: std::iter::Iterator&lt;Item = f64&gt;,\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n   |\n   = help: the trait `std::marker::Sized` is not implemented for `(dyn std::iter::Iterator&lt;Item = f64&gt; + 'static)`\n   = note: to learn more, visit &lt;https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait&gt;\n   = note: only the last field of a struct may have a dynamically sized type\n</code></pre>\n\n<p>To avoid dynamic type and fix the error at the same time, let's define some generic type:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>// Iterator for the structure\nstruct FooIter&lt;F, I&gt; {\n    foo: F,\n    bar: I,\n}\n</code></pre>\n\n<p>We add the necessary on our implementation of <code>Iterator</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl&lt;F, I&gt; Iterator for FooIter&lt;F, I&gt;\nwhere\n    F: Iterator&lt;Item = f64&gt;,\n    I: Iterator&lt;Item = i64&gt;,\n</code></pre>\n\n<p>And we must change how we generate <code>FooIter</code>, this time we will use a magic keyword <code>impl</code>, this avoid to write the real type of the <code>Iterator</code> that can be very long and unclear, the compiler will infer the type for us. Also, we must bound the type to the lifetime of <code>&amp;self</code> because it must be borrow as long as the iterator live, simply declare <code>'a</code> lifetime and add <code>+ 'a</code> will do the job:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn iter&lt;'a&gt;(\n    &amp;'a self,\n) -&gt; FooIter&lt;impl Iterator&lt;Item = f64&gt; + 'a, impl Iterator&lt;Item = i64&gt; + 'a&gt; {\n    FooIter {\n        foo: self.foo.iter().copied(),\n        bar: self.bar.iter().copied(),\n    }\n}\n</code></pre>\n\n<p>Here we finish the basic, the next problem is that your code doesn't produce <code>Bar</code> type in <code>next()</code>, so we must correct your code, also it's would be nice to create a propre random generator. So here the final snippet:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use rand::{rngs::ThreadRng, thread_rng, Rng};\n\n// Structure of items\nstruct Foo {\n    foo: Vec&lt;f64&gt;,\n    bar: Vec&lt;i64&gt;,\n}\n\n// Iterator for the structure\nstruct FooIter&lt;'r, F, I&gt; {\n    foo: F,\n    bar: I,\n    rng: &amp;'r mut ThreadRng,\n}\n\n// Method that provides the iterator for use\nimpl Foo {\n    fn iter&lt;'a, 'r: 'a&gt;(\n        &amp;'a self,\n        rng: &amp;'r mut ThreadRng,\n    ) -&gt; FooIter&lt;impl Iterator&lt;Item = f64&gt; + 'a, impl Iterator&lt;Item = i64&gt; + 'a&gt; {\n        FooIter {\n            foo: self.foo.iter().copied(), // nigthly feature, use cloned() for stable\n            bar: self.bar.iter().copied(),\n            rng,\n        }\n    }\n}\n\n// Item desired from iterator\nenum Bar {\n    MyFloat(f64),\n    MyInt(i64),\n}\n\n// Implementation of the iterator\nimpl&lt;'r, F, I&gt; Iterator for FooIter&lt;'r, F, I&gt;\nwhere\n    F: Iterator&lt;Item = f64&gt;,\n    I: Iterator&lt;Item = i64&gt;,\n{\n    type Item = Bar;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Bar&gt; {\n        if self.rng.gen() {\n            self.foo\n                .next()\n                .map(|x| Bar::MyFloat(x))\n                .or_else(|| self.bar.next().map(|x| Bar::MyInt(x)))\n        } else {\n            self.bar\n                .next()\n                .map(|x| Bar::MyInt(x))\n                .or_else(|| self.foo.next().map(|x| Bar::MyFloat(x)))\n        }\n    }\n}\n\n// Iterate over a struct\nfn main() {\n    let fuz = Foo {\n        foo: vec![1.2, 2.3, 3.4],\n        bar: vec![5, 6],\n    };\n    for item in fuz.iter(&amp;mut thread_rng()) {\n        match item {\n            Bar::MyFloat(f) =&gt; println!(\"float : {}\", f),\n            Bar::MyInt(i) =&gt; println!(\"int : {}\", i),\n        }\n    }\n}\n</code></pre>\n\n<hr>\n\n<p>Note, if you still want a <code>Peekable&lt;Iterator&gt;</code> then just do:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct FooIter&lt;'r, F, I&gt;\nwhere\n    F: Iterator&lt;Item = f64&gt;,\n    I: Iterator&lt;Item = i64&gt;,\n{\n    foo: Peekable&lt;F&gt;,\n    bar: Peekable&lt;I&gt;,\n    rng: &amp;'r mut ThreadRng,\n}\n\n// Method that provides the iterator for use\nimpl Foo {\n    fn iter&lt;'a, 'r: 'a&gt;(\n        &amp;'a self,\n        rng: &amp;'r mut ThreadRng,\n    ) -&gt; FooIter&lt;impl Iterator&lt;Item = f64&gt; + 'a, impl Iterator&lt;Item = i64&gt; + 'a&gt; {\n        FooIter {\n            foo: self.foo.iter().copied().peekable(),\n            bar: self.bar.iter().copied().peekable(),\n            rng,\n        }\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "is_accepted": false, "score": 0, "last_activity_date": 1559726946, "creation_date": 1559726946, "answer_id": 56457790, "question_id": 56412826, "link": "https://stackoverflow.com/questions/56412826/how-to-define-an-iterator-in-rust-over-a-struct-that-contains-items-that-are-ite/56457790#56457790", "title": "How to define an iterator in Rust over a struct that contains items that are iterable?", "body": "<p>@Stargateur largely has me sorted, but I wanted to include two separate codes to complete things.  The following is the fixed code that's slightly closer to my original attempt, which works on Rust 1.34.1:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>// Structure of items\nstruct Foo {\n    foo: Vec&lt;f64&gt;,\n    far: Vec&lt;i64&gt;,\n}\n\n// Iterator for the structure\nstruct FooIter&lt;FloatIter, IntIter&gt;\nwhere\n    FloatIter: Iterator&lt;Item = f64&gt;,\n    IntIter: Iterator&lt;Item = i64&gt;,\n{\n    foo: std::iter::Peekable&lt;FloatIter&gt;,\n    far: std::iter::Peekable&lt;IntIter&gt;,\n}\n\n// Method that provides the iterator for use\nimpl Foo {\n    fn iter&lt;'a&gt;(\n        &amp;'a self,\n    ) -&gt; FooIter&lt;impl Iterator&lt;Item = f64&gt; + 'a, impl Iterator&lt;Item = i64&gt; + 'a&gt; {\n        FooIter {\n            foo: self.foo.iter().cloned().peekable(),\n            far: self.far.iter().cloned().peekable(),\n        }\n    }\n}\n\n// Item desired from iterator\nenum Bar {\n    MyFloat(f64),\n    MyInt(i64),\n}\n\n// Implementation of the iterator\nimpl&lt;FloatIter, IntIter&gt; Iterator for FooIter&lt;FloatIter, IntIter&gt;\nwhere\n    FloatIter: Iterator&lt;Item = f64&gt;,\n    IntIter: Iterator&lt;Item = i64&gt;,\n{\n    type Item = Bar;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Bar&gt; {\n        match (self.foo.peek(), self.far.peek()) {\n            (Some(_), Some(_)) =&gt; {\n                if rand::random() {\n                    self.foo.next().map(|x| Bar::MyFloat(x))\n                } else {\n                    self.far.next().map(|x| Bar::MyInt(x))\n                }\n            }\n            (Some(_), None) =&gt; self.foo.next().map(|x| Bar::MyFloat(x)),\n            (None, Some(_)) =&gt; self.far.next().map(|x| Bar::MyInt(x)),\n            (None, None) =&gt; None,\n        }\n    }\n}\n\n// Iterate over a struct\nfn main() {\n    let fuz = Foo {\n        foo: vec![1.2, 2.3, 3.4],\n        far: vec![5, 6],\n    };\n    for item in fuz.iter() {\n        match item {\n            Bar::MyFloat(f) =&gt; println!(\"float : {}\", f),\n            Bar::MyInt(i) =&gt; println!(\"int : {}\", i),\n        }\n    }\n}\n</code></pre>\n\n<p>What helped me understand what was going on is that <code>FooIter</code> parametrizes its arguments on generic types.  These types are inferred by using <code>impl Trait</code> in the return position within the <code>iter</code> method for <code>Foo</code>.  That said, I was able to write a similar code without using this inference:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>extern crate rand;\n\n// Structure of items\nstruct Foo {\n    foo: Vec&lt;f64&gt;,\n    far: Vec&lt;i64&gt;,\n}\n\n// Iterator for the structure\nstruct FooIter&lt;'a&gt; {\n    foo: std::iter::Peekable&lt;std::slice::Iter&lt;'a, f64&gt;&gt;,\n    far: std::iter::Peekable&lt;std::slice::Iter&lt;'a, i64&gt;&gt;,\n}\n\n// Method that provides the iterator for use\nimpl Foo {\n    fn iter&lt;'a&gt;(&amp;'a self) -&gt; FooIter&lt;'a&gt; {\n        FooIter {\n            foo: self.foo.iter().peekable(),\n            far: self.far.iter().peekable(),\n        }\n    }\n}\n\n// Item desired from iterator\nenum Bar {\n    MyFloat(f64),\n    MyInt(i64),\n}\n\n// Implementation of the iterator\nimpl&lt;'a&gt; Iterator for FooIter&lt;'a&gt; {\n    type Item = Bar;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Bar&gt; {\n        match (self.foo.peek(), self.far.peek()) {\n            (Some(_), Some(_)) =&gt; {\n                if rand::random() {\n                    self.foo.next().map(|x| Bar::MyFloat(x.clone()))\n                } else {\n                    self.far.next().map(|x| Bar::MyInt(x.clone()))\n                }\n            }\n            (Some(_), None) =&gt; self.foo.next().map(|x| Bar::MyFloat(x.clone())),\n            (None, Some(_)) =&gt; self.far.next().map(|x| Bar::MyInt(x.clone())),\n            (None, None) =&gt; None,\n        }\n    }\n}\n\n// Iterate over a struct\nfn main() {\n    let fuz = Foo {\n        foo: vec![1.2, 2.3, 3.4],\n        far: vec![5, 6],\n    };\n    for item in fuz.iter() {\n        match item {\n            Bar::MyFloat(f) =&gt; println!(\"float : {}\", f),\n            Bar::MyInt(i) =&gt; println!(\"int : {}\", i),\n        }\n    }\n}\n</code></pre>\n\n<p>This is almost certainly the wrong way to do things, but I wanted to see if it was possible.  I determined the iterator type by compiling the code:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let x = vec![1.2, 2.3, 3.4];\n    let y: i32 = x.iter().peekable();\n}\n</code></pre>\n\n<p>which gave the compiler error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n --&gt; junk.rs:4:19\n  |\n4 |     let y: i32 = x.iter().peekable();\n  |                  ^^^^^^^^^^^^^^^^^^^ expected i32, found struct `std::iter::Peekable`\n  |\n  = note: expected type `i32`\n             found type `std::iter::Peekable&lt;std::slice::Iter&lt;'_, {float}&gt;&gt;`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n</code></pre>\n\n<p>This contains the type of what I was looking for. Again, this is almost certainly the wrong thing to do, but it helped me understand the provided answer.</p>\n"}], "owner": {"reputation": 5358, "user_id": 1932452, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/7dfca62a1e4eb69f39ce00152862c70e?s=128&d=identicon&r=PG", "display_name": "wyer33", "link": "https://stackoverflow.com/users/1932452/wyer33"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 735, "favorite_count": 0, "accepted_answer_id": 56413273, "answer_count": 2, "score": 4, "last_activity_date": 1559726960, "creation_date": 1559458591, "last_edit_date": 1559726960, "question_id": 56412826, "link": "https://stackoverflow.com/questions/56412826/how-to-define-an-iterator-in-rust-over-a-struct-that-contains-items-that-are-ite", "title": "How to define an iterator in Rust over a struct that contains items that are iterable?", "body": "<p>How does one define an iterator in Rust over a struct that contains items that are already iterable?  Here's one attempt at the iterator</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use rand;\n\n// Structure of items\nstruct Foo {\n    foo: Vec&lt;f64&gt;,\n    bar: Vec&lt;i64&gt;,\n}\n\n// Iterator for the structure\nstruct FooIter {\n    foo: Iterator,\n    bar: Iterator,\n}\n\n// Method that provides the iterator for use\nimpl Foo {\n    fn iter(&amp;self) -&gt; FooIter {\n        FooIter {\n            foo: self.foo.iter().peek(),\n            bar: self.bar.iter().peek(),\n        }\n    }\n}\n\n// Item desired from iterator\nenum Bar {\n    MyFloat(f64),\n    MyInt(i64),\n}\n\n// Implementation of the iterator\nimpl Iterator for FooIter {\n    type Item = Bar;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Bar&gt; {\n        match (self.foo.peek(), self.far.peek()) {\n            (Some(_), Some(_)) =&gt; {\n                if rand::random() {\n                    self.foo.next()\n                } else {\n                    self.bar.next()\n                }\n            }\n            (Some(_), None) =&gt; self.foo.next(),\n            (None, Some(_)) =&gt; self.bar.next(),\n            (None, None) =&gt; None,\n        }\n    }\n}\n\n// Iterate over a struct\nfn main() {\n    let fuz = Foo {\n        foo: vec![1.2, 2.3, 3.4],\n        bar: vec![5, 6],\n    };\n    for item in fuz.iter() {\n        match item {\n            Bar::MyFloat(f) =&gt; println!(\"float : {}\", f),\n            Bar::MyInt(i) =&gt; println!(\"int : {}\", i),\n        }\n    }\n}\n</code></pre>\n\n<p>In short, the struct <code>Foo</code> contains two vectors and I'd like an iterator that jumps back and forth between the two elements randomly.  Certainly, there are many mistakes here, but at the core, I don't understand how to create a struct that carries the iterators for the items <code>foo</code> and <code>far</code> because Rust defines iterators as a trait and not a type.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 79, "user_id": 9201617, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/INMBz.png?s=128&g=1", "display_name": "AntiInsect", "link": "https://stackoverflow.com/users/9201617/antiinsect"}, "edited": false, "score": 0, "creation_date": 1559452834, "post_id": 56412386, "comment_id": 99421579, "body": "Oh, my bad, I have not noticed it. Thanks for that."}, {"owner": {"reputation": 79, "user_id": 9201617, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/INMBz.png?s=128&g=1", "display_name": "AntiInsect", "link": "https://stackoverflow.com/users/9201617/antiinsect"}, "edited": false, "score": 1, "creation_date": 1559482083, "post_id": 56412386, "comment_id": 99426952, "body": "Actually, there is a mistake in my second version. It also works when I implement like this: <b>input.graphemes(true).rev().collect::&lt;String&gt;()</b>"}], "tags": [], "owner": {"reputation": 12194, "user_id": 4474419, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/04ce27f0ebe4713b51911cd8475c3b42?s=128&d=identicon&r=PG", "display_name": "Davislor", "link": "https://stackoverflow.com/users/4474419/davislor"}, "is_accepted": true, "score": 2, "last_activity_date": 1559452632, "creation_date": 1559452632, "answer_id": 56412386, "question_id": 56412364, "link": "https://stackoverflow.com/questions/56412364/how-to-use-the-method-unicodesegmentationgraphemes/56412386#56412386", "title": "How to use the method &quot;UnicodeSegmentation::graphemes&quot;", "body": "<p>The first link is up-to-date. The second is to the documentation for version 1.2.0.  There is a button on the bar at the head of the page to \u201cGo to latest version.\u201d</p>\n"}], "owner": {"reputation": 79, "user_id": 9201617, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/INMBz.png?s=128&g=1", "display_name": "AntiInsect", "link": "https://stackoverflow.com/users/9201617/antiinsect"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 79, "favorite_count": 0, "accepted_answer_id": 56412386, "answer_count": 1, "score": 0, "last_activity_date": 1559452632, "creation_date": 1559452360, "question_id": 56412364, "link": "https://stackoverflow.com/questions/56412364/how-to-use-the-method-unicodesegmentationgraphemes", "title": "How to use the method &quot;UnicodeSegmentation::graphemes&quot;", "body": "<p>While trying to reverse a string, I found the method mentioned in the title </p>\n\n<p>i.e. <strong>UnicodeSegmentation::graphemes</strong></p>\n\n<p>I referred to the official documentation for usage, but there were two different references which bothered me a lot.</p>\n\n<p>the <a href=\"https://unicode-rs.github.io/unicode-segmentation/unicode_segmentation/trait.UnicodeSegmentation.html?search=\" rel=\"nofollow noreferrer\">first</a> one works but the <a href=\"https://docs.rs/unicode-segmentation/1.2.1/unicode_segmentation/struct.Graphemes.html\" rel=\"nofollow noreferrer\">second</a> does not.</p>\n\n<p>To be specific:\nthe function I coded using the first method:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use unicode_segmentation::UnicodeSegmentation;\n\npub fn reverse(input: &amp;str) -&gt; String {\n    UnicodeSegmentation::graphemes(input, true).rev().collect::&lt;String&gt;()\n}\n</code></pre>\n\n<p>and the function I coded using the second method:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use unicode_segmentation::UnicodeSegmentation;\n\npub fn reverse(input: &amp;str) -&gt; String {\n    input.UnicodeSegmentation::graphemes(true).rev().collect::&lt;String&gt;()\n}\n</code></pre>\n"}, {"tags": ["rust", "closures", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 290, "user_id": 9156640, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2cc37ec575a46246de4a809e7533e912?s=128&d=identicon&r=PG&f=1", "display_name": "dospro", "link": "https://stackoverflow.com/users/9156640/dospro"}, "edited": false, "score": 0, "creation_date": 1559443696, "post_id": 56411756, "comment_id": 99420617, "body": "Ha. So the problem was the <code>Option</code> part. After reading your answer, I looked for <code>Option</code> documentation. There already is a <code>as_mut</code> method: <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#method.as_mut\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/option/enum.Option.html#method.as_mut</a> . which simplifies the code a bit."}], "tags": [], "owner": {"reputation": 340, "user_id": 1087576, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cc0840f7fd22073389276d85120e0884?s=128&d=identicon&r=PG", "display_name": "Tom K", "link": "https://stackoverflow.com/users/1087576/tom-k"}, "is_accepted": true, "score": 1, "last_activity_date": 1559442301, "last_edit_date": 1559442301, "creation_date": 1559441627, "answer_id": 56411756, "question_id": 56411645, "link": "https://stackoverflow.com/questions/56411645/cannot-move-out-of-borrowed-content-from-closure-return-value/56411756#56411756", "title": "Cannot move out of borrowed content from closure return value", "body": "<p>The trouble you're having is that calling <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap\" rel=\"nofollow noreferrer\"><code>unwrap</code></a> on an <code>Option</code> will consume it--it takes <code>self</code> as an argument. Inside <code>run()</code>, your <code>MyType</code> only has a <code>&amp;mut self</code> reference to itself, so it cannot take ownership of its field.</p>\n\n<p>The solution is to take mutable reference to the stored function instead:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>    pub fn run(&amp;mut self) {\n        if let Some(func) = &amp;mut self.func {\n            let result = func();\n            if result.contains(&amp;Romans::I) {\n                println!(\"Roman one!\");\n            }\n        }\n    }\n</code></pre>\n"}], "owner": {"reputation": 290, "user_id": 9156640, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2cc37ec575a46246de4a809e7533e912?s=128&d=identicon&r=PG&f=1", "display_name": "dospro", "link": "https://stackoverflow.com/users/9156640/dospro"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 240, "favorite_count": 0, "accepted_answer_id": 56411756, "answer_count": 1, "score": 0, "last_activity_date": 1559444825, "creation_date": 1559439378, "last_edit_date": 1559444825, "question_id": 56411645, "link": "https://stackoverflow.com/questions/56411645/cannot-move-out-of-borrowed-content-from-closure-return-value", "title": "Cannot move out of borrowed content from closure return value", "body": "<p>I found this problem when working on a mid-size project. The following snippet is a minimal summary of the problem.</p>\n\n<p>In the following code I try to map a list of enum variants into a Set of different enum variants. I use a closure so I can capture a mutable reference to <code>my_list</code> which is a list of <em>source</em> enum variants. The closure is then kept inside a <code>MyType</code> instance so it can be called later and the result used inside another method.</p>\n\n<p>To keep the closure, I used a <code>FnMut</code> trait inside a <code>Box</code>. I also wrapped that inside an <code>Option</code> so I can set the closure after instance creation.</p>\n\n<p>I based this a bit from the question asked here: <a href=\"https://stackoverflow.com/questions/49117927/structs-with-boxed-vs-unboxed-closures\">structs with boxed vs. unboxed closures</a></p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::collections::HashSet;\n\nenum Numbers {\n    One,\n    Two,\n    Three,\n}\n\n#[derive(Eq, PartialEq, Hash)]\nenum Romans {\n    I,\n    II,\n    III,\n}\n\nstruct MyType&lt;'a&gt; {\n    func: Option&lt;Box&lt;dyn FnMut() -&gt; HashSet&lt;Romans&gt; + 'a&gt;&gt;,\n}\n\nimpl&lt;'a&gt; MyType&lt;'a&gt; {\n    pub fn set_func&lt;F&gt;(&amp;mut self, a_func: F)\n        where F: FnMut() -&gt; HashSet&lt;Romans&gt; + 'a {\n        self.func = Some(Box::new(a_func));\n    }\n\n    pub fn run(&amp;mut self) {\n        let result = (self.func.unwrap())();\n        if result.contains(&amp;Romans::I) {\n            println!(\"Roman one!\");\n        }\n    }\n}\n\nfn main() {\n    let my_list = vec![Numbers::One, Numbers::Three];\n    let mut my_type = MyType {\n        func: None,\n    };\n    my_type.set_func(|| -&gt; HashSet&lt;Romans&gt; {\n        HashSet::from(my_list\n            .iter()\n            .map(|item| {\n                match item {\n                    Numbers::One =&gt; Romans::I,\n                    Numbers::Two =&gt; Romans::II,\n                    Numbers::Three =&gt; Romans::III,\n                }\n            })\n            .collect()\n        )\n    });\n\n    my_type.run();\n}\n\n</code></pre>\n\n<p>When I try to compile, I get the following error:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>error[E0507]: cannot move out of borrowed content\n  --&gt; src/main.rs:27:23\n   |\n27 |         let result = (self.func.unwrap())();\n   |                       ^^^^^^^^^ cannot move out of borrowed content\n\nerror: aborting due to previous error\n</code></pre>\n\n<p>I don't quite understand what is being moved out. Is it a hidden <code>self</code>? The resulting <code>HashSet</code>? or maybe the values inside the set?\nWhat am I doing wrong?</p>\n"}, {"tags": ["methods", "rust", "traits"], "comments": [{"owner": {"reputation": 209014, "user_id": 125816, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7f5aa40b1e7a95599c7a19451f88ff3a?s=128&d=identicon&r=PG", "display_name": "Sergio Tulentsev", "link": "https://stackoverflow.com/users/125816/sergio-tulentsev"}, "edited": false, "score": 0, "creation_date": 1559434547, "post_id": 56411302, "comment_id": 99419737, "body": "where by &quot;postfix notation&quot; you mean &quot;define and call a method&quot;? You can do that without traits, no?"}, {"owner": {"reputation": 209014, "user_id": 125816, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7f5aa40b1e7a95599c7a19451f88ff3a?s=128&d=identicon&r=PG", "display_name": "Sergio Tulentsev", "link": "https://stackoverflow.com/users/125816/sergio-tulentsev"}, "edited": false, "score": 0, "creation_date": 1559434645, "post_id": 56411302, "comment_id": 99419755, "body": "Ah, but not for external types, I see."}, {"owner": {"reputation": 5358, "user_id": 1932452, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/7dfca62a1e4eb69f39ce00152862c70e?s=128&d=identicon&r=PG", "display_name": "wyer33", "link": "https://stackoverflow.com/users/1932452/wyer33"}, "reply_to_user": {"reputation": 209014, "user_id": 125816, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7f5aa40b1e7a95599c7a19451f88ff3a?s=128&d=identicon&r=PG", "display_name": "Sergio Tulentsev", "link": "https://stackoverflow.com/users/125816/sergio-tulentsev"}, "edited": false, "score": 0, "creation_date": 1559435056, "post_id": 56411302, "comment_id": 99419806, "body": "@SergioTulentsev Precisely.  I tried just <code>impl Vec &lt;&amp;str&gt;</code>, but receive the compilation error <code>impl for type defined outside of crate</code>.  As such, to be clear, this is for types that I did not define, such as <code>Vec &lt;&amp;str&gt;</code> above."}, {"owner": {"reputation": 2659, "user_id": 8050514, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/6CRdl.jpg?s=128&g=1", "display_name": "Optimistic Peach", "link": "https://stackoverflow.com/users/8050514/optimistic-peach"}, "edited": false, "score": 1, "creation_date": 1559444092, "post_id": 56411302, "comment_id": 99420655, "body": "Just going to add that your example can already be accomplished using a <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=77ee34ffb97bab56502ed85bd3477635\" rel=\"nofollow noreferrer\">pre-existing method</a> who&#39;s definition can be found <a href=\"https://doc.rust-lang.org/std/slice/trait.SliceConcatExt.html#tymethod.join\" rel=\"nofollow noreferrer\">here</a>"}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1559456842, "post_id": 56411302, "comment_id": 99422062, "body": "What wrong with defining a trait ?"}, {"owner": {"reputation": 5358, "user_id": 1932452, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/7dfca62a1e4eb69f39ce00152862c70e?s=128&d=identicon&r=PG", "display_name": "wyer33", "link": "https://stackoverflow.com/users/1932452/wyer33"}, "reply_to_user": {"reputation": 2659, "user_id": 8050514, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/6CRdl.jpg?s=128&g=1", "display_name": "Optimistic Peach", "link": "https://stackoverflow.com/users/8050514/optimistic-peach"}, "edited": false, "score": 0, "creation_date": 1559458098, "post_id": 56411302, "comment_id": 99422263, "body": "It was just more verbose than I&#39;d like for something that I thought would be more simple.  That said, it&#39;s fine and I appreciate the help.  Really, @OptimisticPeach has a better way to accomplish this, thanks for that, but I learned something in this process."}], "answers": [{"tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": true, "score": 5, "last_activity_date": 1559437142, "last_edit_date": 1559437142, "creation_date": 1559435390, "answer_id": 56411372, "question_id": 56411302, "link": "https://stackoverflow.com/questions/56411302/is-there-a-way-to-use-postfix-notation-to-call-a-function-in-rust-without-defini/56411372#56411372", "title": "Is there a way to use postfix notation to call a function in Rust without defining a new trait?", "body": "<p>This is a common pattern!</p>\n\n<p>If you want to add methods to a type that is defined in another crate, the official way to do so is it define a trait and implement it for that type. If the type is from another crate then <em>this is the <strong>only</strong> way to do it</em>.</p>\n\n<p>A ubiquitous example of this is the crate <a href=\"https://docs.rs/itertools/latest/itertools/\" rel=\"noreferrer\"><code>itertools</code></a> which uses a trait to add useful methods to every existing implementation of <code>std::iter::Iterator</code>.</p>\n\n<p><code>Itertools</code> works just as you describe. There is a trait which declares a number of methods:</p>\n\n<pre><code>pub trait Itertools : Iterator {\n    fn interleave&lt;J&gt;(self, other: J) -&gt; Interleave&lt;Self, J::IntoIter&gt;\n        where J: IntoIterator&lt;Item = Self::Item&gt;,\n              Self: Sized\n    {\n        interleave(self, other)\n    }\n\n    // etc...\n}\n</code></pre>\n\n<p>It is defined for all <code>Iterator</code>s:</p>\n\n<pre><code>impl&lt;T: ?Sized&gt; Itertools for T where T: Iterator { }\n</code></pre>\n\n<p>And, whenever you want to use these extra methods, you import it:</p>\n\n<pre><code>use itertools::Itertools;\n\nlet it = (1..7).interleave(vec![-1, -2]);\nitertools::assert_equal(it, vec![1, -1, 2, -2, 3, 4, 5, 6]);\n</code></pre>\n"}], "owner": {"reputation": 5358, "user_id": 1932452, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/7dfca62a1e4eb69f39ce00152862c70e?s=128&d=identicon&r=PG", "display_name": "wyer33", "link": "https://stackoverflow.com/users/1932452/wyer33"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 96, "favorite_count": 0, "accepted_answer_id": 56411372, "answer_count": 1, "score": 1, "last_activity_date": 1559437142, "creation_date": 1559434242, "last_edit_date": 1559435483, "question_id": 56411302, "link": "https://stackoverflow.com/questions/56411302/is-there-a-way-to-use-postfix-notation-to-call-a-function-in-rust-without-defini", "title": "Is there a way to use postfix notation to call a function in Rust without defining a new trait?", "body": "<p>Perhaps my terminology is wrong, but is there a way to use postfix notation to call a function in Rust without defining a new trait?  Basically, I have a vector of <code>&amp;str</code> and I'd like to convert them into a string with the notation <code>myvec.as_string()</code>.  Currently, I can do this with the code</p>\n\n<pre><code>trait Foo {                \n    fn as_string(&amp;self) -&gt; String;\n}   \n\nimpl Foo for Vec&lt;&amp;str&gt; {  \n    fn as_string(&amp;self) -&gt; String {\n        let mut mystr = self\n            .iter()\n            .fold(String::new(),|sum,s| format!(\"{}{}:\", sum, s));\n        mystr.pop();\n        mystr\n    }\n}\n\nfn main() {\n    let my_vec = vec![\"bar\", \"buz\", \"baz\"];\n    use crate::Foo;       \n    println!(\"{}\", my_vec.as_string());\n}\n</code></pre>\n\n<p>That said, in order to make this work, I needed to define a trait called <code>Foo</code> that I don't really care about and the trait needed to be opened with <code>use crate::Foo</code> prior to the call to <code>as_string</code>.  Is there a better way to accomplish this?  And, to be clear, I'd like to avoid the notation <code>as_string(myvec)</code> if possible because the postfix notation has been nice for chaining together commands.</p>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": true, "score": 3, "last_activity_date": 1559433975, "last_edit_date": 1559433975, "creation_date": 1559432711, "answer_id": 56411215, "question_id": 56411142, "link": "https://stackoverflow.com/questions/56411142/syntax-meaning-for-impla-configa/56411215#56411215", "title": "Syntax meaning for `impl&lt;&#39;a&gt; Config&lt;&#39;a&gt; {`", "body": "<p>The first <code>&lt;'a&gt;</code> declares a context which introduces variables which are universally quantified. In other words, <code>impl&lt;'a&gt; ...</code> means \"implement for <em>any possible</em> lifetime <code>'a</code> ... \".</p>\n\n<p>Once the variables are introduced, the second <code>'a</code> is the application of the variable to a type.</p>\n\n<p>You can read the syntax <code>impl&lt;'a&gt; Config&lt;'a&gt;</code> as: \"for <em>any possible</em> lifetime <code>'a</code> these methods are defined for <code>Config&lt;'a&gt;</code>\".</p>\n\n<p>In a more complex situation the context is where you can place constraints on the parameters. For lifetimes this is always an \"outlives\" relationship, for example <code>&lt;'a, 'b: 'a</code>> (\"for all lifetimes <code>'a</code> and <code>'b</code> where <code>'b</code> outlives <code>'a</code>\"). For types, this could include both trait or lifetime bounds, e.g. <code>&lt;'a, T: + Debug + 'a&gt;</code> (\"for all lifetimes, <code>'a</code> and all types <code>T</code>, where <code>T</code> implements <code>Debug</code> and does not outlive <code>'a</code>\").</p>\n"}, {"tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": false, "score": 3, "last_activity_date": 1559432787, "creation_date": 1559432787, "answer_id": 56411219, "question_id": 56411142, "link": "https://stackoverflow.com/questions/56411142/syntax-meaning-for-impla-configa/56411219#56411219", "title": "Syntax meaning for `impl&lt;&#39;a&gt; Config&lt;&#39;a&gt; {`", "body": "<p><em>All generic lifetimes and types need to be declared somewhere.</em></p>\n\n<p>Try to compile your code to use <code>impl Config&lt;'a&gt;</code> and you'll get this error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0261]: use of undeclared lifetime name `'a`\n --&gt; src/lib.rs:9:13\n  |\n9 | impl Config&lt;'a&gt; {\n  |             ^^ undeclared lifetime\n</code></pre>\n\n<p>Like type parameters, generic lifetime parameters such as the <code>'a</code> in <code>Config&lt;'a&gt;</code> need to be declared on every function, type definition or trait implementation that they are used. They do not even have to have exactly the same name as how the parameter was declared originally:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl&lt;'c&gt; Config&lt;'c&gt; {\n    ... // use 'c instead of 'a\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/31470146/1233251\">What are the differences between specifying lifetime parameters on an impl or on a method?</a></li>\n<li>The Rust Programming Language, <a href=\"https://doc.rust-lang.org/stable/book/ch10-01-syntax.html#in-method-definitions\" rel=\"nofollow noreferrer\">Section 1.1</a> on using generic data types in method definitions;</li>\n<li>The Rust Programming Language, <a href=\"https://doc.rust-lang.org/stable/book/ch10-02-traits.html#using-trait-bounds-to-conditionally-implement-methods\" rel=\"nofollow noreferrer\">Section 10.2</a> on using trait bounds to conditionally implement methods.</li>\n</ul>\n"}], "owner": {"reputation": 3358, "user_id": 852385, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/5c0eac51aaa99541fb966854b5dcb131?s=128&d=identicon&r=PG", "display_name": "Helin Wang", "link": "https://stackoverflow.com/users/852385/helin-wang"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 74, "favorite_count": 0, "accepted_answer_id": 56411215, "answer_count": 2, "score": 0, "last_activity_date": 1559433975, "creation_date": 1559431670, "last_edit_date": 1559431969, "question_id": 56411142, "link": "https://stackoverflow.com/questions/56411142/syntax-meaning-for-impla-configa", "title": "Syntax meaning for `impl&lt;&#39;a&gt; Config&lt;&#39;a&gt; {`", "body": "<p>For the following code:</p>\n\n<pre><code>struct Config&lt;'a&gt; {\n    query: &amp;'a str,\n    filename: &amp;'a str,\n    case_sensitive: bool,\n}\n\nimpl&lt;'a&gt; Config&lt;'a&gt; {\n    pub fn new(args: &amp;'a [String]) -&gt; Result&lt;Config, &amp;'static str&gt; {\n        if args.len() &lt; 3 {\n            return Err(\"not enough arguments\");\n        }\n\n        let query = &amp;args[1];\n        let filename = &amp;args[2];\n\n        let case_sensitive = env::var(\"CASE_INSENSITIVE\").is_err();\n\n        Ok(Config {\n            query,\n            filename,\n            case_sensitive,\n        })\n    }\n}\n</code></pre>\n\n<p>Why <code>impl&lt;'a&gt; Config&lt;'a&gt; {</code> is required, rather than <code>impl Config&lt;'a&gt; {</code>?</p>\n\n<p>What is the syntactic meaning of the first and second <code>'a</code>? I know <code>'a</code> is a lifetime annotation, but don't know why it's placed after both <code>impl</code> and <code>Config</code>. What does the first <code>'a</code> do and what does the second <code>'a</code> do?</p>\n"}, {"tags": ["asynchronous", "rust", "reqwest"], "owner": {"reputation": 375, "user_id": 11134001, "user_type": "registered", "profile_image": "https://graph.facebook.com/2130930103663266/picture?type=large", "display_name": "Thomas Braun", "link": "https://stackoverflow.com/users/11134001/thomas-braun"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 49, "favorite_count": 0, "answer_count": 0, "score": 1, "last_activity_date": 1559426764, "creation_date": 1559426764, "question_id": 56410769, "link": "https://stackoverflow.com/questions/56410769/multiple-futures-via-join-all-that-each-return-a-string-which-is-fetched-via-req", "title": "Multiple futures via join_all that each return a String which is fetched via Reqwest", "body": "<pre><code>pub static MAX_BLOCK_SIZE: u32 = 1024*1024; //Please do not exceed this value, or the webserver will deny your request.\npub static ENABLE_DEBUG: bool = false; //Enable temporarily if you're encountering problems with fetching the data\npub static MAX_RETRY_COUNT: u8 = 10;\n\nfn get_raw_data_async(remote: Remote, length: usize, mut retry_count: usize) -&gt; impl Future&lt;Item=String, Error=reqwest::Error&gt;{\nfutures::lazy(move || {\n    if length as u32 &gt; MAX_BLOCK_SIZE {\n        return Ok(None)\n    }\n\n    let (length, size) = {\n        if length &lt;= 1024 {\n            (1, length)\n        } else {\n            let val = (length as f64)/ (1024 as f64);\n            let len = math::round::ceil(val, 0) as usize;\n            println!(\"We want {}, and are using {} x 1024 to get it\", length, len);\n            (len, 1024)\n        }\n    };\n\n    let mut url = format!(\"https://qrng.anu.edu.au/API/jsonI.php?length={}&amp;type=hex16&amp;size={}\", length, size);\n    remote.clone().execute(reqwest::get(url.as_str()).and_then(|mut resp| {Ok(Some(resp.text().unwrap()))}).or_else(|err| {\n        //DC?\n        retry_count += 1;\n        if retry_count &gt; MAX_RETRY_COUNT as usize {\n            return Ok(None)\n        }\n        //try again\n        get_raw_data_async(remote.clone(), length, retry_count)\n    }));\n})\n}\n</code></pre>\n\n<p>Consider the code above. If you input an arbitrary remote, some length, and use \"0\" for retry-count, the program is suppose to return the string which is downloaded using reqwest.</p>\n\n<p>I want it to download information, then once the information is done downloading, return it to the calling function outside of this function's closure. If, in the case the info can't download, I want it to try again (up to a certain number of times, determined by MAX_RETRY_COUNT). </p>\n\n<p>The idea is that this entire function is called and stored into a futures-array. Then the futures are all joined() to eventually concatenate the outputs of however many times this function was called.</p>\n\n<p>Obviously, there will be a compiler error. It keeps telling me that the function in the execute() closure is not valid. To those who are experiences, you'll know why of course. So, knowledgeable one, I ask you: how might I craft this function successfully? </p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 815, "user_id": 1150292, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/VQ2aZ.jpg?s=128&g=1", "display_name": "Mara Bos", "link": "https://stackoverflow.com/users/1150292/mara-bos"}, "edited": false, "score": 1, "creation_date": 1559397958, "post_id": 56406957, "comment_id": 99412074, "body": "Associating a constant with a type works just fine. Using that constant in the type system, however, does not. You&#39;ll have to wait for const generics support in Rust (expected later this year)."}, {"owner": {"reputation": 9010, "user_id": 2588800, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/847da843d41921363502159c8b7e5549?s=128&d=identicon&r=PG", "display_name": "Svetlin Zarev", "link": "https://stackoverflow.com/users/2588800/svetlin-zarev"}, "edited": false, "score": 1, "creation_date": 1559404607, "post_id": 56406957, "comment_id": 99413598, "body": "Possible duplicate of <a href=\"https://stackoverflow.com/questions/55871619/associated-const-in-size-of-returned-array\">Associated const in size of returned array</a>"}, {"owner": {"reputation": 1143, "user_id": 11588505, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cc506473f38d0dc9a703179a853a1ebf?s=128&d=identicon&r=PG&f=1", "display_name": "Camelid", "link": "https://stackoverflow.com/users/11588505/camelid"}, "reply_to_user": {"reputation": 815, "user_id": 1150292, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/VQ2aZ.jpg?s=128&g=1", "display_name": "Mara Bos", "link": "https://stackoverflow.com/users/1150292/mara-bos"}, "edited": false, "score": 0, "creation_date": 1609013642, "post_id": 56406957, "comment_id": 115731029, "body": "Update to @MaraBos&#39;s comment: a limited subset of const generics will likely be stabilized in a couple releases!"}], "answers": [{"tags": [], "owner": {"reputation": 1602, "user_id": 5947247, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f5212b96ae435bb73b9980f34b2913e8?s=128&d=identicon&r=PG&f=1", "display_name": "Isaac van Bakel", "link": "https://stackoverflow.com/users/5947247/isaac-van-bakel"}, "is_accepted": true, "score": 3, "last_activity_date": 1559398824, "creation_date": 1559398824, "answer_id": 56407531, "question_id": 56406957, "link": "https://stackoverflow.com/questions/56406957/any-way-to-associate-constant-with-type-in-rust/56407531#56407531", "title": "any way to associate constant with type in Rust?", "body": "<p>You can use the <a href=\"https://docs.rs/generic-array/0.13.0/generic_array/\" rel=\"nofollow noreferrer\">generic_array</a> crate - this doesn't let you use fixed-size Rust arrays, but you can express an array length as an associated type</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>trait My {\n  type C: ArrayLength&lt;i32&gt;;\n}\n</code></pre>\n\n<p>And then refer to it with a trait bound</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn f&lt;T&gt;() -&gt; GenericArray&lt;i32, T::C&gt; where T: My {\n  ...\n}\n</code></pre>\n\n<p>You can then also get the constant value from the type with <a href=\"https://docs.rs/typenum/1.10.0/typenum/marker_traits/trait.Unsigned.html#tymethod.to_usize\" rel=\"nofollow noreferrer\">to_usize</a>.</p>\n"}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 220, "favorite_count": 0, "accepted_answer_id": 56407531, "answer_count": 1, "score": 0, "last_activity_date": 1559404564, "creation_date": 1559393757, "last_edit_date": 1559404564, "question_id": 56406957, "link": "https://stackoverflow.com/questions/56406957/any-way-to-associate-constant-with-type-in-rust", "title": "any way to associate constant with type in Rust?", "body": "<p>I want to associate a constant defined in my trait, and use it in a generic function.</p>\n\n<pre><code>trait My {\n    const C: usize;\n}\n\nfn f&lt;T&gt;() -&gt; [i32; T::C] where T: My {\n    unimplemented!();\n}\n</code></pre>\n\n<p>But rust can not handle this</p>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=a2d51315ba58f92d0e29bdac32115a62\" rel=\"nofollow noreferrer\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=a2d51315ba58f92d0e29bdac32115a62</a></p>\n\n<p>Is there any other way to get constant from type in generic function?</p>\n"}, {"tags": ["time", "rust"], "answers": [{"tags": [], "owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "is_accepted": true, "score": 3, "last_activity_date": 1559378532, "creation_date": 1559378532, "answer_id": 56405143, "question_id": 56404479, "link": "https://stackoverflow.com/questions/56404479/how-to-find-time-difference-using-chrono-library-in-rust/56405143#56405143", "title": "How To Find Time Difference using Chrono library in Rust", "body": "<p>A simple look to the <a href=\"https://docs.rs/chrono/0.4.6/chrono/naive/struct.NaiveTime.html#impl-Sub%3CNaiveTime%3E\" rel=\"nofollow noreferrer\">doc</a> give the <a href=\"https://docs.rs/chrono/0.4.6/chrono/struct.Duration.html#method.num_minutes\" rel=\"nofollow noreferrer\">answer</a>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use chrono::Utc;\n\nfn main() {\n    let start_time = Utc::now().time();\n    let end_time = Utc::now().time();\n    let diff = end_time - start_time;\n    println!(\"Total time taken to run is {}\", diff.num_minutes());\n}\n</code></pre>\n\n<p>but be aware that it's not a good way to mesure time in a monotonic way, this code could show -5 minutes if user change the system date somehow. Also call <code>time()</code> remove the information of the date, and this is strange when you use chrono because generally you don't want to ignore the date so just remove <code>time()</code> call.</p>\n"}, {"tags": [], "owner": {"reputation": 440, "user_id": 7907717, "user_type": "registered", "accept_rate": 83, "profile_image": "https://lh4.googleusercontent.com/-0LU0FCk5puc/AAAAAAAAAAI/AAAAAAAAOaA/0yHHaz1nXq8/photo.jpg?sz=128", "display_name": "CircArgs", "link": "https://stackoverflow.com/users/7907717/circargs"}, "is_accepted": false, "score": 1, "last_activity_date": 1594692882, "creation_date": 1594692882, "answer_id": 62887031, "question_id": 56404479, "link": "https://stackoverflow.com/questions/56404479/how-to-find-time-difference-using-chrono-library-in-rust/62887031#62887031", "title": "How To Find Time Difference using Chrono library in Rust", "body": "<p>It seems the accepted answer has some potential flaws.</p>\n<p>A potentially better way as recommended in the <a href=\"https://rust-lang-nursery.github.io/rust-cookbook/datetime/duration.html\" rel=\"nofollow noreferrer\">rust nursery</a></p>\n<p>is the following:</p>\n<pre><code>use std::time::{Duration, Instant};\nuse std::thread;\n\nfn expensive_function() {\n    thread::sleep(Duration::from_secs(1));\n}\n\nfn main() {\n    let start = Instant::now();\n    expensive_function();\n    let duration = start.elapsed();\n\n    println!(&quot;Time elapsed in expensive_function() is: {:?}&quot;, duration);\n}\n</code></pre>\n"}], "owner": {"reputation": 10637, "user_id": 3102968, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/1XKm3.png?s=128&g=1", "display_name": "joesan", "link": "https://stackoverflow.com/users/3102968/joesan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 967, "favorite_count": 1, "accepted_answer_id": 56405143, "answer_count": 2, "score": 3, "last_activity_date": 1594692882, "creation_date": 1559371519, "last_edit_date": 1559378590, "question_id": 56404479, "link": "https://stackoverflow.com/questions/56404479/how-to-find-time-difference-using-chrono-library-in-rust", "title": "How To Find Time Difference using Chrono library in Rust", "body": "<p>I have a Rust program where I want to do some simple benchmarking with start time and end time! </p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use chrono::{NaiveTime, Utc};\n\nfn main() {\n    let start_time: NaiveTime = Utc::now().time();\n    let end_time: NaiveTime = Utc::now().time();\n    println!(\"Total time taken to run is {}\", end_time - start_time);\n}\n</code></pre>\n\n<p>The code above prints as:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Total time taken to run is PT520.532696S\n</code></pre>\n\n<p>I guess it is 520 seconds if I'm not wrong, but how can I convert that into minutes? Is there a better way?</p>\n"}, {"tags": ["types", "rust", "variable-assignment"], "comments": [{"owner": {"reputation": 6119, "user_id": 878182, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/fe9bb29f576661916e29a8d327493d6b?s=128&d=identicon&r=PG", "display_name": "Alistair A. Israel", "link": "https://stackoverflow.com/users/878182/alistair-a-israel"}, "edited": false, "score": 0, "creation_date": 1559355648, "post_id": 56403266, "comment_id": 99404957, "body": "You can declare a variable (and its type) without initialisation, but the Rust compiler (correctly) prevents you from ever reading its value before it&#39;s been initialized. See <a href=\"https://doc.rust-lang.org/nomicon/checked-uninit.html\" rel=\"nofollow noreferrer\">https://doc.rust-lang.org/nomicon/checked-uninit.html</a>"}, {"owner": {"reputation": 6119, "user_id": 878182, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/fe9bb29f576661916e29a8d327493d6b?s=128&d=identicon&r=PG", "display_name": "Alistair A. Israel", "link": "https://stackoverflow.com/users/878182/alistair-a-israel"}, "edited": false, "score": 0, "creation_date": 1559355937, "post_id": 56403266, "comment_id": 99404999, "body": "Also, in general the &quot;declare first before using&quot; pattern prevalent since the days of C/C++ aren&#39;t preferred anymore with modern languages. Instead, it&#39;s considered best practice to declare variables closest to where they&#39;re used. See <a href=\"https://doc.rust-lang.org/rust-by-example/variable_bindings/declare.html\" rel=\"nofollow noreferrer\">https://doc.rust-lang.org/rust-by-example/variable_bindings/&zwnj;&#8203;declare.html</a>"}, {"owner": {"reputation": 3683, "user_id": 4371758, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a60b9f124beca310b9bba6762c7aabbd?s=128&d=identicon&r=PG&f=1", "display_name": "Bubletan", "link": "https://stackoverflow.com/users/4371758/bubletan"}, "edited": false, "score": 0, "creation_date": 1559356451, "post_id": 56403266, "comment_id": 99405054, "body": "Technically you can do something like <code>let x = unsafe { mem::uninitialized::&lt;i32&gt;() }</code>."}], "answers": [{"tags": [], "owner": {"reputation": 2659, "user_id": 8050514, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/6CRdl.jpg?s=128&g=1", "display_name": "Optimistic Peach", "link": "https://stackoverflow.com/users/8050514/optimistic-peach"}, "is_accepted": true, "score": 3, "last_activity_date": 1559356155, "creation_date": 1559356155, "answer_id": 56403430, "question_id": 56403266, "link": "https://stackoverflow.com/questions/56403266/how-do-i-annotate-rust-variables-data-type-without-assignment/56403430#56403430", "title": "How do I annotate rust variables&#39; data type without assignment?", "body": "<p>In rust, the type of a variable is usually inferred from the context.<br>\nThe context can include any of the following:</p>\n\n<ul>\n<li>The type of the value being assigned:  </li>\n</ul>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let x = String::new(); //x is now a String\n</code></pre>\n\n<ul>\n<li>The return type of the function being called:</li>\n</ul>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn foo() -&gt; usize {\n    40\n}\nlet x = foo(); //x is now usize\n</code></pre>\n\n<p>But if you don't have a type to infer, as in there is no assignment to the variable:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let x;\n</code></pre>\n\n<p>Then rust cannot infer the type. Therefore, <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=35386903b1c1f879cbd947ca5abae3f5\" rel=\"nofollow noreferrer\">it will get mad at you</a>. </p>\n\n<p>Another problem that needs to be addressed in this answer; the fact that rust doesn't allow the reading of uninitialized variables. The following value, <code>x</code> is uninitialized:</p>\n\n<pre><code>let x: u32;\n</code></pre>\n\n<p>Reading the value of an uninitialized <code>u32</code> probably wouldn't do too much, but consider the following:</p>\n\n<pre><code>struct MyString {\n    ptr: *const u8,\n    len: usize,\n    cap: usize,\n}\n</code></pre>\n\n<p>If we were to provide a safe wrapper around this, this would be perfectly fine, after all, this is essentially what the <a href=\"https://doc.rust-lang.org/src/alloc/string.rs.html#283-285\" rel=\"nofollow noreferrer\">stdlib <code>String</code></a> boils down to. But, if we were to own an uninitialized <code>MyString</code> and tried to read its contents, we'd end up reading a garbage address from the <code>ptr</code>, and a garbage <code>len</code> and <code>cap</code>. This would lead to reading a garbage pointer, which is undefined behavior, which is rust's #1 priority to eliminate. </p>\n\n<p>So, to recap:<br>\n\u2713 Every variable must have a type determinable at runtime (Including erased types, because those are concrete types too [<code>dyn Trait</code> and <a href=\"https://medium.com/@iopguy/impl-trait-in-rust-explanation-efde0d94946a\" rel=\"nofollow noreferrer\"><code>impl Trait</code></a>], but <code>impl Trait</code> is special.)<br>\n\u2713 Every variable must be assigned some kind of value before you can read its value.<br>\n\u2713 Rust tries very hard to eliminate <strong>all</strong> undefined behavior.</p>\n"}, {"tags": [], "owner": {"reputation": 340, "user_id": 1087576, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cc0840f7fd22073389276d85120e0884?s=128&d=identicon&r=PG", "display_name": "Tom K", "link": "https://stackoverflow.com/users/1087576/tom-k"}, "is_accepted": false, "score": 0, "last_activity_date": 1559368576, "last_edit_date": 1559368576, "creation_date": 1559367653, "answer_id": 56404155, "question_id": 56403266, "link": "https://stackoverflow.com/questions/56403266/how-do-i-annotate-rust-variables-data-type-without-assignment/56404155#56404155", "title": "How do I annotate rust variables&#39; data type without assignment?", "body": "<p>You can do this, provided that the compiler can see that it will always have a value assigned before you try to read from it, and it will only ever be assigned once. This can be helpful in peculiar circumstances. Here's <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=571d3bb2c917465ac5d8365437d1255b\" rel=\"nofollow noreferrer\">a slightly contrived example</a>. </p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let some_cond = false;\n\n    let x;\n    let y;\n    let z: u8;\n\n    if some_cond {\n        x = 1;\n        y = 2;\n        z = 3;\n    } else {\n        x = 4;\n        y = 5;\n        z = 6;\n    }\n\n    println!(\"x = {}\", x); // \"x = 4\"\n    println!(\"y = {}\", y); // \"y = 5\"\n    println!(\"z - 10 = {}\", z.wrapping_sub(10)); // \"z - 10 = 252\"\n}\n</code></pre>\n"}], "owner": {"reputation": 359, "user_id": 7823929, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-cufgLCloBi4/AAAAAAAAAAI/AAAAAAAAADo/QCN7aTiG0sA/photo.jpg?sz=128", "display_name": "TopherIsSwell", "link": "https://stackoverflow.com/users/7823929/topherisswell"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1104, "favorite_count": 0, "accepted_answer_id": 56403430, "answer_count": 2, "score": 3, "last_activity_date": 1559368576, "creation_date": 1559353298, "question_id": 56403266, "link": "https://stackoverflow.com/questions/56403266/how-do-i-annotate-rust-variables-data-type-without-assignment", "title": "How do I annotate rust variables&#39; data type without assignment?", "body": "<p>I'm new to rust, and I'd like to declare a typed variable without initializing it. Is this possible in Rust? If so, is it advisable or are there better, more rustacean-y ways to do it?</p>\n\n<p>I'm looking at the following code from <a href=\"https://github.com/rust-lang/rustlings\" rel=\"nofollow noreferrer\">rustlings</a> which fails to compile because it can't infer the type of x:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>    let x;\n    if x == 10 {\n        println!(\"Ten!\");\n    }\n</code></pre>\n\n<p>So, I tried this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let x: i32;\n</code></pre>\n\n<p>however, now the compiler will throw an error on the comparison line saying that x hadn't been declared.</p>\n\n<p>This works fine, but I was left wondering if one can declare the type without an assignment.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let x: i32 = 10;\n</code></pre>\n\n<p>Or is the correct way to do it involve designing your code to avoid such situations in the first place? I come from a C background and I'm probably a little too comfortable with being lazy with types. </p>\n"}, {"tags": ["rust", "rust-tokio"], "answers": [{"comments": [{"owner": {"reputation": 2420, "user_id": 682349, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/20ee0d23c969c7740d3c936a4675bb23?s=128&d=identicon&r=PG", "display_name": "Ultrasaurus", "link": "https://stackoverflow.com/users/682349/ultrasaurus"}, "edited": false, "score": 0, "creation_date": 1559493624, "post_id": 56403568, "comment_id": 99429759, "body": "So helpful!  The breadcrumb trail helped me see [+] and follow the parameter reference syntax.  I&#39;ve suggested an edit to clarify for future readers, and also test my understanding of the closure syntax -- thank you!"}], "tags": [], "owner": {"reputation": 340, "user_id": 1087576, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cc0840f7fd22073389276d85120e0884?s=128&d=identicon&r=PG", "display_name": "Tom K", "link": "https://stackoverflow.com/users/1087576/tom-k"}, "is_accepted": true, "score": 4, "last_activity_date": 1559575752, "last_edit_date": 1559575752, "creation_date": 1559358490, "answer_id": 56403568, "question_id": 56402818, "link": "https://stackoverflow.com/questions/56402818/how-do-i-interpret-the-signature-of-read-until-and-what-is-asyncread-bufread-i/56403568#56403568", "title": "How do I interpret the signature of read_until and what is AsyncRead + BufRead in Tokio?", "body": "<h2>Parameters to <code>and_then</code></h2>\n\n<p>Unfortunately the standard layout of the Rust documentation makes futures quite hard to follow.</p>\n\n<p>Starting from the <a href=\"https://docs.rs/tokio/0.1.21/tokio/io/fn.read_until.html\" rel=\"nofollow noreferrer\"><code>read_until</code></a> documentation you linked, I can see that it returns <code>ReadUntil&lt;A&gt;</code>.  I'll click on that to go to the <a href=\"https://docs.rs/tokio/0.1.21/tokio/io/struct.ReadUntil.html\" rel=\"nofollow noreferrer\"><code>ReadUntil</code> documentation</a>.</p>\n\n<p>This return value is described as:</p>\n\n<blockquote>\n  <p>A future which can be used to easily read the contents of a stream into a vector until the delimiter is reached.</p>\n</blockquote>\n\n<p>I would expect it to implement the <code>Future</code> trait \u2014 and I can see that it does. I would also assume that the <code>Item</code> that the future resolves to is some sort of vector, but I don't know exactly what, so I keep digging:</p>\n\n<ol>\n<li>First I look under \"Trait implementations\" and find <code>impl&lt;A&gt; Future for ReadUntil&lt;A&gt;</code></li>\n<li>I click the <code>[+]</code> expander</li>\n</ol>\n\n<p>Finally I see the associated <code>type Item = (A, Vec&lt;u8&gt;)</code>. This means it's a <code>Future</code> that's going to return a pair of values: the <code>A</code>, so it is presumably giving me back the original <code>reader</code> that I passed in, plus a vector of bytes.</p>\n\n<p>When the future resolves to this tuple, I want to attach some additional processing with <code>and_then</code>. This is part of the <code>Future</code> trait, so I can scroll down further to find that function.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn and_then&lt;F, B&gt;(self, f: F) -&gt; AndThen&lt;Self, B, F&gt;\nwhere\n    F: FnOnce(Self::Item) -&gt; B,\n    B: IntoFuture&lt;Error = Self::Error&gt;,\n    Self: Sized,\n</code></pre>\n\n<p>The function <code>and_then</code> is documented as taking two parameters, but <code>self</code> is passed implicitly by the compiler when using dot syntax to <em>chain</em> functions, which tells us that we can write <code>read_until(A, '\\n', buffer).and_then(...)</code>.  The second parameter in the documentation, <code>f: F</code>, becomes the first argument passed to <code>and_then</code> in our code.</p>\n\n<p>I can see that <code>f</code> is a closure because the type <code>F</code> is shown as <code>FnOnce(Self::Item) -&gt; B</code> (which if I click through links to the <a href=\"https://doc.rust-lang.org/nightly/book/ch13-01-closures.html\" rel=\"nofollow noreferrer\">Rust book closure chapter</a>.</p>\n\n<p>The closure <code>f</code> that is passed in takes <code>Self::Item</code> as the parameter. I just found out that <code>Item</code> is <code>(A, Vec&lt;u8&gt;)</code>, so I expect to write something like <code>.and_then(|(reader, buffer)| { /* ... /* })</code></p>\n\n<h2><code>AsyncRead</code> + <code>BufRead</code></h2>\n\n<p>This is putting constraints on what type of reader can be read from. The created <a href=\"https://doc.rust-lang.org/std/io/struct.BufReader.html\" rel=\"nofollow noreferrer\"><code>BufReader</code></a> implements <a href=\"https://doc.rust-lang.org/std/io/trait.BufRead.html\" rel=\"nofollow noreferrer\"><code>BufRead</code></a>.</p>\n\n<p>Helpfully, Tokio provides <a href=\"https://docs.rs/tokio/0.1.21/tokio/prelude/trait.AsyncRead.html#impl-AsyncRead-for-BufReader%3CT%3E\" rel=\"nofollow noreferrer\">an implementation of <code>AsyncRead</code> for <code>BufReader</code></a> so we don't have to worry about it, we can just go ahead and use the <code>BufReader</code>.</p>\n"}], "owner": {"reputation": 2420, "user_id": 682349, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/20ee0d23c969c7740d3c936a4675bb23?s=128&d=identicon&r=PG", "display_name": "Ultrasaurus", "link": "https://stackoverflow.com/users/682349/ultrasaurus"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 488, "favorite_count": 1, "accepted_answer_id": 56403568, "answer_count": 1, "score": 2, "last_activity_date": 1559598668, "creation_date": 1559346745, "last_edit_date": 1559598668, "question_id": 56402818, "link": "https://stackoverflow.com/questions/56402818/how-do-i-interpret-the-signature-of-read-until-and-what-is-asyncread-bufread-i", "title": "How do I interpret the signature of read_until and what is AsyncRead + BufRead in Tokio?", "body": "<p>I'm trying to understand asynchronous I/O in Rust. The following code is based on a snippet from Katharina Fey's \n<a href=\"https://www.youtube.com/watch?v=K_wnB9ibCMg&amp;feature=youtu.be&amp;t=1078\" rel=\"nofollow noreferrer\">Jan 2019 talk</a> which works for me:</p>\n\n<pre><code>use futures::future::Future;\nuse std::io::BufReader;\nuse tokio::io::*;\n\nfn main() {\n    let reader = BufReader::new(tokio::io::stdin());\n    let buffer = Vec::new();\n\n    println!(\"Type something:\");\n    let fut = tokio::io::read_until(reader, b'\\n', buffer)\n        .and_then(move |(stdin, buffer)| {\n            tokio::io::stdout()\n                .write_all(&amp;buffer)\n                .map_err(|e| panic!(e))\n        })\n        .map_err(|e| panic!(e));\n\n    tokio::run(fut);\n}\n</code></pre>\n\n<p>Before finding that code, I attempted to figure it out from the <a href=\"https://docs.rs/tokio/0.1.21/tokio/io/fn.read_until.html\" rel=\"nofollow noreferrer\"><code>read_until</code></a> documentation.</p>\n\n<p>How do I interpret the signature of <code>read_until</code> to use it in a code sample like the one above?</p>\n\n<pre><code>pub fn read_until&lt;A&gt;(a: A, byte: u8, buf: Vec&lt;u8&gt;) -&gt; ReadUntil&lt;A&gt; \nwhere\n    A: AsyncRead + BufRead, \n</code></pre>\n\n<p>Specifically, how can I know from reading the documentation, what are the parameters passed into the <code>and_then</code> closure and the expected result? </p>\n"}, {"tags": ["rust", "output"], "comments": [{"owner": {"reputation": 36141, "user_id": 4354477, "user_type": "registered", "accept_rate": 52, "profile_image": "https://i.stack.imgur.com/SuxtS.gif?s=128&g=1", "display_name": "ForceBru", "link": "https://stackoverflow.com/users/4354477/forcebru"}, "edited": false, "score": 0, "creation_date": 1559330631, "post_id": 56400613, "comment_id": 99399818, "body": "If I&#39;m not mistaken, <code>&quot;{:#?}&quot;</code> is for debug output. So, if <code>line</code> is wrapped in <code>Ok(...)</code>, it&#39;ll be printed like in your post. You should unwrap the line to get the actual string."}, {"owner": {"reputation": 9958, "user_id": 2188562, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/DMWEc.png?s=128&g=1", "display_name": "Peter Varo", "link": "https://stackoverflow.com/users/2188562/peter-varo"}, "edited": false, "score": 0, "creation_date": 1559330641, "post_id": 56400613, "comment_id": 99399826, "body": "What made you think think that you need <code>write</code> macro for this?"}, {"owner": {"reputation": 13, "user_id": 8786691, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-tCBlRcM0wNU/AAAAAAAAAAI/AAAAAAAAAjw/pkLKoISFeUw/photo.jpg?sz=128", "display_name": "Kevin Murray", "link": "https://stackoverflow.com/users/8786691/kevin-murray"}, "edited": false, "score": 0, "creation_date": 1559331220, "post_id": 56400613, "comment_id": 99400022, "body": "Peter Varo - I was expanding on an example on the rust cookbook <a href=\"https://rust-lang-nursery.github.io/rust-cookbook/file/read-write.html\" rel=\"nofollow noreferrer\">rust-lang-nursery.github.io/rust-cookbook/file/read-write.ht&zwnj;&#8203;ml</a>"}, {"owner": {"reputation": 13, "user_id": 8786691, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-tCBlRcM0wNU/AAAAAAAAAAI/AAAAAAAAAjw/pkLKoISFeUw/photo.jpg?sz=128", "display_name": "Kevin Murray", "link": "https://stackoverflow.com/users/8786691/kevin-murray"}, "edited": false, "score": 0, "creation_date": 1559331321, "post_id": 56400613, "comment_id": 99400047, "body": "ForceBru - Aha...that seemed to have fixed the trick. Couldn&#39;t find anything on using it only as a debugging feature...definitely good to know. Thank you"}], "answers": [{"tags": [], "owner": {"reputation": 7882, "user_id": 2722968, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/d0a9ce812892f03b8342c5a60be24632?s=128&d=identicon&r=PG&f=1", "display_name": "user2722968", "link": "https://stackoverflow.com/users/2722968/user2722968"}, "is_accepted": false, "score": 0, "last_activity_date": 1559390890, "creation_date": 1559390890, "answer_id": 56406600, "question_id": 56400613, "link": "https://stackoverflow.com/questions/56400613/calling-write-is-outputting-string-wrapped-in-ok-in-rust/56406600#56406600", "title": "Calling write! is outputting string wrapped in Ok() in rust", "body": "<p>Calling <code>.lines()</code> on a <code>BufReader</code> gives you an <a href=\"https://doc.rust-lang.org/std/io/struct.Lines.html\" rel=\"nofollow noreferrer\"><code>io::Lines</code></a>, whose associated <code>Item</code>-type is <code>std::io::Result&lt;String&gt;</code>. That is, while iterating over <code>.lines()</code>, the iterator yields either an <code>Ok(String)</code> (in case the read succeeded) or an <code>Err(io::Error)</code> (in case an io-error occured while reading the next line). That is why you see <code>Ok(...)</code> being printed.</p>\n\n<p>It's common to see something like the following:</p>\n\n<pre><code>for line in input.lines() {\n    // If `line` is `Ok(String)`, re-assign `line`; return the error otherwise.\n    let line = line?;\n    // Possible read-errors have been dealt with, `line` is a `String`.\n    write!(new_file, \"{:#?}\", line)?;\n}\n</code></pre>\n\n<p>In case you are confused about the type of something, it is also common practice to assign to a variable of either your expected or some \"absurd\" type, just to get the compiler to yell at you.</p>\n\n<pre><code>for line in input.lines() {\n    let line: String = line; // line should be a String, right?\n    let line: () = line; // I have no idea what line is, but it's not () for sure \n    write!(new_file, \"{:#?}\", line)?;\n}\n</code></pre>\n\n<p>Both <code>let line: ... = line</code> will cause the compiler to raise an error because <code>line</code> is <code>Result&lt;String&gt;</code> and can't be assigned to a variable that is fixed to some other type; now you know that <code>line</code> is actually <code>Result&lt;String&gt;</code> and not <code>String</code> as expected.</p>\n"}], "owner": {"reputation": 13, "user_id": 8786691, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-tCBlRcM0wNU/AAAAAAAAAAI/AAAAAAAAAjw/pkLKoISFeUw/photo.jpg?sz=128", "display_name": "Kevin Murray", "link": "https://stackoverflow.com/users/8786691/kevin-murray"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 94, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1559390890, "creation_date": 1559330090, "last_edit_date": 1559331633, "question_id": 56400613, "link": "https://stackoverflow.com/questions/56400613/calling-write-is-outputting-string-wrapped-in-ok-in-rust", "title": "Calling write! is outputting string wrapped in Ok() in rust", "body": "<p>When trying to read a file and write it to another file, each line is getting wrapped inside of Ok() when using write!. I have been unable to discover what I am doing wrong, hopefully someone will have an idea.</p>\n\n<p>I have been able to isolate the issue to something having to do with the {:#?}.</p>\n\n<p>If I put regulat text in the \"\" it prints fine and outside the Ok(). Has anyone else come across this? </p>\n\n<p>Thanks</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::fs::File;\nuse std::io::{BufReader, BufRead};\nuse std::io::{Write, Error};\n\nfn main() -&gt; Result&lt;(), Error&gt; {\n\n    let ofile = File::open(\"test.xml\")?;\n    let mut new_file = File::create(\"output.xml\")?;\n    let input = BufReader::new(ofile);\n\n    for line in input.lines() {\n        write!(new_file, \"{:#?}\", line)?;\n    }\n\n    Ok(())\n}\n</code></pre>\n\n<p>Input</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;?xml version = '1.0' encoding = 'UTF-8'?&gt;\n&lt;Configuration xmlns=\"configuration\" configType=\"TEST_RULE\" actionType=\"NEW RULE\"&gt;\n   &lt;Reference&gt;\n      &lt;Code&gt;AV&lt;/Code&gt;\n      &lt;Name&gt;TESTER&lt;/Name&gt;\n   &lt;/Reference&gt;\n   &lt;ConfigItems&gt;\n      &lt;ConfigItem&gt;\n         &lt;description&gt;Test Description&lt;/description&gt;\n      &lt;/ConfigItem&gt;\n   &lt;/ConfigItems&gt;\n&lt;/Configuration&gt;\n\n</code></pre>\n\n<p>Resultant output</p>\n\n<pre><code>Ok(\n    \"&lt;?xml version = \\'1.0\\' encoding = \\'UTF-8\\'?&gt;\"\n)Ok(\n    \"&lt;Configuration xmlns=\\\"configuration\\\" configType=\\\"TEST_RULE\\\" actionType=\\\"NEW RULE\\\"&gt;\"\n)Ok(\n    \"   &lt;Reference&gt;\"\n)Ok(\n    \"      &lt;Code&gt;AV&lt;/Code&gt;\"\n)Ok(\n    \"      &lt;Name&gt;TESTER&lt;/Name&gt;\"\n)Ok(\n    \"   &lt;/Reference&gt;\"\n)Ok(\n    \"   &lt;ConfigItems&gt;\"\n)Ok(\n    \"      &lt;ConfigItem&gt;\"\n)Ok(\n    \"         &lt;description&gt;Test Description&lt;/description&gt;\"\n)Ok(\n    \"      &lt;/ConfigItem&gt;\"\n)Ok(\n    \"   &lt;/ConfigItems&gt;\"\n)Ok(\n    \"&lt;/Configuration&gt;\"\n)\n</code></pre>\n\n<p>Fix:\nAs per the response below, I changed the write! to the following and it fixed the issue. </p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>write!(new_file, \"{}\\n\", line?)?;\n\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 333, "user_id": 6634368, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-WQB8OL6XRfY/AAAAAAAAAAI/AAAAAAAAADk/TfnE4nciMis/photo.jpg?sz=128", "display_name": "Zhigang", "link": "https://stackoverflow.com/users/6634368/zhigang"}, "edited": false, "score": 0, "creation_date": 1559328211, "post_id": 56399959, "comment_id": 99398965, "body": "if I pass the save ident to the marco like this: <code>match_token_pattern!(parser, xxx, xxx)</code>, it will cause <code>identifier </code>xxx` is bound more than once in the same pattern`, how to solve this? any way to generate a different name for the variable?"}], "tags": [], "owner": {"reputation": 29810, "user_id": 423170, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/H9kNQ.png?s=128&g=1", "display_name": "Frxstrem", "link": "https://stackoverflow.com/users/423170/frxstrem"}, "is_accepted": true, "score": 1, "last_activity_date": 1559326364, "creation_date": 1559326364, "answer_id": 56399959, "question_id": 56399639, "link": "https://stackoverflow.com/questions/56399639/rust-how-to-combine-this-marco-with-loop-recursive/56399959#56399959", "title": "rust-how to combine this marco with loop/recursive?", "body": "<p>We can start by writing a macro that accepts any number of arguments:</p>\n\n<pre><code>macro_rules! match_token_patten {\n    ($parser:ident, $($arg:ident),*)) =&gt; {{\n        /* macro body */\n    }};\n}\n</code></pre>\n\n<p><code>$($arg:ident),*</code> will capture any number identifiers, separated by commas.</p>\n\n<p>Next, we need to compute the results for each method. A simple way to do this is to just store them in a tuple, e.g. <code>(parser.a(), parser.b(), parser.c())</code>. We'll use <code>$( ... ),*</code> syntax again to expand the captured variadic arguments:</p>\n\n<pre><code>macro_rules! match_token_patten {\n    ($parser:ident, $($arg:ident),*)) =&gt; {{\n        let results = ( $( $parser.$arg() ),* );\n    }};\n}\n</code></pre>\n\n<p>Now we want to turn <code>(Some(x), Some(y), ...)</code> into a <code>Some((x, y, ...))</code>. We can use pattern matching for this! We can write this as:</p>\n\n<pre><code>if let (Some(a), Some(b), Some(c)) = results {\n    // only if results is a tuple of three Some values\n    Some((a, b, c)\n} else {\n    // at least one of the results is None\n    None\n}\n</code></pre>\n\n<p>Finally, writing this in the variadic macro form, we get:</p>\n\n<pre><code>macro_rules! match_token_pattern {\n    ($parser:ident, $($a:ident),*) =&gt; {{\n        let results = ( $($parser.$a()),* );\n        if let ( $(Some($a)),* ) = results {\n            Some( ( $($a),* ) )\n        } else {\n            None\n        }\n    }};\n}\n</code></pre>\n"}], "owner": {"reputation": 333, "user_id": 6634368, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-WQB8OL6XRfY/AAAAAAAAAAI/AAAAAAAAADk/TfnE4nciMis/photo.jpg?sz=128", "display_name": "Zhigang", "link": "https://stackoverflow.com/users/6634368/zhigang"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 74, "favorite_count": 0, "accepted_answer_id": 56399959, "answer_count": 1, "score": 0, "last_activity_date": 1559326364, "creation_date": 1559324673, "question_id": 56399639, "link": "https://stackoverflow.com/questions/56399639/rust-how-to-combine-this-marco-with-loop-recursive", "title": "rust-how to combine this marco with loop/recursive?", "body": "<p>I have some code like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>macro_rules! match_token_pattern {\n    ($parser:ident, $a:ident) =&gt; {{\n        let a = $parser.$a();\n\n        if a != None {\n            Some(a)\n        } else {\n            None\n        }\n    }};\n\n    ($parser:ident, $a:ident, $b:ident) =&gt; {{\n        let a = $parser.$a();\n        let b = $parser.$b();\n\n        if a != None &amp;&amp; b != None {\n            Some((a, b))\n        } else {\n            None\n        }\n    }};\n\n    ($parser:ident, $a:ident, $b:ident, $c:ident) =&gt; {{\n        let a = $parser.$a();\n        let b = $parser.$b();\n        let c = $parser.$c();\n\n        if a != None &amp;&amp; b != None &amp;&amp; c != None {\n            Some((a, b, c))\n        } else {\n            None\n        }\n    }};\n}\n</code></pre>\n\n<p>Can I combine the second/third rule to one?\nAnd now I am tring use variable marco parameters, but the marco result() is like Some(a, Some(b, c)), or Some(a, Some(b, Some(c, d)))...</p>\n\n<p>Thanks.</p>\n"}, {"tags": ["rust", "serde"], "comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1559303681, "post_id": 56394620, "comment_id": 99387744, "body": "Use <code>a: PathBuf</code>"}, {"owner": {"reputation": 770, "user_id": 211158, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/66756a9bcda9735c612103952c59fb3c?s=128&d=identicon&r=PG", "display_name": "Long", "link": "https://stackoverflow.com/users/211158/long"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1559303950, "post_id": 56394620, "comment_id": 99387859, "body": "@FrenchBoiethios thanks for the recommendation, but I can afford to be stubborn on this one :)"}, {"owner": {"reputation": 65310, "user_id": 201725, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/616f7a1cbb20fe949d883393657c039a?s=128&d=identicon&r=PG", "display_name": "Jan Hudec", "link": "https://stackoverflow.com/users/201725/jan-hudec"}, "edited": false, "score": 1, "creation_date": 1559305552, "post_id": 56394620, "comment_id": 99388630, "body": "Hm, I looked at the <code>impl</code>s of <code>Deserialize</code> for <code>&amp;&#39;a str</code> and <code>&amp;&#39;a Path</code> and everything looks the same for both cases except for a type conversion via <code>AsRef</code>, but that&#39;s in the body of <code>PathVisitor</code> and that should long be typechecked when this error occurs. It looks like it might even be a bug in the lifetime inference."}, {"owner": {"reputation": 770, "user_id": 211158, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/66756a9bcda9735c612103952c59fb3c?s=128&d=identicon&r=PG", "display_name": "Long", "link": "https://stackoverflow.com/users/211158/long"}, "reply_to_user": {"reputation": 65310, "user_id": 201725, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/616f7a1cbb20fe949d883393657c039a?s=128&d=identicon&r=PG", "display_name": "Jan Hudec", "link": "https://stackoverflow.com/users/201725/jan-hudec"}, "edited": false, "score": 0, "creation_date": 1559307607, "post_id": 56394620, "comment_id": 99389655, "body": "@JanHudec thanks for investigating this. I filed a bug report, just in case. A faulty lifetime inference engine does sound nasty, so I hope it&#39;s not that ^^"}], "answers": [{"tags": [], "owner": {"reputation": 7268, "user_id": 28645, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5f51a8aed80f7259d7653ff6845257d5?s=128&d=identicon&r=PG", "display_name": "Marcus Griep", "link": "https://stackoverflow.com/users/28645/marcus-griep"}, "is_accepted": true, "score": 9, "last_activity_date": 1559319338, "creation_date": 1559319338, "answer_id": 56398557, "question_id": 56394620, "link": "https://stackoverflow.com/questions/56394620/why-can-serde-not-derive-deserialize-for-a-struct-containing-only-a-path/56398557#56398557", "title": "Why can Serde not derive Deserialize for a struct containing only a &amp;Path?", "body": "<p>Add an attribute to the field: <code>#[serde(borrow)]</code>. That will indicate to serde that it should be borrowing the value. You must provide this attribute for every borrow except for <code>&amp;str</code> and <code>&amp;[u8]</code>.</p>\n\n<p>Source: <a href=\"https://serde.rs/lifetimes.html#borrowing-data-in-a-derived-impl\" rel=\"noreferrer\">https://serde.rs/lifetimes.html#borrowing-data-in-a-derived-impl</a></p>\n"}], "owner": {"reputation": 770, "user_id": 211158, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/66756a9bcda9735c612103952c59fb3c?s=128&d=identicon&r=PG", "display_name": "Long", "link": "https://stackoverflow.com/users/211158/long"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 669, "favorite_count": 0, "accepted_answer_id": 56398557, "answer_count": 1, "score": 5, "last_activity_date": 1559319338, "creation_date": 1559303612, "last_edit_date": 1559311664, "question_id": 56394620, "link": "https://stackoverflow.com/questions/56394620/why-can-serde-not-derive-deserialize-for-a-struct-containing-only-a-path", "title": "Why can Serde not derive Deserialize for a struct containing only a &amp;Path?", "body": "<p>I tried to derive <code>serde::Deserialize</code> for a struct containing a reference to a <code>Path</code>. This yielded an error message which doesn't occur if you replace <code>&amp;'a Path</code> with <code>&amp;'a str</code>. What causes the different behaviours of <code>#[derive(Deserialize)]</code>?</p>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=ad204f38b8bbe8910c58a003cf31228a\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#!/bin/cargo script\n//! ```cargo\n//! [dependencies]\n//! serde_derive=\"1.0\"\n//! serde=\"1.0\"\n//! ```\n\nextern crate serde_derive;\n\nuse serde_derive::*;\n\n#[derive(Deserialize)]\nstruct A&lt;'a&gt; {\n    a: &amp;'a std::path::Path,\n    //a: &amp;'a str,\n}\n\nfn main() {}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'de` due to conflicting requirements\n --&gt; src/main.rs:7:5\n  |\n7 |     a: &amp;'a std::path::Path,\n  |     ^\n  |\nnote: first, the lifetime cannot outlive the lifetime 'de as defined on the impl at 5:10...\n --&gt; src/main.rs:5:10\n  |\n5 | #[derive(Deserialize)]\n  |          ^^^^^^^^^^^\n  = note: ...so that the types are compatible:\n          expected _IMPL_DESERIALIZE_FOR_A::_serde::de::SeqAccess&lt;'_&gt;\n             found _IMPL_DESERIALIZE_FOR_A::_serde::de::SeqAccess&lt;'de&gt;\nnote: but, the lifetime must be valid for the lifetime 'a as defined on the impl at 6:10...\n --&gt; src/main.rs:6:10\n  |\n6 | struct A&lt;'a&gt; {\n  |          ^^\n  = note: ...so that the types are compatible:\n          expected _IMPL_DESERIALIZE_FOR_A::_serde::Deserialize&lt;'_&gt;\n             found _IMPL_DESERIALIZE_FOR_A::_serde::Deserialize&lt;'_&gt;\n\nerror[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'de` due to conflicting requirements\n --&gt; src/main.rs:7:5\n  |\n7 |     a: &amp;'a std::path::Path,\n  |     ^\n  |\nnote: first, the lifetime cannot outlive the lifetime 'de as defined on the impl at 5:10...\n --&gt; src/main.rs:5:10\n  |\n5 | #[derive(Deserialize)]\n  |          ^^^^^^^^^^^\n  = note: ...so that the types are compatible:\n          expected _IMPL_DESERIALIZE_FOR_A::_serde::de::MapAccess&lt;'_&gt;\n             found _IMPL_DESERIALIZE_FOR_A::_serde::de::MapAccess&lt;'de&gt;\nnote: but, the lifetime must be valid for the lifetime 'a as defined on the impl at 6:10...\n --&gt; src/main.rs:6:10\n  |\n6 | struct A&lt;'a&gt; {\n  |          ^^\n  = note: ...so that the types are compatible:\n          expected _IMPL_DESERIALIZE_FOR_A::_serde::Deserialize&lt;'_&gt;\n             found _IMPL_DESERIALIZE_FOR_A::_serde::Deserialize&lt;'_&gt;\n</code></pre>\n\n<p>Strangely enough, the code compiles if the struct contains both fields <code>_a: &amp;'a Path</code> and <code>_b: &amp;'a str</code>... At this point I think this is a <a href=\"https://github.com/serde-rs/serde/issues/1542\" rel=\"nofollow noreferrer\">bug</a>.</p>\n"}, {"tags": ["rust", "gdb"], "comments": [{"owner": {"reputation": 833, "user_id": 3297655, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/df1bc6c2cef925a8f52d36b3290958b9?s=128&d=identicon&r=PG&f=1", "display_name": "chabapok", "link": "https://stackoverflow.com/users/3297655/chabapok"}, "edited": false, "score": 0, "creation_date": 1559369650, "post_id": 56392672, "comment_id": 99406604, "body": "What version of gdb you use? There is too old gdb version on some os. Try to build gdb from sources."}, {"owner": {"reputation": 65, "user_id": 11321136, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/974eb209d0a62f29e3e9e8cd677f6800?s=128&d=identicon&r=PG&f=1", "display_name": "unegare", "link": "https://stackoverflow.com/users/11321136/unegare"}, "reply_to_user": {"reputation": 833, "user_id": 3297655, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/df1bc6c2cef925a8f52d36b3290958b9?s=128&d=identicon&r=PG&f=1", "display_name": "chabapok", "link": "https://stackoverflow.com/users/3297655/chabapok"}, "edited": false, "score": 0, "creation_date": 1559370049, "post_id": 56392672, "comment_id": 99406668, "body": "GNU gdb 8.1.0.20180409-git"}, {"owner": {"reputation": 833, "user_id": 3297655, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/df1bc6c2cef925a8f52d36b3290958b9?s=128&d=identicon&r=PG&f=1", "display_name": "chabapok", "link": "https://stackoverflow.com/users/3297655/chabapok"}, "edited": false, "score": 0, "creation_date": 1559461113, "post_id": 56392672, "comment_id": 99422759, "body": "My gdb works same as you: <code>list</code> command displays nothing in tui mode."}, {"owner": {"reputation": 65, "user_id": 11321136, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/974eb209d0a62f29e3e9e8cd677f6800?s=128&d=identicon&r=PG&f=1", "display_name": "unegare", "link": "https://stackoverflow.com/users/11321136/unegare"}, "reply_to_user": {"reputation": 833, "user_id": 3297655, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/df1bc6c2cef925a8f52d36b3290958b9?s=128&d=identicon&r=PG&f=1", "display_name": "chabapok", "link": "https://stackoverflow.com/users/3297655/chabapok"}, "edited": false, "score": 0, "creation_date": 1559495211, "post_id": 56392672, "comment_id": 99430130, "body": "And the top view-block is also empty, isn&#39;t it?"}, {"owner": {"reputation": 2286, "user_id": 3228495, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1e0163d41bd310e00b055618846734b0?s=128&d=identicon&r=PG&f=1", "display_name": "Andrew", "link": "https://stackoverflow.com/users/3228495/andrew"}, "edited": false, "score": 0, "creation_date": 1559638148, "post_id": 56392672, "comment_id": 99474188, "body": "I know GDB, but not rust. I created a simple project following the instructions here: <a href=\"https://doc.rust-lang.org/1.4.0/book/hello-cargo.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/1.4.0/book/hello-cargo.html</a>, built it and then ran GDB.  I can see source with and without tui.  Would you be able to create a more complete example project that shows the issue you are having and post it somewhere that others can access."}], "owner": {"reputation": 65, "user_id": 11321136, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/974eb209d0a62f29e3e9e8cd677f6800?s=128&d=identicon&r=PG&f=1", "display_name": "unegare", "link": "https://stackoverflow.com/users/11321136/unegare"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 228, "favorite_count": 0, "answer_count": 0, "score": 0, "last_activity_date": 1559297247, "creation_date": 1559296154, "last_edit_date": 1559297247, "question_id": 56392672, "link": "https://stackoverflow.com/questions/56392672/gdb-does-not-recognize-rust-sources", "title": "GDB does not recognize Rust sources", "body": "<p>I would like to know what should be added into Cargo.toml to enable support of sources in gdb. Right now it contains the following:</p>\n\n<pre><code>[profile.dev]\ndebug = true\nopt-level = 0\n</code></pre>\n\n<p>But it seems to be not enough. \n<code>gdb</code> command <code>list</code> displays nothing.\ntyping <code>directory ./src</code> does not help.</p>\n\n<p><strong>UPD:</strong>\nI am used to gdb's tui. And it does not show the source code. But gdb without tui shows <code>list</code> properly. Why is it so strange?</p>\n"}, {"tags": ["reference", "rust", "mutable"], "answers": [{"comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 1, "creation_date": 1559312132, "post_id": 56391975, "comment_id": 99391960, "body": "third option, <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=cd59073cf1fc8ddfa90e3ead0c3d7cf5\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}], "tags": [], "owner": {"reputation": 9958, "user_id": 2188562, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/DMWEc.png?s=128&g=1", "display_name": "Peter Varo", "link": "https://stackoverflow.com/users/2188562/peter-varo"}, "is_accepted": true, "score": 2, "last_activity_date": 1559314534, "last_edit_date": 1559314534, "creation_date": 1559293586, "answer_id": 56391975, "question_id": 56391687, "link": "https://stackoverflow.com/questions/56391687/how-can-i-recache-data-whenever-a-mutable-reference-to-the-source-data-is-droppe/56391975#56391975", "title": "How can I recache data whenever a mutable reference to the source data is dropped?", "body": "<p>There are at least two ways to tackle this problem.  Instead of calling <code>drop</code> directly, you should put your code which does the mutation in a new scope so that the scoping rules will automatically be applied to them and <code>drop</code> will be called automatically for you:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let mut spire = Spire::new(vec![1, 2, 3, 1]);\n\n    {\n        let spire_elems = spire.get_elems_mut();\n        spire_elems.pop();\n        spire_elems.push(7);\n        spire_elems.push(10);\n    }\n\n    spire.update_height();\n    dbg!(spire.height());\n}\n</code></pre>\n\n<p>If you compile this, it will work as expected.  Generally speaking, if you have to call <code>drop</code> manually it usually means you are doing something that you shouldn't do.</p>\n\n<p>That being said, the more interesting question is designing an API which is not <em>leaking your abstraction</em>.  For example, you could <em>protect</em> your internal data structure representation by providing methods to manipulate it (which has several advantages, one of them is that you can freely change your mind later on what data structure you are using internally without effecting other parts of your code), e.g.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl Spire {\n    pub fn push(&amp;mut self, elem: i32) {\n        self.elements.push(elem);\n        self.update_internals();\n    }\n}\n</code></pre>\n\n<p>This example invokes a private method called <code>update_internals</code> which takes care of your internal data consistency after each update.</p>\n\n<p>If you only want to update the internal values when all the additions and removals have happened, then you should implement a <em>finalising</em> method which you have to call every time you finished modifying your <code>Spire</code> instance, e.g.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>spire.pop();\nspire.push(7);\nspire.push(10);\nspire.commit();\n</code></pre>\n\n<p>To achieve such a thing, you have at least another two options: you could do it like the above example or you could use a builder pattern where you are doing modifications throughout a series of calls which will then only have effect when you call the last finalising call on the chain.  Something like:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>spire.remove_last().add(7).add(10).finalise();\n</code></pre>\n\n<p>Another approach could be to have an internal flag (a simple <code>bool</code> would do) which is changed to <code>true</code> every time there is an insertion or deletion.  Your <code>height</code> method could cache the calculated data internally (e.g. using some <code>Cell</code> type for interior mutability) and if the flag is <code>true</code> then it will recalculate the value and set the flag back to <code>false</code>.  It will return the cached value on every subsequent call until you do another modification.  Here's a possible implementation:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::cell::Cell;\n\nstruct Spire {\n    elements: Vec&lt;i32&gt;,\n    height: Cell&lt;i32&gt;,\n    updated: Cell&lt;bool&gt;,\n}\n\nimpl Spire {\n    fn calc_height(elements: &amp;[i32]) -&gt; i32 {\n        elements.iter().sum()\n    }\n\n    pub fn new(elements: Vec&lt;i32&gt;) -&gt; Self {\n        Self {\n            height: Cell::new(Self::calc_height(&amp;elements)),\n            elements,\n            updated: Cell::new(false),\n        }\n    }\n\n    pub fn push(&amp;mut self, elem: i32) {\n        self.updated.set(true);\n        self.elements.push(elem);\n    }\n\n    pub fn pop(&amp;mut self) -&gt; Option&lt;i32&gt; {\n        self.updated.set(true);\n        self.elements.pop()\n    }\n\n    pub fn height(&amp;self) -&gt; i32 {\n        if self.updated.get() {\n            self.height.set(Self::calc_height(&amp;self.elements));\n            self.updated.set(false);\n        }\n        self.height.get()\n    }\n}\n\nfn main() {\n    let mut spire = Spire::new(vec![1, 2, 3, 1]);\n    spire.pop();\n    spire.push(7);\n    spire.push(10);\n    dbg!(spire.height());\n}\n</code></pre>\n\n<p>If you don't mind borrowing <code>self</code> mutably in the <code>height</code> getter, then don't bother with the <code>Cell</code>, just update the values directly.</p>\n"}], "owner": {"reputation": 2058, "user_id": 3958875, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/f6149ddd4636bcab17c52b751d79f7fd?s=128&d=identicon&r=PG&f=1", "display_name": "Prime_Aqasix", "link": "https://stackoverflow.com/users/3958875/prime-aqasix"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 64, "favorite_count": 0, "accepted_answer_id": 56391975, "answer_count": 1, "score": 1, "last_activity_date": 1559314534, "creation_date": 1559292551, "last_edit_date": 1559312826, "question_id": 56391687, "link": "https://stackoverflow.com/questions/56391687/how-can-i-recache-data-whenever-a-mutable-reference-to-the-source-data-is-droppe", "title": "How can I recache data whenever a mutable reference to the source data is dropped?", "body": "<p>I have an struct called <code>Spire</code> that contains some data (<code>elements</code>), and a cache of some result that can be calculated from that data. When <code>elements</code> changes, I want to be able to automatically update the cache (e.g. without the user of the struct having to manually call <code>update_height</code> in this case).</p>\n\n<p>I'm trying to figure out how I can achieve that, or if there is a better way to do what I'm trying to do.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct Spire {\n    elements: Vec&lt;i32&gt;,\n    height: i32,\n}\n\nimpl Spire {\n    pub fn new(elements: Vec&lt;i32&gt;) -&gt; Spire {\n        let mut out = Spire {\n            elements: elements,\n            height: 0,\n        };\n        out.update_height();\n        out\n    }\n\n    pub fn get_elems_mut(&amp;mut self) -&gt; &amp;mut Vec&lt;i32&gt; {\n        &amp;mut self.elements\n    }\n\n    pub fn update_height(&amp;mut self) {\n        self.height = self.elements.iter().sum();\n    }\n\n    pub fn height(&amp;self) -&gt; i32 {\n        self.height\n    }\n}\n\nfn main() {\n    let mut spire = Spire::new(vec![1, 2, 3, 1]);\n\n    // Get a mutable reference to the internal elements\n    let spire_elems = spire.get_elems_mut();\n\n    // Do some stuff with the elements\n    spire_elems.pop();\n    spire_elems.push(7);\n    spire_elems.push(10);\n\n    // The compiler won't allow you to get height\n    // without dropping the mutable reference first\n    // dbg!(spire.height());\n\n    // When finished, drop the reference to the elements.\n    drop(spire_elems);\n    // I want to automatically run update_height() here somehow\n\n    dbg!(spire.height());\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=793c7f617d3ad5352916edfb4f5bf5af\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<p>I am trying to find something with behavior like the <code>Drop</code> trait for mutable references.</p>\n"}, {"tags": ["rust", "rust-cargo", "crate"], "comments": [{"owner": {"reputation": 23927, "user_id": 1427161, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/JMUU0.png?s=128&g=1", "display_name": "doublesharp", "link": "https://stackoverflow.com/users/1427161/doublesharp"}, "edited": false, "score": 0, "creation_date": 1559282827, "post_id": 56389460, "comment_id": 99378194, "body": "If you are cross compiling - <a href=\"https://os.phil-opp.com/cross-compile-libcore/\" rel=\"nofollow noreferrer\">os.phil-opp.com/cross-compile-libcore</a>"}, {"owner": {"reputation": 23927, "user_id": 1427161, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/JMUU0.png?s=128&g=1", "display_name": "doublesharp", "link": "https://stackoverflow.com/users/1427161/doublesharp"}, "edited": false, "score": 0, "creation_date": 1559283031, "post_id": 56389460, "comment_id": 99378254, "body": "If you have a link to the examples you&#39;re following that might help as well"}, {"owner": {"reputation": 10637, "user_id": 3102968, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/1XKm3.png?s=128&g=1", "display_name": "joesan", "link": "https://stackoverflow.com/users/3102968/joesan"}, "reply_to_user": {"reputation": 23927, "user_id": 1427161, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/JMUU0.png?s=128&g=1", "display_name": "doublesharp", "link": "https://stackoverflow.com/users/1427161/doublesharp"}, "edited": false, "score": 0, "creation_date": 1559283130, "post_id": 56389460, "comment_id": 99378284, "body": "It is just a simple program to test out Ownership concepts! I have added the main.rs to my post above! Nothing special in that"}, {"owner": {"reputation": 10637, "user_id": 3102968, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/1XKm3.png?s=128&g=1", "display_name": "joesan", "link": "https://stackoverflow.com/users/3102968/joesan"}, "reply_to_user": {"reputation": 23927, "user_id": 1427161, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/JMUU0.png?s=128&g=1", "display_name": "doublesharp", "link": "https://stackoverflow.com/users/1427161/doublesharp"}, "edited": false, "score": 0, "creation_date": 1559283200, "post_id": 56389460, "comment_id": 99378304, "body": "rustup target add x86_64-unknown-linux-gnu also did not help&#176;"}, {"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1559285212, "post_id": 56389460, "comment_id": 99379002, "body": "The example you are using is not for the PC, but for an embedded device. For running simple programs on the PC you should better start anew with something like <code>cargo new my-example</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1559312472, "post_id": 56389460, "comment_id": 99392147, "body": "It&#39;s hard to answer your question because it doesn&#39;t include a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>. We can&#39;t tell <b>how</b> you are attempting to compile the code. It would make it easier for us to help you if you try to reproduce your error on the <a href=\"https://play.rust-lang.org\" rel=\"nofollow noreferrer\">Rust Playground</a> if possible, otherwise in a brand new Cargo project, then <a href=\"https://stackoverflow.com/posts/56389460/edit\">edit</a> your question to include the additional info. There are <a href=\"//stackoverflow.com/tags/rust/info\">Rust-specific MCVE tips</a> you can use to reduce your original code for posting here. Thanks!"}, {"owner": {"reputation": 68601, "user_id": 315168, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/fbcd3f115ce33ea2380f5a2dae0cf6d2?s=128&d=identicon&r=PG", "display_name": "Mikko Ohtamaa", "link": "https://stackoverflow.com/users/315168/mikko-ohtamaa"}, "edited": false, "score": 0, "creation_date": 1601392403, "post_id": 56389460, "comment_id": 113390561, "body": "I had the same error because my shell was defaulting to system-wide cargo installation in <code>&#47;usr&#47;local&#47;bin&#47;cargo</code> instead of one provided by rustup."}], "answers": [{"comments": [{"owner": {"reputation": 10637, "user_id": 3102968, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/1XKm3.png?s=128&g=1", "display_name": "joesan", "link": "https://stackoverflow.com/users/3102968/joesan"}, "edited": false, "score": 0, "creation_date": 1559287404, "post_id": 56390117, "comment_id": 99379978, "body": "The reason why I have those dependencies is to do something else, but since I&#39;m starting out with Rust, I wanted to test ownership concepts first! So I do need those dependencies!"}, {"owner": {"reputation": 8841, "user_id": 8208215, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/QXD4t.png?s=128&g=1", "display_name": "wasmup", "link": "https://stackoverflow.com/users/8208215/wasmup"}, "reply_to_user": {"reputation": 10637, "user_id": 3102968, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/1XKm3.png?s=128&g=1", "display_name": "joesan", "link": "https://stackoverflow.com/users/3102968/joesan"}, "edited": false, "score": 0, "creation_date": 1559287699, "post_id": 56390117, "comment_id": 99380133, "body": "OK, with these extra dependencies present, the <code>cargo run</code> still runs OK, but takes more time."}, {"owner": {"reputation": 8841, "user_id": 8208215, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/QXD4t.png?s=128&g=1", "display_name": "wasmup", "link": "https://stackoverflow.com/users/8208215/wasmup"}, "reply_to_user": {"reputation": 10637, "user_id": 3102968, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/1XKm3.png?s=128&g=1", "display_name": "joesan", "link": "https://stackoverflow.com/users/3102968/joesan"}, "edited": false, "score": 0, "creation_date": 1559287983, "post_id": 56390117, "comment_id": 99380257, "body": "May be clean install of rust may solve the problem. (It seems)"}, {"owner": {"reputation": 10637, "user_id": 3102968, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/1XKm3.png?s=128&g=1", "display_name": "joesan", "link": "https://stackoverflow.com/users/3102968/joesan"}, "edited": false, "score": 0, "creation_date": 1559288155, "post_id": 56390117, "comment_id": 99380326, "body": "rustup self uninstall - Will try this and then do a fresh install to see if it works!"}, {"owner": {"reputation": 8841, "user_id": 8208215, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/QXD4t.png?s=128&g=1", "display_name": "wasmup", "link": "https://stackoverflow.com/users/8208215/wasmup"}, "reply_to_user": {"reputation": 10637, "user_id": 3102968, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/1XKm3.png?s=128&g=1", "display_name": "joesan", "link": "https://stackoverflow.com/users/3102968/joesan"}, "edited": false, "score": 0, "creation_date": 1559288687, "post_id": 56390117, "comment_id": 99380560, "body": "Your code also works fine (press Run) on the rust <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=07be7e9340160058a288485f2a690c83\" rel=\"nofollow noreferrer\">playground</a>."}, {"owner": {"reputation": 10637, "user_id": 3102968, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/1XKm3.png?s=128&g=1", "display_name": "joesan", "link": "https://stackoverflow.com/users/3102968/joesan"}, "edited": false, "score": 0, "creation_date": 1559291658, "post_id": 56390117, "comment_id": 99381887, "body": "How can I change the default host for this specific project? Right now, my default host is: x86_64-apple-darwin which I guess is why I get this error"}, {"owner": {"reputation": 8841, "user_id": 8208215, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/QXD4t.png?s=128&g=1", "display_name": "wasmup", "link": "https://stackoverflow.com/users/8208215/wasmup"}, "reply_to_user": {"reputation": 10637, "user_id": 3102968, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/1XKm3.png?s=128&g=1", "display_name": "joesan", "link": "https://stackoverflow.com/users/3102968/joesan"}, "edited": false, "score": 0, "creation_date": 1559292444, "post_id": 56390117, "comment_id": 99382245, "body": "Use <code>rustup target help</code> to get help.  and use <code>rustup target list</code> to get list of installed and available targets, use <code>rustup toolchain help</code> and <code>rustup toolchain list</code>. see <a href=\"https://github.com/rust-lang/rustup.rs\" rel=\"nofollow noreferrer\">here</a>."}], "tags": [], "owner": {"reputation": 8841, "user_id": 8208215, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/QXD4t.png?s=128&g=1", "display_name": "wasmup", "link": "https://stackoverflow.com/users/8208215/wasmup"}, "is_accepted": true, "score": 2, "last_activity_date": 1559312689, "last_edit_date": 1559312689, "creation_date": 1559285658, "answer_id": 56390117, "question_id": 56389460, "link": "https://stackoverflow.com/questions/56389460/compilation-error-cant-find-crate-for-core/56390117#56390117", "title": "Compilation error: can&#39;t find crate for `core`", "body": "<p>Your code works fine on the Rust <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=07be7e9340160058a288485f2a690c83\" rel=\"nofollow noreferrer\">playground</a>, so I recommend checking your Rust installation and environment settings.</p>\n\n<hr>\n\n<p>You may want to use the preconfigured Rust Docker <a href=\"https://hub.docker.com/_/rust\" rel=\"nofollow noreferrer\">image</a> to run your app. Have Docker installed, then:  </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>docker pull rust\n</code></pre>\n\n<p>Go to your project folder and run:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>docker run --rm --user \"$(id -u)\":\"$(id -g)\" -v \"$PWD\":/usr/src/myapp -w /usr/src/myapp rust cargo run\n</code></pre>\n\n<p>Output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>hello\n5\n</code></pre>\n\n<hr>\n\n<p>For your simple example on a PC, you don't need any of these dependencies:</p>\n\n<pre><code>[dependencies]\ndwm1001 = \"0.1.0\"\npanic-halt = \"0.2.0\"\nnb = \"0.1.1\"\n</code></pre>\n\n<p>Here are my steps to test your sample on Linux:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>cargo new hello\ncd hello\ncode .\n</code></pre>\n\n<p>Open <code>main.rs</code> and paste your sample <code>main.rs</code> and save:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let s = String::from(\"hello\"); // s comes into scope\n\n    takes_ownership(s); // s's value moves into the function...\n                        // ... and so is no longer valid here\n\n    let x = 5; // x comes into scope\n\n    makes_copy(x); // x would move into the function,\n                   // but i32 is Copy, so it\u2019s okay to still\n                   // use x afterward\n} // Here, x goes out of scope, then s. But because s's value was moved, nothing\n  // special happens.\n\nfn takes_ownership(some_string: String) {\n    // some_string comes into scope\n    println!(\"{}\", some_string);\n} // Here, some_string goes out of scope and `drop` is called. The backing\n  // memory is freed.\n\nfn makes_copy(some_integer: i32) {\n    // some_integer comes into scope\n    println!(\"{}\", some_integer);\n} // Here, some_integer goes out of scope. Nothing special happens.\n</code></pre>\n\n<p>In a terminal inside the <code>hello</code> folder, run:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>cargo run\n</code></pre>\n\n<p>And the output is good:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>hello\n5\n</code></pre>\n\n<hr>\n\n<p>This may help:  </p>\n\n<ol>\n<li><p>Shell command</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>rustup component list --installed\n</code></pre>\n\n<p>Output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>cargo-x86_64-unknown-linux-gnu\nclippy-x86_64-unknown-linux-gnu\nrls-x86_64-unknown-linux-gnu\nrust-analysis-x86_64-unknown-linux-gnu\nrust-docs-x86_64-unknown-linux-gnu\nrust-src\nrust-std-x86_64-unknown-linux-gnu\nrustc-x86_64-unknown-linux-gnu\nrustfmt-x86_64-unknown-linux-gnu\n</code></pre></li>\n<li><p>Shell command:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>rustup show\n</code></pre>\n\n<p>Output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Default host: x86_64-unknown-linux-gnu\n\ninstalled toolchains\n--------------------\n\nstable-x86_64-unknown-linux-gnu (default)\nnightly-x86_64-unknown-linux-gnu\n\nactive toolchain\n----------------\n\nstable-x86_64-unknown-linux-gnu (default)\nrustc 1.35.0 (3c235d560 2019-05-20)\n</code></pre></li>\n</ol>\n"}], "owner": {"reputation": 10637, "user_id": 3102968, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/1XKm3.png?s=128&g=1", "display_name": "joesan", "link": "https://stackoverflow.com/users/3102968/joesan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5998, "favorite_count": 0, "accepted_answer_id": 56390117, "answer_count": 1, "score": 5, "last_activity_date": 1559312689, "creation_date": 1559282574, "last_edit_date": 1559312419, "question_id": 56389460, "link": "https://stackoverflow.com/questions/56389460/compilation-error-cant-find-crate-for-core", "title": "Compilation error: can&#39;t find crate for `core`", "body": "<p>I'm using Rust 1.35.0 to try out some Rust examples and I could not get it to compile, as I keep getting the following message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0463]: can't find crate for `core`\n</code></pre>\n\n<p>I ran <code>rustc --explain E0463</code> and I see the following message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>You need to link your code to the relevant crate in order to be able to use it\n(through Cargo or the `-L` option of rustc example). Plugins are crates as\nwell, and you link to them the same way.\n</code></pre>\n\n<p>Here is my Cargo.toml:</p>\n\n<pre><code>[package]\nname = \"sensor-node\"\nversion = \"0.1.0\"\nauthors = [\"joesan &lt;email@gmail.com&gt;\"]\nedition = \"2018\"\n\n[dependencies]\ndwm1001 = \"0.1.0\"\npanic-halt = \"0.2.0\"\nnb = \"0.1.1\"\n</code></pre>\n\n<p>Here is my main.rs:</p>\n\n<pre><code>fn main() {\n    let s = String::from(\"hello\");  // s comes into scope\n\n    takes_ownership(s);             // s's value moves into the function...\n                                    // ... and so is no longer valid here\n\n    let x = 5;                      // x comes into scope\n\n    makes_copy(x);                  // x would move into the function,\n                                    // but i32 is Copy, so it\u2019s okay to still\n                                    // use x afterward\n\n} // Here, x goes out of scope, then s. But because s's value was moved, nothing\n  // special happens.\n\nfn takes_ownership(some_string: String) { // some_string comes into scope\n    println!(\"{}\", some_string);\n} // Here, some_string goes out of scope and `drop` is called. The backing\n  // memory is freed.\n\nfn makes_copy(some_integer: i32) { // some_integer comes into scope\n    println!(\"{}\", some_integer);\n} // Here, some_integer goes out of scope. Nothing special happens.\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 29810, "user_id": 423170, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/H9kNQ.png?s=128&g=1", "display_name": "Frxstrem", "link": "https://stackoverflow.com/users/423170/frxstrem"}, "edited": false, "score": 1, "creation_date": 1559248230, "post_id": 56385179, "comment_id": 99370529, "body": "Any particlar reason why the parsers seen to be stored as <i>references</i>? Couldn&#39;t you just store the parsers themselves in the array?"}, {"owner": {"reputation": 10434, "user_id": 1007991, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a1254dabbec32d7cbc502dfd2fd0438d?s=128&d=identicon&r=PG", "display_name": "Renato", "link": "https://stackoverflow.com/users/1007991/renato"}, "reply_to_user": {"reputation": 29810, "user_id": 423170, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/H9kNQ.png?s=128&g=1", "display_name": "Frxstrem", "link": "https://stackoverflow.com/users/423170/frxstrem"}, "edited": false, "score": 0, "creation_date": 1559248312, "post_id": 56385179, "comment_id": 99370562, "body": "I tried that but because it&#39;s a trait, it&#39;s not sized, so Rust complains about that."}, {"owner": {"reputation": 10434, "user_id": 1007991, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a1254dabbec32d7cbc502dfd2fd0438d?s=128&d=identicon&r=PG", "display_name": "Renato", "link": "https://stackoverflow.com/users/1007991/renato"}, "reply_to_user": {"reputation": 29810, "user_id": 423170, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/H9kNQ.png?s=128&g=1", "display_name": "Frxstrem", "link": "https://stackoverflow.com/users/423170/frxstrem"}, "edited": false, "score": 0, "creation_date": 1559248681, "post_id": 56385179, "comment_id": 99370709, "body": "i&#39;ve edited the question with details about the errors."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1559258125, "post_id": 56385179, "comment_id": 99373455, "body": "It&#39;s hard to answer your question because it doesn&#39;t include a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>. We can&#39;t tell what crates (and their versions), types, traits, fields, etc. are present in the code. It would make it easier for us to help you if you try to reproduce your error on the <a href=\"https://play.rust-lang.org\" rel=\"nofollow noreferrer\">Rust Playground</a> if possible, otherwise in a brand new Cargo project, then <a href=\"https://stackoverflow.com/posts/56385179/edit\">edit</a> your question to include the additional info. There are <a href=\"//stackoverflow.com/tags/rust/info\">Rust-specific MCVE tips</a> you can use to reduce your original code for posting here. Thanks!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1559258385, "post_id": 56385179, "comment_id": 99373503, "body": "<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=e1724431af75035179e624e5aacfcb81\" rel=\"nofollow noreferrer\">The duplicate applied to your question</a>."}, {"owner": {"reputation": 10434, "user_id": 1007991, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a1254dabbec32d7cbc502dfd2fd0438d?s=128&d=identicon&r=PG", "display_name": "Renato", "link": "https://stackoverflow.com/users/1007991/renato"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1559279570, "post_id": 56385179, "comment_id": 99377312, "body": "@Shepmaster  I gave all details that seem relevant to the problem. I explained the error. I don&#39;t think you can demand that I ask the question in a way YOU are 100% satisfied with. I&#39;ve been answering questions here for a long time and I know a simple question like this shouldn&#39;t need reproducible examples. Please keep your high standards to yourself and let others help if you don&#39;t think it&#39;s good enough for you. Thank you."}, {"owner": {"reputation": 10434, "user_id": 1007991, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a1254dabbec32d7cbc502dfd2fd0438d?s=128&d=identicon&r=PG", "display_name": "Renato", "link": "https://stackoverflow.com/users/1007991/renato"}, "edited": false, "score": 0, "creation_date": 1559280062, "post_id": 56385179, "comment_id": 99377438, "body": "The question you marked duplicate of this doesn&#39;t even mention arrays. What&#39;s up with that? Looking at the answers there I still have no idea how that would have answered my question."}], "answers": [{"comments": [{"owner": {"reputation": 10434, "user_id": 1007991, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a1254dabbec32d7cbc502dfd2fd0438d?s=128&d=identicon&r=PG", "display_name": "Renato", "link": "https://stackoverflow.com/users/1007991/renato"}, "edited": false, "score": 0, "creation_date": 1559250179, "post_id": 56385389, "comment_id": 99371257, "body": "Didn&#39;t work still... looks like my definition of Parser causes problems... see <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=4613cdfb89e439fa397804c6b8553e78\" rel=\"nofollow noreferrer\">modified playground example</a>"}, {"owner": {"reputation": 29810, "user_id": 423170, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/H9kNQ.png?s=128&g=1", "display_name": "Frxstrem", "link": "https://stackoverflow.com/users/423170/frxstrem"}, "reply_to_user": {"reputation": 10434, "user_id": 1007991, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a1254dabbec32d7cbc502dfd2fd0438d?s=128&d=identicon&r=PG", "display_name": "Renato", "link": "https://stackoverflow.com/users/1007991/renato"}, "edited": false, "score": 0, "creation_date": 1559251392, "post_id": 56385389, "comment_id": 99371658, "body": "@Renato I updated my answer to resolve the problems in your modified playground example."}, {"owner": {"reputation": 10434, "user_id": 1007991, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a1254dabbec32d7cbc502dfd2fd0438d?s=128&d=identicon&r=PG", "display_name": "Renato", "link": "https://stackoverflow.com/users/1007991/renato"}, "edited": false, "score": 0, "creation_date": 1559251574, "post_id": 56385389, "comment_id": 99371717, "body": "Thanks, finally working! My knowledge of trait is still too weak :) will read up a bit more on that."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1559258167, "post_id": 56385389, "comment_id": 99373463, "body": "This does <b>not</b> make a static array. It makes a constant."}], "tags": [], "owner": {"reputation": 29810, "user_id": 423170, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/H9kNQ.png?s=128&g=1", "display_name": "Frxstrem", "link": "https://stackoverflow.com/users/423170/frxstrem"}, "is_accepted": true, "score": 2, "last_activity_date": 1559250845, "last_edit_date": 1559250845, "creation_date": 1559249048, "answer_id": 56385389, "question_id": 56385179, "link": "https://stackoverflow.com/questions/56385179/how-can-i-make-a-static-array-with-references-to-trait-implementations-in-rust/56385389#56385389", "title": "How can I make a static array with references to trait implementations in Rust?", "body": "<p>Trait references need to be marked as <code>&amp;dyn</code>, e.g. <code>&amp;dyn Parser</code>:</p>\n\n<pre><code>trait Parser { }\n\nstruct CommentParser { }\nimpl Parser for CommentParser { }\n\nconst ALL_PARSERS: [&amp;dyn Parser; 1] = [&amp;CommentParser {}];\n\nfn main() {\n    for &amp;parser in &amp;ALL_PARSERS {\n        // do something with parser\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=6b5b1a53bb1b49a43753bf2493dda155\" rel=\"nofollow noreferrer\">Link to playground example</a></p>\n\n<hr>\n\n<p>Also, as <a href=\"https://stackoverflow.com/a/45118378\">this answer</a> to a related question states, you can't have a generic parameter in your trait if you want to make a trait reference, so you'll need to either add a generic type to the trait itself, or use a trait reference instead of <code>impl</code> in your parser type:</p>\n\n<pre><code>// original (with error)\ntrait Parser {\n    // impl ParserEnv is an implicit generic type\n    fn parse(&amp;mut self, env: impl ParserEnv) -&gt; ParseResult;\n\n    // same as:\n    //   fn parser&lt;E: ParserEnv&gt;(&amp;mut self, env: E) -&gt; ParserResult;\n}\n\n// alternative 1, with trait generic type\ntrait Parser&lt;E: ParserEnv&gt; {\n    fn parse(&amp;mut self, env: E) -&gt; ParseResult;\n}\n\n// alternative 2, with trait reference\ntrait Parser {\n    fn parser(&amp;mut self, env: &amp;dyn ParserEnv) -&gt; ParserResult;\n    // may need &amp;dyn mut ParserEnv if you want to modify env as well\n}\n</code></pre>\n\n<p>I think the second approach may be the best, since then you can store the parsers in the array without needing to assign a particular <code>ParserEnv</code> type to the parsers.</p>\n"}], "owner": {"reputation": 10434, "user_id": 1007991, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a1254dabbec32d7cbc502dfd2fd0438d?s=128&d=identicon&r=PG", "display_name": "Renato", "link": "https://stackoverflow.com/users/1007991/renato"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 369, "favorite_count": 0, "closed_date": 1559258335, "accepted_answer_id": 56385389, "answer_count": 1, "score": 0, "last_activity_date": 1559258105, "creation_date": 1559247988, "last_edit_date": 1559258105, "question_id": 56385179, "link": "https://stackoverflow.com/questions/56385179/how-can-i-make-a-static-array-with-references-to-trait-implementations-in-rust", "closed_reason": "Duplicate", "title": "How can I make a static array with references to trait implementations in Rust?", "body": "<p>I want to be able to iterate over an array of parsers trying to find a delegate parser from a main parsing function. The list of parsers is known at compile-time, so I want this to be a constant.</p>\n\n<p>I've tried some varieties of this but I can't get it to work:</p>\n\n<pre><code>const ALL_PARSERS: [&amp;Parser; 1] = [&amp;CommentParser {}];\n</code></pre>\n\n<p>How can I achieve this?</p>\n\n<p>Notes:</p>\n\n<ul>\n<li><code>Parser</code> is a trait.</li>\n<li><code>CommentParser</code> is a struct implementing <code>Parser</code>.</li>\n<li>there are other implementations of <code>Parser</code> but they are not shown for simplicity.</li>\n<li>even though all parser implementations are known at compile-time, I just want to avoid explicitly trying one by one as that would make the code worse than I think it should be.</li>\n</ul>\n\n<p>The error I get currently:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>|\n11 | const ALL_PARSERS: [&amp;Parser; 1] = [&amp;CommentParser {}];\n   |                    ^^^^^^^^^^^^ the trait `parsers::Parser` cannot be made into an object\n   |\n   = note: method `parse` has generic type parameters\n</code></pre>\n\n<p>I can't see any generics in the parse method:</p>\n\n<pre><code>pub trait Parser {\n    fn opening_char(self: &amp;Self) -&gt; char;\n    fn parse(&amp;mut self, env: impl ParserEnv) -&gt; ParseResult;\n}\n</code></pre>\n\n<h3>If I make the types values:</h3>\n\n<pre><code>const ALL_PARSERS: [Parser; 1] = [CommentParser {}];\n</code></pre>\n\n<p>The error becomes:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>11 | const ALL_PARSERS: [Parser; 1] = [CommentParser {}];\n|                    ^^^^^^^^^^^ doesn't have a size known at compile-time\n|\n= help: the trait `std::marker::Sized` is not implemented for `(dyn parsers::Parser + 'static)`\n</code></pre>\n"}, {"tags": ["rust", "serde"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1559257930, "post_id": 56384447, "comment_id": 99373417, "body": "It&#39;s hard to answer your question because it doesn&#39;t include a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>. We can&#39;t tell <b>exactly</b> what your input looks like, or even if it&#39;s JSON or YAML or .... It would make it easier for us to help you if you try to reproduce your error on the <a href=\"https://play.rust-lang.org\" rel=\"nofollow noreferrer\">Rust Playground</a> if possible, otherwise in a brand new Cargo project, then <a href=\"https://stackoverflow.com/posts/56384447/edit\">edit</a> your question to include the additional info. There are <a href=\"//stackoverflow.com/tags/rust/info\">Rust-specific MCVE tips</a> you can use to reduce your original code for posting here. Thanks!"}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 1, "creation_date": 1559273988, "post_id": 56384447, "comment_id": 99376286, "body": "Possible duplicate of <a href=\"https://stackoverflow.com/questions/46753955/how-to-transform-fields-during-deserialization-using-serde\">How to transform fields during deserialization using Serde?</a>"}], "answers": [{"comments": [{"owner": {"reputation": 409, "user_id": 2970121, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/d0b21cede510b0bbf986847693a9e075?s=128&d=identicon&r=PG&f=1", "display_name": "njaard", "link": "https://stackoverflow.com/users/2970121/njaard"}, "edited": false, "score": 0, "creation_date": 1559273417, "post_id": 56384732, "comment_id": 99376184, "body": "This not only answers my question, but shows how to make a generalized wrapper over serde&#39;s existing deserializers."}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "reply_to_user": {"reputation": 409, "user_id": 2970121, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/d0b21cede510b0bbf986847693a9e075?s=128&d=identicon&r=PG&f=1", "display_name": "njaard", "link": "https://stackoverflow.com/users/2970121/njaard"}, "edited": false, "score": 0, "creation_date": 1559274000, "post_id": 56384732, "comment_id": 99376289, "body": "@njaard it&#39;s exactly what <a href=\"https://stackoverflow.com/questions/46753955/how-to-transform-fields-during-deserialization-using-serde\" title=\"how to transform fields during deserialization using serde\">stackoverflow.com/questions/46753955/&hellip;</a> say"}], "tags": [], "owner": {"reputation": 29810, "user_id": 423170, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/H9kNQ.png?s=128&g=1", "display_name": "Frxstrem", "link": "https://stackoverflow.com/users/423170/frxstrem"}, "is_accepted": true, "score": 4, "last_activity_date": 1559257836, "last_edit_date": 1559257836, "creation_date": 1559245588, "answer_id": 56384732, "question_id": 56384447, "link": "https://stackoverflow.com/questions/56384447/how-do-i-transform-special-values-into-optionnone-when-using-serde-to-deserial/56384732#56384732", "title": "How do I transform special values into Option::None when using Serde to deserialize?", "body": "<p>You can write your own deserialization function that handles this case:</p>\n\n<pre><code>use serde::de::Deserializer;\nuse serde::Deserialize;\n\n// custom deserializer function\nfn deserialize_maybe_nan&lt;'de, D, T: Deserialize&lt;'de&gt;&gt;(\n    deserializer: D,\n) -&gt; Result&lt;Option&lt;T&gt;, D::Error&gt;\nwhere\n    D: Deserializer&lt;'de&gt;,\n{\n    // we define a local enum type inside of the function\n    // because it is untagged, serde will deserialize as the first variant\n    // that it can\n    #[derive(Deserialize)]\n    #[serde(untagged)]\n    enum MaybeNA&lt;U&gt; {\n        // if it can be parsed as Option&lt;T&gt;, it will be\n        Value(Option&lt;U&gt;),\n        // otherwise try parsing as a string\n        NAString(String),\n    }\n\n    // deserialize into local enum\n    let value: MaybeNA&lt;T&gt; = Deserialize::deserialize(deserializer)?;\n    match value {\n        // if parsed as T or None, return that\n        MaybeNA::Value(value) =&gt; Ok(value),\n\n        // otherwise, if value is string an \"n/a\", return None\n        // (and fail if it is any other string)\n        MaybeNA::NAString(string) =&gt; {\n            if string == \"n/a\" {\n                Ok(None)\n            } else {\n                Err(serde::de::Error::custom(\"Unexpected string\"))\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>Then you can mark your fields with <code>#[serde(default, deserialize_with = \"deserialize_maybe_nan\")]</code> to use this function instead of the default function:</p>\n\n<pre><code>#[serde(Deserialize)]\nstruct Data {\n    #[serde(default, deserialize_with = \"deserialize_maybe_nan\")]\n    field1: Option&lt;f32&gt;,\n    #[serde(default, deserialize_with = \"deserialize_maybe_nan\")]\n    field2: Option&lt;u64&gt;,\n    // more ...\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=fc17092fa120373a02c1593d39733853\" rel=\"nofollow noreferrer\">Working playground example</a></p>\n\n<p>More information in the documentation:</p>\n\n<ul>\n<li><a href=\"https://serde.rs/field-attrs.html#deserialize_with\" rel=\"nofollow noreferrer\"><code>deserialize_with</code> serde attribute</a></li>\n<li><a href=\"https://serde.rs/enum-representations.html#untagged\" rel=\"nofollow noreferrer\">Untagged enum representation</a></li>\n</ul>\n"}], "owner": {"reputation": 409, "user_id": 2970121, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/d0b21cede510b0bbf986847693a9e075?s=128&d=identicon&r=PG&f=1", "display_name": "njaard", "link": "https://stackoverflow.com/users/2970121/njaard"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 414, "favorite_count": 0, "accepted_answer_id": 56384732, "answer_count": 1, "score": 1, "last_activity_date": 1559257836, "creation_date": 1559244128, "last_edit_date": 1559257719, "question_id": 56384447, "link": "https://stackoverflow.com/questions/56384447/how-do-i-transform-special-values-into-optionnone-when-using-serde-to-deserial", "title": "How do I transform special values into Option::None when using Serde to deserialize?", "body": "<p>I'm parsing data into:</p>\n\n<pre><code>struct Data {\n    field1: Option&lt;f32&gt;,\n    field2: Option&lt;u64&gt;,\n    // more ...\n}\n</code></pre>\n\n<p>The problem is that my input data format formats what would be a <code>None</code> in Rust as \"<code>n/a</code>\".</p>\n\n<p>How do tell Serde that an <code>Option&lt;T&gt;</code> should be <code>None</code> for the specific string <code>n/a</code>, as opposed to an error? We can assume that this doesn't apply to a <code>String</code>.</p>\n\n<p>This isn't the same question as <a href=\"https://stackoverflow.com/questions/54452734/how-to-deserialize-nan-as-nan-with-serde-json\">How to deserialize &quot;NaN&quot; as `nan` with serde_json?</a> because that's creating an <code>f32</code> from a special value whereas my question is creating an <code>Option&lt;Anything&gt;</code> from a special value. It's also not <a href=\"https://stackoverflow.com/questions/46753955/how-to-transform-fields-during-deserialization-using-serde\">How to transform fields during deserialization using Serde?</a> as that still concerns a specific type.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 307, "user_id": 1177621, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/17bdcfa011d804e25fdf061dce791639?s=128&d=identicon&r=PG", "display_name": "mk_", "link": "https://stackoverflow.com/users/1177621/mk"}, "edited": false, "score": 1, "creation_date": 1559242062, "post_id": 56383889, "comment_id": 99368084, "body": "Thanks, but I have a further question. Since f2() returns a string literal that is not related to <code>s</code>, does the compiler &#39;assume&#39; that a return type of string slice means the underlying string is still referenced?"}, {"owner": {"reputation": 577, "user_id": 4938460, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/109ce42816d23c999e06490a700f4c63?s=128&d=identicon&r=PG&f=1", "display_name": "Qwertycrackers", "link": "https://stackoverflow.com/users/4938460/qwertycrackers"}, "reply_to_user": {"reputation": 307, "user_id": 1177621, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/17bdcfa011d804e25fdf061dce791639?s=128&d=identicon&r=PG", "display_name": "mk_", "link": "https://stackoverflow.com/users/1177621/mk"}, "edited": false, "score": 0, "creation_date": 1559331560, "post_id": 56383889, "comment_id": 99400124, "body": "Yes. <code>rustc</code> does not look inside your function when attempting to guess lifetimes. Instead, it simply uses the signature. So it is (overly aggressively) thinking that your static string slice from <code>f2</code> borrows <code>s</code>, even though it doesn&#39;t. You could produce the desired behavior by explicitly specifying the lifetimes: <code>fn f2&lt;&#39;a&gt;(s: &amp;&#39;a str) -&gt; &#39;static str</code>"}], "tags": [], "owner": {"reputation": 577, "user_id": 4938460, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/109ce42816d23c999e06490a700f4c63?s=128&d=identicon&r=PG&f=1", "display_name": "Qwertycrackers", "link": "https://stackoverflow.com/users/4938460/qwertycrackers"}, "is_accepted": false, "score": 1, "last_activity_date": 1559241588, "creation_date": 1559241588, "answer_id": 56383889, "question_id": 56383628, "link": "https://stackoverflow.com/questions/56383628/why-does-returning-a-string-slice-instead-of-a-usize-prevent-mutating-a-string/56383889#56383889", "title": "Why does returning a string slice instead of a usize prevent mutating a String?", "body": "<p><code>f1</code> and <code>f2</code> both take an immutable borrow. However, the lifetime of the borrow from <code>f1</code> ends at the end of <code>f1</code>, because you're just returning a <code>usize</code> and not anything from the actual string.</p>\n\n<p>However, <code>f2</code> returns a <code>&amp;str</code>, which is borrowing your underlying <code>String</code>, <code>s</code>. Since <code>n</code> stays alive, the immutable borrow of <code>s</code> continues until <code>n</code> is no longer used. Effectively, this prevents your call to <code>s.clear()</code> from \"pulling the rug out from under\" your pointer <code>s</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 29810, "user_id": 423170, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/H9kNQ.png?s=128&g=1", "display_name": "Frxstrem", "link": "https://stackoverflow.com/users/423170/frxstrem"}, "is_accepted": false, "score": 3, "last_activity_date": 1559257628, "last_edit_date": 1559257628, "creation_date": 1559246963, "answer_id": 56384977, "question_id": 56383628, "link": "https://stackoverflow.com/questions/56383628/why-does-returning-a-string-slice-instead-of-a-usize-prevent-mutating-a-string/56384977#56384977", "title": "Why does returning a string slice instead of a usize prevent mutating a String?", "body": "<p>The Rust reference <a href=\"https://doc.rust-lang.org/reference/lifetime-elision.html\" rel=\"nofollow noreferrer\">says</a>:</p>\n\n<blockquote>\n  <p>If there is exactly one lifetime used in the parameters (elided or not), that lifetime is assigned to all elided output lifetimes.</p>\n</blockquote>\n\n<p>This means that your method</p>\n\n<pre><code>fn f2(s: &amp;String) -&gt; &amp;str {\n    \"def\"\n}\n</code></pre>\n\n<p>is interpreted by Rust as:</p>\n\n<pre><code>fn f2&lt;'a&gt;(s: &amp;'a String) -&gt; &amp;'a str {\n    \"def\"\n}\n</code></pre>\n\n<p>Since <code>\"def\"</code> has the lifetime <code>'static</code>, its lifetime can be shortened to <code>'a</code> when being returned from the function (so the compiler won't complain here), but when calling the function the compiler cannot infer that the true lifetime of the string was really <code>'static</code>. To do this, you must explicitly mark it as <code>'static</code> yourself:</p>\n\n<pre><code>fn f2(s: &amp;String) -&gt; &amp;'static str {\n    \"def\"\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 4, "last_activity_date": 1559311768, "last_edit_date": 1559311768, "creation_date": 1559306676, "answer_id": 56395367, "question_id": 56383628, "link": "https://stackoverflow.com/questions/56383628/why-does-returning-a-string-slice-instead-of-a-usize-prevent-mutating-a-string/56395367#56395367", "title": "Why does returning a string slice instead of a usize prevent mutating a String?", "body": "<p>Here is the minimum code necessary to reproduce the issue:</p>\n\n<pre><code>fn f1(s: &amp;String) -&gt; usize { unimplemented!() }\n\nfn f2(s: &amp;String) -&gt; &amp;str { unimplemented!() }\n\nfn main() {\n    let mut s = String::from(\"some_string\");\n    let n = f1(&amp;s);\n    s.clear();\n    println!(\"n = {}\", n);\n}\n</code></pre>\n\n<hr>\n\n<p><strong>Lifetime analysis is performed based on function signatures.</strong></p>\n\n<p>You will note in the above code that I have used <code>unimplemented!()</code> as the body of the functions, and the problem is exactly the same. This is <em>normal</em>.</p>\n\n<p>In the vast majority of cases<sup>1</sup>, a function signature fully specifies the interface of a function, and it is unnecessary to look at its implementation.</p>\n\n<p>As a corollary, this also means that whether the lifetime in a return type is linked to the lifetime in any of the arguments is fully specified within the signature, and in this case the full signature of <code>f2</code> is therefore:</p>\n\n<pre><code>fn f2&lt;'a&gt;(s: &amp;'a String) -&gt; &amp;'a str;\n</code></pre>\n\n<p>Whether the implementation of <code>f2</code> is <code>\"def\"</code> (with the <code>'static</code> lifetime) or <code>&amp;*s</code> (with the <code>'a</code> lifetime) does not matter; only the signature matters, and the signature uses the same lifetime due to the elision rules.</p>\n\n<p><sup>1</sup> <em>The one exception I know of concerns the <code>-&gt; impl Trait</code> feature and whether the resulting object implements <code>Send</code> or <code>Sync</code>.</em></p>\n\n<hr>\n\n<p>In the case of <code>f1</code>, the return type is not linked to the argument, therefore the borrow of the argument ends at the end of the call to <code>f1</code>:</p>\n\n<pre><code>fn main() {\n    let mut s = String::from(\"some_string\");\n    let n = {\n        //  Immutable borrow of s starts here.\n        f1(&amp;s)\n        //  Immutable borrow of s ends here.\n    };\n    s.clear();\n    println!(\"n = {}\", n);\n}\n</code></pre>\n\n<p>In the case of <code>f2</code>, the return type has the same lifetime as the argument, and therefore is considered to extend the borrow. In Rust 2015, the borrow would extend until the return value went out of scope (lexical borrow); with Rust 2018, the borrow extends until the last use of the return value (non-lexical borrow).</p>\n\n<p>In your case, both are basically identical:</p>\n\n<pre><code>fn main() {\n    let mut s = String::from(\"some_string\");\n    let n = {\n        //  Immutable borrow of s starts here.\n        f2(&amp;s)\n    };\n    s.clear();  //  Conflicting attempt to mutably borrow s.\n    println!(\"n = {}\", n);\n    //  Immutable borrow of s ends here.\n}\n</code></pre>\n\n<p>You could observe the difference by switching the order of <code>s.clear()</code> and <code>println!</code>.</p>\n"}], "owner": {"reputation": 307, "user_id": 1177621, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/17bdcfa011d804e25fdf061dce791639?s=128&d=identicon&r=PG", "display_name": "mk_", "link": "https://stackoverflow.com/users/1177621/mk"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 95, "favorite_count": 1, "accepted_answer_id": 56395367, "answer_count": 3, "score": 1, "last_activity_date": 1559311768, "creation_date": 1559240446, "last_edit_date": 1559241720, "question_id": 56383628, "link": "https://stackoverflow.com/questions/56383628/why-does-returning-a-string-slice-instead-of-a-usize-prevent-mutating-a-string", "title": "Why does returning a string slice instead of a usize prevent mutating a String?", "body": "<p>This code compiles:</p>\n\n<pre><code>fn main() {\n    let mut s = String::from(\"some_string\");\n    let n = f1(&amp;s);\n    s.clear();\n    println!(\"n = {}\", n);\n}\n\nfn f1(s: &amp;String) -&gt; usize {\n    10\n}\n\nfn f2(s: &amp;String) -&gt; &amp;str {\n    \"def\"\n}\n</code></pre>\n\n<p>However, replacing the call to <code>f1()</code> by <code>f2()</code> causes a compilation failure. It appears to me that both <code>f1()</code> and <code>f2()</code> do an immutable borrow, and <code>s.clear()</code> does a mutable borrow, so I should get compilation error in both cases. What am I missing?</p>\n"}, {"tags": ["pointers", "rust", "ref"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1559242589, "post_id": 56383150, "comment_id": 99368307, "body": "You can use <code>match self { Keys::Up_key(s)</code> instead."}], "answers": [{"tags": [], "owner": {"reputation": 1384, "user_id": 10240085, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/HBxgL.jpg?s=128&g=1", "display_name": "Muhammad Naufil", "link": "https://stackoverflow.com/users/10240085/muhammad-naufil"}, "is_accepted": true, "score": 2, "last_activity_date": 1559241030, "creation_date": 1559241030, "answer_id": 56383765, "question_id": 56383150, "link": "https://stackoverflow.com/questions/56383150/why-do-i-have-to-use-ref-when-matching-on-a-dereferenced-enum/56383765#56383765", "title": "Why do I have to use ref when matching on a dereferenced enum?", "body": "<p>Using <code>ref</code> prevents the pattern matching from taking ownership of <code>s</code>.</p>\n"}], "owner": {"reputation": 1384, "user_id": 10240085, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/HBxgL.jpg?s=128&g=1", "display_name": "Muhammad Naufil", "link": "https://stackoverflow.com/users/10240085/muhammad-naufil"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 115, "favorite_count": 0, "closed_date": 1559242552, "accepted_answer_id": 56383765, "answer_count": 1, "score": 0, "last_activity_date": 1559242703, "creation_date": 1559238229, "last_edit_date": 1559242547, "question_id": 56383150, "link": "https://stackoverflow.com/questions/56383150/why-do-i-have-to-use-ref-when-matching-on-a-dereferenced-enum", "closed_reason": "Duplicate", "title": "Why do I have to use ref when matching on a dereferenced enum?", "body": "<p>Why do I have to use <code>ref s</code> and not only <code>s</code> in <code>destruct</code> method of <code>impl Keys</code>?</p>\n\n<pre><code>#[derive(Debug)]\nenum Direction {\n    Up(Point),\n    Down(Point),\n    Right(Point),\n    Left(Point),\n}\n\n#[derive(Debug)]\nstruct Point {\n    x: u32,\n    y: u32,\n}\n\n#[derive(Debug)]\nenum Keys {\n    Up_key(String),\n    Down_key(String),\n    Right_key(String),\n    Left_key(String),\n}\n\nimpl Direction {\n    fn match_direction(&amp;self) -&gt; Keys {\n        match *self {\n            Direction::Up(_) =&gt; Keys::Up_key(String::from(\"Up key is pressed\")),\n            Direction::Down(_) =&gt; Keys::Down_key(String::from(\"Down key is pressed\")),\n            Direction::Right(_) =&gt; Keys::Right_key(String::from(\"Right key is pressed\")),\n            Direction::Left(_) =&gt; Keys::Left_key(String::from(\"Left key is pressed\")),\n        }\n    }\n}\n\nimpl Keys {\n    fn destruct(&amp;self) -&gt; &amp;String {\n        match *self {\n            Keys::Up_key(ref s) =&gt; s,\n            Keys::Down_key(ref s) =&gt; s,\n            Keys::Left_key(ref s) =&gt; s,\n            Keys::Right_key(ref s) =&gt; s,\n        }\n    }\n}\n\nfn main() {\n    let test_1 = Direction::Right(Point { x: 1, y: 0 });\n    let x = test_1.match_direction();\n    println!(\"{:#?}\", x);\n    let k = x.destruct();\n    println!(\"{}\", k);\n}\n</code></pre>\n\n<p>Output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Right_key(\n    \"Right key is pressed\",\n)\nRight key is pressed\n</code></pre>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 2012, "user_id": 5987669, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1be176d2b1a1b2a5d648abdb75dc1b15?s=128&d=identicon&r=PG&f=1", "display_name": "Locke", "link": "https://stackoverflow.com/users/5987669/locke"}, "edited": false, "score": 0, "creation_date": 1559236411, "post_id": 56382038, "comment_id": 99365744, "body": "Try using <code>Multipart::from_request(&lt;&amp;mut request as HttpRequest&gt;)</code>. And please don&#39;t layer references."}, {"owner": {"reputation": 57, "user_id": 8155019, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7eca7b7cba4cad797666b8882852e798?s=128&d=identicon&r=PG&f=1", "display_name": "sapphie", "link": "https://stackoverflow.com/users/8155019/sapphie"}, "reply_to_user": {"reputation": 2012, "user_id": 5987669, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1be176d2b1a1b2a5d648abdb75dc1b15?s=128&d=identicon&r=PG&f=1", "display_name": "Locke", "link": "https://stackoverflow.com/users/5987669/locke"}, "edited": false, "score": 0, "creation_date": 1559238935, "post_id": 56382038, "comment_id": 99366824, "body": "@Locke that one results in a syntax error: <code>error: expected &#39;::&#39;, found &#39;)&#39;</code>"}, {"owner": {"reputation": 57, "user_id": 8155019, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7eca7b7cba4cad797666b8882852e798?s=128&d=identicon&r=PG&f=1", "display_name": "sapphie", "link": "https://stackoverflow.com/users/8155019/sapphie"}, "reply_to_user": {"reputation": 2012, "user_id": 5987669, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1be176d2b1a1b2a5d648abdb75dc1b15?s=128&d=identicon&r=PG&f=1", "display_name": "Locke", "link": "https://stackoverflow.com/users/5987669/locke"}, "edited": false, "score": 0, "creation_date": 1559238986, "post_id": 56382038, "comment_id": 99366847, "body": "Also, I didn&#39;t have an option but to layer the references, and it&#39;s why I considered that solution sub-optimal"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1559258800, "creation_date": 1559258800, "answer_id": 56386869, "question_id": 56382038, "link": "https://stackoverflow.com/questions/56382038/how-do-i-use-multipartfrom-request-with-a-tiny-httprequest/56386869#56386869", "title": "How do I use Multipart::from_request with a tiny_http::Request?", "body": "<p>As the compiler tells you, you need a mutable reference:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>&lt;&amp;'r mut tiny_http::Request as multipart::server::HttpRequest&gt;\n</code></pre>\n\n<p>Declare the request as mutable and then take a reference to it:</p>\n\n<pre><code>match server.recv() {\n    Ok(mut request) =&gt; {\n        let mult = Multipart::from_request(&amp;mut request).unwrap();\n    }\n    Err(s) =&gt; eprintln!(\"{:#?}\", s),\n};\n</code></pre>\n"}], "owner": {"reputation": 57, "user_id": 8155019, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7eca7b7cba4cad797666b8882852e798?s=128&d=identicon&r=PG&f=1", "display_name": "sapphie", "link": "https://stackoverflow.com/users/8155019/sapphie"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 48, "favorite_count": 0, "accepted_answer_id": 56386869, "answer_count": 1, "score": 0, "last_activity_date": 1559258800, "creation_date": 1559233382, "last_edit_date": 1559258461, "question_id": 56382038, "link": "https://stackoverflow.com/questions/56382038/how-do-i-use-multipartfrom-request-with-a-tiny-httprequest", "title": "How do I use Multipart::from_request with a tiny_http::Request?", "body": "<p>I'm trying to use the <code>tiny_http</code> integration in the <code>multipart</code> crate:</p>\n\n<pre><code>extern crate multipart;\nextern crate tiny_http;\n\nuse multipart::server::tiny_http as tiny_http_trait;\nuse multipart::server::Multipart;\nuse tiny_http::*;\n\nfn main() {\n    let server = Server::http(\"0.0.0.0:8080\").unwrap();\n    loop {\n        match server.recv() {\n            Ok(request) =&gt; {\n                let mult = Multipart::from_request(request).unwrap();\n            }\n            Err(s) =&gt; eprintln!(\"{:#?}\", s),\n        };\n    }\n}\n</code></pre>\n\n<p>I'm getting the following error when trying to extract multipart form data from the request:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `tiny_http::Request: multipart::server::HttpRequest` is not satisfied\n  --&gt; src/main.rs:13:28\n   |\n13 |                 let mult = Multipart::from_request(request).unwrap();\n   |                            ^^^^^^^^^^^^^^^^^^^^^^^ the trait `multipart::server::HttpRequest` is not implemented for `tiny_http::Request`\n   |\n   = help: the following implementations were found:\n             &lt;&amp;'r mut tiny_http::Request as multipart::server::HttpRequest&gt;\n   = note: required by `multipart::server::Multipart::&lt;()&gt;::from_request`\n</code></pre>\n\n<p>That trait implementation does exist, and I'm able to use it directly with <code>HttpRequest</code> functions:</p>\n\n<pre><code>let boundary = &lt;&amp;mut Request as HttpRequest&gt;::multipart_boundary(&amp;&amp;mut request);\n</code></pre>\n\n<p>I cannot seem to use that same syntax to use <code>tiny_http::Request</code> as a <code>multipart::server::HttpRequest</code> in <code>multipart::server::Multipart::from_request(...)</code></p>\n\n<p>Here is my <code>Cargo.toml</code>:</p>\n\n<pre><code>[package]\nname = \"db_interface\"\nversion = \"0.1.0\"\nauthors = [\"\"]\nedition = \"2018\"\n\n[dependencies]\ntiny_http = \"0.6.2\"\n\n[dependencies.multipart]\nversion = \"0.16.1\"\nfeatures = [\"tiny_http\"]\n</code></pre>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 5152, "user_id": 1601571, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/56403b8ee9f5066ce3f75b9783cc9b2b?s=128&d=identicon&r=PG", "display_name": "&#214;mer Erden", "link": "https://stackoverflow.com/users/1601571/%c3%96mer-erden"}, "edited": false, "score": 0, "creation_date": 1559213603, "post_id": 56373859, "comment_id": 99354371, "body": "Error makes sense because for all <code>Iterator</code>s there is an <code>IntoIter</code> implementation in core, why do you want to implement your own ?, actually you are doing exactly the same implementation in core implementation."}, {"owner": {"reputation": 3134, "user_id": 7607408, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/J7ZMW.jpg?s=128&g=1", "display_name": "Yair Halberstadt", "link": "https://stackoverflow.com/users/7607408/yair-halberstadt"}, "reply_to_user": {"reputation": 5152, "user_id": 1601571, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/56403b8ee9f5066ce3f75b9783cc9b2b?s=128&d=identicon&r=PG", "display_name": "&#214;mer Erden", "link": "https://stackoverflow.com/users/1601571/%c3%96mer-erden"}, "edited": false, "score": 0, "creation_date": 1559213790, "post_id": 56373859, "comment_id": 99354446, "body": "@&#214;merErden I don&#39;t want to implement it for the StackIter. I want to implement it for the Stack (which is not necessarily an Iterator)"}, {"owner": {"reputation": 3134, "user_id": 7607408, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/J7ZMW.jpg?s=128&g=1", "display_name": "Yair Halberstadt", "link": "https://stackoverflow.com/users/7607408/yair-halberstadt"}, "reply_to_user": {"reputation": 5152, "user_id": 1601571, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/56403b8ee9f5066ce3f75b9783cc9b2b?s=128&d=identicon&r=PG", "display_name": "&#214;mer Erden", "link": "https://stackoverflow.com/users/1601571/%c3%96mer-erden"}, "edited": false, "score": 0, "creation_date": 1559213888, "post_id": 56373859, "comment_id": 99354502, "body": "The error is saying that some implementations of Stack might also implement Iterator. Fine, but I want to provide an implementation for those that don&#39;t."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 2, "creation_date": 1559221408, "post_id": 56373859, "comment_id": 99357900, "body": "You can&#39;t. This is the orphan rule - you cannot implement a trait from another crate for type that are also in another crate. A generic type parameter could be any type, including those in other crates, so you cannot write a blanket impl like that."}], "owner": {"reputation": 3134, "user_id": 7607408, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/J7ZMW.jpg?s=128&g=1", "display_name": "Yair Halberstadt", "link": "https://stackoverflow.com/users/7607408/yair-halberstadt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 310, "favorite_count": 0, "answer_count": 0, "score": 3, "last_activity_date": 1559219899, "creation_date": 1559202214, "last_edit_date": 1559219899, "question_id": 56373859, "link": "https://stackoverflow.com/questions/56373859/how-can-i-provide-a-default-implementation-of-intoiterator-for-a-trait", "title": "How can I provide a default implementation of IntoIterator for a trait?", "body": "<p>I have the following trait and an iterator for it:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub trait Stack&lt;'a&gt; {\n    type Item;\n\n    fn empty() -&gt; Self;\n    fn is_empty(&amp;self) -&gt; bool;\n    fn cons(&amp;'a self, val: &amp;'a Self::Item) -&gt; Self;\n    fn head(&amp;self) -&gt; &amp;Self::Item;\n    fn tail(&amp;self) -&gt; &amp;Self;\n}\n\npub struct StackIter&lt;'a, TStack: Stack&lt;'a&gt;&gt; {\n    stack: &amp;'a TStack,\n}\n\nimpl&lt;'a, TStack: Stack&lt;'a&gt;&gt; Iterator for StackIter&lt;'a, TStack&gt; {\n    type Item = &amp;'a TStack::Item;\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        if self.stack.is_empty() {\n            Option::None\n        } else {\n            let val = self.stack.head();\n            self.stack = self.stack.tail();\n            Option::Some(val)\n        }\n    }\n}\n</code></pre>\n\n<p>I want to define a default implementation of <code>IntoIterator</code> for the <code>Stack</code> trait, so I tried this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub trait Stack&lt;'a&gt;: IntoIterator {\n    fn into_iter(self) -&gt; Self::IntoIter {\n        /* ... */\n    }\n}\n</code></pre>\n\n<p>This won't work since we can't define a default value for the type <code>IntoIterator::IntoIter</code>.</p>\n\n<p>I tried providing an implementation outside of <code>Stack</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl&lt;'a, TStack: Stack&lt;'a&gt;&gt; IntoIterator for &amp;'a TStack {\n    type Item = &amp;'a TStack::Item;\n    type IntoIter = StackIter&lt;'a, TStack&gt;;\n    fn into_iter(self) -&gt; Self::IntoIter {\n        StackIter { stack: self }\n    }\n}\n</code></pre>\n\n<p>But then I get the following errors:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0119]: conflicting implementations of trait `std::iter::IntoIterator` for type `&amp;_`:\n  --&gt; src/lib.rs:28:1\n   |\n28 | impl&lt;'a, TStack: Stack&lt;'a&gt;&gt; IntoIterator for &amp;'a TStack {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: conflicting implementation in crate `core`:\n           - impl&lt;I&gt; std::iter::IntoIterator for I\n             where I: std::iter::Iterator;\n   = note: downstream crates may implement trait `std::iter::Iterator` for type `&amp;_`\n\nerror[E0210]: type parameter `TStack` must be used as the type parameter for some local type (e.g., `MyStruct&lt;TStack&gt;`)\n  --&gt; src/lib.rs:28:1\n   |\n28 | impl&lt;'a, TStack: Stack&lt;'a&gt;&gt; IntoIterator for &amp;'a TStack {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `TStack` must be used as the type parameter for some local type\n   |\n   = note: only traits defined in the current crate can be implemented for a type parameter\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 1, "creation_date": 1559200269, "post_id": 56372993, "comment_id": 99348522, "body": "I really don&#39;t understand please always share your goal of doing thing. Why not just <code>pub data: Vec&lt;T&gt;</code> ?"}, {"owner": {"reputation": 889, "user_id": 748875, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/32ac6252cd00de88e39b9b2e8d5356d4?s=128&d=identicon&r=PG", "display_name": "Simon", "link": "https://stackoverflow.com/users/748875/simon"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1559201158, "post_id": 56372993, "comment_id": 99348938, "body": "The data attribute isn&#39;t supposed to grow or shrink during the lifetime of my container, so it just didn&#39;t feel right."}, {"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 1, "creation_date": 1559201971, "post_id": 56372993, "comment_id": 99349251, "body": "To prevent changing the size you shouldn&#39;t make the field public. You can implement <code>IndexMut</code> if you want to allow to change values."}, {"owner": {"reputation": 889, "user_id": 748875, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/32ac6252cd00de88e39b9b2e8d5356d4?s=128&d=identicon&r=PG", "display_name": "Simon", "link": "https://stackoverflow.com/users/748875/simon"}, "edited": false, "score": 0, "creation_date": 1559202343, "post_id": 56372993, "comment_id": 99349384, "body": "Thanks ! It&#39;s more that I didn&#39;t want any overhead... In C++ I wouldn&#39;t use an <code>std::vector</code> when a simpler type does the job. Bad habits from a poor background I guess. ;)"}, {"owner": {"reputation": 889, "user_id": 748875, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/32ac6252cd00de88e39b9b2e8d5356d4?s=128&d=identicon&r=PG", "display_name": "Simon", "link": "https://stackoverflow.com/users/748875/simon"}, "edited": false, "score": 0, "creation_date": 1559208646, "post_id": 56372993, "comment_id": 99352119, "body": "The array class you&#39;re referring to is statically sized, which doesn&#39;t fit every cases either. As for raw pointers... they are the only options you have in many situations where 1) you want the softer syntax of C++ over C and 2) can&#39;t afford using the STL and/or dynamic allocations for every bit of code you write. But thanks for the condescending tone, it&#39;s always appreciated.  I&#39;ll have a look at ndarray&#39;s implementation as a reference for my toy program, thanks."}, {"owner": {"reputation": 889, "user_id": 748875, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/32ac6252cd00de88e39b9b2e8d5356d4?s=128&d=identicon&r=PG", "display_name": "Simon", "link": "https://stackoverflow.com/users/748875/simon"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1559215347, "post_id": 56372993, "comment_id": 99355159, "body": "(Comment above was intended to @Stargateur, who deleted his)"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1559231436, "last_edit_date": 1559231436, "creation_date": 1559219387, "answer_id": 56378361, "question_id": 56372993, "link": "https://stackoverflow.com/questions/56372993/how-can-i-copy-a-shared-slice-to-have-a-boxed-slice/56378361#56378361", "title": "How can I copy a shared slice to have a boxed slice?", "body": "<p>If your slice contains <code>Copy</code> types, you can use <code>From</code> / <code>Into</code> to perform the construction:</p>\n\n<pre><code>pub struct Foo&lt;T&gt; {\n    pub data: Box&lt;[T]&gt;,\n}\n\nimpl&lt;T&gt; Foo&lt;T&gt; {\n    fn from_slice(slice: &amp;[T]) -&gt; Foo&lt;T&gt;\n    where\n        T: Copy,\n    {\n        Foo { data: slice.into() }\n    }\n}\n</code></pre>\n\n<p>If your data is <code>Clone</code>, then you can use <code>to_vec</code> + <code>into_boxed_slice</code>:</p>\n\n<pre><code>impl&lt;T&gt; Foo&lt;T&gt; {\n    fn from_slice(slice: &amp;[T]) -&gt; Foo&lt;T&gt;\n    where\n        T: Clone,\n    {\n        Foo { data: slice.to_vec().into_boxed_slice() }\n    }\n}\n</code></pre>\n\n<blockquote>\n  <p>it doesn't seem right to create a <code>Vec</code> as a proxy to a clone</p>\n</blockquote>\n\n<p>You <em>aren't</em> cloning here. When you clone a type <code>T</code>, you get a type <code>T</code> back. You are starting with a <code>&amp;[T]</code> and want to get a <code>Box&lt;[T]&gt;</code>, not a <code>[T]</code> (which you can't have). </p>\n\n<p>Creating a boxed slice through a <code>Vec</code> means that you temporarily take up 3 machine-sized integers instead of 2; this is unlikely to be a performance problem compared to the amount of allocation performed.</p>\n\n<p>I do agree with <a href=\"https://stackoverflow.com/a/56373713/155423\">starblue's answer</a> that keeping a <code>Vec&lt;T&gt;</code> is probably simpler for most cases, but I admit that there are times where it's useful to have a boxed slice.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/34284191/155423\">Initialize boxed slice without clone or copy</a></li>\n<li><a href=\"https://stackoverflow.com/q/39615666/155423\">What is the use of into_boxed_slice() methods?</a></li>\n<li><a href=\"https://stackoverflow.com/q/33704592/155423\">Performance comparison of a Vec and a boxed slice</a></li>\n</ul>\n\n<blockquote>\n  <p>I suppose there is a reason why <code>vec!</code> is a macro</p>\n</blockquote>\n\n<p>The <a href=\"https://github.com/rust-lang/rust/blob/1.35.0/src/liballoc/macros.rs#L38-L46\" rel=\"nofollow noreferrer\">implementation of <code>vec!</code></a> is public:</p>\n\n<pre><code>macro_rules! vec {\n    ($elem:expr; $n:expr) =&gt; (\n        $crate::vec::from_elem($elem, $n)\n    );\n    ($($x:expr),*) =&gt; (\n        &lt;[_]&gt;::into_vec(box [$($x),*])\n    );\n    ($($x:expr,)*) =&gt; (vec![$($x),*])\n}\n</code></pre>\n\n<p>It's really only a macro for syntax convenience (and because it uses the unstable <code>box</code> keyword); it takes the arguments, creates an array, boxes it, coerces it to a boxed slice, then converts it to a <code>Vec</code>. </p>\n"}], "owner": {"reputation": 889, "user_id": 748875, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/32ac6252cd00de88e39b9b2e8d5356d4?s=128&d=identicon&r=PG", "display_name": "Simon", "link": "https://stackoverflow.com/users/748875/simon"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 283, "favorite_count": 0, "accepted_answer_id": 56378361, "answer_count": 1, "score": 1, "last_activity_date": 1559231436, "creation_date": 1559198401, "last_edit_date": 1559218991, "question_id": 56372993, "link": "https://stackoverflow.com/questions/56372993/how-can-i-copy-a-shared-slice-to-have-a-boxed-slice", "title": "How can I copy a shared slice to have a boxed slice?", "body": "<p>I have a container:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub struct Foo&lt;T&gt; {\n    pub data: Box&lt;[T]&gt;,\n}\n</code></pre>\n\n<p>I would like a method to initialize a new one from an existing slice:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl&lt;T&gt; Foo&lt;T&gt; {\n    fn from_slice(slice: &amp;[T]) -&gt; Foo&lt;T&gt; {\n        Foo {\n            data: Box::new(/* something here */),\n        }\n    }\n}\n</code></pre>\n\n<p>I'd like to create a <code>Foo</code> instance from any kind of slice, coming from a dynamic vector or a static string.</p>\n\n<p>I suppose there is a reason why <code>vec!</code> is a macro, but is there a way to avoid writing one? I guess I could do <code>slice.to_vec().into_boxed_slice()</code>, but it doesn't seem right to create a <code>Vec</code> as a proxy to a clone...</p>\n\n<p>I'm not using a <code>Vec</code> in my struct because the <code>data</code> isn't supposed to change in size during the lifetime of my container. It didn't feel right to use a <code>Vec</code> but I may be wrong.</p>\n"}, {"tags": ["rust", "borrow-checker", "borrow"], "comments": [{"owner": {"reputation": 4394, "user_id": 534238, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/nZVSf.jpg?s=128&g=1", "display_name": "Mike Williamson", "link": "https://stackoverflow.com/users/534238/mike-williamson"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1559190374, "post_id": 56370397, "comment_id": 99345367, "body": "@Stargateur I don&#39;t think this is quite a duplicate, because my underlying question isn&#39;t <i>why</i> this is OK, but <i>how</i> this is OK?  How do things happen in the stack under the hood to allow this to be possible?  Are there simply 2 different objects, one which is the old <code>line</code> and another which is the new <code>line</code>, even though the old one is no longer accessible?  Or is the old one truly overwritten (if in the same scope)?  If so, how is that possible for differently sized types?"}], "answers": [{"comments": [{"owner": {"reputation": 4394, "user_id": 534238, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/nZVSf.jpg?s=128&g=1", "display_name": "Mike Williamson", "link": "https://stackoverflow.com/users/534238/mike-williamson"}, "edited": false, "score": 0, "creation_date": 1559190058, "post_id": 56370826, "comment_id": 99345300, "body": "Thank you, @SCappella !  This answers <i>most</i> of my confusion, but now I have another.  I understand what is happening <i>logically</i>, but not what is happening <i>within memory assignment and Rust&#39;s 0-cost abstractions</i>.  In the case where I <i>shadow but in the same scope</i>, like your first example (<code>let x=5;</code> ... <code>let x=7</code>), since it is the same scope, there is no scope where <code>x=5</code> anymore. So, in this case, what happens with <code>let x:i32 = 5</code> ... <code>let x:u64 = 7</code>? My question is: I had a 32-bit item on the stack, which is now a 64-bit item on that same stack position, right? How can I do that?"}, {"owner": {"reputation": 7716, "user_id": 4639273, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ae38603d40c633012992337a32330fa0?s=128&d=identicon&r=PG", "display_name": "SCappella", "link": "https://stackoverflow.com/users/4639273/scappella"}, "reply_to_user": {"reputation": 4394, "user_id": 534238, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/nZVSf.jpg?s=128&g=1", "display_name": "Mike Williamson", "link": "https://stackoverflow.com/users/534238/mike-williamson"}, "edited": false, "score": 1, "creation_date": 1559195680, "post_id": 56370826, "comment_id": 99346624, "body": "@MikeWilliamson They don&#39;t occupy the same stack position. The original variable is made inaccessible, but it still exists unchanged in memory. I&#39;ll add an example to show this."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 4394, "user_id": 534238, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/nZVSf.jpg?s=128&g=1", "display_name": "Mike Williamson", "link": "https://stackoverflow.com/users/534238/mike-williamson"}, "edited": false, "score": 3, "creation_date": 1559197923, "post_id": 56370826, "comment_id": 99347442, "body": "@MikeWilliamson The best way to think about it is to regards the inner <code>x</code> being an entirely different variable, with a different name. Imagine the compiler even <b>renaming</b> it internally (or behaving <b>as if</b> it did). Then it&#39;s obvious that the two do not share the same stack position, and there is no problem of them having different types."}, {"owner": {"reputation": 4394, "user_id": 534238, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/nZVSf.jpg?s=128&g=1", "display_name": "Mike Williamson", "link": "https://stackoverflow.com/users/534238/mike-williamson"}, "edited": false, "score": 0, "creation_date": 1559325403, "post_id": 56370826, "comment_id": 99397965, "body": "Great, thanks @SCappella !  BTW, how can you get the bytecode, or what it compiles down to?  In Python, I used the <code>dis</code> library.  Is there something like that in Rust?  And if so, how is this managed, since Rust compiles down to particular architectures / OSes.  (Will the same program create different bytecode on different platforms?  Or is bytecode just an intermediary, like in JVM or Python?)"}, {"owner": {"reputation": 7716, "user_id": 4639273, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ae38603d40c633012992337a32330fa0?s=128&d=identicon&r=PG", "display_name": "SCappella", "link": "https://stackoverflow.com/users/4639273/scappella"}, "reply_to_user": {"reputation": 4394, "user_id": 534238, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/nZVSf.jpg?s=128&g=1", "display_name": "Mike Williamson", "link": "https://stackoverflow.com/users/534238/mike-williamson"}, "edited": false, "score": 1, "creation_date": 1559337536, "post_id": 56370826, "comment_id": 99402060, "body": "@MikeWilliamson If you want to get assembly using Cargo, see <a href=\"https://stackoverflow.com/questions/39219961/how-to-get-assembly-output-from-building-with-cargo\">this question</a>. If you&#39;re ok with online tools, check out the <a href=\"https://godbolt.org/\" rel=\"nofollow noreferrer\">Compiler Explorer</a>. <a href=\"https://play.rust-lang.org/\" rel=\"nofollow noreferrer\">The Rust Playground</a> also has options to emit assembly and the other intermediate representations that Rust uses. For your other questions, try asking a new question and I&#39;m sure you&#39;ll get a good answer.."}], "tags": [], "owner": {"reputation": 7716, "user_id": 4639273, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ae38603d40c633012992337a32330fa0?s=128&d=identicon&r=PG", "display_name": "SCappella", "link": "https://stackoverflow.com/users/4639273/scappella"}, "is_accepted": true, "score": 4, "last_activity_date": 1559205114, "last_edit_date": 1559205114, "creation_date": 1559182579, "answer_id": 56370826, "question_id": 56370397, "link": "https://stackoverflow.com/questions/56370397/what-happens-on-the-stack-when-one-value-shadows-another-in-rust/56370826#56370826", "title": "What happens on the stack when one value shadows another in Rust?", "body": "<p>Whenever a variable is declared with <code>let</code>, it's an entirely new variable, separate from anything before it. Even if a variable with the same name already exists, the original variable is <a href=\"https://en.wikipedia.org/wiki/Variable_shadowing\" rel=\"nofollow noreferrer\"><em>shadowed</em></a> while the new variable is in scope. If a variable is shadowed, it's normally inaccessible.</p>\n\n<p>It's possible to access the value of the old variable in situations where the old variable is still in scope after the new variable falls out of scope, or if the old variable has a <code>Drop</code> implementation.</p>\n\n<p>We can see this in action in the following example.</p>\n\n<pre><code>#[derive(Debug)]\nstruct DroppedU32(u32);\n\nimpl Drop for DroppedU32 {\n    fn drop(&amp;mut self) {\n        eprintln!(\"Dropping u32: {}\", self.0);\n    }\n}\n\nfn main() {\n    let x = 5;\n    dbg!(&amp;x); // the original value\n    {\n        let x = 7;\n        dbg!(&amp;x); // the new value\n    }\n    dbg!(&amp;x); // the original value again\n\n    let y = DroppedU32(5);\n    dbg!(&amp;y); // the original value\n    let y = DroppedU32(7);\n    dbg!(&amp;y); // the new value\n\n    // down here, when the variables are dropped in\n    // reverse order of declaration,\n    // the original value is accessed again in the `Drop` impl.\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=88f9d7088204b9da3530392fbac84301\" rel=\"nofollow noreferrer\">(playground)</a></p>\n\n<p>That's not to say that the original variable is guaranteed to still exist. Compiler optimizations can cause the original variable to be overwritten, especially if the original variable isn't accessed again.</p>\n\n<p>The code</p>\n\n<pre><code>pub fn add_three(x: u32, y: u32, z: u32) -&gt; u32 {\n    let x = x + y;\n    let x = x + z;\n    x\n}\n</code></pre>\n\n<p><a href=\"https://rust.godbolt.org/z/5M3Su6\" rel=\"nofollow noreferrer\">compiles to</a></p>\n\n<pre><code>example::add_three:\n        lea     eax, [rdi + rsi]\n        add     eax, edx\n        ret\n</code></pre>\n\n<p>If you're like me and aren't too familiar with assembler code, this basically</p>\n\n<ol>\n<li>Adds x and y and puts the result in a variable (call it w).</li>\n<li>Adds z to w and overwrites w with the result.</li>\n<li>Returns w.</li>\n</ol>\n\n<p>So (besides the input parameters), there's only one variable used, even though we used <code>let x = ...</code> twice. The intermediate result <code>let x = x + y;</code> gets overwritten. </p>\n"}], "owner": {"reputation": 4394, "user_id": 534238, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/nZVSf.jpg?s=128&g=1", "display_name": "Mike Williamson", "link": "https://stackoverflow.com/users/534238/mike-williamson"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 300, "favorite_count": 1, "closed_date": 1559220663, "accepted_answer_id": 56370826, "answer_count": 1, "score": 3, "last_activity_date": 1559220529, "creation_date": 1559178615, "last_edit_date": 1559220529, "question_id": 56370397, "link": "https://stackoverflow.com/questions/56370397/what-happens-on-the-stack-when-one-value-shadows-another-in-rust", "closed_reason": "Duplicate", "title": "What happens on the stack when one value shadows another in Rust?", "body": "<p>I am reading <a href=\"https://www.packtpub.com/application-development/mastering-rust-second-edition\" rel=\"nofollow noreferrer\"><em>Mastering Rust</em></a>. There is an exercise at the end of the first chapter where sample code is provided, and the task is to fix it, iterating by using the generally quite helpful compiler error messages.</p>\n\n<p>I was <em>expecting</em> that the following was an error but it <strong>is not</strong>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>for line in reader.lines() {\n    let line = line.expect(\"Could not read line.\");\n</code></pre>\n\n<p>For complete context, I have the <a href=\"https://gist.github.com/rust-play/eaf785475b173c44db0aeb897d31d85f\" rel=\"nofollow noreferrer\">entire code in a gist</a>. That's the code after I fixed things, and the relevant rows are 37 &amp; 38. However it requires feeding a text file as an argument.</p>\n\n<hr>\n\n<p>I was expecting an error because <code>line</code> is on the stack (at least the pointer is). Is it right that it can still be <em>destroyed and replaced</em> with no complaint?</p>\n\n<p>What happens under the hood regarding memory management and the stack? I <em>presume</em> that <code>line</code> is actually a reference to a string (a <code>&amp;str</code> type). So, then, this is fine because in either case, the pointer itself - the object on the stack - is just a <code>usize</code>, so that both <code>line</code> objects are of the same size on the stack. </p>\n\n<p>Can I do this with something of a different size? Could the second line have said:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let line: f64 = 3.42;\n</code></pre>\n\n<p>In this case, the object itself is on the stack, and it is potentially larger than <code>usize</code>.</p>\n"}]