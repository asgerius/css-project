[{"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 1109, "user_id": 1772476, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/bc3dd034928abd20bb22de44a4846c93?s=128&d=identicon&r=PG", "display_name": "Timidger", "link": "https://stackoverflow.com/users/1772476/timidger"}, "edited": false, "score": 0, "creation_date": 1505338217, "post_id": 46202681, "comment_id": 79377624, "body": "Are you saying you want the return value of <code>FUNC</code> to be the same as <code>F</code>? I&#39;m not sure I can follow the question that is being asked unfortunately. Can you reduce this to a single example, preferebly something runnable in the <a href=\"http://play.rust-lang.org/\" rel=\"nofollow noreferrer\">playground</a>?"}, {"owner": {"reputation": 1109, "user_id": 1772476, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/bc3dd034928abd20bb22de44a4846c93?s=128&d=identicon&r=PG", "display_name": "Timidger", "link": "https://stackoverflow.com/users/1772476/timidger"}, "edited": false, "score": 0, "creation_date": 1505338265, "post_id": 46202681, "comment_id": 79377652, "body": "Side note: your <code>mem::replace</code> on the <code>Option</code> can be recreated by using <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#method.take\" rel=\"nofollow noreferrer\">take</a>"}, {"owner": {"reputation": 549, "user_id": 4275937, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/49b88e050dd8cc0e4dbbe301ccecd40d?s=128&d=identicon&r=PG&f=1", "display_name": "real", "link": "https://stackoverflow.com/users/4275937/real"}, "reply_to_user": {"reputation": 1109, "user_id": 1772476, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/bc3dd034928abd20bb22de44a4846c93?s=128&d=identicon&r=PG", "display_name": "Timidger", "link": "https://stackoverflow.com/users/1772476/timidger"}, "edited": false, "score": 0, "creation_date": 1505418253, "post_id": 46202681, "comment_id": 79417867, "body": "@Timidger: I didn&#39;t know about <code>take</code>. This is really cool, thank you."}], "answers": [{"comments": [{"owner": {"reputation": 549, "user_id": 4275937, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/49b88e050dd8cc0e4dbbe301ccecd40d?s=128&d=identicon&r=PG&f=1", "display_name": "real", "link": "https://stackoverflow.com/users/4275937/real"}, "edited": false, "score": 0, "creation_date": 1505418708, "post_id": 46208888, "comment_id": 79418086, "body": "I didn&#39;t know about PhantomData. I assume that it is used to add constraints for types, very interesting. I hoped that I will not need to use the Box&lt;&gt; workaround, as I want to avoid the allocation ): I added self contained code example, but it doesn&#39;t compile."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 549, "user_id": 4275937, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/49b88e050dd8cc0e4dbbe301ccecd40d?s=128&d=identicon&r=PG&f=1", "display_name": "real", "link": "https://stackoverflow.com/users/4275937/real"}, "edited": false, "score": 0, "creation_date": 1505432203, "post_id": 46208888, "comment_id": 79423202, "body": "You can&#39;t have a function return a <code>MockFutureTrait&lt;Item=&amp;mut [u8]&gt;</code>, because that&#39;s an unsized type. You need to return a concrete type that implements <code>MockFutureTrait</code>, but you can&#39;t specify a single concrete type that works for <i>every</i> lifetime."}, {"owner": {"reputation": 549, "user_id": 4275937, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/49b88e050dd8cc0e4dbbe301ccecd40d?s=128&d=identicon&r=PG&f=1", "display_name": "real", "link": "https://stackoverflow.com/users/4275937/real"}, "edited": false, "score": 0, "creation_date": 1505560747, "post_id": 46208888, "comment_id": 79470117, "body": "My attempts to use Boxed idea could be found on <a href=\"https://stackoverflow.com/questions/46253306/lifetime-problems-for-a-function-returning-a-boxed-trait-that-contains-a-referen\">this question</a>"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 1, "last_activity_date": 1505350439, "creation_date": 1505350439, "answer_id": 46208888, "question_id": 46202681, "link": "https://stackoverflow.com/questions/46202681/how-can-multiple-struct-fields-be-generics-that-use-the-same-higher-kinded-lifet/46208888#46208888", "title": "How can multiple struct fields be generics that use the same higher-kinded lifetime?", "body": "<p>What you're hoping to do isn't possible as of Rust 1.20. You need <a href=\"https://github.com/rust-lang/rfcs/blob/a7cd91048eea3d7ae83bec20446e62bad0c45381/text/1598-generic_associated_types.md\" rel=\"nofollow noreferrer\">generic associated types</a> in order to bind the correct lifetime on the type parameter <code>F</code>. The solution would look like this (obviously, I can't test it because generic associated types are not implemented yet):</p>\n\n<pre><code>use std::marker::PhantomData;\n\ntrait FragFutureFamily&lt;A&gt; {\n    type F&lt;'a&gt;: Future&lt;Item = (&amp;'a [u8], usize, A), Error = io::Error&gt;;\n}\n\nstruct FragMsgReceiver&lt;'a, A, FUNC: 'a, FF&gt;\nwhere\n    FF: FragFutureFamily&lt;A&gt;,\n    FUNC: for&lt;'r&gt; FnMut(&amp;'r [u8]) -&gt; FF::F&lt;'r&gt;,\n{\n    frag_state_machine: FragStateMachine,\n    recv_dgram: &amp;'a mut FUNC,\n    get_cur_instant: &amp;'a mut FnMut() -&gt; Instant,\n    _phantom_future_family: PhantomData&lt;FF&gt;,\n}\n\nstruct ReadingState&lt;'a, 'c, A, FUNC: 'a, F, FF&gt;\nwhere\n    F: Future&lt;Item = (&amp;'c mut [u8], usize, A), Error = io::Error&gt;,\n    FF: FragFutureFamily&lt;A&gt;,\n    FUNC: for&lt;'r&gt; FnMut(&amp;'r [u8]) -&gt; FF::F&lt;'r&gt;,\n{\n    frag_msg_receiver: FragMsgReceiver&lt;'a, A, FUNC, FF&gt;,\n    temp_buff: Vec&lt;u8&gt;,\n    res_buff: &amp;'c mut [u8],\n    opt_read_future: Option&lt;F&gt;,\n    _phantom_future_family: PhantomData&lt;FF&gt;,\n}\n</code></pre>\n\n<p>Note: I left the <code>F</code> type parameter on <code>ReadingState</code> because the type is slightly different from <code>FragFutureFamily::F</code>, though if you can make the types agree, you could change the type of <code>opt_read_future</code> to <code>Option&lt;FF::F&lt;'c&gt;&gt;</code>.</p>\n\n<hr>\n\n<p>As a workaround, you could use <code>Box&lt;Future&lt;...&gt;&gt;</code> instead of a type parameter for the <code>Future</code> type.</p>\n"}], "owner": {"reputation": 549, "user_id": 4275937, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/49b88e050dd8cc0e4dbbe301ccecd40d?s=128&d=identicon&r=PG&f=1", "display_name": "real", "link": "https://stackoverflow.com/users/4275937/real"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 561, "favorite_count": 0, "accepted_answer_id": 46208888, "answer_count": 1, "score": 0, "last_activity_date": 1505418418, "creation_date": 1505320375, "last_edit_date": 1505418418, "question_id": 46202681, "link": "https://stackoverflow.com/questions/46202681/how-can-multiple-struct-fields-be-generics-that-use-the-same-higher-kinded-lifet", "title": "How can multiple struct fields be generics that use the same higher-kinded lifetime?", "body": "<p>My struct <code>ReadingState</code> takes the function <code>recv_dgram</code> as argument in its <code>new()</code> method. <code>recv_dgram</code> takes as an argument a buffer with some lifetime <code>'r</code>, and returns a <code>Future</code> of a certain type. The <code>Item</code> of this future contains the buffer that was fed as an argument, with the same lifetime <code>'r</code>.</p>\n\n<p>This is how <code>ReadingState</code> looks like:</p>\n\n<pre><code>struct FragMsgReceiver&lt;'a, A, FUNC: 'a&gt;\nwhere\n    FUNC: for&lt;'r&gt; FnMut(&amp;'r [u8])\n        -&gt; Future&lt;Item = (&amp;'r [u8], usize, A), Error = io::Error&gt;,\n{\n    frag_state_machine: FragStateMachine,\n    recv_dgram: &amp;'a mut FUNC,\n    get_cur_instant: &amp;'a mut FnMut() -&gt; Instant,\n}\n\nstruct ReadingState&lt;'a, 'c, A, FUNC: 'a, F&gt;\nwhere\n    F: Future&lt;Item = (&amp;'c mut [u8], usize, A), Error = io::Error&gt;,\n    FUNC: for&lt;'r&gt; FnMut(&amp;'r [u8])\n        -&gt; Future&lt;Item = (&amp;'r [u8], usize, A), Error = io::Error&gt;,\n{\n    frag_msg_receiver: FragMsgReceiver&lt;'a, A, FUNC&gt;,\n    temp_buff: Vec&lt;u8&gt;,\n    res_buff: &amp;'c mut [u8],\n    opt_read_future: Option&lt;F&gt;,\n}\n</code></pre>\n\n<p>The return type of <code>FUNC</code> is not the same as <code>F</code> because they use different lifetimes.</p>\n\n<p>The structs by themselves can compile, but I can not use them correctly in the rest of my code. For example, this happens when I try to call <code>frag_msg_receiver.recv_dgram</code> and assign the result to the field <code>opt_read_future</code> of <code>ReadingState</code>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: match arms have incompatible types\n  --&gt; src/frag_msg_receiver.rs:80:30\n   |\n80 |               let mut fdgram = match mem::replace(&amp;mut reading_state.opt_read_future, None) {\n   |  ______________________________^\n81 | |                 Some(read_future) =&gt; read_future,\n82 | |                 None =&gt; (*reading_state.frag_msg_receiver.recv_dgram)(\n83 | |                     &amp;mut reading_state.temp_buff),\n84 | |             };\n   | |_____________^ expected type parameter, found trait frag_msg_receiver::futures::Future\n   |\n   = note: expected type `F`\n              found type `frag_msg_receiver::futures::Future&lt;Item=(&amp;[u8], usize, A), Error=std::io::Error&gt; + 'static`\n</code></pre>\n\n<p>A dream solution (this is not valid Rust code) will be something of the form:</p>\n\n<pre><code>struct ReadingState&lt;'a, 'c, A, FUNC: 'a, F&gt; \n    where for &lt;'r&gt; {\n        F: Future&lt;Item = (&amp;'r mut [u8], usize, A), Error = io::Error&gt;,\n        FUNC: FnMut(&amp;'r [u8]) -&gt; F,\n    }\n{\n    // ...\n}\n</code></pre>\n\n<p>I don't know how to achieve this with the existing syntax.</p>\n\n<p>Edit: I made the smallest possible self contained example I could, but it doesn't compile for possibly different reasons. I am including it here (<a href=\"https://play.rust-lang.org/?gist=949893b9b62025d2474d147d35b63475&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a>):</p>\n\n<pre><code>trait MockFutureTrait {\n    type Item;\n    fn get_item(self) -&gt; Self::Item;\n}\n\ntype FnTraitObject = FnMut(&amp;mut [u8]) -&gt; MockFutureTrait&lt;Item=&amp;mut [u8]&gt;;\n\nstruct MockFuture&lt;T&gt; {\n    item: T,\n}\n\nimpl&lt;T&gt; MockFutureTrait for MockFuture&lt;T&gt; {\n    type Item=T;\n    fn get_item(self) -&gt; Self::Item {\n        self.item\n    }\n}\n\nstruct FragMsgReceiver&lt;'a&gt; {\n    recv_dgram: &amp;'a mut FnTraitObject,\n}\n\nstruct RecvMsg&lt;'a,'c,F&gt;\n    where F: MockFutureTrait&lt;Item=&amp;'c mut [u8]&gt; {\n\n    frag_msg_receiver: FragMsgReceiver&lt;'a&gt;,\n    res_buff: &amp;'c mut [u8],\n    read_future: F,\n}\n\n\nfn main() {\n    let mut recv_dgram = |buf: &amp;mut [u8]| {\n        MockFuture {\n            item: buf,\n        }\n    };\n\n    let fmr = FragMsgReceiver {\n        recv_dgram: &amp;mut recv_dgram,\n    };\n}\n</code></pre>\n\n<p>The compilation error I get:</p>\n\n<pre><code>error[E0271]: type mismatch resolving `for&lt;'r&gt; &lt;[closure@src/main.rs:33:26: 37:6] as std::ops::FnOnce&lt;(&amp;'r mut [u8],)&gt;&gt;::Output == MockFutureTrait&lt;Item=&amp;'r mut [u8]&gt; + 'static`\n  --&gt; src/main.rs:40:21\n   |\n40 |         recv_dgram: &amp;mut recv_dgram,\n   |                     ^^^^^^^^^^^^^^^ expected struct `MockFuture`, found trait MockFutureTrait\n   |\n   = note: expected type `MockFuture&lt;&amp;mut [u8]&gt;`\n              found type `MockFutureTrait&lt;Item=&amp;mut [u8]&gt; + 'static`\n   = note: required for the cast to the object type `for&lt;'r&gt; std::ops::FnMut(&amp;'r mut [u8]) -&gt; MockFutureTrait&lt;Item=&amp;'r mut [u8]&gt; + 'static + 'static`\n\nerror: aborting due to previous error\n\nerror: Could not compile `noncompiling_lifetime_trait`.\n</code></pre>\n\n<p>I'm not sure that I know what I'm doing, and why the compile problems changed. You might have an idea.</p>\n"}, {"tags": ["multithreading", "rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1505315486, "post_id": 46200088, "comment_id": 79364890, "body": "Note: <code>CpuPool</code> is intended for intense CPU work, most notably because it blocks the thread for the whole duration, as such, using network connections during said work is not recommended."}, {"owner": {"reputation": 409, "user_id": 2970121, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/d0b21cede510b0bbf986847693a9e075?s=128&d=identicon&r=PG&f=1", "display_name": "njaard", "link": "https://stackoverflow.com/users/2970121/njaard"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1505318370, "post_id": 46200088, "comment_id": 79366995, "body": "I don&#39;t understand why it&#39;s a problem that it blocks the whole thread @MatthieuM."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1505322471, "post_id": 46200088, "comment_id": 79369407, "body": "It&#39;s a scalability issue if you have long-lived transactions: you&#39;ll need more threads. CpuPool is designed for CPU-bound tasks, using it for anything else might be suboptimal... though of course it might be good enough for you."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1505323339, "post_id": 46200088, "comment_id": 79369862, "body": "Why not just use an existing database connection pool library like <a href=\"https://crates.io/crates/r2d2\" rel=\"nofollow noreferrer\">r2d2</a>?"}, {"owner": {"reputation": 409, "user_id": 2970121, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/d0b21cede510b0bbf986847693a9e075?s=128&d=identicon&r=PG&f=1", "display_name": "njaard", "link": "https://stackoverflow.com/users/2970121/njaard"}, "edited": false, "score": 0, "creation_date": 1508692979, "post_id": 46200088, "comment_id": 80700998, "body": "I wrote a crate (<a href=\"https://crates.io/crates/scoped_stateful_threadpool\" rel=\"nofollow noreferrer\">crates.io/crates/scoped_stateful_threadpool</a>) for this, although it doesn&#39;t support futures."}], "answers": [{"comments": [{"owner": {"reputation": 409, "user_id": 2970121, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/d0b21cede510b0bbf986847693a9e075?s=128&d=identicon&r=PG&f=1", "display_name": "njaard", "link": "https://stackoverflow.com/users/2970121/njaard"}, "edited": false, "score": 0, "creation_date": 1505318323, "post_id": 46201157, "comment_id": 79366966, "body": "What crate is ConnectionPool in? This is also not an ideal solution, because there&#39;s no guarantee that one thread always gets the same connection. That&#39;s preferable behavior due to not requiring <code>Send</code> and having slightly better NUMA behavior."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 409, "user_id": 2970121, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/d0b21cede510b0bbf986847693a9e075?s=128&d=identicon&r=PG&f=1", "display_name": "njaard", "link": "https://stackoverflow.com/users/2970121/njaard"}, "edited": false, "score": 1, "creation_date": 1505322333, "post_id": 46201157, "comment_id": 79369320, "body": "@njaard: It&#39;s not a crate, you&#39;ll have to write it yourself. You are welcome to push in thread affinity if you think it matters, but honestly in a database connection the network part is so slow compared to cpu/memory that I would not even bother."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 0, "last_activity_date": 1505315763, "creation_date": 1505315763, "answer_id": 46201157, "question_id": 46200088, "link": "https://stackoverflow.com/questions/46200088/how-can-i-save-state-for-a-cpupool-worker-thread/46201157#46201157", "title": "How can I save state for a `CpuPool` worker thread?", "body": "<p><em>Disclaimer: there might be a better solution leveraging some <code>CpuPool</code> API, maybe...</em></p>\n\n<p>A simple solution would be to use a separate <code>ConnectionPool</code>, shared with <code>Arc</code>.</p>\n\n<p>Then, you simply hand over a reference to the <code>ConnectionPool</code> whenever you start a thread and ask them to acquire a connection from there.</p>\n\n<p>The pool itself will be in charge of:</p>\n\n<ul>\n<li>preparing new connections (performing the initialization work),</li>\n<li>recycling used connections so that further demands are met faster.</li>\n</ul>\n\n<p>There is a slight difficulty here if the connection parameters are changed (for example, specifying a different locale). I recommend that each client be handed a \"fresh\" connection, with all settings normalized to a known value.</p>\n\n<p>There is also a design choice for when (and on which thread) to perform the initialization and recycling work; I advise that you start with the simplest solution:</p>\n\n<ul>\n<li>initialization on demand,</li>\n<li>recycling immediately when handed over.</li>\n</ul>\n"}], "owner": {"reputation": 409, "user_id": 2970121, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/d0b21cede510b0bbf986847693a9e075?s=128&d=identicon&r=PG&f=1", "display_name": "njaard", "link": "https://stackoverflow.com/users/2970121/njaard"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 68, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1505315763, "creation_date": 1505312670, "last_edit_date": 1505313441, "question_id": 46200088, "link": "https://stackoverflow.com/questions/46200088/how-can-i-save-state-for-a-cpupool-worker-thread", "title": "How can I save state for a `CpuPool` worker thread?", "body": "<p>I'm creating a <code>futures_cpupool::CpuPool</code> where each thread needs to open database connections, a costly initialization. The state of these initializations need to persist between jobs because they take so long to set up. The database connections are necessary for the worker threads to complete their jobs.</p>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1505307112, "post_id": 46194930, "comment_id": 79358569, "body": "That&#39;s not a function; it&#39;s a closure. Is there a reason you need to have a reference to the trait object instead of just using a generic?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1505307669, "post_id": 46194930, "comment_id": 79358995, "body": "Drop the type specifier on the closure argument to allow inference to work, then specify that the value you are passing to the closure has the same lifetime as the result, then fix the <code>mut</code> qualifier. <a href=\"https://play.rust-lang.org/?gist=5650836c790a4394e853ebc76bb84148&amp;version=stable\" rel=\"nofollow noreferrer\">Completed example</a>."}, {"owner": {"reputation": 549, "user_id": 4275937, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/49b88e050dd8cc0e4dbbe301ccecd40d?s=128&d=identicon&r=PG&f=1", "display_name": "real", "link": "https://stackoverflow.com/users/4275937/real"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1505308268, "post_id": 46194930, "comment_id": 79359491, "body": "@Shepmaster: Thanks! There is still something I can&#39;t solve: I want to allow &#39;a to outlive &#39;b, as recv_dgram gets various buffers and their lifetime in my opinion should not be related to &#39;a. When I try to remove the &#39;b:&#39;a I get a compile error. <code>in type `&amp;&#39;a mut std::ops::FnMut(&amp;&#39;b mut [u8]) -&gt; &amp;&#39;b mut [u8] + &#39;a, reference has a longer lifetime than the data it references</code>. How can this be solved?"}, {"owner": {"reputation": 549, "user_id": 4275937, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/49b88e050dd8cc0e4dbbe301ccecd40d?s=128&d=identicon&r=PG&f=1", "display_name": "real", "link": "https://stackoverflow.com/users/4275937/real"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1505308891, "post_id": 46194930, "comment_id": 79359963, "body": "@Shepmaster: I appreciate the work you are doing by editing and marking duplicate, however I don&#39;t think that this question is a duplicate of the mentioned questions. I read those two before I posted my question here. red75prime &#39;s answer has some information about lifetimes that I couldn&#39;t find elsewhere."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1505310118, "post_id": 46194930, "comment_id": 79360928, "body": "Thank you for the kind words. However, I don&#39;t just mark questions as duplicates, I update the duplicates with any new knowledge whenever we get it. If you check them now, both have been enhanced. This avoids future users having to navigate to <i>N</i> different questions to get all the variations of the answer. Thus, I believe they are still duplicates; but you are welcome to vote to reopen."}], "answers": [{"comments": [{"owner": {"reputation": 549, "user_id": 4275937, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/49b88e050dd8cc0e4dbbe301ccecd40d?s=128&d=identicon&r=PG&f=1", "display_name": "real", "link": "https://stackoverflow.com/users/4275937/real"}, "edited": false, "score": 0, "creation_date": 1505310472, "post_id": 46198504, "comment_id": 79361210, "body": "red75prime and shepmaster, you saved my day!"}], "tags": [], "owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "is_accepted": true, "score": 1, "last_activity_date": 1505308722, "last_edit_date": 1505308722, "creation_date": 1505308215, "answer_id": 46198504, "question_id": 46194930, "link": "https://stackoverflow.com/questions/46194930/cannot-infer-a-lifetime-for-a-struct-containing-a-reference-to-a-closure/46198504#46198504", "title": "Cannot infer a lifetime for a struct containing a reference to a closure", "body": "<p>Let's start by restoring elided lifetime in your declaration</p>\n\n<pre><code>struct FragMsgReceiver&lt;'a, 'b: 'a&gt; {\n    recv_dgram: &amp;'a mut for&lt;'c&gt; FnMut(&amp;'c mut [u8]) -&gt; Result&lt;&amp;'b mut [u8], ()&gt;,\n}\n</code></pre>\n\n<p>This declaration means that <code>FragMsgReceiver</code> holds a mutable reference to a <code>FnMut</code> trait object which takes a mutable reference to a slice having <strong>any</strong> lifetime <code>'c</code> and returns a reference with lifetime <code>'b: 'a</code>.</p>\n\n<p>This is not what you need. You need an <code>FnMut</code> which returns a reference with the same lifetime as the lifetime of the input parameter. This can be written as:</p>\n\n<pre><code>type FnTraitObject = FnMut(&amp;mut [u8]) -&gt; Result&lt;&amp;mut [u8], ()&gt;;\n\nstruct FragMsgReceiver&lt;'a&gt; {\n    recv_dgram: &amp;'a mut FnTraitObject,\n}\n\nimpl&lt;'a&gt; FragMsgReceiver&lt;'a&gt; {\n    fn new(recv_dgram: &amp;'a mut FnTraitObject) -&gt; Self {\n        FragMsgReceiver { recv_dgram }\n    }\n}\n</code></pre>\n\n<p>Lifetime elision does the right thing here, but the compiler still complains: \"expected bound lifetime parameter, found concrete lifetime\", pointing at <code>FragMsgReceiver::new(&amp;mut recv_dgram)</code>.</p>\n\n<p>This error is caused by a limitation of Rust's type inference. We need to assist the inference by coercing the type of the closure as it was <a href=\"https://stackoverflow.com/a/31365625/2731452\">pointed out by DK.</a></p>\n\n<pre><code>fn constrain_handler&lt;F&gt;(f: F) -&gt; F\nwhere\n    F: FnMut(&amp;mut [u8]) -&gt; Result&lt;&amp;mut [u8], ()&gt;,\n{\n    f\n}\n\n// ...\n\nlet mut recv_dgram = constrain_handler(|buff| Ok(buff));\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=591256245e03b7885ade71dfce0012d4&amp;version=stable\" rel=\"nofollow noreferrer\">Complete code on the playground</a></p>\n\n<p>To clarify, <code>for&lt;'c&gt;</code> means that <code>'c</code> can be any lifetime and the lifetime is determined at a call site. For example, the pointer to the function <code>fn foo(_: &amp;u32) -&gt; &amp;u32</code> has the type <code>for&lt;'a&gt; fn(&amp;'a u32) -&gt; &amp;'a u32</code>.</p>\n"}], "owner": {"reputation": 549, "user_id": 4275937, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/49b88e050dd8cc0e4dbbe301ccecd40d?s=128&d=identicon&r=PG&f=1", "display_name": "real", "link": "https://stackoverflow.com/users/4275937/real"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 298, "favorite_count": 0, "closed_date": 1505307687, "accepted_answer_id": 46198504, "answer_count": 1, "score": 1, "last_activity_date": 1505568315, "creation_date": 1505298004, "last_edit_date": 1505568315, "question_id": 46194930, "link": "https://stackoverflow.com/questions/46194930/cannot-infer-a-lifetime-for-a-struct-containing-a-reference-to-a-closure", "closed_reason": "Duplicate", "title": "Cannot infer a lifetime for a struct containing a reference to a closure", "body": "<p>I am trying to make this simplified and self-contained version of my code compile:</p>\n\n<pre><code>struct FragMsgReceiver&lt;'a, 'b: 'a&gt; {\n    recv_dgram: &amp;'a mut FnMut(&amp;mut [u8]) -&gt; Result&lt;&amp;'b mut [u8], ()&gt;,\n}\n\nimpl&lt;'a, 'b&gt; FragMsgReceiver&lt;'a, 'b&gt; {\n    fn new(\n        recv_dgram: &amp;'a mut FnMut(&amp;mut [u8])\n            -&gt; Result&lt;&amp;'b mut [u8], ()&gt;\n    ) -&gt; Self {\n        FragMsgReceiver { recv_dgram }\n    }\n}\n\nfn main() {\n    let recv_dgram = |buff: &amp;mut [u8]| Ok(buff);\n    let fmr = FragMsgReceiver::new(&amp;mut recv_dgram);\n}\n</code></pre>\n\n<p>Here is the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n  --&gt; src/main.rs:15:43\n   |\n15 |     let recv_dgram = |buff: &amp;mut [u8]| Ok(buff);\n   |                                           ^^^^\n   |\nnote: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the body at 15:22...\n  --&gt; src/main.rs:15:22\n   |\n15 |     let recv_dgram = |buff: &amp;mut [u8]| Ok(buff);\n   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: ...so that expression is assignable (expected &amp;mut [u8], found &amp;mut [u8])\n  --&gt; src/main.rs:15:43\n   |\n15 |     let recv_dgram = |buff: &amp;mut [u8]| Ok(buff);\n   |                                           ^^^^\nnote: but, the lifetime must be valid for the block suffix following statement 1 at 16:53...\n  --&gt; src/main.rs:16:53\n   |\n16 |       let fmr = FragMsgReceiver::new(&amp;mut recv_dgram);\n   |  _____________________________________________________^\n17 | | }\n   | |_^\nnote: ...so that variable is valid at time of its declaration\n  --&gt; src/main.rs:16:9\n   |\n16 |     let fmr = FragMsgReceiver::new(&amp;mut recv_dgram);\n   |         ^^^\n</code></pre>\n\n<p>From what I understand from the error message, the compiler doesn't understand that the <code>buff</code> reference (argument of <code>recv_dgram</code>) can actually live longer than the inner body of <code>recv_dgram</code>. I could be wrong though.</p>\n\n<p>To give some context, I'm trying to create a struct that wraps a Rust Tokio UDP socket. To do this, I take a reference to a function <code>recv_dgram</code>. In my original code this function takes a buffer as argument, and returns a <code>Future</code>. When the <code>Future</code> is ready, the buffer will be filled. The <code>Future</code>'s item also contains the address of sender and the amount of bytes that were written into the buffer.</p>\n"}, {"tags": ["rust", "serde"], "comments": [{"owner": {"reputation": 838, "user_id": 3613212, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/NfaGR.png?s=128&g=1", "display_name": "Gr&#233;gory OBANOS", "link": "https://stackoverflow.com/users/3613212/gr%c3%a9gory-obanos"}, "edited": false, "score": 0, "creation_date": 1505259453, "post_id": 46186345, "comment_id": 79336257, "body": "I think you have to implement a custom serializer, in which you can manipulate the output. In the same way you receive the name of the struct has a parameter. Check <a href=\"https://serde.rs/impl-serializer.html\" rel=\"nofollow noreferrer\">serde.rs/impl-serializer.html</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1505306734, "post_id": 46186345, "comment_id": 79358291, "body": "<a href=\"https://meta.stackexchange.com/q/39223/2818290\">One question per post, please</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1505306977, "post_id": 46186345, "comment_id": 79358479, "body": "You will need to implement your own <code>serde::Serializer</code>; basically from scratch."}, {"owner": {"reputation": 69, "user_id": 8599892, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/86cffd31d8726302f72433191e428eab?s=128&d=identicon&r=PG&f=1", "display_name": "user287749", "link": "https://stackoverflow.com/users/8599892/user287749"}, "edited": false, "score": 0, "creation_date": 1505309214, "post_id": 46186345, "comment_id": 79360209, "body": "Sure, I need to implement a serializer. That&#39;s what I planned, starting from bincode as a base. But all serializers I&#39;ve seen (I scanned most) are different in that they do Not need to fix up a few bytes, using data serialized after it, so I don&#39;t know serde will do the job. Length data in particular is variable length encoded. A TLV is a tree structure and each node includes a length that depends on the length of its children, summed."}], "owner": {"reputation": 69, "user_id": 8599892, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/86cffd31d8726302f72433191e428eab?s=128&d=identicon&r=PG&f=1", "display_name": "user287749", "link": "https://stackoverflow.com/users/8599892/user287749"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 636, "favorite_count": 1, "answer_count": 0, "score": 6, "last_activity_date": 1505309605, "creation_date": 1505256207, "last_edit_date": 1505309605, "question_id": 46186345, "link": "https://stackoverflow.com/questions/46186345/how-to-do-type-length-value-tlv-serialization-with-serde", "title": "How to do Type-Length-Value (TLV) serialization with Serde?", "body": "<p>I need to serialize a class of structs according to the <a href=\"https://en.wikipedia.org/wiki/Type-length-value\" rel=\"noreferrer\">TLV format</a> with <a href=\"https://serde.rs\" rel=\"noreferrer\">Serde</a>. TLV can be nested in a tree format. </p>\n\n<p>The fields of these structs are serialized normally, much like <code>bincode</code> does, but before the field data I must include a tag (to be associated, ideally) and the length, in bytes, of the field data.</p>\n\n<p>Ideally, Serde would recognize the structs that need this kind of serialization, probably by having them implement a <code>TLV</code> trait. This part is optional, as I can also explicitly annotate each of these structs. </p>\n\n<p>So this question breaks down in 3 parts, in order of priority:</p>\n\n<ol>\n<li><p>How do I get the length data (from Serde?) before the serialization of that data has been performed?</p></li>\n<li><p>How do I associate tags with structs (though I guess I could also include tags inside the structs..)?</p></li>\n<li><p>How do I make Serde recognize a class of structs and apply custom serialization?</p></li>\n</ol>\n\n<p>Note that 1) is the (core) question here. I will post 2) and 3) as individual questions if 1) can be solved with Serde.</p>\n"}, {"tags": ["macros", "rust"], "answers": [{"comments": [{"owner": {"reputation": 65, "user_id": 2920746, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0ca5aa1bb517d73cac0a88b95eee8a89?s=128&d=identicon&r=PG", "display_name": "Leonard7E", "link": "https://stackoverflow.com/users/2920746/leonard7e"}, "edited": false, "score": 0, "creation_date": 1505256382, "post_id": 46186149, "comment_id": 79335533, "body": "Thank you for your answer. This works! Your answer helped me to understand token streams for rust macros. Sadly, I cannot +1 your answer yet."}], "tags": [], "owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "is_accepted": true, "score": 8, "last_activity_date": 1505254836, "creation_date": 1505254836, "answer_id": 46186149, "question_id": 46185922, "link": "https://stackoverflow.com/questions/46185922/is-it-possible-to-define-a-macro-which-handles-grammatical-cases/46186149#46186149", "title": "Is it possible to define a macro which handles grammatical cases?", "body": "<p>When you're working with a token stream, it's easier to leave it to recursion to process your pieces in cases like this. You could for instance do:</p>\n\n<pre><code>macro_rules! callme {\n    ($A:ident ($B:ident) =&gt; { $E:expr }; $($rest:tt)*) =&gt; {\n        println!(\"{:?} {:?} {:?}\", $A, $B, $E);\n\n        callme!($($rest)*);\n    };\n    ($A:ident ($B:ident) ~ $Q:ident; $($rest:tt)*) =&gt; {\n        println!(\"We got {:?} . {:?} . {:?}\", $A, $B, $Q);\n\n        callme!($($rest)*);\n    };\n    () =&gt; {};\n}\n\nfn main() {\n    let a=4;\n    let b=5;\n    let c = \"C\";\n    callme!(\n        a (b) =&gt; { a+b } ;\n        a (b) =&gt; { a*b } ;\n        a (b) ~ c;\n    );\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=6576bbf7f814c8f7741c831b3d1f1614&amp;version=stable\" rel=\"noreferrer\">On Playground</a>)</p>\n\n<p>Note that after each set of tokens, you gather all the remaining tokens and leave them to be handled by a later call to <code>callme!</code>, with a final <code>() =&gt; {}</code> to indicate a completion condition.</p>\n"}], "owner": {"reputation": 65, "user_id": 2920746, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0ca5aa1bb517d73cac0a88b95eee8a89?s=128&d=identicon&r=PG", "display_name": "Leonard7E", "link": "https://stackoverflow.com/users/2920746/leonard7e"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 69, "favorite_count": 0, "accepted_answer_id": 46186149, "answer_count": 1, "score": 4, "last_activity_date": 1505307272, "creation_date": 1505253452, "last_edit_date": 1505307272, "question_id": 46185922, "link": "https://stackoverflow.com/questions/46185922/is-it-possible-to-define-a-macro-which-handles-grammatical-cases", "title": "Is it possible to define a macro which handles grammatical cases?", "body": "<p>I'd like to define a macro <code>callme</code> which can be applied like this.</p>\n\n<pre><code>fn main() {\n    let a=4;\n    let b=5;\n    callme!(\n        a (b) =&gt; { a+b } ;\n        a (b) =&gt; { a*b } ;\n        a (b) ~ C\n    );\n}\n</code></pre>\n\n<p>I do not know how to get a working macro definition for <code>callme</code>. Currently I'm trying something like this:</p>\n\n<pre><code>macro_rules! callme {\n    (\n        $($A: ident ($B: ident) =&gt; {$E: expr}) ; *\n    ) =&gt; (\n        $(\n            println!(\"{:?} {:?} {:?}\", $A, $B, $E);\n        ) *\n    );\n    (\n        $($A: ident ($B: ident) ~ $Q: ident) ; *\n    ) =&gt; (\n        $(\n            println!(\"We got {:?} . {:?} . {:?}\", $A, $B, $Q);\n        ) *\n    );\n}\n</code></pre>\n\n<p>This does not work, because I cannot use both syntax cases at once. </p>\n"}, {"tags": ["copy", "rust", "move"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 4, "creation_date": 1505285851, "post_id": 46185453, "comment_id": 79343734, "body": "<a href=\"https://doc.rust-lang.org/stable/std/marker/trait.Copy.html#when-should-my-type-be-copy\" rel=\"nofollow noreferrer\">When should my type be Copy?</a>"}], "answers": [{"comments": [{"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 1, "creation_date": 1505263554, "post_id": 46186688, "comment_id": 79337102, "body": "It&#39;s probably worth mentioning that even if you know a type could implement <code>Copy</code>, you might elect to not do so in order to retain &quot;move&quot; semantics."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 1, "creation_date": 1505310371, "post_id": 46186688, "comment_id": 79361130, "body": "Another thing to note is that non-<code>Copy</code> is the <i>safe</i> default.  If you&#39;re implementing your own version of <code>Box</code> by wrapping a raw pointer, such a type <i>would</i> be eligible for any sort of implicit <code>Copy</code> implementation, which means the programmer would have to actively consider the correctness of <code>Copy</code> on every type, and remember to disable it where required.  With the current design, if the programmer forgets to consider <code>Copy</code>... nothing happens and nothing breaks."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 9, "last_activity_date": 1505306238, "last_edit_date": 1505306238, "creation_date": 1505259058, "answer_id": 46186688, "question_id": 46185453, "link": "https://stackoverflow.com/questions/46185453/should-the-copy-trait-always-be-implemented-if-possible/46186688#46186688", "title": "Should the Copy trait always be implemented if possible?", "body": "<blockquote>\n  <p>why is [<code>Copy</code>] not an auto-trait like <code>Sync</code> and <code>Send</code> for those types which can implement it and have opt-out semantics instead of opt-in?</p>\n</blockquote>\n\n<p><code>Copy</code> used to be automatically implemented by types that could implement it. This behavior was changed <a href=\"https://github.com/rust-lang/rust/commit/096a28607fb80c91e6e2ca64d9ef44c4e550e96c\" rel=\"noreferrer\">in December 2014</a>, not too long before Rust 1.0.</p>\n\n<blockquote>\n  <p>Should the <code>Copy</code> trait always be implemented if possible?</p>\n</blockquote>\n\n<p>Not necessarily. When developing a library, the choice to implement <code>Copy</code> or not on a type has an impact on forward compatibility. Removing a <code>Copy</code> implementation on a type is a breaking change (users of that type may rely on the type being copied instead of moved), and as such would impose a major version bump on the library in order to respect <a href=\"http://semver.org/\" rel=\"noreferrer\">semantic versioning</a>. In particular, if a type is able to implement <code>Copy</code> now but you think it's possible that the type may evolve such that it could no longer implement <code>Copy</code>, you should play it safe and not implement <code>Copy</code> on that type.</p>\n\n<p>Another reason for not implementing <code>Copy</code> is, as you mentioned, large types. It may be useful to implement only <code>Clone</code> for such types, as usually \"<code>Clone</code> but not <code>Copy</code>\" indicates that cloning the value is not \"cheap\". However, even if a type is not <code>Copy</code>, one could still cause a large memory copy operation by merely moving the value (though if you're lucky, the compiler might optimize it away).</p>\n\n<blockquote>\n  <p>Can implementing <code>Copy</code> be detrimental to performance if the size of the type is \"large\"?</p>\n</blockquote>\n\n<p>Not if you never perform a copy on the type! Keep in mind that the only difference between a <em>move</em> and a <em>copy</em> is that a move makes the source unusable (i.e. the compiler will raise an error if you try to use a value after it was moved), while a copy doesn't; both operations are implemented as a shallow memory copy.</p>\n"}], "owner": {"reputation": 2204, "user_id": 1063961, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/s9gRK.png?s=128&g=1", "display_name": "Centril", "link": "https://stackoverflow.com/users/1063961/centril"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 457, "favorite_count": 0, "accepted_answer_id": 46186688, "answer_count": 1, "score": 7, "last_activity_date": 1505306238, "creation_date": 1505251048, "last_edit_date": 1505306207, "question_id": 46185453, "link": "https://stackoverflow.com/questions/46185453/should-the-copy-trait-always-be-implemented-if-possible", "title": "Should the Copy trait always be implemented if possible?", "body": "<p>You can implement the <code>Copy</code> trait to give the type copy-semantics instead of move-semantics. This can only be done if all its constituent elements (each factor of a product type, or each factor of each variant of a sum-type) are also <code>Copy</code>.</p>\n\n<p>This allows you to also make rather large types <code>Copy</code>. Can implementing <code>Copy</code> be detrimental to performance if the size of the type is \"large\"?</p>\n\n<p>If <code>Copy</code> should always be implemented, why is it not an auto-trait like <code>Sync</code> and <code>Send</code> for those types which can implement it and have opt-out semantics instead of opt-in?</p>\n"}, {"tags": ["serialization", "struct", "rust"], "comments": [{"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 5, "creation_date": 1505196038, "post_id": 46167642, "comment_id": 79299794, "body": "You can implement different serialization for wrapper <code>struct TransactionContentBase58(TransactionContent);</code>. Will it solve your problem?"}], "answers": [{"comments": [{"owner": {"reputation": 694, "user_id": 5179678, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/HDDwl.jpg?s=128&g=1", "display_name": "mgul", "link": "https://stackoverflow.com/users/5179678/mgul"}, "edited": false, "score": 1, "creation_date": 1505260888, "post_id": 46176983, "comment_id": 79336579, "body": "I see. Elegant! Thank you for your answer."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1603120730, "last_edit_date": 1603120730, "creation_date": 1505220914, "answer_id": 46176983, "question_id": 46167642, "link": "https://stackoverflow.com/questions/46167642/can-i-implement-the-same-trait-multiple-times-in-different-ways-for-a-single-str/46176983#46176983", "title": "Can I implement the same trait multiple times in different ways for a single struct?", "body": "<p>No, you cannot implement the same trait multiple times in multiple ways for a single type.</p>\n<p>As <a href=\"https://stackoverflow.com/questions/46167642/implementing-multiple-traits-at-the-same-time-for-a-struct#comment79299794_46167642\">mentioned in a comment</a>, you can create a <em>newtype</em> that wraps the full data and implement the required traits on that:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>use serde::{ser::SerializeStruct, Serialize, Serializer}; // 1.0.117\nuse serde_json; // 1.0.59\n\n#[derive(Debug, Serialize)]\nstruct Real {\n    data: Vec&lt;u8&gt;,\n}\n\nstruct AsJson&lt;'a&gt;(&amp;'a Real);\n\nimpl&lt;'a&gt; Serialize for AsJson&lt;'a&gt; {\n    fn serialize&lt;S&gt;(&amp;self, serializer: S) -&gt; Result&lt;S::Ok, S::Error&gt;\n    where\n        S: Serializer,\n    {\n        let mut state = serializer.serialize_struct(&quot;Thing&quot;, 1)?;\n        state.serialize_field(&quot;data&quot;, b&quot;this is some data&quot;)?;\n        state.end()\n    }\n}\n\nfn main() {\n    let r = Real {\n        data: vec![1, 2, 3, 4],\n    };\n    println!(&quot;{:?}&quot;, serde_json::to_string(&amp;r));\n    println!(&quot;{:?}&quot;, serde_json::to_string(&amp;AsJson(&amp;r)));\n}\n</code></pre>\n<h1>If you control the trait</h1>\n<p>You could add a generic parameter to the trait and implement it multiple times for the same type:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>trait Example&lt;T&gt; {}\n\nstruct Style1;\nstruct Style2;\n\nimpl Example&lt;Style1&gt; for i32 {}\nimpl Example&lt;Style2&gt; for i32 {}\n</code></pre>\n<p>This isn't without downsides though.</p>\n<p>See also:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/32059370/155423\">When is it appropriate to use an associated type versus a generic type?</a></li>\n</ul>\n"}], "owner": {"reputation": 694, "user_id": 5179678, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/HDDwl.jpg?s=128&g=1", "display_name": "mgul", "link": "https://stackoverflow.com/users/5179678/mgul"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 811, "favorite_count": 0, "accepted_answer_id": 46176983, "answer_count": 1, "score": 4, "last_activity_date": 1603120730, "creation_date": 1505188406, "last_edit_date": 1505220364, "question_id": 46167642, "link": "https://stackoverflow.com/questions/46167642/can-i-implement-the-same-trait-multiple-times-in-different-ways-for-a-single-str", "title": "Can I implement the same trait multiple times in different ways for a single struct?", "body": "<p>I'd like to serialize a struct in two different ways depending of the situation but I'm facing a problem: with my current knowledge I can only serialize the struct in one way.</p>\n\n<p>Here is my code with <code>#[derive(Serialize)]</code> (auto derive)</p>\n\n<pre><code>#[derive(Serialize, Deserialize, PartialEq, Debug)]\nstruct TransactionContent {\n    sender_addr: Vec&lt;u8&gt;,\n    sender_pubkey: Vec&lt;u8&gt;,\n    receiver_addr: Vec&lt;u8&gt;,\n    amount: u32,\n    timestamp: i64\n}\n</code></pre>\n\n<p>I'm using <a href=\"https://docs.rs/bincode/1.0.0-alpha7/bincode/fn.serialize.html\" rel=\"nofollow noreferrer\"><code>bincode::serialize</code></a> to serialize my struct and make it a <code>Vec&lt;u8&gt;</code> and I <strong>also</strong> want to store that struct in a JSON file. When serializing to JSON, I'd like to serialize it in my own way, like returning a base58 string for the <code>Vec&lt;u8&gt;</code> fields.</p>\n\n<p>This is my own implementation:</p>\n\n<pre><code>impl Serialize for TransactionContent {\n    fn serialize&lt;S&gt;(&amp;self, serializer: S) -&gt; Result&lt;S::Ok, S::Error&gt;\n        where S: Serializer\n    {\n        let mut state = serializer.serialize_struct(\"TransactionContent\", 5)?;\n        state.serialize_field(\"sender_addr\", &amp;self.sender_addr.to_base58())?;\n        state.serialize_field(\"sender_pubkey\", &amp;self.sender_pubkey.to_base58())?;\n        state.serialize_field(\"receiver_addr\", &amp;self.receiver_addr.to_base58())?;\n        state.serialize_field(\"amount\", &amp;self.amount)?;\n        state.serialize_field(\"timestamp\", &amp;self.timestamp)?;\n        state.end()\n    }\n}\n</code></pre>\n\n<p>I can't use the above code simultaneously. If I use the auto derive, the second <code>Impl</code> isn't possible. If I use the second one, the <code>bincode::serialize</code> function will work but not as I want it to (I want to use <code>Vec&lt;u8&gt;</code> for it)</p>\n\n<p>Is there a way that I could use both <code>Impl</code> at the same time? Something like a conditional <code>Impl</code> for example?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 145, "user_id": 4983930, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/e2d50ab284fecc7f6b2ba41bb6a522ec?s=128&d=identicon&r=PG&f=1", "display_name": "rytone", "link": "https://stackoverflow.com/users/4983930/rytone"}, "edited": false, "score": 1, "creation_date": 1505251173, "post_id": 46166770, "comment_id": 79333787, "body": "Unfortunately, this solution will not work with my situation. I need to be able to return values that aren&#39;t borrows too. This is really just a stripped down form of the <code>Pipeline</code> trait of the project I am working <a href=\"https://gitlab.com/rytone/resonant\" rel=\"nofollow noreferrer\">here</a>. (<code>Pipeline</code> is in src/pipeline/mod.rs) After looking a bit further, it looks like <a href=\"https://github.com/rust-lang/rust/issues/44265\" rel=\"nofollow noreferrer\">ATC</a> will solve my problem, but there hasn&#39;t been any work done on implementing it yet."}], "tags": [], "owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "is_accepted": false, "score": 6, "last_activity_date": 1505221093, "last_edit_date": 1505221093, "creation_date": 1505181525, "answer_id": 46166770, "question_id": 46166311, "link": "https://stackoverflow.com/questions/46166311/using-a-borrow-as-an-associated-trait-type/46166770#46166770", "title": "Using a borrow as an associated trait type", "body": "<p>Taking inspiration from the <a href=\"https://doc.rust-lang.org/std/ops/trait.Deref.html\" rel=\"nofollow noreferrer\"><code>Deref</code> trait</a>, you can remove the reference from the associated type and instead just note in the trait that you want to return a reference to the associated type:</p>\n\n<pre><code>trait MutateOut {\n    type Out;\n    fn mut_out(&amp;mut self) -&gt; &amp;Self::Out;\n}\n\nimpl MutateOut for Test {\n    type Out = String;\n\n    fn mut_out(&amp;mut self) -&gt; &amp;Self::Out {\n        self.val = String::from(\"something\");\n        &amp;self.val\n    }\n}\n</code></pre>\n\n<p>Here <a href=\"http://play.integer32.com/?gist=5ed850c774c65ef45281e4fd74940b0e&amp;version=stable\" rel=\"nofollow noreferrer\">it is in the playground</a>. Given that your function name was <code>mut_out</code>, if a mutable reference is what you were after, <a href=\"http://play.integer32.com/?gist=57fe960bbb476bc6cf4af6a7c95a663c&amp;version=stable\" rel=\"nofollow noreferrer\">here is a playground example with that as well</a>.</p>\n"}], "owner": {"reputation": 145, "user_id": 4983930, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/e2d50ab284fecc7f6b2ba41bb6a522ec?s=128&d=identicon&r=PG&f=1", "display_name": "rytone", "link": "https://stackoverflow.com/users/4983930/rytone"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 75, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1505221093, "creation_date": 1505177666, "last_edit_date": 1505221046, "question_id": 46166311, "link": "https://stackoverflow.com/questions/46166311/using-a-borrow-as-an-associated-trait-type", "title": "Using a borrow as an associated trait type", "body": "<p>This code works:</p>\n\n<pre><code>struct Test {\n    val: String,\n}\n\nimpl Test {\n    fn mut_out(&amp;mut self) -&gt; &amp;String {\n        self.val = String::from(\"something\");\n        &amp;self.val\n    }\n}\n</code></pre>\n\n<p>However, a more generic implementation does not work:</p>\n\n<pre><code>struct Test {\n    val: String,\n}\n\ntrait MutateOut {\n    type Out;\n    fn mut_out(&amp;mut self) -&gt; Self::Out;\n}\n\nimpl MutateOut for Test {\n    type Out = &amp;String;\n\n    fn mut_out(&amp;mut self) -&gt; Self::Out {\n        self.val = String::from(\"something\");\n        &amp;self.val\n    }\n}\n</code></pre>\n\n<p>The compiler cannot infer a lifetime for the string borrow:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0106]: missing lifetime specifier\n  --&gt; src/main.rs:13:16\n   |\n11 |     type Out = &amp;String;\n   |                ^ expected lifetime parameter\n</code></pre>\n\n<p>I cannot figure out a way to explicitly state the lifetime of the borrow, as it depends on the function itself.</p>\n"}, {"tags": ["scala", "rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1505148404, "post_id": 46160524, "comment_id": 79283233, "body": "Please produce a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>, you can use the Rust Playground to do so. You may also want to search your error message on Google, it&#39;s already appeared a lot of times on stackoverflow."}, {"owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "edited": false, "score": 1, "creation_date": 1505149207, "post_id": 46160524, "comment_id": 79283683, "body": "Currently, your definition of <code>Injection</code> contains four <b>static functions</b>. If you want to define methods, you need to specify the <code>self</code> parameter. I would recommend (re-)reading the chapter on method syntax: <a href=\"https://doc.rust-lang.org/book/second-edition/ch05-03-method-syntax.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/book/second-edition/&hellip;</a>"}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 2, "creation_date": 1505216030, "post_id": 46160524, "comment_id": 79312713, "body": "Generally, you won&#39;t have an easy time trying to directly translate Scala to Rust. It would be much easier to start by explaining what you are trying to achieve."}], "answers": [{"tags": [], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "is_accepted": true, "score": 0, "last_activity_date": 1505654876, "last_edit_date": 1505654876, "creation_date": 1505638409, "answer_id": 46262287, "question_id": 46160524, "link": "https://stackoverflow.com/questions/46160524/how-to-convert-a-scala-anonymous-trait-implementation-to-rust/46262287#46262287", "title": "How to convert a Scala anonymous trait implementation to Rust?", "body": "<p>In Rust, traits only describe behavior, not data. The compiler tells you your trait is not object-safe because you want to return anything that implements the trait, and that 'anything' has no single canonical known size at compile time.</p>\n\n<p>You can <code>Box</code> your values to put them on the heap, or use references (which will require some scary lifetime juggling and be quite brittle, but avoid the allocation). You will also need to return a concrete type from <code>map</code> and <code>contraMap</code>. Look how Rust's <a href=\"https://doc.rust-lang.org/src/core/iter/iterator.rs.html#479\" rel=\"nofollow noreferrer\"><code>Iterator</code></a> trait does it: It returns a <code>Map</code> which is generic over the original iterator and the function type it maps, wraps both and implements <code>Iterator</code>.  </p>\n"}], "owner": {"reputation": 1237, "user_id": 472492, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/c7a48c299355e19152260e9be12db6aa?s=128&d=identicon&r=PG", "display_name": "Mansur Ashraf", "link": "https://stackoverflow.com/users/472492/mansur-ashraf"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 224, "favorite_count": 0, "accepted_answer_id": 46262287, "answer_count": 1, "score": 0, "last_activity_date": 1505654876, "creation_date": 1505148043, "last_edit_date": 1505154320, "question_id": 46160524, "link": "https://stackoverflow.com/questions/46160524/how-to-convert-a-scala-anonymous-trait-implementation-to-rust", "title": "How to convert a Scala anonymous trait implementation to Rust?", "body": "<p>I'm having difficulty converting this Scala trait to Rust</p>\n\n<pre class=\"lang-scala prettyprint-override\"><code>trait Inject[A, B] {\n  self =&gt;\n\n  def inject(input: A): B\n\n  def project(input: B): Try[A]\n\n  def contraMap[AA](inj: Inject[AA, A]): Inject[AA, B] = new Inject[AA, B] {\n    override def inject(input: AA) = self.inject(inj.inject(input))\n\n    override def project(input: B) = self.project(input).flatMap(i =&gt; inj.project(i))\n  }\n\n  def map[BB](inj: Inject[B, BB]): Inject[A, BB] = new Inject[A, BB] {\n    override def inject(input: A) = inj.inject(self.inject(input))\n\n    override def project(input: BB) = inj.project(input).flatMap(i =&gt; self.project(i))\n  }\n\n}\n</code></pre>\n\n<p>Here is my Rust equivalent </p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub trait Injection&lt;A, B&gt; {\n    fn inject(input: A) -&gt; B;\n    fn project(input: B) -&gt; Result&lt;A, InjectionError&gt;;\n    fn contraMap&lt;AA&gt;(input: Injection&lt;AA, A&gt;) -&gt; Injection&lt;AA, B&gt;;\n    fn map&lt;BB&gt;(input: Injection&lt;B, BB&gt;) -&gt; Injection&lt;A, BB&gt;;\n}\n\npub struct InjectionError {\n    msg: String,\n}\n</code></pre>\n\n<p>I am getting:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0038]: the trait `Injection` cannot be made into an object\n --&gt; src/main.rs:4:5\n  |\n4 |     fn contraMap&lt;AA&gt;(input: Injection&lt;AA, A&gt;) -&gt; Injection&lt;AA, B&gt;;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Injection` cannot be made into an object\n  |\n  = note: method `inject` has no receiver\n  = note: method `project` has no receiver\n  = note: method `contraMap` has no receiver\n  = note: method `map` has no receiver\n</code></pre>\n\n<p>If I add a <code>self</code> reference, I still get the same error:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub trait Injection&lt;A, B&gt; {\n    fn inject(&amp;self, input: A) -&gt; B;\n    fn project(&amp;self, input: B) -&gt; Result&lt;A, InjectionError&gt;;\n    fn contraMap&lt;AA&gt;(&amp;self, input: Injection&lt;AA, A&gt;) -&gt; Injection&lt;AA, B&gt;;\n    fn map&lt;BB&gt;(&amp;self, input: Injection&lt;B, BB&gt;) -&gt; Injection&lt;A, BB&gt;;\n}\n\npub struct InjectionError {\n    msg: String,\n}\n</code></pre>\n\n<p>I am not sure how I can instantiate an anonymous <code>Injection</code> like I am doing in Scala. What would be the idiomatic way of converting this Scala trait to Rust?</p>\n"}, {"tags": ["rust", "borrowing"], "answers": [{"comments": [{"owner": {"reputation": 189, "user_id": 3602741, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/afc10da053cd138df566ee1b86b4f8eb?s=128&d=identicon&r=PG&f=1", "display_name": "Kun", "link": "https://stackoverflow.com/users/3602741/kun"}, "edited": false, "score": 0, "creation_date": 1568666386, "post_id": 46157735, "comment_id": 102339246, "body": "Is there any official documentation or tutorial stating that assigning to a variable implicitly requires a mutable reference?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 189, "user_id": 3602741, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/afc10da053cd138df566ee1b86b4f8eb?s=128&d=identicon&r=PG&f=1", "display_name": "Kun", "link": "https://stackoverflow.com/users/3602741/kun"}, "edited": false, "score": 0, "creation_date": 1568666901, "post_id": 46157735, "comment_id": 102339452, "body": "@Kun I&#39;ve clarified the wording some; it&#39;s really the <b>re</b>assignment, which is hopefully more obviously a mutation of a value. Otherwise, not that I&#39;m aware of. In general, many people find it self-evident."}, {"owner": {"reputation": 189, "user_id": 3602741, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/afc10da053cd138df566ee1b86b4f8eb?s=128&d=identicon&r=PG&f=1", "display_name": "Kun", "link": "https://stackoverflow.com/users/3602741/kun"}, "edited": false, "score": 0, "creation_date": 1568700599, "post_id": 46157735, "comment_id": 102346827, "body": "Thx! I think it makes sense to disallow mutating/reassigning the owner of a borrowed variable (mutably or immutably borrowed), just wish it were better documented in the rust book."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 5, "last_activity_date": 1568666735, "last_edit_date": 1568666735, "creation_date": 1505138983, "answer_id": 46157735, "question_id": 46157422, "link": "https://stackoverflow.com/questions/46157422/how-does-assigning-to-a-borrowed-variable-violate-the-rules-of-references/46157735#46157735", "title": "How does assigning to a borrowed variable violate the rules of references?", "body": "<p><a href=\"https://doc.rust-lang.org/stable/book/\" rel=\"nofollow noreferrer\"><em>The Rust Programming Language</em></a> defines <a href=\"https://doc.rust-lang.org/stable/book/ch04-02-references-and-borrowing.html#the-rules-of-references\" rel=\"nofollow noreferrer\">the rules of references</a>:</p>\n\n<blockquote>\n  <ul>\n  <li>At any given time, you can have either one mutable reference or any number of immutable references.</li>\n  <li>References must always be valid.</li>\n  </ul>\n</blockquote>\n\n<p>Reassigning a variable implicitly requires a mutable reference:</p>\n\n<pre><code>fn main() {\n    let mut x = 33;\n    let link = &amp;x;\n    x = 22;\n    *(&amp;mut x) = 22; // Basically the same thing\n}\n</code></pre>\n\n<p>Importantly, reassigning a variable <em>mutates</em> the variable, which would cause the value of the <strong>immutable</strong> reference <code>link</code> to change, which is disallowed.</p>\n\n<p>Note that the initial assignment of the variable does <strong>not</strong> require the variable to be mutable:</p>\n\n<pre><code>fn main() {\n    let x;\n    // Some other code\n    x = 42;\n}\n</code></pre>\n"}], "owner": {"reputation": 21, "user_id": 5435391, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-l1M79Z5ZKT4/AAAAAAAAAAI/AAAAAAAAAQ8/TUE3Kn-0-ho/photo.jpg?sz=128", "display_name": "\u0421\u0435\u0440\u0433\u0435\u0439 \u041b\u044e\u0431\u0438\u043c\u043e\u0432", "link": "https://stackoverflow.com/users/5435391/%d0%a1%d0%b5%d1%80%d0%b3%d0%b5%d0%b9-%d0%9b%d1%8e%d0%b1%d0%b8%d0%bc%d0%be%d0%b2"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1053, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1568666735, "creation_date": 1505138044, "last_edit_date": 1505138699, "question_id": 46157422, "link": "https://stackoverflow.com/questions/46157422/how-does-assigning-to-a-borrowed-variable-violate-the-rules-of-references", "title": "How does assigning to a borrowed variable violate the rules of references?", "body": "<p>I have this code:        </p>\n\n<pre><code>struct Foo&lt;'a&gt; {\n    link: &amp;'a i32,\n}\n\nfn main() {\n    let mut x = 33;\n    println!(\"x:{}\", x);\n    let ff = Foo { link: &amp;x };\n    x = 22;\n}\n</code></pre>\n\n<p>Which generates this compiler error: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0506]: cannot assign to `x` because it is borrowed\n --&gt; src/main.rs:9:5\n  |\n8 |     let ff = Foo { link: &amp;x };\n  |                           - borrow of `x` occurs here\n9 |     x = 22;\n  |     ^^^^^^ assignment to borrowed `x` occurs here\n</code></pre>\n\n<p>The Rust book has only two rules:</p>\n\n<ol>\n<li>one or more references (<code>&amp;T</code>) to a resource,</li>\n<li>exactly one mutable reference (<code>&amp;mut T</code>).</li>\n</ol>\n\n<p>I have one mutable variable and one immutable link. Why does the compiler give an error?</p>\n"}, {"tags": ["operating-system", "rust", "bootable"], "comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 1, "creation_date": 1505068219, "post_id": 46143335, "comment_id": 79250096, "body": "Not sure what you mean..."}, {"owner": {"reputation": 708, "user_id": 7526789, "user_type": "registered", "accept_rate": 89, "profile_image": "https://graph.facebook.com/266390177128653/picture?type=large", "display_name": "Anmol Gautam", "link": "https://stackoverflow.com/users/7526789/anmol-gautam"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1505068334, "post_id": 46143335, "comment_id": 79250136, "body": "I want to make an iso of this program like a bootloader"}, {"owner": {"reputation": 1714, "user_id": 7404323, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/jYEFn.png?s=128&g=1", "display_name": "sailfish009", "link": "https://stackoverflow.com/users/7404323/sailfish009"}, "edited": false, "score": 1, "creation_date": 1505131726, "post_id": 46143335, "comment_id": 79272340, "body": "redox os is written in rust: <a href=\"https://github.com/redox-os/redox\" rel=\"nofollow noreferrer\">github.com/redox-os/redox</a>"}], "answers": [{"tags": [], "owner": {"reputation": 838, "user_id": 3613212, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/NfaGR.png?s=128&g=1", "display_name": "Gr&#233;gory OBANOS", "link": "https://stackoverflow.com/users/3613212/gr%c3%a9gory-obanos"}, "is_accepted": true, "score": 9, "last_activity_date": 1505076284, "creation_date": 1505076284, "answer_id": 46145406, "question_id": 46143335, "link": "https://stackoverflow.com/questions/46143335/make-a-bootable-hello-world-program-in-rust/46145406#46145406", "title": "make a bootable hello world program in rust", "body": "<p>There is an blog about <a href=\"https://os.phil-opp.com/\" rel=\"noreferrer\">Writing an OS in Rust</a>, where first steps are about booting and printing some stuff to screen using only Rust.</p>\n\n<p>It's an advanced topic, so I wouldn't recommand starting with writing an OS, execpt if you want to discover how an OS work.</p>\n"}], "owner": {"reputation": 708, "user_id": 7526789, "user_type": "registered", "accept_rate": 89, "profile_image": "https://graph.facebook.com/266390177128653/picture?type=large", "display_name": "Anmol Gautam", "link": "https://stackoverflow.com/users/7526789/anmol-gautam"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 410, "favorite_count": 2, "accepted_answer_id": 46145406, "answer_count": 1, "score": 0, "last_activity_date": 1505132204, "creation_date": 1505063171, "last_edit_date": 1505132204, "question_id": 46143335, "link": "https://stackoverflow.com/questions/46143335/make-a-bootable-hello-world-program-in-rust", "title": "make a bootable hello world program in rust", "body": "<p>I have recently come across Rust and found that one can easily write system code in Rust without touching assembly.<br>\nI just want to make a bootable hello world program out of my hello.rs code:</p>\n\n<pre><code>fn main() {\n    println!(\"Hello World\");\n}\n</code></pre>\n\n<p>Is there a way to make this Rust code bootable?</p>\n"}, {"tags": ["types", "rust"], "comments": [{"owner": {"reputation": 22091, "user_id": 5684257, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ea5090cde8ea066a1fda67ed52dd5084?s=128&d=identicon&r=PG&f=1", "display_name": "HTNW", "link": "https://stackoverflow.com/users/5684257/htnw"}, "edited": false, "score": 0, "creation_date": 1505012665, "post_id": 46136890, "comment_id": 79236150, "body": "I don&#39;t have any details, but there&#39;s this: <a href=\"https://github.com/fizyk20/generic-array\" rel=\"nofollow noreferrer\">github.com/fizyk20/generic-array</a>"}, {"owner": {"reputation": 416, "user_id": 1082652, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d327df22609ef9b93f9ff1cdc3596452?s=128&d=identicon&r=PG", "display_name": "marcianx", "link": "https://stackoverflow.com/users/1082652/marcianx"}, "edited": false, "score": 3, "creation_date": 1505088852, "post_id": 46136890, "comment_id": 79255131, "body": "Sorry, type-level constants are a highly-desired feature that aren&#39;t here yet: <a href=\"https://github.com/rust-lang/rfcs/issues/1038\" rel=\"nofollow noreferrer\">github.com/rust-lang/rfcs/issues/1038</a>"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1505095303, "post_id": 46136890, "comment_id": 79256316, "body": "Rust 1.20 introduces type-associated constants, edited question to refer to type <i>associated</i> constants, instead of type-constants."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1505135660, "post_id": 46136890, "comment_id": 79275007, "body": "<code>type f64v3 = u64; impl VectorSize for f64v3 {}</code> \u2014 This would never be able to work <a href=\"https://stackoverflow.com/q/35568871/155423\">because type aliases do not create new types</a>. You&#39;d immediately run into issues implementing the trait multiple times for the same type."}], "answers": [{"tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": false, "score": 1, "last_activity_date": 1505134624, "last_edit_date": 1505134624, "creation_date": 1505118694, "answer_id": 46151301, "question_id": 46136890, "link": "https://stackoverflow.com/questions/46136890/can-type-associated-constants-be-used-to-generalize-array-size-arguments-to-func/46151301#46151301", "title": "Can type associated constants be used to generalize array size arguments to functions?", "body": "<p>The (current?) limitation of associated constants is that they can't be called on generic types.\nI.e., following your example, with associated constants you can do this:</p>\n\n<pre><code>trait VectorSize {\n    const DIMS: usize;\n}\n\nimpl VectorSize for u64 {\n    const DIMS: usize = 3usize;\n}\n\nfn imul_vn_fl(v0: &amp;mut [f64; u64::DIMS], f: f64) {\n    for j in 0..u64::DIMS {\n        v0[j] *= f;\n    }\n}\n</code></pre>\n\n<p>but you would ultimately want to be able to make <code>imul_vn_fl</code> generic and  have it use the DIMS that is defined on your type. This is where associated constants still fall short (see the first of \"shortcomings\" in <a href=\"https://github.com/rust-lang/rust/issues/29646\" rel=\"nofollow noreferrer\">https://github.com/rust-lang/rust/issues/29646</a>)</p>\n\n<pre><code>// this does not compile, unfortunately; T must be a concrete type\nfn imul_vn_fl&lt;T&gt;(v0: &amp;mut [f64; T::DIMS], f: f64) \nwhere\n    T:VectorSize \n{\n    for j in 0..T::DIMS {\n        v0[j] *= f;\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=98babf1fcdfe2f6f431c72dc3dcafe29&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a></p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 289, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1505135439, "creation_date": 1505012366, "last_edit_date": 1505135439, "question_id": 46136890, "link": "https://stackoverflow.com/questions/46136890/can-type-associated-constants-be-used-to-generalize-array-size-arguments-to-func", "title": "Can type associated constants be used to generalize array size arguments to functions?", "body": "<p>Rust's type system doesn't generalize over sizes, but with <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0195-associated-items.md\" rel=\"nofollow noreferrer\">type associated constants</a> (new in Rust 1.20) I was thinking it may be possible to get some way towards this by declaring a constant size on a type.</p>\n\n<p>Given functions that operate on fixed size arrays in Rust, is it possible/practical to use type constants to declare functions that take arbitrary array sizes or at least a pre-defined range of sizes (1..32) for example.</p>\n\n<p>Take this small maths API for example:</p>\n\n<pre><code>// Cut down example of a math API\n\n// Could be changed at compile time, otherwise quite limiting.\npub const DIMS: usize = 3;\n\npub fn sq(a: f64) -&gt; f64 { a }\n\npub fn len_squared_vnvn(v0: &amp;[f64; DIMS], v1: &amp;[f64; DIMS]) -&gt; f64 {\n    let mut d = 0.0;\n    for j in 0..DIMS {\n        d += sq(v0[j] - v1[j]);\n    }\n    return d;\n}\n\nfn imul_vn_fl(v0: &amp;mut [f64; DIMS], f: f64) {\n    for j in 0..DIMS {\n        v0[j] *= f;\n    }\n}\n</code></pre>\n\n<p>Could <code>DIMS</code> be moved to a type associated constant so that...</p>\n\n<ul>\n<li>Functions such as <code>imul_vn_fl</code> can be used with arbitrary fixed sized arrays.</li>\n<li>Support for passing primitive fixed size array types, eg: <code>[f64; SOME_CONSTANT_NUMBER]</code> or, more likely, a zero-cost conversion to a type that wraps a <code>[f64; #]</code> and defines the <code>DIMS</code> type constant.</li>\n<li>Use <code>std::convert::From</code>/<code>Into</code> to avoid having to explicitly write the casts whenever calling.</li>\n<li>Generated code should be exactly as efficient as if constant sizes were used (no runtime size checks).</li>\n</ul>\n\n<p>I'm imagining something like this:</p>\n\n<pre><code>// this would be a macro to avoid re-writing for every size.\ntype f64v3 = u64;\nimpl VectorSize for f64v3 {\n    const usize DIMS = 3;\n}\n// end macro\n\nfn example() {\n    let var: [f64; 3] = [0.0, 1.0, 2.0];\n    imul_vn_fl(var, 0.5);\n\n    // ...\n}\n</code></pre>\n"}, {"tags": ["macros", "rust"], "answers": [{"comments": [{"owner": {"reputation": 147, "user_id": 7400966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/6bb4f033405681004c456114b5ce9261?s=128&d=identicon&r=PG&f=1", "display_name": "davidMcneil", "link": "https://stackoverflow.com/users/7400966/davidmcneil"}, "edited": false, "score": 0, "creation_date": 1505011212, "post_id": 46136394, "comment_id": 79235942, "body": "Thanks for your answer. I realize using this macro to simply build up a string is a bit ridiculous, but that was solely for the sake of the question. I can potentially envision doing much more interesting things. I have edited my question to mention this. The biggest pain point for me is the square brackets I can look past the need to quote string literals. Do you know if rusts new <code>macro</code> system would support this? Would you recommend using a procedural macro for this?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 147, "user_id": 7400966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/6bb4f033405681004c456114b5ce9261?s=128&d=identicon&r=PG&f=1", "display_name": "davidMcneil", "link": "https://stackoverflow.com/users/7400966/davidmcneil"}, "edited": false, "score": 0, "creation_date": 1505030850, "post_id": 46136394, "comment_id": 79239034, "body": "@user7400966: Rust&#39;s new macro system doesn&#39;t exist yet, so short of time travel, I can&#39;t answer that.  As for using procedural macros, you probably could with some contortions to get around them only being supported for derives."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 6, "last_activity_date": 1505030772, "last_edit_date": 1505030772, "creation_date": 1505005138, "answer_id": 46136394, "question_id": 46136169, "link": "https://stackoverflow.com/questions/46136169/overcoming-local-ambiguity-multiple-parsing-options-in-rust-macros/46136394#46136394", "title": "Overcoming &quot;local ambiguity: multiple parsing options:&quot; in Rust Macros", "body": "<p>Do you want the macro to actually be usable?  Then no.  Actually, why even use a macro here at all?  No matter what you do, you're going to be fighting the Rust lexer at some point.  Just write the HTML in a string literal like:</p>\n\n<pre><code>r##\"&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Some Title&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;This is a header!&lt;/h1&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\"##\n</code></pre>\n\n<p>That or accept that macro input <em>cannot</em> match actual HTML syntax, close tab, move on.</p>\n\n<hr>\n\n<p>You're still here?  Oh, so you <em>don't</em> care about usability or performance?  You <em>really</em> want a marginal improvement in syntax, no matter the cost? *<em>rolls up sleeves</em>*</p>\n\n<p>Be careful what you wish for.</p>\n\n<p>You need to use an incremental parser, which allows you to bypass some of the ambiguous parse issues.  Rather than trying to match a non-delimited group (which you can't do), you instead recursively match unique prefixes.  Doing that leads to:</p>\n\n<pre><code>macro_rules! html_test {\n    (@soup {$($parts:expr,)*}, [], ) =&gt; {\n        concat!($($parts),*)\n    };\n\n    (@soup $parts:tt, [$head:ident $($stack:ident)*], ) =&gt; {\n        compile_error!(\n            concat!(\n                \"unexpected end of HTML; the following elements need closing: \",\n                stringify!($head),\n                $(\",\", stringify!($stack),)*\n                \".\"\n            )\n        )\n    };\n\n    (@soup {$($parts:tt)*}, [$ex_close:ident $($stack:ident)*], &lt;/$got_close:ident&gt; $($tail:tt)*) =&gt; {\n        {\n            macro_rules! cmp {\n                ($ex_close) =&gt; {\n                    html_test!(\n                        @soup\n                        {$($parts)* \"&lt;/\", stringify!($ex_close), \"&gt;\",},\n                        [$($stack)*], $($tail)*\n                    )\n                };\n                ($got_close) =&gt; {\n                    compile_error!(\n                        concat!(\n                            \"closing element mismatch: expected `\",\n                            stringify!($ex_close),\n                            \"`, got `\",\n                            stringify!($got_close),\n                            \"`\"\n                        )\n                    )\n                };\n            }\n            cmp!($got_close)\n        }\n    };\n\n    (@soup {$($parts:tt)*}, $stack:tt, &lt;img $($tail:tt)*) =&gt; {\n        html_test!(@tag {$($parts)* \"&lt;img\",}, $stack, $($tail)*)\n    };\n\n    (@soup {$($parts:tt)*}, [$($stack:ident)*], &lt;$open:ident $($tail:tt)*) =&gt; {\n        html_test!(\n            @tag\n            {$($parts)* \"&lt;\", stringify!($open),},\n            [$open $($stack)*],\n            $($tail)*\n        )\n    };\n\n    (@soup {$($parts:tt)*}, $stack:tt, $text:tt $($tail:tt)*) =&gt; {\n        html_test!(@soup {$($parts)* $text,}, $stack, $($tail)*)\n    };\n\n    (@tag {$($parts:tt)*}, $stack:tt, &gt; $($tail:tt)*) =&gt; {\n        html_test!(@soup {$($parts)* \"&gt;\",}, $stack, $($tail)*)\n    };\n\n    (@tag {$($parts:tt)*}, $stack:tt, $name:ident=$value:tt $($tail:tt)*) =&gt; {\n        html_test!(\n            @tag\n            {$($parts)* \" \", stringify!($name), \"=\", stringify!($value),},\n            $stack, $($tail)*\n        )\n    };\n\n    ($($tts:tt)*) =&gt; {\n        html_test! { @soup {}, [], $($tts)* }\n    };\n}\n</code></pre>\n\n<p>This works by crawling over the input tokens, keeping track of the string pieces that need to be output (in <code>$($parts)*</code>), and the opened tags that need closing (in <code>$($stack)*</code>).  Once it's out of input, and the stack is empty, it <code>concat!</code>s all the parts together, producing a single static string literal.</p>\n\n<p>This has four problems:</p>\n\n<ol>\n<li><p>This chews through recursion levels like crazy.  If you run out, users will need to globally up the recursion limit.</p></li>\n<li><p>Macros like this are <em>slow</em>.</p></li>\n<li><p>Error reporting sucks.  Although this will check the closing tags match the corresponding opening tags, problems aren't reported at any particular location in the invocation.</p></li>\n<li><p>You still can't avoid needing to use string literals.  You <em>cannot</em> match an expression that is followed by <code>&lt;</code> or another expression, so matching the strings must be the (sole) fallback rule.</p></li>\n</ol>\n\n<p>So you <em>can</em> remove the delimiters, but I wouldn't recommend it.  Just quote the HTML like a sane person.</p>\n\n<hr>\n\n<p>As an aside, here is an <a href=\"https://play.rust-lang.org/?gist=3fe3b1bc7e08b39c3f9312d64ab9031c&amp;version=nightly\" rel=\"noreferrer\">alternative version of the macro</a> with a slightly different structure that factors out the <code>cmp</code> macro, and is easier to extend for elements without closing tags.  Note that I did not write this version.</p>\n"}], "owner": {"reputation": 147, "user_id": 7400966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/6bb4f033405681004c456114b5ce9261?s=128&d=identicon&r=PG&f=1", "display_name": "davidMcneil", "link": "https://stackoverflow.com/users/7400966/davidmcneil"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1253, "favorite_count": 1, "accepted_answer_id": 46136394, "answer_count": 1, "score": 3, "last_activity_date": 1505030772, "creation_date": 1505002092, "last_edit_date": 1505010755, "question_id": 46136169, "link": "https://stackoverflow.com/questions/46136169/overcoming-local-ambiguity-multiple-parsing-options-in-rust-macros", "title": "Overcoming &quot;local ambiguity: multiple parsing options:&quot; in Rust Macros", "body": "<p>I was experimenting with Rust's <code>macro_rules</code> and wanted to make a macro which could parse an HTML like syntax and simply echo the HTML as a string. The below macro gets most of the way there:</p>\n\n<pre><code>macro_rules! html {\n    () =&gt; (\"\");\n    ($text:tt) =&gt; {{\n        format!(\"{}\", $text)\n    }};\n    (&lt;$open:ident&gt;[$($children:tt)*]&lt;/$close:ident&gt;$($rest:tt)*) =&gt; {{\n        format!(\"&lt;{}&gt;{}&lt;/{}&gt;{}\",\n            stringify!($open),\n            html!($($children)*),\n            stringify!($close),\n            html!($($rest)*))\n    }};\n}\n</code></pre>\n\n<p>and then to use the macro:</p>\n\n<pre><code>println!(\"{}\",\n    html!(\n        &lt;html&gt;[\n            &lt;head&gt;[\n                &lt;title&gt;[\"Some Title\"]&lt;/title&gt;\n            ]&lt;/head&gt;\n            &lt;body&gt;[\n                &lt;h1&gt;[\"This is a header!\"]&lt;/h1&gt;\n            ]&lt;/body&gt;\n        ]&lt;/html&gt;\n    )\n);\n</code></pre>\n\n<p>However, I would really like to remove the extraneous opening and closing square brackets. I attempt to do that as follows:</p>\n\n<pre><code>macro_rules! html_test {\n    () =&gt; (\"\");\n    ($text:tt) =&gt; {{\n        format!(\"{}\", $text)\n    }};\n    (&lt;$open:ident&gt;$($children:tt)*&lt;/$close:ident&gt;$($rest:tt)*) =&gt; {{\n        format!(\"&lt;{}&gt;{}&lt;/{}&gt;{}\",\n            stringify!($open),\n            html!($($children)*),\n            stringify!($close),\n            html!($($rest)*))\n    }};\n}\n</code></pre>\n\n<p>However, when I go to use this macro: </p>\n\n<pre><code>println!(\"{}\",\n    html_test!(\n        &lt;html&gt;\n            &lt;head&gt;\n                &lt;title&gt;\"Some Title\"&lt;/title&gt;\n            &lt;/head&gt;\n            &lt;body&gt;\n                &lt;h1&gt;\"This is a header!\"&lt;/h1&gt;\n            &lt;/body&gt;\n        &lt;/html&gt;\n    )\n);\n</code></pre>\n\n<p>I  get the <code>error: local ambiguity: multiple parsing options: built-in NTs tt ('children') or 1 other option.</code></p>\n\n<p>I know the general solution to this error is to add syntax to disambiguate the cases (such as adding the square brackets). Is there any other way around this issue for this specific example? I know using procedural macros would be an extreme solution, but I would prefer to use <code>macro_rules</code> if at all possible.</p>\n\n<p>I realize using a macro to simply get a string containing HTML is overkill, but it was solely for the sake of this questions. Potentially, one could do much more interesting things with the macro such as calling functions to build up a tree representing the HTML structure.</p>\n"}, {"tags": ["performance", "optimization", "rust", "main"], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 7, "last_activity_date": 1504996762, "creation_date": 1504996762, "answer_id": 46135727, "question_id": 46135656, "link": "https://stackoverflow.com/questions/46135656/is-there-any-performance-disadvantage-to-putting-everything-in-main/46135727#46135727", "title": "Is there any performance disadvantage to putting everything in main?", "body": "<p>Short answer: <strong>Nothing significant will be different</strong>. </p>\n\n<p>If you look at the LLVM-IR for <a href=\"https://play.rust-lang.org/?gist=3be7a9a18f583591811836ada57ebf50&amp;version=stable\" rel=\"noreferrer\">your code on playground</a> and compare it with <a href=\"https://play.rust-lang.org/?gist=7c763e9045353d9638e063df1f26ad09&amp;version=stable\" rel=\"noreferrer\">code where all of your definitions are outside of <code>main()</code></a>, you'll see that there are no differences (except due to naming) in \"Debug\" mode. In \"Release\" mode, there aren't any differences at all.</p>\n\n<p>However, it is certainly possible that the location of your test code can affect code generation. But these are minor effects. There is nothing fundamental which would need to influence code generation (such as if the definition in <code>main</code> would have an implicit reference to <code>main</code>'s variables).</p>\n\n<p>Some reasons which could possibly affect code generation:</p>\n\n<ul>\n<li>Since the definitions in <code>main()</code> cannot be used outside of <code>main()</code>, this could be a strong hint to inline function calls to those things and remove the original definition, if possible. This would, in general improve performance.</li>\n<li><code>rustc</code> generates slightly different LLVM-IR, so LLVM could in theory generate different code (butterfly effect)</li>\n<li>...</li>\n</ul>\n"}], "owner": {"reputation": 1909, "user_id": 2827555, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c7b25126e07ec9dcc5d103b86da100e7?s=128&d=identicon&r=PG&f=1", "display_name": "hkk", "link": "https://stackoverflow.com/users/2827555/hkk"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 123, "favorite_count": 0, "accepted_answer_id": 46135727, "answer_count": 1, "score": 4, "last_activity_date": 1504996762, "creation_date": 1504995987, "question_id": 46135656, "link": "https://stackoverflow.com/questions/46135656/is-there-any-performance-disadvantage-to-putting-everything-in-main", "title": "Is there any performance disadvantage to putting everything in main?", "body": "<p>In Rust, it appears you can basically put anything in main. Traits, implementation blocks, functions, static variables...</p>\n\n<p>For instance, this compiles:</p>\n\n<pre><code>fn main() {\n    trait Foo {\n        fn foo();\n    }\n\n    impl Foo for f64 {\n        fn foo() {}\n    }\n\n    struct MyStruct;\n\n    enum RustIsCool {\n        MyStruct,\n    };\n\n    fn bar() {\n        trait Baz {\n            fn baz();\n        }\n\n        impl Baz for f64 {\n            fn baz() {}\n        }\n    }\n\n    static x: f64 = 10.0;\n\n    println!(\"This compiles!\");\n}\n</code></pre>\n\n<p>As you can see, you can even nest these things inside of other blocks.</p>\n\n<p>Obviously, doing this is bad from a stylistic point of view; it's ugly, harder to refactor, and makes code reuse more difficult.</p>\n\n<p>But I'm curious: is there any performance overhead in doing this? Or does the Rust Compiler optimize any differences away?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "is_accepted": true, "score": 4, "last_activity_date": 1522598498, "last_edit_date": 1522598498, "creation_date": 1505068721, "answer_id": 46144233, "question_id": 46135457, "link": "https://stackoverflow.com/questions/46135457/call-callback-with-reference-to-field/46144233#46144233", "title": "call callback with reference to field", "body": "<p>An important rule of Rust's borrow checker is, <em>mutable access is exclusive access.</em></p>\n\n<p>In variant 2, this rule is upheld because the reference to <code>self.field</code> and to <code>mut self.cbs</code> never really overlap. The <code>for</code> loop implicitly invokes <code>into_iter</code> on <code>&amp;mut Vec</code>, which returns a <code>std::slice::IterMut</code> object that references the <em>vector</em>, but not the rest of <code>Foo</code>. In other words, the <code>for</code> loop does not really contain a mutable borrow of <code>self</code>.</p>\n\n<p>In variant 1, there is a <code>call_callbacks</code> which does retain a mutable borrow of self, which means it cannot receive (directly on indirectly) <em>another</em> borrow of self. In other words, at the same time:</p>\n\n<ol>\n<li><p>It accepts a mutable reference to <code>self</code>, which allows it to modify all its fields, including <code>self.field</code>.</p></li>\n<li><p>It accepts a closure that <em>also</em> refers to <code>self</code>, because it uses the expression <code>self.field</code>.</p></li>\n</ol>\n\n<p>Letting this compile would allow <code>call_callbacks</code> to mutate <code>self.field</code> without the closure being aware of it. In case of an integer it might not sound like a big deal, but for other data this would lead to bugs that Rust's borrow checker is explicitly designed to prevent. For example, Rust relies on these properties to prevent unsafe iteration over mutating containers or data races in multi-threaded programs.</p>\n\n<p>In your case it is straightforward to avoid the above situation. <code>set_x</code> is in control both of the contents of the closure and of the mutation to <code>self.field</code>. It could be restated to pass a temporary variable to the closure, and then update <code>self.field</code>, like this:</p>\n\n<pre><code>impl Foo {\n    fn subscribe(&amp;mut self, cb: Box&lt;OnUpdate&gt;) {\n        self.cbs.push(cb);\n    }\n    fn set_x(&amp;mut self, v: i32) {\n        self.call_callbacks(|cb| cb.on_update(&amp;v));\n        self.field = v;\n    }\n\n    fn call_callbacks&lt;OP&gt;(&amp;mut self, mut operation: OP)\n        where OP: FnMut(&amp;mut OnUpdate)\n    {\n        for cb in self.cbs.iter_mut() {\n            operation(&amp;mut **cb);\n        }\n    }\n}\n</code></pre>\n\n<p>Rust has no problem with this code, and effect is the same.</p>\n\n<p>As an exercise, it is possible to write a version of <code>call_callbacks</code> that works like variant 2. In that case, it needs to accept an iterator into the cbs <code>Vec</code>, much like the <code>for</code> loop does, and it must not accept <code>&amp;self</code> at all:</p>\n\n<pre><code>fn set_x(&amp;mut self, v: i32) {\n    self.field = v;\n    let fref = &amp;self.field;\n    Foo::call_callbacks(&amp;mut self.cbs.iter_mut(),\n                        |cb| cb.on_update(fref));\n}\n\nfn call_callbacks&lt;OP&gt;(it: &amp;mut Iterator&lt;Item=&amp;mut Box&lt;OnUpdate&gt;&gt;,\n                      mut operation: OP)\n    where OP: FnMut(&amp;mut OnUpdate)\n{\n    for cb in it {\n        operation(&amp;mut **cb);\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 264, "favorite_count": 0, "accepted_answer_id": 46144233, "answer_count": 1, "score": 0, "last_activity_date": 1522598498, "creation_date": 1504994079, "question_id": 46135457, "link": "https://stackoverflow.com/questions/46135457/call-callback-with-reference-to-field", "title": "call callback with reference to field", "body": "<p>Consider such code:</p>\n\n<pre><code>trait OnUpdate {\n    fn on_update(&amp;mut self, x: &amp;i32);\n}\n\nstruct Foo {\n    field: i32,\n    cbs: Vec&lt;Box&lt;OnUpdate&gt;&gt;,\n}\n\nimpl Foo {\n    fn subscribe(&amp;mut self, cb: Box&lt;OnUpdate&gt;) {\n        self.cbs.push(cb);\n    }\n    fn set_x(&amp;mut self, v: i32) {\n        self.field = v;\n\n        //variant 1\n        //self.call_callbacks(|v| v.on_update(&amp;self.field));\n\n        //variant 2\n        let f_ref = &amp;self.field;\n        for item in &amp;mut self.cbs {\n            item.on_update(f_ref);\n        }\n    }\n    fn call_callbacks&lt;CB: FnMut(&amp;mut Box&lt;OnUpdate&gt;)&gt;(&amp;mut self, mut cb: CB) {\n        for item in &amp;mut self.cbs {\n            cb(item);\n        }\n    }\n}\n</code></pre>\n\n<p>If I comment variant 2 and uncomment variant 1,\nit doesn't compiles, because of I need <code>&amp;Foo</code> and <code>&amp;mut Foo</code> at the same time.</p>\n\n<p>But I really need function in this place, because of I need the same\ncode to call callbacks in several places.</p>\n\n<p>So do I need macros here to call callbacks, or may be another solution?</p>\n\n<p>Side notes: in real code I use big structure instead of <code>i32</code>,\nso I can not copy it. Also I have several methods in <code>OnUpdate</code>,\nso I need <code>FnMut</code> in <code>call_callbacks</code>.  </p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 763, "user_id": 2180200, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2559ec3261834aa8aa2b7c0c828b02e0?s=128&d=identicon&r=PG", "display_name": "jp48", "link": "https://stackoverflow.com/users/2180200/jp48"}, "edited": false, "score": 2, "creation_date": 1504989428, "post_id": 46134714, "comment_id": 79231970, "body": "I just read the duplicate answer and it doesn&#39;t actually explain how it would be done. Of course I don&#39;t want mutation, how would this would be done with  rental crate or the owning_ref crate?"}, {"owner": {"reputation": 763, "user_id": 2180200, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2559ec3261834aa8aa2b7c0c828b02e0?s=128&d=identicon&r=PG", "display_name": "jp48", "link": "https://stackoverflow.com/users/2180200/jp48"}, "edited": false, "score": 0, "creation_date": 1504991036, "post_id": 46134714, "comment_id": 79232420, "body": "Please refer to the edit for another proposed solution that would be move-safe."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1505306606, "post_id": 46134714, "comment_id": 79358181, "body": "<i>it doesn&#39;t actually explain how it would be done</i> \u2014 then you <b>directly reference</b> two solutions from that answer that allow you to store a reference alongside the owning item. Then you propose to change your question so that it <i>doesn&#39;t store substrings at all</i>, but instead stores a string and some integers. This moves the benefit of references from compile time to run time, so of course the compiler won&#39;t care."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1505308320, "post_id": 46134714, "comment_id": 79359532, "body": "You also <a href=\"https://play.rust-lang.org/?gist=fa9ee9a1061500ca36008c630ab06c4b&amp;version=stable\" rel=\"nofollow noreferrer\">don&#39;t need unsafe code</a> for the offset solution."}, {"owner": {"reputation": 763, "user_id": 2180200, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2559ec3261834aa8aa2b7c0c828b02e0?s=128&d=identicon&r=PG", "display_name": "jp48", "link": "https://stackoverflow.com/users/2180200/jp48"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1505396188, "post_id": 46134714, "comment_id": 79403961, "body": "Sorry for the tone of my comment. In my defense: I read that <code>owning_ref</code> won&#39;t work because I require multiple self-references and I still don&#39;t know how it would be done with rental (that&#39;s what I referred as &quot;it doesn&#39;t actually explain that&quot;, apologies for the poor choice of words)."}, {"owner": {"reputation": 763, "user_id": 2180200, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2559ec3261834aa8aa2b7c0c828b02e0?s=128&d=identicon&r=PG", "display_name": "jp48", "link": "https://stackoverflow.com/users/2180200/jp48"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1505396488, "post_id": 46134714, "comment_id": 79404202, "body": "Regarding the offset solution, thanks for your input and solution, I actually ended up doing something similar. Anyways, I&#39;m still mildly uncomfortable that the addition is performed in every access instead of updating a raw pointer on creation and move (hence the <code>unsafe</code>ness), but I guess that would warrant a separate question. But I see two problems: 1. making sure UTF-8 character boundaries are respected and 2. detecting the &quot;move&quot; (maybe not possible? <a href=\"https://www.reddit.com/49wfej/\" rel=\"nofollow noreferrer\">reddit.com/49wfej</a> ). A perfect solution would also make it transparent by allowing to use nearly the same API as in <code>&amp;str</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1505398712, "post_id": 46134714, "comment_id": 79405860, "body": "No worries, I didn&#39;t detect any kind of negative tone! <i>that the addition is performed in every access instead of updating a raw pointer on creation and move</i> I guess it depends on how often you move the value vs access it. If you were really worried about it, you could &quot;cache&quot; the result of <code>&amp;*foo</code> into a local <code>&amp;str</code> variable, relying on normal lifetimes at that point. <i>making sure UTF-8 character boundaries are respected</i> \u2014 slicing a string will panic if it&#39;s not on a character boundary, so that&#39;s taken care of for you."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1505414695, "post_id": 46134714, "comment_id": 79416033, "body": "FWIW, <a href=\"https://github.com/jpernst/rental/issues/20#event-1249801514\" rel=\"nofollow noreferrer\">rental had a small bug</a> regarding storing references, but it&#39;s fixed now!"}, {"owner": {"reputation": 763, "user_id": 2180200, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2559ec3261834aa8aa2b7c0c828b02e0?s=128&d=identicon&r=PG", "display_name": "jp48", "link": "https://stackoverflow.com/users/2180200/jp48"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1505509907, "post_id": 46134714, "comment_id": 79459272, "body": "Wow, thanks for reporting! I thought that was &quot;by design&quot;. Will try that right away, even if only for the purpose of learning; for the time being I&#39;m using the working solution in my project which has grown a bit since I implemented it."}], "owner": {"reputation": 763, "user_id": 2180200, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2559ec3261834aa8aa2b7c0c828b02e0?s=128&d=identicon&r=PG", "display_name": "jp48", "link": "https://stackoverflow.com/users/2180200/jp48"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 52, "favorite_count": 0, "closed_date": 1504988462, "answer_count": 0, "score": 0, "last_activity_date": 1505260073, "creation_date": 1504987847, "last_edit_date": 1505260073, "question_id": 46134714, "link": "https://stackoverflow.com/questions/46134714/rust-store-string-and-substrings-in-same-struct", "closed_reason": "Duplicate", "title": "Rust: store string and substrings in same struct", "body": "<p>I am trying to split a string into several parts and store everything in the same struct and I would like to do so without cloning anything.</p>\n\n<p>This is roughly what I have:</p>\n\n<p><strong>Struct</strong>:</p>\n\n<pre><code>pub struct PkgName&lt;'a&gt; {\n    pub fname: String,\n    pub name: &amp;'a str,\n    pub ver: &amp;'a str,\n}\n</code></pre>\n\n<p><strong>Impl</strong> (minus lifetime params):</p>\n\n<pre><code>impl PkgName {\n    //the String move is intended, to avoid cloning\n    fn parse(fname: String) -&gt; PkgName {\n        let end_name: usize = /* .... */;\n        let name = &amp;fname[..end_name];\n        let ver = &amp;fname[end_name+1..];\n        PkgName {fname, name, ver}\n    }\n}\n</code></pre>\n\n<hr>\n\n<p>I already tried with several combinations of lifetime parameters, to no avail.</p>\n\n<p>Example of desired result:</p>\n\n<pre><code>PkgName {\n    fname: \"archlinux-keyring-20170823-1\",\n    name: \"archlinux-keyring\",\n    ver: \"20170823-1\"\n}\n</code></pre>\n\n<p>Again: <code>name</code> and <code>ver</code> must be slices of <code>fname</code>.</p>\n\n<hr>\n\n<p><strong>Edit:</strong></p>\n\n<p>After reading the duplicate: <a href=\"https://stackoverflow.com/questions/32300132/why-cant-i-store-a-value-and-a-reference-to-that-value-in-the-same-struct\">Why can&#39;t I store a value and a reference to that value in the same struct?</a></p>\n\n<p>I propose an alternative solution that would involve unsafe code: a new type should store the offset between the fields (target - source) plus an additional offset such that it points to the beginning of the desired string; also it should store the size. It basically still behaves like a reference, so it should implement <code>Deref</code>.</p>\n\n<p>As only offsets are saved in this new type, this is move-safe although, of course, only should apply to immutable fields.</p>\n"}, {"tags": ["rust", "function-pointers", "osdev"], "answers": [{"comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1504988323, "post_id": 46134764, "comment_id": 79231671, "body": "Please note that I&#39;m absolutely not an expert on unsafe-things! If someone knows better, please let me know; then I can edit or delete my answer!"}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1504991684, "post_id": 46134764, "comment_id": 79232601, "body": "Rust doesn&#39;t do anything fancy here. <code>fn()</code> is a plain function pointer. As long as there&#39;s a function at <code>virtual_address</code>, calling conventions and signatures match, it&#39;s OK to do the cast and call the function."}, {"owner": {"reputation": 905, "user_id": 3025267, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/b304a447c1c17ed7baf22f270b85853b?s=128&d=identicon&r=PG&f=1", "display_name": "Isaac Woods", "link": "https://stackoverflow.com/users/3025267/isaac-woods"}, "edited": false, "score": 0, "creation_date": 1504995811, "post_id": 46134764, "comment_id": 79233593, "body": "Awesome, I&#39;ll need to do some more setup to see if this actually works, but it does compile! Thanks very much @LukasKalbertodt."}, {"owner": {"reputation": 905, "user_id": 3025267, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/b304a447c1c17ed7baf22f270b85853b?s=128&d=identicon&r=PG&f=1", "display_name": "Isaac Woods", "link": "https://stackoverflow.com/users/3025267/isaac-woods"}, "reply_to_user": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1504995910, "post_id": 46134764, "comment_id": 79233608, "body": "@red75prime The code itself isn&#39;t fancy, but does rely on being passed a valid virtual address in my case (with numerous things to think about: physical -&gt; virtual calculation, actually mapping the code etc.) so I think it does fit as an <code>unsafe fn</code> in Rust&#39;s paranoia (in a good sense of the word)"}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 15, "last_activity_date": 1609870603, "last_edit_date": 1609870603, "creation_date": 1504988252, "answer_id": 46134764, "question_id": 46134477, "link": "https://stackoverflow.com/questions/46134477/how-can-i-call-a-raw-address-from-rust/46134764#46134764", "title": "How can I call a raw address from Rust?", "body": "<p>Casts of the type <code>_ as f-ptr</code> are not allowed (see <a href=\"https://doc.rust-lang.org/nomicon/casts.html\" rel=\"nofollow noreferrer\">the Rustonomicon chapter on casts</a>). So, as far as I can tell, the only way to cast to function pointer types is to use the all mighty weapon <a href=\"https://doc.rust-lang.org/stable/std/mem/fn.transmute.html\" rel=\"nofollow noreferrer\"><code>mem::transmute()</code></a>.</p>\n<p>But before we can use <code>transmute()</code>, we have to bring our input into the right memory layout. We do this by casting to <code>*const ()</code> (a void pointer). Afterwards we can use <code>transmute()</code> to get what we want:</p>\n<pre><code>let ptr = virtual_address as *const ();\nlet code: extern &quot;C&quot; fn() = unsafe { std::mem::transmute(ptr) };\n(code)();\n</code></pre>\n<p>If you find yourself doing this frequently, various kinds of macros can remove the boilerplate. One possibility:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>macro_rules! example {\n    ($address:expr, $t:ty) =&gt; {\n        std::mem::transmute::&lt;*const (), $t&gt;($address as _)\n    };\n}\n</code></pre>\n<pre class=\"lang-rust prettyprint-override\"><code>let f = unsafe { example!(virtual_address, extern &quot;C&quot; fn()) };\nf(); \n</code></pre>\n<hr />\n<p>However, a few notes on this:</p>\n<ul>\n<li>If you, future reader, want to use this to do simple FFI things: please take a moment to think about it again. Calculating function pointers yourself is rarely necessary.</li>\n<li>Usually <code>extern &quot;C&quot;</code> functions have the type <code>unsafe extern &quot;C&quot; fn()</code>. This means that those functions are unsafe to call. You should probably add the <code>unsafe</code> to your function.</li>\n</ul>\n"}], "owner": {"reputation": 905, "user_id": 3025267, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/b304a447c1c17ed7baf22f270b85853b?s=128&d=identicon&r=PG&f=1", "display_name": "Isaac Woods", "link": "https://stackoverflow.com/users/3025267/isaac-woods"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3122, "favorite_count": 0, "accepted_answer_id": 46134764, "answer_count": 1, "score": 8, "last_activity_date": 1609870603, "creation_date": 1504986111, "last_edit_date": 1609870145, "question_id": 46134477, "link": "https://stackoverflow.com/questions/46134477/how-can-i-call-a-raw-address-from-rust", "title": "How can I call a raw address from Rust?", "body": "<p>I am writing an OS in Rust and need to directly call into a virtual address that I'm calculating (of type <code>u32</code>). I expected this to be relatively simple:</p>\n<pre><code>let code = virtual_address as (extern &quot;C&quot; fn ());\n(code)();\n</code></pre>\n<p>However, this complains that the cast is non-primitive. It suggests I use the <code>From</code> trait, but I don't see how this could help (although I am relatively new to Rust and so could be missing something).</p>\n<pre class=\"lang-none prettyprint-override\"><code>error[E0605]: non-primitive cast: `u32` as `extern &quot;C&quot; fn()`\n --&gt; src/main.rs:3:16\n  |\n3 |     let code = virtual_address as (extern &quot;C&quot; fn ());\n  |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n</code></pre>\n<p>I have everything in <code>libcore</code> at my disposal, but haven't ported <code>std</code> and so can't rely on anything that isn't no_std</p>\n"}, {"tags": ["rust", "static-libraries", "ffi"], "comments": [{"owner": {"reputation": 2105, "user_id": 1500195, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/Tc5kv.png?s=128&g=1", "display_name": "6ft Dan", "link": "https://stackoverflow.com/users/1500195/6ft-dan"}, "edited": false, "score": 0, "creation_date": 1504982504, "post_id": 46131051, "comment_id": 79230112, "body": "I&#39;ve opened an issue on Rust&#39;s Github <a href=\"https://github.com/rust-lang/rust/issues/44459\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/44459</a>"}], "answers": [{"tags": [], "owner": {"reputation": 2105, "user_id": 1500195, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/Tc5kv.png?s=128&g=1", "display_name": "6ft Dan", "link": "https://stackoverflow.com/users/1500195/6ft-dan"}, "is_accepted": false, "score": 0, "last_activity_date": 1505027366, "creation_date": 1505027366, "answer_id": 46138193, "question_id": 46131051, "link": "https://stackoverflow.com/questions/46131051/rust-not-creating-function-in-lib-extern-ffi/46138193#46138193", "title": "Rust not creating function in lib extern FFI", "body": "<p>The information I provided was not enough to debug the issue.  The real problem was I had changed from building source from release to debug and had not updated the FFI linked library folder to reflect that.  So the code kept pointing at and old lib.</p>\n"}], "owner": {"reputation": 2105, "user_id": 1500195, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/Tc5kv.png?s=128&g=1", "display_name": "6ft Dan", "link": "https://stackoverflow.com/users/1500195/6ft-dan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 261, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1505027366, "creation_date": 1504962572, "last_edit_date": 1504976911, "question_id": 46131051, "link": "https://stackoverflow.com/questions/46131051/rust-not-creating-function-in-lib-extern-ffi", "title": "Rust not creating function in lib extern FFI", "body": "<p>I have many Rust functions working perfectly across Ruby FFI.  But following directions from two different sites for creating a <strong>free_array</strong> method is not making the method available in the linked library.</p>\n\n<p>This example is the working example of freeing a String returned from Ruby.</p>\n\n<pre><code>use libc::c_char;\nuse std::ffi::CString;\n\n#[no_mangle]\npub extern \"C\" fn free_string(s: *mut c_char) {\n  unsafe {\n    if s.is_null() { return }\n    CString::from_raw(s)\n  };  \n}\n</code></pre>\n\n<p>And here are two attempts at implementing a way to free the memory of an Array.</p>\n\n<pre><code>use std::mem::transmute;\nuse ruby_array::RubyArray;\n\n#[no_mangle]\npub extern \"C\" fn free_array(ra: *mut RubyArray) {\n  let _ra: Box&lt;RubyArray&gt; = unsafe{ transmute(ra) };\n}\n\n// OR\n\n#[no_mangle]\npub extern \"C\" fn free_array(ptr: *mut RubyArray) {\n  if ptr.is_null() { return }\n  unsafe { Box::from_raw(ptr); }\n}\n</code></pre>\n\n<p>This results in an error:</p>\n\n<pre><code>Function 'free_array' not found in [/libfaster_path.so] (FFI::NotFoundError)\n</code></pre>\n\n<p>Here's the Struct I'm using and which gets created perfectly in to Ruby from Rust.</p>\n\n<pre><code>use libc;\nuse std::mem;\n\n#[repr(C)]\npub struct RubyArray {\n  len: libc::size_t,\n  data: *const libc::c_void,\n}\n\nimpl RubyArray {\n  #[allow(dead_code)]\n  pub fn from_vec&lt;T&gt;(vec: Vec&lt;T&gt;) -&gt; RubyArray {\n    let array = RubyArray {\n      data: vec.as_ptr() as *const libc::c_void,\n        len: vec.len() as libc::size_t\n    };  \n    mem::forget(vec);\n    array\n  }\n}\n</code></pre>\n\n<p>But that's not relevant as it's not the issue.  The issue is the method is not being made available in the library output for FFI to read from.  What's wrong with this?  Rust is happy and I've written many other methods in similar manner that work.  What makes this not found in the <code>.so</code> file?</p>\n\n<p>The file is included in the main <code>src/lib.rs</code> with <code>pub mod</code> so there's nothing wrong there.  It's the same as the other working methods.</p>\n\n<p><em>I'll be posting a blog with much fuller implementation details later and I'll add a link to the comment section below for those who are interested.</em></p>\n\n<hr>\n\n<p><strong>Minor Update</strong></p>\n\n<p>I'm pretty sure this is an issue with Rust.  I've used both Ruby's Fiddle and FFI to verify that this method couldn't be accessed where as other methods could be by both.</p>\n\n<p>I grepped the binary and found the text showing the <strong>free_array</strong> method in the binary but apparently that's not compiled correctly to be read by FFI.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1504952784, "post_id": 46129486, "comment_id": 79221532, "body": "Use <code>let mut ranking: Vec&lt;()&gt; = ...</code> to check the type of <code>ranking</code>; I suspect it is <code>Vec&lt;&amp;Player&gt;</code> because <code>iter</code> returns an iterator over references."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1504953211, "post_id": 46129486, "comment_id": 79221642, "body": "Yep, as Matthieu M. said, you seem to want <code>into_iter()</code> rather than <code>iter()</code>."}, {"owner": {"reputation": 444, "user_id": 3422156, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/29af89a0e8be5cf63546304d02c8e2fb?s=128&d=identicon&r=PG&f=1", "display_name": "spease", "link": "https://stackoverflow.com/users/3422156/spease"}, "edited": false, "score": 0, "creation_date": 1505071918, "post_id": 46129486, "comment_id": 79251235, "body": "Yeah that was it. Thanks. How do I mark a comment as an answer?"}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 1, "creation_date": 1505072413, "post_id": 46129486, "comment_id": 79251400, "body": "@spease You don&#39;t, but you can ask the commenters to provide an answer. If they don&#39;t care to do that, it is perfectly fine to <a href=\"https://stackoverflow.com/help/self-answer\">write an answer yourself</a> (giving credit where appropriate) and accept it."}], "owner": {"reputation": 444, "user_id": 3422156, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/29af89a0e8be5cf63546304d02c8e2fb?s=128&d=identicon&r=PG&f=1", "display_name": "spease", "link": "https://stackoverflow.com/users/3422156/spease"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 81, "favorite_count": 0, "answer_count": 0, "score": 1, "last_activity_date": 1504951618, "creation_date": 1504951618, "question_id": 46129486, "link": "https://stackoverflow.com/questions/46129486/force-move-of-pattern-matched-option", "title": "Force move of pattern-matched Option", "body": "<p>I have the following code for a toy Blackjack program:</p>\n\n<pre><code>fn winner(self) -&gt; Option&lt;Player&gt; {\n    let mut ranking: Vec&lt;_&gt; = self.players.iter().filter(|p| p.score() &lt;= 21).collect();\n    ranking.sort_by(|a,b|a.score().cmp(&amp;b.score()));\n    match ranking.pop() {\n        Some(ranking_first) =&gt; match ranking.pop() {\n            Some(ranking_second) if ranking_second.score() == ranking_first.score() =&gt; None,\n            _ =&gt; Some(ranking_first),\n        },\n        None =&gt; None,\n    }\n}\n</code></pre>\n\n<p>I'm deliberately consuming the game to return a winner. I'm getting the following error:</p>\n\n<pre><code>error[E0308]: mismatched types\n   --&gt; src/lib.rs:126:27\n    |\n126 |                 _ =&gt; Some(ranking_first),\n    |                           ^^^^^^^^^^^^^ expected struct `Player`, found &amp;Player\n    |\n    = note: expected type `Player`\n               found type `&amp;Player`\n</code></pre>\n\n<p>I'd like to force a move of the player so that it will still be available after the game is dropped. I could simply implement Clone / Copy for this example, but I'd like to understand why this is happening. Is there a way to match Some() using move instead of ref? Thanks.</p>\n"}, {"tags": ["android", "rust"], "answers": [{"comments": [{"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1504989475, "post_id": 46130238, "comment_id": 79231979, "body": "Cool! I was able to install stable, however running it only gives me &#39;error: no default toolchain configured&#39;."}, {"owner": {"reputation": 838, "user_id": 3613212, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/NfaGR.png?s=128&g=1", "display_name": "Gr&#233;gory OBANOS", "link": "https://stackoverflow.com/users/3613212/gr%c3%a9gory-obanos"}, "reply_to_user": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 1, "creation_date": 1504991436, "post_id": 46130238, "comment_id": 79232545, "body": "Can you check the path of the rustc binary, it seems you still have a conflict with rustup. On my phone, the path is /data/data/com.termux/files/usr/bin/rustc"}, {"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1505032973, "post_id": 46130238, "comment_id": 79239569, "body": "That was it! Thank you!"}], "tags": [], "owner": {"reputation": 838, "user_id": 3613212, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/NfaGR.png?s=128&g=1", "display_name": "Gr&#233;gory OBANOS", "link": "https://stackoverflow.com/users/3613212/gr%c3%a9gory-obanos"}, "is_accepted": true, "score": 5, "last_activity_date": 1505033105, "last_edit_date": 1505033105, "creation_date": 1504957071, "answer_id": 46130238, "question_id": 46129249, "link": "https://stackoverflow.com/questions/46129249/is-there-a-rust-build-for-aarch64-linux-android/46130238#46130238", "title": "is there a Rust build for aarch64-linux-android", "body": "<p>Sadly rustup won't work on android.</p>\n\n<p>You can manage to install cargo and rustc using <a href=\"https://wiki.termux.com/wiki/Package_Management#its-pointless_.28live_the_dream.29\" rel=\"nofollow noreferrer\">Termux \"its-pointless (live_the_dream)\" community repository</a>.</p>\n\n<p>Also if you have rustup already installed, <code>rm .cargo</code> will remove the stub (which otherwise interferes with calling <code>cargo</code> or <code>rustc</code>).</p>\n"}], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2119, "favorite_count": 2, "accepted_answer_id": 46130238, "answer_count": 1, "score": 5, "last_activity_date": 1541085477, "creation_date": 1504949849, "question_id": 46129249, "link": "https://stackoverflow.com/questions/46129249/is-there-a-rust-build-for-aarch64-linux-android", "title": "is there a Rust build for aarch64-linux-android", "body": "<p>Recently I got a new smartphone with fairly beefy specs, so wanting to play around with Rust on the go I installed Termux and tried to rustup-init. However, this fails:</p>\n\n<p><code>\ninfo: syncing channel updates for 'stable-aarch64-linux-android'\ninfo: latest update on 2017-08-31, rust version 1.20.0 (f3d6973f4 2017-08-27)\nerror: target not found: 'aarch64-linux-android'\n$\n</code></p>\n\n<p>Is there another way to get a rust environment on android?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 3679, "user_id": 186556, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e8a468d0d197f658d97dfe7d169ad2f4?s=128&d=identicon&r=PG", "display_name": "Mihails Strasuns", "link": "https://stackoverflow.com/users/186556/mihails-strasuns"}, "is_accepted": true, "score": 3, "last_activity_date": 1504959848, "creation_date": 1504959848, "answer_id": 46130678, "question_id": 46128041, "link": "https://stackoverflow.com/questions/46128041/self-lifetime-on-associated-type/46130678#46130678", "title": "self lifetime on associated type", "body": "<p>Sadly, this is currently not possible in Rust when implementing <code>Iterator</code> trait - it is not allowed to modify lifetime relations compared to original trait definition of the method.</p>\n\n<p>Good news are that recently merged <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1598-generic_associated_types.md\" rel=\"nofollow noreferrer\">generic associated type RFC</a> will provide a language feature to do so, when implemented in the compiler. It will probably take some time though.</p>\n\n<p>I have tried to implement similar function myself recently and most simple approach I have found with existing stable compiler was to require <code>Clone + Iterator</code>, iterating split chunks separately from \"host\" iterator (<a href=\"https://gitlab.com/mihails.strasuns/example-iterators-calendar/blob/master/src/split_adaptor.rs\" rel=\"nofollow noreferrer\">https://gitlab.com/mihails.strasuns/example-iterators-calendar/blob/master/src/split_adaptor.rs</a>)</p>\n"}], "owner": {"reputation": 444, "user_id": 3422156, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/29af89a0e8be5cf63546304d02c8e2fb?s=128&d=identicon&r=PG&f=1", "display_name": "spease", "link": "https://stackoverflow.com/users/3422156/spease"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 985, "favorite_count": 1, "accepted_answer_id": 46130678, "answer_count": 1, "score": 2, "last_activity_date": 1504959848, "creation_date": 1504940479, "question_id": 46128041, "link": "https://stackoverflow.com/questions/46128041/self-lifetime-on-associated-type", "title": "self lifetime on associated type", "body": "<p>Full Rust example here:\n<a href=\"https://play.rust-lang.org/?gist=0778e8d120dd5e5aa7019bc097be392b&amp;version=stable\" rel=\"nofollow noreferrer\">https://play.rust-lang.org/?gist=0778e8d120dd5e5aa7019bc097be392b&amp;version=stable</a></p>\n\n<p>The general idea is to implement a generic split iterator that will yield iterators for each run of values that are split by the specified separator. So for <code>[1, 2, 3, 0, 4, 5, 6, 0, 7, 8, 9],split(0)</code> you would get <code>[[1, 2, 3], [4, 5, 6], [7, 8, 9]]</code></p>\n\n<p>For this code:</p>\n\n<pre><code>impl&lt;'a, I, F&gt; Iterator for Split&lt;I, F&gt;\n    where I: Iterator,\n          F: PartialEq&lt;I::Item&gt;,\n{\n    type Item = SplitSection&lt;'a, I, F&gt;;\n    fn next(&amp;'a mut self) -&gt; Option&lt;Self::Item&gt; {\n        self.iter.peek().map(|_| \n        SplitSection {\n            exhausted: false,\n            iter: self,\n        })\n    }\n}\n</code></pre>\n\n<p>I'm receiving the following error:</p>\n\n<pre><code>error[E0207]: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n  --&gt; src/main.rs:22:6\n   |\n22 | impl&lt;'a, I, F&gt; Iterator for Split&lt;I, F&gt;\n   |      ^^ unconstrained lifetime parameter\n</code></pre>\n\n<p>Is there a way to \"constrain\" the lifetime parameter, or refactor it somehow so that the associated type (Item) gets returned with a lifetime that will tie it back to next()?</p>\n\n<p>Basically, since each SplitSection is using the iterator owned by Split, I want to make sure that two SplitSections are not iterated over at once.</p>\n\n<p>Thanks!</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 444, "user_id": 3422156, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/29af89a0e8be5cf63546304d02c8e2fb?s=128&d=identicon&r=PG&f=1", "display_name": "spease", "link": "https://stackoverflow.com/users/3422156/spease"}, "edited": false, "score": 0, "creation_date": 1504952047, "post_id": 46128886, "comment_id": 79221336, "body": "Wow, this is very in-depth. The obstacle with this approach is that I&#39;m doing deserialization using serde. This is for a labview LVM parser. Since I know roughly what the format is going to look like, the parsing functions are driven by serde&#39;s deserializer. The parse_separator function is invoked in locations where I know the number of empty tabs that I expect. Otherwise things are generally tokenized, I convert the type (if necessary) from a string eg ints or floats, and then hand it off to Serde&#39;s visitor.  Context: <a href=\"https://github.com/spease/labview/blob/master/src/lvm_format.rs\" rel=\"nofollow noreferrer\">github.com/spease/labview/blob/master/src/lvm_format.rs</a>"}, {"owner": {"reputation": 444, "user_id": 3422156, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/29af89a0e8be5cf63546304d02c8e2fb?s=128&d=identicon&r=PG&f=1", "display_name": "spease", "link": "https://stackoverflow.com/users/3422156/spease"}, "edited": false, "score": 0, "creation_date": 1504952408, "post_id": 46128886, "comment_id": 79221432, "body": "Note that the above context is slightly older than what I&#39;m working with at the moment - my in-progress version of the code uses a position usize instead of splitting the string every time in parse_token and the other functions are adjusted appropriately."}], "tags": [], "owner": {"reputation": 988, "user_id": 6090592, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3d5e40fcf8c369f36d04406528df52f2?s=128&d=identicon&r=PG&f=1", "display_name": "Djzin", "link": "https://stackoverflow.com/users/6090592/djzin"}, "is_accepted": false, "score": 0, "last_activity_date": 1504947796, "last_edit_date": 1504947796, "creation_date": 1504947277, "answer_id": 46128886, "question_id": 46126772, "link": "https://stackoverflow.com/questions/46126772/best-way-to-have-a-count-resultusize-function-on-an-interator/46128886#46128886", "title": "Best way to have a count() -&gt; Result&lt;usize&gt; function on an interator?", "body": "<p>Let's say you want to parse strings of the form <code>\"field1,field2,A,B,C\"</code> - so there are some number of garbage fields at the beginning that you want to skip (2 in this case), but you also expect 3 tokens coming after it - if less than 3 fields are present, you want to error out.</p>\n\n<p>The signature for such a function looks like so:</p>\n\n<pre><code>fn parse(line: &amp;str, skip: usize, count: usize) -&gt; Result&lt;Vec&lt;Token&gt;, Error&gt;\n</code></pre>\n\n<p>And in this case, we would call <code>parse(\"field1,field2,A,B,C\", 2, 3)</code>.</p>\n\n<p>So we start by splitting the string by <code>','</code>:</p>\n\n<pre><code>line.split(',')\n</code></pre>\n\n<p>We skip over <code>skip</code> fields:</p>\n\n<pre><code>    .skip(skip)\n</code></pre>\n\n<p>We try to parse each field</p>\n\n<pre><code>    .map(str::parse)\n</code></pre>\n\n<p>Now the elegant trick - append an element onto the end of the iterator that will cause an error if we ever reach it. We use <code>Iterator::chain</code> with <code>Some(T)</code> - <code>Some(T)</code> functions like an iterator of one element in this case.</p>\n\n<pre><code>    .chain(Some(Err(Error::NotEnoughTokens)))\n</code></pre>\n\n<p>Take however many elements we need</p>\n\n<pre><code>    .take(count)\n</code></pre>\n\n<p>Collect the whole thing into a <code>Result&lt;Vec&lt;Token&gt;, Error&gt;</code> - this just works! The error returned will be the first encountered, so any parsing errors first, then the <code>NotEnoughTokens</code> error.</p>\n\n<pre><code>    .collect()\n</code></pre>\n\n<p>The full code using this, including token parsing boilerplate, looks like this:</p>\n\n<pre><code>use std::str::FromStr;\n\n#[derive(Debug)]\nenum Token {\n    A,\n    B,\n    C,\n}\n\n#[derive(Debug)]\nenum Error {\n    NotEnoughTokens,\n    InvalidToken,\n}\n\nimpl FromStr for Token {\n    type Err = Error;\n    fn from_str(s: &amp;str) -&gt; Result&lt;Self, Error&gt; {\n        match s {\n            \"A\" =&gt; Ok(Token::A),\n            \"B\" =&gt; Ok(Token::B),\n            \"C\" =&gt; Ok(Token::C),\n            _ =&gt; Err(Error::InvalidToken),\n        }\n    }\n}\n\nfn parse(line: &amp;str, skip: usize, count: usize) -&gt; Result&lt;Vec&lt;Token&gt;, Error&gt; {\n    line.split(',')\n        .skip(skip)\n        .map(str::parse)\n        .chain(Some(Err(Error::NotEnoughTokens)))\n        .take(count)\n        .collect()\n}\n\nfn main() {\n    println!(\"{:?}\", parse(\"A,B,C\", 0, 2));           // Ok([A, B])\n    println!(\"{:?}\", parse(\"A,B,C\", 0, 3));           // Ok([A, B, C])\n    println!(\"{:?}\", parse(\"A,B,C\", 0, 4));           // Err(NotEnoughTokens)\n    println!(\"{:?}\", parse(\"A,B,C,D\", 0, 4));         // Err(InvalidToken)\n\n    println!(\"{:?}\", parse(\"field1,B,C\", 1, 2));      // Ok([B, C])\n    println!(\"{:?}\", parse(\"field1,field2,C\", 2, 1)); // Ok([C])\n    println!(\"{:?}\", parse(\"field1,B,C\", 2, 2));      // Err(NotEnoughTokens)\n    println!(\"{:?}\", parse(\"f1,f2,f3,A\", 3, 1));      // Ok([A])\n}\n</code></pre>\n"}], "owner": {"reputation": 444, "user_id": 3422156, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/29af89a0e8be5cf63546304d02c8e2fb?s=128&d=identicon&r=PG&f=1", "display_name": "spease", "link": "https://stackoverflow.com/users/3422156/spease"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 75, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1504947796, "creation_date": 1504926586, "question_id": 46126772, "link": "https://stackoverflow.com/questions/46126772/best-way-to-have-a-count-resultusize-function-on-an-interator", "title": "Best way to have a count() -&gt; Result&lt;usize&gt; function on an interator?", "body": "<p>I'd like to do something like this:</p>\n\n<pre><code>let count = self.line_current[self.line_current_pos..]\n    .split(self.separator)\n    .take(i_count)\n    .map(|s|if s.is_empty() { Ok(()) } else { Err(s) })\n    .count()?;\nif count != i_count {\n    Err(\"Unexpected newline\")\n} else {\n    Ok(())\n}\n</code></pre>\n\n<p>This is for a line-oriented parsing function which skips an expected amount of separators.</p>\n\n<p>However the count() function on iterators consumes the iterator and does not work with std::ops::Try. Is there an elegant way to count the valid items but return an error immediately if one of the items does not match the criteria?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 1109, "user_id": 1772476, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/bc3dd034928abd20bb22de44a4846c93?s=128&d=identicon&r=PG", "display_name": "Timidger", "link": "https://stackoverflow.com/users/1772476/timidger"}, "edited": false, "score": 0, "creation_date": 1504887304, "post_id": 46120225, "comment_id": 79203899, "body": "This seems like a bug, I suggest reporting it on the <a href=\"https://github.com/rust-lang/rust/issues/29594\" rel=\"nofollow noreferrer\">issue tracking the stabilization of this feature</a>.  If you need to use <code>thread_local</code>, I suggest using the <a href=\"https://doc.rust-lang.org/std/macro.thread_local.html\" rel=\"nofollow noreferrer\">macro instead</a>"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1504887860, "post_id": 46120225, "comment_id": 79204200, "body": "Well, the program doesn&#39;t compile with <a href=\"http://play.integer32.com/?gist=d73b7eda888ec449d12dc5b259da0b4c&amp;version=nightly\" rel=\"nofollow noreferrer\">Integer32&#39;s playground</a>, although it does compile and run at <a href=\"https://play.rust-lang.org/?gist=c87d1ced47d6b76acfd3fc6daf90ce34&amp;version=nightly\" rel=\"nofollow noreferrer\">play.rust-lang.org</a>. This is probably a bug which has already been fixed."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1504887943, "post_id": 46120225, "comment_id": 79204236, "body": "Thank you for your answers. I will delete this question."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1504888004, "post_id": 46120225, "comment_id": 79204268, "body": "Wait! An answer that effectively points to a known bug and its fix can still be a good Q/A."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1504888078, "post_id": 46120225, "comment_id": 79204307, "body": "@E_net4 When I am at home, I will test with the last nightly version."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1504892767, "post_id": 46120225, "comment_id": 79206483, "body": "@E_net4 Actually, I tried with the last version of the nightly compiler and the bug is still there. I will report it in github."}], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 167, "favorite_count": 0, "answer_count": 0, "score": 3, "last_activity_date": 1505136797, "creation_date": 1504885674, "last_edit_date": 1505136797, "question_id": 46120225, "link": "https://stackoverflow.com/questions/46120225/side-effect-in-thread-local-static", "title": "Side effect in thread-local static", "body": "<p>This code</p>\n\n<pre><code>#![feature(thread_local)]\n\n#[thread_local]\npub static FOO: [&amp;str; 1] = [ \"Hello\" ];\n\nfn change_foo(s: &amp;'static str) {\n    FOO[0] = s;\n}\n\nfn main() {\n    println!(\"{}\", FOO[0]);\n    change_foo(\"Test\");\n    println!(\"{}\", FOO[0]);\n}\n</code></pre>\n\n<p>produces behavior I expect in debug:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Hello\nTest\n</code></pre>\n\n<p>but in release, it produces:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Hello\nHello\n</code></pre>\n\n<p>(tested in the playground, I have no Rust compiler on hand for now).</p>\n\n<p>But, in release, if I print the value in the function:</p>\n\n<pre><code>#![feature(thread_local)]\n\n#[thread_local]\npub static FOO: [&amp;str; 1] = [ \"Hello\" ];\n\nfn change_foo(s: &amp;'static str) {\n    print!(\"\");\n    FOO[0] = s;\n}\n\nfn main() {\n    println!(\"{}\", FOO[0]);\n    change_foo(\"Test\");\n    println!(\"{}\", FOO[0]);\n}\n</code></pre>\n\n<p>the output is ok.</p>\n\n<p>Why is this happening? Is the optimization too aggressive?</p>\n"}, {"tags": ["generics", "rust"], "answers": [{"tags": [], "owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "is_accepted": true, "score": 1, "last_activity_date": 1504836005, "creation_date": 1504836005, "answer_id": 46107532, "question_id": 46106993, "link": "https://stackoverflow.com/questions/46106993/expected-generic-type-but-found-concrete-type-that-implements-trait-bound/46107532#46107532", "title": "Expected generic type, but found concrete type (that implements trait bound)", "body": "<p>My understanding of Rust generics is that they are a little more like C++ templates than what you might be used to, in the sense that they are monomorphised and expanded at compile time.</p>\n\n<p>Essentially what this does:</p>\n\n<pre><code>fn some_method&lt;T&gt;(some_arg: u8) -&gt; (Mode, Vec&lt;T&gt;)\n    where T: Filterable,\n</code></pre>\n\n<p>...is (<em>if it compiled successfully</em>) create two versions of this method. One that expects to return <code>(Mode, Vec&lt;A&gt;)</code> and one that expects to return <code>(Mode, Vec&lt;B&gt;)</code>. This doesn't really make sense at all when you think about it that way.</p>\n\n<p>What you want, is to return a vector of things that implement the trait <code>Filterable</code>. So since traits are unsized, you need to wrap them in <em>something</em> that has a known size. <code>Box</code>'ing them does the trick here:</p>\n\n<pre><code>fn some_method(some_arg: u8) -&gt; (Mode, Vec&lt;Box&lt;Filterable&gt;&gt;)\n</code></pre>\n\n<p>This removes the generics entirely in favour of just returning a vector of boxed <code>Filterable</code>-implementing instances.</p>\n\n<p>Of course, the method body now also must become this:</p>\n\n<pre><code>match &amp;mode {\n    &amp;Mode::ZERO =&gt; (mode, vec![Box::new(A::new(0)), Box::new(A::new(1))]),\n    _ =&gt; (mode, vec![Box::new(B::new(\"Testing\".to_string()))]),\n}\n</code></pre>\n\n<p>Resulting in the code compiling.</p>\n\n<p><a href=\"http://play.integer32.com/?gist=59af2ca61ad2616eea451008ecf664f0&amp;version=stable\" rel=\"nofollow noreferrer\">Here it is running on the Playground</a></p>\n"}], "owner": {"reputation": 5087, "user_id": 2942471, "user_type": "registered", "accept_rate": 57, "profile_image": "https://graph.facebook.com/100000008666513/picture?type=large", "display_name": "manonthemat", "link": "https://stackoverflow.com/users/2942471/manonthemat"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 276, "favorite_count": 0, "accepted_answer_id": 46107532, "answer_count": 1, "score": 1, "last_activity_date": 1504836005, "creation_date": 1504831276, "question_id": 46106993, "link": "https://stackoverflow.com/questions/46106993/expected-generic-type-but-found-concrete-type-that-implements-trait-bound", "title": "Expected generic type, but found concrete type (that implements trait bound)", "body": "<p>I have two methods that do very similar things that I do want to refactor using generics and trait bounds.</p>\n\n<p>Here are the two working methods of my example.</p>\n\n<pre><code>fn some_method_a(some_arg: u8) -&gt; (Mode, Vec&lt;A&gt;)\n{\n    let mode = match some_arg {\n        0 =&gt; Mode::ZERO,\n        _ =&gt; Mode::NOTZERO,\n    };\n\n    let some_as = vec![A::new(0), A::new(1)];\n    (mode, some_as)\n}\n\nfn some_method_b(some_arg: u8) -&gt; (Mode, Vec&lt;B&gt;)\n{\n    let mode = match some_arg {\n        0 =&gt; Mode::ZERO,\n        _ =&gt; Mode::NOTZERO,\n    };\n\n    let some_bs = vec![B::new(\"Testing\".to_string())];\n    (mode, some_bs)\n}\n</code></pre>\n\n<p>This is the method that should replace the two.</p>\n\n<pre><code>fn some_method&lt;T&gt;(some_arg: u8) -&gt; (Mode, Vec&lt;T&gt;)\nwhere\n    T: Filterable,\n{\n    let mode = match some_arg {\n        0 =&gt; Mode::ZERO,\n        _ =&gt; Mode::NOTZERO,\n    };\n\n    match &amp;mode {\n        &amp;Mode::ZERO =&gt; (mode, vec![A::new(0), A::new(1)]),\n        _ =&gt; (mode, vec![B::new(\"Testing\".to_string())]),\n    }\n}\n</code></pre>\n\n<p>However, I'm getting this error now, even though A (and B) implement the Filterable trait, which I've specified as a trait bound for the method.</p>\n\n<pre><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:11:36\n   |\n11 |         &amp;Mode::ZERO =&gt; (mode, vec![A::new(0), A::new(1)]),\n   |                                    ^^^^^^^^^ expected type parameter, found struct `A`\n   |\n   = note: expected type `T`\n              found type `A`\n</code></pre>\n\n<p><a href=\"http://play.integer32.com/?gist=515cac89ddb8587bfb7b70ebda44a0f8&amp;version=stable\" rel=\"nofollow noreferrer\">Permalink to playground</a>\nHere's the rest of the program:</p>\n\n<pre><code>#[derive(Debug)]\nenum Mode {\n    ZERO,\n    NOTZERO,\n}\n\ntrait Filterable {\n    fn get_some_data(&amp;self) -&gt; u8 {\n        0\n    }\n}\n\nstruct A {\n    some_data: u8,\n}\n\nstruct B {\n    some_other_data: String,\n}\n\nimpl A {\n    fn new(some_data: u8) -&gt; A {\n        A { some_data }\n    }\n}\n\nimpl B {\n    fn new(some_other_data: String) -&gt; B {\n        B { some_other_data }\n    }\n}\n\nimpl Filterable for A {\n    fn get_some_data(&amp;self) -&gt; u8 {\n        self.some_data\n    }\n}\n\nimpl Filterable for B {}\n</code></pre>\n\n<p>What needs to be done for some_method to return a tuple of mode and a vector of either A or B structs?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1504808803, "post_id": 46102811, "comment_id": 79168580, "body": "Please shrink your example by removing irrelevant parts in order to create a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>. It also appears you are asking two questions. Please only ask one question per StackOverflow post. You can edit your question to improve it. Thanks :)"}, {"owner": {"reputation": 579, "user_id": 5200052, "user_type": "registered", "accept_rate": 58, "profile_image": "https://lh3.googleusercontent.com/-yKEVfR7OJPQ/AAAAAAAAAAI/AAAAAAAAChk/EG0bUUTki_M/photo.jpg?sz=128", "display_name": "Noqrax", "link": "https://stackoverflow.com/users/5200052/noqrax"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1504809407, "post_id": 46102811, "comment_id": 79168874, "body": "It is minimal already, there is only needed code, the error message is from fn process, third statement."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 2, "creation_date": 1504809763, "post_id": 46102811, "comment_id": 79169023, "body": "<a href=\"https://play.rust-lang.org/?gist=920371cfd1796115560c01bbd8536f0a&amp;version=stable\" rel=\"nofollow noreferrer\">This</a> is <i>more minimal</i>, right? ;-)"}], "answers": [{"tags": [], "owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "is_accepted": true, "score": 12, "last_activity_date": 1526398342, "last_edit_date": 1526398342, "creation_date": 1504809368, "answer_id": 46103025, "question_id": 46102811, "link": "https://stackoverflow.com/questions/46102811/why-i-can-not-use-u8-as-an-index-value-of-a-rust-array/46103025#46103025", "title": "Why I can not use u8 as an index value of a Rust array?", "body": "<p>You can look at the documentation for <code>SliceIndex</code> by <a href=\"https://doc.rust-lang.org/std/?search=sliceindex\" rel=\"noreferrer\">searching the Rust standard library</a>. The list of implementations of this trait at the bottom of the <a href=\"https://doc.rust-lang.org/std/slice/trait.SliceIndex.html#implementors\" rel=\"noreferrer\">documentation page</a> indicates that this trait is implemented for <code>usize</code> and various <code>usize</code> ranges.</p>\n\n<p>This should answer both of your questions: indexing is not implemented for <code>u8</code> type and you need to cast <code>u8</code> to <code>usize</code>.</p>\n\n<pre><code>(get_part(TABLE[left as usize], left) &lt;&lt; 4) + get_part(TABLE[right as usize], right)\n</code></pre>\n"}], "owner": {"reputation": 579, "user_id": 5200052, "user_type": "registered", "accept_rate": 58, "profile_image": "https://lh3.googleusercontent.com/-yKEVfR7OJPQ/AAAAAAAAAAI/AAAAAAAAChk/EG0bUUTki_M/photo.jpg?sz=128", "display_name": "Noqrax", "link": "https://stackoverflow.com/users/5200052/noqrax"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3913, "favorite_count": 0, "accepted_answer_id": 46103025, "answer_count": 1, "score": 7, "last_activity_date": 1590450476, "creation_date": 1504808451, "last_edit_date": 1590450476, "question_id": 46102811, "link": "https://stackoverflow.com/questions/46102811/why-i-can-not-use-u8-as-an-index-value-of-a-rust-array", "title": "Why I can not use u8 as an index value of a Rust array?", "body": "<p>I am new to Rust, and I am trying to write simple bitwise replacer.</p>\n\n<p>I have this code:</p>\n\n<pre><code>const TABLE: [u64; 8] = [\n    0xC462A5B9E8D703F1,\n    0x68239A5C1E47BD0F,\n    0xB3582FADE174C960,\n    0xC821D4F670A53E9B,\n    0x7F5A816D093EB42C,\n    0x5DF692CAB78143E0,\n    0x8E25691CF4B0DA37,\n    0x17ED05834FA69CB2,\n];\n\nfn get_part(u: u64, i: u8) -&gt; u8 {\n    ((u &amp; (0xFu64 &lt;&lt; (16 - i))) &gt;&gt; (16 - i)) as u8\n}\n\nfn process(o: u8, i1: u8, i2: u8) -&gt; u8 {\n    let left: u8 = o &gt;&gt; 4;\n    let right: u8 = o &amp; 0xF;\n    (get_part(TABLE[left], left) &lt;&lt; 4) + get_part(TABLE[right], right)\n}\n</code></pre>\n\n<p>I got errors like this one:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `u8: std::slice::SliceIndex&lt;[u64]&gt;` is not satisfied\n  --&gt; src/main.rs:19:15\n   |\n19 |     (get_part(TABLE[left], left) &lt;&lt; 4) + get_part(TABLE[right], right)\n   |               ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `std::slice::SliceIndex&lt;[u64]&gt;` is not implemented for `u8`\n   = note: required because of the requirements on the impl of `std::ops::Index&lt;u8&gt;` for `[u64]`\n\nerror[E0277]: the trait bound `u8: std::slice::SliceIndex&lt;[u64]&gt;` is not satisfied\n  --&gt; src/main.rs:19:51\n   |\n19 |     (get_part(TABLE[left], left) &lt;&lt; 4) + get_part(TABLE[right], right)\n   |                                                   ^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `std::slice::SliceIndex&lt;[u64]&gt;` is not implemented for `u8`\n   = note: required because of the requirements on the impl of `std::ops::Index&lt;u8&gt;` for `[u64]`\n</code></pre>\n\n<p>I don't understand why it's illegal to use <code>u8</code> as the index value. How can I convert <code>u8</code> to a compatible type? I don't even know which type is compatible.</p>\n"}]