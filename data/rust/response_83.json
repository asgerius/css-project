[{"tags": ["rust"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1470874321, "post_id": 38885060, "comment_id": 65131463, "body": "If I may ask: why does the function&#39;s argument need to be <code>&#39;static</code>? Why not a normal generic lifetime?"}, {"owner": {"reputation": 30697, "user_id": 31667, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/082b069c287878a1bd5731f44c8f10e7?s=128&d=identicon&r=PG", "display_name": "viraptor", "link": "https://stackoverflow.com/users/31667/viraptor"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1470875622, "post_id": 38885060, "comment_id": 65131763, "body": "Because it&#39;s part of a solution to <a href=\"https://stackoverflow.com/questions/38884989/where-did-the-static-lifetime-come-from\" title=\"where did the static lifetime come from\">stackoverflow.com/questions/38884989/&hellip;</a> But this question is interesting to me on its own."}], "answers": [{"tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": false, "score": 2, "last_activity_date": 1470875664, "creation_date": 1470875664, "answer_id": 38885574, "question_id": 38885060, "link": "https://stackoverflow.com/questions/38885060/way-to-create-inline-static-values/38885574#38885574", "title": "Way to create inline static values", "body": "<p>Currently, at this time, there is not. You have to write your initial code.</p>\n"}, {"comments": [{"owner": {"reputation": 30697, "user_id": 31667, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/082b069c287878a1bd5731f44c8f10e7?s=128&d=identicon&r=PG", "display_name": "viraptor", "link": "https://stackoverflow.com/users/31667/viraptor"}, "edited": false, "score": 0, "creation_date": 1470877222, "post_id": 38885703, "comment_id": 65132051, "body": "I do like this! Thanks."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 3, "last_activity_date": 1470876852, "creation_date": 1470876852, "answer_id": 38885703, "question_id": 38885060, "link": "https://stackoverflow.com/questions/38885060/way-to-create-inline-static-values/38885703#38885703", "title": "Way to create inline static values", "body": "<p>If you're doing this <em>a lot</em>, and for a <em>specific</em> type of array, you can write a macro to simplify things:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>// \"Constant Array of STR\"\nmacro_rules! castr {\n    ($($es:expr),* $(,)*) =&gt; {\n        {\n            const C: &amp;'static [&amp;'static str] = &amp;[$($es),*];\n            C\n        }\n    };\n}\n\nfn main() {\n    test(castr![\"a\", \"b\", \"penguin\"]);\n}\n\nfn test(ss: &amp;'static [&amp;'static str]) {\n    println!(\"{:?}\", ss);\n}\n</code></pre>\n"}], "owner": {"reputation": 30697, "user_id": 31667, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/082b069c287878a1bd5731f44c8f10e7?s=128&d=identicon&r=PG", "display_name": "viraptor", "link": "https://stackoverflow.com/users/31667/viraptor"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 91, "favorite_count": 0, "accepted_answer_id": 38885703, "answer_count": 2, "score": 1, "last_activity_date": 1470876852, "creation_date": 1470871343, "question_id": 38885060, "link": "https://stackoverflow.com/questions/38885060/way-to-create-inline-static-values", "title": "Way to create inline static values", "body": "<p>Sometimes I'd like to use some complex values with static lifetime, but defining them explicitly is tedious. Is there a way to turn something like this:</p>\n\n<pre><code>const PATH: &amp;'static [&amp;'static str] = &amp;[\"foo\", \"bar\", \"baz\"];\n...\n    do_things(PATH);\n</code></pre>\n\n<p>into something closer to this?</p>\n\n<pre><code>do_things(&amp;[\"foo\", \"bar\", \"baz\"]);\n</code></pre>\n\n<p>The function takes a <code>&amp;'static [&amp;'static str]</code> argument.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1470875055, "post_id": 38884989, "comment_id": 65131636, "body": "Could you please add the full compiler output to your question? It actually matters and isn&#39;t just noise :)"}, {"owner": {"reputation": 30697, "user_id": 31667, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/082b069c287878a1bd5731f44c8f10e7?s=128&d=identicon&r=PG", "display_name": "viraptor", "link": "https://stackoverflow.com/users/31667/viraptor"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1470875522, "post_id": 38884989, "comment_id": 65131747, "body": "@LukasKalbertodt Attached. This code is complete for rust playground if you want to play with it. (<a href=\"http://play.integer32.com/?gist=57216402bc13d3acd623ccd47e89dda0\" rel=\"nofollow noreferrer\">play.integer32.com/?gist=57216402bc13d3acd623ccd47e89dda0</a>)"}], "answers": [{"comments": [{"owner": {"reputation": 30697, "user_id": 31667, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/082b069c287878a1bd5731f44c8f10e7?s=128&d=identicon&r=PG", "display_name": "viraptor", "link": "https://stackoverflow.com/users/31667/viraptor"}, "edited": false, "score": 1, "creation_date": 1470877567, "post_id": 38885733, "comment_id": 65132109, "body": "Thanks, this makes a lot of sense. I ended up posting this case as a &quot;this error doesn&#39;t really help&quot; issue in rust as well (<a href=\"https://github.com/rust-lang/rust/issues/35580\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/35580</a>)"}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 1, "creation_date": 1470880273, "post_id": 38885733, "comment_id": 65132694, "body": "Great answer Lukas. I know we&#39;re not supposed to write comments like this but.. it really is a great answer. So (thumbsup)."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 7, "last_activity_date": 1470877179, "creation_date": 1470877179, "answer_id": 38885733, "question_id": 38884989, "link": "https://stackoverflow.com/questions/38884989/where-did-the-static-lifetime-come-from/38885733#38885733", "title": "Where did the &#39;static lifetime come from", "body": "<p>It's quite a bit going on here. In order to explain it, let's look at this even more simplified version of your problem. To avoid hiding things, I also replaced the <code>try!()</code> with its <a href=\"https://doc.rust-lang.org/std/macro.try!.html\">explicit form</a>.</p>\n\n<pre><code>enum SomeError&lt;'a&gt; {\n    Something(&amp;'a str),\n    Other,\n}\n\n// ... impls Debug, Display, Error for SomeError ...\n\nfn do_stuff(doc: &amp;u32) -&gt; Result&lt;(), SomeError&gt; { Ok(()) }\n\nfn get_things(doc: &amp;Vec&lt;u32&gt;) -&gt; Result&lt;(), Box&lt;Error&gt;&gt; {\n    match do_stuff(&amp;v[0]) {   // `try!` expands into this match \n        Ok(v) =&gt; Ok(v),\n        Err(e) =&gt; Err(e.into()),\n    }  //             ^^^^^^^^--- #1\n\n}\n\nfn main() {\n    let _ = get_things(&amp;vec![]);\n}\n</code></pre>\n\n<p>This is the first thing that might be confusing: <code>try!</code> calls <code>std::convert::From::from(e)</code> (or equivalent, but shorter: <code>e.into()</code>). This means that the interesting spot is only the part marked with <code>#1</code>.</p>\n\n<p>So what is going on <em>there</em>?</p>\n\n<p>Calling <code>into()</code> means that the Rust compiler has to search for some implementation of <code>Into&lt;Box&lt;Error&gt;&gt;</code> for <code>SomeError</code>. Through the magic <code>impl&lt;T, U&gt; Into&lt;U&gt; for T where U: From&lt;T&gt;</code> indirection, the compiler finds a few implementations that might work out, notably this one:</p>\n\n<pre><code>impl&lt;'a, E: Error + 'a&gt; From&lt;E&gt; for Box&lt;Error + 'a&gt;\n</code></pre>\n\n<p>Here we see another key point: the type <code>Box&lt;Error + 'a&gt;</code> has a lifetime bound in it. The type in plain English would read something like: \"a boxed type that implements the trait <code>Error</code> and is alive at least for the lifetime <code>'a</code>\".</p>\n\n<p>And now we look at our function signature and see <code>Result&lt;(), Box&lt;Error&gt;&gt;</code>: it doesn't have a lifetime bound in it! Well... we didn't explicitly write one out, but the compiler adds one anyway, because it's the only way to work with such boxed traits. <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0599-default-object-bound.md\">This RFC</a> is about default lifetime bounds that the compilers adds automagically. And for <code>Box&lt;Trait&gt;</code> the lifetime bound <code>'static</code> is added. Thus the return type explicitly written out is <code>Result&lt;(), Box&lt;Error + 'static&gt;&gt;</code>. </p>\n\n<p>To make your code compile, add an explicit lifetime to the input parameter <em>and</em> to the output type, like so:</p>\n\n<pre><code>fn get_things&lt;'a&gt;(doc: &amp;'a Vec&lt;u32&gt;) -&gt; Result&lt;(), Box&lt;Error + 'a&gt;&gt; {\n    ...\n}\n</code></pre>\n\n<p>That way you can avoid the <code>'static</code> lifetime bound added by default and tell the compiler that the thing in your box only has to life as long as your input parameter.</p>\n"}], "owner": {"reputation": 30697, "user_id": 31667, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/082b069c287878a1bd5731f44c8f10e7?s=128&d=identicon&r=PG", "display_name": "viraptor", "link": "https://stackoverflow.com/users/31667/viraptor"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 697, "favorite_count": 1, "accepted_answer_id": 38885733, "answer_count": 1, "score": 2, "last_activity_date": 1470877179, "creation_date": 1470870850, "last_edit_date": 1470875447, "question_id": 38884989, "link": "https://stackoverflow.com/questions/38884989/where-did-the-static-lifetime-come-from", "title": "Where did the &#39;static lifetime come from", "body": "<p>I've got the following code (doesn't make much sense, just a minimised test case):</p>\n\n<pre><code>extern crate rustc_serialize;\n\nuse rustc_serialize::json::Json;\nuse std::error::Error;\n\nstruct SomeStruct;\n\n#[derive(Debug)]\nenum SomeError&lt;'a&gt; {\n    Something(&amp;'a str),\n    Other,\n}\n\nfn do_stuff(doc: &amp;Json) -&gt; Result&lt;SomeStruct, SomeError&gt; {\n    Ok(SomeStruct)\n}\n\nfn get_things(doc: &amp;Vec&lt;Json&gt;) -&gt; Result&lt;SomeStruct, Box&lt;Error&gt;&gt; {\n    let res = try!(doc.get(0).ok_or(SomeError::Other));\n    Ok(try!(do_stuff(&amp;res)))                             //// line 20\n}\n\nfn main() {\n    let _ = get_things(&amp;vec!(Json::Null));\n}\n\nimpl&lt;'a&gt; std::fmt::Display for SomeError&lt;'a&gt; {\n    fn fmt(&amp;self, f: &amp;mut std::fmt::Formatter) -&gt; Result&lt;(), std::fmt::Error&gt; {\n        write!(f, \"blah\")\n    }\n}\nimpl&lt;'a&gt; Error for SomeError&lt;'a&gt; {\n    fn description(&amp;self) -&gt; &amp;str { \"blah\" }\n}\n</code></pre>\n\n<p>This fails with a type mismatch at line 20: <code>expected std::result::Result&lt;SomeStruct, Box&lt;std::error::Error + 'static&gt;&gt;, found std::result::Result&lt;SomeStruct, Box&lt;std::error::Error&gt;&gt;</code></p>\n\n<p>I don't understand where did the <code>'static</code> lifetime requirement come from suddenly. If I change the enum to use <code>Something(&amp;'static str)</code> it works just fine, but why can't I use a less restrictive value here?</p>\n\n<p>The error mentiones that <code>doc</code> is the borrowed content that the error cannot outlive... but there doesn't seem to be any relation between those two types.</p>\n\n<p>Full error:</p>\n\n<pre><code>error: cannot infer an appropriate lifetime for lifetime parameter in function call due to conflicting requirements [E0495]\n  --&gt; src/main.rs:19:24\n19 |&gt;     let res = try!(doc.get(0).ok_or(SomeError::Other));\n   |&gt;                        ^^^\nsrc/main.rs:19:15: 19:55: note: in this expansion of try! (defined in &lt;std macros&gt;)\nnote: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the block at 18:65...\n  --&gt; src/main.rs:18:66\n18 |&gt; fn get_things(doc: &amp;Vec&lt;Json&gt;) -&gt; Result&lt;SomeStruct, Box&lt;Error&gt;&gt; {\n   |&gt;                                                                  ^\nnote: ...so that reference does not outlive borrowed content\n  --&gt; src/main.rs:19:20\n19 |&gt;     let res = try!(doc.get(0).ok_or(SomeError::Other));\n   |&gt;                    ^^^\nsrc/main.rs:19:15: 19:55: note: in this expansion of try! (defined in &lt;std macros&gt;)\nnote: but, the lifetime must be valid for the static lifetime...\nnote: ...so that types are compatible (expected std::result::Result&lt;SomeStruct, Box&lt;std::error::Error + 'static&gt;&gt;, found std::result::Result&lt;SomeStruct, Box&lt;std::error::Error&gt;&gt;)\n --&gt; &lt;std macros&gt;:5:8\n5 |&gt; return $ crate :: result :: Result :: Err (\n  |&gt;        ^\nsrc/main.rs:20:8: 20:28: note: in this expansion of try! (defined in &lt;std macros&gt;)\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470859458, "post_id": 38882269, "comment_id": 65126093, "body": "See also <a href=\"http://stackoverflow.com/q/34419561/155423\">stackoverflow.com/q/34419561/155423</a>"}], "owner": {"reputation": 606, "user_id": 3496382, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/58b1d5358aca39b65581c1a1c2750dc2?s=128&d=identicon&r=PG&f=1", "display_name": "gan_", "link": "https://stackoverflow.com/users/3496382/gan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 149, "favorite_count": 0, "closed_date": 1471197051, "answer_count": 0, "score": 5, "last_activity_date": 1470860368, "creation_date": 1470858441, "last_edit_date": 1470860368, "question_id": 38882269, "link": "https://stackoverflow.com/questions/38882269/upcast-a-box-when-returning-in-rust", "closed_reason": "Duplicate", "title": "Upcast a Box when returning in Rust", "body": "<p>I am having a weird problem:</p>\n\n<pre><code>trait A {}\ntrait B : A {}\n\nstruct MyStruct {}\nimpl A for MyStruct {}\nimpl B for MyStruct {}\n\nfn fun_b() -&gt; Box&lt;B&gt; {\n    Box::new(MyStruct{})\n}\n\nfn fun_a() -&gt; Box&lt;A&gt; {\n    /*\n    error: mismatched types [E0308]\n    note: expected type `Box&lt;A + 'static&gt;`\n    note:    found type `Box&lt;B + 'static&gt;`\n    */\n    fun_b()\n}\n\nfn main() {\n    fun_a();\n    fun_b();\n}\n</code></pre>\n\n<p>It compiles if I replace <code>fun_a</code> with:</p>\n\n<pre><code>fn fun_a() -&gt; Box&lt;A&gt; {\n    Box::new(MyStruct{})\n}\n</code></pre>\n\n<p>(which does exactly the same as <code>fun_b</code>)</p>\n\n<p>Do I need to explicitly cast here? Why, and more importantly how?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470840727, "post_id": 38875883, "comment_id": 65115031, "body": "There&#39;s also the obvious &quot;don&#39;t use globals&quot; answer: explicitly pass references to the things that you&#39;ve loaded. See also <a href=\"http://stackoverflow.com/q/27791532/155423\">How do I create a global, mutable singleton?</a> which was originally in the context of OpenGL bindings."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470840938, "post_id": 38875883, "comment_id": 65115178, "body": "Also <a href=\"https://github.com/tomaka/vulkano\" rel=\"nofollow noreferrer\">vulkano</a> probably has some ideas about how to manage this state."}, {"owner": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470841876, "post_id": 38875883, "comment_id": 65115834, "body": "@Shepmaster I have already looked at vulkano, it stores the instance pointers as an <code>Arc</code> in various structs. I assume one would implement deref for <code>SingletonReader</code> with Mutex&#39;s <code>get_mut</code>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470842134, "post_id": 38875883, "comment_id": 65116028, "body": "<code>Arc</code> isn&#39;t a synchronization tool, it&#39;s just for shared ownership. Accessing an <code>Arc</code> should basically be a pointer deref; cloning or dropping it is an atomic variable increment / decrement. I believe that&#39;s how I would implement <code>Deref</code> though. I probably should try to implement it one of these days ^_^."}, {"owner": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470846304, "post_id": 38875883, "comment_id": 65118849, "body": "@Shepmaster But I am not talking about an Arc. I need a global variable that I can mutate, and also access it as if it were immutable. OpenGL is different, the context can&#39;t be easily shared, in Vulkan you can call the functions in different threads. I guess I need to create something like a cell that can be mutated with a lock, but also allows access to immutable stuff without needing to lock."}, {"owner": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470847619, "post_id": 38875883, "comment_id": 65119596, "body": "What I was actually looking for was an <code>RWLock</code> but I think it might actually be better to just use an Arc for the function pointers and explicitly copy them into various structs."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470847802, "post_id": 38875883, "comment_id": 65119679, "body": "Having something that you can lock sometimes and not lock other times doesn&#39;t really make sense ;-). You&#39;d always have the potential for a race condition. Instead, construct it once somewhere high up (e.g. <code>main</code>) where you can mutate it, then transfer ownership (or share it with <code>Rc</code> / Arc`) to the places that need it immutably."}], "owner": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 56, "favorite_count": 0, "closed_date": 1470840137, "answer_count": 0, "score": 2, "last_activity_date": 1470840649, "creation_date": 1470838365, "last_edit_date": 1470840649, "question_id": 38875883, "link": "https://stackoverflow.com/questions/38875883/is-it-possible-initialize-a-global-variable-at-runtime-without-a-mutex", "closed_reason": "Duplicate", "title": "Is it possible initialize a global variable at runtime without a mutex?", "body": "<pre><code>pub struct FunctionPointers{}\n\nlazy_static! {\n    pub static ref FP: FunctionPointers = FunctionPointers{};\n}\n</code></pre>\n\n<p>I am currently experimenting with Vulkan and I need to load the function pointers once after I have created the instance.</p>\n\n<p>I want to write something like this</p>\n\n<pre><code>FP = load_function_pointers(&amp;instance);\n</code></pre>\n\n<p>And then:</p>\n\n<pre><code>FP.CreateDevice(...);\n</code></pre>\n\n<p>Which probably needs a lock just to be safe, but after that it can be safely accessed and I don't want to lock it every time I want to call a function.</p>\n\n<p>What are my options?</p>\n"}, {"tags": ["vector", "rust", "borrowing"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 3, "creation_date": 1470819795, "post_id": 38868105, "comment_id": 65099912, "body": "have you looked at any of the other &quot;x does not live long enough&quot; stackoverflow questions? You are creating a new <code>String</code> in the <code>lex</code> function and then trying to return references into that <code>String</code>, even though that <code>String</code> does not outlive the <code>lex</code> function, so your references would point into the void."}, {"owner": {"reputation": 61, "user_id": 5708972, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/gdYFd.jpg?s=128&g=1", "display_name": "Alex G", "link": "https://stackoverflow.com/users/5708972/alex-g"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1470820031, "post_id": 38868105, "comment_id": 65100064, "body": "Would I have to define the string outside the function and pass in a mutable reference or is there a way to extend the lifetime of a string defined inside the function so that it can outlive the <code>lex</code> function?"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1470820191, "post_id": 38868105, "comment_id": 65100166, "body": "you can&#39;t extend a lifetime, ever. I have a solution to your problem, but you need to change your question if you don&#39;t want it marked as a duplicate. It should address why it is different than all the other questions that ask how to return references to an owned object."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1470831111, "post_id": 38868105, "comment_id": 65107613, "body": "The duplicate will be <a href=\"http://stackoverflow.com/q/29428227/155423\">stackoverflow.com/q/29428227/155423</a>; but you can have a bit of time to make it different."}], "answers": [{"comments": [{"owner": {"reputation": 61, "user_id": 5708972, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/gdYFd.jpg?s=128&g=1", "display_name": "Alex G", "link": "https://stackoverflow.com/users/5708972/alex-g"}, "edited": false, "score": 0, "creation_date": 1471148533, "post_id": 38921366, "comment_id": 65233794, "body": "Thanks for your help. That makes a lot of sense now."}], "tags": [], "owner": {"reputation": 1120, "user_id": 2647192, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b37079565635fea4d46f300ce26766e1?s=128&d=identicon&r=PG", "display_name": "allTwentyQuestions", "link": "https://stackoverflow.com/users/2647192/alltwentyquestions"}, "is_accepted": true, "score": 5, "last_activity_date": 1471016522, "last_edit_date": 1471016522, "creation_date": 1471015207, "answer_id": 38921366, "question_id": 38868105, "link": "https://stackoverflow.com/questions/38868105/unable-to-return-a-vector-of-string-slices-borrowed-value-does-not-live-long-en/38921366#38921366", "title": "Unable to return a vector of string slices: borrowed value does not live long enough", "body": "<p>The problem is that you're allocating a new <code>String</code> (<code>token_string</code>) inside the <code>lex</code> function and then returning an array of references to it, but <code>token_string</code> will get dropped (and the memory freed) as soon as it falls out of scope at the end of the function.</p>\n\n<pre><code>fn lex(s: &amp;String) -&gt; Vec&lt;&amp;str&gt; {\n    let token_string: String = s.replace(\"(\", \" ( \") // &lt;-- new String allocated \n        .replace(\")\", \" ) \"); \n\n    let token_list: Vec&lt;&amp;str&gt; = token_string.split_whitespace()\n        .collect();\n    token_list // &lt;-- this is just an array of wide pointers into token_string\n} // &lt;-- token_string gets freed here, so the returned pointers\n  //     would be pointing to memory that's already been dropped!\n</code></pre>\n\n<p>There's a couple of ways to address this. One would be to force the caller of <code>lex</code> to pass in the buffer that you want to use to collect into. This would change the signature to <code>fn lex&lt;'a&gt;(input: &amp;String, buffer: &amp;'a mut String) -&gt; Vec&lt;&amp;'a str&gt;</code> This signature would specify that the lifetimes of the returned <code>&amp;str</code>s will be at least as long as the lifetime of the buffer that's passed in.</p>\n\n<p>Another way would be to just return a <code>Vec&lt;String&gt;</code> instead of <code>Vec&lt;&amp;str&gt;</code> if you can tolerate the extra allocations.</p>\n"}], "owner": {"reputation": 61, "user_id": 5708972, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/gdYFd.jpg?s=128&g=1", "display_name": "Alex G", "link": "https://stackoverflow.com/users/5708972/alex-g"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1381, "favorite_count": 2, "accepted_answer_id": 38921366, "answer_count": 1, "score": 5, "last_activity_date": 1471016522, "creation_date": 1470817960, "last_edit_date": 1495541289, "question_id": 38868105, "link": "https://stackoverflow.com/questions/38868105/unable-to-return-a-vector-of-string-slices-borrowed-value-does-not-live-long-en", "title": "Unable to return a vector of string slices: borrowed value does not live long enough", "body": "<p>I'm new to Rust and I'm having some trouble with the borrow checker. I don't understand why this code won't compile. Sorry if this is close to a previously answered question but I can't seem to find a solution in the other questions I've looked at. </p>\n\n<p>I understand the similarity to <a href=\"https://stackoverflow.com/q/29428227/155423\">Return local String as a slice (&amp;str)</a> but in that case it is just one string being returned and not enough for me to reason with my code in which I am trying to return a vector. From what I understand, I am trying to return references to <code>str</code> types that will go out of scope at the end of the function block and so should I be mapping that vector of <code>&amp;str</code> into a vector of <code>String</code>? I am not so concerned about the performance effects of converting <code>&amp;str</code> to <code>String</code>. First I'd just like to get it working.</p>\n\n<p>This is the code, the error is in the <code>lex</code> function.</p>\n\n<pre><code>use std::io::prelude::*;\nuse std::fs::File;\nuse std::env;\n\nfn open(mut s: &amp;mut String, filename: &amp;String) {\n    let mut f = match File::open(&amp;filename) {\n        Err(_) =&gt; panic!(\"Couldn't open file\"),\n        Ok(file) =&gt; file,\n    };\n    match f.read_to_string(&amp;mut s) {\n        Err(_) =&gt; panic!(\"Couldn't read file\"),\n        Ok(_) =&gt; println!(\"File read successfully\"),\n    };\n\n}\n\nfn lex(s: &amp;String) -&gt; Vec&lt;&amp;str&gt; {\n    let token_string: String = s.replace(\"(\", \" ( \")\n        .replace(\")\", \" ) \");\n\n    let token_list: Vec&lt;&amp;str&gt; = token_string.split_whitespace()\n        .collect();\n    token_list\n}\n\nfn main() {\n    let args: Vec&lt;_&gt; = env::args().collect();\n    if args.len() &lt; 2 {\n        panic!(\"Please provide a filename\");\n    } else {\n        let ref filename = args[1];\n\n        let mut s = String::new();\n        open(&amp;mut s, filename);\n        let token_list: Vec&lt;&amp;str&gt; = lex(&amp;s);\n        println!(\"{:?}\", token_list);\n    }\n}\n</code></pre>\n\n<p>Here is the error message</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: borrowed value does not live long enough\n        self.0.borrow().values.get(idx)\n        ^~~~~~~~~~~~~~~\nreference must be valid for the anonymous lifetime #1 defined on the block at 23:54...\n    pub fn value(&amp;self, idx: usize) -&gt; Option&lt;&amp;Value&gt; {\n                                                      ^\nnote: ...but borrowed value is only valid for the block at 23:54\n    pub fn value(&amp;self, idx: usize) -&gt; Option&lt;&amp;Value&gt; {\n                                                      ^\n</code></pre>\n\n<p>I'm finding it hard to reason with this code because with my level of experience with Rust I can't visualise the lifetimes of these variables. Any help would be appreciated as I've spent an hour or two trying to figure this out.</p>\n"}, {"tags": ["rust", "tuples"], "answers": [{"tags": [], "owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "is_accepted": false, "score": 13, "last_activity_date": 1470812721, "creation_date": 1470812721, "answer_id": 38866416, "question_id": 38863781, "link": "https://stackoverflow.com/questions/38863781/how-to-create-a-tuple-from-a-vector/38866416#38866416", "title": "How to create a tuple from a vector?", "body": "<p>You can't use Python-like list comprehension, as Rust doesn't have it. The closest thing is to do it explicitly via another iterator. You can't directly collect into a tuple, so you need another explicit step to convert the vector:</p>\n\n<pre><code>use std::str::FromStr;\n\nfn main() {\n    let some_str = \"123,321,312\";\n    let num_pair_str = some_str.split(',').collect::&lt;Vec&lt;_&gt;&gt;();\n    if num_pair_str.len() == 3 {\n        let v = num_pair_str.iter().map(|s| i32::from_str(s).expect(\"failed to parse number\"))\n            .collect::&lt;Vec&lt;_&gt;&gt;();\n        let num_pair: (i32, i32, i32) = (v[0], v[1], v[2]);\n        println!(\"Tuple {:?}\", num_pair);\n    }\n}\n</code></pre>\n\n<p>If you want to avoid the intermediate vectors you can do something like the following:</p>\n\n<pre><code>use std::str::FromStr;\n\nfn main() {\n    let some_str = \"123,321,312\";\n    let it0 = some_str.split(',');\n    if it0.clone().count() == 3 {\n        let mut it = it0.map(|s| i32::from_str(s).expect(\"failed to parse number\"));\n        let num_pair: (i32, i32, i32) =\n            (it.next().unwrap(), it.next().unwrap(), it.next().unwrap());\n        println!(\"Tuple {:?}\", num_pair);\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 1045, "user_id": 1296256, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cb6dffafec7ab5adb9b4d50b369d5bf0?s=128&d=identicon&r=PG", "display_name": "rsalmei", "link": "https://stackoverflow.com/users/1296256/rsalmei"}, "edited": false, "score": 0, "creation_date": 1610916556, "post_id": 38906013, "comment_id": 116277678, "body": "Wow, first recursive macro I&#39;ve ever seen \ud83d\udc4d"}], "tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": false, "score": 6, "last_activity_date": 1470949025, "creation_date": 1470949025, "answer_id": 38906013, "question_id": 38863781, "link": "https://stackoverflow.com/questions/38863781/how-to-create-a-tuple-from-a-vector/38906013#38906013", "title": "How to create a tuple from a vector?", "body": "<p>You can declare a trait with a method similar to <a href=\"https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.collect\" rel=\"noreferrer\"><code>Iterator::collect</code></a> and implement it to collect to various tuples sizes:</p>\n\n<pre><code>fn main() {\n    // Example with some simplifications\n    // Note that there is no extra allocation\n    let num_pair: (i32, i32, i32) = \"123,321,312\"\n        .split(',')\n        .map(|s| s.parse().expect(\"an i32\"))\n        .try_collect()\n        .expect(\"a 3-tuple of i32\");\n    assert_eq!(num_pair, (123, 321, 312));\n}\n\ntrait TryCollect&lt;T&gt; {\n    fn try_collect(&amp;mut self) -&gt; Option&lt;T&gt;;\n}\n\nmacro_rules! impl_try_collect_tuple {\n    () =&gt; { };\n    ($A:ident $($I:ident)*) =&gt; {\n        impl_try_collect_tuple!($($I)*);\n\n        impl&lt;$A: Iterator&gt; TryCollect&lt;($A::Item, $($I::Item),*)&gt; for $A {\n            fn try_collect(&amp;mut self) -&gt; Option&lt;($A::Item, $($I::Item),*)&gt; {\n                let r = (try_opt!(self.next()),\n                         // hack: we need to use $I in the expasion\n                         $({ let a: $I::Item = try_opt!(self.next()); a}),* );\n                Some(r)\n            }\n        }\n    }\n}\n\nmacro_rules! try_opt {\n    ($e:expr) =&gt; (match $e { Some(e) =&gt; e, None =&gt; return None })\n}\n\n// implement TryCollect&lt;T&gt; where T is a tuple with size 1, 2, .., 10\nimpl_try_collect_tuple!(A A A A A A A A A A);\n</code></pre>\n\n<p>Other examples:</p>\n\n<pre><code>fn main() {\n    let mut iter = (0..7).into_iter();\n\n    let (a, b, c) = iter.try_collect().unwrap();\n    assert_eq!((a, b, c), (0, 1, 2));\n\n    let (d, e) = iter.try_collect().unwrap();\n    assert_eq!((d, e), (3, 4));\n\n    let (f,) = iter.try_collect().unwrap();\n    assert_eq!(f, 5);\n\n    let a: Option&lt;(u32, u32)&gt; = iter.try_collect();\n    assert_eq!(None, a);\n}\n</code></pre>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 13214, "favorite_count": 1, "answer_count": 2, "score": 15, "last_activity_date": 1471003942, "creation_date": 1470800012, "last_edit_date": 1471003942, "question_id": 38863781, "link": "https://stackoverflow.com/questions/38863781/how-to-create-a-tuple-from-a-vector", "title": "How to create a tuple from a vector?", "body": "<p>Here's an example that splits a string and parses each item, putting it into a tuple whose size is known at compile time.</p>\n\n<pre><code>use std::str::FromStr;\n\nfn main() {\n    let some_str = \"123,321,312\";\n    let num_pair_str = some_str.split(',').collect::&lt;Vec&lt;&amp;str&gt;&gt;();\n    if num_pair_str.len() == 3 {\n        let num_pair: (i32, i32, i32) = (\n            i32::from_str(num_pair_str[0]).expect(\"failed to parse number\"),\n            i32::from_str(num_pair_str[1]).expect(\"failed to parse number\"),\n            i32::from_str(num_pair_str[2]).expect(\"failed to parse number\"),\n        );\n        println!(\"Tuple {:?}\", num_pair);\n    }\n}\n</code></pre>\n\n<p>Is there a way to avoid repetition parsing the numbers? </p>\n\n<p>This is an example of what it might look like if Rust supported Python-like comprehensions:</p>\n\n<pre><code>let num_pair: (i32, i32, i32) = (\n    i32::from_str(num_pair_str[i]).expect(\"failed to parse number\")\n    for i in 0..3\n);\n</code></pre>\n\n<p>Is it possible to declare the tuple in a way that expands the vector?</p>\n"}, {"tags": ["arrays", "performance", "rust", "unsafe"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470796882, "post_id": 38863315, "comment_id": 65090184, "body": "See also <a href=\"http://stackoverflow.com/q/20734743/155423\">stackoverflow.com/q/20734743/155423</a>, <a href=\"http://stackoverflow.com/q/27062874/155423\">stackoverflow.com/q/27062874/155423</a>, <a href=\"http://stackoverflow.com/q/27393166/155423\">stackoverflow.com/q/27393166/155423</a>, <a href=\"http://stackoverflow.com/q/28656387/155423\">stackoverflow.com/q/28656387/155423</a>, <a href=\"http://stackoverflow.com/q/29530011/155423\">stackoverflow.com/q/29530011/155423</a>, <a href=\"http://stackoverflow.com/q/31360993/155423\">stackoverflow.com/q/31360993/155423</a>."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470797703, "post_id": 38863315, "comment_id": 65090374, "body": "Checked all the other questions, don&#39;t think they&#39;re direct duplicates (though some are close)."}], "answers": [{"comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1470797428, "post_id": 38863480, "comment_id": 65090316, "body": "How would the <code>initialize_mystruct</code> fit in here? Also, I assume Rust is smart enough to detect that the iterator has a fixed size and not resize the vector while running collect?"}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 1, "creation_date": 1470799148, "post_id": 38863480, "comment_id": 65090648, "body": "@ideasman42 You&#39;d use <code>MyStruct</code>&#39;s constructor instead of <code>initialize_mystruct</code>, and then do <code>.map(MyStruct::new)</code>. Rust knows that <code>map</code> preserves the length and will allocate properly, yes."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470831334, "post_id": 38863480, "comment_id": 65107776, "body": "And since I used a <i>tuple struct</i>, <code>MyStruct&#39;s</code> constructor is just <code>MyStruct</code>, the function called in the <code>map</code>."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 6, "last_activity_date": 1470798145, "last_edit_date": 1470798145, "creation_date": 1470797323, "answer_id": 38863480, "question_id": 38863315, "link": "https://stackoverflow.com/questions/38863315/how-to-perform-efficient-vector-initialization-in-rust/38863480#38863480", "title": "How to perform efficient vector initialization in Rust?", "body": "<p>Just use <code>map</code> and <code>collect</code>.</p>\n\n<pre><code>struct MyStruct(usize);\n\nfn create_mystructs(n: usize) -&gt; Vec&lt;MyStruct&gt; {\n    (0..n).map(MyStruct).collect()\n}\n</code></pre>\n\n<p>\"Initializing\" doesn't make sense in safe Rust because you'd need to have the ability to access the uninitialized values, which is unsafe. The <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.size_hint\" rel=\"noreferrer\"><code>Iterator::size_hint</code></a> method can be used when collecting into a container to ensure that a minimum number of allocations is made.</p>\n\n<p>Basically, I'd trust that the optimizer will do the right thing here. If it doesn't, I'd believe that it eventually will.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1984, "favorite_count": 1, "answer_count": 1, "score": 1, "last_activity_date": 1470798145, "creation_date": 1470796064, "last_edit_date": 1470797081, "question_id": 38863315, "link": "https://stackoverflow.com/questions/38863315/how-to-perform-efficient-vector-initialization-in-rust", "title": "How to perform efficient vector initialization in Rust?", "body": "<p>What's a good way to fill in a vector of structs in Rust where:</p>\n\n<ul>\n<li>The size is dynamic, but known at the time of initialization.</li>\n<li>Doesn't first initialize the memory to a dummy value.</li>\n<li>Doesn't re-allocate memory as its filled.</li>\n<li>In this example, all members of the vector are <em>always</em> initialized.<br><em>(In keeping with Rusts assurance of no undefined behavior).</em></li>\n</ul>\n\n<p>And ideally</p>\n\n<ul>\n<li>Doesn't index check each index access<br><em>(since the size is known when declaring the vector this should be possible).</em></li>\n<li>Doesn't require <code>unsafe</code><br><em>(Not sure if this is reasonable, however the compiler _could_ detect that all values are always filled, allowing such logic in an unsafe block).</em></li>\n</ul>\n\n<p>The C equivalent is:</p>\n\n<pre><code>struct MyStruct *create_mystruct(const uint n) {\n    struct MyStruct *vector = malloc(sizeof(*vector) * n);\n    for (uint i = 0; i &lt; n; i++) {\n        /* any kind of initialization */\n        initialize_mystruct(&amp;vector[i], i);\n    }\n    return vector;\n}\n</code></pre>\n\n<p>I'm porting over some C code which fills an array in a simple loop, so I was wondering if there was a <em>Rustic</em> way to perform such a common task with zero or at least minimal overhead?</p>\n\n<p>If there are typically some extra checks needed for the Rust version of this code, what's the nearest equivalent?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 507143, "user_id": 1048572, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/7f2c4de95e8f4f8f5a71c3aaf0ed312a?s=128&d=identicon&r=PG", "display_name": "Bergi", "link": "https://stackoverflow.com/users/1048572/bergi"}, "edited": false, "score": 0, "creation_date": 1470795911, "post_id": 38863246, "comment_id": 65089972, "body": "Are you asking why it always returns an error or why it was declared as returning a result?"}, {"owner": {"reputation": 13635, "user_id": 547365, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/ddefbca930fdd39846b698bab7ac3146?s=128&d=identicon&r=PG", "display_name": "w.brian", "link": "https://stackoverflow.com/users/547365/w-brian"}, "reply_to_user": {"reputation": 507143, "user_id": 1048572, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/7f2c4de95e8f4f8f5a71c3aaf0ed312a?s=128&d=identicon&r=PG", "display_name": "Bergi", "link": "https://stackoverflow.com/users/1048572/bergi"}, "edited": false, "score": 0, "creation_date": 1470796091, "post_id": 38863246, "comment_id": 65090011, "body": "Both, I guess.  Why return a <code>Result</code> if it will be <code>Err</code>, unconditionally?"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1470829482, "last_edit_date": 1470829482, "creation_date": 1470796379, "answer_id": 38863363, "question_id": 38863246, "link": "https://stackoverflow.com/questions/38863246/why-would-a-function-that-returns-a-result-always-return-err/38863363#38863363", "title": "Why would a function that returns a Result always return Err?", "body": "<p>Because you aren't including the context of the function:</p>\n\n<pre><code>pub trait MapVisitor {\n\n    // ...\n\n    fn missing_field&lt;V&gt;(&amp;mut self, field: &amp;'static str) -&gt; Result&lt;V, Self::Error&gt;\n        where V: Deserialize,\n    {\n        Err(Error::missing_field(field))\n    }\n}\n</code></pre>\n\n<p>This is a <a href=\"https://doc.rust-lang.org/stable/book/traits.html#default-methods\" rel=\"nofollow\"><em>default trait method</em></a>. Every type that implements this trait will get this method for free if they do nothing special, but may choose to reimplement it instead. Presumably most implementations will not implement the method, but it may also just be a sane default.</p>\n"}, {"tags": [], "owner": {"reputation": 6357, "user_id": 6086311, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cb99289473f6393b89474785f2d294d1?s=128&d=identicon&r=PG", "display_name": "dtolnay", "link": "https://stackoverflow.com/users/6086311/dtolnay"}, "is_accepted": false, "score": 1, "last_activity_date": 1471494237, "creation_date": 1471494237, "answer_id": 39009981, "question_id": 38863246, "link": "https://stackoverflow.com/questions/38863246/why-would-a-function-that-returns-a-result-always-return-err/39009981#39009981", "title": "Why would a function that returns a Result always return Err?", "body": "<p>As @Shepmaster answered, this is just a default for data formats in which a missing field is always an error.</p>\n\n<p>There are data formats in which a missing field is not always an error. JSON is one common example. A struct like the following:</p>\n\n<pre><code>#[derive(Deserialize)]\nstruct S {\n    a: i32,\n    b: Option&lt;i32&gt;,\n}\n</code></pre>\n\n<p>can be deserialized from the JSON string <code>{\"a\":0}</code> in which the field \"b\" is missing. The Serde Deserializer for JSON defines a missing Option field to mean <code>Option::None</code>.</p>\n\n<p><a href=\"https://github.com/serde-rs/json/blob/ccb6e44a6dda9fd2bf21361560ab97962478cfc5/json/src/de.rs#L813-L877\" rel=\"nofollow\">Here is JSON's implementation of <code>missing_field</code>.</a></p>\n"}], "owner": {"reputation": 13635, "user_id": 547365, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/ddefbca930fdd39846b698bab7ac3146?s=128&d=identicon&r=PG", "display_name": "w.brian", "link": "https://stackoverflow.com/users/547365/w-brian"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 90, "favorite_count": 0, "accepted_answer_id": 38863363, "answer_count": 2, "score": 3, "last_activity_date": 1471494237, "creation_date": 1470795577, "last_edit_date": 1470796628, "question_id": 38863246, "link": "https://stackoverflow.com/questions/38863246/why-would-a-function-that-returns-a-result-always-return-err", "title": "Why would a function that returns a Result always return Err?", "body": "<p>I ran across <a href=\"https://github.com/serde-rs/serde/blob/d1205393109c474201985907ae0077afa87bc81d/serde/src/de/mod.rs#L766\" rel=\"nofollow\">the <code>missing_field</code> function</a> while looking through the <a href=\"https://github.com/serde-rs/serde\" rel=\"nofollow\">Serde</a> source:</p>\n\n<pre><code>/// Report that the struct has a field that wasn't deserialized\nfn missing_field&lt;V&gt;(&amp;mut self, field: &amp;'static str) -&gt; Result&lt;V, Self::Error&gt;\n    where V: Deserialize,\n{\n    Err(Error::missing_field(field))\n}\n</code></pre>\n\n<p>Why is this useful? Why return a <code>Result</code> if it will unconditionally be <code>Err</code>?</p>\n"}, {"tags": ["redis", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470794288, "post_id": 38862611, "comment_id": 65089629, "body": "It seems like you are really asking &quot;how do I store <i>this type of data</i> in Redis&quot; in addition to &quot;how do I store data in Redis <i>using Rust</i>&quot;. MongoDB, Redis, and traditional relational databases all have different strengths and they aren&#39;t necessarily substitutes for each other. I&#39;d say that &quot;how do I store this type of data&quot; is <b>too broad</b> for Stack Overflow, so I&#39;d recommend you remove that from your question."}], "answers": [{"comments": [{"owner": {"reputation": 1751, "user_id": 3973406, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/b2d94768947ebd5fd0f38ee5b3f472c5?s=128&d=identicon&r=PG&f=1", "display_name": "Dac0d3r", "link": "https://stackoverflow.com/users/3973406/dac0d3r"}, "edited": false, "score": 0, "creation_date": 1470855463, "post_id": 38862794, "comment_id": 65123973, "body": "I&#39;m afraid this would not work well for me, since the whole point of using redis over mongodb for realtime storage of visitor session state data is - increased speed. I&#39;m kinda building something similar to how sitecore shared and private session works, where they gather data about the users behavior, and transferring this data to a database once the session expires. So a lot of reading and updating will happen to the session data, which is why json string serialization is not an option. But thanks for your answer anyways. :-)"}], "tags": [], "owner": {"reputation": 116, "user_id": 6687976, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6b70385b985dbcc721c09591cb0e67eb?s=128&d=identicon&r=PG", "display_name": "Nerlin", "link": "https://stackoverflow.com/users/6687976/nerlin"}, "is_accepted": false, "score": 0, "last_activity_date": 1470794339, "last_edit_date": 1470794339, "creation_date": 1470791927, "answer_id": 38862794, "question_id": 38862611, "link": "https://stackoverflow.com/questions/38862611/how-to-store-fetch-a-struct-with-redis-in-rust/38862794#38862794", "title": "How to store / fetch a struct with Redis in Rust?", "body": "<p><a href=\"http://siciarz.net/24-days-of-rust-working-json/\" rel=\"nofollow\">Serialize your data to a JSON string</a>, save it as a string and then deserialize it when needed. </p>\n"}], "owner": {"reputation": 1751, "user_id": 3973406, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/b2d94768947ebd5fd0f38ee5b3f472c5?s=128&d=identicon&r=PG&f=1", "display_name": "Dac0d3r", "link": "https://stackoverflow.com/users/3973406/dac0d3r"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 1148, "favorite_count": 1, "answer_count": 1, "score": 2, "last_activity_date": 1470794339, "creation_date": 1470790386, "last_edit_date": 1470794143, "question_id": 38862611, "link": "https://stackoverflow.com/questions/38862611/how-to-store-fetch-a-struct-with-redis-in-rust", "title": "How to store / fetch a struct with Redis in Rust?", "body": "<p>I'm trying to figure out how to </p>\n\n<ol>\n<li>programically instantiate a struct with set values (one of those might be yet another nested struct - or not) - <strong>and save it in <a href=\"https://github.com/mitsuhiko/redis-rs\" rel=\"nofollow\">Redis</a></strong>.</li>\n<li>fetch it back into a struct from Redis</li>\n</ol>\n\n<p>I am aware that the 2 traits <code>ToRedisArgs</code> and <code>FromRedisValue</code> are to be implemented here, but even for my very simple 2 structs I have no clue what to write to impl them in Rust. I've made a simple example:</p>\n\n<pre><code>extern crate redis;\nuse redis::Commands;\n\n// fn fetch_an_integer() -&gt; redis::RedisResult&lt;isize&gt; {\n//     // connect to redis\n//     let client = try!(redis::Client::open(\"redis://127.0.0.1/\"));\n//     let con = try!(client.get_connection());\n//     // throw away the result, just make sure it does not fail\n//     let _ : () = try!(con.set(\"my_key\", 42));\n//     // read back the key and return it.  Because the return value\n//     // from the function is a result for integer this will automatically\n//     // convert into one.\n//     con.get(\"my_key\")\n// }\n\nfn fetch_a_struct() -&gt; redis::RedisResult&lt;MyStruct&gt; {\n    // connect to redis\n    let client = try!(redis::Client::open(\"redis://127.0.0.1/\"));\n    let con = try!(client.get_connection());\n    // throw away the result, just make sure it does not fail\n\n    let another_struct = AnotherStruct{x: \"another_struct\".to_string()};\n    let mut my_vec: Vec&lt;AnotherStruct&gt; = Vec::new();\n    my_vec.push(another_struct);\n    let my_struct = MyStruct{x: \"my_struct\".to_string(), y: 1, z: my_vec};\n\n    let _ : () = try!(con.set(\"my_key_struct\", my_struct));\n\n    con.get(\"my_key_struct\")\n}\n\nfn main() {\n    match fetch_a_struct() {\n        Err(err) =&gt; {\n            println!(\"{}\", err)\n        },\n        Ok(x) =&gt; {\n            println!(\"{}\", x.x)\n        }\n    }\n\n}\n\nstruct MyStruct {\n    x: String,\n    y: i64,\n    z: Vec&lt;AnotherStruct&gt;,\n}\n\nstruct AnotherStruct {\n    x: String\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=75b7e0c99b310720462e0653071aa5c3&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">Playground</a>)</p>\n\n<p>I need to save different visitors, their browsing behavior (duration, pages visited and other interactions etc) and other stats while they browse around my website - That's why I was thinking about using Redis instead of MongoDB, as my outproc session store.</p>\n\n<p>In MongoDB I'd have a user collection, interactions collection etc... but what might the equivalent way in Redis be?</p>\n\n<p>Being a complete newbie at both Redis and Rust I hope you can help me at least to get a few ideas how to achieve something like this.</p>\n"}, {"tags": ["rust", "servo", "html5ever"], "comments": [{"owner": {"reputation": 25907, "user_id": 509706, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/yedDa.png?s=128&g=1", "display_name": "Wilfred Hughes", "link": "https://stackoverflow.com/users/509706/wilfred-hughes"}, "edited": false, "score": 0, "creation_date": 1574186146, "post_id": 38859811, "comment_id": 104138735, "body": "It&#39;s easier to parse HTML with the higher-level <a href=\"https://github.com/programble/scraper\" rel=\"nofollow noreferrer\">scraper</a> or <a href=\"https://crates.io/crates/kuchiki\" rel=\"nofollow noreferrer\">kuchiki</a> rather than html5ever directly."}], "answers": [{"comments": [{"owner": {"reputation": 453, "user_id": 5788552, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/27371c47ef739a939c8cc72a88793a7d?s=128&d=identicon&r=PG&f=1", "display_name": "kesselborn", "link": "https://stackoverflow.com/users/5788552/kesselborn"}, "edited": false, "score": 0, "creation_date": 1470864982, "post_id": 38861580, "comment_id": 65128751, "body": "Thanks a lot, exactly what I was hoping for."}, {"owner": {"reputation": 1837, "user_id": 1130667, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/edbd7c7edf22e733662d01b2988ee069?s=128&d=identicon&r=PG", "display_name": "ghlecl", "link": "https://stackoverflow.com/users/1130667/ghlecl"}, "edited": false, "score": 5, "creation_date": 1510239360, "post_id": 38861580, "comment_id": 81358518, "body": "1 year old answer, but I have just tried this code today and it fails to compile for me.  I am on Rust 1.20.0 and using the latest version of html5ever.  The error is <code>unresolved import html5ever::rcdom::NodeEnum::Element</code> and it says it does not find NodeEnum anymore.  Was it deprecated ?  Did I miss something ?"}, {"owner": {"reputation": 421, "user_id": 576888, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/29e2f75737bf56c1b9690974576833ed?s=128&d=identicon&r=PG", "display_name": "kirhgoff", "link": "https://stackoverflow.com/users/576888/kirhgoff"}, "edited": false, "score": 0, "creation_date": 1527611391, "post_id": 38861580, "comment_id": 88187311, "body": "Look at this example - it uses another data structures which look more fresh: <a href=\"https://github.com/servo/html5ever/blob/master/html5ever/examples/print-rcdom.rs\" rel=\"nofollow noreferrer\">github.com/servo/html5ever/blob/master/html5ever/examples/&hellip;</a>"}], "tags": [], "owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "is_accepted": true, "score": 14, "last_activity_date": 1470782533, "creation_date": 1470782533, "answer_id": 38861580, "question_id": 38859811, "link": "https://stackoverflow.com/questions/38859811/how-do-i-parse-a-page-with-html5ever-modify-the-dom-and-serialize-it/38861580#38861580", "title": "How do I parse a page with html5ever, modify the DOM, and serialize it?", "body": "<p>Here is some code that parses a document, adds an achor to the link and prints the new document:</p>\n\n<pre><code>extern crate html5ever;\n\nuse html5ever::{ParseOpts, parse_document};\nuse html5ever::tree_builder::TreeBuilderOpts;\nuse html5ever::rcdom::RcDom;\nuse html5ever::rcdom::NodeEnum::Element;\nuse html5ever::serialize::{SerializeOpts, serialize};\nuse html5ever::tendril::TendrilSink;\n\nfn main() {\n    let opts = ParseOpts {\n        tree_builder: TreeBuilderOpts {\n            drop_doctype: true,\n            ..Default::default()\n        },\n        ..Default::default()\n    };\n    let data = \"&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;a href=\\\"foo\\\"&gt;&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;\".to_string();\n    let dom = parse_document(RcDom::default(), opts)\n        .from_utf8()\n        .read_from(&amp;mut data.as_bytes())\n        .unwrap();\n\n    let document = dom.document.borrow();\n    let html = document.children[0].borrow();\n    let body = html.children[1].borrow(); // Implicit head element at children[0].\n\n    {\n        let mut a = body.children[0].borrow_mut();\n        if let Element(_, _, ref mut attributes) = a.node {\n            attributes[0].value.push_tendril(&amp;From::from(\"#anchor\"));\n        }\n    }\n\n    let mut bytes = vec![];\n    serialize(&amp;mut bytes, &amp;dom.document, SerializeOpts::default()).unwrap();\n    let result = String::from_utf8(bytes).unwrap();\n    println!(\"{}\", result);\n}\n</code></pre>\n\n<p>This prints the following:</p>\n\n<pre><code>&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;a href=\"foo#anchor\"&gt;&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;\n</code></pre>\n\n<p>As you can see, we can navigate through the child nodes via the <code>children</code> attribute.</p>\n\n<p>And we can change an attribute present in the vector of attributes of an <code>Element</code>.</p>\n"}], "owner": {"reputation": 453, "user_id": 5788552, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/27371c47ef739a939c8cc72a88793a7d?s=128&d=identicon&r=PG&f=1", "display_name": "kesselborn", "link": "https://stackoverflow.com/users/5788552/kesselborn"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2560, "favorite_count": 1, "accepted_answer_id": 38861580, "answer_count": 1, "score": 9, "last_activity_date": 1578940713, "creation_date": 1470774379, "last_edit_date": 1486816246, "question_id": 38859811, "link": "https://stackoverflow.com/questions/38859811/how-do-i-parse-a-page-with-html5ever-modify-the-dom-and-serialize-it", "title": "How do I parse a page with html5ever, modify the DOM, and serialize it?", "body": "<p>I would like to parse a web page, insert anchors at certain positions and render the modified DOM out again in order to generate docsets for <a href=\"https://kapeli.com/dash\" rel=\"noreferrer\">Dash</a>. Is this possible? </p>\n\n<p>From the examples included in html5ever, I can see how to read an HTML file and do a poor man's HTML output, but I don't understand how I can modify the <code>RcDom</code> object I retrieved.</p>\n\n<p>I would like to see a snippet inserting an anchor element (<code>&lt;a name=\"foo\"&gt;&lt;/a&gt;</code>) to an <code>RcDom</code>.</p>\n\n<p>Note: this is a question regarding Rust and html5ever specifically ... I know how to do it in other languages or simpler HTML parsers.</p>\n"}, {"tags": ["rust", "literals"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470756165, "post_id": 38854408, "comment_id": 65073571, "body": "See also <a href=\"http://stackoverflow.com/q/32697884/155423\">stackoverflow.com/q/32697884/155423</a>"}], "answers": [{"comments": [{"owner": {"reputation": 836, "user_id": 2971839, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/ae42092534f65bffafcc85cc02e7d35b?s=128&d=identicon&r=PG&f=1", "display_name": "Keozon", "link": "https://stackoverflow.com/users/2971839/keozon"}, "edited": false, "score": 1, "creation_date": 1470765544, "post_id": 38854677, "comment_id": 65079140, "body": "It&#39;s also worth mentioning, that the type is not inferred the &quot;first time it is used&quot;. If it is used in differing contexts, you will get a compiler error. It will simply not be able to determine the type."}], "tags": [], "owner": {"reputation": 339851, "user_id": 149392, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7a561ec0875fcbbe3066ea8fe288ec77?s=128&d=identicon&r=PG", "display_name": "sepp2k", "link": "https://stackoverflow.com/users/149392/sepp2k"}, "is_accepted": true, "score": 10, "last_activity_date": 1523299346, "last_edit_date": 1523299346, "creation_date": 1470756073, "answer_id": 38854677, "question_id": 38854408, "link": "https://stackoverflow.com/questions/38854408/do-literal-integral-values-have-a-specific-type-in-rust/38854677#38854677", "title": "Do literal integral values have a specific type in Rust?", "body": "<p>From the <a href=\"https://doc.rust-lang.org/reference/tokens.html#integer-literals\" rel=\"nofollow noreferrer\">language reference</a>:</p>\n\n<blockquote>\n  <p>The type of an <em>unsuffixed</em> integer literal is determined by type\n  inference:</p>\n  \n  <ul>\n  <li><p>If an integer type can be <em>uniquely</em> determined from the surrounding program context, the unsuffixed integer literal has that type.</p></li>\n  <li><p>If the program context under-constrains the type, it defaults to the signed 32-bit integer <code>i32</code>.</p></li>\n  <li><p>If the program context over-constrains the type, it is considered a static type error.</p></li>\n  </ul>\n</blockquote>\n\n<p>On the line</p>\n\n<blockquote>\n<pre><code>println!(\"{}\", v[1]); // is 1 a usize?\n</code></pre>\n</blockquote>\n\n<p>the surrounding program context requires 1 to be an <code>usize</code> (because that's what the <code>[]</code> operator needs), so yes, here <code>1</code> will have the type <code>usize</code>.</p>\n"}], "owner": {"reputation": 317, "user_id": 5700242, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/b78078419466f23b6197c3b4ea9625d3?s=128&d=identicon&r=PG", "display_name": "Regis", "link": "https://stackoverflow.com/users/5700242/regis"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 583, "favorite_count": 1, "accepted_answer_id": 38854677, "answer_count": 1, "score": 5, "last_activity_date": 1523299346, "creation_date": 1470755267, "last_edit_date": 1470755899, "question_id": 38854408, "link": "https://stackoverflow.com/questions/38854408/do-literal-integral-values-have-a-specific-type-in-rust", "title": "Do literal integral values have a specific type in Rust?", "body": "<p>In <a href=\"https://doc.rust-lang.org/book/primitive-types.html#numeric-types\" rel=\"noreferrer\">https://doc.rust-lang.org/book/primitive-types.html#numeric-types</a>, it said that in </p>\n\n<blockquote>\n  <p>let x = 42; // x has type i32</p>\n</blockquote>\n\n<p>That means <code>x</code> has the type <code>i32</code> as default. </p>\n\n<p>But in <a href=\"http://rustbyexample.com/cast/literals.html\" rel=\"noreferrer\">http://rustbyexample.com/cast/literals.html</a>, it says that</p>\n\n<blockquote>\n  <p>Unsuffixed literal, their types depend on how they are used</p>\n</blockquote>\n\n<p>I know I can't use <code>i32</code> to index the vector, but the following code works:</p>\n\n<pre><code>fn main() {\n    let v = vec![1, 2, 3, 4, 5];\n\n    let j = 1;  // j has default type i32? or it has type when it is first used?\n                // And what is the type of 1?\n\n    println!(\"{}\", v[1]); // is 1 a usize?\n    println!(\"{}\", v[j]);\n}\n</code></pre>\n\n<p>So, what is the type of a literal integral value?</p>\n"}, {"tags": ["cygwin", "rust"], "answers": [{"comments": [{"owner": {"reputation": 47, "user_id": 6595864, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fcbc1a782fa057ba2170df99ac868697?s=128&d=identicon&r=PG&f=1", "display_name": "Rustic", "link": "https://stackoverflow.com/users/6595864/rustic"}, "edited": false, "score": 0, "creation_date": 1470742188, "post_id": 38848167, "comment_id": 65063276, "body": "Hi Matzeri, I agree the windows find is being invoked. As I have pointed out, the PATH variable holds the Cygwin bin directory, before the windows path, so am not sure how the windows find is getting invoked, but   how do I invoke or use the Cygwin find command in my program??"}, {"owner": {"reputation": 47, "user_id": 6595864, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fcbc1a782fa057ba2170df99ac868697?s=128&d=identicon&r=PG&f=1", "display_name": "Rustic", "link": "https://stackoverflow.com/users/6595864/rustic"}, "edited": false, "score": 0, "creation_date": 1470742430, "post_id": 38848167, "comment_id": 65063441, "body": "Again as I have pointed out, I have tried using, (&quot;/cygdrive/c/cygwin64/bin/find) ...which seems to be of no use."}], "tags": [], "owner": {"reputation": 6281, "user_id": 5105383, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/2YCB5.jpg?s=128&g=1", "display_name": "matzeri", "link": "https://stackoverflow.com/users/5105383/matzeri"}, "is_accepted": false, "score": 2, "last_activity_date": 1470744331, "last_edit_date": 1470744331, "creation_date": 1470738185, "answer_id": 38848167, "question_id": 38847641, "link": "https://stackoverflow.com/questions/38847641/executing-find-using-stdprocesscommand-on-cygwin-does-not-work/38848167#38848167", "title": "Executing `find` using `std::process::Command` on cygwin does not work", "body": "<p>\"FIND:Invalid switch error\" indicates this is NOT the cygwin <code>find</code>, but you are invoking the Windows one. To double check:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ find -k\nfind: unknown predicate `-k'\n\n$ /cygdrive/c/windows/system32/find -k\nFIND: Parameter format not correct\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 47, "user_id": 6595864, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fcbc1a782fa057ba2170df99ac868697?s=128&d=identicon&r=PG&f=1", "display_name": "Rustic", "link": "https://stackoverflow.com/users/6595864/rustic"}, "edited": false, "score": 0, "creation_date": 1470790596, "post_id": 38851616, "comment_id": 65088915, "body": "Thanks Shepmaster!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1470747929, "creation_date": 1470747929, "answer_id": 38851616, "question_id": 38847641, "link": "https://stackoverflow.com/questions/38847641/executing-find-using-stdprocesscommand-on-cygwin-does-not-work/38851616#38851616", "title": "Executing `find` using `std::process::Command` on cygwin does not work", "body": "<p>Cygwin basically doesn't exist when you are running a program via <code>Command</code>. Executing a process uses the operating system's native functionality; in the case of Windows <a href=\"https://github.com/rust-lang/rust/blob/1.10.0/src/libstd/sys/windows/process.rs#L203-L208\" rel=\"nofollow\">that's <code>CreateProcessW</code></a>. </p>\n\n<p>That means that:</p>\n\n<ol>\n<li>The <code>PATH</code> variable set by your cygwin shell may or may not mean anything when starting a process.</li>\n<li>The directory structure with <code>/cygdrive/...</code> doesn't actually exist in Windows; that's an artifact.</li>\n</ol>\n\n<p>All that said, you have to use Windows-native paths:</p>\n\n<pre><code>use std::process::{Stdio, Command};\nuse std::io::Write;\n\nfn main() {\n    let mut cmd_find = Command::new(r#\"\\msys32\\usr\\bin\\find.exe\"#)\n        .args(&amp;[r#\"\\msys32\\home\"#])\n        .stdin(Stdio::piped())\n        .spawn()\n        .unwrap_or_else(|e| panic!(\"failed to execute process:  {}\", e));\n\n    if let Some(ref mut stdin) = cmd_find.stdin {\n        stdin.write_all(b\"main.rs\").unwrap();\n    }\n\n    let res = cmd_find.wait_with_output().unwrap().stdout;\n    println!(\"{}\", String::from_utf8_lossy(&amp;res));\n}\n</code></pre>\n\n<p>As a side note, I have no idea what piping standard input to <code>find</code> does; it doesn't seem to have any effect for me on Msys2 or on OS X...</p>\n"}], "owner": {"reputation": 47, "user_id": 6595864, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fcbc1a782fa057ba2170df99ac868697?s=128&d=identicon&r=PG&f=1", "display_name": "Rustic", "link": "https://stackoverflow.com/users/6595864/rustic"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 526, "favorite_count": 0, "accepted_answer_id": 38851616, "answer_count": 2, "score": 1, "last_activity_date": 1545288622, "creation_date": 1470736781, "last_edit_date": 1470744287, "question_id": 38847641, "link": "https://stackoverflow.com/questions/38847641/executing-find-using-stdprocesscommand-on-cygwin-does-not-work", "title": "Executing `find` using `std::process::Command` on cygwin does not work", "body": "<p>When I try to call the <code>find</code> command from a Rust program, either I get a <code>FIND: Invalid switch</code> or a <code>FIND: Parameter format incorrect</code> error.</p>\n\n<p><code>find</code> works fine from command line.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>echo $PATH\n\n/usr/local/bin:/usr/bin:/cygdrive/c/Windows/system32:/cygdrive/c/Windows:.....\n</code></pre>\n\n<p>The file I am searching for (<code>main.rs</code>) exists.</p>\n\n<pre><code>use std::process::{Stdio,Command};\nuse std::io::{Write};\n\nfn main() {\n    let mut cmd_find = Command::new(\"/cygdrive/c/cygwin64/bin/find.exe\")\n        .arg(\"/cygdrive/c/cygwin64/home/*\")\n        .stdin(Stdio::piped())\n        .spawn()\n        .unwrap_or_else(|e| { panic!(\"failed to execute process:  {}\", e)});\n\n    if let Some(ref mut stdin) = cmd_find.stdin {\n        stdin.write_all(b\"main.rs\").unwrap();   \n    }       \n\n    let res = cmd_find.wait_with_output().unwrap().stdout;  \n    println!(\"{}\",String::from_utf8_lossy(&amp;res));\n}\n</code></pre>\n\n<blockquote>\n  <p>./find_cmdd.exe</p>\n  \n  <p><code>thread '&lt;main&gt;' panicked at 'failed to execute process:  The system cannot find the file specified. (os error 2)', find_cmdd.rs:12</code></p>\n</blockquote>\n\n<p>I have also tried the following option,</p>\n\n<pre><code>let mut cmd_find = Command::new(\"find\").....\n</code></pre>\n\n<p>for which I get <code>FIND:Invalid switch</code> error.</p>\n\n<p>I do not have the luxury of renaming/copying the <code>find.exe</code> to another location.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "edited": false, "score": 0, "creation_date": 1470892064, "post_id": 38885994, "comment_id": 65135780, "body": "Thank you ! I just incorporated this into a <a href=\"https://github.com/tailhook/quick-error/pull/28\" rel=\"nofollow noreferrer\">PR for the quick-error</a> crate."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 2, "last_activity_date": 1470879498, "creation_date": 1470879498, "answer_id": 38885994, "question_id": 38842875, "link": "https://stackoverflow.com/questions/38842875/how-to-use-quick-error-with-boxed-error-types/38885994#38885994", "title": "How to use `quick-error` with boxed error types?", "body": "<p><a href=\"https://doc.rust-lang.org/stable/std/convert/trait.AsRef.html#tymethod.as_ref\" rel=\"nofollow\"><code>as_ref</code></a> is provided by the <a href=\"https://doc.rust-lang.org/stable/std/convert/trait.AsRef.html\" rel=\"nofollow\"><code>AsRef</code></a> trait. Notice that <code>as_ref</code> receives <code>self</code> by reference (noted <code>&amp;self</code>), so in order to call it on a <code>&amp;T</code>, <code>T</code> must implement <code>AsRef</code>. <code>std::io::Error</code> does not implement that trait.</p>\n\n<p>However, there is another trait that looks a lot like <code>AsRef</code>: <a href=\"https://doc.rust-lang.org/stable/std/borrow/trait.Borrow.html\" rel=\"nofollow\"><code>Borrow</code></a>. <code>Borrow</code> provides a single method, <code>borrow</code>, with the same signature as <code>as_ref</code>. <code>Borrow</code> also has a different set of implementors; notably, it has <code>impl&lt;T&gt; Borrow&lt;T&gt; for T where T: ?Sized</code>. This means that for <em>every type</em>, we can invoke a <code>borrow</code> method (provided that the <code>Borrow</code> trait is brought into scope with <code>use</code>) to obtain a reference to the same type. <code>Borrow&lt;T&gt;</code> is also implemented for <code>Box&lt;T&gt;</code>, so you can borrow a <code>T</code> from a <code>Box&lt;T&gt;</code>, and likewise for other pointer/smart pointer types.</p>\n\n<pre><code>#[allow(unused)]\nimpl ::std::error::Error for MyError {\n    fn cause(&amp;self) -&gt; Option&lt;&amp;::std::error::Error&gt; {\n        use std::borrow::Borrow;\n        match *self {\n            MyError::Io(ref err) =&gt; Some(err.borrow()),\n            MyError::Any(ref err) =&gt; Some(err.borrow()),\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 497, "favorite_count": 0, "accepted_answer_id": 38885994, "answer_count": 1, "score": 1, "last_activity_date": 1470879498, "creation_date": 1470721282, "question_id": 38842875, "link": "https://stackoverflow.com/questions/38842875/how-to-use-quick-error-with-boxed-error-types", "title": "How to use `quick-error` with boxed error types?", "body": "<h3>Problem Description</h3>\n\n<p>I am trying to use quick_error like this:</p>\n\n<pre><code>#[macro_use] extern crate quick_error;\n\nuse std::error::Error;\nuse std::io;\n\nfn main() {\n    quick_error!{\n        #[derive(Debug)]\n        pub enum MyError {\n            Io(err: io::Error) {\n                cause(err)\n            }\n            Any(err: Box&lt;Error&gt;) {\n                cause(err)\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>Even though there are many other error variants, the one I am most interested in is one that can handle any kind of error by boxing it.</p>\n\n<p>However, the code above does not work for the boxed type:</p>\n\n<pre><code>error[E0277]: the trait bound `std::error::Error + 'static: std::marker::Sized` is not satisfied\n  --&gt; src/main.rs:11:23\n   |\n11 |                 cause(err)\n   |                       ^^^\n</code></pre>\n\n<p>When looking at the generated code (using <code>cargo expand</code>), it becomes a bit more evident why that is:</p>\n\n<pre><code>#[allow(unused)]\nimpl ::std::error::Error for MyError {\n    [...]\n    fn cause(&amp;self) -&gt; Option&lt;&amp;::std::error::Error&gt; {\n        match *self {\n            MyError::Io(ref err) =&gt; Some(err),\n            MyError::Any(ref err) =&gt; Some(err),\n        }\n    }\n}\n</code></pre>\n\n<p>A <code>&amp;Box&lt;Error&gt;</code> does not automatically become a <code>&amp;Error</code>, unless you call <code>err.as_ref()</code> on it specifically.\nThus the code below works, and I tried it by just compiling the expanded, adjusted version myself using rustc.</p>\n\n<pre><code>#[allow(unused)]\nimpl ::std::error::Error for MyError {\n    [...]\n    fn cause(&amp;self) -&gt; Option&lt;&amp;::std::error::Error&gt; {\n        match *self {\n            MyError::Io(ref err) =&gt; Some(err),\n            // ------&gt; note the *as_ref()* &lt;------\n            MyError::Any(ref err) =&gt; Some(err.as_ref()),\n        }\n    }\n}\n</code></pre>\n\n<h3>Question</h3>\n\n<p><strong>What can I do to make the above work ?</strong> </p>\n\n<h3>Additional Notes</h3>\n\n<p>To me it would be viable to modify <code>quick-error</code>, however, it's not allowed to call <code>.as_ref()</code> on <code>&amp;std::io::Error</code> for example, which seemed like a simple fix for <code>quick-error</code>:</p>\n\n<pre><code>#[allow(unused)]\nimpl ::std::error::Error for MyError {\n    [...]\n    fn cause(&amp;self) -&gt; Option&lt;&amp;::std::error::Error&gt; {\n        match *self {\n            MyError::Io(ref err) =&gt; Some(err.as_ref()),\n            MyError::Any(ref err) =&gt; Some(err.as_ref()),\n        }\n    }\n}\n</code></pre>\n\n<p>The above causes this error:</p>\n\n<pre><code>error: no method named `as_ref` found for type `&amp;std::io::Error` in the current scope\n  --&gt; expanded.rs:91:50\n   |\n91 |                 MyError::Io(ref err) =&gt; Some(err.as_ref()),\n   |                                                  ^^^^^^\n   |\n   = note: the method `as_ref` exists but the following trait bounds were not satisfied: `std::io::Error : core::convert::AsRef&lt;_&gt;\n</code></pre>\n\n<p>And it really makes me wonder why I can't use <code>&amp;std::io::Error.as_ref()</code> on any reference, considering it becomes a reference to an implemented trait automatically otherwise. Maybe it's syntax I am missing to state the intend.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 543, "user_id": 4472139, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/045dec65d2e67a4fb029469d483f3ebd?s=128&d=identicon&r=PG&f=1", "display_name": "sgldiv", "link": "https://stackoverflow.com/users/4472139/sgldiv"}, "edited": false, "score": 0, "creation_date": 1470714869, "post_id": 38841156, "comment_id": 65048911, "body": "I don&#39;t think that second try! works as you want. try! will get you out of the closure. By the way have you looked at <code>flat_map</code>"}], "answers": [{"comments": [{"owner": {"reputation": 543, "user_id": 4472139, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/045dec65d2e67a4fb029469d483f3ebd?s=128&d=identicon&r=PG&f=1", "display_name": "sgldiv", "link": "https://stackoverflow.com/users/4472139/sgldiv"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470774963, "post_id": 38842110, "comment_id": 65083956, "body": "@shepmaster ...as written it parses beyond the first fail."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470775197, "post_id": 38842110, "comment_id": 65084083, "body": "Ah, that&#39;s a good point! I&#39;ll clear out my comment to prevent any confusion."}], "tags": [], "owner": {"reputation": 543, "user_id": 4472139, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/045dec65d2e67a4fb029469d483f3ebd?s=128&d=identicon&r=PG&f=1", "display_name": "sgldiv", "link": "https://stackoverflow.com/users/4472139/sgldiv"}, "is_accepted": false, "score": 0, "last_activity_date": 1592288317, "last_edit_date": 1592288317, "creation_date": 1470717087, "answer_id": 38842110, "question_id": 38841156, "link": "https://stackoverflow.com/questions/38841156/nice-way-to-map-with-potential-failure/38842110#38842110", "title": "Nice way to map with potential failure", "body": "<p>In functional programming languages you can treat options and results as containers and Rust is similar, so you can <code>map</code> / <code>flat_map</code> over them. You could do this with <code>flat_map</code>. If <code>videos</code> is already a vector, you can just test for expected number of <code>Ok</code>'s against a <code>flat_map</code>ped length to decide whether to return <code>Ok</code>.</p>\n\n<p>However, you should try to keep things lazy and not continue parsing after the first failure. <code>take_while</code> would be an option here. Either way, you will need to track if you saw a <code>parse_failure</code> along the way. Something like below works - it demonstrates how <code>flat_map</code> drops <code>Error</code>s, but it parses more than necessary.  You could also use a <code>.filter</code> and then <code>.map</code> to get the parse result </p>\n\n<pre><code>fn get_videos(test: &amp;Vec&lt;&amp;str&gt;) -&gt; Result&lt;Vec&lt;u32&gt;, &amp;'static str&gt; {\n    let videos = ...\n    let expected = videos.len();\n    let extracted = v.into_iter().flat_map(|x| json_to_video(x)).collect();\n    if extracted.len() == expected {\n        Ok(extracted)\n    } else {\n        Err(\"not_ok\")\n    }\n}\n</code></pre>\n\n<p>Here's an option to do it lazily - </p>\n\n<pre><code>let extracted = videos.map(|x|json_to_video(x))\n                      .take_while(|x|x.is_ok())\n                      .map(|x|x.ok().unwrap())\n                      .collect() \n</code></pre>\n\n<p>You can call <code>unwrap</code> as you dropped everything starting at first failure. Now you return <code>Ok</code> if <code>extracted.len() == videos.len()</code></p>\n"}], "owner": {"reputation": 30697, "user_id": 31667, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/082b069c287878a1bd5731f44c8f10e7?s=128&d=identicon&r=PG", "display_name": "viraptor", "link": "https://stackoverflow.com/users/31667/viraptor"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 454, "favorite_count": 1, "closed_date": 1470744106, "answer_count": 1, "score": 3, "last_activity_date": 1592288317, "creation_date": 1470710065, "question_id": 38841156, "link": "https://stackoverflow.com/questions/38841156/nice-way-to-map-with-potential-failure", "closed_reason": "Duplicate", "title": "Nice way to map with potential failure", "body": "<p>I'm trying to parse a series of <code>Json</code> objects with potential failures that cancel the whole function.</p>\n\n<p>Ideally, I'd do something like:</p>\n\n<pre><code>fn .... -&gt; Result&lt;Vec&lt;Video&gt;, YoutubeParseError&gt; {\n    ...\n    let videos = try!(doc.find(\"items\").\n        and_then(Json::as_array).\n        ok_or(YoutubeParseError));\n\n    Ok(videos.into_iter().\n        map(|item| try!(json_to_video(item))).\n        collect())\n}\n</code></pre>\n\n<p>But of course try doesn't escape the <code>map()</code> on error and instead of <code>Result&lt;Vec&lt;Video&gt;,_&gt;</code>, I get <code>Vec&lt;Result&lt;Video,_&gt;&gt;</code>. I could rewrite this as manual iteration adding elements into a new vec, but I feel like I'm missing some simpler way of handling this.</p>\n\n<p>Is there some existing function that would get me from <code>Iter&lt;Result&lt;T&gt;&gt;</code> to <code>Result&lt;Vec&lt;T&gt;,_&gt;</code> easily?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1470704525, "post_id": 38840330, "comment_id": 65046686, "body": "I don&#39;t think that documentation is actually true. Some methods internally assume it&#39;s false, and <code>shrink_to_fit</code> actually just calls <code>RawVec::shrink_to_fit</code> which <a href=\"https://doc.rust-lang.org/src/alloc/up/src/liballoc/raw_vec.rs.html#42-46\" rel=\"nofollow noreferrer\">guarantees</a> that this is not the case. So you&#39;re probably fine... for now."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470705303, "post_id": 38840330, "comment_id": 65046865, "body": "I <a href=\"http://meta.stackexchange.com/q/39223/281829\">removed your extra question</a>. Feel free to ask it separately."}, {"owner": {"reputation": 543, "user_id": 4472139, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/045dec65d2e67a4fb029469d483f3ebd?s=128&d=identicon&r=PG&f=1", "display_name": "sgldiv", "link": "https://stackoverflow.com/users/4472139/sgldiv"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470706555, "post_id": 38840330, "comment_id": 65047106, "body": "@shepmaster ..updated to v_reinterpret. Thanks for pointing that out."}, {"owner": {"reputation": 543, "user_id": 4472139, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/045dec65d2e67a4fb029469d483f3ebd?s=128&d=identicon&r=PG&f=1", "display_name": "sgldiv", "link": "https://stackoverflow.com/users/4472139/sgldiv"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1470706558, "post_id": 38840330, "comment_id": 65047108, "body": "@Veedrac ...thanks for the ref - it does seem like the cleanest way to do it, but there may be corner cases which is why it is not the spec."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 3, "creation_date": 1470708009, "post_id": 38840330, "comment_id": 65047446, "body": "Beyond byte order, you also need to think about alignment. I would be surprised if the <code>u8</code> was not at least 4-bytes aligned so for <code>u32</code> you should be good... but I would be wary of generalizing."}, {"owner": {"reputation": 543, "user_id": 4472139, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/045dec65d2e67a4fb029469d483f3ebd?s=128&d=identicon&r=PG&f=1", "display_name": "sgldiv", "link": "https://stackoverflow.com/users/4472139/sgldiv"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1470717513, "post_id": 38840330, "comment_id": 65049569, "body": "@matthieu-m I think on x86_64, misalignment will have performance penalty, but is there any way to fix alignment without allocating another properly aligned vector which in some cases might be more costly than misaligned access?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 1, "creation_date": 1470879727, "post_id": 38840330, "comment_id": 65132583, "body": "Do you really need a vector, or would a slice be sufficient? (Slices are fixed-length.) By doing this, you&#39;d (have to) keep the original <code>Vec&lt;u8&gt;</code> around, and slices don&#39;t have a capacity field, so if you can use a slice, the question becomes irrelevant."}, {"owner": {"reputation": 543, "user_id": 4472139, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/045dec65d2e67a4fb029469d483f3ebd?s=128&d=identicon&r=PG&f=1", "display_name": "sgldiv", "link": "https://stackoverflow.com/users/4472139/sgldiv"}, "edited": false, "score": 0, "creation_date": 1470908762, "post_id": 38840330, "comment_id": 65145156, "body": "Yes, I thought about a <code>u32</code> view onto the <code>u8</code> datastore, except I completely spaced that <code>std::slice::from_raw_parts</code> existed so I couldn&#39;t figure out how to get something that compiled. But with <code>std::slice::from_raw_parts</code> pretty much the  same code works. Thanks!"}], "answers": [{"tags": [], "owner": {"reputation": 608, "user_id": 1907543, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7597ff99ee5f0704208709c3d17d9f33?s=128&d=identicon&r=PG", "display_name": "daboross", "link": "https://stackoverflow.com/users/1907543/daboross"}, "is_accepted": true, "score": 3, "last_activity_date": 1594753899, "creation_date": 1594753899, "answer_id": 62902368, "question_id": 38840330, "link": "https://stackoverflow.com/questions/38840330/what-happens-if-i-call-vecfrom-raw-parts-with-a-smaller-capacity-than-the-poin/62902368#62902368", "title": "What happens if I call Vec::from_raw_parts with a smaller capacity than the pointer actually has?", "body": "<p>This is an old question, and it looks like it has a working solution in the comments. I've just written up what exactly goes wrong here, and some solutions that one might create/use in today's Rust.</p>\n<h2>This is undefined behavior</h2>\n<p><code>Vec::from_raw_parts</code> is an unsafe function, and thus you <strong>must</strong> satisfy its invariants, or you invoke <a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\" rel=\"nofollow noreferrer\">undefined behavior</a>.</p>\n<p>Quoting from <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.from_raw_parts\" rel=\"nofollow noreferrer\">the documentation for <code>Vec::from_raw_parts</code></a>:</p>\n<blockquote>\n<ul>\n<li><code>ptr</code> needs to have been previously allocated via String/Vec (at least, it's highly likely to be incorrect if it wasn't).</li>\n<li><code>T</code> needs to have the same size and alignment as what ptr was allocated with. (T having a less strict alignment is not sufficient, the alignment really needs to be equal to satsify the dealloc requirement that memory must be allocated and deallocated with the same layout.)</li>\n<li>length needs to be less than or equal to capacity.</li>\n<li>capacity needs to be the capacity that the pointer was allocated with.</li>\n</ul>\n</blockquote>\n<p>So, to answer your question, if <code>capacity</code> is not equal to the capacity of the original vec, then you've broken this invariant. This gives you undefined behavior.</p>\n<p>Note that the requirement isn't on <code>size_of::&lt;T&gt;() * capacity</code> either, though, which brings us to the next topic.</p>\n<blockquote>\n<p>Is there any other problem I am overlooking here?</p>\n</blockquote>\n<p>Three things.</p>\n<p>First, the function as written is disregarding another requirement of <code>from_raw_parts</code>. Specifically, <code>T</code> must have the same size as alignment as the original <code>T</code>. <code>u32</code> is four times as big as <code>u8</code>, so this again breaks this requirement. Even if <code>capacity*size</code> remains the same, <code>size</code> isn't, and <code>capacity</code> isn't. This function will never be sound as implemented.</p>\n<p>Second, even if all of the above was valid, you've also ignored the alignment. <code>u32</code> must be aligned to 4-byte boundaries, while a <code>Vec&lt;u8&gt;</code> is only guaranteed to be aligned to a 1-byte boundary.</p>\n<p>A comment on the OP mentions:</p>\n<blockquote>\n<p>I think on x86_64, misalignment will have performance penalty</p>\n</blockquote>\n<p>It's worth noting that while this may be true of machine language, it is <em>not</em> true for Rust. <a href=\"https://doc.rust-lang.org/reference/type-layout.html#size-and-alignment\" rel=\"nofollow noreferrer\">The rust reference explicitly states</a> &quot;A value of alignment n must only be stored at an address that is a multiple of n.&quot; This is a hard requirement.</p>\n<h2>Why the exact type requirement?</h2>\n<p><code>Vec::from_raw_parts</code> seems like it's pretty strict, and that's for a reason. In Rust, the allocator API operates not only on allocation size, but on a <code>Layout</code>, which is the combination of size, number of things, and alignment of individual elements. In C with <code>memalloc</code>, all the allocator can rely upon is that the size is the same, and some minimum alignment. In Rust, though, it's allowed to rely on the entire <code>Layout</code>, and invoke undefined behavior if not.</p>\n<p>So in order to correctly deallocate the memory, <code>Vec</code> needs to know the exact type that it was allocated with. By converting a <code>Vec&lt;u32&gt;</code> into <code>Vec&lt;u8&gt;</code>, it no longer knows this information, and so it can no longer properly deallocate this memory.</p>\n<h2>Alternative - Transforming slices</h2>\n<p><code>Vec::from_raw_parts</code>'s strictness comes from the fact that it needs to deallocate the memory. If we create a borrowing slice, <code>&amp;[u32]</code> instead, we no longer need to deal with it! There is no capacity when turning a <code>&amp;[u8]</code> into <code>&amp;[u32]</code>, so we should be all good, right?</p>\n<p>Well, almost. You still have to deal with alignment. <a href=\"https://doc.rust-lang.org/reference/type-layout.html#primitive-data-layout\" rel=\"nofollow noreferrer\">Primitives are generally aligned to their size</a>, so a <code>[u8]</code> is only guaranteed to be aligned to 1-byte boundaries, while <code>[u32]</code> must be aligned to a 4-byte boundary.</p>\n<p>If you want to chance it, though, and create a <code>[u32]</code> <em>if possible</em>, there's a function for that - <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.align_to\" rel=\"nofollow noreferrer\"><code>&lt;[T]&gt;::align_to</code></a>:</p>\n<blockquote>\n<pre class=\"lang-rust prettyprint-override\"><code>pub unsafe fn align_to&lt;U&gt;(&amp;self) -&gt; (&amp;[T], &amp;[U], &amp;[T])\n</code></pre>\n</blockquote>\n<p>This will trim of any starting and ending misaligned values, and then give you a slice in the middle of your new type. It's unsafe, but the only invariant you need to satisfy is that the elements in the middle slice are valid.</p>\n<p>It's sound to reinterpret 4 <code>u8</code> values as a <code>u32</code> value, so we're good.</p>\n<p>Putting it all together, a sound version of the original function would look like this. This operates on borrowed rather than owned values, but given that reinterpreting an owned <code>Vec</code> is instant-undefined-behavior in any case, I think it's safe to say this is the closest sound function:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>use std::mem;\n\nfn reinterpret(v: &amp;[u8]) -&gt; Option&lt;&amp;[u32]&gt; {\n    let (trimmed_front, u32s, trimmed_back) = unsafe { v.align_to::&lt;u32&gt;() };\n    if trimmed_front.is_empty() &amp;&amp; trimmed_back.is_empty() {\n        Some(u32s)\n    } else {\n        // either alignment % 4 != 0 or len % 4 != 0, so we can't do this op\n        None\n    }\n}\n\nfn main() {\n    let mut v: Vec&lt;u8&gt; = vec![1, 1, 1, 1, 1, 1, 1, 1];\n    let test = reinterpret(&amp;v);\n    println!(&quot;{:?}&quot;, test);\n}\n</code></pre>\n<p>As a note, this could also be done with <a href=\"https://doc.rust-lang.org/std/slice/fn.from_raw_parts.html\" rel=\"nofollow noreferrer\"><code>std::slice::from_raw_parts</code></a> rather than <code>align_to</code>. However, that requires manually dealing with the alignment, and all it really gives is more things we need to ensure we're doing right. Well, that and compatibility with older compilers - <code>align_to</code> was introduced in 2018 in <a href=\"https://blog.rust-lang.org/2018/10/25/Rust-1.30.0.html\" rel=\"nofollow noreferrer\">Rust 1.30.0</a>, and wouldn't have existed when this question was asked.</p>\n<h2>Alternative - Copying</h2>\n<p>If you do need a <code>Vec&lt;u32&gt;</code> for long term data storage, I think the best option is to just allocate new memory. The old memory is allocated for <code>u8</code>s anyways, and wouldn't work.</p>\n<p>This can be made fairly simple with some functional programming:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn reinterpret(v: &amp;[u8]) -&gt; Option&lt;Vec&lt;u32&gt;&gt; {\n    let v_len = v.len();\n    if v_len % 4 != 0 {\n        None\n    } else {\n        let result = v\n            .chunks_exact(4)\n            .map(|chunk: &amp;[u8]| -&gt; u32 {\n                let chunk: [u8; 4] = chunk.try_into().unwrap();\n                let value = u32::from_ne_bytes(chunk);\n                value\n            })\n            .collect();\n        Some(result)\n    }\n}\n</code></pre>\n<p>First, we use <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.chunks_exact\" rel=\"nofollow noreferrer\"><code>&lt;[T]&gt;::chunks_exact</code></a> to iterate over chunks of <code>4</code> <code>u8</code>s. Next, <a href=\"https://doc.rust-lang.org/std/convert/trait.TryInto.html#tymethod.try_into\" rel=\"nofollow noreferrer\"><code>try_into</code></a> to convert from <code>&amp;[u8]</code> to <code>[u8; 4]</code>. The <code>&amp;[u8]</code> is guaranteed to be length 4, so this never fails.</p>\n<p>We use <a href=\"https://doc.rust-lang.org/std/primitive.u32.html#method.from_ne_bytes\" rel=\"nofollow noreferrer\"><code>u32::from_ne_bytes</code></a> to convert the bytes into a <code>u32</code> using native endianness. If interacting with a network protocol, or on-disk serialization, then using <a href=\"https://doc.rust-lang.org/std/primitive.u32.html#method.from_be_bytes\" rel=\"nofollow noreferrer\"><code>from_be_bytes</code></a> or <a href=\"https://doc.rust-lang.org/std/primitive.u32.html#method.from_le_bytes\" rel=\"nofollow noreferrer\"><code>from_le_bytes</code></a> may be preferable.  And finally, we <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.collect\" rel=\"nofollow noreferrer\"><code>collect</code></a> to turn our result back into a <code>Vec&lt;u32&gt;</code>.</p>\n<p>As a last note, a truly general solution might use both of these techniques. If we change the return type to <a href=\"https://doc.rust-lang.org/std/borrow/enum.Cow.html\" rel=\"nofollow noreferrer\"><code>Cow&lt;'_, [u32]&gt;</code></a>, we could return aligned, borrowed data if it works, and allocate a new array if it doesn't! Not <em>quite</em> the best of both worlds, but close.</p>\n"}], "owner": {"reputation": 543, "user_id": 4472139, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/045dec65d2e67a4fb029469d483f3ebd?s=128&d=identicon&r=PG&f=1", "display_name": "sgldiv", "link": "https://stackoverflow.com/users/4472139/sgldiv"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 521, "favorite_count": 0, "accepted_answer_id": 62902368, "answer_count": 1, "score": 10, "last_activity_date": 1594753899, "creation_date": 1470702431, "last_edit_date": 1470706160, "question_id": 38840330, "link": "https://stackoverflow.com/questions/38840330/what-happens-if-i-call-vecfrom-raw-parts-with-a-smaller-capacity-than-the-poin", "title": "What happens if I call Vec::from_raw_parts with a smaller capacity than the pointer actually has?", "body": "<p>I have a vector of <code>u8</code> that I want to interpret as a vector of <code>u32</code>. It is assumed that the bytes are in the right order. I don't want to allocate new memory and copy bytes after casting. I got the following to work:</p>\n\n<pre><code>use std::mem;\n\nfn reinterpret(mut v: Vec&lt;u8&gt;) -&gt; Option&lt;Vec&lt;u32&gt;&gt; {\n    let v_len = v.len();\n    v.shrink_to_fit();\n    if v_len % 4 != 0 {\n        None\n    } else {\n        let v_cap = v.capacity();\n        let v_ptr = v.as_mut_ptr();\n        println!(\"{:?}|{:?}|{:?}\", v_len, v_cap, v_ptr);\n        let v_reinterpret = unsafe { Vec::from_raw_parts(v_ptr as *mut u32, v_len / 4, v_cap / 4) };\n        println!(\"{:?}|{:?}|{:?}\",\n                 v_reinterpret.len(),\n                 v_reinterpret.capacity(),\n                 v_reinterpret.as_ptr());\n        println!(\"{:?}\", v_reinterpret);\n        println!(\"{:?}\", v); // v is still alive, but is same as rebuilt\n        mem::forget(v);\n        Some(v_reinterpret)\n    }\n}\n\nfn main() {\n    let mut v: Vec&lt;u8&gt; = vec![1, 1, 1, 1, 1, 1, 1, 1];\n    let test = reinterpret(v);\n    println!(\"{:?}\", test);\n}\n</code></pre>\n\n<p>However, there's an obvious problem here. From <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.shrink_to_fit\" rel=\"noreferrer\">the <code>shrink_to_fit</code> documentation</a>:</p>\n\n<blockquote>\n  <p>It will drop down as close as possible to the length but the allocator may still inform the vector that there is space for a few more elements.</p>\n</blockquote>\n\n<p>Does this mean that my capacity may still not be a multiple of the size of <code>u32</code> after calling <code>shrink_to_fit</code>? If in <code>from_raw_parts</code> I set capacity to <code>v_len/4</code> with <code>v.capacity()</code> not an exact multiple of 4, do I leak those 1-3 bytes, or will they go back into the memory pool because of <code>mem::forget</code> on <code>v</code>?</p>\n\n<p>Is there any other problem I am overlooking here? </p>\n\n<p>I think moving <code>v</code> into reinterpret guarantees that it's not accessible from that point on, so there's only one owner from the <code>mem::forget(v)</code> call onwards.</p>\n"}, {"tags": ["string", "vector", "type-conversion", "rust", "slice"], "answers": [{"tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": true, "score": 2, "last_activity_date": 1470696570, "creation_date": 1470696570, "answer_id": 38839639, "question_id": 38839258, "link": "https://stackoverflow.com/questions/38839258/converting-between-veci8-and-str/38839639#38839639", "title": "Converting between Vec&lt;i8&gt; and &amp;str", "body": "<p>You might find that transforming to a <code>String</code> is nicer, given that you can pass <code>&amp;String</code>s to functions expecting <code>str</code>s. You can shorten it to roughly</p>\n\n<pre><code>String::from_utf8(buffer.iter().map(|&amp;c| c as u8).collect())\n</code></pre>\n\n<p>and the later can be shortened to just</p>\n\n<pre><code>String::from_utf8(mem::transmute(buffer))\n</code></pre>\n\n<p>I doubt you can do better than these.</p>\n"}], "owner": {"reputation": 949, "user_id": 1219515, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/64ce0ac7d44d2076d23b21ac62214970?s=128&d=identicon&r=PG", "display_name": "Maciej Goszczycki", "link": "https://stackoverflow.com/users/1219515/maciej-goszczycki"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 494, "favorite_count": 0, "accepted_answer_id": 38839639, "answer_count": 1, "score": 2, "last_activity_date": 1470696570, "creation_date": 1470694135, "last_edit_date": 1470695088, "question_id": 38839258, "link": "https://stackoverflow.com/questions/38839258/converting-between-veci8-and-str", "title": "Converting between Vec&lt;i8&gt; and &amp;str", "body": "<p>I have a <code>Vec&lt;i8&gt;</code> I need to read as <code>&amp;str</code>. Right now I've found two ways to do it, both of which leave me unhappy. </p>\n\n<pre><code>// Quite complex for something this simple\nstr::from_utf8(buffer.into_iter().map(|c| c as u8).collect::&lt;Vec&lt;u8&gt;&gt;().as_slice())\n</code></pre>\n\n<p>and</p>\n\n<pre><code>// transmute makes me uncomfortable\nstr::from_utf8(mem::transmute::&lt;Vec&lt;i8&gt;, Vec&lt;u8&gt;&gt;(buffer).as_slice());\n</code></pre>\n\n<p>Are there any simpler ways of achieving this?</p>\n"}, {"tags": ["serialization", "iterator", "rust"], "answers": [{"comments": [{"owner": {"reputation": 710, "user_id": 2128615, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/eeg0I.gif?s=128&g=1", "display_name": "Relrin", "link": "https://stackoverflow.com/users/2128615/relrin"}, "edited": false, "score": 0, "creation_date": 1470686125, "post_id": 38837313, "comment_id": 65040566, "body": "No, in my example I want to return a vector of bytes.  Compiler has generate <code>cannot move out of borrowed content [E0507]</code>  error for the <code>|&amp;item|</code> expression."}], "tags": [], "owner": {"reputation": 1120, "user_id": 2647192, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b37079565635fea4d46f300ce26766e1?s=128&d=identicon&r=PG", "display_name": "allTwentyQuestions", "link": "https://stackoverflow.com/users/2647192/alltwentyquestions"}, "is_accepted": true, "score": 2, "last_activity_date": 1470687674, "last_edit_date": 1470687674, "creation_date": 1470685458, "answer_id": 38837313, "question_id": 38837105, "link": "https://stackoverflow.com/questions/38837105/convert-vector-of-enum-values-into-an-another-vector/38837313#38837313", "title": "Convert vector of enum values into an another vector", "body": "<p>The problem is that <code>enum_value_to_binary</code> returns a <code>Vec&lt;u8&gt;</code> for each element in <code>values</code>. So you end up with an <code>Iterator&lt;Item=Vec&lt;u8&gt;&gt;</code> and you call <code>collect::&lt;Vec&lt;u8&gt;&gt;()</code> on that, but it doesn't know how to flatten the nested vectors. If you want all the values to be flattened into one <code>Vec&lt;u8&gt;</code>, then you should use <code>flat_map</code> instead of <code>map</code>:</p>\n\n<pre><code>let mut binary: Vec&lt;u8&gt; = data.values\n            .iter()\n            .flat_map(|item| self.enum_value_to_binary(item).into_iter()) \n            .collect();\n</code></pre>\n\n<p>Or, slightly more idiomatic and performant, you can just have <code>enum_value_to_binary</code> return an iterator directly. </p>\n\n<p>Also, the <code>iter</code> method returns an <code>Iterator&lt;Item=&amp;'a T&gt;</code>, which means you are just borrowing the elements, but <code>self.enum_value_to_binary</code> wants to take ownership over the value. There's a couple of ways to fix that. One option would be to use <code>into_iter</code> instead of <code>iter</code>, which will give you the elements by value. If you do that, you'll move the <code>arity</code> variable up to before the <code>binary</code> variable, since creating the <code>binary</code> variable will take ownership (move) <code>data.values</code>.</p>\n\n<p>The other option would be to change <code>self.enum_value_to_binary</code> to take it's argument by reference.</p>\n\n<p>Also possible that you meant for the type of <code>binary</code> to actually be <code>Vec&lt;Vec&lt;u8&gt;&gt;</code>.</p>\n"}], "owner": {"reputation": 710, "user_id": 2128615, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/eeg0I.gif?s=128&g=1", "display_name": "Relrin", "link": "https://stackoverflow.com/users/2128615/relrin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 775, "favorite_count": 0, "accepted_answer_id": 38837313, "answer_count": 1, "score": 1, "last_activity_date": 1470687674, "creation_date": 1470684558, "last_edit_date": 1470685182, "question_id": 38837105, "link": "https://stackoverflow.com/questions/38837105/convert-vector-of-enum-values-into-an-another-vector", "title": "Convert vector of enum values into an another vector", "body": "<p>I have the following code which generates a vector of bytes from the passed vector of enum values:</p>\n\n<pre><code>#[derive(Debug, PartialEq)]\npub enum BertType {\n    SmallInteger(u8),\n    Integer(i32),\n    Float(f64),\n    String(String),\n    Boolean(bool),\n    Tuple(BertTuple),\n}\n\n#[derive(Debug, PartialEq)]\npub struct BertTuple {\n    pub values: Vec&lt;BertType&gt;\n}\n\npub struct Serializer;\n\npub trait Serialize&lt;T&gt; {\n    fn to_bert(&amp;self, data: T) -&gt; Vec&lt;u8&gt;;\n}\n\nimpl Serializer {\n    fn enum_value_to_binary(&amp;self, enum_value: BertType) -&gt; Vec&lt;u8&gt; {\n        match enum_value {\n            BertType::SmallInteger(value_u8) =&gt; self.to_bert(value_u8),\n            BertType::Integer(value_i32) =&gt; self.to_bert(value_i32),\n            BertType::Float(value_f64) =&gt; self.to_bert(value_f64),\n            BertType::String(string) =&gt; self.to_bert(string),\n            BertType::Boolean(boolean) =&gt; self.to_bert(boolean),\n            BertType::Tuple(tuple) =&gt; self.to_bert(tuple),\n        }\n    }\n}\n\n// some functions for serialize bool/integer/etc. into Vec&lt;u8&gt;\n// ...\n\nimpl Serialize&lt;BertTuple&gt; for Serializer {\n    fn to_bert(&amp;self, data: BertTuple) -&gt; Vec&lt;u8&gt; {\n        let mut binary: Vec&lt;u8&gt; = data.values\n            .iter()\n            .map(|&amp;item| self.enum_value_to_binary(item)) // &lt;-- what the issue there?\n            .collect();\n\n        let arity = data.values.len();\n        match arity {\n            0...255 =&gt; self.get_small_tuple(arity as u8, binary),\n            _ =&gt; self.get_large_tuple(arity as i32, binary),\n        }\n    }\n}\n</code></pre>\n\n<p>But when compiling, I receive an error with iterating around <code>map</code>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: the trait bound `std::vec::Vec&lt;u8&gt;: std::iter::FromIterator&lt;std::vec::Vec&lt;u8&gt;&gt;` is not satisfied [E0277]\n           .collect();\n           ^~~~~~~\nhelp: run `rustc --explain E0277` to see a detailed explanation\nnote: a collection of type `std::vec::Vec&lt;u8&gt;` cannot be built from an iterator over elements of type `std::vec::Vec&lt;u8&gt;`\nerror: aborting due to previous error\nerror: Could not compile `bert-rs`.\n</code></pre>\n\n<p>How can I fix this issue with <code>std::iter::FromIterator</code>?</p>\n"}, {"tags": ["types", "rust"], "answers": [{"comments": [{"owner": {"reputation": 7558, "user_id": 448496, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/BZtrd.png?s=128&g=1", "display_name": "rubik", "link": "https://stackoverflow.com/users/448496/rubik"}, "edited": false, "score": 0, "creation_date": 1470689805, "post_id": 38837216, "comment_id": 65042298, "body": "Thanks. I actually removed quite a bit of code and I thought that it was a sufficiently small example. I shall be more mindful in future. Also thank you for the detailed explanation."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 7558, "user_id": 448496, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/BZtrd.png?s=128&g=1", "display_name": "rubik", "link": "https://stackoverflow.com/users/448496/rubik"}, "edited": false, "score": 0, "creation_date": 1470693154, "post_id": 38837216, "comment_id": 65043777, "body": "@rubik no worries! I just tend to point out the smaller versions that can be created because there&#39;s usually a few more steps to slimming down an example. At least your question included enough information to actually reproduce the problem! ^_^"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1470685032, "creation_date": 1470685032, "answer_id": 38837216, "question_id": 38836884, "link": "https://stackoverflow.com/questions/38836884/expected-type-vecu8-found-vecu8/38837216#38837216", "title": "Expected type `&amp;Vec&lt;u8&gt;`, found `&amp;Vec&lt;&amp;u8&gt;`", "body": "<p>As a professional programmer, you should learn to produce a <a href=\"/help/mcve\">Minimal, Complete, and Verifiable example</a>. Here is one for your problem:</p>\n\n<pre><code>extern crate itertools;\nuse itertools::Itertools;\n\nconst RANKS: [u8; 13] = [12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0];\n\nfn main() {\n    let one_combination: () = RANKS.iter().combinations_n(5).next();\n}\n</code></pre>\n\n<p>Which fails with the related error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: mismatched types [E0308]\n    let one_combination: () = RANKS.iter().combinations_n(5).next();\n                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nhelp: run `rustc --explain E0308` to see a detailed explanation\nnote: expected type `()`\nnote:    found type `std::option::Option&lt;std::vec::Vec&lt;&amp;u8&gt;&gt;`\n</code></pre>\n\n<p>This shows that this <em>particular</em> call of <code>combinations_n</code> does produce a <code>Vec&lt;&amp;u8&gt;</code>, not a <code>Vec&lt;u8&gt;</code>.</p>\n\n<p>So why is that?</p>\n\n<p>This line from the definition of <code>CombinationsN</code> is the key:</p>\n\n<pre><code>type Item = Vec&lt;I::Item&gt;\n</code></pre>\n\n<p><code>CombinationsN</code> is an <em>iterator adaptor</em>, so <code>I::Item</code> is the type of the iterator that precedes it. In our case, what is that? An <a href=\"https://doc.rust-lang.org/std/slice/struct.Iter.html\" rel=\"noreferrer\"><code>slice::Iter</code></a>, which has this:</p>\n\n<pre><code>type Item = &amp;'a T\n</code></pre>\n\n<p>So by iterating over a slice, you get references to the slice elements, and then the <em>reference itself</em> is passed to <code>CombinationsN</code>, which then clones <em>the reference</em> and collects it into a <code>Vec</code>.</p>\n\n<p>One solution is to clone the iterated elements:</p>\n\n<pre><code>RANKS.iter().cloned().combinations_n(5)\n</code></pre>\n"}], "owner": {"reputation": 7558, "user_id": 448496, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/BZtrd.png?s=128&g=1", "display_name": "rubik", "link": "https://stackoverflow.com/users/448496/rubik"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1721, "favorite_count": 0, "accepted_answer_id": 38837216, "answer_count": 1, "score": 2, "last_activity_date": 1470685032, "creation_date": 1470683664, "last_edit_date": 1470684411, "question_id": 38836884, "link": "https://stackoverflow.com/questions/38836884/expected-type-vecu8-found-vecu8", "title": "Expected type `&amp;Vec&lt;u8&gt;`, found `&amp;Vec&lt;&amp;u8&gt;`", "body": "<p>I have this small snippet, but it does not compile and all the errors stem from the fact that <a href=\"https://bluss.github.io/rust-itertools/doc/itertools/trait.Itertools.html#method.combinations_n\" rel=\"nofollow\"><code>combinations_n</code></a> returns <code>&amp;Vec&lt;&amp;u8&gt;</code> instead of <code>&amp;Vec&lt;u8&gt;</code>.</p>\n\n<pre><code>extern crate itertools;\n\nuse std::io;\nuse std::collections::BTreeMap;\nuse std::iter::Enumerate;\nuse itertools::Itertools;\n\nconst RANKS: [u8; 13] = [12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0];\n\nfn is_straight(hand: &amp;Vec&lt;u8&gt;) -&gt; bool {\n    for (i, h) in hand[1..].iter().enumerate() {\n        if h - hand[i] != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn hand_value(hand: &amp;Vec&lt;u8&gt;) -&gt; u8 {\n    hand.iter().fold(0_u8, |a, &amp;b| a + 2u8.pow(b as u32));\n}\n\nfn generate_flush_table() -&gt;  BTreeMap&lt;u8,u8&gt; {\n    let ft = BTreeMap::new();\n    let mut straight_counter = 1;\n    let mut other_counter = 323;\n    for flush in RANKS.iter().combinations_n(5) {\n        if flush == [12, 3, 2, 1, 0] {\n            continue;\n        } else if is_straight(&amp;flush) {\n            ft.insert(hand_value(&amp;flush), straight_counter);\n            straight_counter += 1;\n        } else {\n            ft.insert(hand_value(&amp;flush), other_counter);\n            other_counter += 1;\n        }\n    }\n    ft\n}\n\n\nfn main() {\n    let flush_table: BTreeMap&lt;u8,u8&gt; = generate_flush_table();\n    for (key, value) in flush_table.iter() {\n        println!(\"{}: {}\", key, value);\n    }\n}\n</code></pre>\n\n<p>Here's what the compiler says:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: the trait bound `&amp;u8: std::cmp::PartialEq&lt;_&gt;` is not satisfied [E0277]\n        if flush == [12, 3, 2, 1, 0] {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~\nhelp: run `rustc --explain E0277` to see a detailed explanation\nhelp: the following implementations were found:\nhelp:   &lt;u8 as std::cmp::PartialEq&gt;\nnote: required because of the requirements on the impl of `std::cmp::PartialEq&lt;[_; 5]&gt;` for `std::vec::Vec&lt;&amp;u8&gt;`\nerror: mismatched types [E0308]\n        } else if is_straight(&amp;flush) {\n                              ^~~~~~\nhelp: run `rustc --explain E0308` to see a detailed explanation\nnote: expected type `&amp;std::vec::Vec&lt;u8&gt;`\nnote:    found type `&amp;std::vec::Vec&lt;&amp;u8&gt;`\nerror: mismatched types [E0308]\n            ft.insert(hand_value(&amp;flush), straight_counter);\n                                 ^~~~~~\nhelp: run `rustc --explain E0308` to see a detailed explanation\nnote: expected type `&amp;std::vec::Vec&lt;u8&gt;`\nnote:    found type `&amp;std::vec::Vec&lt;&amp;u8&gt;`\nerror: mismatched types [E0308]\n            ft.insert(hand_value(&amp;flush), other_counter);\n                                 ^~~~~~\nhelp: run `rustc --explain E0308` to see a detailed explanation\nnote: expected type `&amp;std::vec::Vec&lt;u8&gt;`\nnote:    found type `&amp;std::vec::Vec&lt;&amp;u8&gt;`\n</code></pre>\n\n<p>I really don't understand how the type of <code>flush</code> could really be <code>&amp;Vec&lt;&amp;u8&gt;</code>, given that <code>combinations_n</code> returns a <a href=\"https://bluss.github.io/rust-itertools/doc/itertools/struct.CombinationsN.html\" rel=\"nofollow\"><code>CombinationsN</code></a> and in the documentation I read</p>\n\n<pre><code>impl&lt;I&gt; Iterator for CombinationsN&lt;I&gt;\n    where I: Iterator,\n          I::Item: Clone\n{\n    type Item = Vec&lt;I::Item&gt;\n</code></pre>\n\n<p>and so it should actually be a <code>Vec&lt;u8&gt;</code>.</p>\n"}, {"tags": ["rust", "borrow-checker"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470673033, "post_id": 38833817, "comment_id": 65033344, "body": "Would you kindly produce a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>? For example, you have two <code>match</code> statements, so it&#39;s unclear which is causing the problem. Additionally, there is a <code>self</code> parameter, but we cannot tell what the struct itself is. Perhaps the core of the problem could be removed from the context of an iterator and be expressed as just a <code>match</code> statement directly inside <code>main</code> or another small function?"}], "answers": [{"tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": true, "score": 2, "last_activity_date": 1470675513, "creation_date": 1470675513, "answer_id": 38834754, "question_id": 38833817, "link": "https://stackoverflow.com/questions/38833817/how-do-i-modify-a-value-after-matching-on-it/38834754#38834754", "title": "How do I modify a value after matching on it?", "body": "<p>Your <code>match (left, right)</code> moves values out of <code>left</code> and <code>right</code>, so they're empty in the next iteration. So why not just move them back?</p>\n\n<pre><code>Ordering::Less =&gt; {\n    left = self.left.next();\n    right = Some(right_value);\n},\nOrdering::Greater =&gt; {\n    left = Some(left_value);\n    right = self.right.next();\n},\n</code></pre>\n\n<p>Now, that's still a bit ugly. A nicer way to do this is to remove the <code>match</code> altogether. First steal a <code>try_opt!</code> - I used <a href=\"http://crumblingstatue.github.io/doc/try_opt/src/try_opt/lib.rs.html#1-37\" rel=\"nofollow\">http://crumblingstatue.github.io/doc/try_opt/src/try_opt/lib.rs.html#1-37</a></p>\n\n<pre><code>macro_rules! try_opt {\n    ($e:expr) =&gt;(\n        match $e {\n            Some(v) =&gt; v,\n            None =&gt; return None,\n        }\n    )\n}\n</code></pre>\n\n<p>Then just do</p>\n\n<pre><code>let mut left = try_opt!(self.left.next());\nlet mut right = try_opt!(self.right.next());\n\nloop {\n    match left.cmp(&amp;right) {\n        Ordering::Equal =&gt; return Some((left, right)),\n        Ordering::Less =&gt; left = try_opt!(self.left.next()),\n        Ordering::Greater =&gt; right = try_opt!(self.right.next()),\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 103, "user_id": 6692065, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7a5cfe49c337b006f0fc6390ecdabd47?s=128&d=identicon&r=PG", "display_name": "archer884", "link": "https://stackoverflow.com/users/6692065/archer884"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 81, "favorite_count": 0, "accepted_answer_id": 38834754, "answer_count": 1, "score": 0, "last_activity_date": 1470677645, "creation_date": 1470672211, "last_edit_date": 1470677645, "question_id": 38833817, "link": "https://stackoverflow.com/questions/38833817/how-do-i-modify-a-value-after-matching-on-it", "title": "How do I modify a value after matching on it?", "body": "<p>I'm trying to walk a pair of iterators. This seems pretty trivial conceptually, but actually expressing it has not been.</p>\n\n<pre><code>fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n    let mut left = self.left.next();\n    let mut right = self.right.next();\n\n    loop {\n        match (left, right) {\n            (Some(left_value), Some(right_value)) =&gt; {\n                match left_value.cmp(&amp;right_value) {\n                    Ordering::Equal =&gt; return Some((left_value, right_value)),\n                    Ordering::Less =&gt; left = self.left.next(),\n                    Ordering::Greater =&gt; right = self.right.next(),\n                }\n            }\n\n            _ =&gt;  return None\n        }\n    }\n}\n</code></pre>\n\n<p>This does not work because left and right are moved when I match on them. What's a way to express this successfully?</p>\n\n<p>Example (also known as <em>entire crate</em>):</p>\n\n<pre><code>use std::cmp::{Eq, Ord, Ordering};\n\npub trait AscendingIterator: Iterator where &lt;Self as Iterator&gt;::Item: Eq + Ord {}\n\npub trait DescendingIterator: Iterator where &lt;Self as Iterator&gt;::Item: Eq + Ord {}\n\npub struct AscendingIntersection&lt;T, T1, T2&gt;\n    where T: Eq + Ord,\n          T1: AscendingIterator&lt;Item = T&gt;,\n          T2: AscendingIterator&lt;Item = T&gt;\n{\n    left: T1,\n    right: T2,\n}\n\nimpl&lt;T, T1, T2&gt; Iterator for AscendingIntersection&lt;T, T1, T2&gt;\n    where T: Eq + Ord,\n          T1: AscendingIterator&lt;Item = T&gt;,\n          T2: AscendingIterator&lt;Item = T&gt;\n{\n    type Item = (T, T);\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        let mut left = self.left.next();\n        let mut right = self.right.next();\n\n        loop {\n            match (left, right) {\n                (Some(left_value), Some(right_value)) =&gt; {\n                    match left_value.cmp(&amp;right_value) {\n                        Ordering::Equal =&gt; return Some((left_value, right_value)),\n                        Ordering::Less =&gt; left = self.left.next(),\n                        Ordering::Greater =&gt; right = self.right.next(),\n                    }\n                }\n\n                _ =&gt; return None,\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>Edit: I do apologize for this lazy example; the amount of typing I can do is limited by an unrelated cycling injury.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 123, "user_id": 6667684, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4ca895c1e809efdd5178f11403723651?s=128&d=identicon&r=PG&f=1", "display_name": "fkjogu", "link": "https://stackoverflow.com/users/6667684/fkjogu"}, "edited": false, "score": 0, "creation_date": 1470665120, "post_id": 38830397, "comment_id": 65027945, "body": "I&#39;m a bit struck, that you can implement a trait for built-in type not defined in your own crate. I thought that was impossible."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 123, "user_id": 6667684, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4ca895c1e809efdd5178f11403723651?s=128&d=identicon&r=PG&f=1", "display_name": "fkjogu", "link": "https://stackoverflow.com/users/6667684/fkjogu"}, "edited": false, "score": 2, "creation_date": 1470665572, "post_id": 38830397, "comment_id": 65028284, "body": "it&#39;s possible, because the trait you are implementing is generic and in this impl bound to your local type."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 15, "last_activity_date": 1470662615, "creation_date": 1470662615, "answer_id": 38830397, "question_id": 38829967, "link": "https://stackoverflow.com/questions/38829967/how-do-i-implement-commutative-scalar-multiplication-with-a-built-in-type-like/38830397#38830397", "title": "How do I implement commutative (scalar) multiplication with a built-in type like `f64`?", "body": "<p>You can simply reverse your implementation, by swapping <code>f64</code> with <code>Foo</code></p>\n\n<pre><code>impl std::ops::Mul&lt;Foo&gt; for f64 {\n    type Output = Foo;\n\n    fn mul(self, rhs: Foo) -&gt; Foo {\n        rhs * self\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=d0ea8f3d509fa421b1d55d1bcc9e8d25&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">Try it out in the Playground</a></p>\n"}], "owner": {"reputation": 123, "user_id": 6667684, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4ca895c1e809efdd5178f11403723651?s=128&d=identicon&r=PG&f=1", "display_name": "fkjogu", "link": "https://stackoverflow.com/users/6667684/fkjogu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1216, "favorite_count": 2, "accepted_answer_id": 38830397, "answer_count": 1, "score": 9, "last_activity_date": 1470665168, "creation_date": 1470661442, "last_edit_date": 1470665168, "question_id": 38829967, "link": "https://stackoverflow.com/questions/38829967/how-do-i-implement-commutative-scalar-multiplication-with-a-built-in-type-like", "title": "How do I implement commutative (scalar) multiplication with a built-in type like `f64`?", "body": "<p>I'd like to implement a commutative scalar <code>f64</code> multiplication operation using the <code>*</code> operator. Implementing the <code>Mul&lt;f64&gt;</code> trait for my type gives me a right side multiplication like.</p>\n\n<pre><code>struct Foo(f64);\n\nimpl Mul&lt;f64&gt; for Foo {\n    type Output = Foo;\n\n    fn mul(self, _rhs: f64) -&gt; Foo {\n        // implementation\n    }\n}\n\nlet a = Foo(1.23);\na * 3.45; // works\n3.45 * a; // error: the trait bound `{float}: std::ops::Mul&lt;Foo&gt;` is not satisfied [E0277]\n</code></pre>\n\n<p>For a non-builtin scalar type, I can implement the same trait the other way round on the scalar, i.e. implementing <code>Mul&lt;Foo&gt;</code> on my scalar type.</p>\n\n<p>How do I get a left side implementation for a built-in type like <code>f64</code> too? </p>\n"}, {"tags": ["macros", "rust", "variadic-macros"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470660735, "post_id": 38829434, "comment_id": 65024900, "body": "<i>Rust v1.11 and prior</i> \u2014 does that mean that ugly wart has finally been fixed?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1470660812, "post_id": 38829434, "comment_id": 65024963, "body": "@Shepmaster <i>Apparently.</i>  Haven&#39;t had an opportunity to test it thoroughly, myself, but looks like the reparse trick might be on the way out."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 4, "last_activity_date": 1470660781, "last_edit_date": 1470660781, "creation_date": 1470659855, "answer_id": 38829434, "question_id": 38828920, "link": "https://stackoverflow.com/questions/38828920/how-to-write-a-macro-in-rust-to-match-any-element-in-a-set/38829434#38829434", "title": "How to write a macro in Rust to match any element in a set?", "body": "<pre class=\"lang-rust prettyprint-override\"><code>macro_rules! cmp {\n    // Hack for Rust v1.11 and prior.\n    (@as_expr $e:expr) =&gt; { $e };\n\n    ($lhs:expr, $cmp:tt any $($rhss:expr),*) =&gt; {\n        // We do this to bind `$lhs` to a name so we don't evaluate it multiple\n        // times.  Use a leading underscore to avoid an unused variable warning\n        // in the degenerate case of no `rhs`s.\n        match $lhs { _lhs =&gt; {\n            false || $(\n                cmp!(@as_expr _lhs $cmp $rhss)\n            ) || *\n        //    ^- this is used as a *separator* between terms\n        }}\n    };\n\n    // Same, but for \"all\".\n    ($lhs:expr, $cmp:tt all $($rhss:expr),*) =&gt; {\n        match $lhs { _lhs =&gt; {\n            true &amp;&amp; $( cmp!(@as_expr _lhs $cmp $rhss) ) &amp;&amp; *\n        }}\n    };\n}\n\nfn main() {\n    let value = 2;\n    if cmp!(value, == any 1, 2, 3) {\n        println!(\"true! value: {:?}\", value);\n    }\n    if cmp!(value*2, != all 5, 7, 1&lt;&lt;7 - 1) {\n        println!(\"true! value: {:?}\", value);\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "is_accepted": false, "score": 0, "last_activity_date": 1470659943, "creation_date": 1470659943, "answer_id": 38829472, "question_id": 38828920, "link": "https://stackoverflow.com/questions/38828920/how-to-write-a-macro-in-rust-to-match-any-element-in-a-set/38829472#38829472", "title": "How to write a macro in Rust to match any element in a set?", "body": "<p>Yes this is possible, the following macro expands to do each check.</p>\n\n<pre><code>macro_rules! elem {\n    ($n:expr, $( $hs:expr ),*) =&gt; ($( $n == $hs )||* );\n}\n\nfn main() {\n    if elem!(4, 1, 2, 3, 4) {\n        println!(\"OK\");\n    }\n}\n</code></pre>\n\n<hr>\n\n<p>Thanks to @vfs on #rust in IRC.</p>\n"}, {"tags": [], "owner": {"reputation": 2589, "user_id": 1254484, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/acf54b662a117afbdf33f54fce9723fc?s=128&d=identicon&r=PG", "display_name": "Pascal", "link": "https://stackoverflow.com/users/1254484/pascal"}, "is_accepted": false, "score": 2, "last_activity_date": 1470660023, "creation_date": 1470660023, "answer_id": 38829499, "question_id": 38828920, "link": "https://stackoverflow.com/questions/38828920/how-to-write-a-macro-in-rust-to-match-any-element-in-a-set/38829499#38829499", "title": "How to write a macro in Rust to match any element in a set?", "body": "<p>First off, if your <code>a</code>, <code>b</code>, and <code>c</code> are concrete values, you can just use <code>match</code>:</p>\n\n<pre><code>fn main() {\n    let x = 42;\n\n    match x {\n        1 | 2 | 3 =&gt; println!(\"foo\"),\n        42 =&gt; println!(\"bar\"),\n        _ =&gt; println!(\"nope\"),\n    }\n}\n</code></pre>\n\n<p>If you want to match on variables you need to write the <code>match</code> arms like this:</p>\n\n<pre><code>match x {\n    x if x == a || x == b || x == c =&gt; println!(\"foo\"),\n    42 =&gt; println!(\"bar\"),\n    _ =&gt; println!(\"nope\"),\n}\n</code></pre>\n\n<p>\u2026which is basically what you want to avoid.</p>\n\n<p>But: A pretty direct translation of your C macro is also possible!</p>\n\n<pre><code>macro_rules! elem {\n    ($val:expr, $($var:expr),*) =&gt; {\n        $($val == $var)||*\n    }\n}\n\nfn main() {\n    let y = 42;\n    let x = 42;\n\n    if elem!(x, 1, 3, y) {\n        println!(\"{}\", x);\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 2589, "user_id": 1254484, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/acf54b662a117afbdf33f54fce9723fc?s=128&d=identicon&r=PG", "display_name": "Pascal", "link": "https://stackoverflow.com/users/1254484/pascal"}, "edited": false, "score": 0, "creation_date": 1470666144, "post_id": 38829566, "comment_id": 65028727, "body": "Not as good as benchmarking your actual code, but here is a paper (from 2007) on how LLVM optimizes/lowers switch statements: <a href=\"http://llvm.org/pubs/2007-05-31-Switch-Lowering.pdf\" rel=\"nofollow noreferrer\">llvm.org/pubs/2007-05-31-Switch-Lowering.pdf</a>"}], "tags": [], "owner": {"reputation": 181, "user_id": 2658436, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/86a3a407a5f6ea1204b5d57936e83024?s=128&d=identicon&r=PG", "display_name": "tari", "link": "https://stackoverflow.com/users/2658436/tari"}, "is_accepted": false, "score": 1, "last_activity_date": 1470660196, "creation_date": 1470660196, "answer_id": 38829566, "question_id": 38828920, "link": "https://stackoverflow.com/questions/38828920/how-to-write-a-macro-in-rust-to-match-any-element-in-a-set/38829566#38829566", "title": "How to write a macro in Rust to match any element in a set?", "body": "<p>I'm partial to writing this without a macro, taking advantage of <code>contains</code> on arrays.</p>\n\n<pre><code>fn main() {\n    if [1, 2, 3, 4].contains(&amp;4) {\n        println!(\"OK\");\n    }\n}\n</code></pre>\n\n<p>It's hard to predict what will happen to this when optimized, but if absolute performance is a goal you'd do well to benchmark each approach.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 476, "favorite_count": 0, "answer_count": 4, "score": 0, "last_activity_date": 1470660781, "creation_date": 1470658308, "last_edit_date": 1495540828, "question_id": 38828920, "link": "https://stackoverflow.com/questions/38828920/how-to-write-a-macro-in-rust-to-match-any-element-in-a-set", "title": "How to write a macro in Rust to match any element in a set?", "body": "<p>In C, I'm used to having:</p>\n\n<pre><code>if (ELEM(value, a, b, c)) { ... }\n</code></pre>\n\n<p>which is a macro with a variable number of arguments to avoid typing out</p>\n\n<pre><code>if (value == a || value == b || value == c) { ... }\n</code></pre>\n\n<p>A C example can be seen in <a href=\"https://stackoverflow.com/questions/24836793/varargs-elem-macro-for-use-with-c\">Varargs `ELEM` macro for use with C</a>.</p>\n\n<p>Is this possible in Rust? I assume it would use <code>match</code>. If so, how would variadic arguments be used to achieve this?</p>\n"}, {"tags": ["iterator", "rust"], "answers": [{"tags": [], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "is_accepted": false, "score": 26, "last_activity_date": 1470651755, "creation_date": 1470651755, "answer_id": 38826737, "question_id": 38826633, "link": "https://stackoverflow.com/questions/38826633/how-to-skip-the-first-items-of-an-iterator-in-rust/38826737#38826737", "title": "How to skip the first item(s) of an iterator in Rust?", "body": "<p>Turns out the <a href=\"https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.skip\" rel=\"noreferrer\"><code>.skip()</code></a> method can be used, eg:</p>\n\n<pre><code>use std::env;\n\nfn main() {\n    for arg in env::args().skip(1) {\n        println!(\"Argument: {}\", arg);\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4899, "favorite_count": 1, "answer_count": 1, "score": 19, "last_activity_date": 1470651755, "creation_date": 1470651419, "question_id": 38826633, "link": "https://stackoverflow.com/questions/38826633/how-to-skip-the-first-items-of-an-iterator-in-rust", "title": "How to skip the first item(s) of an iterator in Rust?", "body": "<p>When iterating over arguments (for example) thats the most straightforward way to skip the first <em>N</em> elements?</p>\n\n<p>eg:</p>\n\n<pre><code>use std::env;\n\nfn main() {\n    for arg in env::args() {\n        println!(\"Argument: {}\", arg);\n    }\n}\n</code></pre>\n\n<p>I tried <code>env::args()[1..]</code> but slicing isn't supported.</p>\n\n<p>Whats the simplest way to skip the first arguments of an iterator?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1470648767, "post_id": 38824056, "comment_id": 65017254, "body": "have you tried splitting the lib into another crate? maybe it&#39;s a bug due to the lib and bin being in the same crate?"}, {"owner": {"reputation": 1869, "user_id": 1583006, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/98b87a518a5a9166ba85b3f6d69e5d50?s=128&d=identicon&r=PG", "display_name": "baldrs", "link": "https://stackoverflow.com/users/1583006/baldrs"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1470649485, "post_id": 38824056, "comment_id": 65017739, "body": "If I move main.rs to another package, binary gets linked against library if I build it like <code>cargo rustc --release -j 5 -- -C prefer-dynamic</code>, thanks! One question still remains, is it possible to manipulate how does an executable looks for this library? I saw for example some programs linked using a relative path like <code>..&#47;lib64&#47;libwine.so</code> in PlayOnLinux wine builds"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1470652920, "post_id": 38824056, "comment_id": 65019906, "body": "That&#39;s a really good question, I suggest you post it as a separate question, but I fear Rust has no solution yet."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1470653272, "post_id": 38824056, "comment_id": 65020145, "body": "you can also try adding the crate-type field to the binary, as apparently the field is ignored when the crate is only a dependency."}, {"owner": {"reputation": 1122, "user_id": 4970650, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/496526a825adf2e6587a19d3a6d391f7?s=128&d=identicon&r=PG", "display_name": "Cirelli94", "link": "https://stackoverflow.com/users/4970650/cirelli94"}, "edited": false, "score": 0, "creation_date": 1543831019, "post_id": 38824056, "comment_id": 94045510, "body": "Has anyone used this and debugged with VSCode?"}], "owner": {"reputation": 1869, "user_id": 1583006, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/98b87a518a5a9166ba85b3f6d69e5d50?s=128&d=identicon&r=PG", "display_name": "baldrs", "link": "https://stackoverflow.com/users/1583006/baldrs"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 1846, "favorite_count": 0, "answer_count": 0, "score": 5, "last_activity_date": 1470660539, "creation_date": 1470643399, "last_edit_date": 1470660539, "question_id": 38824056, "link": "https://stackoverflow.com/questions/38824056/how-to-link-main-rs-to-lib-rs-dynamically", "title": "How to link main.rs to lib.rs dynamically?", "body": "<p>I have a crate with both <code>src/lib.rs</code> and <code>src/main.rs</code>.</p>\n\n<p><code>main.rs</code> is just using <code>extern crate programname</code> (which is <code>lib.rs</code>) and uses certain functions from <code>lib.rs</code> and it's submodules. </p>\n\n<p>The <a href=\"https://doc.rust-lang.org/book/advanced-linking.html#static-linking\" rel=\"nofollow\">documentation on linking</a> says: </p>\n\n<blockquote>\n  <p>Pure-Rust dependencies are statically linked by default so you can use created binaries and libraries without installing Rust everywhere. </p>\n</blockquote>\n\n<p>How can I change this behavior so a binary created from <code>main.rs</code> will be dynamically linked to library produced by <code>lib.rs</code>?</p>\n\n<p>I've added the following to <code>Cargo.toml</code></p>\n\n<pre><code>[lib]\npath = \"src/lib.rs\"\ncrate-type = [\"dylib\"]\n\n[[bin]]\nname = \"programname\"\npath = \"src/main.rs\"\n</code></pre>\n\n<p>But it does not compile and gives me errors like: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: cannot satisfy dependencies so `std` only shows up once\nhelp: having upstream crates all available in one format will likely make this go away\n</code></pre>\n\n<p>If I add \"rlib\" to <code>lib</code> section, it compiles, but the binary is not linked against <code>libprogramname.so</code></p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1471004525, "post_id": 38917641, "comment_id": 65192627, "body": "The na&#239;ve algorithm is O(n^2), I believe, which is part of the reason it&#39;s not included in the standard library."}, {"owner": {"reputation": 435, "user_id": 6517909, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/542422dbe372e54be780ad815e253206?s=128&d=identicon&r=PG&f=1", "display_name": "Doe", "link": "https://stackoverflow.com/users/6517909/doe"}, "edited": false, "score": 0, "creation_date": 1471676881, "post_id": 38917641, "comment_id": 65452182, "body": "That&#39;s what I ended up doing. +1 for taking the time to illustrate your response with an implementation."}], "tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 3, "last_activity_date": 1471004571, "last_edit_date": 1471004571, "creation_date": 1471003793, "answer_id": 38917641, "question_id": 38821671, "link": "https://stackoverflow.com/questions/38821671/how-can-slices-be-split-using-another-slice-as-a-delimiter/38917641#38917641", "title": "How can slices be split using another slice as a delimiter?", "body": "<blockquote>\n  <p>Does the standard library provide a way to split a slice <code>[T]</code> using another slice of the same type as a delimiter?</p>\n</blockquote>\n\n<p>As of Rust 1.9, no, but you can implement it:</p>\n\n<pre><code>fn main() {\n    let a = [1, 4, 7, 0, 0, 8, 10, 0, 0];\n    let b = [0, 0];\n    let mut iter = split_subsequence(&amp;a, &amp;b);\n    assert_eq!(&amp;[1, 4, 7], iter.next().unwrap());\n    assert_eq!(&amp;[8, 10], iter.next().unwrap());\n    assert!(iter.next().unwrap().is_empty());\n    assert_eq!(None, iter.next());\n}\n\npub struct SplitSubsequence&lt;'a, 'b, T: 'a + 'b&gt; {\n    slice: &amp;'a [T],\n    needle: &amp;'b [T],\n    ended: bool,\n}\n\nimpl&lt;'a, 'b, T: 'a + 'b + PartialEq&gt; Iterator for SplitSubsequence&lt;'a, 'b, T&gt; {\n    type Item = &amp;'a [T];\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        if self.ended {\n            None\n        } else if self.slice.is_empty() {\n            self.ended = true;\n            Some(self.slice)\n        } else if let Some(p) = self.slice\n                                    .windows(self.needle.len())\n                                    .position(|w| w == self.needle) {\n            let item = &amp;self.slice[..p];\n            self.slice = &amp;self.slice[p + self.needle.len()..];\n            Some(item)\n        } else {\n            let item = self.slice;\n            self.slice = &amp;self.slice[self.slice.len() - 1..];\n            Some(item)\n        }\n    }\n}\n\nfn split_subsequence&lt;'a, 'b, T&gt;(slice: &amp;'a [T], needle: &amp;'b [T]) -&gt; SplitSubsequence&lt;'a, 'b, T&gt;\n    where T: 'a + 'b + PartialEq\n{\n    SplitSubsequence {\n        slice: slice,\n        needle: needle,\n        ended: false,\n    }\n}\n</code></pre>\n\n<p>Note that this implementation uses a <a href=\"https://en.wikipedia.org/wiki/String_searching_algorithm\" rel=\"nofollow\">naive</a> algorithm for finding an equal subsequence.</p>\n"}], "owner": {"reputation": 435, "user_id": 6517909, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/542422dbe372e54be780ad815e253206?s=128&d=identicon&r=PG&f=1", "display_name": "Doe", "link": "https://stackoverflow.com/users/6517909/doe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 361, "favorite_count": 0, "accepted_answer_id": 38917641, "answer_count": 1, "score": 4, "last_activity_date": 1471004571, "creation_date": 1470633031, "last_edit_date": 1470660179, "question_id": 38821671, "link": "https://stackoverflow.com/questions/38821671/how-can-slices-be-split-using-another-slice-as-a-delimiter", "title": "How can slices be split using another slice as a delimiter?", "body": "<p>Does the standard library provide a way to split a slice <code>[T]</code> using another slice of the same type as a delimiter? The library's documentation lists methods that operate on single-element delimiters rather than slices.</p>\n\n<p>For example: A slice of 5 <code>u64</code> integers <code>[1u64, 4u64, 0u64, 0u64, 8u64]</code> split using <code>[0u64, 0u64]</code> as a delimiter would result in two slices <code>[1u64, 4u64]</code> and <code>[8u64]</code>.</p>\n"}, {"tags": ["vector", "iterator", "rust"], "answers": [{"comments": [{"owner": {"reputation": 3376, "user_id": 134409, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/e1ec6b4e77bfbae1b992957792572630?s=128&d=identicon&r=PG", "display_name": "dpc.pw", "link": "https://stackoverflow.com/users/134409/dpc-pw"}, "edited": false, "score": 0, "creation_date": 1471285558, "post_id": 38820816, "comment_id": 65276041, "body": "Yes. As you can see here: <a href=\"https://doc.rust-lang.org/std/iter/trait.IntoIterator.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/iter/trait.IntoIterator.html</a>  <code>into_iter</code> is taking <code>self</code> (not &amp;self, or &amp;mut self), which means it is consuming (moving) the object it is being called on.  You can accept your own answer and close the question this way."}], "tags": [], "owner": {"reputation": 464, "user_id": 784831, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/5cb215fabc8c127a447835ebd99c2882?s=128&d=identicon&r=PG", "display_name": "Noi Sek", "link": "https://stackoverflow.com/users/784831/noi-sek"}, "is_accepted": true, "score": 3, "last_activity_date": 1470659888, "last_edit_date": 1470659888, "creation_date": 1470626286, "answer_id": 38820816, "question_id": 38820764, "link": "https://stackoverflow.com/questions/38820764/looping-through-a-refcell-wrapped-vec-with-rust/38820816#38820816", "title": "Looping through a RefCell wrapped Vec with Rust", "body": "<p>It appears the issue was in there being a difference between <code>Vec.into_iter</code> and <code>Vec.iter</code>. To solve, change:</p>\n\n<pre><code>for i in arr.into_iter() {\n    println!(\"{}\", i);\n}\n</code></pre>\n\n<p>to:</p>\n\n<pre><code>for i in arr.iter() {\n    println!(\"{}\", i);\n}\n</code></pre>\n\n<p>As described in <a href=\"http://hermanradtke.com/2015/06/22/effectively-using-iterators-in-rust.html\" rel=\"nofollow\"><em>Effectively Using Iterators In Rust</em></a>.</p>\n"}], "owner": {"reputation": 464, "user_id": 784831, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/5cb215fabc8c127a447835ebd99c2882?s=128&d=identicon&r=PG", "display_name": "Noi Sek", "link": "https://stackoverflow.com/users/784831/noi-sek"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1072, "favorite_count": 0, "accepted_answer_id": 38820816, "answer_count": 1, "score": 1, "last_activity_date": 1470659888, "creation_date": 1470625842, "last_edit_date": 1470659844, "question_id": 38820764, "link": "https://stackoverflow.com/questions/38820764/looping-through-a-refcell-wrapped-vec-with-rust", "title": "Looping through a RefCell wrapped Vec with Rust", "body": "<p>I have a struct that contains a <code>RefCell</code> for storing mutable values within a vector, and I'd like to loop over its values.</p>\n\n<p>Adding an element causes no problems, but when attempting to convert the borrowed vector into an iterator it throws:</p>\n\n<blockquote>\n  <p>error: cannot move out of borrowed content [E0507]</p>\n</blockquote>\n\n<p>Why does the borrow even matter, if it's immutable? I don't understand why the compiler would mark this as a potential issue when the content of the variable doesn't even change.</p>\n\n<p>I can get around the ownership issue by cloning it, but <em>why do I need to do that in the first place</em>? Cloning the structure I'm trying to loop over is probably going to have a high CPU cost and I'd prefer not to have to do it if possible.</p>\n\n<p>Example of what I'm trying to achieve:</p>\n\n<pre><code>fn main() {\n    use std::cell::RefCell;\n    let c = RefCell::new(vec![1, 2, 3]);\n\n    let arr = c.borrow();\n\n    for i in arr.into_iter() {\n        println!(\"{}\", i);\n    }\n}\n</code></pre>\n\n<p>Is there something I'm missing here or is Rust being overly cautious about this?</p>\n\n<p>Would appreciate it if someone could fill any gaps in my understanding of how this works.</p>\n"}, {"tags": ["pointers", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470614255, "post_id": 38819569, "comment_id": 65006044, "body": "Why can&#39;t you just pass in a <code>*const Foo</code> to the C code instead?"}, {"owner": {"reputation": 335, "user_id": 1781005, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/9a6e34b960b96860c3aeb0faf7d2e3ec?s=128&d=identicon&r=PG", "display_name": "Mystor", "link": "https://stackoverflow.com/users/1781005/mystor"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470625837, "post_id": 38819569, "comment_id": 65008209, "body": "In this particular example, the FFI is giving me a <code>*const Baz</code>, and I am expected to retrieve the original object from it. If I could simply pass around the original object, I would, but that is not an option."}], "answers": [{"comments": [{"owner": {"reputation": 2818, "user_id": 1172350, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/757373ec5a9f3631247eb0c3c8fdd44c?s=128&d=identicon&r=PG", "display_name": "dcoles", "link": "https://stackoverflow.com/users/1172350/dcoles"}, "edited": false, "score": 0, "creation_date": 1572157844, "post_id": 38886218, "comment_id": 103469610, "body": "Note: This currently does not work for statics and constants as <a href=\"https://github.com/rust-lang/rust/issues/51911\" rel=\"nofollow noreferrer\">dereferencing raw pointers</a> and <a href=\"https://github.com/rust-lang/rust/issues/51910\" rel=\"nofollow noreferrer\">casting pointers to integers</a> is unstable in these scopes."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1580374925, "post_id": 38886218, "comment_id": 106078776, "body": "Note: Unfortunately dereferencing a null pointer is (now) UB according to <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2582-raw-reference-mir-operator.md\" rel=\"nofollow noreferrer\">RFC-2582</a>, see notably the last section on <b>offsetof woes</b>. I believe that should this RFC be accepted, <a href=\"https://stackoverflow.com/a/40310851/147192\">my alternative implementation</a> would be sound. Emphasis on <i>believe</i>."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 9, "last_activity_date": 1470881368, "creation_date": 1470881368, "answer_id": 38886218, "question_id": 38819569, "link": "https://stackoverflow.com/questions/38819569/how-to-get-a-pointer-to-a-containing-struct-from-a-pointer-to-a-member/38886218#38886218", "title": "How to get a pointer to a containing struct from a pointer to a member?", "body": "<p>The dereference expression produces an lvalue, but that lvalue is not actually <em>read</em> from, we're just doing pointer math on it, so <em>in theory</em>, it should be well defined. That's just my interpretation though.</p>\n\n<p>My solution involves using a null pointer to retrieve the offset to the field, so it's a bit simpler than yours as it avoids one subtraction (we'd be subtracting 0). I believe I saw some C compilers/standard libraries implementing <code>offsetof</code> by essentially returning the address of a field from a null pointer, which is what inspired the following solution.</p>\n\n<pre><code>fn main() {\n    let p: *const Baz = 0x1248 as *const _;\n    let p2: *const Foo = unsafe { ((p as usize) - (&amp;(*(0 as *const Foo)).memberB as *const _ as usize)) as *const _ };\n    println!(\"{:p}\", p2);\n}\n</code></pre>\n\n<p>We can also define our own <code>offset_of!</code> macro:</p>\n\n<pre><code>macro_rules! offset_of {\n    ($ty:ty, $field:ident) =&gt; {\n        unsafe { &amp;(*(0 as *const $ty)).$field as *const _ as usize }\n    }\n}\n\nfn main() {\n    let p: *const Baz = 0x1248 as *const _;\n    let p2: *const Foo = ((p as usize) - offset_of!(Foo, memberB)) as *const _;\n    println!(\"{:p}\", p2);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 4, "last_activity_date": 1604933874, "last_edit_date": 1604933874, "creation_date": 1604931559, "answer_id": 64753369, "question_id": 38819569, "link": "https://stackoverflow.com/questions/38819569/how-to-get-a-pointer-to-a-containing-struct-from-a-pointer-to-a-member/64753369#64753369", "title": "How to get a pointer to a containing struct from a pointer to a member?", "body": "<p>With the implementation of <a href=\"https://rust-lang.github.io/rfcs/2582-raw-reference-mir-operator.html\" rel=\"nofollow noreferrer\">RFC 2582, raw reference MIR operator</a>, it is now possible to get the address of a field in a struct <em>without</em> an instance of the struct and without invoking undefined behavior.</p>\n<p>Unfortunately, the ability is not stable as of Rust 1.47:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>#![feature(raw_ref_macros)]\n\nuse std::{mem::MaybeUninit, ptr};\n\nstruct Example {\n    a: i32,\n    b: u8,\n    c: bool,\n}\n\nfn main() {\n    let offset = unsafe {\n        let base = MaybeUninit::&lt;Example&gt;::uninit();\n        let base_ptr = base.as_ptr();\n        let c = ptr::raw_const!((*base_ptr).c);\n        (c as usize) - (base_ptr as usize)\n    };\n    println!(&quot;{}&quot;, offset);\n}\n</code></pre>\n<p>The implementation of this is tricky and nuanced. It is best to use a crate that is well-maintained, such as <a href=\"https://crates.io/crates/memoffset\" rel=\"nofollow noreferrer\">memoffset</a>. You can opt into this unstable feature by using the <code>unstable_raw</code> feature flag.</p>\n<hr />\n<p>Before this functionality is stabilized, you <em>must</em> have a valid instance of the struct. You can use tools like <code>once_cell</code> to minimize the overhead of the dummy value that you need to create:</p>\n<pre><code>use once_cell::sync::Lazy; // 1.4.1\n\nstruct Example {\n    a: i32,\n    b: u8,\n    c: bool,\n}\n\nstatic DUMMY: Lazy&lt;Example&gt; = Lazy::new(|| Example {\n    a: 0,\n    b: 0,\n    c: false,\n});\n\nstatic OFFSET_C: Lazy&lt;usize&gt; = Lazy::new(|| {\n    let base: *const Example = &amp;*DUMMY;\n    let c: *const bool = &amp;DUMMY.c;\n    (c as usize) - (base as usize)\n});\n\nfn main() {\n    println!(&quot;{}&quot;, *OFFSET_C);\n}\n</code></pre>\n<p>If you <strong>must</strong> have this at compile time, you can place similar code into a build script and write out a Rust source file with the offsets. However, that will span multiple compiler invocations, so you are relying on the struct layout not changing between those invocations. Using something with a known representation would reduce that risk.</p>\n<p>See also:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/27791532/155423\">How do I create a global, mutable singleton?</a></li>\n<li><a href=\"https://stackoverflow.com/q/32956050/155423\">How to create a static string at compile time</a></li>\n</ul>\n"}], "owner": {"reputation": 335, "user_id": 1781005, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/9a6e34b960b96860c3aeb0faf7d2e3ec?s=128&d=identicon&r=PG", "display_name": "Mystor", "link": "https://stackoverflow.com/users/1781005/mystor"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3077, "favorite_count": 3, "answer_count": 2, "score": 8, "last_activity_date": 1604933874, "creation_date": 1470613220, "last_edit_date": 1495540401, "question_id": 38819569, "link": "https://stackoverflow.com/questions/38819569/how-to-get-a-pointer-to-a-containing-struct-from-a-pointer-to-a-member", "title": "How to get a pointer to a containing struct from a pointer to a member?", "body": "<p>I have a type:</p>\n\n<pre><code>struct Foo {\n    memberA: Bar,\n    memberB: Baz,\n}\n</code></pre>\n\n<p>and a pointer which I know is a pointer to <code>memberB</code> in <code>Foo</code>:</p>\n\n<pre><code>p: *const Baz\n</code></pre>\n\n<p>What is the correct way to get a new pointer <code>p: *const Foo</code> which points to the original struct <code>Foo</code>?</p>\n\n<p>My current implementation is the following, which I'm pretty sure invokes undefined behavior due to the dereference of <code>(p as *const Foo)</code> where <code>p</code> is not a pointer to a <code>Foo</code>:</p>\n\n<pre><code>let p2 = p as usize -\n    ((&amp;(*(p as *const Foo)).memberB as *const _ as usize) - (p as usize));\n</code></pre>\n\n<p>This is part of FFI - I can't easily restructure the code to avoid needing to perform this operation.</p>\n\n<p>This is very similar to <a href=\"https://stackoverflow.com/questions/33870219/get-pointer-to-object-from-pointer-to-some-member\">Get pointer to object from pointer to some member</a> but for Rust, which as far as I know has no <code>offsetof</code> macro.</p>\n"}, {"tags": ["rust", "adapter"], "answers": [{"tags": [], "owner": {"reputation": 3855, "user_id": 342882, "user_type": "registered", "accept_rate": 34, "profile_image": "https://www.gravatar.com/avatar/c13b4dc095a1bcc25e008effdd5cf07a?s=128&d=identicon&r=PG", "display_name": "Daneel Yaitskov", "link": "https://stackoverflow.com/users/342882/daneel-yaitskov"}, "is_accepted": false, "score": 0, "last_activity_date": 1470580156, "last_edit_date": 1470580156, "creation_date": 1470564370, "answer_id": 38813039, "question_id": 38812874, "link": "https://stackoverflow.com/questions/38812874/no-method-found-for-type-t-in-the-current-scope-when-wrapping-a-type/38813039#38813039", "title": "&quot;no method found for type T in the current scope&quot; when wrapping a type", "body": "<p>I was able to figure it out; the wrapper struct is not needed. The right way is a generic trait. I also missed the type scope for the generic type variable.</p>\n\n<pre><code>struct X {}\n\nimpl X {\n    fn f(self, n: i32) {\n        println!(\"n = {}\", n);\n    }\n    fn new() -&gt; X {\n        X {}\n    }\n}\n\ntrait Adapter&lt;T&gt; {\n    fn uf(self, n: i32);\n}\n\nimpl Adapter&lt;X&gt; for X {\n    fn uf(self, n: i32) {\n        self.f(n)\n    }\n}\n\nstruct Y {}\n\nimpl Y {\n    fn g(self, n: f32) {\n        println!(\"m = {}\", n);\n    }\n    fn new() -&gt; Y {\n        Y {}\n    }\n}\n\nimpl Adapter&lt;Y&gt; for Y {\n    fn uf(self, n: i32) {\n        self.g(n as f32)\n    }\n}\n\nfn use_adapted&lt;A, T: Adapter&lt;A&gt;&gt;(a: T) {\n    a.uf(10)\n}\n\nfn main() {\n    use_adapted(X::new());\n    use_adapted(Y::new());\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 1366, "user_id": 4807889, "user_type": "registered", "accept_rate": 45, "profile_image": "https://graph.facebook.com/10153645629657370/picture?type=large", "display_name": "mjwrazor", "link": "https://stackoverflow.com/users/4807889/mjwrazor"}, "edited": false, "score": 0, "creation_date": 1489917984, "post_id": 38815198, "comment_id": 72872618, "body": "how do you set this bound?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1366, "user_id": 4807889, "user_type": "registered", "accept_rate": 45, "profile_image": "https://graph.facebook.com/10153645629657370/picture?type=large", "display_name": "mjwrazor", "link": "https://stackoverflow.com/users/4807889/mjwrazor"}, "edited": false, "score": 0, "creation_date": 1489932416, "post_id": 38815198, "comment_id": 72877037, "body": "@mjwrazor if you scroll down a bit, you&#39;ll see that <a href=\"http://stackoverflow.com/a/38813039/155423\">OP introduces a trait and uses it as a bound</a>."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1470580466, "creation_date": 1470580466, "answer_id": 38815198, "question_id": 38812874, "link": "https://stackoverflow.com/questions/38812874/no-method-found-for-type-t-in-the-current-scope-when-wrapping-a-type/38815198#38815198", "title": "&quot;no method found for type T in the current scope&quot; when wrapping a type", "body": "<p>The problem is here:</p>\n\n<pre><code>fn useAdapted&lt;T&gt;(a: T) {\n    a.uf(10)\n}\n</code></pre>\n\n<p>This says</p>\n\n<blockquote>\n  <p>give me <strong>any possible</strong> type, and I will call the <code>uf</code> method on it</p>\n</blockquote>\n\n<p>That's clearly nonsense, as you could pass in a <code>String</code> or <code>bool</code> or <code>HashMap</code> or a <code>File</code> or a .... (you get the point).</p>\n\n<p>There's no method <code>uf</code> that applies to <strong>every</strong> type, so the compiler tells you so. As you discovered, you have to provide a <em>bound</em> on the generic type with one or more <em>traits</em>. Methods and associated functions from those traits will be usable inside the method.</p>\n\n<p>Also note that the Rust style is <code>snake_case</code>; the function should be called <code>use_adapted</code>.</p>\n"}], "owner": {"reputation": 3855, "user_id": 342882, "user_type": "registered", "accept_rate": 34, "profile_image": "https://www.gravatar.com/avatar/c13b4dc095a1bcc25e008effdd5cf07a?s=128&d=identicon&r=PG", "display_name": "Daneel Yaitskov", "link": "https://stackoverflow.com/users/342882/daneel-yaitskov"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5693, "favorite_count": 1, "answer_count": 2, "score": 2, "last_activity_date": 1470580466, "creation_date": 1470563067, "last_edit_date": 1470580109, "question_id": 38812874, "link": "https://stackoverflow.com/questions/38812874/no-method-found-for-type-t-in-the-current-scope-when-wrapping-a-type", "title": "&quot;no method found for type T in the current scope&quot; when wrapping a type", "body": "<p>I am trying to make adapters around 2 different types that do the same job and I cannot rewrite the two types.</p>\n\n<p><code>X</code> has a method which consumes <code>self</code> so a run-time polymorphic wrapper is not applicable. The only option is a static generic approach.  </p>\n\n<pre><code>struct X {}\n\nimpl X {\n    fn f(self, n: i32) {\n        println!(\"n = {}\", n);\n    }\n    fn new() -&gt; X {\n        X {}\n    }\n}\n\nstruct AdapterX {\n    x: X\n}\n\nimpl AdapterX {\n    fn uf(self, n: i32) {\n        self.x.f(n)\n    }\n    fn new(x: X) -&gt; AdapterX {\n        AdapterX { x: x }\n    }\n}\n\nfn useAdapted&lt;T&gt;(a: T) {\n    a.uf(10)\n}\n\nfn main() {\n    let x = X::new();\n    useAdapted::&lt;AdapterX&gt;(AdapterX::new(x));\n}\n</code></pre>\n\n<p>The compiler fails with:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: no method named `uf` found for type `T` in the current scope\n    a.uf(10)\n      ^~\n</code></pre>\n"}, {"tags": ["macros", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470577849, "post_id": 38812562, "comment_id": 64996756, "body": "Can you <a href=\"https://stackoverflow.com/posts/38812562/edit\">edit</a> your question to explain why your example is &quot;non-working&quot;? <a href=\"https://play.rust-lang.org/?gist=9f89d79b921d6036998e2cabc267c740\" rel=\"nofollow noreferrer\">It appears to work for me</a>."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470627116, "post_id": 38812562, "comment_id": 65008474, "body": "Noted error in question."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470660098, "post_id": 38812562, "comment_id": 65024464, "body": "Did you click my second link that shows your second macro and the fact <b>that it works</b>? Could you <a href=\"https://stackoverflow.com/posts/38812562/edit\">edit</a> your question to show how you are calling the second macro such that it fails? Perhaps you could even <a href=\"https://play.rust-lang.org\" rel=\"nofollow noreferrer\">create something on the playground</a> that completely reproduces the error? It is 100% expected that you create a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> when asking questions on Stack Overflow."}], "answers": [{"tags": [], "owner": {"reputation": 1421, "user_id": 412478, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/e799a79441c7543be48562403411cd13?s=128&d=identicon&r=PG", "display_name": "Havvy", "link": "https://stackoverflow.com/users/412478/havvy"}, "is_accepted": true, "score": 4, "last_activity_date": 1470577521, "last_edit_date": 1470577521, "creation_date": 1470561629, "answer_id": 38812684, "question_id": 38812562, "link": "https://stackoverflow.com/questions/38812562/is-it-possible-to-use-an-argument-multiple-times-in-a-rust-macros-with-a-single/38812684#38812684", "title": "Is it possible to use an argument multiple times in a Rust macros with a single instansiation?", "body": "<p>Yes, you're just missing an extra set of braces to contain the expression.</p>\n\n<pre><code>macro_rules! squared {\n    ($x:expr) =&gt; {{\n        let y = $x;\n        y * y\n    }}\n}\n</code></pre>\n\n<p>Note that this macro will only work for expressions that have a type that implements <code>Copy</code>.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 349, "favorite_count": 0, "accepted_answer_id": 38812684, "answer_count": 1, "score": 2, "last_activity_date": 1470627101, "creation_date": 1470560574, "last_edit_date": 1470627101, "question_id": 38812562, "link": "https://stackoverflow.com/questions/38812562/is-it-possible-to-use-an-argument-multiple-times-in-a-rust-macros-with-a-single", "title": "Is it possible to use an argument multiple times in a Rust macros with a single instansiation?", "body": "<p>Is it possible to use an argument multiple times in a Rust macro, only having the argument instantiated once?</p>\n\n<p>Take this simple example:</p>\n\n<pre><code>macro_rules! squared {\n    ($x:expr) =&gt; {\n        $x * $x\n    }\n}\n</code></pre>\n\n<p>While this works, if called like <code>squared!(some_function() + 1)</code>, the function will be called multiple times. Is there a way to avoid this?</p>\n\n<p>Non-working example:</p>\n\n<pre><code>macro_rules! squared {\n    ($x:expr) =&gt; {\n        let y = $x;\n        y * y\n    }\n}\n</code></pre>\n\n<p>Gives a compile error:</p>\n\n<pre><code> error: expected expression, found statement (`let`)\n</code></pre>\n"}, {"tags": ["operator-overloading", "rust"], "answers": [{"comments": [{"owner": {"reputation": 342, "user_id": 5186167, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/heYkp.jpg?s=128&g=1", "display_name": "Aratz", "link": "https://stackoverflow.com/users/5186167/aratz"}, "edited": false, "score": 0, "creation_date": 1609573931, "post_id": 38815035, "comment_id": 115868302, "body": "Can one import <code>forward_ref_binop</code> from <code>std::ops</code> or does one have to redefine the macro?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 342, "user_id": 5186167, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/heYkp.jpg?s=128&g=1", "display_name": "Aratz", "link": "https://stackoverflow.com/users/5186167/aratz"}, "edited": false, "score": 1, "creation_date": 1609680094, "post_id": 38815035, "comment_id": 115892385, "body": "@Aratz you need to redefine it."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 8, "last_activity_date": 1470579506, "creation_date": 1470579506, "answer_id": 38815035, "question_id": 38811387, "link": "https://stackoverflow.com/questions/38811387/how-to-implement-idiomatic-operator-overloading-for-values-and-references-in-rus/38815035#38815035", "title": "How to implement idiomatic operator overloading for values and references in Rust?", "body": "<p>The great thing about Rust is that it's open source. This means you can see how the authors of the language have solved a problem. The closest analogue is <a href=\"https://github.com/rust-lang/rust/blob/1.10.0/src/libcore/ops.rs#L204-L216\" rel=\"noreferrer\">primitive integer types</a>:</p>\n\n<pre><code>macro_rules! add_impl {\n    ($($t:ty)*) =&gt; ($(\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        impl Add for $t {\n            type Output = $t;\n\n            #[inline]\n            fn add(self, other: $t) -&gt; $t { self + other }\n        }\n\n        forward_ref_binop! { impl Add, add for $t, $t }\n    )*)\n}\n</code></pre>\n\n<p><a href=\"https://github.com/rust-lang/rust/blob/1.10.0/src/libcore/ops.rs#L133-L165\" rel=\"noreferrer\"><code>forward_ref_binop</code> is defined as</a>:</p>\n\n<pre><code>macro_rules! forward_ref_binop {\n    (impl $imp:ident, $method:ident for $t:ty, $u:ty) =&gt; {\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        impl&lt;'a&gt; $imp&lt;$u&gt; for &amp;'a $t {\n            type Output = &lt;$t as $imp&lt;$u&gt;&gt;::Output;\n\n            #[inline]\n            fn $method(self, other: $u) -&gt; &lt;$t as $imp&lt;$u&gt;&gt;::Output {\n                $imp::$method(*self, other)\n            }\n        }\n\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        impl&lt;'a&gt; $imp&lt;&amp;'a $u&gt; for $t {\n            type Output = &lt;$t as $imp&lt;$u&gt;&gt;::Output;\n\n            #[inline]\n            fn $method(self, other: &amp;'a $u) -&gt; &lt;$t as $imp&lt;$u&gt;&gt;::Output {\n                $imp::$method(self, *other)\n            }\n        }\n\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        impl&lt;'a, 'b&gt; $imp&lt;&amp;'a $u&gt; for &amp;'b $t {\n            type Output = &lt;$t as $imp&lt;$u&gt;&gt;::Output;\n\n            #[inline]\n            fn $method(self, other: &amp;'a $u) -&gt; &lt;$t as $imp&lt;$u&gt;&gt;::Output {\n                $imp::$method(*self, *other)\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>It's certainly valid to write wrapper implementations of the traits for references that simply dereference and call the value-oriented version.</p>\n"}, {"tags": [], "owner": {"reputation": 7942, "user_id": 516188, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/934a553983eaca4c3f8f939daf6d2faa?s=128&d=identicon&r=PG", "display_name": "Emmanuel Touzery", "link": "https://stackoverflow.com/users/516188/emmanuel-touzery"}, "is_accepted": false, "score": 3, "last_activity_date": 1563042347, "creation_date": 1563042347, "answer_id": 57021771, "question_id": 38811387, "link": "https://stackoverflow.com/questions/38811387/how-to-implement-idiomatic-operator-overloading-for-values-and-references-in-rus/57021771#57021771", "title": "How to implement idiomatic operator overloading for values and references in Rust?", "body": "<p>I advise you to use the <a href=\"https://docs.rs/impl_ops/0.1.1/impl_ops/index.html\" rel=\"nofollow noreferrer\">impl_os</a> crate for that purpose, see <a href=\"https://stackoverflow.com/a/57021762/516188\">that other answer that I wrote</a>.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2154, "favorite_count": 1, "accepted_answer_id": 38815035, "answer_count": 2, "score": 13, "last_activity_date": 1563042347, "creation_date": 1470549775, "last_edit_date": 1470579050, "question_id": 38811387, "link": "https://stackoverflow.com/questions/38811387/how-to-implement-idiomatic-operator-overloading-for-values-and-references-in-rus", "title": "How to implement idiomatic operator overloading for values and references in Rust?", "body": "<p>When implementing a primitive fixed-size vector type (<code>float2</code> for example), I want to support the <code>Add</code> and <code>Sub</code> traits. Later, I will want to support <code>Mul</code> and <code>*Assign</code>.</p>\n\n<p>Looking up the documentation and other examples, I came up with this:</p>\n\n<pre><code>use std::ops::{Add, Sub};\n\n#[derive(Copy, Clone)]\nstruct float2(f64, f64);\n\nimpl Add for float2 {\n    type Output = float2;\n    fn add(self, _rhs: float2) -&gt; float2 {\n        float2(self.0 + _rhs.0, self.1 + _rhs.1)\n    }\n}\n\nimpl Sub for float2 {\n    type Output = float2;\n    fn sub(self, _rhs: float2) -&gt; float2 {\n        float2(self.0 - _rhs.0, self.1 - _rhs.1)\n    }\n}\n</code></pre>\n\n<p>This works for basic examples, however I found in practice I would often end up with references passed in as arguments as well as local <code>float2</code>'s on the stack.</p>\n\n<p>To mix these I needed to either:</p>\n\n<ul>\n<li>De-reference variables (OK but makes code a little less readable).</li>\n<li>Declare operator overloading combinations of references too.</li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>impl&lt;'a, 'b&gt; Add&lt;&amp;'b float2&gt; for &amp;'a float2 {\n    type Output = float2;\n    fn add(self, _rhs: &amp;'b float2) -&gt; float2 {\n        float2(self.0 + _rhs.0, self.1 + _rhs.1)\n    }\n}\nimpl&lt;'a&gt; Add&lt;float2&gt; for &amp;'a float2 {\n    type Output = float2;\n    fn add(self, _rhs: float2) -&gt; float2 {\n        float2(self.0 + _rhs.0, self.1 + _rhs.1)\n    }\n}\nimpl&lt;'b&gt; Add&lt;&amp;'b float2&gt; for float2 {\n    type Output = float2;\n    fn add(self, _rhs: &amp;'b float2) -&gt; float2 {\n        float2(self.0 + _rhs.0, self.1 + _rhs.1)\n    }\n}\n\n/*... and again for Sub */\n</code></pre>\n\n<p>While this allows to write expressions without de-referencing. it becomes quite tedious to enumerate each combinations, especially when adding more operations &amp; types (<code>float3</code>, <code>float4</code>...).</p>\n\n<p>Is there a generally accepted way to...</p>\n\n<ul>\n<li>Automatically coerce types for operator overloading?</li>\n<li>Use macros or some other feature of the language to avoid tedious repetition?</li>\n</ul>\n\n<p>Or is it expected that developers either:</p>\n\n<ul>\n<li>Explicitly access variables as references as needed.</li>\n<li>Explicitly de-reference variables as needed.</li>\n<li>Write a lot of repetitive operator overloading functions.</li>\n</ul>\n\n<hr>\n\n<p><em>Note, I'm currently a beginner, I've checked some quite advanced math libraries in Rust, they're way over my head, while I could use them - I would like to understand how to write operator overloading for my own types.</em></p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "edited": false, "score": 0, "creation_date": 1470688559, "post_id": 38811099, "comment_id": 65041725, "body": "What if <code>T</code> implements <code>FnMut(T) -&gt; T</code>?"}, {"owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "reply_to_user": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "edited": false, "score": 0, "creation_date": 1470737580, "post_id": 38811099, "comment_id": 65060357, "body": "@CodesInChaos I would expect specialization to choose the <code>FnMut(T) -&gt; T</code> implementation but I&#39;ll be happy with either one as I&#39;m not going to be using it with a type of that kind."}], "answers": [{"comments": [{"owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 0, "creation_date": 1470551826, "post_id": 38811416, "comment_id": 64990904, "body": "Sorry, I should have mentioned that I need a generic solution here as the struct can contain arbitrary fields and I want to create a similar setter method for all of them. Is that possible?"}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 0, "creation_date": 1470575207, "post_id": 38811416, "comment_id": 64996091, "body": "@Dogbert Have you considered just <i>not</i> doing this? If there is a solution (and I doubt that there is), it&#39;s not going to be pleasant. Is there a reason you can&#39;t just use two different functions?"}, {"owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 0, "creation_date": 1470737791, "post_id": 38811416, "comment_id": 65060490, "body": "I want to eventually generate these functions for any struct with a macro and <code>concat_idents!</code> cannot be used to generate names which are slightly modified from a passed in identifier e.g. <code>set_string()</code> and <code>update_string()</code> if the user passes <code>string</code>. Also, just <code>string()</code> would look much cleaner. This is an experiment anyways and I&#39;ll likely not be using it in a serious project if it makes the type errors for the end user worse."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 0, "creation_date": 1470861874, "post_id": 38811416, "comment_id": 65127343, "body": "@Dogbert Can&#39;t you just generate a new specialized trait in the macro?"}, {"owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 0, "creation_date": 1471342517, "post_id": 38811416, "comment_id": 65297868, "body": "Ah, that&#39;s probably the only way for now then. Thanks for the idea!"}], "tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": false, "score": 4, "last_activity_date": 1471195511, "last_edit_date": 1471195511, "creation_date": 1470550074, "answer_id": 38811416, "question_id": 38811099, "link": "https://stackoverflow.com/questions/38811099/allow-a-function-to-accept-a-t-or-any-fnmutt-t/38811416#38811416", "title": "Allow a function to accept a `T` or any `FnMut(T) -&gt; T`", "body": "<p>Specialization doesn't work here because specialization only works for chains. That is, there exist functions that satisfy the <code>impl</code></p>\n\n<pre><code>impl&lt;T, F&gt; Get&lt;T&gt; for F where F: FnMut(T) -&gt; T\n</code></pre>\n\n<p>but not</p>\n\n<pre><code>impl&lt;T&gt; Get&lt;T&gt; for T\n</code></pre>\n\n<p>so the latter cannot specialize the former.</p>\n\n<p>The simplest way to fix this is to just write a <code>GetString</code> trait instead of a <code>Get&lt;T&gt;</code> trait; that way you don't have to consider specialization on such malarkey at all.</p>\n"}, {"comments": [{"owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 0, "creation_date": 1471342618, "post_id": 38944703, "comment_id": 65297923, "body": "Thanks for the code! I guess this is the best way for now if what Veedrac said about specialization is correct."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1471195489, "creation_date": 1471195489, "answer_id": 38944703, "question_id": 38811099, "link": "https://stackoverflow.com/questions/38811099/allow-a-function-to-accept-a-t-or-any-fnmutt-t/38944703#38944703", "title": "Allow a function to accept a `T` or any `FnMut(T) -&gt; T`", "body": "<p>For your concrete issue, you don't need specialization:</p>\n\n<pre><code>struct State {\n    string: String,\n}\n\nimpl State {\n    fn string&lt;F&gt;(mut self, mut f: F) -&gt; Self\n        where F: Thing\n    {\n        self.string = f.thing(self.string);\n        self\n    }\n}\n\ntrait Thing {\n    fn thing(&amp;mut self, s: String) -&gt; String;\n}\n\nimpl Thing for String {\n    fn thing(&amp;mut self, _s: String) -&gt; String {\n        self.clone()\n    }\n}\n\nimpl&lt;F&gt; Thing for F\n    where F: FnMut(String) -&gt; String\n{\n    fn thing(&amp;mut self, s: String) -&gt; String {\n        (self)(s)\n    }\n}\n\nfn main() {\n    let state = State { string: String::from(\"foo\") };\n    assert_eq!(state.string, \"foo\");\n    let state = state.string(|old| old + \"bar\");\n    assert_eq!(state.string, \"foobar\");\n    let state = state.string(String::from(\"baz\"));\n    assert_eq!(state.string, \"baz\");\n}\n</code></pre>\n\n<p>You may either want to require <code>FnOnce</code> or implement the trait for a <code>&amp;str</code>. Right now, the allocation of the <code>String</code> is not being used, causing a bit of inefficiency.</p>\n\n<p>You could then implement the trait multiple times for the interesting types:</p>\n\n<pre><code>struct State {\n    string: String,\n    vec: Vec&lt;u8&gt;,\n}\n\nimpl State {\n    fn string&lt;F&gt;(mut self, mut f: F) -&gt; Self\n        where F: Thing&lt;String&gt;\n    {\n        self.string = f.thing(self.string);\n        self\n    }\n\n    fn vec&lt;F&gt;(mut self, mut f: F) -&gt; Self\n        where F: Thing&lt;Vec&lt;u8&gt;&gt;\n    {\n        self.vec = f.thing(self.vec);\n        self\n    }\n}\n\ntrait Thing&lt;T&gt; {\n    fn thing(&amp;mut self, s: T) -&gt; T;\n}\n\nimpl Thing&lt;String&gt; for String {\n    fn thing(&amp;mut self, _s: String) -&gt; String {\n        self.clone()\n    }\n}\n\nimpl&lt;F&gt; Thing&lt;String&gt; for F\n    where F: FnMut(String) -&gt; String\n{\n    fn thing(&amp;mut self, s: String) -&gt; String {\n        (self)(s)\n    }\n}\n\nimpl Thing&lt;Vec&lt;u8&gt;&gt; for Vec&lt;u8&gt; {\n    fn thing(&amp;mut self, _s: Vec&lt;u8&gt;) -&gt; Vec&lt;u8&gt; {\n        self.clone()\n    }\n}\n\nimpl&lt;F&gt; Thing&lt;Vec&lt;u8&gt;&gt; for F\n    where F: FnMut(Vec&lt;u8&gt;) -&gt; Vec&lt;u8&gt;\n{\n    fn thing(&amp;mut self, s: Vec&lt;u8&gt;) -&gt; Vec&lt;u8&gt; {\n        (self)(s)\n    }\n}\n\nfn main() {\n    let state = State { string: String::from(\"foo\"), vec: vec![1] };\n\n    assert_eq!(state.string, \"foo\");\n    let state = state.string(|old| old + \"bar\");\n    assert_eq!(state.string, \"foobar\");\n    let state = state.string(String::from(\"baz\"));\n    assert_eq!(state.string, \"baz\");\n\n    assert_eq!(state.vec, [1]);\n    let state = state.vec(|mut old: Vec&lt;u8&gt;| {\n        old.push(2);\n        old\n    });\n    assert_eq!(state.vec, [1, 2]);\n    let state = state.vec(vec![3]);\n    assert_eq!(state.vec, [3]);\n}\n</code></pre>\n\n<p>I believe that repetition could be handled by a macro:</p>\n\n<pre><code>macro_rules! thing {\n    ($t: ty) =&gt; {\n        impl Thing&lt;$t&gt; for $t {\n            default fn thing(&amp;mut self, _val: $t) -&gt; $t {\n                self.clone()\n            }\n        }\n\n        impl&lt;F&gt; Thing&lt;$t&gt; for F\n            where F: FnMut($t) -&gt; $t\n        {\n            fn thing(&amp;mut self, val: $t) -&gt; $t {\n                (self)(val)\n            }\n        }\n    }\n}\n\nthing!(String);\nthing!(Vec&lt;u8&gt;);\n</code></pre>\n"}], "owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 215, "favorite_count": 2, "accepted_answer_id": 38944703, "answer_count": 2, "score": 12, "last_activity_date": 1471195511, "creation_date": 1470546710, "last_edit_date": 1470570942, "question_id": 38811099, "link": "https://stackoverflow.com/questions/38811099/allow-a-function-to-accept-a-t-or-any-fnmutt-t", "title": "Allow a function to accept a `T` or any `FnMut(T) -&gt; T`", "body": "<p>My goal is to make the last 2 lines of this code compile and the last assertion to pass:</p>\n\n<pre><code>struct State {\n    string: String\n}\n\nimpl State {\n    fn string&lt;F: FnMut(String) -&gt; String&gt;(mut self, mut f: F) -&gt; Self {\n        self.string = f(self.string);\n        self\n    }\n}\n\nfn main() {\n    let state = State { string: String::from(\"foo\") };\n    assert_eq!(state.string, \"foo\");\n    let state = state.string(|old| old + \"bar\");\n    assert_eq!(state.string, \"foobar\");\n    // let state = state.string(String::from(\"baz\"));\n    // assert_eq!(state.string, \"baz\");\n}\n</code></pre>\n\n<p>I thought this would be possible with traits and specialization, but the following code:</p>\n\n<pre><code>#![feature(specialization)]\n\ntrait Get&lt;T&gt; {\n    fn get(self, old: T) -&gt; T;\n}\n\nimpl&lt;T&gt; Get&lt;T&gt; for T {\n    default fn get(self, _: T) -&gt; T {\n        self\n    }\n}\n\nimpl&lt;T, F&gt; Get&lt;T&gt; for F where F: FnMut(T) -&gt; T {\n    fn get(mut self, old: T) -&gt; T {\n        self(old)\n    }\n}\n\nstruct State {\n    string: String\n}\n\nimpl State {\n    fn string&lt;G: Get&lt;String&gt;&gt;(mut self, g: G) -&gt; Self {\n        self.string = g.get(self.string);\n        self\n    }\n}\n</code></pre>\n\n<p>throws this error (<a href=\"https://play.rust-lang.org/?gist=22c2fd2e32264a3d24cd358d0010d8cc&amp;version=nightly&amp;backtrace=0\" rel=\"noreferrer\">live</a>):</p>\n\n<pre><code>error[E0119]: conflicting implementations of trait `Get&lt;_&gt;`:\n  --&gt; &lt;anon&gt;:13:1\n   |\n13 | impl&lt;T, F&gt; Get&lt;T&gt; for F where F: FnMut(T) -&gt; T {\n   | ^\n   |\nnote: conflicting implementation is here:\n  --&gt; &lt;anon&gt;:7:1\n   |\n7  | impl&lt;T&gt; Get&lt;T&gt; for T {\n   | ^\n\nerror: aborting due to previous error\n</code></pre>\n\n<p>So my question is, why is the second impl of Get not more \"specific\" than the first one, and is there any way in current stable or nightly Rust to get my original code to work?</p>\n\n<p>Edit: I know implementing a trait for just one type would work, but I want a generic solution for any type as I want to be able to use this for any arbitrary fields of a struct.</p>\n"}, {"tags": ["rust", "syntactic-sugar"], "comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 1, "creation_date": 1470545603, "post_id": 38810973, "comment_id": 64989937, "body": "I don&#39;t believe there is."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 9, "creation_date": 1470577459, "post_id": 38811063, "comment_id": 64996649, "body": "Part of the rationale behind this decision is ownership; what would the result of <code>a = b = c = Vec::new()</code> be?"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1566317457, "post_id": 38811063, "comment_id": 101615474, "body": "For types which copy by value it could work, nevertheless, I see why it doesn&#39;t fit rust so well."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 14, "last_activity_date": 1470546389, "creation_date": 1470546389, "answer_id": 38811063, "question_id": 38810973, "link": "https://stackoverflow.com/questions/38810973/assign-a-single-value-to-multiple-variables-in-one-line-in-rust/38811063#38811063", "title": "Assign a single value to multiple variables in one line in Rust?", "body": "<p>No, there is no equivalent.  Yes, you have to write multiple assignments, or write a macro which <em>itself</em> does multiple assignments.</p>\n"}, {"comments": [{"owner": {"reputation": 28041, "user_id": 64474, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2aa57a471ad142a7699829b59d825712?s=128&d=identicon&r=PG", "display_name": "Miles", "link": "https://stackoverflow.com/users/64474/miles"}, "edited": false, "score": 2, "creation_date": 1611971390, "post_id": 65667437, "comment_id": 116629235, "body": "&quot;And the <code>(x = ...)</code> returns the value of <code>x</code>&quot;: This is not correct; <a href=\"https://doc.rust-lang.org/reference/expressions/operator-expr.html#assignment-expressions\" rel=\"nofollow noreferrer\">assignment returns the unit type</a> (i.e. <code>()</code>). <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;code=fn%20main()%20%7B%0A%20%20%20%20let%20mut%20a%3A%20i32%20%3D%201%3B%0A%20%20%20%20println!(%22%7B%3A%3F%7D%22%2C%20a)%3B%0A%20%20%20%20println!(%22%7B%3A%3F%7D%22%2C%20(a%20%3D%202))%3B%0A%20%20%20%20println!(%22%7B%3A%3F%7D%22%2C%20a)%3B%0A%7D\" rel=\"nofollow noreferrer\">Rust Playground example</a>"}, {"owner": {"reputation": 143, "user_id": 10451311, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-F7lXZBEyZC0/AAAAAAAAAAI/AAAAAAAAKUE/y6-joRvzek0/photo.jpg?sz=128", "display_name": "Frank Moreno", "link": "https://stackoverflow.com/users/10451311/frank-moreno"}, "reply_to_user": {"reputation": 28041, "user_id": 64474, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2aa57a471ad142a7699829b59d825712?s=128&d=identicon&r=PG", "display_name": "Miles", "link": "https://stackoverflow.com/users/64474/miles"}, "edited": false, "score": 0, "creation_date": 1612140699, "post_id": 65667437, "comment_id": 116666318, "body": "You are right. My bad. I updated the answer."}], "tags": [], "owner": {"reputation": 143, "user_id": 10451311, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-F7lXZBEyZC0/AAAAAAAAAAI/AAAAAAAAKUE/y6-joRvzek0/photo.jpg?sz=128", "display_name": "Frank Moreno", "link": "https://stackoverflow.com/users/10451311/frank-moreno"}, "is_accepted": false, "score": 0, "last_activity_date": 1612140677, "last_edit_date": 1612140677, "creation_date": 1610370494, "answer_id": 65667437, "question_id": 38810973, "link": "https://stackoverflow.com/questions/38810973/assign-a-single-value-to-multiple-variables-in-one-line-in-rust/65667437#65667437", "title": "Assign a single value to multiple variables in one line in Rust?", "body": "<p>In Rust, the expression <code>a = b = c = value;</code> is the same to <code>a = (b = (c = value));</code></p>\n<p>And the <code>(x = ...)</code> returns <code>()</code>. Then, the first expression is an equivalent of the following:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>c = value;\nb = ();\na = ();\n</code></pre>\n<p>Note that the expression has a semicolon in the end, but if the expression were in the last line as a function's return like this <code>a = b = c = value</code>, the equivalente would be the following:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>c = value;\nb = ();\na = () // without the semicolon\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 28041, "user_id": 64474, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2aa57a471ad142a7699829b59d825712?s=128&d=identicon&r=PG", "display_name": "Miles", "link": "https://stackoverflow.com/users/64474/miles"}, "is_accepted": false, "score": 1, "last_activity_date": 1611974394, "creation_date": 1611974394, "answer_id": 65964112, "question_id": 38810973, "link": "https://stackoverflow.com/questions/38810973/assign-a-single-value-to-multiple-variables-in-one-line-in-rust/65964112#65964112", "title": "Assign a single value to multiple variables in one line in Rust?", "body": "<p>As DK. correctly answered, you cannot chain the result of assignments together. However, you <em>can</em> assign multiple variables with a single statement.</p>\n<p>In a <a href=\"https://doc.rust-lang.org/reference/statements.html#let-statements\" rel=\"nofollow noreferrer\"><code>let</code> statement</a>, you can bind multiple names by using an <a href=\"https://doc.rust-lang.org/reference/patterns.html\" rel=\"nofollow noreferrer\">irrefutable pattern</a> on the left side of the assignment:</p>\n<pre><code>let (a, b) = 1, 2;\n</code></pre>\n<p>You can use a <a href=\"https://doc.rust-lang.org/reference/patterns.html#slice-patterns\" rel=\"nofollow noreferrer\">slice pattern</a> as the left-hand side of the assignment, and an <a href=\"https://doc.rust-lang.org/reference/expressions/array-expr.html#array-expressions\" rel=\"nofollow noreferrer\">array expression</a> on the right side to repeat the value, if it implements Copy:</p>\n<pre><code>let value = 42;\nlet [a, b, c] = [value; 3]; // or: let [mut a, mut b, mut c] = ...\nprintln!(&quot;{} {} {}&quot;, a, b, c);\n</code></pre>\n<p>(<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=c0269dc8f3a2304eb412d1962bd81d11\" rel=\"nofollow noreferrer\">Playground</a>)</p>\n<p>You cannot currently assign multiple variables in a non-<code>let</code> assignment expression, but this is being implemented (see <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2909-destructuring-assignment.md\" rel=\"nofollow noreferrer\">RFC 2909</a>) and may be stabilized in the near future.</p>\n"}, {"tags": [], "owner": {"reputation": 11, "user_id": 2680560, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e83436d4931ffb28d653a7f08751eb2c?s=128&d=identicon&r=PG", "display_name": "danfo", "link": "https://stackoverflow.com/users/2680560/danfo"}, "is_accepted": false, "score": 1, "last_activity_date": 1612145358, "creation_date": 1612145358, "answer_id": 65986303, "question_id": 38810973, "link": "https://stackoverflow.com/questions/38810973/assign-a-single-value-to-multiple-variables-in-one-line-in-rust/65986303#65986303", "title": "Assign a single value to multiple variables in one line in Rust?", "body": "<p>Using <a href=\"https://github.com/rust-lang/rust/issues/74878\" rel=\"nofollow noreferrer\">const generics</a>:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let [a, b, c] = fill_new_slice(1);\n    dbg!(a, b, c);\n}\n\nfn fill_new_slice&lt;T: Copy, const N: usize&gt;(value: T) -&gt; [T; N] {\n    [value; N]\n}\n</code></pre>\n<pre class=\"lang-sh prettyprint-override\"><code>$ cargo +nightly run --quiet\n[src/main.rs:3] a = 1\n[src/main.rs:3] b = 1\n[src/main.rs:3] c = 1\n</code></pre>\n<p>(Remove <code>+nightly</code> for Rust 1.51+)</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2441, "favorite_count": 1, "accepted_answer_id": 38811063, "answer_count": 4, "score": 9, "last_activity_date": 1612145358, "creation_date": 1470545465, "last_edit_date": 1470577404, "question_id": 38810973, "link": "https://stackoverflow.com/questions/38810973/assign-a-single-value-to-multiple-variables-in-one-line-in-rust", "title": "Assign a single value to multiple variables in one line in Rust?", "body": "<p>A common way to assign multiple variables is often expressed in programming languages such as C or Python as:</p>\n\n<pre><code>a = b = c = value;\n</code></pre>\n\n<p>Is there an equivalent to this in Rust, or do you need to write it out?</p>\n\n<pre><code>a = value;\nb = value;\nc = value;\n</code></pre>\n\n<hr>\n\n<p>Apologies if this is obvious, but all my searches lead to Q&amp;A regarding tuple assignment.</p>\n"}, {"tags": ["linux", "unix", "rust"], "answers": [{"tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": true, "score": 6, "last_activity_date": 1470485561, "creation_date": 1470485561, "answer_id": 38804181, "question_id": 38804085, "link": "https://stackoverflow.com/questions/38804085/where-are-unix-errno-constants-in-rust/38804181#38804181", "title": "Where are Unix errno constants in Rust?", "body": "<p>Many of these constants are available through the <a href=\"https://crates.io/crates/libc\">libc</a> crate. It also offers bindings to the functions which you'd presumably call before checking for the error codes, so you should be using it anyway if you aren't already.</p>\n"}], "owner": {"reputation": 3855, "user_id": 342882, "user_type": "registered", "accept_rate": 34, "profile_image": "https://www.gravatar.com/avatar/c13b4dc095a1bcc25e008effdd5cf07a?s=128&d=identicon&r=PG", "display_name": "Daneel Yaitskov", "link": "https://stackoverflow.com/users/342882/daneel-yaitskov"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 315, "favorite_count": 0, "accepted_answer_id": 38804181, "answer_count": 1, "score": 2, "last_activity_date": 1470489981, "creation_date": 1470484947, "last_edit_date": 1470489981, "question_id": 38804085, "link": "https://stackoverflow.com/questions/38804085/where-are-unix-errno-constants-in-rust", "title": "Where are Unix errno constants in Rust?", "body": "<p>I am writing a program and there are a lot of places where\nUNIX error codes are required. Is there any standard place or library with predefined set of these constants in Rust? Maybe there is a way to import them from standard C headers.</p>\n\n<p>It's a minor issue and I could define these constants at my own source code but I'd like to know all the options.</p>\n\n<p>I need to return them rather than to parse and convert to human readable strings.</p>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 0, "creation_date": 1527189149, "post_id": 38804737, "comment_id": 88045646, "body": "The last link (profiling rust code with callgrind) seems to be dead. I could only find this related <a href=\"https://www.reddit.com/r/rust/comments/3n5ann/profiling_rust_code_with_callgrind/\" rel=\"nofollow noreferrer\">reddit post</a>, which contains the same dead link."}, {"owner": {"reputation": 1947, "user_id": 456311, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/Rx7dT.jpg?s=128&g=1", "display_name": "Pacu", "link": "https://stackoverflow.com/users/456311/pacu"}, "edited": false, "score": 0, "creation_date": 1601044471, "post_id": 38804737, "comment_id": 113290565, "body": "This actually produces a fat binary, is there a way of producing the debugging symbols but yet being able to have a thin binary. I have a 9MB .a file and this setting takes it to 40MB"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1947, "user_id": 456311, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/Rx7dT.jpg?s=128&g=1", "display_name": "Pacu", "link": "https://stackoverflow.com/users/456311/pacu"}, "edited": false, "score": 1, "creation_date": 1601300664, "post_id": 38804737, "comment_id": 113356550, "body": "@Pacu that&#39;s not related to this question. Splitting debug info to a separate location is platform-specific. See <a href=\"https://stackoverflow.com/a/62998579/155423\">Will debug symbols affect the performance in Rust?</a>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 64, "last_activity_date": 1598634056, "last_edit_date": 1598634056, "creation_date": 1470489779, "answer_id": 38804737, "question_id": 38803760, "link": "https://stackoverflow.com/questions/38803760/how-to-get-a-release-build-with-debugging-information-when-using-cargo/38804737#38804737", "title": "How to get a release build with debugging information when using cargo?", "body": "<p>As <a href=\"https://doc.rust-lang.org/cargo/reference/profiles.html\" rel=\"noreferrer\">shown in the Cargo documentation</a>, modify the <code>release</code> <em>profile</em> to include debugging symbols:</p>\n<pre><code>[profile.release]\ndebug = true\n</code></pre>\n<p>Note that the <code>release</code> profile and the <code>bench</code> profile differ.</p>\n<p>See also</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/29818084/155423\">Can tests be built in release mode using Cargo?</a></li>\n<li><a href=\"https://stackoverflow.com/q/34054669/155423\">How to compile and run an optimized Rust program with overflow checking enabled</a></li>\n<li><a href=\"https://stackoverflow.com/q/41920192/155423\">Does Cargo support custom profiles?</a></li>\n</ul>\n<p>Or basically any of the top search results for &quot;rust profiling&quot;:</p>\n<ul>\n<li><a href=\"http://carol-nichols.com/2015/12/09/rust-profiling-on-osx-cpu-time/\" rel=\"noreferrer\">Rust Profiling with Instruments and FlameGraph on OSX: CPU/Time</a></li>\n<li><a href=\"https://llogiq.github.io/2015/07/15/profiling.html\" rel=\"noreferrer\">Profiling Rust applications on Linux</a></li>\n<li><a href=\"https://web.archive.org/web/20170508162645/https://shunyata.github.io/2015/10/01/profiling-rust/\" rel=\"noreferrer\">Profiling rust code with callgrind</a></li>\n</ul>\n"}, {"tags": [], "owner": {"reputation": 6933, "user_id": 2580955, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/WZR9N.jpg?s=128&g=1", "display_name": "s3rvac", "link": "https://stackoverflow.com/users/2580955/s3rvac"}, "is_accepted": false, "score": 51, "last_activity_date": 1520000939, "last_edit_date": 1520000939, "creation_date": 1470560291, "answer_id": 38812520, "question_id": 38803760, "link": "https://stackoverflow.com/questions/38803760/how-to-get-a-release-build-with-debugging-information-when-using-cargo/38812520#38812520", "title": "How to get a release build with debugging information when using cargo?", "body": "<p>Another option that I found that does not require changing <code>Cargo.toml</code> is to use the <a href=\"https://doc.rust-lang.org/cargo/reference/environment-variables.html\" rel=\"noreferrer\"><code>RUSTFLAGS</code></a> environment variable:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ RUSTFLAGS=-g cargo build --release\n</code></pre>\n"}], "owner": {"reputation": 6933, "user_id": 2580955, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/WZR9N.jpg?s=128&g=1", "display_name": "s3rvac", "link": "https://stackoverflow.com/users/2580955/s3rvac"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 18927, "favorite_count": 11, "accepted_answer_id": 38804737, "answer_count": 2, "score": 57, "last_activity_date": 1598634056, "creation_date": 1470482876, "question_id": 38803760, "link": "https://stackoverflow.com/questions/38803760/how-to-get-a-release-build-with-debugging-information-when-using-cargo", "title": "How to get a release build with debugging information when using cargo?", "body": "<p>The following command</p>\n\n<pre><code>$ cargo build\n</code></pre>\n\n<p>produces a <strong>non-optimized</strong> build <strong>with</strong> debugging information. On the contrary,</p>\n\n<pre><code>$ cargo build --release\n</code></pre>\n\n<p>produces an <strong>optimized</strong> build <strong>without</strong> debugging information.</p>\n\n<p>Is there a way of producing an <strong>optimized</strong> build <strong>with</strong> debugging information? I need this to get meaningful profiling information.</p>\n"}, {"tags": ["serialization", "rust"], "answers": [{"comments": [{"owner": {"reputation": 6357, "user_id": 6086311, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cb99289473f6393b89474785f2d294d1?s=128&d=identicon&r=PG", "display_name": "dtolnay", "link": "https://stackoverflow.com/users/6086311/dtolnay"}, "edited": false, "score": 0, "creation_date": 1471494607, "post_id": 38804932, "comment_id": 65371676, "body": "+1 for a BERT format for Serde being the way to go. This will allow users to serialize their own structs as BERT in an easy way."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1470491164, "creation_date": 1470491164, "answer_id": 38804932, "question_id": 38802771, "link": "https://stackoverflow.com/questions/38802771/serializing-tuple-type-module-coretuple-is-private/38804932#38804932", "title": "Serializing tuple type - module core::tuple is private", "body": "<p>I don't know how you got the name <code>core::tuple</code> originally, but it's definitely not going to help you. As the compiler tells you, it's private; you cannot use it. I don't even think <code>core::rust</code> <strong>exists</strong>, so I'm not sure what you mean by that.</p>\n\n<p>You don't explain why you are using <code>libcore</code>, perhaps you are targeting some environment that doesn't have a memory allocator or an operating system. If that's not the case, you probably don't want to directly use <code>libcore</code>.</p>\n\n<p>Beyond that, <code>core::tuple</code> is a <strong>module</strong>, not a <strong>type</strong>. You cannot use it in that position. For example:</p>\n\n<pre><code>fn foo(a: std::mem) {}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: type name `std::mem` is undefined or not in scope [--explain E0412]\n --&gt; src/main.rs:1:11\n1 |&gt; fn foo(a: std::mem) {}\n  |&gt;           ^^^^^^^^ undefined or not in scope\nhelp: no candidates by the name of `mem` found in your project; maybe you misspelled the name or forgot to import an external crate?\n</code></pre>\n\n<blockquote>\n  <p>how can I get a defined default Rust tuple type and use it as a parameter of a trait</p>\n</blockquote>\n\n<p>This doesn't completely make sense to me. If you just want something that can have a default value, then accept a generic type <code>T where T: Default</code>. Tuples implement <code>Default</code> when all of the component types implement <code>Default</code>.</p>\n\n<p>If you don't mean an actual default, then you can create a new trait that means what you want and follow the same pattern.</p>\n\n<p>To implement that trait for many sizes of tuples, you will likely use macros, just like the standard library does. There's no way to express the type \"all tuples of arbitrary length\", so macros are used to implement the trait up to some number of elements (typically 32).</p>\n\n<p>I think someone else has mentioned this in the earlier questions you've asked, but you should <strong>really</strong> consider trying to write a BERT adapter for <a href=\"https://github.com/serde-rs/serde\" rel=\"nofollow\">serde</a>. This would allow you to focus on the new and interesting aspects and reuse the existing tested code. If nothing else, you should <em>read</em> how serde and <a href=\"https://github.com/rust-lang-nursery/rustc-serialize\" rel=\"nofollow\">rustc-serialize</a> are implemented to see how other people have already solved the same problem.</p>\n"}], "owner": {"reputation": 710, "user_id": 2128615, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/eeg0I.gif?s=128&g=1", "display_name": "Relrin", "link": "https://stackoverflow.com/users/2128615/relrin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 113, "favorite_count": 0, "accepted_answer_id": 38804932, "answer_count": 1, "score": 0, "last_activity_date": 1470491164, "creation_date": 1470476181, "last_edit_date": 1470490312, "question_id": 38802771, "link": "https://stackoverflow.com/questions/38802771/serializing-tuple-type-module-coretuple-is-private", "title": "Serializing tuple type - module core::tuple is private", "body": "<p>I'm going to use this code to serialize Rust tuples to the BERT format:</p>\n\n<pre><code>extern crate core;\n\npub struct Serializer;\n\npub trait Serialize&lt;T&gt; {\n    fn to_bert(&amp;self, data: T) -&gt; Vec&lt;u8&gt;;\n}\n\nimpl Serialize&lt;core::tuple&gt; for Serializer {\n    fn to_bert(&amp;self, data: core::tuple) -&gt; Vec&lt;u8&gt; {\n        // some implementation\n    }\n}\n</code></pre>\n\n<p>The Rust docs said that this type is defined in the <code>core::rust</code> module, but when I try to use this type as a parameter in a trait, the complier generates an error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: type name `core::tuple` is undefined or not in scope [E0412]\nimpl Serialize&lt;core::tuple&gt; for Serializer {\n               ^~~~~~~~~~~\nhelp: run `rustc --explain E0412` to see a detailed explanation\nhelp: no candidates by the name of `tuple` found in your project; maybe you misspelled the name or forgot to import an external crate?\n\nerror: module `tuple` is private\nimpl Serialize&lt;core::tuple&gt; for Serializer {\n</code></pre>\n\n<p>If this module is private, then how can I get a defined default Rust <code>tuple</code> type and use it as a parameter of a trait?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470533740, "post_id": 38799724, "comment_id": 64988381, "body": "Your right, I meant an objective, measurable reason and should have said so. Re-worded the question."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1470534553, "post_id": 38799724, "comment_id": 64988502, "body": "By changing your question, you&#39;ve <a href=\"http://stackoverflow.com/a/38801702/155423\">invalidated an answer</a>. Although it&#39;s usually frowned upon to do so, there <a href=\"http://meta.stackoverflow.com/q/311297/155423\">appears to be precedent</a> that allows these types  of edits for off-topic questions. Hopefully creating that answer didn&#39;t take up a lot of the answerer&#39;s time."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1470536522, "post_id": 38799724, "comment_id": 64988729, "body": "I am not sure whether this question is about (1) <code>x.powi(2)</code> vs. <code>x * x</code> or (2) <code>x.powi(2)</code> vs. <code>squared(x)</code>. I.e., is this about inlining of user-defined functions or is it about rustc &quot;knowing&quot; to expand <code>x.powi(2)</code> where that expansion would be appropriate?"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1470537130, "post_id": 38799724, "comment_id": 64988800, "body": "@trentcl, Im porting somce code from another language that uses <code>squared(x)</code>, my question is asking for any objective reasons to use or not use this convention. As it turns out the answer is: &quot;There are no differences. So, write code which is most readable&quot;."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1470537510, "post_id": 38799724, "comment_id": 64988848, "body": "@ideasman42 The answer you accepted does not address function call overhead, but only shows that <code>x * x</code> is equivalent to <code>x.powi(2)</code>. <code>squared(x)</code> is not the same thing as either of those. Do you care about that?"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1470537621, "post_id": 38799724, "comment_id": 64988865, "body": "@trentcl, yes, though this is an example of a function that could be set to inline (or use a macro)."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1470537859, "post_id": 38799724, "comment_id": 64988883, "body": "@ideasman42 In that case, I suggest deleting the part about defining a <code>squared</code> function, since it was irrelevant to the answer you wanted"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1470573374, "post_id": 38799724, "comment_id": 64995597, "body": "Thanks. Not a downvoter btw"}], "answers": [{"comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1470490038, "post_id": 38801702, "comment_id": 64978350, "body": "Even in the case of readability, should the macro/function use <code>powi(2)</code> or not?"}], "tags": [], "owner": {"reputation": 153048, "user_id": 9204, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/c79937a093ff9e963c563e22cd385f30?s=128&d=identicon&r=PG", "display_name": "Alexey Romanov", "link": "https://stackoverflow.com/users/9204/alexey-romanov"}, "is_accepted": false, "score": 2, "last_activity_date": 1470468459, "creation_date": 1470468459, "answer_id": 38801702, "question_id": 38799724, "link": "https://stackoverflow.com/questions/38799724/is-there-a-performance-difference-between-a-squared-function-and-directly-callin/38801702#38801702", "title": "Is there a performance difference between a squared function and directly calling powi(2) in Rust?", "body": "<p>If it reads better to you, this is already a reason to define it. You need a better reason not to, and I don't think there is one in this case: it isn't as if anyone reading the code will be puzzled what <code>squared</code> does.</p>\n"}, {"comments": [{"owner": {"reputation": 8047, "user_id": 565879, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/de9dab7c27809643dc51c5193d58429c?s=128&d=identicon&r=PG", "display_name": "Buttons840", "link": "https://stackoverflow.com/users/565879/buttons840"}, "edited": false, "score": 0, "creation_date": 1572454580, "post_id": 38805543, "comment_id": 103567778, "body": "Your Rust Playground example makes it appear that much more &quot;code&quot; (if that assembly can be called code?) gets run for the <code>powi</code> case. Which goes against your point. Maybe this has changed since you posted the answer?"}], "tags": [], "owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "is_accepted": true, "score": 9, "last_activity_date": 1470534044, "last_edit_date": 1470534044, "creation_date": 1470495058, "answer_id": 38805543, "question_id": 38799724, "link": "https://stackoverflow.com/questions/38799724/is-there-a-performance-difference-between-a-squared-function-and-directly-callin/38805543#38805543", "title": "Is there a performance difference between a squared function and directly calling powi(2) in Rust?", "body": "<p>No, with the current Rust compiler they are equivalent, generating exactly the same result.</p>\n\n<p>You can check out the assembly code generated for both variants via the <a href=\"https://play.rust-lang.org/?gist=f9a785e45cddd2f52a42cab089db67f0&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">Rust Playground</a>:</p>\n\n<pre><code>#![crate_type = \"lib\"]\n\npub fn square_mul(x:f64) -&gt; f64 {\n    x*x\n}\n\npub fn square_pow(x:f64) -&gt; f64 {\n    x.powi(2)\n}\n</code></pre>\n\n<p>Select a channel and release compilation mode, then press the <code>ASM</code> button in the top left corner. This is the output for Rust v1.10:</p>\n\n<pre><code>// square_mul:\nmulsd   %xmm0, %xmm0\nretq\n\n// square_pow:\nmulsd   %xmm0, %xmm0\nretq\n</code></pre>\n\n<p>So Rust generates exactly the same code for both functions.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 346, "favorite_count": 0, "accepted_answer_id": 38805543, "answer_count": 2, "score": 2, "last_activity_date": 1470538632, "creation_date": 1470446790, "last_edit_date": 1470538632, "question_id": 38799724, "link": "https://stackoverflow.com/questions/38799724/is-there-a-performance-difference-between-a-squared-function-and-directly-callin", "title": "Is there a performance difference between a squared function and directly calling powi(2) in Rust?", "body": "<p>In Rust, you can write <code>(x * x)</code> as <code>x.powi(2)</code>.</p>\n\n<p>Is there any reason for/against wrapping <code>(x * x)</code> <em>(besides readability and personal preference)</em> into a function/macro in Rust, or is this equivalent to using <code>x.powi(2)</code>?</p>\n\n<p><em>(Where the constant <code>2</code>in <code>x.powi(2)</code> is folded and converted into <code>x * x</code>)</em></p>\n"}, {"tags": ["iterator", "rust", "heap-memory", "allocation", "lifetime"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 5, "creation_date": 1470494969, "post_id": 38797960, "comment_id": 64979719, "body": "I&#39;d like to thank you for asking a nicely-constructed question. Many frequent visitors don&#39;t show as much preparation, much less first-time askers. Kudos!"}, {"owner": {"reputation": 298, "user_id": 6683971, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/166e3700254b59411c77efc7ba60267b?s=128&d=identicon&r=PG&f=1", "display_name": "Elias Riedel G&#229;rding", "link": "https://stackoverflow.com/users/6683971/elias-riedel-g%c3%a5rding"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1470535010, "post_id": 38797960, "comment_id": 64988573, "body": "@Shepmaster Thanks, I tried my best to write a good first question, and it seems I got a well-qualified answer for it! Still, thanks for your stylistic corrections."}], "answers": [{"comments": [{"owner": {"reputation": 298, "user_id": 6683971, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/166e3700254b59411c77efc7ba60267b?s=128&d=identicon&r=PG&f=1", "display_name": "Elias Riedel G&#229;rding", "link": "https://stackoverflow.com/users/6683971/elias-riedel-g%c3%a5rding"}, "edited": false, "score": 0, "creation_date": 1470535543, "post_id": 38805498, "comment_id": 64988629, "body": "Thank you for your answer! Recreating the iterator strikes me as somewhat abominable, but it certainly works and I suppose it would have been nicer if <code>IntoIterator</code> had been implemented. It looks like we were lucky that the <code>Reader</code> didn&#39;t rewind as you say (I found this counterintuitive; rewinding is the usual behaviour of iterators in my experience); otherwise the program might have had to be restructured. I&#39;m used to writing functions more or less as black boxes that mirror my mental model of the problem-solving steps, but maybe this isn&#39;t a reasonable &quot;zero-cost abstraction&quot; in Rust."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1579271897, "last_edit_date": 1579271897, "creation_date": 1470494735, "answer_id": 38805498, "question_id": 38797960, "link": "https://stackoverflow.com/questions/38797960/return-lazy-iterator-that-depends-on-data-allocated-within-the-function/38805498#38805498", "title": "Return lazy iterator that depends on data allocated within the function", "body": "<h2>CSV 1.0</h2>\n\n<p>As I alluded to in the answer for older versions of the crate, the best way of solving this is for the CSV crate to have an owning iterator, which it now does: <a href=\"https://docs.rs/csv/1.1.2/csv/struct.DeserializeRecordsIntoIter.html\" rel=\"nofollow noreferrer\"><code>DeserializeRecordsIntoIter</code></a></p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use csv::ReaderBuilder; // 1.1.1\nuse serde::Deserialize; // 1.0.104\nuse std::{fs::File, path::Path};\n\n#[derive(Debug, Deserialize)]\nstruct DataRow {\n    country: String,\n    city: String,\n    accent_city: String,\n    region: String,\n    population: Option&lt;u64&gt;,\n    latitude: Option&lt;f64&gt;,\n    longitude: Option&lt;f64&gt;,\n}\n\nfn search_iter(data_path: impl AsRef&lt;Path&gt;, city: &amp;str) -&gt; impl Iterator&lt;Item = DataRow&gt; + '_ {\n    let file = File::open(data_path).expect(\"Opening file failed\");\n\n    ReaderBuilder::new()\n        .has_headers(true)\n        .from_reader(file)\n        .into_deserialize::&lt;DataRow&gt;()\n        .map(|row| row.expect(\"Failed decoding row\"))\n        .filter(move |row| row.city == city)\n}\n</code></pre>\n\n<h2>Before version 1.0</h2>\n\n<p>The straightest path to convert the original function would be to simply <a href=\"https://stackoverflow.com/q/27535289/155423\">wrap the iterator</a>. However, doing so directly will lead to problems because <a href=\"https://stackoverflow.com/q/32300132/155423\">you cannot return an object that refers to itself</a> and the result of <code>decode</code> refers to the <code>Reader</code>. If you could surmount that, you <a href=\"https://stackoverflow.com/q/25702909/155423\">cannot have an iterator return references to itself</a>.</p>\n\n<p>One solution is to simply re-create the <code>DecodedRecords</code> iterator for each call to your new iterator:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn search_iter&lt;'a, P&gt;(data_path: P, city: &amp;'a str) -&gt; MyIter&lt;'a&gt;\nwhere\n    P: AsRef&lt;Path&gt;,\n{\n    let file = File::open(data_path).expect(\"Opening file failed!\");\n\n    MyIter {\n        reader: csv::Reader::from_reader(file).has_headers(true),\n        city: city,\n    }\n}\n\nstruct MyIter&lt;'a&gt; {\n    reader: csv::Reader&lt;File&gt;,\n    city: &amp;'a str,\n}\n\nimpl&lt;'a&gt; Iterator for MyIter&lt;'a&gt; {\n    type Item = DataRow;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        let city = self.city;\n\n        self.reader\n            .decode()\n            .map(|row| row.expect(\"Failed decoding row\"))\n            .filter(|row: &amp;DataRow| row.city == city)\n            .next()\n    }\n}\n</code></pre>\n\n<p>This could have overhead associated with it, depending on the implementation of <code>decode</code>. Additionally, this might \"rewind\" back to the beginning of the input \u2014 if you substituted a <code>Vec</code> instead of a <code>csv::Reader</code>, you would see this. However, it happens to work in this case.</p>\n\n<p>Beyond that, I'd normally open the file and create the <code>csv::Reader</code> outside of the function and pass in the <code>DecodedRecords</code> iterator and transform it, returning a newtype / box / type alias around the underlying iterator. I prefer this because the structure of your code mirrors the lifetimes of the objects.</p>\n\n<p>I'm a little surprised that there isn't an implementation of <a href=\"https://doc.rust-lang.org/std/iter/trait.IntoIterator.html\" rel=\"nofollow noreferrer\"><code>IntoIterator</code></a> for <code>csv::Reader</code>, which would also solve the problem because there would not be any references.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/43952104/155423\">How can I store a Chars iterator in the same struct as the String it is iterating on?</a></li>\n<li><a href=\"https://stackoverflow.com/q/47193584/155423\">Is there an owned version of String::chars?</a></li>\n<li><a href=\"https://stackoverflow.com/q/27535289/155423\">What is the correct way to return an Iterator (or any other trait)?</a></li>\n</ul>\n"}], "owner": {"reputation": 298, "user_id": 6683971, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/166e3700254b59411c77efc7ba60267b?s=128&d=identicon&r=PG&f=1", "display_name": "Elias Riedel G&#229;rding", "link": "https://stackoverflow.com/users/6683971/elias-riedel-g%c3%a5rding"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 641, "favorite_count": 1, "accepted_answer_id": 38805498, "answer_count": 1, "score": 10, "last_activity_date": 1579271897, "creation_date": 1470432297, "last_edit_date": 1470491992, "question_id": 38797960, "link": "https://stackoverflow.com/questions/38797960/return-lazy-iterator-that-depends-on-data-allocated-within-the-function", "title": "Return lazy iterator that depends on data allocated within the function", "body": "<p>I am new to Rust and reading <em>The Rust Programming Language</em>, and in the <em>Error Handling</em> section <a href=\"https://doc.rust-lang.org/stable/book/error-handling.html#case-study-a-program-to-read-population-data\" rel=\"noreferrer\">there is a \"case study\"</a> describing a program to read data from a CSV file using the <code>csv</code> and <code>rustc-serialize</code> libraries (using <code>getopts</code> for argument parsing).</p>\n\n<p>The author writes a function <code>search</code> that steps through the rows of the csv file using a <code>csv::Reader</code> object and collect those entries whose 'city' field match a specified value into a vector and returns it. I've taken a slightly different approach than the author, but this should not affect my question. My (working) function looks like this:</p>\n\n<pre><code>extern crate csv;\nextern crate rustc_serialize;\n\nuse std::path::Path;\nuse std::fs::File;\n\nfn search&lt;P&gt;(data_path: P, city: &amp;str) -&gt; Vec&lt;DataRow&gt;\n    where P: AsRef&lt;Path&gt;\n{\n    let file = File::open(data_path).expect(\"Opening file failed!\");\n    let mut reader = csv::Reader::from_reader(file).has_headers(true);\n\n    reader.decode()\n          .map(|row| row.expect(\"Failed decoding row\"))\n          .filter(|row: &amp;DataRow| row.city == city)\n          .collect()\n}\n</code></pre>\n\n<p>where the <code>DataRow</code> type is just a record,</p>\n\n<pre><code>#[derive(Debug, RustcDecodable)]\nstruct DataRow {\n    country: String,\n    city: String,\n    accent_city: String,\n    region: String,\n    population: Option&lt;u64&gt;,\n    latitude: Option&lt;f64&gt;,\n    longitude: Option&lt;f64&gt;\n}\n</code></pre>\n\n<p>Now, the author poses, as the dreaded \"exercise to the reader\", the problem of modifying this function to return an iterator instead of a vector (eliminating the call to <code>collect</code>). My question is: How can this be done at all, and what are the most concise and idiomatic ways of doing it?</p>\n\n<hr>\n\n<p>A simple attempt that i think gets the type signature right is</p>\n\n<pre><code>fn search_iter&lt;'a,P&gt;(data_path: P, city: &amp;'a str)\n    -&gt; Box&lt;Iterator&lt;Item=DataRow&gt; + 'a&gt;\n    where P: AsRef&lt;Path&gt;\n{\n    let file = File::open(data_path).expect(\"Opening file failed!\");\n    let mut reader = csv::Reader::from_reader(file).has_headers(true);\n\n    Box::new(reader.decode()\n                   .map(|row| row.expect(\"Failed decoding row\"))\n                   .filter(|row: &amp;DataRow| row.city == city))\n}\n</code></pre>\n\n<p>I return a trait object of type <code>Box&lt;Iterator&lt;Item=DataRow&gt; + 'a&gt;</code> so as not to have to expose the internal <code>Filter</code> type, and where the lifetime <code>'a</code> is introduced just to avoid having to make a local clone of <code>city</code>. But this fails to compile because <code>reader</code> does not live long enough; it's allocated on the stack and so is deallocated when the function returns.</p>\n\n<p>I guess this means that <code>reader</code> has to be allocated on the heap (i.e. boxed) from the beginning, or somehow moved off the stack before the function ends. If I were returning a closure, this is exactly the problem that would be solved by making it a <code>move</code> closure. But I don't know how to do something similar when I'm not returning a function. I've tried defining a custom iterator type containing the needed data, but I couldn't get it to work, and it kept getting uglier and more contrived (don't make too much of this code, I'm only including it to show the general direction of my attempts):</p>\n\n<pre><code>fn search_iter&lt;'a,P&gt;(data_path: P, city: &amp;'a str)\n    -&gt; Box&lt;Iterator&lt;Item=DataRow&gt; + 'a&gt;\n    where P: AsRef&lt;Path&gt;\n{\n    struct ResultIter&lt;'a&gt; {\n        reader: csv::Reader&lt;File&gt;,\n        wrapped_iterator: Option&lt;Box&lt;Iterator&lt;Item=DataRow&gt; + 'a&gt;&gt;\n    }\n\n    impl&lt;'a&gt; Iterator for ResultIter&lt;'a&gt; {\n        type Item = DataRow;\n\n        fn next(&amp;mut self) -&gt; Option&lt;DataRow&gt;\n        { self.wrapped_iterator.unwrap().next() }\n    }\n\n    let file = File::open(data_path).expect(\"Opening file failed!\");\n\n    // Incrementally initialise\n    let mut result_iter = ResultIter {\n        reader: csv::Reader::from_reader(file).has_headers(true),\n        wrapped_iterator: None // Uninitialised\n    };\n    result_iter.wrapped_iterator =\n        Some(Box::new(result_iter.reader\n                                 .decode()\n                                 .map(|row| row.expect(\"Failed decoding row\"))\n                                 .filter(|&amp;row: &amp;DataRow| row.city == city)));\n\n    Box::new(result_iter)\n}\n</code></pre>\n\n<p><a href=\"https://stackoverflow.com/questions/28774496/conflicting-lifetime-requirement-for-iterator-returned-from-function\">This question</a> seems to concern the same problem, but the author of the answer solves it by making the concerned data <code>static</code>, which I don't think is an alternative for this question.</p>\n\n<p>I am using Rust 1.10.0, the current stable version from the Arch Linux package <code>rust</code>.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 423, "user_id": 154552, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5a54f69df550e31effcc52b0c430ecd2?s=128&d=identicon&r=PG", "display_name": "illeyezur", "link": "https://stackoverflow.com/users/154552/illeyezur"}, "edited": false, "score": 0, "creation_date": 1470453870, "post_id": 38785862, "comment_id": 64970445, "body": "Awesome, it works perfectly. Thanks so much. So does this mean that whenever the call <code>self.struct_member</code> the rust compiler views it as <code>(*self).struct_member</code> and move out of the struct? Or is that particular to the <code>for x in self.v</code> construct"}, {"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "reply_to_user": {"reputation": 423, "user_id": 154552, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5a54f69df550e31effcc52b0c430ecd2?s=128&d=identicon&r=PG", "display_name": "illeyezur", "link": "https://stackoverflow.com/users/154552/illeyezur"}, "edited": false, "score": 0, "creation_date": 1470457190, "post_id": 38785862, "comment_id": 64970873, "body": "@illeyezur That&#39;s what always happens (except for <code>Copy</code> types, but that&#39;s because <code>Copy</code> types don&#39;t move in general)."}], "tags": [], "owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "is_accepted": true, "score": 21, "last_activity_date": 1540908413, "last_edit_date": 1540908413, "creation_date": 1470389329, "answer_id": 38785862, "question_id": 38785744, "link": "https://stackoverflow.com/questions/38785744/iterating-through-a-vec-within-a-struct-cannot-move-out-of-borrowed-content/38785862#38785862", "title": "Iterating through a Vec within a struct - cannot move out of borrowed content", "body": "<p>The line: <code>for e in self.v</code> is essentially saying <code>for e in (*self).v</code>; you're attempting to iterate over the vector by move, invoking its <a href=\"https://doc.rust-lang.org/std/iter/trait.IntoIterator.html\" rel=\"noreferrer\"><code>IntoIterator</code></a> trait. This would destroy the vector completely, moving all the numbers out of it forever, which is not only not what you want, but also not allowed in this context because you're only allowed to read it.</p>\n\n<p>You actually want to iterate over it by reference. There are two ways to do this:</p>\n\n<pre><code>for e in &amp;self.v {\n    // ...\n}\n</code></pre>\n\n<p>This is essentially saying <code>&amp;((*self).v)</code>, since the <code>.</code> auto-dereferences you need to tell the compiler that you actually just want to borrow the vector.</p>\n\n<p>or</p>\n\n<pre><code>for e in self.v.iter() {\n    // ...\n}\n</code></pre>\n\n<p>This may look funny because <code>iter</code> takes an <code>&amp;self</code>. Why? Well, the compiler also auto-references if you call a function on a value that takes a reference. This is essentially <code>(&amp;((*self).v)).iter()</code>, but that would suck to write so the compiler helps out.</p>\n\n<p>So why doesn't it auto-reference in the <code>for</code> loop? Well, <code>for x in self.v</code> is a valid statement, and that may be what you intended to write. It's usually more important for the compiler to tell you that what you want want is impossible than assume you wanted something else. With the auto (de-)referencing above, no such ambiguity exists.</p>\n\n<p>The former solution is preferred, but the latter is necessary if you want to use an iterator adapter.</p>\n\n<p>Speaking of which, your <code>sum</code> already exists: just write <code>self.v.iter().sum()</code>.</p>\n"}], "owner": {"reputation": 423, "user_id": 154552, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5a54f69df550e31effcc52b0c430ecd2?s=128&d=identicon&r=PG", "display_name": "illeyezur", "link": "https://stackoverflow.com/users/154552/illeyezur"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4429, "favorite_count": 1, "accepted_answer_id": 38785862, "answer_count": 1, "score": 12, "last_activity_date": 1540908413, "creation_date": 1470388999, "last_edit_date": 1540908350, "question_id": 38785744, "link": "https://stackoverflow.com/questions/38785744/iterating-through-a-vec-within-a-struct-cannot-move-out-of-borrowed-content", "title": "Iterating through a Vec within a struct - cannot move out of borrowed content", "body": "<p>I am writing a function for a struct which contains a <code>Vec</code> where I attempt to iterate through the <code>Vec</code>:</p>\n\n<pre><code>struct Object {\n    pub v: Vec&lt;f32&gt;,\n}\n\nimpl Object {\n    pub fn sum(&amp;self) -&gt; f32 {\n        let mut sum = 0.0;\n        for e in self.v {\n            sum += e;\n        }\n        sum\n    }\n}\n</code></pre>\n\n<p>However I get the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of borrowed content\n --&gt; src/lib.rs:8:18\n  |\n8 |         for e in self.v {\n  |                  ^^^^ cannot move out of borrowed content\n</code></pre>\n\n<p>My understanding is that since <code>self</code> is borrowed and that the for loop iteration is attempting to move the elements of <code>v</code> out into <code>e</code>.</p>\n\n<p>From the error code, I read that a potential solution is to take ownership but I'm not quite certain how to do that.</p>\n\n<p>I'm not trying to modify the vector or its elements. I just want to use the elements to run some computation.</p>\n"}, {"tags": ["function", "struct", "rust"], "comments": [{"owner": {"reputation": 30697, "user_id": 31667, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/082b069c287878a1bd5731f44c8f10e7?s=128&d=identicon&r=PG", "display_name": "viraptor", "link": "https://stackoverflow.com/users/31667/viraptor"}, "edited": false, "score": 3, "creation_date": 1470380722, "post_id": 38782070, "comment_id": 64936840, "body": "Also relevant: <a href=\"https://stackoverflow.com/questions/27835375/can-i-efficiently-return-object-by-value-in-rust\" title=\"can i efficiently return object by value in rust\">stackoverflow.com/questions/27835375/&hellip;</a>"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 383, "favorite_count": 1, "closed_date": 1470405111, "answer_count": 0, "score": 2, "last_activity_date": 1470380393, "creation_date": 1470376583, "last_edit_date": 1470380393, "question_id": 38782070, "link": "https://stackoverflow.com/questions/38782070/are-the-tradeoffs-of-returning-large-structs-by-values-in-rust-similar-to-c", "closed_reason": "Duplicate", "title": "Are the tradeoffs of returning large structs by values in Rust similar to C?", "body": "<p>In C it can be better to pass pointers to larger structs.</p>\n\n<p>Example of return-by-value:</p>\n\n<pre><code>typedef struct LargeStruct {\n    char data[512];\n} LargeStruct;\n\n/* snip */\n\nvoid some_function() {\n    for (int i = 0; i &lt; total; ++i) {\n        LargeStruct value = some_other_function();\n        /* use 'value' */\n    }\n}\n</code></pre>\n\n<p>In this case its often preferable to pass a pointer to the struct. eg:</p>\n\n<pre><code>    for (int i = 0; i &lt; total; ++i) {\n        LargeStruct value;\n        some_other_function(&amp;value);\n        /* use 'value' */\n    }\n</code></pre>\n\n<p>... so each function call doesn't have to make a copy of the struct.</p>\n\n<p>My question is: Does this apply to Rust too?</p>\n\n<p>Are return values handled differently to C that make it unnecessary to pass <em>return-arguments</em>?</p>\n"}, {"tags": ["macros", "rust"], "answers": [{"comments": [{"owner": {"reputation": 898, "user_id": 1633026, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2e1ad7e90b16b09cf026e49c24d148ba?s=128&d=identicon&r=PG", "display_name": "Andrew Straw", "link": "https://stackoverflow.com/users/1633026/andrew-straw"}, "edited": false, "score": 1, "creation_date": 1600842710, "post_id": 38780056, "comment_id": 113211826, "body": "The macros chapter in the new book <a href=\"https://doc.rust-lang.org/stable/book/ch19-06-macros.html\" rel=\"nofollow noreferrer\">is here</a>."}], "tags": [], "owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "is_accepted": true, "score": 5, "last_activity_date": 1470362931, "creation_date": 1470362931, "answer_id": 38780056, "question_id": 38779591, "link": "https://stackoverflow.com/questions/38779591/macro-that-declare-variables-in-rust/38780056#38780056", "title": "Macro that declare variables in Rust?", "body": "<p>It is possible to write such a macro in Rust:</p>\n\n<pre><code>macro_rules! vars {\n    ($data:expr, $stride:expr, $var1:ident, $var2:ident, $var3:ident) =&gt; {\n        let $var1 = $data[0];\n        let $var2 = $data[1 * $stride];\n        let $var3 = $data[2 * $stride];\n    };\n}\n\nfn main() {\n    let array = [1, 2, 3, 4, 5];\n    let stride = 2;\n    vars!(array, stride, a, b, c);\n    println!(\"{}\", a);\n    println!(\"{}\", b);\n    println!(\"{}\", c);\n}\n</code></pre>\n\n<p>Read the <a href=\"https://doc.rust-lang.org/stable/book/macros.html\" rel=\"noreferrer\">Macros chapter in the book</a> for more information.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2219, "favorite_count": 0, "accepted_answer_id": 38780056, "answer_count": 1, "score": 4, "last_activity_date": 1470362931, "creation_date": 1470358694, "question_id": 38779591, "link": "https://stackoverflow.com/questions/38779591/macro-that-declare-variables-in-rust", "title": "Macro that declare variables in Rust?", "body": "<p>In C its possible to write a macro that declares variables, as follows:</p>\n\n<pre><code>#define VARS(a, b, c) \\\n    int a, b, c;\n</code></pre>\n\n<p>Of course this isn't something you'd typically want to do.</p>\n\n<p>In the actual example I'm looking to get working its not quite so simple.</p>\n\n<pre><code>#define VARS(data, stride, a, b, c) \\\n    MyStruct *a = &amp;data.array[0],            \\\n    MyStruct *b = &amp;data.array[1 * (stride)], \\\n    MyStruct *c = &amp;data.array[2 * (stride)];\n</code></pre>\n\n<p>However the exact details of assignment shouldn't matter for the purpose of this question.</p>\n\n<p>Is it possible to write a macro like this in Rust?\nIf so how would this be written?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "is_accepted": true, "score": 3, "last_activity_date": 1470395050, "last_edit_date": 1470395050, "creation_date": 1470394730, "answer_id": 38787594, "question_id": 38779588, "link": "https://stackoverflow.com/questions/38779588/nesting-an-iterators-loops/38787594#38787594", "title": "Nesting an iterator&#39;s loops", "body": "<p>This is doable using a <code>while let</code> expression.</p>\n\n<pre><code>let x = vec![1, 2, 3, 5, 4, 6, 7, 5, 8, 5];\n\nlet mut i = x.iter();\nwhile let Some(v) = i.next() {\n    println!(\"First before inner loop: {}\", v);\n    for v in i.by_ref() {\n        if *v == 5 {\n            println!(\"Found a 5\");\n            break;\n        }\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=2a04911403300ec7d2d5000c590c6554&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">Playground</a></p>\n\n<p><code>while let Some(v) = i.next()</code> is more or less directly equivalent to \"for loop without borrowing the iterator\". It, in turn, is essentially just:</p>\n\n<pre><code>loop {\n    match i.next() {\n        Some(v) =&gt; { loop_body },\n        _ =&gt; { break; },\n    };\n}\n</code></pre>\n\n<p>Bonus: you can use <code>while let</code> on pretty much any other expression you want to call repeatedly that returns a sum type.</p>\n"}], "owner": {"reputation": 409, "user_id": 2970121, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/d0b21cede510b0bbf986847693a9e075?s=128&d=identicon&r=PG&f=1", "display_name": "njaard", "link": "https://stackoverflow.com/users/2970121/njaard"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1070, "favorite_count": 0, "accepted_answer_id": 38787594, "answer_count": 1, "score": 3, "last_activity_date": 1470395050, "creation_date": 1470358638, "question_id": 38779588, "link": "https://stackoverflow.com/questions/38779588/nesting-an-iterators-loops", "title": "Nesting an iterator&#39;s loops", "body": "<p>As you know, a <code>for in</code> loop owns its iterator for the duration of the loop if you pass it an iterator directly, like so:</p>\n\n<pre><code>let v = vec![...];\nlet mut i = v.iter();\nfor _ in i { }\n</code></pre>\n\n<p>As malbarbo observes, you can instruct <code>for</code> to take a reference to <code>i</code> by writing <code>i.by_ref()</code>. However, you can't repeat that from inside the for loop:</p>\n\n<pre><code>for _ in i.by_ref() {\n    for _ in i.by_ref() {\n          // ^ error: cannot borrow `i` as mutable\n          // more than once at a time [--explain E0499]\n        break;\n    }\n}\n</code></pre>\n\n<p>Understandably, the outer <code>for</code> loop must modify its iterator, so it takes a mutable reference to it, and nobody else can call mutable methods on <code>i</code> anymore. We can show this problem more directly like so:</p>\n\n<pre><code>for _ in i.by_ref() {\n    i.next(); // same error\n}\n</code></pre>\n\n<p>One recourse is to make the outer <code>for</code> a <code>loop</code> and call <code>i.next()</code> directly. Is there a prettier way to have our cake (the outer for loop iterates over <code>i</code>) and eat it too (we can still advance <code>i</code> inside the outer loop)?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470366696, "post_id": 38778889, "comment_id": 64932187, "body": "Could you clarify how this question is different from your <a href=\"http://stackoverflow.com/q/38776577/155423\">previous one</a>?"}, {"owner": {"reputation": 409, "user_id": 2970121, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/d0b21cede510b0bbf986847693a9e075?s=128&d=identicon&r=PG&f=1", "display_name": "njaard", "link": "https://stackoverflow.com/users/2970121/njaard"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470395043, "post_id": 38778889, "comment_id": 64945341, "body": "this one has the Arc, and a function that returns (and keeps reference) to the Arc&#39;s contents."}, {"owner": {"reputation": 409, "user_id": 2970121, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/d0b21cede510b0bbf986847693a9e075?s=128&d=identicon&r=PG&f=1", "display_name": "njaard", "link": "https://stackoverflow.com/users/2970121/njaard"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470413255, "post_id": 38778889, "comment_id": 64957374, "body": "I can&#39;t <code>std::mem::replace</code> the Arc because it&#39;s being borrowed by the lock. Dropping the lock does nothing."}, {"owner": {"reputation": 3376, "user_id": 134409, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/e1ec6b4e77bfbae1b992957792572630?s=128&d=identicon&r=PG", "display_name": "dpc.pw", "link": "https://stackoverflow.com/users/134409/dpc-pw"}, "edited": false, "score": 0, "creation_date": 1471284186, "post_id": 38778889, "comment_id": 65275257, "body": "Why are you try to <code>something_arc.write()</code> if you already have that as <code>something_locked</code> ?"}], "owner": {"reputation": 409, "user_id": 2970121, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/d0b21cede510b0bbf986847693a9e075?s=128&d=identicon&r=PG&f=1", "display_name": "njaard", "link": "https://stackoverflow.com/users/2970121/njaard"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 393, "favorite_count": 0, "answer_count": 0, "score": 1, "last_activity_date": 1470354693, "creation_date": 1470353134, "last_edit_date": 1470354693, "question_id": 38778889, "link": "https://stackoverflow.com/questions/38778889/replacing-a-borrowed-arcrwlock", "title": "Replacing a borrowed Arc&lt;RwLock&gt;", "body": "<p>I have some code that stores an object. I have a function that does the legwork of storing that object and returning an Arc of it.</p>\n\n<pre><code>struct Something {\n    // ...\n}\n\n// create a something, returning a locked Arc of it.\nfn make_something(&amp;mut self) -&gt; Arc&lt;RwLock&lt;Something&gt;&gt;\n{\n    let x = Something{};\n    let stored = Arc::new(RwLock::new(x));\n    // stored is cloned and put into a container in self\n    stored.clone()\n}\n</code></pre>\n\n<p>Elsewhere, I have code that sometimes needs to get a new make_something, letting the old <code>Something</code> get stored elsewhere in <code>make_something</code>'s <code>Self</code>. However, it gives me scoping problems:</p>\n\n<pre><code>fn elsewhere() {\n   let mut something_arc = obj.make_something();\n   let mut something_locked = something_arc.write().unwrap();\n   loop {\n      // something_lock is mutated as a Something\n\n      // create a new make something, and start a \"transaction\"\n      something_arc = obj.make_something();\n      something_locked = something_arc.write().unwrap();\n   }\n}\n</code></pre>\n\n<p>The borrow checker is telling me that I can't replace <code>something_arc</code> because it's being borrowed by <code>something_locked</code>.</p>\n\n<p>How do I replace <code>something_arc</code> and <code>something_locked</code> with a new <code>Arc</code> and associated write lock?</p>\n"}, {"tags": ["struct", "rust", "tuples"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1470406787, "creation_date": 1470406787, "answer_id": 38791519, "question_id": 38778662, "link": "https://stackoverflow.com/questions/38778662/possible-to-operate-on-all-members-of-a-homogeneous-struct-tuple-in-rust/38791519#38791519", "title": "Possible to operate on all members of a homogeneous struct/tuple in Rust?", "body": "<p>No, it is not possible. What is possible is writing code that will write the code needed. This is known as <em>metaprogramming</em>. In Rust, there are two main avenues for metaprogramming: build scripts and macros. Compiler plugins also exist, but are much more complicated.</p>\n\n<p>The Rust standard library uses macros to implement traits for arrays and tuples from 0 to 32, so it's certainly an accepted pattern. You should start by writing out a few cases to see how each iteration differs, then extract a macro from that.</p>\n\n<p>Further reading:</p>\n\n<ul>\n<li><a href=\"https://doc.rust-lang.org/stable/book/macros.html\" rel=\"nofollow\">Macros in <em>The Rust Programming Language</em></a></li>\n<li><a href=\"https://danielkeep.github.io/tlborm/book/README.html\" rel=\"nofollow\"><em>The Little Book of Rust Macros</em></a></li>\n</ul>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 91, "favorite_count": 0, "accepted_answer_id": 38791519, "answer_count": 1, "score": 2, "last_activity_date": 1470406787, "creation_date": 1470351562, "last_edit_date": 1470405223, "question_id": 38778662, "link": "https://stackoverflow.com/questions/38778662/possible-to-operate-on-all-members-of-a-homogeneous-struct-tuple-in-rust", "title": "Possible to operate on all members of a homogeneous struct/tuple in Rust?", "body": "<p>I have a vector with an <code>add</code> operator:</p>\n\n<pre><code>use std::ops::Add;\n\nstruct float2(f64, f64);\n\nimpl Add for float2 {\n    type Output = float2;\n\n    fn add(self, _rhs: float2) -&gt; float2 {\n        float2(self.0 + _rhs.0,\n               self.1 + _rhs.1)\n    }\n}\n</code></pre>\n\n<p>Is it possible to write this in such a way that it would work for a 3D or 4D vector too?</p>\n\n<p>e.g.: <code>struct float2(f64, f64, f64);</code></p>\n\n<p>I managed to add an <code>Index</code> operator, and a <code>len</code> method that returns a static value for each type, but this feels a bit cumbersome. I didn't check the assembly, but its possible all index accesses are checked, which seems unnecessary for such a low level operation.</p>\n\n<p>I could also pack the struct and use direct unsafe memory access, but this also doesn't seem very optimal.</p>\n\n<p>Is there a more convenient way to write expressions that handle all elements of the struct?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 70803, "user_id": 28128, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/4e974a514f0764fdfe99a8915f192002?s=128&d=identicon&r=PG", "display_name": "David Grayson", "link": "https://stackoverflow.com/users/28128/david-grayson"}, "edited": false, "score": 0, "creation_date": 1470341765, "post_id": 38776577, "comment_id": 64924753, "body": "I don&#39;t see why you have to discard the vector and the lock around it.  Why not just change its size to zero to discard all the data in it?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470343173, "post_id": 38776577, "comment_id": 64925455, "body": "I see your disclaimer, but I still don&#39;t understand your program. If you hold a writer lock for the duration of the entire program, then a reader lock can never be obtained, thus there isn&#39;t really any possibility for multithreading..."}], "answers": [{"comments": [{"owner": {"reputation": 409, "user_id": 2970121, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/d0b21cede510b0bbf986847693a9e075?s=128&d=identicon&r=PG&f=1", "display_name": "njaard", "link": "https://stackoverflow.com/users/2970121/njaard"}, "edited": false, "score": 0, "creation_date": 1470353226, "post_id": 38777025, "comment_id": 64929023, "body": "<code>mem::replace</code> is documented as not copying any of its parameters, but its source code uses <a href=\"https://doc.rust-lang.org/std/ptr/fn.copy_nonoverlapping.html\" rel=\"nofollow noreferrer\">using copy_non_overlapping</a>. I need this code to work with <code>Drop</code> and it&#39;s unclear when I&#39;m allowed to do that. I created a new question here."}, {"owner": {"reputation": 1295, "user_id": 1114328, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d211889b453feb9210d9645cbcfd524e?s=128&d=identicon&r=PG", "display_name": "durka42", "link": "https://stackoverflow.com/users/1114328/durka42"}, "edited": false, "score": 1, "creation_date": 1471968249, "post_id": 38777025, "comment_id": 65558871, "body": "I think the documentation should say &quot;without cloning&quot; or &quot;without deep-copying&quot;. <code>mem::replace</code> calls <code>mem::swap</code> which correctly uses <code>mem::forget</code> in order to prevent extra drops, so you shouldn&#39;t have any problems. Anyway the code in this answer doesn&#39;t mention <code>unsafe</code>, so you know it won&#39;t have extra drops without even looking at the source :)"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1470343093, "last_edit_date": 1495541312, "creation_date": 1470343093, "answer_id": 38777025, "question_id": 38776577, "link": "https://stackoverflow.com/questions/38776577/replacing-a-borrowed-variable/38777025#38777025", "title": "Replacing a borrowed variable", "body": "<p>I agree <a href=\"https://stackoverflow.com/questions/38776577/replacing-a-borrowed-variable#comment64924753_38776577\">with David Grayson</a>, there's no obvious need to recreate the <code>RwLock</code>. Assuming you need the vector after filling it up, use <code>mem::replace</code> to switch out the <code>Vec</code>:</p>\n\n<pre><code>use std::sync::RwLock;\nuse std::mem;\n\nfn main() {\n    let locked = RwLock::new(Vec::&lt;u32&gt;::new());\n    let mut writer = locked.write().unwrap();    \n\n    for v in 0..100 {\n        if writer.len() &gt; 4 {\n            let old_vec = mem::replace(&amp;mut *writer, Vec::new());\n        }\n        writer.push(v);\n    }\n}\n</code></pre>\n\n<p>If you don't need the <code>Vec</code>, then just call <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.clear\" rel=\"nofollow noreferrer\"><code>Vec::clear</code></a>.</p>\n"}], "owner": {"reputation": 409, "user_id": 2970121, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/d0b21cede510b0bbf986847693a9e075?s=128&d=identicon&r=PG&f=1", "display_name": "njaard", "link": "https://stackoverflow.com/users/2970121/njaard"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 251, "favorite_count": 0, "closed_date": 1555420416, "answer_count": 1, "score": 2, "last_activity_date": 1470343093, "creation_date": 1470341370, "last_edit_date": 1470342718, "question_id": 38776577, "link": "https://stackoverflow.com/questions/38776577/replacing-a-borrowed-variable", "closed_reason": "Duplicate", "title": "Replacing a borrowed variable", "body": "<p>I have a bucket of objects that need to accumulate values. It's protected by an <code>RwLock</code>, and as such I also keep around its write lock. I want to keep a single write lock for the duration of the process.</p>\n\n<p>For example:</p>\n\n<pre><code>use std::sync::RwLock;\n\nfn main() {\n    let locked = RwLock::new(Vec::&lt;u32&gt;::new());\n\n    // this is the entry point for real-world code\n    let mut writer = locked.write().unwrap();    \n\n    // copy into 'locked' until it is full (has 4 items)\n    for v in 0..100 {\n        if writer.len() &gt; 4 {\n            // discard 'writer' and 'locked', create anew\n            locked = RwLock::new(Vec::&lt;u32&gt;::new());\n            writer = locked.write().unwrap();\n        }\n        writer.push(v);\n    }\n}\n</code></pre>\n\n<p>While my example operates on fixed data, and so appears to not need the <code>RwLock</code> at all, the real code would enter at \"real code\" and not necessarily exit on the boundary of <code>locked</code> becoming \"full\".</p>\n\n<p>How do I create a new <code>locked</code> and <code>writer</code> object when needed without the borrow-checker disagreeing?</p>\n"}, {"tags": ["windows", "user-interface", "rust"], "answers": [{"tags": [], "owner": {"reputation": 574, "user_id": 566234, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/3c1e7d744f8b073e6ca1581aaeff8e0a?s=128&d=identicon&r=PG", "display_name": "James Gilles", "link": "https://stackoverflow.com/users/566234/james-gilles"}, "is_accepted": true, "score": 6, "last_activity_date": 1470346814, "last_edit_date": 1470346814, "creation_date": 1470346491, "answer_id": 38777759, "question_id": 38775792, "link": "https://stackoverflow.com/questions/38775792/rust-installation-on-windows-for-developing-gui-apps/38777759#38777759", "title": "Rust Installation on Windows for developing GUI apps", "body": "<p><a href=\"https://github.com/KISS-UI/kiss-ui#kiss-ui-\" rel=\"noreferrer\">According to its documentation</a>, kiss-UI depends on <a href=\"http://webserver2.tecgraf.puc-rio.br/iup/\" rel=\"noreferrer\">the IUP library</a>.</p>\n\n<p>The error from <code>gcc</code> (<code>can't find -liup</code>) suggests that you don't have IUP installed. You may be able to install it and have things work; it depends on whether the <a href=\"https://github.com/dcampbell24/iup-rust\" rel=\"noreferrer\">IUP bindings used by kiss-UI</a> can cope with windows.</p>\n\n<p>Some other GUI libraries can be found at <a href=\"https://github.com/kud1ing/awesome-rust#gui\" rel=\"noreferrer\">awesome-rust</a>. There are bindings to libraries like Qt and Gtk. If you know the windows API, you could also check out the <a href=\"https://github.com/retep998/winapi-rs\" rel=\"noreferrer\">winapi crate</a>.</p>\n\n<p>If you want to avoid messing with linking and stuff, you could try using a pure rust library like <a href=\"https://github.com/PistonDevelopers/conrod/\" rel=\"noreferrer\">conrod</a>, which should 'just work' on windows.</p>\n\n<p>To answer your more broad questions:</p>\n\n<p>See the <a href=\"https://www.rust-lang.org/en-US/downloads.html#win-foot\" rel=\"noreferrer\">footnote</a> on the downloads page. The MSVC version of rust depends on MSVC being installed. The GNU/MinGW build is standalone.</p>\n"}], "owner": {"reputation": 3488, "user_id": 477035, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/cYpss.jpg?s=128&g=1", "display_name": "RedGrittyBrick", "link": "https://stackoverflow.com/users/477035/redgrittybrick"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2033, "favorite_count": 0, "accepted_answer_id": 38777759, "answer_count": 1, "score": 2, "last_activity_date": 1470346814, "creation_date": 1470338765, "last_edit_date": 1495540809, "question_id": 38775792, "link": "https://stackoverflow.com/questions/38775792/rust-installation-on-windows-for-developing-gui-apps", "title": "Rust Installation on Windows for developing GUI apps", "body": "<h2>TL:DR;</h2>\n\n<p>Can I write GUI programs on Win 10 (64) using Rust without installing the full MinGW toolchain (nor the MS equivalent)?</p>\n\n<p><sub>\nSupplementary questions:\n</sub></p>\n\n<p><sub>\n- If not, should I just go ahead and install MinGW?\n</sub></p>\n\n<p><sub>\n- Does anything GNUish in <em>Windows 10 Anniversary Update</em> change any of this?\n</sub></p>\n\n<hr>\n\n<h2>Longer version</h2>\n\n<p>I <a href=\"https://stackoverflow.com/research/developer-survey-2016#technology-most-loved-dreaded-and-wanted\">saw</a> that Rust is the most loved programming language hereabouts so 15 minutes ago...</p>\n\n<p>I <a href=\"https://www.rust-lang.org/en-US/downloads.html#win-foot\" rel=\"nofollow noreferrer\">read</a></p>\n\n<blockquote>\n  <p>No additional software installation is necessary for basic use of the GNU build.</p>\n  \n  <p>Rust's support for the GNU ABI is more mature, and is recommended for typical uses.</p>\n</blockquote>\n\n<p>So I downloaded <code>Windows (GNU ABI \u2020) (.msi) 64-bit</code> to my PC running Windows 10.</p>\n\n<h3>TUI</h3>\n\n<p>I read some basic intro and used <code>rustc</code> to compile a Hello World! and ran it OK. I then read about <code>cargo</code> and reorganised buit and ran the same code using that.</p>\n\n<h3>GUI</h3>\n\n<p>I then searched for <code>Rust GUI</code> and found <a href=\"https://users.rust-lang.org/t/kiss-ui-a-simple-ui-tookit-for-rust/1452\" rel=\"nofollow noreferrer\">Kiss_UI</a> </p>\n\n<blockquote>\n  <p>a simple UI tookit for Rust</p>\n</blockquote>\n\n<p>So I did a <code>cargo new Hello_GUI --bin</code> and added</p>\n\n<pre><code>[dependencies.kiss-ui]\ngit = \"https://github.com/cybergeek94/kiss-ui\"\n</code></pre>\n\n<p>to Cargo.toml</p>\n\n<p>I cut and pasted a simple example from that website into main.rs</p>\n\n<p>I then ran <code>cargo run --verbose</code>. It did </p>\n\n<pre><code>   Updating git repository `https://github.com/cybergeek94/kiss-ui`\n    Updating registry `https://github.com/rust-lang/crates.io-index`\n Downloading iup-sys v0.0.3\n Downloading libc v0.2.14\n Downloading libc v0.1.12\n   Compiling libc v0.1.12\n</code></pre>\n\n<p>...</p>\n\n<pre><code>warning: crate `Hello_GUI` should have a snake case name such as `hello_gui`, #[warn(non_snake_case)] on by default\nerror: linking with `gcc` failed: exit code: 1\nnote: \"gcc\" \"-Wl,--enable-long-section-names\" ...\nnote: ld: cannot find -liup\nerror: aborting due to previous error\n</code></pre>\n\n<p>So I learned two things</p>\n\n<ul>\n<li><p>I need to use snake case.</p></li>\n<li><p>GUI programming is not \"basic use\".</p></li>\n</ul>\n\n<p>I have no complaints about either of these points but could use a clue or two about the second:</p>\n\n<p>Assuming I want to write a GUI equivalent of Hello World in a simple way, what are my main options now?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 71, "user_id": 3667348, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/3yYqm.jpg?s=128&g=1", "display_name": "AndrewBrinker", "link": "https://stackoverflow.com/users/3667348/andrewbrinker"}, "is_accepted": false, "score": 1, "last_activity_date": 1470338271, "creation_date": 1470338271, "answer_id": 38775641, "question_id": 38775536, "link": "https://stackoverflow.com/questions/38775536/how-does-one-have-a-for-loop-borrow-the-iterator/38775641#38775641", "title": "How does one have a for loop borrow the iterator?", "body": "<p>All iterators have a <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#tymethod.next\" rel=\"nofollow\"><code>next()</code></a> function that advances the iterator and returns an <code>Option&lt;Self::Item&gt;</code> (that is, they return either <code>None</code> or a <code>Some</code> containing a value of whatever type you're iterating over. You can call this function yourself to manually increment the iterator however many times you want, which sounds like it would solve your problem in this case.</p>\n"}, {"comments": [{"owner": {"reputation": 409, "user_id": 2970121, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/d0b21cede510b0bbf986847693a9e075?s=128&d=identicon&r=PG&f=1", "display_name": "njaard", "link": "https://stackoverflow.com/users/2970121/njaard"}, "edited": false, "score": 0, "creation_date": 1470340358, "post_id": 38775906, "comment_id": 64923958, "body": "This is a good answer, but it fails if you want to have (even non-mutable) nested iterators on <code>i</code>."}], "tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 3, "last_activity_date": 1470339110, "creation_date": 1470339110, "answer_id": 38775906, "question_id": 38775536, "link": "https://stackoverflow.com/questions/38775536/how-does-one-have-a-for-loop-borrow-the-iterator/38775906#38775906", "title": "How does one have a for loop borrow the iterator?", "body": "<p>You can use <a href=\"https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.by_ref\" rel=\"nofollow\"><code>Iterator::by_ref</code></a> to borrow the iterator and continue to use it after the borrow ends:</p>\n\n<pre><code>fn main() {\n    let x = vec![1, 2, 3, 4];\n    let mut i = x.iter();\n    for _ in i.by_ref() { break; } // iterate over just one \"i\"\n    for _ in i.by_ref() { break; } // continue iterating through \"i\" here\n    assert_eq!(Some(&amp;3), i.next())\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1571104316, "creation_date": 1571104316, "answer_id": 58386160, "question_id": 38775536, "link": "https://stackoverflow.com/questions/38775536/how-does-one-have-a-for-loop-borrow-the-iterator/58386160#58386160", "title": "How does one have a for loop borrow the iterator?", "body": "<p>You can take a mutable reference to the iterator (<code>&amp;mut i</code>):</p>\n\n<pre><code>let x = vec![1, 2, 3, 4];\nlet mut i = x.iter();\nfor a1 in &amp;mut i { break; }\nfor a2 in &amp;mut i { break; }\n</code></pre>\n\n<p>This is the same as what <code>Iterator::by_ref</code> does internally.</p>\n"}], "owner": {"reputation": 409, "user_id": 2970121, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/d0b21cede510b0bbf986847693a9e075?s=128&d=identicon&r=PG&f=1", "display_name": "njaard", "link": "https://stackoverflow.com/users/2970121/njaard"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1241, "favorite_count": 1, "accepted_answer_id": 38775906, "answer_count": 3, "score": 3, "last_activity_date": 1571104316, "creation_date": 1470337905, "last_edit_date": 1470343972, "question_id": 38775536, "link": "https://stackoverflow.com/questions/38775536/how-does-one-have-a-for-loop-borrow-the-iterator", "title": "How does one have a for loop borrow the iterator?", "body": "<p>How does one have a <code>for</code> ... <code>in</code> loop borrow the iterator it is operating over? For example:</p>\n\n<pre><code>let x = vec![1, 2, 3, 4];\nlet i = x.iter();\nfor a1 in i { break; } // iterate over just one \"i\"\nfor a2 in i { break; } // continue iterating through \"i\" here\n</code></pre>\n\n<p>You can't simply give <code>&amp;i</code> to the for, because then it can't convert the <code>&amp;Iterator</code> to an <code>Iterator</code> object.</p>\n"}, {"tags": ["recursion", "rust"], "comments": [{"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "edited": false, "score": 1, "creation_date": 1470311998, "post_id": 38766275, "comment_id": 64904631, "body": "In this <a href=\"https://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm\" rel=\"nofollow noreferrer\">pseudo-code</a> <code>dmax</code> starts with <code>0</code>. Why do you start <code>dmax</code> with <code>1.0</code>?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1470313208, "post_id": 38766275, "comment_id": 64905430, "body": "As a general rule, a stack-overflow is a user error :)"}, {"owner": {"reputation": 21101, "user_id": 416626, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/ad98b7aa615718b4a2446d12af86be73?s=128&d=identicon&r=PG", "display_name": "urschrei", "link": "https://stackoverflow.com/users/416626/urschrei"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1470313278, "post_id": 38766275, "comment_id": 64905474, "body": "@MatthieuM. Oh, I was never in any doubt that that was the case. Unfortunately, it wasn&#39;t a more subtle error on my part\u2026"}], "answers": [{"comments": [{"owner": {"reputation": 21101, "user_id": 416626, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/ad98b7aa615718b4a2446d12af86be73?s=128&d=identicon&r=PG", "display_name": "urschrei", "link": "https://stackoverflow.com/users/416626/urschrei"}, "edited": false, "score": 0, "creation_date": 1470313136, "post_id": 38766903, "comment_id": 64905372, "body": "Well this is embarrassing."}], "tags": [], "owner": {"reputation": 1417, "user_id": 2977291, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/66afbccc6043392125ac0f0de57ccfa7?s=128&d=identicon&r=PG&f=1", "display_name": "paholg", "link": "https://stackoverflow.com/users/2977291/paholg"}, "is_accepted": true, "score": 4, "last_activity_date": 1470313177, "last_edit_date": 1470313177, "creation_date": 1470312476, "answer_id": 38766903, "question_id": 38766275, "link": "https://stackoverflow.com/questions/38766275/how-can-i-avoid-stack-overflow-when-calling-this-recursive-function/38766903#38766903", "title": "How can I avoid stack overflow when calling this recursive function", "body": "<p>Look at the flow of <code>rdp</code>. It's a recursive function that recurses on the condition that <code>dmax &gt; epsilon</code>. So, let's follow those variables as we step through it:</p>\n\n<p>First, we set <code>dmax</code> to 1.0. Then, if <code>distance &gt; dmax</code>, <code>dmax</code> is set to <code>distance</code>. So, there's no way for <code>dmax</code> to ever be less than 1.0.</p>\n\n<p>Then, if <code>dmax &gt; epsilon</code>, we recurse. This will <em>always</em> happen if <code>epsilon &lt; 1.0</code>.</p>\n\n<p>If we look at the algorithm on <a href=\"https://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm\" rel=\"nofollow\">wikipedia</a>, you can see that <code>dmax</code> should start at 0.0.</p>\n\n<p>As an aside, you could make your distance functions a bit nicer with the <a href=\"https://doc.rust-lang.org/std/primitive.f64.html#method.hypot\" rel=\"nofollow\">hypot</a> function.</p>\n"}], "owner": {"reputation": 21101, "user_id": 416626, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/ad98b7aa615718b4a2446d12af86be73?s=128&d=identicon&r=PG", "display_name": "urschrei", "link": "https://stackoverflow.com/users/416626/urschrei"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 228, "favorite_count": 0, "accepted_answer_id": 38766903, "answer_count": 1, "score": 0, "last_activity_date": 1470313468, "creation_date": 1470310616, "last_edit_date": 1470313468, "question_id": 38766275, "link": "https://stackoverflow.com/questions/38766275/how-can-i-avoid-stack-overflow-when-calling-this-recursive-function", "title": "How can I avoid stack overflow when calling this recursive function", "body": "<p>I've implemented the Ramer\u2013Douglas\u2013Peucker line simplification algorithm in Rust, and it works correctly for epsilon values > 1.0. However, any value lower than that causes a stack overflow. How can I rewrite the function to avoid this?</p>\n\n<pre><code>// distance formula\npub fn distance(start: &amp;[f64; 2], end: &amp;[f64; 2]) -&gt; f64 {\n    ((start[0] - end[0]).powf(2.) + (start[1] - end[1]).powf(2.)).sqrt()\n}\n\n// perpendicular distance from a point to a line\npub fn point_line_distance(point: &amp;[f64; 2], start: &amp;[f64; 2], end: &amp;[f64; 2]) -&gt; f64 {\n    if start == end {\n        return distance(*&amp;point, *&amp;start);\n    } else {\n\n        let n = ((end[0] - start[0]) * (start[1] - point[1]) -\n                 (start[0] - point[0]) * (end[1] - start[1]))\n            .abs();\n        let d = ((end[0] - start[0]).powf(2.0) + (end[1] - start[1]).powf(2.0)).sqrt();\n        n / d\n    }\n}\n\n// Ramer\u2013Douglas-Peucker line simplification algorithm\npub fn rdp(points: &amp;[[f64; 2]], epsilon: &amp;f64) -&gt; Vec&lt;[f64; 2]&gt; {\n    let mut dmax = 1.0;\n    let mut index: usize = 0;\n    let mut distance: f64;\n    for (i, _) in points.iter().enumerate().take(points.len() - 1).skip(1) {\n        distance = point_line_distance(&amp;points[i],\n                                       &amp;*points.first().unwrap(),\n                                       &amp;*points.last().unwrap());\n        if distance &gt; dmax {\n            index = i;\n            dmax = distance;\n        }\n    }\n    if dmax &gt; *epsilon {\n        let mut intermediate = rdp(&amp;points[..index + 1], &amp;*epsilon);\n        intermediate.pop();\n        intermediate.extend_from_slice(&amp;rdp(&amp;points[index..], &amp;*epsilon));\n        intermediate\n    } else {\n        vec![*points.first().unwrap(), *points.last().unwrap()]\n    }\n}\n\nfn main() {\n    let points = vec![[0.0, 0.0], [5.0, 4.0], [11.0, 5.5], [17.3, 3.2], [27.8, 0.1]];\n    // change this to &amp;0.99 to overflow the stack\n    let foo: Vec&lt;_&gt; = rdp(&amp;points, &amp;1.0);\n    assert_eq!(foo, vec![[0.0, 0.0], [5.0, 4.0], [11.0, 5.5], [17.3, 3.2]]);\n}\n</code></pre>\n"}, {"tags": ["unit-testing", "testing", "rust"], "comments": [{"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "edited": false, "score": 1, "creation_date": 1470308261, "post_id": 38763786, "comment_id": 64902325, "body": "Please, consider changing your example so it can be compiled. I would suggest removing the unnecessary methods. For <code>term_to_binary</code> you can write <code>self.to_bert(data)</code> as a comment and call <code>unimplemented!()</code>."}], "answers": [{"comments": [{"owner": {"reputation": 710, "user_id": 2128615, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/eeg0I.gif?s=128&g=1", "display_name": "Relrin", "link": "https://stackoverflow.com/users/2128615/relrin"}, "edited": false, "score": 0, "creation_date": 1470310615, "post_id": 38765341, "comment_id": 64903739, "body": "Awesome! Thank you for this splendid tip!"}], "tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 2, "last_activity_date": 1470307951, "creation_date": 1470307951, "answer_id": 38765341, "question_id": 38763786, "link": "https://stackoverflow.com/questions/38763786/struct-function-which-can-get-any-type/38765341#38765341", "title": "Struct function which can get Any type", "body": "<p>Looking at <code>term_to_binary</code> implementation you are trying to call <code>self.to_bert(data)</code>, that is <code>Serialize::to_bert(&amp;self, data)</code>. To be able to do this call, <code>Self</code> (that is, <code>Serializer</code>) must implement <code>Serialize&lt;T&gt;</code>, so we must add this bound to <code>term_to_binary</code>:</p>\n\n<pre><code>pub fn term_to_binary&lt;T&gt;(&amp;self, data: T) -&gt; Vec&lt;u8&gt;\n    where Self: Serialize&lt;T&gt;\n{\n    self.to_bert(data)\n}\n</code></pre>\n\n<p>You can add a new serializable type <code>T</code> implementing <code>Serialize&lt;T&gt; for Serializer</code>, possibly without changing <code>Serializer</code>, which is <a href=\"https://en.wikipedia.org/wiki/Open/closed_principle\" rel=\"nofollow\">great</a>.</p>\n\n<p>Note that using <code>Any</code> would require dynamic dispatch, but for your example it is not necessary, so you don't need to pay this cost.</p>\n"}], "owner": {"reputation": 710, "user_id": 2128615, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/eeg0I.gif?s=128&g=1", "display_name": "Relrin", "link": "https://stackoverflow.com/users/2128615/relrin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 39, "favorite_count": 0, "accepted_answer_id": 38765341, "answer_count": 1, "score": 1, "last_activity_date": 1470308981, "creation_date": 1470303624, "last_edit_date": 1470308981, "question_id": 38763786, "link": "https://stackoverflow.com/questions/38763786/struct-function-which-can-get-any-type", "title": "Struct function which can get Any type", "body": "<p>I have the next code which serialize basic Rust types to BERT format:</p>\n\n<pre><code>pub struct Serializer;\n\npub trait Serialize&lt;T&gt; {\n    fn to_bert(&amp;self, data: T) -&gt; Vec&lt;u8&gt;;\n}\n\nimpl Serializer {\n\n    pub fn new() -&gt; Serializer {\n        Serializer{}\n    }\n\n    pub fn term_to_binary&lt;T: Any + Debug&gt;(&amp;self, data: T) -&gt; Vec&lt;u8&gt; {\n        self.to_bert(data)\n    }\n\n    pub fn generate_term(&amp;self, tag: BertTag, data: Vec&lt;u8&gt;) -&gt; Vec&lt;u8&gt; {\n        let mut binary = vec![tag as u8];\n        binary.extend(data.iter().clone());\n        binary\n    }\n\n    pub fn convert_string_to_binary(&amp;self, data: &amp;str) -&gt; Vec&lt;u8&gt; {\n        let binary_string = data.as_bytes();\n        let binary_length = binary_string.len() as u8;\n        let mut binary = vec![0u8, binary_length];\n        binary.extend(binary_string.iter().clone());\n        binary\n    }\n\n    pub fn merge_atoms(&amp;self, atom_1: Vec&lt;u8&gt;, atom_2: Vec&lt;u8&gt;) -&gt; Vec&lt;u8&gt; {\n        let mut binary: Vec&lt;u8&gt; = atom_1.clone();\n        binary.extend(atom_2.iter().clone());\n        binary\n    }\n\n    pub fn get_bert_atom(&amp;self) -&gt; Vec&lt;u8&gt; {\n        let binary_string = self.convert_string_to_binary(BERT_LABEL);\n        self.generate_term(BertTag::Atom, binary_string)\n    }\n}\n\nimpl Serialize&lt;u8&gt; for Serializer {\n    fn to_bert(&amp;self, data: u8) -&gt; Vec&lt;u8&gt; {\n        self.generate_term(BertTag::SmallInteger, vec![data])\n    }\n}\n\nimpl Serialize&lt;bool&gt; for Serializer {\n    fn to_bert(&amp;self, data: bool) -&gt; Vec&lt;u8&gt; {\n        let boolean_string = data.to_string();\n        let binary_boolean = self.convert_string_to_binary(&amp;boolean_string);\n\n        let bert_atom = self.get_bert_atom();\n        let boolean_atom = self.generate_term(BertTag::Atom, binary_boolean);\n\n        self.merge_atoms(bert_atom, boolean_atom)\n    }\n}\n</code></pre>\n\n<p>The main questions there is how to implement correctly in terms of Rust language <code>term_to_binary</code> function into which we can pass some basic types (like <em>integers</em>, <em>booleans</em> and so on). Can I somehow to get a type \"on the fly\" and a make a call for a specific function when <code>term_to_binary</code> have taken some data? </p>\n\n<p>After that I want to write few tests, which let me sure that all works correctly. For example it can be like that:</p>\n\n<pre><code>#[cfg(test)]\nmod test {\n    use super::{Serializer};\n\n    #[test]\n    fn test_serialize_bool() {\n        let serializer = Serializer::new();\n\n        println!(serializer.term_to_binary(true), [100, 0, 4, 116, 114, 117, 101])\n    }\n}\n</code></pre>\n\n<p>For an integer, maps, tuples test cases will be look pretty similar further. </p>\n"}, {"tags": ["hashmap", "rust"], "answers": [{"tags": [], "owner": {"reputation": 8789, "user_id": 539465, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/2acba600ecfbe1cc2e7f3c94b686ac84?s=128&d=identicon&r=PG", "display_name": "Valentin Lorentz", "link": "https://stackoverflow.com/users/539465/valentin-lorentz"}, "is_accepted": true, "score": 10, "last_activity_date": 1470383872, "last_edit_date": 1470383872, "creation_date": 1470296423, "answer_id": 38761288, "question_id": 38761048, "link": "https://stackoverflow.com/questions/38761048/how-to-pass-a-hashmap-to-a-function-in-rust/38761288#38761288", "title": "How to pass a HashMap to a function in Rust", "body": "<p>The problem is that you pass a <strong>mutable reference</strong> to a HashMap (i.e. the reference can be changed to point to another <code>HashMap</code>), and not a <strong>reference to a mutable</strong> <code>HashMap</code> (i.e. the <code>HashMap</code> can change).</p>\n\n<p>Here is a correct code:</p>\n\n<pre><code>use std::collections::HashMap;\n\nfn add(h: &amp;mut HashMap&lt;&amp;str, &amp;str&gt;) {\n    h.insert(\"foo\", \"bar\");\n}\n\nfn main() {\n    let mut h: HashMap&lt;&amp;str, &amp;str&gt; = HashMap::new();\n    add(&amp;mut h);\n    println!(\"{:?}\", h.get(\"foo\"));\n}\n</code></pre>\n"}], "owner": {"reputation": 21, "user_id": 6676749, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/775b0c08e65fd8c7aae864ed2ede467d?s=128&d=identicon&r=PG&f=1", "display_name": "christoph-k", "link": "https://stackoverflow.com/users/6676749/christoph-k"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3467, "favorite_count": 0, "closed_date": 1470343669, "accepted_answer_id": 38761288, "answer_count": 1, "score": 1, "last_activity_date": 1470383872, "creation_date": 1470295749, "question_id": 38761048, "link": "https://stackoverflow.com/questions/38761048/how-to-pass-a-hashmap-to-a-function-in-rust", "closed_reason": "Duplicate", "title": "How to pass a HashMap to a function in Rust", "body": "<p>Can anybody explain why following code does not compile?</p>\n\n<pre><code>use std::collections::HashMap;\n\nfn add(mut h: &amp;HashMap&lt;&amp;str, &amp;str&gt;) {\n    h.insert(\"foo\", \"bar\");\n}\n\nfn main() {\n    let mut h: HashMap&lt;&amp;str, &amp;str&gt; = HashMap::new();\n    add(&amp;h);\n    println!(\"{:?}\", h.get(\"foo\"));\n}\n</code></pre>\n\n<p>This is what rustc tells me</p>\n\n<pre><code>hashtest.rs:4:5: 4:6 error: cannot borrow immutable borrowed content `*h` as mutable\nhashtest.rs:4     h.insert(\"foo\", \"bar\");\n                  ^\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470343846, "post_id": 38758441, "comment_id": 64925792, "body": "And of course the function should not have a <code>return</code> at all: <code>fn test() -&gt; u64 { unsafe { num() } }</code>."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470350569, "post_id": 38758441, "comment_id": 64928340, "body": "That&#39;s a question of style, not correctness or morality."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470350756, "post_id": 38758441, "comment_id": 64928383, "body": "I&#39;m more than happy to dispense suggestions of style (and morality) as gospel. Besides, Clippy agrees with me \ud83d\ude0a."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 2, "last_activity_date": 1470284543, "last_edit_date": 1495540859, "creation_date": 1470284543, "answer_id": 38758441, "question_id": 38757868, "link": "https://stackoverflow.com/questions/38757868/unsafe-assignment-returns-empty-structure/38758441#38758441", "title": "Unsafe assignment returns empty structure", "body": "<p>Semicolons.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn num() -&gt; u64 {\n    1\n}\n\nfn test() -&gt; u64 {\n    let x = unsafe {\n        num()\n    };\n    return x;\n}\n</code></pre>\n\n<p><a href=\"https://stackoverflow.com/a/26665514/42353\">See also this answer about semicolons</a>.</p>\n"}], "owner": {"reputation": 11511, "user_id": 449132, "user_type": "registered", "accept_rate": 72, "profile_image": "https://i.stack.imgur.com/Svpgc.png?s=128&g=1", "display_name": "einstein", "link": "https://stackoverflow.com/users/449132/einstein"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 140, "favorite_count": 0, "accepted_answer_id": 38758441, "answer_count": 1, "score": 0, "last_activity_date": 1470308785, "creation_date": 1470280040, "last_edit_date": 1470308785, "question_id": 38757868, "link": "https://stackoverflow.com/questions/38757868/unsafe-assignment-returns-empty-structure", "title": "Unsafe assignment returns empty structure", "body": "<p>I haven't quite understood how unsafe assignments works. The following code gives me some error:</p>\n\n<pre><code>fn num() -&gt; u64 {\n    1;\n}\n\nfn test() -&gt; u64 {\n    let x = unsafe {\n        num();\n    };\n    return x;\n}\n</code></pre>\n\n<p>The error is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>src/main.rs:37:9: 37:10 note: expected type `u64`\nsrc/main.rs:37:9: 37:10 note:    found type `()`\n</code></pre>\n\n<p>My real <a href=\"https://github.com/ucarion/rust-lxc/blob/master/src/container.rs#L42\" rel=\"nofollow\">example</a> is similar to this one. Strange that I have the exact same code, though I cannot compile.</p>\n"}, {"tags": ["struct", "types", "rust"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 3, "last_activity_date": 1470284288, "creation_date": 1470284288, "answer_id": 38758413, "question_id": 38756951, "link": "https://stackoverflow.com/questions/38756951/how-to-add-index-support-to-a-struct-tuples-with-homogeneous-types/38758413#38758413", "title": "How to add index support to a struct/tuples with homogeneous types?", "body": "<p>The problem is <em>exactly</em> what the compiler is telling you: you're trying to change the definition of the <code>Index</code> trait.  You're not allowed to do that.  Look again at the definition:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub trait Index&lt;Idx&gt; where Idx: ?Sized {\n    type Output: ?Sized;\n    fn index(&amp;self, index: Idx) -&gt; &amp;Self::Output;\n}\n</code></pre>\n\n<p>Specifically, look at the return type of <code>index</code>: <code>&amp;Output</code>.  If <code>Output</code> is <code>f64</code>, then the result of <code>index</code> <strong>must</strong> be <code>&amp;f64</code>, no ifs, ands, or buts.  This is what the error message is telling you:</p>\n\n<pre><code>method `index` has an incompatible type for trait: expected &amp;-ptr, found f64\n</code></pre>\n\n<p>There is also the larger explanation you get if you ask the compiler to <a href=\"https://doc.rust-lang.org/error-index.html#E0053\" rel=\"nofollow\">explain that error code</a>:</p>\n\n<pre><code>&gt; rustc --explain E0053\nThe parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nHere are a couple examples of this error:\n\n```\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&amp;self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, values differ in mutability\n    fn bar(&amp;mut self) { }\n}\n```\n</code></pre>\n\n<p>The solution is to not change the trait and return a borrowed pointer as required:</p>\n\n<pre><code>impl Index&lt;usize&gt; for Vector {\n    type Output = f64;\n\n    fn index(&amp;self, index: usize) -&gt; &amp;f64 {\n        match index {\n            0 =&gt; &amp;self.0,\n            1 =&gt; &amp;self.1,\n            _ =&gt; panic!(\"invalid index: {:?}\", index)\n        }\n    }\n}\n</code></pre>\n\n<p>Also, to preempt a likely follow-up question: <em>no,</em> you <em>cannot</em> have indexing return a value.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 105, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1470343762, "creation_date": 1470272778, "last_edit_date": 1470343762, "question_id": 38756951, "link": "https://stackoverflow.com/questions/38756951/how-to-add-index-support-to-a-struct-tuples-with-homogeneous-types", "title": "How to add index support to a struct/tuples with homogeneous types?", "body": "<p>I'm interested to add support for indexing a struct or tuple, even though its possible to use dot syntax <code>mytuple.0</code> for example, I would like to be able to use a variable to access the index, eg: <code>mytuple[i]</code>,</p>\n\n<p>looking at the documentation, it seems this is supported, eg:</p>\n\n<pre><code>use std::ops::Index;\n\nstruct Vector(f64, f64);\n\nimpl Index&lt;usize&gt; for Vector {\n    type Output = f64;\n\n    fn index(&amp;self, _index: usize) -&gt; f64 {\n        match _index {\n            0 =&gt; self.0,\n            1 =&gt; self.1,\n            _ =&gt; panic!(\"invalid index: {:?}\", index)\n        }\n    }\n}\n\nfn main() {\n    let v = Vector(5.0, 5.0);\n    for i in 0..2 {\n        println!(\"value {} at index {}\\n\", v[i], i);\n    }\n}\n</code></pre>\n\n<p>However I get this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>src/main.rs:8:9: 14:10 error: method `index` has an incompatible type for trait:\n expected &amp;-ptr,\n    found f64 [E0053]\nsrc/main.rs:8         fn index(&amp;self, _index: usize) -&gt; f64 {\n</code></pre>\n\n<p>Whats the best way to make structs/tuples support indexing?</p>\n"}]