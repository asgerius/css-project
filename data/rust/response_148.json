[{"tags": ["rust"], "comments": [{"owner": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "edited": false, "score": 3, "creation_date": 1510155811, "post_id": 47182804, "comment_id": 81316758, "body": "Do you <i>need</i> to write bytewise? Under most file or network situations, that would be supremely slow? There are valid situations where you need to, however. Is this one of them?"}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 2, "creation_date": 1510156299, "post_id": 47182804, "comment_id": 81317122, "body": "<code>writer.write_all(&amp;[0])</code> doesn&#39;t look that verbose (or at all verbose) to me. If you really think it&#39;s too verbose, you can create a utility function that does it."}], "answers": [{"tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": true, "score": 6, "last_activity_date": 1510156378, "creation_date": 1510156378, "answer_id": 47184074, "question_id": 47182804, "link": "https://stackoverflow.com/questions/47182804/convenience-method-for-writing-just-one-byte/47184074#47184074", "title": "Convenience method for writing just one byte", "body": "<blockquote>\n  <p>Does Rust's stdlib have a macro or an extension trait with a convenience method that is shorter to write?</p>\n</blockquote>\n\n<p>Not that I know of. But the nearly ubiquitous <code>byteorder</code> crate provides <a href=\"https://docs.rs/byteorder/1.1.0/byteorder/trait.WriteBytesExt.html#method.write_u8\" rel=\"noreferrer\"><code>write_u8</code></a>. Although it is unaffected by the machine's byte order, it was included for completeness.</p>\n\n<pre><code>use byteorder::WriteBytesExt;\n\nwriter.write_u8(0)?;\n</code></pre>\n\n<p>If you intend to use this method often, it might be a good idea to wrap the writer around a buffered writer such as <a href=\"https://doc.rust-lang.org/std/io/struct.BufWriter.html\" rel=\"noreferrer\"><code>BufWriter</code></a>.</p>\n"}], "owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 690, "favorite_count": 0, "accepted_answer_id": 47184074, "answer_count": 1, "score": 2, "last_activity_date": 1510156378, "creation_date": 1510152931, "question_id": 47182804, "link": "https://stackoverflow.com/questions/47182804/convenience-method-for-writing-just-one-byte", "title": "Convenience method for writing just one byte", "body": "<p>I have a generic function that needs to write (non-ASCII) bytes to an <code>io::Write</code> writer.</p>\n\n<p>The shortest way to reliably write a single byte provided by the <code>io::Write</code> trait is AFAIK <code>writer.write_all(&amp;[0])?</code>. That is a bit long and syntactically noisy to write in many places. </p>\n\n<p>Does Rust's stdlib have a macro or an extension trait with a convenience method that is shorter to write?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 1, "creation_date": 1510145659, "post_id": 47179941, "comment_id": 81309338, "body": "In addition, here&#39;s a link to the <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#guarantees\" rel=\"nofollow noreferrer\">Vec type guarantees</a> that describes its allocation rules."}], "tags": [], "owner": {"reputation": 978, "user_id": 6426219, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9qNtI.jpg?s=128&g=1", "display_name": "JDemler", "link": "https://stackoverflow.com/users/6426219/jdemler"}, "is_accepted": false, "score": 3, "last_activity_date": 1510144691, "creation_date": 1510144691, "answer_id": 47179941, "question_id": 47179667, "link": "https://stackoverflow.com/questions/47179667/is-a-string-array-e-g-string-3-stored-on-the-stack-or-heap/47179941#47179941", "title": "Is a String array e.g. [String; 3] stored on the stack or heap?", "body": "<p><code>String</code> just wraps <code>Vec&lt;u8&gt;</code>. So this applies to all <code>Vecs</code>.</p>\n\n<p>A <code>Vec</code> has a fixed size on the stack: It's length, capacity and a pointer to the heap where the actual contents are stored.</p>\n\n<p>So having an array of three <code>Strings</code> on the stack means, that the \"metadata\" of these strings are on the stack (length, capacity and pointer to the data). </p>\n\n<p>The actual data of these strings though is stored on the heap, as it is variable in length as you correctly identified.</p>\n"}, {"comments": [{"owner": {"reputation": 5940, "user_id": 4605629, "user_type": "registered", "accept_rate": 98, "profile_image": "https://www.gravatar.com/avatar/741edb45b2f1d3e3c3d9555085004ad1?s=128&d=identicon&r=PG&f=1", "display_name": "Greg", "link": "https://stackoverflow.com/users/4605629/greg"}, "edited": false, "score": 0, "creation_date": 1510145985, "post_id": 47180043, "comment_id": 81309520, "body": "One followup, is the &quot;data&quot; component of the String array stored next to each other or is it in different locations in the memory? That is, is it contiguous or not?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 5940, "user_id": 4605629, "user_type": "registered", "accept_rate": 98, "profile_image": "https://www.gravatar.com/avatar/741edb45b2f1d3e3c3d9555085004ad1?s=128&d=identicon&r=PG&f=1", "display_name": "Greg", "link": "https://stackoverflow.com/users/4605629/greg"}, "edited": false, "score": 1, "creation_date": 1510146631, "post_id": 47180043, "comment_id": 81309954, "body": "@Greg: I am not clear on what you are talking about, though it seems you mean the content (pointed to by <code>data</code>) of those 3 strings. If this is the case, then they are stored on 3 separate heap allocations, and whether those end up contiguous or not depends on the allocator; there is certainly no guarantee, which I why I drew them separately."}, {"owner": {"reputation": 5940, "user_id": 4605629, "user_type": "registered", "accept_rate": 98, "profile_image": "https://www.gravatar.com/avatar/741edb45b2f1d3e3c3d9555085004ad1?s=128&d=identicon&r=PG&f=1", "display_name": "Greg", "link": "https://stackoverflow.com/users/4605629/greg"}, "edited": false, "score": 0, "creation_date": 1510146899, "post_id": 47180043, "comment_id": 81310140, "body": "Thank you, that&#39;s exactly what I was referring to"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 15, "last_activity_date": 1510148592, "last_edit_date": 1592644375, "creation_date": 1510144954, "answer_id": 47180043, "question_id": 47179667, "link": "https://stackoverflow.com/questions/47179667/is-a-string-array-e-g-string-3-stored-on-the-stack-or-heap/47180043#47180043", "title": "Is a String array e.g. [String; 3] stored on the stack or heap?", "body": "<p><strong>Both</strong>.</p>\n<hr />\n<p>A point of terminology: when discussing the memory layout of a type, one should not talk about <em>stack vs heap</em>, but about <em>inline vs offline</em><sup>1</sup>:</p>\n<ul>\n<li><em>inline</em> means that the data is right here,</li>\n<li><em>offline</em> means that the data is available behind a pointer (wherever it points).</li>\n</ul>\n<p>An easy example, integers are stored inline:</p>\n<pre class=\"lang-none prettyprint-override\"><code>//  i32\n+---+\n| 3 |\n+---+\n</code></pre>\n<p>A typical <code>struct Point { x: i32, y: i32 }</code> is also stored inline:</p>\n<pre class=\"lang-none prettyprint-override\"><code>//  Point\n+---+---+\n| x | y |\n+---+---+\n</code></pre>\n<p>A <code>String</code>, typically represented as <code>struct String { data: *mut u8, len: usize, cap: usize }</code> is stored <em>both</em> inline and offline:</p>\n<pre class=\"lang-none prettyprint-override\"><code>//   String\n+-------+-------+-------+\n| data  |  len  |  cap  |\n+-------+-------+-------+\n    |\n     \\\n      +-------------+\n      |Hello, World!|\n      +-------------+\n</code></pre>\n<p>The inline part is 3 pointers worth of storage, and the offline part, is a heap-allocated record containing the content of the string <code>&quot;Hello, World!&quot;</code> here.</p>\n<p>However, <em>inline</em> does not always mean <em>stack</em>. A <code>Box&lt;Point&gt;</code>:</p>\n<pre class=\"lang-none prettyprint-override\"><code>//  Box&lt;Point&gt;\n+-------+\n| data  |\n+-------+\n    |\n     \\\n      +---+---+\n      | x | y |\n      +---+---+\n</code></pre>\n<p>Stores its <code>Point</code> (which stores its data members inline) on the heap!</p>\n<p>And similarly, <em>offline</em> does not always mean <em>heap</em>:</p>\n<pre class=\"lang-none prettyprint-override\"><code>fn main() {\n    let i = 3;\n    let r = &amp;i;\n}\n</code></pre>\n<p>Here, <code>r</code> is a reference (pointer), which points to <code>i</code>, and <code>i</code> is on the stack!</p>\n<p><sup>1</sup> <em>Yes, I am making this up, better terms would be appreciated.</em></p>\n<hr />\n<p>So, back to the question:</p>\n<blockquote>\n<p>It also says that <code>String</code> is stored on the heap as the size is not known and can mutate.</p>\n</blockquote>\n<p>This is an approximation, as mentioned above the <code>String</code> has some of its data inline (pointer, length and capacity) and some on the heap (the string content).</p>\n<blockquote>\n<p>Where are &quot;composite&quot; data structures such as arrays containing <code>String</code> stored? The array is fixed in size however the components of the array can change in size.</p>\n<pre><code>let array: [String; 3] = [&quot;A&quot;,&quot;B&quot;,&quot;C&quot;];\n</code></pre>\n</blockquote>\n<p>It is stored both on the stack and heap:</p>\n<pre class=\"lang-none prettyprint-override\"><code>//  [String; 3]\n+-------+-------+-------+-------+-------+-------+-------+-------+-------+\n| data  |  len  |  cap  | data  |  len  |  cap  | data  |  len  |  cap  |\n+-------+-------+-------+-------+-------+-------+-------+-------+-------+\n    |                       |                       |    \n     \\                       \\                       \\\n      +-+                     +-+                     +-+\n      |A|                     |B|                     |C|\n      +-+                     +-+                     +-+\n</code></pre>\n<p>That's 9 pointers' worth of data inline (here on the stack), and 3 separate allocations on the heap.</p>\n<blockquote>\n<p>What is the rule for where such &quot;composite&quot; data types are stored?</p>\n</blockquote>\n<p>Data-members are always <em>inline</em>, pointers and references may point to <em>offline</em> data, which may be on the heap, on the stack, etc...</p>\n"}], "owner": {"reputation": 5940, "user_id": 4605629, "user_type": "registered", "accept_rate": 98, "profile_image": "https://www.gravatar.com/avatar/741edb45b2f1d3e3c3d9555085004ad1?s=128&d=identicon&r=PG&f=1", "display_name": "Greg", "link": "https://stackoverflow.com/users/4605629/greg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 613, "favorite_count": 0, "accepted_answer_id": 47180043, "answer_count": 2, "score": 3, "last_activity_date": 1510148592, "creation_date": 1510143770, "question_id": 47179667, "link": "https://stackoverflow.com/questions/47179667/is-a-string-array-e-g-string-3-stored-on-the-stack-or-heap", "title": "Is a String array e.g. [String; 3] stored on the stack or heap?", "body": "<p>The Rust book specifies that:</p>\n\n<blockquote>\n  <p>Another property that makes the stack fast is that all data on the stack must take up a known, fixed size.</p>\n</blockquote>\n\n<p>It also says that <code>String</code> is stored on the heap as the size is not known and can mutate.</p>\n\n<p>Where are \"composite\" data structures such as arrays containing <code>String</code> stored? The array is fixed in size however the components of the array can change in size. </p>\n\n<pre><code>let array: [String; 3] = [\"A\",\"B\",\"C\"];\n</code></pre>\n\n<p>What is the rule for where such \"composite\" data types are stored?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1510141168, "post_id": 47178197, "comment_id": 81306422, "body": "I would note that annotating the type of the left hand side is generally sufficient to avoid using the turbofish operator (and more concise). Here it&#39;s really an edge case, wanting to parse as a float and truncate the data."}, {"owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "edited": false, "score": 1, "creation_date": 1510147837, "post_id": 47178197, "comment_id": 81310834, "body": "Note that given the string <code>&quot;42.1&quot;</code>, the proposed solution will silently truncate it to <code>42</code>, which may or may not be desirable depending on your application. In some cases, you may want to check that the parsed float really represents an integer before converting."}, {"owner": {"reputation": 36166, "user_id": 393701, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/250889c646cd2a916920d9252f7c6f42?s=128&d=identicon&r=PG", "display_name": "SirDarius", "link": "https://stackoverflow.com/users/393701/sirdarius"}, "reply_to_user": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "edited": false, "score": 1, "creation_date": 1510152591, "post_id": 47178197, "comment_id": 81314211, "body": "@Jmb Which is why OP should use  <code>trunc</code>, <code>ceil</code> or <code>floor</code> to express their intent explicitely, instead on relying on the default behaviour (which is currently equivalent to trunc, see <a href=\"https://stackoverflow.com/a/37508518/393701\">stackoverflow.com/a/37508518/393701</a>)."}], "tags": [], "owner": {"reputation": 36166, "user_id": 393701, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/250889c646cd2a916920d9252f7c6f42?s=128&d=identicon&r=PG", "display_name": "SirDarius", "link": "https://stackoverflow.com/users/393701/sirdarius"}, "is_accepted": true, "score": 6, "last_activity_date": 1510148498, "last_edit_date": 1510148498, "creation_date": 1510139432, "answer_id": 47178197, "question_id": 47178016, "link": "https://stackoverflow.com/questions/47178016/why-does-parse-convert-42-to-f64-but-fails-convert-42-0-to-i32/47178197#47178197", "title": "Why does .parse() convert &quot;42&quot; to f64 but fails convert &quot;42.0&quot; to i32?", "body": "<p>What you're calling is actually <code>let guess: i32 = \"42.0\".parse::&lt;i32&gt;();</code>.</p>\n\n<p>However, <code>\"42.0\"</code> is not a correct representation of an <code>i32</code>.</p>\n\n<p>According to the <a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.parse\" rel=\"nofollow noreferrer\">documentation</a>:</p>\n\n<blockquote>\n  <p>Because <code>parse</code> is so general, it can cause problems with type\n  inference. As such, <code>parse</code> is one of the few times you'll see the\n  syntax affectionately known as the 'turbofish': <code>::&lt;&gt;</code>. This helps the\n  inference algorithm understand specifically which type you're trying\n  to parse into.</p>\n</blockquote>\n\n<p>The correct solution which you've already found is indeed to hint at the parser that the string is the representation of a float:</p>\n\n<pre><code>\"42.0\".parse::&lt;f64&gt;()\n</code></pre>\n"}], "owner": {"reputation": 5940, "user_id": 4605629, "user_type": "registered", "accept_rate": 98, "profile_image": "https://www.gravatar.com/avatar/741edb45b2f1d3e3c3d9555085004ad1?s=128&d=identicon&r=PG&f=1", "display_name": "Greg", "link": "https://stackoverflow.com/users/4605629/greg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 451, "favorite_count": 2, "accepted_answer_id": 47178197, "answer_count": 1, "score": 4, "last_activity_date": 1510148498, "creation_date": 1510138942, "last_edit_date": 1510141902, "question_id": 47178016, "link": "https://stackoverflow.com/questions/47178016/why-does-parse-convert-42-to-f64-but-fails-convert-42-0-to-i32", "title": "Why does .parse() convert &quot;42&quot; to f64 but fails convert &quot;42.0&quot; to i32?", "body": "<p>Why and how does this line work:</p>\n\n<pre><code>let guess: f64 = \"42\".parse().expect(\"Not a number!\");\n</code></pre>\n\n<p>But this does not?</p>\n\n<pre><code>let guess: i32 = \"42.0\".parse().expect(\"Not a number!\");\n</code></pre>\n\n<p>Resulting in:</p>\n\n<pre><code>thread 'main' panicked at 'Not a number!: ParseIntError { kind: InvalidDigit }'\n</code></pre>\n\n<p>What is the correct way to parse \"float\" &amp;str to integer?</p>\n\n<p><strong>Update:</strong></p>\n\n<p>I found this to work:</p>\n\n<pre><code>let guess: i32 = \"42.0\".parse::&lt;f64&gt;().expect(\"Not a number!\") as i32;\n</code></pre>\n\n<p>However I don't understand the mechanics of how it works and if it is the correct way to do it?</p>\n"}, {"tags": ["rust", "iron"], "comments": [{"owner": {"reputation": 83, "user_id": 3223171, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/69d75a797baf9fe9831ae1e1cb851d60?s=128&d=identicon&r=PG&f=1", "display_name": "Danilo", "link": "https://stackoverflow.com/users/3223171/danilo"}, "edited": false, "score": 0, "creation_date": 1510114861, "post_id": 47170936, "comment_id": 81292626, "body": "Currently I&#39;m soling like this: <a href=\"https://github.com/dnp1/api/blob/master/src/file.rs\" rel=\"nofollow noreferrer\">github.com/dnp1/api/blob/master/src/file.rs</a> (method FileDelete::handler) <a href=\"https://github.com/dnp1/api/blob/master/src/util.rs\" rel=\"nofollow noreferrer\">github.com/dnp1/api/blob/master/src/util.rs</a> (useful code)  But it looks too boilerplate, I don&#39;t believe this is idiomatic"}, {"owner": {"reputation": 83, "user_id": 3223171, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/69d75a797baf9fe9831ae1e1cb851d60?s=128&d=identicon&r=PG&f=1", "display_name": "Danilo", "link": "https://stackoverflow.com/users/3223171/danilo"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1510149706, "post_id": 47170936, "comment_id": 81312152, "body": "I&#39;ve created an issue in my repo. So I&#39;ll remember this.  <a href=\"https://github.com/dnp1/api/issues/1\" rel=\"nofollow noreferrer\">github.com/dnp1/api/issues/1</a>  I currently found a verbose solution.  Thanks to @Shepmaster for grammar corrections, I&#39;m not fluent in english"}, {"owner": {"reputation": 83, "user_id": 3223171, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/69d75a797baf9fe9831ae1e1cb851d60?s=128&d=identicon&r=PG&f=1", "display_name": "Danilo", "link": "https://stackoverflow.com/users/3223171/danilo"}, "edited": false, "score": 0, "creation_date": 1510175285, "post_id": 47170936, "comment_id": 81328761, "body": "I&#39;ve tried this <a href=\"https://gist.github.com/dnp1/ffcb6a93e05dca76b87ac5b7e9dd994e\" rel=\"nofollow noreferrer\">gist.github.com/dnp1/ffcb6a93e05dca76b87ac5b7e9dd994e</a>  But the compiler report : the trait <code>for&lt;&#39;r, &#39;r, &#39;r&gt; std::ops::Fn&lt;(&amp;&#39;r mut iron::Request&lt;&#39;r, &#39;r&gt;,)&gt;</code> is not implemented for <code>file::FileDelete</code>"}], "answers": [{"comments": [{"owner": {"reputation": 83, "user_id": 3223171, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/69d75a797baf9fe9831ae1e1cb851d60?s=128&d=identicon&r=PG&f=1", "display_name": "Danilo", "link": "https://stackoverflow.com/users/3223171/danilo"}, "edited": false, "score": 0, "creation_date": 1510271370, "post_id": 47189861, "comment_id": 81376579, "body": "Current version can be found in repository <a href=\"https://github.com/dnp1/api/blob/master/src/util.rs\" rel=\"nofollow noreferrer\">github.com/dnp1/api/blob/master/src/util.rs</a>"}], "tags": [], "owner": {"reputation": 83, "user_id": 3223171, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/69d75a797baf9fe9831ae1e1cb851d60?s=128&d=identicon&r=PG&f=1", "display_name": "Danilo", "link": "https://stackoverflow.com/users/3223171/danilo"}, "is_accepted": true, "score": 0, "last_activity_date": 1510197758, "last_edit_date": 1510197758, "creation_date": 1510175915, "answer_id": 47189861, "question_id": 47170936, "link": "https://stackoverflow.com/questions/47170936/share-session-information-to-iron-handler/47189861#47189861", "title": "Share session information to iron handler", "body": "<p>I ended up using a wrapper:</p>\n\n<pre><code>pub trait SessionHandler {\n    fn session_manager(&amp;self) -&gt; &amp;SessionManager;\n    fn authenticated(&amp;self) -&gt; bool {\n        false\n    }\n    fn handle_session(&amp;self, session: &amp;mut Session, req: &amp;mut Request) -&gt; IronResult&lt;Response&gt;;\n\n    fn handle(&amp;self, req: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\n        let mut session = match self.session_manager().get_request_session(req) {\n            None =&gt; return Ok(Response::with((status::Unauthorized, \"\"))),\n            Some(session) =&gt; {\n                if self.authenticated() {\n                    if let None = session.user_id {\n                        return Ok(Response::with((status::Forbidden, \"\")));\n                    }\n                }\n                session\n            }\n        };\n        self.handle_session(&amp;mut session, req)\n    }\n}\n\npub struct SessionHandlerBox&lt;T&gt; {\n    pub s: T\n}\n\nimpl &lt;T&gt; Handler for SessionHandlerBox&lt;T&gt; where T: SessionHandler +  Send + Sync + 'static {\n    fn handle(&amp;self, r: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\n        self.s.handle(r)\n    }\n}\n</code></pre>\n\n<p>So I use:</p>\n\n<pre><code>struct FileDelete {\n    db: Arc&lt;Pool&lt;PostgresConnectionManager&gt;&gt;,\n    sm: Arc&lt;SessionManager&gt;,\n}\n\nimpl SessionHandler for FileDelete {\n    fn session_manager(&amp;self) -&gt; &amp;SessionManager {\n        self.sm.as_ref()\n    }\n    fn handle_session(&amp;self, session: &amp;mut Session, req: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\n        Ok(Response::with((status::Ok, \"\")))\n    }\n}\n</code></pre>\n\n<p>There's still boilerplate, but there's less \"business logic\". Any better  solutions are welcome.</p>\n\n<p>usage example:</p>\n\n<pre><code> pub fn register_handlers&lt;'s&gt;(db: Pool&lt;PostgresConnectionManager&gt;, r: &amp;'s mut Router, sm : Arc&lt;SessionManager&gt;) {\n    let file_delete = FileDelete { db: Arc::new(db), sm: sm.clone() };\n    r.delete(\"/file\", SessionHandlerBox {s: file_delete}, \"file_delete\");\n}\n</code></pre>\n"}], "owner": {"reputation": 83, "user_id": 3223171, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/69d75a797baf9fe9831ae1e1cb851d60?s=128&d=identicon&r=PG&f=1", "display_name": "Danilo", "link": "https://stackoverflow.com/users/3223171/danilo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 127, "favorite_count": 0, "accepted_answer_id": 47189861, "answer_count": 1, "score": 1, "last_activity_date": 1510197758, "creation_date": 1510110421, "last_edit_date": 1510148415, "question_id": 47170936, "link": "https://stackoverflow.com/questions/47170936/share-session-information-to-iron-handler", "title": "Share session information to iron handler", "body": "<p>I'm trying to implement a web API using Iron as a practical exercise.\nMy session is the following struct, which will be encoded as a JWT. Every time I receive requests from clients, some handlers will need to access <code>user_id</code>;</p>\n\n<pre><code>#[derive(Serialize, Deserialize)]\nstruct Session {\n    session_id: i32,\n    user_id: Option&lt;i32&gt;,\n    expiration: u64,\n}\n</code></pre>\n\n<p>There are several ways to do this, but I don't know the most idiomatic and least verbose. I was thinking something like:</p>\n\n<pre><code>fn handle(&amp;self, req: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\n    let session = match get_session(req) {\n        Err(err) =&gt; return Ok(Response::with((status::BadRequest, err.description()))),\n        Ok(session) =&gt; session,\n    };\n    Ok(Response::with((status::Ok, err.description())))\n}\n</code></pre>\n\n<p>But this way I'll need this snippet on several endpoints.</p>\n\n<p>I could use a middleware, but I don't know how to catch the struct value between middlewares.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 4068, "user_id": 862193, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/60a062a625895665d619c40b96f82d6a?s=128&d=identicon&r=PG", "display_name": "Tim", "link": "https://stackoverflow.com/users/862193/tim"}, "edited": false, "score": 0, "creation_date": 1510108364, "post_id": 47170566, "comment_id": 81290849, "body": "Grr, I can&#39;t believe I missed that. Why is it that the second form with the 2 if statements doesn&#39;t work?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 4068, "user_id": 862193, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/60a062a625895665d619c40b96f82d6a?s=128&d=identicon&r=PG", "display_name": "Tim", "link": "https://stackoverflow.com/users/862193/tim"}, "edited": false, "score": 2, "creation_date": 1510112359, "post_id": 47170566, "comment_id": 81291951, "body": "@Tim: Because it has the same problem.  In the second example, <code>e</code> is of type <code>&amp;mut &amp;mut Test</code>.  The issue is that you&#39;re ignoring the borrows when writing the patterns; you can&#39;t do that."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1510148816, "post_id": 47170566, "comment_id": 81311523, "body": "Normally, you&#39;d write <code>if let Some(Test::C(ref mut c)) = *v.last_mut() {</code>. I think this is also covered by <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2005-match-ergonomics.md\" rel=\"nofollow noreferrer\">RFC 2005</a>, which will allow <code>if let Some(Test::C(ref mut c)) = v.last_mut() {</code> to work."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1510181486, "post_id": 47170566, "comment_id": 81331554, "body": "Errr. disregard my point about the version with <code>*v.last_mut()</code>, not sure what I was thinking ^_^. The point about RFC 2005 stands (I hope)."}], "tags": [], "owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "is_accepted": true, "score": 3, "last_activity_date": 1582558162, "last_edit_date": 1582558162, "creation_date": 1510107842, "answer_id": 47170566, "question_id": 47170186, "link": "https://stackoverflow.com/questions/47170186/mutate-a-value-stored-in-an-enum-in-a-vec/47170566#47170566", "title": "Mutate a value stored in an enum in a Vec", "body": "<p>You just need to match exactly what the error message says. It expects a <code>&amp;mut Test</code>, so you should match on that:</p>\n\n<pre><code>if let Some(&amp;mut Test::C(ref mut c)) = v.last_mut() {\n    //     ^^^^^^\n    *c = *c + 1;\n}\n</code></pre>\n\n<p>Here <a href=\"http://play.integer32.com/?gist=b7a5250b40e1a70c071f485ebb63c3ef&amp;version=stable\" rel=\"nofollow noreferrer\">it is running in the playground</a>.</p>\n\n<p>As of <a href=\"https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1260-2018-05-10\" rel=\"nofollow noreferrer\">Rust 1.26</a>, your original code works as-is and the explicit <code>ref</code> and <code>ref mut</code> keywords are no longer required:</p>\n\n<pre><code>if let Some(Test::C(c)) = v.last_mut() {\n    *c = *c + 1;\n}\n</code></pre>\n"}], "owner": {"reputation": 4068, "user_id": 862193, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/60a062a625895665d619c40b96f82d6a?s=128&d=identicon&r=PG", "display_name": "Tim", "link": "https://stackoverflow.com/users/862193/tim"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 384, "favorite_count": 0, "accepted_answer_id": 47170566, "answer_count": 1, "score": 0, "last_activity_date": 1582558162, "creation_date": 1510105034, "last_edit_date": 1510148252, "question_id": 47170186, "link": "https://stackoverflow.com/questions/47170186/mutate-a-value-stored-in-an-enum-in-a-vec", "title": "Mutate a value stored in an enum in a Vec", "body": "<p>The following code fails to compile with the error below:</p>\n\n<pre><code>enum Test {\n    C(i32),\n}\n\nfn main() {\n    let mut v = Vec::new();\n\n    v.push(Test::C(0));\n\n    if let Some(Test::C(ref mut c)) = v.last_mut() {\n        *c = *c + 1;\n    }\n}\n</code></pre>\n\n<blockquote>\n  <pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:10:17\n   |\n10 |     if let Some(Test::C(ref mut c)) = v.last_mut() {\n   |                 ^^^^^^^^^^^^^^^^^^ expected &amp;mut Test, found enum `Test`\n   |\n   = note: expected type `&amp;mut Test`\n              found type `Test`\n</code></pre>\n</blockquote>\n\n<p><code>last_mut()</code> returns a mutable reference, and I'm taking the <code>i32</code> as a mutable reference. I've tried making the mutability even more clear as follows, but I get the same compiler error.</p>\n\n<pre><code>if let Some(ref mut e) = v.last_mut() {\n    if let Test::C(ref mut c) = e {\n        *c = *c + 1;\n    }\n}\n</code></pre>\n\n<p>Why doesn't this work?</p>\n"}, {"tags": ["rust", "rust-tokio"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1510069527, "post_id": 47161109, "comment_id": 81273497, "body": "The <a href=\"https://play.integer32.com/?gist=cffe9a314021611d91bf34ea502cc086&amp;version=stable\" rel=\"nofollow noreferrer\">code you have provided generates different errors than you have reported</a>. Specifically, it has 4 or so errors about unknown types. Please review how to create a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1510069529, "post_id": 47161109, "comment_id": 81273498, "body": "Even if you fixed the type errors you are getting, you&#39;d just end with borrow errors, because you are returning a reference to <code>obj_id</code>."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1510086201, "post_id": 47164468, "comment_id": 81283431, "body": "<i>apart from the fact there&#39;s no main function</i> \u2014 if you add a main function (literally just typing <code>fn main() {}</code>) you will see that the code continues to produce errors."}, {"owner": {"reputation": 132, "user_id": 7398919, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3d48a53a64a55fe5ec1765e95f45aea3?s=128&d=identicon&r=PG", "display_name": "Matt Williams", "link": "https://stackoverflow.com/users/7398919/matt-williams"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1510147089, "post_id": 47164468, "comment_id": 81310288, "body": "Fair point, although those errors are not the problem he was asking about.  I&#39;ve fixed them in <a href=\"https://play.rust-lang.org/?gist=122c84e9ba634e9cdc9a437b7f6efd2a&amp;version=stable\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a> if you&#39;re interested.  (I thought the idea was to answer his question, not fix his code!)"}], "tags": [], "owner": {"reputation": 132, "user_id": 7398919, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3d48a53a64a55fe5ec1765e95f45aea3?s=128&d=identicon&r=PG", "display_name": "Matt Williams", "link": "https://stackoverflow.com/users/7398919/matt-williams"}, "is_accepted": true, "score": 2, "last_activity_date": 1510078975, "last_edit_date": 1510078975, "creation_date": 1510077304, "answer_id": 47164468, "question_id": 47161109, "link": "https://stackoverflow.com/questions/47161109/the-trait-bound-futuresfutureitem-arct-error-boxerror-send-send-is/47164468#47164468", "title": "The trait bound `futures::Future&lt;Item=Arc&lt;T&gt;, Error=Box&lt;Error + Send&gt;&gt;: Send` is not satisfied", "body": "<p>I <em>think</em> the problem here is that the <code>Future</code> trait is not <code>Send</code> just because its <code>Item</code> and <code>Error</code> are both <code>Send</code> - you have to specify it explicitly.</p>\n\n<p>If <code>Future</code> was a struct, I think the compiler could automatically derive <code>Send</code>, but it's not, so it can't.</p>\n\n<p>I fixed up the compilation errors and added <code>+ Send</code> to the the <code>Future</code> types you've defined, and it now compiles (apart from the fact there's no <code>main</code> function):</p>\n\n<pre><code>extern crate futures;\nextern crate futures_cpupool;\n\nuse futures::Future;\nuse std::error;\nuse std::sync::Arc;\nuse futures_cpupool::CpuPool;\n\npub struct Store {\n    inner: Arc&lt;StoreInner&gt;,\n}\n\nstruct StoreInner {\n    read_thread_pool: CpuPool,\n}\n\nimpl Store {\n    pub fn get&lt;T: 'static + Send + Sync&gt;(\n        self,\n        obj_id: String,\n    ) -&gt; Box&lt;Future&lt;Item = Arc&lt;T&gt;, Error = Box&lt;error::Error + Send&gt;&gt; + Send&gt; {\n        let latest_version_id =\n            futures::future::ok(()).and_then(move |_| self.get_latest_version_id(&amp;obj_id));\n        let latest_version =\n            latest_version_id\n                .and_then(\n                    move |version_id| -&gt; Box&lt;\n                        Future&lt;Item = Arc&lt;T&gt;, Error = Box&lt;error::Error + Send&gt;&gt; + Send,\n                    &gt; { self.get_version(&amp;obj_id, version_id) },\n                );\n        Box::new(self.inner.read_thread_pool.spawn(latest_version))\n    }\n\n    pub fn get_latest_version_id(\n        &amp;self,\n        obj_id: &amp;String,\n    ) -&gt; Box&lt;Future&lt;Item = String, Error = Box&lt;error::Error + Send&gt;&gt; + Send&gt; {\n        unimplemented!();\n    }\n\n    pub fn get_version&lt;T: 'static + Send + Sync&gt;(\n        &amp;self,\n        obj_id: &amp;String,\n        version_id: String,\n    ) -&gt; Box&lt;Future&lt;Item = Arc&lt;T&gt;, Error = Box&lt;error::Error + Send&gt;&gt; + Send&gt; {\n        unimplemented!();\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=84c053ccf3b7227e0695d66684fa8127&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a></p>\n"}], "owner": {"reputation": 695, "user_id": 467323, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/0933d7513d039b0fb5ab64db436501ab?s=128&d=identicon&r=PG", "display_name": "Mohammad Dashti", "link": "https://stackoverflow.com/users/467323/mohammad-dashti"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 791, "favorite_count": 0, "accepted_answer_id": 47164468, "answer_count": 1, "score": 0, "last_activity_date": 1510078975, "creation_date": 1510067134, "last_edit_date": 1510069420, "question_id": 47161109, "link": "https://stackoverflow.com/questions/47161109/the-trait-bound-futuresfutureitem-arct-error-boxerror-send-send-is", "title": "The trait bound `futures::Future&lt;Item=Arc&lt;T&gt;, Error=Box&lt;Error + Send&gt;&gt;: Send` is not satisfied", "body": "<p>I have the following (simplified) code snippet and I'm trying to run a future on a CpuPool:</p>\n\n<pre><code>use futures::{self, Future, IntoFuture};\nuse std::error;\nuse futures_cpupool::CpuPool;\n\npub struct Store&lt;T: 'static + Send + Sync&gt; {\n    inner: Arc&lt;StoreInner&lt;T, C, SerDe, P&gt;&gt;,\n}\n\nstruct StoreInner&lt;T: 'static + Send + Sync&gt; {\n    read_thread_pool: CpuPool,\n}\n\nimpl&lt;T: 'static + Send + Sync&gt; Store&lt;T&gt; {\n    pub fn get(self, obj_id: String) -&gt; Box&lt;Future&lt;Item = Arc&lt;T&gt;, Error = Box&lt;error::Error + Send&gt;&gt;&gt;\n    where\n        T: for&lt;'de&gt; BinaryDeserialize&lt;'de&gt;,\n    {\n        let latest_version_id =\n            futures::future::ok(()).and_then(move |_| self.get_latest_version_id(&amp;obj_id));\n        let latest_version = latest_version_id.and_then(\n            move |version_id| -&gt; Box&lt;Future&lt;Item = Arc&lt;T&gt;, Error = Box&lt;error::Error + Send&gt;&gt;&gt; {\n                self.get_version(&amp;obj_id, version_id)\n            },\n        );\n        Box::new(self.inner.read_thread_pool.spawn(latest_version))\n    }\n}\n</code></pre>\n\n<p>However, I get the following error when I try to compile.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `futures::Future&lt;Item=std::sync::Arc&lt;T&gt;, Error=std::boxed::Box&lt;std::error::Error + std::marker::Send&gt;&gt;: std::marker::Send` is not satisfied\n   --&gt; src/store/mod.rs:181:46\n    |\n181 |         Box::new(self.inner.read_thread_pool.spawn(Box::new(latest_version)))\n    |                                              ^^^^^ `futures::Future&lt;Item=std::sync::Arc&lt;T&gt;, Error=std::boxed::Box&lt;std::error::Error + std::marker::Send&gt;&gt;` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `futures::Future&lt;Item=std::sync::Arc&lt;T&gt;, Error=std::boxed::Box&lt;std::error::Error + std::marker::Send&gt;&gt;`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::ptr::Unique&lt;futures::Future&lt;Item=std::sync::Arc&lt;T&gt;, Error=std::boxed::Box&lt;std::error::Error + std::marker::Send&gt;&gt;&gt;`\n    = note: required because it appears within the type `std::boxed::Box&lt;futures::Future&lt;Item=std::sync::Arc&lt;T&gt;, Error=std::boxed::Box&lt;std::error::Error + std::marker::Send&gt;&gt;&gt;`\n    = note: required because it appears within the type `futures::future::chain::Chain&lt;futures::AndThen&lt;futures::FutureResult&lt;(), std::boxed::Box&lt;std::error::Error + std::marker::Send&gt;&gt;, std::boxed::Box&lt;futures::Future&lt;Item=serde::export::Option&lt;std::string::String&gt;, Error=std::boxed::Box&lt;std::error::Error + std::marker::Send&gt;&gt;&gt;, [closure@src/store/mod.rs:177:67: 177:115 self:_, obj_id:_]&gt;, std::boxed::Box&lt;futures::Future&lt;Item=std::sync::Arc&lt;T&gt;, Error=std::boxed::Box&lt;std::error::Error + std::marker::Send&gt;&gt;&gt;, [closure@src/store/mod.rs:178:56: 180:10 self:_, obj_id:_]&gt;`\n    = note: required because it appears within the type `futures::AndThen&lt;futures::AndThen&lt;futures::FutureResult&lt;(), std::boxed::Box&lt;std::error::Error + std::marker::Send&gt;&gt;, std::boxed::Box&lt;futures::Future&lt;Item=serde::export::Option&lt;std::string::String&gt;, Error=std::boxed::Box&lt;std::error::Error + std::marker::Send&gt;&gt;&gt;, [closure@src/store/mod.rs:177:67: 177:115 self:_, obj_id:_]&gt;, std::boxed::Box&lt;futures::Future&lt;Item=std::sync::Arc&lt;T&gt;, Error=std::boxed::Box&lt;std::error::Error + std::marker::Send&gt;&gt;&gt;, [closure@src/store/mod.rs:178:56: 180:10 self:_, obj_id:_]&gt;`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::ptr::Unique&lt;futures::AndThen&lt;futures::AndThen&lt;futures::FutureResult&lt;(), std::boxed::Box&lt;std::error::Error + std::marker::Send&gt;&gt;, std::boxed::Box&lt;futures::Future&lt;Item=serde::export::Option&lt;std::string::String&gt;, Error=std::boxed::Box&lt;std::error::Error + std::marker::Send&gt;&gt;&gt;, [closure@src/store/mod.rs:177:67: 177:115 self:_, obj_id:_]&gt;, std::boxed::Box&lt;futures::Future&lt;Item=std::sync::Arc&lt;T&gt;, Error=std::boxed::Box&lt;std::error::Error + std::marker::Send&gt;&gt;&gt;, [closure@src/store/mod.rs:178:56: 180:10 self:_, obj_id:_]&gt;&gt;`\n    = note: required because it appears within the type `std::boxed::Box&lt;futures::AndThen&lt;futures::AndThen&lt;futures::FutureResult&lt;(), std::boxed::Box&lt;std::error::Error + std::marker::Send&gt;&gt;, std::boxed::Box&lt;futures::Future&lt;Item=serde::export::Option&lt;std::string::String&gt;, Error=std::boxed::Box&lt;std::error::Error + std::marker::Send&gt;&gt;&gt;, [closure@src/store/mod.rs:177:67: 177:115 self:_, obj_id:_]&gt;, std::boxed::Box&lt;futures::Future&lt;Item=std::sync::Arc&lt;T&gt;, Error=std::boxed::Box&lt;std::error::Error + std::marker::Send&gt;&gt;&gt;, [closure@src/store/mod.rs:178:56: 180:10 self:_, obj_id:_]&gt;&gt;`\n</code></pre>\n\n<p>The code looks innocent and both <code>Item</code> and <code>Error</code> in the future are <code>Send</code>. I have no idea why I get this error.</p>\n"}, {"tags": ["struct", "rust", "runtime"], "comments": [{"owner": {"reputation": 838, "user_id": 3613212, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/NfaGR.png?s=128&g=1", "display_name": "Gr&#233;gory OBANOS", "link": "https://stackoverflow.com/users/3613212/gr%c3%a9gory-obanos"}, "edited": false, "score": 3, "creation_date": 1510062262, "post_id": 47159418, "comment_id": 81268416, "body": "You want a HashMap : <a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/collections/struct.HashMap.html</a>"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 4, "creation_date": 1510062689, "post_id": 47159418, "comment_id": 81268716, "body": "I could have sworn someone asked this question before, but I couldn&#39;t find it. You may find <a href=\"https://stackoverflow.com/q/36416773/3650362\">How does Rust implement reflection</a> and <a href=\"https://stackoverflow.com/q/30407009/3650362\">Using reflection to enumerate through the fields of a struct at runtime</a> interesting, though."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1510064962, "post_id": 47159418, "comment_id": 81270215, "body": "I also found <a href=\"https://stackoverflow.com/q/14459647/155423\">Is it possible to generate and execute Rust code at runtime?</a>, which isn&#39;t quite the same question either."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 10, "last_activity_date": 1510064719, "creation_date": 1510064719, "answer_id": 47160301, "question_id": 47159418, "link": "https://stackoverflow.com/questions/47159418/is-it-possible-to-define-structs-at-runtime-or-otherwise-achieve-a-similar-effec/47160301#47160301", "title": "Is it possible to define structs at runtime or otherwise achieve a similar effect?", "body": "<p>No, it is not possible.</p>\n\n<p>Simplified, at <em>compile time</em>, the layout (ordering, offset, padding, etc.) of every struct is computed, allowing the size of the struct to be known. When the code is generated, all of this high-level information is thrown away and the machine code knows to jump X bytes in to access field <code>foo</code>.</p>\n\n<p>None of this machinery to convert source code to machine code is present in a Rust executable. If it was, every Rust executable would probably gain several hundred megabytes (the current Rust toolchain weighs in at 300+MB).</p>\n\n<p>Other languages work around this by having a runtime or interpreter that is shared. You cannot take a Python source file and run it without first installing a shared Python interpreter, for example.</p>\n\n<p>Additionally, Rust is a <em>statically typed</em> language. When you have a value, you know exactly what fields and methods are available. There is no way to do this with dynamically-generated structs \u2014 there's no way to tell if a field/method actually exists when you write the code that attempts to use it.</p>\n\n<hr>\n\n<p>As pointed out in the comments, dynamic data needs a dynamic data structure, such as a <a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html\" rel=\"noreferrer\"><code>HashMap</code></a>.</p>\n"}], "owner": {"reputation": 5940, "user_id": 4605629, "user_type": "registered", "accept_rate": 98, "profile_image": "https://www.gravatar.com/avatar/741edb45b2f1d3e3c3d9555085004ad1?s=128&d=identicon&r=PG&f=1", "display_name": "Greg", "link": "https://stackoverflow.com/users/4605629/greg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1252, "favorite_count": 0, "accepted_answer_id": 47160301, "answer_count": 1, "score": 8, "last_activity_date": 1510064719, "creation_date": 1510062017, "last_edit_date": 1510064138, "question_id": 47159418, "link": "https://stackoverflow.com/questions/47159418/is-it-possible-to-define-structs-at-runtime-or-otherwise-achieve-a-similar-effec", "title": "Is it possible to define structs at runtime or otherwise achieve a similar effect?", "body": "<p>I want to create a function (for a library) which will output a struct for any CSV which contains all the columns and their data. This means that the column names (unless explicitly provided by the user) will not be known until runtime.</p>\n\n<p>Is it possible to create a struct definition at runtime or mutate an existing struct? If so, how?</p>\n\n<p>For example, how can I mutate the following struct structure:</p>\n\n<pre><code>struct Point {\n    x: String,\n    y: String,\n}\n</code></pre>\n\n<p>To the following (in memory only):</p>\n\n<pre><code>struct Point {\n    x: String,\n    y: String,\n    z: String,\n}\n</code></pre>\n\n<p>This behaviour is possible in languages such as Python, but I am not sure if it is possible in compiled languages such as Rust.</p>\n"}, {"tags": ["iterator", "rust", "polymorphism"], "comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1510060584, "post_id": 47156009, "comment_id": 81267199, "body": "I wasn&#39;t sure, but I tried it, and Rust sees no difference between <code>&amp;(MyTrait + &#39;a)</code> and <code>&amp;&#39;a MyTrait</code>, so you should probably use the second one since that is the more usual syntax."}], "answers": [{"comments": [{"owner": {"reputation": 2030, "user_id": 1069278, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0507d3e2796540aab634041439f84be7?s=128&d=identicon&r=PG", "display_name": "Z&#243;lyomi Istv&#225;n", "link": "https://stackoverflow.com/users/1069278/z%c3%b3lyomi-istv%c3%a1n"}, "edited": false, "score": 1, "creation_date": 1510052764, "post_id": 47156134, "comment_id": 81261953, "body": "Thanks, nice answer! Does it have any runtime (cpu,mem) costs or is just an &quot;unconventional cast&quot; as it seems?"}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "reply_to_user": {"reputation": 2030, "user_id": 1069278, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0507d3e2796540aab634041439f84be7?s=128&d=identicon&r=PG", "display_name": "Z&#243;lyomi Istv&#225;n", "link": "https://stackoverflow.com/users/1069278/z%c3%b3lyomi-istv%c3%a1n"}, "edited": false, "score": 6, "creation_date": 1510053140, "post_id": 47156134, "comment_id": 81262148, "body": "A trait object reference is probably two pointers big (one to the object, and one to the &quot;vtable&quot;), so there is some overhead compared to the simple pointer, but it shouldn&#39;t involve computations. Though if you wanted to improve performance you should remove the Box around the iterator (use an associated type in the trait)."}, {"owner": {"reputation": 718, "user_id": 6894799, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f57aba01c52e5c67696817eb87df84f2?s=128&d=identicon&r=PG&f=1", "display_name": "Cass", "link": "https://stackoverflow.com/users/6894799/cass"}, "edited": false, "score": 1, "creation_date": 1603919413, "post_id": 47156134, "comment_id": 114192227, "body": "Heads up from the future: trait objects without an explicit <code>dyn</code> are deprecated, so the closure should read <code>|e| e as &amp;dyn MyTrait</code>"}], "tags": [], "owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "is_accepted": true, "score": 8, "last_activity_date": 1510063496, "last_edit_date": 1510063496, "creation_date": 1510052108, "answer_id": 47156134, "question_id": 47156009, "link": "https://stackoverflow.com/questions/47156009/how-to-iterate-over-a-collection-of-structs-as-an-iterator-of-trait-object-refer/47156134#47156134", "title": "How to iterate over a collection of structs as an iterator of trait object references?", "body": "<p>You need to cast the single elements explicitly, like this:</p>\n\n<pre><code>Box::new(self.0.iter().map(|e| e as &amp;MyTrait))\n</code></pre>\n"}], "owner": {"reputation": 2030, "user_id": 1069278, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0507d3e2796540aab634041439f84be7?s=128&d=identicon&r=PG", "display_name": "Z&#243;lyomi Istv&#225;n", "link": "https://stackoverflow.com/users/1069278/z%c3%b3lyomi-istv%c3%a1n"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 818, "favorite_count": 0, "accepted_answer_id": 47156134, "answer_count": 1, "score": 5, "last_activity_date": 1510067769, "creation_date": 1510051723, "last_edit_date": 1510067769, "question_id": 47156009, "link": "https://stackoverflow.com/questions/47156009/how-to-iterate-over-a-collection-of-structs-as-an-iterator-of-trait-object-refer", "title": "How to iterate over a collection of structs as an iterator of trait object references?", "body": "<p>I have a collection of struct objects. I'd like to iterate over the collection with an iterator of trait objects, but I can't create an appropriate iterator for that. My reduced test code is:</p>\n\n<pre><code>struct MyStruct {}\nstruct MyStorage(Vec&lt;MyStruct&gt;);\n\ntrait MyTrait {} // Dummy trait to demonstrate the problem\nimpl MyTrait for MyStruct {}\n\ntrait MyContainer {\n    fn items&lt;'a&gt;(&amp;'a self) -&gt; Box&lt;Iterator&lt;Item = &amp;'a MyTrait&gt; + 'a&gt;;\n}\nimpl MyContainer for MyStorage {\n    fn items&lt;'a&gt;(&amp;'a self) -&gt; Box&lt;Iterator&lt;Item = &amp;'a MyTrait&gt; + 'a&gt; {\n        Box::new(self.0.iter())\n    }\n}\n</code></pre>\n\n<p>This results the following compiler error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0271]: type mismatch resolving `&lt;std::slice::Iter&lt;'_, MyStruct&gt; as std::iter::Iterator&gt;::Item == &amp;MyTrait`\n  --&gt; src/main.rs:12:9\n   |\n12 |         Box::new(self.0.iter())\n   |         ^^^^^^^^^^^^^^^^^^^^^^^ expected struct `MyStruct`, found trait MyTrait\n   |\n   = note: expected type `&amp;MyStruct`\n              found type `&amp;MyTrait`\n   = note: required for the cast to the object type `std::iter::Iterator&lt;Item=&amp;MyTrait&gt;`\n</code></pre>\n\n<p>My understanding is that though <code>&amp;MyStruct</code> is normally convertible to <code>&amp;MyTrait</code>, the <code>Iterator</code> implementation of the standard library doesn't allow it in this case.\nNote that the same construct works with a <code>Vec&lt;Box&lt;MyStruct&gt;&gt;</code> and <code>Iterator&lt;Item=&amp;Box&lt;MyTrait&gt;&gt;</code>, but boxing doesn't feel necessary here.</p>\n\n<p>Is there any way to make this work with references?</p>\n"}, {"tags": ["arrays", "string", "types", "rust"], "comments": [{"owner": {"reputation": 2215, "user_id": 243058, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/172c852982356639c7c85dbc6f78b451?s=128&d=identicon&r=PG", "display_name": "bow", "link": "https://stackoverflow.com/users/243058/bow"}, "edited": false, "score": 1, "creation_date": 1510038295, "post_id": 47151474, "comment_id": 81253149, "body": "What you have there is the <code>Split</code> struct, which can be converted to a <code>Vec</code> using <code>collect</code>. See: <a href=\"https://stackoverflow.com/questions/26643688/how-to-split-a-string-in-rust\" title=\"how to split a string in rust\">stackoverflow.com/questions/26643688/&hellip;</a>. Note that this isn <a href=\"https://doc.rust-lang.org/std/primitive.array.html\" rel=\"nofollow noreferrer\">Rust arrays</a> per se, but I imagine this should still help create your <code>Table</code>."}], "owner": {"reputation": 5940, "user_id": 4605629, "user_type": "registered", "accept_rate": 98, "profile_image": "https://www.gravatar.com/avatar/741edb45b2f1d3e3c3d9555085004ad1?s=128&d=identicon&r=PG&f=1", "display_name": "Greg", "link": "https://stackoverflow.com/users/4605629/greg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 173, "favorite_count": 0, "closed_date": 1510062420, "answer_count": 0, "score": 0, "locked_date": 1514757521, "last_activity_date": 1510062654, "creation_date": 1510036727, "last_edit_date": 1510062400, "question_id": 47151474, "link": "https://stackoverflow.com/questions/47151474/how-to-split-a-string-into-an-array-string-split-results-in-unexpected-dat", "closed_reason": "Duplicate", "title": "How to split a String into an array? String.split(&quot;,&quot;) results in unexpected data type/struct", "body": "<p>The below example reads lines from a file buffer. \nI want to split the lines into an array which will later be converted to a <code>Table</code> struct. </p>\n\n<p>When I print the String is looks similar to this:</p>\n\n<pre><code>let string_line: String = line.unwrap()\nprintln!(\"{}\", string_line);\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>Tom,Stuart,1,23.0\n</code></pre>\n\n<p>However after splitting it, it is converted to another type/struct and I don't know how to convert it to an array.</p>\n\n<pre><code>let string_line = line.unwrap();\nlet split_line = string_line.split(\",\");\nprintln!(\"{:?}\", split_line);\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>Split(SplitInternal { start: 0, end: 72, matcher: StrSearcher { haystack: \"Tom,Stuart,1,23.0\", needle: \",\", searcher: TwoWay(TwoWaySearcher { crit_pos: 0, crit_pos_back: 1, period: 1, byteset: 17592186044416, position: 0, end: 72, memory: 0, memory_back: 1 }) }, allow_trailing_empty: true, finished: false })\n</code></pre>\n\n<p>How to convert a <code>String</code> to an array so that it can be converted to a <code>Table</code> struct later?</p>\n"}, {"tags": ["string", "rust", "concatenation"], "answers": [{"comments": [{"owner": {"reputation": 4251, "user_id": 1829329, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/f345b0578d338c5b52e9af599f7a9f19?s=128&d=identicon&r=PG", "display_name": "Zelphir Kaltstahl", "link": "https://stackoverflow.com/users/1829329/zelphir-kaltstahl"}, "edited": false, "score": 0, "creation_date": 1510013953, "post_id": 47147939, "comment_id": 81246220, "body": "Ah that&#39;s how it works! I need to remember this for any future string like things which implement <code>Deref</code>."}], "tags": [], "owner": {"reputation": 12979, "user_id": 5883, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/5c761536d66f497e45ba8de2267b9ead?s=128&d=identicon&r=PG", "display_name": "hwiechers", "link": "https://stackoverflow.com/users/5883/hwiechers"}, "is_accepted": true, "score": 11, "last_activity_date": 1510061784, "last_edit_date": 1510061784, "creation_date": 1510013509, "answer_id": 47147939, "question_id": 47147844, "link": "https://stackoverflow.com/questions/47147844/how-do-i-get-a-str-or-string-from-stdborrowcowstr/47147939#47147939", "title": "How do I get a &amp;str or String from std::borrow::Cow&lt;str&gt;?", "body": "<p>Pass a reference to <code>example</code> (i.e. <code>&amp;example</code>) to <code>push_str</code>.</p>\n\n<pre><code>let mut alphabet: String = \"ab\".to_string();\nalphabet.push_str(\"c\");  \nalphabet.push_str(&amp;example);\n</code></pre>\n\n<p>This works because <code>Cow</code> implements <a href=\"https://doc.rust-lang.org/std/ops/trait.Deref.html\" rel=\"noreferrer\"><code>Deref</code></a>.</p>\n"}, {"comments": [{"owner": {"reputation": 4251, "user_id": 1829329, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/f345b0578d338c5b52e9af599f7a9f19?s=128&d=identicon&r=PG", "display_name": "Zelphir Kaltstahl", "link": "https://stackoverflow.com/users/1829329/zelphir-kaltstahl"}, "edited": false, "score": 0, "creation_date": 1510068816, "post_id": 47159528, "comment_id": 81272939, "body": "Very helpful as well. If I could accept 2 answers, I would : )"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 37, "last_activity_date": 1510062339, "creation_date": 1510062339, "answer_id": 47159528, "question_id": 47147844, "link": "https://stackoverflow.com/questions/47147844/how-do-i-get-a-str-or-string-from-stdborrowcowstr/47159528#47159528", "title": "How do I get a &amp;str or String from std::borrow::Cow&lt;str&gt;?", "body": "<blockquote>\n  <p>How do I get a <code>&amp;str</code></p>\n</blockquote>\n\n<ol>\n<li><p>Use <code>Borrow</code>:</p>\n\n<pre><code>use std::borrow::Borrow;\nalphabet.push_str(example.borrow());\n</code></pre></li>\n<li><p>Use <code>AsRef</code>:</p>\n\n<pre><code>alphabet.push_str(example.as_ref());\n</code></pre></li>\n<li><p>Use <code>Deref</code> explicitly:</p>\n\n<pre><code>use std::ops::Deref;\nalphabet.push_str(example.deref());\n</code></pre></li>\n<li><p>Use <code>Deref</code> implicitly through a coercion:</p>\n\n<pre><code>alphabet.push_str(&amp;example);\n</code></pre></li>\n</ol>\n\n<blockquote>\n  <p>How do I get a <code>String</code></p>\n</blockquote>\n\n<ol>\n<li><p>Use <code>ToString</code>:</p>\n\n<pre><code>example.to_string();\n</code></pre></li>\n<li><p>Use <code>Cow::into_owned</code>:</p>\n\n<pre><code>example.into_owned();\n</code></pre></li>\n<li><p>Use any method to get a reference and then call <code>to_owned</code>:</p>\n\n<pre><code>example.as_ref().to_owned();\n</code></pre></li>\n</ol>\n"}], "owner": {"reputation": 4251, "user_id": 1829329, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/f345b0578d338c5b52e9af599f7a9f19?s=128&d=identicon&r=PG", "display_name": "Zelphir Kaltstahl", "link": "https://stackoverflow.com/users/1829329/zelphir-kaltstahl"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 8134, "favorite_count": 3, "accepted_answer_id": 47147939, "answer_count": 2, "score": 22, "last_activity_date": 1510062339, "creation_date": 1510012876, "last_edit_date": 1510061774, "question_id": 47147844, "link": "https://stackoverflow.com/questions/47147844/how-do-i-get-a-str-or-string-from-stdborrowcowstr", "title": "How do I get a &amp;str or String from std::borrow::Cow&lt;str&gt;?", "body": "<p>I have a <a href=\"https://doc.rust-lang.org/std/borrow/enum.Cow.html\" rel=\"noreferrer\"><code>Cow</code></a>:</p>\n\n<pre><code>use std::borrow::Cow;  // Cow = clone on write\nlet example = Cow::from(\"def\")\n</code></pre>\n\n<p>I would like to get the <code>def</code> back out of it, in order to append it to another <code>String</code>:</p>\n\n<pre><code>let mut alphabet: String = \"ab\".to_string();\nalphabet.push_str(\"c\");\n// here I would like to do:\nalphabet.push_str(example);\n</code></pre>\n\n<p>This does not work and I don't see the appropriate method in <code>Cow</code> to get the <code>&amp;str</code> or <code>String</code> back out.</p>\n"}, {"tags": ["rust", "deserialization", "serde"], "comments": [{"owner": {"reputation": 2308, "user_id": 1120799, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/IRCQ4.jpg?s=128&g=1", "display_name": "Abhishek Chanda", "link": "https://stackoverflow.com/users/1120799/abhishek-chanda"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1510006615, "post_id": 47146114, "comment_id": 81243799, "body": "I did not know that existed. I tried this <code>let input: Point3D = serde_json::from_reader(&amp;stream)?;</code> and looks like it just waits for a EOF from the client. How do I make <code>from_reader</code> exit on a special character from the client?"}, {"owner": {"reputation": 2308, "user_id": 1120799, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/IRCQ4.jpg?s=128&g=1", "display_name": "Abhishek Chanda", "link": "https://stackoverflow.com/users/1120799/abhishek-chanda"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1510006915, "post_id": 47146114, "comment_id": 81243916, "body": "Looking at the example here <a href=\"https://docs.serde.rs/serde_json/fn.from_reader.html\" rel=\"nofollow noreferrer\">docs.serde.rs/serde_json/fn.from_reader.html</a> I thought <code>from_reader</code> on the file&#39;s reader exits when it sees a EOF, a special character in the case of reading from a file. I was wondering if I need to treat newline as a special character and make <code>from_reader</code> return on getting a newline. Or am I misunderstanding this?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1510007094, "post_id": 47146114, "comment_id": 81243971, "body": "An EOF is <i>not</i> a &quot;character&quot;. You never answered the question: <i>how do <b>you</b>, the programmer, know when the socket is &quot;done&quot;?</i> You are defining a protocol, but you haven&#39;t actually shared what your protocol <i>is</i>, so we can&#39;t tell you how to implement it. Do newlines have something to do with the data that is coming over the network?"}, {"owner": {"reputation": 2308, "user_id": 1120799, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/IRCQ4.jpg?s=128&g=1", "display_name": "Abhishek Chanda", "link": "https://stackoverflow.com/users/1120799/abhishek-chanda"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1510007338, "post_id": 47146114, "comment_id": 81244072, "body": "I am trying to use a newline from the client to the server to mark that the socket is done. Sorry for being vague. Added my server and client codes for some context."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1510007487, "post_id": 47146114, "comment_id": 81244134, "body": "You seem to already know about <code>.read_until</code> \u2014 why is <i>that</i> not valid to use here?"}, {"owner": {"reputation": 2308, "user_id": 1120799, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/IRCQ4.jpg?s=128&g=1", "display_name": "Abhishek Chanda", "link": "https://stackoverflow.com/users/1120799/abhishek-chanda"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1510008059, "post_id": 47146114, "comment_id": 81244361, "body": "I got it to work with <code>read_until</code>. Thanks for the pointers!"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1510008552, "creation_date": 1510008552, "answer_id": 47147142, "question_id": 47146114, "link": "https://stackoverflow.com/questions/47146114/deserializing-newline-delimited-json-from-a-socket-using-serde/47147142#47147142", "title": "Deserializing newline-delimited JSON from a socket using Serde", "body": "<p>Place the <code>TcpStream</code> into a <code>BufReader</code>. This allows you to read until a specific byte (in this case a newline). You can then parse the read bytes with Serde:</p>\n\n<pre><code>use std::io::{BufRead, BufReader};\nuse std::io::Write;\n\nfn handle_client(mut stream: TcpStream) -&gt; Result&lt;(), Error&gt; {\n    let mut data = Vec::new();\n    let mut stream = BufReader::new(stream);\n\n    loop {\n        data.clear();\n\n        let bytes_read = stream.read_until(b'\\n', &amp;mut data)?;\n        if bytes_read == 0 {\n            return Ok(());\n        }\n\n        let input: Point3D = serde_json::from_slice(&amp;data)?;\n        let value = input.x.pow(2) + input.y.pow(2) + input.z.pow(2);\n\n        write!(stream.get_mut(), \"{}\", value)?;\n    }\n}\n</code></pre>\n\n<p>I'm being a little fancy by reusing the allocation of <code>data</code>, which means it's very important to reset the buffer at the beginning of each loop. I also avoid allocating memory for the result and just print directly to the output stream.</p>\n"}], "owner": {"reputation": 2308, "user_id": 1120799, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/IRCQ4.jpg?s=128&g=1", "display_name": "Abhishek Chanda", "link": "https://stackoverflow.com/users/1120799/abhishek-chanda"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1506, "favorite_count": 1, "accepted_answer_id": 47147142, "answer_count": 1, "score": 4, "last_activity_date": 1510008552, "creation_date": 1510003696, "last_edit_date": 1510007423, "question_id": 47146114, "link": "https://stackoverflow.com/questions/47146114/deserializing-newline-delimited-json-from-a-socket-using-serde", "title": "Deserializing newline-delimited JSON from a socket using Serde", "body": "<p>I am trying to use serde for sending a JSON struct from a client to a server. A newline from the client to the server marks that the socket is done. My server looks like this</p>\n\n<pre><code>#[derive(Serialize, Deserialize, Debug)]\nstruct Point3D {\n    x: u32,\n    y: u32,\n    z: u32,\n}\n\nfn handle_client(mut stream: TcpStream) -&gt; Result&lt;(), Error&gt; {\n    println!(\"Incoming connection from: {}\", stream.peer_addr()?);\n    let mut buffer = [0; 512];\n    loop {\n        let bytes_read = stream.read(&amp;mut buffer)?;\n        if bytes_read == 0 {\n            return Ok(());\n        }\n        let buf_str: &amp;str = str::from_utf8(&amp;buffer).expect(\"Boom\");\n        let input: Point3D = serde_json::from_str(&amp;buf_str)?;\n        let result: String = (input.x.pow(2) + input.y.pow(2) + input.z.pow(2)).to_string();\n        stream.write(result.as_bytes())?;\n    }\n}\n\nfn main() {\n    let args: Vec&lt;_&gt; = env::args().collect();\n    if args.len() != 2 {\n        eprintln!(\"Please provide --client or --server as argument\");\n        std::process::exit(1);\n    }\n    if args[1] == \"--server\" {\n        let listener = TcpListener::bind(\"0.0.0.0:8888\").expect(\"Could not bind\");\n        for stream in listener.incoming() {\n            match stream {\n                Err(e) =&gt; eprintln!(\"failed: {}\", e),\n                Ok(stream) =&gt; {\n                    thread::spawn(move || {\n                        handle_client(stream).unwrap_or_else(|error| eprintln!(\"{:?}\", error));\n                    });\n                }\n            }\n        }\n    } else if args[1] == \"--client\" {\n        let mut stream = TcpStream::connect(\"127.0.0.1:8888\").expect(\"Could not connect to server\");\n        println!(\"Please provide a 3D point as three comma separated integers\");\n        loop {\n            let mut input = String::new();\n            let mut buffer: Vec&lt;u8&gt; = Vec::new();\n            stdin()\n                .read_line(&amp;mut input)\n                .expect(\"Failed to read from stdin\");\n            let parts: Vec&lt;&amp;str&gt; = input.trim_matches('\\n').split(',').collect();\n            let point = Point3D {\n                x: parts[0].parse().unwrap(),\n                y: parts[1].parse().unwrap(),\n                z: parts[2].parse().unwrap(),\n            };\n            stream\n                .write(serde_json::to_string(&amp;point).unwrap().as_bytes())\n                .expect(\"Failed to write to server\");\n\n            let mut reader = BufReader::new(&amp;stream);\n\n            reader\n                .read_until(b'\\n', &amp;mut buffer)\n                .expect(\"Could not read into buffer\");\n            print!(\n                \"{}\",\n                str::from_utf8(&amp;buffer).expect(\"Could not write buffer as string\")\n            );\n        }\n    }\n}\n</code></pre>\n\n<p>How do I know what length of buffer to allocate before reading in the string? If my buffer is too large, serde fails to deserialize it with an error saying that there are invalid characters. Is there a better way to do this?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1509986850, "post_id": 47141543, "comment_id": 81233477, "body": "Didn&#39;t you mean <code>fn bar&lt;T: TFoo&gt;(v: Box&lt;T&gt;)</code>?"}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 1, "creation_date": 1509995445, "post_id": 47141543, "comment_id": 81238083, "body": "The other answer doesn&#39;t cover the question here, which is why <code>Box&lt;Trait&gt;</code> works as a parameter but <code>Box&lt;TYPE&gt;</code> doesn&#39;t."}, {"owner": {"reputation": 833, "user_id": 3297655, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/df1bc6c2cef925a8f52d36b3290958b9?s=128&d=identicon&r=PG&f=1", "display_name": "chabapok", "link": "https://stackoverflow.com/users/3297655/chabapok"}, "edited": false, "score": 0, "creation_date": 1509997210, "post_id": 47141543, "comment_id": 81239046, "body": "with signature <code>fn foo&lt;T: TFoo+?Sized&gt;(v: Box&lt;T&gt;)</code> this code compiled ok"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1510005618, "post_id": 47141543, "comment_id": 81243398, "body": "@user4815162342 I&#39;m not following you. This code is trying to pass a <code>Box&lt;TFoo&gt;</code> to a function that accepts a <code>Box&lt;T&gt;</code>. This means that <code>T</code> must be <code>TFoo</code>, which is not sized, but the <code>T</code> is <code>Sized</code> by default. This <b>is covered</b> in the duplicate: <i>this is popping up because [...] <code>Fn(&amp;mut Writer) -&gt; IoResult&lt;()&gt;</code>. If we match this against the <code>F: Fn(&amp;mut W) -&gt; IoResult&lt;()&gt;</code> [...] we find that <code>W = Writer</code> [...] This is illegal because the <code>W</code> parameters in both the trait and the impl are defaulting to have a <code>Sized</code> bound, if we manually override it with <code>?Sized</code> then everything works fine</i>."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1510009186, "post_id": 47141543, "comment_id": 81244755, "body": "@Shepmaster <code>Box</code> is ultimately a pointer, so it may not be obvious why <code>Box</code> containing an unsized type is itself unsized. (One could imagine <code>Box&lt;T&gt;</code> being pointer-sized for any T, like C++&#39;s <code>unique_ptr&lt;T&gt;</code>.). The linked answer does not mention <code>Box</code> at all."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1510010729, "post_id": 47141543, "comment_id": 81245326, "body": "@user4815162342 OK, I can fix that."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1510039403, "post_id": 47141543, "comment_id": 81253694, "body": "@Shepmaster Your other answer still doesn&#39;t address why the size of the type is relevant when moving a box. Nor does it need to, because the other question is not specifically about <code>Box</code>. Instead of editing the other answer, please reopen this question, so that it can be answered properly."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1510063810, "post_id": 47141543, "comment_id": 81269475, "body": "@user4815162342 I disagree \u2014 both questions are &quot;why does passing a trait object (<code>&amp;Trait</code> / <code>Box&lt;Trait&gt;</code> / <code>Rc&lt;Trait&gt;</code>, etc.) to a function that accepts a generic of the same shape (<code>&amp;T</code> / <code>Box&lt;T&gt;</code> / <code>Rc&lt;T&gt;</code>, etc.) generate a warning about <code>Sized</code>&quot;. <code>Box</code> vs <code>&amp;</code> is simply incidental."}], "owner": {"reputation": 833, "user_id": 3297655, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/df1bc6c2cef925a8f52d36b3290958b9?s=128&d=identicon&r=PG&f=1", "display_name": "chabapok", "link": "https://stackoverflow.com/users/3297655/chabapok"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 82, "favorite_count": 0, "closed_date": 1509987577, "answer_count": 0, "score": 1, "last_activity_date": 1509987618, "creation_date": 1509985805, "last_edit_date": 1509987618, "question_id": 47141543, "link": "https://stackoverflow.com/questions/47141543/why-can-boxt-where-t-trait-not-be-passed-as-a-parameter", "closed_reason": "Duplicate", "title": "Why can `Box&lt;T&gt; where T: Trait` not be passed as a parameter?", "body": "<p>Why does this code fail to compile? </p>\n\n<pre><code>trait TFoo {}\n\nfn foo&lt;T: TFoo&gt;(v: Box&lt;T&gt;) {}\n\nfn bar(v: Box&lt;TFoo&gt;) {\n    foo(v);\n}\n\nfn main() {}\n</code></pre>\n\n<p>compilation error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `TFoo: std::marker::Sized` is not satisfied\n --&gt; src/main.rs:6:5\n  |\n6 |     foo(v);\n  |     ^^^ `TFoo` does not have a constant size known at compile-time\n  |\n  = help: the trait `std::marker::Sized` is not implemented for `TFoo`\n  = note: required by `foo`\n</code></pre>\n\n<p>This code compiles if the signature of <code>foo</code> is <code>fn foo(v: Box&lt;TFoo&gt;)</code>. Why can <code>Box&lt;T&gt; where T: Trait</code> not be passed as a parameter, but <code>Box&lt;Trait&gt;</code> can be passed?</p>\n"}, {"tags": ["rust", "ownership", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 3213, "user_id": 6084430, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/B0TaE.jpg?s=128&g=1", "display_name": "DimChtz", "link": "https://stackoverflow.com/users/6084430/dimchtz"}, "edited": false, "score": 0, "creation_date": 1509961740, "post_id": 47133842, "comment_id": 81217654, "body": "Indeed, this works. So, if I get it right: <code>min().unwrap()</code> returns a reference to an element of <code>self.x</code> which means the entire <code>self.x</code> is borrowed (or just one individual element? (min)). Finally, <code>clone()</code> copies the referenced value and frees the reference?"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 3213, "user_id": 6084430, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/B0TaE.jpg?s=128&g=1", "display_name": "DimChtz", "link": "https://stackoverflow.com/users/6084430/dimchtz"}, "edited": false, "score": 0, "creation_date": 1509961960, "post_id": 47133842, "comment_id": 81217798, "body": "@DimChtz <code>iter()</code> returns an iterator over immutable references and it borrows the whole <code>self.x</code> or <code>self.y</code> (but not whole <code>self</code>).<code>min().unwrap()</code> returns the reference to the smallest element; it consumes the iterator, but keeps the borrow in force. <code>clone()</code> obtains the referenced value and frees the borrow, yes."}, {"owner": {"reputation": 3213, "user_id": 6084430, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/B0TaE.jpg?s=128&g=1", "display_name": "DimChtz", "link": "https://stackoverflow.com/users/6084430/dimchtz"}, "edited": false, "score": 0, "creation_date": 1509962512, "post_id": 47133842, "comment_id": 81218131, "body": "Things like these make me feel like rust is messed up, but I still like rust :P Anyways, thank you."}, {"owner": {"reputation": 3213, "user_id": 6084430, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/B0TaE.jpg?s=128&g=1", "display_name": "DimChtz", "link": "https://stackoverflow.com/users/6084430/dimchtz"}, "edited": false, "score": 0, "creation_date": 1509963013, "post_id": 47133842, "comment_id": 81218382, "body": "One last question: considering <code>new</code> signature, would this: <code>let mut s = S::new(10, 10, &amp;vec![1,2,3,4], &amp;vec![52, 10, 23, 56]);</code> be a correct way to call <code>new</code> or could it cause any memory issues?"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 3213, "user_id": 6084430, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/B0TaE.jpg?s=128&g=1", "display_name": "DimChtz", "link": "https://stackoverflow.com/users/6084430/dimchtz"}, "edited": false, "score": 0, "creation_date": 1509964945, "post_id": 47133842, "comment_id": 81219430, "body": "@DimChtz no, this won&#39;t cause issues, but it would make more sense to get the <code>_x</code> and <code>_y</code> vectors by value instead of by reference - that way you won&#39;t need to allocate their memory twice, like in this call. One of the best features of Rust is that if the compiler allows something then it should be perfectly safe (unless you use <code>unsafe</code>, of course)."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 4, "last_activity_date": 1509998530, "last_edit_date": 1509998530, "creation_date": 1509961220, "answer_id": 47133842, "question_id": 47133648, "link": "https://stackoverflow.com/questions/47133648/cannot-assign-to-self-x-because-it-is-borrowed/47133842#47133842", "title": "Cannot assign to `self.x` because it is borrowed", "body": "<p>All of the variable bindings at the beginning of <code>calc</code> return shared references (<code>&amp;u8</code>) to <code>self.x</code> and <code>self.y</code>, which means you can no longer mutate them.</p>\n\n<p>In order to not be bound by these borrows at the point of the last assignment you can <code>clone()</code> the references to obtain regular <code>u8</code>s:</p>\n\n<pre><code>let mut min_x = self.x.iter().min().unwrap().clone();\nlet mut max_x = self.x.iter().max().unwrap().clone();\nlet mut min_y = self.y.iter().min().unwrap().clone();\nlet mut max_y = self.y.iter().max().unwrap().clone();\n</code></pre>\n\n<p>I'm not sure if this solves all your issues, because you didn't provide the signature of <code>norm_value</code>.</p>\n\n<p>As for the <code>new</code> method, you'll probably want to change the signature to obtain them by value instead of by reference:</p>\n\n<pre><code>fn new(w: u8, h: u8, x: Vec&lt;u8&gt;, y: Vec&lt;u8&gt;) -&gt; S {\n    S { w: w, h: h, x: x, y: y }\n}\n\nlet s = S::new(10, 10, vec![1, 2, 3, 4], vec![52, 10, 23, 56]);\n</code></pre>\n\n<p>Note that I removed the underscores - you don't need to prepend the function arguments with them, if you remove them it will still be clear to the compiler. Prepending variable identifiers with underscores is usually used to silence the <code>#[warn(unused_variables)]</code> warnings.</p>\n"}], "owner": {"reputation": 3213, "user_id": 6084430, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/B0TaE.jpg?s=128&g=1", "display_name": "DimChtz", "link": "https://stackoverflow.com/users/6084430/dimchtz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1462, "favorite_count": 0, "accepted_answer_id": 47133842, "answer_count": 1, "score": 2, "last_activity_date": 1509998530, "creation_date": 1509960588, "last_edit_date": 1509979827, "question_id": 47133648, "link": "https://stackoverflow.com/questions/47133648/cannot-assign-to-self-x-because-it-is-borrowed", "title": "Cannot assign to `self.x` because it is borrowed", "body": "<p>I have 2 functions:</p>\n\n<pre><code>// A simple struct\nstruct S {\n    w: u8,\n    h: u8,\n    x: Vec&lt;u8&gt;,\n    y: Vec&lt;u8&gt;,\n}\n\n// Implementation of the struct S\nimpl S {\n    // Seems to work\n    fn new(_w: u8, _h: u8, _x: &amp;Vec&lt;u8&gt;, _y: &amp;Vec&lt;u8&gt;) -&gt; S {\n        S {\n            w: _w,\n            h: _h,\n            x: _x.clone(),\n            y: _y.clone(),\n        }\n    }\n\n    fn calc(&amp;mut self) {\n        let mut min_x = self.x.iter().min().unwrap();\n        let mut max_x = self.x.iter().max().unwrap();\n        let mut min_y = self.y.iter().min().unwrap();\n        let mut max_y = self.y.iter().max().unwrap();\n\n        // Here's the line that gives the error\n        self.x = self.x\n            .iter()\n            .map(|v| norm_value(*v, *min_x, *max_x, 0, self.w))\n            .collect();\n    }\n}\n\nfn norm_value&lt;A, B, C, D, E&gt;(_: A, _: B, _: C, _: D, _: E) -&gt; ! { panic!() }\n</code></pre>\n\n<ol>\n<li><p><code>new</code> makes a new <code>S</code> object. This seems to work, but correct me if I did something horribly wrong and just happens to work.</p></li>\n<li><p><code>calc</code> tries to modify the members <code>x</code> and <code>y</code>.</p></li>\n</ol>\n\n<p>The compiler reports this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0506]: cannot assign to `self.x` because it is borrowed\n  --&gt; src/main.rs:28:9\n   |\n22 |           let mut min_x = self.x.iter().min().unwrap();\n   |                           ------ borrow of `self.x` occurs here\n...\n28 | /         self.x = self.x\n29 | |             .iter()\n30 | |             .map(|v| norm_value(*v, *min_x, *max_x, 0, self.w))\n31 | |             .collect();\n   | |______________________^ assignment to borrowed `self.x` occurs here\n</code></pre>\n\n<p>Where did I borrow <code>self.x</code>? I am new to Rust but things like this make no sense.</p>\n"}, {"tags": ["string", "rust"], "answers": [{"tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 5, "last_activity_date": 1509956222, "creation_date": 1509956222, "answer_id": 47132430, "question_id": 47132141, "link": "https://stackoverflow.com/questions/47132141/how-to-update-a-char-in-a-string/47132430#47132430", "title": "How to update a char in a String?", "body": "<p>The answer depends on the sort of <code>String</code> you are dealing with; if you are working with ASCII <strong>only</strong> (which means every character is one byte in size and you can just directly manipulate the underlying <code>Vec&lt;u8&gt;</code>), you could do the following:</p>\n\n<pre><code>fn main() {\n    let mut s = \"poyo\".to_string();\n    let mut bytes = s.into_bytes();\n    bytes[1] = 'i' as u8;\n\n    unsafe { s = String::from_utf8_unchecked(bytes) }\n\n    println!(\"{}\", s);\n}\n</code></pre>\n\n<p>or:</p>\n\n<pre><code>fn main() {\n    let mut s = \"poyo\".to_string();\n\n    unsafe {\n        let bytes = s.as_bytes_mut();\n        bytes[1] = 'i' as u8;\n    }\n\n    println!(\"{}\", s);\n}\n</code></pre>\n\n<p>If, however, you are (potentially) working with multi-byte characters (which is the whole reason why <code>String</code> doesn't implement <code>IndexMut</code> or even <code>Index</code>), the safe way to do it would be to use the <a href=\"https://doc.rust-lang.org/stable/alloc/str/struct.Chars.html\" rel=\"noreferrer\"><code>Chars</code></a> iterator, walk over it and create a new <code>String</code> based on its elements:</p>\n\n<pre><code>fn main() {\n    let s = \"poyo\".to_string();\n    let iter = s.chars();\n    let mut new = String::new();\n\n    for (i, mut c) in iter.enumerate() {\n        if i == 1 { c = 'i'; }\n        new.push(c);\n    }\n\n    println!(\"{}\", new);\n}\n</code></pre>\n"}], "owner": {"reputation": 75, "user_id": 5888545, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fa04fa5dd3beed243cd5370255335287?s=128&d=identicon&r=PG&f=1", "display_name": "yumizu rai", "link": "https://stackoverflow.com/users/5888545/yumizu-rai"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1310, "favorite_count": 0, "closed_date": 1509977649, "accepted_answer_id": 47132430, "answer_count": 1, "score": 3, "last_activity_date": 1509956546, "creation_date": 1509954898, "last_edit_date": 1509956546, "question_id": 47132141, "link": "https://stackoverflow.com/questions/47132141/how-to-update-a-char-in-a-string", "closed_reason": "Duplicate", "title": "How to update a char in a String?", "body": "<p>I'm trying to update a <code>char</code> in a <code>String</code>, but can't seem to be able to do that.  </p>\n\n<pre><code>fn main() {\n    let mut s = \"poyo\".to_string();\n    // s[1] = 'i'; or s.get_mut(1) = 'i'; can't do either\n    println!(\"{}\", s); // expecting \"piyo\"\n}\n</code></pre>\n\n<p>I know why this happens (<code>String</code> does not implement <code>IndexMut&lt;usize&gt;</code>), but I don't know how to resolve this...</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=188a5cb8ee442958bdca286b3a75a265&amp;version=undefined\" rel=\"nofollow noreferrer\">playground link</a></p>\n"}, {"tags": ["rust", "borrow-checker"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509977930, "post_id": 47130689, "comment_id": 81227318, "body": "Does this <a href=\"https://stackoverflow.com/a/36168919/155423\">implementation of a zipper</a> answer your question?"}, {"owner": {"reputation": 123, "user_id": 1454156, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/866a1a825be7717cadea0beed21ae450?s=128&d=identicon&r=PG", "display_name": "user1454156", "link": "https://stackoverflow.com/users/1454156/user1454156"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509982985, "post_id": 47130689, "comment_id": 81230950, "body": "Not really. Implementing a haskell-style zipper, like the one you linked to, seems relatively straightforward. I&#39;m trying to, in addition, avoid disassembling the data structure as you descend, and therefore needing to reassemble it as you ascend."}, {"owner": {"reputation": 123, "user_id": 1454156, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/866a1a825be7717cadea0beed21ae450?s=128&d=identicon&r=PG", "display_name": "user1454156", "link": "https://stackoverflow.com/users/1454156/user1454156"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1509986722, "post_id": 47130689, "comment_id": 81233418, "body": "I guess examples of answers I&#39;d like are:  &quot;Your analysis is incorrect: if you used unsafe code to implement this it would lead to UB. Here&#39;s why&quot;,  &quot;Your analysis is correct, but it&#39;s impossible to convince the borrow checker, even using unsafe rust&quot;,  &quot;Your analysis is correct, but AFAIK nobody&#39;s written the unsafe code in a nice library for you&quot;, or  &quot;Your analysis is correct, here&#39;s the library you want&quot;"}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1509997166, "post_id": 47143424, "comment_id": 81239024, "body": "Is there any reason to use an <code>&amp;UnsafeCell&lt;&gt;</code> here rather than a plain <code>*mut </code>? The only one I can think of is avoiding <code>PhantomData</code>, which is kinda nice, but I am wondering if there are others..."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1510005831, "post_id": 47143424, "comment_id": 81243482, "body": "@MatthieuM. does <code>*mut T</code> inform the compiler about the same things that <code>UnsafeCell</code> does? There <i>has</i> to be some reason for <code>UnsafeCell</code> to exist."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1510008350, "post_id": 47143424, "comment_id": 81244456, "body": "@Shepmaster <code>UnsafeCell</code> exists to break the rule that a <code>T</code> behind a <code>&amp;U</code> (transitively) can be assumed to be immutable; a <code>T</code> behind a <code>&amp;UnsafeCell&lt;U&gt;</code> cannot be assumed to be immutable. Here, we start with a <code>&amp;mut T</code>, so we don&#39;t need to use <code>UnsafeCell</code> (contrarily to what I did <a href=\"https://stackoverflow.com/posts/47143424/revisions\">initially</a>)."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1510040046, "post_id": 47143424, "comment_id": 81253986, "body": "@Shepmaster: You cannot model <code>struct A { b: B }</code> with <code>b</code> &quot;mutable&quot; without <code>UnsafeCell</code> (pointers here won&#39;t work for obvious reasons). Thus, if you wanted to avoid <code>transmutes</code> and casts, you could model the <code>List</code> using <code>UnsafeCell</code> to start with. However, between <code>*mut T</code> and <code>&amp;UnsafeCell&lt;T&gt;</code> I think the only difference is &quot;borrowing&quot;, the <code>&amp;UnsafeCell&lt;T&gt;</code> adding a bonus <code>PhantomData&lt;&amp;(mut?) T&gt;</code>."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 3, "last_activity_date": 1509997243, "last_edit_date": 1509997243, "creation_date": 1509992981, "answer_id": 47143424, "question_id": 47130689, "link": "https://stackoverflow.com/questions/47130689/save-mutable-reference-for-later-even-when-aliased/47143424#47143424", "title": "Save mutable reference for later even when aliased", "body": "<p>In order to achieve your goal, we need to get rid of the mutable reference in the <code>Zipper</code> struct. We can use mutable raw pointers instead: they let us mutate their referent, and we can more than one such pointer pointing at a particular object, but dereferencing them is unsafe.</p>\n\n<p>Here's the code:</p>\n\n<pre><code>use std::mem;\nuse std::marker::PhantomData;\n\npub enum List&lt;T&gt; {\n    Empty,\n    Cons { head: T, tail: Box&lt;List&lt;T&gt;&gt; },\n}\n\npub struct Zipper&lt;'a, T: 'a&gt; {\n    trail: Option&lt;Box&lt;Zipper&lt;'a, T&gt;&gt;&gt;,\n    focus: *mut List&lt;T&gt;,\n    _list: PhantomData&lt;&amp;'a mut List&lt;T&gt;&gt;,\n}\n\nimpl&lt;'a, T: 'a&gt; Zipper&lt;'a, T&gt; {\n    pub fn new(list: &amp;'a mut List&lt;T&gt;) -&gt; Zipper&lt;'a, T&gt; {\n        Zipper {\n            trail: None,\n            focus: list as *mut List&lt;T&gt;,\n            _list: PhantomData,\n        }\n    }\n\n    pub fn down(&amp;mut self) {\n        unsafe {\n            match *self.focus {\n                List::Empty =&gt; (),\n                List::Cons {\n                    tail: ref mut xs, ..\n                } =&gt; {\n                    let old_zipper = mem::replace(\n                        self,\n                        Zipper::new(xs),\n                    );\n                    self.trail = Some(Box::new(old_zipper));\n                }\n            }\n        }\n    }\n}\n\nfn main() {\n    let mut list = List::Cons { head: 1, tail: Box::new(List::Empty) };\n    let mut zipper = Zipper::new(&amp;mut list);\n    zipper.down();\n    zipper.down();\n}\n</code></pre>\n\n<p>The <code>focus</code> field in the <code>Zipper</code> struct is now a <code>*mut List&lt;T&gt;</code>. Because this is a raw pointer, we can copy it around freely. This resolves the compiler error you had in <code>Zipper::down</code>. There's also a new field, <code>_list</code>, of type <code>PhantomData&lt;&amp;'a mut List&lt;T&gt;&gt;</code>. <a href=\"https://doc.rust-lang.org/stable/std/marker/struct.PhantomData.html\" rel=\"nofollow noreferrer\"><code>PhantomData</code></a> is a special type that is meant to tell the compiler \"pretend I'm storing/owning a <code>T</code>, even though I'm not\". Without this field, the compiler would complain that the lifetime parameter <code>'a</code> is unused.</p>\n\n<p>Notice that <code>Zipper::new</code> still expects a <code>&amp;'a mut List&lt;T&gt;</code> as a parameter: this allows <code>Zipper</code> to provide a safe interface by requiring the caller to have a unique mutable reference to the <code>List&lt;T&gt;</code>, a fact we can use to declare that the other unsafe operations in the struct are indeed safe since we have full knowledge of the available mutable references. As far as the compiler is concerned, a <code>Zipper</code> <em>is</em> mutably borrowing the <code>List</code>; if you try to mutate a <code>List</code> while a <code>Zipper</code> on the <code>List</code> is in scope, you'll get an error that the <code>List</code> is already mutably borrowed.</p>\n\n<hr>\n\n<p>You haven't shown any code that would let the user get a reference to the <code>Zipper</code>'s focus. I've been thinking of a possible implementation that would be unsafe, and it's tempting to go that route, but the compiler won't tell you it's wrong. Let me show you:</p>\n\n<pre><code>impl&lt;'a, T: 'a&gt; Zipper&lt;'a, T&gt; {\n    pub fn focus(&amp;mut self) -&gt; &amp;'a mut List&lt;T&gt; {\n        unsafe { &amp;mut *self.focus }\n    }\n}\n</code></pre>\n\n<p>It's tempting to return a <code>&amp;'a mut List&lt;T&gt;</code> because that's what we were given. However, it's wrong because the return value's lifetime is not bound to <code>self</code> in any way, which means that we could call <code>focus</code> twice to obtain two mutable references to the same <code>List&lt;T&gt;</code>. If we still had a <code>&amp;'a mut List&lt;T&gt;</code> in <code>Zipper</code>, the compiler would tell us if we tried to return a <code>&amp;'a mut List&lt;T&gt;</code> (unless we used <code>unsafe</code> code to work around it). A correct implementation would be:</p>\n\n<pre><code>impl&lt;'a, T: 'a&gt; Zipper&lt;'a, T&gt; {\n    pub fn focus(&amp;mut self) -&gt; &amp;mut List&lt;T&gt; {\n        unsafe { &amp;mut *self.focus }\n    }\n}\n</code></pre>\n\n<p>In this implementation, the <code>Zipper</code> will be mutably borrowed as long as the returned <code>&amp;mut List&lt;T&gt;</code> is around, which means we can't call <code>focus</code> (or <code>down</code>) until the <code>&amp;mut List&lt;T&gt;</code> goes out of scope.</p>\n"}], "owner": {"reputation": 123, "user_id": 1454156, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/866a1a825be7717cadea0beed21ae450?s=128&d=identicon&r=PG", "display_name": "user1454156", "link": "https://stackoverflow.com/users/1454156/user1454156"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 178, "favorite_count": 0, "answer_count": 1, "score": 6, "last_activity_date": 1509997243, "creation_date": 1509948202, "last_edit_date": 1509977787, "question_id": 47130689, "link": "https://stackoverflow.com/questions/47130689/save-mutable-reference-for-later-even-when-aliased", "title": "Save mutable reference for later even when aliased", "body": "<p>I'm trying to implement something like a zipper but taking advantage of mutable references to avoid having to deconstruct and reconstruct the data structure as I move through it. I've got example code for an attempt with a linked list, although I'd ideally like to apply it to other structures, like trees.</p>\n\n<pre><code>pub enum List&lt;T&gt; {\n    Empty,\n    Cons { head: T, tail: Box&lt;List&lt;T&gt;&gt; },\n}\n\npub struct Zipper&lt;'a, T: 'a&gt; {\n    trail: Option&lt;Box&lt;Zipper&lt;'a, T&gt;&gt;&gt;,\n    focus: &amp;'a mut List&lt;T&gt;,\n}\n\nimpl&lt;'a, T: 'a&gt; Zipper&lt;'a, T&gt; {\n    pub fn down(&amp;'a mut self) {\n        match self.focus {\n            &amp;mut List::Empty =&gt; (),\n            &amp;mut List::Cons {\n                tail: ref mut xs, ..\n            } =&gt; {\n                //We need a way to convince rust that we won't use oldZipper\n                //until xs goes out of scope\n                let oldZipper = std::mem::replace(\n                    self,\n                    Zipper {\n                        trail: None,\n                        focus: xs,\n                    },\n                );\n                self.trail = Some(Box::new(oldZipper));\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>The borrow checker is not happy with this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0499]: cannot borrow `*self` as mutable more than once at a time\n  --&gt; src/main.rs:21:21\n   |\n16 |                 tail: ref mut xs, ..\n   |                       ---------- first mutable borrow occurs here\n...\n21 |                     self,\n   |                     ^^^^ second mutable borrow occurs here\n...\n30 |     }\n   |     - first borrow ends here\n</code></pre>\n\n<p>This isn't surprising: if we have a zipper focused on a list and call <code>down</code> on it, we get zipper with a mutable reference to the tail of that list, so we have mutable aliasing.</p>\n\n<p>However, if we never use the Zipper's <code>trail</code> before <code>focus</code> goes out of scope, we'll never be able to \"see\" the mutable aliasing. This seems analogous to normal mutable borrowing: you can't use the variable you borrowed from until the borrow goes out of scope.</p>\n\n<p>Is there some way to explain this to the borrow checker? If you want to \"explain\" to the borrow checker that borrowing two non-overlapping slices from an array is okay, you can use <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.split_at\" rel=\"noreferrer\"><code>split_at</code></a>: is there some corresponding function that will enforce that <code>trail</code> is never used before <code>focus</code> goes out of scope, and in doing so, satisfies the borrow checker?</p>\n"}, {"tags": ["compiler-errors", "rust"], "answers": [{"comments": [{"owner": {"reputation": 16556, "user_id": 839689, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/eed3ee2db841be15bdb120f3ff38f02e?s=128&d=identicon&r=PG", "display_name": "Nayuki", "link": "https://stackoverflow.com/users/839689/nayuki"}, "edited": false, "score": 0, "creation_date": 1509980837, "post_id": 47130949, "comment_id": 81229391, "body": "I mean it&#39;s a solution, but doesn&#39;t explain much"}, {"owner": {"reputation": 2215, "user_id": 243058, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/172c852982356639c7c85dbc6f78b451?s=128&d=identicon&r=PG", "display_name": "bow", "link": "https://stackoverflow.com/users/243058/bow"}, "reply_to_user": {"reputation": 16556, "user_id": 839689, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/eed3ee2db841be15bdb120f3ff38f02e?s=128&d=identicon&r=PG", "display_name": "Nayuki", "link": "https://stackoverflow.com/users/839689/nayuki"}, "edited": false, "score": 0, "creation_date": 1509982941, "post_id": 47130949, "comment_id": 81230919, "body": "Yeah, that&#39;s on me ~ should have noticed earlier that you were asking not just for a working code example :)."}], "tags": [], "owner": {"reputation": 2215, "user_id": 243058, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/172c852982356639c7c85dbc6f78b451?s=128&d=identicon&r=PG", "display_name": "bow", "link": "https://stackoverflow.com/users/243058/bow"}, "is_accepted": false, "score": -2, "last_activity_date": 1509949436, "creation_date": 1509949436, "answer_id": 47130949, "question_id": 47130574, "link": "https://stackoverflow.com/questions/47130574/how-can-i-use-the-ordmax-function/47130949#47130949", "title": "How can I use the Ord::max function?", "body": "<p>If you want to compare numbers, you'd do it like this:</p>\n\n<pre><code>use std::cmp;\n\nfn main() {\n    let a: i32 = 0;\n    let b: i32 = 1;\n    let c: i32 = cmp::max(a, b);\n    println!(\"{}\", c);\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 16556, "user_id": 839689, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/eed3ee2db841be15bdb120f3ff38f02e?s=128&d=identicon&r=PG", "display_name": "Nayuki", "link": "https://stackoverflow.com/users/839689/nayuki"}, "edited": false, "score": 0, "creation_date": 1509952609, "post_id": 47131555, "comment_id": 81212695, "body": "That was a dumb oversight I made! I read the version that APIs are introduced to Java and Python. For Rust, I assumed that integer min/max are so basic that they should have been implemented since the beginning of time. I didn&#39;t think to check the API version at all here."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 16556, "user_id": 839689, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/eed3ee2db841be15bdb120f3ff38f02e?s=128&d=identicon&r=PG", "display_name": "Nayuki", "link": "https://stackoverflow.com/users/839689/nayuki"}, "edited": false, "score": 1, "creation_date": 1509952681, "post_id": 47131555, "comment_id": 81212728, "body": "Note that you can browse the docs for any version of the language, either by opening the docs that ship with the compiler, or by adding the version number to the URL (check the URL I used for <code>cmp::max</code>)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 16556, "user_id": 839689, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/eed3ee2db841be15bdb120f3ff38f02e?s=128&d=identicon&r=PG", "display_name": "Nayuki", "link": "https://stackoverflow.com/users/839689/nayuki"}, "edited": false, "score": 1, "creation_date": 1509978284, "post_id": 47131555, "comment_id": 81227578, "body": "@Nayuki <i>I assumed that integer min/max are so basic that they should have been implemented since the beginning of time</i> \u2014 <a href=\"https://doc.rust-lang.org/std/cmp/fn.max.html\" rel=\"nofollow noreferrer\">They were</a>."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 5, "last_activity_date": 1509952171, "creation_date": 1509952171, "answer_id": 47131555, "question_id": 47130574, "link": "https://stackoverflow.com/questions/47130574/how-can-i-use-the-ordmax-function/47131555#47131555", "title": "How can I use the Ord::max function?", "body": "<p>It works fine with a more recent compiler.  You can see this by <a href=\"https://play.rust-lang.org/?gist=b06421e6084faedee6a57a8bb88b2089&amp;version=stable\" rel=\"noreferrer\">trying it on the playpen</a>.</p>\n\n<p>The problem is that you're trying to call a method <em>that doesn't exist</em>.  At least, not in the version of Rust you're using.  The <a href=\"https://doc.rust-lang.org/std/cmp/trait.Ord.html#method.max\" rel=\"noreferrer\">documentation for <code>Ord::max</code></a> notes that it was introduced in Rust version 1.21.0.</p>\n\n<p>What you want is to use <a href=\"https://doc.rust-lang.org/1.17.0/std/cmp/fn.max.html\" rel=\"noreferrer\"><code>cmp::max</code></a>, which is a function, <em>not a method</em>.  Thus, you call it like so:</p>\n\n<pre><code>use std::cmp;\nlet c = cmp::max(a, b);\n</code></pre>\n\n<p>As for why it works for <code>f32</code>, the answer to that can be found by checking the documentation: <a href=\"https://doc.rust-lang.org/1.17.0/std/index.html?search=max\" rel=\"noreferrer\">a search for <code>max</code></a> reveals that <code>f32</code> and <code>f64</code> have their own versions of a <code>max</code> method.  And <em>that's</em> because both <code>cmp::max</code> and <code>Ord::max</code> only work on types that have a total ordering.  Floats are <em>not</em> totally ordered due to the existence of NaN, so they cannot use either of those.</p>\n"}], "owner": {"reputation": 16556, "user_id": 839689, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/eed3ee2db841be15bdb120f3ff38f02e?s=128&d=identicon&r=PG", "display_name": "Nayuki", "link": "https://stackoverflow.com/users/839689/nayuki"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1093, "favorite_count": 0, "accepted_answer_id": 47131555, "answer_count": 2, "score": 2, "last_activity_date": 1509977495, "creation_date": 1509947666, "last_edit_date": 1509977495, "question_id": 47130574, "link": "https://stackoverflow.com/questions/47130574/how-can-i-use-the-ordmax-function", "title": "How can I use the Ord::max function?", "body": "<p>In this trivial program, I attempt to call <code>i32.max(i32)</code>:</p>\n\n<pre><code>fn main() {\n    let a: i32 = 0;\n    let b: i32 = 1;\n    let c: i32 = a.max(b);  // &lt;-- Error here\n    println!(\"{}\", c);\n}\n</code></pre>\n\n<p>But I get a cryptic compile-time error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: no method named `max` found for type `i32` in the current scope\n --&gt; prog.rs:4:17\n  |\n4 |     let c: i32 = a.max(b);\n  |                    ^^^\n  |\n  = note: the method `max` exists but the following\n    trait bounds were not satisfied: `i32 : std::iter::Iterator`\n</code></pre>\n\n<p>Why does this happen? I'm using Rust 1.17.0.</p>\n\n<p>How can I use the <a href=\"https://doc.rust-lang.org/std/cmp/trait.Ord.html#method.max\" rel=\"nofollow noreferrer\"><code>max()</code></a> (or <a href=\"https://doc.rust-lang.org/std/cmp/trait.Ord.html#method.min\" rel=\"nofollow noreferrer\"><code>min()</code></a>) function?</p>\n\n<p>The example works if I use a floating point value:</p>\n\n<pre><code>let a: f32 = 0.0;\nlet b: f32 = 1.0;\nlet c: f32 = a.max(b);\n</code></pre>\n\n<p>This makes things more mysterious.</p>\n"}, {"tags": ["generics", "rust", "lifetime"], "comments": [{"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1509892403, "post_id": 47121985, "comment_id": 81195111, "body": "@E_net4 I&#39;ve added a playground link, and simply removed the last question.  I think it&#39;s perfectly acceptable to ask more than one question in a post as long as they are dependent on each other."}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1509913053, "post_id": 47121985, "comment_id": 81202394, "body": "@E_net4 I followed you advice and removed the enumeration.  My questions essentially is why I get the errors and how to fix them."}], "answers": [{"comments": [{"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 1, "creation_date": 1509980108, "post_id": 47126516, "comment_id": 81228875, "body": "Thanks, I already suspected it&#39;s not possible.  I&#39;ll read the linked RFC to udnerstand what the error messages mean, and why the error message for the method is different for the one I get for my own version."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 13, "last_activity_date": 1562201115, "last_edit_date": 1562201115, "creation_date": 1509915124, "answer_id": 47126516, "question_id": 47121985, "link": "https://stackoverflow.com/questions/47121985/why-cant-i-use-a-key-function-that-returns-a-reference-when-sorting-a-vector-wi/47126516#47126516", "title": "Why can&#39;t I use a key function that returns a reference when sorting a vector with sort_by_key?", "body": "<p>For now, you have to use the \"long\" form:</p>\n\n<pre><code>v.sort_by(|x, y| key(x).cmp(&amp;key(y)));\n</code></pre>\n\n<blockquote>\n  <p>Why am I getting these errors? Is there any way to fix them?</p>\n</blockquote>\n\n<p>The cause and fix are one-and-the same: Rust is simply not currently expressive enough to represent what you want. The feature needed is called <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1598-generic_associated_types.md\" rel=\"noreferrer\"><em>generic associated types</em> (GATs)</a>; previously known as <em>associated type constructors</em> (ATCs) or higher-kinded types (HKTs).</p>\n\n<p>From the <a href=\"https://github.com/rust-lang/rust/issues/34162\" rel=\"noreferrer\">associated issue</a>:</p>\n\n<blockquote>\n  <p>For the <code>sort_by_key</code> call to be okay, the lifetime of the input reference [...] needs to be incorporated into <code>B</code> to make the return type <code>&amp;'a str</code>, but <code>B</code> is a type parameter.</p>\n</blockquote>\n\n<p>I don't know if the signature for <code>sort_by_key</code> will be able to be seamlessly moved to a GAT when they are implemented.</p>\n\n<hr>\n\n<p>In similar cases where you control the signature of all the types, you can require that a reference be returned:</p>\n\n<pre><code>use std::cmp::Ordering;\n\nstruct User {\n    name: String,\n}\n\nfn compare_keys&lt;T, R&gt;(a: T, b: T, key: impl Fn(&amp;T) -&gt; &amp;R) -&gt; Ordering\nwhere\n    for&lt;'a&gt; &amp;'a R: Ord,\n{\n    let ak = key(&amp;a);\n    let bk = key(&amp;b);\n    ak.cmp(&amp;bk)\n}\n\nfn main() {\n    let alice = User {\n        name: String::from(\"alice\"),\n    };\n    let bob = User {\n        name: String::from(\"bob\"),\n    };\n\n    compare_keys(alice, bob, |u| &amp;u.name);\n}\n</code></pre>\n\n<p>This is non-ideal because now you cannot return a non-reference, but there's simply no complete solution until GATs are implemented. You may be able to add a parallel methods like <code>sort_by</code> and <code>sort_by_key</code>, depending on your case.</p>\n"}, {"comments": [{"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1509979936, "post_id": 47127500, "comment_id": 81228750, "body": "Thanks, I had figured that out (see the third version in my question).  I still like to understand what exactly the error messages mean."}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "reply_to_user": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1509980312, "post_id": 47127500, "comment_id": 81229042, "body": "Huh, totally missed that, sorry. At least the <code>?Sized</code> part adds something new :)"}], "tags": [], "owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "is_accepted": false, "score": 2, "last_activity_date": 1509953930, "last_edit_date": 1509953930, "creation_date": 1509922318, "answer_id": 47127500, "question_id": 47121985, "link": "https://stackoverflow.com/questions/47121985/why-cant-i-use-a-key-function-that-returns-a-reference-when-sorting-a-vector-wi/47127500#47127500", "title": "Why can&#39;t I use a key function that returns a reference when sorting a vector with sort_by_key?", "body": "<p>As <a href=\"https://stackoverflow.com/a/47126516/1478356\">@Shepmaster explained</a> you cannot have a <code>sort_by_key</code> function handling generic associated lifetimes for the return type of the <code>key</code> function, but here is a variant for a key function always returning a reference:</p>\n\n<pre><code>fn sort_by_key_ref&lt;T, F, K&gt;(a: &amp;mut [T], key: F) \nwhere\n    F: Fn(&amp;T) -&gt; &amp;K,\n    K: ?Sized + Ord,\n{\n    a.sort_by(|x, y| key(x).cmp(key(y)));\n}\n</code></pre>\n\n<p>You could also write down the lifetime requirements for the key function:</p>\n\n<pre><code>    for&lt;'a&gt; F: Fn(&amp;'a T) -&gt; &amp;'a K,\n</code></pre>\n\n<p>See <a href=\"https://play.rust-lang.org/?gist=7ef562914d65a56abf8810f6bf35fea9&amp;version=stable\" rel=\"nofollow noreferrer\">example on playground</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 1300, "user_id": 5696269, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-fM9nY4BDuE8/AAAAAAAAAAI/AAAAAAAAAAA/ykOQFUkc6Zg/photo.jpg?sz=128", "display_name": "KaiJ", "link": "https://stackoverflow.com/users/5696269/kaij"}, "is_accepted": false, "score": 1, "last_activity_date": 1582138556, "creation_date": 1582138556, "answer_id": 60307396, "question_id": 47121985, "link": "https://stackoverflow.com/questions/47121985/why-cant-i-use-a-key-function-that-returns-a-reference-when-sorting-a-vector-wi/60307396#60307396", "title": "Why can&#39;t I use a key function that returns a reference when sorting a vector with sort_by_key?", "body": "<p>The cleanest workaround (IMO) for this that builds on Shepmaster's answer is:</p>\n\n<pre><code>fn ref_key&lt;T, K: Ord + ?Sized&gt;(mut f: impl FnMut(&amp;T) -&gt; &amp;K) -&gt; impl FnMut(&amp;T, &amp;T) -&gt; Ordering {\n    move |a, b| f(a).cmp(f(b))\n}\n</code></pre>\n\n<p>It can be used simply by converting <code>slice.sort_by_key(key)</code> to <code>slice.sort_by(ref_key(key))</code>.</p>\n"}], "owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1163, "favorite_count": 4, "accepted_answer_id": 47126516, "answer_count": 3, "score": 16, "last_activity_date": 1582138556, "creation_date": 1509887622, "last_edit_date": 1509915187, "question_id": 47121985, "link": "https://stackoverflow.com/questions/47121985/why-cant-i-use-a-key-function-that-returns-a-reference-when-sorting-a-vector-wi", "title": "Why can&#39;t I use a key function that returns a reference when sorting a vector with sort_by_key?", "body": "<p>I'm trying to sort a <code>Vec&lt;String&gt;</code> using a key function that returns references to the strings in the vector.  A contrived example is to use the identity function as key function (which of course is useless, but it's the minimal example to reproduce my problem):</p>\n\n<pre><code>fn key(x: &amp;String) -&gt; &amp;String {\n    x\n}\n</code></pre>\n\n<p>Now given <code>items: Vec&lt;String&gt;</code>, I'd like to be able to do</p>\n\n<pre><code>items.sort_by_key(key);\n</code></pre>\n\n<p>This gives the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0271]: type mismatch resolving `for&lt;'r&gt; &lt;fn(&amp;std::string::String) -&gt; &amp;std::string::String {main::key} as std::ops::FnOnce&lt;(&amp;'r std::string::String,)&gt;&gt;::Output == _`\n  --&gt; src/main.rs:19:11\n   |\n19 |     items.sort_by_key(key);\n   |           ^^^^^^^^^^^ expected bound lifetime parameter, found concrete lifetime\n   |\n   = note: concrete lifetime that was found is lifetime '_#16r\n</code></pre>\n\n<p>I don't understand why I get this error, so I tried to track this down.  I first implemented my own version of <code>sort_by_key()</code>:</p>\n\n<pre><code>fn sort_by_key&lt;T, K: Ord&gt;(a: &amp;mut [T], key: fn(&amp;T) -&gt; K) {\n    a.sort_by(|x, y| key(x).cmp(&amp;key(y)));\n}\n</code></pre>\n\n<p>When trying to call this function, I get what looks like the \"opposite\" error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:22:29\n   |\n22 |     sort_by_key(&amp;mut items, key);\n   |                             ^^^ expected concrete lifetime, found bound lifetime parameter\n   |\n   = note: expected type `fn(&amp;std::string::String) -&gt; _`\n              found type `fn(&amp;std::string::String) -&gt; &amp;std::string::String {main::key}`\n</code></pre>\n\n<p>I can make this code compile by fixing the key type to <code>&amp;T</code> instead of using the generic parameter <code>K</code>, or by using <code>&amp;K</code> instead of <code>K</code> as return type for the key function:</p>\n\n<pre><code>fn sort_by_key_v2&lt;T: Ord&gt;(a: &amp;mut [T], key: fn(&amp;T) -&gt; &amp;T) {\n    a.sort_by(|x, y| key(x).cmp(&amp;key(y)));\n}\nfn sort_by_key_v3&lt;T, K: Ord&gt;(a: &amp;mut [T], key: fn(&amp;T) -&gt; &amp;K) {\n    a.sort_by(|x, y| key(x).cmp(&amp;key(y)));\n}\n</code></pre>\n\n<p>I also tried adding lifetime annotations, but that only shifted the error around without resolving it.</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=a622b2643fcb26e8d119c78f0ecd4f75&amp;version=stable\" rel=\"noreferrer\">Here's the three versions of the <code>sort_by_key()</code> function on the Playground</a>.</p>\n\n<p>Why am I getting these errors?  Is there any way to fix them while keeping the key type <code>K</code> completely generic?</p>\n"}, {"tags": ["rust", "closures", "lifetime", "inference"], "answers": [{"comments": [{"owner": {"reputation": 20334, "user_id": 78667, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/b13a3e168d85c7f7f45ae1e54dc9db57?s=128&d=identicon&r=PG", "display_name": "Arkaitz Jimenez", "link": "https://stackoverflow.com/users/78667/arkaitz-jimenez"}, "edited": false, "score": 0, "creation_date": 1509879314, "post_id": 47120576, "comment_id": 81191090, "body": "Thanks, I have tried that, but the moment I do that it prevents me from storing the CardCell reference into p1 or p2, consider this: <a href=\"https://play.rust-lang.org/?gist=b1dc8cb220daca0efaa0e5a6b4501786&amp;version=nightly\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 2215, "user_id": 243058, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/172c852982356639c7c85dbc6f78b451?s=128&d=identicon&r=PG", "display_name": "bow", "link": "https://stackoverflow.com/users/243058/bow"}, "reply_to_user": {"reputation": 20334, "user_id": 78667, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/b13a3e168d85c7f7f45ae1e54dc9db57?s=128&d=identicon&r=PG", "display_name": "Arkaitz Jimenez", "link": "https://stackoverflow.com/users/78667/arkaitz-jimenez"}, "edited": false, "score": 0, "creation_date": 1509879777, "post_id": 47120576, "comment_id": 81191206, "body": "Aha, I don&#39;t think the reference to <code>_card</code> can be stored inside <code>p1</code> or <code>p2</code> as-is know because <code>card</code> has a shorted lifetime than <code>p1</code>/<code>p2</code>, since it is created within the closure.  In other words, you may need to create <code>card</code> outside the closure; so that it has the same lifetime  as <code>p1</code>/<code>p2</code>."}, {"owner": {"reputation": 20334, "user_id": 78667, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/b13a3e168d85c7f7f45ae1e54dc9db57?s=128&d=identicon&r=PG", "display_name": "Arkaitz Jimenez", "link": "https://stackoverflow.com/users/78667/arkaitz-jimenez"}, "edited": false, "score": 0, "creation_date": 1509880079, "post_id": 47120576, "comment_id": 81191299, "body": "hmm, so I might need to change the way the code is working, I cannot create the card outside because I need the parameter of the closure to create the card, then store it in the container and then, in reality, might change it a bit and then store it in either p1 or p2."}, {"owner": {"reputation": 2215, "user_id": 243058, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/172c852982356639c7c85dbc6f78b451?s=128&d=identicon&r=PG", "display_name": "bow", "link": "https://stackoverflow.com/users/243058/bow"}, "reply_to_user": {"reputation": 20334, "user_id": 78667, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/b13a3e168d85c7f7f45ae1e54dc9db57?s=128&d=identicon&r=PG", "display_name": "Arkaitz Jimenez", "link": "https://stackoverflow.com/users/78667/arkaitz-jimenez"}, "edited": false, "score": 0, "creation_date": 1509881896, "post_id": 47120576, "comment_id": 81191821, "body": "I think so indeed. I changed the <code>handle_card</code> signature so that it works given the current setup: creating the card inside the closure. But if you do intend to push back to <code>p1</code>/<code>p2</code>, the card has to be created in another way that ensures its reference lives as long as <code>p1</code>/<code>p2</code>."}], "tags": [], "owner": {"reputation": 2215, "user_id": 243058, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/172c852982356639c7c85dbc6f78b451?s=128&d=identicon&r=PG", "display_name": "bow", "link": "https://stackoverflow.com/users/243058/bow"}, "is_accepted": true, "score": 2, "last_activity_date": 1509878272, "creation_date": 1509878272, "answer_id": 47120576, "question_id": 47120299, "link": "https://stackoverflow.com/questions/47120299/lifetime-inference-for-container-objects-inside-closures/47120576#47120576", "title": "Lifetime inference for container objects inside closures", "body": "<p>I played with the example in the playground and managed to get the code to compile, with the following changes:</p>\n\n<ol>\n<li><p>Change the signature of <code>handle_hand</code></p>\n\n<p>The initial signature was <code>fn handle_hand&lt;'a&gt;(_card: &amp;'a mut CardCell, _p1: &amp;mut Hand&lt;'a&gt;, _p2: &amp;mut Hand&lt;'a&gt;)</code>, but this was what the compiler error is about. This signature requires all input to <code>handle_hand</code> to have the same lifetime, but that is not the case in your code. There, inside the closure, <code>card</code> clearly has a shorted lifetime than <code>p1</code> and <code>p2</code>. So the revised signature simply becomes: <code>fn handle_hand&lt;'a, 'b&gt;(_card: &amp;'b mut CardCell, _p1: &amp;mut Hand&lt;'a&gt;, _p2: &amp;mut Hand&lt;'a&gt;)</code>.</p></li>\n<li><p>Change the signature of <code>card</code> inside the closure.</p>\n\n<p>Since <code>handle_hand</code> requires a <code>&amp;mut CardCell</code>, you must then declare <code>card</code> as <code>let mut card: &amp;mut CardCell =...</code></p></li>\n<li><p>Derive the copy trait into the <code>Card</code> struct. I put this last since this may need to be changed depending on how you'd further write the struct. But at this point, it's just a wrapper of <code>u64</code>, and you can simply do <code>#[derive(Clone, Copy]</code> on it. This is required because the <code>Cell</code> struct you are using <a href=\"https://doc.rust-lang.org/std/cell/struct.Cell.html#impl\" rel=\"nofollow noreferrer\">requires a Copy type</a>. Derive works here because all your struct's fields already implement the Copy type.</p></li>\n</ol>\n\n<p><a href=\"https://play.rust-lang.org/?gist=8c7fc05964a3a2f808bb2940eb8a4c54&amp;version=nightly\" rel=\"nofollow noreferrer\">Here's the updated playground</a>.</p>\n"}], "owner": {"reputation": 20334, "user_id": 78667, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/b13a3e168d85c7f7f45ae1e54dc9db57?s=128&d=identicon&r=PG", "display_name": "Arkaitz Jimenez", "link": "https://stackoverflow.com/users/78667/arkaitz-jimenez"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 67, "favorite_count": 0, "accepted_answer_id": 47120576, "answer_count": 1, "score": 3, "last_activity_date": 1509878272, "creation_date": 1509876230, "question_id": 47120299, "link": "https://stackoverflow.com/questions/47120299/lifetime-inference-for-container-objects-inside-closures", "title": "Lifetime inference for container objects inside closures", "body": "<p>I have a routine that plays with objects in a container and references to those objects stored in another 2 containers.<br>\nHowever,  I am not finding the rust way of doing this, the lifetime inference seems to forbid this and I don't know how to resolve it</p>\n\n<pre><code>fn main() {\n    let mut deck : Deck = Deck::new();\n    let mut p1 : Hand = Hand::new();\n    let mut p2 : Hand = Hand::new();\n\n\n    do_hands(|data: &amp;[Card]| -&gt; Result&lt;(),()&gt; {\n      for card in data {\n        deck.insert(card.id, CardCell::new(*card));\n\n        let card: &amp;CardCell = deck.get_mut(&amp;card.id).unwrap();\n        handle_hand(&amp;mut card, &amp;mut p1, &amp;mut p2);\n\n      }      \n      return Ok(());\n    });\n\n}\n</code></pre>\n\n<p>Here is the full playground link: <a href=\"https://play.rust-lang.org/?gist=6079ade83e3fcf06f35397eac2e82d05&amp;version=nightly\" rel=\"nofollow noreferrer\">https://play.rust-lang.org/?gist=6079ade83e3fcf06f35397eac2e82d05&amp;version=nightly</a></p>\n"}, {"tags": ["binary", "rust"], "comments": [{"owner": {"reputation": 9980, "user_id": 1944004, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/60f3cc97f94fa3690ba406f8c1a7fc4f?s=128&d=identicon&r=PG", "display_name": "Henri Menke", "link": "https://stackoverflow.com/users/1944004/henri-menke"}, "edited": false, "score": 0, "creation_date": 1509869996, "post_id": 47119144, "comment_id": 81188787, "body": "This does not exactly what you want but comes much closer: <a href=\"https://crates.io/crates/bitflags\" rel=\"nofollow noreferrer\">crates.io/crates/bitflags</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1509892266, "post_id": 47119144, "comment_id": 81195063, "body": "It&#39;s <i>extremely</i> unclear what you are even asking. A <code>u8</code> <b>is</b> 8-bits \u2014 that&#39;s what the &quot;8&quot; means!"}, {"owner": {"reputation": 986, "user_id": 6819040, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/IJDZr.jpg?s=128&g=1", "display_name": "AurevoirXavier", "link": "https://stackoverflow.com/users/6819040/aurevoirxavier"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509893685, "post_id": 47119144, "comment_id": 81195576, "body": "Boolfuck interpreter only input or output <code>0101</code> one by one, I can&#39;t give it <code>97u8</code>. I have to transform it to that format. A variable only accept one bit in Boolfuck. Sorry for my expression. @Shepmaster"}, {"owner": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "edited": false, "score": 0, "creation_date": 1509987299, "post_id": 47119144, "comment_id": 81233802, "body": "So you want to convert between the <i>string representation</i> of a number expressed in binary and its numeric value? or what?"}], "answers": [{"comments": [{"owner": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "edited": false, "score": 2, "creation_date": 1509986958, "post_id": 47121936, "comment_id": 81233555, "body": "<code>if c == &#39;1&#39; { true } else { false }</code> is exactly the same as <code>c == &#39;1&#39;</code>. Expressions!"}, {"owner": {"reputation": 986, "user_id": 6819040, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/IJDZr.jpg?s=128&g=1", "display_name": "AurevoirXavier", "link": "https://stackoverflow.com/users/6819040/aurevoirxavier"}, "reply_to_user": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "edited": false, "score": 0, "creation_date": 1539253613, "post_id": 47121936, "comment_id": 92438739, "body": "@Kroltan Thanks!"}], "tags": [], "owner": {"reputation": 986, "user_id": 6819040, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/IJDZr.jpg?s=128&g=1", "display_name": "AurevoirXavier", "link": "https://stackoverflow.com/users/6819040/aurevoirxavier"}, "is_accepted": true, "score": 1, "last_activity_date": 1539253587, "last_edit_date": 1539253587, "creation_date": 1509887333, "answer_id": 47121936, "question_id": 47119144, "link": "https://stackoverflow.com/questions/47119144/any-better-way-to-read-and-write-8-bit-in-rust/47121936#47121936", "title": "Any better way to read and write 8-bit in Rust?", "body": "<p>Here is my solution:</p>\n\n<p><code>true</code> for <code>1</code>, <code>false</code> for <code>0</code></p>\n\n<p><code>u8</code> to <code>Vec&lt;bool&gt;</code>:</p>\n\n<pre><code>let input = b\"Hello, world!\".to_vec();    \nlet input_stream: Vec&lt;bool&gt; = {\n    let mut string = String::new();\n\n    for char in input { string += &amp;format!(\"{:08b}\", char); }\n\n    string.chars().collect::&lt;Vec&lt;char&gt;&gt;()\n        .chunks_mut(8)\n        .map(|chunk| chunk.iter().rev().collect::&lt;String&gt;())\n        .collect::&lt;String&gt;()\n        .chars().map(|c| c == '1')\n        .collect()\n};\n</code></pre>\n\n<p><code>Vec&lt;bool&gt;</code> to <code>u8</code>:</p>\n\n<p><code>output_stream</code> is something like <code>10001001...</code>, but in this case it's <code>true false false...</code>.</p>\n\n<pre><code>let mut chunks = output_stream.chunks(8);\nlet mut output = Vec::new();\n\nwhile let Some(chunk) = chunks.next() {\n    let mut chunk = chunk.to_vec();\n    let mut char = 0b00000000u8;\n\n    while chunk.len() != 8 { chunk.push(false); }\n\n    for (carry_bit, flag) in chunk.iter().enumerate() {\n        if *flag { char += 0b00000001u8 &lt;&lt; carry_bit }\n    }\n\n    output.push(char);\n}\n</code></pre>\n\n<p>A better solution to convert string to bit:</p>\n\n<pre><code>b\"a\".to_vec().into_iter().flat_map(|b| (0u8..8).map(move |i| (b &gt;&gt; i) &amp; 1)).collect::&lt;Vec&lt;u8&gt;&gt;()\n</code></pre>\n"}], "owner": {"reputation": 986, "user_id": 6819040, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/IJDZr.jpg?s=128&g=1", "display_name": "AurevoirXavier", "link": "https://stackoverflow.com/users/6819040/aurevoirxavier"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 514, "favorite_count": 0, "accepted_answer_id": 47121936, "answer_count": 1, "score": -3, "last_activity_date": 1539253587, "creation_date": 1509866150, "last_edit_date": 1509892185, "question_id": 47119144, "link": "https://stackoverflow.com/questions/47119144/any-better-way-to-read-and-write-8-bit-in-rust", "title": "Any better way to read and write 8-bit in Rust?", "body": "<p>I'm writing a boolfuck interpreter and I need to convert something to 8-bit.</p>\n\n<p>If I use a <code>Vec&lt;u8&gt;</code> to store <code>01100001</code> (it should be <code>0b01100001u8 as char == 'a'</code>), how could I convert it to a <code>char</code>?</p>\n\n<p>If I input <code>Vec&lt;u8&gt;</code> (e.g.:<code>b\"hello\".to_vec()</code>), how could I convert it to 8-bit?</p>\n\n<p>Is there any better way to do this?</p>\n"}, {"tags": ["macros", "rust", "rust-compiler-plugin"], "owner": {"reputation": 3861, "user_id": 590967, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/88ccc433efa17e12844762353ce93b8c?s=128&d=identicon&r=PG", "display_name": "Shisoft", "link": "https://stackoverflow.com/users/590967/shisoft"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 62, "favorite_count": 0, "answer_count": 0, "score": 1, "last_activity_date": 1509861917, "creation_date": 1509861917, "question_id": 47118692, "link": "https://stackoverflow.com/questions/47118692/can-i-build-a-compiler-plugin-with-a-post-processor-to-generate-code-from-previo", "title": "Can I build a compiler plugin with a post processor to generate code from previous collected derived structs?", "body": "<p>As far as I know current usage for compiler plugin is to define the attribute for compiler to recognize and then the compiler will invoke the code defined and registered in the plugin. </p>\n\n<p>I am thinking if it is possible to build a compiler plugin that have a post processor. I can some how first register the structs encountered by <code>proc_macro_derive</code> in a data structure within the plugin, then the post processor can generate code according to the plugin data structure populated before.</p>\n\n<p>My intention is to generate a symbol table form derived structs, so I can do some experiment for dynamic typing in rust. I am not sure if it is possible to achieved in compile time without manually register them one by one in runtime.</p>\n"}, {"tags": ["string", "algorithm", "rust"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 2, "last_activity_date": 1509898981, "last_edit_date": 1509898981, "creation_date": 1509864092, "answer_id": 47118925, "question_id": 47118569, "link": "https://stackoverflow.com/questions/47118569/how-to-test-if-a-string-contains-each-character-in-a-pattern-in-order/47118925#47118925", "title": "How to test if a string contains each character in a pattern in order?", "body": "<p><a href=\"https://doc.rust-lang.org/stable/std/primitive.str.html#method.chars\" rel=\"nofollow noreferrer\"><code>str::chars()</code></a> returns an iterator. Iterators return elements from a sequence one at a time. Specifically, <code>str::chars()</code> returns characters from a string one at a time. It's much more efficient to use a single iterator to iterate over a string than to create a new iterator each time you want to look up a character, because <code>s.chars().nth(n)</code> needs to perform a linear scan in order to find the <em>n</em>th character in the UTF-8 encoded string.</p>\n\n<pre><code>fn substr_match(pattern: &amp;str, document: &amp;str) -&gt; bool {\n    let mut pattern_iter = pattern.chars();\n    let mut pattern_ch_lower: String = match pattern_iter.next() {\n        Some(ch) =&gt; ch,\n        None =&gt; return false,\n    }.to_lowercase().collect();\n\n    for document_ch in document.chars() {\n        let document_ch_lower: String = document_ch.to_lowercase().collect();\n        if pattern_ch_lower == document_ch_lower {\n            pattern_ch_lower = match pattern_iter.next() {\n                Some(ch) =&gt; ch,\n                None =&gt; return true,\n            }.to_lowercase().collect();\n        }\n    }\n\n    return false;\n}\n</code></pre>\n\n<p>Here, I'm demonstrating two ways of using iterators:</p>\n\n<ol>\n<li>To iterate over the pattern, I'm using the <a href=\"https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#tymethod.next\" rel=\"nofollow noreferrer\"><code>next</code></a> method manually. <code>next</code> returns an <code>Option</code>: <code>Some(value)</code> if the iterator hasn't finished, or <code>None</code> if it has.</li>\n<li>To iterate over the document, I'm using a <code>for</code> loop. The <code>for</code> loop does the work of calling <code>next</code> and unwrapping the result until <code>next</code> returns <code>None</code>.</li>\n</ol>\n\n<p>One thing to notice is that I'm using a <code>return</code> expression inside a <code>match</code> expression (twice). Since a <code>return</code> expression doesn't produce a value, the compiler knows that its type doesn't matter. In this case, on the <code>Some</code> arm, the result is a <code>char</code>, so the whole <code>match</code> evaluates to a <code>char</code>.</p>\n\n<hr>\n\n<p>We could also do this with two nested <code>for</code> loops:</p>\n\n<pre><code>fn substr_match(pattern: &amp;str, document: &amp;str) -&gt; bool {\n    if pattern.len() == 0 {\n        return false;\n    }\n\n    let mut document_iter = document.chars();\n    for pattern_ch in pattern.chars() {\n        let pattern_ch_lower: String = pattern_ch.to_lowercase().collect();\n        for document_ch in &amp;mut document_iter {\n            let document_ch_lower: String = document_ch.to_lowercase().collect();\n            if pattern_ch_lower == document_ch_lower {\n                break;\n            }\n        }\n\n        return false;\n    }\n\n    return true;\n}\n</code></pre>\n\n<p>There are two things to notice here:</p>\n\n<ol>\n<li>We need to handle the case where the pattern is empty without using the iterator.</li>\n<li>In the inner loop, we don't want to restart from the start of the document when we move to the next pattern character, so we need to reuse the same iterator over the document. When we write <code>for x in iter</code>, the <code>for</code> loop takes ownership of <code>iter</code>; to avoid that, we must write <code>&amp;mut iter</code> instead. Mutable references to iterators are iterators themselves, thanks to the blanket implementation <code>impl&lt;'a, I&gt; Iterator for &amp;'a mut I where I: Iterator + ?Sized</code> in the standard library.</li>\n</ol>\n"}, {"comments": [{"owner": {"reputation": 12979, "user_id": 5883, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/5c761536d66f497e45ba8de2267b9ead?s=128&d=identicon&r=PG", "display_name": "hwiechers", "link": "https://stackoverflow.com/users/5883/hwiechers"}, "edited": false, "score": 0, "creation_date": 1509864872, "post_id": 47118946, "comment_id": 81187703, "body": "Fixed it, I guess. <a href=\"https://play.rust-lang.org/?gist=d2364b0ce4ba56c2a482bfe97275c0c9&amp;version=stable\" rel=\"nofollow noreferrer\">playground link</a>"}], "tags": [], "owner": {"reputation": 12979, "user_id": 5883, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/5c761536d66f497e45ba8de2267b9ead?s=128&d=identicon&r=PG", "display_name": "hwiechers", "link": "https://stackoverflow.com/users/5883/hwiechers"}, "is_accepted": false, "score": 3, "last_activity_date": 1509864794, "last_edit_date": 1509864794, "creation_date": 1509864275, "answer_id": 47118946, "question_id": 47118569, "link": "https://stackoverflow.com/questions/47118569/how-to-test-if-a-string-contains-each-character-in-a-pattern-in-order/47118946#47118946", "title": "How to test if a string contains each character in a pattern in order?", "body": "<p>Here is mine:</p>\n\n<pre><code>fn substr_match(pattern: &amp;str, document: &amp;str) -&gt; bool {\n    let pattern_chars = pattern.chars().flat_map(char::to_lowercase);\n    let mut doc_chars = document.chars().flat_map(char::to_lowercase);\n\n    'outer: for p in pattern_chars {\n        for d in &amp;mut doc_chars {\n            if d == p {\n                continue 'outer;\n            }\n        }\n        return false;\n    }    \n    true\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1509965080, "post_id": 47127076, "comment_id": 81219524, "body": "Mutability is tricky; I find the fact that <code>haystack</code> is borrowed mutably, and therefore the subsequent invocations of the lambda in <code>.all(...)</code> do NOT operate on the same data, rather non-obvious. I did not realize it immediately and thought that it was starting from the beginning of <code>haystack</code> each time at first glance :("}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1509973687, "post_id": 47127076, "comment_id": 81224495, "body": "@MatthieuM. Yeah, I honestly feel a little guilty for writing it because I usually go for obvious over clever :/ On the other hand, if you can&#39;t be clever on Stack Overflow, where <i>can</i> you be?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1509974661, "post_id": 47127076, "comment_id": 81225122, "body": "To be honest, I had the same double-take about @hwiechers&#39; solution with for loops, as it also relies on keeping the iterators in between iterations of the inner loop, so it&#39;s not specific to your solution. Although, in the explicit loop, there is this weird <code>&amp;mut</code> sticking out in front to catch your attention."}], "tags": [], "owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "is_accepted": false, "score": 3, "last_activity_date": 1509924020, "last_edit_date": 1592644375, "creation_date": 1509919075, "answer_id": 47127076, "question_id": 47118569, "link": "https://stackoverflow.com/questions/47118569/how-to-test-if-a-string-contains-each-character-in-a-pattern-in-order/47127076#47127076", "title": "How to test if a string contains each character in a pattern in order?", "body": "<p>The other answers mimic the behavior of the Python function you started with, but it may be worth trying to make it better. I thought of two test cases where the original function may have surprising behavior:</p>\n<pre class=\"lang-python prettyprint-override\"><code>&gt;&gt;&gt; substr_match(&quot;n\u0303&quot;, &quot;in Sa\u0303o Paulo&quot;)\nTrue\n&gt;&gt;&gt; substr_match(&quot;\ud83c\uddfa\ud83c\uddf8&quot;, &quot;\ud83c\uddfa\ud83c\udde6\ud83c\uddf8\ud83c\uddf0&quot;)\nTrue\n</code></pre>\n<p>Hmm.</p>\n<p>(The first example may depend on your input method; try copying and pasting. Also, if you can't see them, the special characters in the second example are flag emoji for the United States, Ukraine, and Slovakia.)</p>\n<p>Without getting into why these tests fail or all the other things that could potentially be undesired, if you want to correctly handle Unicode text, you need to, at minimum, operate on graphemes instead of code points (<a href=\"https://stackoverflow.com/q/27331819/3650362\">this question</a> describes the difference). Rust doesn't provide this feature in the standard library, so you need the <a href=\"https://crates.io/crates/unicode-segmentation\" rel=\"nofollow noreferrer\">unicode-segmentation</a> crate, which provides a <a href=\"https://unicode-rs.github.io/unicode-segmentation/unicode_segmentation/trait.UnicodeSegmentation.html#tymethod.graphemes\" rel=\"nofollow noreferrer\"><code>graphemes</code></a> method on <code>str</code>.</p>\n<pre><code>extern crate unicode_segmentation;\n\nuse unicode_segmentation::UnicodeSegmentation;\n\nfn substr_match(pattern: &amp;str, document: &amp;str) -&gt; bool {\n    let mut haystack = document.graphemes(true);\n    pattern.len() &gt; 0 &amp;&amp; pattern.graphemes(true).all(|needle| {\n        haystack\n            .find(|grapheme| {\n                grapheme\n                    .chars()\n                    .flat_map(char::to_lowercase)\n                    .eq(needle.chars().flat_map(char::to_lowercase))\n            })\n            .is_some()\n    })\n}\n</code></pre>\n<p><a href=\"https://play.rust-lang.org/?gist=9eaf4223e7ae7ca25a4ff201eeb84a7c&amp;version=stable\" rel=\"nofollow noreferrer\">Playground, test cases provided.</a></p>\n<p>This algorithm takes advantage of several convenience methods on <code>Iterator</code>. <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.all\" rel=\"nofollow noreferrer\"><code>all</code></a> iterates over the pattern. <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.find\" rel=\"nofollow noreferrer\"><code>find</code></a> short-circuits, so whenever it finds the next <code>needle</code> in <code>haystack</code>, the next call to <code>haystack.find</code> will start at the following element.</p>\n<p>(I thought this approach was somewhat clever, but honestly, a nested <code>for</code> loop is probably easier to read, so you might prefer that.)</p>\n<p>The last &quot;tricky&quot; bit is case-insensitive string comparison, which is inherently <a href=\"https://stackoverflow.com/a/15464440/3650362\">language-dependent</a>, but if you're willing to accept only unconditional mappings (those that apply in any language), <a href=\"https://doc.rust-lang.org/std/primitive.char.html#method.to_lowercase\" rel=\"nofollow noreferrer\"><code>char::to_lowercase</code></a> does the trick. Rather than collect the result into a <code>String</code>, though, you can use <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.eq\" rel=\"nofollow noreferrer\"><code>Iterator::eq</code></a> to compare the sequences of (lowercased) characters.</p>\n<hr />\n<p>One other thing you may want to consider is <strong>Unicode normalization</strong> -- <a href=\"https://stackoverflow.com/q/7931204/3650362\">this question</a> is a good place for the broad strokes. Fortunately, Rust has a <a href=\"https://crates.io/crates/unicode-normalization\" rel=\"nofollow noreferrer\">unicode-normalization</a> crate, too! And it looks quite easy to use. (You wouldn't necessarily want to use it in this function, though; instead, you might normalize all text on input so that you're dealing with the same normalization form everywhere in your program.)</p>\n"}], "owner": {"reputation": 10750, "user_id": 213334, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/f7d036a88299407f3258b7426829f011?s=128&d=identicon&r=PG", "display_name": "sfactor", "link": "https://stackoverflow.com/users/213334/sfactor"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 843, "favorite_count": 0, "answer_count": 3, "score": 1, "last_activity_date": 1509924020, "creation_date": 1509860577, "last_edit_date": 1509891390, "question_id": 47118569, "link": "https://stackoverflow.com/questions/47118569/how-to-test-if-a-string-contains-each-character-in-a-pattern-in-order", "title": "How to test if a string contains each character in a pattern in order?", "body": "<p>I'm trying to port this Python function that returns <code>true</code> if each character in the pattern appears in the test string in order.</p>\n\n<pre class=\"lang-python prettyprint-override\"><code>def substr_match(pattern, document):\n    p_idx, d_idx, p_len, d_len = 0, 0, len(pattern), len(document)\n    while (p_idx != p_len) and (d_idx != d_len):\n        if pattern[p_idx].lower() == document[d_idx].lower():\n            p_idx += 1\n        d_idx += 1\n    return p_len != 0 and d_len != 0 and p_idx == p_len\n</code></pre>\n\n<p>This is what I have at the moment.</p>\n\n<pre><code>fn substr_match(pattern: &amp;str, document: &amp;str) -&gt; bool {\n    let mut pattern_idx = 0;\n    let mut document_idx = 0;\n    let pattern_len = pattern.len();\n    let document_len = document.len();\n\n    while (pattern_idx != pattern_len) &amp;&amp; (document_idx != document_len) {\n       let pat: Vec&lt;_&gt; = pattern.chars().nth(pattern_idx).unwrap().to_lowercase().collect();\n       let doc: Vec&lt;_&gt; = document.chars().nth(document_idx).unwrap().to_lowercase().collect();\n\n        if pat == doc {\n            pattern_idx += 1;\n        }\n        document_idx += 1;\n    }\n\n    return pattern_len != 0 &amp;&amp; document_len != 0 &amp;&amp; pattern_idx == pattern_len;\n}\n</code></pre>\n\n<p>I tried <code>s.chars().nth(n)</code> since Rust doesn't seem to allow string indexing, but I feel there is a more idiomatic way of doing it. What would be the preferred way of writing this in Rust?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 2, "last_activity_date": 1509892873, "last_edit_date": 1509892873, "creation_date": 1509854155, "answer_id": 47118017, "question_id": 47117797, "link": "https://stackoverflow.com/questions/47117797/anonymous-vs-struct-lifetime-for-assignment/47118017#47118017", "title": "Anonymous vs struct lifetime for assignment", "body": "<p>Let's take a look at the signature of <code>Parser::next</code>:</p>\n\n<pre><code>fn next(&amp;mut self) -&gt; Option&lt;&amp;Token&gt;\n</code></pre>\n\n<p>This function promises to return an <code>Option&lt;&amp;Token&gt;</code>. There are <a href=\"https://doc.rust-lang.org/stable/book/second-edition/ch10-03-lifetime-syntax.html#lifetime-elision\" rel=\"nofollow noreferrer\">elided lifetimes</a> here; let's rewrite the signature to make them explicit:</p>\n\n<pre><code>fn next&lt;'b&gt;(&amp;'b mut self) -&gt; Option&lt;&amp;'b Token&lt;'b&gt;&gt;\n</code></pre>\n\n<p>We can now see that <code>next</code> is generic over lifetime <code>'b</code>. Notice how the return type uses <code>'b</code>, not <code>'a</code>. This is valid in itself, because the compiler can infer that <code>'b</code> is a shorter than <code>'a</code>, and mutable references (<code>&amp;'a mut T</code>) are <a href=\"https://doc.rust-lang.org/nightly/nomicon/subtyping.html#variance\" rel=\"nofollow noreferrer\">covariant</a> over <code>'a</code> (\"covariant\" in this context means that we can substitute lifetime <code>'a</code> with a shorter lifetime). But what the function ends up promising is that the result lives at least as long as itself, while it can in fact live at least as long as <code>'a</code>.</p>\n\n<p>In <code>Parser::parse_row</code>, you're trying to take the result of <code>Parser::next</code> and insert it into <code>parent</code>. Let's look at <code>Parser::parse_row</code>'s signature:</p>\n\n<pre><code>fn parse_row(&amp;mut self, parent: &amp;mut Node)\n</code></pre>\n\n<p>We have some omitted lifetimes here again. Let's spell them out:</p>\n\n<pre><code>fn parse_row&lt;'b, 'c, 'd&gt;(&amp;'b mut self, parent: &amp;'c mut Node&lt;'d&gt;)\n</code></pre>\n\n<p><code>'c</code> is not going to be important, so we can ignore it.</p>\n\n<p>If we try to compile now, the last two notes are different:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>note: but, the lifetime must be valid for the lifetime 'd as defined on the method body at 88:5...\n  --&gt; src/main.rs:88:5\n   |\n88 | /     fn parse_row&lt;'b, 'c, 'd&gt;(&amp;'b mut self, parent: &amp;'c mut Node&lt;'d&gt;) {\n89 | |         loop {\n90 | |             match self.next() {\n91 | |                 Some(ref token) =&gt; match token.state {\n...  |\n99 | |         }\n100| |     }\n   | |_____^\nnote: ...so that expression is assignable (expected Node&lt;'d&gt;, found Node&lt;'_&gt;)\n  --&gt; src/main.rs:94:42\n   |\n94 |                         parent.kids.push(Node::new_token(&amp;token));\n   |                                          ^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>Now, one of the anonymous lifetimes is identified as <code>'d</code>. The other is still an anonymous lifetime, and that's an artifact of how the compiler manipulates lifetimes, but we can think of it as being <code>'b</code> here.</p>\n\n<p>The problem should be a bit clearer now: we're trying to push a <code>Node&lt;'b&gt;</code> into a collection of <code>Node&lt;'d&gt;</code> objects. It's important that the type be exactly <code>Node&lt;'d&gt;</code>, because mutable references (<code>&amp;'a mut T</code>) are invariant over <code>T</code> (\"invariant\" means it can't change).</p>\n\n<p>Let's make the lifetimes match. First, we'll change <code>next</code>'s signature to match what we can actually return:</p>\n\n<pre><code>fn next(&amp;mut self) -&gt; Option&lt;&amp;'a Token&lt;'a&gt;&gt;\n</code></pre>\n\n<p>This means that now, when we call <code>self.next()</code> in <code>parse_row</code>, we'll be able to construct a <code>Node&lt;'a&gt;</code>. A <code>Node&lt;'x&gt;</code> can only store <code>Node&lt;'x&gt;</code> objects (per your definition of <code>Node</code>), so the <code>parent</code> parameter's referent must also be of type <code>Node&lt;'a&gt;</code>.</p>\n\n<pre><code>fn parse_row(&amp;mut self, parent: &amp;mut Node&lt;'a&gt;)\n</code></pre>\n\n<p>If we try to compile now, we'll get an error in <code>Parser::parse_block</code> on the call to <code>parse_row</code>. The problem is similar to what we just saw. <code>parse_block</code>'s signature is:</p>\n\n<pre><code>fn parse_block(&amp;mut self, parent: &amp;mut Node)\n</code></pre>\n\n<p>which expands to:</p>\n\n<pre><code>fn parse_block&lt;'b, 'c, 'd&gt;(&amp;'b mut self, parent: &amp;'c mut Node&lt;'d&gt;)\n</code></pre>\n\n<p>Here's the error the compiler gives with this elaborated signature:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n  --&gt; src/main.rs:78:26\n   |\n78 |                     self.parse_row(&amp;mut row);\n   |                          ^^^^^^^^^\n   |\nnote: first, the lifetime cannot outlive the lifetime 'a as defined on the impl at 72:1...\n  --&gt; src/main.rs:72:1\n   |\n72 | / impl&lt;'a&gt; Parser&lt;'a&gt; {\n73 | |     fn parse_block&lt;'b, 'c, 'd&gt;(&amp;'b mut self, parent: &amp;'c mut Node&lt;'d&gt;) {\n74 | |         loop {\n75 | |             let mut row = Node::new(ParseState::Expr);\n...  |\n112| |     }\n113| | }\n   | |_^\nnote: ...so that types are compatible (expected &amp;mut Parser&lt;'_&gt;, found &amp;mut Parser&lt;'a&gt;)\n  --&gt; src/main.rs:78:26\n   |\n78 |                     self.parse_row(&amp;mut row);\n   |                          ^^^^^^^^^\nnote: but, the lifetime must be valid for the lifetime 'd as defined on the method body at 73:5...\n  --&gt; src/main.rs:73:5\n   |\n73 | /     fn parse_block&lt;'b, 'c, 'd&gt;(&amp;'b mut self, parent: &amp;'c mut Node&lt;'d&gt;) {\n74 | |         loop {\n75 | |             let mut row = Node::new(ParseState::Expr);\n76 | |             match self.peek() {\n...  |\n85 | |         }\n86 | |     }\n   | |_____^\nnote: ...so that types are compatible (expected &amp;mut Node&lt;'_&gt;, found &amp;mut Node&lt;'d&gt;)\n  --&gt; src/main.rs:84:20\n   |\n84 |             parent.push_if(row);\n   |                    ^^^^^^^\n</code></pre>\n\n<p>The compiler is unable to infer the type of <code>row</code> (specifically, the lifetime in its type <code>Node&lt;'x&gt;</code>). On one hand, the call to <code>parse_row</code> means it should be <code>Node&lt;'a&gt;</code>, but the call to <code>push_if</code> means it should be <code>Node&lt;'d&gt;</code>. <code>'a</code> and <code>'d</code> are unrelated, so the compiler doesn't know how to unify them.</p>\n\n<p>The solution is easy, and it's the same as above: just make <code>parent</code> have type <code>&amp;mut Node&lt;'a&gt;</code>.</p>\n\n<pre><code>fn parse_block(&amp;mut self, parent: &amp;mut Node&lt;'a&gt;)\n</code></pre>\n\n<p>Now your code compiles!</p>\n"}], "owner": {"reputation": 400, "user_id": 2748187, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/mtP0A.jpg?s=128&g=1", "display_name": "Tom Palmer", "link": "https://stackoverflow.com/users/2748187/tom-palmer"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 224, "favorite_count": 0, "accepted_answer_id": 47118017, "answer_count": 1, "score": 1, "last_activity_date": 1509892873, "creation_date": 1509851487, "last_edit_date": 1509892546, "question_id": 47117797, "link": "https://stackoverflow.com/questions/47117797/anonymous-vs-struct-lifetime-for-assignment", "title": "Anonymous vs struct lifetime for assignment", "body": "<p>For this code (trimmed some, sorry not more), I get a lifetime problem:</p>\n\n<pre><code>fn main() {\n    println!(\"Hello, world!\");\n}\n\n#[derive(Debug)]\npub struct Token&lt;'a&gt; {\n    pub line: usize,\n    // Col in code points.\n    pub col: usize,\n    // Index in bytes.\n    pub index: usize,\n    pub state: TokenState,\n    pub text: &amp;'a str,\n}\n\n#[derive(Clone, Copy, Debug, PartialEq)]\npub enum TokenState {\n    VSpace,\n}\n\n#[derive(Clone, Copy, Debug, PartialEq)]\npub enum ParseState {\n    Expr,\n}\n\npub struct Node&lt;'a&gt; {\n    kids: Vec&lt;Node&lt;'a&gt;&gt;,\n    state: ParseState,\n    token: Option&lt;&amp;'a Token&lt;'a&gt;&gt;,\n}\n\nimpl&lt;'a&gt; Node&lt;'a&gt; {\n    fn new(state: ParseState) -&gt; Node&lt;'a&gt; {\n        Node {\n            kids: vec![],\n            state,\n            token: None,\n        }\n    }\n\n    fn new_token(token: &amp;'a Token&lt;'a&gt;) -&gt; Node&lt;'a&gt; {\n        // TODO Control state? Some token state?\n        Node {\n            kids: vec![],\n            state: ParseState::Expr,\n            token: Some(&amp;token),\n        }\n    }\n\n    fn push_if(&amp;mut self, node: Node&lt;'a&gt;) {\n        if !node.kids.is_empty() {\n            self.kids.push(node);\n        }\n    }\n}\n\npub fn parse&lt;'a&gt;(tokens: &amp;'a Vec&lt;Token&lt;'a&gt;&gt;) -&gt; Node&lt;'a&gt; {\n    let mut root = Node::new(ParseState::Expr);\n    let mut parser = Parser {\n        index: 0,\n        tokens: tokens,\n    };\n    parser.parse_block(&amp;mut root);\n    root\n}\n\nstruct Parser&lt;'a&gt; {\n    index: usize,\n    tokens: &amp;'a Vec&lt;Token&lt;'a&gt;&gt;,\n}\n\nimpl&lt;'a&gt; Parser&lt;'a&gt; {\n    fn parse_block(&amp;mut self, parent: &amp;mut Node) {\n        loop {\n            let mut row = Node::new(ParseState::Expr);\n            match self.peek() {\n                Some(_) =&gt; {\n                    self.parse_row(&amp;mut row);\n                }\n                None =&gt; {\n                    break;\n                }\n            }\n            parent.push_if(row);\n        }\n    }\n\n    fn parse_row(&amp;mut self, parent: &amp;mut Node) {\n        loop {\n            match self.next() {\n                Some(ref token) =&gt; match token.state {\n                    TokenState::VSpace =&gt; break,\n                    _ =&gt; {\n                        parent.kids.push(Node::new_token(&amp;token));\n                    }\n                },\n                None =&gt; break,\n            }\n        }\n    }\n\n    fn next(&amp;mut self) -&gt; Option&lt;&amp;Token&gt; {\n        let index = self.index;\n        if index &lt; self.tokens.len() {\n            self.index += 1;\n        }\n        self.tokens.get(index)\n    }\n\n    fn peek(&amp;mut self) -&gt; Option&lt;&amp;Token&gt; {\n        self.tokens.get(self.index)\n    }\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=d491feba97049fe58adfc2e622e835a5&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a>)</p>\n\n<p>This is the error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0495]: cannot infer an appropriate lifetime for autoref due to conflicting requirements\n  --&gt; src/main.rs:90:24\n   |\n90 |             match self.next() {\n   |                        ^^^^\n   |\nnote: first, the lifetime cannot outlive the lifetime 'a as defined on the impl at 72:1...\n  --&gt; src/main.rs:72:1\n   |\n72 | / impl&lt;'a&gt; Parser&lt;'a&gt; {\n73 | |     fn parse_block(&amp;mut self, parent: &amp;mut Node) {\n74 | |         loop {\n75 | |             let mut row = Node::new(ParseState::Expr);\n...  |\n112| |     }\n113| | }\n   | |_^\nnote: ...so that the type `Parser&lt;'a&gt;` is not borrowed for too long\n  --&gt; src/main.rs:90:19\n   |\n90 |             match self.next() {\n   |                   ^^^^\nnote: but, the lifetime must be valid for the anonymous lifetime #3 defined on the method body at 88:5...\n  --&gt; src/main.rs:88:5\n   |\n88 | /     fn parse_row(&amp;mut self, parent: &amp;mut Node) {\n89 | |         loop {\n90 | |             match self.next() {\n91 | |                 Some(ref token) =&gt; match token.state {\n...  |\n99 | |         }\n100| |     }\n   | |_____^\nnote: ...so that expression is assignable (expected Node&lt;'_&gt;, found Node&lt;'_&gt;)\n  --&gt; src/main.rs:94:42\n   |\n94 |                         parent.kids.push(Node::new_token(&amp;token));\n   |                                          ^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>All the references should be tied to the same outside lifetime. In my full code (of which I just have an excerpt here), I expect to hang onto the original parsed source, and I'm trying to tie everything to that.</p>\n\n<p>I know the error messages are trying to be helpful, but I'm really unsure what the conflict is. And I'm unsure what other lifetime questions here are related to the same issue I have or not.</p>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509807945, "post_id": 47112037, "comment_id": 81174063, "body": "<i>since <code>&amp;str</code> does not implement <code>IntoIterator</code></i> \u2014 it doesn&#39;t now, but the standard library is free to do so in the future."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509808099, "post_id": 47112037, "comment_id": 81174111, "body": "I highly encourage you to search for duplicates next time  \u2014 the two I&#39;ve linked were pretty easy to find for the search term &quot;conflicting implementations of trait from&quot;."}], "owner": {"reputation": 1792, "user_id": 1525398, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/5879d46c56c285c31438db57ab24049e?s=128&d=identicon&r=PG", "display_name": "rvidal", "link": "https://stackoverflow.com/users/1525398/rvidal"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 761, "favorite_count": 0, "closed_date": 1509807872, "answer_count": 0, "score": 0, "last_activity_date": 1509808022, "creation_date": 1509807508, "question_id": 47112037, "link": "https://stackoverflow.com/questions/47112037/conflicting-trait-implementations", "closed_reason": "Duplicate", "title": "Conflicting trait implementations", "body": "<p>I have the following pair of implementations (<a href=\"https://play.rust-lang.org/?gist=7cb7606b8145269efb4caa2d51ef4715&amp;version=stable\" rel=\"nofollow noreferrer\">playground link</a>):</p>\n\n<pre><code>pub struct Foo&lt;T&gt; {it: T}\n\nimpl&lt;T: IntoIterator&gt; From&lt;T&gt; for Foo&lt;T::IntoIter&gt; {\n    fn from(x: T) -&gt; Foo&lt;T::IntoIter&gt; {\n      Foo { it: x.into_iter() }\n    }\n}\n\nuse std::str::Chars;\nimpl From&lt;&amp;'static str&gt; for Foo&lt;Chars&lt;'static&gt;&gt; {\n    fn from(x: &amp;'static str) -&gt; Foo&lt;Chars&lt;'static&gt;&gt; {\n        Foo { it: x.chars() }\n    }\n}\n</code></pre>\n\n<p>I'm getting a <code>conflicting implementations error</code> and I don't understand why. As far as I can tell, the first generic impl cannot cover <code>From&lt;&amp;'static str&gt;</code>, since <code>&amp;str</code> does <em>not</em> implement <code>IntoIterator</code>.</p>\n\n<p>Is the compiler not smart enough to figure out this? Is there a <em>reason</em> this should not be allowed (say, an esoteric orphan rule)? Is there a way around it?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 4300, "user_id": 4513509, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/MAkrs.png?s=128&g=1", "display_name": "NonCreature0714", "link": "https://stackoverflow.com/users/4513509/noncreature0714"}, "edited": false, "score": 0, "creation_date": 1509770066, "post_id": 47107366, "comment_id": 81165136, "body": "Well... Live and learn... I just Googled &quot;rust type poisoning&quot; and found this: <a href=\"https://doc.rust-lang.org/std/sync/struct.Mutex.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/sync/struct.Mutex.html</a>"}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1509801465, "post_id": 47107366, "comment_id": 81172220, "body": "The question does not make it clear what you mean by &quot;demonstrate type poisoning with code&quot;. Are you looking for a demonstration of the <i>concept</i> of poisoning (what it means to poison an object and why someone would want to do that), a particular <i>implementation</i> of poisoning (e.g. the one in Rust mutexes), or an example of <i>using</i> a poisonable type? Francois&#39;s answer shows a minimal complete implementation of the concept in Rust."}, {"owner": {"reputation": 4300, "user_id": 4513509, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/MAkrs.png?s=128&g=1", "display_name": "NonCreature0714", "link": "https://stackoverflow.com/users/4513509/noncreature0714"}, "reply_to_user": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1509814063, "post_id": 47107366, "comment_id": 81175913, "body": "That\u2019s true, his answer does show a MVCE implementation, but I wanted to wait an appropriate amount of time before accepting. While it would be very useful to have someone demonstrate the concept of poisoning and why it may be done intentionally, it\u2019s not what I was asking for, so I\u2019ll clarify."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 1, "creation_date": 1509814780, "post_id": 47107366, "comment_id": 81176172, "body": "You might be reading too much magic into the whole &quot;poisoning&quot; thing. It&#39;s just an exotic name for a a fairly ordinary concept, which is an object supporting an explicit &quot;corrupted&quot; flag. An object so flagged tries to fail as early as possible instead of allowing you to proceed and failing later in ways that are subtler and harder to debug. In a language with exceptions, that object would throw an exception whenever you access it. In Rust its public methods return error <code>Result</code>s."}, {"owner": {"reputation": 4300, "user_id": 4513509, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/MAkrs.png?s=128&g=1", "display_name": "NonCreature0714", "link": "https://stackoverflow.com/users/4513509/noncreature0714"}, "reply_to_user": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1509914276, "post_id": 47107366, "comment_id": 81202799, "body": "@user4815162342 I\u2019m not sure where implied I thought type poisoning was \u201cmagic.\u201d I was simply curious because it\u2019s a new concept, and encountering newness doesn\u2019t mean na&#239;vet&#233;. I\u2019m also not sure why my question was downvoted, and I\u2019m not implying you did, because I clearly showed research, it is related to programming or software development, it isn\u2019t overlong, and I\u2019m specific looking for a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> to help explain a subject which has few q\u2019s of its kind on SO. It lead to a good, informational answer on a subject which the Rust-Lang creators strongly infer is obscure. Way to kill curiosity SO."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1509915099, "post_id": 47107366, "comment_id": 81203086, "body": "My objection to the question is explained in my first comment, it&#39;s simply unclear what you&#39;re asking about, i.e. what&#39;s unclear to you in the nomicon explanation you linked. The whole point is now moot, though, with the question being answered and the answer accepted. And as for the downvote, don&#39;t let it get to you - downvotes happen on StackOverflow, and an individual downvote is never a big deal."}, {"owner": {"reputation": 4300, "user_id": 4513509, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/MAkrs.png?s=128&g=1", "display_name": "NonCreature0714", "link": "https://stackoverflow.com/users/4513509/noncreature0714"}, "reply_to_user": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1509921108, "post_id": 47107366, "comment_id": 81204868, "body": "@user4815162342 thanks, it is definitely moot now. I was more frustrated by the downvote, especially since I put in a good amount of time on the question."}], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 4, "last_activity_date": 1509774995, "creation_date": 1509774995, "answer_id": 47107933, "question_id": 47107366, "link": "https://stackoverflow.com/questions/47107366/how-to-demonstrate-type-poisoning/47107933#47107933", "title": "How to demonstrate type poisoning?", "body": "<p>Poisoning is implemented by checking the return value of <a href=\"https://doc.rust-lang.org/stable/std/thread/fn.panicking.html\" rel=\"nofollow noreferrer\"><code>std::thread::panicking</code></a> within a <code>Drop</code> implementation. If it returns <code>true</code>, then the value should be poisoned. Here's an example:</p>\n\n<pre><code>use std::cell::Cell;\nuse std::panic::{self, AssertUnwindSafe};\nuse std::thread;\n\n#[derive(Clone, Copy, Debug, PartialEq, Eq)]\nenum ResourceState {\n    Available,\n    Locked,\n    Poisoned,\n}\n\nstruct Resource {\n    state: Cell&lt;ResourceState&gt;,\n}\n\nstruct ResourceGuard&lt;'a&gt; {\n    resource: &amp;'a Resource,\n}\n\nimpl Resource {\n    fn new() -&gt; Resource {\n        Resource {\n            state: Cell::new(ResourceState::Available),\n        }\n    }\n\n    fn lock(&amp;self) -&gt; ResourceGuard {\n        assert_eq!(self.state.get(), ResourceState::Available);\n        self.state.set(ResourceState::Locked);\n        ResourceGuard {\n            resource: self,\n        }\n    }\n}\n\nimpl&lt;'a&gt; Drop for ResourceGuard&lt;'a&gt; {\n    fn drop(&amp;mut self) {\n        self.resource.state.set(\n            if thread::panicking() {\n                ResourceState::Poisoned\n            } else {\n                ResourceState::Available\n            });\n    }\n}\n\nfn main() {\n    let resource = Resource::new();\n    println!(\"state: {:?}\", resource.state.get()); // Available\n\n    {\n        println!(\"acquiring lock\");\n        let _guard = resource.lock();\n        println!(\"state: {:?}\", resource.state.get()); // Locked\n        println!(\"dropping lock\");\n    }\n\n    println!(\"state: {:?}\", resource.state.get()); // Available\n\n    let _ = panic::catch_unwind(AssertUnwindSafe(|| {\n        println!(\"acquiring lock\");\n        let _guard = resource.lock();\n        println!(\"state: {:?}\", resource.state.get()); // Locked\n        println!(\"panicking!\");\n        panic!(\"panicking!\");\n    }));\n\n    println!(\"state: {:?}\", resource.state.get()); // Poisoned\n}\n</code></pre>\n"}], "owner": {"reputation": 4300, "user_id": 4513509, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/MAkrs.png?s=128&g=1", "display_name": "NonCreature0714", "link": "https://stackoverflow.com/users/4513509/noncreature0714"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 380, "favorite_count": 0, "accepted_answer_id": 47107933, "answer_count": 1, "score": -1, "last_activity_date": 1509814230, "creation_date": 1509769527, "last_edit_date": 1509814230, "question_id": 47107366, "link": "https://stackoverflow.com/questions/47107366/how-to-demonstrate-type-poisoning", "title": "How to demonstrate type poisoning?", "body": "<p>I was reading <a href=\"https://doc.rust-lang.org/nomicon/README.html\" rel=\"nofollow noreferrer\">The Rustonomicon</a>, and came across its <a href=\"https://doc.rust-lang.org/nomicon/poisoning.html\" rel=\"nofollow noreferrer\">section on poisoning</a>. One written example of type poisoning is when a \"<em>Mutex will poison itself if one of its MutexGuards (the thing it returns when a lock is obtained) is dropped during a panic.</em>\" (Rustonomicon, section 7.2, paragraph 3) </p>\n\n<p>I'm pretty out of my depth, but suddenly very curious.</p>\n\n<p>In an effort to find an implemented demonstration of type poisoning, Googling \"how to poison a type\" yields useless results ranging from lists of chemical poison types, to Pokemon. \"Code example of type poisoning\" is much the same result.</p>\n\n<p><strong>Is there someone who can demonstrate type poisoning with a code snippet</strong>? I don't care if the example is in Rust or not, but maybe that's important... as in some languages can only be poisoned in certain ways maybe?</p>\n\n<p>I see that poisoning happens in other languages, or at least <a href=\"https://stackoverflow.com/questions/33964621/what-does-it-mean-to-poison-a-function-in-c\">C++ function poisoning</a>, and <a href=\"https://stackoverflow.com/questions/38251541/elegant-way-to-prevent-namespace-poisoning-in-c\">namespace poisoning</a>. (searching for \"Java type poisoning\" yields useless but interesting results from detecting <a href=\"https://wagwalking.com/condition/java-beans-poisoning\" rel=\"nofollow noreferrer\">java bean poisoned dogs</a>, to <a href=\"http://www.minecraftforum.net/forums/minecraft-java-edition/redstone-discussion-and/350722-poisoning-mobs\" rel=\"nofollow noreferrer\">how to poison mobs in Minecraft</a>.) </p>\n\n<p>And yet those examples lack links to examples in code. I was hoping to see it in action.</p>\n"}, {"tags": ["rust", "state-machine", "lifetime", "ownership-semantics"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509803067, "post_id": 47106978, "comment_id": 81172717, "body": "<i><code>Box&lt;AppState + &#39;static&gt;</code>, making the boxes useless because states contain mutable state.</i> \u2014 this is not a valid conclusion. Having mutable state has nothing to do with the lifetimes contained within the trait object."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1509805936, "post_id": 47106978, "comment_id": 81173463, "body": "Re: &quot;I&#39;m implementing states with a boxed trait object instead of an enum because I expect to have quite a lot of them&quot; -- this is a non sequitur. The tradeoff between trait objects and sum types doesn&#39;t really change with the number of variants; it&#39;s more about what guarantees you want. (That&#39;s not to say I think you&#39;re wrong -- just nitpicking the phrasing a bit.)"}, {"owner": {"reputation": 23, "user_id": 2852827, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f795b03e34f910f817ba8ab64ddc5582?s=128&d=identicon&r=PG&f=1", "display_name": "Guy", "link": "https://stackoverflow.com/users/2852827/guy"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509826264, "post_id": 47106978, "comment_id": 81180035, "body": "@Shepmaster you&#39;re right. I think what I should have said is that the state in the box holds borrowed data which has a lifetime less than <code>&#39;static</code>. If the states contained owned simple immutable state I could define them statically. I&#39;m still trying to understand lifetimes so this correction might be wrong too."}, {"owner": {"reputation": 23, "user_id": 2852827, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f795b03e34f910f817ba8ab64ddc5582?s=128&d=identicon&r=PG&f=1", "display_name": "Guy", "link": "https://stackoverflow.com/users/2852827/guy"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1509826435, "post_id": 47106978, "comment_id": 81180083, "body": "@trentcl The main tradeoff is that with enums I would have to match on all the possible kinds of states when I call the individual methods defined on  AppState. So if there are, say, 20 states enumerated in AppState, and the public interface of AppState has 10 methods, I would need 10 matches on each of 20 states to static-dispatch to the appropriate state-specific method implementations. I may be missing something, but that was my understanding. edit: Although to be honest now that I think about it the simplicity of defining app states up front and statically is kind of appealing."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1509828809, "post_id": 47106978, "comment_id": 81180833, "body": "Sure, but you&#39;d have to write all that behavior anyway, right? With trait objects it&#39;s just split among 20 different <code>impl</code>s with 10 methods apiece, instead of a single <code>impl</code> that contains 10 methods each with a 20-armed <code>match</code> expression. Not to mention that trait objects have a runtime cost and can&#39;t have methods that take <code>Self</code> or are generic over types. Trait objects are good when you can&#39;t or don&#39;t need to know which variant you&#39;re dealing with, but if you might need to <a href=\"https://stackoverflow.com/q/40024093/3650362\">downcast</a> to a concrete type, you&#39;d be better served by an enum."}, {"owner": {"reputation": 23, "user_id": 2852827, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f795b03e34f910f817ba8ab64ddc5582?s=128&d=identicon&r=PG&f=1", "display_name": "Guy", "link": "https://stackoverflow.com/users/2852827/guy"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1509831236, "post_id": 47106978, "comment_id": 81181592, "body": "@trentcl That&#39;s true. I was mainly hoping to avoid all the arms of the match expression. I&#39;m not worried about the speed overhead of dynamic dispatch in my current project. However, my design has a critical flaw I just found: most states hold ownership of important mutable API objects like the video canvas, etc. However, switching states by returning a new state requires creating the new state inside of <code>update</code> and moving the app data into it. I actually can&#39;t do this, since i&#39;d be moving out of the active state. So enums are looking more appealing."}, {"owner": {"reputation": 23, "user_id": 2852827, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f795b03e34f910f817ba8ab64ddc5582?s=128&d=identicon&r=PG&f=1", "display_name": "Guy", "link": "https://stackoverflow.com/users/2852827/guy"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1509831378, "post_id": 47106978, "comment_id": 81181629, "body": "@trentcl I mean, I guess I could use an Rc&lt;RefCell&lt;Stuff&gt;&gt; to hold the mutable app data, but the overhead of that is not better than a big match expression (compared to all of the <code>borrow()</code> and <code>borrow_mut()</code>s that will be spread throughout AppState impls when using Rc&lt;RefCell&lt;&gt;&gt;). With enums I could define explicit transitions."}], "answers": [{"comments": [{"owner": {"reputation": 23, "user_id": 2852827, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f795b03e34f910f817ba8ab64ddc5582?s=128&d=identicon&r=PG&f=1", "display_name": "Guy", "link": "https://stackoverflow.com/users/2852827/guy"}, "edited": false, "score": 0, "creation_date": 1509774940, "post_id": 47107781, "comment_id": 81166100, "body": "Excellent, thanks a ton! Your change fixed it and your explanation is quite good. It looks like I need to read up more on variance. I&#39;ve seen that page before and I was struggling with it earlier today, but I didn&#39;t realize it was related to this issue."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 2, "last_activity_date": 1584927824, "last_edit_date": 1584927824, "creation_date": 1509773630, "answer_id": 47107781, "question_id": 47106978, "link": "https://stackoverflow.com/questions/47106978/getting-around-rust-ownership-problems-when-using-state-machine-pattern/47107781#47107781", "title": "Getting around Rust ownership problems when using state machine pattern", "body": "<p>In <code>StateMachine::switch_state</code>, you <em>don't</em> want to use the <code>'s</code> lifetime on <code>&amp;mut self</code>; <code>'s</code> represents the lifetime of resources borrowed by a state, not the lifetime of the state machine. Notice that by doing that, the type of <code>self</code> ends up with <code>'s</code> twice: the full type is <code>&amp;'s mut StateMachine&lt;'s&gt;</code>; you only need to use <code>'s</code> on <code>StateMachine</code>, <em>not</em> on the reference.</p>\n\n<p>In a mutable reference (<code>&amp;'a mut T</code>), <code>T</code> is <a href=\"https://doc.rust-lang.org/nightly/nomicon/subtyping.html#variance\" rel=\"nofollow noreferrer\">invariant</a>, hence <code>'s</code> is invariant too. This means that the compiler considers that the state machine has the same lifetime as whatever it borrows. Therefore, after calling <code>switch_state</code>, the compiler considers that the state machine <em>ends up borrowing itself</em>.</p>\n\n<p>In short, change <code>&amp;'s mut self</code> to <code>&amp;mut self</code>:</p>\n\n<pre><code>impl&lt;'s&gt; StateMachine&lt;'s&gt; {\n    pub fn switch_state(&amp;mut self, new_state: Box&lt;AppState&lt;'s&gt; + 's&gt;) -&gt; Box&lt;AppState&lt;'s&gt; + 's&gt; {\n        mem::replace(&amp;mut self.current_state, new_state)\n    }\n}\n</code></pre>\n\n<p>You also need to declare <code>state_machine</code> in <code>main</code> as mutable:</p>\n\n<pre><code>let mut state_machine = states::StateMachine::new();\n</code></pre>\n"}], "owner": {"reputation": 23, "user_id": 2852827, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f795b03e34f910f817ba8ab64ddc5582?s=128&d=identicon&r=PG&f=1", "display_name": "Guy", "link": "https://stackoverflow.com/users/2852827/guy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 490, "favorite_count": 0, "accepted_answer_id": 47107781, "answer_count": 1, "score": 2, "last_activity_date": 1584927824, "creation_date": 1509764817, "last_edit_date": 1584927269, "question_id": 47106978, "link": "https://stackoverflow.com/questions/47106978/getting-around-rust-ownership-problems-when-using-state-machine-pattern", "title": "Getting around Rust ownership problems when using state machine pattern", "body": "<p>This question is about a specific pattern of ownership that may arise when implementing a state machine for a video game in Rust, where states can hold a reference to \"global\" borrowed context and where state machines own their states. I've tried to cut out as many details as I can while still motivating the problem, but it's a fairly large and tangled issue.</p>\n\n<p>Here is the state trait:</p>\n\n<pre><code>pub trait AppState&lt;'a&gt; {\n    fn update(&amp;mut self, Duration) -&gt; Option&lt;Box&lt;AppState&lt;'a&gt; + 'a&gt;&gt;;\n    fn enter(&amp;mut self, Box&lt;AppState&lt;'a&gt; + 'a&gt;);\n    //a number of other methods\n}\n</code></pre>\n\n<p>I'm implementing states with a boxed trait object instead of an enum because I expect to have quite a lot of them. States return a <code>Some(State)</code> in their update method in order to cause their owning state machine to switch to a new state. I added a lifetime parameter because without it, the compiler was generating boxes with type: <code>Box&lt;AppState + 'static&gt;</code>, making the boxes useless because states contain mutable state. </p>\n\n<p>Speaking of state machines, here it is:</p>\n\n<pre><code>pub struct StateMachine&lt;'s&gt; {\n    current_state: Box&lt;AppState&lt;'s&gt; + 's&gt;,\n}\n\nimpl&lt;'s&gt; StateMachine&lt;'s&gt; {\n    pub fn switch_state(&amp;'s mut self, new_state: Box&lt;AppState&lt;'s&gt; + 's&gt;) -&gt; Box&lt;AppState&lt;'s&gt; + 's&gt; {\n        mem::replace(&amp;mut self.current_state, new_state);\n    }\n}\n</code></pre>\n\n<p>A state machine always has a valid state. By default, it starts with a <code>Box&lt;NullState&gt;</code>, which is a state that does nothing. I have omitted <code>NullState</code> for brevity. By itself, this seems to compile fine. </p>\n\n<p>The <code>InGame</code> state is designed to implement a basic gameplay scenario:</p>\n\n<pre><code>type TexCreator = TextureCreator&lt;WindowContext&gt;;\n\npub struct InGame&lt;'tc&gt; {\n    app: AppControl,\n    tex_creator: &amp;'tc TexCreator,\n\n    tileset: Tileset&lt;'tc&gt;,\n}\n\nimpl&lt;'tc&gt; InGame&lt;'tc&gt; {\n    pub fn new(app: AppControl, tex_creator: &amp;'tc TexCreator) -&gt; InGame&lt;'tc&gt; {\n        // ... load tileset ...\n\n        InGame {\n            app,\n            tex_creator,\n            tileset,\n        }\n    }\n}\n</code></pre>\n\n<p>This game depends on Rust SDL2. This particular set of bindings requires that textures be created by a <code>TextureCreator</code>, and that the textures not outlive their creator. Texture requires a lifetime parameter to ensure this. <code>Tileset</code> holds a texture and therefore exports this requirement. This means that I cannot store a <code>TextureCreator</code> within the state itself (though I'd like to), since a mutably-borrowed <code>InGame</code> could have texture creator moved out. Therefore, the texture creator is owned in <code>main</code>, where a reference to it is passed to when we create our main state:</p>\n\n<pre><code>fn main() {\n    let app_control = // ...\n    let tex_creator = // ...\n    let in_game = Box::new(states::InGame::new(app_control, &amp;tex_creator));\n    let state_machine = states::StateMachine::new();\n    state_machine.switch_state(in_game);\n}\n</code></pre>\n\n<p>I feel this program should be valid, because I have ensured that <code>tex_creator</code> outlives any possible state, and that state machine is the least long-lived variable. However, I get the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `state_machine` does not live long enough\n  --&gt; src\\main.rs:46:1\n   |\n39 |     state_machine.switch_state( in_game );\n   |     ------------- borrow occurs here\n...\n46 | }\n   | ^ `state_machine` dropped here while still borrowed\n   |\n   = note: values in a scope are dropped in the opposite order they are created\n</code></pre>\n\n<p>This doesn't make sense to me, because <code>state_machine</code> is only borrowed by the method invocation, but the compiler is saying that it's still borrowed when the method is over. I wish it let me trace who the borrower in the error message--I don't understand why the borrow isn't returned when the method returns. </p>\n\n<p>Essentially, I want the following:</p>\n\n<ul>\n<li>That states be implemented by trait.</li>\n<li>That states be owned by the state machine.</li>\n<li>That states be able to contain references to arbitrary non-static data with lifetime greater than that of the state machine. </li>\n<li>That when a state is swapped out, the old box be still valid so that it can be moved into the constructor of the new state. This will allow the new state to switch back to the preceding state without requiring it to be re-constructed. </li>\n<li>That a state can signal a state change by returning a new state from 'update'. The old state must be able to construct this new state within itself. </li>\n</ul>\n\n<p>Are these constraints possible to satisfy, and if so, how?</p>\n\n<p>I apologize for the long-winded question and the likelihood that I've missed something obvious, as there are a number of decisions made in the implementation above where I'm not confident I understand the semantics of the lifetimes. I've tried to search for examples of this pattern online, but it seems a lot more complicated and constrained than the toy examples I've seen. </p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509751042, "post_id": 47103771, "comment_id": 81161936, "body": "Does your &quot;real&quot; <code>Channel</code> actually track all the sent operations? Or is it closer to a serial port that you read and write to?"}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509751163, "post_id": 47103771, "comment_id": 81161966, "body": "@Shepmaster This is where things get fun. In practice the &quot;real&quot; serial channel tracks two &quot;special&quot; operations, which correspond to mode switches (you can switch each mux channel to either PDU or text mode, which turns on completely different command sets). The rest is untracked, fortunately."}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509751217, "post_id": 47103771, "comment_id": 81161992, "body": "As for the operations, some of them can and <i>will</i> fail. For instance, SIMlock is considered an error when querying for SIM status! However, I&#39;m guessing that just as your initial pointer covered <code>and_then</code>, I&#39;ll be able to  fully leverage <code>or_else</code> as well."}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509751652, "post_id": 47103771, "comment_id": 81162122, "body": "@Shepmaster I cannot execute command in parallel on the same channel (mostly due to the underlying protocol - I have no way to track when/what answered, just that an answer happened). As such, sadly, it&#39;s sequential ops all the way."}], "answers": [{"comments": [{"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 0, "creation_date": 1509753222, "post_id": 47105863, "comment_id": 81162465, "body": "Thank you very much for the help and for the detailed explanation :-)"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1509753577, "last_edit_date": 1509753577, "creation_date": 1509752755, "answer_id": 47105863, "question_id": 47103771, "link": "https://stackoverflow.com/questions/47103771/how-can-i-chain-two-futures-on-the-same-resource-without-having-to-define-every/47105863#47105863", "title": "How can I chain two futures on the same resource without having to define every single method combination ahead of time?", "body": "<blockquote>\n  <p>why do the commands run not pop up in the result of the last future</p>\n</blockquote>\n\n<p>Because you haven't sequenced the operations to occur in that way:</p>\n\n<pre><code>let a = self.one(\"AT+CMEE=2\");\nlet b = self.one(\"AT+CREG=0\");\nlet c = self.ops();\n</code></pre>\n\n<p>This <em>immediately</em> builds:</p>\n\n<ul>\n<li><code>a</code>, <code>b</code> \u2014 promises that sleep a while before they respond</li>\n<li><code>c</code> \u2014 a promise that gets the ops in the vector</li>\n</ul>\n\n<p>At the point in time that <code>c</code> is created, the sleeps have yet to terminate, so there have been no operations performed, so the vector will be empty.</p>\n\n<p><code>Future::and_then</code> is intended to be used to define sequential operations. This is complicated in your case as you want to use <code>self</code> in the body of the <code>and_then</code> closure. You can clone the <code>Arc&lt;Channel&gt;</code> and use that instead. </p>\n\n<p>You'll note that I've made a number of simplifications:</p>\n\n<ul>\n<li>Returning a <code>String</code> instead of <code>Vec&lt;String&gt;</code></li>\n<li>Removing unused <code>mut</code> qualifiers and a <code>Mutex</code></li>\n<li>Returning the operations <code>Vec</code> directly.</li>\n</ul>\n\n\n\n<pre><code>extern crate futures;\nextern crate tokio_core;\n\nuse std::sync::{Arc, Mutex};\nuse futures::Future;\nuse tokio_core::reactor::Core;\nuse futures::sync::oneshot;\nuse std::thread;\nuse std::io;\nuse std::time::Duration;\n\npub struct Channel {\n    operations: Arc&lt;Mutex&lt;Vec&lt;String&gt;&gt;&gt;,\n}\n\nimpl Channel {\n    fn ops(&amp;self) -&gt; Vec&lt;String&gt; {\n        self.operations.lock().unwrap().clone()\n    }\n\n    fn command(&amp;self, command: &amp;str) -&gt; Box&lt;Future&lt;Item = String, Error = io::Error&gt;&gt; {\n        let (tx, rx) = oneshot::channel();\n\n        let ops = Arc::clone(&amp;self.operations);\n        let str_cmd = String::from(command);\n\n        thread::spawn(move || {\n            thread::sleep(Duration::new(0, 10000));\n\n            println!(\"Pushing op: {}\", str_cmd);\n            ops.lock().unwrap().push(str_cmd);\n\n            tx.send(\"OK\".to_string())\n        });\n\n        Box::new(rx.map_err(|_| io::Error::new(io::ErrorKind::NotFound, \"Test\")))\n    }\n}\n\nstruct Channels {\n    data: Arc&lt;Channel&gt;,\n}\n\nimpl Channels {\n    fn run_command(&amp;self) -&gt; Box&lt;Future&lt;Item = (), Error = io::Error&gt;&gt; {\n        let d2 = Arc::clone(&amp;self.data);\n        let d3 = Arc::clone(&amp;self.data);\n\n        Box::new(\n            self.data\n                .command(\"AT+CMEE=2\")\n                .and_then(move |cmee_answer| {\n                    assert_eq!(cmee_answer, \"OK\"); // This should be checked in `command` and be a specific Error\n                    d2.command(\"AT+CREG=0\")\n                })\n                .map(move |creg_answer| {\n                    assert_eq!(creg_answer, \"OK\"); // This should be checked in `command` and be a specific Error\n                    let ops = d3.ops();\n                    assert_eq!(ops, [\"AT+CMEE=2\", \"AT+CREG=0\"])\n                }),\n        )\n    }\n}\n\nfn main() {\n    let mut core = Core::new().expect(\"Core should be created\");\n    let channels = Channels {\n        data: Arc::new(Channel {\n            operations: Arc::new(Mutex::new(vec![])),\n        }),\n    };\n    let result = core.run(channels.run_command()).expect(\"Should've worked\");\n\n    println!(\"{:?}\", result);\n}\n</code></pre>\n\n<p>However, this isn't the type of code I usually see with futures. Instead of taking <code>&amp;self</code>, many futures take <code>self</code>. Let's see how that would look:</p>\n\n<pre><code>extern crate futures;\nextern crate tokio_core;\n\nuse std::sync::{Arc, Mutex};\nuse futures::Future;\nuse tokio_core::reactor::Core;\nuse futures::sync::oneshot;\nuse std::thread;\nuse std::io;\nuse std::time::Duration;\n\n#[derive(Clone)]\npub struct Channel {\n    operations: Arc&lt;Mutex&lt;Vec&lt;String&gt;&gt;&gt;,\n}\n\nimpl Channel {\n    fn ops(&amp;self) -&gt; Arc&lt;Mutex&lt;Vec&lt;String&gt;&gt;&gt; {\n        Arc::clone(&amp;self.operations)\n    }\n\n    fn command(self, command: &amp;str) -&gt; Box&lt;Future&lt;Item = (Self, String), Error = io::Error&gt;&gt; {\n        let (tx, rx) = oneshot::channel();\n        let str_cmd = String::from(command);\n\n        thread::spawn(move || {\n            thread::sleep(Duration::new(0, 10000));\n\n            println!(\"Pushing op: {}\", str_cmd);\n            self.operations.lock().unwrap().push(str_cmd);\n\n            tx.send((self, \"OK\".to_string()))\n        });\n\n        Box::new(rx.map_err(|_| io::Error::new(io::ErrorKind::NotFound, \"Test\")))\n    }\n}\n\nstruct Channels {\n    data: Channel,\n}\n\nimpl Channels {\n    fn run_command(self) -&gt; Box&lt;Future&lt;Item = (), Error = io::Error&gt;&gt; {\n        Box::new(\n            self.data\n                .clone()\n                .command(\"AT+CMEE=2\")\n                .and_then(|(channel, cmee_answer)| {\n                    assert_eq!(cmee_answer, \"OK\");\n                    channel.command(\"AT+CREG=0\")\n                })\n                .map(|(channel, creg_answer)| {\n                    assert_eq!(creg_answer, \"OK\");\n                    let ops = channel.ops();\n                    let ops = ops.lock().unwrap();\n                    assert_eq!(*ops, [\"AT+CMEE=2\", \"AT+CREG=0\"]);\n                }),\n        )\n    }\n}\n\nfn main() {\n    let mut core = Core::new().expect(\"Core should be created\");\n    let channels = Channels {\n        data: Channel {\n            operations: Arc::new(Mutex::new(vec![])),\n        },\n    };\n    let result = core.run(channels.run_command()).expect(\"Should've worked\");\n\n    println!(\"{:?}\", result);\n}\n</code></pre>\n"}], "owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 66, "favorite_count": 0, "accepted_answer_id": 47105863, "answer_count": 1, "score": 0, "last_activity_date": 1509753577, "creation_date": 1509739925, "last_edit_date": 1509749998, "question_id": 47103771, "link": "https://stackoverflow.com/questions/47103771/how-can-i-chain-two-futures-on-the-same-resource-without-having-to-define-every", "title": "How can I chain two futures on the same resource without having to define every single method combination ahead of time?", "body": "<p>I am writing the code to bootstrap and connect to a 2G/3G network using a SIM800L modem. This modem is interfaced with a single serial channel, which I've muxed outside of this project into 4 channels (data, text interface, control interface, status messages).</p>\n\n<p>In order to bootstrap this, I need to run a series of sequential commands. This sequence changes based on the output of the modem (is the SIM locked? What kind of info does the SIM need to be unlocked? What kind of APN are we getting on? What kind of network selection do we want?). I initially thought that this would be a perfect application for <code>futures</code> as each individual operation can be very costly in terms of time spent idling (<code>AT+COPS</code>, one of the command, takes up to 10s to return).</p>\n\n<p>I'm on to something like this, which, while it compiles and seems to execute commands sequentially, the third operation comes out empty. My question is twofold: why do the commands run not pop up in the result of the last future, and is there a more robust way of doing something like this?</p>\n\n<pre><code>#![feature(conservative_impl_trait)]\n\nextern crate futures;\nextern crate tokio_core;\n\nuse std::sync::{Arc, Mutex};\nuse futures::{future, Future};\nuse tokio_core::reactor::Core;\nuse futures::sync::oneshot;\nuse std::thread;\nuse std::io;\nuse std::time::Duration;\n\npub struct Channel {\n    operations: Arc&lt;Mutex&lt;Vec&lt;String&gt;&gt;&gt;,\n}\n\nimpl Channel {\n    pub fn ops(&amp;mut self) -&gt; Box&lt;Future&lt;Item = Vec&lt;String&gt;, Error = io::Error&gt;&gt; {\n        println!(\"{:?}\", self.operations);\n        let ops = Arc::clone(&amp;self.operations);\n        let ops = ops.lock().unwrap();\n        future::ok::&lt;Vec&lt;String&gt;, io::Error&gt;(ops.to_vec()).boxed()\n    }\n\n    pub fn run(&amp;mut self, command: &amp;str) -&gt; Box&lt;Future&lt;Item = Vec&lt;String&gt;, Error = io::Error&gt;&gt; {\n        let (tx, rx) = oneshot::channel::&lt;Vec&lt;String&gt;&gt;();\n\n        let ops = Arc::clone(&amp;self.operations);\n        let str_cmd = String::from(command);\n        thread::spawn(move || {\n            thread::sleep(Duration::new(0, 10000));\n\n            let mut ops = ops.lock().unwrap();\n            ops.push(str_cmd.clone());\n            println!(\"Pushing op: {}\", str_cmd.clone());\n            tx.send(vec![\"OK\".to_string()])\n        });\n\n        rx.map_err(|_| io::Error::new(io::ErrorKind::NotFound, \"Test\"))\n            .boxed()\n    }\n}\n\npub struct Channels {\n    inner_object: Arc&lt;Mutex&lt;Channel&gt;&gt;,\n}\n\nimpl Channels {\n    pub fn one(&amp;self, cmd: &amp;str) -&gt; Box&lt;Future&lt;Item = Vec&lt;String&gt;, Error = io::Error&gt;&gt; {\n        let v = Arc::clone(&amp;self.inner_object);\n        let mut v = v.lock().unwrap();\n        v.run(&amp;cmd)\n    }\n\n    pub fn ops(&amp;self) -&gt; Box&lt;Future&lt;Item = Vec&lt;String&gt;, Error = io::Error&gt;&gt; {\n        let v = Arc::clone(&amp;self.inner_object);\n        let mut v = v.lock().unwrap();\n        v.ops()\n    }\n\n    pub fn run_command(&amp;self) -&gt; Box&lt;Future&lt;Item = (), Error = io::Error&gt;&gt; {\n        let a = self.one(\"AT+CMEE=2\");\n        let b = self.one(\"AT+CREG=0\");\n        let c = self.ops();\n        Box::new(a.and_then(|result_1| {\n            assert_eq!(result_1, vec![String::from(\"OK\")]);\n            b.and_then(|result_2| {\n                assert_eq!(result_2, vec![String::from(\"OK\")]);\n                c.map(move |ops| {\n                    assert_eq!(\n                        ops.as_slice(),\n                        [\"AT+CMEE=2\".to_string(), \"AT+CREG=0\".to_string()]\n                    );\n                })\n            })\n        }))\n    }\n}\n\nfn main() {\n    let mut core = Core::new().expect(\"Core should be created\");\n    let channels = Channels {\n        inner_object: Arc::new(Mutex::new(Channel {\n            operations: Arc::new(Mutex::new(vec![])),\n        })),\n    };\n    let result = core.run(channels.run_command()).expect(\"Should've worked\");\n\n    println!(\"{:?}\", result);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=2363eb36cd22b82b35fd316a9e34e17d&amp;version=nightly\" rel=\"nofollow noreferrer\">playground</a></p>\n"}, {"tags": ["rust", "hyper"], "comments": [{"owner": {"reputation": 97030, "user_id": 189205, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c60305494593d556e57a3cf8e4a8c163?s=128&d=identicon&r=PG", "display_name": "interjay", "link": "https://stackoverflow.com/users/189205/interjay"}, "edited": false, "score": 1, "creation_date": 1509729041, "post_id": 47100807, "comment_id": 81152221, "body": "It looks like that may be for an old version. Did you try reading the <a href=\"https://hyper.rs/guides/client/basic/\" rel=\"nofollow noreferrer\">official documentation</a>?"}, {"owner": {"reputation": 11, "user_id": 8780416, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/34aa91c563852345b892810c8e955671?s=128&d=identicon&r=PG&f=1", "display_name": "crazy_greg", "link": "https://stackoverflow.com/users/8780416/crazy-greg"}, "reply_to_user": {"reputation": 97030, "user_id": 189205, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c60305494593d556e57a3cf8e4a8c163?s=128&d=identicon&r=PG", "display_name": "interjay", "link": "https://stackoverflow.com/users/189205/interjay"}, "edited": false, "score": 0, "creation_date": 1509729264, "post_id": 47100807, "comment_id": 81152343, "body": "Yeah I tried looking at that. The simple get example doesn&#39;t run either. That&#39;s why I turned to stackoverflow..."}], "owner": {"reputation": 11, "user_id": 8780416, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/34aa91c563852345b892810c8e955671?s=128&d=identicon&r=PG&f=1", "display_name": "crazy_greg", "link": "https://stackoverflow.com/users/8780416/crazy-greg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 260, "favorite_count": 0, "closed_date": 1509730192, "answer_count": 0, "score": 1, "last_activity_date": 1509729934, "creation_date": 1509727925, "last_edit_date": 1509729934, "question_id": 47100807, "link": "https://stackoverflow.com/questions/47100807/any-advise-for-using-hyper-in-rust", "closed_reason": "Duplicate", "title": "Any advise for using Hyper in Rust", "body": "<p>I've been looking for any working examples and good documentation for the hyper crate in rust and came across an example <a href=\"https://stackoverflow.com/questions/38148163/displaying-the-response-body-with-hyper-only-shows-the-size-of-the-body\">here</a>.\nHowever, when I run that example I get several errors.</p>\n\n<pre><code>error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n --&gt; src/main.rs:8:18\n  |\n8 |     let client = Client::new();\n  |                  ^^^^^^^^^^^^^ expected 1 parameter\n\nerror[E0308]: mismatched types\n  --&gt; src/main.rs:11:26\n   |\n11 |     let res = client.get(\"https://www.reddit.com/r/programming/.rss\")\n   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `hyper::Uri`, found reference\n   |\n   = note: expected type `hyper::Uri`\n              found type `&amp;'static str`\n\nerror[E0599]: no method named `send` found for type `hyper::client::FutureResponse` in the current scope\n  --&gt; src/main.rs:12:22\n   |\n12 |                     .send()\n   |                      ^^^^\n\nerror: aborting due to 3 previous errors\n</code></pre>\n\n<p>Does anyone know what I'm doing wrong? I'm really struggling to understand how to make functional rust code when example code doesn't work for me.</p>\n\n<p>Looks like that example is out of date, so taking the example from hyper documentation and adding fn main() so that it might work:</p>\n\n<pre><code>extern crate futures;\nextern crate hyper;\nextern crate tokio_core;\n\nuse std::io::{self, Write};\nuse futures::{Future, Stream};\nuse hyper::Client;\nuse tokio_core::reactor::Core;\n\nfn main(){\n    let mut core = Core::new()?;\n    let client = Client::new(&amp;core.handle());\n\n    let uri = \"http://httpbin.org/ip\".parse()?;\n    let work = client.get(uri).and_then(|res| {\n        println!(\"Response: {}\", res.status());\n\n        res.body().for_each(|chunk| {\n            io::stdout()\n                .write_all(&amp;chunk)\n                .map_err(From::from)\n        })\n    });\n    core.run(work)?;\n}\n</code></pre>\n\n<p>Which fails with the errors:</p>\n\n<pre><code>error[E0277]: the trait bound `(): std::ops::Try` is not satisfied\n  --&gt; src/main.rs:11:20\n   |\n11 |     let mut core = Core::new()?;\n   |                    ------------\n   |                    |\n   |                    the `?` operator can only be used in a function that returns `Result` (or another type that implements `std::ops::Try`)\n   |                    in this macro invocation\n   |\n   = help: the trait `std::ops::Try` is not implemented for `()`\n   = note: required by `std::ops::Try::from_error`\n\nerror[E0277]: the trait bound `(): std::ops::Try` is not satisfied\n  --&gt; src/main.rs:14:15\n   |\n14 |     let uri = \"http://httpbin.org/ip\".parse()?;\n   |               --------------------------------\n   |               |\n   |               the `?` operator can only be used in a function that returns `Result` (or another type that implements `std::ops::Try`)\n   |               in this macro invocation\n   |\n   = help: the trait `std::ops::Try` is not implemented for `()`\n   = note: required by `std::ops::Try::from_error`\n\nerror[E0277]: the trait bound `(): std::ops::Try` is not satisfied\n  --&gt; src/main.rs:24:5\n   |\n24 |     core.run(work)?;\n   |     ---------------\n   |     |\n   |     the `?` operator can only be used in a function that returns `Result` (or another type that implements `std::ops::Try`)\n   |     in this macro invocation\n   |\n   = help: the trait `std::ops::Try` is not implemented for `()`\n   = note: required by `std::ops::Try::from_error`\n\nerror: aborting due to 3 previous errors\n</code></pre>\n\n<p>Thanks in advance.</p>\n"}, {"tags": ["rust", "operator-overloading", "traits"], "comments": [{"owner": {"reputation": 838, "user_id": 3613212, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/NfaGR.png?s=128&g=1", "display_name": "Gr&#233;gory OBANOS", "link": "https://stackoverflow.com/users/3613212/gr%c3%a9gory-obanos"}, "edited": false, "score": 1, "creation_date": 1509726339, "post_id": 47099811, "comment_id": 81150538, "body": "You can (and should) derive Copy, Clone for Point"}, {"owner": {"reputation": 3213, "user_id": 6084430, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/B0TaE.jpg?s=128&g=1", "display_name": "DimChtz", "link": "https://stackoverflow.com/users/6084430/dimchtz"}, "reply_to_user": {"reputation": 838, "user_id": 3613212, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/NfaGR.png?s=128&g=1", "display_name": "Gr&#233;gory OBANOS", "link": "https://stackoverflow.com/users/3613212/gr%c3%a9gory-obanos"}, "edited": false, "score": 1, "creation_date": 1509726518, "post_id": 47099811, "comment_id": 81150641, "body": "Okay thanks, I will search for &quot;derive Copy, Clone&quot;. In the meantime do you know why my solution with references doesn&#39;t work?"}, {"owner": {"reputation": 2966, "user_id": 3022310, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7f10ec2b45320ee843e539d705c31d08?s=128&d=identicon&r=PG", "display_name": "turbulencetoo", "link": "https://stackoverflow.com/users/3022310/turbulencetoo"}, "edited": false, "score": 0, "creation_date": 1509727660, "post_id": 47099811, "comment_id": 81151403, "body": "playground: <a href=\"https://play.rust-lang.org/?gist=7831cf420a332bfedf7e71ef8f11fb76&amp;version=stable\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 3213, "user_id": 6084430, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/B0TaE.jpg?s=128&g=1", "display_name": "DimChtz", "link": "https://stackoverflow.com/users/6084430/dimchtz"}, "reply_to_user": {"reputation": 2966, "user_id": 3022310, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7f10ec2b45320ee843e539d705c31d08?s=128&d=identicon&r=PG", "display_name": "turbulencetoo", "link": "https://stackoverflow.com/users/3022310/turbulencetoo"}, "edited": false, "score": 0, "creation_date": 1509728044, "post_id": 47099811, "comment_id": 81151642, "body": "@turbulencetoo I already know it doesn&#39;t work."}, {"owner": {"reputation": 838, "user_id": 3613212, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/NfaGR.png?s=128&g=1", "display_name": "Gr&#233;gory OBANOS", "link": "https://stackoverflow.com/users/3613212/gr%c3%a9gory-obanos"}, "edited": false, "score": 0, "creation_date": 1509732161, "post_id": 47099811, "comment_id": 81153858, "body": "Sorry for my short answer, as pointed out in the duplicate, you can implement Add for a reference, as shown in that playground : <a href=\"https://play.rust-lang.org/?gist=846cab2eef7ed74713ff2fd4d8e594a6&amp;version=stable\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>. You can&#39;t change a trait function signature, but you can change the types."}], "owner": {"reputation": 3213, "user_id": 6084430, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/B0TaE.jpg?s=128&g=1", "display_name": "DimChtz", "link": "https://stackoverflow.com/users/6084430/dimchtz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 41, "favorite_count": 0, "closed_date": 1509728185, "answer_count": 0, "score": 0, "last_activity_date": 1509727407, "creation_date": 1509724582, "last_edit_date": 1509727407, "question_id": 47099811, "link": "https://stackoverflow.com/questions/47099811/rust-error-use-of-moved-value", "closed_reason": "Duplicate", "title": "Rust error: use of moved value", "body": "<p>Consider the following struct representing a Point:</p>\n\n<pre><code>struct Point { x:i32, y:i32, }\n</code></pre>\n\n<p>I tried to overload the plus operator for this struct like this:</p>\n\n<pre><code>impl ops::Add&lt;Point&gt; for Point {\n    type Output = Point;\n    fn add(self, rhs:Point) -&gt; Self::Output {\n        Point{x:(self.x + rhs.x), y:(self.y + rhs.y)}\n    }\n}\n</code></pre>\n\n<p>then I tested it and it worked as expected:</p>\n\n<pre><code>let mut p1:Point = Point{x:1, y:1};\nlet mut p2:Point = Point{x:2, y:3};\n\nlet mut pAdd:Point = p1 + p2;\n</code></pre>\n\n<p>However, if I use <code>p1</code> and <code>p2</code> one more time:</p>\n\n<pre><code>let mut pAdd:Point = p1 + p2;\nlet mut pAdd2:Point = p1 + p2;\n</code></pre>\n\n<p>I get the following error:</p>\n\n<blockquote>\n  <p>error: use of moved value p1</p>\n</blockquote>\n\n<p>It turns out this is normal for Rust, since in this case variables are being moved and not copied. So, I thought all I had to do was to change the plus operator function a bit (references - &amp;). And I did:</p>\n\n<pre><code>fn add(&amp;self, rhs:&amp;Point) -&gt; Self::Output {\n    Point{x:(self.x + rhs.x), y:(self.y + rhs.y)}\n}\n</code></pre>\n\n<p>But again this failed and I got this error:</p>\n\n<blockquote>\n  <p>error: method <code>add</code> has an incompatible type for trait: expected struct <code>Point</code>, found &amp;-ptr</p>\n</blockquote>\n\n<p>What should I do?</p>\n\n<p><strong>EDIT:</strong> Thanks to @Gr\u00e9gory OBANOS I found that I can add <code>#[derive(Copy, Clone)]</code> and this will make the struct copyable. However, I still don't understand why references don't work.</p>\n"}, {"tags": ["types", "rust"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 1, "creation_date": 1509719104, "post_id": 47097990, "comment_id": 81145763, "body": "<a href=\"https://doc.rust-lang.org/stable/std/option/index.html\" rel=\"nofollow noreferrer\"><code>Option&lt;T&gt;</code></a> for possible missing values or <a href=\"https://doc.rust-lang.org/stable/std/result/index.html\" rel=\"nofollow noreferrer\"><code>Result&lt;T, E&gt;</code></a> for possible invalid values."}, {"owner": {"reputation": 5940, "user_id": 4605629, "user_type": "registered", "accept_rate": 98, "profile_image": "https://www.gravatar.com/avatar/741edb45b2f1d3e3c3d9555085004ad1?s=128&d=identicon&r=PG&f=1", "display_name": "Greg", "link": "https://stackoverflow.com/users/4605629/greg"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1509719262, "post_id": 47097990, "comment_id": 81145875, "body": "@ljedrz Could you show me in context of <code>let color = [255, 0, 255]</code> ? For example how to make <code>color[1]</code> = <code>null</code>."}], "answers": [{"comments": [{"owner": {"reputation": 5940, "user_id": 4605629, "user_type": "registered", "accept_rate": 98, "profile_image": "https://www.gravatar.com/avatar/741edb45b2f1d3e3c3d9555085004ad1?s=128&d=identicon&r=PG&f=1", "display_name": "Greg", "link": "https://stackoverflow.com/users/4605629/greg"}, "edited": false, "score": 0, "creation_date": 1509720457, "post_id": 47098265, "comment_id": 81146643, "body": "Thank you! I wish that I could upvote your answer multiple times! &quot;a <code>Foo</code> and an <code>Option&lt;Foo&gt;</code> are distinct types&quot; this really cleared it up for me (including the example of <code>color[0] + color[1]</code>). I am (slowly) reading the book and it&#39;s great and I am also listening and reading other sources too."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1509720202, "last_edit_date": 1509720202, "creation_date": 1509719765, "answer_id": 47098265, "question_id": 47097990, "link": "https://stackoverflow.com/questions/47097990/how-to-represent-missing-or-invalid-values/47098265#47098265", "title": "How to represent missing or invalid values?", "body": "<p>This is all <a href=\"https://doc.rust-lang.org/stable/book/second-edition/ch06-01-defining-an-enum.html#the-option-enum-and-its-advantages-over-null-values\" rel=\"nofollow noreferrer\">discussed in <em>The Rust Programming Language</em></a>. Please ensure you read through that book; much time has been spent addressing many questions and concerns that newcomers have.</p>\n\n<blockquote>\n  <p>Since Rust does not have <code>None</code></p>\n</blockquote>\n\n<p>I'm not sure why you say that, considering that <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html\" rel=\"nofollow noreferrer\"><code>Option</code></a> (and by extension <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#variant.None\" rel=\"nofollow noreferrer\"><code>Option::None</code></a>) is a <em>key</em> piece of Rust. In fact, it's so important that it's imported <a href=\"https://doc.rust-lang.org/std/prelude/v1/\" rel=\"nofollow noreferrer\">in the prelude</a>.</p>\n\n<p>If you'd like an array with one \"missing\" value:</p>\n\n<pre><code>let color = [Some(255), None, Some(255)];\n</code></pre>\n\n<p>In many languages with the concept of nil / null, every value can be the type you expect it to be <strong>or</strong> the special type nil / null. This isn't true in Rust \u2014 a <code>Foo</code> and an <code>Option&lt;Foo&gt;</code> are distinct types and you can't \"forget\" to handle the missing value:</p>\n\n<pre><code>let sum = color[0] + color[1];\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0369]: binary operation `+` cannot be applied to type `std::option::Option&lt;{integer}&gt;`\n --&gt; src/main.rs:4:15\n  |\n4 |     let sum = color[0] + color[1];\n  |               ^^^^^^^^^^^^^^^^^^^\n  |\n  = note: an implementation of `std::ops::Add` might be missing for `std::option::Option&lt;{integer}&gt;`\n</code></pre>\n\n<p>You have to use <em>pattern matching</em> or the helper methods on <code>Option</code> (which do pattern matching internally) to \"unpack\" the values and distinctly handle the <code>Some</code> and <code>None</code> cases.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/24771655/155423\">Some and None, what are they?</a></li>\n</ul>\n"}], "owner": {"reputation": 5940, "user_id": 4605629, "user_type": "registered", "accept_rate": 98, "profile_image": "https://www.gravatar.com/avatar/741edb45b2f1d3e3c3d9555085004ad1?s=128&d=identicon&r=PG&f=1", "display_name": "Greg", "link": "https://stackoverflow.com/users/4605629/greg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 129, "favorite_count": 0, "accepted_answer_id": 47098265, "answer_count": 1, "score": 1, "last_activity_date": 1510193306, "creation_date": 1509718873, "last_edit_date": 1509719782, "question_id": 47097990, "link": "https://stackoverflow.com/questions/47097990/how-to-represent-missing-or-invalid-values", "title": "How to represent missing or invalid values?", "body": "<p>Since Rust does not have <code>None</code>/<code>null</code>/<code>nil</code> values, how can I represent missing or invalid values in an array?</p>\n"}, {"tags": ["multithreading", "concurrency", "rust", "ownership"], "comments": [{"owner": {"reputation": 23600, "user_id": 1695172, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/6319d7eafca7852cf04c88598ca31e75?s=128&d=identicon&r=PG", "display_name": "Netwave", "link": "https://stackoverflow.com/users/1695172/netwave"}, "edited": false, "score": 0, "creation_date": 1509702158, "post_id": 47092072, "comment_id": 81134625, "body": "this may help you: <a href=\"https://stackoverflow.com/questions/45312045/how-can-multiple-threads-share-an-iterator\" title=\"how can multiple threads share an iterator\">stackoverflow.com/questions/45312045/&hellip;</a>"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1509702677, "post_id": 47092072, "comment_id": 81134993, "body": "Possible duplicate of <a href=\"https://stackoverflow.com/questions/32249817/thread-safe-mutable-non-owning-pointer-in-rust\">Thread-safe mutable non-owning pointer in Rust?</a>"}], "answers": [{"comments": [{"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1509717074, "post_id": 47092597, "comment_id": 81144318, "body": "As the <a href=\"https://doc.rust-lang.org/std/sync/struct.Mutex.html#implementations\" rel=\"nofollow noreferrer\"><code>Mutex</code> &quot;Trait Implementations&quot;</a> documents you cannot wrap <i>any</i> type to get <code>Sync</code>; you need to wrap a <code>Send</code> type."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1509720234, "post_id": 47092597, "comment_id": 81146510, "body": "@Stefan: Right! I didn&#39;t even think about someone trying to send a non-Send type to another thread, but it&#39;s definitely better to be explicit about it."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 7, "last_activity_date": 1509720165, "last_edit_date": 1509720165, "creation_date": 1509702187, "answer_id": 47092597, "question_id": 47092072, "link": "https://stackoverflow.com/questions/47092072/one-mutable-borrow-and-multiple-immutable-borrows/47092597#47092597", "title": "One mutable borrow and multiple immutable borrows", "body": "<p>First of all, please read <a href=\"https://stackoverflow.com/questions/45674479/need-holistic-explanation-about-rusts-cell-and-reference-counted-types/45674912\">Need holistic explanation about Rust&#39;s cell and reference counted types</a>.</p>\n\n<hr>\n\n<p>There are two problems to solve here:</p>\n\n<ol>\n<li>Sharing ownership between threads,</li>\n<li>Mutable aliasing.</li>\n</ol>\n\n<p>To share ownership, the simplest solution is <code>Arc</code>. It requires its argument to be <code>Sync</code> (accessible safely from multiple threads) which can be achieved for any <code>Send</code> type by wrapping it inside a <code>Mutex</code> or <code>RwLock</code>.</p>\n\n<p>To safely get aliasing in the presence of mutability, both <code>Mutex</code> and <code>RwLock</code> will work. If you had multiple readers, <code>RwLock</code> might have an extra performance edge. Since you have a single reader there's no point: let's use the simple <code>Mutex</code>.</p>\n\n<p>And therefore, your type is: <code>Arc&lt;Mutex&lt;HashSet&lt;String&gt;&gt;&gt;</code>.</p>\n\n<p>The next trick is passing the value to the closure to run in another thread. The value is <em>moved</em>, and therefore you need to <em>first</em> make a clone of the <code>Arc</code> and then pass the clone, otherwise you've moved your original and cannot access it any longer.</p>\n\n<p>Finally, accessing the data requires going through the borrows and locks...</p>\n\n<pre><code>use std::sync::{Arc, Mutex};\n\nfn main() {\n    let set = Arc::new(Mutex::new(HashSet::new()));\n\n    let clone = set.clone();\n    thread::spawn(move || {\n        loop {\n            clone.lock().unwrap().insert(\"foo\".to_string());\n        }\n    });\n\n    loop {\n        let input: String = get_input_from_stdin();\n\n        if set.lock().unwrap().contains(&amp;input) {\n            // Do something...\n        }\n    }\n}\n</code></pre>\n\n<p>The call to <code>unwrap</code> is there because <code>Mutex::lock</code> returns a <code>Result</code>; it may be impossible to lock the <code>Mutex</code> if it is poisoned, which means a panic occurred while it was locked and therefore its content is possibly garbage.</p>\n"}], "owner": {"reputation": 273, "user_id": 1005108, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/29471f3fafdab1a3c66b5e6c28bba8e9?s=128&d=identicon&r=PG", "display_name": "David Pedersen", "link": "https://stackoverflow.com/users/1005108/david-pedersen"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 643, "favorite_count": 1, "accepted_answer_id": 47092597, "answer_count": 1, "score": 3, "last_activity_date": 1509720306, "creation_date": 1509700516, "last_edit_date": 1509720306, "question_id": 47092072, "link": "https://stackoverflow.com/questions/47092072/one-mutable-borrow-and-multiple-immutable-borrows", "title": "One mutable borrow and multiple immutable borrows", "body": "<p>I'm trying to write a program that spawns a background thread that continuously inserts data into some collection. At the same time, I want to keep getting input from <code>stdin</code> and check if that input is in the collection the thread is operating on.</p>\n\n<p>Here is a boiled down example:</p>\n\n<pre><code>use std::collections::HashSet;\nuse std::thread;\n\nfn main() {\n    let mut set: HashSet&lt;String&gt; = HashSet::new();\n\n    thread::spawn(move || {\n        loop {\n            set.insert(\"foo\".to_string());\n        }\n    });\n\n    loop {\n        let input: String = get_input_from_stdin();\n\n        if set.contains(&amp;input) {\n            // Do something...\n        }\n    }\n}\n\nfn get_input_from_stdin() -&gt; String {\n    String::new()\n}\n</code></pre>\n\n<p>However this doesn't work because of ownership stuff.</p>\n\n<p>I'm still new to Rust but this seems like something that should be possible. I just can't find the right combination of <code>Arc</code>s, <code>Rc</code>s, <code>Mutex</code>es, etc. to wrap my data in.</p>\n"}, {"tags": ["rust", "serde"], "owner": {"reputation": 97, "user_id": 6338341, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/193f481b1d325647699db784e3d92d3a?s=128&d=identicon&r=PG&f=1", "display_name": "Ark", "link": "https://stackoverflow.com/users/6338341/ark"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 26, "favorite_count": 0, "closed_date": 1509676485, "answer_count": 0, "score": 1, "last_activity_date": 1509676414, "creation_date": 1509675729, "last_edit_date": 1509676414, "question_id": 47087526, "link": "https://stackoverflow.com/questions/47087526/trying-to-create-a-general-function-that-returns-a-deserialized-value", "closed_reason": "Duplicate", "title": "Trying to create a general function that returns a deserialized value", "body": "<p>I'm trying to generalize this function:</p>\n\n<pre><code>fn test() -&gt; MyStruct {\n    let u: [u8; 5] = [1, 2, 3, 4, 5];\n    let deserialized_struct: MyStruct = serde_json::from_slice(&amp;u).unwrap();\n    deserialized_struct\n}\n</code></pre>\n\n<p>I created:</p>\n\n<pre><code>fn test&lt;'a, T&gt;() -&gt; T\n    where T: serde::Deserialize&lt;'a&gt;\n{\n    let u: [u8; 5] = [1, 2, 3, 4 ,5];\n    let deserialized_struct: T = serde_json::from_slice(&amp;u).unwrap();\n    deserialized_struct\n}\n</code></pre>\n\n<p>It fails with:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `u` does not live long enough\n  --&gt; src/main.rs:9:58\n   |\n9  |     let deserialized_struct: T = serde_json::from_slice(&amp;u).unwrap();\n   |                                                          ^ does not live long enough\n10 |     deserialized_struct\n11 | }\n   | - borrowed value only lives until here\n   |\nnote: borrowed value must be valid for the lifetime 'a as defined on the function body at 4:1...\n  --&gt; src/main.rs:4:1\n   |\n4  | / fn test&lt;'a, T&gt;() -&gt; T\n5  | | where\n6  | |     T: serde::Deserialize&lt;'a&gt;,\n7  | | {\n...  |\n10 | |     deserialized_struct\n11 | | }\n   | |_^\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509672361, "post_id": 47086917, "comment_id": 81123861, "body": "The duplicate answers more completely, but TL;DR \u2014 you can&#39;t create a variable in a function and return a reference to it. You need to return the owned value (<code>NonAbsPath(path::PathBuf)</code>)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509672569, "post_id": 47086917, "comment_id": 81123920, "body": "<i>my understanding is that it lets one pass in ...</i> \u2014 yes, <a href=\"https://doc.rust-lang.org/std/convert/trait.AsRef.html\" rel=\"nofollow noreferrer\">anything that implements <code>AsRef&lt;Path&gt;</code></a>."}, {"owner": {"reputation": 4020, "user_id": 388739, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/vqsVi.jpg?s=128&g=1", "display_name": "Mark LeMoine", "link": "https://stackoverflow.com/users/388739/mark-lemoine"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509695076, "post_id": 47086917, "comment_id": 81130611, "body": "@Shepmaster Thank you for the link and the explanation! I&#39;m thinking I might refactor my struct to use <code>PathBuf</code> and <code>String</code> instead, are there any gotchas to that approach to be aware of?"}], "owner": {"reputation": 4020, "user_id": 388739, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/vqsVi.jpg?s=128&g=1", "display_name": "Mark LeMoine", "link": "https://stackoverflow.com/users/388739/mark-lemoine"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 23, "favorite_count": 0, "closed_date": 1509672271, "answer_count": 0, "score": 0, "last_activity_date": 1509672049, "creation_date": 1509671082, "last_edit_date": 1509672049, "question_id": 47086917, "link": "https://stackoverflow.com/questions/47086917/understanding-lifetimes-with-path-and-pathbuf-local-variables", "closed_reason": "Duplicate", "title": "Understanding lifetimes with Path and PathBuf local variables", "body": "<p>I've created a struct that has a <code>&amp;Path</code> and two <code>&amp;str</code>s. I'm trying to define a method on the struct that, given a <code>Path</code>-like representing a relative file path, concatenates it to the root, canonicalizes it, validates that the resulting path is contained in the root dir, and returns either a tuple of the relative and absolute paths, or an error (using a <code>Result</code>):</p>\n\n<pre><code>use std::path::Path;\nuse std::path::PathBuf;\n\nmod error {\n    use std::error;\n    use std::fmt;\n    use std::path;\n\n    #[derive(Debug)]\n    pub enum MediaLibraryError&lt;'a&gt; {\n        NonAbsPath(&amp;'a path::Path),\n        NonRelPath(&amp;'a path::Path),\n    }\n\n    impl&lt;'a&gt; error::Error for MediaLibraryError&lt;'a&gt; {\n        // This is meant to be a static description of the error, without any computation!\n        fn description(&amp;self) -&gt; &amp;str {\n            match self {\n                &amp;MediaLibraryError::NonAbsPath(_) =&gt; \"File path was was expected to be absolute\",\n                &amp;MediaLibraryError::NonRelPath(_) =&gt; \"File path was was expected to be relative\",\n            }\n        }\n    }\n\n    impl&lt;'a&gt; fmt::Display for MediaLibraryError&lt;'a&gt; {\n        // This is the place to put formatted/computed error messages!\n        fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n            match self {\n                &amp;MediaLibraryError::NonAbsPath(x) =&gt; {\n                    write!(f, r##\"Path \"{:?}\" is not absolute\"##, x)\n                }\n                &amp;MediaLibraryError::NonRelPath(x) =&gt; {\n                    write!(f, r##\"Path \"{:?}\" is not relative\"##, x)\n                }\n            }\n        }\n    }\n}\n\nuse error::MediaLibraryError;\n\nstruct MediaLibrary&lt;'a&gt; {\n    root_dir: &amp;'a Path,\n    item_meta_fn: &amp;'a str,\n    self_meta_fn: &amp;'a str,\n}\n\nimpl&lt;'a&gt; MediaLibrary&lt;'a&gt; {\n    fn co_norm&lt;P: AsRef&lt;Path&gt;&gt;(\n        &amp;self,\n        rel_sub_path: P,\n    ) -&gt; Result&lt;(PathBuf, PathBuf), MediaLibraryError&gt; {\n        let rel_sub_path = rel_sub_path.as_ref().to_path_buf();\n\n        if !rel_sub_path.is_relative() {\n            return Err(MediaLibraryError::NonRelPath(&amp;rel_sub_path));\n        }\n\n        let abs_sub_path = self.root_dir.join(&amp;rel_sub_path);\n\n        // Canonicalize.\n        // Check that created absolute path is a child of root or root itself.\n\n        Ok((rel_sub_path.to_path_buf(), abs_sub_path))\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>However, when trying to compile, I get this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `rel_sub_path` does not live long enough\n  --&gt; src/main.rs:56:55\n   |\n56 |             return Err(MediaLibraryError::NonRelPath(&amp;rel_sub_path));\n   |                                                       ^^^^^^^^^^^^ does not live long enough\n...\n65 |     }\n   |     - borrowed value only lives until here\n   |\nnote: borrowed value must be valid for the anonymous lifetime #1 defined on the method body at 49:5...\n  --&gt; src/main.rs:49:5\n   |\n49 | /     fn co_norm&lt;P: AsRef&lt;Path&gt;&gt;(\n50 | |         &amp;self,\n51 | |         rel_sub_path: P,\n52 | |     ) -&gt; Result&lt;(PathBuf, PathBuf), MediaLibraryError&gt; {\n...  |\n64 | |         Ok((rel_sub_path.to_path_buf(), abs_sub_path))\n65 | |     }\n   | |_____^\n</code></pre>\n\n<p>A common beginner error, I'm sure, but for the life of me, I can't seem to figure out what to do. I've tried messing with lifetimes, trying <code>PathBuf</code>s instead of <code>Path</code>s, using <code>as_ref()</code>/<code>to_owned()</code>. However, all in vain. I feel like there's a great lesson hidden in here, but I'm stumped.</p>\n\n<p>P.S.: I'm using the <code>P: AsRef&lt;Path&gt;</code> as found in the docs, my understanding is that it lets one pass in a <code>&amp;str</code>, <code>Path</code>, <code>PathBuf</code>, etc to the method?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509658568, "post_id": 47084924, "comment_id": 81119385, "body": "FWIW, the <i>discriminant</i> is the internal integer that uniquely identifies an enum&#39;s <i>variant</i>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509658614, "post_id": 47084924, "comment_id": 81119401, "body": "<i>the moving-out of its content should be logically sound</i> \u2014 it is not in the presence of destructors, such as the one implemented by <code>String</code>."}, {"owner": {"reputation": 21, "user_id": 691695, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/06b6020832a347423b829dd58353111d?s=128&d=identicon&r=PG", "display_name": "Toby Dimmick", "link": "https://stackoverflow.com/users/691695/toby-dimmick"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509659654, "post_id": 47084924, "comment_id": 81119831, "body": "@Shepmaster: <i>not in the presence of destructors</i> - Where is the destructor called in this situation? AFAIU the string is simply moved to a new owner (and when <code>self</code> is moved rather than borrowed, this is allowed). Edit: do you mean the necessity of a destructor in case of a <code>panic</code>, as you mention in <a href=\"https://stackoverflow.com/a/36557734/691695\">this answer</a>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509661388, "post_id": 47084924, "comment_id": 81120619, "body": "Indeed! The compiler has no way of notifying the owner of the referred-to item that &quot;Hey, remember the <code>String</code> that you used to store? Yeah, that&#39;s not there anymore, so don&#39;t try to free it!&quot; If you want that ability, that&#39;s where <code>Option</code> would come in. As discussed in the linked duplicate, <code>String::new</code> and <code>Vec::new</code> (and most of Rust&#39;s heavily-used data structures) don&#39;t have dynamic allocation for an &quot;empty&quot; collection, so they are pretty cheap to swap in as a placeholder."}, {"owner": {"reputation": 12979, "user_id": 5883, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/5c761536d66f497e45ba8de2267b9ead?s=128&d=identicon&r=PG", "display_name": "hwiechers", "link": "https://stackoverflow.com/users/5883/hwiechers"}, "edited": false, "score": 0, "creation_date": 1509673537, "post_id": 47084924, "comment_id": 81124170, "body": "Yes, it&#39;s possible. Use mem::replace. There is a recipe over here <a href=\"https://github.com/rust-unofficial/patterns/blob/master/idioms/mem-replace.md\" rel=\"nofollow noreferrer\">github.com/rust-unofficial/patterns/blob/master/idioms/&hellip;</a> for doing this."}], "owner": {"reputation": 21, "user_id": 691695, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/06b6020832a347423b829dd58353111d?s=128&d=identicon&r=PG", "display_name": "Toby Dimmick", "link": "https://stackoverflow.com/users/691695/toby-dimmick"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 40, "favorite_count": 0, "closed_date": 1509658484, "answer_count": 0, "score": 0, "last_activity_date": 1509660134, "creation_date": 1509658072, "last_edit_date": 1509660134, "question_id": 47084924, "link": "https://stackoverflow.com/questions/47084924/moving-data-between-variants-of-a-mutably-borrowed-enum", "closed_reason": "Duplicate", "title": "Moving data between variants of a mutably-borrowed enum", "body": "<p>I am trying to implement <code>Iterator</code> on an enum, such that it switches between variants on each <code>.next()</code> call. I want to reuse some data which is common to each variant, by assigning it to the newly-assigned enum value.</p>\n\n<p>In the following example, I would like to switch the variant between <code>E::A</code> and <code>E::B</code> on each method call, and reuse the similar string value held within the enum:</p>\n\n<pre><code>enum E {\n    A(String),\n    B(String)\n}\n\nimpl Iterator for E {\n    /* ... */\n\n    fn next(&amp;mut self) -&gt; /* ... */ {\n        *self = match *self {\n            E::A(ref s) =&gt; E::B(*s),\n            E::B(ref s) =&gt; E::A(*s),\n        };\n\n        /*...*/\n    }\n}\n</code></pre>\n\n<p>But I get an error about moving out a member of borrowed <code>self</code>:</p>\n\n<pre><code>error: cannot move out of borrowed content [E0507]\nmain.rs:11       E::A(ref s) =&gt; E::B(*s),\n</code></pre>\n\n<p>Since <code>self</code> is being atomically replaced, the moving-out of its content should be logically sound, but the borrow checker does not detect this.</p>\n\n<p>Currently I am <code>.clone()</code>ing the field I wish to move instead, but this is wasteful.</p>\n\n<p>I have considered the use of <a href=\"https://doc.rust-lang.org/std/mem/fn.swap.html\" rel=\"nofollow noreferrer\" title=\"asd\"><code>mem::swap</code></a>, which allows atomic swaps of borrowed content; but it looks as though this only works if the two swapped locations exist simultaneously.</p>\n\n<p>Is what I want possible, without the use of <code>unsafe</code>?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1509658261, "post_id": 47084908, "comment_id": 81119256, "body": "<a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.max\" rel=\"nofollow noreferrer\"><code>list.iter().max()</code></a> / <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.max_by\" rel=\"nofollow noreferrer\"><code>list.iter().max_by()</code></a> / <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.max_by_key\" rel=\"nofollow noreferrer\"><code>list.iter().max_by_key()</code></a>."}, {"owner": {"reputation": 1674, "user_id": 5420686, "user_type": "registered", "accept_rate": 49, "profile_image": "https://www.gravatar.com/avatar/2c318e16c4b5f17dd1375df8cb1425e5?s=128&d=identicon&r=PG&f=1", "display_name": "Jal", "link": "https://stackoverflow.com/users/5420686/jal"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1509658348, "post_id": 47084908, "comment_id": 81119294, "body": "@Shepmaster Thanks for the suggestion, but I am very new in rust, and I want to understand the mechanic of ownership before using shortcuts"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509658431, "post_id": 47084908, "comment_id": 81119323, "body": "Sure, which is why it&#39;s a comment, not an answer. Have you read <a href=\"https://doc.rust-lang.org/stable/book/second-edition/\" rel=\"nofollow noreferrer\"><i>The Rust Programming Language</i></a>? This is a pretty beginner question and most beginner questions are covered in the book."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1509658728, "post_id": 47084908, "comment_id": 81119458, "body": "Why have you chosen to use <code>for &amp;item</code> instead of <code>for item</code>? Doing such solves your problem."}, {"owner": {"reputation": 1674, "user_id": 5420686, "user_type": "registered", "accept_rate": 49, "profile_image": "https://www.gravatar.com/avatar/2c318e16c4b5f17dd1375df8cb1425e5?s=128&d=identicon&r=PG&f=1", "display_name": "Jal", "link": "https://stackoverflow.com/users/5420686/jal"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1509659058, "post_id": 47084908, "comment_id": 81119590, "body": "@Shepmaster I am currently studying chapter 10 right now, and the first largest implementation is provided in <a href=\"https://doc.rust-lang.org/book/second-edition/ch10-00-generics.html\" rel=\"nofollow noreferrer\">here</a> , I was just copying the implementation for <code>i32</code> but I know that since <code>i32</code> is primitive it has <code>Copy</code> and I wanted to implemented a struct version, I actually don&#39;t know why the author uses <code>&amp;item</code> instead of just <code>item</code>"}, {"owner": {"reputation": 36166, "user_id": 393701, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/250889c646cd2a916920d9252f7c6f42?s=128&d=identicon&r=PG", "display_name": "SirDarius", "link": "https://stackoverflow.com/users/393701/sirdarius"}, "edited": false, "score": 2, "creation_date": 1509713176, "post_id": 47084908, "comment_id": 81141691, "body": "Unrelated advice: if your list is empty, there is no largest point, therefore your function should not return an arbitrary value. The idiomatic solution here is to return an <code>Option&lt;Point&gt;</code>."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1509675355, "post_id": 47087448, "comment_id": 81124633, "body": "Perhaps you could suggest how the OP could make their original code work?"}, {"owner": {"reputation": 1674, "user_id": 5420686, "user_type": "registered", "accept_rate": 49, "profile_image": "https://www.gravatar.com/avatar/2c318e16c4b5f17dd1375df8cb1425e5?s=128&d=identicon&r=PG&f=1", "display_name": "Jal", "link": "https://stackoverflow.com/users/5420686/jal"}, "edited": false, "score": 0, "creation_date": 1509731461, "post_id": 47087448, "comment_id": 81153469, "body": "this is confusing, because, if I don&#39;t use <code>&amp;item</code> for object with <code>Copy</code> the function won&#39;t work. It will complain <code>^^^^ expected i32, found &amp;i32</code>"}, {"owner": {"reputation": 12979, "user_id": 5883, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/5c761536d66f497e45ba8de2267b9ead?s=128&d=identicon&r=PG", "display_name": "hwiechers", "link": "https://stackoverflow.com/users/5883/hwiechers"}, "edited": false, "score": 0, "creation_date": 1509773664, "post_id": 47087448, "comment_id": 81165811, "body": "If you change from <code>&amp;item</code> to <code>item</code> in the first example, the type of <code>item</code> will change from <code>i32</code> to <code>&amp;i32</code>. Now when you compare <code>item &gt; largest</code>, you&#39;re comparing <code>&amp;i32</code> to <code>i32</code> which gives you the error."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 1674, "user_id": 5420686, "user_type": "registered", "accept_rate": 49, "profile_image": "https://www.gravatar.com/avatar/2c318e16c4b5f17dd1375df8cb1425e5?s=128&d=identicon&r=PG&f=1", "display_name": "Jal", "link": "https://stackoverflow.com/users/5420686/jal"}, "edited": false, "score": 0, "creation_date": 1509775323, "post_id": 47087448, "comment_id": 81166183, "body": "@Jal You need to write <code>*item</code> instead of <code>item</code> within the loop. This will dereference the <code>&amp;i32</code> and yield an <code>i32</code>."}], "tags": [], "owner": {"reputation": 12979, "user_id": 5883, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/5c761536d66f497e45ba8de2267b9ead?s=128&d=identicon&r=PG", "display_name": "hwiechers", "link": "https://stackoverflow.com/users/5883/hwiechers"}, "is_accepted": false, "score": 1, "last_activity_date": 1509773379, "last_edit_date": 1509773379, "creation_date": 1509675264, "answer_id": 47087448, "question_id": 47084908, "link": "https://stackoverflow.com/questions/47084908/why-do-i-get-cannot-move-out-of-borrowed-content-when-using-for-item-in/47087448#47087448", "title": "Why do I get &quot;cannot move out of borrowed content&quot; when using `for &amp;item in`?", "body": "<pre><code>for &amp;item in list.iter() {\n    if (item.x &gt; myPoint.x) {\n        myPoint = item.clone();\n    }\n}\n</code></pre>\n\n<p>The code above doesn't work because the <code>for</code> loop iterates over a set of references to items in the array of type <code>&amp;Point</code>. When you bind this to <code>&amp;item</code> you're trying to destructure the reference. This worked with the list of <code>i32</code> because <code>i32</code> implements <code>Copy</code> and so that item can just be copied but with the list of <code>Point</code>s it has to move ownership which isn't possible.</p>\n\n<p>You can fix your code by changing <code>&amp;item</code> to <code>item</code> like this.</p>\n\n<pre><code>for item in list.iter() {\n    if (item.x &gt; myPoint.x) {\n        myPoint = item.clone();\n    }\n}\n</code></pre>\n\n<p>If that still isn't clear, consider this about this example.</p>\n\n<pre><code>for &amp;(x, y) in [(1, 2), (2, 30)].iter() {\n    println!(\"({}, {})\", x, y);\n}\n</code></pre>\n\n<p>Also take a look at the destructuring examples <a href=\"https://rustbyexample.com/flow_control/match/destructuring/destructure_pointers.html\" rel=\"nofollow noreferrer\">at Rust by Example</a>.</p>\n"}], "owner": {"reputation": 1674, "user_id": 5420686, "user_type": "registered", "accept_rate": 49, "profile_image": "https://www.gravatar.com/avatar/2c318e16c4b5f17dd1375df8cb1425e5?s=128&d=identicon&r=PG&f=1", "display_name": "Jal", "link": "https://stackoverflow.com/users/5420686/jal"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 361, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1509773379, "creation_date": 1509657985, "last_edit_date": 1509659452, "question_id": 47084908, "link": "https://stackoverflow.com/questions/47084908/why-do-i-get-cannot-move-out-of-borrowed-content-when-using-for-item-in", "title": "Why do I get &quot;cannot move out of borrowed content&quot; when using `for &amp;item in`?", "body": "<p>I want to get the largest item in an array where largest is define in custom logic.</p>\n\n<p>Here is an <code>i32</code> version that compiles</p>\n\n<pre><code>fn largest(list: &amp;[i32]) -&gt; i32 {\n    let mut largest = list[0];\n\n    for &amp;item in list.iter() {\n        if item &gt; largest {\n            largest = item;\n        }\n    }\n\n    largest\n}\n</code></pre>\n\n<p>Here is a struct version that does not compile</p>\n\n<pre><code>#[derive(Debug, Clone)]\nstruct Point {\n    x: f32,\n    y: f32,\n}\nfn largestPoint(list: &amp;[Point]) -&gt; Point {\n    // Defaulting to something\n    let mut myPoint: Point = Point { x: 1.0, y: 1.0 };\n\n    for &amp;item in list.iter() {\n        if (item.x &gt; myPoint.x) {\n            myPoint = item.clone();\n        }\n    }\n\n    myPoint\n}\n</code></pre>\n\n<p>What does this compiler error mean?</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of borrowed content\n  --&gt; src/main.rs:11:9\n   |\n11 |     for &amp;item in list.iter() {\n   |         ^----\n   |         ||\n   |         |hint: to prevent move, use `ref item` or `ref mut item`\n   |         cannot move out of borrowed content\n</code></pre>\n\n<p>Isn't <code>.iter()</code> always a reference to the original list? How can I move the item through a reference?</p>\n"}, {"tags": ["data-structures", "functional-programming", "rust", "lifetime"], "comments": [{"owner": {"reputation": 4733, "user_id": 728407, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/26b3f058ce75a05fd2ccc561f1cfa501?s=128&d=identicon&r=PG", "display_name": "Ashish Negi", "link": "https://stackoverflow.com/users/728407/ashish-negi"}, "edited": false, "score": 0, "creation_date": 1509702804, "post_id": 47083913, "comment_id": 81135092, "body": "Question may look long, but i believe that someone you knows Rust, should be able to answer my query easily. Please have a look."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1509731248, "post_id": 47083913, "comment_id": 81153361, "body": "Have you looked at <a href=\"https://doc.rust-lang.org/std/rc/struct.Rc.html#method.try_unwrap\" rel=\"nofollow noreferrer\">Rc::try_unwrap</a>? It looks like you overlooked what it does."}, {"owner": {"reputation": 4733, "user_id": 728407, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/26b3f058ce75a05fd2ccc561f1cfa501?s=128&d=identicon&r=PG", "display_name": "Ashish Negi", "link": "https://stackoverflow.com/users/728407/ashish-negi"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1509733588, "post_id": 47083913, "comment_id": 81154609, "body": "@oli_obk-ker docs says <code>Returns the contained value in Ok case</code> : but is that <code>x</code> copy of original value in Rc ? I think its a copy. That will explain why take() has no effect. As, it modifies a copy which does not change original list. Right ?"}, {"owner": {"reputation": 4733, "user_id": 728407, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/26b3f058ce75a05fd2ccc561f1cfa501?s=128&d=identicon&r=PG", "display_name": "Ashish Negi", "link": "https://stackoverflow.com/users/728407/ashish-negi"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1509734152, "post_id": 47083913, "comment_id": 81154911, "body": "Ok, i was wrong above. It should return Ok(original_value) when it has only one reference, which is the current one. So, then what is the difference in <code>curr_list = x.next</code> and <code>curr_list = x.next.take()</code> . second should be efficient as it makes <code>x.next</code> <code>None</code> .."}, {"owner": {"reputation": 4733, "user_id": 728407, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/26b3f058ce75a05fd2ccc561f1cfa501?s=128&d=identicon&r=PG", "display_name": "Ashish Negi", "link": "https://stackoverflow.com/users/728407/ashish-negi"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1509734774, "post_id": 47083913, "comment_id": 81155223, "body": "to test this i have to implement <code>drop</code> on Node."}, {"owner": {"reputation": 4733, "user_id": 728407, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/26b3f058ce75a05fd2ccc561f1cfa501?s=128&d=identicon&r=PG", "display_name": "Ashish Negi", "link": "https://stackoverflow.com/users/728407/ashish-negi"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1509735213, "post_id": 47083913, "comment_id": 81155488, "body": "I was expecting to see more <code>1: List..</code> but now i got that its not possible, as <code>next</code> is a <code>Link</code> not a <code>List</code>. <code>Link</code> is essentially wrapper over <code>Node</code>."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1509819857, "post_id": 47083913, "comment_id": 81177936, "body": "Does that mean you have figured it out or is (part of) your question still unanswered?"}, {"owner": {"reputation": 4733, "user_id": 728407, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/26b3f058ce75a05fd2ccc561f1cfa501?s=128&d=identicon&r=PG", "display_name": "Ashish Negi", "link": "https://stackoverflow.com/users/728407/ashish-negi"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1509887783, "post_id": 47083913, "comment_id": 81193560, "body": "@trentcl i think my query was : Is <code>take()</code> important in <code>drop</code> in above program ? I now think that its not, <a href=\"https://play.rust-lang.org/?gist=3b29be3a84d680dd3903ac7be632892b&amp;version=stable\" rel=\"nofollow noreferrer\">take</a> and <a href=\"https://play.rust-lang.org/?gist=8508e13f9d74b8cdcd434863995004d2&amp;version=stable\" rel=\"nofollow noreferrer\">no take</a>"}, {"owner": {"reputation": 4733, "user_id": 728407, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/26b3f058ce75a05fd2ccc561f1cfa501?s=128&d=identicon&r=PG", "display_name": "Ashish Negi", "link": "https://stackoverflow.com/users/728407/ashish-negi"}, "edited": false, "score": 0, "creation_date": 1509887804, "post_id": 47083913, "comment_id": 81193574, "body": "But i have understood the problem more now."}], "owner": {"reputation": 4733, "user_id": 728407, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/26b3f058ce75a05fd2ccc561f1cfa501?s=128&d=identicon&r=PG", "display_name": "Ashish Negi", "link": "https://stackoverflow.com/users/728407/ashish-negi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 66, "favorite_count": 0, "answer_count": 0, "score": 0, "last_activity_date": 1509735134, "creation_date": 1509653728, "last_edit_date": 1509735134, "question_id": 47083913, "link": "https://stackoverflow.com/questions/47083913/use-of-take-in-drop-function-of-persisted-list", "title": "Use of take in drop function of persisted list", "body": "<p>I am reading <a href=\"http://cglab.ca/~abeinges/blah/too-many-lists/book/third-drop.html\" rel=\"nofollow noreferrer\">Learning Rust With Entirely Too Many Linked Lists</a>, specifically the chapter about a persistent singly-linked stack.</p>\n\n<p>I am having difficulty understanding use of <code>take</code> in the <code>drop</code> function.\nWithout it, I get the same logs in <code>drop</code>.</p>\n\n<pre><code>use std::rc::Rc;\nuse std::fmt;\n\ntype Link&lt;T&gt; = Option&lt;Rc&lt;Node&lt;T&gt;&gt;&gt;;\n\n#[derive(Debug)]\npub struct List&lt;T&gt;\nwhere\n    T: fmt::Debug,\n{\n    head: Link&lt;T&gt;,\n}\n\n#[derive(Debug)]\nstruct Node&lt;T&gt;\nwhere\n    T: fmt::Debug,\n{\n    val: T,\n    next: Link&lt;T&gt;,\n}\n\nimpl&lt;T&gt; List&lt;T&gt;\nwhere\n    T: fmt::Debug,\n{\n    pub fn new() -&gt; Self {\n        List { head: None }\n    }\n\n    pub fn append(&amp;self, val: T) -&gt; List&lt;T&gt; {\n        List {\n            head: Some(Rc::new(Node {\n                val: val,\n                next: self.head.clone(),\n            })),\n        }\n    }\n}\n\nimpl&lt;T&gt; Drop for List&lt;T&gt;\nwhere\n    T: fmt::Debug,\n{\n    fn drop(&amp;mut self) {\n        println!(\"1 : {:?}\", self);\n        let mut curr_list = self.head.take();\n        println!(\"2\");\n        while let Some(node) = curr_list {\n            println!(\"3\");\n            match Rc::try_unwrap(node) {\n                Err(_) =&gt; {\n                    println!(\"4\");\n                    break;\n                }\n                Ok(ref mut x) =&gt; {\n                    println!(\"5\");\n                    curr_list = x.next.take()\n                }\n            }\n            println!(\"6\");\n        }\n        println!(\"7\");\n    }\n}\n\nfn main() {\n    let list = List::new().append(1).append(2);\n    let _list2 = list.append(3);\n    let _list3 = list.append(3);\n    let _list4 = list.append(3);\n    let _list5 = list.append(3);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=ed2fafa73cb26f0a0f92f574255df078&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<p>It outputs:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>1 : List { head: Some(Node { val: 1, next: None }) }\n2\n3\n4 : stopping at 1\n7\n1 : List { head: None }\n2\n7\n1 : List { head: Some(Node { val: 3, next: Some(Node { val: 2, next: Some(Node { val: 1, next: None }) }) }) }\n2\n3\n5: dropping 3\n6\n3\n4 : stopping at 2\n7\n1 : List { head: Some(Node { val: 3, next: Some(Node { val: 2, next: Some(Node { val: 1, next: None }) }) }) }\n2\n3\n5: dropping 3\n6\n3\n4 : stopping at 2\n7\n1 : List { head: Some(Node { val: 3, next: Some(Node { val: 2, next: Some(Node { val: 1, next: None }) }) }) }\n2\n3\n5: dropping 3\n6\n3\n4 : stopping at 2\n7\n1 : List { head: Some(Node { val: 3, next: Some(Node { val: 2, next: Some(Node { val: 1, next: None }) }) }) }\n2\n3\n5: dropping 3\n6\n3\n4 : stopping at 2\n7\n1 : List { head: Some(Node { val: 2, next: Some(Node { val: 1, next: None }) }) }\n2\n3\n5: dropping 2\n6\n3\n5: dropping 1\n6\n7\n</code></pre>\n\n<p>The first and second <code>1 : List {</code> is because of first line in <code>main</code>, which is destroying temp lists created. The next 3 <code>1 : List {</code> are lists getting dropped in reverse order of creation. Finally the shared list of size 2 is dropped.</p>\n\n<p>Even if I remove <code>take</code> from line : <code>curr_list = x.next.take()</code> and remove <code>ref mut</code> for <code>x</code> in <code>fn drop</code> I still get the same output.</p>\n\n<p>What is <code>x</code> there and why does <code>take()</code> have no effects?</p>\n\n<p>I earlier thought that <code>take</code> would change the original list by setting the next to <code>None</code>, but that is not possible as that will invalidate the list for other people who have references.</p>\n\n<p>Implementing <code>drop</code> on Node :</p>\n\n<pre><code>impl&lt;T&gt; Drop for Node&lt;T&gt; where T: fmt::Debug {\n    fn drop(&amp;mut self) {\n        println!(\"Node drop : {:?}\", self.val);\n    }\n}\n</code></pre>\n\n<p>so, Just after <code>Ok(ref mut x)</code> block, Node <code>x</code> is dropped.</p>\n"}, {"tags": ["math", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509644464, "post_id": 47081304, "comment_id": 81112122, "body": "Your function body would normally be written <code>if a &gt; b { a } else { b }</code>, one line."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1509644547, "post_id": 47081304, "comment_id": 81112176, "body": "Your function does not account for <code>NaN</code> and all the other &quot;strange&quot; floating point values. Please read <a href=\"http://floating-point-gui.de/\" rel=\"nofollow noreferrer\">What Every Programmer Should Know About Floating-Point Arithmetic</a>."}, {"owner": {"reputation": 112912, "user_id": 2410359, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/pIl9T.png?s=128&g=1", "display_name": "chux - Reinstate Monica", "link": "https://stackoverflow.com/users/2410359/chux-reinstate-monica"}, "edited": false, "score": 0, "creation_date": 1509729079, "post_id": 47081304, "comment_id": 81152240, "body": "What result would you want if <code>a</code> was NaN?  If <code>b</code> was NaN?"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 8, "last_activity_date": 1509977622, "last_edit_date": 1509977622, "creation_date": 1509644190, "answer_id": 47081428, "question_id": 47081304, "link": "https://stackoverflow.com/questions/47081304/is-there-any-function-in-the-standard-library-to-return-the-larger-or-smaller-of/47081428#47081428", "title": "Is there any function in the standard library to return the larger or smaller of two numbers?", "body": "<p>Yes, there are such functions</p>\n\n<ul>\n<li><a href=\"https://doc.rust-lang.org/std/cmp/fn.min.html\" rel=\"nofollow noreferrer\"><code>std::cmp::min</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/std/cmp/fn.max.html\" rel=\"nofollow noreferrer\"><code>std::cmp::max</code></a></li>\n</ul>\n\n<p>As of Rust 1.21, there are also methods provided by <code>Ord</code>:</p>\n\n<ul>\n<li><a href=\"https://doc.rust-lang.org/std/cmp/trait.Ord.html#method.min\" rel=\"nofollow noreferrer\"><code>Ord::min</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/std/cmp/trait.Ord.html#method.max\" rel=\"nofollow noreferrer\"><code>Ord::max</code></a></li>\n</ul>\n\n<p><a href=\"https://stackoverflow.com/questions/43394546/get-the-minimum-of-two-floating-point-values\">None of these work for floating point</a>. For that use</p>\n\n<ul>\n<li><a href=\"https://doc.rust-lang.org/std/primitive.f64.html#method.min\" rel=\"nofollow noreferrer\"><code>f64::min</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/std/primitive.f64.html#method.max\" rel=\"nofollow noreferrer\"><code>f64::max</code></a></li>\n</ul>\n\n<p>(or the <code>f32</code> equivalent)</p>\n"}], "owner": {"reputation": 20067, "user_id": 3769905, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/ae9bf76c0597ac1712a84af33e12467d?s=128&d=identicon&r=PG&f=1", "display_name": "BonsaiOak", "link": "https://stackoverflow.com/users/3769905/bonsaioak"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 74, "favorite_count": 0, "accepted_answer_id": 47081428, "answer_count": 1, "score": 0, "last_activity_date": 1509977622, "creation_date": 1509643808, "last_edit_date": 1509644384, "question_id": 47081304, "link": "https://stackoverflow.com/questions/47081304/is-there-any-function-in-the-standard-library-to-return-the-larger-or-smaller-of", "title": "Is there any function in the standard library to return the larger or smaller of two numbers?", "body": "<p>I can implement this myself with the following code:</p>\n\n<pre><code>fn max(a: f32, b: f32) -&gt; f32 {\n    if a &gt; b {\n        return a;\n    } else {\n        return b;\n    }\n}\n</code></pre>\n\n<p>Implementing it myself feels redundant.  </p>\n"}, {"tags": ["unit-testing", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509633583, "post_id": 47077925, "comment_id": 81104466, "body": "<i>It does not let me change the input to the function for each input</i> \u2014 Can you clarify what you mean by that?"}, {"owner": {"reputation": 78, "user_id": 4257331, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/wH34C.png?s=128&g=1", "display_name": "datenstrom", "link": "https://stackoverflow.com/users/4257331/datenstrom"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509633990, "post_id": 47077925, "comment_id": 81104773, "body": "Because <code>reader</code>, <code>writer</code>, and <code>question</code> are all passed to <code>prompt_user()</code> inside of the <code>confirm()</code> function I can not manipulate the input like I can when testing the <code>prompt_user()</code> function itself. So I am unable to automate tests involving <code>confirm()</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1509634794, "post_id": 47077925, "comment_id": 81105410, "body": "So, are you saying that <code>confirm</code>, which doesn&#39;t have any arguments, doesn&#39;t support dependency injection? If so, I&#39;m not sure what help we can provide. Yes, you have to have some way of injecting the dependencies, arguments are the simplest, but you can also have struct fields. What prevents you from having arguments on <code>confirm</code> to inject the dependencies you need?"}, {"owner": {"reputation": 78, "user_id": 4257331, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/wH34C.png?s=128&g=1", "display_name": "datenstrom", "link": "https://stackoverflow.com/users/4257331/datenstrom"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509635253, "post_id": 47077925, "comment_id": 81105760, "body": "I didn&#39;t want <code>confirm</code> to have any arguments just as a matter of public interface design. I didn&#39;t even think about using struct fields for the arguments to <code>prompt_user</code> in <code>confirm</code> though. I think that could work and let me modify the input source while testing."}], "answers": [{"comments": [{"owner": {"reputation": 4659, "user_id": 2595033, "user_type": "registered", "accept_rate": 48, "profile_image": "https://www.gravatar.com/avatar/bd78391e14ec16fe30d2e1811a841c70?s=128&d=identicon&r=PG", "display_name": "user9993", "link": "https://stackoverflow.com/users/2595033/user9993"}, "edited": false, "score": 0, "creation_date": 1509641082, "post_id": 47080388, "comment_id": 81109981, "body": "+1. I was given the impression that DI is impossible in Rust previously by comments made on /r/rust, pleased to see it is still possible."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 4659, "user_id": 2595033, "user_type": "registered", "accept_rate": 48, "profile_image": "https://www.gravatar.com/avatar/bd78391e14ec16fe30d2e1811a841c70?s=128&d=identicon&r=PG", "display_name": "user9993", "link": "https://stackoverflow.com/users/2595033/user9993"}, "edited": false, "score": 3, "creation_date": 1509643281, "post_id": 47080388, "comment_id": 81111446, "body": "@user9993: Rust has no <i>Dependency Injection Framework</i>, but it is still possible to pass the dependencies manually. The next hurdle is genericity &amp; references, I advise to use either <code>Rc&lt;RefCell&lt;Trait&gt;&gt;</code> or its multi-threaded counterpart to hold the traits: external dependencies are slow compared to CPU time anyway, the extra memory allocation and virtual calls will barely be a blip on the radar."}, {"owner": {"reputation": 146, "user_id": 7280978, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/083630ad781f2cff17cb296b08d69400?s=128&d=identicon&r=PG&f=1", "display_name": "Austin Jenkins", "link": "https://stackoverflow.com/users/7280978/austin-jenkins"}, "edited": false, "score": 0, "creation_date": 1563989854, "post_id": 47080388, "comment_id": 100886956, "body": "From my experience you can take this approach without using trait objects. For example when I test an application protocol, I&#39;ll have written against Read/BufWrite traits. Rather than pass a trait object however, I just use static dispatch. You get the testability without introducing any runtime penalty."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 5, "last_activity_date": 1509644747, "last_edit_date": 1509644747, "creation_date": 1509640781, "answer_id": 47080388, "question_id": 47077925, "link": "https://stackoverflow.com/questions/47077925/is-there-a-cleaner-way-to-test-functions-that-use-functions-that-require-user-in/47080388#47080388", "title": "Is there a cleaner way to test functions that use functions that require user input in Rust?", "body": "<p>As mentioned in the <a href=\"https://stackoverflow.com/questions/28370126/how-can-i-test-stdin-and-stdout\">Stack Overflow question you linked</a>, you should generally avoid hard-wiring external dependencies (a.k.a. I/O) if you want testability:</p>\n\n<ul>\n<li>disk access,</li>\n<li>terminal access,</li>\n<li>network access,</li>\n<li>database access,</li>\n<li><strong>time</strong> access.</li>\n</ul>\n\n<p>In all such cases, I recommend using <em>Dependency Injection</em>:</p>\n\n<ul>\n<li>create a clean interface (trait) to describe the allowed actions (don't overdo it, YAGNI!),</li>\n<li>implement the interface for \"production\" use, with the real external dependency behind it,</li>\n<li>implement a \"mock\" of the interface for \"test\" use.</li>\n</ul>\n\n<p>Then, when writing:</p>\n\n<ul>\n<li>a function which requires access to this resource, pass it as argument,</li>\n<li>a method which requires access to this resource, pass it as either argument or in the constructor of the object.</li>\n</ul>\n\n<p>Finally, instantiate the production dependencies in main, and forward them from there.</p>\n\n<hr>\n\n<p>Tricks, not treats:</p>\n\n<ul>\n<li>It may be useful to create an <code>Environment</code> structure which contains all such interfaces, rather than passing heaps of arguments to each function; however functions which only require one/two resource(s) should take those explicitly to make it clear what they use,</li>\n<li>I have found it useful to pass the <em>timestamp</em> rather than the <em>clock</em> from which it is obtained in the past... just because multiple calls to <code>now()</code> may return different results as the time passes.</li>\n</ul>\n"}], "owner": {"reputation": 78, "user_id": 4257331, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/wH34C.png?s=128&g=1", "display_name": "datenstrom", "link": "https://stackoverflow.com/users/4257331/datenstrom"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 940, "favorite_count": 0, "accepted_answer_id": 47080388, "answer_count": 1, "score": 2, "last_activity_date": 1583267558, "creation_date": 1509633421, "last_edit_date": 1509634865, "question_id": 47077925, "link": "https://stackoverflow.com/questions/47077925/is-there-a-cleaner-way-to-test-functions-that-use-functions-that-require-user-in", "title": "Is there a cleaner way to test functions that use functions that require user input in Rust?", "body": "<p>I am writing a <a href=\"https://gitlab.com/starshell/question\" rel=\"nofollow noreferrer\">CLI question asking library</a> for my first Rust project since I will probably be using it anyway, and I cannot find a clean way to test the <code>terminal</code> method of the builder pattern, which using the configuration gets user input and returns an answer.</p>\n\n<pre><code>pub fn confirm(&amp;mut self) -&gt; Answer {\n    self.yes_no();\n    self.build_prompt();\n    let prompt = self.prompt.clone();\n    let valid_responses = self.valid_responses.clone().unwrap();\n    loop {\n        let stdio = io::stdin();\n        let input = stdio.lock();\n        let output = io::stdout();\n        if let Ok(response) = prompt_user(input, output, &amp;prompt) {\n            for key in valid_responses.keys() {\n                if *response.trim().to_lowercase() == *key {\n                    return valid_responses.get(key).unwrap().clone();\n                }\n            }\n            self.build_clarification();\n        }\n    }\n}\n</code></pre>\n\n<p>Looking for a solution I discovered <a href=\"https://stackoverflow.com/questions/28370126/how-can-i-test-stdin-and-stdout\">dependency injection</a> which allowed me to write tests for the function that prompts the user for input using <a href=\"https://doc.rust-lang.org/std/io/struct.Cursor.html\" rel=\"nofollow noreferrer\"><code>Cursor</code></a>. It does not let me change the user input to the <code>confirm()</code> function for each test of <code>Question::new(\"Continue?\").confirm()</code> though so I tried using conditional compilation, and came up with the following.</p>\n\n<pre><code>#[cfg(not(test))]\nfn prompt_user&lt;R, W&gt;(mut reader: R, mut writer: W, question: &amp;str) -&gt; Result&lt;String, std::io::Error&gt;\nwhere\n    R: BufRead,\n    W: Write,\n{\n    write!(&amp;mut writer, \"{}\", question)?;\n    let mut s = String::new();\n    reader.read_line(&amp;mut s)?;\n    Ok(s)\n}\n\n#[cfg(test)]\nfn prompt_user&lt;R, W&gt;(mut reader: R, mut writer: W, question: &amp;str) -&gt; Result&lt;String, std::io::Error&gt;\nwhere\n    R: BufRead,\n    W: Write,\n{\n    use tests;\n    Ok(unsafe { tests::test_response.to_string() })\n}\n</code></pre>\n\n<p>And in the <code>tests</code> module I use a global variable:</p>\n\n<pre><code>pub static mut test_response: &amp;str = \"\";\n\n#[test]\nfn simple_confirm() {\n    unsafe { test_response = \"y\" };\n    let answer = Question::new(\"Continue?\").confirm();\n    assert_eq!(Answer::YES, answer);\n}\n</code></pre>\n\n<p>This works as long as I only run tests with a single thread, but also no longer allows me to test the real user input function. Not really a problem for such a small crate but it is very messy. I did not see any solutions to do this from any available testing libraries.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1509633822, "post_id": 47077709, "comment_id": 81104643, "body": "<code>char_array</code> isn&#39;t what its name suggests. (i.e., it&#39;s not a <code>Vec&lt;char&gt;</code>)"}, {"owner": {"reputation": 13, "user_id": 3337607, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/518d529712eae62f7c972a5cc90c9c2b?s=128&d=identicon&r=PG&f=1", "display_name": "damnsun", "link": "https://stackoverflow.com/users/3337607/damnsun"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1509646001, "post_id": 47077709, "comment_id": 81112984, "body": "That was a mistake I had overlooked but now it is corrected, but that was not causing the problem."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1509648872, "post_id": 47077709, "comment_id": 81114579, "body": "Actually, I contest that it <i>was</i> causing the problem, since <a href=\"https://play.rust-lang.org/?gist=c7654bb8f0ff9572b15e4a72d93202f5&amp;version=stable\" rel=\"nofollow noreferrer\">adding <code>.cloned()</code> (or, equivalently, <code>.map(|r| *r)</code>) fixes it.</a> (As Shepmaster&#39;s answer also observes.)"}], "answers": [{"comments": [{"owner": {"reputation": 13, "user_id": 3337607, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/518d529712eae62f7c972a5cc90c9c2b?s=128&d=identicon&r=PG&f=1", "display_name": "damnsun", "link": "https://stackoverflow.com/users/3337607/damnsun"}, "edited": false, "score": 0, "creation_date": 1509646147, "post_id": 47078290, "comment_id": 81113052, "body": "Thank you very much for the detailed explanation. Your solution worked!!!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1509646257, "last_edit_date": 1509646257, "creation_date": 1509634492, "answer_id": 47078290, "question_id": 47077709, "link": "https://stackoverflow.com/questions/47077709/errore0502-cannot-borrow-char-array-as-mutable-because-it-is-also-borrowed/47078290#47078290", "title": "error[E0502]: cannot borrow `char_array` as mutable because it is also borrowed as immutable", "body": "<p>The return type of <code>char_array.iter().find(|&amp;&amp;c| c == each_char)</code> is an <code>Option&lt;&amp;char&gt;</code>; a reference pointing at the original item in <code>char_array</code>. You then attempt to modify <code>char_array</code> which could invalidate any references. After that, you try to access the now-potentially-invalid value by printing it.</p>\n\n<p>In a language like C or C++, this code would be allowed but would occasionally crash, corrupt data, allow for arbitrary code execution, or eat your laundry.</p>\n\n<p>The laziest solution is to reorder the <code>println</code> and add an extra set of braces around where <code>some_val</code> should live. (In the future we will have <em>Non-Lexical Lifetimes</em> and the extra braces won't be needed):</p>\n\n<pre><code>{\n    let mut some_val = char_array.iter().find(|&amp;&amp;c| c == each_char);\n\n    match some_val {\n        Some(ch) =&gt; return each_char,\n        _ =&gt; println!(\"do nothing\"),\n    }\n    println!(\" The character is {:?}\", some_val);\n}\n\nchar_array.push(each_char);\n</code></pre>\n\n<p>You could also clone the value, breaking the relation between <code>some_val</code> and <code>char_array</code>:</p>\n\n<pre><code>let mut some_val = char_array.iter().find(|&amp;&amp;c| c == each_char).cloned();\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/26920789/155423\">Unable to borrow an iterator as mutable more than once at a time</a></li>\n<li><a href=\"https://stackoverflow.com/q/38166580/155423\">Why does iter() borrow the list as immutable?</a></li>\n</ul>\n"}], "owner": {"reputation": 13, "user_id": 3337607, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/518d529712eae62f7c972a5cc90c9c2b?s=128&d=identicon&r=PG&f=1", "display_name": "damnsun", "link": "https://stackoverflow.com/users/3337607/damnsun"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 292, "favorite_count": 0, "accepted_answer_id": 47078290, "answer_count": 1, "score": 1, "last_activity_date": 1509646257, "creation_date": 1509632848, "last_edit_date": 1509633677, "question_id": 47077709, "link": "https://stackoverflow.com/questions/47077709/errore0502-cannot-borrow-char-array-as-mutable-because-it-is-also-borrowed", "title": "error[E0502]: cannot borrow `char_array` as mutable because it is also borrowed as immutable", "body": "<p>I am writing a small program to identify the first recurring character in a string:</p>\n\n<pre><code>use std::io;\n\nfn main() {\n    let mut main_string = String::new();\n\n    println!(\"Please enter the string : \");\n    io::stdin()\n        .read_line(&amp;mut main_string)\n        .expect(\"Failed to read the input value\");\n\n    main_string = main_string.trim().to_string();\n    println!(\"The trimmed string is : {}\", main_string);\n\n    let repeating_character = recurring_string_parser(main_string);\n\n    println!(\n        \"The character which is first repeating is {}\",\n        repeating_character\n    );\n}\n\nfn recurring_string_parser(main_string: String) -&gt; char {\n    let mut char_array = Vec::new();\n    for each_char in main_string.chars() {\n        let mut some_val = char_array.iter().find(|&amp;&amp;c| c == each_char);\n\n        match some_val {\n            Some(ch) =&gt; return each_char,\n            _ =&gt; println!(\"do nothing\"),\n        }\n        char_array.push(each_char);\n        println!(\" The charcater is {:?}\", some_val);\n    }\n\n    return 'a';\n}\n</code></pre>\n\n<p>Error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `char_array` as mutable because it is also borrowed as immutable\n  --&gt; src/main.rs:31:9\n   |\n25 |         let mut some_val = char_array.iter().find(|&amp;&amp;c| c == each_char);\n   |                            ---------- immutable borrow occurs here\n...\n31 |         char_array.push(each_char);\n   |         ^^^^^^^^^^ mutable borrow occurs here\n32 |         println!(\" The charcater is {:?}\", some_val);\n33 |     }\n   |     - immutable borrow ends here\n</code></pre>\n\n<p>What is it that I am doing wrong? It would be of great help if someone could explain it as well because I am finding it difficult to grasp the concept of mutable borrowing.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 26154, "user_id": 5436257, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/iGuaK.jpg?s=128&g=1", "display_name": "Joe Clay", "link": "https://stackoverflow.com/users/5436257/joe-clay"}, "edited": false, "score": 3, "creation_date": 1509628757, "post_id": 47075996, "comment_id": 81100966, "body": "The <a href=\"https://doc.rust-lang.org/std/thread/struct.ThreadId.html\" rel=\"nofollow noreferrer\">docs</a> also make a point of stating that <i>&quot;<code>ThreadId</code>s are not guaranteed to correspond to a thread&#39;s system-designated identifier&quot;</i>."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1558456654, "last_edit_date": 1558456654, "creation_date": 1509627594, "answer_id": 47075996, "question_id": 47075469, "link": "https://stackoverflow.com/questions/47075469/get-the-current-thread-id-and-process-id-as-integers/47075996#47075996", "title": "Get the current thread id and process id as integers?", "body": "<h1>Thread id</h1>\n\n<p>I don't think that <code>ThreadId</code> even tracks this. The <a href=\"https://github.com/rust-lang/rust/blob/1.21.0/src/libstd/thread/mod.rs#L875-L899\" rel=\"nofollow noreferrer\">implementation of <code>ThreadId</code></a> only has a 64-bit counter that increases with each thread; it does not appear to do anything regarding the underlying threading system.</p>\n\n<p>If you have the <a href=\"https://doc.rust-lang.org/std/thread/struct.JoinHandle.html\" rel=\"nofollow noreferrer\"><code>JoinHandle</code></a>, you can get the ID from the underlying thread system. Once you have that, you can call the appropriate thread system function to get its ID and <em>potentially</em> the OS' ID</p>\n\n<p>On Linux, you can get the pthread_t handle via <a href=\"https://doc.rust-lang.org/std/os/unix/thread/trait.JoinHandleExt.html#tymethod.as_pthread_t\" rel=\"nofollow noreferrer\"><code>JoinHandleExt::as_pthread_t</code></a>. You can likely get an equivalent on other platforms where pthreads is not available.</p>\n\n<p>Note that</p>\n\n<blockquote>\n  <p>The thread ID returned by <code>pthread_self()</code> is not the same thing as the kernel thread ID returned by a call to <code>gettid(2)</code>. </p>\n  \n  <p><a href=\"https://linux.die.net/man/3/pthread_self\" rel=\"nofollow noreferrer\"><code>pthread_self</code> manpage</a></p>\n</blockquote>\n\n\n\n<h1>Process id</h1>\n\n<p>This was stabilized in Rust 1.26 as <a href=\"https://doc.rust-lang.org/std/process/fn.id.html\" rel=\"nofollow noreferrer\"><code>process::id</code></a>.</p>\n"}], "owner": {"reputation": 4768, "user_id": 787366, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a49b6d8775416297257c4c4d36e39967?s=128&d=identicon&r=PG", "display_name": "Shmoopy", "link": "https://stackoverflow.com/users/787366/shmoopy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3034, "favorite_count": 0, "accepted_answer_id": 47075996, "answer_count": 1, "score": 6, "last_activity_date": 1558456654, "creation_date": 1509626151, "last_edit_date": 1509626959, "question_id": 47075469, "link": "https://stackoverflow.com/questions/47075469/get-the-current-thread-id-and-process-id-as-integers", "title": "Get the current thread id and process id as integers?", "body": "<p>Is there a way to get the current process id and thread id in Rust as integers?  </p>\n\n<p>The closest I got was <code>::std::thread::current().id()</code> which returns an opaque <code>ThreadId</code> object. When trying to access its <code>u64</code> field, I'm getting:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0611]: field `0` of tuple-struct `std::thread::ThreadId` is private\n --&gt; src\\main.rs:4:13\n  |\n4 |     let x: u64 = ::std::thread::current().id().0;\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>I couldn't find anything related to the process id in the standard library.</p>\n"}, {"tags": ["go", "rust", "ffi"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 5, "creation_date": 1509624595, "post_id": 47074919, "comment_id": 81098072, "body": "In a FFI interface, you really want to stick to types that are understood by the target language. Here, <code>&amp;mut [...]</code> is not. Have you checked the <a href=\"http://jakegoulding.com/rust-ffi-omnibus/\" rel=\"nofollow noreferrer\">FFI Omnibus</a>?"}, {"owner": {"user_type": "does_not_exist", "display_name": "user8725011"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1509625420, "post_id": 47074919, "comment_id": 81098660, "body": "Great! Thank you for the link."}], "answers": [{"tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user8725011"}, "is_accepted": true, "score": 7, "last_activity_date": 1509645889, "last_edit_date": 1509645889, "creation_date": 1509625903, "answer_id": 47075392, "question_id": 47074919, "link": "https://stackoverflow.com/questions/47074919/how-can-i-call-a-rust-function-from-go-with-a-slice-as-a-parameter/47075392#47075392", "title": "How can I call a Rust function from Go with a slice as a parameter?", "body": "<p>According to <a href=\"http://jakegoulding.com/rust-ffi-omnibus/\" rel=\"nofollow noreferrer\"><em>The Rust FFI Omnibus</em></a> as <a href=\"https://stackoverflow.com/questions/47074919/call-rust-function-from-go-with-slice-as-parameter#comment81098072_47074919\">provided by @matthieu-m</a>, I have successfully rewritten the code. The function signature must accept the types understood by the target language.</p>\n\n<p>The Rust function signature changed to:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[no_mangle]\npub extern \"C\" fn callme(slice: *const libc::c_double, len: libc::size_t) -&gt; libc::c_int {\n    let data = slice::from_raw_parts(slice, len as usize);\n    data.len() as i32\n}\n</code></pre>\n\n<p>The declaration in the header file as follows:</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>// skip include guards\n#include &lt;stdio.h&gt;\n\nextern int callme(double* slice, size_t len);\n</code></pre>\n\n<p>And the call from Go has now changed as well</p>\n\n<pre class=\"lang-golang prettyprint-override\"><code>func CallmeExternal() {\n   data := make([]float64, 2, 2)\n   data[0] = 1.0\n   ptr := (*C.double)(unsafe.Pointer(&amp;data[0]))\n   len := C.size_t(len(data))\n   size := C.callme(ptr, len)\n\n   printf(\"size %v\",size)\n}\n</code></pre>\n\n<p>This returns <code>2</code>. </p>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user8725011"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 963, "favorite_count": 1, "accepted_answer_id": 47075392, "answer_count": 1, "score": 4, "last_activity_date": 1509645912, "creation_date": 1509624489, "last_edit_date": 1509645912, "question_id": 47074919, "link": "https://stackoverflow.com/questions/47074919/how-can-i-call-a-rust-function-from-go-with-a-slice-as-a-parameter", "title": "How can I call a Rust function from Go with a slice as a parameter?", "body": "<p>I want to call some external functions written in Rust from Go with a reference to a slice.</p>\n\n<p>I have the following  Rust code:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>extern crate libc;\n\n#[no_mangle]\npub extern \"C\" fn callme(data: &amp;mut [libc::c_double]) -&gt; i32 {\n    data.len() as i32\n}\n</code></pre>\n\n<p>This function is made available for the cgo compiler through this C-style header file:</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>#IFNDEF BOGUSLIB_H\n#DEFINE BOGUSLIB_H\n\nextern int callme(double* data);    \n\n#ENDIF\n</code></pre>\n\n<p>I can now call this function from Go with the Rust crate compiled as a cdylib:</p>\n\n<pre class=\"lang-golang prettyprint-override\"><code>//#cgo CFLAGS: -Ipath/to/libfolder\n//#cgo LDFLAGS: -Lpath/to/libfolder -lboguslib\n//#include &lt;boguslib.h&gt;\nimport \"C\"\nimport (\n   \"unsafe\"\n   . \"fmt\"  \n)\n\nfunc CallmeExternal() {\n   data := make([]float64, 1, 1)\n   data[0] = 1.0\n   ptr := (*C.double)(unsafe.Pointer(&amp;data[0]))\n   size := C.callme(ptr)\n\n   printf(\"size %v\",size)\n}\n</code></pre>\n\n<p>The Go code uses the unsafe pointer trick to access the backing array, since a slice is defined as follows</p>\n\n<pre class=\"lang-golang prettyprint-override\"><code>type Slice struct {\n   data *byte\n   uint32 len\n   uint32 cap\n}\n</code></pre>\n\n<p>When I execute the code above, the length of the passed reference is incredibly large. How do I access the actual data, and what is at this moment being returned?</p>\n"}, {"tags": ["json", "rust", "serde", "json-patch", "serde-json"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1509737592, "post_id": 47103155, "comment_id": 81156736, "body": "Seems like if you changed to <code>fn merge(a: Value, b: Value) -&gt; Value</code> you could avoid the cloning."}, {"owner": {"reputation": 4030, "user_id": 454378, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/35ecec2dbfe92776f966832447c8ac2d?s=128&d=identicon&r=PG", "display_name": "Harindaka", "link": "https://stackoverflow.com/users/454378/harindaka"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509866453, "post_id": 47103155, "comment_id": 81187997, "body": "@Shepmaster Could you add an answer here incorporating your suggestion above? I&#39;m new to Rust and do not quite get what you are saying yet. I&#39;ll accept your answer if you do."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1509891110, "post_id": 47103155, "comment_id": 81194662, "body": "<a href=\"https://play.integer32.com/?gist=33b53122f260532bdea5a0f76a5da152&amp;version=stable\" rel=\"nofollow noreferrer\">Something like this</a>, although I&#39;m a little sad that the <code>unwrap</code> is needed."}], "tags": [], "owner": {"reputation": 4030, "user_id": 454378, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/35ecec2dbfe92776f966832447c8ac2d?s=128&d=identicon&r=PG", "display_name": "Harindaka", "link": "https://stackoverflow.com/users/454378/harindaka"}, "is_accepted": false, "score": 1, "last_activity_date": 1509737190, "creation_date": 1509737190, "answer_id": 47103155, "question_id": 47070876, "link": "https://stackoverflow.com/questions/47070876/how-can-i-merge-two-json-objects-with-rust/47103155#47103155", "title": "How can I merge two JSON objects with Rust?", "body": "<p>This worked for me</p>\n\n<pre><code>#[macro_use]\nextern crate serde_json;\n\nuse serde_json::Value;\n\nfn merge(a: &amp;mut Value, b: &amp;Value) {\n    match (a, b) {\n        (&amp;mut Value::Object(ref mut a), &amp;Value::Object(ref b)) =&gt; {\n            for (k, v) in b {\n                merge(a.entry(k.clone()).or_insert(Value::Null), v);\n            }\n        }\n        (a, b) =&gt; {\n            *a = b.clone();\n        }\n    }\n}\n\nfn main() {\n    let mut a = json!({\n        \"title\": \"This is a title\",\n        \"person\" : {\n            \"firstName\" : \"John\",\n            \"lastName\" : \"Doe\"\n        },\n        \"cities\":[ \"london\", \"paris\" ]\n    });\n\n    let b = json!({\n        \"title\": \"This is another title\",\n        \"person\" : {\n            \"firstName\" : \"Jane\"\n        },\n        \"cities\":[ \"colombo\" ]\n    });\n\n    merge(&amp;mut a, &amp;b);\n    println!(\"{:#}\", a);\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 2675, "user_id": 545475, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/zl64v.jpg?s=128&g=1", "display_name": "Arnavion", "link": "https://stackoverflow.com/users/545475/arnavion"}, "edited": false, "score": 0, "creation_date": 1546993197, "post_id": 47142105, "comment_id": 95036091, "body": "This algorithm is not correct since it does not delete keys whose value is null in the patch. <code>v.is_null()</code> needs to be checked before the recursive call to <code>merge</code>"}], "tags": [], "owner": {"reputation": 4030, "user_id": 454378, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/35ecec2dbfe92776f966832447c8ac2d?s=128&d=identicon&r=PG", "display_name": "Harindaka", "link": "https://stackoverflow.com/users/454378/harindaka"}, "is_accepted": true, "score": 4, "last_activity_date": 1509987743, "creation_date": 1509987743, "answer_id": 47142105, "question_id": 47070876, "link": "https://stackoverflow.com/questions/47070876/how-can-i-merge-two-json-objects-with-rust/47142105#47142105", "title": "How can I merge two JSON objects with Rust?", "body": "<p>Placing the answer suggested by Shepmaster below</p>\n\n<pre><code>#[macro_use]\nextern crate serde_json;\n\nuse serde_json::Value;\n\nfn merge(a: &amp;mut Value, b: Value) {\n    match (a, b) {\n        (a @ &amp;mut Value::Object(_), Value::Object(b)) =&gt; {\n            let a = a.as_object_mut().unwrap();\n            for (k, v) in b {\n                merge(a.entry(k).or_insert(Value::Null), v);\n            }\n        }\n        (a, b) =&gt; *a = b,\n    }\n}\n\nfn main() {\n    let mut a = json!({\n        \"title\": \"This is a title\",\n        \"person\" : {\n            \"firstName\" : \"John\",\n            \"lastName\" : \"Doe\"\n        },\n        \"cities\":[ \"london\", \"paris\" ]\n    });\n\n    let b = json!({\n        \"title\": \"This is another title\",\n        \"person\" : {\n            \"firstName\" : \"Jane\"\n        },\n        \"cities\":[ \"colombo\" ]\n    });\n\n    merge(&amp;mut a, b);\n    println!(\"{:#}\", a);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 2675, "user_id": 545475, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/zl64v.jpg?s=128&g=1", "display_name": "Arnavion", "link": "https://stackoverflow.com/users/545475/arnavion"}, "is_accepted": false, "score": 4, "last_activity_date": 1547077818, "last_edit_date": 1547077818, "creation_date": 1547068478, "answer_id": 54118457, "question_id": 47070876, "link": "https://stackoverflow.com/questions/47070876/how-can-i-merge-two-json-objects-with-rust/54118457#54118457", "title": "How can I merge two JSON objects with Rust?", "body": "<p>Since you wanted to use <a href=\"https://github.com/idubrov/json-patch\" rel=\"nofollow noreferrer\">json-patch</a>, I assume you were looking specifically for a <a href=\"https://tools.ietf.org/html/rfc7396\" rel=\"nofollow noreferrer\">JSON Merge Patch (RFC 7396)</a> implementation which is what that crate implements. In that case, merging an object should unset those keys whose corresponding value in the patch is <code>null</code>, which the code samples in the other answers do not implement.</p>\n\n<p>The code that accounts for that is below. I modified the patch to delete the <code>person.lastName</code> key by setting it to <code>null</code> as a demonstration. It also does not need to <code>unwrap()</code> the <code>Option</code> returned by <code>as_object_mut()</code>.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[macro_use]\nextern crate serde_json;\n\nuse serde_json::Value;\n\nfn merge(a: &amp;mut Value, b: Value) {\n    if let Value::Object(a) = a {\n        if let Value::Object(b) = b {\n            for (k, v) in b {\n                if v.is_null() {\n                    a.remove(&amp;k);\n                }\n                else {\n                    merge(a.entry(k).or_insert(Value::Null), v);\n                }\n            } \n\n            return;\n        }\n    }\n\n    *a = b;\n}\n\nfn main() {\n    let mut a = json!({\n        \"title\": \"This is a title\",\n        \"person\" : {\n            \"firstName\" : \"John\",\n            \"lastName\" : \"Doe\"\n        },\n        \"cities\":[ \"london\", \"paris\" ]\n    });\n\n    let b = json!({\n        \"title\": \"This is another title\",\n        \"person\" : {\n            \"firstName\" : \"Jane\",\n            \"lastName\": null\n        },\n        \"cities\":[ \"colombo\" ]\n    });\n\n    merge(&amp;mut a, b);\n    println!(\"{:#}\", a);\n}\n</code></pre>\n\n<p>The expected output is</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>{\n  \"cities\": [\n    \"colombo\"\n  ],\n  \"person\": {\n    \"firstName\": \"Jane\"\n  },\n  \"title\": \"This is a title\"\n}\n</code></pre>\n\n<p>Notice <code>person.lastName</code> has been unset.</p>\n"}], "owner": {"reputation": 4030, "user_id": 454378, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/35ecec2dbfe92776f966832447c8ac2d?s=128&d=identicon&r=PG", "display_name": "Harindaka", "link": "https://stackoverflow.com/users/454378/harindaka"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1882, "favorite_count": 1, "accepted_answer_id": 47142105, "answer_count": 3, "score": 6, "last_activity_date": 1547077818, "creation_date": 1509612011, "last_edit_date": 1509626890, "question_id": 47070876, "link": "https://stackoverflow.com/questions/47070876/how-can-i-merge-two-json-objects-with-rust", "title": "How can I merge two JSON objects with Rust?", "body": "<p>I have two JSON files:</p>\n\n<p><strong>JSON 1</strong></p>\n\n<pre><code>{\n  \"title\": \"This is a title\",\n  \"person\" : {\n    \"firstName\" : \"John\",\n    \"lastName\" : \"Doe\"\n  },\n  \"cities\":[ \"london\", \"paris\" ]\n}\n</code></pre>\n\n<p><strong>JSON 2</strong></p>\n\n<pre><code>{\n  \"title\": \"This is another title\",\n  \"person\" : {\n    \"firstName\" : \"Jane\"\n  },\n  \"cities\":[ \"colombo\" ]\n}\n</code></pre>\n\n<p>I want to merge #2 into #1 where #2 overrides #1, producing following output:</p>\n\n<pre><code>{\n  \"title\": \"This is another title\",\n  \"person\" : {\n    \"firstName\" : \"Jane\",\n    \"lastName\" : \"Doe\"\n  },\n  \"cities\":[ \"colombo\" ]\n}\n</code></pre>\n\n<p>I checked out the crate <a href=\"https://github.com/idubrov/json-patch\" rel=\"noreferrer\">json-patch</a> which does this but it does not compile against stable Rust. Is it possible to do something similar with something like <a href=\"https://github.com/serde-rs/json\" rel=\"noreferrer\">serde_json</a> and stable Rust?</p>\n"}]