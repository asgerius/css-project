[{"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "edited": false, "score": 1, "creation_date": 1453986034, "post_id": 35050159, "comment_id": 57847068, "body": "btw: you can simplify f to take only a single lifetime parameter because you basically said that they have to be the same in the where clause."}], "answers": [{"tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": false, "score": 5, "last_activity_date": 1453938145, "creation_date": 1453938145, "answer_id": 35050346, "question_id": 35050159, "link": "https://stackoverflow.com/questions/35050159/the-outlives-relation-and-actual-scopes/35050346#35050346", "title": "The \u201coutlives\u201d relation and actual scopes", "body": "<p>Here are three things which in combination explain the behavior you see:</p>\n\n<ul>\n<li>The <code>'x</code> on <code>f</code> is a completely different, independent lifetime parameter from the <code>'x</code> in <code>g</code>. The compiler can choose different concrete lifetimes to substitute for each.</li>\n<li><code>'x : 'y, 'y: 'x</code> means that <code>'x == 'y</code> (this is not real syntax).</li>\n<li>If you have a reference, you can implicitly create another reference with a <em>shorter</em> lifetime from it. Consider for example the function <code>fn mangle_a_string&lt;'a&gt;(_s: &amp;'a str) -&gt; &amp;'a str { \"a static string\" }</code></li>\n</ul>\n\n<p>So what happens in <code>f(x, &amp;y)</code> is that the first argument is coerced to a reference with a shorter lifetime, matching the second argument's lifetim, to satisfy the bounds in the <code>where</code> clause.</p>\n"}, {"tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 7, "last_activity_date": 1453938527, "last_edit_date": 1453938527, "creation_date": 1453938187, "answer_id": 35050354, "question_id": 35050159, "link": "https://stackoverflow.com/questions/35050159/the-outlives-relation-and-actual-scopes/35050354#35050354", "title": "The \u201coutlives\u201d relation and actual scopes", "body": "<p>Lifetimes have <a href=\"http://doc.rust-lang.org/stable/nomicon/subtyping.html\">variance</a>, that is, the compiler can choose to shorten the lifetime of a <code>&amp;'a Foo</code> to some <code>&amp;'b Foo</code>. The lifetime of a reference like that just means that the <code>Foo</code> lasts at least as long as <code>'a</code>: a shorter lifetime still satisfies this guarantee. This is what is happening here: the <code>'x</code> lifetime is being shortened to have the same lifetime as the <code>&amp;y</code> reference.</p>\n\n<p>You can use invariance to stop this compiling: if the lifetime <code>'x</code> cannot be shortened, then the code will stop compiling as you expect.</p>\n\n<pre><code>use std::cell::Cell;\n\nstruct Foo;\n\nstruct Bar&lt;'a&gt; {\n   foo: Cell&lt;&amp;'a Foo&gt;\n}\n\n\nfn f&lt;'x, 'y&gt;(_: Cell&lt;&amp;'x Foo&gt;, _: &amp;'y Bar&lt;'x&gt;)\n     where 'y: 'x, 'x: 'y {\n}\n\nfn g&lt;'x&gt;(x: Cell&lt;&amp;'x Foo&gt;) {\n   let y = Bar {foo : x.clone()};\n   f(x, &amp;y);  // ?\n}\n\n\nfn main(){\n   let x = Foo;\n   g(Cell::new(&amp;x));\n}\n</code></pre>\n\n<pre class=\"lang-txt prettyprint-override\"><code>&lt;anon&gt;:16:10: 16:11 error: `y` does not live long enough\n&lt;anon&gt;:16    f(x, &amp;y);  // ?\n                   ^\n&lt;anon&gt;:14:28: 17:2 note: reference must be valid for the lifetime 'x as defined on the block at 14:27...\n&lt;anon&gt;:14 fn g&lt;'x&gt;(x: Cell&lt;&amp;'x Foo&gt;) {\n&lt;anon&gt;:15    let y = Bar {foo : x.clone()};\n&lt;anon&gt;:16    f(x, &amp;y);  // ?\n&lt;anon&gt;:17 }\n&lt;anon&gt;:15:34: 17:2 note: ...but borrowed value is only valid for the block suffix following statement 0 at 15:33\n&lt;anon&gt;:15    let y = Bar {foo : x.clone()};\n&lt;anon&gt;:16    f(x, &amp;y);  // ?\n&lt;anon&gt;:17 }\n</code></pre>\n\n<p>What is happening here is <code>Cell&lt;T&gt;</code> is invariant in <code>T</code>, because it is readable and writable. This in particular means that <code>Cell&lt;&amp;'x Foo&gt;</code> cannot be shortened to <code>Cell&lt;&amp;'y Foo&gt;</code>: filling it with a reference <code>&amp;'y Foo</code> that is truly <code>'y</code> (i.e. only lasts for <code>'y</code>) will mean the reference is dangling once the cell leaves <code>'y</code> (but is still in <code>'x</code>).</p>\n"}], "owner": {"reputation": 12035, "user_id": 603094, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/325af9a946cb4337c6640f0e95044be1?s=128&d=identicon&r=PG", "display_name": "kirelagin", "link": "https://stackoverflow.com/users/603094/kirelagin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 90, "favorite_count": 0, "accepted_answer_id": 35050354, "answer_count": 2, "score": 2, "last_activity_date": 1453938527, "creation_date": 1453937290, "question_id": 35050159, "link": "https://stackoverflow.com/questions/35050159/the-outlives-relation-and-actual-scopes", "title": "The \u201coutlives\u201d relation and actual scopes", "body": "<p>I was going through the legendary <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1214-projections-lifetimes-and-wf.md\" rel=\"nofollow\">RFC 1214</a> and it seems that I\u2019m missing something crucial.</p>\n\n<pre><code>struct Foo;\n\nstruct Bar&lt;'a&gt; {\n   foo: &amp;'a Foo\n}\n\n\nfn f&lt;'x, 'y&gt;(_: &amp;'x Foo, _: &amp;'y Bar&lt;'x&gt;)\n     where 'y: 'x, 'x: 'y {\n}\n\nfn g&lt;'x&gt;(x: &amp;'x Foo) {\n   let y = Bar {foo : x};\n   f(x, &amp;y);  // ?\n}\n\n\nfn main(){\n   let x = Foo;\n   g(&amp;x);\n}\n</code></pre>\n\n<p>In this code I went to great lengths to make sure that <code>'x : 'y</code> and <strong>not</strong> <code>'y : 'x</code>. The function that defines <code>x</code> calls the function that defines <code>y</code>, I believe this is already enough to guarantee that <code>x</code> outlives <code>y</code>, but I <em>also</em> put a reference to <code>x</code> inside <code>y</code>, just to make sure.</p>\n\n<p>Now, the constraints in <code>f</code> are such that the invocation of this function can\u2019t possibly be valid. I mean, well, it can, if and only if <code>'x == 'y</code>, but it totally looks like <code>x</code> lives strictly longer than <code>y</code>, as it is defined in the outer scope.</p>\n\n<p>Nevertheless, this code typechecks and compiles. How is this possible?</p>\n"}, {"tags": ["networking", "udp", "rust"], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 10, "last_activity_date": 1453933047, "last_edit_date": 1495535458, "creation_date": 1453933047, "answer_id": 35049167, "question_id": 35046343, "link": "https://stackoverflow.com/questions/35046343/udp-api-in-rust/35049167#35049167", "title": "UDP API in Rust", "body": "<p>The answer to both of these questions lies in the documentation of the respective BSD sockets functions, <code>sendto()</code> and <code>recvfrom()</code>. If you use some *nix system (OS X or Linux, for example), you can use <code>man sendto</code> and <code>man recvfrom</code> to find it.</p>\n\n<p>1) <code>sendto()</code> man page is rather vague on this; <a href=\"https://msdn.microsoft.com/ru-ru/library/windows/desktop/ms740148(v=vs.85).aspx\" rel=\"nofollow noreferrer\">Windows</a> API page explicitly says that it is possible for the return value be less than <code>len</code> argument. See also <a href=\"https://stackoverflow.com/questions/8900474/when-will-send-return-less-than-the-length-argument\">this</a> question. It looks like that this particular moment is somewhat under-documented. I think that it is probably safe to assume that the return value will always be equal either to <code>len</code> or to the error code. Problems may happen if the length of the data sent through <code>sendto()</code> exceeds the internal buffer size inside the OS kernel, but it seems that at least Windows will return an error in this case.</p>\n\n<p>2) <code>recvfrom()</code> man page unambiguously states that the part of a datagram which does not fit into the buffer will be discarded:</p>\n\n<blockquote>\n  <p>The  recvfrom() function shall return the length of the message\n  written to the buffer pointed to by the buffer argument. For\n  message-based sockets, such as SOCK_RAW, SOCK_DGRAM, and\n  SOCK_SEQPACKET, the entire message shall be read in a single\n  operation. If a message is too long to fit in  the  supplied  buffer,\n  and MSG_PEEK is not set in the flags  argument, the excess bytes shall\n  be discarded.</p>\n</blockquote>\n\n<p>So yes, <code>recv_from()</code> will fill exactly 100 bytes, the rest will be discarded, and further calls to <code>recv_from()</code> will return new datagrams.</p>\n"}, {"tags": [], "owner": {"reputation": 1485, "user_id": 2895784, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/24a63ac1e68375fbed6619cdce8c119a?s=128&d=identicon&r=PG", "display_name": "kazagistar", "link": "https://stackoverflow.com/users/2895784/kazagistar"}, "is_accepted": false, "score": 2, "last_activity_date": 1454146270, "last_edit_date": 1454146270, "creation_date": 1453933247, "answer_id": 35049221, "question_id": 35046343, "link": "https://stackoverflow.com/questions/35046343/udp-api-in-rust/35049221#35049221", "title": "UDP API in Rust", "body": "<p>If you <a href=\"https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src/libstd/sys/common/net.rs#L374\" rel=\"nofollow\">dig down</a>, it just wrapping the <a href=\"http://pubs.opengroup.org/onlinepubs/009695399/functions/sendto.html\" rel=\"nofollow\">C sendto function</a>. This function returns number of bytes sent, so Rust just passes that on (while handling the -1 case and turning errno into actual errors).</p>\n"}], "owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 682, "favorite_count": 0, "accepted_answer_id": 35049167, "answer_count": 2, "score": 10, "last_activity_date": 1454146270, "creation_date": 1453922946, "question_id": 35046343, "link": "https://stackoverflow.com/questions/35046343/udp-api-in-rust", "title": "UDP API in Rust", "body": "<p>1) <a href=\"https://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.send_to\">API for send here</a> returns <code>Result&lt;usize&gt;</code>. Why is that ? In my head, a UDP send is all or none. The return value seems to suggest that sending can succeed but entire data may not be written which makes me code like:</p>\n\n<pre><code>let mut bytes_written = 0;\nwhile bytes_written &lt; data.len() {\n    bytes_written += match udp_socket.send_to(&amp;data[bytes_written..]) {\n         Ok(bytes_tx) =&gt; bytes_tx,\n         Err(_) =&gt; break,\n    }\n}\n</code></pre>\n\n<p>Recently someone told me this is completely unnecessary. But I don't understand. If that were true why is the return not <code>Result&lt;()&gt;</code> instead, which is also what i was expecting ?</p>\n\n<p>2)\n<a href=\"https://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.recv_from\">For reads</a> though I understand. I could give it a buffer of size 100 bytes but the datagram might only be 50 bytes long. So essentially I should utilise only <code>read_buf[..size_read]</code>. Here my question is what happens if the buffer size is 100 but the datagram size is say 150 bytes ? Will <code>recv_from</code> fill in only 100 bytes and return <code>Ok(100, some_peer_addr)</code> ? If i re-read will it fill in the remaining of the datagram ? What if another datagram of 50 bytes arrived before my second read ? Will i get just the remaining 50 bytes the second time and 50 bytes of new datagram the 3rd time or complete 100 bytes the 2nd time which also contains the new datagram ? Or will be an error and i will lose the 1st datagram on my initial read and never be able to recover it ?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1454036586, "post_id": 35046243, "comment_id": 57874917, "body": "The PATH separator is <code>;</code> on Windows!"}, {"owner": {"reputation": 7519, "user_id": 5747548, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/45e0667746a2b2050babf6e83ce467a3?s=128&d=identicon&r=PG&f=1", "display_name": "jkiiski", "link": "https://stackoverflow.com/users/5747548/jkiiski"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1454048870, "post_id": 35046243, "comment_id": 57878545, "body": "@FrancisGagn&#233; and the directory separator ``. My example was indeed Unix only. Probably should have mentioned that."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1454552434, "post_id": 35046243, "comment_id": 58099851, "body": "Just FYI: the <code>PATH</code>-searching code won&#39;t work properly on Windows; you also have to take <code>PATHEXT</code> into account.  A mess, innit? :P"}], "tags": [], "owner": {"reputation": 7519, "user_id": 5747548, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/45e0667746a2b2050babf6e83ce467a3?s=128&d=identicon&r=PG&f=1", "display_name": "jkiiski", "link": "https://stackoverflow.com/users/5747548/jkiiski"}, "is_accepted": true, "score": 12, "last_activity_date": 1453968663, "last_edit_date": 1453968663, "creation_date": 1453922629, "answer_id": 35046243, "question_id": 35045996, "link": "https://stackoverflow.com/questions/35045996/check-if-a-command-is-in-path-executable-as-process/35046243#35046243", "title": "Check if a command is in PATH/executable as process", "body": "<p>You can use <code>e.kind()</code> to find what <a href=\"https://doc.rust-lang.org/std/io/enum.ErrorKind.html\" rel=\"noreferrer\"><code>ErrorKind</code></a> the error was.</p>\n\n<pre><code>match Command::new(\"rustc\").spawn() {\n    Ok(_) =&gt; println!(\"Was spawned :)\"),\n    Err(e) =&gt; {\n        if let NotFound = e.kind() {\n            println!(\"`rustc` was not found! Check your PATH!\")\n        } else {\n            println!(\"Some strange error occurred :(\");\n        }\n    }, \n}\n</code></pre>\n\n<p><strong>Edit:</strong> I didn't find any explicit documentation about what error kinds can be returned, so I looked up the source code. It seems the error is returned straight from the OS. The relevant code seems to be in <code>src/libstd/sys/[unix/windows/..]/process.rs</code>. A snippet from the Unix version: </p>\n\n<p><strong>One more edit: On a second thought, I'm not sure if the licenses actually allows posting parts of Rust sources here, so you can see it on <a href=\"https://github.com/rust-lang/rust/blob/master/src/libstd/sys/unix/process.rs#L174\" rel=\"noreferrer\">github</a></strong></p>\n\n<p>Which just returns <code>Error::from_raw_os_err(...)</code>. The Windows version seemed more complicated, and I couldn't immediately find where it even returns errors from. Either way, it seems you're at the mercy of your operating system regarding that. At least I found the following test in <code>src/libstd/process.rs</code>:</p>\n\n<p><strong>Same as above: <a href=\"https://github.com/rust-lang/rust/blob/master/src/libstd/process.rs#L751\" rel=\"noreferrer\">github</a></strong></p>\n\n<p>That seems to guarantee that an <code>ErrorKind::NotFound</code> should be returned at least when the binary is not found. It makes sense to assume that the OS wouldn't give a NotFound error in other cases, but who knows. If you want to be absolutely sure that the program really was not found, you'll have to search the directories in $PATH manually. Something like:</p>\n\n<pre><code>use std::env;\nuse std::fs;\n\nfn is_program_in_path(program: &amp;str) -&gt; bool {\n    if let Ok(path) = env::var(\"PATH\") {\n        for p in path.split(\":\") {\n            let p_str = format!(\"{}/{}\", p, program);\n            if fs::metadata(p_str).is_ok() {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let program = \"rustca\"; // shouldn't be found\n    if is_program_in_path(program) {\n        println!(\"Yes.\");\n    } else {\n        println!(\"No.\");\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1942, "favorite_count": 0, "accepted_answer_id": 35046243, "answer_count": 1, "score": 10, "last_activity_date": 1453968663, "creation_date": 1453921872, "question_id": 35045996, "link": "https://stackoverflow.com/questions/35045996/check-if-a-command-is-in-path-executable-as-process", "title": "Check if a command is in PATH/executable as process", "body": "<p>I want to execute an external program via <code>std::process::Command::spawn</code>. Furthermore I want to know the reason why spawning the process failed: is it because the given program name doesn't exist/is not in PATH or because of some different error?</p>\n\n<p>Example code of what I want to achieve:</p>\n\n<pre><code>match Command::new(\"rustc\").spawn() {\n    Ok(_) =&gt; println!(\"Was spawned :)\"),\n    Err(e) =&gt; {\n        if /* ??? */ {\n            println!(\"`rustc` was not found! Check your PATH!\")\n        } else {\n            println!(\"Some strange error occurred :(\");\n        }\n    }, \n}\n</code></pre>\n\n<p>When I try to execute a program that isn't on my system, I get:</p>\n\n<pre><code>Error { repr: Os { code: 2, message: \"No such file or directory\" } }\n</code></pre>\n\n<p>But I don't want to rely on that. Is there a way to determine if a program exists in PATH?</p>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1453901646, "post_id": 35038461, "comment_id": 57801880, "body": "Why do you want to constrain <code>N</code> to the lifetime of <code>self</code>? Could you show us an example implementation of <code>MyTrait</code>? Maybe you just need to change <code>&amp;&#39;a self</code> to <code>&amp;self</code>."}, {"owner": {"reputation": 12035, "user_id": 603094, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/325af9a946cb4337c6640f0e95044be1?s=128&d=identicon&r=PG", "display_name": "kirelagin", "link": "https://stackoverflow.com/users/603094/kirelagin"}, "edited": false, "score": 0, "creation_date": 1453903422, "post_id": 35038461, "comment_id": 57803170, "body": "\u201cWhat I really want is that the associated type <code>N</code> is always restricted to the lifetime of <code>self</code>.\u201d I\u2019d like to point out that the <code>:</code> in the context of lifetimes means \u201coutlives\u201d, not the other way around. So <code>N: &#39;a</code> does not really restrict <code>N</code>, it just says that it lives at least as long as <code>self</code>, which should be true anyway for the struct type to be well-formed."}, {"owner": {"reputation": 12035, "user_id": 603094, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/325af9a946cb4337c6640f0e95044be1?s=128&d=identicon&r=PG", "display_name": "kirelagin", "link": "https://stackoverflow.com/users/603094/kirelagin"}, "edited": false, "score": 0, "creation_date": 1453903876, "post_id": 35038461, "comment_id": 57803525, "body": "Nevertheless, you still might need to put it down explicitly, e.g. for your example to work. I just wanted to make it clear, that this \u201crestriction\u201d works the other way around, you do not restrict it to the lifetime of <code>self</code>, you demand that it lives longer than <code>self</code>."}], "answers": [{"comments": [{"owner": {"reputation": 138, "user_id": 4302920, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/69a785f09b02536df5fcb5c05ae5fc38?s=128&d=identicon&r=PG&f=1", "display_name": "fifr", "link": "https://stackoverflow.com/users/4302920/fifr"}, "edited": false, "score": 1, "creation_date": 1453904843, "post_id": 35039317, "comment_id": 57804297, "body": "Thanks a lot. Where can I find something about this strange construct (I&#39;ve never seen that before)?"}, {"owner": {"reputation": 12035, "user_id": 603094, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/325af9a946cb4337c6640f0e95044be1?s=128&d=identicon&r=PG", "display_name": "kirelagin", "link": "https://stackoverflow.com/users/603094/kirelagin"}, "reply_to_user": {"reputation": 138, "user_id": 4302920, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/69a785f09b02536df5fcb5c05ae5fc38?s=128&d=identicon&r=PG&f=1", "display_name": "fifr", "link": "https://stackoverflow.com/users/4302920/fifr"}, "edited": false, "score": 1, "creation_date": 1453905398, "post_id": 35039317, "comment_id": 57804733, "body": "@fifr I\u2019m afraid, <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1214-projections-lifetimes-and-wf.md\" rel=\"nofollow noreferrer\">RFC 1214</a> is the only official source that I\u2019m aware of that kind of tries to explain <code>for&lt;\u2026&gt;</code>, which is, well, unfortunate."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1456396409, "post_id": 35039317, "comment_id": 58931304, "body": "The best source for an explanation for the <code>for&lt;...&gt;</code> syntax is now <a href=\"http://stackoverflow.com/a/35595491/1103681\">stackoverflow.com/a/35595491/1103681</a>"}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 3, "last_activity_date": 1530206143, "last_edit_date": 1530206143, "creation_date": 1453902962, "answer_id": 35039317, "question_id": 35038461, "link": "https://stackoverflow.com/questions/35038461/restrict-lifetime-parameter-to-scope-of-parameters-of-a-function/35039317#35039317", "title": "Restrict lifetime parameter to scope of parameters of a function", "body": "<p>What you want is not to bind a generic lifetime, but to allow \"any\" lifetime:</p>\n\n<pre><code>fn myfunc&lt;T: for&lt;'a&gt; MyTrait&lt;'a&gt;&gt;(g: T) {\n    g.func();\n}\n</code></pre>\n\n<p>Fully working example in the <a href=\"https://play.rust-lang.org/?gist=eacbfd30db8a3da18a326d37de5a0dd6&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">playground</a>.</p>\n\n<p>The best source for an explanation is <a href=\"http://stackoverflow.com/a/35595491/1103681\">How does for&lt;> syntax differ from a regular lifetime bound?</a>.</p>\n"}], "owner": {"reputation": 138, "user_id": 4302920, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/69a785f09b02536df5fcb5c05ae5fc38?s=128&d=identicon&r=PG&f=1", "display_name": "fifr", "link": "https://stackoverflow.com/users/4302920/fifr"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 156, "favorite_count": 1, "accepted_answer_id": 35039317, "answer_count": 1, "score": 4, "last_activity_date": 1530206143, "creation_date": 1453900650, "last_edit_date": 1530206040, "question_id": 35038461, "link": "https://stackoverflow.com/questions/35038461/restrict-lifetime-parameter-to-scope-of-parameters-of-a-function", "title": "Restrict lifetime parameter to scope of parameters of a function", "body": "<p>Consider the following example</p>\n\n<pre><code>trait MyTrait&lt;'a&gt; {\n    type N: 'a;\n\n    fn func(&amp;'a self) -&gt; Self::N;\n}\n\nfn myfunc&lt;'a, T: 'a + MyTrait&lt;'a&gt;&gt;(g: T) {\n    g.func();\n}\n\nfn main() {}\n</code></pre>\n\n<p>Compiling this small program fails with:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `g` does not live long enough\n --&gt; src/main.rs:8:5\n  |\n8 |     g.func();\n  |     ^ borrowed value does not live long enough\n9 | }\n  | - borrowed value only lives until here\n  |\nnote: borrowed value must be valid for the lifetime 'a as defined on the function body at 7:1...\n --&gt; src/main.rs:7:1\n  |\n7 | fn myfunc&lt;'a, T: 'a + MyTrait&lt;'a&gt;&gt;(g: T) {\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>As far as I understand, the lifetime parameter <code>'a</code> is not restricted and could be arbitrary. However, <code>g</code> is a parameter and its lifetime is only the function scope, therefore it does not satisfy the condition of lifetime <code>'a</code> in the definition of method <code>func</code>.</p>\n\n<p>What I really want is that the associated type <code>N</code> is always restricted to the lifetime of <code>self</code> in <code>MyTrait</code>. That's why I came up with the explicit lifetime parameter <code>'a</code> of <code>MyTrait</code>. I want function <code>myfunc</code> to work, i.e. <code>'a</code> should somehow be restricted to the lifetime of of the parameter <code>g</code>.</p>\n\n<p>What is the \"correct\" way to solve this problem?</p>\n\n<p>A very simple example is</p>\n\n<pre><code>struct MyPtr&lt;'a&gt; {\n    x: &amp;'a usize,\n}\n\nstruct MyStruct {\n    data: Vec&lt;usize&gt;,\n}\n\nimpl&lt;'a&gt; MyTrait&lt;'a&gt; for MyStruct {\n    type N = MyPtr&lt;'a&gt;;\n\n    fn func(&amp;'a self) -&gt; Self::N {\n        MyPtr { x: &amp;self.data[0] }\n    }\n}\n</code></pre>\n\n<p>Note that this is extremely simplified, of course. The idea is that <code>N</code> always contains a reference to something contained in <code>MyTrait</code> and should therefore never outlive <code>MyTrait</code>.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 1386, "user_id": 361010, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/1206e098d3797186a22dbf05e428e82c?s=128&d=identicon&r=PG", "display_name": "Jammy Lee", "link": "https://stackoverflow.com/users/361010/jammy-lee"}, "edited": false, "score": 0, "creation_date": 1455704268, "post_id": 35033806, "comment_id": 58604166, "body": "Just to share a interesting article about similar subject <a href=\"http://blog.zgtm.de/1\" rel=\"nofollow noreferrer\">blog.zgtm.de/1</a>"}], "answers": [{"comments": [{"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1453901732, "post_id": 35034407, "comment_id": 57801933, "body": "&quot;Large&quot; return values are returned by reference; I&#39;m not sure about parameters, but I wouldn&#39;t be surprised if &quot;large&quot; by-value parameters were passed by reference too."}, {"owner": {"reputation": 12035, "user_id": 603094, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/325af9a946cb4337c6640f0e95044be1?s=128&d=identicon&r=PG", "display_name": "kirelagin", "link": "https://stackoverflow.com/users/603094/kirelagin"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1453902819, "post_id": 35034407, "comment_id": 57802685, "body": "@FrancisGagn&#233; How do you mean? Is the compiler smart enough to allocate memory for the return value on the caller\u2019s stack in those cases?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 1, "creation_date": 1453931598, "post_id": 35034407, "comment_id": 57821800, "body": "Yes, and it happens even in debug builds, in order for the calling convention to be consistent. Even better, if you immediately put the result into a box, the code will actually perform the allocation first, then pass the pointer to the allocated memory and the function will write the return value there. Unfortunately, at the moment, <a href=\"http://is.gd/mkYzKC\" rel=\"nofollow noreferrer\">that&#39;s only true with the unstable <code>box</code> keyword</a>; <a href=\"http://is.gd/ygDBOg\" rel=\"nofollow noreferrer\">using <code>Box::new()</code> doesn&#39;t enable that optimization</a>. Placement syntax should hopefully fix that soon."}], "tags": [], "owner": {"reputation": 12035, "user_id": 603094, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/325af9a946cb4337c6640f0e95044be1?s=128&d=identicon&r=PG", "display_name": "kirelagin", "link": "https://stackoverflow.com/users/603094/kirelagin"}, "is_accepted": false, "score": 0, "last_activity_date": 1453900918, "last_edit_date": 1453900918, "creation_date": 1453889513, "answer_id": 35034407, "question_id": 35033806, "link": "https://stackoverflow.com/questions/35033806/how-does-rust-deal-with-structs-as-function-parameters-and-return-values/35034407#35034407", "title": "How does Rust deal with structs as function parameters and return values?", "body": "<p>I\u2019m not sure what you are asking.</p>\n\n<p>If your question is about what happens with the value you created from the point of view of you as a programmer, then the answer is it is <a href=\"http://rustbyexample.com/scope/move.html\" rel=\"nofollow\">moved</a> (unless it implements <a href=\"https://doc.rust-lang.org/std/marker/trait.Copy.html\" rel=\"nofollow\"><code>Copy</code></a>). You might want to go through some basic rust tutorials to grasp this concept.</p>\n\n<p>If you are asking about what happens under the hood, then I\u2019m afraid there might be no single answer. I believe, conceptually, the value is being copied using something like <code>memcpy</code>, but then the optimizer might kick in and eliminate this. I don\u2019t think there is something like a specification regarding this, and it might be better to consider this an implementation detail.</p>\n"}, {"tags": [], "owner": {"reputation": 326, "user_id": 5843065, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-cTIuTkR77zU/AAAAAAAAAAI/AAAAAAAAAR0/jRQUCc4yFMo/photo.jpg?sz=128", "display_name": "Chris Leech", "link": "https://stackoverflow.com/users/5843065/chris-leech"}, "is_accepted": true, "score": 20, "last_activity_date": 1453923212, "creation_date": 1453923212, "answer_id": 35046435, "question_id": 35033806, "link": "https://stackoverflow.com/questions/35033806/how-does-rust-deal-with-structs-as-function-parameters-and-return-values/35046435#35046435", "title": "How does Rust deal with structs as function parameters and return values?", "body": "<p>As a long time C programmer also playing with Rust recently, I understand where you're coming from. For me the important thing to understand was that in Rust value vs reference are about ownership, and the compiler can adjust the calling conventions to optimize around move semantics.</p>\n\n<p>So you can pass a value without it making a copy on the stack, but this moves the ownership to the called function. It's still in the calling functions stack frame, and from a C ABI perspective it's passing a pointer, but the compiler enforces that the value is never used again upon return.</p>\n\n<p>There's also return value optimization, where the calling function allocates space and the pointer is passed to the caller which can fill out the return value there directly. This is the sort of thing a C programmer would be used to handling manually.</p>\n\n<p>So the safety of the ownership rules and borrow checker, combined with the lack of a fixed guaranteed ABI/calling convention, allow the compiler to generate efficient call sites. And generally you worry more about ownership and lifetime, then needing to try and be clever about function call stack behavior.</p>\n"}], "owner": {"reputation": 1386, "user_id": 361010, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/1206e098d3797186a22dbf05e428e82c?s=128&d=identicon&r=PG", "display_name": "Jammy Lee", "link": "https://stackoverflow.com/users/361010/jammy-lee"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6332, "favorite_count": 2, "accepted_answer_id": 35046435, "answer_count": 2, "score": 13, "last_activity_date": 1453923212, "creation_date": 1453887985, "last_edit_date": 1453906116, "question_id": 35033806, "link": "https://stackoverflow.com/questions/35033806/how-does-rust-deal-with-structs-as-function-parameters-and-return-values", "title": "How does Rust deal with structs as function parameters and return values?", "body": "<p>I have some experience in C, but I'm new to Rust. What happens under the hood when I pass a struct into a function and I return a struct from a function? It seems it doesn't \"copy\" the struct, but if it isn't copied, where is the struct created? Is it in the stack of the outer function?</p>\n\n<pre><code>struct Point {\n    x: i32,\n    y: i32,\n}\n\n// I know it's better to pass in a reference here, \n// but I just want to clarify the point.\nfn copy_struct(p: Point) { \n    // Is this return value created in the outer stack \n    // so it won't be cleaned up while exiting this function?  \n    Point {.. p} \n}\n\nfn test() {\n    let p1 = Point { x: 1, y: 2 };\n    // Will p1 be copied or does copy_struct \n    // just use a reference of the one created on the outer stack?\n    let p2 = copy_struct(p1); \n}\n</code></pre>\n"}, {"tags": ["iterator", "rust", "move-semantics"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 2, "last_activity_date": 1453877345, "creation_date": 1453877345, "answer_id": 35030524, "question_id": 35030416, "link": "https://stackoverflow.com/questions/35030416/non-destructively-iterating-over-a-rust-collection-but-not-by-reference/35030524#35030524", "title": "Non-destructively iterating over a Rust collection, but not by reference", "body": "<p>You can define a function that takes a reference. You can even put it inside another function, if you want to keep it close to its usage.</p>\n\n<pre><code>fn foobar() {\n    fn to_uppercase(c: &amp;char) -&gt; ::std::char::ToUppercase {\n        c.to_uppercase()\n    }\n\n    // [...]\n\n    let channels_upper = channels.iter().flat_map(to_uppercase).collect();\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 6, "last_activity_date": 1453885219, "creation_date": 1453885219, "answer_id": 35032806, "question_id": 35030416, "link": "https://stackoverflow.com/questions/35030416/non-destructively-iterating-over-a-rust-collection-but-not-by-reference/35032806#35032806", "title": "Non-destructively iterating over a Rust collection, but not by reference", "body": "<p><code>Iterator</code> has a <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.cloned\"><code>cloned</code></a> method which is equivalent to <code>.map(|x| x.clone())</code> which, in case of <code>Copy</code> types is equivalent to <code>.map(|&amp;x| x)</code>. This way you can write</p>\n\n<pre><code>channels.iter().cloned().flat_map(char::to_uppercase).collect()\n</code></pre>\n"}], "owner": {"reputation": 2340, "user_id": 2250791, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e72d4f734d39c777f543025d36d4de4e?s=128&d=identicon&r=PG", "display_name": "Camden Narzt", "link": "https://stackoverflow.com/users/2250791/camden-narzt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 444, "favorite_count": 0, "accepted_answer_id": 35032806, "answer_count": 2, "score": 3, "last_activity_date": 1453905777, "creation_date": 1453876884, "last_edit_date": 1495541715, "question_id": 35030416, "link": "https://stackoverflow.com/questions/35030416/non-destructively-iterating-over-a-rust-collection-but-not-by-reference", "title": "Non-destructively iterating over a Rust collection, but not by reference", "body": "<p>I can write the following two ways, the second is inspired by <a href=\"https://stackoverflow.com/questions/34980343/what-is-the-idiomatic-way-to-create-a-collection-of-references-to-methods-that-t\">What is the idiomatic way to create a collection of references to methods that take self?</a>:</p>\n\n<pre><code>channels.iter().flat_map(|c|c.to_uppercase()).collect(),\nchannels.clone().into_iter().flat_map(char::to_uppercase).collect(),\n</code></pre>\n\n<p>The second line has to clone the collection because <code>char::to_uppercase</code> doesn't accept a reference as it's argument and <code>.iter()</code> provides references and <code>.into_iter()</code> moves the collection.</p>\n\n<p>Is there a way to do this that doesn't need to clone the collection or create a closure? I don't hate closures, I promise, and I know they're just turned into (usually inline) function calls in LLVM anyway, but I like the cleanness of referring to a function like in the second line and would prefer to use it if it can be done without the clone.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 7, "creation_date": 1453826235, "post_id": 35018919, "comment_id": 57764665, "body": "The type of <code>x</code> is <code>u8</code>; the type of <code>f</code> is <i>not</i> <code>u8</code>."}, {"owner": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "edited": false, "score": 0, "creation_date": 1453826340, "post_id": 35018919, "comment_id": 57764735, "body": "This is convention. Many languages use this. C++ has the trailing return type. OCaml has a similar function signature style. It just is."}, {"owner": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "edited": false, "score": 1, "creation_date": 1453826451, "post_id": 35018919, "comment_id": 57764817, "body": "One <i>possible</i> reason is that in mathematics, arrows indicate mappings from a domain to a codomain. For example, <code>f : X -&gt; Y</code>; <code>f</code> is a mapping of the set <code>X</code> to the set <code>Y</code>."}, {"owner": {"reputation": 2664, "user_id": 1424754, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BgiTe.png?s=128&g=1", "display_name": "nicholas", "link": "https://stackoverflow.com/users/1424754/nicholas"}, "edited": false, "score": 0, "creation_date": 1595072448, "post_id": 35018919, "comment_id": 111351811, "body": "Interesting old question, and that no one mentioned TypeScript which does use <code>:</code> to denote return types. Because functions names must have parenthesis there is no ambiguity: the type of <code>f(): number</code> is &quot;a function which returns a number."}], "answers": [{"comments": [{"owner": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "edited": false, "score": 0, "creation_date": 1453826899, "post_id": 35019131, "comment_id": 57765128, "body": "I think it&#39;s important to note that if you used <code>: T</code> to denote the return type, this would imply the &quot;type&quot; of <code>f</code> is <code>T</code>. Rust functions aren&#39;t first-class objects, though; they have no type. Closures are the exception to this (as they are anonymous)."}, {"owner": {"reputation": 12035, "user_id": 603094, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/325af9a946cb4337c6640f0e95044be1?s=128&d=identicon&r=PG", "display_name": "kirelagin", "link": "https://stackoverflow.com/users/603094/kirelagin"}, "reply_to_user": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "edited": false, "score": 2, "creation_date": 1453827057, "post_id": 35019131, "comment_id": 57765231, "body": "@erip How do you mean? Rust functions do have <a href=\"https://doc.rust-lang.org/reference.html#function-types\" rel=\"nofollow noreferrer\">types</a>."}, {"owner": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "edited": false, "score": 0, "creation_date": 1453827151, "post_id": 35019131, "comment_id": 57765287, "body": "I stand corrected. However, the conclusion is the same: functions&#39; return types cannot be denoted by a colon."}, {"owner": {"reputation": 12035, "user_id": 603094, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/325af9a946cb4337c6640f0e95044be1?s=128&d=identicon&r=PG", "display_name": "kirelagin", "link": "https://stackoverflow.com/users/603094/kirelagin"}, "reply_to_user": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "edited": false, "score": 1, "creation_date": 1453827318, "post_id": 35019131, "comment_id": 57765385, "body": "@erip Well, I don\u2019t think that replacing all the arrows with colons in the grammar would screw it or make it more difficult to parse. You do not specify the type of the declared item after the <code>fn</code> keyword, so there is no ambiguity. But I agree that this would be way more difficult to read for a human."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 3, "creation_date": 1453839168, "post_id": 35019131, "comment_id": 57772467, "body": "It is highly likely that the function return type is denoted by arrow because it is like that in ML family of languages, in particular, in OCaml, which was used for the first versions of Rust compiler."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 2, "creation_date": 1453896723, "post_id": 35019131, "comment_id": 57798433, "body": "This was discussed on the old mailing list: <a href=\"https://mail.mozilla.org/pipermail/rust-dev/2013-July/thread.html#5026\" rel=\"nofollow noreferrer\">whole thread</a>, <a href=\"https://mail.mozilla.org/pipermail/rust-dev/2013-July/005042.html\" rel=\"nofollow noreferrer\">graydon&#39;s response</a> (basically exactly what you said: good guess!)"}], "tags": [], "owner": {"reputation": 12035, "user_id": 603094, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/325af9a946cb4337c6640f0e95044be1?s=128&d=identicon&r=PG", "display_name": "kirelagin", "link": "https://stackoverflow.com/users/603094/kirelagin"}, "is_accepted": false, "score": 9, "last_activity_date": 1453827805, "last_edit_date": 1453827805, "creation_date": 1453826628, "answer_id": 35019131, "question_id": 35018919, "link": "https://stackoverflow.com/questions/35018919/whats-the-origin-of-in-rust-function-definition-return-types/35019131#35019131", "title": "What&#39;s the origin of -&gt; in Rust function definition return types?", "body": "<p>Well, I\u2019m only guessing, but I\u2019d say that the reason is purely aesthetic.\n<code>:</code> is often pronounced as \u201chas the type\u201d, while <code>-&gt;</code> is pronounced as \u201cto\u201d. So <code>f: fn(i32) -&gt; i32</code> means \u201cf <em>has the type</em> of functions from <code>i32</code> <em>to</em> <code>i32</code>\u201d.</p>\n\n<p>Basically, there are two contexts where the return value of a function can be mentioned:</p>\n\n<ol>\n<li><p>Function item declaration:</p>\n\n<pre><code>fn foo(x: i32) -&gt; i32 {\n  \u2026\n}\n</code></pre></li>\n<li><p>Assignment of a function to a variable with explicit type:</p>\n\n<pre><code>let f: fn(x: i32) -&gt; i32 = foo;\n</code></pre></li>\n</ol>\n\n<p>While using colon instead of arrow wouldn\u2019t hurt readability in the first case, it would definitely do so in the second one. And it makes perfect sense to have the same symbol in both contexts.</p>\n\n<p>The ultimate origin of this arrow is <a href=\"https://en.wikipedia.org/wiki/Simply_typed_lambda_calculus\" rel=\"noreferrer\">Simply Typed Lambda Calculus</a> where this arrow is used as the function type constructor. From there it came to Haskell, Scala (well, not exactly, they use <code>=&gt;</code>) and other languages.</p>\n"}], "owner": {"reputation": 8297, "user_id": 298847, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/b52bc71fb15db17f585b912aed45b217?s=128&d=identicon&r=PG", "display_name": "tibbe", "link": "https://stackoverflow.com/users/298847/tibbe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 893, "favorite_count": 1, "answer_count": 1, "score": 5, "last_activity_date": 1453827805, "creation_date": 1453826041, "question_id": 35018919, "link": "https://stackoverflow.com/questions/35018919/whats-the-origin-of-in-rust-function-definition-return-types", "title": "What&#39;s the origin of -&gt; in Rust function definition return types?", "body": "<p>Rust uses colons to separate identifiers from types, like in</p>\n\n<pre><code>let x: u8 = 1;\n</code></pre>\n\n<p>However, for function return types -> is used instead. Example:</p>\n\n<pre><code>fn f() -&gt; u8 { ... }\n</code></pre>\n\n<p>One might expect it to use a colon here as well:</p>\n\n<pre><code>fn f(): u8 { ... }\n</code></pre>\n\n<p>While using arrows has some precedence (e.g. in Haskell), I'm curious about the historical reason behind this choice. In addition, I'm also curious if it's a purely aesthetic reason or if using an arrow has some  technical reason e.g. in simplifying parsing.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 340, "user_id": 2662230, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5b53e99e5f299e6f7ee214ba4ce871c4?s=128&d=identicon&r=PG", "display_name": "nbsp", "link": "https://stackoverflow.com/users/2662230/nbsp"}, "edited": false, "score": 3, "creation_date": 1453824946, "post_id": 35018411, "comment_id": 57763772, "body": "I think you do. take a look at the <a href=\"https://doc.rust-lang.org/book/strings.html\" rel=\"nofollow noreferrer\">rust docs regarding strings</a>"}, {"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1453827244, "post_id": 35018411, "comment_id": 57765342, "body": "Indeed, string slices are called that way because they can refer to substrings of strings somewhere in memory. It&#39;s the same as for general slices, which refer to parts of arrays."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 14, "last_activity_date": 1453829182, "last_edit_date": 1453829182, "creation_date": 1453825150, "answer_id": 35018591, "question_id": 35018411, "link": "https://stackoverflow.com/questions/35018411/why-is-a-str-called-a-slice-in-rust/35018591#35018591", "title": "Why is a &amp;str called a slice in Rust?", "body": "<blockquote>\n  <p>when it's just a stack-allocated string</p>\n</blockquote>\n\n<p>This is not completely correct. A string slice (<code>&amp;str</code>) is conceptually built of two things:</p>\n\n<ol>\n<li>A pointer to the beginning of a string.</li>\n<li>The number of bytes in the string.</li>\n</ol>\n\n<p>The pointer may reference data on the stack, on the heap, or even in the constant program data.</p>\n\n<p>It's called a <em>string slice</em> because it mirrors a regular slice (<code>&amp;[T]</code>), which is the same two parts: a pointer and a length. </p>\n\n<p>Under the hood, a string is a slice of <code>u8</code> (<code>&amp;[u8]</code>) but it has a very important guarantee: the sequence of bytes is valid UTF-8.</p>\n\n<blockquote>\n  <p>a substring of some of other string</p>\n</blockquote>\n\n<p>Note that you can take the \"entire substring\" or \"entire slice\" of something, it doesn't have to be <em>strictly smaller</em>. For example:</p>\n\n<pre><code>let test_scores = [0, 10, 100];\nlet all_scores = &amp;test_scores[..]; // or &amp;test_scores[0..3]\nlet some_scores = &amp;test_scores[0..1];\n</code></pre>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user738888"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 380, "favorite_count": 0, "answer_count": 1, "score": 5, "last_activity_date": 1453829182, "creation_date": 1453824560, "question_id": 35018411, "link": "https://stackoverflow.com/questions/35018411/why-is-a-str-called-a-slice-in-rust", "title": "Why is a &amp;str called a slice in Rust?", "body": "<p>It makes me think that it's a substring of some of other string when it's just a stack-allocated string. Do I have the wrong understanding of it?</p>\n"}, {"tags": ["embedded", "rust"], "answers": [{"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 1, "last_activity_date": 1454055716, "last_edit_date": 1454055716, "creation_date": 1453797230, "answer_id": 35009686, "question_id": 35009015, "link": "https://stackoverflow.com/questions/35009015/how-do-i-write-to-a-memory-mapped-address-in-rust/35009686#35009686", "title": "How do I write to a memory-mapped address in Rust?", "body": "<p>rust has the <a href=\"https://doc.rust-lang.org/std/ptr/index.html\" rel=\"nofollow\"><code>std::ptr</code></a> module in the standard library. It offers functions like <a href=\"https://doc.rust-lang.org/std/ptr/fn.read.html\" rel=\"nofollow\"><code>ptr::read</code></a> and <a href=\"https://doc.rust-lang.org/std/ptr/fn.write.html\" rel=\"nofollow\"><code>ptr::write</code></a> which are much more explicit than dereferencing.</p>\n\n<p>So your example would be</p>\n\n<pre><code>const A: *mut u32 = (0x40021000 + 0x018) as *mut u32;\nconst B: *mut u32 = (0x40011000 + 0x004) as *mut u32;\nconst C: *mut u32 = (0x40011000 + 0x10) as *mut u32;\nunsafe {\n    ptr::write(A, ptr::read(A) | 0x10);\n    ptr::write(B, ptr::read(B) | 0x33);\n    ptr::write(B, ptr::read(B) &amp; !0xCC);\n    ptr::write(C, ptr::read(C) | 0x300);\n}\n</code></pre>\n\n<p>The more concise version is to use dereferencing, but that only works for <code>Copy</code> types:</p>\n\n<pre><code>*A |= 0x10;\n*B |= 0x33;\n*B &amp;= !0xCC;\n*C |= 0x300;\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 538, "user_id": 4911677, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/be942bfa276c4d1607d43dbf0e1631a7?s=128&d=identicon&r=PG", "display_name": "fevgenym", "link": "https://stackoverflow.com/users/4911677/fevgenym"}, "edited": false, "score": 0, "creation_date": 1453830898, "post_id": 35010896, "comment_id": 57767602, "body": "Does the compiler&#39;s behaviour for non-volatile pointers is the same for C and Rust?"}, {"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "reply_to_user": {"reputation": 538, "user_id": 4911677, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/be942bfa276c4d1607d43dbf0e1631a7?s=128&d=identicon&r=PG", "display_name": "fevgenym", "link": "https://stackoverflow.com/users/4911677/fevgenym"}, "edited": false, "score": 0, "creation_date": 1453882624, "post_id": 35010896, "comment_id": 57789377, "body": "Yes, the Rust compiler can do the same optimizations. The LLVM backend that does this is used for both languages."}], "tags": [], "owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "is_accepted": true, "score": 12, "last_activity_date": 1497336352, "last_edit_date": 1497336352, "creation_date": 1453801622, "answer_id": 35010896, "question_id": 35009015, "link": "https://stackoverflow.com/questions/35009015/how-do-i-write-to-a-memory-mapped-address-in-rust/35010896#35010896", "title": "How do I write to a memory-mapped address in Rust?", "body": "<p>In C you should declare your pointers as <code>volatile</code> when accessing hardware registers, so that the compiler does the accesses exactly as you program them. Otherwise it could reorder them or eliminate duplicate accesses to the same register.</p>\n\n<p>Since Rust 1.9 (thanks to this <a href=\"https://github.com/rust-lang/rfcs/pull/1467\" rel=\"noreferrer\">RFC</a>) you can use <code>core::ptr::read_volatile</code> and <code>core::ptr::write_volatile</code> to read and write to such memory.</p>\n\n<p>If you have an older version of Rust, these are available as <code>volatile_read</code> and <code>volatile_store</code> in <a href=\"https://doc.rust-lang.org/core/intrinsics/\" rel=\"noreferrer\">core::intrinsics</a>, which however are permanently unstable, and thus require a nightly version of Rust to access them.</p>\n"}, {"tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": false, "score": 7, "last_activity_date": 1497311921, "creation_date": 1497311921, "answer_id": 44510388, "question_id": 35009015, "link": "https://stackoverflow.com/questions/35009015/how-do-i-write-to-a-memory-mapped-address-in-rust/44510388#44510388", "title": "How do I write to a memory-mapped address in Rust?", "body": "<p>The functions <a href=\"https://doc.rust-lang.org/core/ptr/fn.read_volatile.html\" rel=\"noreferrer\"><code>read_volatile</code></a> and <a href=\"https://doc.rust-lang.org/core/ptr/fn.write_volatile.html\" rel=\"noreferrer\"><code>write_volatile</code></a> are stable since version 1.9, so you should be using these. Borrowing @ker's translated sample for demonstration:</p>\n\n<pre><code>use std::ptr::{read_volatile, write_volatile};\n\nconst A: *mut u32 = (0x40021000 + 0x018) as *mut u32;\nconst B: *mut u32 = (0x40011000 + 0x004) as *mut u32;\nconst C: *mut u32 = (0x40011000 + 0x10) as *mut u32;\nunsafe {\n    write_volatile(A, read_volatile(A) | 0x10);\n    write_volatile(B, read_volatile(B) | 0x33);\n    write_volatile(B, read_volatile(B) &amp; !0xCC);\n    write_volatile(C, read_volatile(C) | 0x300);\n}\n</code></pre>\n\n<p>Furthermore, the <a href=\"https://crates.io/crates/volatile\" rel=\"noreferrer\"><code>volatile</code></a> crate provides wrapper types around values for volatile access.</p>\n\n<pre><code>use volatile::Volatile;\n\nconst A: *mut u32 = (0x40021000 + 0x018) as *mut u32;\nconst B: *mut u32 = (0x40011000 + 0x004) as *mut u32;\nconst C: *mut u32 = (0x40011000 + 0x10) as *mut u32;\n\nconst volatile_A = A as *mut Volatile&lt;u32&gt;;\nconst volatile_B = B as *mut Volatile&lt;u32&gt;;\nconst volatile_C = C as *mut Volatile&lt;u32&gt;;\n\nunsafe {\n    (*volatile_A).update(|x| *x | 0x10);\n    (*volatile_B).update(|x| *x &amp; !0xCC);\n    (*volatile_C).update(|x| *x | 0x300);\n}\n</code></pre>\n"}], "owner": {"reputation": 538, "user_id": 4911677, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/be942bfa276c4d1607d43dbf0e1631a7?s=128&d=identicon&r=PG", "display_name": "fevgenym", "link": "https://stackoverflow.com/users/4911677/fevgenym"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1928, "favorite_count": 3, "accepted_answer_id": 35010896, "answer_count": 3, "score": 12, "last_activity_date": 1497357573, "creation_date": 1453794503, "last_edit_date": 1497357573, "question_id": 35009015, "link": "https://stackoverflow.com/questions/35009015/how-do-i-write-to-a-memory-mapped-address-in-rust", "title": "How do I write to a memory-mapped address in Rust?", "body": "<p>I'm trying to make \"Blinky\" for STM32F1xx in Rust.\nI know that there are libs for it, but I want to make my own \"lib\" for learning purposes.</p>\n\n<p>I can access STM32's \"registers\" by their addresses like this in C:</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>*(uint32_t*)(0x40021000 + 0x018) |= 0x10;\n*(uint32_t*)(0x40011000 + 0x004) |= 0x33;\n*(uint32_t*)(0x40011000 + 0x004) &amp;= ~0xCC;\n*(uint32_t*)(0x40011000 + 0x10) |= 0x300;\n\nwhile(1) {}\n</code></pre>\n\n<p>This writes some bits to the <code>RCC_APB2ENR</code> register to enable clocking of port C, configures pins and enables LEDs on my Discovery.</p>\n\n<p>I need to re-write this it in Rust, to make consts, fns and start writing nice Rusty code. Is it possible in Rust without FFI calling C code? Can I achieve this with the <code>asm!</code> macro?</p>\n"}, {"tags": ["rust", "filepath", "file-extension"], "answers": [{"comments": [{"owner": {"reputation": 3542, "user_id": 2984585, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/d8b299670c2e1512831e7d2026a8d350?s=128&d=identicon&r=PG", "display_name": "ditoslav", "link": "https://stackoverflow.com/users/2984585/ditoslav"}, "edited": false, "score": 1, "creation_date": 1607526441, "post_id": 35007531, "comment_id": 115300921, "body": "Is there a method which gets the full absolute path before extension, not just the filename?"}], "tags": [], "owner": {"reputation": 854, "user_id": 3989982, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6941e7388870864da83acedf9e9c7693?s=128&d=identicon&r=PG&f=1", "display_name": "Tibor Benke", "link": "https://stackoverflow.com/users/3989982/tibor-benke"}, "is_accepted": true, "score": 20, "last_activity_date": 1453818157, "last_edit_date": 1453818157, "creation_date": 1453786049, "answer_id": 35007531, "question_id": 35007513, "link": "https://stackoverflow.com/questions/35007513/how-to-get-file-path-without-extension-in-rust/35007531#35007531", "title": "How to get file path without extension in Rust?", "body": "<p>Check the <a href=\"https://doc.rust-lang.org/std/path/struct.Path.html#method.file_stem\"><code>Path::file_stem</code> method</a>. You can find an example there. It works at least from Rust 1.6.</p>\n"}, {"tags": [], "owner": {"reputation": 388, "user_id": 494140, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7cef852620f025d7c610f1ceb68af267?s=128&d=identicon&r=PG", "display_name": "V02460", "link": "https://stackoverflow.com/users/494140/v02460"}, "is_accepted": false, "score": 0, "last_activity_date": 1610904886, "creation_date": 1610904886, "answer_id": 65763843, "question_id": 35007513, "link": "https://stackoverflow.com/questions/35007513/how-to-get-file-path-without-extension-in-rust/65763843#65763843", "title": "How to get file path without extension in Rust?", "body": "<p>Using the <a href=\"https://doc.rust-lang.org/std/path/struct.Path.html#method.with_extension\" rel=\"nofollow noreferrer\"><code>Path::with_extension(&quot;&quot;)</code> method</a> gives you the full path with a possible file extension removed.</p>\n"}], "owner": {"reputation": 400, "user_id": 5840215, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-OjikolJf9jA/AAAAAAAAAAI/AAAAAAAAABc/hDIYGC4S52E/photo.jpg?sz=128", "display_name": "lem0nify", "link": "https://stackoverflow.com/users/5840215/lem0nify"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6435, "favorite_count": 0, "accepted_answer_id": 35007531, "answer_count": 2, "score": 13, "last_activity_date": 1610904886, "creation_date": 1453785916, "last_edit_date": 1453818217, "question_id": 35007513, "link": "https://stackoverflow.com/questions/35007513/how-to-get-file-path-without-extension-in-rust", "title": "How to get file path without extension in Rust?", "body": "<p>Please help me to find an elegant way to get file path without extension; cut off file extension from path or something.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 615, "user_id": 1325109, "user_type": "registered", "accept_rate": 22, "profile_image": "https://www.gravatar.com/avatar/503cdb1e62fb2c8e86674c23b394e298?s=128&d=identicon&r=PG&f=1", "display_name": "dmgcodevil", "link": "https://stackoverflow.com/users/1325109/dmgcodevil"}, "edited": false, "score": 0, "creation_date": 1453781843, "post_id": 35006337, "comment_id": 57741526, "body": "Thanks. Now I understand it better. Thanks for advice about printing types, it turns out very helpful for troubleshooting"}, {"owner": {"reputation": 26475, "user_id": 75224, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b6440683c246597812d8a37339538d68?s=128&d=identicon&r=PG", "display_name": "stej", "link": "https://stackoverflow.com/users/75224/stej"}, "edited": false, "score": 0, "creation_date": 1464939135, "post_id": 35006337, "comment_id": 62700728, "body": "Is the link under <i>print out the types involved</i> still available? There is a SO questions, but I thought the link pointed to some answer."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 26475, "user_id": 75224, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b6440683c246597812d8a37339538d68?s=128&d=identicon&r=PG", "display_name": "stej", "link": "https://stackoverflow.com/users/75224/stej"}, "edited": false, "score": 1, "creation_date": 1464954712, "post_id": 35006337, "comment_id": 62709958, "body": "@stej the link is to the question. That allows a better answer to come in or for the implementer to pick a different answer if the situation is different. In this case I used the &quot;assign to the empty tuple&quot; version."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 34, "last_activity_date": 1546129314, "last_edit_date": 1546129314, "creation_date": 1453776966, "answer_id": 35006337, "question_id": 35005704, "link": "https://stackoverflow.com/questions/35005704/cannot-borrow-immutable-borrowed-content-as-mutable/35006337#35006337", "title": "Cannot borrow immutable borrowed content as mutable", "body": "<p>Here is an <a href=\"/help/mcve\">MCVE</a> of your problem:</p>\n\n<pre><code>use std::collections::HashMap;\n\nstruct Components {\n    data: HashMap&lt;u8, Vec&lt;u8&gt;&gt;,\n}\n\nimpl Components {\n    fn add_or_update(&amp;mut self, component: u8) {\n        let mut q = self.data.get(&amp;component);\n        let mut queue = q.as_mut().unwrap();\n        queue.remove(0);\n    }\n}\n</code></pre>\n\n<p><strong>Before NLL</strong></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0596]: cannot borrow immutable borrowed content `**queue` as mutable\n  --&gt; src/lib.rs:11:9\n   |\n11 |         queue.remove(0);\n   |         ^^^^^ cannot borrow as mutable\n</code></pre>\n\n<p><strong>After NLL</strong></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0596]: cannot borrow `**queue` as mutable, as it is behind a `&amp;` reference\n  --&gt; src/lib.rs:11:9\n   |\n11 |         queue.remove(0);\n   |         ^^^^^ cannot borrow as mutable\n</code></pre>\n\n<p>Many times, when something seems surprising like this, it's useful to <a href=\"https://stackoverflow.com/q/21747136/155423\">print out the types involved</a>. Let's print out the type of <code>queue</code>:</p>\n\n<pre><code>let mut queue: () = q.as_mut().unwrap();\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/lib.rs:10:29\n   |\n10 |         let mut queue: () = q.as_mut().unwrap();\n   |                             ^^^^^^^^^^^^^^^^^^^ expected (), found mutable reference\n   |\n   = note: expected type `()`\n              found type `&amp;mut &amp;std::vec::Vec&lt;u8&gt;`\n</code></pre>\n\n<p>We have a <em>mutable</em> reference to an <em>immutable</em> reference to a <code>Vec&lt;u8&gt;</code>. Because we have an immutable reference to the <code>Vec</code>, we cannot modify it! Changing <code>self.data.get</code> to <code>self.data.get_mut</code> changes the type to <code>&amp;mut &amp;mut collections::vec::Vec&lt;u8&gt;</code> and the code compiles.</p>\n\n<hr>\n\n<p>If you want to implement the concept of \"insert or update\", you should check into the <a href=\"http://doc.rust-lang.org/std/collections/struct.HashMap.html#method.entry\" rel=\"nofollow noreferrer\"><code>entry</code> API</a>, which is more efficient and concise.</p>\n\n<p>Beyond that, Rust uses <code>snake_case</code> for method naming, not <code>camelCase</code>.</p>\n"}], "owner": {"reputation": 615, "user_id": 1325109, "user_type": "registered", "accept_rate": 22, "profile_image": "https://www.gravatar.com/avatar/503cdb1e62fb2c8e86674c23b394e298?s=128&d=identicon&r=PG&f=1", "display_name": "dmgcodevil", "link": "https://stackoverflow.com/users/1325109/dmgcodevil"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 14036, "favorite_count": 3, "accepted_answer_id": 35006337, "answer_count": 1, "score": 22, "last_activity_date": 1546129314, "creation_date": 1453772493, "last_edit_date": 1490651511, "question_id": 35005704, "link": "https://stackoverflow.com/questions/35005704/cannot-borrow-immutable-borrowed-content-as-mutable", "title": "Cannot borrow immutable borrowed content as mutable", "body": "<p>I'm trying to develop a message routing app. I've read the official Rust docs and some articles and thought that I got how pointers, owning, and borrowing stuff works but realized that I didn't.</p>\n\n<pre><code>use std::collections::HashMap;\nuse std::vec::Vec;\n\nstruct Component {\n    address: &amp;'static str,\n    available_workers: i32,\n    lang: i32\n}\n\nstruct Components {\n    data: HashMap&lt;i32, Vec&lt;Component&gt;&gt;\n}\n\nimpl Components {\n    fn new() -&gt; Components {\n        Components {data: HashMap::new() }\n    }\n\n    fn addOrUpdate(&amp;mut self, component: Component) -&gt; &amp;Components {\n        if !self.data.contains_key(&amp;component.lang) {\n\n            self.data.insert(component.lang, vec![component]);\n        } else {\n            let mut q = self.data.get(&amp;component.lang); // this extra line is required because of the error: borrowed value does not live long enough\n            let mut queue = q.as_mut().unwrap();\n            queue.remove(0);\n            queue.push(component);\n        }\n        self\n    }\n\n}\n</code></pre>\n\n<p>(Also available on the <a href=\"https://play.rust-lang.org/?gist=8cd9bda8afba5dbb3d239214692302e0&amp;version=stable\" rel=\"noreferrer\">playground</a>)</p>\n\n<p>Produces the error: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: cannot borrow immutable borrowed content `**queue` as mutable\n  --&gt; src/main.rs:26:13\n   |\n26 |             queue.remove(0);\n   |             ^^^^^ cannot borrow as mutable\n\nerror: cannot borrow immutable borrowed content `**queue` as mutable\n  --&gt; src/main.rs:27:13\n   |\n27 |             queue.push(component);\n   |             ^^^^^ cannot borrow as mutable\n</code></pre>\n\n<p>Could you please explain the error and it would be great if you can give me the right implementation.</p>\n"}, {"tags": ["list", "polymorphism", "rust", "self", "traits"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1453757721, "post_id": 35002610, "comment_id": 57733749, "body": "<a href=\"http://codereview.stackexchange.com/\">codereview.stackexchange.com</a> might be better suited for this kind of question..."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1453758858, "post_id": 35002610, "comment_id": 57734366, "body": "Please ask <a href=\"http://meta.stackexchange.com/q/39223/281829\">only one question per question</a>. The answer to &quot;is it idiomatic&quot; may be found on Code Review, but please review <a href=\"http://meta.codereview.stackexchange.com/q/5777/32521\">this post</a> before moving your question there. Perhaps you can pick one of the functional questions and reword your question to focus on it to start with?"}, {"owner": {"reputation": 746, "user_id": 1950231, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/df0910fa12013d5192756e65e68452fb?s=128&d=identicon&r=PG", "display_name": "Jamal", "link": "https://stackoverflow.com/users/1950231/jamal"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 3, "creation_date": 1453759080, "post_id": 35002610, "comment_id": 57734475, "body": "@LukasKalbertodt: No, it doesn&#39;t appear to be because 1.) errors are mentioned and 2.) all the <code>Foo</code>s and <code>Bar</code>s indicate that this is mostly hypothetical code."}], "answers": [{"comments": [{"owner": {"reputation": 114, "user_id": 3288397, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a8d5523aa619966b3a29f760630ac8eb?s=128&d=identicon&r=PG&f=1", "display_name": "Thomas Legris", "link": "https://stackoverflow.com/users/3288397/thomas-legris"}, "edited": false, "score": 0, "creation_date": 1453817045, "post_id": 35006793, "comment_id": 57757931, "body": "Thank you very much Francis, I realized that there is absolutely no point putting a lifetime on self itself as it is not related to it in any way. I guess I was confused by the fact that we set the lifetime on the trait on the &quot;impl&quot; line."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 4, "last_activity_date": 1453780220, "creation_date": 1453780220, "answer_id": 35006793, "question_id": 35002610, "link": "https://stackoverflow.com/questions/35002610/issue-with-rust-using-dynamic-polymorphism-on-trait-when-specifying-lifetime-on/35006793#35006793", "title": "Issue with Rust using dynamic polymorphism on trait when specifying lifetime on self", "body": "<p>The second code sample will compile if you change the definition of <code>foobar</code> to this:</p>\n\n<pre><code>fn foobar&lt;'a&gt;(l: &amp;std::collections::LinkedList&lt;&amp;'a Bar&lt;'a&gt;&gt;) {\n    for i in l {\n        println!(\"{}\", i.bar());\n    }\n}\n</code></pre>\n\n<p>However, what you're doing with lifetime parameters doesn't make a lot of sense to me.</p>\n\n<p>We usually define a trait that is generic over a lifetime (such as your second version of <code>Bar</code>) when we want to have a method that returns a reference whose lifetime is the lifetime of a member of the implementor. For example, suppose we have the following struct:</p>\n\n<pre><code>struct Foo&lt;'a&gt; {\n    foo: &amp;'a str,\n}\n</code></pre>\n\n<p>This struct contains a reference, and we must explicitly name that lifetime. We want to allow any lifetime, so we define a lifetime parameter, <code>'a</code>.</p>\n\n<p>We can add an inherent method to this struct:</p>\n\n<pre><code>impl&lt;'a&gt; Foo&lt;'a&gt; {\n    fn foo(&amp;self) -&gt; &amp;'a str {\n        self.foo\n    }\n}\n</code></pre>\n\n<p>Notice how <code>&amp;self</code> doesn't have an explicit lifetime. Instead, we use the <code>'a</code> parameter from the <code>impl</code> on the return type of the <code>foo</code> method, since we want the lifetime of the returned value to be the same as the lifetime in the struct, not the lifetime of <code>self</code> (which would usually be shorter).</p>\n\n<p>What if we wanted to define a trait method similarly?</p>\n\n<pre><code>trait Bar&lt;'a&gt; {\n    fn bar(&amp;self) -&gt; &amp;'a str;\n}\n\nimpl&lt;'a&gt; Bar&lt;'a&gt; for Foo&lt;'a&gt; {\n    fn bar(&amp;self) -&gt; &amp;'a str {\n        self.foo\n    }\n}\n</code></pre>\n\n<p>The trait <code>Bar</code> defines a lifetime parameter and the <code>impl</code> links it to the lifetime parameter of <code>Foo</code>.</p>\n\n<p>Instead of adding lifetime parameters on the trait, you can also add lifetime parameters on individual methods too.</p>\n\n<p>For example, consider this trait:</p>\n\n<pre><code>trait Slice {\n    fn slice&lt;'a&gt;(&amp;self, s: &amp;'a str) -&gt; &amp;'a str;\n}\n</code></pre>\n\n<p>We want the result to have the same lifetime as the <code>s</code> parameter. To do this, we need to define a lifetime parameter on the method and apply it on both references.</p>\n\n<p>For completeness, here's an implementation of that trait:</p>\n\n<pre><code>struct SliceBounds {\n    start: usize,\n    end: usize,\n}\n\nimpl Slice for SliceBounds {\n    fn slice&lt;'a&gt;(&amp;self, s: &amp;'a str) -&gt; &amp;'a str {\n        &amp;s[self.start..self.end]\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 114, "user_id": 3288397, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a8d5523aa619966b3a29f760630ac8eb?s=128&d=identicon&r=PG&f=1", "display_name": "Thomas Legris", "link": "https://stackoverflow.com/users/3288397/thomas-legris"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 204, "favorite_count": 1, "accepted_answer_id": 35006793, "answer_count": 1, "score": 0, "last_activity_date": 1453780220, "creation_date": 1453756901, "last_edit_date": 1453758645, "question_id": 35002610, "link": "https://stackoverflow.com/questions/35002610/issue-with-rust-using-dynamic-polymorphism-on-trait-when-specifying-lifetime-on", "title": "Issue with Rust using dynamic polymorphism on trait when specifying lifetime on self", "body": "<p>I have finally decided to give Rust (1.7 &amp; 1.8) a try. Coming from C++, I must say Rust looks awesome. I was trying to reproduce a well known behavior in C++ that consists of using dynamic polymorphism on a set of objects.</p>\n\n<p>I have been through a very annoying problem that I was able to solve, but I would like to know what you guys think of that issue, and I hope it might help others that are trying to do the same kind of thing.</p>\n\n<p>Let's consider the following code that implements the initial idea:</p>\n\n<pre><code>struct Foo\n{\n    foo: u32,\n}\ntrait Bar\n{\n    fn bar(&amp; self) -&gt; u32;\n}\nimpl Bar for Foo\n{\n    fn bar(&amp; self) -&gt; u32 \n    {\n        return self.foo; \n    }\n}\nfn foobar(l: &amp;std::collections::LinkedList&lt;&amp; Bar&gt;)\n{\n    for i in l\n    {\n        println!(\"{}\", i.bar());\n    }\n}\nfn main()\n{\n    let foo0 = Foo{foo: 8u32};\n    let foo1 = Foo{foo: 8u32};\n    let mut l = std::collections::LinkedList::new();\n    l . push_back(&amp;foo0 as &amp;Bar);\n    l . push_back(&amp;foo1 as &amp;Bar);\n    foobar(&amp;l);\n}\n</code></pre>\n\n<p>Here everything is compiling, everything is working perfectly.</p>\n\n<p>I wanted to pass another reference to the function <code>bar</code> of the trait <code>Bar</code>, as a result I had to add a lifetime to the <code>Bar</code> trait. To keep it simple, I will just add the lifetime (as it will compile nicely under Rust 1.8). After adding the lifetime through the whole code, the code eventually looks like this:</p>\n\n<pre><code>struct Foo\n{\n    foo: u32,\n}\ntrait Bar&lt;'a&gt;\n{\n    fn bar(&amp; 'a self) -&gt; u32;\n}\nimpl&lt;'a&gt; Bar&lt;'a&gt; for Foo\n{\n    fn bar(&amp; 'a self) -&gt; u32 \n    {\n        return self.foo; \n    }\n}\nfn foobar&lt;'a&gt;(l: &amp;std::collections::LinkedList&lt;&amp; 'a Bar&gt;)\n{\n    for i in l\n    {\n        println!(\"{}\", i.bar());\n    }\n}\nfn main()\n{\n    let foo0 = Foo{foo: 8u32};\n    let foo1 = Foo{foo: 8u32};\n    let mut l = std::collections::LinkedList::new();\n    l . push_back(&amp;foo0 as &amp;Bar);\n    l . push_back(&amp;foo1 as &amp;Bar);\n    foobar(&amp;l);\n}\n</code></pre>\n\n<p>If you compile this code, the error message will be the following:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>../test.rs:21:12: 21:13 error: cannot infer an appropriate lifetime due to conflicting requirements [E0495]\n../test.rs:21   for i in l\n                         ^\n../test.rs:19:1: 25:2 help: consider using an explicit lifetime parameter as shown: fn foobar&lt;'a&gt;(l: &amp;std::collections::LinkedList&lt;&amp;'a Bar&gt;)\n../test.rs:19 fn foobar&lt;'a&gt;(l: &amp;std::collections::LinkedList&lt;&amp; 'a Bar&gt;)\n../test.rs:20 {\n../test.rs:21   for i in l\n../test.rs:22   {\n../test.rs:23     println!(\"{}\", i.bar());\n../test.rs:24   }\n              ...\nerror: aborting due to previous error\n</code></pre>\n\n<p>Here the problem is clear, the compiler knows that the variables given in <code>push_back</code> have different lifetimes, hence it cannot be compliant and disagree with what I have written. The problem can be solved if the variables <code>foo0</code> and <code>foo1</code> are declared in the same <code>let</code> statement.</p>\n\n<p>I found it very hard to figure out what was wrong in that code.\nMy questions are:</p>\n\n<ul>\n<li><p>Is there a way to tell the compiler that a collection might take different lifetime?</p></li>\n<li><p>By setting the <code>'a</code> lifetime on the other reference variable (that does not appear here) instead of <code>self</code>, the code compiles. Does that mean if we do not specify any lifetime then the compiler puts the <code>'_</code> that correspond to the specific lifetime I am asking in my previous question?</p></li>\n<li><p>Is there an implicit rule that \"forbids\" us to set a lifetime on self?</p></li>\n<li><p>Is that piece of code idiomatic Rust?</p></li>\n</ul>\n"}, {"tags": ["string", "copy", "rust", "lifetime"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1453732475, "post_id": 34994720, "comment_id": 57718154, "body": "You seem to have solved the issue with getting a borrowed <code>&amp;str</code> to an owned <code>String</code> object yourself. <code>String::from</code> works just fine"}], "answers": [{"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 2, "last_activity_date": 1453732320, "creation_date": 1453732320, "answer_id": 34995072, "question_id": 34994720, "link": "https://stackoverflow.com/questions/34994720/how-can-i-copy-string-or-str/34995072#34995072", "title": "How can I copy String or str", "body": "<p>The call to <code>unwrap()</code> will move your <code>path</code> object. The easiest way is to move it once in the beginning of the loop by saying</p>\n\n<pre><code>let path = path.unwrap();\n</code></pre>\n\n<p>and then working with the unwrapped path object:</p>\n\n<pre><code>let mut dirs = vec![String::from(\".\")];\n\nwhile dirs.len() &gt; 0 {\n    let paths = fs::read_dir(dirs.pop().unwrap()).unwrap();\n    for path in paths {\n        let path = path.unwrap();\n        if path.metadata().unwrap().is_dir() {\n            dirs.push(String::from(path.path().to_str().unwrap()))\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 2486, "user_id": 197979, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/ebf02b74c402dd33058e9e61e241a690?s=128&d=identicon&r=PG", "display_name": "Dmitry", "link": "https://stackoverflow.com/users/197979/dmitry"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 757, "favorite_count": 0, "accepted_answer_id": 34995072, "answer_count": 1, "score": 2, "last_activity_date": 1453732390, "creation_date": 1453731264, "last_edit_date": 1453732390, "question_id": 34994720, "link": "https://stackoverflow.com/questions/34994720/how-can-i-copy-string-or-str", "title": "How can I copy String or str", "body": "<p>I have the following code:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let mut dirs = vec![String::from(\".\")];\n// This one doesn't work too:\n//let mut dirs = vec![\".\"];\n\nwhile dirs.len() &gt; 0 {\n    let paths = fs::read_dir(dirs.pop().unwrap()).unwrap();\n    for path in paths {            \n        if path.unwrap().metadata().unwrap().is_dir() {\n            dirs.push(String::from(path.unwrap().path().to_str().unwrap()).clone())\n            // This one doesn't work too:\n            //dirs.push(path.unwrap().path().to_str().unwrap())\n        }\n    }\n}\n</code></pre>\n\n<p>It always gives a compilation error: <code>use of moved value: 'path' [E0382]</code>.</p>\n\n<p>I tried different ways and still cannot understand how can I copy a string <code>path.to_str()</code> so it can survive longer than <code>path</code> variable. Looks like both <code>String</code> and <code>str</code> don't support <code>Copy</code> trait. \nSo the main question is how to make the code above work? </p>\n\n<p>I need to make a copy of a string somehow. In C I would use <code>memcpy</code> or <code>strcpy</code> for that task. Are there any similar functions in Rust?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 883, "user_id": 2296440, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/f5ebf3fc6ae512402b176a2fa4392048?s=128&d=identicon&r=PG", "display_name": "mnordber", "link": "https://stackoverflow.com/users/2296440/mnordber"}, "edited": false, "score": 0, "creation_date": 1453850097, "post_id": 34993933, "comment_id": 57778290, "body": "Ah, I had actually tried that but got some error because it didn&#39;t recognize the <code>.flush()</code> function. Turns out I had missed the last part <code>use std::io::{self, Write};</code>. Would you care to elaborate what the <code>{self, Write}</code> means? I can&#39;t seem to find it in the documentation"}], "tags": [], "owner": {"reputation": 133611, "user_id": 152602, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7f370b4bd787fc68f9f62d9c6781cb79?s=128&d=identicon&r=PG", "display_name": "Lee", "link": "https://stackoverflow.com/users/152602/lee"}, "is_accepted": false, "score": 14, "last_activity_date": 1453814573, "last_edit_date": 1453814573, "creation_date": 1453728781, "answer_id": 34993933, "question_id": 34993744, "link": "https://stackoverflow.com/questions/34993744/why-does-this-read-input-before-printing/34993933#34993933", "title": "Why does this read input before printing?", "body": "<p>This is explained on the <a href=\"https://doc.rust-lang.org/std/macro.print!.html\" rel=\"noreferrer\">documentation</a> for <code>print!</code>. Since <code>print!</code> does not emit a newline and stdout is line-buffered, you won't see any output. You can manually flush stdout:</p>\n\n<pre><code>use std::io::{self, Write};\n\nprint!(\"Please enter your name: \");\nio::stdout().flush();\n</code></pre>\n\n<p>For your second question you can always return unit explicitly:</p>\n\n<pre><code>Ok(_) =&gt; (),\n</code></pre>\n\n<p>So your program becomes:</p>\n\n<pre><code>use std::io::{self, Write};\n\nfn main() {\n    print!(\"Please enter your name: \");\n    io::stdout().flush();\n\n    let mut name = String::new();\n    match io::stdin().read_line(&amp;mut name) {\n        Ok(_) =&gt; (),\n        Err(err) =&gt; println!(\"Could not parse input: {}\", err)\n    }\n\n    println!(\"Hello, {}!\", name.trim());\n}\n</code></pre>\n\n<p>As @Veedrac pointed out in their (now deleted) comment, you can use an <a href=\"https://doc.rust-lang.org/reference.html#if-let-expressions\" rel=\"noreferrer\"><code>if let expression</code></a> in place of the <code>match</code> on the result of <code>read_line</code>:</p>\n\n<pre><code>if let Err(err) = io::stdin().read_line(&amp;mut name) {\n    println!(\"Could not parse input: {}\", err)\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 2, "creation_date": 1453806969, "post_id": 34993992, "comment_id": 57752037, "body": "You should probably mention <code>if let Err(err) = io::stdin().read_line(&amp;mut name) { println!(&quot;Could not parse input: {}&quot;, err); }</code>."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 20, "last_activity_date": 1453728978, "creation_date": 1453728978, "answer_id": 34993992, "question_id": 34993744, "link": "https://stackoverflow.com/questions/34993744/why-does-this-read-input-before-printing/34993992#34993992", "title": "Why does this read input before printing?", "body": "<blockquote>\n  <p>Why won't the program print \"Please enter your name\" before waiting for input?</p>\n</blockquote>\n\n<p>Well, it <em>did</em>.  It's just that, for performance reasons, standard output is buffered.  The write completed, but it was only writing to memory.  If you want it to actually display to the user, you have to trigger a flush.  This can be done either by writing a newline, or by doing it explicitly:</p>\n\n<pre><code>io::Write::flush(&amp;mut io::stdout()).expect(\"flush failed!\");\n\n// If you \"use\" `io::Write`...\nio::stdout().flush().expect(\"flush failed!\");\n</code></pre>\n\n<blockquote>\n  <p>Also, is it possible to \"do nothing\" if a returned Result is Ok?</p>\n</blockquote>\n\n<p>Sure.  Just... do nothing.</p>\n\n<pre><code>match io::stdin().read_line(&amp;mut name) {\n    Ok(_) =&gt; { /* nothing */ },\n    Err(err) =&gt; println!(\"Could not parse input: {}\", err)\n}    \n</code></pre>\n\n<p>The relevant requirement here is that all arms in a <code>match</code> have to have the same result type.  In the case of <code>println!</code>, it results in a <code>()</code>; aside from an empty block (or another function that returns <code>()</code>), you can just use a literal:</p>\n\n<pre><code>match io::stdin().read_line(&amp;mut name) {\n    Ok(_) =&gt; (),\n    Err(err) =&gt; println!(\"Could not parse input: {}\", err)\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1573060322, "post_id": 58735059, "comment_id": 103760787, "body": "Welcome to Stack Overflow! Answers with only code are usually not very well received as they don&#39;t <i>explain</i> anything. Additionally, this question already has two answers that already make use of <code>flush</code>, so it&#39;s unclear what benefit this new answer brings. Please <a href=\"https://stackoverflow.com/posts/58735059/edit\">edit</a> your answer to describe the changes and how it differs from existing answers."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1573060374, "post_id": 58735059, "comment_id": 103760816, "body": "Ignoring an error is fairly uncommon in Rust. This answer would be further improved by detailing why that decision is a good idea for this case."}], "tags": [], "owner": {"reputation": 1, "user_id": 5295736, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/gZkeT.png?s=128&g=1", "display_name": "natade", "link": "https://stackoverflow.com/users/5295736/natade"}, "is_accepted": false, "score": -1, "last_activity_date": 1573060215, "last_edit_date": 1573060215, "creation_date": 1573059336, "answer_id": 58735059, "question_id": 34993744, "link": "https://stackoverflow.com/questions/34993744/why-does-this-read-input-before-printing/58735059#58735059", "title": "Why does this read input before printing?", "body": "<pre><code>use std::io::{self, Write};\n\nfn main() {\n    print!(\"Please enter your name: \");\n    let _ = io::stdout().flush();\n    // your io code\n}\n</code></pre>\n"}], "owner": {"reputation": 883, "user_id": 2296440, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/f5ebf3fc6ae512402b176a2fa4392048?s=128&d=identicon&r=PG", "display_name": "mnordber", "link": "https://stackoverflow.com/users/2296440/mnordber"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2390, "favorite_count": 0, "accepted_answer_id": 34993992, "answer_count": 3, "score": 14, "last_activity_date": 1573060215, "creation_date": 1453728271, "last_edit_date": 1473626426, "question_id": 34993744, "link": "https://stackoverflow.com/questions/34993744/why-does-this-read-input-before-printing", "title": "Why does this read input before printing?", "body": "<p>I'm having some problems with some basic I/O stuff. Specifically, the text \"Please enter your name\" is written to the output <strong>after</strong> I type in my name and hit <kbd>Enter</kbd>:</p>\n\n<pre><code>use std::io;\n\nfn main() {\n    print!(\"Please enter your name: \");\n\n    let mut name = String::new();\n    match io::stdin().read_line(&amp;mut name) {\n        Ok(_) =&gt; println!(\"\"),\n        Err(err) =&gt; println!(\"Could not parse input: {}\", err)\n    }\n\n    println!(\"Hello, {}!\", name.trim());\n}\n</code></pre>\n\n<p>gives the following output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Compiling chat v0.1.0 (file:///home/marcus/dev/rust/chat)\n  Running `target/debug/chat`\nmarcus\nPlease enter your name: \nHello, marcus!\n</code></pre>\n\n<p>Where the first \"marcus\" was entered by me. Why won't the program print \"Please enter your name\" before waiting for input?</p>\n\n<hr>\n\n<p>Is it possible to \"do nothing\" if a returned <code>Result</code> is <code>Ok</code>? In the example, <code>Ok()</code> means that I have saved the input in the variable name. That's great. But what do I do with <code>Ok() =&gt;</code> in this case?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 5, "last_activity_date": 1453702575, "creation_date": 1453702575, "answer_id": 34986224, "question_id": 34986093, "link": "https://stackoverflow.com/questions/34986093/define-a-trait-with-fnonce-but-no-return-type/34986224#34986224", "title": "Define a trait with FnOnce, but no return type", "body": "<p>You can fix this by being explicit about the return type:</p>\n\n<pre><code>trait Callback: FnOnce() -&gt; () + Send {}\n</code></pre>\n\n<p>I'm honestly not sure if this is a bug or not.</p>\n"}], "owner": {"reputation": 123, "user_id": 926022, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b314c2df3f389a2c6fcf6fa7ae8d29cb?s=128&d=identicon&r=PG", "display_name": "Scott Conger", "link": "https://stackoverflow.com/users/926022/scott-conger"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 208, "favorite_count": 0, "accepted_answer_id": 34986224, "answer_count": 1, "score": 3, "last_activity_date": 1453702575, "creation_date": 1453701905, "question_id": 34986093, "link": "https://stackoverflow.com/questions/34986093/define-a-trait-with-fnonce-but-no-return-type", "title": "Define a trait with FnOnce, but no return type", "body": "<p>I'd like to define a trait like so (to avoid repetition later):</p>\n\n<pre><code>trait Callback: FnOnce() + Send {}\n</code></pre>\n\n<p>However, the compiler demands that I define Output from FnOnce:</p>\n\n<blockquote>\n  <p>error: the value of the associated type <code>Output</code> (from the trait\n  <code>core::ops::FnOnce</code>) must be specified [E0191]</p>\n</blockquote>\n\n<p>I tried to default the value, but it warns that this is unstable.</p>\n\n<pre><code>type Output = ();\n</code></pre>\n\n<blockquote>\n  <p>error: associated type defaults are unstable</p>\n</blockquote>\n\n<p>What can I define Output as to indicate \"No return\"? The normal function call syntax simply omits it.</p>\n"}, {"tags": ["rust", "idioms"], "answers": [{"tags": [], "owner": {"reputation": 12035, "user_id": 603094, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/325af9a946cb4337c6640f0e95044be1?s=128&d=identicon&r=PG", "display_name": "kirelagin", "link": "https://stackoverflow.com/users/603094/kirelagin"}, "is_accepted": true, "score": 6, "last_activity_date": 1453666902, "last_edit_date": 1453666902, "creation_date": 1453665955, "answer_id": 34980826, "question_id": 34980343, "link": "https://stackoverflow.com/questions/34980343/what-is-the-idiomatic-way-to-create-a-collection-of-references-to-methods-that-t/34980826#34980826", "title": "What is the idiomatic way to create a collection of references to methods that take self?", "body": "<p>To be honest, I\u2019m not sure about a more <em>rusty</em> way, but, yes, you can do it the same way as in Python:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct Data;\n\nimpl Data {\n    fn foo(&amp;self) {\n        println!(\"foo!\");\n    }\n    fn bar(&amp;self) {\n        println!(\"bar!\");\n    }\n}\n\nfn main() {\n    let x: Vec&lt;fn(&amp;Data) -&gt; ()&gt; = vec![Data::foo, Data::bar];\n\n    let data = Data;\n    for f in x {\n        f(&amp;data);\n    }\n}\n</code></pre>\n\n<p>Note that this works exactly like in Python: instead of keeping <code>self</code>, you explicitly pass it as the first argument of the now-function which used to be a method.</p>\n\n<p>Since there is no need to store any values (which would be necessary if you went with closures), basically all you have is a function pointer (of type <code>fn(&amp;Data) -&gt; ()</code>, which is, well, the <a href=\"https://doc.rust-lang.org/reference.html#function-types\">type of functions</a> that take <code>Data</code> and return unit), so its size is known and you don\u2019t need boxing.</p>\n"}], "owner": {"reputation": 2340, "user_id": 2250791, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e72d4f734d39c777f543025d36d4de4e?s=128&d=identicon&r=PG", "display_name": "Camden Narzt", "link": "https://stackoverflow.com/users/2250791/camden-narzt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 107, "favorite_count": 0, "accepted_answer_id": 34980826, "answer_count": 1, "score": 1, "last_activity_date": 1453671743, "creation_date": 1453663488, "last_edit_date": 1453671743, "question_id": 34980343, "link": "https://stackoverflow.com/questions/34980343/what-is-the-idiomatic-way-to-create-a-collection-of-references-to-methods-that-t", "title": "What is the idiomatic way to create a collection of references to methods that take self?", "body": "<p>I am trying to convert a Python script into Rust as a learning experience and to make the tool faster and shrink the size of the code/executable. </p>\n\n<p>I'm currently trying to convert a section that creates a list of references to methods on self. Now I've learned that there isn't a way to bind the <code>self</code> variable for a method, one has to use a closure and close over the object that the methods will be called on. However when you create a closure it gets assigned a unique anonymous type, so I don't think I can create a <code>Vec</code> or array of closures without boxing them, which might be the way to go, but has some overhead that might not be necessary.</p>\n\n<p>What I'm wondering is, instead of the Python informed design of a list of method references, is there a more Rusty way to do this that doesn't fight the type system?</p>\n\n<pre><code>self.dataProcessors = []\nif(self.dataMode) :\n    self.dataProcessors.append(self._processData_)\nif(self.csvOn):\n    self.dataProcessors.append(self._processData_CSV_)\n</code></pre>\n"}, {"tags": ["rust", "iron"], "answers": [{"comments": [{"owner": {"reputation": 14207, "user_id": 235308, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Em8LP.jpg?s=128&g=1", "display_name": "selfawaresoup", "link": "https://stackoverflow.com/users/235308/selfawaresoup"}, "edited": false, "score": 0, "creation_date": 1453662522, "post_id": 34980111, "comment_id": 57689333, "body": "Cool. How did you get the compiler to print this suggestion?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 14207, "user_id": 235308, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Em8LP.jpg?s=128&g=1", "display_name": "selfawaresoup", "link": "https://stackoverflow.com/users/235308/selfawaresoup"}, "edited": false, "score": 1, "creation_date": 1453662601, "post_id": 34980111, "comment_id": 57689366, "body": "I&#39;m using <code>rustc 1.8.0-nightly (d63b8e539 2016-01-23)</code>. Maybe this is a new feature."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 11, "last_activity_date": 1453662693, "last_edit_date": 1453662693, "creation_date": 1453662383, "answer_id": 34980111, "question_id": 34979970, "link": "https://stackoverflow.com/questions/34979970/how-do-i-send-a-file-included-with-include-bytes-as-an-iron-response/34980111#34980111", "title": "How do I send a file included with include_bytes! as an Iron response?", "body": "<p>The compiler suggests an alternative <code>impl</code>:</p>\n\n<pre><code>src/main.rs:13:12: 13:26 help: the following implementations were found:\nsrc/main.rs:13:12: 13:26 help:   &lt;&amp;'a [u8] as modifier::Modifier&lt;iron::response::Response&gt;&gt;\n</code></pre>\n\n<p>To ensure the slice lives long enough, it's easier to replace the <code>index_html</code> variable with a global constant, and since we must specify the type of constants, let's specify it as <code>&amp;'static [u8]</code>.</p>\n\n<pre><code>extern crate iron;\n\nuse iron::prelude::*;\nuse iron::status;\nuse iron::mime::Mime;\n\nconst INDEX_HTML: &amp;'static [u8] = include_bytes!(\"static/index.html\");\n\nfn main() {\n    println!(\"Hello, world!\");\n    Iron::new(| _: &amp;mut Request| {\n        let content_type = \"text/html\".parse::&lt;Mime&gt;().unwrap();\n        Ok(Response::with((content_type, status::Ok, INDEX_HTML)))\n    }).http(\"localhost:8001\").unwrap();\n}\n</code></pre>\n\n<p>By the way, I tried to find implementations for <code>Modifier</code> in the documentation, but I think they're not listed, unfortunately. However, I found some implementations for <code>Modifier&lt;Response&gt;</code> in <a href=\"http://ironframework.io/doc/src/iron/modifiers.rs.html\">the source for the <code>iron::modifiers</code> module</a>.</p>\n"}], "owner": {"reputation": 14207, "user_id": 235308, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Em8LP.jpg?s=128&g=1", "display_name": "selfawaresoup", "link": "https://stackoverflow.com/users/235308/selfawaresoup"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2331, "favorite_count": 0, "accepted_answer_id": 34980111, "answer_count": 1, "score": 6, "last_activity_date": 1453671823, "creation_date": 1453661561, "last_edit_date": 1453671823, "question_id": 34979970, "link": "https://stackoverflow.com/questions/34979970/how-do-i-send-a-file-included-with-include-bytes-as-an-iron-response", "title": "How do I send a file included with include_bytes! as an Iron response?", "body": "<p>I'm trying to send a file that I included in the binary with <code>include_bytes!</code> in an Iron application. I want to end up with a single file for my application and it only needs very few HTML, CSS and JS files. Here's a small test setup that I'm fiddling with:</p>\n\n<pre><code>extern crate iron;\n\nuse iron::prelude::*;\nuse iron::status;\nuse iron::mime::Mime;\n\nfn main() {\n    let index_html = include_bytes!(\"static/index.html\");\n\n    println!(\"Hello, world!\");\n    Iron::new(| _: &amp;mut Request| {\n        let content_type = \"text/html\".parse::&lt;Mime&gt;().unwrap();\n        Ok(Response::with((content_type, status::Ok, index_html)))\n    }).http(\"localhost:8001\").unwrap();\n}\n</code></pre>\n\n<p>Of course, this doesn't work since <code>index_html</code> is of type <code>&amp;[u8; 78]</code></p>\n\n<pre><code>src/main.rs:16:12: 16:26 error: the trait `modifier::Modifier&lt;iron::response::Response&gt;` is not implemented for the type `&amp;[u8; 78]` [E0277]\nsrc/main.rs:16         Ok(Response::with((content_type, status::Ok, index_html)))\n</code></pre>\n\n<p>Since I'm quite new to Rust and Iron, I don't have an idea how to approach this. I tried to learn something from the Iron docs but I think my Rust knowledge is not sufficient to really understand them, especially what this <code>modifier::Modifier</code> trait is supposed to be.</p>\n\n<p>How can I achieve this? Can I covert the type of my static resource into something that Iron will accept or do I need to implement this <code>Modifier</code> trait somehow?</p>\n"}, {"tags": ["json", "rust", "spotify", "serde"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 8, "last_activity_date": 1453651720, "last_edit_date": 1453651720, "creation_date": 1453651216, "answer_id": 34977927, "question_id": 34977488, "link": "https://stackoverflow.com/questions/34977488/serde-returns-a-syntaxerror-expected-value-when-deserializing-nested-json-stru/34977927#34977927", "title": "Serde returns a SyntaxError &quot;expected value&quot; when deserializing nested JSON structs", "body": "<p>You've attempted to parse some JSON and it failed. When you called <code>unwrap</code> on the <code>Result</code>, the program panicked because of this failure:</p>\n\n<pre><code>SyntaxError(\"expected value\", 11, 21)\n</code></pre>\n\n<p><a href=\"https://serde-rs.github.io/serde/serde_json/serde_json/error/enum.Error.html\">The documentation for <code>SyntaxError</code></a> says the numbers are the line and column of the error. Line 11, column 21 is:</p>\n\n<pre><code>      \"height\" : 640,\n                     ^\n</code></pre>\n\n<p>Looking at your structure, you have declared the height to be a <code>u8</code>, an 8-bit unsigned number. This has the allowed values of 0-255. 640 does not fit into that. Increasing the value to a <code>u32</code> allows the JSON to be parsed.</p>\n\n<hr>\n\n<p>Additionally, Rust style is to use <code>CamelCase</code> identifiers without consecutive capital letters for structs. <code>External_URLs</code> -> <code>ExternalUrls</code>. The compiler will actually warn you about this.</p>\n"}], "owner": {"reputation": 53, "user_id": 5833375, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/902f293b07364c0e7d9d582fd2531c0f?s=128&d=identicon&r=PG&f=1", "display_name": "Liveshort", "link": "https://stackoverflow.com/users/5833375/liveshort"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1732, "favorite_count": 0, "accepted_answer_id": 34977927, "answer_count": 1, "score": 5, "last_activity_date": 1538856993, "creation_date": 1453648862, "last_edit_date": 1538856993, "question_id": 34977488, "link": "https://stackoverflow.com/questions/34977488/serde-returns-a-syntaxerror-expected-value-when-deserializing-nested-json-stru", "title": "Serde returns a SyntaxError &quot;expected value&quot; when deserializing nested JSON structs", "body": "<p>I'm trying to deserialize a Spotify metadata JSON from the web API (<a href=\"https://developer.spotify.com/web-api/object-model/#track-object-full\" rel=\"noreferrer\">specifications</a>). I'm using hyper to retrieve the JSON from the server and serde to turn the JSON into something I can actually use within Rust. The JSON is retrieved from the server just fine, but when I try to turn the JSON into an object that can be used Rust panicks and throws an error:</p>\n\n<pre><code>thread '&lt;main&gt;' panicked at 'called 'Result::unwrap()' on an 'Err' value: SyntaxError(\"expected value\", 11, 21)', ../src/libcore/result.rs:746\n</code></pre>\n\n<p>This is not helpful in the least way, because it doesn't indicate where things go wrong at all. When searching the web I stumbled upon <a href=\"https://github.com/serde-rs/serde/issues/95\" rel=\"noreferrer\">a serde issue</a>, which leads me to think that the problem is related to the nested structure of the JSON.</p>\n\n<p>Can anyone see where things go wrong? Fixing the error would be the best solution for me, but if another crate turns out to be a better solution I'd like to hear that too. I've already tried rustc-serialize, but that crate can't handle the 'type' variables within the json.</p>\n\n<p>The code I use is:</p>\n\n<pre><code>#![feature(custom_derive, plugin)]\n#![plugin(serde_macros)]\n#![feature(custom_attribute)]\n\nextern crate hyper;\nextern crate serde;\nextern crate serde_json;\n\nuse std::io::Read;\nuse hyper::Client;\nuse hyper::header::Connection;\n\n#[derive(Serialize, Deserialize)]\nstruct Track_Full {\n    album: Album_Simp,\n    artists: Vec&lt;Artist_Simp&gt;,\n    available_markets: Vec&lt;String&gt;,\n    disc_number: u8,\n    duration_ms: u32,\n    explicit: bool,\n    external_ids: External_IDs,\n    external_urls: External_URLs,\n    href: String,\n    id: String,\n    name: String,\n    popularity: u8,\n    preview_url: String,\n    track_number: u8,\n    #[serde(rename=\"type\")]\n    _type: String,\n    uri: String\n}\n\n#[derive(Serialize, Deserialize)]\nstruct Album_Simp {\n    album_type: String,\n    available_markets: Vec&lt;String&gt;,\n    external_urls: External_URLs,\n    href: String,\n    id: String,\n    images: Vec&lt;Image&gt;,\n    name: String,\n    #[serde(rename=\"type\")]\n    _type: String,\n    uri: String\n}\n\n#[derive(Serialize, Deserialize)]\nstruct Artist_Simp {\n    external_urls: External_URLs,\n    href: String,\n    id: String,\n    name: String,\n    #[serde(rename=\"type\")]\n    _type: String,\n    uri: String\n}\n\n#[derive(Serialize, Deserialize)]\nstruct External_IDs {\n    isrc: String\n}\n\n#[derive(Serialize, Deserialize)]\nstruct External_URLs {\n    spotify: String\n}\n\n#[derive(Serialize, Deserialize)]\nstruct Image {\n    height: u8,\n    url: String,\n    width: u8\n}\n\nfn main() {\n    // Create a client.\n    let mut client = Client::new();\n\n    // Creating an outgoing request.\n    let mut res = client.get(\"https://api.spotify.com/v1/tracks/0eGsygTp906u18L0Oimnem\")\n        // set a header\n        .header(Connection::close())\n        // let 'er go!\n        .send().unwrap();\n\n    // Read the Response.\n    let mut body = String::new();\n    res.read_to_string(&amp;mut body).unwrap();\n\n    println!(\"{}\", body);\n\n    let deserialized: Track_Full = serde_json::from_str(&amp;body).unwrap();\n}\n</code></pre>\n\n<p>The JSON:</p>\n\n<pre><code>{\n  \"album\" : {\n    \"album_type\" : \"album\",\n    \"available_markets\" : [ \"AD\", \"AR\", \"AT\", \"AU\", \"BE\", \"BG\", \"BO\", \"BR\", \"CH\", \"CL\", \"CO\", \"CR\", \"CY\", \"CZ\", \"DE\", \"DK\", \"DO\", \"EC\", \"EE\", \"ES\", \"FI\", \"FR\", \"GR\", \"GT\", \"HK\", \"HN\", \"HU\", \"IE\", \"IS\", \"IT\", \"LI\", \"LT\", \"LU\", \"LV\", \"MC\", \"MT\", \"MY\", \"NI\", \"NL\", \"NO\", \"NZ\", \"PA\", \"PE\", \"PH\", \"PL\", \"PT\", \"PY\", \"RO\", \"SE\", \"SG\", \"SI\", \"SK\", \"SV\", \"TR\", \"TW\", \"UY\" ],\n    \"external_urls\" : {\n      \"spotify\" : \"https://open.spotify.com/album/6TJmQnO44YE5BtTxH8pop1\"\n    },\n    \"href\" : \"https://api.spotify.com/v1/albums/6TJmQnO44YE5BtTxH8pop1\",\n    \"id\" : \"6TJmQnO44YE5BtTxH8pop1\",\n    \"images\" : [ {\n      \"height\" : 640,\n      \"url\" : \"https://i.scdn.co/image/8e13218039f81b000553e25522a7f0d7a0600f2e\",\n      \"width\" : 629\n    }, {\n      \"height\" : 300,\n      \"url\" : \"https://i.scdn.co/image/8c1e066b5d1045038437d92815d49987f519e44f\",\n      \"width\" : 295\n    }, {\n      \"height\" : 64,\n      \"url\" : \"https://i.scdn.co/image/d49268a8fc0768084f4750cf1647709e89a27172\",\n      \"width\" : 63\n    } ],\n    \"name\" : \"Hot Fuss\",\n    \"type\" : \"album\",\n    \"uri\" : \"spotify:album:6TJmQnO44YE5BtTxH8pop1\"\n  },\n  \"artists\" : [ {\n    \"external_urls\" : {\n      \"spotify\" : \"https://open.spotify.com/artist/0C0XlULifJtAgn6ZNCW2eu\"\n    },\n    \"href\" : \"https://api.spotify.com/v1/artists/0C0XlULifJtAgn6ZNCW2eu\",\n    \"id\" : \"0C0XlULifJtAgn6ZNCW2eu\",\n    \"name\" : \"The Killers\",\n    \"type\" : \"artist\",\n    \"uri\" : \"spotify:artist:0C0XlULifJtAgn6ZNCW2eu\"\n  } ],\n  \"available_markets\" : [ \"AD\", \"AR\", \"AT\", \"AU\", \"BE\", \"BG\", \"BO\", \"BR\", \"CH\", \"CL\", \"CO\", \"CR\", \"CY\", \"CZ\", \"DE\", \"DK\", \"DO\", \"EC\", \"EE\", \"ES\", \"FI\", \"FR\", \"GR\", \"GT\", \"HK\", \"HN\", \"HU\", \"IE\", \"IS\", \"IT\", \"LI\", \"LT\", \"LU\", \"LV\", \"MC\", \"MT\", \"MY\", \"NI\", \"NL\", \"NO\", \"NZ\", \"PA\", \"PE\", \"PH\", \"PL\", \"PT\", \"PY\", \"RO\", \"SE\", \"SG\", \"SI\", \"SK\", \"SV\", \"TR\", \"TW\", \"UY\" ],\n  \"disc_number\" : 1,\n  \"duration_ms\" : 222075,\n  \"explicit\" : false,\n  \"external_ids\" : {\n    \"isrc\" : \"USIR20400274\"\n  },\n  \"external_urls\" : {\n    \"spotify\" : \"https://open.spotify.com/track/0eGsygTp906u18L0Oimnem\"\n  },\n  \"href\" : \"https://api.spotify.com/v1/tracks/0eGsygTp906u18L0Oimnem\",\n  \"id\" : \"0eGsygTp906u18L0Oimnem\",\n  \"name\" : \"Mr. Brightside\",\n  \"popularity\" : 74,\n  \"preview_url\" : \"https://p.scdn.co/mp3-preview/934da7155ec15deb326635d69d050543ecbee2b4\",\n  \"track_number\" : 2,\n  \"type\" : \"track\",\n  \"uri\" : \"spotify:track:0eGsygTp906u18L0Oimnem\"\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 748, "user_id": 91909, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/546f20e4042e433d9bcbf0dc6c1a1cf5?s=128&d=identicon&r=PG", "display_name": "Bill Fraser", "link": "https://stackoverflow.com/users/91909/bill-fraser"}, "edited": false, "score": 0, "creation_date": 1453673208, "post_id": 34974732, "comment_id": 57693295, "body": "Thanks for pointing to that other question. It answers my &quot;how&quot; (and unfortunately, it looks like there isn&#39;t a built-in way to do it; you have to use <code>map</code> or something else to do the conversion manually). So yeah, I&#39;m still left with the &quot;why&quot; question. I&#39;ve edited the question to focus on that aspect of it. Thanks!"}], "answers": [{"tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": true, "score": 17, "last_activity_date": 1453718587, "last_edit_date": 1453718587, "creation_date": 1453646341, "answer_id": 34977048, "question_id": 34974732, "link": "https://stackoverflow.com/questions/34974732/why-does-optionstring-not-coerce-to-optionstr/34977048#34977048", "title": "Why does Option&lt;&amp;String&gt; not coerce to Option&lt;&amp;str&gt;?", "body": "<p>Your expectation is fair. If the compiler has magic to transform <code>&amp;String</code> to <code>&amp;str</code>, it should be able to also transform <code>Option&lt;&amp;String&gt;</code> to <code>Option&lt;&amp;str&gt;</code> or (for that matter) <code>AnyType&lt;&amp;String&gt;</code> to <code>AnyType&lt;&amp;str&gt;</code>.</p>\n\n<p>But the compiler in this case has very little magic. Paradoxically coercions emerged from an attempt to <em>reduce</em> the magic in the compiler<sup>(*)</sup>. To understand this, you will have to understand the link between coercions and reborrows and follow me through a little excursus in Rust history.</p>\n\n<p>A while back, in Rust you could relatively often see a construct like <code>&amp;*x</code>: a \"reborrow\". For pointer types like <code>Box</code>, you wanted to be able to dereference them with <code>*</code> to get to the value inside. And if you needed a <code>&amp;i32</code> but had a <code>x</code> that was a <code>Box&lt;i32&gt;</code>, you could reborrow it with <code>&amp;*x</code>, which is really the composition of two operations, dereference the <code>Box</code> with <code>*</code> and take a new reference to its content with <code>&amp;</code>. <code>Box</code> needed a lot of compiler magic to enable this.</p>\n\n<p>So the thinking went: if we allowed anyone to decide what the <code>*</code> dereference does for their types, we would reduce the magic needed for custom pointers like <code>Box</code>, <code>Rc</code>, <code>Arc</code>, allowing new ones to be defined in libraries... And thus <code>Deref</code> was born. </p>\n\n<p>But then, the Rust devs went one step further to reduce the unsightly reborrows. \nIf you were passing a <code>&amp;Box&lt;i32&gt;</code> to something expecting a <code>&amp;i32</code> you might have needed to do this (which <a href=\"http://is.gd/eCeZW1\">still compiles</a> by the way):</p>\n\n<pre><code>fn main() {\n    let a = &amp;Box::new(2);\n    test(&amp;**a); // one * to dereference the Box, \n                // one * to dereference the &amp;\n                // reborrow with &amp;\n}\n\nfn test(a: &amp;i32) { println!(\"{}\", *a) }\n</code></pre>\n\n<p>So (the good Rust devs went) why don't we make reborrowing automated and let people just write <code>test(a)</code>? </p>\n\n<blockquote>\n  <p>When there is a type <code>T</code> (eg <code>Box&lt;i32&gt;</code>) that derefs to <code>U</code> (<code>i32</code>),\n  we'll let <code>&amp;T</code> (<code>&amp;Box&lt;i32&gt;</code>) \"coerce\" to <code>&amp;U</code> (<code>&amp;i32</code>).</p>\n</blockquote>\n\n<p>This you may recognize as the current coercion rule. But all the magic the compiler performs is to try reborrowing for you by sprinkling <code>*</code>s (calling <code>deref</code>) as needed. More of a little parlor trick, actually.</p>\n\n<p>Now, back to the <code>AnyType&lt;&amp;String&gt;</code> to <code>AnyType&lt;&amp;str&gt;</code> coercion. As we've seen, the compiler is much less magic than we were led to believe and dereferencing-reborrowing <code>&amp;*AnyType&lt;&amp;String&gt;</code> does not lead to the expected result. Even if you managed to implement <code>Deref</code> for <code>AnyType</code> and got <code>*AnyType&lt;&amp;String&gt;</code> to deref to <code>AnyType&lt;str&gt;</code>, reborrowing the result would still yield <code>&amp;AnyType&lt;str&gt;</code>, not <code>AnyType&lt;&amp;str&gt;</code>.</p>\n\n<p>So Rust's mechanism for coercion can't be used for this. You need to explicitly tell Rust how to take the <code>&amp;String</code> out of <code>AnyType</code> and put a <code>&amp;str</code> back in.</p>\n\n<p>As one workaround for your specific scenario, if your function taking a <code>Option&lt;&amp;str&gt;</code> is only one and under your control, you could generalize it to take a <code>Option&lt;T&gt;</code> where <code>T:AsRef&lt;str&gt;</code> instead, like this:</p>\n\n<pre><code>fn test&lt;T: AsRef&lt;str&gt;&gt;(o: Option&lt;T&gt;) {\n    if let Some(s) = o { println!(\"{}\", s.as_ref()) }\n}\n</code></pre>\n\n<p><sub>(*) the Rust devs are decidedly anti-magic, those muggles!</sub></p>\n"}, {"tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": false, "score": 4, "last_activity_date": 1453674056, "creation_date": 1453674056, "answer_id": 34982242, "question_id": 34974732, "link": "https://stackoverflow.com/questions/34974732/why-does-optionstring-not-coerce-to-optionstr/34982242#34982242", "title": "Why does Option&lt;&amp;String&gt; not coerce to Option&lt;&amp;str&gt;?", "body": "<p>There are two coersions in common use in Rust: auto-ref and auto-deref.</p>\n\n<p>Auto-ref can only convert <code>T</code> to <code>&amp;T</code> or <code>&amp;mut T</code>, so isn't relevant here.</p>\n\n<p>Auto-deref automatically calls <code>Deref::deref</code>. <code>Option&lt;T&gt;</code> doesn't implement <code>Deref</code>, so this cannot hold. <code>String</code>, however, does <code>deref</code> to <code>&amp;str</code>, which is why you can see that coercion.</p>\n\n<p>We know <code>Option</code> doesn't implement <code>Deref</code> since <code>Deref::deref</code> returns a pointer with the same lifetime as <code>&amp;self</code>, and the lifetime requirements on pointers means that the pointer must thus live as long as <code>&amp;self</code>, so with few exceptions the pointer must be to some pre-existing object rather than one created in the <code>deref</code> call.</p>\n\n<p>This doesn't mean that the above is the <em>only</em> reason it doesn't implement <code>Deref</code>, although it is a sufficient one.</p>\n"}, {"comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1453674775, "post_id": 34982266, "comment_id": 57693787, "body": "I don&#39;t really get what HKTs would be needed for. Surely one would just need, say, <code>DerefValue</code> which returned <code>DerefValue::Target</code> directly, rather than as a reference. HKTs would only be needed if you wanted to restrict the types of dereferences possible, which seems wholly anathema to the idea of the generalization suggested."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1453675633, "post_id": 34982266, "comment_id": 57694083, "body": "I imagined a trait <code>Convert</code> you could implement on a type constructor such as <code>Option</code>, providing a single method <code>convert</code> which took two generic parameters, <code>T</code> and <code>U</code>, such that its argument would be a <code>Self&lt;&amp;T&gt;</code> and its result would be a <code>Self&lt;&amp;U&gt;</code> where <code>T: Deref&lt;Target=U&gt;</code>."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1453686258, "post_id": 34982266, "comment_id": 57696818, "body": "Yeah, but what does that gain you? One can&#39;t convert an <code>Option&lt;Option&lt;T&gt;&gt;</code> to an <code>Option&lt;Option&lt;&amp;T&gt;&gt;</code>, nor a <code>BitVec</code> to a <code>BitSlice</code> by such a manner, but it does allow implementing it for <code>Vec</code>, despite that probably being a bad idea. I don&#39;t really get what you gain for forcing the transformation to be this particular type function if you&#39;re not restricting what the function can actually do (as <code>Deref</code> does)."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1453690708, "post_id": 34982266, "comment_id": 57697770, "body": "Well, I think that is good motivation for not supporting such implicit conversions. :)"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 3, "last_activity_date": 1453674554, "last_edit_date": 1453674554, "creation_date": 1453674163, "answer_id": 34982266, "question_id": 34974732, "link": "https://stackoverflow.com/questions/34974732/why-does-optionstring-not-coerce-to-optionstr/34982266#34982266", "title": "Why does Option&lt;&amp;String&gt; not coerce to Option&lt;&amp;str&gt;?", "body": "<p>The Rust language has defined a way to implicitly convert a <code>&amp;T</code> into a <code>&amp;U</code>, for specific pairs of <code>T</code> and <code>U</code>, through the <code>Deref</code> trait. It's important to understand that in some cases, <code>&amp;U</code> is a constructed value. For example, neither <code>String</code> nor <code>&amp;String</code> contain a <code>&amp;str</code>, so the <code>deref()</code> method needs to create the <code>&amp;str</code> manually.</p>\n\n<p>However, the language has <strong>not</strong> defined a way to implicitly convert a <code>X&lt;&amp;T&gt;</code> into a <code>X&lt;&amp;U&gt;</code>. For that to work, the compiler would have to know a way to initialize a <code>X&lt;&amp;U&gt;</code> given a <code>X&lt;&amp;T&gt;</code> (and it's going to be different for different values of <code>X</code>). You can't simply take the binary representation of a <code>X&lt;&amp;T&gt;</code> and reinterpret that as a <code>X&lt;&amp;U&gt;</code>. In fact, an <code>Option&lt;&amp;String&gt;</code> and an <code>Option&lt;&amp;str&gt;</code> don't even have the same size! And even if the sizes matched, the pointers would usually not be the same.</p>\n\n<p>In order to develop a generic solution to that problem, Rust would have to implement higher-kinded types (not available as of Rust 1.6). There could also be an <em>ad hoc</em> solution for that specific problem, but it would become redundant when HKT are implemented.</p>\n"}], "owner": {"reputation": 748, "user_id": 91909, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/546f20e4042e433d9bcbf0dc6c1a1cf5?s=128&d=identicon&r=PG", "display_name": "Bill Fraser", "link": "https://stackoverflow.com/users/91909/bill-fraser"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1294, "favorite_count": 4, "accepted_answer_id": 34977048, "answer_count": 3, "score": 8, "last_activity_date": 1453718587, "creation_date": 1453631877, "last_edit_date": 1495541431, "question_id": 34974732, "link": "https://stackoverflow.com/questions/34974732/why-does-optionstring-not-coerce-to-optionstr", "title": "Why does Option&lt;&amp;String&gt; not coerce to Option&lt;&amp;str&gt;?", "body": "<p>I have an <code>Option&lt;String&gt;</code> and a function that takes an <code>Option&lt;&amp;str&gt;</code>. I thought <code>Option::as_ref</code> would work, because usually <code>&amp;String</code> converts automatically to <code>&amp;str</code>, but not here. I get this error:</p>\n\n<pre><code>sandbox.rs:6:27: 6:37 error: mismatched types:\n expected `core::option::Option&lt;&amp;str&gt;`,\n    found `core::option::Option&lt;&amp;collections::string::String&gt;`\n(expected str,\n    found struct `collections::string::String`) [E0308]\n</code></pre>\n\n<p>While <a href=\"https://stackoverflow.com/q/31233938/155423\">this answer</a> describes how to convert from one to the other, I'd still like to know why the <code>&amp;String</code> isn't \"coerced\" (if that's the right term) into <code>&amp;str</code> like it usually is.</p>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 10, "last_activity_date": 1453631352, "creation_date": 1453631352, "answer_id": 34974666, "question_id": 34972258, "link": "https://stackoverflow.com/questions/34972258/why-do-i-need-to-declare-extern-crate-core-to-use-libcore/34974666#34974666", "title": "Why do I need to declare &quot;extern crate core&quot; to use libcore?", "body": "<p>In fact everything works in a pretty logical way.</p>\n\n<p>First of all, <code>libstd</code> crate is indeed special. Rust compiler knows about it and it injects <code>extern crate std;</code> implicitly unless <code>#![no_std]</code> attribute is present on the crate root. Additionally it also imports standard prelude in every module of your crate (again, unless <code>#![no_std]</code> is present).</p>\n\n<p>Now you can probably see why you have to specify <code>extern crate core;</code> while at the same time you don't need to specify <code>extern crate std;</code>. You also don't need to specify <code>core</code> in <code>Cargo.toml</code> because <code>libcore</code>, as well as several other libraries (<code>libcollections</code>, <code>liballoc</code>, <code>liblibc</code>, etc.; you can find an up-to-date list <a href=\"https://github.com/rust-lang/rust/tree/master/src\" rel=\"noreferrer\">in Rust source directory</a>) are present in the Rust compiler distribution. There is in fact a desire to allow these libraries to be available through Cargo as well (expressed in form of RFCs), but as of now these libraries are provided with the compiler distribution only.</p>\n\n<p>And finally, remember that Rust crates are independent. Rust ABI is designed in such a way so you can have different versions of the same crate built into the final executable. While it is invalid for one crate to directly depend on multiple versions of the same crate, it is possible that its dependencies transitively depend on different versions of another crate. This is one of the reasons why you always have to explicitly specify dependencies of your crate: if you don't specify that your crate depends on <code>libcore</code>, even though <code>libstd</code> does depend on <code>libcore</code>, <code>libcore</code> won't be pulled by your crate automatically if it uses <code>libstd</code>.</p>\n"}], "owner": {"reputation": 7536, "user_id": 2419183, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/ac151b3eb8086a1f05da6f80ab1b1f50?s=128&d=identicon&r=PG", "display_name": "Peter Pei Guo", "link": "https://stackoverflow.com/users/2419183/peter-pei-guo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1388, "favorite_count": 0, "accepted_answer_id": 34974666, "answer_count": 1, "score": 3, "last_activity_date": 1453650763, "creation_date": 1453610013, "last_edit_date": 1453650763, "question_id": 34972258, "link": "https://stackoverflow.com/questions/34972258/why-do-i-need-to-declare-extern-crate-core-to-use-libcore", "title": "Why do I need to declare &quot;extern crate core&quot; to use libcore?", "body": "<p>With the core library stabilized in Rust 1.6, the following becomes possible, and I do not need to replace <code>libcore</code> with <code>libstd</code> any more:</p>\n\n<pre><code>//extern crate core; //won't work without this line\nextern crate num;\n\nuse core::ops::Add;\nuse num::bigint::{BigInt};\n\nfn main() {\n    let mut big = \"8705702225074732811211966512111\".parse::&lt;BigInt&gt;().unwrap();\n    let one = \"1\".parse::&lt;BigInt&gt;().unwrap();\n    big = big.add(&amp;one);\n    println!(\"{:?}\", big);\n}\n</code></pre>\n\n<p>But there is one thing puzzles me - why do I need to declare \"extern crate core;\"? As far as I know, <code>libstd</code> is meant to be built on top of <code>libcore</code>. <code>libcore</code> is meant to be OS independent, while the implementation of <code>libstd</code> can be OS specific. I never had the need to specify \"extern crate std\". What also puzzles me is that I do not need to add <code>libcore</code> as a dependency in Cargo.toml in the above case, although it is an extern crate.</p>\n\n<p>Is <code>libcore</code> the only such case? Is this a temporary thing while the implementation of the language is getting stabilized?</p>\n"}, {"tags": ["function", "iterator", "rust"], "answers": [{"comments": [{"owner": {"reputation": 4930, "user_id": 171236, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/d3b966fda9859d4bcd97c46b6a851210?s=128&d=identicon&r=PG", "display_name": "Doctor J", "link": "https://stackoverflow.com/users/171236/doctor-j"}, "edited": false, "score": 0, "creation_date": 1453589943, "post_id": 34969944, "comment_id": 57669959, "body": "I was so close.  To expound, the difference with generics is static dispatch, i.e., Rust is creating a version of this function for each concrete type I call it with?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 4930, "user_id": 171236, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/d3b966fda9859d4bcd97c46b6a851210?s=128&d=identicon&r=PG", "display_name": "Doctor J", "link": "https://stackoverflow.com/users/171236/doctor-j"}, "edited": false, "score": 2, "creation_date": 1453592985, "post_id": 34969944, "comment_id": 57670809, "body": "Correct. This way, the compiler knows the type of the iterator, therefore it knows its size, so it knows how much memory it needs to reserve. Also, a type like <code>Iterator&lt;Item=&amp;&#39;a u32&gt;</code> cannot be used alone; it can only be used behind a pointer."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 17, "creation_date": 1453631721, "post_id": 34969944, "comment_id": 57678886, "body": "Note that while requiring <code>I</code> to implement <code>Iterator</code> is absolutely correct if you want to pass arbitrary iterators into the function, the more generic way would be to require <code>I</code> to implement <a href=\"http://doc.rust-lang.org/std/iter/trait.IntoIterator.html\" rel=\"nofollow noreferrer\"><code>IntoIterator</code></a>. It allows you to pass iterators too but you will be also able to pass anything which can be <i>converted</i> into an iterator, without the need to call conversion methods explicitly. I&#39;d say this is <i>the</i> idiomatic approach to consume iterators and iterables."}, {"owner": {"reputation": 1728, "user_id": 1187678, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/17eaea8b195588d8c6bab476c340a2d7?s=128&d=identicon&r=PG", "display_name": "burfl", "link": "https://stackoverflow.com/users/1187678/burfl"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1473381820, "post_id": 34969944, "comment_id": 66130219, "body": "@VladimirMatveev, can you elaborate a bit on that, please?  I&#39;m trying to get something like the following working with your advice... <a href=\"https://gist.github.com/anonymous/0c1db25a9b38a2fc95f44bec34ebd46a\" rel=\"nofollow noreferrer\">gist.github.com/anonymous/0c1db25a9b38a2fc95f44bec34ebd46a</a>"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 1728, "user_id": 1187678, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/17eaea8b195588d8c6bab476c340a2d7?s=128&d=identicon&r=PG", "display_name": "burfl", "link": "https://stackoverflow.com/users/1187678/burfl"}, "edited": false, "score": 0, "creation_date": 1473382456, "post_id": 34969944, "comment_id": 66130372, "body": "@burfl: Your function should be returning <code>u64</code>, not <code>T</code>."}, {"owner": {"reputation": 1728, "user_id": 1187678, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/17eaea8b195588d8c6bab476c340a2d7?s=128&d=identicon&r=PG", "display_name": "burfl", "link": "https://stackoverflow.com/users/1187678/burfl"}, "edited": false, "score": 0, "creation_date": 1473382549, "post_id": 34969944, "comment_id": 66130390, "body": "@FrancisGagn&#233;, holy cow, that was simple!  Thank you so much!"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 1, "creation_date": 1539963515, "post_id": 34969944, "comment_id": 92703869, "body": "With <code>foo: impl Type</code> this is much more easy now"}, {"owner": {"reputation": 2446, "user_id": 5359531, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/b7636325b68a8f82a8f7b30fdfff251a?s=128&d=identicon&r=PG&f=1", "display_name": "user5359531", "link": "https://stackoverflow.com/users/5359531/user5359531"}, "edited": false, "score": 0, "creation_date": 1566260398, "post_id": 34969944, "comment_id": 101592105, "body": "&quot; require I to implement IntoIterator&quot;; but what if you want to pass something that does not use <code>into_iter</code> to return an iterator? For example, if I wanted to iterate over either vector elements (<code>my_vec.iter()</code>) OR a file handle (<code>fs::File::open(&quot;foo.txt&quot;).unwrap().lines()</code>), etc.. Does <code>IntoIterator</code> still apply here?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 2446, "user_id": 5359531, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/b7636325b68a8f82a8f7b30fdfff251a?s=128&d=identicon&r=PG&f=1", "display_name": "user5359531", "link": "https://stackoverflow.com/users/5359531/user5359531"}, "edited": false, "score": 0, "creation_date": 1566317862, "post_id": 34969944, "comment_id": 101615662, "body": "@user5359531 Yes, all iterators also implement <code>IntoIterator</code> thanks to a blanket impl (<code>impl&lt;I&gt; IntoIterator for I where I: Iterator</code>; <code>into_iter</code> just returns <code>self</code>)."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 74, "last_activity_date": 1510062944, "last_edit_date": 1510062944, "creation_date": 1453589606, "answer_id": 34969944, "question_id": 34969902, "link": "https://stackoverflow.com/questions/34969902/how-to-write-a-rust-function-that-takes-an-iterator/34969944#34969944", "title": "How to write a Rust function that takes an iterator?", "body": "<p>You want to use generics here:</p>\n\n<pre><code>fn find_min&lt;'a, I&gt;(vals: I) -&gt; Option&lt;&amp;'a u32&gt;\nwhere\n    I: Iterator&lt;Item = &amp;'a u32&gt;,\n{\n    vals.min()\n}\n</code></pre>\n\n<p>Traits can be used in two ways: as bounds on type parameters and as trait objects. The book <em>The Rust Programming Language</em> has a chapter on <a href=\"http://doc.rust-lang.org/stable/book/first-edition/traits.html\" rel=\"noreferrer\">traits</a> and a chapter on <a href=\"http://doc.rust-lang.org/stable/book/first-edition/trait-objects.html\" rel=\"noreferrer\">trait objects</a> that explain these two use cases.</p>\n\n<p>Additionally, you often want to take something that implements <code>IntoIterator</code> as this can make the code calling your function nicer:</p>\n\n<pre><code>fn find_min&lt;'a, I&gt;(vals: I) -&gt; Option&lt;&amp;'a u32&gt;\nwhere\n    I: IntoIterator&lt;Item = &amp;'a u32&gt;,\n{\n    vals.into_iter().min()\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 10098, "user_id": 80761, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/823983609622ec2238d2a13f7a21c745?s=128&d=identicon&r=PG", "display_name": "K. Norbert", "link": "https://stackoverflow.com/users/80761/k-norbert"}, "edited": false, "score": 3, "creation_date": 1589709493, "post_id": 34974862, "comment_id": 109395479, "body": "The example here wouldn&#39;t compile, the let mut y = x assignment moves x, so line 3 cannot use x anymore. (unless you specify that Foo is Copy, but that gives a pretty good hint already that it won&#39;t behave like you would expect in scripting languages)"}, {"owner": {"reputation": 10098, "user_id": 80761, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/823983609622ec2238d2a13f7a21c745?s=128&d=identicon&r=PG", "display_name": "K. Norbert", "link": "https://stackoverflow.com/users/80761/k-norbert"}, "edited": false, "score": 1, "creation_date": 1589796086, "post_id": 34974862, "comment_id": 109425162, "body": "Regardless of the semantics of &quot;does it change the code, or does it change what you are allowed to do&quot;, the example code above is still invalid, and does not compile."}, {"owner": {"reputation": 10098, "user_id": 80761, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/823983609622ec2238d2a13f7a21c745?s=128&d=identicon&r=PG", "display_name": "K. Norbert", "link": "https://stackoverflow.com/users/80761/k-norbert"}, "edited": false, "score": 1, "creation_date": 1589796736, "post_id": 34974862, "comment_id": 109425500, "body": "I would assume it&#39;s non-copy because that&#39;s the default for structs, and there is no mention of it being Copy in your answer."}, {"owner": {"reputation": 10098, "user_id": 80761, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/823983609622ec2238d2a13f7a21c745?s=128&d=identicon&r=PG", "display_name": "K. Norbert", "link": "https://stackoverflow.com/users/80761/k-norbert"}, "edited": false, "score": 1, "creation_date": 1589835813, "post_id": 34974862, "comment_id": 109446781, "body": "The issue is that the code you are using to reason with is invalid, without some arbitrary assumptions that beginners might not have."}], "tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": false, "score": 12, "last_activity_date": 1453632788, "creation_date": 1453632788, "answer_id": 34974862, "question_id": 34969902, "link": "https://stackoverflow.com/questions/34969902/how-to-write-a-rust-function-that-takes-an-iterator/34974862#34974862", "title": "How to write a Rust function that takes an iterator?", "body": "<p>This behaviour is a little unintuitive from those with a Python background rather than, say, a C++ background, so let me clarify a little.</p>\n\n<p>In Rust, values are conceptually stored inside the name that binds them. Thus, if you write</p>\n\n<pre><code>let mut x = Foo { t: 10 };\nlet mut y = x;\nx.t = 999;\n</code></pre>\n\n<p><code>y.t</code> will still be <code>10</code>.</p>\n\n<p>So when you write</p>\n\n<pre><code>let x: Iterator&lt;Item=&amp;'a u32&gt;;\n</code></pre>\n\n<p>(or the same in the function parameter list), Rust needs to allocate enough space for <em>any</em> value of type <code>Iterator&lt;Item=&amp;'a u32&gt;</code>. Even if this was possible, it wouldn't be efficient.</p>\n\n<p>So what Rust does instead is offer you the option to</p>\n\n<ul>\n<li><p>Put the value on the heap, eg. with <code>Box</code>, which gives Python-style semantics. Then you can take generically with <code>&amp;mut Iterator&lt;Item=&amp;'a u32&gt;</code>.</p></li>\n<li><p>Specialize each function invocation for each possible type to satisfy the bound. This is more flexible, since a trait reference is a possible specialization, and gives the compiler more opportunities for specialization, but means you can't have <em>dynamic</em> dispatch (where the type can vary dependent on runtime parameters).</p></li>\n</ul>\n"}, {"comments": [{"owner": {"reputation": 4627, "user_id": 1420169, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/7a615c07799f81b161adff1b7e7c861e?s=128&d=identicon&r=PG", "display_name": "TimY", "link": "https://stackoverflow.com/users/1420169/timy"}, "edited": false, "score": 0, "creation_date": 1612808042, "post_id": 56928373, "comment_id": 116877030, "body": "Is there a reason why this wouldn&#39;t be better than the alternatives, or is it just more recent?"}, {"owner": {"reputation": 19712, "user_id": 418400, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/eca5ce283c385cc58d40708f6a97194b?s=128&d=identicon&r=PG&f=1", "display_name": "Ben", "link": "https://stackoverflow.com/users/418400/ben"}, "reply_to_user": {"reputation": 4627, "user_id": 1420169, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/7a615c07799f81b161adff1b7e7c861e?s=128&d=identicon&r=PG", "display_name": "TimY", "link": "https://stackoverflow.com/users/1420169/timy"}, "edited": false, "score": 0, "creation_date": 1612872927, "post_id": 56928373, "comment_id": 116896753, "body": "In Rust 1.26 impl Trait were added to the language. This a  less verbose way to implement the same code"}], "tags": [], "owner": {"reputation": 19712, "user_id": 418400, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/eca5ce283c385cc58d40708f6a97194b?s=128&d=identicon&r=PG&f=1", "display_name": "Ben", "link": "https://stackoverflow.com/users/418400/ben"}, "is_accepted": false, "score": 9, "last_activity_date": 1612872652, "last_edit_date": 1612872652, "creation_date": 1562559576, "answer_id": 56928373, "question_id": 34969902, "link": "https://stackoverflow.com/questions/34969902/how-to-write-a-rust-function-that-takes-an-iterator/56928373#56928373", "title": "How to write a Rust function that takes an iterator?", "body": "<p>Since Rust 1.26 <a href=\"https://doc.rust-lang.org/edition-guide/rust-2018/trait-system/impl-trait-for-returning-complex-types-with-ease.html\" rel=\"nofollow noreferrer\">impl Trait</a> are available. A less verbose version.</p>\n<pre class=\"lang-rust prettyprint-override\"><code>use std::collections::HashMap;\n\nfn find_min&lt;'a&gt;(vals: impl Iterator&lt;Item = &amp;'a u32&gt;) -&gt; Option&lt;&amp;'a u32&gt; {\n    vals.min()\n}\n\nfn main() {\n    let mut map = HashMap::new();\n    map.insert(&quot;zero&quot;, 0u32);\n    map.insert(&quot;one&quot;, 1u32);\n    println!(&quot;Min value {:?}&quot;, find_min(map.values()));\n}\n</code></pre>\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=a3e16e9a2c5757367e253f5459c96f1d\" rel=\"nofollow noreferrer\">playground</a></p>\n"}], "owner": {"reputation": 4930, "user_id": 171236, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/d3b966fda9859d4bcd97c46b6a851210?s=128&d=identicon&r=PG", "display_name": "Doctor J", "link": "https://stackoverflow.com/users/171236/doctor-j"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 22295, "favorite_count": 5, "accepted_answer_id": 34969944, "answer_count": 3, "score": 77, "last_activity_date": 1612872652, "creation_date": 1453589322, "last_edit_date": 1510062901, "question_id": 34969902, "link": "https://stackoverflow.com/questions/34969902/how-to-write-a-rust-function-that-takes-an-iterator", "title": "How to write a Rust function that takes an iterator?", "body": "<p>I'd like to write a function that accepts an iterator and returns the results of some operations on it.  Specifically, I'm trying to iterate over the values of a <code>HashMap</code>:</p>\n\n<pre><code>use std::collections::HashMap;\n\nfn find_min&lt;'a&gt;(vals: Iterator&lt;Item=&amp;'a u32&gt;) -&gt; Option&lt;&amp;'a u32&gt; {\n    vals.min()\n}\n\nfn main() {\n    let mut map = HashMap::new();\n    map.insert(\"zero\", 0u32);\n    map.insert(\"one\", 1u32);\n    println!(\"Min value {:?}\", find_min(map.values()));\n}\n</code></pre>\n\n<p>But alas:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: the `min` method cannot be invoked on a trait object\n --&gt; src/main.rs:4:10\n  |\n4 |     vals.min()\n  |          ^^^\n\nerror[E0277]: the trait bound `std::iter::Iterator&lt;Item=&amp;'a u32&gt; + 'static: std::marker::Sized` is not satisfied\n --&gt; src/main.rs:3:17\n  |\n3 | fn find_min&lt;'a&gt;(vals: Iterator&lt;Item = &amp;'a u32&gt;) -&gt; Option&lt;&amp;'a u32&gt; {\n  |                 ^^^^ `std::iter::Iterator&lt;Item=&amp;'a u32&gt; + 'static` does not have a constant size known at compile-time\n  |\n  = help: the trait `std::marker::Sized` is not implemented for `std::iter::Iterator&lt;Item=&amp;'a u32&gt; + 'static`\n  = note: all local variables must have a statically known size\n\nerror[E0308]: mismatched types\n  --&gt; src/main.rs:11:41\n   |\n11 |     println!(\"Min value {:?}\", find_min(map.values()));\n   |                                         ^^^^^^^^^^^^ expected trait std::iter::Iterator, found struct `std::collections::hash_map::Values`\n   |\n   = note: expected type `std::iter::Iterator&lt;Item=&amp;u32&gt; + 'static`\n              found type `std::collections::hash_map::Values&lt;'_, &amp;str, u32&gt;`\n</code></pre>\n\n<p>I get the same error if I try to pass by reference; if I use a <code>Box</code>, I get lifetime errors.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 6045, "user_id": 1036670, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/8d2dr.jpg?s=128&g=1", "display_name": "vitiral", "link": "https://stackoverflow.com/users/1036670/vitiral"}, "edited": false, "score": 0, "creation_date": 1453598136, "post_id": 34969001, "comment_id": 57672079, "body": "I understand now. First of all, the compiler error is saying it expects the <i>first</i> food to be type Food. Second of all, the purpose of map is to let you write a short closure that doesn&#39;t require you to write Some(T) in it."}], "tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": true, "score": 6, "last_activity_date": 1453584049, "creation_date": 1453584049, "answer_id": 34969001, "question_id": 34968848, "link": "https://stackoverflow.com/questions/34968848/some-not-required-when-returning-option/34969001#34969001", "title": "Some not required when returning Option?", "body": "<pre><code>have_ingredients(food).map(|f| can_cook(f))\n</code></pre>\n\n<p>gives an <code>Option&lt;Option&lt;Food&gt;&gt;</code>, not an <code>Option&lt;Food&gt;</code>, since <code>map</code> does not flatten values.</p>\n\n<p>Consider</p>\n\n<pre><code>Option&lt;T&gt;::map(Fn(T) -&gt; U)\n</code></pre>\n\n<p>This transforms <code>Option&lt;T&gt;</code> to <code>Option&lt;U&gt;</code>. Thus letting <code>T = Food</code>, <code>U = Option&lt;Food&gt;</code> as in <code>can_cook</code> gives the instantiation</p>\n\n<pre><code>Option&lt;Food&gt;::map(Fn(Food) -&gt; Option&lt;Food&gt;)\n</code></pre>\n\n<p>which gives an <code>Option&lt;Option&lt;Food&gt;&gt;</code>.</p>\n\n<p>Thus the <code>Some(food)</code> in the match has <code>food</code> of type <code>Option&lt;Food&gt;</code>.</p>\n\n<p><code>and_then</code> flattens the result type, which is why this does not occur with it.</p>\n"}], "owner": {"reputation": 6045, "user_id": 1036670, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/8d2dr.jpg?s=128&g=1", "display_name": "vitiral", "link": "https://stackoverflow.com/users/1036670/vitiral"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 70, "favorite_count": 0, "accepted_answer_id": 34969001, "answer_count": 1, "score": 3, "last_activity_date": 1453730925, "creation_date": 1453583108, "last_edit_date": 1453730925, "question_id": 34968848, "link": "https://stackoverflow.com/questions/34968848/some-not-required-when-returning-option", "title": "Some not required when returning Option?", "body": "<p>I am doing the <a href=\"http://rustbyexample.com/error/more_combinators.html\" rel=\"nofollow\">more combinators</a> part of \"Rust by Example\", and decided to go off on my own and see how much effort it is to use <code>map</code> instead of <code>and_then</code>.</p>\n\n<p>In my attempt, I came across something very strange (it even looks like a compiler error to me). It <em>looks like</em> I only need to return a <code>Food</code> type when the return type is supposed to be <code>Option(Food)</code></p>\n\n<p>In my opinion, the <code>cookable</code> function below should be able to be reduced to a single line:</p>\n\n<pre><code>have_ingredients(food).map(|f| can_cook(f))\n</code></pre>\n\n<p>Obviously it can also be the following:</p>\n\n<pre><code>have_ingredients(food).and_then(can_cook)\n</code></pre>\n\n<p>Although I don't see the fundamental difference between these two functions, as they both return an <code>Option&lt;U&gt;</code>.</p>\n\n<p>I got a weird compiler error when doing so, so I explicitly broke down the match as below -- and looks like the compiler wants to return <code>Food</code> even when the return type is <code>Some(Food)</code>. What is going on???</p>\n\n<pre><code>//! stack.rs\n#[derive(Debug)]\nenum Food {\n    CordonBleu,\n    Steak,\n    Sushi,\n}\n\n#[derive(Debug)]\nenum Day {\n    Monday,\n    Tuesday,\n    Wednesday,\n}\n\n/// we don't have the ingredients for sushi\nfn have_ingredients(food: Food) -&gt; Option&lt;Food&gt; {\n    match food {\n        Food::Sushi =&gt; None,\n        _ =&gt; Some(food),\n    }\n}\n\n/// can cook anything but cordon blue\nfn can_cook(food: Food) -&gt; Option&lt;Food&gt; {\n    match food {\n        Food::CordonBlue =&gt; None,\n        _ =&gt; Some(food),\n    }\n}\n\n/// can be done using map\nfn cookable(food: Food) -&gt; Option&lt;Food&gt; {\n    match have_ingredients(food).map(|f| can_cook(f)) {\n        // Some(food) =&gt; food,  // Why is this correct???\n        Some(food) =&gt; Some(food), // **error: mismatched types:\n        None =&gt; None,\n    }\n}\n\nfn eat(food: Food, day: Day) {\n    match cookable(food) {\n        Some(food) =&gt; println!(\"Yay! On {:?} we eat {:?}\", day, food),\n        None =&gt; println!(\"Oh no we didn't get to eat on {:?}!\", day),\n    };\n}\n\nfn main() {\n    let (cordon_bleu, steak, sushi) = (Food::CordonBleu, Food::Steak, Food::Sushi);\n    eat(cordon_bleu, Day::Monday);\n    eat(steak, Day::Tuesday);\n    eat(sushi, Day::Wednesday);\n}\n</code></pre>\n\n<p>Here is the full compiler error from the above program:</p>\n\n<pre><code> ch16_errors git:(master) \u2717 rustc stack.rs\nstack.rs:38:28: 38:32 error: mismatched types:\n expected `Food`,\n    found `core::option::Option&lt;Food&gt;`\n(expected enum `Food`,\n    found enum `core::option::Option`) [E0308]\nstack.rs:38         Some(food) =&gt; Some(food),\n                                       ^~~~\nstack.rs:38:28: 38:32 help: run `rustc --explain E0308` to see a detailed explanation\nerror: aborting due to previous error\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 1751, "user_id": 3973406, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/b2d94768947ebd5fd0f38ee5b3f472c5?s=128&d=identicon&r=PG&f=1", "display_name": "Dac0d3r", "link": "https://stackoverflow.com/users/3973406/dac0d3r"}, "edited": false, "score": 0, "creation_date": 1453581189, "post_id": 34968488, "comment_id": 57667230, "body": "Shepmaster why would you downvote and close this? Very constructive, I learned a lot. Thanks!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1453581228, "post_id": 34968488, "comment_id": 57667247, "body": "Sure it&#39;s <i>possible</i> - Rust is Turing complete and all that. Something like <a href=\"https://github.com/iron/iron\" rel=\"nofollow noreferrer\">iron</a> has a &quot;middleware&quot; stack - perhaps that would give you a place to start investigating? Then you can ask specific, targeted question here on Stack Overflow."}, {"owner": {"reputation": 1751, "user_id": 3973406, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/b2d94768947ebd5fd0f38ee5b3f472c5?s=128&d=identicon&r=PG&f=1", "display_name": "Dac0d3r", "link": "https://stackoverflow.com/users/3973406/dac0d3r"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1453581362, "post_id": 34968488, "comment_id": 57667295, "body": "I&#39;m asking what the right approach would be to writeing a core application with extension points, from which 3rd party modules/crates/plugins would be able to hook into and add functionality, integrating seemsless ly with the core application.. Sorry for not being a rust expert and asking a stupid question"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1453581374, "post_id": 34968488, "comment_id": 57667301, "body": "No offense intended, I just don&#39;t believe that the question <i>in it&#39;s current form</i> is <a href=\"http://stackoverflow.com/help/on-topic\">on-topic</a>. There are all kinds of questions that are <a href=\"http://stackoverflow.com/help/dont-ask\">not ideal to ask</a>. Don&#39;t worry, it will take 4 more people to agree before the question is actually closed; maybe they will disagree with me."}, {"owner": {"reputation": 1751, "user_id": 3973406, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/b2d94768947ebd5fd0f38ee5b3f472c5?s=128&d=identicon&r=PG&f=1", "display_name": "Dac0d3r", "link": "https://stackoverflow.com/users/3973406/dac0d3r"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1453581507, "post_id": 34968488, "comment_id": 57667350, "body": "I&#39;ll try to rewrite my question then. I&#39;m pretty new to rust, but I really would love to know the &quot;rust way&quot; to make this kind of plugin structure"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1453581735, "post_id": 34968488, "comment_id": 57667430, "body": "It has nothing to do with Rust or being an &quot;expert&quot; ^_^. I believe that if you asked the same question for any language here on SO it would merit the same response. As I see it, asking &quot;how do I write a large program so that it has X and Y characteristics&quot; goes far beyond the scope of SO questions and answers. A useful answer would have to cover so much ground. Again, this is all my opinion; others may agree with you."}, {"owner": {"reputation": 1751, "user_id": 3973406, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/b2d94768947ebd5fd0f38ee5b3f472c5?s=128&d=identicon&r=PG&f=1", "display_name": "Dac0d3r", "link": "https://stackoverflow.com/users/3973406/dac0d3r"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1453581871, "post_id": 34968488, "comment_id": 57667483, "body": "Fair enough, however if you take a look at the url I linked to in the question, you&#39;d see a pretty awesome answer, when I asked a similar question in Golang. That&#39;s exactly what I&#39;m looking for - but the rust way of course."}], "answers": [{"comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1455362161, "post_id": 35379122, "comment_id": 58463253, "body": "Let me know if something is not clear enough or if some information is missing!"}, {"owner": {"reputation": 1751, "user_id": 3973406, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/b2d94768947ebd5fd0f38ee5b3f472c5?s=128&d=identicon&r=PG&f=1", "display_name": "Dac0d3r", "link": "https://stackoverflow.com/users/3973406/dac0d3r"}, "edited": false, "score": 0, "creation_date": 1455410770, "post_id": 35379122, "comment_id": 58478614, "body": "Wow finally. Just what I was looking for - what an amazing answer! Thank you so much. Although I already ended up implementing a slightly different architecture before reading your answer. I&#39;m sure though, if I combine my solution with yours, I&#39;ll get the best of both and probably a close to optimal architecture, so again, Thanks a alot for taking the time to come up with this quality answer!"}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 8, "last_activity_date": 1455376963, "last_edit_date": 1455376963, "creation_date": 1455361887, "answer_id": 35379122, "question_id": 34968488, "link": "https://stackoverflow.com/questions/34968488/is-it-possible-to-make-plugin-extension-hooks-like-wordpress-actions-in-rust/35379122#35379122", "title": "Is it possible to make plugin extension hooks like WordPress actions in Rust?", "body": "<p>As Shepmaster said, this is a very general question; hence there are many ways to do what you want. And as already mentioned, too, <a href=\"https://github.com/iron/iron\" rel=\"noreferrer\"><code>iron</code></a> is a great example of a modular framework.</p>\n\n<p>However, I'll try to give a useful example of how one <em>could</em> implement such a plugin system. For the example I will assume, that there is some kind of main-crate that can load the plugins and \"configure\" the CMS. This means that the plugins aren't loaded dynamically! </p>\n\n<hr>\n\n<h1>Structure</h1>\n\n<p>First, lets say we have four crates:</p>\n\n<ul>\n<li><code>rustpress</code>: the big main crate with all WordPress-like functionality</li>\n<li><code>rustpress-plugin</code>: needs to be used by plugin authors (is an own crate in order to avoid using a huge crate like <code>rustpress</code> for every plugin)</li>\n<li><code>rustpress-signature</code>: here we create our plugin which will add a signature to each post</li>\n<li><code>my-blog</code>: this will be the main executable that configures our blog and will run as a web server later</li>\n</ul>\n\n<hr>\n\n<h3>1. The trait/interface</h3>\n\n<p>The way to go in Rust are <code>trait</code>s. You can compare them to interfaces from other languages. We will now design the <code>trait</code> for plugins which lives in <code>rustpress-plugin</code>:</p>\n\n<pre><code>pub trait Plugin {\n    /// Returns the name of the plugin\n    fn name(&amp;self) -&gt; &amp;str;\n    /// Hook to change the title of a post\n    fn filter_title(&amp;self, title: &amp;mut String) {}\n    /// Hook to change the body of a post\n    fn filter_body(&amp;self, body: &amp;mut String) {}\n}\n</code></pre>\n\n<p>Note that the <code>filter_*</code> methods already have a default implementation that does nothing (<code>{}</code>). This means that plugins don't have to override all methods if they only want to use one hook.</p>\n\n<h3>2. Write our plugin</h3>\n\n<p>As I said we want to write a plugin that adds our signature to each posts body. To do that we will <code>impl</code> the trait for our own type (in <code>rustpress-signature</code>):</p>\n\n<pre><code>extern crate rustpress_plugin;\nuse rustpress_plugin::Plugin;\n\npub struct Signature {\n    pub text: String,\n}\n\nimpl Plugin for Signature {\n    fn name(&amp;self) -&gt; &amp;str {\n        \"Signature Plugin v0.1 by ferris\"\n    }\n\n    fn filter_body(&amp;self, body: &amp;mut String) {\n        body.push_str(\"\\n-------\\n\");   // add visual seperator \n        body.push_str(&amp;self.text);\n    }\n}\n</code></pre>\n\n<p>We created a simple type <code>Signature</code> for which we implement the trait <code>Plugin</code>. We have to implement the <code>name()</code> method and we also override the <code>filter_body()</code> method. In our implementation we just add text to the post body. We did not override <code>filter_title()</code> because we don't need to.</p>\n\n<h3>3. Implement the plugin stack</h3>\n\n<p>The CMS has to manage all plugins. I assume that the CMS has a main type <code>RustPress</code> that will handle everything. It could look like this (in <code>rustpress</code>):</p>\n\n<pre><code>extern crate rustpress_plugin;\nuse rustpress_plugin::Plugin;\n\npub struct RustPress {\n    // ...\n    plugins: Vec&lt;Box&lt;Plugin&gt;&gt;,\n}\n\nimpl RustPress {\n    pub fn new() -&gt; RustPress {\n        RustPress {\n            // ...\n            plugins: Vec::new(),\n        }\n    }\n\n    /// Adds a plugin to the stack\n    pub fn add_plugin&lt;P: Plugin + 'static&gt;(&amp;mut self, plugin: P) {\n        self.plugins.push(Box::new(plugin));\n    }\n\n    /// Internal function that prepares a post\n    fn serve_post(&amp;self) {\n        let mut title = \"dummy\".to_string();\n        let mut body = \"dummy body\".to_string();\n\n        for p in &amp;self.plugins {\n            p.filter_title(&amp;mut title);\n            p.filter_body(&amp;mut body);\n        }\n\n        // use the finalized title and body now ...\n    }\n\n    /// Starts the CMS ...\n    pub fn start(&amp;self) {}\n}\n</code></pre>\n\n<p>What we are doing here is storing a <code>Vec</code> full of boxed plugins (we need to box them, because we want ownership, but traits are unsized). When the CMS then prepare a blog-post, it iterates through all plugins and calls all hooks.</p>\n\n<h3>4. Configure and start the CMS</h3>\n\n<p>Last step is adding the plugin and starting the CMS (putting it all together). We will do this in the <code>my-blog</code> crate:</p>\n\n<pre><code>extern crate rustpress;\nextern crate rustpress_plugin;\nextern crate rustpress_signature;\n\nuse rustpress::RustPress;\nuse rustpress_plugin::Plugin;\nuse rustpress_signature::Signature;\n\nfn main() {\n    let mut rustpress = RustPress::new();\n\n    // add plugin\n    let sig = Signature { text: \"Ferris loves you &lt;3\".into() };\n    rustpress.add_plugin(sig);\n\n    rustpress.start();\n}\n</code></pre>\n\n<hr>\n\n<p>You also need to add the dependencies to the <code>Cargo.toml</code> files. I omitted that because it should be fairly easy.</p>\n\n<p>And note again that this is <em>one</em> of many possibilities to create such a system. I hope this example is helpful. You can try it <a href=\"http://is.gd/EioW6l\" rel=\"noreferrer\">on playground</a>, too.</p>\n"}], "owner": {"reputation": 1751, "user_id": 3973406, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/b2d94768947ebd5fd0f38ee5b3f472c5?s=128&d=identicon&r=PG&f=1", "display_name": "Dac0d3r", "link": "https://stackoverflow.com/users/3973406/dac0d3r"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 399, "favorite_count": 2, "accepted_answer_id": 35379122, "answer_count": 1, "score": 4, "last_activity_date": 1455376963, "creation_date": 1453580946, "last_edit_date": 1495539961, "question_id": 34968488, "link": "https://stackoverflow.com/questions/34968488/is-it-possible-to-make-plugin-extension-hooks-like-wordpress-actions-in-rust", "title": "Is it possible to make plugin extension hooks like WordPress actions in Rust?", "body": "<p>I'm about to rewrite a highly modular CMS in Rust, so my question is if it's even possible to have the \"core\" application set up extension points (actions/hooks), which other plugins / crates is able to \"tab\" into.</p>\n\n<p><a href=\"https://stackoverflow.com/a/28003144/3973406\">Something like this</a> would suffice, but how would you do this in Rust? The architecture above uses a plugin registry and initiates each plugin's main method from the core by iterating over each of them. However in Rust, since you can't have a global \"modules\" variable in e.g. a plugin_registry lib crate, I guess this is not the correct thinking in Rust.</p>\n\n<p>Is there a better and more flexible way to make \"plugins\" integrate seamlessly with a core application? For example, something like an event dispatcher like WordPress uses?</p>\n"}, {"tags": ["macros", "rust"], "answers": [{"comments": [{"owner": {"reputation": 889, "user_id": 1271598, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/55338cd03e28c0ecdcce78c263b6df34?s=128&d=identicon&r=PG", "display_name": "Philipp Matthias Sch&#228;fer", "link": "https://stackoverflow.com/users/1271598/philipp-matthias-sch%c3%a4fer"}, "edited": false, "score": 0, "creation_date": 1453563367, "post_id": 34965267, "comment_id": 57661042, "body": "When I introduce a line <code>let saved = 3</code> in bar() before the macro, it compiles, even though te saved inside the macro block has nothing to do with the one outside (except for shadowing it)."}, {"owner": {"reputation": 445, "user_id": 2162155, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e16f497ba4dc5cebfd25990f70411ca6?s=128&d=identicon&r=PG", "display_name": "jwilm", "link": "https://stackoverflow.com/users/2162155/jwilm"}, "reply_to_user": {"reputation": 889, "user_id": 1271598, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/55338cd03e28c0ecdcce78c263b6df34?s=128&d=identicon&r=PG", "display_name": "Philipp Matthias Sch&#228;fer", "link": "https://stackoverflow.com/users/1271598/philipp-matthias-sch%c3%a4fer"}, "edited": false, "score": 0, "creation_date": 1453564474, "post_id": 34965267, "comment_id": 57661393, "body": "That&#39;s right. Rust&#39;s macros are <a href=\"https://doc.rust-lang.org/book/macros.html#hygiene\" rel=\"nofollow noreferrer\"><i>hygienic</i></a>. One of the repercussions of macro hygiene is the inability to introduce variables like that into the calling scope. You <i>can</i> return values, however."}, {"owner": {"reputation": 889, "user_id": 1271598, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/55338cd03e28c0ecdcce78c263b6df34?s=128&d=identicon&r=PG", "display_name": "Philipp Matthias Sch&#228;fer", "link": "https://stackoverflow.com/users/1271598/philipp-matthias-sch%c3%a4fer"}, "edited": false, "score": 0, "creation_date": 1453704978, "post_id": 34965267, "comment_id": 57701794, "body": "This is not entirely true, as your link says: &quot;This holds for let bindings and loop labels, but not for items. So the following code does compile:&quot;. See for example <a href=\"https://github.com/rust-lang-nursery/lazy-static.rs\" rel=\"nofollow noreferrer\">github.com/rust-lang-nursery/lazy-static.rs</a> ."}], "tags": [], "owner": {"reputation": 445, "user_id": 2162155, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e16f497ba4dc5cebfd25990f70411ca6?s=128&d=identicon&r=PG", "display_name": "jwilm", "link": "https://stackoverflow.com/users/2162155/jwilm"}, "is_accepted": false, "score": 1, "last_activity_date": 1453562865, "creation_date": 1453562865, "answer_id": 34965267, "question_id": 34965233, "link": "https://stackoverflow.com/questions/34965233/why-does-this-macro-result-in-an-unresolved-name-error/34965267#34965267", "title": "Why does this macro result in an unresolved name error?", "body": "<p>Your <code>fn bar</code> doesn't have anything named <code>saved</code> in scope at the invocation site.</p>\n"}, {"comments": [{"owner": {"reputation": 889, "user_id": 1271598, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/55338cd03e28c0ecdcce78c263b6df34?s=128&d=identicon&r=PG", "display_name": "Philipp Matthias Sch&#228;fer", "link": "https://stackoverflow.com/users/1271598/philipp-matthias-sch%c3%a4fer"}, "edited": false, "score": 0, "creation_date": 1453564152, "post_id": 34965397, "comment_id": 57661300, "body": "That solves it and makes me understand the problem. (I do not want to write, that it makes sense :))"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 7, "last_activity_date": 1453563709, "creation_date": 1453563709, "answer_id": 34965397, "question_id": 34965233, "link": "https://stackoverflow.com/questions/34965233/why-does-this-macro-result-in-an-unresolved-name-error/34965397#34965397", "title": "Why does this macro result in an unresolved name error?", "body": "<p>This is because <code>macro_rules!</code> is kinda broken when it comes to macros that expand to statements.</p>\n\n<p>The problem is basically that it considers each statement <em>independently</em> for the purposes of hygiene.  In other words, the third statement literally <em>cannot see</em> the binding defined on the first line.</p>\n\n<p>In some cases, you can work around this by wrapping the statements in a block:</p>\n\n<pre><code>macro_rules! why {\n    ( [ $saved:ident ] $body:block ) =&gt; {\n        {\n            let $saved = 3;\n            $body\n            let _a = $saved;\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 889, "user_id": 1271598, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/55338cd03e28c0ecdcce78c263b6df34?s=128&d=identicon&r=PG", "display_name": "Philipp Matthias Sch&#228;fer", "link": "https://stackoverflow.com/users/1271598/philipp-matthias-sch%c3%a4fer"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 649, "favorite_count": 1, "accepted_answer_id": 34965397, "answer_count": 2, "score": 5, "last_activity_date": 1453563948, "creation_date": 1453562671, "last_edit_date": 1453563948, "question_id": 34965233, "link": "https://stackoverflow.com/questions/34965233/why-does-this-macro-result-in-an-unresolved-name-error", "title": "Why does this macro result in an unresolved name error?", "body": "<p>I would like to compile code similiar to this minimal test case:</p>\n\n<pre><code>macro_rules! why {\n    ( [ $saved:ident ] $body:block ) =&gt; {\n        let $saved = 3;\n        $body\n        let _a = $saved;\n    }\n}\n\nfn bar() {\n    why!([saved] {\n    });\n}\n\nfn main() {\n}\n</code></pre>\n\n<p>When I try to compile it, I get the following error:</p>\n\n<pre><code>src/main.rs:10:20: 10:21 error: unresolved name `saved` [E0425]\nsrc/main.rs:10         why!([saved] {\n                                  ^\nsrc/main.rs:10:9: 11:12 note: in this expansion of why! (defined in src/main.rs)\nsrc/main.rs:10:20: 10:21 help: run `rustc --explain E0425` to see a detailed explanation\n</code></pre>\n\n<p>Other macros that introduce variables work; what's the problem here?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1453564938, "post_id": 34965034, "comment_id": 57661587, "body": "FYI, once you fix this issue, you are likely to run into the <a href=\"http://stackoverflow.com/q/28512394/155423\">issue solved here</a>."}], "answers": [{"tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": true, "score": 4, "last_activity_date": 1453566306, "last_edit_date": 1453566306, "creation_date": 1453563842, "answer_id": 34965421, "question_id": 34965034, "link": "https://stackoverflow.com/questions/34965034/mismatched-types-error-when-inserting-into-a-hashmapstr-u64/34965421#34965421", "title": "Mismatched types error when inserting into a HashMap&lt;&amp;str, u64&gt;", "body": "<p>It's saying that the expression is returning a <code>Option&lt;u64&gt;</code> where a <code>()</code> (the unit value, so practically \"nothing\") is expected.</p>\n\n<p>The expression that should return the unit value is the <code>match</code>. The enclosing  <code>for</code> returns <code>()</code> (i.e. expects no value to return), so the <code>match</code> is expected to return nothing too. But its two branches are returning the result of the <code>insert</code>, an <code>Option</code>.</p>\n\n<p>The way to tell Rust to discard the return value is to add a <code>;</code>, like this;</p>\n\n<pre><code>match counter.get(grapheme) {\n    Some(v) =&gt; counter.insert(grapheme, v + 1),\n    None =&gt; counter.insert(grapheme, 1)\n}; //add a ; here\n</code></pre>\n\n<hr>\n\n<p>The error message is of the form <code>expected X, found Y (expected A, found B)</code>. <code>X</code> and <code>Y</code> are the complete mismatching types, then, in parentheses, <code>A</code> and <code>B</code> focus on the part of the type where the first mismatch appears. This is particularly useful when the mismatch happens on types involving generics. Here's a (contrived) example:</p>\n\n<pre><code>use std::sync::{Arc, Mutex};\n\nfn type_mismatch(x: Arc&lt;Mutex&lt;String&gt;&gt;) {}\n\nfn main() {\n    let a = Arc::new(Mutex::new(0i32));\n    type_mismatch(a);\n}\n</code></pre>\n\n<p>This gives the following error:</p>\n\n<pre><code>&lt;anon&gt;:7:19: 7:20 error: mismatched types:\n expected `alloc::arc::Arc&lt;std::sync::mutex::Mutex&lt;collections::string::String&gt;&gt;`,\n    found `alloc::arc::Arc&lt;std::sync::mutex::Mutex&lt;i32&gt;&gt;`\n(expected struct `collections::string::String`,\n    found i32) [E0308]\n&lt;anon&gt;:7     type_mismatch(a);\n                           ^\n</code></pre>\n\n<p>Here, the type of the <code>a</code> variable doesn't match the type of the <code>x</code> parameter on <code>type_mismatch</code>. Notice how their types are similar, but the difference is in the type parameter for <code>Mutex</code> in both cases. The compiler focuses on this difference so you can spot it more easily.</p>\n\n<p>As you get more familiar with the libraries you use, sometimes just reading the focused types will be enough to help you figure out what's wrong.</p>\n"}, {"tags": [], "owner": {"reputation": 3181, "user_id": 4998184, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/29c803cb4341d0ff630cb3ca04ab7251?s=128&d=identicon&r=PG", "display_name": "eulerdisk", "link": "https://stackoverflow.com/users/4998184/eulerdisk"}, "is_accepted": false, "score": 3, "last_activity_date": 1453563901, "creation_date": 1453563901, "answer_id": 34965428, "question_id": 34965034, "link": "https://stackoverflow.com/questions/34965034/mismatched-types-error-when-inserting-into-a-hashmapstr-u64/34965428#34965428", "title": "Mismatched types error when inserting into a HashMap&lt;&amp;str, u64&gt;", "body": "<p>With your code above the <code>match</code> expression has type <code>Option&lt;u64&gt;</code> (because all the branches have type <code>Option&lt;u64&gt;</code>). A <code>for</code> loop body must terminate with a statement so simply put a <code>;</code> to make that <code>match</code> a statement.</p>\n\n<pre><code>match counter.get(grapheme) {\n    Some(v) =&gt; counter.insert(grapheme, v + 1),\n    None =&gt; counter.insert(grapheme, 1)\n};\n</code></pre>\n\n<p><a href=\"http://rustbyexample.com/expression.html\" rel=\"nofollow\">Look here for more details</a></p>\n"}], "owner": {"reputation": 333, "user_id": 198426, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Sin1w.jpg?s=128&g=1", "display_name": "mparker17", "link": "https://stackoverflow.com/users/198426/mparker17"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 924, "favorite_count": 0, "accepted_answer_id": 34965421, "answer_count": 2, "score": 2, "last_activity_date": 1453566306, "creation_date": 1453561663, "last_edit_date": 1453563626, "question_id": 34965034, "link": "https://stackoverflow.com/questions/34965034/mismatched-types-error-when-inserting-into-a-hashmapstr-u64", "title": "Mismatched types error when inserting into a HashMap&lt;&amp;str, u64&gt;", "body": "<p>I am creating a simple program which reads stdin one line at a time until it reaches the end of the file, then prints the frequency of each letter (i.e.: character, actually technically Unicode Graphemes) in the input. <a href=\"https://github.com/mparker17/lc\" rel=\"nofollow\">The full source is on Github</a>. I'm using rustc version 1.6.0 and cargo 0.7.0</p>\n\n<p>In the program, I define a <code>HashMap&lt;&amp;str, u64&gt;</code> to store the statistics, using the letter as the key and the number of occurrences of that letter as the value. While looping through each letter, I do the following to store the statistics:</p>\n\n<pre><code>for line in stdin.lock().lines() {\n    let mut line = line.unwrap().as_str();\n\n    // For each line, store it's character.\n    for grapheme in UnicodeSegmentation::graphemes(line, true) {\n        match counter.get(grapheme) {\n            Some(v) =&gt; counter.insert(grapheme, v + 1),\n            None =&gt; counter.insert(grapheme, 1)\n        }\n    }\n}\n</code></pre>\n\n<p>(where <code>grapheme</code> <a href=\"http://unicode-rs.github.io/unicode-segmentation/unicode_segmentation/trait.UnicodeSegmentation.html#tymethod.graphemes\" rel=\"nofollow\">is a reference to a string</a>).</p>\n\n<p>I realize this might not be the best way to update the counters in the hashmap, but I believe it should technically work --- I am a total Rust n00b after all.</p>\n\n<p>When I <code>cargo build</code>, I get:</p>\n\n<pre><code> expected `()`,\n    found `core::option::Option&lt;u64&gt;`\n(expected (),\n    found enum `core::option::Option`) [E0308]\nsrc/main.rs:18             match counter.get(grapheme) {\nsrc/main.rs:19                 Some(v) =&gt; counter.insert(grapheme, v + 1),\nsrc/main.rs:20                 None =&gt; counter.insert(grapheme, 1)\nsrc/main.rs:21             }\n</code></pre>\n\n<p>... from looking at the docs for E0308, and the exact error message, I understand the compiler is getting one type and expecting another; but I don't understand:</p>\n\n<ul>\n<li>whether I'm seeing two mismatches or one, i.e.:\n\n<ul>\n<li>is there a mismatch between <code>core::option::Option&lt;u64&gt;</code> and <code>core::option::Option</code>? </li>\n<li>are there two mismatches, between <code>()</code> and <code>core::option::Option&lt;u64&gt;</code> and between <code>()</code> and <code>core::option::Option</code>?</li>\n<li>something else?</li>\n</ul></li>\n<li>I don't understand how to tell Rust's compiler how to interpret things with the correct type (i.e.: what to do to fix the issue).</li>\n</ul>\n"}, {"tags": ["concurrency", "rust"], "answers": [{"comments": [{"owner": {"reputation": 1077, "user_id": 1531199, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/ed66c228615fe1e780b7e994b6d2bbbb?s=128&d=identicon&r=PG", "display_name": "Philipp Br&#252;ll", "link": "https://stackoverflow.com/users/1531199/philipp-br%c3%bcll"}, "edited": false, "score": 0, "creation_date": 1453714970, "post_id": 34963307, "comment_id": 57706816, "body": "Thanks, that solves the problem. Still not my preffered interface, but I guess it&#39;s the best we can do."}], "tags": [], "owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "is_accepted": true, "score": 3, "last_activity_date": 1453551743, "last_edit_date": 1453551743, "creation_date": 1453551268, "answer_id": 34963307, "question_id": 34962899, "link": "https://stackoverflow.com/questions/34962899/whats-the-best-way-to-pass-an-output-iowrite-to-a-function-that-uses-thread/34963307#34963307", "title": "What&#39;s the best way to pass an output `io::Write` to a function that uses threads?", "body": "<p>You can pass ownership of W to the function, then to the thread, then back to the calling scope.</p>\n\n<pre><code>fn process&lt;W&gt;(mut w: W) -&gt; W where W: io::Write + Send + 'static {\n    thread::spawn(move || {\n        write!(w, \"hello world\").unwrap();\n        w\n    }).join().unwrap()\n}\n\nfn main() {\n    let output = Vec::new();\n    let output = process(output);\n    let output = process(output);\n}\n</code></pre>\n\n<p>The Sync constraint is unnecessary so I removed it.</p>\n"}, {"comments": [{"owner": {"reputation": 1077, "user_id": 1531199, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/ed66c228615fe1e780b7e994b6d2bbbb?s=128&d=identicon&r=PG", "display_name": "Philipp Br&#252;ll", "link": "https://stackoverflow.com/users/1531199/philipp-br%c3%bcll"}, "edited": false, "score": 0, "creation_date": 1453715091, "post_id": 34963312, "comment_id": 57706907, "body": "<code>crossbeam</code> is not an option for my project, but you&#39;re right, it solves my example code. Thanks for that!"}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": false, "score": 2, "last_activity_date": 1453551626, "last_edit_date": 1453551626, "creation_date": 1453551303, "answer_id": 34963312, "question_id": 34962899, "link": "https://stackoverflow.com/questions/34962899/whats-the-best-way-to-pass-an-output-iowrite-to-a-function-that-uses-thread/34963312#34963312", "title": "What&#39;s the best way to pass an output `io::Write` to a function that uses threads?", "body": "<p>Depending on the architecture of your actual program, you may want to use <a href=\"https://github.com/aturon/crossbeam\" rel=\"nofollow\"><code>crossbeam</code></a>:</p>\n\n<pre><code>extern crate crossbeam;\n\nuse std::io;\n\nfn process&lt;W&gt;(w: &amp;mut W) where W: io::Write + Send {\n    crossbeam::scope(|scope| {\n        scope.spawn(|| {\n            write!(w, \"hello world\").unwrap();\n        });\n    });\n}\n\nfn main() {\n    let mut buffer = Vec::new();\n    process(&amp;mut buffer);\n}\n</code></pre>\n\n<p>With crossbeam, it is possible to spawn threads which may hold to non-static references. It is guaranteed that these threads will outilve the captured references because all threads are implicitly joined when <code>crossbeam::scope()</code> function exits. Therefore, with crossbeam it is possible both to omit <code>'static</code> and <code>Sync</code> bounds on <code>W</code> and to use <code>&amp;mut W</code> reference in the thread closure.</p>\n"}], "owner": {"reputation": 1077, "user_id": 1531199, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/ed66c228615fe1e780b7e994b6d2bbbb?s=128&d=identicon&r=PG", "display_name": "Philipp Br&#252;ll", "link": "https://stackoverflow.com/users/1531199/philipp-br%c3%bcll"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 69, "favorite_count": 1, "accepted_answer_id": 34963307, "answer_count": 2, "score": 2, "last_activity_date": 1453551743, "creation_date": 1453548698, "last_edit_date": 1592644375, "question_id": 34962899, "link": "https://stackoverflow.com/questions/34962899/whats-the-best-way-to-pass-an-output-iowrite-to-a-function-that-uses-thread", "title": "What&#39;s the best way to pass an output `io::Write` to a function that uses threads?", "body": "<p>I try to write a function that takes an <code>io::Write</code> as an argument in order to output binary data. The tricky part is now, that the function internally uses a thread to produce that data (I know in the following code the usage of a thread does not make sense - it's there for demonstration).</p>\n<p>Currently, I've different approaches:</p>\n<h1>1</h1>\n<pre><code>fn process&lt;W&gt;(mut w: W) where W: io::Write + Send + Sync + 'static {\n    thread::spawn(move || {\n        write!(w, &quot;hello world&quot;).unwrap();\n    }).join().unwrap();\n}\n\nfn main() {\n    let output = Vec::new();\n    process(output);\n}\n</code></pre>\n<p>The problem here is that <code>output</code> cannot be used after the call of <code>process</code> since it moved in there.</p>\n<h1>2</h1>\n<pre><code>fn process&lt;W&gt;(w: &amp;mut W) where W: io::Write + Send + Sync + 'static {\n    thread::spawn(move || {\n        write!(w, &quot;hello world&quot;).unwrap();\n    }).join().unwrap();\n}\n\nfn main() {\n    let output = Vec::new();\n    process(&amp;mut output);\n}\n</code></pre>\n<p>This is my preferred signature of <code>process</code>, but does not compile because the lifetime of <code>w</code> seem to be shorter (for the compiler) than the lifetime of the thread.</p>\n<h1>3</h1>\n<pre><code>fn process(w: Arc&lt;Mutex&lt;io::Write + Send&gt;&gt;) {\n    thread::spawn(move || {\n        let mut w = w.lock().unwrap();\n        write!(w, &quot;hello world&quot;).unwrap();\n    }).join().unwrap();\n}\n\nfn main() {\n    let buffer = Arc::new(Mutex::new(Vec::new() as Vec&lt;u8&gt;));\n    process(buffer.clone());\n}\n</code></pre>\n<p>This works, but the signature of <code>process</code> exposes the internal implementation detail that a thread is used. The kind of design I would like to avoid, since in later versions the thread might disappear.</p>\n<p>Does someone has a better solution? Many thanks in advance.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 1, "creation_date": 1453517952, "post_id": 34958555, "comment_id": 57649525, "body": "No, it&#39;s not possible."}], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 5, "last_activity_date": 1453536026, "creation_date": 1453536026, "answer_id": 34961073, "question_id": 34958555, "link": "https://stackoverflow.com/questions/34958555/implementing-inherited-functions-in-derived-traits-implementation-block/34961073#34961073", "title": "Implementing inherited functions in derived trait&#39;s implementation block", "body": "<p>To expand on Veedrac's comment: no, it is not possible, in particular because trait inheritance does not mean the same thing as inheritance on OO languages like Java.</p>\n\n<p>In Rust trait inheritance is much closer to Haskell's type class inheritance. If trait <code>A</code> inherits trait <code>B</code>:</p>\n\n<pre><code>trait A: B { ... }\n</code></pre>\n\n<p>It only means that \"if some type <code>T</code> implements <code>A</code>, it must also implement <code>B</code>\". It is not \"is-a\" relationship, it is a special constraint. The traits themselves are still disjoint. Therefore, you must explicitly implement trait <code>B</code> if you want to implement <code>A</code> for your type.</p>\n"}], "owner": {"reputation": 4408, "user_id": 154680, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/1fe5646f7071126187fbda8c68c526f6?s=128&d=identicon&r=PG", "display_name": "russoue", "link": "https://stackoverflow.com/users/154680/russoue"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 120, "favorite_count": 0, "accepted_answer_id": 34961073, "answer_count": 1, "score": 0, "last_activity_date": 1453536026, "creation_date": 1453512202, "question_id": 34958555, "link": "https://stackoverflow.com/questions/34958555/implementing-inherited-functions-in-derived-traits-implementation-block", "title": "Implementing inherited functions in derived trait&#39;s implementation block", "body": "<p>I have the following code:</p>\n\n<pre><code>trait A {\n    fn foo(&amp;self);\n}\n\ntrait B {\n    fn bar(&amp;self);\n}\n\ntrait C : A + B {\n}\n\nstruct S;\n\nimpl A for S {\n    fn foo(&amp;self) {\n        println!(\"In S-&gt;foo()\");\n    }\n}\n\nimpl B for S {\n    fn bar(&amp;self) {\n        println!(\"In S-&gt;bar()\");\n    }\n}\n\nimpl C for S {\n}\n\nfn main() {\n    let s = S;\n    s.foo();\n    s.bar();\n}\n</code></pre>\n\n<p>(Rust playground link: <a href=\"http://is.gd/pde2LE\" rel=\"nofollow\">http://is.gd/pde2LE</a>)</p>\n\n<p>Is it possible to only implement <code>C</code> for <code>S</code> and implement the <code>foo</code> and <code>bar</code> functions in that implementation block? I tried the following but it fails:</p>\n\n<pre><code>trait A {\n    fn foo(&amp;self);\n}\n\ntrait B {\n    fn bar(&amp;self);\n}\n\ntrait C : A + B {\n}\n\nstruct S;\n\nimpl C for S {\n    fn foo(&amp;self) {\n        println!(\"In S-&gt;foo()\");\n    }\n\n    fn bar(&amp;self) {\n        println!(\"In S-&gt;bar()\");\n    }\n}\n\nfn main() {\n    let s = S;\n    s.foo();\n    s.bar();\n}\n</code></pre>\n\n<p>(Rust playground link: <a href=\"http://is.gd/CqA6J5\" rel=\"nofollow\">http://is.gd/CqA6J5</a>)</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 748, "user_id": 91909, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/546f20e4042e433d9bcbf0dc6c1a1cf5?s=128&d=identicon&r=PG", "display_name": "Bill Fraser", "link": "https://stackoverflow.com/users/91909/bill-fraser"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1453506504, "post_id": 34957646, "comment_id": 57647403, "body": "Oh wow, yeah, that solves it. I didn&#39;t expect there to be an API for this, so I didn&#39;t look for one.  I still think the lifetime of the borrow in an <code>if let</code> expression is just crazy..."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1453506639, "post_id": 34957646, "comment_id": 57647444, "body": "FYI, the last bit of your question (why does <code>else</code> have a borrow) is a well-known limitation of the current implementation of the borrow checker, as it has <i>lexical scopes</i>. There are <a href=\"https://github.com/rust-lang/rfcs/issues/811\" rel=\"nofollow noreferrer\">plans to fix this</a>."}], "owner": {"reputation": 748, "user_id": 91909, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/546f20e4042e433d9bcbf0dc6c1a1cf5?s=128&d=identicon&r=PG", "display_name": "Bill Fraser", "link": "https://stackoverflow.com/users/91909/bill-fraser"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 404, "favorite_count": 0, "closed_date": 1453506559, "answer_count": 0, "score": 0, "last_activity_date": 1453505197, "creation_date": 1453505197, "question_id": 34957646, "link": "https://stackoverflow.com/questions/34957646/how-can-i-conditionally-add-or-update-a-map-when-im-moving-a-value-into-it", "closed_reason": "Duplicate", "title": "How can I conditionally add or update a map when I&#39;m moving a value into it?", "body": "<p>I have a BTreeMap that I want to either update or add an entry to, depending on if a key is found or not. The value I'm adding or updating is potentially very large, so I want to move it, not copy it. However, Rust's borrow checker keeps me from doing this, no matter what I try.</p>\n\n<p>Skeleton demo program:</p>\n\n<pre><code>use std::collections::BTreeMap;\n\n#[derive(Debug)]\nstruct Thing {\n    value: String\n}\n\nfn add_or_update(map: &amp;mut BTreeMap&lt;i32, Thing&gt;, key: i32, value: String) {\n    // ?????????????????????\n    // ?? it is a mystery ??\n    // ?????????????????????\n}\n\nfn main() {\n    let mut container = BTreeMap::&lt;i32, Thing&gt;::new();\n\n    add_or_update(&amp;mut container, 42, \"Hello!\".to_string()); // add\n    add_or_update(&amp;mut container, 42, \"World!\".to_string()); // update\n\n    println!(\"{:?}\", container);\n}\n</code></pre>\n\n<h2>And here's how I've tried variously implementing <code>add_or_update</code>:</h2>\n\n<p>This obviously fails, because <code>map</code> is borrowed mutably for the whole match expression:</p>\n\n<pre><code>match map.get_mut(&amp;key) {\n    Some(ref mut thing) =&gt; { thing.value = value; },\n    None                =&gt; { map.insert(key, Thing { value: value }); },\n}\n</code></pre>\n\n<p>This is a borrow violation because <code>map</code> is borrowed for the entire if/else expression, not just the 'if' part of it:</p>\n\n<pre><code>if let Some(ref mut thing) = map.get_mut(&amp;key) {\n    thing.value = value;\n}\nelse {\n    map.insert(key, Thing {\n        value: value\n    });\n}\n</code></pre>\n\n<p>This fixes the borrow violation, but also doesn't work because <code>value</code> is now moved in two places that the Rust compiler doesn't see as independent any more:</p>\n\n<pre><code>let mut updated = false;\nif let Some(ref mut thing) = map.get_mut(&amp;key) {\n    updated = true;\n    thing.value = value;\n}\nif !updated {\n    map.insert(key, Thing {\n        value: value\n    });\n}\n</code></pre>\n\n<p>And now I'm out of ideas. Is there any way to do this?</p>\n\n<p>The last example would work if it wasn't for the fact that I need to <em>move</em> the value, not copy it.</p>\n\n<p>The way that <code>if let</code> borrows for the <strong>entire</strong> if/else expression is utterly maddening. Why on earth does it borrow for the \"else\" part?!? Code there is only run if the <code>if let</code> binding failed!</p>\n"}, {"tags": ["enums", "rust"], "comments": [{"owner": {"reputation": 560, "user_id": 2520171, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7dea54aa4d218a6d8fc0263dc5a06caa?s=128&d=identicon&r=PG", "display_name": "jv-dev", "link": "https://stackoverflow.com/users/2520171/jv-dev"}, "edited": false, "score": 0, "creation_date": 1557842726, "post_id": 34953711, "comment_id": 98895606, "body": "As of 2019, this code actually does work on stable - enums were improved since this question was asked. See: &lt;<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f4d6211a7a5c6e9dae6e97114d53dd07\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>&gt;"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 560, "user_id": 2520171, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7dea54aa4d218a6d8fc0263dc5a06caa?s=128&d=identicon&r=PG", "display_name": "jv-dev", "link": "https://stackoverflow.com/users/2520171/jv-dev"}, "edited": false, "score": 1, "creation_date": 1557844559, "post_id": 34953711, "comment_id": 98896837, "body": "@alias65536 The code worked back then, too. The question was rather about whether there exists a better way of doing that."}], "answers": [{"comments": [{"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 6, "creation_date": 1453550438, "post_id": 34954128, "comment_id": 57656954, "body": "instead of the impl Animal I tend to impl the Into trait, like <a href=\"http://is.gd/jmS3RB\" rel=\"nofollow noreferrer\">this playground example</a>. With simple enums it should be relatively easy to have a macro to generate the impls, but it&#39;s not a pattern I use all that much, so I never actually got around to writing it..."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 22, "last_activity_date": 1485216467, "last_edit_date": 1485216467, "creation_date": 1453489698, "answer_id": 34954128, "question_id": 34953711, "link": "https://stackoverflow.com/questions/34953711/unwrap-inner-type-when-enum-variant-is-known/34954128#34954128", "title": "Unwrap inner type when enum variant is known", "body": "<p>Not really. What I have seen is introducing a new <code>struct</code> for each enum variant, and then methods on the enum to decompose it:</p>\n\n<pre><code>struct Dog(i32);\nstruct Cat(u8);\n\nenum Animal {\n    Dog(Dog),\n    Cat(Cat),\n}\n\nimpl Animal {\n    fn cat(self) -&gt; Cat {\n        if let Animal::Cat(c) = self { c } else { panic!(\"Not a cat\") }\n    }\n\n    fn dog(self) -&gt; Dog {\n        if let Animal::Dog(d) = self { d } else { panic!(\"Not a dog\") }\n    }\n}\n\n// Or better an impl on `Cat` ?\nfn count_legs_of_cat(c: Cat) -&gt; u8 {\n    c.0\n}\n</code></pre>\n\n<p>Of course, you don't <em>need</em> the struct and you could just return the <code>u8</code>, but that may get hard to track.</p>\n\n<p>There's a glimmer of better support for this in the future, however. I <em>think</em> it's the <a href=\"https://github.com/rust-lang/rfcs/issues/349\" rel=\"noreferrer\">\"efficient code reuse\" RFC</a>, but better described in the blog post <a href=\"http://smallcultfollowing.com/babysteps/blog/2015/08/20/virtual-structs-part-3-bringing-enums-and-structs-together/\" rel=\"noreferrer\">Virtual Structs Part 3: Bringing Enums and Structs Together</a>. The proposal would be to allow <code>Animal::Cat</code> to be a standalone type, thus your method could accept an <code>Animal::Cat</code> and not have to worry about it.</p>\n\n<hr>\n\n<p>Personally, I almost always prefer to write the infallible code in my inherent implementation and force the caller to panic:</p>\n\n<pre><code>impl Animal {\n    fn cat(self) -&gt; Option&lt;Cat&gt; {\n        if let Animal::Cat(c) = self {\n            Some(c)\n        } else {\n            None\n        }\n    }\n\n    fn dog(self) -&gt; Option&lt;Dog&gt; {\n        if let Animal::Dog(d) = self {\n            Some(d)\n        } else {\n            None\n        }\n    }\n}\n</code></pre>\n\n<p>And I'd probably use a <code>match</code></p>\n\n<pre><code>impl Animal {\n    fn cat(self) -&gt; Option&lt;Cat&gt; {\n        match self {\n            Animal::Cat(c) =&gt; Some(c),\n            _ =&gt; None,\n        }\n    }\n\n    fn dog(self) -&gt; Option&lt;Dog&gt; {\n        match self {\n            Animal::Dog(d) =&gt; Some(d),\n            _ =&gt; None,\n        }\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 4500, "user_id": 8858995, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/44d1981ec5dd8311a79e695d512716ef?s=128&d=identicon&r=PG&f=1", "display_name": "Ibraheem Ahmed", "link": "https://stackoverflow.com/users/8858995/ibraheem-ahmed"}, "edited": false, "score": 0, "creation_date": 1617643981, "post_id": 66112628, "comment_id": 118355218, "body": "Maybe you could add an example showing how the crate could be used?"}], "tags": [], "owner": {"reputation": 41, "user_id": 15115519, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-NJjpCoCAHx8/AAAAAAAAAAI/AAAAAAAAAAA/AMZuuckNxq62DVtgpp5UZCJIiqj6_hOMkQ/s96-c/photo.jpg?sz=128", "display_name": "Black Marco", "link": "https://stackoverflow.com/users/15115519/black-marco"}, "is_accepted": false, "score": 1, "last_activity_date": 1612841918, "creation_date": 1612841918, "answer_id": 66112628, "question_id": 34953711, "link": "https://stackoverflow.com/questions/34953711/unwrap-inner-type-when-enum-variant-is-known/66112628#66112628", "title": "Unwrap inner type when enum variant is known", "body": "<p>Try <a href=\"https://crates.io/crates/enum-as-inner\" rel=\"nofollow noreferrer\">enum-as-inner</a> crate, it work exactly what Shepmaster's answer have done.</p>\n"}], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 10737, "favorite_count": 5, "accepted_answer_id": 34954128, "answer_count": 2, "score": 31, "last_activity_date": 1612841918, "creation_date": 1453487915, "question_id": 34953711, "link": "https://stackoverflow.com/questions/34953711/unwrap-inner-type-when-enum-variant-is-known", "title": "Unwrap inner type when enum variant is known", "body": "<p>I have this enum type:</p>\n\n<pre><code>enum Animal {\n    Dog(i32),\n    Cat(u8),\n}\n</code></pre>\n\n<p>Now I have a function that takes this type as parameter. I <em>know</em> (for some reason) that the input is always a <code>Cat</code>. I want to achieve this:</p>\n\n<pre><code>fn count_legs_of_cat(animal: Animal) -&gt; u8 {\n    if let Animal::Cat(c) = animal { c } else { unreachable!() }\n}\n</code></pre>\n\n<p>Can I write this shorter and/or more idiomatic?</p>\n"}, {"tags": ["events", "rust", "observer-pattern"], "answers": [{"comments": [{"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1453483008, "post_id": 34949686, "comment_id": 57636368, "body": "I meant can ensure that nothing will ever access struct with anything other than <code>::new()</code> like constructor. I was going for <b>minimal</b> example, which means I&#39;m not going to write full struct declaration."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 0, "last_activity_date": 1453478145, "last_edit_date": 1453478145, "creation_date": 1453474868, "answer_id": 34949686, "question_id": 34949121, "link": "https://stackoverflow.com/questions/34949121/is-it-possible-to-register-events-that-happen-before-after-creation-of-a-struct/34949686#34949686", "title": "Is it possible to register events that happen before/after creation of a struct?", "body": "<p>AFAIK it's <strong>not</strong> possible without changing how the user interacts with the <code>Library</code> type.</p>\n\n<p>First of all: there are no \"real\" constructors like in an OOP sense, like in C++. In this code:</p>\n\n<pre><code>struct Foo { \n    x: i32,\n    y: bool,\n}\n\nlet f = Foo {   // &lt;-- this\n    x: 0,\n    y: true,\n};\n</code></pre>\n\n<p>... the marked spot is just a struct initializer. It just assigns values and does not execute arbitrary code. In your code the <code>... = Connection;</code> part is this kind of simple initializer. </p>\n\n<p>Functions like <code>new</code>, <code>with_capacity</code> and <code>default</code> are only simple associated (or \"static\") functions and nothing special either.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1453486285, "last_edit_date": 1495542802, "creation_date": 1453477698, "answer_id": 34950601, "question_id": 34949121, "link": "https://stackoverflow.com/questions/34949121/is-it-possible-to-register-events-that-happen-before-after-creation-of-a-struct/34950601#34950601", "title": "Is it possible to register events that happen before/after creation of a struct?", "body": "<p>It's possible, but it's not built-in to the language. You get to understand every nuance of such a decision:</p>\n\n<pre><code>mod connection {\n    pub struct Connection;\n\n    impl Connection {\n        fn new() -&gt; Connection {\n            Connection\n        }\n    }\n\n    pub struct ConnectionFactory {\n        befores: Vec&lt;Box&lt;Fn()&gt;&gt;,\n        afters: Vec&lt;Box&lt;Fn()&gt;&gt;,\n    }\n\n    impl ConnectionFactory {\n        pub fn new() -&gt; ConnectionFactory {\n            ConnectionFactory {\n                befores: Vec::new(),\n                afters: Vec::new(),\n            }\n        }\n\n        pub fn register_before&lt;F&gt;(&amp;mut self, f: F)\n            where F: Fn() + 'static\n        {\n            self.befores.push(Box::new(f))\n        }\n\n        pub fn register_after&lt;F&gt;(&amp;mut self, f: F)\n            where F: Fn() + 'static\n        {\n            self.afters.push(Box::new(f))\n        }\n\n        pub fn build(&amp;self) -&gt; Connection {\n            for f in &amp;self.befores { f() }\n            let c = Connection::new();\n            for f in &amp;self.afters { f() }\n            c\n        }\n    }\n}\n\nuse connection::*;\n\nfn main() {\n    let mut f = ConnectionFactory::new();\n    f.register_before(|| println!(\"Before 1\"));\n    f.register_before(|| println!(\"Before 2\"));\n    f.register_after(|| println!(\"After\"));\n\n    f.build();\n\n    // Connection::new(); // error: method `new` is private\n}\n</code></pre>\n\n<p>The important thing is that <code>Connection::new</code> is no longer public and the only way of constructing one is through a <code>ConnectionFactory</code>. That factory is what holds the closures that you need. Of course you can change the closure signature to do more useful stuff like returning a boolean to abort creation.</p>\n\n<p>If it's important to you to be able to catch every possible construction, then you must <a href=\"https://stackoverflow.com/q/27791532/155423\">make a global mutable singleton</a>.</p>\n"}], "owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 99, "favorite_count": 0, "accepted_answer_id": 34950601, "answer_count": 2, "score": 0, "last_activity_date": 1453486285, "creation_date": 1453473139, "last_edit_date": 1453481757, "question_id": 34949121, "link": "https://stackoverflow.com/questions/34949121/is-it-possible-to-register-events-that-happen-before-after-creation-of-a-struct", "title": "Is it possible to register events that happen before/after creation of a struct?", "body": "<p>I have the following <code>Connection</code> struct and a simple constructor function:</p>\n\n<pre><code>struct Connection;\n\nimpl Connection {\n   pub fn new() -&gt; Connection {\n      // before constructor\n      let construct  = Connection;\n      // after constructor\n      construct\n   }\n}\n</code></pre>\n\n<p>I want to be able to register events that happen before/after creation of any <code>Connection</code>. For example. </p>\n\n<pre><code>register!(Connection, before, println!(\"Before 1\"));\nregister!(Connection, before, println!(\"Before 2\"));\nregister!(Connection, after, println!(\"After\"));\n</code></pre>\n\n<p>So once I call <code>Connection::new()</code> it should at least attempt to write:</p>\n\n<pre><code>//out: Before 1\n//out: Before 2 \nreturns value\n//out: After \n</code></pre>\n\n<p>I think this requires a static <code>Observable</code> class, but is that even possible in safe Rust?</p>\n"}, {"tags": ["types", "rust", "type-alias"], "answers": [{"comments": [{"owner": {"reputation": 828, "user_id": 2736686, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3e64d071a0d538d0b88040e4bfa22d2d?s=128&d=identicon&r=PG", "display_name": "Erik Uggeldahl", "link": "https://stackoverflow.com/users/2736686/erik-uggeldahl"}, "edited": false, "score": 1, "creation_date": 1453435703, "post_id": 34938493, "comment_id": 57609893, "body": "Thanks for the quick  and detailed reply! Normally I&#39;d very much agree with you on using enums to restrict my values to the standard deck values. However, in my case I use the term &quot;card&quot; generically, and not playing card, so I need a rank of unspecified value.  Am I understanding correctly that I should use a type alias if I want simple substitution, and a newtype if I&#39;d like to impose additional restrictions / logic?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 828, "user_id": 2736686, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3e64d071a0d538d0b88040e4bfa22d2d?s=128&d=identicon&r=PG", "display_name": "Erik Uggeldahl", "link": "https://stackoverflow.com/users/2736686/erik-uggeldahl"}, "edited": false, "score": 0, "creation_date": 1453437693, "post_id": 34938493, "comment_id": 57610472, "body": "@ErikUggeldahl yes, that sounds correct. A newtype allows additional restrictions or logic, while an alias is just that, another name for the same thing."}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "reply_to_user": {"reputation": 828, "user_id": 2736686, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3e64d071a0d538d0b88040e4bfa22d2d?s=128&d=identicon&r=PG", "display_name": "Erik Uggeldahl", "link": "https://stackoverflow.com/users/2736686/erik-uggeldahl"}, "edited": false, "score": 2, "creation_date": 1453465445, "post_id": 34938493, "comment_id": 57624479, "body": "@ErikUggeldahl it&#39;s not only restricting values. An alias provides no additional type safety because it&#39;s not a... new type, but another name for the same type. Does it make sense for you to be able to calculate a <code>Rank &#47; 5</code> or pass a <code>Rank</code> to a function that takes a <code>u8</code>? Because a type alias allows you to do that (since <code>Rank</code> <i>is</i> a <code>u8</code>). What you typically use type aliases for in Rust is for convenience when you have a very long and complex type and want to refer to it more concisely (but the alias <i>is</i> the type and should be used in lieu of it everywhere)"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 26, "last_activity_date": 1547948130, "last_edit_date": 1547948130, "creation_date": 1453433285, "answer_id": 34938493, "question_id": 34938429, "link": "https://stackoverflow.com/questions/34938429/does-rust-have-an-idiomatic-equivalent-to-f-typedefs/34938493#34938493", "title": "Does Rust have an idiomatic equivalent to F# typedefs?", "body": "<p>From <a href=\"https://doc.rust-lang.org/book/\" rel=\"noreferrer\"><em>The Rust Programming Language</em></a> section titled <a href=\"https://doc.rust-lang.org/book/ch19-04-advanced-types.html#creating-type-synonyms-with-type-aliases\" rel=\"noreferrer\">Creating Type Synonyms with Type Aliases</a>:</p>\n\n<p>Rust provides the ability to declare a <em>type alias</em> to give an existing type another name. For this we use the <code>type</code> keyword. For example, we can create the alias <code>Kilometers</code> to <code>i32</code> like so:</p>\n\n<pre><code>type Kilometers = i32;\n</code></pre>\n\n<p>Now, the alias <code>Kilometers</code> is a synonym for <code>i32</code>; [...], <code>Kilometers</code> is not a separate, new type. Values that have the type <code>Kilometers</code> will be treated the same as values of type <code>i32</code>:</p>\n\n<pre><code>type Kilometers = i32;\n\nlet x: i32 = 5;\nlet y: Kilometers = 5;\n\nprintln!(\"x + y = {}\", x + y);\n</code></pre>\n\n<p>There's more that you should read, but this answers the question.</p>\n\n<hr>\n\n<p>As a bit of editorial, I don't think that a type alias is a great fit in a lot of places that people use them. Assuming that your <code>Rank</code> type represents something to do with a deck of cards, I'd suggest either an <a href=\"https://doc.rust-lang.org/stable/book/ch06-01-defining-an-enum.html\" rel=\"noreferrer\"><code>enum</code></a> or a <a href=\"https://doc.rust-lang.org/book/ch19-04-advanced-types.html#using-the-newtype-pattern-for-type-safety-and-abstraction\" rel=\"noreferrer\"><em>newtype</em></a>. The reason is that with a type alias you can do something like this:</p>\n\n<pre><code>let rank: Rank = 100;\n</code></pre>\n\n<p>Which is nonsensical for a typical deck of cards. An enum is a restricted set. This means you can never create an invalid <code>Rank</code>:</p>\n\n<pre><code>enum Rank {\n    One, Two, Three, Four, Five,\n    Six, Seven, Eight, Nine, Ten,\n    Jack, Queen, King, Ace,\n}\n\nimpl Rank {\n    fn from_value(v: u8) -&gt; Result&lt;Rank, ()&gt; {\n        use Rank::*;\n\n        let r = match v {\n            1 =&gt; One,\n            2 =&gt; Two,\n            // ...\n            _ =&gt; return Err(()),\n        };\n        Ok(r)\n    }\n\n    fn value(&amp;self) -&gt; u8 {\n        use Rank::*;\n\n        match *self {\n            One =&gt; 1,\n            Two =&gt; 2,\n            // ...\n        }\n    }\n}\n</code></pre>\n\n<p>A <em>newtype</em> is just a wrapper type. It consumes no extra space compared to the wrapped type, it just provides an actual new type that lets you implement methods that can restrict to valid values. It's possible to create invalid values, but only within your own code, not all client code:</p>\n\n<pre><code>struct Rank(u8);\n\nimpl Rank {\n    fn from_value(v: u8) -&gt; Result&lt;Rank, ()&gt; {\n        if v &gt;= 1 &amp;&amp; v &lt;= 14 {\n            Ok(Rank(v))\n        } else {\n            Err(())\n        }\n    }\n\n    fn value(&amp;self) -&gt; u8 {\n        self.0\n    }\n}\n</code></pre>\n\n<p>I tend to use type aliases as quick placeholders of types. While writing the above examples, I actually wrote:</p>\n\n<pre><code>type Error = ();\n</code></pre>\n\n<p>And returned a <code>Result&lt;Rank, Error&gt;</code>, but then thought that would be confusing. :-)</p>\n\n<p>The other case I use them is to shorten a larger type that I don't want to hide. This happens with types like iterators or <code>Result</code>s, which you can <a href=\"https://doc.rust-lang.org/std/io/type.Result.html\" rel=\"noreferrer\">see in the standard library</a>. Something like:</p>\n\n<pre><code>type CardResult&lt;T&gt; = Result&lt;T, Error&gt;;\n\nfn foo() -&gt; CardResult&lt;String&gt; {\n    // ..\n}\n</code></pre>\n"}], "owner": {"reputation": 828, "user_id": 2736686, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3e64d071a0d538d0b88040e4bfa22d2d?s=128&d=identicon&r=PG", "display_name": "Erik Uggeldahl", "link": "https://stackoverflow.com/users/2736686/erik-uggeldahl"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7999, "favorite_count": 3, "accepted_answer_id": 34938493, "answer_count": 1, "score": 14, "last_activity_date": 1547948130, "creation_date": 1453432772, "last_edit_date": 1453435933, "question_id": 34938429, "link": "https://stackoverflow.com/questions/34938429/does-rust-have-an-idiomatic-equivalent-to-f-typedefs", "title": "Does Rust have an idiomatic equivalent to F# typedefs?", "body": "<p>I'm re-writing existing code of mine in Rust 1.6 and I've found it very convenient in the source language to label a type by typedef. For example, in my card game I have a rank value in F# defined as:</p>\n\n<pre><code>type Rank = uint8\n</code></pre>\n"}, {"tags": ["c", "ruby", "rust", "ffi"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1453425546, "post_id": 34937161, "comment_id": 57607213, "body": "Have you seen <a href=\"http://jakegoulding.com/rust-ffi-omnibus/string_arguments/\" rel=\"nofollow noreferrer\"><i>The Rust FFI Omnibus</i></a>?"}], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 4, "last_activity_date": 1453426013, "creation_date": 1453426013, "answer_id": 34937488, "question_id": 34937161, "link": "https://stackoverflow.com/questions/34937161/cant-pass-a-string-into-my-rust-function-from-ruby/34937488#34937488", "title": "Can&#39;t pass a string into my Rust function from Ruby", "body": "<p>According to the <a href=\"https://github.com/ffi/ffi/wiki/Types\" rel=\"nofollow\">documentation</a>, <code>:string</code> represents a null-terminated string, which is <code>char *</code> in C. The <code>&amp;str</code> argument is not equivalent to that type: a <code>&amp;str</code> is a compound value, composed of a pointer and a length.</p>\n\n<p>The safest solution is to change your Rust function to accept a <code>*const c_char</code> instead. You can then use <a href=\"http://doc.rust-lang.org/stable/std/ffi/struct.CStr.html#method.from_ptr\" rel=\"nofollow\"><code>CStr::from_ptr</code></a> and <a href=\"http://doc.rust-lang.org/stable/std/ffi/struct.CStr.html#method.to_str\" rel=\"nofollow\"><code>CStr::to_str</code></a> to work with it more easily.</p>\n\n<p>Alternatively, you could define a struct in your Ruby code that contains a pointer and a length, and pass that to the Rust function. However, there's no guarantee that this struct will always match the memory layout of a slice, so to be 100% safe, you should define the equivalent struct in your Rust code (with <code>#[repr(C)]</code>), then, using the fields of this struct, call <a href=\"http://doc.rust-lang.org/stable/std/slice/fn.from_raw_parts.html\" rel=\"nofollow\"><code>slice::from_raw_parts</code></a> to construct a slice (<code>&amp;c_char</code> or <code>&amp;u8</code>), which you can then turn into a <code>&amp;str</code> with <a href=\"http://doc.rust-lang.org/stable/std/str/fn.from_utf8.html\" rel=\"nofollow\"><code>str::from_utf8</code></a>.</p>\n"}], "owner": {"reputation": 445, "user_id": 1455026, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/f2fd6c955e8cc74c7220b05b4ff36a06?s=128&d=identicon&r=PG", "display_name": "Adam Bishti", "link": "https://stackoverflow.com/users/1455026/adam-bishti"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 206, "favorite_count": 0, "accepted_answer_id": 34937488, "answer_count": 1, "score": 1, "last_activity_date": 1453426013, "creation_date": 1453423787, "question_id": 34937161, "link": "https://stackoverflow.com/questions/34937161/cant-pass-a-string-into-my-rust-function-from-ruby", "title": "Can&#39;t pass a string into my Rust function from Ruby", "body": "<p>I'm trying to call a function which accepts a string, written in Rust.</p>\n\n<p>The Rust code is then compiled to C and included in my Ruby code via the FFI gem.</p>\n\n<p>When I call the Rust function and pass a string I get nothing.</p>\n\n<p>Rust code:</p>\n\n<pre><code>#[no_mangle]\npub extern fn speak(words: &amp;str) {\n  println!(\"{}\", words);\n}\n</code></pre>\n\n<p>Ruby code:</p>\n\n<pre><code>require 'ffi'\n\nmodule Human\n  extend FFI::Library\n  ffi_lib '../target/release/libruby_and.dylib'\n  attach_function :speak, [:string], :void\nend\n\nHuman.speak(\"Hello, we are passing in an argument to our C function!!\")\n</code></pre>\n"}, {"tags": ["embedded", "rust", "rust-cargo"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1453411531, "post_id": 34934285, "comment_id": 57601979, "body": "Do you have some underlying allocator to use on your embedded device? I don&#39;t know if jemalloc supports ARM, and if not, there would have to be some allocator available."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 0, "last_activity_date": 1453412587, "last_edit_date": 1453412587, "creation_date": 1453412198, "answer_id": 34934799, "question_id": 34934285, "link": "https://stackoverflow.com/questions/34934285/use-collections-with-cargo-without-stdlib/34934799#34934799", "title": "Use collections with cargo without stdlib", "body": "<p>One possible solution is to compile it yourself. This requires having a checkout of the Rust source. I don't have a working environment to test this in, so take this suggestion with a pinch of salt. Conceptually, you would do something like this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>cd $RUST_SRC_DIR\nrustc --version --verbose | grep commit-hash # Grab the hash\ngit checkout $RUSTC_HASH\nmkdir cross-compiled-libraries\nrustc --target=arm-whatever-whatever -O src/libcollections/lib.rs \\\n      --out-dir cross-compiled-libraries\n</code></pre>\n\n<p>Repeat the last step for whatever libraries you need. A lot of this is taken from the ideas in <a href=\"http://spin.atomicobject.com/2015/02/20/rust-language-c-embedded/\" rel=\"nofollow\">Embedded Rust Right Now!</a>.</p>\n\n<p>A big concern with this solution is that libcollections requires an allocator. Generally, there is jemalloc or the system allocator. I don't know if either are available on the target you are compiling for...</p>\n\n<p>This doesn't quite get you all the way to something easy to use for Cargo, either. The stuff inside of Rust isn't actually Cargo-ified yet, either. You <em>could</em> create a new Cargo project and add something like this to the <code>Cargo.toml</code>:</p>\n\n<pre><code>[lib]\npath = \"/path/to/rust/src/libcollections/lib.rs\"\n</code></pre>\n\n<p>Which would then allow you to rely on Cargo more.</p>\n"}], "owner": {"reputation": 519, "user_id": 148082, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/df7b85d1b95d9a5d8b1b5d022a838a86?s=128&d=identicon&r=PG", "display_name": "Andreas Arnold", "link": "https://stackoverflow.com/users/148082/andreas-arnold"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 230, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1453412587, "creation_date": 1453410230, "question_id": 34934285, "link": "https://stackoverflow.com/questions/34934285/use-collections-with-cargo-without-stdlib", "title": "Use collections with cargo without stdlib", "body": "<p>I am currently trying to setup an embedded Rust project. For that it would be nice if I could use the <code>collections</code> crate (and by extension the <code>alloc</code> crate since it is required by <code>collections</code>). Is there an easy way to achieve this? I currently have the following dependencies in Cargo.toml</p>\n\n<pre><code>[build-dependencies]\ngcc = \"0.3\"\n\n[dependencies]\nrust-libcore = \"*\"\n\n[dependencies.rlibc]\ngit = \"https://github.com/hackndev/rlibc\"\nbranch = \"zinc\"\n</code></pre>\n\n<p>And use them as follows:</p>\n\n<pre><code>#![no_std]\n#![crate_type=\"staticlib\"]\n#![feature(lang_items)]\n#![feature(start)]\n\n// This is not found when building with Cargo\nextern crate collections;\n\n//#[cfg(target_os = \"none\")]\nextern crate rlibc;\n\n#[start]\npub fn main(_argc: isize, _argv: *const *const u8) -&gt; isize {\n    // or some call like this\n    core::collections::Vec::new();\n\n    0\n}\n</code></pre>\n\n<p>Is there an easy way to include the <code>collections</code> crate?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 0, "creation_date": 1453833366, "post_id": 34922579, "comment_id": 57768981, "body": "could you please link the original in Go you&#39;re trying to port? I&#39;m not familiar with it"}, {"owner": {"reputation": 716, "user_id": 1032294, "user_type": "registered", "accept_rate": 57, "profile_image": "https://i.stack.imgur.com/7em4L.jpg?s=128&g=1", "display_name": "Wang Ruiqi", "link": "https://stackoverflow.com/users/1032294/wang-ruiqi"}, "reply_to_user": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 0, "creation_date": 1453864580, "post_id": 34922579, "comment_id": 57782703, "body": "Hi, Go code is in <a href=\"https://github.com/golang/go/blob/master/src/text/template/parse/node.go\" rel=\"nofollow noreferrer\">github.com/golang/go/blob/master/src/text/template/parse/&hellip;</a>, the struct <code>ListNode</code> has a field <code>Nodes [] Node</code> , it can contains all the node structs that implement <code>interface Node</code>, and you can get the concrete type with type assertion <a href=\"http://blog.denevell.org/golang-interface-type-assertions-switch.html\" rel=\"nofollow noreferrer\">blog.denevell.org/golang-interface-type-assertions-switch.ht&zwnj;&#8203;ml</a>,"}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 0, "creation_date": 1453883052, "post_id": 34922579, "comment_id": 57789591, "body": "In Rust I would go with the <code>enum</code> approach I gave in the answer, as a starting point. <a href=\"http://stackoverflow.com/questions/14426366/what-is-an-idiomatic-way-of-representing-enums-in-golang\">Go does not really have enums</a>, so they insert a <code>NodeType</code> to be able to tell if a node is a <code>PipeNode</code> or an <code>ActionNode</code>. You don&#39;t need that in Rust. Also Go <a href=\"https://golang.org/doc/faq#generics\" rel=\"nofollow noreferrer\">does not have generics and uses interfaces and type switches for most of their use cases</a>. I&#39;d say to give it a try with enum and come back to ask questions if you&#39;re stuck"}], "answers": [{"comments": [{"owner": {"reputation": 716, "user_id": 1032294, "user_type": "registered", "accept_rate": 57, "profile_image": "https://i.stack.imgur.com/7em4L.jpg?s=128&g=1", "display_name": "Wang Ruiqi", "link": "https://stackoverflow.com/users/1032294/wang-ruiqi"}, "edited": false, "score": 0, "creation_date": 1453733017, "post_id": 34924912, "comment_id": 57718515, "body": "I edited my post, thanks to you , I find another solution."}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "reply_to_user": {"reputation": 716, "user_id": 1032294, "user_type": "registered", "accept_rate": 57, "profile_image": "https://i.stack.imgur.com/7em4L.jpg?s=128&g=1", "display_name": "Wang Ruiqi", "link": "https://stackoverflow.com/users/1032294/wang-ruiqi"}, "edited": false, "score": 0, "creation_date": 1453733841, "post_id": 34924912, "comment_id": 57719137, "body": "@WangRuiqi it&#39;s a very dangerous solution (transmute is unsafe for a reason)... But just out of curiosity, why do you want to return a trait object <code>Box&lt;Node&gt;</code> instead of simply <code>Box&lt;Self&gt;</code> and avoid all downcasting, like <a href=\"http://is.gd/IoZT8l\" rel=\"nofollow noreferrer\">in this example</a>?"}, {"owner": {"reputation": 716, "user_id": 1032294, "user_type": "registered", "accept_rate": 57, "profile_image": "https://i.stack.imgur.com/7em4L.jpg?s=128&g=1", "display_name": "Wang Ruiqi", "link": "https://stackoverflow.com/users/1032294/wang-ruiqi"}, "edited": false, "score": 0, "creation_date": 1453737156, "post_id": 34924912, "comment_id": 57721458, "body": "Actually I need another struct <code>ListNode</code> which contains a vector of <code>TextNode</code>, <code>NumberNode</code>, <code>ActionNode</code>, etc. If return <code>Box&lt;Self&gt;</code>,  I have no idea to implement the <code>ListNode</code>"}, {"owner": {"reputation": 716, "user_id": 1032294, "user_type": "registered", "accept_rate": 57, "profile_image": "https://i.stack.imgur.com/7em4L.jpg?s=128&g=1", "display_name": "Wang Ruiqi", "link": "https://stackoverflow.com/users/1032294/wang-ruiqi"}, "edited": false, "score": 0, "creation_date": 1453737665, "post_id": 34924912, "comment_id": 57721840, "body": "Why it is danger as I already know these two type could be scalar casted?"}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "reply_to_user": {"reputation": 716, "user_id": 1032294, "user_type": "registered", "accept_rate": 57, "profile_image": "https://i.stack.imgur.com/7em4L.jpg?s=128&g=1", "display_name": "Wang Ruiqi", "link": "https://stackoverflow.com/users/1032294/wang-ruiqi"}, "edited": false, "score": 0, "creation_date": 1453738300, "post_id": 34924912, "comment_id": 57722217, "body": "@WangRuiqi I suggest you have a read to the <a href=\"https://doc.rust-lang.org/nomicon/transmutes.html\" rel=\"nofollow noreferrer\">transmutes section of the Rustnomicon</a>"}, {"owner": {"reputation": 716, "user_id": 1032294, "user_type": "registered", "accept_rate": 57, "profile_image": "https://i.stack.imgur.com/7em4L.jpg?s=128&g=1", "display_name": "Wang Ruiqi", "link": "https://stackoverflow.com/users/1032294/wang-ruiqi"}, "edited": false, "score": 0, "creation_date": 1453776799, "post_id": 34924912, "comment_id": 57740294, "body": "Thank you\uff0cI made a mistake in my code and I thought it work so I post a sample without check. I deleted my answer."}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "reply_to_user": {"reputation": 716, "user_id": 1032294, "user_type": "registered", "accept_rate": 57, "profile_image": "https://i.stack.imgur.com/7em4L.jpg?s=128&g=1", "display_name": "Wang Ruiqi", "link": "https://stackoverflow.com/users/1032294/wang-ruiqi"}, "edited": false, "score": 0, "creation_date": 1453824179, "post_id": 34924912, "comment_id": 57763247, "body": "@WangRuiqi since my original answer seems not to address your original need, I tried giving you a couple of alternatives to using Any"}, {"owner": {"reputation": 716, "user_id": 1032294, "user_type": "registered", "accept_rate": 57, "profile_image": "https://i.stack.imgur.com/7em4L.jpg?s=128&g=1", "display_name": "Wang Ruiqi", "link": "https://stackoverflow.com/users/1032294/wang-ruiqi"}, "edited": false, "score": 0, "creation_date": 1453825737, "post_id": 34924912, "comment_id": 57764293, "body": "Hi\uff0cThis disscusion <a href=\"https://users.rust-lang.org/t/trait-objects-with-associated-types/746/21\" rel=\"nofollow noreferrer\">users.rust-lang.org/t/trait-objects-with-associated-types/74&zwnj;&#8203;6/&hellip;</a> seem to address my need. <a href=\"https://play.rust-lang.org/?gist=f7137355d1e6eaf6aed9&amp;version=stable\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 716, "user_id": 1032294, "user_type": "registered", "accept_rate": 57, "profile_image": "https://i.stack.imgur.com/7em4L.jpg?s=128&g=1", "display_name": "Wang Ruiqi", "link": "https://stackoverflow.com/users/1032294/wang-ruiqi"}, "edited": false, "score": 0, "creation_date": 1453826119, "post_id": 34924912, "comment_id": 57764563, "body": "Your solution is good, too! I edit my question for more detail about my nedd."}], "tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": true, "score": 7, "last_activity_date": 1453824139, "last_edit_date": 1453824139, "creation_date": 1453382236, "answer_id": 34924912, "question_id": 34922579, "link": "https://stackoverflow.com/questions/34922579/how-to-take-ownership-of-anydowncast-ref-from-trait-object/34924912#34924912", "title": "How to take ownership of Any:downcast_ref from trait object?", "body": "<p>If you control <code>trait Node</code> you can have it return a <code>Box&lt;Any&gt;</code> and use the <a href=\"https://doc.rust-lang.org/alloc/boxed/struct.Box.html#method.downcast\" rel=\"nofollow\">Box::downcast</a> method</p>\n\n<p>It would look like this:</p>\n\n<pre><code>use std::any::Any;\ntrait Node {\n    fn gen(&amp;self) -&gt; Box&lt;Any&gt;; // downcast works on Box&lt;Any&gt;\n}\n\nstruct TextNode;\n\nimpl Node for TextNode {\n    fn gen(&amp;self) -&gt; Box&lt;Any&gt; {\n        Box::new(TextNode)\n    }\n}\n\nfn main() {\n    let mut v: Vec&lt;TextNode&gt; = Vec::new();\n    let node = TextNode.gen();\n\n    if let Ok(n) = node.downcast::&lt;TextNode&gt;() {\n        v.push(*n);\n    }\n}\n</code></pre>\n\n<p>Generally speaking, you should not jump to using <code>Any</code>. I know it looks familiar when coming from a language with subtype polymorphism and want to recreate a hierarchy of types with some root type (like in this case: you're trying to recreate the <code>TextNode is a Node</code> relationship and create a <code>Vec</code> of Nodes). I did it too and so did many others: I bet the number of SO questions on <code>Any</code> outnumbers the times <code>Any</code> is actually used on crates.io. </p>\n\n<p>While <code>Any</code> does have its uses, in Rust it has alternatives.\nIn case you have not looked at them, I wanted to make sure you considered doing this with:</p>\n\n<h2>enums</h2>\n\n<p>Given different Node types you can express the \"a Node is any of these types\" relationship with an enum:</p>\n\n<pre><code>struct TextNode;\nstruct XmlNode;\nstruct HtmlNode;\n\nenum Node {\n    Text(TextNode),\n    Xml(XmlNode),\n    Html(HtmlNode),\n}\n</code></pre>\n\n<p>With that you can put them all in one <code>Vec</code> and do different things depending on the variant, without downcasting:</p>\n\n<pre><code>let v: Vec&lt;Node&gt; = vec![\n    Node::Text(TextNode),\n    Node::Xml(XmlNode),\n    Node::Html(HtmlNode)];\n\nfor n in &amp;v {\n    match n {\n        &amp;Node::Text(_) =&gt; println!(\"TextNode\"),\n        &amp;Node::Xml(_) =&gt; println!(\"XmlNode\"),\n        &amp;Node::Html(_) =&gt; println!(\"HtmlNode\"),\n    }\n}\n</code></pre>\n\n<p><a href=\"http://is.gd/aeBWBQ\" rel=\"nofollow\">playground</a></p>\n\n<p>adding a variant means potentially changing your code in many places: the enum itself and all the functions that do something with the enum (to add the logic for the new variant). But then again, with <code>Any</code> it's mostly the same, all those functions might need to add the downcast to the new variant.</p>\n\n<h2>Trait objects (not Any)</h2>\n\n<p>You can try putting the actions you'd want to perform on the various types of nodes in the trait, so you don't need to downcast, but just call methods on the trait object.\nThis is essentially what you were doing, except putting the method on the Node trait instead of downcasting.</p>\n\n<p><a href=\"http://is.gd/KnoYN2\" rel=\"nofollow\">playground</a></p>\n"}], "owner": {"reputation": 716, "user_id": 1032294, "user_type": "registered", "accept_rate": 57, "profile_image": "https://i.stack.imgur.com/7em4L.jpg?s=128&g=1", "display_name": "Wang Ruiqi", "link": "https://stackoverflow.com/users/1032294/wang-ruiqi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1457, "favorite_count": 1, "accepted_answer_id": 34924912, "answer_count": 1, "score": 3, "last_activity_date": 1453828477, "creation_date": 1453375662, "last_edit_date": 1453828477, "question_id": 34922579, "link": "https://stackoverflow.com/questions/34922579/how-to-take-ownership-of-anydowncast-ref-from-trait-object", "title": "How to take ownership of Any:downcast_ref from trait object?", "body": "<p>I've met a conflict with Rust's ownership rules and a trait object downcast. This is a sample:</p>\n\n<pre><code>use std::any::Any;\ntrait Node{\n    fn gen(&amp;self) -&gt; Box&lt;Node&gt;;\n}\n\nstruct TextNode;\nimpl Node for TextNode{\n    fn gen(&amp;self) -&gt; Box&lt;Node&gt;{\n        Box::new(TextNode)\n    }\n}\n\nfn main(){\n    let mut v: Vec&lt;TextNode&gt; = Vec::new();\n    let node = TextNode.gen();\n    let foo = &amp;node as &amp;Any;\n    match foo.downcast_ref::&lt;TextNode&gt;(){\n        Some(n) =&gt; {\n            v.push(*n);\n        },\n        None =&gt; ()\n    };\n\n}\n</code></pre>\n\n<p>The <code>TextNode::gen</code> method has to return <code>Box&lt;Node&gt;</code> instead of <code>Box&lt;TextNode&gt;</code>, so I have to downcast it to <code>Box&lt;TextNode&gt;</code>.</p>\n\n<p><code>Any::downcast_ref</code>'s return value is <code>Option&lt;&amp;T&gt;</code>, so I can't take ownership of the downcast result and push it to <code>v</code>.</p>\n\n<p>====edit=====</p>\n\n<p>As I am not good at English, my question is vague.</p>\n\n<p><a href=\"https://github.com/shahuwang/Rustparse/blob/master/src/parse/node.rs\" rel=\"nofollow\">I am implementing</a> (copying may be more precise) the template parser in Go standard library.</p>\n\n<p>What I really need is a vector, <code>Vec&lt;Box&lt;Node&gt;&gt;</code> or <code>Vec&lt;Box&lt;Any&gt;&gt;</code>, which can contain <code>TextNode</code>, <code>NumberNode</code>, <code>ActionNode</code>, any type of node that implements the trait <code>Node</code> can be pushed into it.</p>\n\n<p>Every node type needs to implement the <code>copy</code> method, return <code>Box&lt;Any&gt;</code>, and then downcasting to the concrete type is OK. But to copy <code>Vec&lt;Box&lt;Any&gt;&gt;</code>, as you don't know the concrete type of every element, you have to check one by one, that is really inefficient.</p>\n\n<p>If the copy method returns <code>Box&lt;Node&gt;</code>, then copying <code>Vec&lt;Box&lt;Node&gt;&gt;</code> is simple. But it seems that there is no way to get the concrete type from trait object.</p>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1453390819, "post_id": 34914572, "comment_id": 57589296, "body": "Why are you creating a new Nickel server inside of what looks like a Nickel request handler? I would only expect there to be one server at a time."}, {"owner": {"reputation": 59, "user_id": 5819039, "user_type": "registered", "accept_rate": 20, "profile_image": "https://www.gravatar.com/avatar/2feaa39fd017d1bcb61dad80ef5e1430?s=128&d=identicon&r=PG&f=1", "display_name": "kenzi", "link": "https://stackoverflow.com/users/5819039/kenzi"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1453430860, "post_id": 34914572, "comment_id": 57608617, "body": "If I don&#39;t create a new Nickel server, I won&#39;t call function server.post(). Do you how to solve problem?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1453432420, "post_id": 34914572, "comment_id": 57609005, "body": "You haven&#39;t provided an <a href=\"/help/mcve\">MCVE</a> (emphasis first on the <b>C</b> and then the <b>M</b>), so I cannot compile your code to give any useful feedback. I&#39;m pretty sure this code isn&#39;t using Nickel correctly, but I cannot guess why the line you&#39;ve highlighted (<code>req.origin.read_to_string(&amp;mut form_data).unwrap()</code>) would cause the error you&#39;ve stated."}, {"owner": {"reputation": 59, "user_id": 5819039, "user_type": "registered", "accept_rate": 20, "profile_image": "https://www.gravatar.com/avatar/2feaa39fd017d1bcb61dad80ef5e1430?s=128&d=identicon&r=PG&f=1", "display_name": "kenzi", "link": "https://stackoverflow.com/users/5819039/kenzi"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1453439633, "post_id": 34914572, "comment_id": 57611104, "body": "I just need save the user-submitted HTTP data into Redis with let _: () = conn.set(&quot;contents&quot;, form_data).unwrap();. it doesn&#39;t work."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1453491229, "post_id": 34914572, "comment_id": 57640615, "body": "This was <a href=\"https://www.reddit.com/r/rust/comments/424aqs/how_to_insert_data_submitted_from_an_html_form/\" rel=\"nofollow noreferrer\">cross-posted to Reddit</a>"}, {"owner": {"reputation": 59, "user_id": 5819039, "user_type": "registered", "accept_rate": 20, "profile_image": "https://www.gravatar.com/avatar/2feaa39fd017d1bcb61dad80ef5e1430?s=128&d=identicon&r=PG&f=1", "display_name": "kenzi", "link": "https://stackoverflow.com/users/5819039/kenzi"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1453688390, "post_id": 34914572, "comment_id": 57697263, "body": "It&#39;s me. I post it  to Reddit. So, can you help me solve problem?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1453734306, "post_id": 34914572, "comment_id": 57719497, "body": "Even though you updated your code, it still doesn&#39;t reproduce the problem you say it does. There are unknown imports (<code>nickel_redis </code>, <code>url</code>) and other errors (<code>the trait `core::marker::Sync` is not implemented for the type `core::cell::UnsafeCell&lt;redis::connection::ActualConnection&gt;&zwnj;&#8203;`</code>). It&#39;s also a good idea to include the versions of libraries so that we can use the same ones. If you are unable to produce a minimal case that <b>reproduces your error</b>, it will be very hard for <i>anyone</i> to help you."}], "answers": [{"tags": [], "owner": {"reputation": 1836, "user_id": 1169433, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/205b286166bd3b917b007799ebf3f9d4?s=128&d=identicon&r=PG", "display_name": "Matthieu Wipliez", "link": "https://stackoverflow.com/users/1169433/matthieu-wipliez"}, "is_accepted": false, "score": 0, "last_activity_date": 1455807424, "last_edit_date": 1455807424, "creation_date": 1455792282, "answer_id": 35479215, "question_id": 34914572, "link": "https://stackoverflow.com/questions/34914572/how-to-insert-data-submitted-from-an-html-form-into-a-redis-database/35479215#35479215", "title": "How to insert data submitted from an HTML form into a Redis database?", "body": "<p>The problem I see in your code is that you're trying to register a handler for a route (POST <code>/confirmation</code>) inside the handler that gets called when the <code>/test-save-db</code> route is matched. That doesn't seem correct.</p>\n\n<p>To make your code and intent clearer, I suggest you use the <code>middleware!</code> macro, which I find to be the simplest way to describe routes in Nickel. At least this has been my experience since starting to use the framework yesterday :-)</p>\n\n<p>So your example might be rewritten as follows:</p>\n\n<pre><code>fn main() {\n    let client = Client::open(\"redis://127.0.0.1/\").unwrap();\n    let mut server = Nickel::new();\n\n    server.get(\"/test-save-db\", middleware! { |req, res|\n        // do something with the request and send a response\n    });\n\n    server.listen(\"127.0.0.12:8080\");\n}\n</code></pre>\n\n<p>If you need multiple handlers sharing the same client, you will need to use <code>std::sync::Arc</code> to have thread safe shared state, and clone it for each handler (it will only clone the <code>Arc</code>, not the client).</p>\n"}], "owner": {"reputation": 59, "user_id": 5819039, "user_type": "registered", "accept_rate": 20, "profile_image": "https://www.gravatar.com/avatar/2feaa39fd017d1bcb61dad80ef5e1430?s=128&d=identicon&r=PG&f=1", "display_name": "kenzi", "link": "https://stackoverflow.com/users/5819039/kenzi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 605, "favorite_count": 0, "answer_count": 1, "score": -2, "last_activity_date": 1455807424, "creation_date": 1453344738, "last_edit_date": 1453478490, "question_id": 34914572, "link": "https://stackoverflow.com/questions/34914572/how-to-insert-data-submitted-from-an-html-form-into-a-redis-database", "title": "How to insert data submitted from an HTML form into a Redis database?", "body": "<p>I am trying to save the user-submitted HTTP data into Redis. This is my code using Nickel:</p>\n\n<pre><code>#[macro_use]\nextern crate nickel;\nextern crate redis;\nextern crate hyper;\n\nuse redis::{Client,Parser, Commands, Connection, RedisResult};\nuse nickel::{Nickel, Request, Response, HttpRouter, MiddlewareResult,Middleware, MediaType,JsonBody};\nuse std::collections::HashMap;\nuse nickel::status::StatusCode;\nuse nickel_redis::{RedisMiddleware, RedisRequestExtensions};\nuse hyper::Url;\nuse url::form_urlencoded;\nuse std::sync::{Arc, Mutex};\nuse std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn save_db&lt;'a&gt;(req: &amp;mut Request, res: Response&lt;'a&gt;) -&gt; MiddlewareResult&lt;'a&gt; {\n    let mut server = Nickel::new();\n    /* FIXME: connect redis*/ \n    let client = Client::open(\"redis://127.0.0.1/\").unwrap();\n    let conn = client.get_connection().unwrap();\n\n    server.post(\"/confirmation\", middleware!{|req, res|\n        let mut form_data = String::new();\n        req.origin.read_to_string(&amp;mut form_data).unwrap();\n        let _: () = conn.set(\"contents\", form_data).unwrap();\n        println!(\"{}\", form_data);\n\n        let mut data = HashMap::&lt;&amp;str, String&gt;::new();\n        data.insert(\"content\", form_data);\n        data.insert(\"page_title\", \"Save blog data\".to_string());\n        return res.render(\"app/views/blog/save.tpl\", &amp;data);\n    });\n}\n\nfn main() {\n    let mut server = Nickel::new();\n\n    // start using router\n    let mut router = Nickel::router();\n    let client = Client::open(\"redis://127.0.0.1/\").unwrap();\n    let conn = client.get_connection().unwrap();\n\n    router.get(\"/test-save-db\", save_db);\n\n    server.utilize(router);\n    server.listen(\"127.0.0.12:8080\");\n}\n</code></pre>\n\n<p><strong>Save.tpl</strong></p>\n\n<pre><code>  &lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n    &lt;head lang=\"en\"&gt;\n        &lt;meta charset=\"UTF-8\"&gt;\n        &lt;title&gt;{{ page_title }}&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;h1&gt;Saved new blog.&lt;/h1&gt;\n    &lt;h2&gt;Author {{form_data}}&lt;/h2&gt;\n    &lt;h2&gt;Content {{content}}&lt;/h2&gt;\n    &lt;form&gt;\n    First name:&lt;br&gt;\n    &lt;input type=\"text\" name=\"firstname\" &gt;\n    &lt;br&gt;\n    &lt;button type=\"submit\" formenctype=\"application/x-www-form-urlencoded\" formaction=\"/test-save-db\" formmethod=\"post\"&gt;SEND&lt;/button&gt;\n    &lt;/form&gt; \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>But I get this error</p>\n\n<blockquote>\n  <p>error: cannot infer an appropriate lifetime for lifetime parameter <code>'b</code> due to conflicting requirements [E0495](req.origin.read_to_string(&amp;mut form_data).unwrap();)</p>\n</blockquote>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 10, "last_activity_date": 1453340958, "creation_date": 1453340958, "answer_id": 34914006, "question_id": 34913484, "link": "https://stackoverflow.com/questions/34913484/subtraction-not-implemented-for-f32/34914006#34914006", "title": "Subtraction not implemented for f32?", "body": "<p>Rust is stricter than some other languages when it comes to manipulating primitive types. Most math operators require the same type on both sides (with the exception of bit shifts, which expect a <code>usize</code> as the right-hand side operand). Rust will not automatically cast values from one primitive numeric type to another: you must insert an explicit cast in the code. This code demonstrates the situation:</p>\n\n<pre><code>fn main(){\n    let a: i32 = 2;\n    let b: i8 = 3;\n    println!(\"{}\", a + b);\n}\n</code></pre>\n\n<p>It fails to compile with the following errors:</p>\n\n<pre><code>&lt;anon&gt;:4:24: 4:25 error: mismatched types:\n expected `i32`,\n    found `i8`\n(expected i32,\n    found i8) [E0308]\n&lt;anon&gt;:4     println!(\"{}\", a + b);\n                                ^\n&lt;std macros&gt;:2:25: 2:56 note: in this expansion of format_args!\n&lt;std macros&gt;:3:1: 3:54 note: in this expansion of print! (defined in &lt;std macros&gt;)\n&lt;anon&gt;:4:5: 4:27 note: in this expansion of println! (defined in &lt;std macros&gt;)\n&lt;anon&gt;:4:24: 4:25 help: see the detailed explanation for E0308\n&lt;anon&gt;:4:20: 4:25 error: the trait `core::ops::Add&lt;i8&gt;` is not implemented for the type `i32` [E0277]\n&lt;anon&gt;:4     println!(\"{}\", a + b);\n                            ^~~~~\n&lt;std macros&gt;:2:25: 2:56 note: in this expansion of format_args!\n&lt;std macros&gt;:3:1: 3:54 note: in this expansion of print! (defined in &lt;std macros&gt;)\n&lt;anon&gt;:4:5: 4:27 note: in this expansion of println! (defined in &lt;std macros&gt;)\n&lt;anon&gt;:4:20: 4:25 help: see the detailed explanation for E0277\n</code></pre>\n\n<p>Your situation is similar, but it has the particularity that you're mixing integers and floats. In Rust, integer and float literals are assigned a type based on context. That's why I could set <code>a</code> to <code>2</code> and <code>b</code> to <code>3</code> above: <code>2</code> is not always an <code>i32</code>, but it is implicitly typed as <code>i32</code> if the context requires it.</p>\n\n<p>In your case, you're trying to subtract an integer from an <code>f32</code>. The error message mentions <code>Sub&lt;_&gt;</code>; that <code>_</code> represents the type of the <code>4</code> literal that the compiler wasn't able to figure out.</p>\n\n<p>The solution is simply to use float literals instead of integer literals:</p>\n\n<pre><code>use std::io::*;\n\nfn main(){\n    let reader = stdin();\n    let nums = reader.lock()\n        .lines().next().unwrap().unwrap()\n        .split_whitespace()\n        .map(|s| s.parse::&lt;i32&gt;().unwrap())\n        .map(|s| s as f32)\n        .map(|s| (s - 4.0) / 2.0)\n        .map(|s| s as i32)\n        .collect::&lt;Vec&lt;_&gt;&gt;();\n}\n</code></pre>\n"}], "owner": {"reputation": 147, "user_id": 5818746, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f98e59d175ae95cd3e0b328637b9bd41?s=128&d=identicon&r=PG&f=1", "display_name": "lochnesscookie", "link": "https://stackoverflow.com/users/5818746/lochnesscookie"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1295, "favorite_count": 0, "accepted_answer_id": 34914006, "answer_count": 1, "score": 5, "last_activity_date": 1453340958, "creation_date": 1453337280, "last_edit_date": 1453340329, "question_id": 34913484, "link": "https://stackoverflow.com/questions/34913484/subtraction-not-implemented-for-f32", "title": "Subtraction not implemented for f32?", "body": "<p>When compiling the following code:</p>\n\n<pre><code>use std::io::*;\n\nfn main(){\n    let reader = stdin();\n    let nums = reader.lock()\n        .lines().next().unwrap().unwrap()\n        .split_whitespace()\n        .map(|s| s.parse::&lt;i32&gt;().unwrap())\n        .map(|s| s as f32)\n        .map(|s| (s - 4) / 2)\n        .map(|s| s as i32)\n        .collect();\n}\n</code></pre>\n\n<p>I get an error saying:</p>\n\n<blockquote>\n  <p>the trait <code>core::ops::Sub&lt;_&gt;</code> is not implemented for the type <code>f32</code></p>\n</blockquote>\n\n<p>Why is this?</p>\n"}]