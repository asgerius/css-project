[{"tags": ["haskell"], "comments": [{"owner": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "edited": false, "score": 1, "creation_date": 1501105888, "post_id": 45338043, "comment_id": 77638051, "body": "What do you mean with <i>remove</i>?"}, {"owner": {"reputation": 28376, "user_id": 5743988, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/IeSSM.jpg?s=128&g=1", "display_name": "4castle", "link": "https://stackoverflow.com/users/5743988/4castle"}, "edited": false, "score": 2, "creation_date": 1501106025, "post_id": 45338043, "comment_id": 77638098, "body": "I think you want <code>newans = [first, second]</code>"}, {"owner": {"reputation": 36141, "user_id": 4354477, "user_type": "registered", "accept_rate": 52, "profile_image": "https://i.stack.imgur.com/SuxtS.gif?s=128&g=1", "display_name": "ForceBru", "link": "https://stackoverflow.com/users/4354477/forcebru"}, "edited": false, "score": 1, "creation_date": 1501106042, "post_id": 45338043, "comment_id": 77638102, "body": "<code>!!</code> is just an index operator: <code>[1,2,3]!!0 == 1</code>."}, {"owner": {"reputation": 15, "user_id": 7112108, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/f7be24c5e0dc4a50d0cc300321d467f6?s=128&d=identicon&r=PG&f=1", "display_name": "user7112108", "link": "https://stackoverflow.com/users/7112108/user7112108"}, "reply_to_user": {"reputation": 28376, "user_id": 5743988, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/IeSSM.jpg?s=128&g=1", "display_name": "4castle", "link": "https://stackoverflow.com/users/5743988/4castle"}, "edited": false, "score": 0, "creation_date": 1501106607, "post_id": 45338043, "comment_id": 77638355, "body": "@4castle thanks your code worked for what I wanted to do."}], "answers": [{"tags": [], "owner": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "is_accepted": false, "score": 2, "last_activity_date": 1501106060, "creation_date": 1501106060, "answer_id": 45338075, "question_id": 45338043, "link": "https://stackoverflow.com/questions/45338043/concatenate-two-integers-in-haskell/45338075#45338075", "title": "Concatenate two integers in haskell", "body": "<p>You can not <em>remove</em> elements from a list: Haskell is declarative meaning once you construct a list <code>a</code>, <code>a</code> will always work with the <em>same</em> list.</p>\n\n<p>You can however construct a <em>new</em> list without the first two elements, and create a new list with the first two elements. For example:</p>\n\n<pre><code>get_remove_2 :: [a] -&gt; ([a],[a])\nget_remove_2 (a:b:cs) = ([a,b],cs)\n</code></pre>\n\n<p>We thus construct a <em>new</em> list with the first two elements with the <code>[a,b]</code> expression.</p>\n\n<p>This function will take as input a list <code>[a]</code> and return a 2-tuple with as first element a list with two elements: the first two elements of the original list, and as second element the list where the first two elements are not present.</p>\n\n<p>Note that this function will only work if the given list contains <em>at least</em> two elements. Otherwise it will error.</p>\n"}], "owner": {"reputation": 15, "user_id": 7112108, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/f7be24c5e0dc4a50d0cc300321d467f6?s=128&d=identicon&r=PG&f=1", "display_name": "user7112108", "link": "https://stackoverflow.com/users/7112108/user7112108"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 427, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1501106060, "creation_date": 1501105848, "last_edit_date": 1501105938, "question_id": 45338043, "link": "https://stackoverflow.com/questions/45338043/concatenate-two-integers-in-haskell", "title": "Concatenate two integers in haskell", "body": "<p>Hey guys I am having a problem with my code. The code below supposed to remove the first 2 in the list and then concatenate them.So the result answer would be 1,2.</p>\n\n<pre><code>first = [1,2,4,5,6,7] !! 0\nsecond = [1,2,4,5,6,7] !! 1\nnewans = first ++ second\n</code></pre>\n"}, {"tags": ["haskell"], "answers": [{"tags": [], "owner": {"reputation": 34086, "user_id": 787480, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/91cDR.png?s=128&g=1", "display_name": "Sneftel", "link": "https://stackoverflow.com/users/787480/sneftel"}, "is_accepted": false, "score": 6, "last_activity_date": 1501139616, "last_edit_date": 1501139616, "creation_date": 1501096727, "answer_id": 45335686, "question_id": 45335599, "link": "https://stackoverflow.com/questions/45335599/in-which-file-would-i-find-the-definition-of/45335686#45335686", "title": "in which file would I find the definition of (-&gt;)", "body": "<p><code>-&gt;</code> is a keyword, not an infix-style function. It is not defined in the Haskell base libraries, and could not be.</p>\n\n<p>(EDIT: But as frasertweedale and Rein Henrichs noted, it's given special treatment by the compiler so that <code>(-&gt;)</code> can be treated as a regular type constructor.)</p>\n"}, {"comments": [{"owner": {"reputation": 34086, "user_id": 787480, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/91cDR.png?s=128&g=1", "display_name": "Sneftel", "link": "https://stackoverflow.com/users/787480/sneftel"}, "edited": false, "score": 0, "creation_date": 1501102392, "post_id": 45336295, "comment_id": 77636407, "body": "That&#39;s the compiler source, not the runtime. -&gt; is most certainly a keyword; see <a href=\"https://wiki.haskell.org/Keywords#-.3E\" rel=\"nofollow noreferrer\">wiki.haskell.org/Keywords#-.3E</a>"}, {"owner": {"reputation": 14582, "user_id": 2225384, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f30b04ed4d0b3fc4bc791a28815f34ca?s=128&d=identicon&r=PG", "display_name": "Rein Henrichs", "link": "https://stackoverflow.com/users/2225384/rein-henrichs"}, "edited": false, "score": 3, "creation_date": 1501104090, "post_id": 45336295, "comment_id": 77637324, "body": "<code>-&gt;</code> is a keyword with special handling in type declarations to make it usable as if it were an infix type constructor. You are both right. Or both wrong. Depending on how you want to look at it."}], "tags": [], "owner": {"reputation": 178, "user_id": 5180224, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3ccce31bdd8dd57072e3707347db3758?s=128&d=identicon&r=PG", "display_name": "fumieval", "link": "https://stackoverflow.com/users/5180224/fumieval"}, "is_accepted": false, "score": 1, "last_activity_date": 1501099786, "last_edit_date": 1501099786, "creation_date": 1501099026, "answer_id": 45336295, "question_id": 45335599, "link": "https://stackoverflow.com/questions/45335599/in-which-file-would-i-find-the-definition-of/45336295#45336295", "title": "in which file would I find the definition of (-&gt;)", "body": "<p><code>(-&gt;)</code> is not a keyword but an infix-style function (as you can pass it as a parameter and can be partially applied), but because of its importance, it is treated by the compiler specially: <a href=\"https://github.com/ghc/ghc/blob/75bf11c037d9e82f95ac9779bfd2b1432835bd76/compiler/types/TyCoRep.hs#L287\" rel=\"nofollow noreferrer\">https://github.com/ghc/ghc/blob/75bf11c037d9e82f95ac9779bfd2b1432835bd76/compiler/types/TyCoRep.hs#L287</a></p>\n"}, {"comments": [{"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 3, "creation_date": 1501124553, "post_id": 45339997, "comment_id": 77643003, "body": "<code>-&gt;</code> is still pretty deeply special magic. If you ask GHCi <code>:i (-&gt;)</code>, it reports &quot;Defined in <code>GHC.Prim</code>&quot;, but if you ask <code>:i (GHC.Prim.-&gt;)</code>, it says &quot;Not in scope: <code>GHC.Prim.-&gt;</code>&quot;. Yes, it&#39;s a type constructor, but it&#39;s not <i>just</i> a type constructor. Two major aspects of its weirdness: 1. With <code>RankNTypes</code>, it can be applied to a quantified type. 2. With <code>GADTs</code> or <code>GADTSyntax</code>, the type being defined must appear at the end of the last arrow in the type of each constructor."}], "tags": [], "owner": {"reputation": 4773, "user_id": 4148211, "user_type": "registered", "accept_rate": 55, "profile_image": "https://i.stack.imgur.com/DiKJf.jpg?s=128&g=1", "display_name": "frasertweedale", "link": "https://stackoverflow.com/users/4148211/frasertweedale"}, "is_accepted": false, "score": 4, "last_activity_date": 1501120006, "creation_date": 1501120006, "answer_id": 45339997, "question_id": 45335599, "link": "https://stackoverflow.com/questions/45335599/in-which-file-would-i-find-the-definition-of/45339997#45339997", "title": "in which file would I find the definition of (-&gt;)", "body": "<p><code>(-&gt;)</code>, within the Haskell language itself, is <strong>not a keyword</strong> but\na <em>type constructor</em>.  To wit:</p>\n\n<pre><code>\u03bb&gt; :i (-&gt;)\ndata (-&gt;) t1 t2     -- Defined in \u2018GHC.Prim\u2019\ninfixr 0 `(-&gt;)`\ninstance Monad ((-&gt;) r) -- Defined in \u2018GHC.Base\u2019\ninstance Functor ((-&gt;) r) -- Defined in \u2018GHC.Base\u2019\ninstance Applicative ((-&gt;) a) -- Defined in \u2018GHC.Base\u2019\ninstance Monoid b =&gt; Monoid (a -&gt; b) -- Defined in \u2018GHC.Base\u2019\n</code></pre>\n\n<p>It is just an infix type constructor, and you can use it just\nlike any other type constructor.</p>\n\n<p>The question of where it is defined is a bit trickier.\nIn the source code for <code>GHC.Base</code> you will find the following\ncomment:</p>\n\n<blockquote>\n<pre><code>GHC.Prim    Has no implementation.  It defines built-in things, and\n            by importing it you bring them into scope.\n            The source file is GHC.Prim.hi-boot, which is just\n            copied to make GHC.Prim.hi\n</code></pre>\n</blockquote>\n\n<p>GHC's build process directly produces an interface file exposing the behaviour associated with <code>(-&gt;)</code>.</p>\n"}], "owner": {"reputation": 810, "user_id": 223689, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/72513b978e46e0d0db13ec5ede02108b?s=128&d=identicon&r=PG", "display_name": "Paul Spencer", "link": "https://stackoverflow.com/users/223689/paul-spencer"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 116, "favorite_count": 0, "answer_count": 3, "score": 1, "last_activity_date": 1501139616, "creation_date": 1501096427, "question_id": 45335599, "link": "https://stackoverflow.com/questions/45335599/in-which-file-would-i-find-the-definition-of", "title": "in which file would I find the definition of (-&gt;)", "body": "<p>in which file would I find the definition of (->)</p>\n\n<p>My assumption is that this is defined somewhere in GHC.something, but it is tricky to search for.</p>\n"}, {"tags": ["haskell", "reflection", "monads", "continuations", "free-monad"], "comments": [{"owner": {"reputation": 3128, "user_id": 3040129, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/TcwLC.png?s=128&g=1", "display_name": "illabout", "link": "https://stackoverflow.com/users/3040129/illabout"}, "edited": false, "score": 0, "creation_date": 1501491377, "post_id": 45334985, "comment_id": 77783097, "body": "I posted this question to reddit&#39;s /r/haskell: <a href=\"https://www.reddit.com/r/haskell/comments/6qn4y0/when_to_use_cps_vs_codensity_vs_reflection/\" rel=\"nofollow noreferrer\">reddit.com/r/haskell/comments/6qn4y0/&hellip;</a>"}, {"owner": {"reputation": 9455, "user_id": 1172541, "user_type": "registered", "accept_rate": 30, "profile_image": "https://i.stack.imgur.com/LROoN.png?s=128&g=1", "display_name": "PyRulez", "link": "https://stackoverflow.com/users/1172541/pyrulez"}, "edited": false, "score": 0, "creation_date": 1511846575, "post_id": 45334985, "comment_id": 82005124, "body": "It should be noted that in CPS, you usually replace all occurrences of <code>FooCPS i o a</code> with <code>r</code> (depending on the performance you want)."}], "answers": [{"comments": [{"owner": {"reputation": 3128, "user_id": 3040129, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/TcwLC.png?s=128&g=1", "display_name": "illabout", "link": "https://stackoverflow.com/users/3040129/illabout"}, "edited": false, "score": 7, "creation_date": 1501126833, "post_id": 45339348, "comment_id": 77643538, "body": "This is a really nice answer.  It shows just how similar normal style and CPS are.  I also like the abstraction over <code>FooF</code> and <code>FooFCPS</code> by using <code>Fix</code>.  However, I&#39;m not really sure it answers my question of <b>when</b> to use CPS vs codensity vs reflection without remorse.  I&#39;m guess I&#39;m mostly asking a performance question, which is hard to answer without specifics, but it would be interesting if there were any rules of thumb for when to use which style."}, {"owner": {"reputation": 3128, "user_id": 3040129, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/TcwLC.png?s=128&g=1", "display_name": "illabout", "link": "https://stackoverflow.com/users/3040129/illabout"}, "edited": false, "score": 2, "creation_date": 1501127179, "post_id": 45339348, "comment_id": 77643619, "body": "Am I incorrect about the statement about <code>par</code>?  I just looked back throught the &quot;Reflection without Remorse&quot; paper and they talk about <code>par</code> in section 6.1.  They specifically mention that <code>par</code> can&#39;t be written in the codensity style without first converting back to the normal style, but they don&#39;t say anything about CPS.  I was under the impression that monadic-reflection is impossible when writing CPS code unless you convert back to a normal style."}, {"owner": {"reputation": 9455, "user_id": 1172541, "user_type": "registered", "accept_rate": 30, "profile_image": "https://i.stack.imgur.com/LROoN.png?s=128&g=1", "display_name": "PyRulez", "link": "https://stackoverflow.com/users/1172541/pyrulez"}, "edited": false, "score": 0, "creation_date": 1511846738, "post_id": 45339348, "comment_id": 82005184, "body": "You can also define <code>Fix</code> via <code>newtype Fix f = Product (forall r. (f r -&gt; r) -&gt; r)</code>. Then you don&#39;t even need to use recursion."}], "tags": [], "owner": {"reputation": 23444, "user_id": 414413, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/6de2113f01432aa844dc85070ff33e89?s=128&d=identicon&r=PG", "display_name": "Cirdec", "link": "https://stackoverflow.com/users/414413/cirdec"}, "is_accepted": false, "score": 14, "last_activity_date": 1501136067, "last_edit_date": 1501136067, "creation_date": 1501114401, "answer_id": 45339348, "question_id": 45334985, "link": "https://stackoverflow.com/questions/45334985/when-to-use-cps-vs-codensity-vs-reflection-without-remorse-in-haskell/45339348#45339348", "title": "when to use CPS vs codensity vs reflection without remorse in Haskell", "body": "<p>This problem can be broken into two pieces, how you represent the data type and how you compose them together.</p>\n\n<h3>Data types</h3>\n\n<p>The styles you listed use only 2 styles of data types, the \"normal\" style and the continuation passing style. They differ in which objects are chosen as the primitives of the language.</p>\n\n<p>In the normal style data types and their constructors are chosen as primitive. The data types are sums (having multiple constructors) of products (holding multiple values)</p>\n\n<pre><code>data Sum a b = Left a | Right b\ndata Product a b = Product a b\n</code></pre>\n\n<p>The main objects of the language are these data types and functions; the functions deconstruct the data to look inside it and see what it does.</p>\n\n<pre><code>either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Sum a b -&gt; c\neither l _ (Left a)  = l a\neither _ r (Right b) = r b\n\nuncurry :: (a -&gt; b -&gt; c) -&gt; Product a b -&gt; c\nuncurry f (Product a b) = f a b\n</code></pre>\n\n<p>You can make an equivalent language where universally quantified types are treated as primitive instead of data types. In this case you can define the data types in terms of universal quantification. Sums are represented by their <code>either</code> function, universally quantified over the return type. Products are represented by their <code>uncurry</code> function, universally quantified over the return type. The need for a language extension (<code>RankNTypes</code>) to represent data types this way hints at why you'd call the first style \"normal\".</p>\n\n<pre><code>{-# LANGUAGE RankNTypes #-}\n\nnewtype Product a b = Product (forall r. (a -&gt; b -&gt; r) -&gt; r)\n\nproduct :: a -&gt; b -&gt; Product a b\nproduct a b = Product (\\f -&gt; f a b)\n\nuncurry :: (a -&gt; b -&gt; c) -&gt; Product a b -&gt; c\nuncurry both (Product f) = f both\n\nnewtype Sum a b = Sum (forall r. (a -&gt; r) -&gt; (b -&gt; r) -&gt; r)\n\nleft :: a -&gt; Sum a b\nleft a = Sum (\\l r -&gt; l a)\n\nright :: b -&gt; Sum a b\nright b = Sum (\\l r -&gt; r b)\n\neither :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Sum a b -&gt; c\neither l r (Sum f) = f l r\n</code></pre>\n\n<p>This gives rise to one of the main differences between the two styles. In the universally quantified style there aren't any constructors. All of the structure of the data must be stored in closures to functions, which is exactly where the replacements for constructors <code>left</code>, <code>right</code>, and <code>product</code> put it. In the universally quantified style you can't construct any unnecessary intermediate objects; no object exists for you to construct. You can still construct unnecessary intermediate closures. At the very least you'll trick the profiler into telling you that you don't have a bunch of objects hanging around.</p>\n\n<p>Your <code>FooM</code> data type, repeated here, can also be represented in continuation passing style.</p>\n\n<pre><code>data FooM i o a\n  = Await (i -&gt; FooM i o a)\n  | Yield o (FooM i o a)\n  | Done a\n</code></pre>\n\n<p>It will be represented by its <code>matchFoo</code> function, which I've defined.</p>\n\n<pre><code>matchFoo :: ((i -&gt; FooM i o a) -&gt; r) -&gt; (o -&gt; FooM i o a -&gt; r) -&gt; (a -&gt; r) -&gt; r\nmatchFoo a _ _ (Await f) = a f\nmatchFoo _ y _ (Yield o next) = y o next\nmatchFoo _ _ d (Done a) = d a\n</code></pre>\n\n<p>The universally quantified <code>FooM</code> identifies a <code>FooM</code> with its <code>matchFoo</code> function, universally qualified over its return type.</p>\n\n<pre><code>newtype FooCPS i o a = FooCPS\n  { runFooCPS\n      :: forall r.\n         ((i -&gt; FooCPS i o a) -&gt; r)\n      -&gt; (o -&gt; FooCPS i o a -&gt; r)\n      -&gt; (a -&gt; r)\n      -&gt; r\n  }\n\nawait :: (i -&gt; FooCPS i o a) -&gt; FooCPS i o a\nawait f = FooCPS (\\a _ _ -&gt; a f)\n\nyield :: o -&gt; FooCPS i o a -&gt; FooCPS i o a\nyield o next = FooCPS (\\_ y _ -&gt; y o next)\n\ndone :: a -&gt; FooCPS i o a\ndone a = FooCPS (\\_ _ d -&gt; d a)\n</code></pre>\n\n<h3>Breaking the problem in 2</h3>\n\n<p>To use the same data type for all the ways of composing them back together we're going to replace <code>FooM</code> with its base functor. The base functor is the normal data type with recursions replaced by a type variable.</p>\n\n<pre><code>data FooF i o a next\n  = Await (i -&gt; next)\n  | Yield o next\n  | Done a\n    deriving (Functor)\n</code></pre>\n\n<p>You can equivalently define a base functor in continuation passing style.</p>\n\n<pre><code>newtype FooFCPS i o a next = FooFCPS\n  { runFooCPS\n      :: forall r.\n         ((i -&gt; next) -&gt; r)\n      -&gt; (o -&gt; next -&gt; r)\n      -&gt; (a -&gt; r)\n      -&gt; r\n  }\n  deriving (Functor)\n</code></pre>\n\n<h3>Composing them back together</h3>\n\n<ol>\n<li><strong>Normal</strong></li>\n</ol>\n\n<p>We can immediately recover <code>FooM</code> by defining</p>\n\n<pre><code>newtype FooM i o a = FooM (FooF i o a (FooM i o a))\n</code></pre>\n\n<p>If you've already defined the <a href=\"https://hackage.haskell.org/package/recursion-schemes-5.0.2/docs/Data-Functor-Foldable.html#t:Fix\" rel=\"noreferrer\">fixed point of a functor</a>:</p>\n\n<pre><code>newtype Fix f = Fix (f (Fix f))\n</code></pre>\n\n<p>Then <code>FooM</code> can be recovered by</p>\n\n<pre><code>newtype FooM i o a = FooM (Fix (FooF i o a))\n</code></pre>\n\n<ol start=\"2\">\n<li><strong>Continuation Passing Style</strong></li>\n</ol>\n\n<p>Continuation passing style can be immediately recovered from the universally quantified <code>FooFCPS</code></p>\n\n<pre><code>newtype FooCPS i o a = FooCPS (Fix (FooFCPS i o a))\n</code></pre>\n\n<ol start=\"3\">\n<li><strong>Codensity</strong></li>\n</ol>\n\n<p>The codensity transformer works with either <code>FooM</code> or <code>FooCPS</code>.</p>\n\n<ol start=\"4\">\n<li><strong>Reflection without Remorse</strong></li>\n</ol>\n\n<p>We can define reflection without remorse in terms of base functors without reproducing the data type <code>FooM</code> in <code>FooRWR</code>.</p>\n\n<pre><code>newtype RWR f a = RWR { runRWR :: f (RWRExplicit f a) }\n\nnewtype RWRExplicit f a = RWRExplicit (forall x. FTCQueue (RWR f) x a)\n</code></pre>\n\n<p>And then recover <code>FooRWR</code> with</p>\n\n<pre><code>newtype FooRWR i o a = FooRWR {runFooRWR :: RWR (FooF i o a) a}\n</code></pre>\n\n<h3>Bonus observations</h3>\n\n<p><strong>Free</strong></p>\n\n<p>Both <code>Free</code> and <code>F</code> will work with either of the base functors <code>FooF</code> or <code>FooFCPS</code>.</p>\n\n<p><strong>Monad Transformers</strong></p>\n\n<p>The base functor can also be used to build a monad transformer. There's a <a href=\"https://stackoverflow.com/questions/27997155/finite-state-transducers-in-haskell\">detailed discussion of building the <code>MachineT</code> transformer (which is closely related to <code>FooM</code>) in this question and answer</a>.</p>\n\n<hr>\n\n<p>The claim that <code>par</code> can't be written in CPS without first converting back to normal style needs some qualification, since all data types can be replaced with universally quantified continuation-passing style types.</p>\n"}], "owner": {"reputation": 3128, "user_id": 3040129, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/TcwLC.png?s=128&g=1", "display_name": "illabout", "link": "https://stackoverflow.com/users/3040129/illabout"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1454, "favorite_count": 14, "answer_count": 1, "score": 32, "last_activity_date": 1501136067, "creation_date": 1501094203, "last_edit_date": 1501135829, "question_id": 45334985, "link": "https://stackoverflow.com/questions/45334985/when-to-use-cps-vs-codensity-vs-reflection-without-remorse-in-haskell", "title": "when to use CPS vs codensity vs reflection without remorse in Haskell", "body": "<p>Are there any rules of thumb for when to use <strong>continuation-passing style</strong> vs <strong>codensity</strong> vs <strong>reflection without remorse</strong> when creating monads in Haskell?</p>\n\n<p>As an example, I'm going to use a simple coroutine monad. If you've never seen this before, you might want to check out the \"Coroutine Pipelines\" article in <a href=\"https://themonadreader.files.wordpress.com/2011/10/issue19.pdf\" rel=\"noreferrer\">Monad.Reader Issue 19</a> or the <a href=\"https://hackage.haskell.org/package/pipes\" rel=\"noreferrer\">pipes</a> library.  The full code for the following examples can be found in <a href=\"https://github.com/cdepillabout/cps-vs-codensity-vs-reflection-without-remorse\" rel=\"noreferrer\">this repository</a>.</p>\n\n<ol>\n<li><p><strong>Normal</strong></p>\n\n<p>This is just a normal monad defined as a datatype:</p>\n\n<pre><code>data FooM i o a\n  = Await (i -&gt; FooM i o a)\n  | Yield o (FooM i o a)\n  | Done a\n</code></pre>\n\n<p>This style is used extensively thorought the Haskell ecosystem.  One example of this style is the <a href=\"https://hackage.haskell.org/package/pipes-4.3.4/docs/Pipes.html#t:Proxy\" rel=\"noreferrer\"><code>Proxy</code></a> data type from <code>pipes</code>.</p></li>\n<li><p><strong>Continuation-Passing Style (CPS)</strong></p>\n\n<p>This is similar to the <strong>normal</strong> style, but each data constructor has become an argument to a continuation:</p>\n\n<pre><code>newtype FooCPS i o a = FooCPS\n  { runFooCPS\n      :: forall r.\n         ((i -&gt; FooCPS i o a) -&gt; r)\n      -&gt; (o -&gt; FooCPS i o a -&gt; r)\n      -&gt; (a -&gt; r)\n      -&gt; r\n  }\n</code></pre>\n\n<p>This style is used in both <a href=\"https://hackage.haskell.org/package/attoparsec-0.13.1.0/docs/Data-Attoparsec-Internal-Types.html#t:Parser\" rel=\"noreferrer\">attoparsec</a> and <a href=\"https://hackage.haskell.org/package/parsec-3.1.11/docs/Text-Parsec-Prim.html#t:ParsecT\" rel=\"noreferrer\">parsec</a>.</p></li>\n<li><p><strong>Codensity</strong></p>\n\n<p>This style uses a <a href=\"https://hackage.haskell.org/package/kan-extensions-5.0.2/docs/Control-Monad-Codensity.html#t:Codensity\" rel=\"noreferrer\">codensity monad transformer</a> wrapped around a monad defined in the <strong>normal</strong> style.  This gives O(1) left-associative bind.</p>\n\n<p>The codensity monad transformer looks like the following:</p>\n\n<pre><code>newtype Codensity m a = Codensity\n  { runCodensity :: forall b. (a -&gt; m b) -&gt; m b\n  }\n</code></pre>\n\n<p>Our actual monad could be defined as a newtype using the <code>Codensity</code> transformer.  Notice how <code>FooCodensity</code> is using <code>FooM</code> internally.</p>\n\n<pre><code>newtype FooCodensity i o a = FooCodensity\n  { runFooCodensity :: Codensity (FooM i o) a\n  }\n</code></pre>\n\n<p>This style is used by <a href=\"https://hackage.haskell.org/package/conduit\" rel=\"noreferrer\">conduit</a> in the <a href=\"https://hackage.haskell.org/package/conduit-1.2.11/docs/Data-Conduit.html#t:ConduitM\" rel=\"noreferrer\"><code>ConduitM</code></a> type.</p></li>\n<li><p><strong>Reflection without Remorse</strong></p>\n\n<p>This is the style discussed in the paper <a href=\"http://okmij.org/ftp/Haskell/zseq.pdf\" rel=\"noreferrer\">Reflection without Remorse</a>.</p>\n\n<p>This is similar to the <strong>normal</strong> style, but recursive calls have become a data structure with O(1) append and amortized O(1) uncons.  This gives O(1) left-associative bind and monadic-reflection to the <code>FooRWR</code> monad:</p>\n\n<pre><code>data FooRWR i o a\n  = AwaitRWR (forall x. i -&gt; FooExplicit i o x a)\n  | YieldRWR  o (forall x. FooExplicit i o x a)\n  | DoneRWR a\n</code></pre>\n\n<p>The <code>FooExplicit</code> type is defined as the following:</p>\n\n<pre><code>type FooExplicit i o = FTCQueue (FooRWR i o)\n</code></pre>\n\n<p><code>FTCQueue</code> is a data structure with O(1) append and amortized O(1) uncons.</p>\n\n<p>This style is used by the <a href=\"https://hackage.haskell.org/package/freer-effects-0.3.0.1/docs/Control-Monad-Freer-Internal.html#t:Eff\" rel=\"noreferrer\">freer-effects</a> and <a href=\"https://hackage.haskell.org/package/extensible-0.4.2/docs/Data-Extensible-Effect.html\" rel=\"noreferrer\">extensible</a> packages.  It is available as a standalone library in <a href=\"https://hackage.haskell.org/package/monad-skeleton-0.1.3.2/docs/Control-Monad-Skeleton.html#t:Spine\" rel=\"noreferrer\">monad-skeleton</a>.</p></li>\n</ol>\n\n<hr>\n\n<p>When should <strong>normal</strong> vs <strong>CPS</strong> vs <strong>codensity</strong> vs <strong>reflection without remorse</strong> be used?  I imagine a hard and fast answer would require benchmarking a given monad and application, but are there <em>any rules of thumb</em>?</p>\n\n<p>From my own research, I've come across the following ideas/comments:</p>\n\n<ul>\n<li><p><strong>CPS</strong> can be faster than <strong>normal</strong> style because you may not have to do case-analysis.  Although the actual speedup may vary based on how the code is compiled by GHC.  <strong>Codensity</strong> and <strong>reflection without remorse</strong> have some overhead.</p>\n\n<p>Gabriel Gonzalez (the author of <code>pipes</code>) writes about how he sticks with <strong>normal</strong> style for <code>pipes</code> in both <a href=\"https://www.reddit.com/r/haskell/comments/23m4bs/i_added_a_coroutine_example_to_the_wiki_did_i/\" rel=\"noreferrer\">this reddit thread</a> and this <a href=\"https://github.com/Gabriel439/Haskell-Pipes-Library/issues/100\" rel=\"noreferrer\">issue</a> on Github.</p>\n\n<p>Bryan O'Sullivan (the author of <code>attoparsec</code>) writes about how changing <code>attoparsec</code> from <strong>normal</strong> style to <strong>CPS</strong> gave a <a href=\"http://www.serpentine.com/blog/2011/02/25/cps-is-great-cps-is-terrible/\" rel=\"noreferrer\">factor of 8 speedup</a>.  Some of the comments on that post also talk about <strong>normal</strong> style vs <strong>CPS</strong>.</p></li>\n<li><p>If you need deep left associative binds, <strong>normal</strong> style and <strong>CPS</strong> end up with quadratic runtime.</p>\n\n<p>Here is an example from the \"Reflection without Remorse\" paper that will exhibit quadratic runtime.</p>\n\n<pre><code>data It i a = Get (i -&gt; It i a) | Done a\n\nsumInput :: Int -&gt; It Int Int\nsumInput n = Get (foldl (&gt;=&gt;) return (replicate (n - 1) f))\n  where\n    f x = get &gt;&gt;= return . (+ x)\n</code></pre>\n\n<p>If <code>sumInput</code> is rewritten with <strong>codensity</strong> or <strong>reflection without remorse</strong>, it will run perfectly fast.</p>\n\n<p>If your application has deep left-associative binds, you should probably be using <strong>codensity</strong> or <strong>reflection without remorse</strong>.</p>\n\n<p>Michael Snoyman (author of <code>conduit</code>) talks about this in a blog post about <a href=\"https://www.fpcomplete.com/blog/2014/08/iap-speeding-up-conduit#continuation-passing-style--church-encoding--codensity\" rel=\"noreferrer\">speeding up</a> <code>conduit</code>.</p>\n\n<p>The <code>pipes</code> library <a href=\"http://hackage.haskell.org/package/pipes-3.3.0/docs/Control-Proxy-Trans-Codensity.html\" rel=\"noreferrer\">used to provide</a> a codensity transformer.</p></li>\n<li><p><strong>CPS</strong> and <strong>codensity</strong> don't support O(1) reflection.</p>\n\n<p>Here is a function that requires monadic reflection.  This example is adapted from the \"Reflection without Remorse\" paper:</p>\n\n<pre><code>data It i a = Get (i -&gt; It i a) | Done a\n\npar :: It i a -&gt; It i b -&gt; It i (It i a, It i b)\npar l r\n  | Done &lt;- l = Done (l, r)\n  | Done &lt;- r = Done (l, r)\n  | Get f &lt;- l, Get g &lt;- r = Get Done &gt;&gt;= \\x -&gt; par (f x) (g x)\n</code></pre>\n\n<p>This method can't be written in the <strong>CPS</strong> or <strong>codensity</strong> style without first converting back to <strong>normal</strong> style.  The <strong>reflection without remorse</strong> style does not have this problem.</p>\n\n<p>If you need monadic reflection, you should probably be using <strong>normal</strong> style or <strong>reflection without remorse</strong>.</p></li>\n<li><p><strong>Reflection without remorse</strong> adds some overhead, but it is the only style that gives both O(1) left-associative bind and reflection.</p></li>\n</ul>\n\n<p><em>bonus question</em>: A similar question could be asked about <a href=\"https://hackage.haskell.org/package/free-4.12.3/docs/Control-Monad-Free.html#t:Free\" rel=\"noreferrer\"><code>Free</code></a> (<strong>normal</strong> style) vs <a href=\"https://hackage.haskell.org/package/free-4.12.3/docs/Control-Monad-Free-Church.html#t:F\" rel=\"noreferrer\"><code>F</code></a> (<strong>CPS</strong>) from the <a href=\"https://hackage.haskell.org/package/free\" rel=\"noreferrer\">free</a> package.  When should <code>Free</code> be used?  When should <code>F</code> be used?</p>\n"}, {"tags": ["haskell", "haskell-lens"], "answers": [{"tags": [], "owner": {"reputation": 24211, "user_id": 1364288, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/JVtNl.png?s=128&g=1", "display_name": "danidiaz", "link": "https://stackoverflow.com/users/1364288/danidiaz"}, "is_accepted": true, "score": 6, "last_activity_date": 1501099908, "last_edit_date": 1501099908, "creation_date": 1501098085, "answer_id": 45336071, "question_id": 45334723, "link": "https://stackoverflow.com/questions/45334723/apply-two-folds-or-getters-and-only-succeed-when-both-succeed/45336071#45336071", "title": "Apply two Folds or Getters and only succeed when both succeed", "body": "<p>The <a href=\"http://hackage.haskell.org/package/lens-4.15.3/docs/Control-Lens-Prism.html#v:aside\" rel=\"noreferrer\"><code>aside</code></a> combinator takes a <code>Prism</code> that works over the second component of a tuple and returns a <code>Prism</code> that works over the whole tuple:</p>\n\n<pre><code>ghci&gt; lst ^.. folded.aside _Just\n[(True,3),(False,12)]\n</code></pre>\n\n<p>The resulting prism matches when the component is matched, otherwise it fails.</p>\n\n<p>Combining it with <code>to</code> and <code>bimap</code>, we can reproduce your example:</p>\n\n<pre><code>ghci&gt; lst ^.. folded.aside _Just.to (bimap not id)\n[(False,3),(True,12)]\n</code></pre>\n\n<p>To work over the first component, we can use <a href=\"http://hackage.haskell.org/package/lens-4.15.3/docs/Control-Lens-Iso.html#t:Swapped\" rel=\"noreferrer\"><code>swapped</code></a>:</p>\n\n<pre><code>ghci&gt; [(Just 3,False)]^..folded.swapped.aside _Just.swapped\n[(3,False)]\n</code></pre>\n"}], "owner": {"reputation": 40537, "user_id": 465378, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/c03b8d34978563858020eff0d14cc17b?s=128&d=identicon&r=PG", "display_name": "Alexis King", "link": "https://stackoverflow.com/users/465378/alexis-king"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 98, "favorite_count": 0, "accepted_answer_id": 45336071, "answer_count": 1, "score": 6, "last_activity_date": 1501099908, "creation_date": 1501093388, "question_id": 45334723, "link": "https://stackoverflow.com/questions/45334723/apply-two-folds-or-getters-and-only-succeed-when-both-succeed", "title": "Apply two Folds or Getters and only succeed when both succeed", "body": "<p>Imagine I have the following list:</p>\n\n<pre><code>lst :: [(Bool, Maybe Integer)]\nlst = [(True, Just 3), (True, Nothing), (False, Just 12)]\n</code></pre>\n\n<p>Using the lens library, I want to extract the elements of the tuples, but I only want it to succeed when the second element is <code>Just</code>. I want some optic, <em><code>split</code></em> that works like this:</p>\n\n<pre><code>> lst ^.. folded.<i>split</i> (_1.to not) (_2._Just)\n[(False, 3), (True, 12)]\n</code></pre>\n\n<p>I can implement <code>split</code> myself like this:</p>\n\n<pre><code>split :: Getting (First a) s a -&gt; Getting (First b) s b -&gt; Fold s (a, b)\nsplit a b = folding (\\x -&gt; (,) &lt;$&gt; (x ^? a) &lt;*&gt; (x ^? b))\n</code></pre>\n\n<p>\u2026which seems to work. However, this seems like I must be reinventing the wheel. Is there something already provided by the lens library that accomplishes this in an equally nice way?</p>\n"}, {"tags": ["haskell", "monads", "maybe"], "comments": [{"owner": {"reputation": 28376, "user_id": 5743988, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/IeSSM.jpg?s=128&g=1", "display_name": "4castle", "link": "https://stackoverflow.com/users/5743988/4castle"}, "edited": false, "score": 0, "creation_date": 1501082300, "post_id": 45329020, "comment_id": 77623961, "body": "For the loop, you could use <a href=\"http://hoogle.haskell.org/?hoogle=untilJust&amp;scope=package%3Amonad-loops\" rel=\"nofollow noreferrer\"><code>untilJust</code></a> from <code>monad-loops</code>"}, {"owner": {"reputation": 1376, "user_id": 5200466, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/abb1362cec6e1f0a2416a6d98a93cd6c?s=128&d=identicon&r=PG&f=1", "display_name": "matt", "link": "https://stackoverflow.com/users/5200466/matt"}, "reply_to_user": {"reputation": 28376, "user_id": 5743988, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/IeSSM.jpg?s=128&g=1", "display_name": "4castle", "link": "https://stackoverflow.com/users/5743988/4castle"}, "edited": false, "score": 0, "creation_date": 1501084553, "post_id": 45329020, "comment_id": 77625740, "body": "@4castle how would i actually write that. When I try to use <code>untilJust</code> I just get stuck on a loop on that line rather than have it loop back to the start of main so that I get all code prior to that line."}, {"owner": {"reputation": 28376, "user_id": 5743988, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/IeSSM.jpg?s=128&g=1", "display_name": "4castle", "link": "https://stackoverflow.com/users/5743988/4castle"}, "edited": false, "score": 1, "creation_date": 1501085590, "post_id": 45329020, "comment_id": 77626492, "body": "<code>x &lt;- untilJust (validateNumber &lt;$&gt; getLine)</code> and you can replace <code>getLine</code> with an <code>IO String</code> that prompts for input first."}, {"owner": {"reputation": 1376, "user_id": 5200466, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/abb1362cec6e1f0a2416a6d98a93cd6c?s=128&d=identicon&r=PG&f=1", "display_name": "matt", "link": "https://stackoverflow.com/users/5200466/matt"}, "reply_to_user": {"reputation": 28376, "user_id": 5743988, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/IeSSM.jpg?s=128&g=1", "display_name": "4castle", "link": "https://stackoverflow.com/users/5743988/4castle"}, "edited": false, "score": 0, "creation_date": 1501086326, "post_id": 45329020, "comment_id": 77627060, "body": "@4castle thank you"}], "answers": [{"comments": [{"owner": {"reputation": 1376, "user_id": 5200466, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/abb1362cec6e1f0a2416a6d98a93cd6c?s=128&d=identicon&r=PG&f=1", "display_name": "matt", "link": "https://stackoverflow.com/users/5200466/matt"}, "edited": false, "score": 0, "creation_date": 1501078949, "post_id": 45329175, "comment_id": 77621074, "body": "i started out with nested cases but thought that that is something that we should be trying to avoid???"}, {"owner": {"reputation": 384463, "user_id": 1126841, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fa05233b2357f8d11c22ef4cfc7bb85c?s=128&d=identicon&r=PG", "display_name": "chepner", "link": "https://stackoverflow.com/users/1126841/chepner"}, "edited": false, "score": 0, "creation_date": 1501088921, "post_id": 45329175, "comment_id": 77628727, "body": "I wouldn&#39;t use the word &quot;concise&quot; to describe code that ignores the <code>Functor</code> instance of <code>Maybe</code>."}, {"owner": {"reputation": 209, "user_id": 7658944, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/197708885c5d718abd5711f49b17c6e0?s=128&d=identicon&r=PG&f=1", "display_name": "Robert", "link": "https://stackoverflow.com/users/7658944/robert"}, "reply_to_user": {"reputation": 384463, "user_id": 1126841, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fa05233b2357f8d11c22ef4cfc7bb85c?s=128&d=identicon&r=PG", "display_name": "chepner", "link": "https://stackoverflow.com/users/1126841/chepner"}, "edited": false, "score": 0, "creation_date": 1501134563, "post_id": 45329175, "comment_id": 77646026, "body": "@chepner Maybe it was a bad choice of words."}], "tags": [], "owner": {"reputation": 209, "user_id": 7658944, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/197708885c5d718abd5711f49b17c6e0?s=128&d=identicon&r=PG&f=1", "display_name": "Robert", "link": "https://stackoverflow.com/users/7658944/robert"}, "is_accepted": false, "score": 0, "last_activity_date": 1501077654, "creation_date": 1501077654, "answer_id": 45329175, "question_id": 45329020, "link": "https://stackoverflow.com/questions/45329020/how-to-filter-a-maybe-value/45329175#45329175", "title": "How to filter a Maybe value", "body": "<p>I would try something like this (not tested):</p>\n\n<pre><code>validateNumber :: String -&gt; Maybe Int\nvalidateNumber n = case (readMaybe::String -&gt; Maybe Int) n of\n    (Just a) -&gt; case n &gt; 0 of\n        True  -&gt; Just n\n        False -&gt; Nothing\n    Nothing  -&gt; Nothing\n</code></pre>\n\n<p>It's a bit shorter and more concise.</p>\n"}, {"comments": [{"owner": {"reputation": 1376, "user_id": 5200466, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/abb1362cec6e1f0a2416a6d98a93cd6c?s=128&d=identicon&r=PG&f=1", "display_name": "matt", "link": "https://stackoverflow.com/users/5200466/matt"}, "edited": false, "score": 0, "creation_date": 1501079591, "post_id": 45329288, "comment_id": 77621667, "body": "that&#39;s really nice. Any comment on looping my function?"}, {"owner": {"reputation": 133611, "user_id": 152602, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7f370b4bd787fc68f9f62d9c6781cb79?s=128&d=identicon&r=PG", "display_name": "Lee", "link": "https://stackoverflow.com/users/152602/lee"}, "reply_to_user": {"reputation": 1376, "user_id": 5200466, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/abb1362cec6e1f0a2416a6d98a93cd6c?s=128&d=identicon&r=PG&f=1", "display_name": "matt", "link": "https://stackoverflow.com/users/5200466/matt"}, "edited": false, "score": 0, "creation_date": 1501081546, "post_id": 45329288, "comment_id": 77623322, "body": "@matthias - What are the inputs to the function? Are you trying to find the first <code>Just</code> value in a list or is it the result of an <code>IO</code> action e.g. <code>IO (Maybe Int)</code>?"}, {"owner": {"reputation": 1376, "user_id": 5200466, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/abb1362cec6e1f0a2416a6d98a93cd6c?s=128&d=identicon&r=PG&f=1", "display_name": "matt", "link": "https://stackoverflow.com/users/5200466/matt"}, "edited": false, "score": 0, "creation_date": 1501082368, "post_id": 45329288, "comment_id": 77624023, "body": "the input is a simple <code>getline</code> expecting a valid number. If the number is invalid, I want it to loop back and ask for the number again. If it is valid do something with it."}, {"owner": {"reputation": 14582, "user_id": 2225384, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f30b04ed4d0b3fc4bc791a28815f34ca?s=128&d=identicon&r=PG", "display_name": "Rein Henrichs", "link": "https://stackoverflow.com/users/2225384/rein-henrichs"}, "edited": false, "score": 1, "creation_date": 1501084799, "post_id": 45329288, "comment_id": 77625927, "body": "I would suggest asking your second question as a new question."}, {"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "edited": false, "score": 0, "creation_date": 1501094869, "post_id": 45329288, "comment_id": 77632241, "body": "I find the type of <code>mfilter</code> odd. It seems like <code>MonadPlus m =&gt; (a -&gt; Bool) -&gt; a -&gt; m a</code> would be much more natural. (I have found many uses for <code>ensure p x = x &lt;$ guard (p x)</code>, which is essentially <code>mfilter</code> with my proposed relaxed type.) It wouldn&#39;t make this code significantly worse, either, since you could just use <code>(&lt;=&lt;)</code> in place of <code>(.)</code>."}, {"owner": {"reputation": 28376, "user_id": 5743988, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/IeSSM.jpg?s=128&g=1", "display_name": "4castle", "link": "https://stackoverflow.com/users/5743988/4castle"}, "reply_to_user": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "edited": false, "score": 0, "creation_date": 1501102321, "post_id": 45329288, "comment_id": 77636366, "body": "@DanielWagner Probably <code>mfilter</code> is designed to just be a generalized version of <code>filter</code>."}, {"owner": {"reputation": 8237, "user_id": 2900502, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/R1OjD.jpg?s=128&g=1", "display_name": "Shersh", "link": "https://stackoverflow.com/users/2900502/shersh"}, "reply_to_user": {"reputation": 28376, "user_id": 5743988, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/IeSSM.jpg?s=128&g=1", "display_name": "4castle", "link": "https://stackoverflow.com/users/5743988/4castle"}, "edited": false, "score": 0, "creation_date": 1501109818, "post_id": 45329288, "comment_id": 77639519, "body": "@4castle I think <code>Witherable</code> is better generalization of <code>filter</code>."}], "tags": [], "owner": {"reputation": 133611, "user_id": 152602, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7f370b4bd787fc68f9f62d9c6781cb79?s=128&d=identicon&r=PG", "display_name": "Lee", "link": "https://stackoverflow.com/users/152602/lee"}, "is_accepted": true, "score": 17, "last_activity_date": 1501077917, "creation_date": 1501077917, "answer_id": 45329288, "question_id": 45329020, "link": "https://stackoverflow.com/questions/45329020/how-to-filter-a-maybe-value/45329288#45329288", "title": "How to filter a Maybe value", "body": "<p>You can use <code>mfilter</code> to filter out-of-range values within a <code>Maybe</code> instead of explicitly matching:</p>\n\n<pre><code>import Control.Monad (mfilter)\n\nvalidateNumber :: String -&gt; Maybe Int\nvalidateNumber = mfilter (&gt; 0) . readMaybe\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 14781, "user_id": 630160, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/4445f21326af525a8ad19af7e3ae41a8?s=128&d=identicon&r=PG", "display_name": "epsilonhalbe", "link": "https://stackoverflow.com/users/630160/epsilonhalbe"}, "edited": false, "score": 0, "creation_date": 1501104418, "post_id": 45330286, "comment_id": 77637456, "body": "I think you could shorten the last line with <code>guard (n &lt;0); return n</code>."}, {"owner": {"reputation": 58792, "user_id": 1006010, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/f683d229f3673c9dcc3f3f2796d75c09?s=128&d=identicon&r=PG", "display_name": "MathematicalOrchid", "link": "https://stackoverflow.com/users/1006010/mathematicalorchid"}, "reply_to_user": {"reputation": 14781, "user_id": 630160, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/4445f21326af525a8ad19af7e3ae41a8?s=128&d=identicon&r=PG", "display_name": "epsilonhalbe", "link": "https://stackoverflow.com/users/630160/epsilonhalbe"}, "edited": false, "score": 0, "creation_date": 1501145360, "post_id": 45330286, "comment_id": 77652671, "body": "@epsilonhalbe You&#39;re suggesting that I &quot;shorten&quot; one line into two lines, which requires an additional import and is arguably less clear?"}, {"owner": {"reputation": 14781, "user_id": 630160, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/4445f21326af525a8ad19af7e3ae41a8?s=128&d=identicon&r=PG", "display_name": "epsilonhalbe", "link": "https://stackoverflow.com/users/630160/epsilonhalbe"}, "edited": false, "score": 0, "creation_date": 1501189942, "post_id": 45330286, "comment_id": 77683495, "body": "I am no fan of <code>if</code> but I guess that is a matter of taste. And you are right about the unnecessary import - I forgot that one!"}], "tags": [], "owner": {"reputation": 58792, "user_id": 1006010, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/f683d229f3673c9dcc3f3f2796d75c09?s=128&d=identicon&r=PG", "display_name": "MathematicalOrchid", "link": "https://stackoverflow.com/users/1006010/mathematicalorchid"}, "is_accepted": false, "score": 8, "last_activity_date": 1501080218, "creation_date": 1501080218, "answer_id": 45330286, "question_id": 45329020, "link": "https://stackoverflow.com/questions/45329020/how-to-filter-a-maybe-value/45330286#45330286", "title": "How to filter a Maybe value", "body": "<p>How about this?</p>\n\n<pre><code>validateNumber :: String -&gt; Maybe Int\nvalidateNumber n = (readMaybe n) &gt;&gt;= inRange\n</code></pre>\n\n<p>Or even this:</p>\n\n<pre><code>validateNumber :: String -&gt; Maybe Int\nvalidateNumber str = do\n  n &lt;- readMaybe str\n  if n &lt; 0 then Nothing else return n\n</code></pre>\n\n<p>(Avoids needing a separate <code>inRange</code> function.)</p>\n"}], "owner": {"reputation": 1376, "user_id": 5200466, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/abb1362cec6e1f0a2416a6d98a93cd6c?s=128&d=identicon&r=PG&f=1", "display_name": "matt", "link": "https://stackoverflow.com/users/5200466/matt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1806, "favorite_count": 0, "accepted_answer_id": 45329288, "answer_count": 3, "score": 11, "last_activity_date": 1501083735, "creation_date": 1501077267, "last_edit_date": 1501083735, "question_id": 45329020, "link": "https://stackoverflow.com/questions/45329020/how-to-filter-a-maybe-value", "title": "How to filter a Maybe value", "body": "<p>I am trying to create a function that validates an input <code>String -&gt; Maybe Int</code>. I check to see if the input string is a number then check if that number is in a range. So far I have</p>\n\n<pre><code>validateNumber :: String -&gt; Maybe Int\nvalidateNumber n  = go $ (readMaybe::String -&gt; Maybe Int) n\n  where\n    go (Just a) = inRange a\n    go Nothing  = Nothing\n\ninRange :: Int -&gt; Maybe Int\ninRange n\n  | n &gt; 0     = Just n\n  | otherwise = Nothing\n</code></pre>\n\n<p>This feels like poor code. How should this be written?</p>\n\n<p>Also, if I am trying to loop a function if it returns <code>Nothing</code>, what is the best way to do so:</p>\n\n<p>So to loop the <code>main</code> function, I am doing :</p>\n\n<pre><code>case v of\n  Nothing -&gt; main\n  Just x  -&gt; {do something}\n</code></pre>\n"}, {"tags": ["haskell", "monads"], "comments": [{"owner": {"reputation": 75362, "user_id": 625403, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/786eed7da67079cb5d63a49d469af25b?s=128&d=identicon&r=PG", "display_name": "amalloy", "link": "https://stackoverflow.com/users/625403/amalloy"}, "edited": false, "score": 0, "creation_date": 1501091733, "post_id": 45322085, "comment_id": 77630499, "body": "<a href=\"https://stackoverflow.com/q/45306764/625403\">stackoverflow.com/q/45306764/625403</a> was recently asked, which is another way to come to the same realization provided in pigworker&#39;s answer below."}], "answers": [{"comments": [{"owner": {"reputation": 849, "user_id": 3316009, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/Q0EyA.jpg?s=128&g=1", "display_name": "calvin", "link": "https://stackoverflow.com/users/3316009/calvin"}, "edited": false, "score": 0, "creation_date": 1501061734, "post_id": 45322277, "comment_id": 77607778, "body": "thank you very much for pointing out and correcting my error. Following your advise, I did some search, and I find <a href=\"https://stackoverflow.com/questions/8274650/in-haskell-when-do-we-use-in-with-let\">this</a> maybe also a good reading"}, {"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "edited": false, "score": 0, "creation_date": 1501087577, "post_id": 45322277, "comment_id": 77627832, "body": "Another common fix is to make <code>b</code> a function and pass it <code>str</code> as an argument."}], "tags": [], "owner": {"reputation": 42094, "user_id": 828361, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/6a82397672dcc1fca31c32508ef0798b?s=128&d=identicon&r=PG", "display_name": "pigworker", "link": "https://stackoverflow.com/users/828361/pigworker"}, "is_accepted": true, "score": 4, "last_activity_date": 1501059945, "creation_date": 1501059945, "answer_id": 45322277, "question_id": 45322085, "link": "https://stackoverflow.com/questions/45322085/why-this-variable-is-invisible-in-where/45322277#45322277", "title": "Why this variable is invisible in where", "body": "<p>This is a parsing issue. Haskell parses the offending code as</p>\n\n<pre><code>main = (do {str &lt;- readFile \"11.dat\"; print b}) where {b = fmap parseInt (lines str)}\n</code></pre>\n\n<p>so that the only local variables in scope for the <code>where</code> clause are the pattern variables to the left of <code>=</code> (all none of them, but in general, you might have some).</p>\n\n<p>Meanwhile <code>str</code> scopes only from its binding to the end of the <code>do</code> block. And that's why putting a <code>let</code> in the <code>do</code> block after that binding works just fine.</p>\n"}], "owner": {"reputation": 849, "user_id": 3316009, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/Q0EyA.jpg?s=128&g=1", "display_name": "calvin", "link": "https://stackoverflow.com/users/3316009/calvin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 114, "favorite_count": 0, "accepted_answer_id": 45322277, "answer_count": 1, "score": 2, "last_activity_date": 1501091364, "creation_date": 1501059393, "last_edit_date": 1501091364, "question_id": 45322085, "link": "https://stackoverflow.com/questions/45322085/why-this-variable-is-invisible-in-where", "title": "Why this variable is invisible in where", "body": "<p>I want to read a matrix <code>[[Int]]</code> from a text file(this matrix is given in \n a <a href=\"https://projecteuler.net/problem=11\" rel=\"nofollow noreferrer\">project euler's problem</a>), so I have the following code</p>\n\n<pre><code>parseInt :: String -&gt; [Int]\nparseInt [] = []\nparseInt (x : xs) = [(ord x) - (ord '0')] ++ (parseInt xs)\n\nmain = do\n  str &lt;- readFile \"11.dat\" \n  print $ fmap parseInt (lines str)\n</code></pre>\n\n<p>this code works fine and I can output the matrix a read.</p>\n\n<p>However, I want to change the <code>main</code> function, so I can reuse <code>fmap parseInt (lines str)</code> instead of repeating it in my code.</p>\n\n<pre><code>main = do\n  str &lt;- readFile \"11.dat\" \n  print b\n  where b = fmap parseInt (lines str)\n</code></pre>\n\n<p>the compiler gives me an error</p>\n\n<pre><code>11.hs:37:34: error:\n    Variable not in scope: str :: String\n[Finished in 0.9s]\n</code></pre>\n\n<p>It seems that the feed operation <code>str &lt;- readFile \"11.dat\"</code> causes this problem because when I read from a string directly the code works fine</p>\n\n<pre><code>main = do\n  print b\n  where b = fmap parseInt (lines \"08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08\\n...01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48\\n\")\n</code></pre>\n\n<p>I can also with <code>let</code></p>\n\n<pre><code>main = do\n  str &lt;- readFile \"11.dat\" \n  let b = fmap parseInt (lines str)\n  print b\n</code></pre>\n\n<p>So how can I do that with <code>that</code></p>\n"}, {"tags": ["haskell"], "answers": [{"comments": [{"owner": {"reputation": 44495, "user_id": 3058609, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/2c0357556707713572abbf637a907ef9?s=128&d=identicon&r=PG&f=1", "display_name": "Adam Smith", "link": "https://stackoverflow.com/users/3058609/adam-smith"}, "edited": false, "score": 3, "creation_date": 1501053661, "post_id": 45320014, "comment_id": 77601958, "body": "One of the first hurdles I had to overcome learning Haskell is to see spaces as very tight bindings. Taken in the context of a natural language where space is a word separator, it appears to be doing <code>map (tail.tail.lines)</code> (since there&#39;s no space between the function composition, it must be bound more tightly, right?) but of course that&#39;s not true at all in Haskell."}, {"owner": {"reputation": 149, "user_id": 6581912, "user_type": "registered", "accept_rate": 12, "profile_image": "https://www.gravatar.com/avatar/5f01ffd293668d9f604ab20986d4b247?s=128&d=identicon&r=PG&f=1", "display_name": "mc.robin", "link": "https://stackoverflow.com/users/6581912/mc-robin"}, "edited": false, "score": 0, "creation_date": 1501054435, "post_id": 45320014, "comment_id": 77602511, "body": "I&#39;m sorry, i still do not understand why the two output differents, I want to know the way haskell parse code."}, {"owner": {"reputation": 149, "user_id": 6581912, "user_type": "registered", "accept_rate": 12, "profile_image": "https://www.gravatar.com/avatar/5f01ffd293668d9f604ab20986d4b247?s=128&d=identicon&r=PG&f=1", "display_name": "mc.robin", "link": "https://stackoverflow.com/users/6581912/mc-robin"}, "edited": false, "score": 0, "creation_date": 1501054707, "post_id": 45320014, "comment_id": 77602704, "body": "Thanks for your help. China has an old saying\uff1a \u918d\u9190\u704c\u9876"}, {"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 0, "creation_date": 1501060649, "post_id": 45320014, "comment_id": 77606952, "body": "<code>(((map tail) tail) lines)</code> is ill typed."}], "tags": [], "owner": {"reputation": 34030, "user_id": 1993366, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/dGJXl.png?s=128&g=1", "display_name": "vikingsteve", "link": "https://stackoverflow.com/users/1993366/vikingsteve"}, "is_accepted": false, "score": 6, "last_activity_date": 1501071773, "last_edit_date": 1501071773, "creation_date": 1501053491, "answer_id": 45320014, "question_id": 45319850, "link": "https://stackoverflow.com/questions/45319850/confused-about-composite-function-with-map-in-haskell/45320014#45320014", "title": "confused about composite function with map in haskell", "body": "<p>Lets look at your first example:</p>\n\n<pre><code>let f = map tail.tail.lines\nf \"fasdf\\nfasdfdsfd\\n\"\n</code></pre>\n\n<p>Firstly, <code>lines</code> breaks your input string into an array of strings: <code>[\"fasdf\",\"fasdfdsfd\"]</code>.</p>\n\n<p>Now, working right to left, <code>tail</code> drops the \"head\" of the list: <code>[\"fasdfdsfd\"]</code></p>\n\n<p>Lastly, <code>map tail</code> applies the \"tail\" to each element in the list: <code>[\"asdfdsfd\"]</code></p>\n\n<p>Your second example works similarly:</p>\n\n<pre><code>let f = map (tail.tail).lines\nf \"fasdf\\nfasdfdsfd\\n\"\n</code></pre>\n\n<p>Again, you break the input string into an array of strings: <code>[\"fasdf\",\"fasdfdsfd\"]</code></p>\n\n<p>Now however, you're creating a composite function <code>(tail.tail)</code> (drop the \"head\" of the list, twice), and mapping it to each element in the list.</p>\n\n<p>Therefore you drop the first two characters of each string.</p>\n\n<pre><code>[\"sdf\",\"sdfdsfd\"]\n</code></pre>\n\n<p>Both your examples are working as intended. Have a read about associativity and composite functions in haskell to understand more about it.</p>\n\n<p>Edit: the difference is essentially this:</p>\n\n<p><code>map tail (tail lines)</code> vs <code>map (tail.tail) lines</code></p>\n\n<p>Remember that in Haskell, functions are first class citizens - you can create composite functions (example: <code>(+1).(+1)</code>) and do other operations (such as <code>map</code> a function to a list) that are not common in other languages.</p>\n"}, {"comments": [{"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 1, "creation_date": 1501060833, "post_id": 45320775, "comment_id": 77607094, "body": "Minor point: it&#39;s not that important that <code>(.)</code> is right associative: even if it were left associative it wouldn&#39;t matter."}], "tags": [], "owner": {"reputation": 670, "user_id": 7781818, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/13f5392f913a0f47fab3e6719bda4b08?s=128&d=identicon&r=PG&f=1", "display_name": "Chris", "link": "https://stackoverflow.com/users/7781818/chris"}, "is_accepted": false, "score": 1, "last_activity_date": 1501055836, "creation_date": 1501055836, "answer_id": 45320775, "question_id": 45319850, "link": "https://stackoverflow.com/questions/45319850/confused-about-composite-function-with-map-in-haskell/45320775#45320775", "title": "confused about composite function with map in haskell", "body": "<p>The first post is exactly correct, however since you seam to have more questions, here is my attempt... </p>\n\n<p>When you try to understand what this code does, it is important to understand what the functions do and in what order they are applied, so lets have a look:</p>\n\n<pre><code>lines :: String -&gt; [String] --takes a String and returns a list of Strings\ntail :: [a] -&gt; [a] --takes a (nonempty) list and drops the head (a list containing the rest)\n(.) :: (b -&gt; c) -&gt; (a -&gt; b) -&gt; a -&gt; c --function composition\n</code></pre>\n\n<p>now this is important... Function composition is right associative and has a precedence of 9 (the highest!)</p>\n\n<pre><code>map :: (a -&gt; b) -&gt; [a] -&gt; [b] --applies (a -&gt; b) to every element of [a]\n</code></pre>\n\n<p>now to your code: </p>\n\n<pre><code>let f = map tail.tail.lines\n</code></pre>\n\n<p>is equivalent to </p>\n\n<pre><code>let f x = map tail ((tail.lines) $ x)\n</code></pre>\n\n<p>this means that you will map <code>tail</code> over the result of the <code>tail</code> of the result of <code>lines</code>. This behavior is because <code>(.)</code>, as well as function application is right associative in Haskell. It is also worth noting, that <code>(tail.lines)</code> is the result of partial function application (as you can see from the type-signature of (.) the <code>a</code> is missing... therefor it will return a function that takes an <code>a</code> and returns a <code>c</code>)</p>\n\n<p>In your later example:</p>\n\n<pre><code>let f = map (tail.tail).lines\n</code></pre>\n\n<p>the order of application is changed by the parenthesizes... this version is equivalent to:</p>\n\n<pre><code>let f x = map (tail.tail) (lines $ x)\n</code></pre>\n\n<p>so it will map <code>tail.tail</code> (dropping the head twice) over the result of <code>lines</code>.</p>\n\n<p>The key is understanding associativity. It determines which function gets applied first in the absence of parenthesizes and if the functions have the same precedence.</p>\n\n<p>I hope this helps you to understand the difference.</p>\n"}], "owner": {"reputation": 149, "user_id": 6581912, "user_type": "registered", "accept_rate": 12, "profile_image": "https://www.gravatar.com/avatar/5f01ffd293668d9f604ab20986d4b247?s=128&d=identicon&r=PG&f=1", "display_name": "mc.robin", "link": "https://stackoverflow.com/users/6581912/mc-robin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 331, "favorite_count": 0, "answer_count": 2, "score": 1, "last_activity_date": 1501071773, "creation_date": 1501052951, "last_edit_date": 1501064359, "question_id": 45319850, "link": "https://stackoverflow.com/questions/45319850/confused-about-composite-function-with-map-in-haskell", "title": "confused about composite function with map in haskell", "body": "<pre><code> let f = map tail.lines\n f \"fsdaf\\nfdsf\\n\"\n</code></pre>\n\n<p>why it work?</p>\n\n<pre><code>let f = map tail.tail.lines\nf \"fasdf\\nfasdfdsfd\\n\"\n</code></pre>\n\n<p>I get result:</p>\n\n<pre><code>[\"asdfdsfd\"]\nlet f = map (tail.tail).lines\nf \"fasdf\\nfasdfdsfd\\n\"\n</code></pre>\n\n<p>I get result:</p>\n\n<pre><code>[\"sdf\",\"sdfdsfd\"]\n</code></pre>\n\n<p>I want to know haskell how to parse the code above.</p>\n"}, {"tags": ["haskell", "functional-programming", "cabal"], "answers": [{"tags": [], "owner": {"reputation": 120, "user_id": 5702717, "user_type": "registered", "accept_rate": 50, "profile_image": "https://lh6.googleusercontent.com/-7lNast7_Pv4/AAAAAAAAAAI/AAAAAAAACUQ/ajwWWr_JiGA/photo.jpg?sz=128", "display_name": "Linh Ho&#224;ng", "link": "https://stackoverflow.com/users/5702717/linh-ho%c3%a0ng"}, "is_accepted": true, "score": 1, "last_activity_date": 1501050080, "creation_date": 1501050080, "answer_id": 45318942, "question_id": 45318617, "link": "https://stackoverflow.com/questions/45318617/cabal-threaded-options-not-working/45318942#45318942", "title": "cabal -threaded options not working", "body": "<p>Oh, I just have to run:</p>\n\n<pre><code>cabal clean\n</code></pre>\n\n<p>and</p>\n\n<pre><code>cabal run\n</code></pre>\n\n<p>again to compile with the new flag.</p>\n"}], "owner": {"reputation": 120, "user_id": 5702717, "user_type": "registered", "accept_rate": 50, "profile_image": "https://lh6.googleusercontent.com/-7lNast7_Pv4/AAAAAAAAAAI/AAAAAAAACUQ/ajwWWr_JiGA/photo.jpg?sz=128", "display_name": "Linh Ho&#224;ng", "link": "https://stackoverflow.com/users/5702717/linh-ho%c3%a0ng"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 978, "favorite_count": 0, "accepted_answer_id": 45318942, "answer_count": 1, "score": 0, "last_activity_date": 1501050080, "creation_date": 1501049049, "question_id": 45318617, "link": "https://stackoverflow.com/questions/45318617/cabal-threaded-options-not-working", "title": "cabal -threaded options not working", "body": "<p>I am trying out Haskell and Cabal. I created a project with this config file.</p>\n\n<pre><code>executable dictionary\n  main-is:             Main.hs\n  -- other-modules:       \n  -- other-extensions:    \n  ghc-options: -threaded -rtsopts\n\n  build-depends:       base &gt;=4.9 &amp;&amp; &lt;4.10, http-streams, io-streams, bytestring, HsOpenSSL\n  -- hs-source-dirs:      \n  default-language:    Haskell2010\n</code></pre>\n\n<p>I am trying to send a get request.</p>\n\n<pre><code>main :: IO ()\nmain = withOpenSSL $ do\n    putStrLn \"Type in a word\"\n    word &lt;- getLine\n    let word1 = filter isAlphaNum $ (words word) !! 0\n    putStrLn word1\n    ctx &lt;- baselineContextSSL\n    c &lt;- openConnectionSSL ctx url 443\n\n    let q = buildRequest1 $ do\n                http GET $ (C.pack $ \"/api/v1/entries/en/\" ++ word1)\n                setAccept (C.pack \"text/html\")\n                setHeader (C.pack \"app_id\") app_id\n                setHeader (C.pack \"app_key\") apli_id\n\n    sendRequest c q emptyBody\n\n    receiveResponse c (\\p i -&gt; do\n        S.putStrLn $ getStatusMessage p\n        xm &lt;- Streams.read i\n        case xm of\n            Just x    -&gt; S.putStr x\n            Nothing   -&gt; putStrLn \"\")\n    closeConnection c\n</code></pre>\n\n<p>I try to run cabal run but the results still:</p>\n\n<pre><code>Type in a word\ngo\ngo\ndictionary: user error (RTS doesn't support multiple OS threads (use ghc -threaded when linking))\n</code></pre>\n\n<p>I'm using macOS X siera</p>\n"}, {"tags": ["haskell", "functor"], "answers": [{"comments": [{"owner": {"reputation": 810, "user_id": 223689, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/72513b978e46e0d0db13ec5ede02108b?s=128&d=identicon&r=PG", "display_name": "Paul Spencer", "link": "https://stackoverflow.com/users/223689/paul-spencer"}, "edited": false, "score": 0, "creation_date": 1501045172, "post_id": 45317600, "comment_id": 77597521, "body": "thanks rein! To clarify my understanding:  the partial function returned from: fmap  (+1) (show) would take  3 and return &quot;4&quot;?"}, {"owner": {"reputation": 14582, "user_id": 2225384, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f30b04ed4d0b3fc4bc791a28815f34ca?s=128&d=identicon&r=PG", "display_name": "Rein Henrichs", "link": "https://stackoverflow.com/users/2225384/rein-henrichs"}, "reply_to_user": {"reputation": 810, "user_id": 223689, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/72513b978e46e0d0db13ec5ede02108b?s=128&d=identicon&r=PG", "display_name": "Paul Spencer", "link": "https://stackoverflow.com/users/223689/paul-spencer"}, "edited": false, "score": 1, "creation_date": 1501045418, "post_id": 45317600, "comment_id": 77597595, "body": "No, but <code>fmap show (+1)</code> would take <code>3</code> and return <code>&quot;4&quot;</code>. <code>fmap</code> here is <code>(.)</code>."}], "tags": [], "owner": {"reputation": 14582, "user_id": 2225384, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f30b04ed4d0b3fc4bc791a28815f34ca?s=128&d=identicon&r=PG", "display_name": "Rein Henrichs", "link": "https://stackoverflow.com/users/2225384/rein-henrichs"}, "is_accepted": true, "score": 4, "last_activity_date": 1501043989, "creation_date": 1501043989, "answer_id": 45317600, "question_id": 45317467, "link": "https://stackoverflow.com/questions/45317467/functors-from-partially-applied-function-type/45317600#45317600", "title": "functors from partially applied function type", "body": "<p>No, because the <code>a</code> in your instance declaration is not the same <code>a</code> as the one in the type of <code>fmap</code>. You need to assign a type variable in your instance declaration that avoids <a href=\"https://stackoverflow.com/a/11332661/2225384\">\"capturing\"</a> the <code>a</code> in the type of <code>fmap</code>:</p>\n\n<pre><code>instance Functor ((-&gt;) r) where\n  fmap :: (a -&gt; b) -&gt; (r -&gt; a) -&gt; (r -&gt; b)\n</code></pre>\n"}], "owner": {"reputation": 810, "user_id": 223689, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/72513b978e46e0d0db13ec5ede02108b?s=128&d=identicon&r=PG", "display_name": "Paul Spencer", "link": "https://stackoverflow.com/users/223689/paul-spencer"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 113, "favorite_count": 0, "accepted_answer_id": 45317600, "answer_count": 1, "score": 2, "last_activity_date": 1501043989, "creation_date": 1501043197, "last_edit_date": 1501043740, "question_id": 45317467, "link": "https://stackoverflow.com/questions/45317467/functors-from-partially-applied-function-type", "title": "functors from partially applied function type", "body": "<p>there is a quesion in Programming in Haskell that says: \nComplete the following declaration:</p>\n\n<pre><code>instance Functor ((-&gt;) a) where\n</code></pre>\n\n<p>Now as Functor Thing has a type definition of: </p>\n\n<pre><code>instance Functor Thing where    \n   --fmap::(a -&gt; b) -&gt; Thing a -&gt; Thing b \n</code></pre>\n\n<p>I was wondering if this reduction makes sense:</p>\n\n<pre><code>instance Functor ((-&gt;) a) where\n    -- fmap::(a -&gt; b) -&gt; ((-&gt;) a) a -&gt; ((-&gt;) a) b \n    -- therefore\n    -- fmap::(a -&gt; b) -&gt; a -&gt; a -&gt; (a -&gt; b) \n    -- therefore\n    -- fmap::b -&gt; b\n</code></pre>\n\n<p><strong>-- update ---</strong>\nI missed brackets, it should have been</p>\n\n<pre><code>instance Functor ((-&gt;) a) where\n    -- fmap::(a -&gt; b) -&gt; ((-&gt;) a) a -&gt; ((-&gt;) a) b \n    -- therefore\n    -- fmap::(a -&gt; b) -&gt; (a -&gt; a) -&gt; (a -&gt; b) \n    -- therefore\n    -- I should be returning a function of a -&gt; b\n</code></pre>\n"}, {"tags": ["haskell"], "answers": [{"comments": [{"owner": {"reputation": 149, "user_id": 6581912, "user_type": "registered", "accept_rate": 12, "profile_image": "https://www.gravatar.com/avatar/5f01ffd293668d9f604ab20986d4b247?s=128&d=identicon&r=PG&f=1", "display_name": "mc.robin", "link": "https://stackoverflow.com/users/6581912/mc-robin"}, "edited": false, "score": 0, "creation_date": 1501048687, "post_id": 45317488, "comment_id": 77598995, "body": "Thanks for your help."}], "tags": [], "owner": {"reputation": 7033, "user_id": 288201, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/b4b21f0f66f55fe614e7eeac6807f7f4?s=128&d=identicon&r=PG", "display_name": "Koterpillar", "link": "https://stackoverflow.com/users/288201/koterpillar"}, "is_accepted": false, "score": 7, "last_activity_date": 1501043301, "creation_date": 1501043301, "answer_id": 45317488, "question_id": 45317465, "link": "https://stackoverflow.com/questions/45317465/why-am-i-getting-the-equations-for-have-different-numbers-of-arguments-mes/45317488#45317488", "title": "Why am I getting the &quot;Equations for ... have different numbers of arguments&quot; message?", "body": "<p>In Haskell, arguments to function are separated by spaces. Therefore, the last equation has two arguments: <code>Just</code> of type <code>a -&gt; Maybe a</code> and <code>(x, y)</code> of type <code>(Int, L.ByteString)</code>. Since you want one argument, it should instead read:</p>\n\n<pre><code>shares (Just (x, y)) = Just x\n</code></pre>\n"}], "owner": {"reputation": 149, "user_id": 6581912, "user_type": "registered", "accept_rate": 12, "profile_image": "https://www.gravatar.com/avatar/5f01ffd293668d9f604ab20986d4b247?s=128&d=identicon&r=PG&f=1", "display_name": "mc.robin", "link": "https://stackoverflow.com/users/6581912/mc-robin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2006, "favorite_count": 0, "answer_count": 1, "score": 4, "last_activity_date": 1501048655, "creation_date": 1501043190, "last_edit_date": 1501048655, "question_id": 45317465, "link": "https://stackoverflow.com/questions/45317465/why-am-i-getting-the-equations-for-have-different-numbers-of-arguments-mes", "title": "Why am I getting the &quot;Equations for ... have different numbers of arguments&quot; message?", "body": "<p>The following function compiles and works:</p>\n\n<pre><code>shares :: Maybe (Int, L.ByteString) -&gt; Maybe Int                                                                                                                                                            \nshares a =                                                                                                                                                                                                  \n    case a of                                                                                                                                                                                               \n        Nothing        -&gt; Nothing                                                                                                                                                                           \n        Just (x, y)    -&gt; Just x\n</code></pre>\n\n<p>But when rewritten in the following form:</p>\n\n<pre><code>shares :: Maybe (Int, L.ByteString) -&gt; Maybe Int                                                                                                                                                            \nshares Nothing = Nothing                                                                                                                                                                                    \nshares Just (x, y) = Just x\n</code></pre>\n\n<p>I get errors</p>\n\n<pre><code>Equations for \u2018shares\u2019 have different numbers of arguments\n</code></pre>\n\n<p>I think it's same essentially.</p>\n"}, {"tags": ["haskell", "ghc", "ghci"], "answers": [{"comments": [{"owner": {"reputation": 75, "user_id": 8366756, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0b3afb0edfc9f62e3218e51b2f77b7a9?s=128&d=identicon&r=PG&f=1", "display_name": "InThisStyle10s6p", "link": "https://stackoverflow.com/users/8366756/inthisstyle10s6p"}, "edited": false, "score": 0, "creation_date": 1501037137, "post_id": 45316406, "comment_id": 77595376, "body": "That is certainly interesting. I would have thought that GHC would continue to evaluate the expression, but I suppose not. Is this due to UndecidableInstances, then? Also, when I try to run your alternate file, ghci claims that I need FlexibleInstances and AllowAmbiguousTypes."}, {"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "reply_to_user": {"reputation": 75, "user_id": 8366756, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0b3afb0edfc9f62e3218e51b2f77b7a9?s=128&d=identicon&r=PG&f=1", "display_name": "InThisStyle10s6p", "link": "https://stackoverflow.com/users/8366756/inthisstyle10s6p"}, "edited": false, "score": 0, "creation_date": 1501037192, "post_id": 45316406, "comment_id": 77595391, "body": "@InThisStyle10s6p What is the &quot;this&quot; in, &quot;Is this due to <code>UndecidableInstances</code>, then?&quot;?"}, {"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "reply_to_user": {"reputation": 75, "user_id": 8366756, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0b3afb0edfc9f62e3218e51b2f77b7a9?s=128&d=identicon&r=PG&f=1", "display_name": "InThisStyle10s6p", "link": "https://stackoverflow.com/users/8366756/inthisstyle10s6p"}, "edited": false, "score": 0, "creation_date": 1501037244, "post_id": 45316406, "comment_id": 77595410, "body": "@InThisStyle10s6p re: other extensions, yes, I just fixed up the alternate file. In my hubris, I didn&#39;t actually test my assertions, but I&#39;ve done so now."}, {"owner": {"reputation": 75, "user_id": 8366756, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0b3afb0edfc9f62e3218e51b2f77b7a9?s=128&d=identicon&r=PG&f=1", "display_name": "InThisStyle10s6p", "link": "https://stackoverflow.com/users/8366756/inthisstyle10s6p"}, "edited": false, "score": 0, "creation_date": 1501037364, "post_id": 45316406, "comment_id": 77595441, "body": "I mean, is this behaviour due to <code>UndecidableInstances</code>? I only ask because the type arithmetic page seems to suggest that GHC would fail to compile the example, at least at some point in the past."}, {"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "reply_to_user": {"reputation": 75, "user_id": 8366756, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0b3afb0edfc9f62e3218e51b2f77b7a9?s=128&d=identicon&r=PG&f=1", "display_name": "InThisStyle10s6p", "link": "https://stackoverflow.com/users/8366756/inthisstyle10s6p"}, "edited": false, "score": 0, "creation_date": 1501037495, "post_id": 45316406, "comment_id": 77595471, "body": "@InThisStyle10s6p Again, what behavior is &quot;this behavior&quot;? (Answering that means saying not just &quot;what happened&quot; but also &quot;what alternative behavior we&#39;re comparing to&quot;.) I suspect the type arithmetic page is just wrong, because (like me) in their hubris they didn&#39;t test their assertions. The fact that GHC does instance resolution in a recursive way has some very surprising consequences (like this one)."}, {"owner": {"reputation": 75, "user_id": 8366756, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0b3afb0edfc9f62e3218e51b2f77b7a9?s=128&d=identicon&r=PG&f=1", "display_name": "InThisStyle10s6p", "link": "https://stackoverflow.com/users/8366756/inthisstyle10s6p"}, "edited": false, "score": 0, "creation_date": 1501037751, "post_id": 45316406, "comment_id": 77595548, "body": "Oh sorry. By &quot;this behaviour&quot; I mean the fact that GHC stops once it has determined that &quot;we can have our original instance whenever we can have our original instance&quot;, as you say, instead of continuing to evaluate the expression."}, {"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "reply_to_user": {"reputation": 75, "user_id": 8366756, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0b3afb0edfc9f62e3218e51b2f77b7a9?s=128&d=identicon&r=PG&f=1", "display_name": "InThisStyle10s6p", "link": "https://stackoverflow.com/users/8366756/inthisstyle10s6p"}, "edited": false, "score": 0, "creation_date": 1501037951, "post_id": 45316406, "comment_id": 77595591, "body": "@InThisStyle10s6p The fact that the question (of whether instance resolution is recursive or not) can even arise depends critically on having <code>UndecidableInstances</code> enabled. So I don&#39;t think it&#39;s fair to say this behavior is &quot;due to&quot; <code>UndecidableInstances</code>; without it, it would reject the instances out of hand and we&#39;d never even get to the point where it has to do instance search."}, {"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "reply_to_user": {"reputation": 75, "user_id": 8366756, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0b3afb0edfc9f62e3218e51b2f77b7a9?s=128&d=identicon&r=PG&f=1", "display_name": "InThisStyle10s6p", "link": "https://stackoverflow.com/users/8366756/inthisstyle10s6p"}, "edited": false, "score": 0, "creation_date": 1501038090, "post_id": 45316406, "comment_id": 77595625, "body": "@InThisStyle10s6p However, for what it&#39;s worth, I went and downloaded the oldest GHC I could find, and it does indeed loop when trying to determine the type of <code>f</code>. So I was wrong that they were wrong!"}, {"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 0, "creation_date": 1501060382, "post_id": 45316406, "comment_id": 77606721, "body": "I believe this choice was made to allow for mutual recursion <code>instance A x =&gt; B x ; instance B x =&gt; A x</code> may have their methods to be mutually recursive. This would be impossible if the resolution algorithm looped forever."}], "tags": [], "owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "is_accepted": true, "score": 5, "last_activity_date": 1501037151, "last_edit_date": 1501037151, "creation_date": 1501036026, "answer_id": 45316406, "question_id": 45315886, "link": "https://stackoverflow.com/questions/45315886/haskell-type-level-lambda-calculus-error-or-lack-thereof/45316406#45316406", "title": "Haskell type-level lambda calculus error (or lack thereof)", "body": "<p>The type <code>u</code> is just a lone type variable -- just like the <code>a</code> in <code>undefined :: a</code>.</p>\n\n<p>To really boil this down to its bare essentials, consider this alternate file:</p>\n\n<pre><code>{-# LANGUAGE UndecidableInstances #-}\n{-# LANGUAGE FlexibleInstances #-}\n\nclass Loopy a\ninstance Loopy a =&gt; Loopy a\n\nx :: Loopy a =&gt; a\nx = undefined\n</code></pre>\n\n<p>If you ask for the type of <code>x</code> in ghci, it will tell you it has type <code>a</code>, with no context. That may seem a bit magical; you simply have to realize that instance resolution in GHC is perfectly well allowed to be recursive, and the implementation goes to great lengths to support this.</p>\n\n<p>We can follow along in detail with what's happening in your example, if you like, but it is very analogous to the above file. Here are the details.</p>\n\n<p>So, we'd like to see if we're allowed to have this instance:</p>\n\n<pre><code>Eval (App (Lam (App X X)) (Lam (App X X))) u\n</code></pre>\n\n<p>We know</p>\n\n<pre><code>instance (Eval s s', Apply s' t u) =&gt; Eval (App s t) u\n</code></pre>\n\n<p>so we're allowed to have it whenever we have both of these:</p>\n\n<pre><code>Eval (Lam (App X X)) s'\nApply s' (Lam (App X X)) u\n</code></pre>\n\n<p>The first one is easy, since:</p>\n\n<pre><code>instance Eval (Lam t) (Lam t)\n</code></pre>\n\n<p>So we're allowed to have our cake when we have:</p>\n\n<pre><code>Apply (Lam (App X X)) (Lam (App X X)) u\n</code></pre>\n\n<p>Since</p>\n\n<pre><code>instance (Subst s t u, Eval u u') =&gt; Apply (Lam s) t u'\n</code></pre>\n\n<p>to find our cake, we should check under these two rocks:</p>\n\n<pre><code>Subst (App X X) (Lam (App X X)) u\nEval u u'\n</code></pre>\n\n<p>From</p>\n\n<pre><code>instance (Subst s u s', Subst t u t') =&gt; Subst (App s t) u (App s' t')\n</code></pre>\n\n<p>we learn we can have cake when</p>\n\n<pre><code>Subst X (Lam (App X X)) s'\nSubst X (Lam (App X X)) t'\nEval (App s' t') u'\n</code></pre>\n\n<p>which is easy to make progress on, since:</p>\n\n<pre><code>instance Subst X u u\n</code></pre>\n\n<p>Therefore, we can have our original instance whenever:</p>\n\n<pre><code>Eval (App (Lam (App X X)) (Lam (App X X))) u'\n</code></pre>\n\n<p>But, hey presto! This is the original instance we were looking for. So in summary we can have our original instance whenever we can have our original instance. So we declare that we can have our original instance, and then we can have our original instance! Isn't that peachy.</p>\n"}], "owner": {"reputation": 75, "user_id": 8366756, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0b3afb0edfc9f62e3218e51b2f77b7a9?s=128&d=identicon&r=PG&f=1", "display_name": "InThisStyle10s6p", "link": "https://stackoverflow.com/users/8366756/inthisstyle10s6p"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 157, "favorite_count": 1, "accepted_answer_id": 45316406, "answer_count": 1, "score": 4, "last_activity_date": 1501037151, "creation_date": 1501031955, "question_id": 45315886, "link": "https://stackoverflow.com/questions/45315886/haskell-type-level-lambda-calculus-error-or-lack-thereof", "title": "Haskell type-level lambda calculus error (or lack thereof)", "body": "<p>I have been reading the page in the Haskell wiki on <a href=\"https://wiki.haskell.org/Type_arithmetic\" rel=\"nofollow noreferrer\">type arithmetic</a> and have had a little trouble with the section on the lambda calculus embedded in the type system. From that section, I gathered that the following code should not work with GHC/GHCi - apparently GHC shouldn't be able to determine the type signature of g.</p>\n\n<pre><code>{-# OPTIONS -fglasgow-exts #-}\n{-# LANGUAGE FlexibleContexts #-}\n{-# LANGUAGE UndecidableInstances #-}\n\ndata X\ndata App t u\ndata Lam t\n\nclass Subst s t u | s t -&gt; u\ninstance Subst X u u\ninstance (Subst s u s', Subst t u t') =&gt; Subst (App s t) u (App s' t')\ninstance Subst (Lam t) u (Lam t)\n\nclass Apply s t u | s t -&gt; u\ninstance (Subst s t u, Eval u u') =&gt; Apply (Lam s) t u'\n\nclass Eval t u | t -&gt; u\ninstance Eval X X\ninstance Eval (Lam t) (Lam t)\ninstance (Eval s s', Apply s' t u) =&gt; Eval (App s t) u\n\nf :: Eval (App (Lam X) X) u =&gt; u\nf = undefined\ng :: Eval (App (Lam (App X X )) (Lam (App X X ))) u =&gt; u\ng = undefined\n</code></pre>\n\n<p>Note that I had to add FlexibleContexts and UndecidableInstances, since the given code doesn't seem to compile without these extensions. However, when I run this with GHCi (version 8.0.2), I get the following results:</p>\n\n<pre><code>*Main&gt; :t f\nf :: X\n*Main&gt; :t g\ng :: u\n</code></pre>\n\n<p>This is especially strange to me, because the type u hasn't been defined anywhere. Is this a result of the two language extensions above interacting with each other and glasgow-exts? If so, how?</p>\n"}, {"tags": ["haskell", "typeclass", "overlapping-instances"], "comments": [{"owner": {"reputation": 75362, "user_id": 625403, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/786eed7da67079cb5d63a49d469af25b?s=128&d=identicon&r=PG", "display_name": "amalloy", "link": "https://stackoverflow.com/users/625403/amalloy"}, "edited": false, "score": 0, "creation_date": 1501026649, "post_id": 45314996, "comment_id": 77592888, "body": "I don&#39;t see any <code>instance IsInt Int where isInt _ = True</code> here, which makes me very confused about how you get anything to return True ever."}, {"owner": {"reputation": 49959, "user_id": 866915, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/09242131d6e17cbbe31e8547514da6e5?s=128&d=identicon&r=PG", "display_name": "ErikR", "link": "https://stackoverflow.com/users/866915/erikr"}, "reply_to_user": {"reputation": 75362, "user_id": 625403, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/786eed7da67079cb5d63a49d469af25b?s=128&d=identicon&r=PG", "display_name": "amalloy", "link": "https://stackoverflow.com/users/625403/amalloy"}, "edited": false, "score": 0, "creation_date": 1501027475, "post_id": 45314996, "comment_id": 77593089, "body": "Yes - I missed that line. Question updated."}, {"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 0, "creation_date": 1501030488, "post_id": 45314996, "comment_id": 77593744, "body": "This is one of the reasons overlapping instances are so horrible. If you leave out an instance, everything will compile and everything will be wrong."}], "answers": [{"comments": [{"owner": {"reputation": 49959, "user_id": 866915, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/09242131d6e17cbbe31e8547514da6e5?s=128&d=identicon&r=PG", "display_name": "ErikR", "link": "https://stackoverflow.com/users/866915/erikr"}, "edited": false, "score": 0, "creation_date": 1501032602, "post_id": 45315417, "comment_id": 77594203, "body": "I guess I understand, but the surprising thing is the code behaves differently depending on whether or not the constraint is present or not, and I don&#39;t get any indication from GHC either in the form of an error or warning that I might be in for a surprise."}, {"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "reply_to_user": {"reputation": 49959, "user_id": 866915, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/09242131d6e17cbbe31e8547514da6e5?s=128&d=identicon&r=PG", "display_name": "ErikR", "link": "https://stackoverflow.com/users/866915/erikr"}, "edited": false, "score": 1, "creation_date": 1501034035, "post_id": 45315417, "comment_id": 77594526, "body": "@ErikR That&#39;s what you signed up for when you enabled <code>OverlappingInstances</code>, I&#39;m afraid."}], "tags": [], "owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "is_accepted": true, "score": 3, "last_activity_date": 1501028255, "creation_date": 1501028255, "answer_id": 45315417, "question_id": 45314996, "link": "https://stackoverflow.com/questions/45314996/ghc-uses-catch-all-instance-if-constraint-is-missing/45315417#45315417", "title": "GHC uses catch-all instance if constraint is missing?", "body": "<p>Yes, this is the expected behavior. If you write</p>\n\n<pre><code>instance Foo a\n</code></pre>\n\n<p>you are declaring that all types are instances of <code>Foo</code>, and GHC <em>believes</em> you.</p>\n\n<p>This is 100% analogous to the following:</p>\n\n<pre><code>foo :: Int -&gt; Bool\nfoo x = x &gt; 0\n</code></pre>\n\n<p>Even though you don't have <code>Ord Int</code> in the context, GHC knows there is such an instance. Likewise, in:</p>\n\n<pre><code>bar :: a -&gt; b\nbar x = {- use the Foo instance for x here -}\n</code></pre>\n\n<p>Even though you don't have <code>Foo a</code> in the context, GHC knows there is such an instance.</p>\n"}], "owner": {"reputation": 49959, "user_id": 866915, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/09242131d6e17cbbe31e8547514da6e5?s=128&d=identicon&r=PG", "display_name": "ErikR", "link": "https://stackoverflow.com/users/866915/erikr"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 57, "favorite_count": 0, "accepted_answer_id": 45315417, "answer_count": 1, "score": 0, "last_activity_date": 1501028255, "creation_date": 1501025088, "last_edit_date": 1501027506, "question_id": 45314996, "link": "https://stackoverflow.com/questions/45314996/ghc-uses-catch-all-instance-if-constraint-is-missing", "title": "GHC uses catch-all instance if constraint is missing?", "body": "<p>I've been experimenting with this simple implementation of HLists and a function <code>hasInt</code> which returns <code>True</code> if an <code>Int</code> is a member of the list:</p>\n\n<pre><code>{-# LANGUAGE FlexibleInstances #-}\n\ndata HNil = HNil\n  deriving (Show, Read)\n\ndata HCons a b = HCons a b\n  deriving (Show, Read)\n\nclass HasInt a where\n  hasInt :: a -&gt; Bool\n\ninstance HasInt HNil where\n  hasInt _ = False\n\ninstance HasInt as =&gt; HasInt (HCons a as) where\n  hasInt (HCons a as) =  (isInt a) || (hasInt as)\n\nclass IsInt a where\n  isInt :: a -&gt; Bool\n\ninstance IsInt Int where\n  isInt _ = True\n\ninstance {-# OVERLAPPABLE #-} IsInt a where\n  isInt _ = False\n\nthree = 3 :: Int\n\nmain = do\n  putStrLn $ \"isInt three = \" ++ show (isInt three) -- True\n  putStrLn $ \"isInt True  = \" ++ show (isInt True)  -- False\n  print $ hasInt $ HCons three $ HCons True HNil    -- False ???\n</code></pre>\n\n<p>This doesn't give the expected results. However, it does seem to work if I change:</p>\n\n<pre><code>    instance HasInt as =&gt; HasInt (HCons a as) where\n</code></pre>\n\n<p>to:</p>\n\n<pre><code>    instance (IsInt a, HasInt as) =&gt; HasInt (HCons a as) where\n</code></pre>\n\n<p>On the other hand, I normally expect GHC to complain if I use a type class function but don't include the constraint, and I don't get any such indication in this case.</p>\n\n<p>Clearly it has to do something with the catch-all instance <code>IsInt a</code>. I will get the <code>Could not deduce (IsInt a) arising from a use of 'isInt'</code>\nerror if I replace the catch-all instance with:</p>\n\n<pre><code>instance IsInt Bool where isInt _ = False\ninstance IsInt HNil where isInt _ = False\n</code></pre>\n\n<p>My question is: Is this expected behavior of GHC - that it will silently use a catch-all instance if there is no explicit type class constraint?</p>\n"}, {"tags": ["haskell", "state-monad"], "comments": [{"owner": {"reputation": 28376, "user_id": 5743988, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/IeSSM.jpg?s=128&g=1", "display_name": "4castle", "link": "https://stackoverflow.com/users/5743988/4castle"}, "edited": false, "score": 1, "creation_date": 1501007919, "post_id": 45311012, "comment_id": 77584604, "body": "<code>runState</code> returns <code>(a, s)</code> which means your <code>main</code> is using the <code>(,) a</code> monad. <code>evalState</code> doesn&#39;t return a value in the same monad, so they can&#39;t be composed with <code>do</code> notation."}, {"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 0, "creation_date": 1501008382, "post_id": 45311012, "comment_id": 77584876, "body": "Adding a type annotation to main can produce better error messages. You probably want to <code>print</code> the results to make everything type check."}, {"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "edited": false, "score": 0, "creation_date": 1501018155, "post_id": 45311012, "comment_id": 77590163, "body": "I challenge the assertion that &quot;It&#39;d run if I removed either of them.&quot;. Have you tested this? When I try it, I get a complaint that <code>main</code> does not have an <code>IO</code> type."}, {"owner": {"reputation": 28376, "user_id": 5743988, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/IeSSM.jpg?s=128&g=1", "display_name": "4castle", "link": "https://stackoverflow.com/users/5743988/4castle"}, "reply_to_user": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "edited": false, "score": 1, "creation_date": 1501024258, "post_id": 45311012, "comment_id": 77592238, "body": "@DanielWagner It doesn&#39;t complain for me if loaded using GHCi"}, {"owner": {"reputation": 61419, "user_id": 849891, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/MbEO3.png?s=128&g=1", "display_name": "Will Ness", "link": "https://stackoverflow.com/users/849891/will-ness"}, "edited": false, "score": 0, "creation_date": 1501028376, "post_id": 45311012, "comment_id": 77593301, "body": "<code>runState</code> returns <code>(a, s)</code> and <code>runStateT</code> returns <code>m (a, s)</code> i.e. <code>IO (a, s)</code> here. Similarly <code>IO a</code> for the <code>evalSTateT</code>. Now both are <code>IO ...</code>, so it&#39;s OK. This still won&#39;t perform any I/O though, just &quot;return&quot; the last integer. You can see the types in GHCi with the <code>:t</code> command at its prompt (e.g., <code>:t runStateT</code>)."}, {"owner": {"reputation": 159, "user_id": 8237830, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/ee8cfbfaf68eb21e3587f7741f1e837b?s=128&d=identicon&r=PG&f=1", "display_name": "4xx", "link": "https://stackoverflow.com/users/8237830/4xx"}, "reply_to_user": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "edited": false, "score": 0, "creation_date": 1501098608, "post_id": 45311012, "comment_id": 77634336, "body": "@DanielWagner thanks for your comment. Yes, I tested, and that&#39;s why I said it runs if I removed one of them. I don&#39;t know why it compiled on m machine!"}], "answers": [{"tags": [], "owner": {"reputation": 13441, "user_id": 2199600, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/8sl6u.jpg?s=128&g=1", "display_name": "Igor Drozdov", "link": "https://stackoverflow.com/users/2199600/igor-drozdov"}, "is_accepted": false, "score": 4, "last_activity_date": 1501010348, "creation_date": 1501010348, "answer_id": 45311838, "question_id": 45311012, "link": "https://stackoverflow.com/questions/45311012/haskell-state-monad/45311838#45311838", "title": "Haskell: State Monad", "body": "<p>In your case <code>do-notation</code> is a syntactic sugar for</p>\n\n<pre><code>(runState ma (Dp 2 3)) &gt;&gt; (evalState ma (Dp 2 3))\n</code></pre>\n\n<p>The type of <code>(&gt;&gt;)</code> is <code>Monad m =&gt; m a -&gt; m b -&gt; m b</code> which means that <code>runState ma (Dp 2 3)</code> and <code>evalState ma (Dp 2 3)</code> must be in the same monad, but they are not</p>\n\n<p>But the code doesn't work mostly for another reason. The function <code>main</code> has the following type annotation: <code>main :: IO a</code> which means that <code>main</code> expects an action to be performed in it (for example printing the results)</p>\n\n<pre><code>main :: IO ()\nmain = do\n  print $ runState ma (Dp 2 3)\n  print $ evalState ma (Dp 2 3)\n</code></pre>\n\n<p>That works, because</p>\n\n<ul>\n<li>type of <code>print $ runState ma (Dp 2 3)</code> is <code>IO ((), Dp)</code></li>\n<li>type of <code>print $ evalState ma (Dp 2 3)</code> is <code>IO ()</code></li>\n</ul>\n\n<p>Hence, inferred type for <code>&gt;&gt;</code> is <code>IO ((), Dp) -&gt; IO () -&gt; IO ()</code> which doesn't violate <code>Monad m =&gt; m a -&gt; m b -&gt; m b</code>. And the resulting type is <code>IO ()</code> which suits for <code>main :: IO a</code></p>\n"}], "owner": {"reputation": 159, "user_id": 8237830, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/ee8cfbfaf68eb21e3587f7741f1e837b?s=128&d=identicon&r=PG&f=1", "display_name": "4xx", "link": "https://stackoverflow.com/users/8237830/4xx"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 316, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1501010348, "creation_date": 1501007228, "last_edit_date": 1501008853, "question_id": 45311012, "link": "https://stackoverflow.com/questions/45311012/haskell-state-monad", "title": "Haskell: State Monad", "body": "<p>I'm trying to learn Haskell. I wrote a code that uses a global state and can change it using two functions (i.e. change1 and change 2). Also, I have included lens so I can learn it too.   The problem is very last line of the code. I don't understand why I cannot include the two last lines together in the main. It'd run if I remove either of them. </p>\n\n<pre><code>{-# LANGUAGE TemplateHaskell #-}\n\nmodule Dd (main, ma, change1,change2, Dp(Dp))  where\nimport Control.Lens\nimport Control.Monad.State\nimport Control.Monad.IO.Class (liftIO)\n\ndata Dp = Dp {_sr  :: Int , _fl :: Int} deriving (Show)\nmakeLenses ''Dp\n\nplus ::  Dp  -&gt; Dp\nplus  = over (sr) (+90)\n\nmult4 ::  Dp  -&gt; Dp\nmult4 = over (fl) (*100)\n\nchange1 :: State Dp ()\nchange1 = modify plus\n\nchange2 :: State Dp () \nchange2  = modify  mult4 \n\nma :: State Dp ()\nma  = do \n      change1\n      change2 \n\nmain = do \n     runState ma (Dp 2 3)\n     evalState ma (Dp 2 3)-- here is the problem\n</code></pre>\n\n<p>Edit: I'm a bit confused: Why below code runs without an error?</p>\n\n<pre><code>data Dp = Dp {_sr  :: Int , _fl :: Int} deriving (Show)\n\nmakeLenses ''Dp\ngs :: StateT Dp IO Int\ngs = do \nd &lt;- gets _sr\nliftIO $ print (d)\ndd&lt;- uses sr (10&lt;=)\nif (dd) then \n            return (10)\n            else return (90)\n main  =  do \n        runStateT gs (Dp 3 6)\n        evalStateT gs (Dp 3 6)\n</code></pre>\n"}, {"tags": ["haskell"], "answers": [{"comments": [{"owner": {"reputation": 4071, "user_id": 3806046, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/5fedf50ce7cd2659bca902e9a2969158?s=128&d=identicon&r=PG&f=1", "display_name": "jkeuhlen", "link": "https://stackoverflow.com/users/3806046/jkeuhlen"}, "edited": false, "score": 0, "creation_date": 1500997516, "post_id": 45307973, "comment_id": 77577913, "body": "Are there any other ways to combine instances? Admittedly, my use case is more complex than what I presented. For example, what if the default instance also requires <code>Show</code>? (<code>instance Show a =&gt; TestClass a where ...</code>"}, {"owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "reply_to_user": {"reputation": 4071, "user_id": 3806046, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/5fedf50ce7cd2659bca902e9a2969158?s=128&d=identicon&r=PG&f=1", "display_name": "jkeuhlen", "link": "https://stackoverflow.com/users/3806046/jkeuhlen"}, "edited": false, "score": 0, "creation_date": 1500997590, "post_id": 45307973, "comment_id": 77577971, "body": "@jkeuhlen well, ask a more specific question then."}, {"owner": {"reputation": 4071, "user_id": 3806046, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/5fedf50ce7cd2659bca902e9a2969158?s=128&d=identicon&r=PG&f=1", "display_name": "jkeuhlen", "link": "https://stackoverflow.com/users/3806046/jkeuhlen"}, "reply_to_user": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "edited": false, "score": 0, "creation_date": 1500997717, "post_id": 45307973, "comment_id": 77578075, "body": "@leftaroundabout: I probably will, but I also learned something from this answer and it is helpful to the question as asked, so I&#39;m not just going to edit my current question or ask a new one without first following up here."}, {"owner": {"reputation": 37219, "user_id": 1523776, "user_type": "moderator", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/b3e0b5c8e42a8c38009ef2d969f8dabb?s=128&d=identicon&r=PG", "display_name": "Benjamin Hodgson", "link": "https://stackoverflow.com/users/1523776/benjamin-hodgson"}, "reply_to_user": {"reputation": 4071, "user_id": 3806046, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/5fedf50ce7cd2659bca902e9a2969158?s=128&d=identicon&r=PG&f=1", "display_name": "jkeuhlen", "link": "https://stackoverflow.com/users/3806046/jkeuhlen"}, "edited": false, "score": 5, "creation_date": 1500997769, "post_id": 45307973, "comment_id": 77578127, "body": "@jkeuhlen <code>DefaultSignatures</code> allows you to declare a default with a type that is more specific. <a href=\"https://github.com/bos/aeson/blob/08fcbcd6ed65d9b3d80300e2bd363bfcd76e38bd/Data/Aeson/Types/ToJSON.hs#L284\" rel=\"nofollow noreferrer\">See <code>aeson</code> for an example</a>"}, {"owner": {"reputation": 4071, "user_id": 3806046, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/5fedf50ce7cd2659bca902e9a2969158?s=128&d=identicon&r=PG&f=1", "display_name": "jkeuhlen", "link": "https://stackoverflow.com/users/3806046/jkeuhlen"}, "reply_to_user": {"reputation": 37219, "user_id": 1523776, "user_type": "moderator", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/b3e0b5c8e42a8c38009ef2d969f8dabb?s=128&d=identicon&r=PG", "display_name": "Benjamin Hodgson", "link": "https://stackoverflow.com/users/1523776/benjamin-hodgson"}, "edited": false, "score": 1, "creation_date": 1500998017, "post_id": 45307973, "comment_id": 77578332, "body": "@BenjaminHodgson That&#39;s exactly what I&#39;m looking for thanks! If you&#39;d like to add an answer, or edit it into WillemVanOnsem&#39;s answer (with approval) I think it deserves to be at a higher level than a comment. Thanks! It&#39;s in the link in the main answer already, but you have to look for it. I didn&#39;t realize that extension even existed."}], "tags": [], "owner": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "is_accepted": true, "score": 6, "last_activity_date": 1500997636, "last_edit_date": 1500997636, "creation_date": 1500997345, "answer_id": 45307973, "question_id": 45307865, "link": "https://stackoverflow.com/questions/45307865/is-it-possible-to-combine-instances-of-a-typeclass/45307973#45307973", "title": "Is it possible to combine instances of a typeclass?", "body": "<p>In Haskell 98, you can <strong>put <a href=\"https://downloads.haskell.org/~ghc/7.2.1/docs/html/users_guide/type-class-extensions.html#class-default-signatures\" rel=\"nofollow noreferrer\">default implementations</a> in the <code>class</code> definition</strong>:</p>\n\n<pre><code>class TestClass a where\n    foo :: a -&gt; Maybe Text \n    <b>foo _ = Nothing</b>  -- default implementation\n    bar :: a -&gt; [Int]\n    <b>bar _ = []</b>       -- default implementation</code></pre>\n\n<p>Now for all <code>instance</code>s where you do not implement <code>foo</code> or <code>bar</code> yourself, it will take the default implementation.</p>\n"}], "owner": {"reputation": 4071, "user_id": 3806046, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/5fedf50ce7cd2659bca902e9a2969158?s=128&d=identicon&r=PG&f=1", "display_name": "jkeuhlen", "link": "https://stackoverflow.com/users/3806046/jkeuhlen"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 92, "favorite_count": 0, "accepted_answer_id": 45307973, "answer_count": 1, "score": 2, "last_activity_date": 1500997636, "creation_date": 1500997044, "question_id": 45307865, "link": "https://stackoverflow.com/questions/45307865/is-it-possible-to-combine-instances-of-a-typeclass", "title": "Is it possible to combine instances of a typeclass?", "body": "<p>I have a feeling this isn't possible, but would love some input to see if there's some extensions or techniques I'm missing. </p>\n\n<p>I have a generic instance of a typeclass that defines some default methods: </p>\n\n<pre><code>class TestClass a where \n  foo :: a -&gt; Maybe Text \n  bar :: a -&gt; [Int]\n\ninstance TestClass a where \n  foo _ = Nothing \n  bar _ = []\n\ndata SpecificType = SomeValue | OtherValue\n\ninstance TestClass SpecificType where \n  foo SomeValue = Just \"Success\"\n  foo OtherValue = Just \"Other Success\"\n</code></pre>\n\n<p>I believe this already needs <code>OverlappingInstances</code>, but the problem is that the instance of <code>TestClass</code> for <code>SpecificType</code> doesn't implement <code>bar</code>. I'd like to only declare a part of the second instance, and use the default implementation for the rest. Is there a way to achieve this? </p>\n"}, {"tags": ["haskell"], "comments": [{"owner": {"reputation": 35578, "user_id": 3000206, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/BK1fo.jpg?s=128&g=1", "display_name": "Carcigenicate", "link": "https://stackoverflow.com/users/3000206/carcigenicate"}, "edited": false, "score": 0, "creation_date": 1500994316, "post_id": 45306764, "comment_id": 77575414, "body": "<code>where</code> is separate from the <code>do</code> afaik. I think where&#39;s automatically have function scope."}, {"owner": {"reputation": 35578, "user_id": 3000206, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/BK1fo.jpg?s=128&g=1", "display_name": "Carcigenicate", "link": "https://stackoverflow.com/users/3000206/carcigenicate"}, "edited": false, "score": 0, "creation_date": 1500994376, "post_id": 45306764, "comment_id": 77575480, "body": "Related to: <a href=\"https://stackoverflow.com/questions/9721354/in-haskell-what-is-the-scope-of-a-where-clause-when-dealing-with-guards\" title=\"in haskell what is the scope of a where clause when dealing with guards\">stackoverflow.com/questions/9721354/&hellip;</a>"}, {"owner": {"reputation": 78982, "user_id": 1848654, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/84180c0f3c9c04f8b8f0613fc0129dac?s=128&d=identicon&r=PG", "display_name": "melpomene", "link": "https://stackoverflow.com/users/1848654/melpomene"}, "edited": false, "score": 10, "creation_date": 1500994469, "post_id": 45306764, "comment_id": 77575547, "body": "<code>do ...</code> is an expression. <code>where</code> never attaches to expressions, only to declarations."}, {"owner": {"reputation": 13807, "user_id": 2407038, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/538f6f4a9aa43841841de7d8e8b169fc?s=128&d=identicon&r=PG&f=1", "display_name": "user2407038", "link": "https://stackoverflow.com/users/2407038/user2407038"}, "reply_to_user": {"reputation": 78982, "user_id": 1848654, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/84180c0f3c9c04f8b8f0613fc0129dac?s=128&d=identicon&r=PG", "display_name": "melpomene", "link": "https://stackoverflow.com/users/1848654/melpomene"}, "edited": false, "score": 5, "creation_date": 1500995382, "post_id": 45306764, "comment_id": 77576242, "body": "<code>do { ..; where { .. } }</code> is never valid, because as @melpomene says, <code>where</code> is never associated with an expression. The first program with explicit layout is <code>do { .. } where { .. }</code>"}, {"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 2, "creation_date": 1500998952, "post_id": 45306764, "comment_id": 77578997, "body": "For what it is worth, in my personal style I never mix <code>do</code> and <code>where</code>. More in general, I try to avoid <code>where</code> except after <code>... = expr</code> with <code>expr</code> being 1 or at most 2 lines long. Since <code>do</code> is longer than that, <code>where</code> is avoided. Further, <code>do</code> allows <code>let</code> inside it, so one can use that instead."}], "answers": [{"tags": [], "owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "is_accepted": true, "score": 9, "last_activity_date": 1501001774, "creation_date": 1501001774, "answer_id": 45309463, "question_id": 45306764, "link": "https://stackoverflow.com/questions/45306764/how-do-do-and-where-mix/45309463#45309463", "title": "How do `do` and `where` mix?", "body": "<p>The <code>where</code> blocks belong neither to the <code>runST $ do ...</code> expression nor to the <code>go n mvec</code> statement; they belong to the <code>mutableUpdateIO n = ...</code> declaration and the <code>mutableUpdateST n = ...</code> declaration. The braces and semicolons should go like this:</p>\n\n<pre><code>mutableUpdateIO :: Int -&gt; IO (MV.MVector RealWorld Int)\nmutableUpdateIO n = do {\n  mvec &lt;- GM.new (n + 1);\n  go n mvec;\n  } where {\n    go 0 v = return v;\n    go n v = (MV.write v n 0) &gt;&gt; go (n - 1) v;\n  }\n</code></pre>\n\n<p>The relevant sentence from the informal description in the Report in chapter 2.7 is this:</p>\n\n<blockquote>\n  <p>A close brace is also inserted whenever the syntactic category containing the layout list ends; that is, if an illegal lexeme is encountered at a point where a close brace would be legal, a close brace is inserted.</p>\n</blockquote>\n\n<p>Since <code>where</code> is an illegal lexeme inside an expression, this ends the <code>do</code> block and a close brace is inserted there. This also explains why the layout hindent produced was legal.</p>\n"}], "owner": {"reputation": 3587, "user_id": 7824574, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/a639be4c9ecc139065fbc6b12b87e6a9?s=128&d=identicon&r=PG&f=1", "display_name": "typetetris", "link": "https://stackoverflow.com/users/7824574/typetetris"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 133, "favorite_count": 0, "accepted_answer_id": 45309463, "answer_count": 1, "score": 7, "last_activity_date": 1501001774, "creation_date": 1500994203, "question_id": 45306764, "link": "https://stackoverflow.com/questions/45306764/how-do-do-and-where-mix", "title": "How do `do` and `where` mix?", "body": "<p>From some book I have the following code snippets</p>\n\n<pre><code>mutableUpdateIO :: Int -&gt; IO (MV.MVector RealWorld Int)\nmutableUpdateIO n = do\n  mvec &lt;- GM.new (n + 1)\n  go n mvec\n  where\n    go 0 v = return v\n    go n v = (MV.write v n 0) &gt;&gt; go (n - 1) v\n\nmutableUpdateST :: Int -&gt; V.Vector Int\nmutableUpdateST n =\n  runST $ do\n    mvec &lt;- GM.new (n + 1)\n    go n mvec\n  where\n    go 0 v = V.freeze v\n    go n v = (MV.write v n 0) &gt;&gt; go (n - 1) v\n</code></pre>\n\n<p>like <code>hindent</code> indents them. Now I want to introduce all braces and semicolons, so the whitespace isn't relevant any more. Just because I am curious.</p>\n\n<p>The second example suggests, that the <code>where</code> belongs to the whole <code>runST $ do ...</code> expression, but the first example suggests, that the where is somehow a part of the <code>go n mvec</code> statement. Reading in <a href=\"https://www.haskell.org/onlinereport/haskell2010/haskellch2.html#x7-210002.7\" rel=\"noreferrer\">Haskell Report Chapter 2.7</a> I tried to introduce braces and semicolons in the first example like</p>\n\n<pre><code>mutableUpdateIO :: Int -&gt; IO (MV.MVector RealWorld Int)\nmutableUpdateIO n = do {\n  mvec &lt;- GM.new (n + 1);\n  go n mvec;\n  where {\n    go 0 v = return v;\n    go n v = (MV.write v n 0) &gt;&gt; go (n - 1) v;\n  } ; }\n</code></pre>\n\n<p>But I get a parsing error. Why is that?</p>\n\n<p>Why is the layout <code>hindent</code> produces for the first example <code>mutableUpdateIO</code> valid Haskell? Shouldn't the braces and semicolons be introduced like in my above try?</p>\n"}, {"tags": ["haskell"], "comments": [{"owner": {"reputation": 16233, "user_id": 4253229, "user_type": "registered", "accept_rate": 83, "profile_image": "https://lh4.googleusercontent.com/-e2FAQvlj5CQ/AAAAAAAAAAI/AAAAAAAAAqM/TlSnekirgNE/photo.jpg?sz=128", "display_name": "Eugene Sh.", "link": "https://stackoverflow.com/users/4253229/eugene-sh"}, "edited": false, "score": 0, "creation_date": 1500993121, "post_id": 45306337, "comment_id": 77574500, "body": "Isn&#39;t it a <i>challenge</i> for you, not us?"}, {"owner": {"reputation": 1842, "user_id": 5861569, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/AuMZG.png?s=128&g=1", "display_name": "Khundragpan", "link": "https://stackoverflow.com/users/5861569/khundragpan"}, "edited": false, "score": 1, "creation_date": 1500993782, "post_id": 45306337, "comment_id": 77574991, "body": "You can also write it as <code>liftA2 (&#47;) sum (fromIntegral . length)</code>"}, {"owner": {"reputation": 78982, "user_id": 1848654, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/84180c0f3c9c04f8b8f0613fc0129dac?s=128&d=identicon&r=PG", "display_name": "melpomene", "link": "https://stackoverflow.com/users/1848654/melpomene"}, "edited": false, "score": 6, "creation_date": 1500994288, "post_id": 45306337, "comment_id": 77575385, "body": "<code>pure f &lt;*&gt; x = f &lt;$&gt; x</code>"}], "answers": [{"tags": [], "owner": {"reputation": 1404, "user_id": 5559663, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/sQiE2.gif?s=128&g=1", "display_name": "baxbaxwalanuksiwe", "link": "https://stackoverflow.com/users/5559663/baxbaxwalanuksiwe"}, "is_accepted": true, "score": 3, "last_activity_date": 1500994361, "creation_date": 1500994361, "answer_id": 45306828, "question_id": 45306337, "link": "https://stackoverflow.com/questions/45306337/can-some-explain-how-the-following-code-works/45306828#45306828", "title": "Can some explain how the following code works?", "body": "<p>This code uses the <code>Applicative</code> instance of the <code>(-&gt;) a</code> type, which is defined <a href=\"http://hackage.haskell.org/package/base-4.10.0.0/docs/src/GHC.Base.html#line-697\" rel=\"nofollow noreferrer\">here</a> as:</p>\n\n<pre><code>instance Applicative ((-&gt;) a) where\n    pure = const\n    (&lt;*&gt;) f g x = f x (g x)\n</code></pre>\n\n<p>You can interpret this implementation by thinking of <code>naryFunction &lt;$&gt; f1 &lt;*&gt; f2 &lt;*&gt; ... &lt;*&gt; fn</code> as \"apply the same parameter to all n functions and apply the resulting arguments to <code>naryFunction</code>\".</p>\n\n<p>In your case, <code>(/) &lt;$&gt; sum &lt;*&gt; fromIntegral . length</code> can be thought as <code>\\ xs -&gt;\n (/) (sum xs) ((fromIntegral . length) xs)</code> which is just <code>sum xs / fromIntegral (length xs)</code>.</p>\n\n<p>You can prove this by simply expanding your expression with the definition of <code>(&lt;*&gt;)</code>:</p>\n\n<pre><code>avg = (/) &lt;$&gt; sum &lt;*&gt; fromIntegral . length\navg = fmap (/) sum &lt;*&gt; fromIntegral . length\navg xs = (fmap (/) sum) xs ((fromIntegral . length) xs)\navg xs = ((/) . sum xs) (fromIntegral (length xs))  -- fmap f g = f . g\navg xs = sum xs / fromIntegral (length xs)\n</code></pre>\n"}], "owner": {"reputation": 319, "user_id": 7828400, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/70c46d81a1497ce29153f498b5362904?s=128&d=identicon&r=PG", "display_name": "user28522", "link": "https://stackoverflow.com/users/7828400/user28522"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 93, "favorite_count": 1, "accepted_answer_id": 45306828, "answer_count": 1, "score": 1, "last_activity_date": 1500994361, "creation_date": 1500993058, "last_edit_date": 1500994075, "question_id": 45306337, "link": "https://stackoverflow.com/questions/45306337/can-some-explain-how-the-following-code-works", "title": "Can some explain how the following code works?", "body": "<p>I am doing a coding challenge in codewar: Write function avg which calculates average of numbers in given list. My solution works but I don't quite understand one of the solutions of others. Can anyone explain? </p>\n\n<pre><code>avg :: [Float] -&gt; Float\navg = (/) &lt;$&gt; sum &lt;*&gt; fromIntegral . length\n</code></pre>\n\n<p>Shouldn't it be:</p>\n\n<pre><code>avg l = pure (/) &lt;*&gt; sum l &lt;*&gt; fromIntegral . length  $ l \n</code></pre>\n"}, {"tags": ["haskell"], "comments": [{"owner": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "edited": false, "score": 1, "creation_date": 1500987944, "post_id": 45304154, "comment_id": 77569941, "body": "The specifications of the functions do not mention anything in case of a <i>status quo</i>, so I think it is the freedom of the programmer to come up with a <i>tie breaker</i>."}, {"owner": {"reputation": 20870, "user_id": 40916, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/24ac39488e9c4f2833d087a1343707dc?s=128&d=identicon&r=PG", "display_name": "yairchu", "link": "https://stackoverflow.com/users/40916/yairchu"}, "reply_to_user": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "edited": false, "score": 0, "creation_date": 1500988496, "post_id": 45304154, "comment_id": 77570414, "body": "@WillemVanOnsem true, however sometimes the code can be more succinct you use an assumption instead. i.e <code>minimumOn length texts</code> instead of the much more verbose <code>map snd (minimumOn (\\(p, t) -&gt; (length t, p)) (zip [0..] texts))</code>"}, {"owner": {"reputation": 16233, "user_id": 4253229, "user_type": "registered", "accept_rate": 83, "profile_image": "https://lh4.googleusercontent.com/-e2FAQvlj5CQ/AAAAAAAAAAI/AAAAAAAAAqM/TlSnekirgNE/photo.jpg?sz=128", "display_name": "Eugene Sh.", "link": "https://stackoverflow.com/users/4253229/eugene-sh"}, "edited": false, "score": 1, "creation_date": 1500989839, "post_id": 45304154, "comment_id": 77571661, "body": "I think it has a specific order to maintain the stability of any sorting algorithm that might be implemented based on these (or the underlying one)."}], "answers": [{"comments": [{"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 0, "creation_date": 1500990299, "post_id": 45304996, "comment_id": 77572070, "body": "I have to ask: did you happen to remember that comment somehow, or is there some other way you dug up that bit of trivia? That&#39;s an impressive find."}, {"owner": {"reputation": 1780, "user_id": 4168972, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fc92e82d2eb21eb030d4c133c70ff554?s=128&d=identicon&r=PG&f=1", "display_name": "David Fletcher", "link": "https://stackoverflow.com/users/4168972/david-fletcher"}, "reply_to_user": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 4, "creation_date": 1500991840, "post_id": 45304996, "comment_id": 77573480, "body": "@dfeuer I didn&#39;t remember a specific reference but I must have heard at some point that min and max worked like that and I was fairly sure it was specified behaviour.  So I found it quickly by searching for min in the report."}], "tags": [], "owner": {"reputation": 1780, "user_id": 4168972, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fc92e82d2eb21eb030d4c133c70ff554?s=128&d=identicon&r=PG&f=1", "display_name": "David Fletcher", "link": "https://stackoverflow.com/users/4168972/david-fletcher"}, "is_accepted": true, "score": 14, "last_activity_date": 1500989787, "creation_date": 1500989787, "answer_id": 45304996, "question_id": 45304154, "link": "https://stackoverflow.com/questions/45304154/inconsistency-between-minimumby-and-maximumby/45304996#45304996", "title": "Inconsistency between minimumBy and maximumBy", "body": "<p>In the <a href=\"https://www.haskell.org/onlinereport/haskell2010/haskellch9.html#x16-1710009\" rel=\"noreferrer\">Haskell report</a> there is a comment about min and max:</p>\n\n<pre><code>-- note that (min x y, max x y) = (x,y) or (y,x)  \n    max x y  \n         | x &lt;= y    =  y  \n         | otherwise =  x  \n    min x y  \n         | x &lt;= y    =  x  \n         | otherwise =  y\n</code></pre>\n\n<p><code>minimumBy</code> and <code>maximumBy</code> are probably using these or at least trying to stay consistent with them.</p>\n\n<p>I would guess the reason is that you might use min and max to, say, write a sort that involved comparing and swapping pairs (as in the operation in the comment above).  Without this property you could lose elements and have others duplicated.</p>\n\n<p>You normally wouldn't be able to observe any difference, since things that compare equal are usually completely identical.  But you can imagine having elements with some sort of internal structure that isn't considered by comparisons but that you would not want to be lost during a sort.</p>\n"}, {"tags": [], "owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "is_accepted": false, "score": 3, "last_activity_date": 1501001156, "creation_date": 1501001156, "answer_id": 45309257, "question_id": 45304154, "link": "https://stackoverflow.com/questions/45304154/inconsistency-between-minimumby-and-maximumby/45309257#45309257", "title": "Inconsistency between minimumBy and maximumBy", "body": "<p>Apart from David Fletcher's point (and related to it), I'd reckon this behaviour is to preserve the invariant</p>\n\n<pre><code>minimum l \u2261 head (sort l)\nmaximum l \u2261 last (sort l)\n</code></pre>\n\n<p>also in its generalisation</p>\n\n<pre><code>minimumBy c l \u2261 head (sortBy c l)\nmaximumBy c l \u2261 last (sortBy c l)\n</code></pre>\n\n<p>...even if <code>c</code> behaves pathologically like your <code>const (const EQ)</code>. And because <code>sort</code> is stable, that means simply the list will be kept as-is, hence <code>minimum</code> should directly pick the <code>head</code> and <code>maximum</code> the <code>last</code> then.</p>\n"}], "owner": {"reputation": 20870, "user_id": 40916, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/24ac39488e9c4f2833d087a1343707dc?s=128&d=identicon&r=PG", "display_name": "yairchu", "link": "https://stackoverflow.com/users/40916/yairchu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 283, "favorite_count": 0, "accepted_answer_id": 45304996, "answer_count": 2, "score": 4, "last_activity_date": 1501001156, "creation_date": 1500987620, "last_edit_date": 1500989883, "question_id": 45304154, "link": "https://stackoverflow.com/questions/45304154/inconsistency-between-minimumby-and-maximumby", "title": "Inconsistency between minimumBy and maximumBy", "body": "<p>When <code>Data.List.minimumBy</code> comes across list elements that are equal, it chooses the one that came first, but <code>maximumBy</code> chooses the last one:</p>\n\n<pre><code>&gt; import Data.List\n&gt; import Data.Ord\n&gt; minimumBy (const (const EQ)) \"Hello world!\"\n'H'\n&gt; maximumBy (const (const EQ)) \"Hello world!\"\n'!'\n</code></pre>\n\n<p>Is this by design or by coincidence? Is there a good reasoning behind this behavior?</p>\n\n<p>Note that taking advantage of such an assumption can make code much more succinct - i.e <code>minimumOn length texts</code> instead of using an explicit tie-breaker such as <code>map snd (minimumOn (\\(p, t) -&gt; (length t, p)) (zip [0..] texts))</code></p>\n"}, {"tags": ["haskell", "cabal"], "answers": [{"tags": [], "owner": {"reputation": 58792, "user_id": 1006010, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/f683d229f3673c9dcc3f3f2796d75c09?s=128&d=identicon&r=PG", "display_name": "MathematicalOrchid", "link": "https://stackoverflow.com/users/1006010/mathematicalorchid"}, "is_accepted": true, "score": 2, "last_activity_date": 1500991074, "creation_date": 1500991074, "answer_id": 45305537, "question_id": 45304141, "link": "https://stackoverflow.com/questions/45304141/why-do-cabal-configure/45305537#45305537", "title": "Why do cabal configure?", "body": "<p>The <code>cabal configure</code> step does at least two things I know of:</p>\n\n<ul>\n<li>Check that the package description parses OK.</li>\n<li>Check that all required dependencies are already installed (and report an error if not).</li>\n</ul>\n\n<p>Basically it's running the constraint solver to decide exactly which packages you're going to build against. (E.g., if you have several versions of <code>ByteString</code> installed, which version are you going to use? Well it might depend on which version the packages you depend on are expecting...)</p>\n\n<p>Also I believe it's possible to supply options at configure time which change exactly which features of the package get built (but I don't have experience with this).</p>\n\n<p>I think originally you <em>had</em> to call <code>configure</code> before you could call <code>build</code>, but I believe now the <code>cabal</code> command-line tool does that step for you automatically in many cases. (E.g., <code>cabal run</code> now seems to automatically reconfigure if the package description file is newer than the configuration DB.)</p>\n"}], "owner": {"reputation": 4254, "user_id": 931738, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/kUCou.jpg?s=128&g=1", "display_name": "patriques", "link": "https://stackoverflow.com/users/931738/patriques"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 114, "favorite_count": 0, "accepted_answer_id": 45305537, "answer_count": 1, "score": 0, "last_activity_date": 1500991074, "creation_date": 1500987599, "last_edit_date": 1500987935, "question_id": 45304141, "link": "https://stackoverflow.com/questions/45304141/why-do-cabal-configure", "title": "Why do cabal configure?", "body": "<p>In the <a href=\"https://www.haskell.org/cabal/users-guide/\" rel=\"nofollow noreferrer\">Cabal User Guide</a> it says that Cabal is often compared with autoconf and automake since the command line interface for actually configuring and building packages follows the same steps steps:</p>\n\n<pre><code>./configure --prefix=...\nmake\nmake install\n</code></pre>\n\n<p>compared to</p>\n\n<pre><code>cabal configure --prefix=...\ncabal build\ncabal install\n</code></pre>\n\n<p>My understanding is that <code>./configure</code> uses a config file (produced by autoconf) to adapt the make process to the environment in which it will run and also to check dependencies. So <code>./configure</code> therefore always have an \"input\" to conform to. But if <code>cabal configure</code> is not given any arguments what does it do, and why is it necessary before running <code>cabal build</code>?</p>\n"}, {"tags": ["haskell", "liquid-haskell"], "answers": [{"tags": [], "owner": {"reputation": 1152, "user_id": 729775, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/70ec20c66713dc2fe7ce050263961685?s=128&d=identicon&r=PG", "display_name": "Ranjit Jhala", "link": "https://stackoverflow.com/users/729775/ranjit-jhala"}, "is_accepted": true, "score": 0, "last_activity_date": 1504739959, "creation_date": 1504739959, "answer_id": 46085641, "question_id": 45303881, "link": "https://stackoverflow.com/questions/45303881/liquidhaskell-trying-to-use-assume-keyword-but-data-type-is-not-numeric/46085641#46085641", "title": "LiquidHaskell: Trying to use assume keyword, but data type is not numeric", "body": "<p>Unfortunately by 'Numeric' it literally means 'Num' and not even subclasses thereof. We need to extend LH to support sub-classes in the form you describe above; I will create an issue for it, thanks for pointing out!</p>\n\n<p>Now, if you specialize your type to, e.g. <code>Int</code> or <code>Integer</code> then LH properly throws the error:</p>\n\n<pre><code>import GHC.Real\n\n{-@ assume denom :: r:GHC.Real.Ratio Int -&gt; {x:Int | x &gt;= 0} @-}\ndenom :: GHC.Real.Ratio Int -&gt; Int \ndenom = denominator\n\n{-@ die :: {v:String | false} -&gt; a @-}\ndie msg = error msg\n\nmain :: IO ()\nmain = do\n  let x = 3 % 5\n  print $ denom x\n  if denom x &lt;= 0\n    then die \"bad ending\"\n    else putStrLn \"good ending\"\n</code></pre>\n\n<p><a href=\"http://goto.ucsd.edu:8090/index.html#?demo=permalink%2F1504739852_3583.hs\" rel=\"nofollow noreferrer\">http://goto.ucsd.edu:8090/index.html#?demo=permalink%2F1504739852_3583.hs</a></p>\n\n<p>if you make the output type <code>x &gt; 0</code> then it is safe again.</p>\n\n<p><a href=\"http://goto.ucsd.edu:8090/index.html#?demo=permalink%2F1504739907_3585.hs\" rel=\"nofollow noreferrer\">http://goto.ucsd.edu:8090/index.html#?demo=permalink%2F1504739907_3585.hs</a></p>\n\n<p>Thanks again for pointing out the <code>Ratio</code> issue!</p>\n"}], "owner": {"reputation": 55, "user_id": 8363515, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e9bd6dde88e770a81b12a11253dae100?s=128&d=identicon&r=PG&f=1", "display_name": "limick", "link": "https://stackoverflow.com/users/8363515/limick"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 249, "favorite_count": 0, "accepted_answer_id": 46085641, "answer_count": 1, "score": 4, "last_activity_date": 1504739959, "creation_date": 1500987021, "question_id": 45303881, "link": "https://stackoverflow.com/questions/45303881/liquidhaskell-trying-to-use-assume-keyword-but-data-type-is-not-numeric", "title": "LiquidHaskell: Trying to use assume keyword, but data type is not numeric", "body": "<p>I'm trying to write some specifications for the <code>Data.Ratio</code> module. So far I have:</p>\n\n<pre><code>module spec Data.Ratio where\n\nimport GHC.Real\n\nData.Ratio.denominator :: GHC.Real.Integral a =&gt; r : GHC.Real.Ratio a -&gt; {x:a | x &gt; 0}\n</code></pre>\n\n<p>The code I'm verifying is:</p>\n\n<pre><code>{-@ die :: {v:String | false} -&gt; a @-}\ndie msg = error msg\n\nmain :: IO ()\nmain = do\n  let x = 3 % 5\n  print $ denominator x\n  if denominator x &lt; 0\n    then die \"bad ending\"\n    else putStrLn \"good ending\"\n</code></pre>\n\n<p>The code is judged safe, because denominator never returns a negative value.</p>\n\n<p>I found this strange because I could have just written <code>x &lt;= 0</code> as a postcondition, which according to the documentation of the <code>Data.Ratio</code> module is impossible. Apparently Liquid Haskell does not compare my postcondition to the implementation of <code>denominator</code>.</p>\n\n<p>My understanding is that since the function implementation was not checked, I'm better off using the assume keyword:</p>\n\n<pre><code>assume Data.Ratio.denominator :: GHC.Real.Integral a =&gt; r : GHC.Real.Ratio a -&gt; {x:a | x &gt; 0}\n</code></pre>\n\n<p>However, I then get:</p>\n\n<pre>\nError: Bad Type Specification\n assumed type GHC.Real.denominator :: (Ratio a) -> {VV : a | VV > 0}\n     Sort Error in Refinement: {VV : a_a2kc | VV > 0}\n     Unbound Symbol a_a2kc\n Perhaps you meant: papp5, papp3, papp4, head, papp2, papp7, papp6, papp1, tail\n  because\nThe sort a_a2kc is not numeric\n</pre>\n\n<p>My questions are</p>\n\n<ol>\n<li>Shouldn't LH force me to use the <code>assume</code> keyword in this case if it clearly didn't verify the correctness of my refined type by comparing with the function implementation?</li>\n<li>Am I right in thinking I should use the <code>assume</code> keyword?</li>\n<li>How come <code>a</code> is suddenly not numeric? Wasn't it numeric when I didn't use <code>assume</code>?</li>\n</ol>\n"}, {"tags": ["haskell", "cabal"], "comments": [{"owner": {"reputation": 49501, "user_id": 784338, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ae195ac7c8a5e9002a808544572cc5fc?s=128&d=identicon&r=PG", "display_name": "Daniel Gratzer", "link": "https://stackoverflow.com/users/784338/daniel-gratzer"}, "edited": false, "score": 3, "creation_date": 1500983394, "post_id": 45301582, "comment_id": 77566062, "body": "<code>cabal install &lt;pkg&gt; --dry-run</code>?"}, {"owner": {"reputation": 507, "user_id": 1699488, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/a8324cbee30924bddc32c054d19b182e?s=128&d=identicon&r=PG", "display_name": "Lemming", "link": "https://stackoverflow.com/users/1699488/lemming"}, "reply_to_user": {"reputation": 49501, "user_id": 784338, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ae195ac7c8a5e9002a808544572cc5fc?s=128&d=identicon&r=PG", "display_name": "Daniel Gratzer", "link": "https://stackoverflow.com/users/784338/daniel-gratzer"}, "edited": false, "score": 0, "creation_date": 1500996054, "post_id": 45301582, "comment_id": 77576746, "body": "How could I miss that?"}], "answers": [{"tags": [], "owner": {"reputation": 49501, "user_id": 784338, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ae195ac7c8a5e9002a808544572cc5fc?s=128&d=identicon&r=PG", "display_name": "Daniel Gratzer", "link": "https://stackoverflow.com/users/784338/daniel-gratzer"}, "is_accepted": true, "score": 0, "last_activity_date": 1501000546, "creation_date": 1501000546, "answer_id": 45309060, "question_id": 45301582, "link": "https://stackoverflow.com/questions/45301582/let-cabal-install-show-the-install-plan/45309060#45309060", "title": "Let Cabal-Install show the install plan", "body": "<p><code>cabal install &lt;pkg&gt; --dry-run</code> will print the packages that will be installed without actually performing any of the installation. It will not show this information though if the package is installed or similar.</p>\n"}], "owner": {"reputation": 507, "user_id": 1699488, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/a8324cbee30924bddc32c054d19b182e?s=128&d=identicon&r=PG", "display_name": "Lemming", "link": "https://stackoverflow.com/users/1699488/lemming"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 52, "favorite_count": 0, "accepted_answer_id": 45309060, "answer_count": 1, "score": 1, "last_activity_date": 1501000546, "creation_date": 1500981164, "question_id": 45301582, "link": "https://stackoverflow.com/questions/45301582/let-cabal-install-show-the-install-plan", "title": "Let Cabal-Install show the install plan", "body": "<p>If I install a package using <code>cabal install pkg</code> then <code>cabal</code> will install all packages that <code>pkg</code> depends on. If there is a conflict with already installed packages then <code>cabal</code> shows which packages have to be installed freshly, which ones are updated and which installed ones will be broken.\nIs there a way to get this list unconditionally instead of running the install procedure?</p>\n"}, {"tags": ["haskell"], "comments": [{"owner": {"reputation": 58792, "user_id": 1006010, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/f683d229f3673c9dcc3f3f2796d75c09?s=128&d=identicon&r=PG", "display_name": "MathematicalOrchid", "link": "https://stackoverflow.com/users/1006010/mathematicalorchid"}, "edited": false, "score": 2, "creation_date": 1500991379, "post_id": 45301387, "comment_id": 77573037, "body": "Incidentally, it&#39;s usual to write <code>foo . bar . baz</code> (with spaces) rather than <code>foo.bar.baz</code>, to emphasize that it&#39;s function composition, not a qualified name (e.g., <code>Data.List.sort</code> or something)."}], "answers": [{"comments": [{"owner": {"reputation": 75362, "user_id": 625403, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/786eed7da67079cb5d63a49d469af25b?s=128&d=identicon&r=PG", "display_name": "amalloy", "link": "https://stackoverflow.com/users/625403/amalloy"}, "edited": false, "score": 1, "creation_date": 1501004241, "post_id": 45301447, "comment_id": 77582466, "body": "Also worth pointing out that you can simply specify the precedence explicitly: <code>(show . sum . map read . words) &quot;1 2&quot;</code>. Using <code>$</code> is definitely a more common approach, but telling a beginner <i>only</i> about that version inevitably leads to a later question like <a href=\"https://stackoverflow.com/questions/36682882/chaining-two-parentheses-together-using-operator/36682941\" title=\"chaining two parentheses together using operator\">stackoverflow.com/questions/36682882/&hellip;</a> because they think that <code>$</code> is The Way to override operator precedence."}, {"owner": {"reputation": 149, "user_id": 6581912, "user_type": "registered", "accept_rate": 12, "profile_image": "https://www.gravatar.com/avatar/5f01ffd293668d9f604ab20986d4b247?s=128&d=identicon&r=PG&f=1", "display_name": "mc.robin", "link": "https://stackoverflow.com/users/6581912/mc-robin"}, "edited": false, "score": 0, "creation_date": 1501042845, "post_id": 45301447, "comment_id": 77596778, "body": "Thanks for your help."}], "tags": [], "owner": {"reputation": 49501, "user_id": 784338, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ae195ac7c8a5e9002a808544572cc5fc?s=128&d=identicon&r=PG", "display_name": "Daniel Gratzer", "link": "https://stackoverflow.com/users/784338/daniel-gratzer"}, "is_accepted": false, "score": 8, "last_activity_date": 1500980729, "creation_date": 1500980729, "answer_id": 45301447, "question_id": 45301387, "link": "https://stackoverflow.com/questions/45301387/confused-about-composite-function-in-haskell/45301447#45301447", "title": "confused about composite function in haskell", "body": "<p>The issue is that application binds more tightly than application which in fact has the highest precedence of any Haskell operator. This means that your code actually parses</p>\n\n<pre><code> show.sum.map read.(words \"1 2\")\n</code></pre>\n\n<p>which doesn't type check because <code>words \"1 2\"</code> has the type <code>String</code>, not something that can be composed with <code>.</code>. In order to fix this you can use the <code>$</code> operator which is specifically designed to behave as application but which the lowest precedence instead of the highest.</p>\n\n<pre><code> show.sum.map read.words $ \"1 2\"\n</code></pre>\n\n<p>will work as intended because it has the correct association. This is in general why you'll see the pattern in Haskell code (well at least my Haskell code) of <code>foo . bar . baz $ quux</code> quite frequently.</p>\n"}], "owner": {"reputation": 149, "user_id": 6581912, "user_type": "registered", "accept_rate": 12, "profile_image": "https://www.gravatar.com/avatar/5f01ffd293668d9f604ab20986d4b247?s=128&d=identicon&r=PG&f=1", "display_name": "mc.robin", "link": "https://stackoverflow.com/users/6581912/mc-robin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 59, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1500980729, "creation_date": 1500980556, "question_id": 45301387, "link": "https://stackoverflow.com/questions/45301387/confused-about-composite-function-in-haskell", "title": "confused about composite function in haskell", "body": "<pre><code>let f = show.sum.map read.words\nf \"1 2\"\n</code></pre>\n\n<p>It work.</p>\n\n<pre><code>show.sum.map read.words \"1 2\"\n</code></pre>\n\n<p>I get errors:</p>\n\n<pre><code>&lt;interactive&gt;:19:19:\n    Couldn't match expected type \u2018a -&gt; [String]\u2019\n                with actual type \u2018[String]\u2019\n    Relevant bindings include\n      it :: a -&gt; String (bound at &lt;interactive&gt;:19:1)\n    Possible cause: \u2018words\u2019 is applied to too many arguments\n    In the second argument of \u2018(.)\u2019, namely \u2018words \"1 2\"\u2019\n    In the second argument of \u2018(.)\u2019, namely \u2018map read . words \"1 2\"\u2019\nPrelude&gt; :t show.sum.map\nshow.sum.map\n  :: (Num [b], Show b, Foldable ((-&gt;) [a])) =&gt; (a -&gt; b) -&gt; String\nPrelude&gt; show.sum.map read.words \"1 2\"\n\n    &lt;interactive&gt;:21:19:\n        Couldn't match expected type \u2018a -&gt; [String]\u2019\n                    with actual type \u2018[String]\u2019\n        Relevant bindings include\n          it :: a -&gt; String (bound at &lt;interactive&gt;:21:1)\n        Possible cause: \u2018words\u2019 is applied to too many arguments\n        In the second argument of \u2018(.)\u2019, namely \u2018words \"1 2\"\u2019\n        In the second argument of \u2018(.)\u2019, namely \u2018map read . words \"1 2\"\u2019\n    Prelude&gt; \n</code></pre>\n\n<p>I want to know why? (show.sum.map read.words) \"1 2\" can also work.</p>\n"}, {"tags": ["haskell"], "comments": [{"owner": {"reputation": 4234, "user_id": 4942760, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f322d06b4f3e34278f29a954e0f38cb1?s=128&d=identicon&r=PG&f=1", "display_name": "Dan Robertson", "link": "https://stackoverflow.com/users/4942760/dan-robertson"}, "edited": false, "score": 6, "creation_date": 1500979201, "post_id": 45300679, "comment_id": 77563014, "body": "The do block is syntactic sugar for a load of function applications and lambadas so it can just use the normal type inferencer."}], "answers": [{"tags": [], "owner": {"reputation": 49501, "user_id": 784338, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ae195ac7c8a5e9002a808544572cc5fc?s=128&d=identicon&r=PG", "display_name": "Daniel Gratzer", "link": "https://stackoverflow.com/users/784338/daniel-gratzer"}, "is_accepted": false, "score": 10, "last_activity_date": 1500979065, "creation_date": 1500979065, "answer_id": 45300831, "question_id": 45300679, "link": "https://stackoverflow.com/questions/45300679/in-haskell-when-we-use-a-do-block-how-does-it-figure-out-which-monad-to-be-use/45300831#45300831", "title": "In Haskell, when we use a do block, how does it figure out which monad to be used?", "body": "<p>It uses the same general type class mechanism that is used to figure out which <code>+</code> to use or even what numeric type to use for literals. That is,\nsomething like</p>\n\n<pre><code> do\n    return True\n</code></pre>\n\n<p>Will not divine the specific monad that it should use but rather just be assigned the type <code>Monad m =&gt; m Bool</code>. This <em>constraint</em> says that the do-block has the type <code>m Bool</code> for <em>any</em> <code>m</code> which happens to have implemented the <code>Monad</code> type class. Moreover, whenever this block is used, the specific instance will be inferred from the context of its use.</p>\n\n<p>If we use operators that are tied to a specific <code>Monad</code>, this will force the type to become more specific. For instance, if we use <code>modify :: (a -&gt; a) -&gt; State s a -&gt; State s ()</code> (I'm simplifying the type for the sake of example here) then this will force the block to have the type <code>State s ...</code>. In general, Haskell will figure out the most general type possible and make use of type class constraints to make sure that the types in question implement the appropriate operations.</p>\n"}, {"tags": [], "owner": {"reputation": 58792, "user_id": 1006010, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/f683d229f3673c9dcc3f3f2796d75c09?s=128&d=identicon&r=PG", "display_name": "MathematicalOrchid", "link": "https://stackoverflow.com/users/1006010/mathematicalorchid"}, "is_accepted": true, "score": 7, "last_activity_date": 1500992062, "creation_date": 1500992062, "answer_id": 45305927, "question_id": 45300679, "link": "https://stackoverflow.com/questions/45300679/in-haskell-when-we-use-a-do-block-how-does-it-figure-out-which-monad-to-be-use/45305927#45305927", "title": "In Haskell, when we use a do block, how does it figure out which monad to be used?", "body": "<p>Maybe some \"practical\" examples will help:</p>\n\n<pre><code>foo1 = do\n  print 5\n  return 7\n-- print belongs to the IO monad. This whole thing is in IO.\n\nfoo2 x = do\n  writeTVar x 7\n  return 11\n-- writeTVar belongs to the STM monad. This whole thing is in STM.\n\nfoo3 = do\n  let x = 5\n  [1, 2, 3, 4]\n-- Last line is a list expression. This whole thing is in the list monad.\n\nfoo4 = do\n  put 7\n  return 9\n-- put is in the State monad. This whole thing is in the state monad.\n\nfoo5 = do\n  x &lt;- magic1\n  y &lt;- magic2\n  return (x, y)\n-- This is in whatever monad magic1 and magic2 are in.\n\nfoo6 = do\n  return 13\n-- Doesn't mention any monad. Works for ALL POSSIBLE MONADS!\n\nfoo7 abc def = do\n  x &lt;- abc\n  y &lt;- def\n  return (x, y)\n-- Runs in whatever monad abc and def run in.\n-- By passing different arguments, you can CHANGE which monad that is!\n</code></pre>\n"}], "owner": {"reputation": 229, "user_id": 6130072, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/01049fe6bbb7e9dc61f30864db556622?s=128&d=identicon&r=PG&f=1", "display_name": "Programmer", "link": "https://stackoverflow.com/users/6130072/programmer"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1494, "favorite_count": 1, "accepted_answer_id": 45305927, "answer_count": 2, "score": 3, "last_activity_date": 1500992062, "creation_date": 1500978689, "question_id": 45300679, "link": "https://stackoverflow.com/questions/45300679/in-haskell-when-we-use-a-do-block-how-does-it-figure-out-which-monad-to-be-use", "title": "In Haskell, when we use a do block, how does it figure out which monad to be used?", "body": "<p>We know that the do block is just syntactic sugar. But then how does it figure out which monadic context it is in? Assume we don't use <code>&lt;-</code> operator anywhere in the do block.</p>\n"}, {"tags": ["haskell", "types"], "answers": [{"tags": [], "owner": {"reputation": 78982, "user_id": 1848654, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/84180c0f3c9c04f8b8f0613fc0129dac?s=128&d=identicon&r=PG", "display_name": "melpomene", "link": "https://stackoverflow.com/users/1848654/melpomene"}, "is_accepted": true, "score": 8, "last_activity_date": 1500971608, "creation_date": 1500971608, "answer_id": 45297961, "question_id": 45297764, "link": "https://stackoverflow.com/questions/45297764/how-does-return-f-work-in-haskell/45297961#45297961", "title": "How does return &gt;=&gt; f work in Haskell?", "body": "<p>Let's rename some type variables to avoid confusion:</p>\n\n<pre><code>return :: a -&gt; m a\n(&gt;=&gt;)  :: (b -&gt; m c) -&gt; (c -&gt; m d) -&gt; (b -&gt; m d)\n</code></pre>\n\n<p>When we apply <code>(&gt;=&gt;) return</code>, we need to make</p>\n\n<pre><code>(a -&gt; m a) = (b -&gt; m c)\n</code></pre>\n\n<p>(type of <code>return</code> and type of <code>&gt;=&gt;</code>'s first argument).</p>\n\n<p>Therefore we have</p>\n\n<pre><code>a = b\na = c\n</code></pre>\n\n<p>(and thus <code>b = c</code>, too).</p>\n\n<p>Then</p>\n\n<pre><code>(&gt;=&gt;) return :: (c -&gt; m d) -&gt; (b -&gt; m d)\na = b\na = c\n</code></pre>\n\n<p>which is</p>\n\n<pre><code>(&gt;=&gt;) return :: (a -&gt; m d) -&gt; (a -&gt; m d)\n</code></pre>\n\n<p>So as long as <code>f :: a -&gt; m d</code>, we can apply <code>(&gt;=&gt;) return</code> to <code>f</code> and get a value of the same type back.</p>\n"}], "owner": {"reputation": 229, "user_id": 6130072, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/01049fe6bbb7e9dc61f30864db556622?s=128&d=identicon&r=PG&f=1", "display_name": "Programmer", "link": "https://stackoverflow.com/users/6130072/programmer"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 62, "favorite_count": 0, "accepted_answer_id": 45297961, "answer_count": 1, "score": 3, "last_activity_date": 1500987003, "creation_date": 1500971040, "last_edit_date": 1500987003, "question_id": 45297764, "link": "https://stackoverflow.com/questions/45297764/how-does-return-f-work-in-haskell", "title": "How does return &gt;=&gt; f work in Haskell?", "body": "<p>In particular, my question is about how this is considered to be equivalent to f itself?</p>\n\n<p>We know that type of <code>return</code> is:: <code>a -&gt; m a</code> and the type of <code>&gt;=&gt;</code> is:: <code>(a -&gt; m b) -&gt; (b -&gt; m c) -&gt; (a -&gt; m c)</code> So when we apply <code>&gt;=&gt;</code> to <code>return</code> and f, won't there be a type mismatch, because won't we have <code>(a -&gt; m a) -&gt; (b -&gt; m c)</code> as the types of <code>return</code> and f respectively, which means how can we even apply <code>&gt;=&gt;</code> now?</p>\n"}, {"tags": ["haskell", "types", "hindley-milner"], "comments": [{"owner": {"reputation": 40537, "user_id": 465378, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/c03b8d34978563858020eff0d14cc17b?s=128&d=identicon&r=PG", "display_name": "Alexis King", "link": "https://stackoverflow.com/users/465378/alexis-king"}, "edited": false, "score": 5, "creation_date": 1500967496, "post_id": 45296481, "comment_id": 77554684, "body": "You want a rank 2 type, but standard Haskell only permits rank 1 types. Enable the <code>RankNTypes</code> extension and change the type of <code>actionFile</code> to <code>(forall a. Action IO a -&gt; IO a) -&gt; String -&gt; IO ()</code>."}, {"owner": {"reputation": 7435, "user_id": 4617597, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/b1Sdw.png?s=128&g=1", "display_name": "Marcelo Lazaroni", "link": "https://stackoverflow.com/users/4617597/marcelo-lazaroni"}, "reply_to_user": {"reputation": 40537, "user_id": 465378, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/c03b8d34978563858020eff0d14cc17b?s=128&d=identicon&r=PG", "display_name": "Alexis King", "link": "https://stackoverflow.com/users/465378/alexis-king"}, "edited": false, "score": 0, "creation_date": 1500967901, "post_id": 45296481, "comment_id": 77554989, "body": "Beautiful. It works. I will read more about type ranking to understand what&#39;s going on and what guarantees I may be giving up with this language extension. Thanks."}], "answers": [{"comments": [{"owner": {"reputation": 7435, "user_id": 4617597, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/b1Sdw.png?s=128&g=1", "display_name": "Marcelo Lazaroni", "link": "https://stackoverflow.com/users/4617597/marcelo-lazaroni"}, "edited": false, "score": 0, "creation_date": 1501015098, "post_id": 45297126, "comment_id": 77588656, "body": "Thanks for that. Do you know of any other solution that would not use a language extension?"}, {"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "reply_to_user": {"reputation": 7435, "user_id": 4617597, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/b1Sdw.png?s=128&g=1", "display_name": "Marcelo Lazaroni", "link": "https://stackoverflow.com/users/4617597/marcelo-lazaroni"}, "edited": false, "score": 2, "creation_date": 1501016124, "post_id": 45297126, "comment_id": 77589223, "body": "@MarceloLazaroni Not real ones. You could make <code>actionFile : (Action IO () -&gt; IO ()) -&gt;(Action IO String -&gt; IO String) -&gt; String -&gt; IO ()</code> but it would be weird. Also, note that it&#39;s is very common for modern libraries and applications to exploit many extensions. I&#39;d even say nobody writes serious code in plain Haskell. Most of the extensions are harmless, and arguably a large number of them should just be included in a revised Haskell Report, just because they&#39;ve become so popular. Don&#39;t be afraid to use them, everybody is already doing that."}], "tags": [], "owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "is_accepted": true, "score": 6, "last_activity_date": 1500969560, "last_edit_date": 1500969560, "creation_date": 1500969149, "answer_id": 45297126, "question_id": 45296481, "link": "https://stackoverflow.com/questions/45296481/haskell-rigid-type-variable-error-when-passing-function-as-argument/45297126#45297126", "title": "Haskell: Rigid type variable error when passing function as argument", "body": "<p>This is a quantifier problem. The type</p>\n\n<pre><code>actionFile :: (Action IO a -&gt; IO a) -&gt; String -&gt; IO ()\n</code></pre>\n\n<p>means, as reported by the GHC error,</p>\n\n<pre><code>actionFile :: forall a. (Action IO a -&gt; IO a) -&gt; String -&gt; IO ()\n</code></pre>\n\n<p>which states the following:</p>\n\n<ul>\n<li>the caller must choose a type <code>a</code></li>\n<li>the caller must provide a function <code>g :: Action IO a -&gt; IO a</code></li>\n<li>the caller must provide a <code>String</code></li>\n<li>finally, <code>actionFile</code> must answer with an <code>IO ()</code></li>\n</ul>\n\n<p>Note that <code>a</code> is chosen by the caller, not by <code>actionFile</code>. From the point of view of <code>actionFile</code>, such type variable is bound to a fixed unknown type, chosen by someone else: this is the \"rigid\" type variable GHC mentions in the error.</p>\n\n<p>However, <code>actionFile</code> is calling <code>g</code> passing an <code>Action IO ()</code> argument (because of <code>putStrLn</code>). This means that <code>actionFile</code> wants to choose <code>a = ()</code>. Since the caller can choose a different <code>a</code>, a type error is raised.</p>\n\n<p>Further, <code>actionFile</code> also wants to call <code>g</code> passing an <code>Action IO String</code> argument (because of <code>readFile</code>), so we also want to choose <code>a = String</code>. This implies that <code>g</code> must accept the choice of whatever <code>a</code> we wish.</p>\n\n<p>As mentioned by Alexis King, a solution could be to move the quantifier and use a rank-2 type:</p>\n\n<pre><code>actionFile :: (forall a. Action IO a -&gt; IO a) -&gt; String -&gt; IO ()\n</code></pre>\n\n<p>This new type means that:</p>\n\n<ul>\n<li>the caller must provide a function <code>g :: forall a. Action IO a -&gt; IO a</code>\n\n<ul>\n<li>the caller of <code>g</code> (i.e., <code>actionFile</code>) must choose <code>a</code></li>\n<li>the caller of <code>g</code> (i.e., <code>actionFile</code>) must provide an <code>Action IO a</code></li>\n<li>finally, <code>g</code> must provide an <code>IO a</code></li>\n</ul></li>\n<li>the caller must provide a <code>String</code></li>\n<li>finally, <code>actionFile</code> must answer with an <code>IO ()</code></li>\n</ul>\n\n<p>This makes it possible to <code>actionFile</code> to choose <code>a</code> as wanted.</p>\n"}], "owner": {"reputation": 7435, "user_id": 4617597, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/b1Sdw.png?s=128&g=1", "display_name": "Marcelo Lazaroni", "link": "https://stackoverflow.com/users/4617597/marcelo-lazaroni"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 213, "favorite_count": 0, "accepted_answer_id": 45297126, "answer_count": 1, "score": 2, "last_activity_date": 1500969560, "creation_date": 1500967201, "question_id": 45296481, "link": "https://stackoverflow.com/questions/45296481/haskell-rigid-type-variable-error-when-passing-function-as-argument", "title": "Haskell: Rigid type variable error when passing function as argument", "body": "<p>GHC is saying my function is too general to be passed as an argument.</p>\n\n<p>Here is a simplified version that reproduces the error:</p>\n\n<pre><code>data Action m a = SomeAction (m a)\n\n\nrunAction :: Action m a -&gt; m a\nrunAction (SomeAction ma) =  ma\n\n-- Errors in here\nactionFile :: (Action IO a -&gt; IO a) -&gt; String -&gt; IO ()\nactionFile actionFunc fileName = do\n    actionFunc $ SomeAction $ readFile fileName\n    actionFunc $ SomeAction $ putStrLn fileName\n\n\nmain :: IO ()\nmain =\n    actionFile runAction \"Some Name.txt\"\n</code></pre>\n\n<p>This is what the error says:</p>\n\n<pre><code> \u2022 Couldn't match type \u2018a\u2019 with \u2018()\u2019\n      \u2018a\u2019 is a rigid type variable bound by\n        the type signature for:\n          actionFile :: forall a. (Action IO a -&gt; IO a) -&gt; String -&gt; IO ()\n        at src/Lib.hs:11:15\n      Expected type: Action IO a\n        Actual type: Action IO ()\n</code></pre>\n\n<p>The compiler wants me to be more specific in my type signature, but I can't because I will need to use the parameter function with different types of arguments. Just like in my example I pass it an <code>Action IO ()</code> and an <code>Action IO String</code>.</p>\n\n<p>If I substitute <code>(Action IO a -&gt; IO a) -&gt; String -&gt; IO ()</code> for <code>(Action IO () -&gt; IO ()) -&gt; String -&gt; IO ()</code>, like the compiler asked, the invocation with <code>readFile</code> errors because it outputs an <code>IO String</code>.</p>\n\n<p><strong>Why is this happening and what should I do to be able to pass this function as an argument?</strong></p>\n\n<p>I know that if I just use <code>runAction</code> inside my <code>actionFile</code> function everything will work, but in my real code <code>runAction</code> is a partially applied function that gets built from results of IO computations, so it is not available at compile time.</p>\n"}, {"tags": ["haskell", "type-conversion"], "comments": [{"owner": {"reputation": 13441, "user_id": 2199600, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/8sl6u.jpg?s=128&g=1", "display_name": "Igor Drozdov", "link": "https://stackoverflow.com/users/2199600/igor-drozdov"}, "edited": false, "score": 1, "creation_date": 1500962557, "post_id": 45294557, "comment_id": 77551692, "body": "There&#39;s an answer here <a href=\"https://stackoverflow.com/questions/35950600/why-it-is-impossible-to-divide-integer-number-in-haskell\" title=\"why it is impossible to divide integer number in haskell\">stackoverflow.com/questions/35950600/&hellip;</a>"}], "answers": [{"tags": [], "owner": {"reputation": 23111, "user_id": 1319998, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/9f600f4583bec89109ce8c0c098951ae?s=128&d=identicon&r=PG", "display_name": "Michal Charemza", "link": "https://stackoverflow.com/users/1319998/michal-charemza"}, "is_accepted": true, "score": 2, "last_activity_date": 1500962525, "creation_date": 1500962525, "answer_id": 45295043, "question_id": 45294557, "link": "https://stackoverflow.com/questions/45294557/type-error-while-deviding-in-haskell/45295043#45295043", "title": "Type error while deviding in Haskell", "body": "<p>You need to convert the <code>Int</code>s first, for example using <code>realToFrac</code>. Renaming <code>div</code> to <code>myDiv</code> to avoid a clash with prelude, the program</p>\n\n<pre><code>myDiv :: Int -&gt; Int -&gt; Double\nmyDiv a b = realToFrac a / realToFrac b\n\nmain = putStrLn $ show $ myDiv 5 2\n</code></pre>\n\n<p>outputs</p>\n\n<pre><code>2.5\n</code></pre>\n"}], "owner": {"reputation": 997, "user_id": 5439470, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/a8ff31099463f0885944705a8c088b3d?s=128&d=identicon&r=PG&f=1", "display_name": "jan-seins", "link": "https://stackoverflow.com/users/5439470/jan-seins"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 68, "favorite_count": 0, "closed_date": 1500969046, "accepted_answer_id": 45295043, "answer_count": 1, "score": -3, "last_activity_date": 1500962525, "creation_date": 1500960350, "question_id": 45294557, "link": "https://stackoverflow.com/questions/45294557/type-error-while-deviding-in-haskell", "closed_reason": "Duplicate", "title": "Type error while deviding in Haskell", "body": "<p>I am trying to write a function in Haskell to devide to Integers. Here is my Code:</p>\n\n<pre><code>div :: Int -&gt; Int -&gt; Double\ndiv a b =a/b\n</code></pre>\n\n<p>However, when I try to complie it i always get the error:</p>\n\n<pre><code>baby.hs:20:10:\n  Couldn't match expected type \u2018Double\u2019 with actual type \u2018Int\u2019\n  In the first argument of \u2018(/)\u2019, namely \u2018a\u2019\n  In the expression: a / b\n\nbaby.hs:20:12:\n  Couldn't match expected type \u2018Double\u2019 with actual type \u2018Int\u2019\n  In the second argument of \u2018(/)\u2019, namely \u2018b\u2019\n  In the expression: a / b\nFailed, modules loaded: none.\n</code></pre>\n"}, {"tags": ["haskell"], "comments": [{"owner": {"reputation": 3587, "user_id": 7824574, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/a639be4c9ecc139065fbc6b12b87e6a9?s=128&d=identicon&r=PG&f=1", "display_name": "typetetris", "link": "https://stackoverflow.com/users/7824574/typetetris"}, "edited": false, "score": 0, "creation_date": 1501060474, "post_id": 45294235, "comment_id": 77606799, "body": "Yi 0.14.0 doesn&#39;t support dynamic configuration out of the box any more. See <a href=\"https://yi-editor.github.io/posts/2017-07-25-release-0.14/\" rel=\"nofollow noreferrer\">Yi blog post</a>. You probably want to try <a href=\"https://hackage.haskell.org/package/yi-dynamic-configuration\" rel=\"nofollow noreferrer\">yi-dynamic-configuration</a>"}], "owner": {"reputation": 149, "user_id": 6581912, "user_type": "registered", "accept_rate": 12, "profile_image": "https://www.gravatar.com/avatar/5f01ffd293668d9f604ab20986d4b247?s=128&d=identicon&r=PG&f=1", "display_name": "mc.robin", "link": "https://stackoverflow.com/users/6581912/mc-robin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 25, "favorite_count": 0, "answer_count": 0, "score": 1, "last_activity_date": 1500958654, "creation_date": 1500958654, "question_id": 45294235, "link": "https://stackoverflow.com/questions/45294235/how-to-configure-yi-0-14-0", "title": "how to configure Yi 0.14.0", "body": "<pre><code>apt-get install yi\n</code></pre>\n\n<p>Yi works\uff0cyi test.hs will load ~/.config/yi/yi.hs</p>\n\n<pre><code>cabal install yi\n</code></pre>\n\n<p>Yi don't load the configure file, why? who to setup</p>\n"}, {"tags": ["performance", "haskell", "functional-programming", "pointfree"], "comments": [{"owner": {"reputation": 10378, "user_id": 2476735, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/39e9447bbc32246fcd23b76b5e946618?s=128&d=identicon&r=PG&f=1", "display_name": "David Young", "link": "https://stackoverflow.com/users/2476735/david-young"}, "edited": false, "score": 0, "creation_date": 1500952198, "post_id": 45293193, "comment_id": 77548311, "body": "How are you measuring the performance and what data are you measuring it on?"}, {"owner": {"reputation": 159, "user_id": 8360867, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/676a624d4c047520a1031c56c1fea344?s=128&d=identicon&r=PG&f=1", "display_name": "BD107", "link": "https://stackoverflow.com/users/8360867/bd107"}, "reply_to_user": {"reputation": 10378, "user_id": 2476735, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/39e9447bbc32246fcd23b76b5e946618?s=128&d=identicon&r=PG&f=1", "display_name": "David Young", "link": "https://stackoverflow.com/users/2476735/david-young"}, "edited": false, "score": 0, "creation_date": 1500952373, "post_id": 45293193, "comment_id": 77548359, "body": "Performance meaning time, in seconds. My application is a chess engine. For the real thing you can see lines 65-82 of <a href=\"https://github.com/benediamond/Drais/blob/master/Main.hs\" rel=\"nofollow noreferrer\">github.com/benediamond/Drais/blob/master/Main.hs</a>"}, {"owner": {"reputation": 49501, "user_id": 784338, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ae195ac7c8a5e9002a808544572cc5fc?s=128&d=identicon&r=PG", "display_name": "Daniel Gratzer", "link": "https://stackoverflow.com/users/784338/daniel-gratzer"}, "edited": false, "score": 3, "creation_date": 1500955364, "post_id": 45293193, "comment_id": 77549112, "body": "I can&#39;t reproduce this. Compiling with <code>ghc -O2</code> they run identically for me. Here&#39;s the benchmarking code: <a href=\"https://gist.github.com/jozefg/297eb0b19deda396798bc0093679d17b\" rel=\"nofollow noreferrer\">gist.github.com/jozefg/297eb0b19deda396798bc0093679d17b</a>"}, {"owner": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "edited": false, "score": 1, "creation_date": 1500955382, "post_id": 45293193, "comment_id": 77549117, "body": "You can remove the last flip, since <code>&#47;=</code> is associative: <code>flip all plist . (. fst) . (&#47;=)</code>."}, {"owner": {"reputation": 3587, "user_id": 7824574, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/a639be4c9ecc139065fbc6b12b87e6a9?s=128&d=identicon&r=PG&f=1", "display_name": "typetetris", "link": "https://stackoverflow.com/users/7824574/typetetris"}, "edited": false, "score": 1, "creation_date": 1500963875, "post_id": 45293193, "comment_id": 77552390, "body": "Please provide a <a href=\"https://stackoverflow.com/help/mcve\">mcve</a>. For performance questions this will be two little programs which illustrate the difference in run times / ressource consumption."}, {"owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "edited": false, "score": 3, "creation_date": 1500975606, "post_id": 45293193, "comment_id": 77560373, "body": "All performance aside: \u201cPoint-free code is good\u201d is, in general, a nonsense statement. Point-free is <i>sometimes more readable</i> because it&#39;s simply more concise, but as soon as you need to use <code>flip</code> you&#39;re clearly beyond the line and should reconsider. The exception is if you&#39;re trying to generalise something from <b>Hask</b> to some more general category, i.e. not actually working with functions but other morphisms/arrows that can <i>only</i> be written point-free \u2013 but then you don&#39;t have <code>flip</code> anyway."}, {"owner": {"reputation": 24509, "user_id": 6863749, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/UyoQv.jpg?s=128&g=1", "display_name": "Li-yao Xia", "link": "https://stackoverflow.com/users/6863749/li-yao-xia"}, "edited": false, "score": 0, "creation_date": 1500975777, "post_id": 45293193, "comment_id": 77560513, "body": "Did you compile with optimizations? Without? Or did you just run it with <code>ghci</code>/<code>runghc</code>? What version of GHC?"}, {"owner": {"reputation": 159, "user_id": 8360867, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/676a624d4c047520a1031c56c1fea344?s=128&d=identicon&r=PG&f=1", "display_name": "BD107", "link": "https://stackoverflow.com/users/8360867/bd107"}, "edited": false, "score": 0, "creation_date": 1501021772, "post_id": 45293193, "comment_id": 77591486, "body": "ghc --version The Glorious Glasgow Haskell Compilation System, version 8.0.2   ghc -O2 --make Main.hs -prof -auto-all -caf-all -fforce-recomp   time ./Main ___ ___ +RTS -p Thanks to all."}], "owner": {"reputation": 159, "user_id": 8360867, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/676a624d4c047520a1031c56c1fea344?s=128&d=identicon&r=PG&f=1", "display_name": "BD107", "link": "https://stackoverflow.com/users/8360867/bd107"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 131, "favorite_count": 0, "answer_count": 0, "score": 1, "last_activity_date": 1501526980, "creation_date": 1500951734, "last_edit_date": 1501526980, "question_id": 45293193, "link": "https://stackoverflow.com/questions/45293193/point-free-code-is-good-why-is-mine-slow-performance", "title": "Point-free code is good. Why is mine slow? (performance)", "body": "<p>Consider two lists</p>\n\n<pre><code>&gt; plist = [(1,1),(2,2),(3,3)]\n&gt; qlist = [4, 6, 2]\n</code></pre>\n\n<p>And a comparison-type operation:</p>\n\n<pre><code>&gt; all (\\q -&gt; all (\\p -&gt; fst p /= q) plist) qlist\nFalse\n</code></pre>\n\n<p>After wracking my brains, I managed to come up with a version that doesn't involve lambdas (<strong>EDITED</strong>, thanks Willem Van Onsem):</p>\n\n<pre><code>&gt; all (flip all plist . (. fst) . (/=)) qlist\nFalse\n</code></pre>\n\n<p>Yet now my code runs ~30% slower. Why could this be? The memory profiles look identical (and healthy). I would imagine that these two should be equivalent.</p>\n\n<p>On the other hand, the point-free version is so opaque here that it's probably hardly worth using to begin with.</p>\n"}, {"tags": ["haskell"], "comments": [{"owner": {"reputation": 14111, "user_id": 1126943, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yeuHw.png?s=128&g=1", "display_name": "zch", "link": "https://stackoverflow.com/users/1126943/zch"}, "edited": false, "score": 1, "creation_date": 1500922856, "post_id": 45288090, "comment_id": 77538651, "body": "I suppose you could write an expression that would have ambiguous type with <code>fmap</code>, but it would probably need to be crafted for this purpose. My guess is that it is just historical."}, {"owner": {"reputation": 769, "user_id": 6155692, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/0e4ef26e040c1b1fbc5f10777e5b0649?s=128&d=identicon&r=PG&f=1", "display_name": "Zac", "link": "https://stackoverflow.com/users/6155692/zac"}, "reply_to_user": {"reputation": 181215, "user_id": 82294, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/5c5f910416e2b92bb73fa59c56fe695d?s=128&d=identicon&r=PG", "display_name": "Dietrich Epp", "link": "https://stackoverflow.com/users/82294/dietrich-epp"}, "edited": false, "score": 0, "creation_date": 1500923477, "post_id": 45288090, "comment_id": 77538952, "body": "@DietrichEpp You&#39;re right - I didn&#39;t see that one."}, {"owner": {"reputation": 181215, "user_id": 82294, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/5c5f910416e2b92bb73fa59c56fe695d?s=128&d=identicon&r=PG", "display_name": "Dietrich Epp", "link": "https://stackoverflow.com/users/82294/dietrich-epp"}, "edited": false, "score": 0, "creation_date": 1500926126, "post_id": 45288090, "comment_id": 77540354, "body": "I usually find these questions with a Google search rather than the SO search."}], "owner": {"reputation": 769, "user_id": 6155692, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/0e4ef26e040c1b1fbc5f10777e5b0649?s=128&d=identicon&r=PG&f=1", "display_name": "Zac", "link": "https://stackoverflow.com/users/6155692/zac"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 73, "favorite_count": 0, "closed_date": 1500923488, "answer_count": 0, "score": 0, "last_activity_date": 1500922736, "creation_date": 1500922736, "question_id": 45288090, "link": "https://stackoverflow.com/questions/45288090/in-haskell-why-is-map-a-separate-function-to-fmap", "closed_reason": "Duplicate", "title": "In Haskell, why is map a separate function to fmap?", "body": "<p>As far as I know, you can use <code>fmap</code> in place of <code>map</code> in all cases -- the following two are equivalent.</p>\n\n<pre><code>map (*2) [1..10]\nfmap (*2) [1..10]\n</code></pre>\n\n<p>So, since they do the same thing, why does <code>map</code> even exist? Why can't <code>fmap</code> just be <code>map</code>? My guess is it's either for a historical reason, or for performance somehow.</p>\n"}, {"tags": ["haskell", "functional-programming", "purely-functional"], "comments": [{"owner": {"reputation": 52741, "user_id": 555045, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/182d0ce855c8324a596648c04643e8f9?s=128&d=identicon&r=PG", "display_name": "nicomp", "link": "https://stackoverflow.com/users/555045/nicomp"}, "edited": false, "score": 4, "creation_date": 1500923830, "post_id": 45287954, "comment_id": 77539139, "body": "And then you can take <code>f = id</code> and get the actual instance of <code>a</code>, or am I missing something."}, {"owner": {"reputation": 21877, "user_id": 131227, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/60e3c03e227b84e2898c29fd711cae5b?s=128&d=identicon&r=PG", "display_name": "z5h", "link": "https://stackoverflow.com/users/131227/z5h"}, "reply_to_user": {"reputation": 52741, "user_id": 555045, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/182d0ce855c8324a596648c04643e8f9?s=128&d=identicon&r=PG", "display_name": "nicomp", "link": "https://stackoverflow.com/users/555045/nicomp"}, "edited": false, "score": 0, "creation_date": 1500924043, "post_id": 45287954, "comment_id": 77539257, "body": "@harold indeed! That was right in front of my face. So, <code>(a -&gt; b) -&gt; b</code> is isomorphic to <code>a</code>."}, {"owner": {"reputation": 57219, "user_id": 33796, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/08727b23ba62e634b32988cdff082663?s=128&d=identicon&r=PG", "display_name": "luqui", "link": "https://stackoverflow.com/users/33796/luqui"}, "edited": false, "score": 7, "creation_date": 1500925304, "post_id": 45287954, "comment_id": 77539899, "body": "There is an ambiguity here.  Do we mean the polymorphic type <code>forall b. (a -&gt; b) -&gt; b</code> or do we mean <code>(a -&gt; b) -&gt; b</code> for a specific <code>b</code>?"}, {"owner": {"reputation": 11001, "user_id": 727667, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/2e2cbd3a202d8d1cfe0cc2a9fff86733?s=128&d=identicon&r=PG", "display_name": "gallais", "link": "https://stackoverflow.com/users/727667/gallais"}, "edited": false, "score": 8, "creation_date": 1500926507, "post_id": 45287954, "comment_id": 77540563, "body": "Cf. <a href=\"https://en.wikipedia.org/wiki/Yoneda_lemma#General_version\" rel=\"nofollow noreferrer\">Yoneda lemma</a> with <code>F = Id</code>."}, {"owner": {"reputation": 7792, "user_id": 242189, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/48a18a00706b9c7206ef4092b6e68a41?s=128&d=identicon&r=PG", "display_name": "nicolas", "link": "https://stackoverflow.com/users/242189/nicolas"}, "edited": false, "score": 0, "creation_date": 1501020577, "post_id": 45287954, "comment_id": 77591102, "body": "sure, it&#39;s &quot;iso&quot;, but only if ignoring control is not a big deal. but that is a big deal. your <code>a</code> might be on the other side of the planet, locked in a cage, whose key is in a well, held by an old man, etc.."}, {"owner": {"reputation": 31243, "user_id": 2751851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/4ddc0.png?s=128&g=1", "display_name": "duplode", "link": "https://stackoverflow.com/users/2751851/duplode"}, "edited": false, "score": 1, "creation_date": 1524403562, "post_id": 45287954, "comment_id": 86948422, "body": "&quot;And what would you call something with type <code>(a -&gt; b) -&gt; b</code>&quot; -- FWIW, I like &quot;suspended computation&quot;, or &quot;suspension&quot;, taking my cue from <a href=\"https://stackoverflow.com/a/3323122/2751851\">this classic answer</a>."}], "answers": [{"comments": [{"owner": {"reputation": 48938, "user_id": 246886, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/dd1ebaade6623fc538fb8af3338e730d?s=128&d=identicon&r=PG", "display_name": "Jon Purdy", "link": "https://stackoverflow.com/users/246886/jon-purdy"}, "edited": false, "score": 3, "creation_date": 1500939098, "post_id": 45288920, "comment_id": 77545491, "body": "As gallais hinted at, <code>Codensity Identity a</code> also happens to be isomorphic to <code>Yoneda Identity a</code> (<code>Yoneda f a = forall b. (a -&gt; b) -&gt; f b</code>), so this is a good place to start learning about the Yoneda lemma and Kan extensions. (It\u2019s worth pointing out that this is a natural transformation from <code>(-&gt;) a</code> to <code>f</code>.) You can also think of Yoneda as corresponding to a kind of Church/CPS encoding of a functor. I also don\u2019t know what you\u2019d call that in plain English, haha"}, {"owner": {"reputation": 4234, "user_id": 4942760, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f322d06b4f3e34278f29a954e0f38cb1?s=128&d=identicon&r=PG&f=1", "display_name": "Dan Robertson", "link": "https://stackoverflow.com/users/4942760/dan-robertson"}, "edited": false, "score": 2, "creation_date": 1500980078, "post_id": 45288920, "comment_id": 77563642, "body": "I would probably say that <code>cont b a</code> can be equivalent to <code>a</code> even if <code>b</code> contains less information than <code>a</code>. What matters is how much information <code>b^a</code> can hold. For example any countable and recursively enumerable type <code>a</code> with equality is equivalent to <code>cont a Bool</code> and if a type is bounded and supports interval bisection (e.g functions taking natural numbers to $\\{0,1\\}$, i.e. Computable real numbers in [0,1] (roughly)) then it is isomorphic to <code>Cont a Ord</code>."}, {"owner": {"reputation": 57219, "user_id": 33796, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/08727b23ba62e634b32988cdff082663?s=128&d=identicon&r=PG", "display_name": "luqui", "link": "https://stackoverflow.com/users/33796/luqui"}, "reply_to_user": {"reputation": 4234, "user_id": 4942760, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f322d06b4f3e34278f29a954e0f38cb1?s=128&d=identicon&r=PG&f=1", "display_name": "Dan Robertson", "link": "https://stackoverflow.com/users/4942760/dan-robertson"}, "edited": false, "score": 0, "creation_date": 1500980826, "post_id": 45288920, "comment_id": 77564204, "body": "@DanRobertson, great observation! I made a note of it in the answer."}], "tags": [], "owner": {"reputation": 57219, "user_id": 33796, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/08727b23ba62e634b32988cdff082663?s=128&d=identicon&r=PG", "display_name": "luqui", "link": "https://stackoverflow.com/users/33796/luqui"}, "is_accepted": false, "score": 27, "last_activity_date": 1500980810, "last_edit_date": 1500980810, "creation_date": 1500925813, "answer_id": 45288920, "question_id": 45287954, "link": "https://stackoverflow.com/questions/45287954/is-having-a-a-b-b-equivalent-to-having-an-a/45288920#45288920", "title": "Is having a `(a -&gt; b) -&gt; b` equivalent to having an `a`?", "body": "<p>This question is a window into a number of deeper concepts.</p>\n\n<p>First, note there is an ambiguity in this question.  Do we mean the type <code>forall b. (a -&gt; b) -&gt; b</code>, such that we can instantiate <code>b</code> with whatever type we like, or do we mean <code>(a -&gt; b) -&gt; b</code> for some specific <code>b</code> that we cannot choose.</p>\n\n<p>We can formalize this distinction in Haskell thus:</p>\n\n<pre><code>newtype Cont b a = Cont ((a -&gt; b) -&gt; b)\nnewtype Cod a    = Cod (forall b. (a -&gt; b) -&gt; b)\n</code></pre>\n\n<p>Here we see some vocabulary.  The first type is the <a href=\"https://hackage.haskell.org/package/transformers-0.5.4.0/docs/Control-Monad-Trans-Cont.html\" rel=\"noreferrer\"><code>Cont</code></a> monad, the second is <a href=\"https://hackage.haskell.org/package/kan-extensions-5.0.2/docs/Control-Monad-Codensity.html\" rel=\"noreferrer\"><code>Codensity</code></a><a href=\"http://hackage.haskell.org/package/base-4.9.1.0/docs/Data-Functor-Identity.html\" rel=\"noreferrer\"><code>Identity</code></a>, though my familiarity with the latter term isn't strong enough to say what you should call that in English.</p>\n\n<p><code>Cont b a</code> can't be equivalent to <code>a</code> unless <code>a -&gt; b</code> can hold at least as much information as <code>a</code> (see Dan Robertson's comment below).  So, for example, notice that you can never get anything out of <code>Cont</code><a href=\"https://hackage.haskell.org/package/void-0.6.1/docs/Data-Void.html\" rel=\"noreferrer\"><code>Void</code></a><code>a</code>.</p>\n\n<p><code>Cod a</code> is equivalent to <code>a</code>.  To see this it is enough to witness the isomorphism:</p>\n\n<pre><code>toCod :: a -&gt; Cod a\nfromCod :: Cod a -&gt; a\n</code></pre>\n\n<p>whose implementations I'll leave as an exercise.  If you want to really do it up, you can try to prove that this pair really is an isomorphism.  <code>fromCod . toCod = id</code> is easy, but <code>toCod . fromCod = id</code> requires the <a href=\"https://www.well-typed.com/blog/2015/05/parametricity/\" rel=\"noreferrer\">free theorem</a> for <code>Cod</code>.</p>\n"}, {"comments": [{"owner": {"reputation": 1453, "user_id": 227099, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/119441a7294b82cc413f1a0372113956?s=128&d=identicon&r=PG", "display_name": "minimalis", "link": "https://stackoverflow.com/users/227099/minimalis"}, "edited": false, "score": 2, "creation_date": 1500984295, "post_id": 45291794, "comment_id": 77566807, "body": "Great stuff. I&#39;m now wondering about a <code>type ApplicativeBox f a = forall b. f (a -&gt; b) -&gt; f b</code>"}, {"owner": {"reputation": 1453, "user_id": 227099, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/119441a7294b82cc413f1a0372113956?s=128&d=identicon&r=PG", "display_name": "minimalis", "link": "https://stackoverflow.com/users/227099/minimalis"}, "edited": false, "score": 1, "creation_date": 1501018048, "post_id": 45291794, "comment_id": 77590115, "body": "For those interested: <a href=\"https://www.reddit.com/r/haskell/comments/6pgsy3/is_having_a_a_b_b_equivalent_to_having_an_a/dkpcxvt/\" rel=\"nofollow noreferrer\">reddit.com/r/haskell/comments/6pgsy3/&hellip;</a>"}, {"owner": {"reputation": 1963, "user_id": 2840542, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/eO77F.jpg?s=128&g=1", "display_name": "AntC", "link": "https://stackoverflow.com/users/2840542/antc"}, "edited": false, "score": 0, "creation_date": 1501036804, "post_id": 45291794, "comment_id": 77595294, "body": "If I&#39;m grokking the discussion on reddit: not only is <code>b</code> allowed to be same as <code>a</code>; it can <i>only</i> be <code>a</code> (if we exclude non-terminating expressions/bottom values). So type <code>forall b.(a -&gt; b) -&gt; b</code> can only get instantiated as <code>(a -&gt; a) -&gt; a</code>. Which is obviously equivalent to <code>a</code>."}, {"owner": {"reputation": 14582, "user_id": 2225384, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f30b04ed4d0b3fc4bc791a28815f34ca?s=128&d=identicon&r=PG", "display_name": "Rein Henrichs", "link": "https://stackoverflow.com/users/2225384/rein-henrichs"}, "edited": false, "score": 0, "creation_date": 1501036887, "post_id": 45291794, "comment_id": 77595306, "body": "No, that&#39;s not true. The caller can choose any <code>b</code> they want. Try it!"}, {"owner": {"reputation": 1963, "user_id": 2840542, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/eO77F.jpg?s=128&g=1", "display_name": "AntC", "link": "https://stackoverflow.com/users/2840542/antc"}, "edited": false, "score": 0, "creation_date": 1501038590, "post_id": 45291794, "comment_id": 77595723, "body": "@ReinHenrichs, in your answer: &quot;we can&#39;t generate arbitrary values in Haskell&quot;. So we can&#39;t generate an arbitrary value for some arbitrary type <code>b</code>. We could choose <code>b ~ Int</code>; then we get <code>(a -&gt; Int) -&gt; Int</code>. We could only satisfy that with some constant function that ignores the <code>a</code> (say <code>const 17</code>). That&#39;s not type <code>forall b.(a -&gt; b) -&gt; b</code>."}, {"owner": {"reputation": 14582, "user_id": 2225384, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f30b04ed4d0b3fc4bc791a28815f34ca?s=128&d=identicon&r=PG", "display_name": "Rein Henrichs", "link": "https://stackoverflow.com/users/2225384/rein-henrichs"}, "edited": false, "score": 0, "creation_date": 1501038699, "post_id": 45291794, "comment_id": 77595756, "body": "No, that&#39;s not true. We can&#39;t generate <i>arbitrary</i> values, but we aren&#39;t trying to generate arbitrary values when we give the box a function. The function generates the values. Consider: <code>box True (bool 1 2)</code>. This is literally just <code>bool 1 2 True</code>. What the box <i>can&#39;t</i> do is give back <code>3</code> or some other arbitrary value. It can only give you a (non-bottom) value by applying the function."}, {"owner": {"reputation": 1963, "user_id": 2840542, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/eO77F.jpg?s=128&g=1", "display_name": "AntC", "link": "https://stackoverflow.com/users/2840542/antc"}, "edited": false, "score": 0, "creation_date": 1501040088, "post_id": 45291794, "comment_id": 77596109, "body": "Now you&#39;ve instantiated <code>a ~ Bool</code>. So we have <code>forall b. (Bool -&gt; b) -&gt; b</code>. I&#39;m not seeing how this is parametric in <code>a</code> and <code>forall b.</code>. You say &quot;the box maker chooses <code>a</code> and the box user chooses <code>b</code>.&quot; The box user has to know &#39;in advance&#39; what the box maker has chosen for <code>a</code>. Then we have to overload the function (or something) to depend on the choice for <code>a</code>."}, {"owner": {"reputation": 14582, "user_id": 2225384, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f30b04ed4d0b3fc4bc791a28815f34ca?s=128&d=identicon&r=PG", "display_name": "Rein Henrichs", "link": "https://stackoverflow.com/users/2225384/rein-henrichs"}, "edited": false, "score": 2, "creation_date": 1501040205, "post_id": 45291794, "comment_id": 77596142, "body": "The box user must know what the box maker has chosen for <code>a</code> because the box maker has already chosen <code>a</code> when they made the box. Anyway, there&#39;s no point in arguing about this when you could convince yourself by spending 30 seconds in GHCi."}, {"owner": {"reputation": 321, "user_id": 8369843, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1b3d592956f00bc74e43be42e084015f?s=128&d=identicon&r=PG&f=1", "display_name": "Christian Sievers", "link": "https://stackoverflow.com/users/8369843/christian-sievers"}, "edited": false, "score": 0, "creation_date": 1501071381, "post_id": 45291794, "comment_id": 77614928, "body": "Reading that something is &quot;just <code>flip ($)</code>&quot;, I just <i>have</i> to add the observation (because I was so amazed when I first realized it) that <code>($)</code> is just <code>id</code> restricted to function types."}, {"owner": {"reputation": 1963, "user_id": 2840542, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/eO77F.jpg?s=128&g=1", "display_name": "AntC", "link": "https://stackoverflow.com/users/2840542/antc"}, "edited": false, "score": 0, "creation_date": 1501161213, "post_id": 45291794, "comment_id": 77664817, "body": "@ReinHenrichs, SO was getting grumpy about our exchange, and suggested we take it to a chat room. I&#39;ve set one up (I hope ;-). All welcome! <a href=\"https://chat.stackoverflow.com/rooms/150304/https-stackoverflow-com-questions-45287954-is-having-a-a-b-b-equivalent-to-havi\">chat.stackoverflow.com/rooms/150304/&hellip;</a>"}, {"owner": {"reputation": 57219, "user_id": 33796, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/08727b23ba62e634b32988cdff082663?s=128&d=identicon&r=PG", "display_name": "luqui", "link": "https://stackoverflow.com/users/33796/luqui"}, "edited": false, "score": 0, "creation_date": 1530563703, "post_id": 45291794, "comment_id": 89270890, "body": "BTW the <code>unbox . box = id</code> proof is the easy one.  <code>box . unbox = id</code> requires a parametricity assumption, and so is not a similarly trivial proof."}, {"owner": {"reputation": 14582, "user_id": 2225384, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f30b04ed4d0b3fc4bc791a28815f34ca?s=128&d=identicon&r=PG", "display_name": "Rein Henrichs", "link": "https://stackoverflow.com/users/2225384/rein-henrichs"}, "reply_to_user": {"reputation": 57219, "user_id": 33796, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/08727b23ba62e634b32988cdff082663?s=128&d=identicon&r=PG", "display_name": "luqui", "link": "https://stackoverflow.com/users/33796/luqui"}, "edited": false, "score": 0, "creation_date": 1531598382, "post_id": 45291794, "comment_id": 89659231, "body": "@luqui why do you think I did that one? ;)"}], "tags": [], "owner": {"reputation": 14582, "user_id": 2225384, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f30b04ed4d0b3fc4bc791a28815f34ca?s=128&d=identicon&r=PG", "display_name": "Rein Henrichs", "link": "https://stackoverflow.com/users/2225384/rein-henrichs"}, "is_accepted": true, "score": 45, "last_activity_date": 1500963707, "last_edit_date": 1500963707, "creation_date": 1500940549, "answer_id": 45291794, "question_id": 45287954, "link": "https://stackoverflow.com/questions/45287954/is-having-a-a-b-b-equivalent-to-having-an-a/45291794#45291794", "title": "Is having a `(a -&gt; b) -&gt; b` equivalent to having an `a`?", "body": "<p>luqui's answer is excellent but I'm going to offer another explanation of <code>forall b. (a -&gt; b) -&gt; b === a</code> for a couple reasons: First, because I think the generalization to Codensity is a bit overenthusiastic. And second, because it's an opportunity to tie a bunch of interesting things together. Onwards!</p>\n\n<h3>z5h's Magic Box</h3>\n\n<p>Imagine that someone flipped a coin and then put it in a magic box. You can't see inside the box but if you choose a type <code>b</code> and pass the box a function with the type <code>Bool -&gt; b</code>, the box will spit out a <code>b</code>. What can we learn about this box without looking inside it? Can we learn what the state of the coin is? Can we learn what mechanism the box uses to produce the <code>b</code>? As it turns out, we can do both.</p>\n\n<p>We can define the box as a <em>rank 2</em> function of type <code>Box Bool</code> where</p>\n\n<pre><code>type Box a = forall b. (a -&gt; b) -&gt; b\n</code></pre>\n\n<p>(Here, the rank 2 type means that the box maker chooses <code>a</code> and the box user chooses <code>b</code>.)</p>\n\n<p>We put the <code>a</code> in the box and then we close the box, creating... a <em>closure</em>. </p>\n\n<pre><code>-- Put the a in the box.\nbox :: a -&gt; Box a\nbox a f = f a\n</code></pre>\n\n<p>For example, <code>box True</code>. Partial application is just a clever way to create closures!</p>\n\n<p>Now, is the coin heads or tails? Since I, the box user, am allowed to choose <code>b</code>, I can choose <code>Bool</code> and pass in a function <code>Bool -&gt; Bool</code>. If I choose <code>id :: Bool -&gt; Bool</code> then the question is: will the box spit out the value it contains? The answer is that the box will either spit out the value it contains or it will spit out nonsense (a bottom value like <code>undefined</code>). In other words, if you get an answer then that answer <strong>must</strong> be correct.</p>\n\n<pre><code>-- Get the a out of the box.\nunbox :: Box a -&gt; a\nunbox f = f id\n</code></pre>\n\n<p>Because we can't generate arbitrary values in Haskell, the only sensical thing the box can do is apply the given function to the value it is hiding. This is a consequence of parametric polymorphism, also known as <em>parametricity</em>.</p>\n\n<p>Now, to show that <code>Box a</code> is isomorphic to <code>a</code>, we need to prove two things about boxing and unboxing. We need to prove that you get out what you put in and that you can put in what you get out.</p>\n\n<pre><code>unbox . box = id\nbox . unbox = id\n</code></pre>\n\n<p>I'll do the first one and leave the second as an exercise for the reader.</p>\n\n<pre><code>  unbox . box\n= {- definition of (.) -}\n  \\b -&gt; unbox (box b)\n= {- definition of unbox and (f a) b = f a b -}\n  \\b -&gt; box b id\n= {- definition of box -}\n  \\b -&gt; id b\n= {- definition of id -}\n  \\b -&gt; b\n= {- definition of id, backwards -}\n  id\n</code></pre>\n\n<p>(If these proofs seem rather trivial, that's because all (total) polymorphic functions in Haskell are natural transformations and what we're proving here <strong>is</strong> naturality. Parametricity once again provides us with theorems for low, low prices!)</p>\n\n<p>As an aside and another exercise for the reader, why can't I actually define <code>rebox</code> with <code>(.)</code>?</p>\n\n<pre><code>rebox = box . unbox\n</code></pre>\n\n<p>Why do I have to inline the definition of <code>(.)</code> myself like some sort of cave person?</p>\n\n<pre><code>rebox :: Box a -&gt; Box a\nrebox f = box (unbox f)\n</code></pre>\n\n<p>(Hint: what are the types of <code>box</code>, <code>unbox</code>, and <code>(.)</code>?)</p>\n\n<h2>Identity and Codensity and Yoneda, Oh My!</h2>\n\n<p>Now, how can we generalize <code>Box</code>? luqui uses <a href=\"http://hackage.haskell.org/package/kan-extensions-5.0.2/docs/Control-Monad-Codensity.html\" rel=\"noreferrer\">Codensity</a>: both <code>b</code>s are generalized by an arbitrary type constructor which we will call <code>f</code>. This is the Codensity <a href=\"http://comonad.com/reader/2011/free-monads-for-less/\" rel=\"noreferrer\">transform</a> of <code>f a</code>.</p>\n\n<pre><code>type CodenseBox f a = forall b. (a -&gt; f b) -&gt; f b\n</code></pre>\n\n<p>If we fix <code>f ~ Identity</code> then we get back <code>Box</code>. However, there's another option: we can hit only the return type with <code>f</code>:</p>\n\n<pre><code>type YonedaBox f a = forall b. (a -&gt; b) -&gt; f b\n</code></pre>\n\n<p>(I've sort of given away the game here with this name but we'll come back to that.) We can also fix <code>f ~ Identity</code> here to recover <code>Box</code>, but we let the box user pass in a normal function rather than a Kleisli arrow. To understand <strong>what</strong> we're generalizing, let's look again at the definition of <code>box</code>:</p>\n\n<pre><code>box a f = f a\n</code></pre>\n\n<p>Well, this is just <code>flip ($)</code>, isn't it? And it turns out that our other two boxes are built by generalizing <code>($)</code>: <code>CodenseBox</code> is a partially applied, flipped monadic bind and <code>YonedaBox</code> is a partially applied <code>flip fmap</code>. (This also explains why <code>Codensity f</code> is a <code>Monad</code> and <code>Yoneda f</code> is a <code>Functor</code> for <strong>any</strong> choice of <code>f</code>: The only way to create one is by closing over a bind or fmap, respectively.) Furthermore, both of these esoteric category theory concepts are really generalizations of a concept that is familiar to many working programmers: the CPS transform!</p>\n\n<p>In other words, <code>YonedaBox</code> is the Yoneda Embedding and the properly abstracted <code>box</code>/<code>unbox</code> laws for <code>YonedaBox</code> are the proof of the Yoneda Lemma!</p>\n\n<p><strong>TL;DR:</strong></p>\n\n<p><code>forall b. (a -&gt; b) -&gt; b === a</code> is an instance of the Yoneda Lemma.</p>\n"}, {"tags": [], "owner": {"reputation": 963, "user_id": 568190, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/RyCSB.jpg?s=128&g=1", "display_name": "Nick Rioux", "link": "https://stackoverflow.com/users/568190/nick-rioux"}, "is_accepted": false, "score": 13, "last_activity_date": 1528756643, "last_edit_date": 1528756643, "creation_date": 1501007082, "answer_id": 45310975, "question_id": 45287954, "link": "https://stackoverflow.com/questions/45287954/is-having-a-a-b-b-equivalent-to-having-an-a/45310975#45310975", "title": "Is having a `(a -&gt; b) -&gt; b` equivalent to having an `a`?", "body": "<p>The other answers have done a great job describing the relationship between the types <code>forall b . (a -&gt; b) -&gt; b</code> and <code>a</code> but I'd like to point out one caveat because it leads to some interesting open questions that I have been working on.</p>\n\n<p>Technically, <code>forall b . (a -&gt; b) -&gt; b</code> and <code>a</code> are <em>not</em> isomorphic in a langauge like Haskell which (1) allows you to write an expression that doesn't terminate and (2) is either call-by-value (strict) or contains <code>seq</code>. My point here is <strong>not</strong> to be nitpicky or show that parametricity is weakened in Haskell (as is well-known) but that there may be neat ways to strengthen it and in some sense reclaim isomorphisms like this one.</p>\n\n<p>There are some terms of type <code>forall b . (a -&gt; b) -&gt; b</code> that cannot be expressed as an <code>a</code>. To see why, let's start by looking at the proof Rein left as an exercise, <code>box . unbox = id</code>. It turns out this proof is actually more interesting than the one in his answer, as it relies on parametricity in a crucial way.</p>\n\n<pre><code>box . unbox\n= {- definition of (.) -}\n  \\m -&gt; box (unbox m)\n= {- definition of box -}\n  \\m f -&gt; f (unbox m)\n= {- definition of unbox -}\n  \\m f -&gt; f (m id)\n= {- free theorem: f (m id) = m f -}\n  \\m f -&gt; m f\n= {- eta: (\\f -&gt; m f) = m -}\n  \\m -&gt; m\n= {- definition of id, backwards -}\n  id\n</code></pre>\n\n<p>The interesting step, where parametricity comes into play, is applying the <em>free theorem</em> <code>f (m id) = m f</code>. This property is a consequence of <code>forall b . (a -&gt; b) -&gt; b</code>, the type of <code>m</code>. If we think of <code>m</code> as a box with an underlying value of type <code>a</code> inside, then the only thing <code>m</code> can do with its argument is apply it to this underlying value and return the result. On the left side, this means that <code>f (m id)</code> extracts the underlying value from the box, and passes it to <code>f</code>. On the right, this means that <code>m</code> applies <code>f</code> directly to the underlying value. </p>\n\n<p>Unfortunately, this reasoning doesn't quite hold when we have terms like the <code>m</code> and <code>f</code> below.</p>\n\n<pre><code>m :: (Bool -&gt; b) -&gt; b\nm k = seq (k true) (k false)\n\nf :: Bool -&gt; Int\nf x = if x then \u22a5 else 2`\n</code></pre>\n\n<p>Recall we wanted to show <code>f (m id) = m f</code></p>\n\n<pre><code>f (m id)\n= {- definition f -}\n  if (m id) then \u22a5 else 2\n= {- definition of m -}\n  if (seq (id true) (id false)) then \u22a5 else 2\n= {- definition of id -}\n  if (seq true (id false)) then \u22a5 else 2\n= {- definition of seq -}\n  if (id false) then \u22a5 else 2\n= {- definition of id -}\n  if false then \u22a5 else 2\n= {- definition of if -}\n  2\n\nm f\n= {- definition of m -}\n  seq (f true) (f false)\n= {- definition of f -}\n  seq (if true then \u22a5 else 2) (f false)\n= {- definition of if -}\n  seq \u22a5 (f false)\n= {- definition of seq -}\n  \u22a5\n</code></pre>\n\n<p>Clearly <code>2</code> is not equal to <code>\u22a5</code> so we have lost our free theorem and the isomorphism between <code>a</code> and <code>(a -&gt; b) -&gt; b</code> with it. But what happened, exactly? Essentially, <code>m</code> isn't just a nicely behaved box because it applies its argument to two different underlying values (and uses <code>seq</code> to ensure both of these applications are actually evaluated), which we can observe by passing in a continuation that terminates on one of these underlying values, but not the other. In other words, <code>m id = false</code> isn't really a faithful representation of <code>m</code> as a <code>Bool</code> because it 'forgets' the fact that <code>m</code> calls its input with <strong>both</strong> <code>true</code> and <code>false</code>.</p>\n\n<p>The problem is a result of the interaction between three things:</p>\n\n<ol>\n<li>The presence of nontermination.</li>\n<li>The presence of seq.</li>\n<li>The fact that terms of type <code>forall b . (a -&gt; b) -&gt; b</code> may apply their input multiple times.</li>\n</ol>\n\n<p>There isn't much hope of getting around points 1 or 2. <a href=\"https://www.tweag.io/posts/2017-03-13-linear-types.html\" rel=\"nofollow noreferrer\">Linear types</a> may give us an opportunity to combat the third issue, though. A <em>linear function</em> of type <code>a \u22b8 b</code> is a function from type <code>a</code> to type <code>b</code> which must use its input exactly once. If we require <code>m</code> to have the type <code>forall b . (a -&gt; b) \u22b8 b</code>, then this rules out our counterexample to the free theorem and should let us show an isomorphism between <code>a</code> and <code>forall b . (a -&gt; b) \u22b8 b</code> <em>even in the presence of nontermination and <code>seq</code></em>.</p>\n\n<p>This is really cool! It shows that linearity has the ability to 'rescue' interesting properties by taming effects that can make true equational reasoning difficult.</p>\n\n<p>One big issue remains, though. We don't yet have techniques to prove the free theorem we need for the type <code>forall b . (a -&gt; b) \u22b8 b</code>. It turns out current logical relations (the tools we normally use to do such proofs) haven't been designed to take into account linearity in the way that is needed. This problem has implications for establishing correctness for compilers that do CPS translations.</p>\n"}], "owner": {"reputation": 21877, "user_id": 131227, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/60e3c03e227b84e2898c29fd711cae5b?s=128&d=identicon&r=PG", "display_name": "z5h", "link": "https://stackoverflow.com/users/131227/z5h"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3770, "favorite_count": 16, "accepted_answer_id": 45291794, "answer_count": 3, "score": 39, "last_activity_date": 1528756643, "creation_date": 1500922229, "last_edit_date": 1500929648, "question_id": 45287954, "link": "https://stackoverflow.com/questions/45287954/is-having-a-a-b-b-equivalent-to-having-an-a", "title": "Is having a `(a -&gt; b) -&gt; b` equivalent to having an `a`?", "body": "<p>In a pure functional language, the only thing you can do with a value is apply a function to it.</p>\n\n<p>In other words, if you want to do anything interesting with a value of type <code>a</code> you need a function (for example) with type <code>f :: a -&gt; b</code> and then apply it. If someone hands you <code>(flip apply) a</code> with type <code>(a -&gt; b) -&gt; b</code>, is that a suitable replacement for <code>a</code>? </p>\n\n<p>And what would you call something with type <code>(a -&gt; b) -&gt; b</code>? Seeing as it appears to be a stand-in for an <code>a</code>, I'd be tempted to call it a proxy, or something from <a href=\"http://www.thesaurus.com/browse/proxy\" rel=\"noreferrer\">http://www.thesaurus.com/browse/proxy</a>.</p>\n"}, {"tags": ["haskell"], "comments": [{"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "edited": false, "score": 1, "creation_date": 1500920992, "post_id": 45286348, "comment_id": 77537588, "body": "<code>truncate </code> can already return an <code>Int</code>. You don&#39;t need to <code>show</code> and then <code>read</code> it. So: <code>getTimestampX n = truncate . (* fromIntegral n) &lt;$&gt; getPOSIXTime</code>. (Not making this an answer because it doesn&#39;t explain the problem, only solves it; there&#39;s already a good answer with explanations.)"}, {"owner": {"reputation": 419, "user_id": 4278306, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/wRZQS.jpg?s=128&g=1", "display_name": "Be Wake Pandey", "link": "https://stackoverflow.com/users/4278306/be-wake-pandey"}, "reply_to_user": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "edited": false, "score": 0, "creation_date": 1500949131, "post_id": 45286348, "comment_id": 77547662, "body": "I liked this answer more.  Had it been in the answer section, I would have marked it as answer. Thanks."}], "answers": [{"comments": [{"owner": {"reputation": 419, "user_id": 4278306, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/wRZQS.jpg?s=128&g=1", "display_name": "Be Wake Pandey", "link": "https://stackoverflow.com/users/4278306/be-wake-pandey"}, "edited": false, "score": 0, "creation_date": 1500948125, "post_id": 45286493, "comment_id": 77547442, "body": "Thanks for the solution, and an explanation."}, {"owner": {"reputation": 419, "user_id": 4278306, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/wRZQS.jpg?s=128&g=1", "display_name": "Be Wake Pandey", "link": "https://stackoverflow.com/users/4278306/be-wake-pandey"}, "edited": false, "score": 0, "creation_date": 1500949191, "post_id": 45286493, "comment_id": 77547670, "body": "However, if you look at the comment in the question above, it also has a solution which works even without using POSIXTime instead of Int. Nice explanation though."}], "tags": [], "owner": {"reputation": 13441, "user_id": 2199600, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/8sl6u.jpg?s=128&g=1", "display_name": "Igor Drozdov", "link": "https://stackoverflow.com/users/2199600/igor-drozdov"}, "is_accepted": true, "score": 1, "last_activity_date": 1500916791, "creation_date": 1500916791, "answer_id": 45286493, "question_id": 45286348, "link": "https://stackoverflow.com/questions/45286348/haskell-couldnt-match-type-data-time-clock-utc-nominaldifftime-with-int/45286493#45286493", "title": "Haskell couldn&#39;t match type Data.Time.Clock.UTC.NominalDiffTime with Int", "body": "<p>That is because <code>getPOSIXTime</code> returns <code>IO POSIXTime</code>, not <code>IO Int</code></p>\n\n<p>That works:</p>\n\n<pre><code>getTimestampX :: POSIXTime -&gt; IO Int\ngetTimestampX n = do\n    tstamp &lt;- fmap (truncate . (* n)) getPOSIXTime\n    let str = show tstamp\n        intval = read str :: Int\n    return intval\n</code></pre>\n\n<p>Your case with a raw number worked, because <code>Haskell</code> can infer <code>10</code> to <code>POSIXTime</code>. But when you provide a variable with a defined type <code>Int</code>, compiler fails to match types.</p>\n"}], "owner": {"reputation": 419, "user_id": 4278306, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/wRZQS.jpg?s=128&g=1", "display_name": "Be Wake Pandey", "link": "https://stackoverflow.com/users/4278306/be-wake-pandey"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 153, "favorite_count": 0, "accepted_answer_id": 45286493, "answer_count": 1, "score": 0, "last_activity_date": 1500916791, "creation_date": 1500916312, "question_id": 45286348, "link": "https://stackoverflow.com/questions/45286348/haskell-couldnt-match-type-data-time-clock-utc-nominaldifftime-with-int", "title": "Haskell couldn&#39;t match type Data.Time.Clock.UTC.NominalDiffTime with Int", "body": "<p>I am trying to get UTC timestamp in haskell. The original function <code>getPOSIXTime</code> gives timestamp in seconds. I want it in milli and microseconds. I wrote a function to multiply seconds timestamp by a factor like this:</p>\n\n<pre><code>-- get timestamp in seconds multiplied by factor\ngetTimestampX :: Int -&gt; IO Int\ngetTimestampX n = do\n    tstamp &lt;- fmap (truncate . (* n)) getPOSIXTime\n    let str = show tstamp\n        intval = read str :: Int\n    return intval\n</code></pre>\n\n<p>However this is throwing the following error: </p>\n\n<pre><code>Couldn't match type \u2018time-1.6.0.1:Data.Time.Clock.UTC.NominalDiffTime\u2019\n                     with \u2018Int\u2019\n      Expected type: IO Int\n        Actual type: IO POSIXTime\n    \u2022 In the second argument of \u2018fmap\u2019, namely \u2018getPOSIXTime\u2019\n      In a stmt of a 'do' block:\n        tstamp &lt;- fmap (truncate . (* n)) getPOSIXTime\n      In the expression:\n        do { tstamp &lt;- fmap (truncate . (* n)) getPOSIXTime;\n             let str = show tstamp\n                 intval = ...;\n             return intval }\n</code></pre>\n\n<p>But if I use any integer value like 100, 1000 in place of <code>n</code> then it is working fine. Am I missing some concept here? Any help would be appreciated.</p>\n"}, {"tags": ["haskell", "types"], "comments": [{"owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "edited": false, "score": 0, "creation_date": 1500908399, "post_id": 45283805, "comment_id": 77530137, "body": "That link is broken."}, {"owner": {"reputation": 62421, "user_id": 216164, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/786f224adbe0784cdf7d0f15476061fe?s=128&d=identicon&r=PG", "display_name": "Thomas M. DuBuisson", "link": "https://stackoverflow.com/users/216164/thomas-m-dubuisson"}, "edited": false, "score": 0, "creation_date": 1500909424, "post_id": 45283805, "comment_id": 77530869, "body": "I don&#39;t think I understand the question fully."}, {"owner": {"reputation": 7463, "user_id": 1145760, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/065408758852145010d28c2aa811ca68?s=128&d=identicon&r=PG", "display_name": "Vorac", "link": "https://stackoverflow.com/users/1145760/vorac"}, "reply_to_user": {"reputation": 62421, "user_id": 216164, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/786f224adbe0784cdf7d0f15476061fe?s=128&d=identicon&r=PG", "display_name": "Thomas M. DuBuisson", "link": "https://stackoverflow.com/users/216164/thomas-m-dubuisson"}, "edited": false, "score": 0, "creation_date": 1500909651, "post_id": 45283805, "comment_id": 77531021, "body": "@ThomasM.DuBuisson how can I define a function <code>Int -&gt; IO() -&gt; Int</code>? Is this possible or sensible?"}], "answers": [{"tags": [], "owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "is_accepted": false, "score": 0, "last_activity_date": 1500910439, "last_edit_date": 1500910439, "creation_date": 1500910004, "answer_id": 45284482, "question_id": 45283805, "link": "https://stackoverflow.com/questions/45283805/how-to-pass-an-action/45284482#45284482", "title": "How to pass an action?", "body": "<p>Apparently, your issue has to do with the <em>universally-quantised field</em></p>\n\n<pre><code>data OpenDeviceSpec = OpenDeviceSpec {\n    ...\n  , openDeviceCallback :: forall actualSampleType. AudioFormat actualSampleType -&gt; IOVector actualSampleType -&gt; IO ()\n  , ...\n  }\n</code></pre>\n\n<p>...or, as it can be written more briefly,</p>\n\n<pre><code>data OpenDeviceSpec = OpenDeviceSpec {\n    ...\n  , openDeviceCallback :: \u2200 sT . AudioFormat sT -&gt; IOVector sT -&gt; IO ()\n  , ...\n  }\n</code></pre>\n\n<p>Don't worry, this is nothing difficult. In fact such a <code>\u2200</code> is implicit in all of the standard polymorphic functions, e.g.</p>\n\n<pre><code>map :: (a -&gt; b) -&gt; [a] -&gt; [b]\n</code></pre>\n\n<p>is actually shorthand<sup>\u2020</sup> for</p>\n\n<pre><code>map :: \u2200 a b . (a -&gt; b) -&gt; [a] -&gt; [b]\n</code></pre>\n\n<p>Likewise, to define your callback you just need to make sure it's <em>polymorphic in the sample type</em>. I.e.</p>\n\n<pre><code>openingCallback :: IO.Handle -&gt; A.AudioFormat sT -&gt; V.IOVector sT -&gt; IO ()\nopeningCallback _ (V.MVector size ptr)\n       = P.withForeignPtr ptr $ \\p -&gt; IO.hPutBuf h p size\n</code></pre>\n\n<p>and then</p>\n\n<pre><code>micSpec h = A.OpenDeviceSpec {\n                              ...\n                             ,A.openDeviceCallback = openingCallback h\n                             ,...\n                             }\n</code></pre>\n\n<p>If you want to have <code>openingCallback</code> as an argument to <code>micSpec</code>, you need to make that argument universally-quantified too. Like record fields and unlike top-level bindings, arguments must be declared with an explicit quantor to be universal:</p>\n\n<pre><code>{-# LANGUAGE Rank2Types, UnicodeSyntax #-}\nmicSpec :: (\u2200 sT . A.AudioFormat sT -&gt; V.IOVector sT -&gt; IO ())\n               -&gt; A.OpenDeviceSpec\nmicSpec openingCallback\n          = A.OpenDeviceSpec {\n                              ...\n                             ,A.openDeviceCallback = openingCallback\n                             ,...\n                             }\n</code></pre>\n\n<hr>\n\n<p><sup>\u2020</sup><sub>Well, I'm not sure if it really makes sense to put it this way, because <code>\u2200</code> isn't even legal in Haskell98. Still, the universal quantifier is how all polymorphic signatures should be read.</sub></p>\n"}], "owner": {"reputation": 7463, "user_id": 1145760, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/065408758852145010d28c2aa811ca68?s=128&d=identicon&r=PG", "display_name": "Vorac", "link": "https://stackoverflow.com/users/1145760/vorac"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 105, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1500910439, "creation_date": 1500908169, "last_edit_date": 1500909545, "question_id": 45283805, "link": "https://stackoverflow.com/questions/45283805/how-to-pass-an-action", "title": "How to pass an action?", "body": "<p>Apologies for the long code sample, please refer just to line 30: <code>A.openDeviceCallback =</code> . <code>micSpec</code> is a factory function for objects of type <a href=\"https://hackage.haskell.org/package/sdl2-2.2.0/docs/SDL-Audio.html\" rel=\"nofollow noreferrer\">A.OpenDeviceSpec</a>. I am unhappy with this function's parameter list.</p>\n\n<pre><code>{-# OPTIONS_GHC -Wall #-}\n\n\n-- Dependant on cabal packages: sdl2, wave.\n\n\nmodule Main where\n\n\nimport qualified Control.Concurrent as C\n--import qualified Control.Monad as M\nimport qualified Data.Vector.Storable.Mutable as V\nimport qualified Data.Set as S\nimport Foreign.ForeignPtr as P\n\nimport qualified SDL\nimport qualified SDL.Audio as A\n\nimport qualified Codec.Audio.Wave as W\n\nimport qualified System.IO as IO\n\nimport qualified Statistics.Sample as St\n\n\nmicSpec :: IO.Handle -&gt; A.OpenDeviceSpec\nmicSpec h = A.OpenDeviceSpec {A.openDeviceFreq = A.Mandate 48000\n                             ,A.openDeviceFormat = A.Mandate A.Signed16BitNativeAudio\n                             ,A.openDeviceChannels = A.Mandate A.Mono\n                             ,A.openDeviceSamples = 4096\n                             ,A.openDeviceCallback = \\_ (V.MVector size ptr) -&gt; P.withForeignPtr ptr (\\p -&gt; IO.hPutBuf h p size)\n                             ,A.openDeviceUsage = A.ForCapture\n                             ,A.openDeviceName = Nothing}\n\n\nwaveSpec :: W.Wave\nwaveSpec = W.Wave {W.waveFileFormat = W.WaveVanilla\n                  , W.waveSampleRate = 48000\n                  , W.waveSampleFormat = W.SampleFormatPcmInt 16\n                  , W.waveChannelMask = S.singleton W.SpeakerFrontCenter\n                  , W.waveDataOffset = 0\n                  , W.waveDataSize = 0\n                  , W.waveSamplesTotal = 0\n                  , W.waveOtherChunks = []}\n\n\nrecord :: IO.Handle -&gt; IO ()\nrecord h = do\n  SDL.initialize [SDL.InitAudio]\n  (dev, _) &lt;- A.openAudioDevice $ micSpec h\n  A.setAudioDevicePlaybackState dev A.Play\n--  _ &lt;- M.forever (C.threadDelay maxBound)\n  _ &lt;- C.threadDelay 10000000\n  return ()\n\n\nmain :: IO ()\nmain =  W.writeWaveFile \"mic.rec\" waveSpec record\n</code></pre>\n\n<p>In the context of such a simple program, the needed <code>A.OpenDeviceSpec</code> object is a set of constants, plus an action. Currently, the action is being constructed inline ... because that was the only way I managed to define it, without passing type information around.</p>\n\n<p>My intuition from C is in the lines of</p>\n\n<pre><code>type Cb =  A.AudioFormat t -&gt; A.IOVector t -&gt; IO () \nmicSpec :: Cb -&gt; A.OpenDeviceSpec\n</code></pre>\n\n<p>, but I couldn't make it work.</p>\n"}, {"tags": ["haskell", "f#", "functional-programming", "functor", "applicative"], "answers": [{"comments": [{"owner": {"reputation": 1853, "user_id": 5200896, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/4d824e2d8703ede58e09df9ae10ac572?s=128&d=identicon&r=PG", "display_name": "kogoia", "link": "https://stackoverflow.com/users/5200896/kogoia"}, "edited": false, "score": 0, "creation_date": 1500912070, "post_id": 45283021, "comment_id": 77532486, "body": "Thank you, I realized that I don&#39;t understand <code>Applicatives</code> correctly"}], "tags": [], "owner": {"reputation": 49501, "user_id": 784338, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ae195ac7c8a5e9002a808544572cc5fc?s=128&d=identicon&r=PG", "display_name": "Daniel Gratzer", "link": "https://stackoverflow.com/users/784338/daniel-gratzer"}, "is_accepted": true, "score": 10, "last_activity_date": 1500906517, "last_edit_date": 1500906517, "creation_date": 1500906070, "answer_id": 45283021, "question_id": 45282936, "link": "https://stackoverflow.com/questions/45282936/haskell-applicative-functor-in-f/45283021#45283021", "title": "Haskell Applicative Functor in F#", "body": "<p>I'm slightly confused by what your code is trying to achieve because it has the type</p>\n\n<pre><code>(a -&gt; Maybe b) -&gt; Maybe a -&gt; Maybe b\n</code></pre>\n\n<p>This is the type of bind for the monad structure we usually imbue <code>Maybe</code>/<code>option</code> with but it doesn't make sense if you're trying to work with the applicative instance for functions that we have in Haskell. There are two things we need to change then, the first is that we need to work with <em>functions</em> and <em>applicatives</em> in order to have the code achieve the desired effect. That ought to have the type</p>\n\n<pre><code> (a -&gt; (b -&gt; c)) -&gt; (a -&gt; b) -&gt; (a -&gt; c)\n</code></pre>\n\n<p>So we can write this as</p>\n\n<pre><code> let ( &lt;*&gt; ) f x a = (f a) (x a)\n</code></pre>\n\n<p>Now if we step the original example</p>\n\n<pre><code> (cnst &lt;*&gt; cnst) a = (cnst a) (cnst a)\n                   = a\n</code></pre>\n\n<p>so we indeed have that <code>cnst &lt;*&gt; cnst = id</code> as required.</p>\n"}], "owner": {"reputation": 1853, "user_id": 5200896, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/4d824e2d8703ede58e09df9ae10ac572?s=128&d=identicon&r=PG", "display_name": "kogoia", "link": "https://stackoverflow.com/users/5200896/kogoia"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 340, "favorite_count": 1, "accepted_answer_id": 45283021, "answer_count": 1, "score": 1, "last_activity_date": 1500915199, "creation_date": 1500905821, "last_edit_date": 1500915199, "question_id": 45282936, "link": "https://stackoverflow.com/questions/45282936/haskell-applicative-functor-in-f", "title": "Haskell Applicative Functor in F#", "body": "<p>In Haskell we can write code like this:</p>\n\n<pre><code>// (&lt;*&gt;) :: Applicative f =&gt; f (a -&gt; b) -&gt; f a -&gt; f b\n// const :: a -&gt; b -&gt; a\n// id :: b -&gt; b\nlet id = const &lt;*&gt; const\n</code></pre>\n\n<p>How to do same thing in F#?</p>\n\n<p>I try write code something like this, but it isn't same </p>\n\n<pre><code>let ( &lt;*&gt; ) f v =\n    match v with\n    | Some v' -&gt; \n        match f with \n        | Some f' -&gt; Some (f' v')\n        | _ -&gt; None\n    | _ -&gt; None\nlet cnst a _ = a\nlet id = cnst &lt;*&gt; cnst // but it seems impossible\nlet id' x = (Some (cnst x)) &lt;*&gt; (Some(cnst x x)) // it works\n</code></pre>\n\n<p>But in Haskell <code>id::b-&gt;b</code>, in F# <code>id:'a-&gt;'a Option</code></p>\n\n<p>What I do wrong? How to achieve the same result?</p>\n\n<p>PS: As I know with an Applicative, our values are wrapped in a context, just like Functors and functions are wrapped in a context too!</p>\n\n<pre><code>Some((+)3) and Some(2)\n</code></pre>\n\n<p>In this case Context is Option</p>\n\n<p>And <code>Applay</code> method is like this:</p>\n\n<pre><code>let Apply funInContext valInContext =\n    match funInContext with  // unwrap function\n    | Some f -&gt; \n        match valInContext with // unwrap value\n        | Some v -&gt; Some(f v) // applay function on value and wrap it\n        | _ -&gt; None\n    | _ -&gt; None \n</code></pre>\n"}, {"tags": ["haskell"], "comments": [{"owner": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "edited": false, "score": 0, "creation_date": 1500904675, "post_id": 45282482, "comment_id": 77527568, "body": "You should let <code>Asdf</code> deriving from <code>Eq</code>."}], "answers": [{"tags": [], "owner": {"reputation": 51584, "user_id": 839246, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9b0573c2b936b12828dd1e4cc04206dc?s=128&d=identicon&r=PG&f=1", "display_name": "bheklilr", "link": "https://stackoverflow.com/users/839246/bheklilr"}, "is_accepted": false, "score": 5, "last_activity_date": 1500904700, "creation_date": 1500904700, "answer_id": 45282570, "question_id": 45282482, "link": "https://stackoverflow.com/questions/45282482/how-to-do-a-simple-1-line-pattern-match-getting-a-bool-out-of-a-pattern-match/45282570#45282570", "title": "How to do a simple 1-line pattern match? (Getting a Bool out of a pattern match)", "body": "<p>The easiest way would be to <code>derive (Eq)</code> on your type:</p>\n\n<pre><code>data Asdf = Yes | No | Other deriving (Eq)\n</code></pre>\n\n<p>Then you can use use <code>==</code> like normal:</p>\n\n<pre><code>hello =\n    if foo == Yes\n        then \"foo is Yes\"\n        else \"foo isn't Yes\"\n</code></pre>\n\n<p>There are a number of potentially useful typeclasses you can derive additional, like <code>Ord</code>, <code>Enum</code>, <code>Show</code>, and <code>Read</code>.</p>\n"}, {"comments": [{"owner": {"reputation": 957, "user_id": 5771245, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/d4ff1986f900f764881c1862b5300a6d?s=128&d=identicon&r=PG&f=1", "display_name": "haskellHQ", "link": "https://stackoverflow.com/users/5771245/haskellhq"}, "edited": false, "score": 0, "creation_date": 1500905209, "post_id": 45282580, "comment_id": 77527837, "body": "I&#39;m definitely after a 1-liner for unit tests. Something I can use right beside <code>assertBool</code>. That&#39;s why I&#39;m liking your first solution. For instance <code>assertBool (case foo of {Yes -&gt; True; _ -&gt; False})</code>. It&#39;s not great, but I don&#39;t see how writing tons of helper functions that all look like <code>SomethingIsValue</code> improves things. What do you think?"}, {"owner": {"reputation": 957, "user_id": 5771245, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/d4ff1986f900f764881c1862b5300a6d?s=128&d=identicon&r=PG&f=1", "display_name": "haskellHQ", "link": "https://stackoverflow.com/users/5771245/haskellhq"}, "edited": false, "score": 0, "creation_date": 1500905280, "post_id": 45282580, "comment_id": 77527889, "body": "(I also agree with you that deriving <code>Eq</code> isn&#39;t all that great, because <code>Eq</code> means something more than that. Plus, that wouldn&#39;t work if the value constructors took arguments - arguments that I don&#39;t care about in unit tests.)"}, {"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "reply_to_user": {"reputation": 957, "user_id": 5771245, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/d4ff1986f900f764881c1862b5300a6d?s=128&d=identicon&r=PG&f=1", "display_name": "haskellHQ", "link": "https://stackoverflow.com/users/5771245/haskellhq"}, "edited": false, "score": 1, "creation_date": 1500907012, "post_id": 45282580, "comment_id": 77529104, "body": "@haskellHQ I would find the <code>assertBool</code> you mention to be alright. If you frequently use that, perhaps a function <code>isYes</code> doing the same check would be more convenient."}, {"owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "edited": false, "score": 1, "creation_date": 1500908062, "post_id": 45282580, "comment_id": 77529872, "body": "Yes, I&#39;d write <code>assertYes :: Asdf -&gt; Assertion</code>; <code>assertYes Yes = return ()</code>; <code>assert Yes q = assertFailure $ &quot;Expected Yes, got &quot;++show q</code>."}, {"owner": {"reputation": 48938, "user_id": 246886, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/dd1ebaade6623fc538fb8af3338e730d?s=128&d=identicon&r=PG", "display_name": "Jon Purdy", "link": "https://stackoverflow.com/users/246886/jon-purdy"}, "edited": false, "score": 1, "creation_date": 1500940234, "post_id": 45282580, "comment_id": 77545754, "body": "For what it\u2019s worth, you can omit the braces: <code>case foo of Yes -&gt; True; _ -&gt; False</code>."}], "tags": [], "owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "is_accepted": true, "score": 7, "last_activity_date": 1500904739, "creation_date": 1500904739, "answer_id": 45282580, "question_id": 45282482, "link": "https://stackoverflow.com/questions/45282482/how-to-do-a-simple-1-line-pattern-match-getting-a-bool-out-of-a-pattern-match/45282580#45282580", "title": "How to do a simple 1-line pattern match? (Getting a Bool out of a pattern match)", "body": "<p>You can use</p>\n\n<pre><code>hello =\n    if (case foo of {Yes -&gt; True; _ -&gt; False})\n     then \"foo is Yes\"\n     else \"foo isn't Yes\"\n</code></pre>\n\n<p>But this definitely isn't something I would recommend. If you can use an <code>Eq</code> instance like suggested by Willem Van Onsem and bheklir then fair enough; but generally I'd avoid Eq too. I don't think you should strive to get a bool \u2013 booleans are always the least informative way to deal with some information. Using a <code>case</code> directly</p>\n\n<pre><code>hello =\n    case foo of\n     Yes -&gt; \"foo is Yes\"\n     _ -&gt; \"foo isn't Yes\"\n</code></pre>\n\n<p><em>is better</em>; if this is too clunky in a collection of unit test then why not define a suitable helper function that does basically the same thing?</p>\n"}], "owner": {"reputation": 957, "user_id": 5771245, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/d4ff1986f900f764881c1862b5300a6d?s=128&d=identicon&r=PG&f=1", "display_name": "haskellHQ", "link": "https://stackoverflow.com/users/5771245/haskellhq"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 65, "favorite_count": 0, "accepted_answer_id": 45282580, "answer_count": 2, "score": 2, "last_activity_date": 1500904739, "creation_date": 1500904427, "question_id": 45282482, "link": "https://stackoverflow.com/questions/45282482/how-to-do-a-simple-1-line-pattern-match-getting-a-bool-out-of-a-pattern-match", "title": "How to do a simple 1-line pattern match? (Getting a Bool out of a pattern match)", "body": "<p>In the following code, how do I check -- only by adding a one-liner beside the <code>if</code> -- whether <code>foo</code> is <code>Yes</code>?</p>\n\n<pre><code>data Asdf = Yes | No | Other\n\nfoo :: Asdf\nfoo = Yes\n\nhello :: String\nhello =\n    if &lt;check if foo is Yes&gt; -- How?\n     then \"foo is Yes\"\n     else \"foo isn't Yes\"\n</code></pre>\n\n<p>I know I can use <code>case</code>, but the point of this question is to somehow get a <code>Bool</code> out of it. This will be useful for me in unit tests, etc. (<code>case</code> can quickly get a quite messy.)</p>\n"}, {"tags": ["haskell", "type-level-computation"], "comments": [{"owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "edited": false, "score": 2, "creation_date": 1500890890, "post_id": 45277531, "comment_id": 77517792, "body": "It is indeed often said that Haskell&#39;s type-level language is basically a logical language."}, {"owner": {"reputation": 37219, "user_id": 1523776, "user_type": "moderator", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/b3e0b5c8e42a8c38009ef2d969f8dabb?s=128&d=identicon&r=PG", "display_name": "Benjamin Hodgson", "link": "https://stackoverflow.com/users/1523776/benjamin-hodgson"}, "reply_to_user": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "edited": false, "score": 1, "creation_date": 1500902290, "post_id": 45277531, "comment_id": 77525805, "body": "@leftaroundabout <a href=\"https://aphyr.com/posts/342-typing-the-technical-interview\" rel=\"nofollow noreferrer\">a bit of fun on that point</a> :)"}, {"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "reply_to_user": {"reputation": 37219, "user_id": 1523776, "user_type": "moderator", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/b3e0b5c8e42a8c38009ef2d969f8dabb?s=128&d=identicon&r=PG", "display_name": "Benjamin Hodgson", "link": "https://stackoverflow.com/users/1523776/benjamin-hodgson"}, "edited": false, "score": 0, "creation_date": 1504128172, "post_id": 45277531, "comment_id": 78899102, "body": "@BenjaminHodgson, that only uses <i>functional</i> features of the (relational) system, to go with the story that &quot;Haskell&quot; (as they define it) is a functional language."}], "answers": [{"tags": [], "owner": {"reputation": 42094, "user_id": 828361, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/6a82397672dcc1fca31c32508ef0798b?s=128&d=identicon&r=PG", "display_name": "pigworker", "link": "https://stackoverflow.com/users/828361/pigworker"}, "is_accepted": true, "score": 20, "last_activity_date": 1500891350, "creation_date": 1500891350, "answer_id": 45277933, "question_id": 45277531, "link": "https://stackoverflow.com/questions/45277531/haskell-type-level-equality/45277933#45277933", "title": "Haskell Type Level Equality", "body": "<p>Haskell's type-level language is a purely first-order language, in which \"application\" is just another constructor, rather than a thing which computes. There are binding constructs, like <code>forall</code>, but the notion of equality for type-level stuff is fundamentally mere alpha-equivalence: structural up to renaming of bound variables. Indeed, the whole of our constructor-class machinery, monads, etc relies on being able to take an application <code>m v</code> apart unambiguously.</p>\n\n<p>Type-level functions don't really live in the type-level language as first-class citizens: only their full applications do. We end up with an equational (for the <code>~</code> notion of equality) theory of type-level expressions in which constraints are expressed and solved, but the underlying notion of <em>value</em> that these expressions denote is always first-order, and thus always equippable with equality.</p>\n\n<p>Hence it always makes sense to interpret repeated pattern variables by a structural equality test, which is exactly how pattern matching was designed in its original 1969 incarnation, as an extension to another language rooted in a fundamentally first-order notion of value, LISP.</p>\n"}], "owner": {"reputation": 1496, "user_id": 7350814, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/bd7e1bdad619c54ab51e05ff9cfaa199?s=128&d=identicon&r=PG&f=1", "display_name": "Jogger", "link": "https://stackoverflow.com/users/7350814/jogger"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1045, "favorite_count": 4, "accepted_answer_id": 45277933, "answer_count": 1, "score": 17, "last_activity_date": 1500891350, "creation_date": 1500890221, "question_id": 45277531, "link": "https://stackoverflow.com/questions/45277531/haskell-type-level-equality", "title": "Haskell Type Level Equality", "body": "<p>Haskell has a resticted syntax to define type families:</p>\n\n<pre><code>(1)   type family Length (xs :: [*]) where\n(2)     Length '[] = 0\n(3)     Length (x ': xs) = 1 + Length xs\n</code></pre>\n\n<p>On the lines (2) and (3) on the left side of the equal sign (=) we only have simple pattern matching.\nOn the right side of the equal sign we have just type level function application and as a syntactic sugar \nthere are type operators ((+) in line (3)).</p>\n\n<p>There are no <em>guards</em>, no <em>case</em> expressions, no <em>if-then-else</em> syntax, no <em>let</em> and <em>where</em>'s \nand there is no partial function application. \nThis is not a problem, as the missing case expression can be replaced by a specialized type level function, \nthat pattern matches on the different cases, the missing <em>if-then-else syntax</em> can be replaced by the <em>If</em>\nfunction of the <a href=\"https://hackage.haskell.org/package/base-4.10.0.0/docs/Data-Type-Bool.html\" rel=\"noreferrer\">Data.Type.Bool</a>\npackage.</p>\n\n<p>Looking at some examples we see, that pattern matching syntax on the type level has at least one\nadditional feature, not available in normal Haskell value level functions:</p>\n\n<pre><code>(1)   type family Contains (lst :: [a]) (elem :: a) where\n(2)     Contains (x ': xs) (x) = 'True\n(3)     Contains '[]       (x) = 'False\n(4)     Contains (x ': xs) (y) = Contains xs (y)\n</code></pre>\n\n<p>In line (2) we use twice the variable <em>x</em>. Line (2) evaluates to 'True, if the head of the list of the first parameter \nis <em>equal</em> as the second parameter.\nIf we do the same thing on a value level function, GHC answers with a <code>Conflicting definitions for 'x'</code> error.\nIn value level functions we must add an <code>Eq a =&gt;</code> context to compile the function.</p>\n\n<p>Type level pattern matching seems to work similar as <em>unification</em> back in the old times of <em>Prolog</em>.\nI unsuccessfully googled for some documentation about the syntax of type level functions.</p>\n\n<ul>\n<li>Why does GHC not require something like an <em>a ~ b</em> type equality constraint in the definition of the <em>Contains</em> type family?</li>\n<li>Is type equality always available?</li>\n<li>Has the type family syntax other additional features, that are unavailable on the value level? </li>\n<li>Where is this documented?</li>\n</ul>\n"}, {"tags": ["list", "haskell", "recursion", "list-comprehension"], "comments": [{"owner": {"reputation": 40537, "user_id": 465378, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/c03b8d34978563858020eff0d14cc17b?s=128&d=identicon&r=PG", "display_name": "Alexis King", "link": "https://stackoverflow.com/users/465378/alexis-king"}, "edited": false, "score": 3, "creation_date": 1500885664, "post_id": 45275767, "comment_id": 77514124, "body": "Don\u2019t do that with a list comprehension, just use <a href=\"https://hackage.haskell.org/package/base-4.10.0.0/docs/Data-List.html#v:nub\" rel=\"nofollow noreferrer\">the <code>nub</code> function</a>. Or, potentially even better, depending on your use case, use a <a href=\"https://hackage.haskell.org/package/containers-0.5.10.2/docs/Data-Set.html#t:Set\" rel=\"nofollow noreferrer\"><code>Set</code></a> instead of a list."}, {"owner": {"reputation": 197, "user_id": 6498369, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/0940eeee1b9093031291a16199eaf8ed?s=128&d=identicon&r=PG&f=1", "display_name": "MandyLB", "link": "https://stackoverflow.com/users/6498369/mandylb"}, "reply_to_user": {"reputation": 40537, "user_id": 465378, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/c03b8d34978563858020eff0d14cc17b?s=128&d=identicon&r=PG", "display_name": "Alexis King", "link": "https://stackoverflow.com/users/465378/alexis-king"}, "edited": false, "score": 0, "creation_date": 1500886150, "post_id": 45275767, "comment_id": 77514437, "body": "Yes, but I&#39;m trying to practice and solve it without built in functions"}, {"owner": {"reputation": 75362, "user_id": 625403, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/786eed7da67079cb5d63a49d469af25b?s=128&d=identicon&r=PG", "display_name": "amalloy", "link": "https://stackoverflow.com/users/625403/amalloy"}, "edited": false, "score": 0, "creation_date": 1500888119, "post_id": 45275767, "comment_id": 77515824, "body": "This is not possible using just guard clauses in a list comprehension. These are confined to a &quot;local&quot; perspective, looking at just one element at a time. To exclude elements based on the remainder of the input, you will need some other construct, such as <code>nub</code> or a fold."}, {"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 0, "creation_date": 1500888600, "post_id": 45275767, "comment_id": 77516167, "body": "If you want to avoid library functions, you have to reimplement them in some form. Define first a function which given <code>x</code> and <code>ys</code> removes all the occurrences of <code>x</code> in the list <code>ys</code>. Then use recursion to scan the list and remove duplicates. This amount to rewriting <code>nub</code> on your own."}], "answers": [{"tags": [], "owner": {"reputation": 42094, "user_id": 828361, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/6a82397672dcc1fca31c32508ef0798b?s=128&d=identicon&r=PG", "display_name": "pigworker", "link": "https://stackoverflow.com/users/828361/pigworker"}, "is_accepted": false, "score": 9, "last_activity_date": 1500889988, "creation_date": 1500889988, "answer_id": 45277440, "question_id": 45275767, "link": "https://stackoverflow.com/questions/45275767/list-comprehension-unique-values/45277440#45277440", "title": "list comprehension unique values", "body": "<p>The comment from @amalloy that list comprehensions are confined to a \"local\" perspective is the key insight here. There is a sensible way to write <code>nub</code> as a list comprehension, but you first need to change your perspective.</p>\n\n<p>An often useful function sadly omitted from the library is the function which decorates each element of a list with its context.</p>\n\n<pre><code>picks :: [x] -&gt; [([x], x, [x])]\npicks []       = []\npicks (x : xs) = ([], x, xs) : [(x : bs, y, as) | (bs, y, as) &lt;- picks xs]\n</code></pre>\n\n<p>So</p>\n\n<pre><code>picks [1,2,3] =\n[([],1,[2,3]), ([1],2,[3]), ([1,2],3,[])]\n</code></pre>\n\n<p>Each element of the list is put in the middle of a triple, with the elements 'before' to its left and the elements 'after' to its right.</p>\n\n<p><a href=\"https://stackoverflow.com/a/12872133/828361\">This answer of mine</a> explains the deep structure which makes <code>picks</code> in some sense a \"standard\" operation, derivable from the structure of lists. But we don't need that background information to deploy it.</p>\n\n<p>The <code>picks</code> function gives us exactly the contextual information we need to write <code>nub</code> as a list comprehension. All we need to do is pick out the elements which don't occur in their own 'before lists'.</p>\n\n<pre><code>myNub :: Eq x =&gt; [x] -&gt; [x]\nmyNub xs = [x | (bs, x, as) &lt;- picks xs, not (elem x bs)]\n</code></pre>\n\n<p>I make no promises as to the efficiency of this operation, but I do like the clarity that comes from combining list comprehensions with extra spatial context.</p>\n"}, {"tags": [], "owner": {"reputation": 48938, "user_id": 246886, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/dd1ebaade6623fc538fb8af3338e730d?s=128&d=identicon&r=PG", "display_name": "Jon Purdy", "link": "https://stackoverflow.com/users/246886/jon-purdy"}, "is_accepted": false, "score": 0, "last_activity_date": 1500942802, "creation_date": 1500942802, "answer_id": 45292079, "question_id": 45275767, "link": "https://stackoverflow.com/questions/45275767/list-comprehension-unique-values/45292079#45292079", "title": "list comprehension unique values", "body": "<p>You could do it in a (perhaps needlessly clever) way with laziness, by starting with a bit of circular reasoning: each element of the input should appear in the output, only if it hasn\u2019t appeared in the output.</p>\n\n<p>That is, for an input list like <code>[0, 0, 1]</code>, the first <code>0</code> should be added but the second <code>0</code> should not.</p>\n\n<p>Clearly, something like this won\u2019t work:</p>\n\n<pre><code>unique xs = us\n  where us = [x | x &lt;- xs, x `notElem` us]\n</code></pre>\n\n<p>Because it will get stuck in an infinite loop, trying to test elements of the output that haven\u2019t been generated yet. What you can do instead is change the reasoning to this: each element of the input should appear in the output, only if it hasn\u2019t <strong>already</strong> appeared in the output.</p>\n\n<p>You can implement this directly by considering what \u201calready\u201d means: the current value must not have appeared at an <em>index</em> before the current index.</p>\n\n<pre><code>unique xs = catMaybes us\n  where\n    us =\n      [ if Just x `elem` take i us  -- If the element has appeared before here\n        then Nothing                -- then don\u2019t include it again\n        else Just x                 -- otherwise do include it.\n      | (i, x) &lt;- zip [0..] xs      -- (Zip the elements with their indices.)\n      ]\n</code></pre>\n\n<p>So for the input list <code>xs = [0, 0, 1]</code>, this would generate <code>xs' = [Just 0, Nothing, Just 1]</code>, which would be flattened by <code>catMaybes</code> into <code>[0, 1]</code>. Testing with QuickCheck confirms this is equivalent to <code>nub</code>, and halts because we only check the first <code>take i</code> elements of <code>us</code> at each step, ensuring that we don\u2019t examine any elements that haven\u2019t been generated yet.</p>\n\n<p>It\u2019s worth noting that, like <code>nub</code>, this is O(n<sup>2</sup>) in the length of the input.</p>\n"}], "owner": {"reputation": 197, "user_id": 6498369, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/0940eeee1b9093031291a16199eaf8ed?s=128&d=identicon&r=PG&f=1", "display_name": "MandyLB", "link": "https://stackoverflow.com/users/6498369/mandylb"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1772, "favorite_count": 0, "answer_count": 2, "score": 2, "last_activity_date": 1500942802, "creation_date": 1500885138, "question_id": 45275767, "link": "https://stackoverflow.com/questions/45275767/list-comprehension-unique-values", "title": "list comprehension unique values", "body": "<p>I'm wondering how to obtain the unique values from a list by using Haskell list comprehension. So if I were to enter [2,4,5,4,4,6,2] it would return [2,4,5,6].</p>\n\n<p>Initially I started with unique (y:ys) = [x | x &lt;- (y:ys)] and I know I need some other condition on x, but am not sure how to get there.</p>\n"}, {"tags": ["haskell"], "answers": [{"tags": [], "owner": {"reputation": 40537, "user_id": 465378, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/c03b8d34978563858020eff0d14cc17b?s=128&d=identicon&r=PG", "display_name": "Alexis King", "link": "https://stackoverflow.com/users/465378/alexis-king"}, "is_accepted": false, "score": 8, "last_activity_date": 1500885769, "last_edit_date": 1500885769, "creation_date": 1500885121, "answer_id": 45275758, "question_id": 45275520, "link": "https://stackoverflow.com/questions/45275520/how-does-take-2-1-work-in-haskell/45275758#45275758", "title": "How does take 2 $ [1..] work in haskell?", "body": "<p>Haskell is lazy, and <code>($)</code> doesn\u2019t change that. The <code>($)</code> operator isn\u2019t at all magical, and it\u2019s a totally ordinary Haskell function<sup>\u2020</sup>:</p>\n\n<pre><code>($) :: (a -&gt; b) -&gt; a -&gt; b\nf $ x = f x\n</code></pre>\n\n<p>Since Haskell is lazy, arguments are not evaluated before they are passed to a function, and <code>($)</code> is no exception. Therefore, <code>take 2 $ [1..]</code> is identical to <code>(take 2) [1..]</code>, which is of course identical to <code>take 2 [1..]</code>. No additional evaluation takes place.</p>\n\n<p>Now, as it turns out, there <em>is</em> a strict version of <code>($)</code> called <a href=\"https://hackage.haskell.org/package/base-4.10.0.0/docs/Prelude.html#v:-36--33-\" rel=\"noreferrer\"><code>($!)</code></a>, which evaluates its argument to <a href=\"https://stackoverflow.com/a/6889335/465378\">weak head normal form (WHNF)</a> before applying the function. It can also be defined as an ordinary Haskell function, but it must use the magical <code>seq</code> function as part of its definition:</p>\n\n<pre><code>($!) :: (a -&gt; b) -&gt; a -&gt; b\nf $! x = x `seq` f x\n</code></pre>\n\n<p>However, even <code>take 2 $! [1..]</code> will produce <code>[1,2]</code>, not diverge. Why? Well, <code>$!</code> only evaluates its argument to WHNF, <em>not</em> normal form, and WHNF can be thought of as a \u201cshallow\u201d evaluation. It evaluates the first cons pair, but nothing more. You can see this by using the <code>:sprint</code> command in GHCi:</p>\n\n<pre><code>ghci&gt; let xs = [1..] :: [Int]\nghci&gt; xs `seq` ()\n()\nghci&gt; :sprint xs\nxs = 1 : _\n</code></pre>\n\n<p>To recursively force a value, you\u2019d need to use <a href=\"https://hackage.haskell.org/package/deepseq\" rel=\"noreferrer\">the <code>deepseq</code> package</a>, which, as the name implies, deeply evaluates a value. It provides an even \u201cstronger\u201d version of <code>($)</code>, called <a href=\"https://hackage.haskell.org/package/deepseq-1.4.3.0/docs/Control-DeepSeq.html#v:-36--33--33-\" rel=\"noreferrer\"><code>($!!)</code></a>, which is like <code>($!)</code> but uses <a href=\"https://hackage.haskell.org/package/deepseq-1.4.3.0/docs/Control-DeepSeq.html#v:deepseq\" rel=\"noreferrer\"><code>deepseq</code></a> instead of <code>seq</code>. Therefore, <code>take 2 $!! [1..]</code> <strong>will</strong>, in fact, diverge.</p>\n\n<hr>\n\n<p><sup>\u2020 This is not <em>strictly</em> true in GHC, since <a href=\"https://stackoverflow.com/a/9469942/465378\">there are some special typing rules in the compiler to help check idiomatic uses of <code>$</code> when used with higher-rank types</a>. However, none of that is at all relevant here, and the simpler definition works identically.</sup></p>\n"}, {"tags": [], "owner": {"reputation": 28584, "user_id": 706317, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/1mafF.jpg?s=128&g=1", "display_name": "ZhekaKozlov", "link": "https://stackoverflow.com/users/706317/zhekakozlov"}, "is_accepted": false, "score": 2, "last_activity_date": 1500885130, "creation_date": 1500885130, "answer_id": 45275761, "question_id": 45275520, "link": "https://stackoverflow.com/questions/45275520/how-does-take-2-1-work-in-haskell/45275761#45275761", "title": "How does take 2 $ [1..] work in haskell?", "body": "<p>Since the function application has the highest priority, your expression is parsed as <code>(take 2) $ [1..]</code>. This means you first get a function <code>(take 2)</code> which then is applied to the argument <code>[1..]</code>.</p>\n\n<p>However, this all does not matter at all because Haskell is a lazy language. You could write it vice versa and got exactly the same result:</p>\n\n<pre><code>&gt; [1..] &amp; take 2\n[1.2]\n</code></pre>\n\n<p><code>(&amp;)</code> is the reversed version of the <code>($)</code> operator.</p>\n\n<p>Even <code>[1..]</code> is first here, it is not evaluated until its contents are needed.</p>\n"}, {"tags": [], "owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "is_accepted": false, "score": 6, "last_activity_date": 1500888394, "creation_date": 1500888394, "answer_id": 45276894, "question_id": 45275520, "link": "https://stackoverflow.com/questions/45275520/how-does-take-2-1-work-in-haskell/45276894#45276894", "title": "How does take 2 $ [1..] work in haskell?", "body": "<p>To complement the other answers, let me add that you are confusing evaluation order (or evaluation strategy) and precedence. This is a frequent misconception.</p>\n\n<p>To exemplify, consider the expression</p>\n\n<pre><code>f 0 * g 0 + h 0\n</code></pre>\n\n<p>Precedence tells us that the multiplication must be performed before the addition. However, this does not imply that <code>f 0</code> and <code>g 0</code> must be evaluated before <code>h 0</code>! A compiler could choose to compute <code>h 0</code> first, then <code>g 0</code>, then <code>f 0</code>, and finally to multiply, then add.</p>\n\n<p>This holds not only in Haskell, but even in imperative languages like C which do not specify an evaluation order and allow functions to have side effects.</p>\n\n<p>On top of this, you also have to understand that \"evaluating\" something in Haskell, roughly means to evaluate it until its first constructor appears (WHNF). So, evaluating <code>[1..]</code> results in, roughly, <code>1 : [2..]</code> where the tail has to be evaluated. If evaluating <code>[1..]</code> would cause an infinite loop, then there would be no way at all to use <code>[1..]</code> in an expression: one could only choose to discard it without evaluating it, or to loop forever.</p>\n"}, {"tags": [], "owner": {"reputation": 58792, "user_id": 1006010, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/f683d229f3673c9dcc3f3f2796d75c09?s=128&d=identicon&r=PG", "display_name": "MathematicalOrchid", "link": "https://stackoverflow.com/users/1006010/mathematicalorchid"}, "is_accepted": true, "score": 4, "last_activity_date": 1500976009, "creation_date": 1500976009, "answer_id": 45299627, "question_id": 45275520, "link": "https://stackoverflow.com/questions/45275520/how-does-take-2-1-work-in-haskell/45299627#45299627", "title": "How does take 2 $ [1..] work in haskell?", "body": "<p>The <code>$</code> is a red herring here. <code>take 2 $ [1..]</code> is precisely identical to <code>take 2 [1..]</code>. The <code>$</code> only affects what is an argument to what; it has no effect at all on when things get evaluated.</p>\n\n<p>(For example:</p>\n\n<pre><code>print 2 + 2         ==&gt; (print 2) + 2 {- Doesn't work. -}\nprint $ 2 + 2       ==&gt; print (2 + 2) {- Works. -}\n</code></pre>\n\n<p>The dollar affects whether <code>print</code> is an argument to <code>+</code> or the other way around. The dollar itself doesn't <em>evaluate</em> anything.)</p>\n\n<p>The \"top-most\" function here is <code>take</code>, so we evaluate that first. The definition of <code>take</code> can be written like so:</p>\n\n<pre><code>take 0 xs = xs\ntake n xs =\n  case xs of\n    x : xs' -&gt; x : take (n-1) xs'\n    []      -&gt; []\n</code></pre>\n\n<p>Assuming the length isn't zero, the first thing this does is <code>case xs of ...</code>, which means that <code>xs</code> (in this case <code>[1..]</code>) must be evaluated to decide whether it's a <code>:</code> or a <code>[]</code>. Doing this, we find (in constant time) that <code>xs = 1 : [2..]</code>, so the first case alternative applies.</p>\n\n<p>You can write it out like this...</p>\n\n<pre><code>take 2 [1..]\ntake 2 (1 : [2..])\n1 : take (2-1) [2..]\n1 : take 1 [2..]\n1 : take 1 (2 : [3..])\n1 : 2 : take (1-1) [3..]\n1 : 2 : take 0 [3..]\n1 : 2 : []\n</code></pre>\n\n<p>(I still think it's a pity that nobody has come up with a tool to auto-generate traces like this... It could unconfuse a few people, and could be great for debugging...)</p>\n"}], "owner": {"reputation": 229, "user_id": 6130072, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/01049fe6bbb7e9dc61f30864db556622?s=128&d=identicon&r=PG&f=1", "display_name": "Programmer", "link": "https://stackoverflow.com/users/6130072/programmer"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 233, "favorite_count": 0, "accepted_answer_id": 45299627, "answer_count": 4, "score": 0, "last_activity_date": 1500976009, "creation_date": 1500884399, "question_id": 45275520, "link": "https://stackoverflow.com/questions/45275520/how-does-take-2-1-work-in-haskell", "title": "How does take 2 $ [1..] work in haskell?", "body": "<p>We know that the $ operator binds the loosest, and also associates to the right, which means, [1..] should be evaluated first, and hence, shouldn't it run into an infinite loop? Why is it even stopping at all?</p>\n"}, {"tags": ["haskell"], "comments": [{"owner": {"reputation": 229185, "user_id": 251311, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/b6b0ca5d4ef200ec8e3cd1fa2aefd836?s=128&d=identicon&r=PG", "display_name": "zerkms", "link": "https://stackoverflow.com/users/251311/zerkms"}, "edited": false, "score": 0, "creation_date": 1500866657, "post_id": 45272021, "comment_id": 77507013, "body": "Does not compiler tell you the very problem? PS: it&#39;s not obvious why you need the list length here at all PPS: <a href=\"https://wiki.haskell.org/How_to_work_on_lists#Adding\" rel=\"nofollow noreferrer\">wiki.haskell.org/How_to_work_on_lists#Adding</a>"}], "answers": [{"tags": [], "owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "is_accepted": false, "score": 2, "last_activity_date": 1500871111, "creation_date": 1500871111, "answer_id": 45272728, "question_id": 45272021, "link": "https://stackoverflow.com/questions/45272021/insert-a-number-in-n-place-in-a-list/45272728#45272728", "title": "Insert a number in n place in a list", "body": "<p>Not a bad start! When I tried out your file, here were the errors I got. Let's take them one at a time:</p>\n\n<pre><code>test.hs:9:11: error:\n    \u2022 Couldn't match expected type \u2018[a]\u2019\n                  with actual type \u2018[a0] -&gt; [a0]\u2019\n    \u2022 Probable cause: \u2018new_take\u2019 is applied to too few arguments\n      In the first argument of \u2018(++)\u2019, namely \u2018new_take\u2019\n      In the expression: new_take ++ newvalue_n ++ new_drop\n      In an equation for \u2018newinsert\u2019:\n          newinsert = new_take ++ newvalue_n ++ new_drop\n    \u2022 Relevant bindings include newinsert :: [a] (bound at test.hs:9:1)\n</code></pre>\n\n<p>Well, that's pretty clear. \"<code>new_take</code> is applied to too few arguments\", let's take a look at the definition of <code>new_take</code> again:</p>\n\n<pre><code>new_take=take calc1\n</code></pre>\n\n<p>Ah, right! You probably wanted this instead:</p>\n\n<pre><code>new_take=take calc1 list\n</code></pre>\n\n<p>Next error:</p>\n\n<pre><code>test.hs:9:23: error:\n    \u2022 Couldn't match expected type \u2018[a]\u2019 with actual type \u2018Integer\u2019\n    \u2022 In the first argument of \u2018(++)\u2019, namely \u2018newvalue_n\u2019\n      In the second argument of \u2018(++)\u2019, namely \u2018newvalue_n ++ new_drop\u2019\n      In the expression: new_take ++ newvalue_n ++ new_drop\n    \u2022 Relevant bindings include newinsert :: [a] (bound at test.hs:9:1)\n</code></pre>\n\n<p>Okay, \"Couldn't match expected type <code>[a]</code> with actual type <code>Integer</code> in <code>newvalue_n</code> in the expression <code>newvalue_n ++ new_drop</code>\". Let's remind ourselves of the type of <code>(++)</code>, and the definition of <code>newvalue_n</code>:</p>\n\n<pre><code>(++) :: [a] -&gt; [a] -&gt; [a]\nnewvalue_n=3\n</code></pre>\n\n<p>I have to agree with GHC that <code>3</code> doesn't look much like a list. Easy to fix, let's just make it a singleton list:</p>\n\n<pre><code>newinsert=new_take ++ [newvalue_n] ++ new_drop\n</code></pre>\n\n<p>And the last one:</p>\n\n<pre><code>test.hs:9:37: error:\n    \u2022 Couldn't match expected type \u2018[a]\u2019\n                  with actual type \u2018[a1] -&gt; [a1]\u2019\n    \u2022 Probable cause: \u2018new_drop\u2019 is applied to too few arguments\n      In the second argument of \u2018(++)\u2019, namely \u2018new_drop\u2019\n      In the second argument of \u2018(++)\u2019, namely \u2018newvalue_n ++ new_drop\u2019\n      In the expression: new_take ++ newvalue_n ++ new_drop\n    \u2022 Relevant bindings include newinsert :: [a] (bound at test.hs:9:1)\n</code></pre>\n\n<p>Just like the first one, you probably wanted:</p>\n\n<pre><code>new_drop=drop calc2 list\n</code></pre>\n\n<p>These are the minimal changes needed to get things working. There are many stylistic improvements that can be made; I encourage you to post your code to the <a href=\"https://codereview.stackexchange.com/\">Code Review StackExchange</a> once you get it working to your satisfaction.</p>\n"}], "owner": {"reputation": 15, "user_id": 7112108, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/f7be24c5e0dc4a50d0cc300321d467f6?s=128&d=identicon&r=PG&f=1", "display_name": "user7112108", "link": "https://stackoverflow.com/users/7112108/user7112108"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 41, "favorite_count": 0, "answer_count": 1, "score": -3, "last_activity_date": 1500871111, "creation_date": 1500865654, "question_id": 45272021, "link": "https://stackoverflow.com/questions/45272021/insert-a-number-in-n-place-in-a-list", "title": "Insert a number in n place in a list", "body": "<p>I am using a list and creating many other functions to insert a number into any place in this list. I have done this code but it is giving me some errors: Any help will be much appreciated.</p>\n\n<pre><code>list = [1,2,4,5,6,7]\nnspace=3\nnewvalue_n=3\nlenlist=length list\ncalc1= nspace-1\ncalc2=lenlist-nspace\nnew_take=take calc1\nnew_drop=drop calc2\nnewinsert=new_take ++ newvalue_n ++ new_drop\n</code></pre>\n"}, {"tags": ["haskell", "fibonacci"], "comments": [{"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1500835471, "post_id": 45268454, "comment_id": 77500088, "body": "This error comes up <i>a lot</i> on Stackoverflow. And it&#39;s <i>always</i> because a value is being used in place of a list or vice versa. Here is an example search that could have led you to an answer without having to ask your own question: <a href=\"https://stackoverflow.com/search?q=%5Bhaskell%5D+%22cannot+construct+the+infinite+type%22+list\">stackoverflow.com/&hellip;</a>"}, {"owner": {"reputation": 57219, "user_id": 33796, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/08727b23ba62e634b32988cdff082663?s=128&d=identicon&r=PG", "display_name": "luqui", "link": "https://stackoverflow.com/users/33796/luqui"}, "reply_to_user": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1500840787, "post_id": 45268454, "comment_id": 77501763, "body": "@PeterHall ouch.  Would OP know how to generalize the answers from those questions and apply to his own?"}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "reply_to_user": {"reputation": 57219, "user_id": 33796, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/08727b23ba62e634b32988cdff082663?s=128&d=identicon&r=PG", "display_name": "luqui", "link": "https://stackoverflow.com/users/33796/luqui"}, "edited": false, "score": 0, "creation_date": 1500841188, "post_id": 45268454, "comment_id": 77501882, "body": "@luqui There was actually an almost identical question very recently with <code>++</code> being given a list on one side and a value on the other. It might have been deleted and I don&#39;t have the rep to see it. Given that I can&#39;t find that exact question now, perhaps it is a little harsh."}], "answers": [{"comments": [{"owner": {"reputation": 11001, "user_id": 727667, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/2e2cbd3a202d8d1cfe0cc2a9fff86733?s=128&d=identicon&r=PG", "display_name": "gallais", "link": "https://stackoverflow.com/users/727667/gallais"}, "edited": false, "score": 1, "creation_date": 1500835318, "post_id": 45268492, "comment_id": 77500032, "body": "You&#39;ll also need a <code>Num x</code> constraint to be able to use <code>sum</code>."}], "tags": [], "owner": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "is_accepted": true, "score": 2, "last_activity_date": 1500835398, "last_edit_date": 1500835398, "creation_date": 1500834219, "answer_id": 45268492, "question_id": 45268454, "link": "https://stackoverflow.com/questions/45268454/unsure-in-how-to-type-my-function-in-haskell/45268492#45268492", "title": "Unsure in how to type my function in haskell", "body": "<p>Well that's quite weird, since:</p>\n\n<p>if <code>x</code> is an array <code>[a]</code>, then <code>sum x</code> will be an <code>a</code>. The <code>(++) :: [a] -&gt; [a] -&gt; [a]</code> function takes two lists, not a list and an element.</p>\n\n<p>You can however <strong>construct a list with one element</strong>, for instance using list syntax:</p>\n\n<pre><code>nFibbo :: <b>Num x =&gt;</b> [x] -&gt; [x]\nnFibbo x = x ++ <b>[</b>sum x<b>]</b>  -- list with one element</code></pre>\n\n<p>Note that here you will add the sum of <em>all</em> previous elements as last element. Not the sum of the last <em>two</em> elements (like Fibonacci usually does).</p>\n\n<p>You also need to add a <code>Num x</code> type constraint, otherwise the type of elements of the list is not per se a numerical type, and thus you can not calculate the <code>sum</code> of these numbers.</p>\n"}], "owner": {"reputation": 43, "user_id": 6741141, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh6.googleusercontent.com/-7TZQ4p7HD4o/AAAAAAAAAAI/AAAAAAAAADQ/09_ipbG0SWA/photo.jpg?sz=128", "display_name": "Thomas McSwain", "link": "https://stackoverflow.com/users/6741141/thomas-mcswain"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 86, "favorite_count": 0, "accepted_answer_id": 45268492, "answer_count": 1, "score": -3, "last_activity_date": 1500835398, "creation_date": 1500833983, "last_edit_date": 1500834332, "question_id": 45268454, "link": "https://stackoverflow.com/questions/45268454/unsure-in-how-to-type-my-function-in-haskell", "title": "Unsure in how to type my function in haskell", "body": "<pre><code>nFibbo :: [x] -&gt; [x]\nnFibbo x = x ++ sum x\n</code></pre>\n\n<p>I'm trying to setup a Fibonacci function and I want the input to be an integer array of indeterminate length and it's output to be an integer array of 1+ the length of the first.</p>\n\n<p>I have tried just not typing it at all and running </p>\n\n<pre><code>nFibbo x = x ++ sum x\n</code></pre>\n\n<p>But that shows up with a different error \"cannot construct the infinite type: <code>a ~ [a]</code>\"</p>\n"}, {"tags": ["haskell", "applicative"], "comments": [{"owner": {"reputation": 2226, "user_id": 2246434, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/bTuEI.jpg?s=128&g=1", "display_name": "Julia Path", "link": "https://stackoverflow.com/users/2246434/julia-path"}, "edited": false, "score": 1, "creation_date": 1500853018, "post_id": 45267953, "comment_id": 77504586, "body": "That category is called <a href=\"https://hackage.haskell.org/package/semigroupoids-5.2/docs/Data-Semigroupoid-Static.html\" rel=\"nofollow noreferrer\">Static</a>."}], "answers": [{"comments": [{"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 0, "creation_date": 1500942007, "post_id": 45281702, "comment_id": 77546129, "body": "If that proves sufficient (I&#39;ll give it a try when I get a chance), it suggests that the <code>Functor</code> constraint on <code>Appish</code> might be weakened while still getting something &quot;sensible&quot;. Rather than <code>fmap</code>, this law could be expressed with a <code>dimap</code>-like <code>(c ~&gt; d) -&gt; (a ~&gt; b) -&gt; f (b ~&gt; c) -&gt; f (a ~&gt; d)</code>."}, {"owner": {"reputation": 11510, "user_id": 5852, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ba340386ad2afc76d4a9602410b4e449?s=128&d=identicon&r=PG", "display_name": "Sjoerd Visscher", "link": "https://stackoverflow.com/users/5852/sjoerd-visscher"}, "reply_to_user": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 0, "creation_date": 1500961937, "post_id": 45281702, "comment_id": 77551441, "body": "This discussion seems related: <a href=\"https://stackoverflow.com/questions/24668313/arrows-are-exactly-equivalent-to-applicative-functors\" title=\"arrows are exactly equivalent to applicative functors\">stackoverflow.com/questions/24668313/&hellip;</a>"}], "tags": [], "owner": {"reputation": 11510, "user_id": 5852, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ba340386ad2afc76d4a9602410b4e449?s=128&d=identicon&r=PG", "display_name": "Sjoerd Visscher", "link": "https://stackoverflow.com/users/5852/sjoerd-visscher"}, "is_accepted": false, "score": 1, "last_activity_date": 1500902195, "creation_date": 1500902195, "answer_id": 45281702, "question_id": 45267953, "link": "https://stackoverflow.com/questions/45267953/applicative-laws-for-alternative-class-formulations/45281702#45281702", "title": "Applicative laws for alternative class formulations", "body": "<p>This is a really neat idea!</p>\n\n<p>I think the free theorem for <code>fcomp</code> is</p>\n\n<pre><code>fcomp (fmap (post .) u) (fmap (. pre) v) = fmap (\\f -&gt; post . f . pre) (fcomp u v)\n</code></pre>\n"}], "owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 195, "favorite_count": 3, "answer_count": 1, "score": 12, "last_activity_date": 1500902195, "creation_date": 1500830844, "last_edit_date": 1500832934, "question_id": 45267953, "link": "https://stackoverflow.com/questions/45267953/applicative-laws-for-alternative-class-formulations", "title": "Applicative laws for alternative class formulations", "body": "<p>A well-known alternative formulation of <code>Applicative</code> (see, e.g., Typeclassopedia) is</p>\n\n<pre><code>class Functor f =&gt; Monoidal f where\n  unit :: f ()\n  pair :: f a -&gt; f b -&gt; f (a, b)\n</code></pre>\n\n<p>This leads to laws that look more like typical identity and associativity laws than what you get from <code>Applicative</code>, but only when you work through pair-reassociating isomorphisms. Thinking about this a few weeks ago, I came up with two other formulations that avoid this problem.</p>\n\n<pre><code>class Functor f =&gt; Fapplicative f where\n  funit :: f (a -&gt; a)\n  fcomp :: f (b -&gt; c) -&gt; f (a -&gt; b) -&gt; f (a -&gt; c)\n\nclass Functor f =&gt; Capplicative f where\n  cunit :: Category (~&gt;) =&gt; f (a ~&gt; a)\n  ccomp :: Category (~&gt;) =&gt; f (b ~&gt; c) -&gt; f (a ~&gt; b) -&gt; f (a ~&gt; c)\n</code></pre>\n\n<p>It's easy to implement <code>Capplicative</code> using <code>Applicative</code>, <code>Fapplicative</code> using <code>Capplicative</code>, and <code>Applicative</code> using <code>Fapplicative</code>, so these all have equivalent power.</p>\n\n<p>The identity and associativity laws are entirely obvious. But <code>Monoidal</code> needs a naturality law, and these must as well. How might I formulate them? Also: <code>Capplicative</code> seems to suggest an immediate generalization:</p>\n\n<pre><code>class (Category (~&gt;), Functor f) =&gt; Appish (~&gt;) f where\n  unit1 :: f (a ~&gt; a)\n  comp1 :: f (b ~&gt; c) -&gt; f (a ~&gt; b) -&gt; f (a ~&gt; c)\n</code></pre>\n\n<p>I am a bit curious about whether this (or something similar) is good for something.</p>\n"}, {"tags": ["haskell", "monads", "monad-transformers"], "comments": [{"owner": {"reputation": 14781, "user_id": 630160, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/4445f21326af525a8ad19af7e3ae41a8?s=128&d=identicon&r=PG", "display_name": "epsilonhalbe", "link": "https://stackoverflow.com/users/630160/epsilonhalbe"}, "edited": false, "score": 0, "creation_date": 1500821764, "post_id": 45266054, "comment_id": 77495716, "body": "It has been some time since I&#39;ve asked something similar, so I am not a 100% sure, but someone recommend looking at <a href=\"https://hackage.haskell.org/package/MonadPrompt-1.0.0.5/docs/Control-Monad-Prompt.html\" rel=\"nofollow noreferrer\">the prompt-monad</a>.You can define your IO actions as gadts and execute them much like an interpreter, thus limiting io to only what you want"}, {"owner": {"reputation": 208473, "user_id": 126014, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/33526616d4a11f1630d4939b769cfbf9?s=128&d=identicon&r=PG", "display_name": "Mark Seemann", "link": "https://stackoverflow.com/users/126014/mark-seemann"}, "edited": false, "score": 0, "creation_date": 1500821805, "post_id": 45266054, "comment_id": 77495738, "body": "You could do this with <code>Free</code>. Another alternative would be to use <code>mtl</code>-style APIs. Which specific functions do you have in mind?"}, {"owner": {"reputation": 5657, "user_id": 534481, "user_type": "registered", "accept_rate": 31, "profile_image": "https://www.gravatar.com/avatar/60df8c1a366ab1bf4378154e71a93367?s=128&d=identicon&r=PG", "display_name": "Saurabh Nanda", "link": "https://stackoverflow.com/users/534481/saurabh-nanda"}, "edited": false, "score": 0, "creation_date": 1500823011, "post_id": 45266054, "comment_id": 77496106, "body": "The larger idea is at <a href=\"https://www.reddit.com/r/haskell/comments/6p0rex/restricting_io_by_io_typekindcapability/\" rel=\"nofollow noreferrer\">reddit.com/r/haskell/comments/6p0rex/&hellip;</a> - - using typeclass constraints to allow only specific IO capabilities, such that a function&#39;s signature immediately tells the reader what type of IO it is doing."}], "answers": [{"comments": [{"owner": {"reputation": 5657, "user_id": 534481, "user_type": "registered", "accept_rate": 31, "profile_image": "https://www.gravatar.com/avatar/60df8c1a366ab1bf4378154e71a93367?s=128&d=identicon&r=PG", "display_name": "Saurabh Nanda", "link": "https://stackoverflow.com/users/534481/saurabh-nanda"}, "edited": false, "score": 0, "creation_date": 1500824077, "post_id": 45266725, "comment_id": 77496440, "body": "Brilliant. But just for my understating, what would the code for Monad instance look like in this case?"}, {"owner": {"reputation": 14781, "user_id": 630160, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/4445f21326af525a8ad19af7e3ae41a8?s=128&d=identicon&r=PG", "display_name": "epsilonhalbe", "link": "https://stackoverflow.com/users/630160/epsilonhalbe"}, "reply_to_user": {"reputation": 5657, "user_id": 534481, "user_type": "registered", "accept_rate": 31, "profile_image": "https://www.gravatar.com/avatar/60df8c1a366ab1bf4378154e71a93367?s=128&d=identicon&r=PG", "display_name": "Saurabh Nanda", "link": "https://stackoverflow.com/users/534481/saurabh-nanda"}, "edited": false, "score": 0, "creation_date": 1500825601, "post_id": 45266725, "comment_id": 77496934, "body": "@SaurabhNanda - updated - is this what you were looking for?"}, {"owner": {"reputation": 5657, "user_id": 534481, "user_type": "registered", "accept_rate": 31, "profile_image": "https://www.gravatar.com/avatar/60df8c1a366ab1bf4378154e71a93367?s=128&d=identicon&r=PG", "display_name": "Saurabh Nanda", "link": "https://stackoverflow.com/users/534481/saurabh-nanda"}, "edited": false, "score": 0, "creation_date": 1500828387, "post_id": 45266725, "comment_id": 77497836, "body": "Yep. Seems like what I need. Let me try it once I&#39;m on my laptop and come back to you."}, {"owner": {"reputation": 13807, "user_id": 2407038, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/538f6f4a9aa43841841de7d8e8b169fc?s=128&d=identicon&r=PG&f=1", "display_name": "user2407038", "link": "https://stackoverflow.com/users/2407038/user2407038"}, "edited": false, "score": 2, "creation_date": 1500863035, "post_id": 45266725, "comment_id": 77506374, "body": "Perhaps this is very obvious (but for the benefit of future readers who may not know it) - in order to hide the <code>IO</code>-ness of <code>App</code> in this way, the <code>App</code> constructor must not be exported (i.e. <code>App</code> must be an abstract type); and you must (on recent version of GHC) add a role annotation to <code>App</code>, or <code>Data.Coerce.coerce</code> allows one to extract the internal representation even when the constructor isn&#39;t exported."}], "tags": [], "owner": {"reputation": 14781, "user_id": 630160, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/4445f21326af525a8ad19af7e3ae41a8?s=128&d=identicon&r=PG", "display_name": "epsilonhalbe", "link": "https://stackoverflow.com/users/630160/epsilonhalbe"}, "is_accepted": true, "score": 9, "last_activity_date": 1500834601, "last_edit_date": 1500834601, "creation_date": 1500823235, "answer_id": 45266725, "question_id": 45266054, "link": "https://stackoverflow.com/questions/45266054/how-to-create-a-monad-which-allows-io-but-is-not-a-monadio/45266725#45266725", "title": "How to create a monad which allows IO but is NOT a MonadIO?", "body": "<p>If you just want to hide the <code>MonadIO</code>-ness of your <code>AppM</code></p>\n\n<p>I would go on and put in a</p>\n\n<pre><code>{-# LANGUAGE GeneralizedNewtypeDeriving #-}\n</code></pre>\n\n<p>and change the <code>data</code> declaration to</p>\n\n<pre><code>newtype App a = App {runApp :: ReaderT Env (LoggingT IO) a}\n              deriving (Functor, Applicative, Monad, MonadReader Env,\n                       , MonadLoggerIO }\n</code></pre>\n\n<p>Thus your <code>App</code> is no <code>MonadIO</code> if you need to <code>liftIO</code> like actions you can provide those inside of your library like</p>\n\n<pre><code>putStrLn :: String -&gt; App ()\nputStrLn = fmap App . liftIO Prelude.putStrLn\n</code></pre>\n\n<p>Note: the <code>liftIO</code> is for <code>ReaderT Env (LoggingT IO) ()</code> which then is wrapped into <code>App</code>, and you do not expose full IO capabilities.</p>\n\n<h2>Update</h2>\n\n<p>Regarding the question how to implement <code>Functor</code>, <code>Applicative</code> and <code>Monad</code> it is just the mere task of wrapping/unwrapping:</p>\n\n<pre><code>instance Functor App where\n   fmap f = App . fmap f . runApp\n\ninstance Applicative App where\n  pure = App . pure\n  mf &lt;*&gt; mx = App (runApp mf &lt;*&gt; runApp mx)\n\ninstance Monad App where\n  mx &gt;&gt;= f = App $ (runApp mx) &gt;&gt;= (runApp . f)\n</code></pre>\n\n<p>the last line is the only tricky one - as </p>\n\n<pre><code>&gt;&gt;= :: ReaderT Env (LoggingT IO) a -&gt; (a -&gt; ReaderT Env (LoggingT IO) b) -&gt; ReaderT Env (LoggingT IO) b\n</code></pre>\n\n<p>but <code>mx :: App a</code> and <code>f :: a -&gt; App b</code> so we need </p>\n\n<pre><code>runApp :: App a -&gt; ReaderT Env (LoggingT IO) a\n</code></pre>\n\n<p>to unwrap the result type of <code>f</code> to work in the unwrapped setting - which seems really obvious when written down, but can cause some headache, before that.</p>\n\n<h2>Update2</h2>\n\n<p>I found that paper someone linked me a long long time a go (but in the same galaxy) from the monad reader <a href=\"http://web.mit.edu/~ezyang/Public/threemonads.pdf\" rel=\"noreferrer\">Ed Z. Yang -\n Three Monads (Logic, Prompt, Failure)</a></p>\n"}], "owner": {"reputation": 5657, "user_id": 534481, "user_type": "registered", "accept_rate": 31, "profile_image": "https://www.gravatar.com/avatar/60df8c1a366ab1bf4378154e71a93367?s=128&d=identicon&r=PG", "display_name": "Saurabh Nanda", "link": "https://stackoverflow.com/users/534481/saurabh-nanda"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 190, "favorite_count": 1, "accepted_answer_id": 45266725, "answer_count": 1, "score": 3, "last_activity_date": 1500834601, "creation_date": 1500819349, "question_id": 45266054, "link": "https://stackoverflow.com/questions/45266054/how-to-create-a-monad-which-allows-io-but-is-not-a-monadio", "title": "How to create a monad which allows IO but is NOT a MonadIO?", "body": "<p>I'm trying to create a monad where only specific IO functions are allowed. This means that this hypothetical monad cannot be a <code>MonadIO</code> and cannot allow <code>liftIO</code> to be called.</p>\n\n<p>Here's what I have till now, but I'm stuck with the <code>Monad</code> instance for <code>AppM</code>:</p>\n\n<pre><code>data AppM a = AppM {unwrapAppM :: ReaderT Env (LoggingT IO) a}\n\ninstance Functor AppM where\n  fmap fn appm = AppM $ fmap fn (unwrapAppM appm)\n\n\ninstance Applicative AppM where\n  pure a = AppM $ pure a\n</code></pre>\n"}, {"tags": ["haskell"], "comments": [{"owner": {"reputation": 1545, "user_id": 2670439, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/wFcPA.jpg?s=128&g=1", "display_name": "SwiftsNamesake", "link": "https://stackoverflow.com/users/2670439/swiftsnamesake"}, "edited": false, "score": 0, "creation_date": 1500812632, "post_id": 45265015, "comment_id": 77492973, "body": "<code>show</code> is defined by the <code>Prelude</code>. If you want to pretty-print data, you should probably use one of the functions from that other package."}], "answers": [{"comments": [{"owner": {"reputation": 19307, "user_id": 1663462, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/c30e0fa0f3a065c038c633a95066d299?s=128&d=identicon&r=PG", "display_name": "Chris Stryczynski", "link": "https://stackoverflow.com/users/1663462/chris-stryczynski"}, "edited": false, "score": 0, "creation_date": 1500815743, "post_id": 45265174, "comment_id": 77493899, "body": "Output: <code>Example { a = &quot;a&quot; , b = &quot;b&quot; , c = &quot;c&quot; }</code>.  I&#39;d like the parameters to be on their own line."}, {"owner": {"reputation": 1545, "user_id": 2670439, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/wFcPA.jpg?s=128&g=1", "display_name": "SwiftsNamesake", "link": "https://stackoverflow.com/users/2670439/swiftsnamesake"}, "edited": false, "score": 0, "creation_date": 1500816647, "post_id": 45265174, "comment_id": 77494137, "body": "It seems to depend on the line length. Try setting <code>a</code> to some longer phrase."}], "tags": [], "owner": {"reputation": 412, "user_id": 6593641, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xVNVQ.jpg?s=128&g=1", "display_name": "madnight", "link": "https://stackoverflow.com/users/6593641/madnight"}, "is_accepted": false, "score": 5, "last_activity_date": 1500813717, "last_edit_date": 1500813717, "creation_date": 1500813398, "answer_id": 45265174, "question_id": 45265015, "link": "https://stackoverflow.com/questions/45265015/how-to-pretty-print-record-types/45265174#45265174", "title": "How to pretty print record types?", "body": "<p>As @SwiftsNamesake points out try something like Text.Show.Pretty</p>\n\n<pre><code>import Text.Show.Pretty \n\ndata Example = Example\n    { a :: String\n    , b :: String\n    , c :: String\n    } deriving (Show) \n\nmain = print $ ppShow Example {a = \"a\", b = \"b\", c = \"c\"}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 8237, "user_id": 2900502, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/R1OjD.jpg?s=128&g=1", "display_name": "Shersh", "link": "https://stackoverflow.com/users/2900502/shersh"}, "is_accepted": true, "score": 7, "last_activity_date": 1519764515, "last_edit_date": 1519764515, "creation_date": 1500820135, "answer_id": 45266188, "question_id": 45265015, "link": "https://stackoverflow.com/questions/45265015/how-to-pretty-print-record-types/45266188#45266188", "title": "How to pretty print record types?", "body": "<p>This can be achieved with: <a href=\"https://github.com/cdepillabout/pretty-simple\" rel=\"noreferrer\"><code>pretty-simple</code></a>:</p>\n\n<pre><code>ghci&gt; import Text.Pretty.Simple (pPrint)\nghci&gt; data Example = Example { a, b, c :: String } deriving Show\nghci&gt; pPrint Example {a = \"a\", b = \"b\", c = \"c\"}\nExample \n    { a = \"a\"\n    , b = \"b\"\n    , c = \"c\"\n    }\n</code></pre>\n"}], "owner": {"reputation": 19307, "user_id": 1663462, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/c30e0fa0f3a065c038c633a95066d299?s=128&d=identicon&r=PG", "display_name": "Chris Stryczynski", "link": "https://stackoverflow.com/users/1663462/chris-stryczynski"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 921, "favorite_count": 0, "accepted_answer_id": 45266188, "answer_count": 2, "score": 3, "last_activity_date": 1593609475, "creation_date": 1500812441, "last_edit_date": 1593609475, "question_id": 45265015, "link": "https://stackoverflow.com/questions/45265015/how-to-pretty-print-record-types", "title": "How to pretty print record types?", "body": "<p>Given a record like <code>Example {a = &quot;a&quot;, b = &quot;b&quot;, c = &quot;c&quot;}</code> how can I pretty print <strong>any</strong> record type like this to make it easier to read (more human friendly)?</p>\n<p>Somthing like:</p>\n<pre><code>Example {\n  a = &quot;a&quot;\n, b = &quot;b&quot;\n, c = &quot;c&quot;\n}\n</code></pre>\n<p>would be ideal.</p>\n<p>I've tried <a href=\"https://hackage.haskell.org/package/pretty-show-1.6.13/docs/Text-Show-Pretty.html#v:pPrint\" rel=\"nofollow noreferrer\">pPrint</a> from the <code>pretty-show</code> package but this doesn't seem to output any different to <code>show</code>.</p>\n"}, {"tags": ["haskell", "type-signature"], "comments": [{"owner": {"reputation": 28376, "user_id": 5743988, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/IeSSM.jpg?s=128&g=1", "display_name": "4castle", "link": "https://stackoverflow.com/users/5743988/4castle"}, "edited": false, "score": 0, "creation_date": 1500781503, "post_id": 45261292, "comment_id": 77486035, "body": "The <code>(-&gt;)</code> is right-associative, so <code>(b -&gt; b -&gt; c) -&gt; (a -&gt; b) -&gt; a -&gt; a -&gt; c</code> is equivalent to <code>(b -&gt; b -&gt; c) -&gt; (a -&gt; b) -&gt; (a -&gt; a -&gt; c)</code>. Notice the parentheses around the <code>a -&gt; a -&gt; c</code> at the end."}, {"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 0, "creation_date": 1500798828, "post_id": 45261292, "comment_id": 77489304, "body": "It is equivalent to <code>on (*) f x y = f x * f y</code>."}], "answers": [{"tags": [], "owner": {"reputation": 14582, "user_id": 2225384, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f30b04ed4d0b3fc4bc791a28815f34ca?s=128&d=identicon&r=PG", "display_name": "Rein Henrichs", "link": "https://stackoverflow.com/users/2225384/rein-henrichs"}, "is_accepted": false, "score": 4, "last_activity_date": 1500781625, "creation_date": 1500781625, "answer_id": 45261313, "question_id": 45261292, "link": "https://stackoverflow.com/questions/45261292/understanding-data-function-on-type-signature/45261313#45261313", "title": "Understanding Data.Function.on type signature", "body": "<blockquote>\n  <p>my interpretation is that it takes four parameters</p>\n</blockquote>\n\n<p>All Haskell functions take one argument. Some of them just return other functions.</p>\n\n<p>The best way to look at the signature for <code>on</code> is as a higher-order function: <code>(b -&gt; b -&gt; c) -&gt; (a -&gt; b) -&gt; (a -&gt; a -&gt; c)</code>. This says \"if you give me a binary operator that takes <code>b</code>s and gives a <code>c</code> and a way to get <code>b</code>s from <code>a</code>s, I will give you a binary operator that takes <code>a</code>s and gives a <code>c</code>\". You can see this in the definition:</p>\n\n<pre><code>(*) `on` f = \\x y -&gt; f x * f y\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 16362, "user_id": 49220, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/431cd43aaf713caa80316e852a87a840?s=128&d=identicon&r=PG", "display_name": "Paul Johnson", "link": "https://stackoverflow.com/users/49220/paul-johnson"}, "is_accepted": true, "score": 2, "last_activity_date": 1500890265, "last_edit_date": 1500890265, "creation_date": 1500814187, "answer_id": 45265290, "question_id": 45261292, "link": "https://stackoverflow.com/questions/45261292/understanding-data-function-on-type-signature/45265290#45265290", "title": "Understanding Data.Function.on type signature", "body": "<p>The Haskell arrow for function types hides a simple but clever idea. You have to think of <code>-&gt;</code> as an operator, like <code>+</code> and <code>-</code>, but for types. It takes two types as arguments and gives you a new type consisting of a function. So in</p>\n\n<pre><code>Int -&gt; String\n</code></pre>\n\n<p>You have the types <code>Int</code> and <code>String</code>, and you get a function from an Int to a String.</p>\n\n<p>Just like any other operator, you need a rule for a chain of them. If you think of <code>-</code>, what does this mean?</p>\n\n<pre><code>10 - 6 - 4\n</code></pre>\n\n<p>Does it mean <code>(10 - 6) - 4 = 0</code>, or does it mean <code>10 - (6 - 4) = 8</code>? The answer is the first one, which is why we say that <code>-</code> is \"left associative\".</p>\n\n<p>The <code>-&gt;</code> operator is right associative, so</p>\n\n<pre><code>foo :: Int -&gt; String -&gt; String\n</code></pre>\n\n<p>actually means</p>\n\n<pre><code>foo :: Int -&gt; (String -&gt; String)\n</code></pre>\n\n<p>Think about what this means. It means that <code>foo</code> doesn't take 2 arguments and return a result of type <code>String</code>, it actually takes 1 argument (the <code>Int</code>) and returns a new function that takes the second argument (the <code>String</code>) and returns the final <code>String</code>.</p>\n\n<p>Function application works the same way, except that is left associative. So</p>\n\n<p>foo 15 \"wibble\"</p>\n\n<p>actually means</p>\n\n<p>(foo 15) \"wibble\"</p>\n\n<p>So <code>foo</code> is applied to <code>15</code> and returns a new function which is then applied to <code>\"wibble\"</code>.</p>\n\n<p>This leads to a neat trick: instead of having to provide all the parameters when you call a function (as you do in just about every other programming language), you can just provide the first one or the first few, and get back a new function that expects the rest of the parameters.</p>\n\n<p>This is what is happening with <code>on</code>. I'll use a more concrete version where 'f' is replaced by 'length'.</p>\n\n<p>(*) <code>on</code> length</p>\n\n<p>you give <code>on</code> its first two parameters. The result is a new function that expects the other two. In types,</p>\n\n<pre><code>on :: (b -&gt; b -&gt; c) -&gt; (a -&gt; b) -&gt; a -&gt; a -&gt; c\n</code></pre>\n\n<p>In this case <code>(*)</code> has type <code>Num n =&gt; n -&gt; n -&gt; n</code> (I'm using different letters to make this less confusing), so that is matched with the type of the first argument to <code>on</code>, leading to the conclusion that if type <code>b</code> is substitued by <code>n</code> then type <code>c</code> must be as well, and and must also be a <code>Num</code> instance. Therefore <code>length</code> must return some numeric type. As it happens the type of <code>length</code> is <code>[d] -&gt; Int</code>, and <code>Int</code> is an instance of <code>Num</code>, so that works out. So at the end of this you get:</p>\n\n<pre><code>(*) `on` length :: [d] -&gt; [d] -&gt; Int\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 3985, "user_id": 387527, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/2ee4bf552ca59c2f324e666a3de008bd?s=128&d=identicon&r=PG", "display_name": "agam", "link": "https://stackoverflow.com/users/387527/agam"}, "is_accepted": false, "score": 0, "last_activity_date": 1592869267, "creation_date": 1592869267, "answer_id": 62525140, "question_id": 45261292, "link": "https://stackoverflow.com/questions/45261292/understanding-data-function-on-type-signature/62525140#62525140", "title": "Understanding Data.Function.on type signature", "body": "<p>As an intuitive aid, I read this as &quot;if you give me a <em>comparator</em> of type <code>b</code>, and a way to extract values of type <code>b</code> from values of type <code>a</code>, I will give you a <em>comparator</em> of type <code>a</code>&quot;.</p>\n<p>E.g. if <code>a</code> is some composite data type and <code>b</code> is some numerical attribute of these data values, you can express the idea of sorting these composite data types by using <code>Data.Function.on</code>.</p>\n"}], "owner": {"reputation": 55, "user_id": 8351855, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f6ac0e0979c346e6a9a18fbf4203e24c?s=128&d=identicon&r=PG&f=1", "display_name": "user38352", "link": "https://stackoverflow.com/users/8351855/user38352"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 977, "favorite_count": 0, "accepted_answer_id": 45265290, "answer_count": 3, "score": 3, "last_activity_date": 1592869267, "creation_date": 1500781376, "question_id": 45261292, "link": "https://stackoverflow.com/questions/45261292/understanding-data-function-on-type-signature", "title": "Understanding Data.Function.on type signature", "body": "<p>I'm still a beginner when it comes to Haskell syntax and functional programming languages so when I look at the type declaration for <code>Data.Function.on</code> which is <code>on :: (b -&gt; b -&gt; c) -&gt; (a -&gt; b) -&gt; a -&gt; a -&gt; c</code>, my interpretation is that it takes four parameters: <code>(b -&gt; b -&gt; c)</code>, <code>(a -&gt; b)</code>, <code>a</code>, <code>a</code>, and returns <code>c</code>. However, when I look at the general use syntax for <code>Data.Function.on</code> which is <code>(*) `on` f = \\x y -&gt; f x * f y</code>, it is only taking two function parameters, not four, so how does the type signature relate to the usage syntax?</p>\n"}, {"tags": ["haskell", "arrows"], "comments": [{"owner": {"reputation": 13807, "user_id": 2407038, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/538f6f4a9aa43841841de7d8e8b169fc?s=128&d=identicon&r=PG&f=1", "display_name": "user2407038", "link": "https://stackoverflow.com/users/2407038/user2407038"}, "edited": false, "score": 0, "creation_date": 1500768289, "post_id": 45260173, "comment_id": 77484199, "body": "Have you looked at the core to see how the two functions differ?"}], "answers": [{"comments": [{"owner": {"reputation": 11366, "user_id": 3922954, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/76ba47d2fdd24ab56b0b273cce2075e5?s=128&d=identicon&r=PG&f=1", "display_name": "AJF", "link": "https://stackoverflow.com/users/3922954/ajf"}, "edited": false, "score": 0, "creation_date": 1500804295, "post_id": 45260766, "comment_id": 77490641, "body": "So, what to do? Could we write our own rewrite rules?"}, {"owner": {"reputation": 48938, "user_id": 246886, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/dd1ebaade6623fc538fb8af3338e730d?s=128&d=identicon&r=PG", "display_name": "Jon Purdy", "link": "https://stackoverflow.com/users/246886/jon-purdy"}, "reply_to_user": {"reputation": 11366, "user_id": 3922954, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/76ba47d2fdd24ab56b0b273cce2075e5?s=128&d=identicon&r=PG&f=1", "display_name": "AJF", "link": "https://stackoverflow.com/users/3922954/ajf"}, "edited": false, "score": 6, "creation_date": 1500805082, "post_id": 45260766, "comment_id": 77490825, "body": "@AJFarmar: That seems like the logical next step. I suspect that rewrite rules won\u2019t be able to address all of the issues, though, so I\u2019d also suggest filing a GHC ticket, or posting a message to the Glasgow Haskell Users or Haskell Cafe lists, to gauge interest in a proposal for an improved desugaring. I guess the main reason it\u2019s unoptimised is that there are relatively few people using arrow notation."}, {"owner": {"reputation": 277, "user_id": 2464093, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5066381bc937a320b03de5926f4f8024?s=128&d=identicon&r=PG", "display_name": "Artem Solod", "link": "https://stackoverflow.com/users/2464093/artem-solod"}, "edited": false, "score": 1, "creation_date": 1500843922, "post_id": 45260766, "comment_id": 77502583, "body": "Thank you for your answer and suggestions, I will ask this on the mailing list as well and post back here."}], "tags": [], "owner": {"reputation": 48938, "user_id": 246886, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/dd1ebaade6623fc538fb8af3338e730d?s=128&d=identicon&r=PG", "display_name": "Jon Purdy", "link": "https://stackoverflow.com/users/246886/jon-purdy"}, "is_accepted": true, "score": 7, "last_activity_date": 1500798977, "last_edit_date": 1500798977, "creation_date": 1500773259, "answer_id": 45260766, "question_id": 45260173, "link": "https://stackoverflow.com/questions/45260173/proc-syntax-in-haskell-arrows-leads-to-severe-performance-penalty/45260766#45260766", "title": "Proc syntax in Haskell Arrows leads to severe performance penalty", "body": "<p>Yeah, this is probably caused by <code>proc</code> notation. The desugaring is very low-level, introducing a lot of (needless) <code>arr</code>s and not taking advantage of <code>&amp;&amp;&amp;</code> or <code>***</code> at all.</p>\n\n<p>For example, last I checked, this:</p>\n\n<pre><code>mulA f g = proc x -&gt; do\n  a &lt;- f -&lt; x\n  b &lt;- g -&lt; x\n  returnA -&lt; a * b\n</code></pre>\n\n<p>Is desugared to something like this:</p>\n\n<pre><code>mulA f g = arr dup\n  &gt;&gt;&gt; first f\n  &gt;&gt;&gt; arr swap\n  &gt;&gt;&gt; first g\n  &gt;&gt;&gt; arr mul\n  where\n    dup x = (x, x)\n    swap (x, y) = (y, x)\n    mul = uncurry (*)\n</code></pre>\n\n<p>When it could be just this:</p>\n\n<pre><code>mulA f g = f &amp;&amp;&amp; g &gt;&gt;&gt; arr mul\n</code></pre>\n\n<p>And this:</p>\n\n<pre><code>proc x -&gt; do\n  a &lt;- f -&lt; x\n  b &lt;- g -&lt; a\n  returnA -&lt; b\n</code></pre>\n\n<p>Becomes something like this:</p>\n\n<pre><code>arr id\n  &gt;&gt;&gt; f\n  &gt;&gt;&gt; arr id\n  &gt;&gt;&gt; g\n  &gt;&gt;&gt; arr id\n  &gt;&gt;&gt; returnA\n</code></pre>\n\n<p>Instead of this:</p>\n\n<pre><code>f &gt;&gt;&gt; g\n</code></pre>\n\n<p>Moreover I don\u2019t think there are any GHC rewrite rules that take advantage of the arrow laws to help account for this.</p>\n"}, {"tags": [], "owner": {"reputation": 277, "user_id": 2464093, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5066381bc937a320b03de5926f4f8024?s=128&d=identicon&r=PG", "display_name": "Artem Solod", "link": "https://stackoverflow.com/users/2464093/artem-solod"}, "is_accepted": false, "score": 3, "last_activity_date": 1501693583, "creation_date": 1501693583, "answer_id": 45466988, "question_id": 45260173, "link": "https://stackoverflow.com/questions/45260173/proc-syntax-in-haskell-arrows-leads-to-severe-performance-penalty/45466988#45466988", "title": "Proc syntax in Haskell Arrows leads to severe performance penalty", "body": "<p>I have found <a href=\"https://hackage.haskell.org/package/arrowp-qq\" rel=\"nofollow noreferrer\">arrowp-qq</a> which wraps <code>proc</code> blocks inside quasiquotes and seems to produce better output than native desugarer. Performance is restored in the following version of our example:</p>\n\n<pre><code>{-# LANGUAGE QuasiQuotes #-}\n...\nimport Control.Arrow.QuasiQuoter\n...\nsumArrQQ = [proc| x -&gt; do sumArr -&lt; x |]\n</code></pre>\n\n<p>One issue that I bumped into is that these quasiquotes don't play nicely with raw numbers inside the quotation.</p>\n\n<pre><code>sumArrQQ' = [proc| x -&gt; do sumArr -&lt; x + 2 |] -- gives an error\n\nsumArrQQ'' = [proc| x -&gt; do sumArr -&lt; plus2 x |] -- compiles fine\n    where plus2 = (+) 2\n</code></pre>\n"}], "owner": {"reputation": 277, "user_id": 2464093, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5066381bc937a320b03de5926f4f8024?s=128&d=identicon&r=PG", "display_name": "Artem Solod", "link": "https://stackoverflow.com/users/2464093/artem-solod"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 798, "favorite_count": 1, "accepted_answer_id": 45260766, "answer_count": 2, "score": 13, "last_activity_date": 1501693583, "creation_date": 1500765722, "question_id": 45260173, "link": "https://stackoverflow.com/questions/45260173/proc-syntax-in-haskell-arrows-leads-to-severe-performance-penalty", "title": "Proc syntax in Haskell Arrows leads to severe performance penalty", "body": "<p>Using <code>proc</code> notation for <code>Arrow</code> seems to kill performance in my project. Here is a toy example of the problem:</p>\n\n<p>We define Coroutine newtype (mostly copying from <a href=\"https://github.com/leonidas/codeblog/blob/master/2012/2012-01-08-streams-coroutines.md\" rel=\"noreferrer\" title=\"Generalizing Streams into Coroutines\">Generalizing Streams into Coroutines</a>) to represent Mealy machines (i.e. functions that carry some state) with instances of <code>Category</code> and <code>Arrow</code>, write <code>scan</code> wrapper function and <code>evalList</code> runner function for lists.</p>\n\n<p>Then we have <code>sumArr</code> and <code>sumArr'</code> functions where the latter is the former called within <code>proc</code> block.</p>\n\n<p>Compiling with <code>stack ghc -- --make test.hs -O2</code> using ghc-8.0.2 on OS X I get runtime of 0.087 secs for <code>sumArr</code> and 3.263 secs for <code>sumArr'</code> (with a heavy memory footprint).</p>\n\n<p>I would like to know if this in fact caused by using <code>proc</code> and if I can do something to have normal runtime behaviour when using <code>proc</code> notation (writing arrow code without it is painful). Thank you.</p>\n\n<pre><code>{-# LANGUAGE Arrows #-}\n{-# LANGUAGE BangPatterns #-}\n\nimport Prelude hiding (id, (.))\nimport Control.Arrow\nimport Control.Category\nimport qualified Data.List as L\n\nnewtype Coroutine i o = Coroutine { runC :: i -&gt; (o, Coroutine i o) }\n\ninstance Category Coroutine where\n    id = Coroutine $ \\i -&gt; (i, id)\n\n    cof . cog = Coroutine $ \\i -&gt;\n        let (x, cog') = runC cog i\n            (y, cof') = runC cof x\n        in (y, cof' . cog')\n\ninstance Arrow Coroutine where\n    arr f = Coroutine $ \\i -&gt; (f i, arr f)\n\n    first co = Coroutine $ \\(a,b) -&gt;\n        let (c, co') = runC co a in ((c,b), first co')\n\nscan :: (o -&gt; t -&gt; o) -&gt; o -&gt; Coroutine t o\nscan f = go where\n    go i = Coroutine $ step i where\n            step a b = let !a' = f a b in (a', go a')\n\nevalList :: Coroutine a b -&gt; [a] -&gt; [b]\nevalList a = L.map fst . L.drop 1 . L.scanl' (\\(_, acc) v -&gt; let !x = runC acc v in x) (undefined, a)\n\nsumArr, sumArr' :: Coroutine Int Int\nsumArr = scan (\\acc x -&gt; let !newAcc = acc + x in newAcc) 0\nsumArr' = proc v -&gt; do sumArr -&lt; v\n\ntestData :: [Int]\ntestData = [1..1000000]\n\nmain = print $ L.last $ evalList sumArr' testData\n</code></pre>\n"}, {"tags": ["haskell", "orm", "postgis"], "owner": {"reputation": 1602, "user_id": 3105524, "user_type": "registered", "accept_rate": 52, "profile_image": "https://www.gravatar.com/avatar/5b169766a0453f1ace846e5d425c940b?s=128&d=identicon&r=PG", "display_name": "Kamyar", "link": "https://stackoverflow.com/users/3105524/kamyar"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 118, "favorite_count": 0, "answer_count": 0, "score": 2, "last_activity_date": 1500934929, "creation_date": 1500760868, "last_edit_date": 1500934929, "question_id": 45259616, "link": "https://stackoverflow.com/questions/45259616/how-to-use-postgis-extensions-from-within-grounghog", "title": "How to use PostGIS extensions from within Grounghog?", "body": "<p>I am writing a haskell project using groundhog (as ORM) and PostgreSQL (as RDBMS). Everything looks fine but now I am adding some PostGIS fields to some tables. I have used Python before and SqlAlchemy has an extension called GeoAlchemy, which provides very good support of PostGIS which makes coding very easy. Is there any similar extension for Groundhog?</p>\n"}, {"tags": ["haskell"], "comments": [{"owner": {"reputation": 22377, "user_id": 2288659, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bBg8v.png?s=128&g=1", "display_name": "Silvio Mayolo", "link": "https://stackoverflow.com/users/2288659/silvio-mayolo"}, "edited": false, "score": 2, "creation_date": 1500760714, "post_id": 45259574, "comment_id": 77482642, "body": "It&#39;s really not clear what you want here. You say you want to call <code>modify</code> to produce a new list. In the <code>[p, q, u]</code> case for instance, what you do want the actual result list to be? Because you just list a bunch of function calls and don&#39;t describe how you want them to be composed."}, {"owner": {"reputation": 78, "user_id": 7580760, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/159c8e047cf71e4614cd6337318feda9?s=128&d=identicon&r=PG&f=1", "display_name": "jacksoor", "link": "https://stackoverflow.com/users/7580760/jacksoor"}, "reply_to_user": {"reputation": 22377, "user_id": 2288659, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bBg8v.png?s=128&g=1", "display_name": "Silvio Mayolo", "link": "https://stackoverflow.com/users/2288659/silvio-mayolo"}, "edited": false, "score": 0, "creation_date": 1500761317, "post_id": 45259574, "comment_id": 77482777, "body": "Ah yes maybe I should have worded that better, I want that my <code>modifyList</code> function produces a modified list using my <code>modify</code> function. The example below was just to illustrate what <code>modifyList</code> is supposed to do and what my issue is."}, {"owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "edited": false, "score": 2, "creation_date": 1500763132, "post_id": 45259574, "comment_id": 77483142, "body": "I still don&#39;t understand what you&#39;re attempting to do. Please add a simple example with e.g. some number-modifying function."}, {"owner": {"reputation": 28488, "user_id": 402884, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/35583fe46c2cde92467710cc7ceff266?s=128&d=identicon&r=PG", "display_name": "Chris Martin", "link": "https://stackoverflow.com/users/402884/chris-martin"}, "edited": false, "score": 2, "creation_date": 1500766643, "post_id": 45259574, "comment_id": 77483870, "body": "Yeah, I&#39;m also having a hard time understanding the objective. I agree that a simpler example, where you can show some example input and expected output, would probably help clear things up."}, {"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 0, "creation_date": 1500799331, "post_id": 45259574, "comment_id": 77489445, "body": "It&#39;s hard to understand what you want: your first list comprehension is essentially a <code>map</code>, but probably you want some fold (<code>foldr</code>?) or some map variant like <code>mapAccumL &#47; mapAccumR</code>. You can always use explicit recursion."}, {"owner": {"reputation": 78, "user_id": 7580760, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/159c8e047cf71e4614cd6337318feda9?s=128&d=identicon&r=PG&f=1", "display_name": "jacksoor", "link": "https://stackoverflow.com/users/7580760/jacksoor"}, "edited": false, "score": 0, "creation_date": 1500818895, "post_id": 45259574, "comment_id": 77494816, "body": "I have added a more concrete example and some Pseudocode. My actual <code>modify</code> function is a bit more complex and I hoped to simplify it a bit for you but in essence it just calculates a value to be added to one Structure position and subtracted from the other (which is supposed to be represented by the <code>factor</code> value)."}, {"owner": {"reputation": 14781, "user_id": 630160, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/4445f21326af525a8ad19af7e3ae41a8?s=128&d=identicon&r=PG", "display_name": "epsilonhalbe", "link": "https://stackoverflow.com/users/630160/epsilonhalbe"}, "edited": false, "score": 0, "creation_date": 1500825468, "post_id": 45259574, "comment_id": 77496893, "body": "can you tell me what the output of <code>modifyList [] = ?</code> and <code>modifyList [x]</code>"}, {"owner": {"reputation": 78, "user_id": 7580760, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/159c8e047cf71e4614cd6337318feda9?s=128&d=identicon&r=PG&f=1", "display_name": "jacksoor", "link": "https://stackoverflow.com/users/7580760/jacksoor"}, "edited": false, "score": 0, "creation_date": 1500827260, "post_id": 45259574, "comment_id": 77497435, "body": "<code>modifyList [] = []</code> and I assume <code>modifyList [x]</code> means a list with just one element, in this case the function would just return the same list like <code>modifyList [x] = [x]</code> or <code>modifyList(x:[]) = [x]</code>."}], "answers": [{"comments": [{"owner": {"reputation": 78, "user_id": 7580760, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/159c8e047cf71e4614cd6337318feda9?s=128&d=identicon&r=PG&f=1", "display_name": "jacksoor", "link": "https://stackoverflow.com/users/7580760/jacksoor"}, "edited": false, "score": 0, "creation_date": 1501089232, "post_id": 45276983, "comment_id": 77628941, "body": "Thank you for your answer, unfortunately both snippets do not work on their own. I fixed the second one by removing <code>&amp; zipWith addPos l</code> which gives me a list of total factors for each Structure, which is almost what I want. The only issue is that I actually need to call modify to find out what my factor is because it depends on various variables from my structures. I think the first snippet might work out but I can&#39;t fix the errors: <a href=\"https://pastebin.com/ZSpRFmZC\" rel=\"nofollow noreferrer\">pastebin.com/ZSpRFmZC</a> . Maybe you could fix it with some online compiler like <a href=\"https://repl.it/languages/haskell\" rel=\"nofollow noreferrer\">repl.it/languages/haskell</a> ?"}, {"owner": {"reputation": 4234, "user_id": 4942760, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f322d06b4f3e34278f29a954e0f38cb1?s=128&d=identicon&r=PG&f=1", "display_name": "Dan Robertson", "link": "https://stackoverflow.com/users/4942760/dan-robertson"}, "reply_to_user": {"reputation": 78, "user_id": 7580760, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/159c8e047cf71e4614cd6337318feda9?s=128&d=identicon&r=PG&f=1", "display_name": "jacksoor", "link": "https://stackoverflow.com/users/7580760/jacksoor"}, "edited": false, "score": 0, "creation_date": 1501108949, "post_id": 45276983, "comment_id": 77639259, "body": "Sorry about that. I wrote those answers on my phone without a Haskell implantation to hand so I&#39;m not surprised they don&#39;t compile. I&#39;m going to be away from a computer and even a mobile signal for probably three weeks so I&#39;m afraid I&#39;m unable to correct these. The second version was designed only to work with your description where the modification to the position depended only on the sum of factors before it and the sum after it. If the modification does not affect the factor then this should still work if factor is replaced with a more complex function."}, {"owner": {"reputation": 4234, "user_id": 4942760, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f322d06b4f3e34278f29a954e0f38cb1?s=128&d=identicon&r=PG&f=1", "display_name": "Dan Robertson", "link": "https://stackoverflow.com/users/4942760/dan-robertson"}, "reply_to_user": {"reputation": 78, "user_id": 7580760, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/159c8e047cf71e4614cd6337318feda9?s=128&d=identicon&r=PG&f=1", "display_name": "jacksoor", "link": "https://stackoverflow.com/users/7580760/jacksoor"}, "edited": false, "score": 0, "creation_date": 1501109312, "post_id": 45276983, "comment_id": 77639376, "body": "I&#39;ve made a slight modification to the first version but it probably won&#39;t fix any type errors that might exist. To solve this yourself you need to work out how to express your algorithm in a more functional way rather than attempting to shoehorn an imperative series-of-non-commuting-updates approach into Haskell"}, {"owner": {"reputation": 4234, "user_id": 4942760, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f322d06b4f3e34278f29a954e0f38cb1?s=128&d=identicon&r=PG&f=1", "display_name": "Dan Robertson", "link": "https://stackoverflow.com/users/4942760/dan-robertson"}, "reply_to_user": {"reputation": 78, "user_id": 7580760, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/159c8e047cf71e4614cd6337318feda9?s=128&d=identicon&r=PG&f=1", "display_name": "jacksoor", "link": "https://stackoverflow.com/users/7580760/jacksoor"}, "edited": false, "score": 0, "creation_date": 1501109477, "post_id": 45276983, "comment_id": 77639428, "body": "Update: may have fixed clumsy type error in definition of mapPairs. Ghc said it was applied to too few arguments. It was applied to too few arguments"}], "tags": [], "owner": {"reputation": 4234, "user_id": 4942760, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f322d06b4f3e34278f29a954e0f38cb1?s=128&d=identicon&r=PG&f=1", "display_name": "Dan Robertson", "link": "https://stackoverflow.com/users/4942760/dan-robertson"}, "is_accepted": false, "score": 0, "last_activity_date": 1501109109, "last_edit_date": 1501109109, "creation_date": 1500888670, "answer_id": 45276983, "question_id": 45259574, "link": "https://stackoverflow.com/questions/45259574/pairwise-list-modification-in-haskell/45276983#45276983", "title": "Pairwise list modification in Haskell", "body": "<p>Ok I think this is what you want to do: have a function which for each pair of elements of your list (in the same order as in your list), evaluates some modify function on that pair and then puts the results back where they came from.</p>\n\n<pre><code>mapPairs :: ((a,a)-&gt;(a,a)) -&gt; [a] -&gt; [a]\nmapPairs f [] = []\nmapPairs f (x:xs) = s : mapPairs f res where\n  rec a [] = (a,[])\n  rec a (y:ys) = let (b,c) = f (a,y)\n                     (a',l') = rec b ys in\n    (a',c:l')\n  (s,res) = rec x xs\n</code></pre>\n\n<p>I think this works but I don't have a computer to hand. However it seems you probably want a different solution to this. Anyway here is how to write <code>modifyList</code>:</p>\n\n<pre><code>modifyList = mapPairs modify\n</code></pre>\n\n<p>Here is an attempt to actually solve your problem:</p>\n\n<pre><code>postFactors' [] = []\npostFactors' (x:xs) = case postFactors' xs of\n  [] -&gt; factor x : [0]\n  a:as -&gt; (factor x + a) : a : as\npostFactors = tail . postFactors'\npreFactors = scanl (+) 0 . map factor\naddPos v f = v {position = V.map (+f) $ position v}\nmodifyList l = zipWith (-) (postFactors l) (preFactors l) &amp; zipWith addPos l\n</code></pre>\n\n<p>Description: Find the sum of factors from everything before/after each element of the list. Then find their differences. Then add that to the position of each element</p>\n"}], "owner": {"reputation": 78, "user_id": 7580760, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/159c8e047cf71e4614cd6337318feda9?s=128&d=identicon&r=PG&f=1", "display_name": "jacksoor", "link": "https://stackoverflow.com/users/7580760/jacksoor"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 690, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1501109109, "creation_date": 1500760553, "last_edit_date": 1501090520, "question_id": 45259574, "link": "https://stackoverflow.com/questions/45259574/pairwise-list-modification-in-haskell", "title": "Pairwise list modification in Haskell", "body": "<p>I want to write a <code>modifyList</code> function which takes a list of data structures, modifies them using a function <code>modify</code> and return that modified list.\nThe problem I\u2019m having is, that my <code>modify</code> function takes pairs of elements from a list and applies changes to both elements.</p>\n\n<p>This is my (simplified) code so far:</p>\n\n<pre><code>import qualified Data.Vector as V\nimport Data.List\n\ndata Structure = Structure{ factor :: Double\n                          , position :: V.Vector Double\n                          } deriving (Show)\n\n-- Calculates a factor with values from both structures\ncalculateFactor :: (Structure, Structure) -&gt; Double\ncalculateFactor (p, q) = (factor p) + (factor q) -- This calculation is simplified     \n\nmodify :: (Structure, Structure) -&gt; (Structure, Structure)\nmodify (a, b) = ( a { position = V.map (+ structureFactor) (position a) }\n                , b { position = V.map (subtract structureFactor) (position b) })\n            where structureFactor = calculateFactor(a,b)\n\nmodifyList :: [Structure] -&gt; [Structure]\nmodifyList l = [ ??? | (p, q) &lt;- (map (modify) pairs)] -- What do I need to do here?\n             where pairs = [(x, y) | (x:ys) &lt;- tails l, y &lt;- ys]\n</code></pre>\n\n<p>How can I make these modifications so that subsequent function calls can work with the updated values?</p>\n\n<p>As an example, I define some data like this:</p>\n\n<pre><code>p = Structure 2 (V.replicate 3 1.0)\nq = Structure 3 (V.replicate 3 1.0)\nu = Structure 4 (V.replicate 3 1.0)\nlist = [p, q, u]\n</code></pre>\n\n<p>Now <code>modifyList list</code> should call <code>modify</code> for each element pair in my list: <code>(p, q) (p, u) (q, u)</code> which gives me a result list of pairs:</p>\n\n<pre><code>[(Structure {factor = 2.0, position = [6.0,6.0,6.0]}, -- Modified p\n  Structure {factor = 3.0, position = [-4.0,-4.0,-4.0]}), -- Modified q\n  (Structure {factor = 2.0, position = [7.0,7.0,7.0]}, -- Also modified p\n  Structure {factor = 4.0, position = [-5.0,-5.0,-5.0]}), -- Modified u\n  (Structure {factor = 3.0, position = [8.0,8.0,8.0]}, -- Also q\n  Structure {factor = 4.0, position = [-6.0,-6.0,-6.0]})] -- Also u\n</code></pre>\n\n<p>But what I actually want to end up with is the same list with <code>[p, q, u]</code> where <code>p</code> has <code>position = [12.0, 12.0, 12.0]</code> as if I had manually called <code>p' = fst(modify (p, q))</code> and then call <code>p = fst(modify(p', u))</code> to give the original <code>position p</code> a <em>new</em> value. Respectively <code>q</code> should have <code>position = [3.0, 3.0, 3.0]</code> and <code>u</code>, <code>position = [-12.0, -12.0, -12.0]</code>.</p>\n\n<p>A pseudocode for an imperative language could look like this:</p>\n\n<pre><code>Structure = {Double factor, Vector position};\nStructure[] list = {p, q, u};\nfor i = 0; i &lt; list.length; i++;\n    for j = i+1; j &lt; list.length; j++;\n        structureFactor = calculateFactor(list[i], list[j]);\n        //Destructive updates\n        list[i].position += structureFactor; //Add factor to each vector value\n        list[j].position -= structureFactor;\n</code></pre>\n\n<p>I've tried experimenting with Mutable Vectors but failed trying to include these in my data structure, since my understanding of Haskell is too basic and I'm not even sure if this approach makes sense.</p>\n\n<p>Is there any easy way to do this?</p>\n"}, {"tags": ["haskell", "functor", "fixpoint-combinators"], "answers": [{"comments": [{"owner": {"reputation": 3603, "user_id": 165806, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/c889e0a95a3bb07f90ab28ad442f1127?s=128&d=identicon&r=PG", "display_name": "Iceland_jack", "link": "https://stackoverflow.com/users/165806/iceland-jack"}, "edited": false, "score": 0, "creation_date": 1500754387, "post_id": 45257045, "comment_id": 77481006, "body": "Something to keep in mind: Due the the argument order of <code>Fix</code>, the &quot;regular&quot; <code>Bifoldable</code> instance will produce <code>toList @List</code> in reverse.."}], "tags": [], "owner": {"reputation": 37219, "user_id": 1523776, "user_type": "moderator", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/b3e0b5c8e42a8c38009ef2d969f8dabb?s=128&d=identicon&r=PG", "display_name": "Benjamin Hodgson", "link": "https://stackoverflow.com/users/1523776/benjamin-hodgson"}, "is_accepted": false, "score": 2, "last_activity_date": 1500742459, "creation_date": 1500742459, "answer_id": 45257045, "question_id": 45256806, "link": "https://stackoverflow.com/questions/45256806/how-to-use-functor-instances-with-fix-types/45257045#45257045", "title": "How to use Functor instances with Fix types", "body": "<blockquote>\n  <p>I guess I could use a <code>Bifunctor</code> (mapping over the first value, traversing the second), but I don't know how that could ever work with <code>Data.Fix.Fix</code>?</p>\n</blockquote>\n\n<p>You hit the nail on the head.</p>\n\n<p><a href=\"https://hackage.haskell.org/package/bifunctors\" rel=\"nofollow noreferrer\">The <code>bifunctors</code> package</a> contains <a href=\"https://hackage.haskell.org/package/bifunctors-5.4.2/docs/Data-Bifunctor-Fix.html#t:Fix\" rel=\"nofollow noreferrer\">a \"<code>Fix</code>-for-bifunctors\" type</a> which looks like this:</p>\n\n<pre><code>newtype Fix f a = In { out :: f (Fix f a) a }\n</code></pre>\n\n<p><code>Fix f</code> is a <code>Functor</code> whenever <code>f</code> is a <code>Bifunctor</code>. <code>fmap</code> recursively <code>fmap</code>s <code>f</code>'s first parameter and maps the second.</p>\n\n<pre><code>instance Bifunctor f =&gt; Functor (Fix f) where\n    fmap f = In . bimap (fmap f) f . out\n</code></pre>\n\n<p>So your <code>List</code> example would look like this:</p>\n\n<pre><code>data ListF r a = Nil | Cons r a\n\ntype List = Fix ListF\n\nmap :: (a -&gt; b) -&gt; List a -&gt; List b\nmap = fmap\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 0, "creation_date": 1504115468, "post_id": 45257691, "comment_id": 78892575, "body": "I don&#39;t really understand what makes <code>Mu</code> a fixpoint operator. Can you maybe explain that? I&#39;m also struggling to see how this mechanism improves (theoretically) over the (admittedly rather annoying) profusion of <code>Functor</code>, <code>Bifunctor</code>, <code>Trifunctor</code>, etc., classes. This probably just reflects the limits of my own understanding of these abstract notions, but I&#39;m probably not the only one who doesn&#39;t quite get it."}, {"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 0, "creation_date": 1504120251, "post_id": 45257691, "comment_id": 78895201, "body": "Also, do you think you could offer a less trivial example, such as expressing the free indexed monad using <code>Mu</code>? Or is that an absurd notion for some reason?"}, {"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 0, "creation_date": 1504123458, "post_id": 45257691, "comment_id": 78896824, "body": "Hrm... Actually, I seem to have gotten a free indexed monad, but it&#39;s rather messy. <code>data FreeF :: ((s -&gt; *) -&gt; (s -&gt; *)) -&gt; (Either s s -&gt; *) -&gt; (s -&gt; *) where   PureF :: p (&#39;Left s) -&gt; FreeF f p s   FreeF :: f (Compose p &#39;Right) s -&gt; FreeF f p s</code> where the <code>Compose</code> in question has kind <code>(k -&gt; *) -&gt; (s -&gt; k) -&gt; (s -&gt; *)</code>, and then the free indexed monad seems to be <code>Free f = Mu (FreeF f)</code>. But maybe there&#39;s a better way one could find if one understood these ideas better."}, {"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 0, "creation_date": 1504123729, "post_id": 45257691, "comment_id": 78896942, "body": "Then there&#39;s the question of what to do about structures that <i>don&#39;t</i> look like lists...."}, {"owner": {"reputation": 42094, "user_id": 828361, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/6a82397672dcc1fca31c32508ef0798b?s=128&d=identicon&r=PG", "display_name": "pigworker", "link": "https://stackoverflow.com/users/828361/pigworker"}, "reply_to_user": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 0, "creation_date": 1504143933, "post_id": 45257691, "comment_id": 78902944, "body": "@dfeuer More later, but a handy hint for now. <code>(Either i j -&gt; *) -&gt; (j -&gt; *)</code> is, by coproducty goodness, an isotope of <code>(i -&gt; *, j -&gt; *) -&gt; (j -&gt; *)</code>. And that curries out to <code>(i -&gt; *) -&gt; (j -&gt; *) -&gt; (j -&gt; *)</code>. We&#39;re really making a fixpoint on <code>j -&gt; *</code> parametrized by some <code>i -&gt; *</code>, just like in the usual <code>Bifunctor</code> fixpoint."}, {"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 0, "creation_date": 1504145161, "post_id": 45257691, "comment_id": 78903224, "body": "Yes, I thought about that curried version a bit. But the final result ... doesn&#39;t really look very fixpointy, either in kind or in structure. And there&#39;s the rather strange apparent redundancy in information provided by the base functor and that provided by <code>Case</code>."}, {"owner": {"reputation": 42094, "user_id": 828361, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/6a82397672dcc1fca31c32508ef0798b?s=128&d=identicon&r=PG", "display_name": "pigworker", "link": "https://stackoverflow.com/users/828361/pigworker"}, "reply_to_user": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 0, "creation_date": 1504146372, "post_id": 45257691, "comment_id": 78903501, "body": "It&#39;s a whole lot cleaner in languages with proper higher-order type-level programming."}], "tags": [], "owner": {"reputation": 42094, "user_id": 828361, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/6a82397672dcc1fca31c32508ef0798b?s=128&d=identicon&r=PG", "display_name": "pigworker", "link": "https://stackoverflow.com/users/828361/pigworker"}, "is_accepted": true, "score": 10, "last_activity_date": 1500749290, "last_edit_date": 1500749290, "creation_date": 1500746820, "answer_id": 45257691, "question_id": 45256806, "link": "https://stackoverflow.com/questions/45256806/how-to-use-functor-instances-with-fix-types/45257691#45257691", "title": "How to use Functor instances with Fix types", "body": "<p>Quite right to construct a recursive functor by taking the fixpoint of a bifunctor, because 1 + 1 = 2. The list node structure is given as a container with 2 sorts of substructure: \"elements\" and \"sublists\".</p>\n\n<p>It can be troubling that we need a whole other notion of <code>Functor</code> (which captures a rather specific variety of functor, despite its rather general name), to construct a <code>Functor</code> as a fixpoint. We can, however (as a bit of a stunt), shift to a slightly more general notion of functor which is <em>closed</em> under fixpoints.</p>\n\n<pre><code>type p -:&gt; q = forall i. p i -&gt; q i\n\nclass FunctorIx (f :: (i -&gt; *) -&gt; (o -&gt; *)) where\n  mapIx :: (p -:&gt; q) -&gt; f p -:&gt; f q\n</code></pre>\n\n<p>These are the functors on <em>indexed sets</em>, so the names are not just gratuitous homages to Goscinny and Uderzo. You can think of <code>o</code> as \"sorts of structure\" and <code>i</code> as \"sorts of substructure\". Here's an example, based on the fact that 1 + 1 = 2.</p>\n\n<pre><code>data ListF :: (Either () () -&gt; *) -&gt; (() -&gt; *) where\n  Nil  :: ListF p '()\n  Cons :: p (Left '()) -&gt; p (Right '()) -&gt; ListF p '()\n\ninstance FunctorIx ListF where\n  mapIx f Nil        = Nil\n  mapIx f (Cons a b) = Cons (f a) (f b)\n</code></pre>\n\n<p>To exploit the choice of substructure sort, we'll need a kind of type-level case analysis. We can't get away with a type function, as</p>\n\n<ol>\n<li>we need it to be partially applied, and that's not allowed;</li>\n<li>we need a bit at run time to tell us which sort is present.</li>\n</ol>\n\n\n\n<pre><code>data Case :: (i -&gt; *) -&gt; (j -&gt; *) -&gt; (Either i j -&gt; *)  where\n  CaseL :: p i -&gt; Case p q (Left i)\n  CaseR :: q j -&gt; Case p q (Right j)\n\ncaseMap :: (p -:&gt; p') -&gt; (q -:&gt; q') -&gt; Case p q -:&gt; Case p' q'\ncaseMap f g (CaseL p) = CaseL (f p)\ncaseMap f g (CaseR q) = CaseR (g q)\n</code></pre>\n\n<p>And now we can take the fixpoint:</p>\n\n<pre><code>data Mu :: ((Either i j -&gt; *) -&gt; (j -&gt; *)) -&gt;\n           ((i -&gt; *) -&gt; (j -&gt; *)) where\n  In :: f (Case p (Mu f p)) j -&gt; Mu f p j\n</code></pre>\n\n<p>In each substructure position, we do a case split to see whether we should have a <code>p</code>-element or a <code>Mu f p</code> substructure. And we get its functoriality.</p>\n\n<pre><code>instance FunctorIx f =&gt; FunctorIx (Mu f) where\n  mapIx f (In fpr) = In (mapIx (caseMap f (mapIx f)) fpr)\n</code></pre>\n\n<p>To build lists from these things, we need to juggle between <code>*</code> and <code>() -&gt; *</code>.</p>\n\n<pre><code>newtype K a i = K {unK :: a}\n\ntype List a = Mu ListF (K a) '()\npattern NilP :: List a\npattern NilP       = In Nil\npattern ConsP :: a -&gt; List a -&gt; List a\npattern ConsP a as = In (Cons (CaseL (K a)) (CaseR as))\n</code></pre>\n\n<p>Now, for lists, we get</p>\n\n<pre><code>map' :: (a -&gt; b) -&gt; List a -&gt; List b\nmap' f = mapIx (K . f . unK)\n</code></pre>\n"}], "owner": {"reputation": 4639, "user_id": 3986708, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/g0JCF.jpg?s=128&g=1", "display_name": "hgiesel", "link": "https://stackoverflow.com/users/3986708/hgiesel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 481, "favorite_count": 1, "accepted_answer_id": 45257691, "answer_count": 2, "score": 2, "last_activity_date": 1562457188, "creation_date": 1500741133, "last_edit_date": 1562457188, "question_id": 45256806, "link": "https://stackoverflow.com/questions/45256806/how-to-use-functor-instances-with-fix-types", "title": "How to use Functor instances with Fix types", "body": "<p>Let's say I want to have a very generic <code>ListF</code> data type:</p>\n\n<pre><code>{-# LANGUAGE GADTs, DataKinds #-}\n\ndata ListF :: * -&gt; * -&gt; * where\n  Nil  ::           List a b\n  Cons :: a -&gt; b -&gt; List a b\n</code></pre>\n\n<p>Now I can use this data type with <code>Data.Fix</code> to build an f-algebra</p>\n\n<pre><code>import qualified Data.Fix as Fx\n\ninstance Functor (ListF a :: * -&gt; *) where\n  fmap f (Cons x y) = Cons x (f y)\n  fmap _ Nil        = Nil\n\nsumOfNums = Fx.cata f (Fx.Fix $ Cons 2 (Fx.Fix $ Cons 3 (Fx.Fix $ Cons 5 (Fx.Fix Nil))))\n  where\n    f (Cons x y) = x + y\n    f Nil        = 0\n</code></pre>\n\n<p>But how I can use this very generic data type <code>ListF</code> to create what I consider the default <code>Functor</code> instance for recursive lists (mapping over each value in the list)</p>\n\n<p>I guess I could use a Bifunctor (mapping over the first value, traversing the second), but I don't know how that could ever work with <code>Data.Fix.Fix</code>?</p>\n"}, {"tags": ["haskell", "maybe", "hunit"], "comments": [{"owner": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "edited": false, "score": 0, "creation_date": 1500728562, "post_id": 45254871, "comment_id": 77473602, "body": "You should specify the type of the <code>Maybe a</code>."}], "answers": [{"comments": [{"owner": {"reputation": 5242, "user_id": 50962, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e39b7acdae85aedee02487bed17ff5f6?s=128&d=identicon&r=PG", "display_name": "altern", "link": "https://stackoverflow.com/users/50962/altern"}, "edited": false, "score": 0, "creation_date": 1500730498, "post_id": 45254912, "comment_id": 77474137, "body": "Why does then running <code>Nothing == Nothing</code> in <code>ghci</code> return <code>True</code> without specifying the whole type explicitly?"}, {"owner": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "reply_to_user": {"reputation": 5242, "user_id": 50962, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e39b7acdae85aedee02487bed17ff5f6?s=128&d=identicon&r=PG", "display_name": "altern", "link": "https://stackoverflow.com/users/50962/altern"}, "edited": false, "score": 0, "creation_date": 1500730601, "post_id": 45254912, "comment_id": 77474170, "body": "@altern: because <code>ghci</code> postpones type grounding. Simply because it cannot do that immediately. <code>ghc</code> will interpret all the files and then reason about these."}, {"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "reply_to_user": {"reputation": 5242, "user_id": 50962, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e39b7acdae85aedee02487bed17ff5f6?s=128&d=identicon&r=PG", "display_name": "altern", "link": "https://stackoverflow.com/users/50962/altern"}, "edited": false, "score": 7, "creation_date": 1500741329, "post_id": 45254912, "comment_id": 77477222, "body": "@altern Because of <a href=\"https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ghci.html#extended-default-rules\" rel=\"nofollow noreferrer\">extended defaulting</a>, which chooses monomorphic types in ambiguous type situations more often, and which is turned on by default in ghci and off by default elsewhere."}], "tags": [], "owner": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "is_accepted": true, "score": 3, "last_activity_date": 1500729332, "last_edit_date": 1500729332, "creation_date": 1500728760, "answer_id": 45254912, "question_id": 45254871, "link": "https://stackoverflow.com/questions/45254871/hunit-does-not-allow-to-compile-test-cases-if-nothing-nothing-condition-is/45254912#45254912", "title": "HUnit does not allow to compile test cases if `Nothing == Nothing` condition is present in the test", "body": "<p>The problem is that you specify two <code>Nothing</code>s, and none of these thus hint what the type of <code>a</code> will be. Of course you can reason that for <code>Nothing</code> it does not matter. But Haskell does not reason that way: it is interested in \"to what <code>(==)</code> function should I point?\".</p>\n\n<p>You can resolve the problem by making the type explicit. For instance:</p>\n\n<pre><code>testTests = test [ \n  \"test A01\"  ~: \"x == x\" ~: True ~=? (Nothing <b>:: Maybe Int</b>) == Nothing,\n  \"test _\"    ~: \"empty test\" ~: True ~=? True\n  ]</code></pre>\n"}], "owner": {"reputation": 5242, "user_id": 50962, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e39b7acdae85aedee02487bed17ff5f6?s=128&d=identicon&r=PG", "display_name": "altern", "link": "https://stackoverflow.com/users/50962/altern"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 101, "favorite_count": 0, "accepted_answer_id": 45254912, "answer_count": 1, "score": 1, "last_activity_date": 1500729332, "creation_date": 1500728475, "last_edit_date": 1500728859, "question_id": 45254871, "link": "https://stackoverflow.com/questions/45254871/hunit-does-not-allow-to-compile-test-cases-if-nothing-nothing-condition-is", "title": "HUnit does not allow to compile test cases if `Nothing == Nothing` condition is present in the test", "body": "<p>I have encountered a weird <code>HUnit</code> behavior. It does not allow to compile test cases if <code>Nothing == Nothing</code> condition is present in the test. Here is my code that reproduces this behavior:</p>\n\n<pre><code>module TestTest where \n\nimport Control.Exception\nimport Control.Monad\nimport Test.HUnit\nimport Test.AssertError\n\ntestTests = test [ \n    \"test A01\"  ~: \"x == x\" ~: True ~=? Nothing == Nothing,\n    \"test _\"    ~: \"empty test\" ~: True ~=? True\n    ]\n\nrunTests :: IO Counts\nrunTests = do\n    runTestTT testTests\n</code></pre>\n\n<p>Attempt to load the file with this contents in <code>ghci</code> returns following error:</p>\n\n<pre><code>[2 of 2] Compiling TestTest         ( Test/TestTest.hs, interpreted )\n\nTest/TestTest.hs:9:49:\n    No instance for (Eq a0) arising from a use of \u2018==\u2019\n    The type variable \u2018a0\u2019 is ambiguous\n    Note: there are several potential instances:\n      instance Eq Counts -- Defined in \u2018Test.HUnit.Base\u2019\n      instance Eq Node -- Defined in \u2018Test.HUnit.Base\u2019\n      instance Eq State -- Defined in \u2018Test.HUnit.Base\u2019\n      ...plus 53 others\n    In the second argument of \u2018(~=?)\u2019, namely \u2018Nothing == Nothing\u2019\n    In the second argument of \u2018(~:)\u2019, namely\n      \u2018True ~=? Nothing == Nothing\u2019\n    In the second argument of \u2018(~:)\u2019, namely\n      \u2018\"x == x\" ~: True ~=? Nothing == Nothing\u2019\nFailed, modules loaded: Test.AssertError.\n</code></pre>\n\n<p>Note that condition <code>Just 2 == Just 2</code> in the same test case works fine. If I type <code>Nothing == Nothing</code> in <code>ghci</code>, it returns <code>True</code> as expected.</p>\n\n<p>Any ideas why <code>HUnit</code> might behave this way? Is this a bug or expected behavior?</p>\n"}, {"tags": ["haskell", "gtk", "gtk3", "ffi"], "comments": [{"owner": {"reputation": 123, "user_id": 3801711, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/YwxQm.jpg?s=128&g=1", "display_name": "Arthur", "link": "https://stackoverflow.com/users/3801711/arthur"}, "edited": false, "score": 0, "creation_date": 1500726020, "post_id": 45253212, "comment_id": 77472893, "body": "I&#39;ve found out what the ObjectK means. The passed value <a href=\"https://developer.gnome.org/gio/stable/GListStore.html#GListStore--item-type\" rel=\"nofollow noreferrer\">must be a subclass of GObject</a>. I&#39;ve already succeeded in passing in <code>GtkLabel</code>. The question how to convert a <code>Ptr ()</code> back into a <code>GtkLabel</code> so I can work with it remains however."}], "owner": {"reputation": 123, "user_id": 3801711, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/YwxQm.jpg?s=128&g=1", "display_name": "Arthur", "link": "https://stackoverflow.com/users/3801711/arthur"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 64, "favorite_count": 0, "answer_count": 0, "score": 1, "last_activity_date": 1500797884, "creation_date": 1500717532, "last_edit_date": 1500797884, "question_id": 45253212, "link": "https://stackoverflow.com/questions/45253212/how-do-i-use-a-gliststore-from-haskell-gi-in-other-words-how-do-i-cast-a-ptr", "title": "How do I use a GListStore from haskell-gi)? In other words, how do I cast a Ptr () to a GObject?", "body": "<p>I'm trying to use the <a href=\"https://hackage.haskell.org/package/gi-gtk-3.0.14/docs/GI-Gtk-Objects-FlowBox.html#g:3\" rel=\"nofollow noreferrer\">bindModel</a> function of gtk3's flowbox, so that I can just give it a model and creation of child widgets, sorting, and filtering will be done for me.</p>\n\n<p>The process of storing and retrieving data into this model isn't clear to me however, in two ways:</p>\n\n<ol>\n<li>How do I put arbitrary Haskell data in a ListStore? Say I have defined <code>data Cookie = Cookie [Text] Text</code>. In <a href=\"https://hackage.haskell.org/package/gi-gio-0.2.46.15/docs/GI-Gio-Objects-ListStore.html#g:3\" rel=\"nofollow noreferrer\">GListStore</a>'s <code>listStoreAppend :: (ObjectK b) =&gt; ListStore -&gt; b -&gt; IO ()</code>, what is b? How do I convert <code>Cookie</code> into an <code>ObjectK</code>? In the <a href=\"https://developer.gnome.org/gio/stable/GListStore.html#g-list-store-append\" rel=\"nofollow noreferrer\">original C code</a>, this parameter is a gpointer...</li>\n<li>How do I convert a <code>Ptr ()</code> back into <code>Cookie</code>? The flowbox' <a href=\"https://hackage.haskell.org/package/gi-gtk-3.0.14/docs/GI-Gtk-Objects-FlowBox.html#g:3\" rel=\"nofollow noreferrer\">bindModel</a> has the type <code>flowBoxBindModel :: (HasCallStack, IsListModel b) =&gt; FlowBox -&gt; Maybe b -&gt; (Ptr () -&gt; IO Widget) -&gt; IO ()</code>. To create a child widget, I need to convert <code>Ptr ()</code>, which it gets from the ListStore, back into <code>Cookie</code>, but how?</li>\n</ol>\n\n<p>So, to recap: If anyone could help make clear to me how (1) I put Haskell data in a C-defined ListStore; and (2) how I convert pointer back into its original data form?</p>\n\n<p>Thanks in advance.</p>\n\n<p>Note: I simplified some types, to emphasize the unclear parts.</p>\n"}, {"tags": ["haskell", "yesod", "persistent"], "answers": [{"tags": [], "owner": {"reputation": 320, "user_id": 7255965, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/201ab93839e2c4184b8b6930fb434e58?s=128&d=identicon&r=PG&f=1", "display_name": "Yotam Ohad", "link": "https://stackoverflow.com/users/7255965/yotam-ohad"}, "is_accepted": false, "score": 1, "last_activity_date": 1500674717, "creation_date": 1500674717, "answer_id": 45247347, "question_id": 45246711, "link": "https://stackoverflow.com/questions/45246711/how-to-access-two-different-database-servers-with-yesod-persistent/45247347#45247347", "title": "How to access two different database servers with Yesod/Persistent?", "body": "<p>The function that creates a connection (like <code>runSqlite</code>) is in the <code>IO</code> monad. That means that you can call it in a <code>Handler</code> function in your Yesod application with <code>liftIO</code>. You can also immediately run queries on the database, so that's pretty neat.</p>\n"}, {"tags": [], "owner": {"reputation": 20862, "user_id": 376113, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/d3a5bd12fe6d876527a3cf4ac0de5fc6?s=128&d=identicon&r=PG", "display_name": "mb14", "link": "https://stackoverflow.com/users/376113/mb14"}, "is_accepted": true, "score": 0, "last_activity_date": 1501361280, "creation_date": 1501361280, "answer_id": 45393915, "question_id": 45246711, "link": "https://stackoverflow.com/questions/45246711/how-to-access-two-different-database-servers-with-yesod-persistent/45393915#45393915", "title": "How to access two different database servers with Yesod/Persistent?", "body": "<p>Looking at the scaffolded code, it should be easy to define another <code>rundDB</code> accessing another pool created with different connection parameters. This implies to also modify the <code>Settings</code> to read and stote the extra connection info.\nHowever, one of the main issue is, one needs to remember which connection (or wich <code>runDB</code>) to use depending on the data type to load.  Another solution is to use federated tables.\nMySql (or MariaDB) allows to create a proxy table connected to a remote database. Even though it needs a some setup, this as the advantage to be safe and easier to use on the client side.</p>\n"}], "owner": {"reputation": 20862, "user_id": 376113, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/d3a5bd12fe6d876527a3cf4ac0de5fc6?s=128&d=identicon&r=PG", "display_name": "mb14", "link": "https://stackoverflow.com/users/376113/mb14"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 95, "favorite_count": 0, "accepted_answer_id": 45393915, "answer_count": 2, "score": 1, "last_activity_date": 1501361280, "creation_date": 1500671181, "last_edit_date": 1500676545, "question_id": 45246711, "link": "https://stackoverflow.com/questions/45246711/how-to-access-two-different-database-servers-with-yesod-persistent", "title": "How to access two different database servers with Yesod/Persistent?", "body": "<p>I'm building a website using Yesod and Persistent (I'm using the basic yesod  mysql scaffolding).\nI need to access a different database that the main one, but <code>runDB</code> uses\nthe default connection parameter and connection. Is there a simple way to use Persistent with two different connection parameters ?</p>\n"}, {"tags": ["haskell", "generic-programming"], "comments": [{"owner": {"reputation": 14582, "user_id": 2225384, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f30b04ed4d0b3fc4bc791a28815f34ca?s=128&d=identicon&r=PG", "display_name": "Rein Henrichs", "link": "https://stackoverflow.com/users/2225384/rein-henrichs"}, "edited": false, "score": 3, "creation_date": 1500667878, "post_id": 45245481, "comment_id": 77457979, "body": "If you own <code>MyType</code> then you can write <code>MyType&#39; a = Foo a | ...</code>, replacing <code>Bool</code> with <code>a</code> everywhere and <code>type MyType = MyType&#39; Bool</code>. Then you can derive <code>Foldable</code> (with the <code>DeriveFoldable</code> extension) and <code>toList</code> will give you a list of all of the <code>Bool</code>s in your structure. No generics required."}, {"owner": {"reputation": 899, "user_id": 1686629, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/783eacdab4a800eab9d786d5f5911fac?s=128&d=identicon&r=PG", "display_name": "Echo Nolan", "link": "https://stackoverflow.com/users/1686629/echo-nolan"}, "reply_to_user": {"reputation": 14582, "user_id": 2225384, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f30b04ed4d0b3fc4bc791a28815f34ca?s=128&d=identicon&r=PG", "display_name": "Rein Henrichs", "link": "https://stackoverflow.com/users/2225384/rein-henrichs"}, "edited": false, "score": 0, "creation_date": 1500668067, "post_id": 45245481, "comment_id": 77458069, "body": "That&#39;s interesting, but doesn&#39;t really work for me. In reality, I want to extract different fields depending on use case."}], "answers": [{"tags": [], "owner": {"reputation": 974, "user_id": 3829232, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d3d2de116df80bc024b799e84dcdbc97?s=128&d=identicon&r=PG", "display_name": "soupi", "link": "https://stackoverflow.com/users/3829232/soupi"}, "is_accepted": true, "score": 6, "last_activity_date": 1500671199, "creation_date": 1500671199, "answer_id": 45246715, "question_id": 45245481, "link": "https://stackoverflow.com/questions/45245481/how-can-i-use-generics-to-extract-all-values-of-a-particular-type/45246715#45246715", "title": "How can I use generics to extract all values of a particular type?", "body": "<p>Using <a href=\"http://hackage.haskell.org/package/uniplate\" rel=\"noreferrer\">uniplate</a>:</p>\n\n<pre><code>{-# LANGUAGE DeriveDataTypeable #-}\n\nmodule M where\n\nimport Data.Data\nimport Data.Generics.Uniplate.Data\n\ndata MyType\n  = Foo Bool\n  | Bar\n  | Baz Bool (Maybe String) Bool\n  | Quux Int String\n  deriving Data\n\ngetBools :: MyType -&gt; [Bool]\ngetBools = universeBi\n</code></pre>\n"}], "owner": {"reputation": 899, "user_id": 1686629, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/783eacdab4a800eab9d786d5f5911fac?s=128&d=identicon&r=PG", "display_name": "Echo Nolan", "link": "https://stackoverflow.com/users/1686629/echo-nolan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 142, "favorite_count": 1, "accepted_answer_id": 45246715, "answer_count": 1, "score": 6, "last_activity_date": 1500671199, "creation_date": 1500665817, "question_id": 45245481, "link": "https://stackoverflow.com/questions/45245481/how-can-i-use-generics-to-extract-all-values-of-a-particular-type", "title": "How can I use generics to extract all values of a particular type?", "body": "<p>I have a data type like this:</p>\n\n<pre><code>data MyType = Foo Bool\n            | Bar\n            | Baz Bool (Maybe String) Bool\n            | Quux Int String\n</code></pre>\n\n<p>Can I use generics to write a function <code>getBools :: MyType -&gt; [Bool]</code> that returns a list of all the boolean fields in the input?</p>\n\n<p>I came up with this type signature:</p>\n\n<pre><code>getAllOfType ::\n  (Generic inner, Generic outer, HasDatatypeInfo inner, All2 HasDatatypeInfo (Code outer)) =&gt;\n  Proxy inner -&gt; outer -&gt; [inner]\n</code></pre>\n\n<p>Using <code>generics-sop</code>, but I don't think that's right. Comparing the <code>DatatypeInfo</code>s is not going to convince the type checker that the two types are equivalent.</p>\n"}, {"tags": ["haskell"], "answers": [{"comments": [{"owner": {"reputation": 7, "user_id": 8061440, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/fc74d7907da751af5a276a621ad42c52?s=128&d=identicon&r=PG&f=1", "display_name": "Erich Melvin", "link": "https://stackoverflow.com/users/8061440/erich-melvin"}, "edited": false, "score": 0, "creation_date": 1500666748, "post_id": 45245473, "comment_id": 77457438, "body": "Thanks for the Help and the explantion!  inter (x:xs) ys | elem x ys = x : inter xs ys"}], "tags": [], "owner": {"reputation": 51584, "user_id": 839246, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9b0573c2b936b12828dd1e4cc04206dc?s=128&d=identicon&r=PG&f=1", "display_name": "bheklilr", "link": "https://stackoverflow.com/users/839246/bheklilr"}, "is_accepted": true, "score": 1, "last_activity_date": 1500665780, "creation_date": 1500665780, "answer_id": 45245473, "question_id": 45245432, "link": "https://stackoverflow.com/questions/45245432/error-in-lists-in-haskell-intersection/45245473#45245473", "title": "Error in Lists in Haskell - Intersection", "body": "<p>You're iterating over both lists simultaneously and stopping at the first common element.  You need to be checking list membership and continuing after you find the first matching element.  I would recommend using the <code>elem</code> function:</p>\n\n<pre><code>inter (x:xs) ys | elem x ys = ...\n                | otherwise = inter xs ys\n</code></pre>\n\n<p>You'll need to fill in the <code>...</code> here, I intentionally left it blank for you to figure out what you need to do.</p>\n\n<p>In your function what's going to happen is it will see</p>\n\n<pre><code>inter (1:2:4:[]) (1:3:4:[])\n</code></pre>\n\n<p>And it will assign <code>x = 1, y = 1, xs = 2:4:[], ys = 3:4:[]</code>, then compute <code>x == y</code>, which evaluates as <code>True</code>, so that branch is chosen, returning <code>x : []</code>. or <code>[1]</code>.  At that point the function returns.  It'll never check <code>2 == 3</code> or <code>4 == 4</code>.</p>\n"}, {"comments": [{"owner": {"reputation": 7, "user_id": 8061440, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/fc74d7907da751af5a276a621ad42c52?s=128&d=identicon&r=PG&f=1", "display_name": "Erich Melvin", "link": "https://stackoverflow.com/users/8061440/erich-melvin"}, "edited": false, "score": 0, "creation_date": 1500667082, "post_id": 45245536, "comment_id": 77457598, "body": "Great! This is other method to do this function, thanks."}], "tags": [], "owner": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "is_accepted": false, "score": 0, "last_activity_date": 1500666337, "last_edit_date": 1500666337, "creation_date": 1500666026, "answer_id": 45245536, "question_id": 45245432, "link": "https://stackoverflow.com/questions/45245432/error-in-lists-in-haskell-intersection/45245536#45245536", "title": "Error in Lists in Haskell - Intersection", "body": "<p><strong>Assumption</strong>: a set is a <em>sorted</em> list here.</p>\n\n<p>Your code works as follows:</p>\n\n<pre><code>inter :: [Int] -&gt; [Int] -&gt; [Int]\ninter [] _ = []\ninter _ [] = []\ninter (x:xs) (y:ys) | (x == y) = x:[]         -- if x == y, we stop?\n                    | otherwise = inter xs ys -- can we drop both elements?\n</code></pre>\n\n<p>The first two lines state that \"<em>from the moment one of the lists is <code>[]</code>, we return <code>[]</code></em>\". So far so good.</p>\n\n<p>Then next line works with two guards. Given we find that the two <em>heads</em> are equal (<code>x == y</code>), we simply return *a list with one item <code>[x]</code>. That is not correct: it is possible that in the two tails <code>xs</code> and <code>ys</code>, there are still items that are in both sets. The second guard is incorrect as well: if <code>x</code> is not equal to <code>y</code>, that does not mean we can throw away both elements: it is possible that <code>x</code> is still in the tail <code>ys</code>, or that <code>y</code> is still in <code>xs</code> somewhere.</p>\n\n<p>We can however obtain a rather efficient solution by the fact that both lists are sorted. In that case, we can simply drop the smallest of the two. Since if <code>ys</code> is sorted and <code>x &lt; y</code>, we know that all elements in <code>ys</code> will also be greater than <code>x</code>.</p>\n\n<p>So a solution I propose is:</p>\n\n<pre><code>inter :: [Int] -&gt; [Int] -&gt; [Int]\ninter [] _ = []  -- left list is empty, stop\ninter _ [] = []  -- right list is empty, stop\ninter <b>xa@</b>(x:xs) <b>ya@</b>(y:ys) | x == y = x : <b>inter xs ys</b> -- both head same, continue\n                          | x &lt; y = inter xs <b>ya</b>      -- left less, step left\n                          | otherwise = inter <b>xa</b> ys  -- right less, step right</code></pre>\n\n<p>The <code>@</code> is an alias here. <code>xa@(x:xs)</code> means that we have a reference to the entire list <code>xa</code> and to the head <code>x</code> and the tail <code>xs</code>.</p>\n\n<p>Usually one aims to be as generic as possible in Haskell: right now we have to implement an <code>inter</code> for lists with <code>Int</code>s, <code>String</code>s, etc. That is not very elegantly. We can generalize it to the following:</p>\n\n<pre><code>inter :: Ord a =&gt; [a] -&gt; [a] -&gt; [a]\ninter [] _ = []\ninter _ [] = []\ninter xa@(x:xs) ya@(y:ys) | x == y = x : inter xs ys\n                          | x &lt; y = inter xs ya\n                          | otherwise = inter xa ys\n</code></pre>\n"}], "owner": {"reputation": 7, "user_id": 8061440, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/fc74d7907da751af5a276a621ad42c52?s=128&d=identicon&r=PG&f=1", "display_name": "Erich Melvin", "link": "https://stackoverflow.com/users/8061440/erich-melvin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 107, "favorite_count": 0, "accepted_answer_id": 45245473, "answer_count": 2, "score": 0, "last_activity_date": 1500670913, "creation_date": 1500665589, "last_edit_date": 1500670913, "question_id": 45245432, "link": "https://stackoverflow.com/questions/45245432/error-in-lists-in-haskell-intersection", "title": "Error in Lists in Haskell - Intersection", "body": "<p>This is a tiny problem, I really don't know where I've be wrong. I need to create a function for show the intersection of two lists (without library and list comprehension). Ok, I made this, it's simple, but I have make a mistake, cause the function return me only the first element equal of the two lists. This is a stupid error, I know. someone can Help me?</p>\n\n<p>this is the function:</p>\n\n<pre><code>inter :: [Int] -&gt; [Int] -&gt; [Int]\ninter [] _ = []\ninter _ [] = []\ninter (x:xs) (y:ys) | (x == y) = x:[]\n                    | otherwise = inter xs ys\n</code></pre>\n\n<p>example of error: (Two lists) [1,2,4] [1,3,4]</p>\n\n<p>return only [1] when the correct is: [1,4]</p>\n"}, {"tags": ["parsing", "haskell", "parsec", "file-writing"], "comments": [{"owner": {"reputation": 49501, "user_id": 784338, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ae195ac7c8a5e9002a808544572cc5fc?s=128&d=identicon&r=PG", "display_name": "Daniel Gratzer", "link": "https://stackoverflow.com/users/784338/daniel-gratzer"}, "edited": false, "score": 1, "creation_date": 1500646885, "post_id": 45239430, "comment_id": 77446212, "body": "I think the simplest thing to do would be to define a data type representing the syntax of your file and then write a separate parser and pretty printer as you thought. This is what most language libraries do for example."}, {"owner": {"reputation": 24509, "user_id": 6863749, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/UyoQv.jpg?s=128&g=1", "display_name": "Li-yao Xia", "link": "https://stackoverflow.com/users/6863749/li-yao-xia"}, "edited": false, "score": 2, "creation_date": 1500648797, "post_id": 45239430, "comment_id": 77447433, "body": "Here are some recent relevant threads on reddit: <a href=\"https://www.reddit.com/r/haskell/comments/6aqvgj/parser_libraries_with_ast_output/\" rel=\"nofollow noreferrer\">1</a>, <a href=\"https://www.reddit.com/r/haskell/comments/66o3lp/i_think_this_is_a_really_stupid_question_inverse/\" rel=\"nofollow noreferrer\">2</a> IMO this technology still seems quite experimental."}, {"owner": {"reputation": 15757, "user_id": 176841, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/45a168cb9eb8454d66c78f18e29d9342?s=128&d=identicon&r=PG", "display_name": "jberryman", "link": "https://stackoverflow.com/users/176841/jberryman"}, "edited": false, "score": 0, "creation_date": 1500662776, "post_id": 45239430, "comment_id": 77455464, "body": "What you want to do is define a grammar, and use some library to generate a parser and pretty-printer automatically. There are a number of libraries that claim to be able to do that but recommending one is probably OT (I would if I had experience with any of them)"}, {"owner": {"reputation": 23444, "user_id": 414413, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/6de2113f01432aa844dc85070ff33e89?s=128&d=identicon&r=PG", "display_name": "Cirdec", "link": "https://stackoverflow.com/users/414413/cirdec"}, "edited": false, "score": 8, "creation_date": 1500667372, "post_id": 45239430, "comment_id": 77457747, "body": "I strongly disagree with the close votes. This question isn&#39;t asking to locate an off-site resource; it&#39;s asking how to solve a problem that&#39;s on-topic for stack overflow. It&#39;s Ok for answers to questions to be &quot;you can solve this problem with this library&quot;; those answers are factual and not opinion-based; it doesn&#39;t lead to the non-constructive interactions the rule is designed to avoid."}], "answers": [{"comments": [{"owner": {"reputation": 677, "user_id": 3536806, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1c5321e2babfa1c70186599163a3c188?s=128&d=identicon&r=PG&f=1", "display_name": "Dominik Schrempf", "link": "https://stackoverflow.com/users/3536806/dominik-schrempf"}, "edited": false, "score": 0, "creation_date": 1502095513, "post_id": 45252250, "comment_id": 78045226, "body": "Thank you very much for the comments and your answer. It is indeed the concept of a /grammar/ that I was looking for. Apart from the BNFC-meta package, the <a href=\"https://www.reddit.com/r/haskell/comments/66o3lp/i_think_this_is_a_really_stupid_question_inverse/\" rel=\"nofollow noreferrer\">second link</a> of Li-yao Xia also mentions the interesting <a href=\"https://hackage.haskell.org/package/syntax\" rel=\"nofollow noreferrer\">syntax</a> library."}], "tags": [], "owner": {"reputation": 1641, "user_id": 1329075, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/34e5fc21fefdb23ecfbf381cf5cce26d?s=128&d=identicon&r=PG", "display_name": "neu-rah", "link": "https://stackoverflow.com/users/1329075/neu-rah"}, "is_accepted": true, "score": 5, "last_activity_date": 1546072781, "last_edit_date": 1546072781, "creation_date": 1500711000, "answer_id": 45252250, "question_id": 45239430, "link": "https://stackoverflow.com/questions/45239430/parsing-and-pretty-printing-the-same-file-format-in-haskell/45252250#45252250", "title": "Parsing and pretty printing the same file format in Haskell", "body": "<p>The BNFC-meta package <a href=\"https://hackage.haskell.org/package/BNFC-meta-0.4.0.3\" rel=\"nofollow noreferrer\">https://hackage.haskell.org/package/BNFC-meta-0.4.0.3</a></p>\n\n<p>might be what you looking for</p>\n\n<p>\"Specifically, given a quasi-quoted LBNF grammar (as used by the BNF Converter) it generates (using Template Haskell) a LALR parser and pretty pretty printer for the language.\"</p>\n\n<p><strong>update:</strong> found this package that also seems to fulfill the objective (not tested yet) <a href=\"http://hackage.haskell.org/package/syntax\" rel=\"nofollow noreferrer\">http://hackage.haskell.org/package/syntax</a></p>\n"}], "owner": {"reputation": 677, "user_id": 3536806, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1c5321e2babfa1c70186599163a3c188?s=128&d=identicon&r=PG&f=1", "display_name": "Dominik Schrempf", "link": "https://stackoverflow.com/users/3536806/dominik-schrempf"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 426, "favorite_count": 0, "accepted_answer_id": 45252250, "answer_count": 1, "score": 10, "last_activity_date": 1546072781, "creation_date": 1500644984, "last_edit_date": 1500662482, "question_id": 45239430, "link": "https://stackoverflow.com/questions/45239430/parsing-and-pretty-printing-the-same-file-format-in-haskell", "title": "Parsing and pretty printing the same file format in Haskell", "body": "<p>I was wondering, if there is a standard, canonical way in Haskell to write not only a parser for a specific file format, but also a writer.</p>\n\n<p>In my case, I need to parse a data file for analysis. However, I also simulate data to be analyzed and save it in the same file format. I could now write a parser using Parsec or something equivalent and also write functions that perform the text output in the way that it is needed, but whenever I change my file format, I would have to change two functions in my code. Is there a better way to achieve this goal?</p>\n\n<p>Thank you,\nDominik</p>\n"}, {"tags": ["haskell", "monads", "monad-transformers", "lifting"], "answers": [{"tags": [], "owner": {"reputation": 49501, "user_id": 784338, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ae195ac7c8a5e9002a808544572cc5fc?s=128&d=identicon&r=PG", "display_name": "Daniel Gratzer", "link": "https://stackoverflow.com/users/784338/daniel-gratzer"}, "is_accepted": true, "score": 11, "last_activity_date": 1500636310, "creation_date": 1500636310, "answer_id": 45236438, "question_id": 45236226, "link": "https://stackoverflow.com/questions/45236226/when-exactly-is-lifting-needed-in-monad-transformers/45236438#45236438", "title": "When exactly is lifting needed in monad transformers?", "body": "<p>The confusion here is arising because the monad transformer library you're using is being a bit clever. Specifically, the type of <code>get</code> and <code>put</code> doesn't explicitly mention <code>State</code> or <code>StateT</code>. Rather, they are along the lines</p>\n\n<pre><code>get :: MonadState s m =&gt; m s\nput :: MonadState s m =&gt; s -&gt; m ()\n</code></pre>\n\n<p>Therefore as long as we use this in a context with a <code>MonadState</code> implementing monad there is no need for explicit <code>lift</code>s. This is the case in all the instances where you use <code>get</code>/<code>put</code> since</p>\n\n<pre><code>instance MonadState s (StateT s m)\ninstance MonadState s m =&gt; ContT k m\n</code></pre>\n\n<p>both hold. In other words, the type class resolution will automatically handle doing the appropriate lifting for you. This in turn implies that you could elide the <code>lift</code>s on the <code>get</code>/<code>put</code> at the end of your program.</p>\n\n<p>This cannot happen with your recursive calls because its type is explicitly <code>State Int Int</code>. If you generalized it to <code>MonadState Int m =&gt; m Int</code> you could even elide this final lift.</p>\n"}, {"tags": [], "owner": {"reputation": 24028, "user_id": 383200, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/a9dc722f936cb1059adaae4fe39c07f0?s=128&d=identicon&r=PG", "display_name": "Carl", "link": "https://stackoverflow.com/users/383200/carl"}, "is_accepted": false, "score": 7, "last_activity_date": 1500652784, "creation_date": 1500652784, "answer_id": 45242054, "question_id": 45236226, "link": "https://stackoverflow.com/questions/45236226/when-exactly-is-lifting-needed-in-monad-transformers/45242054#45242054", "title": "When exactly is lifting needed in monad transformers?", "body": "<p>I would like to provide an alternate answer that is both superficial and at the same time everything important.</p>\n\n<p>You need to use <code>lift</code> when <code>lift</code> makes things type check that otherwise don't.</p>\n\n<p>Yes, it sounds superficial and appears to lack any deep meaning. But that's not quite true. <code>MonadTrans</code> is a class for things that can lift monadic actions into a larger context in a neutral way. The class laws provide more explicit rules about what \"neutral\" means, if you want a technical description. But the upshot is that <code>lift</code> does nothing beyond what is necessary to make the provided action compatible with another type.</p>\n\n<p>So - what does <code>lift</code> do? It provides the logic necessary for lifting a monadic action into a bigger type. When do you need to use it? When you have a monadic action that you need to lift into a bigger type. When do you have a monadic action that you need to lift into a bigger type? When that's what the types tell you.</p>\n\n<p>This is a key part of using Haskell. You can modularize your understanding of code. The type system keeps track of a huge amount of bookkeeping for you. Rely on it to get the bookkeeping right, so you only need to keep the logic in your head. The compiler and type system are there to work as mental amplifiers. The more they take care of, the less you need to keep in your head while writing software.</p>\n"}], "owner": {"reputation": 1972, "user_id": 1747134, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/696bad3bd2c5e16ded04f3cdf436623f?s=128&d=identicon&r=PG", "display_name": "user1747134", "link": "https://stackoverflow.com/users/1747134/user1747134"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 406, "favorite_count": 0, "accepted_answer_id": 45236438, "answer_count": 2, "score": 7, "last_activity_date": 1500713925, "creation_date": 1500635618, "last_edit_date": 1500713925, "question_id": 45236226, "link": "https://stackoverflow.com/questions/45236226/when-exactly-is-lifting-needed-in-monad-transformers", "title": "When exactly is lifting needed in monad transformers?", "body": "<p>I am learning monad transformers and I am confused about when using lift is necessary.\nAssume that I have the following code (It's not doing anything interesting, just the simplest I could come with for demonstration).</p>\n\n<pre><code>foo :: Int -&gt; State Int Int\nfoo x = do\n  (`runContT` pure) $ do\n    callCC $ \\exit -&gt; do\n      when (odd x) $ do\n        -- lift unnecessary\n        a &lt;- get\n        put $ 2*a\n      when (x &gt;= 5) $ do\n        -- lift unnecessary, but there is exit \n        a &lt;- get\n        exit a\n      when (x &lt; 0) $ do\n        -- lift necessary\n        a &lt;- lift $ foo (x + 10)\n        lift $ put a\n\n      lift get\n</code></pre>\n\n<p>So there is a monad stack, where the main do block has type <code>ContT Int (StateT Int Identity) Int</code>. </p>\n\n<p>Now, in the third <code>when</code> do block with recursion a lift is required for the program to compile. In the second block, there is no lift needed, but I somehow assume it's because of the presence of <code>exit</code> which somehow forces the line above line to be lifted to <code>ContT</code>. But in the first block, no lift is required. (But if it's explicitly added, there is no problem either.) This is really confusing to me. I feel all the <code>when</code> do blocks are equivalent and either the lift should be required everywhere or nowhere. But that's apparently not true. Where is the key difference that makes the lift required/not required?</p>\n"}, {"tags": ["haskell", "functor", "abstract-data-type"], "comments": [{"owner": {"reputation": 49501, "user_id": 784338, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ae195ac7c8a5e9002a808544572cc5fc?s=128&d=identicon&r=PG", "display_name": "Daniel Gratzer", "link": "https://stackoverflow.com/users/784338/daniel-gratzer"}, "edited": false, "score": 0, "creation_date": 1500634613, "post_id": 45235808, "comment_id": 77437345, "body": "As a sanity check, does this instance <code>fmap</code> actually do anything? <code>Functor</code> instances contain things that one can &quot;map&quot; over but there&#39;s no data such mappable data in your AST."}, {"owner": {"reputation": 42094, "user_id": 828361, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/6a82397672dcc1fca31c32508ef0798b?s=128&d=identicon&r=PG", "display_name": "pigworker", "link": "https://stackoverflow.com/users/828361/pigworker"}, "edited": false, "score": 2, "creation_date": 1500640257, "post_id": 45235808, "comment_id": 77441218, "body": "The categorically minded should note that the <code>AST</code> and <code>fmap</code> definitions here constitute a perfectly sensible categorical functor, even if they do not make a valid Haskell <code>Functor</code>."}], "answers": [{"tags": [], "owner": {"reputation": 10492, "user_id": 603688, "user_type": "registered", "accept_rate": 63, "profile_image": "https://www.gravatar.com/avatar/1058344e1b119c4d9dd3aedc5456277b?s=128&d=identicon&r=PG", "display_name": "Dan", "link": "https://stackoverflow.com/users/603688/dan"}, "is_accepted": false, "score": 2, "last_activity_date": 1500634458, "creation_date": 1500634458, "answer_id": 45235856, "question_id": 45235808, "link": "https://stackoverflow.com/questions/45235808/custom-functor-instance-expected-kind-but-ast-has-kind/45235856#45235856", "title": "Custom Functor instance: Expected kind \u2018* -&gt; *\u2019, but \u2018AST\u2019 has kind \u2018*\u2019", "body": "<p>Functors are required to be polymorphic, ie <code>data AST a = ...</code>. This is what \"kind\" means in this case. It wants <code>AST</code> not to be a type, but a type function, taking a type and returning a type.</p>\n"}, {"comments": [{"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 0, "creation_date": 1500644642, "post_id": 45235908, "comment_id": 77444519, "body": "Minor point: I wonder if &quot;higher order type&quot; is the right term here. I&#39;d never met that before, I think, and I would associate it to something like <code>(*-&gt;*)-&gt;*</code>, similarly to higher-order functions. A <code>*-&gt;*</code> type for be is a parametric type, parametrized type, or (in the right context) type family, type function."}, {"owner": {"reputation": 616, "user_id": 3892684, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/fs52b.png?s=128&g=1", "display_name": "Jan van Br&#252;gge", "link": "https://stackoverflow.com/users/3892684/jan-van-br%c3%bcgge"}, "edited": false, "score": 0, "creation_date": 1500654588, "post_id": 45235908, "comment_id": 77451151, "body": "Thank you, I did not know Functor has to be polymorphic. For my code I am only interested in the String version, so I left it out"}], "tags": [], "owner": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "is_accepted": true, "score": 7, "last_activity_date": 1500647282, "last_edit_date": 1500647282, "creation_date": 1500634610, "answer_id": 45235908, "question_id": 45235808, "link": "https://stackoverflow.com/questions/45235808/custom-functor-instance-expected-kind-but-ast-has-kind/45235908#45235908", "title": "Custom Functor instance: Expected kind \u2018* -&gt; *\u2019, but \u2018AST\u2019 has kind \u2018*\u2019", "body": "<p>A functor works on <em>type constructors</em>: if you give it an <code>AST</code>, it expects to see a:</p>\n\n<pre><code>data AST <b>a</b> = ...\n--       ^ type parameter</code></pre>\n\n<p>We can also see this in the <em>definition</em> of the <code>Functor</code> class:</p>\n\n<pre><code>class Functor (f :: <b>* -&gt; *</b>) where\n  fmap :: (a -> b) -> f <b>a</b> -> f <b>b</b></code></pre>\n\n<p>Notice that the <code>f</code> in the head of the class has \"<em>kind</em>\" <code>* -&gt; *</code> this means that acts as some sort of function that takes another type (the first <code>*</code>) and produces a type (the second <code>*</code>). As you can see <code>fmap</code> will take a function of type <code>a -&gt; b</code> (where we have not much control over what <code>b</code> is). In your definition of <code>fmap</code>, we could only provide a <code>String -&gt; String</code> function.</p>\n\n<p>Right now it does not make much sense to make <code>AST</code> a functor, since it is not a functor.</p>\n\n<p>You can however easily <em>generalize</em> your <code>AST</code> into:</p>\n\n<pre><code>data AST <b>a</b> = Node <b>a</b> [AST <b>a</b>]\n     | Leaf <b>a</b>\n     | Empty\n    deriving (Show)</code></pre>\n\n<p>If you work with that type, an <code>AST String</code> is equivalent to your old definition for an <code>AST</code>.</p>\n\n<p>The same holds for a list <code>[]</code> (which is a <code>Functor</code> as well). A <em>pseudo</em>-definition of a list is:</p>\n\n<pre><code>data [] a = [] | a : [a]\n</code></pre>\n\n<p>We define <code>Functor</code> over a list as:</p>\n\n<pre><code>instance Functor [] where\n    fmap _ [] = []\n    fmap f (x:xs) = (f x) : (fmap f xs)</code></pre>\n\n<p>Mind that we did <em>not</em> state <code>Functor [a]</code>, but <code>Functor []</code>.</p>\n"}], "owner": {"reputation": 616, "user_id": 3892684, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/fs52b.png?s=128&g=1", "display_name": "Jan van Br&#252;gge", "link": "https://stackoverflow.com/users/3892684/jan-van-br%c3%bcgge"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2756, "favorite_count": 0, "accepted_answer_id": 45235908, "answer_count": 2, "score": 3, "last_activity_date": 1500647282, "creation_date": 1500634323, "last_edit_date": 1500634877, "question_id": 45235808, "link": "https://stackoverflow.com/questions/45235808/custom-functor-instance-expected-kind-but-ast-has-kind", "title": "Custom Functor instance: Expected kind \u2018* -&gt; *\u2019, but \u2018AST\u2019 has kind \u2018*\u2019", "body": "<p>I have this rather simple ADT:</p>\n\n<pre><code>data AST = Node String [AST]\n     | Leaf String\n     | Empty\n    deriving (Show)\n</code></pre>\n\n<p>and this Functor instance:</p>\n\n<pre><code>instance Functor AST where\n    fmap f (Node s l) = Node (f s) (fmap f l)\n    fmap f (Leaf s)   = Leaf (f s)\n    fmap f Empty      = Empty\n</code></pre>\n\n<p>But when I try to compile it I get this error that I absolutely not understand:</p>\n\n<pre><code>Expected kind \u2018* -&gt; *\u2019, but \u2018AST\u2019 has kind \u2018*\u2019\n   \u2022 In the first argument of \u2018Functor\u2019, namely \u2018AST\u2019\n     In the instance declaration for \u2018Functor AST\u2019\n</code></pre>\n\n<p>Does anyone know why this happens? I can't find a solution in the Internet.</p>\n"}, {"tags": ["haskell", "dependent-type", "type-level-computation", "singleton-type"], "answers": [{"comments": [{"owner": {"reputation": 13734, "user_id": 938694, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/b6678a430a805dd78366d6e135b49f2d?s=128&d=identicon&r=PG", "display_name": "Cubic", "link": "https://stackoverflow.com/users/938694/cubic"}, "edited": false, "score": 0, "creation_date": 1500650177, "post_id": 45236774, "comment_id": 77448340, "body": "Doesn&#39;t <code>TypeApplications</code> mostly or even completely alleviate this need? I hacked a quick example <a href=\"http://ideone.com/vD4Gxp\" rel=\"nofollow noreferrer\">here</a>, though admittedly maybe I&#39;m missing some limitation here. (Now that I&#39;m thinking about it though, I can&#39;t really think of a way to do it without a type class like you did here)"}, {"owner": {"reputation": 1496, "user_id": 7350814, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/bd7e1bdad619c54ab51e05ff9cfaa199?s=128&d=identicon&r=PG&f=1", "display_name": "Jogger", "link": "https://stackoverflow.com/users/7350814/jogger"}, "edited": false, "score": 1, "creation_date": 1500659389, "post_id": 45236774, "comment_id": 77453643, "body": "@pigworker: Many thanks! You write: &quot;although &#39;Zero and &#39;Suc exist at the type level, it is unhelpful to refer to them as &#39;types&#39; and the people who currently do that should desist&quot; How would you call &#39;Zero and &#39;Suc? I think good names are always helpful."}, {"owner": {"reputation": 42094, "user_id": 828361, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/6a82397672dcc1fca31c32508ef0798b?s=128&d=identicon&r=PG", "display_name": "pigworker", "link": "https://stackoverflow.com/users/828361/pigworker"}, "reply_to_user": {"reputation": 13734, "user_id": 938694, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/b6678a430a805dd78366d6e135b49f2d?s=128&d=identicon&r=PG", "display_name": "Cubic", "link": "https://stackoverflow.com/users/938694/cubic"}, "edited": false, "score": 1, "creation_date": 1500662582, "post_id": 45236774, "comment_id": 77455375, "body": "@Cubic What type class? And no, TypeApplications relates to <i>another</i> unrelated distinction: explicit versus implicit. That&#39;s an entirely separate distinction from type-level versus run-time. Google &quot;Milner&#39;s Coincidence&quot;."}, {"owner": {"reputation": 42094, "user_id": 828361, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/6a82397672dcc1fca31c32508ef0798b?s=128&d=identicon&r=PG", "display_name": "pigworker", "link": "https://stackoverflow.com/users/828361/pigworker"}, "reply_to_user": {"reputation": 1496, "user_id": 7350814, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/bd7e1bdad619c54ab51e05ff9cfaa199?s=128&d=identicon&r=PG&f=1", "display_name": "Jogger", "link": "https://stackoverflow.com/users/7350814/jogger"}, "edited": false, "score": 1, "creation_date": 1500662820, "post_id": 45236774, "comment_id": 77455491, "body": "@Jogger I&#39;d call &#39;Zero and &#39;Suc type-level value constructors. &quot;Type-level expressions&quot; may be a mouthful, but that&#39;s the price to pay for the bad decision to distinguish them from &quot;expressions&quot;. &quot;Typex&quot; could become an acceptable substitute."}, {"owner": {"reputation": 7947, "user_id": 997606, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/b6117f6630078d6612afa75fb8e5bc9a?s=128&d=identicon&r=PG", "display_name": "Tom Ellis", "link": "https://stackoverflow.com/users/997606/tom-ellis"}, "edited": false, "score": 1, "creation_date": 1500892551, "post_id": 45236774, "comment_id": 77518913, "body": "&quot;They do not have type <code>*</code> and can thus not classify values which is what types worthy of the name do.&quot; Is there a self-inconsistency here, or does <code>*</code> classify values in some sense I am not aware of?"}, {"owner": {"reputation": 42094, "user_id": 828361, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/6a82397672dcc1fca31c32508ef0798b?s=128&d=identicon&r=PG", "display_name": "pigworker", "link": "https://stackoverflow.com/users/828361/pigworker"}, "edited": false, "score": 3, "creation_date": 1500893147, "post_id": 45236774, "comment_id": 77519263, "body": "Things with type <code>*</code> classify values, and are thus the things worth calling &quot;types&quot;. It is sensible to ask, since I have referred to <code>*</code> as a &quot;type&quot; what values it classifies. The answer is &quot;types&quot;, which are one variety of type-level value. The fact that types are not currently available as run-time values (a) makes no difference to the validity of considering <code>*</code> to be a type, and (b) is a design error which should be rectified, allowing the deletion of <code>Data.Typeable</code>."}], "tags": [], "owner": {"reputation": 42094, "user_id": 828361, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/6a82397672dcc1fca31c32508ef0798b?s=128&d=identicon&r=PG", "display_name": "pigworker", "link": "https://stackoverflow.com/users/828361/pigworker"}, "is_accepted": true, "score": 36, "last_activity_date": 1500637280, "creation_date": 1500637280, "answer_id": 45236774, "question_id": 45235710, "link": "https://stackoverflow.com/questions/45235710/haskell-singletons-what-do-we-gain-with-snat/45236774#45236774", "title": "Haskell singletons: What do we gain with SNat", "body": "<p>What do we gain? Hmm. The status of singletons is that of <em>awkward but currently necessary workaround</em>, and the sooner we can do away with them, the better.</p>\n\n<p>Let me see if I can clarify the picture. We have a data type <code>Nat</code>:</p>\n\n<pre><code>data Nat = Zero | Suc Nat\n</code></pre>\n\n<p>(wars have been started over even more trivial issues than the number of 'c's in <code>Suc</code>)</p>\n\n<p>The type <code>Nat</code> has run-time values which are indistinguishable at the type level. The Haskell type system currently has the <em>replacement</em> property, which means that in any well typed program, you may replace any well typed subexpression by an alternative subexpression with the same scope and type, and the program will continue to be well typed. For example, you can rewrite every occurrence of</p>\n\n<pre><code>if &lt;b&gt; then &lt;t&gt; else &lt;e&gt;\n</code></pre>\n\n<p>to</p>\n\n<pre><code>if &lt;b&gt; then &lt;e&gt; else &lt;t&gt;\n</code></pre>\n\n<p>and you can be sure that nothing will go wrong...with the outcome of checking your program's type.</p>\n\n<p>The replacement property is an embarrassment. It's clear proof that your type system gives up at the very moment that meaning starts to matter.</p>\n\n<p>Now, by being a data type for run-time values, <code>Nat</code> also becomes a type of type-level values <code>'Zero</code> and <code>'Suc</code>. The latter live only in Haskell's type language and have no run-time presence at all. Please note that although <code>'Zero</code> and <code>'Suc</code> exist at the type level, it is unhelpful to refer to them as \"types\" and the people who currently do that should desist. They do not have type <code>*</code> and can thus not <em>classify values</em> which is what types worthy of the name do.</p>\n\n<p>There is no direct means of exchange between run-time and type-level <code>Nat</code>s, which can be a nuisance. The paradigmatic example concerns a key operation on <em>vectors</em>:</p>\n\n<pre><code>data Vec :: Nat -&gt; * -&gt; * where\n  VNil   :: Vec 'Zero x\n  VCons  :: x -&gt; Vec n x -&gt; Vec ('Suc n) x\n</code></pre>\n\n<p>We might like to compute a vector of copies of a given element (perhaps as part of an <code>Applicative</code> instance). It might look like a good idea to give the type</p>\n\n<pre><code>vec :: forall (n :: Nat) (x :: *). x -&gt; Vec n x\n</code></pre>\n\n<p>but can that possibly work? In order to make <code>n</code> copies of something, we need to know <code>n</code> at run time: a program has to decide whether to deploy <code>VNil</code> and stop or to deploy <code>VCons</code> and keep going, and it needs some data to do that. A good clue is the <code>forall</code> quantifier, which is <em>parametric</em>: it indicates thats the quantified information is available only to types and is erased by run time.</p>\n\n<p>Haskell currently enforces an entirely spurious coincidence between dependent quantification (what <code>forall</code> does) and erasure for run time. It does <em>not</em> support a dependent but not erased quantifier, which we often call <code>pi</code>. The type and implementation of <code>vec</code> should be something like</p>\n\n<pre><code>vec :: pi (n :: Nat) -&gt; forall (x :: *). Vec n x\nvec 'Zero    x = VNil\nvec ('Suc n) x = VCons x (vec n x)\n</code></pre>\n\n<p>where arguments in <code>pi</code>-positions are written in the type language, but the data are available at run time.</p>\n\n<p>So what do we do instead? We use singletons to capture indirectly what it means to be a <em>run-time copy of type-level data</em>.</p>\n\n<pre><code>data SNat :: Nat -&gt; * where\n  SZero :: SNat Zero\n  SSuc  :: SNat n -&gt; SNat (Suc n)\n</code></pre>\n\n<p>Now, <code>SZero</code> and <code>SSuc</code> make run-time data. <code>SNat</code> is not isomorphic to <code>Nat</code>: the former has type <code>Nat -&gt; *</code>, while the latter has type <code>*</code>, so it is a type error to try to make them isomorphic. There are many run-time values in <code>Nat</code>, and the type system does not distinguish them; there is exactly one run-time value (worth speaking of) in each different <code>SNat n</code>, so the fact that the type system cannot distinguish them is beside the point. The point is that each <code>SNat n</code> is a different type for each different <code>n</code>, and that GADT pattern matching (where a pattern can be of a more specific instance of the GADT type it is known to be matching) can refine our knowledge of <code>n</code>.</p>\n\n<p>We may now write</p>\n\n<pre><code>vec :: forall (n :: Nat). SNat n -&gt; forall (x :: *). x -&gt; Vec n x\nvec SZero    x = VNil\nvec (SSuc n) x = VCons x (vec n x)\n</code></pre>\n\n<p>Singletons allow us to bridge the gap between run time and type-level data, by exploiting the only form of run-time analysis that allows the refinement of type information. It's quite sensible to wonder if they're really necessary, and they presently are, only because that gap has not yet been eliminated.</p>\n"}], "owner": {"reputation": 1496, "user_id": 7350814, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/bd7e1bdad619c54ab51e05ff9cfaa199?s=128&d=identicon&r=PG&f=1", "display_name": "Jogger", "link": "https://stackoverflow.com/users/7350814/jogger"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1796, "favorite_count": 6, "accepted_answer_id": 45236774, "answer_count": 1, "score": 22, "last_activity_date": 1500657948, "creation_date": 1500634058, "last_edit_date": 1500657948, "question_id": 45235710, "link": "https://stackoverflow.com/questions/45235710/haskell-singletons-what-do-we-gain-with-snat", "title": "Haskell singletons: What do we gain with SNat", "body": "<p>I'm trying to grook Haskell singletons. </p>\n\n<p>In the paper <a href=\"http://cs.brynmawr.edu/~rae/papers/2012/singletons/paper.pdf\" rel=\"noreferrer\">Dependently Typed Programming with Singletons</a> \nand in his blog post <a href=\"https://typesandkinds.wordpress.com/tag/singletons/\" rel=\"noreferrer\">singletons v0.9 Released!</a>\nRichard Eisenberg defines the data type <em>Nat</em> which defines natural numbers with the peano axioms:</p>\n\n<pre><code>data Nat = Zero | Succ Nat\n</code></pre>\n\n<p>By using the language extension <em>DataKinds</em> this data type is promoted to the type level.\nThe data constuctors <em>Zero</em> and <em>Succ</em> are promoted to the type constructors <em>'Zero</em> and <em>'Succ</em>.\nWith this we get for every Natural number a single and unique corresponding type on the type level. Eg for <em>3</em> we get <em>'Succ ( 'Succ ( 'Succ 'Zero))</em>.\nSo we have now Natural numbers as types. </p>\n\n<p>He then defines on the value level the function <em>plus</em> and on the type level the type family <em>Plus</em>\nto have the addition operation available. \nWith the <em>promote</em> function/quasiqoter of the singletons library we can automatically\ncreate the <em>Plus</em> type family from the <em>plus</em> function. So we can avoid writing the type family ourselfs.</p>\n\n<p>So far so good!</p>\n\n<p>With GADT syntax he also defines a data type <em>SNat</em>:</p>\n\n<pre><code>data SNat :: Nat -&gt; * where\n  SZero :: SNat Zero\n  SSucc :: SNat n -&gt; SNat (Succ n)\n</code></pre>\n\n<p>Basically he only wraps the <em>Nat</em> type into a <em>SNat</em> constructor.\nWhy is this necessary? What do we gain?\nAre the data types <em>Nat</em> and <em>SNat</em> not isomorphic? Why is <em>SNat</em> a singleton, and why is <em>Nat</em> not\na singleton? In both cases every type is inhabited by one single value, the corresponding natural number.</p>\n"}, {"tags": ["haskell", "happy", "alex"], "comments": [{"owner": {"reputation": 94713, "user_id": 1139697, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/5f136ddb684f39aaee1c028ee1950f6f?s=128&d=identicon&r=PG", "display_name": "Zeta", "link": "https://stackoverflow.com/users/1139697/zeta"}, "edited": false, "score": 0, "creation_date": 1500719210, "post_id": 45235581, "comment_id": 77470969, "body": "&quot;Alex and Axel&quot;? Did you mean &quot;Alex and Happy&quot;?"}, {"owner": {"reputation": 4593, "user_id": 2289983, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/LG4hj.jpg?s=128&g=1", "display_name": "Damian Nadales", "link": "https://stackoverflow.com/users/2289983/damian-nadales"}, "reply_to_user": {"reputation": 94713, "user_id": 1139697, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/5f136ddb684f39aaee1c028ee1950f6f?s=128&d=identicon&r=PG", "display_name": "Zeta", "link": "https://stackoverflow.com/users/1139697/zeta"}, "edited": false, "score": 0, "creation_date": 1500737747, "post_id": 45235581, "comment_id": 77476161, "body": "Indeed. Thanks."}, {"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 0, "creation_date": 1505497798, "post_id": 45235581, "comment_id": 79454273, "body": "Why not use <code>ExpParser</code> as the monad for Alex too?"}], "owner": {"reputation": 4593, "user_id": 2289983, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/LG4hj.jpg?s=128&g=1", "display_name": "Damian Nadales", "link": "https://stackoverflow.com/users/2289983/damian-nadales"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 196, "favorite_count": 0, "answer_count": 0, "score": 0, "last_activity_date": 1500737737, "creation_date": 1500633693, "last_edit_date": 1500737737, "question_id": 45235581, "link": "https://stackoverflow.com/questions/45235581/combining-alex-and-happy-under-the-standard-monad-wrapper", "title": "Combining Alex and Happy under the standard &quot;monad&quot; wrapper", "body": "<p>I managed to combine an Alex lexer and a Happy parser. However there are some aspects of my <a href=\"https://github.com/capitanbatata/sandbox/tree/d5dc750eaad5388643050ecc61e6a4b4c278a173/happy-monadic\" rel=\"nofollow noreferrer\">current solution</a> I'm not happy with:</p>\n\n<ol>\n<li>Setting up the initial state,</li>\n<li>Boilerplate code when passing the state to Alex,</li>\n<li><code>Alex</code> and my <code>ExpParser</code> monad are separated entities.</li>\n</ol>\n\n<p>I explain these aspects below.</p>\n\n<p>My <code>ExpParser</code> monad looks as follows:</p>\n\n<pre><code> data ParserEnv = ParserEnv\n  { varModifier :: String -&gt; String }\n\nnewtype ExpParser a = ExpParser \n  { runExpParser :: ReaderT ParserEnv (StateT AlexState (Except String)) a }\n  deriving ( Functor, Applicative, Monad\n           , MonadReader ParserEnv\n           , MonadState AlexState\n           , MonadError String\n           )\n</code></pre>\n\n<p>And the top level parsing function is defined as:</p>\n\n<pre><code>-- | Parsing function.\nparse :: (String -&gt; String) -&gt; String -&gt; Either String Exp\nparse f str = runExcept $ (`evalStateT` initState) $ runReaderT (runExpParser calc) initEnv\n  where initEnv = ParserEnv { varModifier = f}\n        initState = AlexState -- TODO: isn't it a standard initial state that we can use?        \n          { alex_pos = AlexPn 0 0 0\n          , alex_inp = str\n          , alex_chr = '\\n' -- TODO: What to include here?\n          , alex_bytes = []\n          , alex_scd = 0\n          }\n</code></pre>\n\n<p>The first problem is that I have to set up the intial state with some fields I'm not sure about. Moreover, I would expect a standard \"initial state\" for the Alex lexer to be defined.</p>\n\n<p>Then I make use of the lexer (generated using the \"monad\" wrapper) in the following way:</p>\n\n<pre><code>mLexer :: (Token -&gt; ExpParser a) -&gt; ExpParser a\nmLexer cont = do -- TODO: is there a way to reduce this boilerplate?\n  alexSt &lt;- get\n  case unAlex alexMonadScan alexSt of\n    Left err -&gt; throwError err\n    Right (nextAlexSt, token) -&gt;\n      do\n        put nextAlexSt\n        cont token\n</code></pre>\n\n<p>But I'm writing some of boilerplate, and also repeating myself since there is behavior of the state monad embedded in the code above. If <code>Alex</code> defined an instance for the <code>State</code> monad I could avoid this, however I don't think this is the case.</p>\n\n<p>Are there ways to improve the current solution in the aspects mentioned above?</p>\n"}, {"tags": ["c#", "haskell", "interface", "typeclass"], "comments": [{"owner": {"reputation": 14781, "user_id": 630160, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/4445f21326af525a8ad19af7e3ae41a8?s=128&d=identicon&r=PG", "display_name": "epsilonhalbe", "link": "https://stackoverflow.com/users/630160/epsilonhalbe"}, "edited": false, "score": 0, "creation_date": 1500628256, "post_id": 45233416, "comment_id": 77432893, "body": "Counterquestion: can you provide default a implementation in c#? Can you make constraint interfaces like <code>Show a =&gt; MyClass a</code>? And interfaces like functor that work on container types?"}, {"owner": {"reputation": 1853, "user_id": 5200896, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/4d824e2d8703ede58e09df9ae10ac572?s=128&d=identicon&r=PG", "display_name": "kogoia", "link": "https://stackoverflow.com/users/5200896/kogoia"}, "reply_to_user": {"reputation": 14781, "user_id": 630160, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/4445f21326af525a8ad19af7e3ae41a8?s=128&d=identicon&r=PG", "display_name": "epsilonhalbe", "link": "https://stackoverflow.com/users/630160/epsilonhalbe"}, "edited": false, "score": 0, "creation_date": 1500628501, "post_id": 45233416, "comment_id": 77433079, "body": "I don&#39;t know, you tell me:) Can you give a complete example, otherwise I do not understand"}, {"owner": {"reputation": 6114, "user_id": 3070060, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9a936bdd7a67a345d312281305d5adde?s=128&d=identicon&r=PG&f=1", "display_name": "PaulF", "link": "https://stackoverflow.com/users/3070060/paulf"}, "edited": false, "score": 0, "creation_date": 1500628620, "post_id": 45233416, "comment_id": 77433181, "body": "I believe you can have default implementations in a Haskell typeclass - a C# interface is essentially a contract that the class will provide the defined methods/properties."}, {"owner": {"reputation": 1853, "user_id": 5200896, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/4d824e2d8703ede58e09df9ae10ac572?s=128&d=identicon&r=PG", "display_name": "kogoia", "link": "https://stackoverflow.com/users/5200896/kogoia"}, "reply_to_user": {"reputation": 6114, "user_id": 3070060, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9a936bdd7a67a345d312281305d5adde?s=128&d=identicon&r=PG&f=1", "display_name": "PaulF", "link": "https://stackoverflow.com/users/3070060/paulf"}, "edited": false, "score": 0, "creation_date": 1500628672, "post_id": 45233416, "comment_id": 77433221, "body": "@PaulF what about <code>abstract class</code> in this case? or Java interface, where we can have default implementation, as I know"}, {"owner": {"reputation": 6114, "user_id": 3070060, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9a936bdd7a67a345d312281305d5adde?s=128&d=identicon&r=PG&f=1", "display_name": "PaulF", "link": "https://stackoverflow.com/users/3070060/paulf"}, "edited": false, "score": 0, "creation_date": 1500628833, "post_id": 45233416, "comment_id": 77433343, "body": "That is possibly a closer analogy - an abstract class cannot be instantiated itself &amp; may define abstract methods that must be defined in the derived class &amp; virtual methods (=default implementation) which may be overridden."}, {"owner": {"reputation": 1853, "user_id": 5200896, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/4d824e2d8703ede58e09df9ae10ac572?s=128&d=identicon&r=PG", "display_name": "kogoia", "link": "https://stackoverflow.com/users/5200896/kogoia"}, "edited": false, "score": 0, "creation_date": 1500629129, "post_id": 45233416, "comment_id": 77433536, "body": "In Haskell, can we instantiate an <code>class Eq</code> without inheritance? Or I misunderstood something. I do not know well Haskell, so I would like to see an example of advantages"}], "answers": [{"comments": [{"owner": {"reputation": 1853, "user_id": 5200896, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/4d824e2d8703ede58e09df9ae10ac572?s=128&d=identicon&r=PG", "display_name": "kogoia", "link": "https://stackoverflow.com/users/5200896/kogoia"}, "edited": false, "score": 2, "creation_date": 1500638922, "post_id": 45234022, "comment_id": 77440160, "body": "Can you write pseudocode on C#, which will not work, but in Haskell it will be possible to implement?"}, {"owner": {"reputation": 133611, "user_id": 152602, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7f370b4bd787fc68f9f62d9c6781cb79?s=128&d=identicon&r=PG", "display_name": "Lee", "link": "https://stackoverflow.com/users/152602/lee"}, "reply_to_user": {"reputation": 1853, "user_id": 5200896, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/4d824e2d8703ede58e09df9ae10ac572?s=128&d=identicon&r=PG", "display_name": "kogoia", "link": "https://stackoverflow.com/users/5200896/kogoia"}, "edited": false, "score": 0, "creation_date": 1500640496, "post_id": 45234022, "comment_id": 77441381, "body": "@kogoia - Pseudocode for what? You can emulate typeclasses in C# by manually passing &#39;instances&#39; around (ignoring aspects of the Haskell type system that C# doesn&#39;t support like higher-kinded polymorphism)."}, {"owner": {"reputation": 1853, "user_id": 5200896, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/4d824e2d8703ede58e09df9ae10ac572?s=128&d=identicon&r=PG", "display_name": "kogoia", "link": "https://stackoverflow.com/users/5200896/kogoia"}, "edited": false, "score": 0, "creation_date": 1500640784, "post_id": 45234022, "comment_id": 77441613, "body": "As I understand, if we have <code>T sort(T[], Comparer&lt;T&gt;)</code> function, and after this we implement <code>Comparer&lt;int&gt;</code> and call <code>sort(integers)</code>,  compiler check whether there is an implementation of type <code>Comparer&lt;int&gt;</code> and if it exists then inject into method, otherwise build error. I understood correctly?"}, {"owner": {"reputation": 1853, "user_id": 5200896, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/4d824e2d8703ede58e09df9ae10ac572?s=128&d=identicon&r=PG", "display_name": "kogoia", "link": "https://stackoverflow.com/users/5200896/kogoia"}, "edited": false, "score": 0, "creation_date": 1500641328, "post_id": 45234022, "comment_id": 77442026, "body": "I read an article about Scala, here proper definition of function <code>def sort[T](elements: Seq[T])(implicit comparator: Comparer[T]): Seq[T]</code> and call this function like this <code>sort(integers)</code>"}, {"owner": {"reputation": 1853, "user_id": 5200896, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/4d824e2d8703ede58e09df9ae10ac572?s=128&d=identicon&r=PG", "display_name": "kogoia", "link": "https://stackoverflow.com/users/5200896/kogoia"}, "edited": false, "score": 0, "creation_date": 1500641374, "post_id": 45234022, "comment_id": 77442071, "body": "and type class implementation <code>implicit def ListComparator[V](implicit comparator: Comparator[V]) = new Comparator[List[V]] { ... }</code>"}, {"owner": {"reputation": 133611, "user_id": 152602, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7f370b4bd787fc68f9f62d9c6781cb79?s=128&d=identicon&r=PG", "display_name": "Lee", "link": "https://stackoverflow.com/users/152602/lee"}, "reply_to_user": {"reputation": 1853, "user_id": 5200896, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/4d824e2d8703ede58e09df9ae10ac572?s=128&d=identicon&r=PG", "display_name": "kogoia", "link": "https://stackoverflow.com/users/5200896/kogoia"}, "edited": false, "score": 4, "creation_date": 1500641842, "post_id": 45234022, "comment_id": 77442386, "body": "@kogoia - Yes Haskell provides the typeclass instances for you implicitly. Scala has implicit parameters which can be used to emulate typeclasses, although Haskell only allows one typeclass instance for each type while the scala approach allows you to have multiple instances i.e. you could have multiple <code>Comparer[Int]</code> instances. Haskell requires you to define a new type for each instance you want to define (see for example <code>Product</code> and <code>Sum</code> in <a href=\"https://hackage.haskell.org/package/base-4.9.1.0/docs/Data-Monoid.html\" rel=\"nofollow noreferrer\">Data.Monoid</a>."}, {"owner": {"reputation": 1853, "user_id": 5200896, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/4d824e2d8703ede58e09df9ae10ac572?s=128&d=identicon&r=PG", "display_name": "kogoia", "link": "https://stackoverflow.com/users/5200896/kogoia"}, "edited": false, "score": 0, "creation_date": 1500643888, "post_id": 45234022, "comment_id": 77443937, "body": "I myself tried to answer on this question, can you look at this and edit if there are errors in the explanation. Thank you for respond"}], "tags": [], "owner": {"reputation": 133611, "user_id": 152602, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7f370b4bd787fc68f9f62d9c6781cb79?s=128&d=identicon&r=PG", "display_name": "Lee", "link": "https://stackoverflow.com/users/152602/lee"}, "is_accepted": false, "score": 10, "last_activity_date": 1500630725, "last_edit_date": 1500630725, "creation_date": 1500629231, "answer_id": 45234022, "question_id": 45233416, "link": "https://stackoverflow.com/questions/45233416/difference-between-c-interface-and-haskell-type-class/45234022#45234022", "title": "Difference between C# interface and Haskell Type Class", "body": "<p>Typeclasses are resolved based on a type, while interface dispatch happens against an explicit receiver object. Type class arguments are implicitly provided to a function while objects in C# are provided explicitly. As an example, you could write the following Haskell function which uses the <code>Read</code> class:</p>\n\n<pre><code>readLine :: Read a =&gt; IO a\nreadLine = fmap read getLine\n</code></pre>\n\n<p>which you can then use as:</p>\n\n<pre><code>readLine :: IO Int\nreadLine :: IO Bool\n</code></pre>\n\n<p>and have the appropriate <code>read</code> instance provided by the compiler. </p>\n\n<p>You could try to emulate the <code>Read</code> class in C# with an interface e.g.</p>\n\n<pre><code>public interface Read&lt;T&gt;\n{\n    T Read(string s);\n}\n</code></pre>\n\n<p>but then the implementation of <code>ReadLine</code> would need a parameter for the <code>Read&lt;T&gt;</code> 'instance' you want:</p>\n\n<pre><code>public static T ReadLine&lt;T&gt;(Read&lt;T&gt; r)\n{\n    return r.Read(Console.ReadLine());\n}\n</code></pre>\n\n<p>The <code>Eq</code> typeclass requires both arguments have the same type, whereas your <code>Eq</code> interface does not since the first argument is implicitly the type of the receiver. You could for example have:</p>\n\n<pre><code>public class String : Eq&lt;int&gt;\n{\n    public bool Equal(int e) { return false; }\n}\n</code></pre>\n\n<p>which you cannot represent using <code>Eq</code>. Interfaces hide the type of the receiver and hence the type of one of the arguments, which can cause problems. Imagine you have a typeclass and interface for an immutable <a href=\"https://en.wikipedia.org/wiki/Heap_(data_structure)\" rel=\"noreferrer\">heap datastructure</a>:</p>\n\n<pre><code>class Heap h where\n  merge :: Ord a =&gt; h a -&gt; h a -&gt; h a\n\npublic interface Heap&lt;T&gt;\n{\n    Heap&lt;T&gt; Merge(Heap&lt;T&gt; other);\n}\n</code></pre>\n\n<p>Merging two binary heaps can be done in O(n) while merging two binomial heaps is possible in O(n log n) and for fibonacci heaps it's O(1). Implementors of the Heap interface do not know the real type of the other heap so is forced to either use a sub-optimal algorithm or use dynamic type checks to discover it. In contrast, types implementing the <code>Heap</code> typeclass do know the representation.</p>\n"}, {"comments": [{"owner": {"reputation": 1853, "user_id": 5200896, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/4d824e2d8703ede58e09df9ae10ac572?s=128&d=identicon&r=PG", "display_name": "kogoia", "link": "https://stackoverflow.com/users/5200896/kogoia"}, "edited": false, "score": 0, "creation_date": 1500634733, "post_id": 45235718, "comment_id": 77437410, "body": "It is difficult to realize all this for me. How often do we need it in our daily work? The advantage is worth which time need to spend?"}, {"owner": {"reputation": 1853, "user_id": 5200896, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/4d824e2d8703ede58e09df9ae10ac572?s=128&d=identicon&r=PG", "display_name": "kogoia", "link": "https://stackoverflow.com/users/5200896/kogoia"}, "edited": false, "score": 0, "creation_date": 1500638907, "post_id": 45235718, "comment_id": 77440149, "body": "Can you write pseudocode on C#, which will not work, but in Haskell it will be possible to implement?"}], "tags": [], "owner": {"reputation": 58792, "user_id": 1006010, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/f683d229f3673c9dcc3f3f2796d75c09?s=128&d=identicon&r=PG", "display_name": "MathematicalOrchid", "link": "https://stackoverflow.com/users/1006010/mathematicalorchid"}, "is_accepted": false, "score": 7, "last_activity_date": 1500634388, "last_edit_date": 1500634388, "creation_date": 1500634070, "answer_id": 45235718, "question_id": 45233416, "link": "https://stackoverflow.com/questions/45233416/difference-between-c-interface-and-haskell-type-class/45235718#45235718", "title": "Difference between C# interface and Haskell Type Class", "body": "<p>A C# interface defines a set of methods that must be implemented. A Haskell type class defines a set of methods that must be implemented (and <em>possibly</em> a set of default implementations for some of the methods). So there's a lot of similarities there.</p>\n\n<p>(I guess an important difference is that in C#, an interface <em>is</em> a type, whereas Haskell regards types and type classes as strictly separate things.)</p>\n\n<p>The <em>key</em> difference is that in C#, when you define a type (i.e., write a class), you define exactly what interfaces it implements, and this is frozen for all time. In Haskell, you can <em>add</em> new interfaces to an existing type at any time.</p>\n\n<p>For example, if I write a new <code>SerializeToXml</code> interface in C#, I cannot then make <code>double</code> or <code>String</code> implement that interface. But in Haskell, I can define my new <code>SerializeToXml</code> type class, and then make all the standard, built-in types implement that interface (<code>Bool</code>, <code>Double</code>, <code>Int</code>...)</p>\n\n<p>The other thing is how polymorphism works in Haskell. In an OO language, you dispatch on the type of the method the object is being invoked on. In Haskell, the type that the method is implemented for can appear <em>anywhere</em> in the type signature. Most particularly, <code>read</code> dispatches on the <em>return type</em> you want &mdash; something you usually can't do at all in OO languages, not even with function overloading.</p>\n\n<p>Also, in C# it's kind of hard to say \"these two arguments must have <em>the same</em> type\". Then again, OO is predicated on the Liskov substitution principal; two classes that both descend from <code>Customer</code> should be interchangeable, so why would you want to constrain two <code>Customer</code> objects to both be <em>the same</em> type of customer?</p>\n\n<p>Come to think of it, OO languages do method lookup at <em>run-time</em>, whereas Haskell does method lookup at <em>compile-time</em>. This isn't immediately obvious, but Haskell polymorphism actually works more like C++ templates than usual OO polymorphism. (But that's not especially to do with type classes, it's just how Haskell does polymorphism as such.)</p>\n"}, {"tags": [], "owner": {"reputation": 1853, "user_id": 5200896, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/4d824e2d8703ede58e09df9ae10ac572?s=128&d=identicon&r=PG", "display_name": "kogoia", "link": "https://stackoverflow.com/users/5200896/kogoia"}, "is_accepted": true, "score": 0, "last_activity_date": 1500652937, "last_edit_date": 1500652937, "creation_date": 1500643738, "answer_id": 45238964, "question_id": 45233416, "link": "https://stackoverflow.com/questions/45233416/difference-between-c-interface-and-haskell-type-class/45238964#45238964", "title": "Difference between C# interface and Haskell Type Class", "body": "<p>After a long study of this issue, I came to an easy method of explaining. At least for me it's clear.</p>\n\n<p>Imagine we have method with signature like this</p>\n\n<pre><code>public static T[] Sort(T[] array, IComparator&lt;T&gt; comparator) \n{\n    ...\n}\n</code></pre>\n\n<p>And implementation of <code>IComparator</code>:</p>\n\n<pre><code>public class IntegerComparator : IComparator&lt;int&gt; { }\n</code></pre>\n\n<p>Then we can write code like this:</p>\n\n<pre><code>var sortedIntegers = Sort(integers, new IntegerComparator());\n</code></pre>\n\n<p>We can improve this code, first we create <code>Dictionary&lt;Type, IComparator&gt;</code> and fill it:</p>\n\n<pre><code>var comparators = new Dictionary&lt;Type, IComparator&gt;() \n{\n    [typeof(int)]    = new IntegerComparator(),\n    [typeof(string)] = new StringComparator() \n}\n</code></pre>\n\n<blockquote>\n  <p>Redesigned IComparator interface so that we could write like above</p>\n\n<pre><code>public interface IComparator {}\npublic interface IComparator&lt;T&gt; : IComparator {}\n</code></pre>\n</blockquote>\n\n<p>And after this let's redesign <code>Sort</code> method signature</p>\n\n<pre><code>public class SortController\n{\n    public T[] Sort(T[] array, [Injectable]IComparator&lt;T&gt; comparator = null) \n    {\n        ...\n    }\n}\n</code></pre>\n\n<p>As you understand we are going to inject <code>IComparator&lt;T&gt;</code>, and write code like this:</p>\n\n<pre><code>new SortController().Sort&lt;int&gt;(integers, (IComparator&lt;int&gt;)_somparators[typeof(int)])\n</code></pre>\n\n<p>As you already guessed this code will not work for other types until we outline the implementation and add in <code>Dictionary&lt;Type, IComparator&gt;</code></p>\n\n<blockquote>\n  <p>Notice, the exception we will see only on runtime</p>\n</blockquote>\n\n<p>And now imagine if this work was done for us by the compiler during build and it threw exception if it could not find the comparator with corresponding types.</p>\n\n<p>For this, we could help the compiler and add a new keyword instead of usage attribute. Out <code>Sort</code> method will be look like this:</p>\n\n<pre><code>public static T[] Sort(T[] array, implicit IComparator&lt;T&gt; comparator) \n{\n    ...\n}\n</code></pre>\n\n<p>And code of realization concrete Comparator:</p>\n\n<pre><code>public class IntegerComparator : IComparator&lt;int&gt; implicit { }\n</code></pre>\n\n<blockquote>\n  <p>Note, we use the keyword 'implicit', after this compiler will be able to do\n  routine work, which we wrote above, and the exception will be thrown during\n  compile-time</p>\n</blockquote>\n\n<pre><code>var sortedIntegers = Sort(integers);\n\n// this gives us compile-time error\n// because we don't have implementation of IComparator&lt;string&gt; \nvar sortedStrings = Sort(strings); \n</code></pre>\n\n<p>And give the name to this style of implementation <strong>Type Class</strong></p>\n\n<pre><code>public class IntegerComparator : IComparator&lt;int&gt; implicit { }\n</code></pre>\n\n<p>I hope that I understood correctly and understandably explained.</p>\n\n<p>PS: The code does not pretend to work.</p>\n"}, {"tags": [], "owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "is_accepted": false, "score": 5, "last_activity_date": 1501318355, "last_edit_date": 1501318355, "creation_date": 1500644285, "answer_id": 45239155, "question_id": 45233416, "link": "https://stackoverflow.com/questions/45233416/difference-between-c-interface-and-haskell-type-class/45239155#45239155", "title": "Difference between C# interface and Haskell Type Class", "body": "<p>Others have already provided excellent answers.</p>\n\n<p>I only want to add a practical example about their differences. Suppose we want to model a \"vector space\" typeclass/interface, which contains the common operations of 2D, 3D, etc. vectors.</p>\n\n<p>In Haskell:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>class Vector a where\n   scale :: a -&gt; Double -&gt; a\n   add :: a -&gt; a -&gt; a\n\ndata Vec2D = V2 Double Double\ninstance Vector (Vec2D) where\n   scale s (V2 x y) = V2 (s*x) (s*y)\n   add (V2 x1 y1) (V2 x2 y2) = V2 (x1+x2) (y2+y2)\n\n-- the same for Vec3D\n</code></pre>\n\n<p>In C#, we might try the following <em>wrong</em> approach (I hope I get the syntax right)</p>\n\n<pre><code>interface IVector {\n   IVector scale(double s);\n   IVector add(IVector v);\n}\nclass Vec2D : IVector {\n   double x,y;\n   // constructor omitted\n   IVector scale(double s) { \n     return new Vec2D(s*x, s*y);\n   }\n   IVector add(IVector v) { \n     return new Vec2D(x+v.x, y+v.y);\n   }\n}\n</code></pre>\n\n<p>We have two issues here.</p>\n\n<p>First, <code>scale</code> returns only an <code>IVector</code>, a supertype of the actual <code>Vec2D</code>. This is bad, because scaling does not preserve the type information.</p>\n\n<p>Second, <code>add</code> is ill-typed! We can't use <code>v.x</code> since <code>v</code> is an arbitrary <code>IVector</code> which might not have the <code>x</code> field.</p>\n\n<p>Indeed, the interface itself is wrong: the <code>add</code> method promises that any vector must be summable with any other vector, so we must be able to sum 2D and 3D vectors, which is nonsense.</p>\n\n<p>The usual solution is to switch to <a href=\"https://en.wikipedia.org/wiki/Bounded_quantification\" rel=\"nofollow noreferrer\">F-bounded quantification</a> AKA CRTP or whatever it's being called these days:</p>\n\n<pre><code>interface IVector&lt;T&gt; {\n   T scale(double s);\n   T add(T v);\n}\nclass Vec2D : IVector&lt;Vec2D&gt; {\n   double x,y;\n   // constructor omitted\n   Vec2D scale(double s) { \n     return new Vec2D(s*x, s*y);\n   }\n   Vec2D add(Vec2D v) { \n     return new Vec2D(x+v.x, y+v.y);\n   }\n}\n</code></pre>\n\n<p>The first time a programmer meets this, they are usually puzzled by the seemingly \"recursive\" line <code>Vec2D : IVector&lt;Vec2D&gt;</code>. I surely was :) Then we get used to this and accept it as an idiomatic solution.</p>\n\n<p>Type classes arguably have a nicer solution here.</p>\n"}], "owner": {"reputation": 1853, "user_id": 5200896, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/4d824e2d8703ede58e09df9ae10ac572?s=128&d=identicon&r=PG", "display_name": "kogoia", "link": "https://stackoverflow.com/users/5200896/kogoia"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1049, "favorite_count": 2, "accepted_answer_id": 45238964, "answer_count": 4, "score": 6, "last_activity_date": 1501318355, "creation_date": 1500627578, "question_id": 45233416, "link": "https://stackoverflow.com/questions/45233416/difference-between-c-interface-and-haskell-type-class", "title": "Difference between C# interface and Haskell Type Class", "body": "<p>I know that there is a similar question here, but I would like to see an example, which clearly shows, what you can not do with <code>interface</code> and can with Type Class</p>\n\n<p>For comparison I'll give you an example code:</p>\n\n<pre><code>class Eq a where \n    (==) :: a -&gt; a -&gt; Bool\ninstance Eq Integer where \n    x == y  =  x `integerEq` y\n</code></pre>\n\n<p>C# code:</p>\n\n<pre><code>interface Eq&lt;T&gt; { bool Equal(T elem); }\npublic class Integer : Eq&lt;int&gt; \n{\n     public bool Equal(int elem) \n     {\n         return _elem == elem;\n     }\n}\n</code></pre>\n\n<p>Correct my example, if not correctly understood</p>\n"}, {"tags": ["haskell", "image-processing"], "answers": [{"tags": [], "owner": {"reputation": 94713, "user_id": 1139697, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/5f136ddb684f39aaee1c028ee1950f6f?s=128&d=identicon&r=PG", "display_name": "Zeta", "link": "https://stackoverflow.com/users/1139697/zeta"}, "is_accepted": true, "score": 2, "last_activity_date": 1500620023, "creation_date": 1500620023, "answer_id": 45230940, "question_id": 45228875, "link": "https://stackoverflow.com/questions/45228875/haskell-image-processing-library-hip-readimageexact-ok-readimage-compile-er/45230940#45230940", "title": "Haskell image processing library - hip - readImageExact OK, readImage compile error", "body": "<p>There is simply no <code>Readable</code> instance for the format <code>InputFormat</code>, except <a href=\"https://hackage.haskell.org/package/hip-1.5.3.0/docs/Graphics-Image-IO-Formats.html#t:Readable\" rel=\"nofollow noreferrer\">for one</a>:</p>\n\n<pre><code>instance AllReadable arr cs =&gt; Readable (Image arr cs Double) InputFormat\n</code></pre>\n\n<p>The <code>AllReadable</code> basically says that we want to be able to read all formats. However, the kicker is <code>Double</code>. You cannot use <code>readImage'</code> with <code>Image  * * Word8</code>, you have to use <code>Image * * <b><i>Double</i></b></code>.</p>\n\n<p>I guess this is due to the <code>HDR</code> format, which uses <code>RGB Float</code>.</p>\n"}], "owner": {"reputation": 13, "user_id": 8341896, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/403db52486cc4e18be9ed82cce4dd78c?s=128&d=identicon&r=PG&f=1", "display_name": "A Mauer-Oats", "link": "https://stackoverflow.com/users/8341896/a-mauer-oats"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 204, "favorite_count": 0, "accepted_answer_id": 45230940, "answer_count": 1, "score": 1, "last_activity_date": 1500620023, "creation_date": 1500610604, "question_id": 45228875, "link": "https://stackoverflow.com/questions/45228875/haskell-image-processing-library-hip-readimageexact-ok-readimage-compile-er", "title": "Haskell image processing library - hip - readImageExact OK, readImage compile error", "body": "<p>I am using the Haskell image processing library hip pulled using stack with the lts-8.23 resolver (iirc). I am a just learning Haskell. In brief: readImageExact works as I expect, but readImage does not.</p>\n\n<p>This Main.hs compiles as expected:</p>\n\n<pre><code>import Graphics.Image \nimport Graphics.Image.IO \ntype BasicImage = (Image VS YCbCr Word8)\nmain :: IO ()\nmain = do \n   img  &lt;- readImageExact' JPG \"frog.jpg\" :: IO(BasicImage)\n   return ()\n</code></pre>\n\n<p>The one using only readImage does not:</p>\n\n<pre><code>   img  &lt;- readImage' \"frog.jpg\" :: IO(BasicImage)\n</code></pre>\n\n<p>The error message I get is:</p>\n\n<pre><code>\u2022 No instance for (Readable (Image VS YCbCr Word8) InputFormat)\n    arising from a use of \u2018readImage'\u2019\n\u2022 In a stmt of a 'do' block:\n    img &lt;- readImage' \"frog.jpg\" :: IO (BasicImage)\n [...]\n</code></pre>\n\n<p>Setup: new installation of stack with lts-8.23 resolver, hip pulled from Stackage (1.5.3.0). </p>\n"}, {"tags": ["list", "haskell", "permutation"], "comments": [{"owner": {"reputation": 45534, "user_id": 106104, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/c88b9310b92a937108ec4336c2832f92?s=128&d=identicon&r=PG", "display_name": "user253751", "link": "https://stackoverflow.com/users/106104/user253751"}, "edited": false, "score": 0, "creation_date": 1500868573, "post_id": 45227177, "comment_id": 77507454, "body": "Are the elements necesarily unique in each list?"}, {"owner": {"reputation": 1540, "user_id": 6395452, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/a57f20b2424b5a90e46cf1bbe311e033?s=128&d=identicon&r=PG&f=1", "display_name": "ITA", "link": "https://stackoverflow.com/users/6395452/ita"}, "reply_to_user": {"reputation": 45534, "user_id": 106104, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/c88b9310b92a937108ec4336c2832f92?s=128&d=identicon&r=PG", "display_name": "user253751", "link": "https://stackoverflow.com/users/106104/user253751"}, "edited": false, "score": 0, "creation_date": 1500911380, "post_id": 45227177, "comment_id": 77532085, "body": "Yes, for the case I was looking at."}], "answers": [{"comments": [{"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "edited": false, "score": 0, "creation_date": 1500598946, "post_id": 45227311, "comment_id": 77421017, "body": "N.B. This considers two lists &quot;equal&quot; if they both <i>don&#39;t</i> contain the elements in question, e.g. <code>eqElem 0 0 [[1]] [[1]]</code> will output <code>[([1], [1])]</code>. Hopefully the ideas here are clear enough that you can see how to change this if you don&#39;t like that behavior."}, {"owner": {"reputation": 1540, "user_id": 6395452, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/a57f20b2424b5a90e46cf1bbe311e033?s=128&d=identicon&r=PG&f=1", "display_name": "ITA", "link": "https://stackoverflow.com/users/6395452/ita"}, "edited": false, "score": 0, "creation_date": 1500599692, "post_id": 45227311, "comment_id": 77421204, "body": "This is cool, but now elemEq has type:  <code>eqElem :: (a1 -&gt; Bool) -&gt; [[a1]] -&gt; (a -&gt; Bool) -&gt; [[a]] -&gt; [([a1], [a])]</code>  What if I wanted to keep it <code>eqElem :: a -&gt; [[a]] -&gt; b -&gt; [[b]] -&gt; [([a],[b])]</code>  as I was attempting in my original example?"}, {"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "reply_to_user": {"reputation": 1540, "user_id": 6395452, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/a57f20b2424b5a90e46cf1bbe311e033?s=128&d=identicon&r=PG&f=1", "display_name": "ITA", "link": "https://stackoverflow.com/users/6395452/ita"}, "edited": false, "score": 1, "creation_date": 1500599867, "post_id": 45227311, "comment_id": 77421238, "body": "@IvanAbraham Sorry, copy-paste error. Just throw in an appropriate call to <code>(==)</code> (as I&#39;ve done in my edited post)."}, {"owner": {"reputation": 1540, "user_id": 6395452, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/a57f20b2424b5a90e46cf1bbe311e033?s=128&d=identicon&r=PG&f=1", "display_name": "ITA", "link": "https://stackoverflow.com/users/6395452/ita"}, "edited": false, "score": 0, "creation_date": 1500600130, "post_id": 45227311, "comment_id": 77421309, "body": "Wow, that was...short, and I feel like I spent a lot of time trying things that don&#39;t work. How long does it take someone to become moderately ok in Haskell? I have just seen it as part of a summer course (so about two months) and it seems like a lot of my time is spent doing the right things (in terms of idea/concept), just the wrong idiom/implementation."}, {"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "reply_to_user": {"reputation": 1540, "user_id": 6395452, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/a57f20b2424b5a90e46cf1bbe311e033?s=128&d=identicon&r=PG&f=1", "display_name": "ITA", "link": "https://stackoverflow.com/users/6395452/ita"}, "edited": false, "score": 1, "creation_date": 1500600182, "post_id": 45227311, "comment_id": 77421320, "body": "@IvanAbraham <a href=\"http://www.norvig.com/21-days.html\" rel=\"nofollow noreferrer\">Teach Yourself Programming in Ten Years</a>"}], "tags": [], "owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "is_accepted": true, "score": 3, "last_activity_date": 1500599798, "last_edit_date": 1500599798, "creation_date": 1500598364, "answer_id": 45227311, "question_id": 45227177, "link": "https://stackoverflow.com/questions/45227177/positional-equality-in-haskell-list/45227311#45227311", "title": "Positional equality in haskell list", "body": "<p>Probably something like this would be very idiomatic (if not super efficient):</p>\n\n<pre><code>import Data.List\neqElem l r lss rss =\n    [ (ls, rs)\n    | ls &lt;- lss\n    , rs &lt;- rss\n    , findIndex (l==) ls == findIndex (r==) rs\n    ]\n</code></pre>\n\n<p>In ghci:</p>\n\n<pre><code>&gt; mapM_ print $ eqElem 2 \"c\" [[3,1,2,4],[1,4,2,3],[1,3,4,2]] [[\"a\",\"b\",\"c\",\"d\"],[\"d\",\"a\",\"c\",\"b\"],[\"c\",\"b\",\"a\",\"d\"],[\"d\",\"b\",\"c\",\"a\"]]\n([3,1,2,4],[\"a\",\"b\",\"c\",\"d\"])\n([3,1,2,4],[\"d\",\"a\",\"c\",\"b\"])\n([3,1,2,4],[\"d\",\"b\",\"c\",\"a\"])\n([1,4,2,3],[\"a\",\"b\",\"c\",\"d\"])\n([1,4,2,3],[\"d\",\"a\",\"c\",\"b\"])\n([1,4,2,3],[\"d\",\"b\",\"c\",\"a\"])\n</code></pre>\n\n<p>This has two efficiency problems: 1. it recomputes the location of the input elements in the input lists repeatedly, and 2. it iterates over all pairs of input lists. So this way is O(mnp) where m is the length of <code>lss</code>, n is the length of <code>rss</code>, and p is the length of the longest element of <code>lss</code> or <code>rss</code>. A more efficient version (which only calls <code>findIndex</code> once per input list, and iterates over many fewer pairs of lists; O(mn+mp+np+m log(m)+n log(n))) would look like this:</p>\n\n<pre><code>import Control.Applicative\nimport qualified Data.Map as M\n\neqElem l r lss rss\n    = concat . M.elems\n    $ M.intersectionWith (liftA2 (,)) (index l lss) (index r rss)\n    where\n    index v vss = M.fromListWith (++) [(findIndex (v==) vs, [vs]) | vs &lt;- vss]\n</code></pre>\n\n<p>The basic idea is to build up <code>Map</code>s which tell which input lists have the given elements at which positions. Then the intersection of these two maps line up input lists that have the given elements at the same positions, so we can just take the Cartesian product of the values there with <code>liftA2 (,)</code>.</p>\n\n<p>Again in ghci:</p>\n\n<pre><code>&gt; mapM_ print $ eqElem 2 \"c\" [[3,1,2,4],[1,4,2,3],[1,3,4,2]] [[\"a\",\"b\",\"c\",\"d\"],[\"d\",\"a\",\"c\",\"b\"],[\"c\",\"b\",\"a\",\"d\"],[\"d\",\"b\",\"c\",\"a\"]]\n([1,4,2,3],[\"d\",\"b\",\"c\",\"a\"])\n([1,4,2,3],[\"d\",\"a\",\"c\",\"b\"])\n([1,4,2,3],[\"a\",\"b\",\"c\",\"d\"])\n([3,1,2,4],[\"d\",\"b\",\"c\",\"a\"])\n([3,1,2,4],[\"d\",\"a\",\"c\",\"b\"])\n([3,1,2,4],[\"a\",\"b\",\"c\",\"d\"])\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 5755, "user_id": 394253, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/985ef765f821b00d3b41ac5ca8aef6a0?s=128&d=identicon&r=PG", "display_name": "Ed&#39;ka", "link": "https://stackoverflow.com/users/394253/edka"}, "is_accepted": false, "score": 2, "last_activity_date": 1500602866, "creation_date": 1500602866, "answer_id": 45227880, "question_id": 45227177, "link": "https://stackoverflow.com/questions/45227177/positional-equality-in-haskell-list/45227880#45227880", "title": "Positional equality in haskell list", "body": "<blockquote>\n  <p>Something like this would be a matter of two loops in some other language</p>\n</blockquote>\n\n<p>List comprehension then, quite straightforward in fact:</p>\n\n<pre><code>eqElem a b ass bss =\n  [ (as,bs) | as &lt;- ass, bs &lt;- bss, any (==(a,b)) $ zip as bs ]\n</code></pre>\n\n<p>Reading: For every sublist <code>as</code> from <code>ass</code> and (nested) for every sublist <code>bs</code> in <code>bss</code> check if when <code>as</code> and <code>bs</code> are <code>zip</code>-ed together there is <code>any</code> tuple which equals to <code>(a,b)</code> then include <code>(as,bs)</code> into result.</p>\n\n<p>This should handle a situation when sublists contain duplicated elements.</p>\n"}], "owner": {"reputation": 1540, "user_id": 6395452, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/a57f20b2424b5a90e46cf1bbe311e033?s=128&d=identicon&r=PG&f=1", "display_name": "ITA", "link": "https://stackoverflow.com/users/6395452/ita"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 86, "favorite_count": 0, "accepted_answer_id": 45227311, "answer_count": 2, "score": 1, "last_activity_date": 1500602866, "creation_date": 1500597199, "question_id": 45227177, "link": "https://stackoverflow.com/questions/45227177/positional-equality-in-haskell-list", "title": "Positional equality in haskell list", "body": "<p>If I have two lists, I want to define a positional equality (in a particular sense) between elements. For example if:</p>\n\n<pre><code>k = [[3,1,2,4],[1,4,2,3],[1,3,4,2]]\ns = [[\"a\",\"b\",\"c\",\"d\"],[\"d\",\"a\",\"c\",\"b\"],[\"c\",\"b\",\"a\",\"d\"],[\"d\",\"b\",\"c\",\"a\"]]\n</code></pre>\n\n<p>and I want to be able to say <code>2 \u223c \"c\"</code> to a function and return all tuples where <code>2</code> and <code>c</code> share the same position in the list. </p>\n\n<pre><code>res= [([3,1,2,4],[\"a\",\"b\",\"c\",\"d\"])\n     ,([3,1,2,4],[\"d\",\"a\",\"c\",\"b\"])\n     ,([3,1,2,4],[\"d\",\"b\",\"c\",\"a\"])\n     ,([1,4,2,3],[\"a\",\"b\",\"c\",\"d\"])\n     ,([1,4,2,3],[\"d\",\"a\",\"c\",\"b\"])\n     ,([1,4,2,3],[\"d\",\"b\",\"c\",\"a\"])\n     ]\n</code></pre>\n\n<p>Something like this would be a matter of two loops in some other language, but I have spent the better part of a day trying to write this function in Haskell. My current attempt:</p>\n\n<pre><code>eqElem i1 (l1:ls1) i2 (l2:ls2) =  helper1 i1 l1 i2 l2 0 where\n  helper1 i1 (p:ps) i2 l2 ctr1\n    | i1 == p = helper2 i2 l2 ctr1 0\n    | otherwise = helper1 i1 ps i2 l2 (ctr1+1)\n  helper2 i2 (p:ps) ctr1 ctr2\n    | i2==p &amp;&amp; ctr1==ctr2 = (l1,l2):(eqElem i1 (l1:ls1) i2 ls2)\n    | otherwise = helper2 i2 ps ctr1 (ctr2+1)\n  helper2 i2 [] ctr1 ctr2 = eqElem i1 ls1 i2 (l2:ls2)\neqElem i1 [] i2 _ = []\n</code></pre>\n\n<p>Right now this gives:</p>\n\n<pre><code>*Main Lib&gt; eqElem 2 k \"c\" s\n[([3,1,2,4],[\"a\",\"b\",\"c\",\"d\"]),([3,1,2,4],[\"d\",\"a\",\"c\",\"b\"])] \n</code></pre>\n\n<p>which is only about half right; I can probably get it right if I keep at it but I just want to make sure that I am not reinventing the wheel or something. </p>\n\n<p>So...what is the idiomatic Haskell way to do this? Is there one? I feel like I am forcing Haskell to be imperative and that there must be some higher order function or method that can be used to get this done.</p>\n\n<p>The <strong><em>big issue</em></strong> is that I <strong>do not</strong> know the lists before hand. They can be of arbitrary data type, of differing lengths, and/or (nested) depths. </p>\n\n<p>They are parsed from user input to a REPL and stored in an ADT that can be at best made a <code>Functor</code>, <code>Monad</code> and <code>Applicative</code>. List comprehension would require <code>Alternative</code> and <code>MonadPlus</code> but can't make those because then Category theory would get mad. </p>\n"}, {"tags": ["haskell", "hxt"], "comments": [{"owner": {"reputation": 25144, "user_id": 477476, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/Qf4TT.png?s=128&g=1", "display_name": "Cactus", "link": "https://stackoverflow.com/users/477476/cactus"}, "edited": false, "score": 0, "creation_date": 1500610508, "post_id": 45226590, "comment_id": 77423596, "body": "But wait, shouldn&#39;t it be <code>nc &quot;defaultType&quot;</code> instead of <code>nc &quot;accountNumber&quot;</code>?"}, {"owner": {"reputation": 255, "user_id": 681337, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/be5e0ffb42be5e3337208ae8c9679bb4?s=128&d=identicon&r=PG", "display_name": "Neil", "link": "https://stackoverflow.com/users/681337/neil"}, "reply_to_user": {"reputation": 25144, "user_id": 477476, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/Qf4TT.png?s=128&g=1", "display_name": "Cactus", "link": "https://stackoverflow.com/users/477476/cactus"}, "edited": false, "score": 0, "creation_date": 1500691541, "post_id": 45226590, "comment_id": 77465092, "body": "You&#39;re right @Cactus, my mistake, I updated... the original issue still existed; however, I did find the answer, thanks."}], "answers": [{"comments": [{"owner": {"reputation": 1327, "user_id": 1749901, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/06876c39fc89c5abe3d891e36fe29504?s=128&d=identicon&r=PG", "display_name": "Geradlus_RU", "link": "https://stackoverflow.com/users/1749901/geradlus-ru"}, "edited": false, "score": 0, "creation_date": 1587793978, "post_id": 45226656, "comment_id": 108654383, "body": "Thank you, you made my day"}], "tags": [], "owner": {"reputation": 255, "user_id": 681337, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/be5e0ffb42be5e3337208ae8c9679bb4?s=128&d=identicon&r=PG", "display_name": "Neil", "link": "https://stackoverflow.com/users/681337/neil"}, "is_accepted": false, "score": 1, "last_activity_date": 1500592887, "creation_date": 1500592887, "answer_id": 45226656, "question_id": 45226590, "link": "https://stackoverflow.com/questions/45226590/hxt-and-parsing-optional-elements/45226656#45226656", "title": "Hxt and parsing optional elements", "body": "<p>I just discovered the <code>withDefault</code> function and was able to get it working like so:</p>\n\n<pre><code>bankParser :: ArrowXml a =&gt; a XmlTree BankingInfo\nbankParser = deep (isElem &gt;&gt;&gt; hasLocalPart \"accountBankingInfo\") &gt;&gt;&gt; proc x -&gt; do\n                   i &lt;- getText &lt;&lt;&lt; getChildren &lt;&lt;&lt; deep (hasName \"bankingId\") -&lt; x\n                   d &lt;- getText &lt;&lt;&lt; getChildren &lt;&lt;&lt; deep (hasName \"description\") -&lt; x\n                   b &lt;- getText &lt;&lt;&lt; getChildren &lt;&lt;&lt; deep (hasName \"bankCode\") -&lt; x\n                   t &lt;- getText &lt;&lt;&lt; getChildren &lt;&lt;&lt; deep (hasName \"transit\") -&lt; x\n                   a &lt;- getText &lt;&lt;&lt; getChildren &lt;&lt;&lt; deep (hasName \"accountNumber\") -&lt; x\n                   g &lt;- withDefault (arr Just &lt;&lt;&lt; getText &lt;&lt;&lt; getChildren &lt;&lt;&lt; deep (hasName \"defaultType\")) Nothing -&lt; x\n                   returnA -&lt; BankingInfo i d b t a g\n</code></pre>\n"}], "owner": {"reputation": 255, "user_id": 681337, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/be5e0ffb42be5e3337208ae8c9679bb4?s=128&d=identicon&r=PG", "display_name": "Neil", "link": "https://stackoverflow.com/users/681337/neil"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 69, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1500691485, "creation_date": 1500592355, "last_edit_date": 1500691485, "question_id": 45226590, "link": "https://stackoverflow.com/questions/45226590/hxt-and-parsing-optional-elements", "title": "Hxt and parsing optional elements", "body": "<p>I'm pulling my hair out trying to parse an optional element using HXT in the following xml snippet:</p>\n\n<pre><code>&lt;ns9:accountBankingInfo&gt;\n  &lt;key&gt;\n    &lt;accountId&gt;10&lt;/accountId&gt;\n    &lt;bankingId&gt;01&lt;/bankingId&gt;\n  &lt;/key&gt;\n  &lt;bankingInfo&gt;\n    &lt;description&gt;Bigbank Co.&lt;/description&gt;\n    &lt;eft&gt;\n        &lt;bankCode&gt;222&lt;/bankCode&gt;\n        &lt;transit&gt;111&lt;/transit&gt;\n        &lt;accountNumber&gt;3333333&lt;/accountNumber&gt;\n    &lt;/eft&gt;\n   &lt;/bankingInfo&gt;\n   &lt;defaultType&gt;ACCOUNT&lt;/defaultType&gt; &lt;!-- optional --&gt;\n&lt;/ns9:accountBankingInfo&gt;\n</code></pre>\n\n<p>I'm using a Maybe to represent the defaultType element:</p>\n\n<pre><code>data BankingInfo = BankingInfo { bankingID   :: String\n                               , bankingDesc :: String\n                               , bankCode    :: String  \n                               , bankTransit :: String  \n                               , bankAccount :: String\n                               , defaultType :: Maybe String  \n                               } deriving (Show, Eq)\n</code></pre>\n\n<p>I'm parsing the accountBankingInfo element like so:</p>\n\n<pre><code>bankParser :: ArrowXml a =&gt; a XmlTree BankingInfo\nbankParser = deep (isElem &gt;&gt;&gt; hasLocalPart \"accountBankingInfo\") &gt;&gt;&gt; proc x -&gt; do\n                   i &lt;- getText &lt;&lt;&lt; getChildren &lt;&lt;&lt; deep (hasName \"bankingId\") -&lt; x\n                   d &lt;- getText &lt;&lt;&lt; getChildren &lt;&lt;&lt; deep (hasName \"description\") -&lt; x\n                   b &lt;- getText &lt;&lt;&lt; getChildren &lt;&lt;&lt; deep (hasName \"bankCode\") -&lt; x\n                   t &lt;- getText &lt;&lt;&lt; getChildren &lt;&lt;&lt; deep (hasName \"transit\") -&lt; x\n                   a &lt;- getText &lt;&lt;&lt; getChildren &lt;&lt;&lt; deep (hasName \"accountNumber\") -&lt; x\n                   g &lt;- nc \"defaultType\" -&lt; x\n\n                   returnA -&lt; BankingInfo i d b t a g\n\nnc name = ifA (deep (hasName name)) (getChildren &gt;&gt;&gt; getText &gt;&gt;&gt; arr Just) (arr (const Nothing))\n</code></pre>\n\n<p>It compiles, but when I parse a file, I don't get any BankingInfo's returned. If I change the BankingInfo type to remove the defaultType and don't worry about parsing for that element, it all works successfully. </p>\n\n<p>Is there a simple way to handle optional elements in the XML and convert that to Maybe x?  </p>\n"}, {"tags": ["haskell"], "comments": [{"owner": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "edited": false, "score": 1, "creation_date": 1500587081, "post_id": 45225692, "comment_id": 77417674, "body": "Looks to me you can replace it to <code>return $ myfunc list1 ++ list2</code>. But are you sure you need a <code>return</code> function to begin with?"}, {"owner": {"reputation": 51584, "user_id": 839246, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9b0573c2b936b12828dd1e4cc04206dc?s=128&d=identicon&r=PG&f=1", "display_name": "bheklilr", "link": "https://stackoverflow.com/users/839246/bheklilr"}, "edited": false, "score": 1, "creation_date": 1500587085, "post_id": 45225692, "comment_id": 77417676, "body": "I would probably write this as <code>return $ myfunc list1 ++ list2</code> or <code>return (myfunc list1 ++ list2)</code>.  However, if this question is just about code style then stackoverflow really isn&#39;t the place for these types of questions since it&#39;s subjective."}, {"owner": {"reputation": 51584, "user_id": 839246, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9b0573c2b936b12828dd1e4cc04206dc?s=128&d=identicon&r=PG&f=1", "display_name": "bheklilr", "link": "https://stackoverflow.com/users/839246/bheklilr"}, "edited": false, "score": 1, "creation_date": 1500587128, "post_id": 45225692, "comment_id": 77417700, "body": "I&#39;m voting to close this question as off-topic because it is a question about code style, not a technical problem."}, {"owner": {"reputation": 1231, "user_id": 6026051, "user_type": "registered", "accept_rate": 71, "profile_image": "https://lh4.googleusercontent.com/-dO8H_7VApJo/AAAAAAAAAAI/AAAAAAAAFCw/Of-7HvES4dE/photo.jpg?sz=128", "display_name": "danish sodhi", "link": "https://stackoverflow.com/users/6026051/danish-sodhi"}, "edited": false, "score": 0, "creation_date": 1500587138, "post_id": 45225692, "comment_id": 77417705, "body": "@ Willem Van Onsem  This is only a return statement of original function"}, {"owner": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "edited": false, "score": 3, "creation_date": 1500587220, "post_id": 45225692, "comment_id": 77417736, "body": "Mind that <code>return</code> is not really a statement. It is a function. Personally I think <code>return</code> was perhaps not a good name since it create confusion compared to returning in imperative languages."}, {"owner": {"reputation": 1231, "user_id": 6026051, "user_type": "registered", "accept_rate": 71, "profile_image": "https://lh4.googleusercontent.com/-dO8H_7VApJo/AAAAAAAAAAI/AAAAAAAAFCw/Of-7HvES4dE/photo.jpg?sz=128", "display_name": "danish sodhi", "link": "https://stackoverflow.com/users/6026051/danish-sodhi"}, "edited": false, "score": 0, "creation_date": 1500587247, "post_id": 45225692, "comment_id": 77417741, "body": "Oh, Noob to Haskell :)"}, {"owner": {"reputation": 28376, "user_id": 5743988, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/IeSSM.jpg?s=128&g=1", "display_name": "4castle", "link": "https://stackoverflow.com/users/5743988/4castle"}, "edited": false, "score": 2, "creation_date": 1500587914, "post_id": 45225692, "comment_id": 77418014, "body": "Haskell doesn&#39;t have &quot;statements&quot; in the way that imperative languages have. You write the return value of a function by putting things on the right-hand side of an <code>=</code> sign."}, {"owner": {"reputation": 62421, "user_id": 216164, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/786f224adbe0784cdf7d0f15476061fe?s=128&d=identicon&r=PG", "display_name": "Thomas M. DuBuisson", "link": "https://stackoverflow.com/users/216164/thomas-m-dubuisson"}, "edited": false, "score": 7, "creation_date": 1500588069, "post_id": 45225692, "comment_id": 77418077, "body": "We can mitigate the problem posed by the name &quot;return&quot; socially by discouraging <code>return</code> and instead use <code>pure</code>."}], "answers": [{"tags": [], "owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "is_accepted": false, "score": 5, "last_activity_date": 1500591712, "creation_date": 1500591712, "answer_id": 45226510, "question_id": 45225692, "link": "https://stackoverflow.com/questions/45225692/elegant-way-of-returning-from-haskell-function/45226510#45226510", "title": "Elegant way of returning from haskell function?", "body": "<p>I would do it like this:</p>\n\n<pre><code>foo list1 list2 = myfunc list1 ++ list2\n</code></pre>\n\n<p>If you actually need <code>return</code> (which I suspect you don't), then using <code>$</code> might be warranted; but the explicitly parenthesized version is perfectly fine, too:</p>\n\n<pre><code>foo list1 list2 = return (myfunc list1 ++ list2)\nfoo list1 list2 = return $ myfunc list1 ++ list2\n</code></pre>\n"}], "owner": {"reputation": 1231, "user_id": 6026051, "user_type": "registered", "accept_rate": 71, "profile_image": "https://lh4.googleusercontent.com/-dO8H_7VApJo/AAAAAAAAAAI/AAAAAAAAFCw/Of-7HvES4dE/photo.jpg?sz=128", "display_name": "danish sodhi", "link": "https://stackoverflow.com/users/6026051/danish-sodhi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 65, "favorite_count": 0, "answer_count": 1, "score": -1, "last_activity_date": 1500591712, "creation_date": 1500586966, "question_id": 45225692, "link": "https://stackoverflow.com/questions/45225692/elegant-way-of-returning-from-haskell-function", "title": "Elegant way of returning from haskell function?", "body": "<p>Hi I am new to haskell.</p>\n\n<p>I want to return something like</p>\n\n<pre><code>return ((myfunc list1) ++ list2 )\n</code></pre>\n\n<p>here list1 and list2 are two lists and myfunc also returns a list</p>\n\n<p>What would me most elegant way of doing this.Should I use $ operator ? Thanks in advance :)</p>\n"}, {"tags": ["haskell", "pattern-matching", "gadt"], "comments": [{"owner": {"reputation": 51584, "user_id": 839246, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9b0573c2b936b12828dd1e4cc04206dc?s=128&d=identicon&r=PG&f=1", "display_name": "bheklilr", "link": "https://stackoverflow.com/users/839246/bheklilr"}, "edited": false, "score": 3, "creation_date": 1500584717, "post_id": 45225142, "comment_id": 77416697, "body": "You mean <a href=\"http://hackage.haskell.org/package/base-4.9.1.0/docs/Prelude.html#v:uncurry\" rel=\"nofollow noreferrer\">uncurry</a>?"}, {"owner": {"reputation": 4639, "user_id": 3986708, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/g0JCF.jpg?s=128&g=1", "display_name": "hgiesel", "link": "https://stackoverflow.com/users/3986708/hgiesel"}, "reply_to_user": {"reputation": 51584, "user_id": 839246, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9b0573c2b936b12828dd1e4cc04206dc?s=128&d=identicon&r=PG&f=1", "display_name": "bheklilr", "link": "https://stackoverflow.com/users/839246/bheklilr"}, "edited": false, "score": 0, "creation_date": 1500584779, "post_id": 45225142, "comment_id": 77416722, "body": "I don&#39;t see the relation between my concept and currying"}, {"owner": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "edited": false, "score": 0, "creation_date": 1500584792, "post_id": 45225142, "comment_id": 77416734, "body": "&quot;<i>Functions like <code>bool</code></i>&quot;?"}, {"owner": {"reputation": 4639, "user_id": 3986708, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/g0JCF.jpg?s=128&g=1", "display_name": "hgiesel", "link": "https://stackoverflow.com/users/3986708/hgiesel"}, "edited": false, "score": 2, "creation_date": 1500584830, "post_id": 45225142, "comment_id": 77416755, "body": "<code>bool</code> is a function in Haskell defined in <code>Data.Bool</code>"}, {"owner": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "edited": false, "score": 3, "creation_date": 1500584905, "post_id": 45225142, "comment_id": 77416791, "body": "@hgiesel: ah, thanks for the reference :) This actually looks like a <i>catamorphism</i> to me :)"}, {"owner": {"reputation": 4639, "user_id": 3986708, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/g0JCF.jpg?s=128&g=1", "display_name": "hgiesel", "link": "https://stackoverflow.com/users/3986708/hgiesel"}, "edited": false, "score": 0, "creation_date": 1500585241, "post_id": 45225142, "comment_id": 77416924, "body": "I feel more like a catamorphism is a specialized version of what I describe, because a catamorphism works of a function that is <code>(f a -&gt; a)</code>, while this is <code>(f a -&gt; b)</code>"}, {"owner": {"reputation": 28376, "user_id": 5743988, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/IeSSM.jpg?s=128&g=1", "display_name": "4castle", "link": "https://stackoverflow.com/users/5743988/4castle"}, "reply_to_user": {"reputation": 51584, "user_id": 839246, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9b0573c2b936b12828dd1e4cc04206dc?s=128&d=identicon&r=PG&f=1", "display_name": "bheklilr", "link": "https://stackoverflow.com/users/839246/bheklilr"}, "edited": false, "score": 1, "creation_date": 1500585313, "post_id": 45225142, "comment_id": 77416959, "body": "I think @bheklilr is saying that your <code>tuple</code> function is identical to <code>uncurry</code>."}, {"owner": {"reputation": 4639, "user_id": 3986708, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/g0JCF.jpg?s=128&g=1", "display_name": "hgiesel", "link": "https://stackoverflow.com/users/3986708/hgiesel"}, "edited": false, "score": 0, "creation_date": 1500585484, "post_id": 45225142, "comment_id": 77417050, "body": "Ok, I see, yes, he is right."}, {"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 6, "creation_date": 1500585777, "post_id": 45225142, "comment_id": 77417171, "body": "This is indeed a catamorphism, albeit you are using a different choice of type variables. A general cata has type <code>(F a -&gt; a) -&gt; T -&gt; a</code> where <code>T=Fix F</code>. Above, <code>T=Maybe b= 1+b</code> and <code>F a -&gt; a</code> becomes <code>(1+b)-&gt;a</code> which is isomorphic to <code>(a , b-&gt;a)</code> so the cata becomes <code>(a, b-&gt;a) -&gt; Maybe b -&gt; a</code> which is your <code>maybe</code>, except for renamed tyvars and isos/currying."}, {"owner": {"reputation": 4639, "user_id": 3986708, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/g0JCF.jpg?s=128&g=1", "display_name": "hgiesel", "link": "https://stackoverflow.com/users/3986708/hgiesel"}, "reply_to_user": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 2, "creation_date": 1500586649, "post_id": 45225142, "comment_id": 77417515, "body": "@chi I&#39;m sorry, I don&#39;t quite get your answer, could you maybe elaborate it in an answer?"}, {"owner": {"reputation": 14582, "user_id": 2225384, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f30b04ed4d0b3fc4bc791a28815f34ca?s=128&d=identicon&r=PG", "display_name": "Rein Henrichs", "link": "https://stackoverflow.com/users/2225384/rein-henrichs"}, "edited": false, "score": 7, "creation_date": 1500600358, "post_id": 45225142, "comment_id": 77421353, "body": "This is often referred to as <i>Church Encoding</i> but in a typed language it is more properly <i>Boehm-Berarducci Encoding</i>."}, {"owner": {"reputation": 61419, "user_id": 849891, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/MbEO3.png?s=128&g=1", "display_name": "Will Ness", "link": "https://stackoverflow.com/users/849891/will-ness"}, "reply_to_user": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 0, "creation_date": 1500628254, "post_id": 45225142, "comment_id": 77432890, "body": "@chi could you please clarify about the <code>T = Maybe b = Fix F = F a</code> thing?"}, {"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "reply_to_user": {"reputation": 61419, "user_id": 849891, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/MbEO3.png?s=128&g=1", "display_name": "Will Ness", "link": "https://stackoverflow.com/users/849891/will-ness"}, "edited": false, "score": 0, "creation_date": 1500632878, "post_id": 45225142, "comment_id": 77436236, "body": "@WillNess The <code>Maybe b</code> type is not recursive, unlike lists/trees. Hence, it can be seen as a &quot;fixed point&quot; <code>Fix F</code> of the <i>constant</i> type function <code>F a = 1+b</code>, so that  <code>T=Fix F=F(Fix F)=1+b</code> holds trivially, since <code>F a</code> does not depend on <code>a</code>."}, {"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 0, "creation_date": 1500633919, "post_id": 45225142, "comment_id": 77436912, "body": "@hgiesel This is a bit broad. Some discussion can be found in the <a href=\"https://stackoverflow.com/documentation/haskell/2984/recursion-schemes\">documentation</a> but it&#39;s still preliminary, and needs more examples, IMHO. I also answered a related question on <a href=\"https://cs.stackexchange.com/questions/78101/what-are-structural-recursion-primitive-recursion-recursion-combinator-and-rec\">CS.SE</a> yesterday."}, {"owner": {"reputation": 61419, "user_id": 849891, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/MbEO3.png?s=128&g=1", "display_name": "Will Ness", "link": "https://stackoverflow.com/users/849891/will-ness"}, "reply_to_user": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 0, "creation_date": 1500651171, "post_id": 45225142, "comment_id": 77448995, "body": "@chi thank you. the &quot;constant type function&quot; did the trick."}, {"owner": {"reputation": 61419, "user_id": 849891, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/MbEO3.png?s=128&g=1", "display_name": "Will Ness", "link": "https://stackoverflow.com/users/849891/will-ness"}, "edited": false, "score": 1, "creation_date": 1500659627, "post_id": 45225142, "comment_id": 77453768, "body": "@hgiesel also, on simpler level (and this may be obvious), this can be referred to as &quot;case analysis&quot; functions: <code>maybe b f v = case v of Nothing -&gt; b; Just a -&gt; f a</code>. Number of arguments obviously corresponds to the number of cases in the data type definition. Having such functions defined for each datatype obviates the need to have the <code>case</code> primitive as part of a language. One could imagine a language without <code>case</code> expressions, where datatype definition facilities include defining such functions. With tuples there&#39;s only one case, hence case analysis is a no-op: <code>tuple f (x,y) = f x y</code>."}], "answers": [{"tags": [], "owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "is_accepted": true, "score": 4, "last_activity_date": 1500641433, "creation_date": 1500641433, "answer_id": 45238164, "question_id": 45225142, "link": "https://stackoverflow.com/questions/45225142/the-pattern-with-functions-like-bool-either-etc/45238164#45238164", "title": "The pattern with functions like `bool`, `either`, etc", "body": "<p>First, the types you mention are not really GADTs, they are plain ADTs, since the return type of each constructor is always <code>T a</code>. A proper GADT would be something like</p>\n\n<pre><code>data T a where\n   K1 :: T Bool  -- not T a\n</code></pre>\n\n<p>Anyway, the technique you mention is a well known method to encode algebraic data types into (polymorphic) functions. It goes under many names, like Church encoding, Boehm-Berarducci encoding, endcoding as a catamorphism, etc. Sometimes the Yoneda lemma is used to justify this approach, but there's no need to understand the category-theoretic machinery to understand the method.</p>\n\n<p>Basically, the idea is the following. All the ADTs can be generated by</p>\n\n<ul>\n<li>product types <code>(,) a b</code></li>\n<li>sum types <code>Either a b</code></li>\n<li>arrow types <code>a -&gt; b</code></li>\n<li>unit type <code>()</code></li>\n<li>void type <code>Void</code> (rarely used in Haskell, but theoretically nice)</li>\n<li>variables (if the type bing defined has parameters)</li>\n<li>possibly, basic types (<code>Integer</code>, ...)</li>\n<li>type level-recursion</li>\n</ul>\n\n<p>Type level recursion is used when some value constructor takes the type which is being defined as an argument. The classic example is Peano-style naturals:</p>\n\n<pre><code>data Nat where\n   O :: Nat\n   S :: Nat -&gt; Nat\n     -- ^^^ recursive!\n</code></pre>\n\n<p>Lists are also common:</p>\n\n<pre><code>data List a where\n   Nil :: List a\n   Cons :: a -&gt; List a -&gt; List a\n             -- ^^^^^^ recursive!\n</code></pre>\n\n<p>Types like <code>Maybe a</code>, pairs, etc. are non recursive.</p>\n\n<p>Note that each ADT, recursive or not, can be reduced to a single constructor with a sigle argument, by summing (<code>Either</code>) over all the constructors, and multiplying all the arguments. For instance, <code>Nat</code> is isomorphic to</p>\n\n<pre><code>data Nat1 where\n  O1 :: () -&gt; Nat\n  S1 :: Nat -&gt; Nat\n</code></pre>\n\n<p>which is isomorphic to</p>\n\n<pre><code>data Nat2 where K2 :: (Either () Nat) -&gt; Nat\n</code></pre>\n\n<p>Lists become</p>\n\n<pre><code>data List1 a where K1 :: (Either () (a, List a)) -&gt; List a\n</code></pre>\n\n<p>The steps above make use of the algebra of types, which makes the sum and products of types obey the same rules as high school algebra, while <code>a -&gt; b</code> behaves like the exponential <code>b^a</code>.</p>\n\n<p>Hence, we can write any ADT in the form</p>\n\n<pre><code>-- pseudo code\ndata T where\n   K :: F T -&gt; T\ntype F k = .....\n</code></pre>\n\n<p>For instance</p>\n\n<pre><code>type F_Nat k = Either () k      -- for T = Nat\ntype F_List_a k = Either () (a, k) -- for T = List a\n</code></pre>\n\n<p>(Note that the latter type function <code>F</code> depends on <code>a</code>, but it's not important right now.)</p>\n\n<p>Non recursive types will not use <code>k</code>:</p>\n\n<pre><code>type F_Maybe_a k = Either () a     -- for T = Maybe a\n</code></pre>\n\n<p>Note that constructor <code>K</code> above makes the type <code>T</code> isomorphic to <code>F T</code> (let's ignore the lifting / extra bottom introduced by it). Essentially, we have that</p>\n\n<pre><code>Nat ~= F Nat = Either () Nat\nList a ~= F (List a) = Either () (a, List a)\nMaybe a ~= F (Maybe a) = Either () a\n</code></pre>\n\n<p>We can even formalize this further by abstracting from <code>F</code></p>\n\n<pre><code>newtype Fix f = Fix { unFix :: f (Fix f) }\n</code></pre>\n\n<p>By definition <code>Fix F</code> will now be isomorphic to <code>F (Fix F)</code>. We could let</p>\n\n<pre><code>type Nat = Fix F_Nat\n</code></pre>\n\n<p>(In Haskell, we need a newtype wrapper around <code>F_Nat</code>, which I omit for clarity.)</p>\n\n<p>Finally, the general encoding, or catamorphism, is:</p>\n\n<pre><code>cata :: (F k -&gt; k) -&gt; Fix F -&gt; k\n</code></pre>\n\n<p>This assumes that <code>F</code> is a functor.</p>\n\n<p>For <code>Nat</code>, we get</p>\n\n<pre><code>cata :: (Either () k -&gt; k) -&gt; Nat -&gt; k\n-- isomorphic to\ncata :: (() -&gt; k, k -&gt; k) -&gt; Nat -&gt; k\n-- isomorphic to\ncata :: (k, k -&gt; k) -&gt; Nat -&gt; k\n-- isomorphic to\ncata :: k -&gt; (k -&gt; k) -&gt; Nat -&gt; k\n</code></pre>\n\n<p>Note the \"high school albegra\" steps, where <code>k^(1+k) = k^1 * k^k</code>, hence <code>Either () k -&gt; k ~= (() -&gt; k, k -&gt; k)</code>.</p>\n\n<p>Note that we get two arguments, <code>k</code> and <code>k-&gt;k</code> which correspond to <code>O</code> and <code>S</code>. This is not a coincidence -- we summed over all the constructors. This means that <code>cata</code> expects to be passed the value of type <code>k</code> which \"plays the role of <code>O</code>\" there, and then the value of type <code>k -&gt; k</code> which plays the role of <code>S</code>.</p>\n\n<p>More informally, <code>cata</code> is telling us that, if we want to map a natural in <code>k</code>, we only have to state what is the \"zero\" inside <code>k</code> and how to take the \"successor\" in <code>k</code>, and then every <code>Nat</code> can be mapped consequently.</p>\n\n<p>For lists we get:</p>\n\n<pre><code>cata :: (Either () (a, k) -&gt; k) -&gt; List a -&gt; k\n-- isomorphic to\ncata :: (() -&gt; k, (a, k) -&gt; k) -&gt; List a -&gt; k\n-- isomorphic to\ncata :: (k, a -&gt; k -&gt; k) -&gt; List a -&gt; k\n-- isomorphic to\ncata :: k -&gt; (a -&gt; k -&gt; k) -&gt; List a -&gt; k\n</code></pre>\n\n<p>which is <code>foldr</code>.</p>\n\n<p>Again, this is <code>cata</code> telling us that, if we state how to take the \"empty list\" in <code>k</code> and to \"cons\" <code>a</code> and <code>k</code> inside <code>k</code>, we can map any list in <code>k</code>.</p>\n\n<p><code>Maybe a</code> is the same:</p>\n\n<pre><code>cata :: (Either () a -&gt; k) -&gt; Maybe a -&gt; k\n-- isomorphic to\ncata :: (() -&gt; k, a -&gt; k) -&gt; Maybe a -&gt; k\n-- isomorphic to\ncata :: (k, a -&gt; k) -&gt; Maybe a -&gt; k\n-- isomorphic to\ncata :: k -&gt; (a -&gt; k) -&gt; Maybe a -&gt; k\n</code></pre>\n\n<p>If we can map <code>Nothing</code> in <code>k</code>, and perform <code>Just</code> mapping <code>a</code> in <code>k</code>, the we can map any <code>Maybe a</code> in <code>k</code>.</p>\n\n<p>If we try to apply the same approach to <code>Bool</code> and <code>(a,b)</code> we reach the functions which were posted in the questions.</p>\n\n<p>More advanced theoretical topics to look up:</p>\n\n<ul>\n<li>(initial) F-algebras in category theory</li>\n<li>eliminators / recursors / induction principles in type theory (these can be applied to GADTs as well)</li>\n</ul>\n"}], "owner": {"reputation": 4639, "user_id": 3986708, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/g0JCF.jpg?s=128&g=1", "display_name": "hgiesel", "link": "https://stackoverflow.com/users/3986708/hgiesel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 316, "favorite_count": 0, "accepted_answer_id": 45238164, "answer_count": 1, "score": 11, "last_activity_date": 1501183770, "creation_date": 1500584614, "last_edit_date": 1501183770, "question_id": 45225142, "link": "https://stackoverflow.com/questions/45225142/the-pattern-with-functions-like-bool-either-etc", "title": "The pattern with functions like `bool`, `either`, etc", "body": "<p>I recently learned about <a href=\"https://en.wikibooks.org/wiki/Haskell/GADT\" rel=\"nofollow noreferrer\"><code>GADTs</code></a> and their notation:</p>\n\n<p>E.g.</p>\n\n<pre><code>data Maybe a where\n  Nothing :: Maybe a\n  Just    :: a -&gt; Maybe a\n\ndata Either a b where\n  Left  :: a -&gt; Either a b\n  Right :: b -&gt; Either a b\n\ndata Bool where\n  False :: Bool\n  True  :: Bool\n</code></pre>\n\n<p>Now I noticed a similiarity to functions like <a href=\"https://hackage.haskell.org/package/base-4.9.1.0/docs/Data-Bool.html#v:bool\" rel=\"nofollow noreferrer\"><code>bool</code></a>, and <a href=\"https://hackage.haskell.org/package/base-4.9.1.0/docs/Data-Either.html#v:either\" rel=\"nofollow noreferrer\"><code>either</code></a>, which is basically just like the <code>GADT</code> definition:</p>\n\n<ol>\n<li>taking every line as an argument</li>\n<li>replacing the actual type with the next letter of the alphabet</li>\n<li>and finally returning a function <code>Type -&gt; (the letter of step 2)</code></li>\n</ol>\n\n<p>E.g.</p>\n\n<pre><code>maybe  :: b -&gt; (a -&gt; b) -&gt; Maybe a -&gt; b\neither :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c\nbool   :: a -&gt; a -&gt; Bool -&gt; a\n</code></pre>\n\n<p>This also includes <code>foldr</code>, but I noticed that e.g. Tuple doesn't have such a function, though you could easily define it:</p>\n\n<pre><code>tuple :: (a -&gt; b -&gt; c) -&gt; (a,b) -&gt; c\ntuple f (x,y) = f x y\n</code></pre>\n\n<p>What is this pattern? It seems to me these functions alleviate the need for pattern matching (because they give a general way for each case) and thus <em>every</em> function operating on the type can be defined in terms of this function.</p>\n"}, {"tags": ["haskell", "types", "constraints"], "comments": [{"owner": {"reputation": 13734, "user_id": 938694, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/b6678a430a805dd78366d6e135b49f2d?s=128&d=identicon&r=PG", "display_name": "Cubic", "link": "https://stackoverflow.com/users/938694/cubic"}, "edited": false, "score": 0, "creation_date": 1500573515, "post_id": 45220435, "comment_id": 77410224, "body": "I&#39;m not sure where you got &quot;in the context of from&quot;. What it means is closer to &quot;If the constraints on the left side are met, a function with the type given of the right side exists&quot;."}], "answers": [{"comments": [{"owner": {"reputation": 7463, "user_id": 1145760, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/065408758852145010d28c2aa811ca68?s=128&d=identicon&r=PG", "display_name": "Vorac", "link": "https://stackoverflow.com/users/1145760/vorac"}, "edited": false, "score": 0, "creation_date": 1500575849, "post_id": 45220539, "comment_id": 77411635, "body": "So <code>Foo a, Bar a =&gt; a -&gt; Int</code> expects a to be either of type class Foo or Bar? What about the next part of the signature - why is <code>v</code> specified as a tuple, instead of just <code>v</code>, for we have already constrained it?"}, {"owner": {"reputation": 51584, "user_id": 839246, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9b0573c2b936b12828dd1e4cc04206dc?s=128&d=identicon&r=PG&f=1", "display_name": "bheklilr", "link": "https://stackoverflow.com/users/839246/bheklilr"}, "reply_to_user": {"reputation": 7463, "user_id": 1145760, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/065408758852145010d28c2aa811ca68?s=128&d=identicon&r=PG", "display_name": "Vorac", "link": "https://stackoverflow.com/users/1145760/vorac"}, "edited": false, "score": 0, "creation_date": 1500576128, "post_id": 45220539, "comment_id": 77411817, "body": "That would say that <code>a</code> has to have implementations for both <code>Foo</code> <i>and</i> <code>Bar</code>, not either.  The constraint is given with &quot;tuple syntax&quot; because that&#39;s the syntax for multiple constraints.  You would actually have to do <code>(Foo a, Bar a) =&gt; a -&gt; Int</code>, without the parens it won&#39;t compile.  What I&#39;m saying above is that <code>v</code> is constrained to be a generic <code>Vector</code> that is capable of holding <code>(Double, Double)</code> or <code>Double</code>.  This does not mean that there is a vector whose elements are simultaneously <code>(Double, Double)</code> and <code>Double</code> (I&#39;m thinking about Python being able to do <code>[(1.0, 2.0), 3.0]</code>)."}, {"owner": {"reputation": 7463, "user_id": 1145760, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/065408758852145010d28c2aa811ca68?s=128&d=identicon&r=PG", "display_name": "Vorac", "link": "https://stackoverflow.com/users/1145760/vorac"}, "edited": false, "score": 0, "creation_date": 1500577369, "post_id": 45220539, "comment_id": 77412553, "body": "Python - the C of functional programming."}], "tags": [], "owner": {"reputation": 51584, "user_id": 839246, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9b0573c2b936b12828dd1e4cc04206dc?s=128&d=identicon&r=PG&f=1", "display_name": "bheklilr", "link": "https://stackoverflow.com/users/839246/bheklilr"}, "is_accepted": true, "score": 10, "last_activity_date": 1500569013, "last_edit_date": 1500569013, "creation_date": 1500568678, "answer_id": 45220539, "question_id": 45220435, "link": "https://stackoverflow.com/questions/45220435/what-is-this-type/45220539#45220539", "title": "What is this type?", "body": "<p>The <code>Data.Vector.Generic.Vector</code> typeclass takes two type arguments, <code>v</code> and <code>a</code> where <code>v :: * -&gt; *</code> is the type of the container and <code>a :: *</code> is the type of the elements in the container.  This is simply a generic interface for the vector types defined in the <code>vector</code> package, notably <code>Data.Vector.Unboxed.Vector</code>.</p>\n\n<p>This is essentially saying that the type <code>v</code> must be able to hold <code>(Double, Double)</code> and <code>Double</code>, although not simultaneously.  If you were to use <code>v ~ Data.Vector.Unboxed.Vector</code> then this works just fine.  The reason is due to the implementation of <code>correlation</code>, which uses <a href=\"https://hackage.haskell.org/package/vector-0.12.0.1/docs/Data-Vector-Generic.html#v:unzip\" rel=\"noreferrer\"><code>unzip</code></a>.  This function splits a <code>v (a, b)</code> into <code>(v a, v b)</code>.  Since <code>correlation</code> is working on <code>v (Double, Double)</code>, it needs the additional constraint that <code>v</code> can hold <code>Double</code>s.</p>\n\n<p>This generic type is meant to make the <code>correlation</code> function work with more types than <code>Data.Vector.Vector</code>, including any vector style types that might be implemented in other libraries.</p>\n\n<hr>\n\n<p>I want to stress that these constraints</p>\n\n<pre><code>Data.Vector.Generic.Vector v (Double, Double)\nData.Vector.Generic.Vector v Double\n</code></pre>\n\n<p>State that whatever type you choose for <code>v</code> is capable of holding <code>(Double, Double)</code> and is also capable of holding <code>Double</code>.  This is specifying certain prerequisites for your vector type, not the actual contents of the vector.  The actual contents of the vector is specified in the first argument to the <code>correlation</code> function.</p>\n"}], "owner": {"reputation": 7463, "user_id": 1145760, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/065408758852145010d28c2aa811ca68?s=128&d=identicon&r=PG", "display_name": "Vorac", "link": "https://stackoverflow.com/users/1145760/vorac"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 120, "favorite_count": 0, "accepted_answer_id": 45220539, "answer_count": 1, "score": 6, "last_activity_date": 1500569013, "creation_date": 1500568264, "question_id": 45220435, "link": "https://stackoverflow.com/questions/45220435/what-is-this-type", "title": "What is this type?", "body": "<p>Haskell novice here. I know from <a href=\"https://www.haskell.org/tutorial/classes.html\" rel=\"noreferrer\">type classes</a> that <code>=&gt;</code>means \"in the context of\". Yet, I can't read the following type, found in module <a href=\"https://hackage.haskell.org/package/statistics-0.14.0.2/docs/Statistics-Sample.html#v:correlation\" rel=\"noreferrer\">Statistics.Sample</a></p>\n\n<pre><code>(Vector v (Double, Double), Vector v Double) =&gt; v (Double, Double) -&gt; Double\n</code></pre>\n\n<p>What constraints are being applied on <code>v</code> left of <code>=&gt;</code> ?</p>\n"}, {"tags": ["haskell", "monoids"], "comments": [{"owner": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "edited": false, "score": 0, "creation_date": 1500547628, "post_id": 45212423, "comment_id": 77390842, "body": "Well the question actually already partially contains the answer: what operation will you pick? There is no inherent better one. <code>Monoid</code> is defined for types where it makes sense to have a straight forward &quot;correct&quot; operation."}, {"owner": {"reputation": 97, "user_id": 8212844, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/236833266ffeedd6f562a9f5e4f2fae4?s=128&d=identicon&r=PG", "display_name": "IPiiro", "link": "https://stackoverflow.com/users/8212844/ipiiro"}, "reply_to_user": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "edited": false, "score": 0, "creation_date": 1500548013, "post_id": 45212423, "comment_id": 77391117, "body": "So because you could pick <code>(*)</code> and <code>(+)</code> as operation for it, it makes no sense ? Excuse me but I kinda don&#39;t really understand the problem"}, {"owner": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "edited": false, "score": 1, "creation_date": 1500548162, "post_id": 45212423, "comment_id": 77391212, "body": "@IPirro: the problem is that you can only define <i>one</i> instance per type. So if you pick <code>(+)</code>, you cannot pick <code>(*)</code> and vice versa. In mathematics, a monoid is a 3-tuple: <code>(S,+,e)</code> with <code>S</code> the set, <code>+</code> the operation, and <code>e</code> the identity. But there can be multiple monoids with the same set, operation and/or identity element."}, {"owner": {"reputation": 97, "user_id": 8212844, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/236833266ffeedd6f562a9f5e4f2fae4?s=128&d=identicon&r=PG", "display_name": "IPiiro", "link": "https://stackoverflow.com/users/8212844/ipiiro"}, "reply_to_user": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "edited": false, "score": 1, "creation_date": 1500548306, "post_id": 45212423, "comment_id": 77391314, "body": "Ok so just to be correct, Integer and Double wouldn&#39;t also not be instances of the Monoid class ? Oh alright that explanation is good"}, {"owner": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "edited": false, "score": 1, "creation_date": 1500548388, "post_id": 45212423, "comment_id": 77391361, "body": "based on the query <code>:i Monoid</code>, I get that <code>[a]</code>, <code>Ordering</code>, <code>Maybe a</code>, and <code>a -&gt; b</code> are monoids (as well as tuples given the elements of the tuples are monoids). So indeed, <code>Integer</code> is not a monoid."}, {"owner": {"reputation": 1496, "user_id": 7350814, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/bd7e1bdad619c54ab51e05ff9cfaa199?s=128&d=identicon&r=PG&f=1", "display_name": "Jogger", "link": "https://stackoverflow.com/users/7350814/jogger"}, "edited": false, "score": 0, "creation_date": 1500715904, "post_id": 45212423, "comment_id": 77470076, "body": "@IPiiro: It&#39;s the same as with <i>Int</i> or <i>Integer</i>. The reasons why <i>Int</i> has no default Monoid instance is mentioned in every tutorial on Monoids."}], "answers": [{"comments": [{"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 0, "creation_date": 1500575713, "post_id": 45212547, "comment_id": 77411561, "body": "I know addition isn&#39;t associative for floating-point. Why isn&#39;t multiplication? Something about normalization or NaN?"}, {"owner": {"reputation": 75362, "user_id": 625403, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/786eed7da67079cb5d63a49d469af25b?s=128&d=identicon&r=PG", "display_name": "amalloy", "link": "https://stackoverflow.com/users/625403/amalloy"}, "reply_to_user": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 2, "creation_date": 1500580668, "post_id": 45212547, "comment_id": 77414418, "body": "@dfeuer Consider something like <code>(x*y)*(1&#47;y)</code>, compared to <code>x*(y*(1&#47;y))</code>, where <code>x*y</code> is too large to fit in a float (ie, evaluates to Infinity). After you get to Infinity, dividing by y no longer gets you back to x. There are probably similar issues when <code>x*y</code> is simply large enough to lose the precision that <code>x</code> alone had, so that when you divide by <code>y</code> again you can&#39;t get back all the information <code>x</code> had, even though you land in the same neighborhood."}, {"owner": {"reputation": 181215, "user_id": 82294, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/5c5f910416e2b92bb73fa59c56fe695d?s=128&d=identicon&r=PG", "display_name": "Dietrich Epp", "link": "https://stackoverflow.com/users/82294/dietrich-epp"}, "reply_to_user": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 1, "creation_date": 1500588560, "post_id": 45212547, "comment_id": 77418244, "body": "@dfeuer: Also, rounding will cause <code>x*(y*z) != (x*y)*z</code>."}, {"owner": {"reputation": 15757, "user_id": 176841, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/45a168cb9eb8454d66c78f18e29d9342?s=128&d=identicon&r=PG", "display_name": "jberryman", "link": "https://stackoverflow.com/users/176841/jberryman"}, "edited": false, "score": 1, "creation_date": 1500588643, "post_id": 45212547, "comment_id": 77418288, "body": "I want to emphasize that the decision not to give the numeric types <code>Monoid</code> instances is extremely subjective. The haskell ecosystem is by no means consistent if the rule is &quot;only obviously correct instances, else newtype wrapper&quot; <code>Maybe</code> and lists for instance both have equally obvious alternatives for instance."}, {"owner": {"reputation": 181215, "user_id": 82294, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/5c5f910416e2b92bb73fa59c56fe695d?s=128&d=identicon&r=PG", "display_name": "Dietrich Epp", "link": "https://stackoverflow.com/users/82294/dietrich-epp"}, "reply_to_user": {"reputation": 15757, "user_id": 176841, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/45a168cb9eb8454d66c78f18e29d9342?s=128&d=identicon&r=PG", "display_name": "jberryman", "link": "https://stackoverflow.com/users/176841/jberryman"}, "edited": false, "score": 0, "creation_date": 1500612033, "post_id": 45212547, "comment_id": 77423993, "body": "@jberryman: I can understand Maybe but lists are basically the free monoid for sets to begin with."}], "tags": [], "owner": {"reputation": 181215, "user_id": 82294, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/5c5f910416e2b92bb73fa59c56fe695d?s=128&d=identicon&r=PG", "display_name": "Dietrich Epp", "link": "https://stackoverflow.com/users/82294/dietrich-epp"}, "is_accepted": true, "score": 6, "last_activity_date": 1500547700, "creation_date": 1500547700, "answer_id": 45212547, "question_id": 45212423, "link": "https://stackoverflow.com/questions/45212423/why-float-is-not-instance-of-the-monoid-type-class/45212547#45212547", "title": "Why Float is not instance of the Monoid type class?", "body": "<p>Which monoid is are you talking about? Sum? Product?</p>\n\n<p>These are already available by wrapping the type with the <code>newtype</code> <code>Sum</code> or <code>Product</code>. But you are correct that addition and multiplication are not associative for floating-point numbers. That's somewhat a different issue, however. The issue is that there's not an obvious \"correct\" monoid to choose by default. </p>\n"}], "owner": {"reputation": 97, "user_id": 8212844, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/236833266ffeedd6f562a9f5e4f2fae4?s=128&d=identicon&r=PG", "display_name": "IPiiro", "link": "https://stackoverflow.com/users/8212844/ipiiro"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 267, "favorite_count": 0, "accepted_answer_id": 45212547, "answer_count": 1, "score": 0, "last_activity_date": 1500547700, "creation_date": 1500547294, "question_id": 45212423, "link": "https://stackoverflow.com/questions/45212423/why-float-is-not-instance-of-the-monoid-type-class", "title": "Why Float is not instance of the Monoid type class?", "body": "<p>My question is why Float is not readily defined to be an instance of the Monoid type class ?\nI mean what is against it ? Doesn't Floats have the <em>identity element</em> and if no why? Also the operations <code>(*)</code> and <code>(+)</code> are associative in the set of Floats, or ?</p>\n"}, {"tags": ["haskell", "logging", "hslogger"], "comments": [{"owner": {"reputation": 20980, "user_id": 241990, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/265f1d52e6e484c9abe60b4da20fb8ee?s=128&d=identicon&r=PG", "display_name": "Shaun the Sheep", "link": "https://stackoverflow.com/users/241990/shaun-the-sheep"}, "edited": false, "score": 1, "creation_date": 1500560932, "post_id": 45212254, "comment_id": 77401623, "body": "The hs-logger &quot;Simple&quot; option doesn&#39;t seem to provide anything to deal with log files. I prefer to just let the OS deal with how logs are stored. On a Linux system I&#39;m using <code>monad-logger</code>, with <code>stderr</code> logging. I run my server via <code>systemd</code> and it handles everything to do with log storage."}], "owner": {"reputation": 410, "user_id": 3927886, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/689a75ec29af93dcc938fdbd5f039b54?s=128&d=identicon&r=PG&f=1", "display_name": "RamiroPastor", "link": "https://stackoverflow.com/users/3927886/ramiropastor"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 60, "favorite_count": 0, "answer_count": 0, "score": 2, "last_activity_date": 1500563700, "creation_date": 1500546817, "last_edit_date": 1500563700, "question_id": 45212254, "link": "https://stackoverflow.com/questions/45212254/do-i-need-a-scheduler-to-create-daily-log-files-with-the-hslogger-library-of-has", "title": "Do i need a scheduler to create daily log files with the hslogger library of Haskell?", "body": "<p>First of all, this is my first experience ever with logs; and i don't really know what a scheduler is, only heard about them.</p>\n\n<p>Now, as a first approach, i want to make a file with only important logs (<code>WARNING</code> or above), and daily files (like <code>2017-7-20.log</code>) for all possible logged messages that day.</p>\n\n<p>This is my code atm:</p>\n\n<pre><code>module Utilities.Loggers where\n\n\nimport System.Log.Logger\n-- import System.Log.Handler.Syslog   (TODO: remote logs)\nimport System.Log.Handler.Simple\nimport System.Log.Handler (LogHandler, setFormatter)\nimport System.Log.Formatter\nimport Data.Time\nimport GHC.IO.Handle (Handle)\n\n\n--------------------------------------------\n\nimportantLogsPath :: FilePath\nimportantLogsPath = \"app/logs/prioritary.log\"\n\nlogsFolder :: FilePath\nlogsFolder = \"app/logs/allLogs/\"\n\n\ndefaultFormat :: LogFormatter a\ndefaultFormat = simpleLogFormatter \"[$utcTime : $tid : $loggername : $prio] $msg\"\n\napplyFormat :: LogHandler a =&gt; a -&gt; a\napplyFormat h = setFormatter h defaultFormat\n--------------------------------------------\n\n\nprioritaryHandler :: IO (GenericHandler Handle)\nprioritaryHandler = applyFormat &lt;$&gt; prioritaryHandler'\n    where\n        prioritaryHandler' = fileHandler importantLogsPath WARNING\n\n\ntodaysHandler :: UTCTime -&gt;  IO (GenericHandler Handle)\ntodaysHandler = (applyFormat &lt;$&gt;) . todaysHandler'\n    where\n        todaysHandler' time = fileHandler (mkPath time) DEBUG\n        mkPath time = logsFolder ++ show (utctDay time) ++ \".log\"\n\n\n--------------------------------------------\n\n\ninitLogger :: IO ()\ninitLogger = do\n    h1 &lt;- prioritaryHandler\n    timeNow &lt;- getCurrentTime\n    h2 &lt;- todaysHandler timeNow\n    updateGlobalLogger \"MyApp\" (setHandlers [h2,h1])\n</code></pre>\n\n<p>If i understood correctly, each handle \"listens\" for possible messages  that are above its priority level (daily handles have the DEBUG priority, the lowest possible, so they should catch every message)</p>\n\n<p>So i need something that everyday at 00:00 utctime removes the handle for the passing day and adds the handle for the new day, right?</p>\n\n<p>Also i'm a bit puzzled with the naming issues for loggers/messages, but that's just me (althout any insight will be welcome)</p>\n\n<hr>\n\n<p>Edit: it's a web server</p>\n"}, {"tags": ["haskell", "typeclass", "haskell-lens", "newtype", "deriving"], "answers": [{"comments": [{"owner": {"reputation": 1972, "user_id": 1747134, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/696bad3bd2c5e16ded04f3cdf436623f?s=128&d=identicon&r=PG", "display_name": "user1747134", "link": "https://stackoverflow.com/users/1747134/user1747134"}, "edited": false, "score": 0, "creation_date": 1500714040, "post_id": 45212244, "comment_id": 77469590, "body": "Thanks, this is acceptable solution for me. I suppose it has zero runtime overhead, right? Is there still any hope to do this using the <code>deriving</code> mechanism somehow?"}, {"owner": {"reputation": 24211, "user_id": 1364288, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/JVtNl.png?s=128&g=1", "display_name": "danidiaz", "link": "https://stackoverflow.com/users/1364288/danidiaz"}, "reply_to_user": {"reputation": 1972, "user_id": 1747134, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/696bad3bd2c5e16ded04f3cdf436623f?s=128&d=identicon&r=PG", "display_name": "user1747134", "link": "https://stackoverflow.com/users/1747134/user1747134"}, "edited": false, "score": 0, "creation_date": 1500750149, "post_id": 45212244, "comment_id": 77479828, "body": "@user1747134 It is a newtype, so I guess it won&#39;t have overhead. I don&#39;t think there&#39;s a way to use <code>deriving</code> though."}], "tags": [], "owner": {"reputation": 24211, "user_id": 1364288, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/JVtNl.png?s=128&g=1", "display_name": "danidiaz", "link": "https://stackoverflow.com/users/1364288/danidiaz"}, "is_accepted": true, "score": 1, "last_activity_date": 1500547093, "last_edit_date": 1500547093, "creation_date": 1500546782, "answer_id": 45212244, "question_id": 45210217, "link": "https://stackoverflow.com/questions/45210217/a-typecheck-errors-in-deriving-wrapper-for-linear-v/45212244#45212244", "title": "A typecheck errors in deriving wrapper for Linear.V", "body": "<p>You are almost there. The remaining problem is transforming the <code>ix</code> <a href=\"http://hackage.haskell.org/package/lens-4.15.3/docs/Control-Lens-Type.html#t:Traversal\" rel=\"nofollow noreferrer\">traversal</a> for the underlying <code>V n Foo</code>, which ultimately returns a function <code>V n Foo -&gt; f (V n Foo)</code>, into an <code>ix</code> traversal for the wrapper type <code>Bar n</code>, which should ultimately return a function <code>Bar n -&gt; f (Bar n)</code>. We have to \"unpack\" the definition of <a href=\"http://hackage.haskell.org/package/lens-4.15.2/docs/Control-Lens-Type.html#t:Traversal-39-\" rel=\"nofollow noreferrer\"><code>Traversal'</code></a> to know this.</p>\n\n<p>In your code, <code>ix i f v</code> has type <code>f (V n Foo)</code>, so it is enough to <code>fmap</code> with the <code>Bar</code> constructor:</p>\n\n<pre><code>type instance Index (Bar n) = Int\ntype instance IxValue (Bar n) = Foo\n\ninstance Ixed (Bar n) where\n  ix i f (Bar v) = fmap Bar (ix i f v)\n</code></pre>\n"}], "owner": {"reputation": 1972, "user_id": 1747134, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/696bad3bd2c5e16ded04f3cdf436623f?s=128&d=identicon&r=PG", "display_name": "user1747134", "link": "https://stackoverflow.com/users/1747134/user1747134"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 59, "favorite_count": 0, "accepted_answer_id": 45212244, "answer_count": 1, "score": 0, "last_activity_date": 1500547093, "creation_date": 1500541709, "last_edit_date": 1500543498, "question_id": 45210217, "link": "https://stackoverflow.com/questions/45210217/a-typecheck-errors-in-deriving-wrapper-for-linear-v", "title": "A typecheck errors in deriving wrapper for Linear.V", "body": "<p>I am trying to make a newtype wrapper for the <a href=\"https://hackage.haskell.org/package/linear-1.20.6/docs/Linear-V.html\" rel=\"nofollow noreferrer\">Linear.V</a> type and derive useful instances. I was trying this:</p>\n\n<pre><code>{-# LANGUAGE DataKinds, PolyKinds, ScopedTypeVariables, \nStandaloneDeriving, FlexibleContexts, UndecidableInstances, \nGeneralizedNewtypeDeriving, PartialTypeSignatures, TypeFamilies #-}\n\nimport Linear.V \nimport Control.Lens.At\n\ndata Foo = Foo1 | Foo2 deriving (Show, Eq)\n</code></pre>\n\n<p>Attempt 1 - I would think GeneralizedNewtypeDeriving would do, but nope:</p>\n\n<pre><code>newtype Bar n = Bar {\n  getBar :: V n Foo\n} deriving (Show, Eq, Ixed)\n</code></pre>\n\n<p>I get this error:</p>\n\n<pre><code>    \u2022 Couldn't match representation of type \u2018f (V n Foo)\u2019\n                               with that of \u2018f (Bar n)\u2019\n        arising from the coercion of the method \u2018ix\u2019\n          from type \u2018Index (V n Foo)\n                     -&gt; Control.Lens.Type.Traversal' (V n Foo) (IxValue (V n Foo))\u2019\n            to type \u2018Index (Bar n)\n                     -&gt; Control.Lens.Type.Traversal' (Bar n) (IxValue (Bar n))\u2019\n      NB: We cannot know what roles the parameters to \u2018f\u2019 have;\n        we must assume that the role is nominal\n    \u2022 When deriving the instance for (Ixed (Bar n))\n</code></pre>\n\n<p>I have made attempt 2 using standalone deriving like this:</p>\n\n<pre><code>newtype Bar n = Bar {\n  getBar :: V n Foo\n} deriving (Show, Eq)\ntype instance Index (Bar n) = Int\ntype instance IxValue (Bar n) = Foo\n\nderiving instance Ixed (V n Foo) =&gt; Ixed (Bar n)\n</code></pre>\n\n<p>But then I got a different error:</p>\n\n<pre><code>\u2022 Couldn't match representation of type \u2018f1 (V n Foo)\u2019\n                           with that of \u2018f1 (Bar n)\u2019\n    arising from a use of \u2018GHC.Prim.coerce\u2019\n  NB: We cannot know what roles the parameters to \u2018f1\u2019 have;\n    we must assume that the role is nominal\n\u2022 In the expression:\n    GHC.Prim.coerce\n      @(Index (V n Foo)\n        -&gt; Control.Lens.Type.Traversal' (V n Foo) (IxValue (V n Foo)))\n      @(Index (Bar n)\n        -&gt; Control.Lens.Type.Traversal' (Bar n) (IxValue (Bar n)))\n      ix\n  In an equation for \u2018ix\u2019:\n      ix\n        = GHC.Prim.coerce\n            @(Index (V n Foo)\n              -&gt; Control.Lens.Type.Traversal' (V n Foo) (IxValue (V n Foo)))\n            @(Index (Bar n)\n              -&gt; Control.Lens.Type.Traversal' (Bar n) (IxValue (Bar n)))\n            ix\n  When typechecking the code for \u2018ix\u2019\n    in a derived instance for \u2018Ixed (Bar n)\u2019:\n    To see the code I am typechecking, use -ddump-deriv\n  In the instance declaration for \u2018Ixed (Bar n)\u2019\n\u2022 Relevant bindings include\n    ix :: Index (Bar n)\n          -&gt; Control.Lens.Type.Traversal' (Bar n) (IxValue (Bar n))\n      (bound at a.hs:12:1)\n</code></pre>\n\n<p>I am unsure why either of the errors actually happens. Could this be done somehow? I am not so experienced with the advanced type level features and so far I was also unable to actually write this particular instance definition manually, so I would consider that a solution as well. But I would prefer to use the <code>deriving</code> mechanism somehow, since it seems more reusable.</p>\n\n<p>EDIT: I have tried this manual instance decalaration:</p>\n\n<pre><code>type instance Index (Bar n) = Int\ntype instance IxValue (Bar n) = Foo\n\ninstance Ixed (Bar n) where\n  ix i f (Bar v) = ix i f v\n</code></pre>\n\n<p>But that yield the following error:</p>\n\n<pre><code>\u2022 Couldn't match type \u2018V n Foo\u2019 with \u2018Bar n\u2019\n  Expected type: f (Bar n)\n    Actual type: f (V n Foo)\n\u2022 In the expression: ix i f v\n  In an equation for \u2018ix\u2019: ix i f (Bar v) = ix i f v\n  In the instance declaration for \u2018Ixed (Bar n)\u2019\n\u2022 Relevant bindings include\n    v :: V n Foo (bound at a.hs:14:15)\n    f :: IxValue (Bar n) -&gt; f (IxValue (Bar n)) (bound at a.hs:14:8)\n    i :: Index (Bar n) (bound at a.hs:14:6)\n    ix :: Index (Bar n)\n          -&gt; Control.Lens.Type.Traversal' (Bar n) (IxValue (Bar n))\n      (bound at a.hs:14:3)\n</code></pre>\n\n<p>Which seems to me like that the compiler can't figure out that the <code>Index</code> of both <code>V n Foo</code> and <code>Bar n</code> is <code>Int</code>. But I am not sure about that.</p>\n"}, {"tags": ["haskell"], "comments": [{"owner": {"reputation": 1079, "user_id": 3980985, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/420d11e24da591e6af471495d6eac9b0?s=128&d=identicon&r=PG", "display_name": "Keith M", "link": "https://stackoverflow.com/users/3980985/keith-m"}, "edited": false, "score": 0, "creation_date": 1500521991, "post_id": 45204600, "comment_id": 77375930, "body": "May want to also ask this on the code review stack exchange :)"}, {"owner": {"reputation": 23444, "user_id": 414413, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/6de2113f01432aa844dc85070ff33e89?s=128&d=identicon&r=PG", "display_name": "Cirdec", "link": "https://stackoverflow.com/users/414413/cirdec"}, "edited": false, "score": 0, "creation_date": 1500529323, "post_id": 45204600, "comment_id": 77378449, "body": "I&#39;m not seeing how <code>TreeMap a</code> is equivalent to <code>[(Tree, a)]</code>."}, {"owner": {"reputation": 420, "user_id": 6496011, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f5da204ac4ee7e380ab27daa05996a2a?s=128&d=identicon&r=PG&f=1", "display_name": "Antisthenes", "link": "https://stackoverflow.com/users/6496011/antisthenes"}, "edited": false, "score": 1, "creation_date": 1500541346, "post_id": 45204600, "comment_id": 77386263, "body": "Your <code>&gt;.&gt;</code> operator is equivalent to <code>&gt;&gt;&gt;</code> operator from Control.Arrow module included in base package."}, {"owner": {"reputation": 37219, "user_id": 1523776, "user_type": "moderator", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/b3e0b5c8e42a8c38009ef2d969f8dabb?s=128&d=identicon&r=PG", "display_name": "Benjamin Hodgson", "link": "https://stackoverflow.com/users/1523776/benjamin-hodgson"}, "reply_to_user": {"reputation": 23444, "user_id": 414413, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/6de2113f01432aa844dc85070ff33e89?s=128&d=identicon&r=PG", "display_name": "Cirdec", "link": "https://stackoverflow.com/users/414413/cirdec"}, "edited": false, "score": 0, "creation_date": 1500544428, "post_id": 45204600, "comment_id": 77388569, "body": "@Cirdec They&#39;re not isomorphic. OP is saying that <code>TreeMap</code> is a different, better data structure for the purpose of mapping <code>Tree</code>s to <code>a</code>s."}, {"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "edited": false, "score": 0, "creation_date": 1500566194, "post_id": 45204600, "comment_id": 77405735, "body": "I&#39;d like to clarify something about the question: is the goal here to avoid writing <code>eqTree</code> and <code>lookupTreeMap</code> entirely in favor of writing a single, more general function, or is the goal to write a new function which can use the more efficient of the two (but may assume they already exist as subroutines)?"}, {"owner": {"reputation": 25181, "user_id": 23845, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/434aee9ad675384a9e745c7217ac4abe?s=128&d=identicon&r=PG", "display_name": "Edward Z. Yang", "link": "https://stackoverflow.com/users/23845/edward-z-yang"}, "edited": false, "score": 0, "creation_date": 1500574844, "post_id": 45204600, "comment_id": 77411012, "body": "Former. In the real world code, it&#39;s not eqTree but an entire unification algorithm, and you kind of want to avoid writing it twice."}, {"owner": {"reputation": 23444, "user_id": 414413, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/6de2113f01432aa844dc85070ff33e89?s=128&d=identicon&r=PG", "display_name": "Cirdec", "link": "https://stackoverflow.com/users/414413/cirdec"}, "edited": false, "score": 0, "creation_date": 1500593020, "post_id": 45204600, "comment_id": 77419632, "body": "@EdwardZ.Yang Which parts of the &quot;entire unification algorithm&quot; are going to vary? The pattern matches in the first arguments of <code>eqTree</code> and <code>lookupTreeMap</code>? The operations performed on the right sides of the different cases? The operations performed in each direction for a single case? The last one is probably the most important to know in order to answer this question."}, {"owner": {"reputation": 25181, "user_id": 23845, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/434aee9ad675384a9e745c7217ac4abe?s=128&d=identicon&r=PG", "display_name": "Edward Z. Yang", "link": "https://stackoverflow.com/users/23845/edward-z-yang"}, "edited": false, "score": 0, "creation_date": 1500594704, "post_id": 45204600, "comment_id": 77420054, "body": "Well, let&#39;s try to solve it for the simple case first, since it&#39;s a degenerate case of unification where there are no unification variables. In real unification, you also need a state monad tracking the current unifying substitution and handling for variables."}], "answers": [{"comments": [{"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 0, "creation_date": 1500669996, "post_id": 45231822, "comment_id": 77458967, "body": "To me, <code>lookupTreeMap&#39;</code> looks suspiciously like a catamorphism, specifically <code>cata</code> from <code>recursion-schemes</code>. In fact, I think it may even be that..."}], "tags": [], "owner": {"reputation": 23444, "user_id": 414413, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/6de2113f01432aa844dc85070ff33e89?s=128&d=identicon&r=PG", "display_name": "Cirdec", "link": "https://stackoverflow.com/users/414413/cirdec"}, "is_accepted": false, "score": 2, "last_activity_date": 1500629683, "last_edit_date": 1500629683, "creation_date": 1500622796, "answer_id": 45231822, "question_id": 45204600, "link": "https://stackoverflow.com/questions/45204600/is-there-a-way-to-generalize-this-triemap-code/45231822#45231822", "title": "Is there a way to generalize this TrieMap code?", "body": "<p>This is a na\u00efve solution. The class <code>BinaryTree</code> describes how both <code>Tree</code>s and <code>TreeMap</code>s are binary trees.</p>\n\n<pre><code>{-# LANGUAGE RankNTypes, MultiParamTypeClasses, FlexibleInstances #-}\n\nclass BinaryTree t a where\n    leaf :: MonadPlus m =&gt; t a -&gt; m a\n    node :: MonadPlus m =&gt; (forall r. BinaryTree t r =&gt; t r -&gt; m r) -&gt;\n                           (forall r. BinaryTree t r =&gt; t r -&gt; m r) -&gt;\n                           t a -&gt; m a\n</code></pre>\n\n<p>The awkward <code>BinaryTree t r</code> constraints and the multi-parameter type class are only necessary because <code>Tree</code>s don't hold an <code>a</code> at their leaves to <code>return</code>. If your real <code>Tree</code> is richer this wrinkle will probably disappear.</p>\n\n<p><code>lookupTreeMap</code> can be written in terms of <code>BinaryTree</code> instead of in terms of <code>Tree</code> or <code>TreeMap</code></p>\n\n<pre><code>lookupTreeMap' :: BinaryTree t r =&gt; Tree -&gt; t r -&gt; Maybe r\nlookupTreeMap' Leaf = leaf\nlookupTreeMap' (Node l r) = node (lookupTreeMap' l) (lookupTreeMap' r)\n</code></pre>\n\n<p><code>TreeMap</code> has a straightforward <code>BinaryTree</code> instance.</p>\n\n<pre><code>instance BinaryTree TreeMap a where\n    leaf = maybe empty return . tm_leaf\n    node kl kr = tm_node &gt;.&gt; kl &gt;=&gt; kr\n</code></pre>\n\n<p><code>Tree</code> can't have a <code>BinaryTree</code> instance because it has the wrong kind. That's easily fixed with a newtype:</p>\n\n<pre><code>newtype Tree2 a = Tree2 {unTree2 :: Tree}\n\ntree2 :: Tree -&gt; Tree2 ()\ntree2 = Tree2\n</code></pre>\n\n<p><code>Tree2</code> can be equiped with a <code>BinaryTree</code> instance.</p>\n\n<pre><code>instance BinaryTree Tree2 () where\n    leaf (Tree2 Leaf) = return ()\n    leaf _ = empty\n\n    node kl kr (Tree2 (Node l r)) = kl (tree2 l) &gt;&gt; kr (tree2 r)\n    node _ _ _ = empty\n</code></pre>\n\n<hr>\n\n<p>I don't think the above is a particularly elegant solution, or that it will necessarily simplify anything, unless the implementation of <code>lookupTreeMap</code> is non-trivial. As an incremental improvement, I'd recommend refactoring <code>Tree</code> into the base functor</p>\n\n<pre><code>data TreeF a = Leaf | Node a a\n\ndata Tree = Tree (TreeF Tree)\n</code></pre>\n\n<p>We can split the problem into matching the base functor against itself,</p>\n\n<pre><code>-- This looks like a genaralized version of Applicative that can fail\nuntreeF :: MonadPlus m =&gt; TreeF (a -&gt; m b) -&gt; TreeF a -&gt; m (TreeF b)\nuntreeF Leaf         Leaf       = return Leaf\nuntreeF (Node kl kr) (Node l r) = Node &lt;$&gt; kl l &lt;*&gt; kr r\nuntreeF _            _          = empty\n</code></pre>\n\n<p>matching the base functor against <code>Tree</code>s,</p>\n\n<pre><code>untree :: MonadPlus m =&gt; TreeF (Tree -&gt; m ()) -&gt; Tree -&gt; m () \nuntree tf (Tree tf2) = untreeF tf tf2 &gt;&gt; return ()\n</code></pre>\n\n<p>and matching the base functor against <code>TreeMap</code>. </p>\n\n<pre><code>-- A reader for things that read from a TreeMap to avoid impredicative types.\ndata TMR m = TMR {runtmr :: forall r. TreeMap r -&gt; m r}\n\n-- This work is unavoidable. Something has to say how a TreeMap is related to Trees\nuntreemap :: MonadPlus m =&gt; TreeF (TMR m) -&gt; TMR m\nuntreemap Leaf = TMR $ maybe empty return . tm_leaf\nuntreemap (Node kl kr) = TMR $ tm_node &gt;.&gt; runtmr kl &gt;=&gt; runtmr kr\n</code></pre>\n\n<p>Like in the first example, we define traversing the tree only once.</p>\n\n<pre><code>-- This looks suspiciously like a traversal / transform\nlookupTreeMap' :: (TreeF a -&gt; a) -&gt; Tree -&gt; a\nlookupTreeMap' un = go\n  where\n    go (Tree Leaf) = un Leaf\n    go (Tree (Node l r)) = un $ Node (go l) (go r)\n    -- If the traversal is trivial these can be replaced by\n    -- go (Tree tf) = un $ go &lt;$&gt; tf\n</code></pre>\n\n<p>The operations specialized for <code>Tree</code> and <code>TreeMap</code> can be obtained from the single definition of the traversal.</p>\n\n<pre><code>eqTree :: Tree -&gt; Tree -&gt; Maybe ()\neqTree = lookupTreeMap' untree\n\nlookupTreeMap :: MonadPlus m =&gt; Tree -&gt; TreeMap a -&gt; m a\nlookupTreeMap = runtmr . lookupTreeMap' untreemap\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 23444, "user_id": 414413, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/6de2113f01432aa844dc85070ff33e89?s=128&d=identicon&r=PG", "display_name": "Cirdec", "link": "https://stackoverflow.com/users/414413/cirdec"}, "edited": false, "score": 0, "creation_date": 1500813792, "post_id": 45254970, "comment_id": 77493359, "body": "Excellent. I got as far as looking for the operation that turns products into sums and exponents into products; I can&#39;t believe I didn&#39;t think &quot;logarithm&quot;."}, {"owner": {"reputation": 3603, "user_id": 165806, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/c889e0a95a3bb07f90ab28ad442f1127?s=128&d=identicon&r=PG", "display_name": "Iceland_jack", "link": "https://stackoverflow.com/users/165806/iceland-jack"}, "edited": false, "score": 0, "creation_date": 1506815866, "post_id": 45254970, "comment_id": 79970447, "body": "This pattern synonym can make some of the code look nicer <code>pattern Matched :: Matching a a&#39; =&gt; a -&gt; a&#39; -&gt; Matched a a&#39;; pattern Matched a a&#39; &lt;- (matched -&gt; (a, a&#39;))</code>"}], "tags": [], "owner": {"reputation": 42094, "user_id": 828361, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/6a82397672dcc1fca31c32508ef0798b?s=128&d=identicon&r=PG", "display_name": "pigworker", "link": "https://stackoverflow.com/users/828361/pigworker"}, "is_accepted": true, "score": 12, "last_activity_date": 1500734969, "last_edit_date": 1500734969, "creation_date": 1500729172, "answer_id": 45254970, "question_id": 45204600, "link": "https://stackoverflow.com/questions/45204600/is-there-a-way-to-generalize-this-triemap-code/45254970#45254970", "title": "Is there a way to generalize this TrieMap code?", "body": "<p><strong>Edit</strong>: I remembered a very helpful fact about logarithms and derivatives which I discovered whilst disgustingly hung over on a friend's sofa. Sadly, that friend (the late great Kostas Tourlas) is no longer with us, but I commemorate him by being disgustingly hung over on a different friend's sofa.</p>\n\n<p>Let's remind ourselves about tries. (Lots of my mates were working on these structures in the early noughties: Ralf Hinze, Thorsten Altenkirch and Peter Hancock spring instantly to mind in that regard.) What's really going on is that we're computing the exponential of a type <code>t</code>, remembering that <code>t -&gt; x</code> is a way of writing <code>x</code> ^ <code>t</code>.</p>\n\n<p>That is, we expect to equip a type <code>t</code> with a functor <code>Expo t</code> such that <code>Expo t x</code> represents <code>t -&gt; x</code>. We should further expect <code>Expo t</code> to be applicative (zippily). <strong>Edit:</strong> Hancock calls such functors \"Naperian\", because they have logarithms, and they're applicative in the same way as functions, with <code>pure</code> being the K combinator and <code>&lt;*&gt;</code> being S. It is immediate that <code>Expo t ()</code> must be isomorphic with <code>()</code>, with <code>const (pure ())</code> and <code>const ()</code> doing the (not much) work.</p>\n\n<pre><code>class Applicative (Expo t) =&gt; EXPO t where\n  type Expo t :: * -&gt; *\n  appl  :: Expo t x -&gt; (t -&gt; x)       -- trie lookup\n  abst  :: (t -&gt; x) -&gt; Expo t x       -- trie construction\n</code></pre>\n\n<p>Another way of putting it is that <code>t</code> is the <em>logarithm</em> of <code>Expo t</code>.</p>\n\n<p>(I nearly forgot: fans of calculus should check that <code>t</code> is isomorphic to <code>\u2202 (Expo t) ()</code>. This isomorphism might actually be rather useful. <strong>Edit:</strong> it's extremely useful, and we shall add it to <code>EXPO</code> later.)</p>\n\n<p>We'll need some functor kit stuff. The identity functor is zippiy applicative...</p>\n\n<pre><code>data I     ::                         (* -&gt; *) where\n  I   :: x -&gt; I x\n  deriving (Show, Eq, Functor, Foldable, Traversable)\n\ninstance Applicative I where\n  pure x = I x\n  I f &lt;*&gt; I s = I (f s)\n</code></pre>\n\n<p>...and its logarithm is the unit type</p>\n\n<pre><code>instance EXPO () where\n  type Expo () = I\n  appl (I x) () = x\n  abst f        = I (f ())\n</code></pre>\n\n<p>Products of zippy applicatives are zippily applicative...</p>\n\n<pre><code>data (:*:) :: (* -&gt; *) -&gt; (* -&gt; *) -&gt; (* -&gt; *) where\n  (:*:) :: f x -&gt; g x -&gt; (f :*: g) x\n  deriving (Show, Eq, Functor, Foldable, Traversable)\n\ninstance (Applicative p, Applicative q) =&gt; Applicative (p :*: q) where\n  pure x = pure x :*: pure x\n  (pf :*: qf) &lt;*&gt; (ps :*: qs) = (pf &lt;*&gt; ps) :*: (qf &lt;*&gt; qs)\n</code></pre>\n\n<p>...and their logarithms are sums.</p>\n\n<pre><code>instance (EXPO s, EXPO t) =&gt; EXPO (Either s t) where\n  type Expo (Either s t) = Expo s :*: Expo t\n  appl (sf :*: tf) (Left s)  = appl sf s\n  appl (sf :*: tf) (Right t) = appl tf t\n  abst f = abst (f . Left) :*: abst (f . Right)\n</code></pre>\n\n<p>Compositions of zippy applicatives are zippily applicative...</p>\n\n<pre><code>data (:&lt;:) :: (* -&gt; *) -&gt; (* -&gt; *) -&gt; (* -&gt; *) where\n  C :: f (g x) -&gt; (f :&lt;: g) x\n  deriving (Show, Eq, Functor, Foldable, Traversable)\n\ninstance (Applicative p, Applicative q) =&gt; Applicative (p :&lt;: q) where\n  pure x          = C (pure (pure x))\n  C pqf &lt;*&gt; C pqs = C (pure (&lt;*&gt;) &lt;*&gt; pqf &lt;*&gt; pqs)\n</code></pre>\n\n<p>and their logarithms are products.</p>\n\n<pre><code>instance (EXPO s, EXPO t) =&gt; EXPO (s, t) where\n  type Expo (s, t) = Expo s :&lt;: Expo t\n  appl (C stf) (s, t) = appl (appl stf s) t\n  abst f = C (abst $ \\ s -&gt; abst $ \\ t -&gt; f (s, t))\n</code></pre>\n\n<p>If we switch on enough stuff, we may now write</p>\n\n<pre><code>newtype Tree    = Tree (Either () (Tree, Tree))\n  deriving (Show, Eq)\npattern Leaf     = Tree (Left ())\npattern Node l r = Tree (Right (l, r))\n\nnewtype ExpoTree x = ExpoTree (Expo (Either () (Tree, Tree)) x)\n  deriving (Show, Eq, Functor, Applicative)\n\ninstance EXPO Tree where\n  type Expo Tree = ExpoTree\n  appl (ExpoTree f) (Tree t) = appl f t\n  abst f = ExpoTree (abst (f . Tree))\n</code></pre>\n\n<p>The <code>TreeMap a</code> type in the question, being</p>\n\n<pre><code>data TreeMap a\n    = TreeMap {\n        tm_leaf :: Maybe a,\n        tm_node :: TreeMap (TreeMap a)\n      }\n</code></pre>\n\n<p>is exactly <code>Expo Tree (Maybe a)</code>, with <code>lookupTreeMap</code> being <code>flip appl</code>.</p>\n\n<p>Now, given that <code>Tree</code> and <code>Tree -&gt; x</code> are rather different things, it strikes me as odd to want code to work \"on both\". The tree equality test is a special case of the lookup only in that the tree equality test is any old function which acts on a tree. There is a coincidence coincidence, however: to test equality, we must turn each tree into own self-recognizer. <strong>Edit:</strong> that's exactly what the log-diff iso \ndoes.</p>\n\n<p>The structure which gives rise to an equality test is some notion of <em>matching</em>. Like this:</p>\n\n<pre><code>class Matching a b where\n  type Matched a b :: *\n  matched :: Matched a b -&gt; (a, b)\n  match   :: a -&gt; b -&gt; Maybe (Matched a b)\n</code></pre>\n\n<p>That is, we expect <code>Matched a b</code> to represent somehow a pair of an <code>a</code> and a <code>b</code> which match. We should be able to extract the pair (forgetting that they match), and we should be able to take any pair and try to match them.</p>\n\n<p>Unsurprisingly, we can do this for the unit type, quite successfully.</p>\n\n<pre><code>instance Matching () () where\n  type Matched () () = ()\n  matched () = ((), ())\n  match () () = Just ()\n</code></pre>\n\n<p>For products, we work componentwise, with component mismatch being the only danger.</p>\n\n<pre><code>instance (Matching s s', Matching t t') =&gt; Matching (s, t) (s', t') where\n  type Matched (s, t) (s', t') = (Matched s s', Matched t t')\n  matched (ss', tt') = ((s, t), (s', t')) where\n    (s, s') = matched ss'\n    (t, t') = matched tt'\n  match (s, t) (s', t') = (,) &lt;$&gt; match s s' &lt;*&gt; match t t'\n</code></pre>\n\n<p>Sums offer some chance of mismatch.</p>\n\n<pre><code>instance (Matching s s', Matching t t') =&gt;\n    Matching (Either s t) (Either s' t') where\n  type Matched (Either s t) (Either s' t')\n    = Either (Matched s s') (Matched t t')\n  matched (Left  ss') = (Left s,  Left s')  where (s, s') = matched ss'\n  matched (Right tt') = (Right t, Right t') where (t, t') = matched tt'\n  match (Left s)  (Left s')  = Left  &lt;$&gt; match s s'\n  match (Right t) (Right t') = Right &lt;$&gt; match t t'\n  match _         _          = Nothing\n</code></pre>\n\n<p>Amusingly, we can obtain an equality test for trees now as easily as</p>\n\n<pre><code>instance Matching Tree Tree where\n  type Matched Tree Tree = Tree\n  matched t = (t, t)\n  match (Tree t1) (Tree t2) = Tree &lt;$&gt; match t1 t2\n</code></pre>\n\n<p>(Incidentally, the <code>Functor</code> subclass that captures a notion of matching, being</p>\n\n<pre><code>class HalfZippable f where  -- \"half zip\" comes from Roland Backhouse\n  halfZip :: (f a, f b) -&gt; Maybe (f (a, b))\n</code></pre>\n\n<p>is sadly neglected. Morally, for each such <code>f</code>, we should have</p>\n\n<pre><code>Matched (f a) (f b) = f (Matched a b)\n</code></pre>\n\n<p>A fun exercise is to show that if <code>(Traversable f, HalfZippable f)</code>, then the free monad on <code>f</code> has a first-order unification algorithm.)</p>\n\n<p>I suppose we can build \"singleton association lists\" like this:</p>\n\n<pre><code>mapOne :: forall a. (Tree, a) -&gt; Expo Tree (Maybe a)\nmapOne (t, a) = abst f where\n  f :: Tree -&gt; Maybe a\n  f u = pure a &lt;* match t u\n</code></pre>\n\n<p>And we could try combining them with this gadget, exploiting the zippiness of all the <code>Expo t</code>s...</p>\n\n<pre><code>instance Monoid x =&gt; Monoid (ExpoTree x) where\n  mempty = pure mempty\n  mappend t u = mappend &lt;$&gt; t &lt;*&gt; u\n</code></pre>\n\n<p>...but, yet again, the utter stupidity of the <code>Monoid</code> instance for <code>Maybe x</code> continues to frustrate clean design.</p>\n\n<p>We can at least manage</p>\n\n<pre><code>instance Alternative m =&gt; Alternative (ExpoTree :&lt;: m) where\n  empty = C (pure empty)\n  C f &lt;|&gt; C g = C ((&lt;|&gt;) &lt;$&gt; f &lt;*&gt; g)\n</code></pre>\n\n<p>An amusing exercise is to fuse <code>abst</code> with <code>match</code>, and perhaps that's what the question is really driving at. Let's refactor <code>Matching</code>.</p>\n\n<pre><code>class EXPO b =&gt; Matching a b where\n  type Matched a b :: *\n  matched :: Matched a b -&gt; (a, b)\n  match'  :: a -&gt; Proxy b -&gt; Expo b (Maybe (Matched a b))\n\ndata Proxy x = Poxy  -- I'm not on GHC 8 yet, and Simon needs a hand here\n</code></pre>\n\n<p>For <code>()</code>, what's new is</p>\n\n<pre><code>instance Matching () () where\n  -- skip old stuff\n  match' () (Poxy :: Proxy ()) = I (Just ())\n</code></pre>\n\n<p>For sums, we need to tag successful matches, and fill in the unsuccessful parts with a magnificently Glaswegian <code>pure Nothing</code>.</p>\n\n<pre><code>instance (Matching s s', Matching t t') =&gt;\n    Matching (Either s t) (Either s' t') where\n  -- skip old stuff\n  match' (Left s) (Poxy :: Proxy (Either s' t')) =\n    ((Left &lt;$&gt;) &lt;$&gt; match' s (Poxy :: Proxy s')) :*: pure Nothing\n  match' (Right t) (Poxy :: Proxy (Either s' t')) =\n    pure Nothing :*: ((Right &lt;$&gt;) &lt;$&gt; match' t (Poxy :: Proxy t'))\n</code></pre>\n\n<p>For pairs, we need to build matching in sequence, dropping out early if the\nfirst component fails.</p>\n\n<pre><code>instance (Matching s s', Matching t t') =&gt; Matching (s, t) (s', t') where\n  -- skip old stuff\n  match' (s, t) (Poxy :: Proxy (s', t'))\n    = C (more &lt;$&gt; match' s (Poxy :: Proxy s')) where\n    more Nothing  = pure Nothing\n    more (Just s) = ((,) s &lt;$&gt;) &lt;$&gt; match' t (Poxy :: Proxy t')\n</code></pre>\n\n<p>So we can see that there is a connection between a constructor and the trie for its matcher.</p>\n\n<p>Homework: fuse <code>abst</code> with <code>match'</code>, effectively tabulating the entire process.</p>\n\n<p><strong>Edit:</strong> writing <code>match'</code>, we parked each sub-matcher in the position of the trie corresponding to the sub-structure. And when you think of things in particular positions, you should think of zippers and differential calculus. Let me remind you.</p>\n\n<p>We'll need functorial constants and coproducts to manage choice of \"where the hole is\".</p>\n\n<pre><code>data K     :: * -&gt;                    (* -&gt; *) where\n  K :: a -&gt; K a x\n  deriving (Show, Eq, Functor, Foldable, Traversable)\n\ndata (:+:) :: (* -&gt; *) -&gt; (* -&gt; *) -&gt; (* -&gt; *) where\n  Inl :: f x -&gt; (f :+: g) x\n  Inr :: g x -&gt; (f :+: g) x\n  deriving (Show, Eq, Functor, Foldable, Traversable)\n</code></pre>\n\n<p>And now we may define</p>\n\n<pre><code>class (Functor f, Functor (D f)) =&gt; Differentiable f where\n  type D f :: (* -&gt; *)\n  plug :: (D f :*: I) x -&gt; f x\n  -- there should be other methods, but plug will do for now\n</code></pre>\n\n<p>The usual laws of calculus apply, with composition giving a spatial interpretation to the <em>chain rule</em>.</p>\n\n<pre><code>instance Differentiable (K a) where\n  type D (K a) = K Void\n  plug (K bad :*: I x) = K (absurd bad)\n\ninstance Differentiable I where\n  type D I = K ()\n  plug (K () :*: I x) = I x\n\ninstance (Differentiable f, Differentiable g) =&gt; Differentiable (f :+: g) where\n  type D (f :+: g) = D f :+: D g\n  plug (Inl f' :*: I x) = Inl (plug (f' :*: I x))\n  plug (Inr g' :*: I x) = Inr (plug (g' :*: I x))\n\ninstance (Differentiable f, Differentiable g) =&gt; Differentiable (f :*: g) where\n  type D (f :*: g) = (D f :*: g) :+: (f :*: D g)\n  plug (Inl (f' :*: g) :*: I x) = plug (f' :*: I x) :*: g\n  plug (Inr (f :*: g') :*: I x) = f :*: plug (g' :*: I x)\n\ninstance (Differentiable f, Differentiable g) =&gt; Differentiable (f :&lt;: g) where\n  type D (f :&lt;: g) = (D f :&lt;: g) :*: D g\n  plug ((C f'g :*: g') :*: I x) = C (plug (f'g :*: I (plug (g' :*: I x))))\n</code></pre>\n\n<p>It will not harm us to insist that <code>Expo t</code> is differentiable, so let us extend the <code>EXPO</code> class. What's a \"trie with a hole\"? It's a trie which is missing the output entry for exactly one of the possible inputs. And that's the key.</p>\n\n<pre><code>class (Differentiable (Expo t), Applicative (Expo t)) =&gt; EXPO t where\n  type Expo t :: * -&gt; *\n  appl  :: Expo t x -&gt; t -&gt; x\n  abst  :: (t -&gt; x) -&gt; Expo t x\n  hole  :: t -&gt; D (Expo t) ()\n  eloh  :: D (Expo t) () -&gt; t\n</code></pre>\n\n<p>Now, <code>hole</code> and <code>eloh</code> will witness the isomorphism.</p>\n\n<pre><code>instance EXPO () where\n  type Expo () = I\n  -- skip old stuff\n  hole ()     = K ()\n  eloh (K ()) = ()\n</code></pre>\n\n<p>The unit case wasn't very exciting, but the sum case begins to show structure:</p>\n\n<pre><code>instance (EXPO s, EXPO t) =&gt; EXPO (Either s t) where\n  type Expo (Either s t) = Expo s :*: Expo t\n  hole (Left s)  = Inl (hole s  :*: pure ())\n  hole (Right t) = Inr (pure () :*: hole t)\n  eloh (Inl (f' :*: _)) = Left (eloh f')\n  eloh (Inr (_ :*: g')) = Right (eloh g')\n</code></pre>\n\n<p>See? A <code>Left</code> is mapped to a trie with a hole on the left; a <code>Right</code> is mapped to a trie with a hole on the right.</p>\n\n<p>Now for products.</p>\n\n<pre><code>instance (EXPO s, EXPO t) =&gt; EXPO (s, t) where\n  type Expo (s, t) = Expo s :&lt;: Expo t\n  hole (s, t) = C (const (pure ()) &lt;$&gt; hole s) :*: hole t\n  eloh (C f' :*: g') = (eloh (const () &lt;$&gt; f'), eloh g')\n</code></pre>\n\n<p>A trie for a pair is a right trie stuffed inside a left trie, so the hole for a particular pair is found by making a hole for the right element in the particular subtrie for the left element.</p>\n\n<p>For trees, we make another wrapper.</p>\n\n<pre><code>newtype DExpoTree x = DExpoTree (D (Expo (Either () (Tree, Tree))) x)\n  deriving (Show, Eq, Functor)\n</code></pre>\n\n<p>So, how do we turn a tree into its trie recognizer? First, we grab its \"everyone but me\" trie, and we fill in all those outputs with <code>False</code>, then we plug in <code>True</code> for the missing entry.</p>\n\n<pre><code>matchMe :: EXPO t =&gt; t -&gt; Expo t Bool\nmatchMe t = plug ((const False &lt;$&gt; hole t) :*: I True)\n</code></pre>\n\n<p><strong>Homework hint:</strong> <code>D f :*: I</code> is a comonad.</p>\n\n<p>Absent friends!</p>\n"}], "owner": {"reputation": 25181, "user_id": 23845, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/434aee9ad675384a9e745c7217ac4abe?s=128&d=identicon&r=PG", "display_name": "Edward Z. Yang", "link": "https://stackoverflow.com/users/23845/edward-z-yang"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 723, "favorite_count": 3, "accepted_answer_id": 45254970, "answer_count": 2, "score": 14, "last_activity_date": 1500734969, "creation_date": 1500521374, "question_id": 45204600, "link": "https://stackoverflow.com/questions/45204600/is-there-a-way-to-generalize-this-triemap-code", "title": "Is there a way to generalize this TrieMap code?", "body": "<p>Below is a simple Haskell program which computes equalities on trees:</p>\n\n<pre><code>import Control.Monad\nimport Control.Applicative\nimport Data.Maybe\n\ndata Tree = Leaf | Node Tree Tree\n\neqTree :: Tree -&gt; Tree -&gt; Maybe ()\neqTree Leaf         Leaf         = return ()\neqTree (Node l1 r1) (Node l2 r2) = eqTree l1 l2 &gt;&gt; eqTree r1 r2\neqTree _ _ = empty\n</code></pre>\n\n<p>Suppose you have an association list of trees <code>[(Tree, a)]</code>, and you'd like to find the entry for a given tree. (One can think of this as a simplified version of the type class instance lookup problem.) Naively, we would have to do O(n*s) work, where n is the number of trees, and s is the size of each tree.</p>\n\n<p>We can do better if we use a trie map to represent our association list:</p>\n\n<pre><code>(&gt;.&gt;) = flip (.)\n\ndata TreeMap a\n    = TreeMap {\n        tm_leaf :: Maybe a,\n        tm_node :: TreeMap (TreeMap a)\n      }\n\nlookupTreeMap :: Tree -&gt; TreeMap a -&gt; Maybe a\nlookupTreeMap Leaf       = tm_leaf\nlookupTreeMap (Node l r) = tm_node &gt;.&gt; lookupTreeMap l &gt;=&gt; lookupTreeMap r\n</code></pre>\n\n<p>Our lookup now only takes O(s). This algorithm is a strict generalization of the previous one, since we can test for equality by creating a singleton <code>TreeMap ()</code> and then seeing if we get back <code>Just ()</code>. But for practical reasons, we'd prefer not to do this, since it involves building up a TreeMap and then immediately tearing it down.</p>\n\n<p>Is there a way to generalize the two pieces of code above into a new function that can operate on both <code>Tree</code> and <code>TreeMap</code>? There seems to be some similarity in how the code is structured, but it is not obvious how to abstract the differences away.</p>\n"}]