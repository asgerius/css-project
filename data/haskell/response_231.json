[{"tags": ["haskell", "hip"], "comments": [{"owner": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "edited": false, "score": 0, "creation_date": 1560376581, "post_id": 56570816, "comment_id": 99720610, "body": "I think you should use <code>VS</code> instead of <code>VU</code>, since <code>VS</code> is <i>storable</i> (and writeable), so <code>Image VS RGB Word8</code>."}, {"owner": {"reputation": 7666, "user_id": 1241193, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0331e5e748a0ac3860b68f6cac130ef1?s=128&d=identicon&r=PG", "display_name": "Bob Dalgleish", "link": "https://stackoverflow.com/users/1241193/bob-dalgleish"}, "edited": false, "score": 0, "creation_date": 1560376660, "post_id": 56570816, "comment_id": 99720632, "body": "On the last line, remove <code>:: Image VU RGB Word8</code> as that is part of the signature of <code>getImage</code>. Also, where are you getting <code>Graphics.Image</code> from?"}, {"owner": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "reply_to_user": {"reputation": 7666, "user_id": 1241193, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0331e5e748a0ac3860b68f6cac130ef1?s=128&d=identicon&r=PG", "display_name": "Bob Dalgleish", "link": "https://stackoverflow.com/users/1241193/bob-dalgleish"}, "edited": false, "score": 1, "creation_date": 1560376728, "post_id": 56570816, "comment_id": 99720652, "body": "@BobDalgleish: that&#39;s <a href=\"http://hackage.haskell.org/package/hip-1.5.3.0/docs/Graphics-Image.html\" rel=\"nofollow noreferrer\">hackage.haskell.org/package/hip-1.5.3.0/docs/&hellip;</a> but that won&#39;t make a difference, since the signature of <code>getImage</code> already forces it to be an <code>Image VU RGB Word8</code>."}, {"owner": {"reputation": 12516, "user_id": 302268, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/c3985dffcdc646b67ed0699a364639e2?s=128&d=identicon&r=PG", "display_name": "Mad Wombat", "link": "https://stackoverflow.com/users/302268/mad-wombat"}, "edited": false, "score": 0, "creation_date": 1560376870, "post_id": 56570816, "comment_id": 99720677, "body": "Yeah, hip library. I am using stack for this."}, {"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "edited": false, "score": 0, "creation_date": 1560376980, "post_id": 56570816, "comment_id": 99720704, "body": "Gotta either use <code>Double</code> instead of <code>Word8</code> or else use <code>encode</code> directly instead of <code>writeImage</code>."}, {"owner": {"reputation": 12516, "user_id": 302268, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/c3985dffcdc646b67ed0699a364639e2?s=128&d=identicon&r=PG", "display_name": "Mad Wombat", "link": "https://stackoverflow.com/users/302268/mad-wombat"}, "edited": false, "score": 0, "creation_date": 1560377083, "post_id": 56570816, "comment_id": 99720743, "body": "Ha! Worked with Double. Could you explain what went wrong and how you found the solution?"}, {"owner": {"reputation": 12516, "user_id": 302268, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/c3985dffcdc646b67ed0699a364639e2?s=128&d=identicon&r=PG", "display_name": "Mad Wombat", "link": "https://stackoverflow.com/users/302268/mad-wombat"}, "reply_to_user": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "edited": false, "score": 0, "creation_date": 1560433730, "post_id": 56570816, "comment_id": 99741835, "body": "@DanielWagner if you wanna post an answer, I will accept it."}], "answers": [{"tags": [], "owner": {"reputation": 34158, "user_id": 7203016, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/ybAMw.png?s=128&g=1", "display_name": "K. A. Buhr", "link": "https://stackoverflow.com/users/7203016/k-a-buhr"}, "is_accepted": true, "score": 2, "last_activity_date": 1561832692, "creation_date": 1561832692, "answer_id": 56819900, "question_id": 56570816, "link": "https://stackoverflow.com/questions/56570816/how-to-generate-an-image-using-haskell-image-processing/56819900#56819900", "title": "How to generate an image using Haskell Image Processing", "body": "<p>The HIP package makes extensive use of the type system to handle multiple external image formats and internal image layouts.  In particular, the <a href=\"https://hackage.haskell.org/package/hip-1.5.3.0/docs/Graphics-Image.html#v:writeImage\" rel=\"nofollow noreferrer\"><code>writeImage</code></a> function has signature:</p>\n\n<pre><code>writeImage\n  :: (Array VS cs e, Array arr cs e, Writable (Image VS cs e) OutputFormat)  \n  =&gt; FilePath   \n  -&gt; Image arr cs e \n  -&gt; IO ()\n</code></pre>\n\n<p>The key takeaway here is that, if you want to write an <code>Image arr cs e</code> using this function, that type has to obey the constraint (i.e., have a type class instance for):</p>\n\n<pre><code>Writable (Image VS cs e) OutputFormat\n</code></pre>\n\n<p>To see what instances the library makes available, you can take a look at the documentation for <a href=\"https://hackage.haskell.org/package/hip-1.5.3.0/docs/Graphics-Image-IO-Formats.html#t:Writable\" rel=\"nofollow noreferrer\"><code>Writable</code></a> which has a big list of available instances.  However, the only <code>Writable x y</code> instance with <code>y</code> equal to <code>OutputFormat</code> (which means \"a general format unknown at compile time\") is:</p>\n\n<pre><code>instance AllWritable arr cs =&gt; Writable (Image arr cs Double) OutputFormat   \n</code></pre>\n\n<p>This means that only <code>Image arr cs e</code> with <code>e</code> equal to <code>Double</code> are compatible with the <code>writeImage</code> function.  The reasoning behind this is probably that, because the <code>writeImage</code> function only identifies the file type to be written at runtime (by inspecting the file extension of the supplied file path), it only wants to accept an image whose channel data is already in a high-precision type (e.g., <code>Double</code>), in case it determines that the final format can handle high-precision channel data; you could argue that this restriction doesn't really make a whole lot of sense, but that's the way it is.</p>\n\n<p>So, as @DanielWagner pointed out, you need to provide <code>writeImage</code> with an image having <code>Double</code> channel data.  Alternatively, you could use <code>writeImageExact</code> which specifies the format at compile time and allows the use of any <code>Writable</code> instance for the appropriate format.  So, for example, replacing the <code>writeImage</code> call with:</p>\n\n<pre><code>writeImageExact PNG [] \"image.png\" image\n</code></pre>\n\n<p>would have worked fine, because there's an appropriate instance for it:</p>\n\n<pre><code>instance Writable (Image VS RGB Word8) PNG\n</code></pre>\n"}], "owner": {"reputation": 12516, "user_id": 302268, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/c3985dffcdc646b67ed0699a364639e2?s=128&d=identicon&r=PG", "display_name": "Mad Wombat", "link": "https://stackoverflow.com/users/302268/mad-wombat"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 546, "favorite_count": 0, "accepted_answer_id": 56819900, "answer_count": 1, "score": 3, "last_activity_date": 1567889718, "creation_date": 1560376146, "last_edit_date": 1567889718, "question_id": 56570816, "link": "https://stackoverflow.com/questions/56570816/how-to-generate-an-image-using-haskell-image-processing", "title": "How to generate an image using Haskell Image Processing", "body": "<p>I just started learning Haskell, so I am likely missing something very trivial. I am attempting to generate images using Haskell Image Processing. I am adapting the code from sample snippets from the docs. My code is as follows.</p>\n\n<pre><code>{-# LANGUAGE NoImplicitPrelude #-}\nmodule Main where\n\nimport Prelude as P\nimport Graphics.Image as I\n\ngetPixel :: (Int, Int) -&gt; Pixel RGB Word8\ngetPixel (i, j) = PixelRGB (fromIntegral i) (fromIntegral j) (fromIntegral (i + j))\n\ngetImage :: (Int, Int) -&gt; Image VS RGB Word8\ngetImage (w, h) = makeImageR VS (w, h) getPixel\n\nmain :: IO ()\nmain = writeImage \"image.png\" image\n    where image = getImage (1024, 1024)\n</code></pre>\n\n<p>when I try to build it, I get the following</p>\n\n<pre><code>\u2022 No instance for (Writable (Image VS RGB Word8) OutputFormat)\n    arising from a use of \u2018writeImage\u2019\n\u2022 In the expression: writeImage \"image.png\" image\n  In an equation for \u2018main\u2019:\n      main\n        = writeImage \"image.png\" image\n        where\n            image = getImage (1024, 1024)\n</code></pre>\n\n<p>Cannot seem to figure out what I am doing wrong.</p>\n"}, {"tags": ["haskell", "haskell-stack"], "comments": [{"owner": {"reputation": 75362, "user_id": 625403, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/786eed7da67079cb5d63a49d469af25b?s=128&d=identicon&r=PG", "display_name": "amalloy", "link": "https://stackoverflow.com/users/625403/amalloy"}, "edited": false, "score": 1, "creation_date": 1560373366, "post_id": 56569517, "comment_id": 99719672, "body": "I expect <code>git</code> requires a bare repository, and not one with a working tree."}], "answers": [{"comments": [{"owner": {"reputation": 75362, "user_id": 625403, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/786eed7da67079cb5d63a49d469af25b?s=128&d=identicon&r=PG", "display_name": "amalloy", "link": "https://stackoverflow.com/users/625403/amalloy"}, "edited": false, "score": 0, "creation_date": 1560416433, "post_id": 56573316, "comment_id": 99731774, "body": "&quot;When cloning the target repo, Stack will change into a new temporary directory first&quot; - Why? <code>git-clone</code> supports being told what directory to clone into."}, {"owner": {"reputation": 30377, "user_id": 369198, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/71596bb1ca3ba3aa4400c3f407baec9f?s=128&d=identicon&r=PG", "display_name": "Michael Snoyman", "link": "https://stackoverflow.com/users/369198/michael-snoyman"}, "reply_to_user": {"reputation": 75362, "user_id": 625403, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/786eed7da67079cb5d63a49d469af25b?s=128&d=identicon&r=PG", "display_name": "amalloy", "link": "https://stackoverflow.com/users/625403/amalloy"}, "edited": false, "score": 0, "creation_date": 1560438177, "post_id": 56573316, "comment_id": 99744876, "body": "That should be possible, and not particularly difficult to change, if you&#39;re interested in sending a PR."}, {"owner": {"reputation": 4681, "user_id": 1264328, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/786f8275d9fa334bc27630e0fc7f0d22?s=128&d=identicon&r=PG", "display_name": "bwroga", "link": "https://stackoverflow.com/users/1264328/bwroga"}, "edited": false, "score": 0, "creation_date": 1560455394, "post_id": 56573316, "comment_id": 99753201, "body": "Thanks. I&#39;m fine with absolute paths."}, {"owner": {"reputation": 30377, "user_id": 369198, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/71596bb1ca3ba3aa4400c3f407baec9f?s=128&d=identicon&r=PG", "display_name": "Michael Snoyman", "link": "https://stackoverflow.com/users/369198/michael-snoyman"}, "edited": false, "score": 0, "creation_date": 1560482811, "post_id": 56573316, "comment_id": 99759274, "body": "That&#39;s awesome!"}, {"owner": {"reputation": 4681, "user_id": 1264328, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/786f8275d9fa334bc27630e0fc7f0d22?s=128&d=identicon&r=PG", "display_name": "bwroga", "link": "https://stackoverflow.com/users/1264328/bwroga"}, "reply_to_user": {"reputation": 75362, "user_id": 625403, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/786eed7da67079cb5d63a49d469af25b?s=128&d=identicon&r=PG", "display_name": "amalloy", "link": "https://stackoverflow.com/users/625403/amalloy"}, "edited": false, "score": 0, "creation_date": 1560541392, "post_id": 56573316, "comment_id": 99784789, "body": "@amalloy Thanks!"}], "tags": [], "owner": {"reputation": 30377, "user_id": 369198, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/71596bb1ca3ba3aa4400c3f407baec9f?s=128&d=identicon&r=PG", "display_name": "Michael Snoyman", "link": "https://stackoverflow.com/users/369198/michael-snoyman"}, "is_accepted": true, "score": 1, "last_activity_date": 1560399533, "creation_date": 1560399533, "answer_id": 56573316, "question_id": 56569517, "link": "https://stackoverflow.com/questions/56569517/local-dependency-with-git-commit/56573316#56573316", "title": "Local dependency with git commit", "body": "<p>Side note: it would be a good idea to include the error messages you receive in the future.</p>\n\n<p>I just checked this myself, and I can see why it doesn't work. When cloning the target repo, Stack will change into a new temporary directory first. Then, the relative path in the <code>stack.yaml</code> file is no longer valid. If you want, you can work around this using an absolute path in the <code>stack.yaml</code> file.</p>\n\n<p>In theory we could add support to Stack to detect that a relative path to a repo has been given and convert it into an absolute path. But I think the use case would need to be worked out more fully to justify such a change. I believe most commonly the approach you're describing is handled via Git submodules.</p>\n"}], "owner": {"reputation": 4681, "user_id": 1264328, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/786f8275d9fa334bc27630e0fc7f0d22?s=128&d=identicon&r=PG", "display_name": "bwroga", "link": "https://stackoverflow.com/users/1264328/bwroga"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 200, "favorite_count": 0, "accepted_answer_id": 56573316, "answer_count": 1, "score": 3, "last_activity_date": 1560399533, "creation_date": 1560369260, "last_edit_date": 1560371506, "question_id": 56569517, "link": "https://stackoverflow.com/questions/56569517/local-dependency-with-git-commit", "title": "Local dependency with git commit", "body": "<p>In my stack.yaml file, I want to add a dependency to a package located on my computer.</p>\n\n<p>I can do it like this:</p>\n\n<pre><code>- location : ../Bwroga\n  extra-dep: true\n</code></pre>\n\n<p>Is it possible to also specify a commit? I know I can do this if the package is hosted on github or bitbucket, but I want to keep the dependency on my computer.</p>\n\n<p>I tried:</p>\n\n<pre><code>- location :\n    git: ../Bwroga\n    commit: 039bd43313803a88c990af3ddcd6d75419ab44a1\n  extra-dep: true\n\n- location :\n    git: ../Bwroga/bwroga.git\n    commit: 039bd43313803a88c990af3ddcd6d75419ab44a1\n  extra-dep: true\n</code></pre>\n\n<p>but got errors stating that the repository does not exist.</p>\n\n<p>I also tried:</p>\n\n<pre><code>- location: ../Bwroga\n  commit: 039bd43313803a88c990af3ddcd6d75419ab44a1\n  extra-dep: true\n</code></pre>\n\n<p>It compiled, but said that the commit field was unrecognized.</p>\n"}, {"tags": ["haskell", "random", "monads"], "comments": [{"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "edited": false, "score": 0, "creation_date": 1560347725, "post_id": 56563485, "comment_id": 99707305, "body": "What did you try with <code>MonadRandom</code> that wasn&#39;t repeatable?"}, {"owner": {"reputation": 1979, "user_id": 2789312, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/4OgOz.png?s=128&g=1", "display_name": "palik", "link": "https://stackoverflow.com/users/2789312/palik"}, "edited": false, "score": 1, "creation_date": 1560348094, "post_id": 56563485, "comment_id": 99707571, "body": "<a href=\"https://hackage.haskell.org/package/io-streams-1.5.1.0/docs/System-IO-Streams.html#v:fromGenerator\" rel=\"nofollow noreferrer\">System.IO.Streams.fromGenerator</a>"}], "answers": [{"comments": [{"owner": {"reputation": 1435, "user_id": 2335363, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/11bzw.jpg?s=128&g=1", "display_name": "Adahus", "link": "https://stackoverflow.com/users/2335363/adahus"}, "edited": false, "score": 0, "creation_date": 1560366359, "post_id": 56564029, "comment_id": 99716780, "body": "Thanks @Daniel Wagner - this really clarifies things for me - I don&#39;t need to interleave so the first approach should be fine.  I will have another look at MonadRandom when I have time."}], "tags": [], "owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "is_accepted": true, "score": 5, "last_activity_date": 1560348346, "last_edit_date": 1560348346, "creation_date": 1560348003, "answer_id": 56564029, "question_id": 56563485, "link": "https://stackoverflow.com/questions/56563485/create-random-numbers-in-a-reproducible-way-and-hide-generator-threading-using/56564029#56564029", "title": "Create random numbers in a reproducible way and hide generator threading (Using Haskell Monad)", "body": "<p>If you needn't interleave <code>IO</code> with randomness, as here, then the answer is just to lump your <code>State</code> actions together into one with the <code>Monad</code> operations (they're the thing passing the state around for you!).</p>\n\n<pre><code>test :: Int -&gt; IO ()\ntest seed = do\n  print a\n  print b\n  print c\n  print d\n  where\n  (a,b,c,d) = flip evalState (mkStdGen seed) $ do\n    a &lt;- roll\n    b &lt;- roll\n    c &lt;- roll2\n    d &lt;- roll2\n    return (a,b,c,d)\n</code></pre>\n\n<p>If you will need to interleave <code>IO</code> and randomness, then you will want to look into <code>StateT StdGen IO</code> as your monad instead of using <code>State StdGen</code> and <code>IO</code> separately. That might look like this, say:</p>\n\n<pre><code>roll :: MonadState StdGen m =&gt; m Int\nroll = state (randomR (1,6))\n\nroll2 :: MonadState StdGen m =&gt; m Int\nroll2 = (+) &lt;$&gt; roll &lt;*&gt; roll\n\ntest :: (MonadState StdGen m, MonadIO m) =&gt; m ()\ntest = do\n  roll &gt;&gt;= liftIO . print\n  roll &gt;&gt;= liftIO . print\n  roll2 &gt;&gt;= liftIO . print\n  roll2 &gt;&gt;= liftIO . print\n</code></pre>\n\n<p>(You could then use e.g. <code>evalStateT test (mkStdGen seed)</code> to turn this back into an <code>IO ()</code> action, or embed it into a larger computation if there were further random things you needed to generate and do <code>IO</code> about.)</p>\n\n<p><code>MonadRandom</code> does little more than package up <code>StateT StdGen</code> in a way that lets you still use non-seed state, so I encourage you to reconsider using it. <code>evalRand</code> and <code>evalRandT</code> from <code>Control.Monad.Random.Lazy</code> (or <code>.Strict</code>) shouldy give you the repeatability you need; if they don't, you should open a fresh question with the full details of what you tried and how it went wrong.</p>\n"}, {"comments": [{"owner": {"reputation": 7666, "user_id": 1241193, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0331e5e748a0ac3860b68f6cac130ef1?s=128&d=identicon&r=PG", "display_name": "Bob Dalgleish", "link": "https://stackoverflow.com/users/1241193/bob-dalgleish"}, "edited": false, "score": 2, "creation_date": 1560362096, "post_id": 56564052, "comment_id": 99714953, "body": "The point is reproducibility. Pseudo-randomness is required for effects such as backoff, dithering, standard noise functions and so on. Being able to test a dithering algorithm by repeatedly using the same RNG (in quotes) sequence is very useful."}, {"owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "reply_to_user": {"reputation": 7666, "user_id": 1241193, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0331e5e748a0ac3860b68f6cac130ef1?s=128&d=identicon&r=PG", "display_name": "Bob Dalgleish", "link": "https://stackoverflow.com/users/1241193/bob-dalgleish"}, "edited": false, "score": 0, "creation_date": 1560365013, "post_id": 56564052, "comment_id": 99716216, "body": "@BobDalgleish sure, but a dithering algorithm that uses the same brightness tweak <i>for every pixel</i> wouldn&#39;t accomplish anything. The trick is to seed it always with the same constant <i>at the beginning</i> of the program, but then propagate/update the generator throughout, so that values <i>within</i> the program run vary. (Whether you want corresponding values in different program runs to be the same depends on the application.)"}, {"owner": {"reputation": 1435, "user_id": 2335363, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/11bzw.jpg?s=128&g=1", "display_name": "Adahus", "link": "https://stackoverflow.com/users/2335363/adahus"}, "reply_to_user": {"reputation": 7666, "user_id": 1241193, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0331e5e748a0ac3860b68f6cac130ef1?s=128&d=identicon&r=PG", "display_name": "Bob Dalgleish", "link": "https://stackoverflow.com/users/1241193/bob-dalgleish"}, "edited": false, "score": 0, "creation_date": 1560366259, "post_id": 56564052, "comment_id": 99716733, "body": "For my application I wanted to choose a seed at the start and then for exactly the same sequence of random numbers to be produced - that&#39;s what I was meaning by repeatability.  The point is that I want the roll function to produce a random number each time so it might or might not be the same as previously. @Bob Dalgleish, &quot;Reproducibility&quot; is I think a better word to describe what I need.  My primary reason for this is that I want to create random data but if I discover a bug or problem with my software I want to be able to reproduce the exact same random sequence so I can debug the issue."}, {"owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "reply_to_user": {"reputation": 1435, "user_id": 2335363, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/11bzw.jpg?s=128&g=1", "display_name": "Adahus", "link": "https://stackoverflow.com/users/2335363/adahus"}, "edited": false, "score": 0, "creation_date": 1560366379, "post_id": 56564052, "comment_id": 99716790, "body": "@Adahus ok, that makes much more sense. Unfortunately your question was phrased rather ambiguously. And I couldn&#39;t see you meaning that, because it&#39;s <i>just what the random/state monad does</i>."}, {"owner": {"reputation": 1435, "user_id": 2335363, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/11bzw.jpg?s=128&g=1", "display_name": "Adahus", "link": "https://stackoverflow.com/users/2335363/adahus"}, "edited": false, "score": 0, "creation_date": 1560366452, "post_id": 56564052, "comment_id": 99716822, "body": "@leftroundabout - I&#39;ll edit the question to make this clearer. Thanks"}, {"owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "edited": false, "score": 0, "creation_date": 1560369096, "post_id": 56564052, "comment_id": 99717982, "body": "TBH it&#39;s hardly clearer with only that one word substituted... but anyway, I suppose Daniel&#39;s answer is what you were looking for, right?"}], "tags": [], "owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "is_accepted": false, "score": 0, "last_activity_date": 1560348070, "creation_date": 1560348070, "answer_id": 56564052, "question_id": 56563485, "link": "https://stackoverflow.com/questions/56563485/create-random-numbers-in-a-reproducible-way-and-hide-generator-threading-using/56564052#56564052", "title": "Create random numbers in a reproducible way and hide generator threading (Using Haskell Monad)", "body": "<p>Normally, it's pretty much the whole point of a random generator that you <em>don't</em> always get the same result. And that's the reason why you use a state monad: to pass on the <em>updated</em> generator, so that the next random event will actually be different.</p>\n\n<p>If you want always the same value, then there's not really any reason to use special random tooling at all \u2013 just generate one value once (or two values), then pass it on whereever needed, like you would pass on another variable.</p>\n\n<pre><code>test :: IO ()\ntest = do\n   [dice0, dice1] &lt;- replicateM 2 $ randomRIO (1,6)\n   print dice0\n   print dice0\n   print $ dice0+dice1\n   print $ dice0+dice1\n</code></pre>\n"}], "owner": {"reputation": 1435, "user_id": 2335363, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/11bzw.jpg?s=128&g=1", "display_name": "Adahus", "link": "https://stackoverflow.com/users/2335363/adahus"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 171, "favorite_count": 0, "accepted_answer_id": 56564029, "answer_count": 2, "score": 0, "last_activity_date": 1560366572, "creation_date": 1560346328, "last_edit_date": 1560366572, "question_id": 56563485, "link": "https://stackoverflow.com/questions/56563485/create-random-numbers-in-a-reproducible-way-and-hide-generator-threading-using", "title": "Create random numbers in a reproducible way and hide generator threading (Using Haskell Monad)", "body": "<p>I need to create random data in Haskell.\nI want my code to be:\n  a) reproducible from a seed\n  b) the threading of generators to be implicit</p>\n\n<p>I understand Monads generally and the way that Random Generators work.\nMy approach is to thread the generator through the code so I can reproduce the random numbers but want to hide the threading of the generators in a Monad.\nI'm thinking that the State Monad is a good approach.</p>\n\n<p>Here's some simple code:</p>\n\n<pre><code>type Gen a = State StdGen a\n\nroll :: Gen Int\nroll = state $ randomR (1, 6)\n\nroll2 :: Gen Int\nroll2 = (+) &lt;$&gt; roll &lt;*&gt; roll\n\ntest :: Int -&gt; IO ()\ntest seed = do\n  let gen = mkStdGen seed\n  print (evalState roll gen)\n  print (evalState roll gen)\n  print (evalState roll2 gen)\n  print (evalState roll2 gen)\n</code></pre>\n\n<p>I'm trying to use State so that I can push the threading of the generator into the State Monad but the results of roll are the same and results of roll2 are the same.  I can see that this is because I'm passing gen into the functions multiple times so of course it would produce the same output.  So that makes me think I need to get a new generator from each function.  But then I'm back to having to thread the generator through the code which is what I'm trying to avoid by using State.  I feel like I'm missing a trick!</p>\n\n<p>I explored MonadRandom too and that did push the threading away from my code but I couldn't see how to make that approach be reproducible.</p>\n\n<p>I've hunted a lot and tried many things but seem to always either be able to hide the generators OR make the code reproducible but not both.</p>\n\n<p>I'm keen to use a Monad more specific than IO.</p>\n\n<p>I'm also going to build a series of more complex functions which will generate random lists of numbers so I need to have a simple way to make these random functions rely on each other.  I managed that with MonadRandom but again I couldn't see how that could be reproducible.</p>\n\n<p>Any help appreciated.</p>\n"}, {"tags": ["haskell", "types", "dependent-type", "singleton-type"], "comments": [{"owner": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "edited": false, "score": 5, "creation_date": 1560338152, "post_id": 56560662, "comment_id": 99701235, "body": "What about <code>fromSing</code>? <a href=\"https://hackage.haskell.org/package/singletons-2.5.1/docs/Data-Singletons.html#v:fromSing\" rel=\"nofollow noreferrer\">hackage.haskell.org/package/singletons-2.5.1/docs/&hellip;</a>"}, {"owner": {"reputation": 1474, "user_id": 8025936, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/Kue08.png?s=128&g=1", "display_name": "schuelermine", "link": "https://stackoverflow.com/users/8025936/schuelermine"}, "reply_to_user": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "edited": false, "score": 0, "creation_date": 1560338694, "post_id": 56560662, "comment_id": 99701560, "body": "Thanks! That solves my problem. Althoug, do you know if there&#39;s ways of converting between the various Natural types? That is, the ones in GHC.Natural, Numeric.Natural, Data.Nat, Data.Natural, Data.Singletons.TypeLits, GHC.TypeLits and GHC.TypeNats"}, {"owner": {"reputation": 11366, "user_id": 3922954, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/76ba47d2fdd24ab56b0b273cce2075e5?s=128&d=identicon&r=PG&f=1", "display_name": "AJF", "link": "https://stackoverflow.com/users/3922954/ajf"}, "edited": false, "score": 0, "creation_date": 1560338817, "post_id": 56560662, "comment_id": 99701629, "body": "@schuelermine <a href=\"https://hoogle.haskell.org/?hoogle=Natural%20-%3E%20Nat\" rel=\"nofollow noreferrer\">That&#39;s what hoogle&#39;s for.</a> If you have a different question, ask it elsewhere."}], "answers": [{"tags": [], "owner": {"reputation": 1474, "user_id": 8025936, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/Kue08.png?s=128&g=1", "display_name": "schuelermine", "link": "https://stackoverflow.com/users/8025936/schuelermine"}, "is_accepted": true, "score": 0, "last_activity_date": 1561285036, "creation_date": 1561285036, "answer_id": 56722900, "question_id": 56560662, "link": "https://stackoverflow.com/questions/56560662/is-there-a-function-to-extract-a-value-from-a-singleton/56722900#56722900", "title": "Is there a function to extract a value from a Singleton?", "body": "<p>You can use <code>fromSing</code> from <code>singletons</code></p>\n"}], "owner": {"reputation": 1474, "user_id": 8025936, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/Kue08.png?s=128&g=1", "display_name": "schuelermine", "link": "https://stackoverflow.com/users/8025936/schuelermine"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 110, "favorite_count": 0, "accepted_answer_id": 56722900, "answer_count": 1, "score": 1, "last_activity_date": 1561285036, "creation_date": 1560337481, "last_edit_date": 1560338239, "question_id": 56560662, "link": "https://stackoverflow.com/questions/56560662/is-there-a-function-to-extract-a-value-from-a-singleton", "title": "Is there a function to extract a value from a Singleton?", "body": "<p>I'm developing a data type which requires an <code>SNat</code>, and would like to have the ability to give the user a <code>Nat</code> instead. Searching on Hoogle has yet to yield results.</p>\n\n<p>That is, is there a function</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>f :: forall a (x :: a). Sing a x -&gt; a\n</code></pre>\n\n<p>?</p>\n"}, {"tags": ["haskell", "functor", "category-theory"], "comments": [{"owner": {"reputation": 384463, "user_id": 1126841, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fa05233b2357f8d11c22ef4cfc7bb85c?s=128&d=identicon&r=PG", "display_name": "chepner", "link": "https://stackoverflow.com/users/1126841/chepner"}, "edited": false, "score": 4, "creation_date": 1560375304, "post_id": 56559213, "comment_id": 99720242, "body": "I could (so, so easily) be wrong, but I think <code>Data.Functor.Adjunction</code> exists primarily to demonstrate that the categorical idea of adjunction can be represented in Haskell."}, {"owner": {"reputation": 8440, "user_id": 402428, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b17015101f2649d332c389337897816b?s=128&d=identicon&r=PG", "display_name": "michid", "link": "https://stackoverflow.com/users/402428/michid"}, "reply_to_user": {"reputation": 384463, "user_id": 1126841, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fa05233b2357f8d11c22ef4cfc7bb85c?s=128&d=identicon&r=PG", "display_name": "chepner", "link": "https://stackoverflow.com/users/1126841/chepner"}, "edited": false, "score": 1, "creation_date": 1560937659, "post_id": 56559213, "comment_id": 99897691, "body": "There is a use case in a made up game here: <a href=\"https://chrispenner.ca/posts/adjunction-battleship\" rel=\"nofollow noreferrer\">chrispenner.ca/posts/adjunction-battleship</a> I have yet to work through this write up myself."}, {"owner": {"reputation": 31243, "user_id": 2751851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/4ddc0.png?s=128&g=1", "display_name": "duplode", "link": "https://stackoverflow.com/users/2751851/duplode"}, "edited": false, "score": 1, "creation_date": 1561126245, "post_id": 56559213, "comment_id": 99973546, "body": "Nitpick: the first instance you have linked to isn&#39;t a free/forgetful adjunction, but an adjunction between the free monad for a Hask/Hask left adjoint and the cofree comonad for the corresponding Hask/Hask right adjoint."}], "answers": [{"comments": [{"owner": {"reputation": 8440, "user_id": 402428, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b17015101f2649d332c389337897816b?s=128&d=identicon&r=PG", "display_name": "michid", "link": "https://stackoverflow.com/users/402428/michid"}, "edited": false, "score": 0, "creation_date": 1561151919, "post_id": 56704938, "comment_id": 99984321, "body": "thanks for so much insight. This is food for thoughts for me for a while."}], "tags": [], "owner": {"reputation": 31243, "user_id": 2751851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/4ddc0.png?s=128&g=1", "display_name": "duplode", "link": "https://stackoverflow.com/users/2751851/duplode"}, "is_accepted": true, "score": 4, "last_activity_date": 1561156356, "last_edit_date": 1561156356, "creation_date": 1561125653, "answer_id": 56704938, "question_id": 56559213, "link": "https://stackoverflow.com/questions/56559213/use-cases-for-adjunctions-in-haskell/56704938#56704938", "title": "Use cases for adjunctions in Haskell", "body": "<p><em>Preliminary note: This answer is a bit speculative. Much like the question, it was built from studying <code>Data.Functor.Adjunction</code>.</em></p>\n\n<p>I can think of three reasons why there aren't many use cases for the <code>Adjunction</code> class in the wild.</p>\n\n<p>Firstly, all Hask/Hask adjunctions are ultimately some variation on the currying adjunction, so the spectrum of potential instances isn't all that large to begin with. Many of the adjunctions one might be interested on aren't Hask/Hask.</p>\n\n<p>Secondly, while an <code>Adjunction</code> instance gives you a frankly awesome amount of other instances for free, in many cases those instances already exist somewhere else. To pick the ur-example, we might very easily implement <code>StateT</code> in terms of <a href=\"http://hackage.haskell.org/package/adjunctions-4.4/docs/Control-Monad-Trans-Adjoint.html\" rel=\"nofollow noreferrer\"><code>Control.Monad.Trans.Adjoint</code></a>:</p>\n\n<pre><code>newtype StateT s m a = StateT { runStateT :: s -&gt; m (s, a) }\n  deriving (Functor, Applicative, Monad) via AdjointT ((,) s) ((-&gt;) s) m\n  deriving MonadTrans via AdjointT ((,) s) ((-&gt;) s)\n  -- There is also a straightforward, fairly general way to implement MonadState.\n</code></pre>\n\n<p>However, no one needs to actually do that, because there is a perfectly good <code>StateT</code> in <em>transformers</em>. That said, if you do have an <code>Adjunction</code> instance of your own, you might be in luck. One little thing I have thought of that might make sense (even if I haven't actually seen it out there) are the following functors:</p>\n\n<pre><code>data Dilemma a = Dilemma { fstDil :: a, sndDil a }\n\ndata ChoiceF a = Fst a | Snd a\n</code></pre>\n\n<p>We might write an <code>Adjunction ChoiceF Dilemma</code> instance, which reflects how <code>Dilemma (ChoiceF a)</code> is materialised  version of <code>State Bool a</code>. <code>Dilemma (ChoiceF a)</code> can be thought of as a step in a decision tree: choosing one side of the <code>Dilemma</code> tells you, through the <code>ChoiceF</code> constructors, what choice is to be made next. The <code>Adjunction</code> instance would then give us a monad transformer for <code>Dilemma (ChoiceF a)</code> for free.</p>\n\n<p>(Another possibility might be exploiting <a href=\"https://hackage.haskell.org/package/adjunctions-4.4/docs/Data-Functor-Adjunction.html#t:Adjunction\" rel=\"nofollow noreferrer\">the <code>Free f</code>/<code>Cofree u</code> adjunction</a>. <code>Cofree Dilemma a</code> is an infinite tree of outcomes, while <code>Free ChoiceF a</code> is a path leading to an outcome. I hazard there is some mileage to get out of that.)</p>\n\n<p>Thirdly, while there are many useful functions for right adjoints in <code>Data.Functor.Adjunction</code>, most of the functionality they provide is also available through <code>Representable</code> and/or <code>Distributive</code>, so most places where they might be used end up sticking with the superclasses instead.</p>\n\n<p><code>Data.Functor.Adjunction</code>, of course, also offers useful functions for <em>left</em> adjoints. On the one hand, left adjoints (which are isomorphic to pairs i.e. containers that hold a single element) are probably less versatile than right adjoints (which are isomorphic to functions i.e. functors with a single shape); on the other hand, there doesn't seem to be any canonical class for left adjoints (not yet, at least), so that might lead to opportunities for actually using <code>Data.Functor.Adjunction</code> functions. Incidentally, <a href=\"https://chrispenner.ca/posts/adjunction-battleship\" rel=\"nofollow noreferrer\">Chris Penner's battleship example</a> you suggested arguably fits the bill, as it does rely on the left adjoint and how it can be used to encode the representation of the right adjoint:</p>\n\n<pre><code>zapWithAdjunction :: Adjunction f u =&gt; (a -&gt; b -&gt; c) -&gt; u a -&gt; f b -&gt; c\nzapWithAdjunction @CoordF @Board :: (a -&gt; b -&gt; c) -&gt; Board a -&gt; CoordF b -&gt; c\n\ncheckHit :: Vessel -&gt; Weapon -&gt; Bool\n\nshoot :: Board Vessel -&gt; CoordF Weapon -&gt; Bool\n</code></pre>\n\n<p><code>CoordF</code>, the left adjoint, carries coordinates for the board and a payload. <code>zapWithAdjunction</code> makes it possible to (quite literally, in this case), target the position while using the payload.</p>\n"}], "owner": {"reputation": 8440, "user_id": 402428, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b17015101f2649d332c389337897816b?s=128&d=identicon&r=PG", "display_name": "michid", "link": "https://stackoverflow.com/users/402428/michid"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1290, "favorite_count": 5, "accepted_answer_id": 56704938, "answer_count": 1, "score": 12, "last_activity_date": 1561156356, "creation_date": 1560332875, "last_edit_date": 1560503407, "question_id": 56559213, "link": "https://stackoverflow.com/questions/56559213/use-cases-for-adjunctions-in-haskell", "title": "Use cases for adjunctions in Haskell", "body": "<p>I have been reading up on <a href=\"https://en.wikipedia.org/wiki/Adjoint_functors\" rel=\"noreferrer\">adjunctions</a> during the last couple of days. While I start to understand their importance from a theoretical point of view, I wonder how and why people use them in Haskell. <a href=\"http://hackage.haskell.org/package/adjunctions-4.4/docs/Data-Functor-Adjunction.html\" rel=\"noreferrer\"><code>Data.Functor.Adjunction</code></a> provides an implementation and among its instances are  <a href=\"http://hackage.haskell.org/package/adjunctions-4.4/docs/src/Data-Functor-Adjunction.html#line-197\" rel=\"noreferrer\">free functor / forgetful</a> functor and <a href=\"http://hackage.haskell.org/package/adjunctions-4.4/docs/src/Data-Functor-Adjunction.html#line-163\" rel=\"noreferrer\">curry / uncurry</a>. Again those are very interesting from the theoretical view point but I can't see how I would use them for more practical programming problems. </p>\n\n<p>Are there examples of programming problems people solved using <code>Data.Functor.Adjunction</code> and why you would prefer this implementation over others?</p>\n"}, {"tags": ["haskell", "quickcheck"], "comments": [{"owner": {"reputation": 208473, "user_id": 126014, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/33526616d4a11f1630d4939b769cfbf9?s=128&d=identicon&r=PG", "display_name": "Mark Seemann", "link": "https://stackoverflow.com/users/126014/mark-seemann"}, "edited": false, "score": 1, "creation_date": 1560274174, "post_id": 56548719, "comment_id": 99679665, "body": "The second item sounds like it should be possible, but I&#39;m having a hard time understanding why you want to do the two other things, or what you even mean by those, so perhaps I&#39;m misunderstanding the second item as well. Can you elaborate on your overall goal?"}, {"owner": {"reputation": 673, "user_id": 1123565, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/D5Dfl.jpg?s=128&g=1", "display_name": "Andi Domi", "link": "https://stackoverflow.com/users/1123565/andi-domi"}, "reply_to_user": {"reputation": 208473, "user_id": 126014, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/33526616d4a11f1630d4939b769cfbf9?s=128&d=identicon&r=PG", "display_name": "Mark Seemann", "link": "https://stackoverflow.com/users/126014/mark-seemann"}, "edited": false, "score": 0, "creation_date": 1560274476, "post_id": 56548719, "comment_id": 99679794, "body": "@MarkSeemann what I would like to do is to create 200 random tests with quickCheck on the function &#180;whatAge&#180; no matter the outcome of the tests (False or True).  Where each input of the function should be in a specified range."}, {"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "edited": false, "score": 0, "creation_date": 1560276123, "post_id": 56548719, "comment_id": 99680571, "body": "How should &quot;generate 200 random tests even on failure&quot; interact with shrinking?"}, {"owner": {"reputation": 2158, "user_id": 9991455, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2ff5d55afd5d829849efbf27962dd320?s=128&d=identicon&r=PG&f=1", "display_name": "Lorenzo", "link": "https://stackoverflow.com/users/9991455/lorenzo"}, "edited": false, "score": 1, "creation_date": 1560276805, "post_id": 56548719, "comment_id": 99680853, "body": "I think the main issue is that you&#39;re using QuickCheck for something it was not intended for. QuickCheck should be used to verify that your function holds some property, for example in this case <code>check a1 a2 a3 a4 = whatAge a1 a2 a3 a4 == (a1 +a2+a3+a4==5)</code>"}, {"owner": {"reputation": 2158, "user_id": 9991455, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2ff5d55afd5d829849efbf27962dd320?s=128&d=identicon&r=PG&f=1", "display_name": "Lorenzo", "link": "https://stackoverflow.com/users/9991455/lorenzo"}, "edited": false, "score": 1, "creation_date": 1560276915, "post_id": 56548719, "comment_id": 99680896, "body": "Also on another note, in Haskell saying <code>if this then True else False</code> is literally the same as saying <code>this</code>. So in your case, your function could be simplified as <code>whatAge a1 a2 a3 a4 = a1+a2+a3+a4 == 5</code>"}, {"owner": {"reputation": 62421, "user_id": 216164, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/786f224adbe0784cdf7d0f15476061fe?s=128&d=identicon&r=PG", "display_name": "Thomas M. DuBuisson", "link": "https://stackoverflow.com/users/216164/thomas-m-dubuisson"}, "edited": false, "score": 0, "creation_date": 1560277196, "post_id": 56548719, "comment_id": 99681016, "body": "You can use <a href=\"http://hackage.haskell.org/package/QuickCheck-2.13.1/docs/Test-QuickCheck.html#v:-61--61--62-\" rel=\"nofollow noreferrer\">implication</a> for number 2, but it would be better to define a generator for the range instead of discarding lots of possible tests.  You can&#39;t do #1 nor #3 I believe."}], "answers": [{"comments": [{"owner": {"reputation": 48938, "user_id": 246886, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/dd1ebaade6623fc538fb8af3338e730d?s=128&d=identicon&r=PG", "display_name": "Jon Purdy", "link": "https://stackoverflow.com/users/246886/jon-purdy"}, "edited": false, "score": 0, "creation_date": 1560321530, "post_id": 56549799, "comment_id": 99692531, "body": "The value-level  <code>==&gt;</code> is the buried lede here. The <code>Range</code> type is certainly nice, but there\u2019s an overkill number of moving parts here considering OP\u2019s stated level with Haskell."}], "tags": [], "owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "is_accepted": false, "score": 0, "last_activity_date": 1560278751, "last_edit_date": 1560278751, "creation_date": 1560277924, "answer_id": 56549799, "question_id": 56548719, "link": "https://stackoverflow.com/questions/56548719/how-to-run-a-specific-number-of-tests-in-quickcheck/56549799#56549799", "title": "How to run a specific number of tests in QuickCheck?", "body": "<p>For simple properties of your input, you can make a newtype with an appropriate <code>Arbitrary</code> instance that captures them. So:</p>\n\n<pre><code>{-# LANGUAGE AllowAmbiguousTypes #-}\n{-# LANGUAGE DataKinds #-}\n{-# LANGUAGE GeneralizedNewtypeDeriving #-}\n{-# LANGUAGE KindSignatures #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n{-# LANGUAGE TypeApplications #-}\n\nimport Data.Proxy\nimport GHC.TypeLits\nimport Test.QuickCheck\n\nnewtype Range (m :: Nat) (n :: Nat) a = Range { getVal :: a }\n    deriving (Eq, Ord, Read, Show, Num, Real, Enum, Integral)\n\nnumVal :: forall n a. (KnownNat n, Num a) =&gt; a\nnumVal = fromInteger (natVal @n Proxy)\n\ninstance (KnownNat m, KnownNat n, Arbitrary a, Integral a) =&gt; Arbitrary (Range m n a) where\n    arbitrary = fromInteger &lt;$&gt; choose (numVal @m, numVal @n)\n    shrink hi = go (numVal @m) where\n        go lo | lo == hi = [] | otherwise = lo : go ((lo+hi+1)`div`2) -- overflow? what's that? lmao\n\nwhatAge :: Range 1 30 Int -&gt; Range 1 40 Int -&gt; Range 1 50 Int -&gt; Range 1 60 Int -&gt; Bool\nwhatAge (Range age1) (Range age2) (Range age3) (Range age4)\n    = age1 + age2 + age3 + age4 == 5\n</code></pre>\n\n<p>In ghci:</p>\n\n<pre><code>&gt; verboseCheck whatAge\nFailed:  \nRange {getVal = 17}\nRange {getVal = 29}\nRange {getVal = 3}\nRange {getVal = 16}\n\nFailed:                                  \nRange {getVal = 1}\nRange {getVal = 29}\nRange {getVal = 3}\nRange {getVal = 16}\n\nFailed:                                               \nRange {getVal = 1}\nRange {getVal = 1}\nRange {getVal = 3}\nRange {getVal = 16}\n\nFailed:                                                \nRange {getVal = 1}\nRange {getVal = 1}\nRange {getVal = 1}\nRange {getVal = 16}\n\nFailed:                                                \nRange {getVal = 1}\nRange {getVal = 1}\nRange {getVal = 1}\nRange {getVal = 1}\n\n*** Failed! Falsifiable (after 1 test and 4 shrinks):  \nRange {getVal = 1}\nRange {getVal = 1}\nRange {getVal = 1}\nRange {getVal = 1}\n</code></pre>\n\n<p>For more complicated properties, where it's not clear to how to directly create a random value that satisfies the property, you may use QuickCheck's <a href=\"https://hackage.haskell.org/package/QuickCheck-2.13.1/docs/Test-QuickCheck.html#v:-61--61--62-\" rel=\"nofollow noreferrer\"><code>(==&gt;)</code></a> operator. For example, for range checks as above:</p>\n\n<pre><code>&gt; verboseCheck (\\x -&gt; (1 &lt;= x &amp;&amp; x &lt;= 30) ==&gt; x*2 &lt; 60)\nSkipped (precondition false):\n0\n\nPassed:                \n1\n\n*** Failed! Falsifiable (after 33 tests):                  \n30\n</code></pre>\n\n<p>To make exactly 200 tests, you could call <code>quickCheckWith</code> to make one test, 200 times; or you could directly <a href=\"https://hackage.haskell.org/package/QuickCheck-2.13.1/docs/Test-QuickCheck-Gen.html#v:generate\" rel=\"nofollow noreferrer\"><code>generate</code></a> test results by calling your property on <code>arbitrary</code> manually.</p>\n"}], "owner": {"reputation": 673, "user_id": 1123565, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/D5Dfl.jpg?s=128&g=1", "display_name": "Andi Domi", "link": "https://stackoverflow.com/users/1123565/andi-domi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 258, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1560278751, "creation_date": 1560273162, "last_edit_date": 1560276490, "question_id": 56548719, "link": "https://stackoverflow.com/questions/56548719/how-to-run-a-specific-number-of-tests-in-quickcheck", "title": "How to run a specific number of tests in QuickCheck?", "body": "<p>I am trying to learn Haskell and specifically QuickCheck. While Haskell has a lot of information online I am struggling to create some random test with QuickCheck.</p>\n\n<p>For example, I have the following script:</p>\n\n<pre><code>import Test.QuickCheck\n\nwhatAge :: Int -&gt; Int -&gt; Int -&gt; Int -&gt; Bool\n\nwhatAge age1 age2 age3 age4\n  | age1 + age2 + age3 + age4 == 5 = True\n  | otherwise = False\n\nmain = do\n    verboseCheck  whatAge\n</code></pre>\n\n<p>When I run it shows:</p>\n\n<pre><code>*** Failed! Falsifiable (after 1 test): \n0\n0\n0\n0\n</code></pre>\n\n<p>Fairly enough it showed a test on which the function was false.</p>\n\n<p>What I would like to do though is to:</p>\n\n<ol>\n<li>Generate 200 random tests even on failure (a.k.a even when the output of the whatAge function is false)</li>\n<li><p>Be able to put a range on my function parameters, for example:</p>\n\n<pre><code>   x1 range from 1 to 30\n\n   x2 range from 1 to 40\n\n   x3 range from 1 to 50\n\n   x4 range from 1 to 60\n</code></pre></li>\n<li><p>Be able to generate non-repeating tests</p></li>\n</ol>\n\n<p>From my understanding nr 3 is not really possible with QuickCheck, for that I will have to use smallCheck but I am not sure about point 1 and 2.</p>\n"}, {"tags": ["haskell", "operator-overloading", "custom-data-type"], "comments": [{"owner": {"reputation": 11366, "user_id": 3922954, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/76ba47d2fdd24ab56b0b273cce2075e5?s=128&d=identicon&r=PG&f=1", "display_name": "AJF", "link": "https://stackoverflow.com/users/3922954/ajf"}, "edited": false, "score": 1, "creation_date": 1560271373, "post_id": 56548218, "comment_id": 99678379, "body": "<code>Non-exhaustive patterns in function ==</code> is trying to tell you that you need to write a case for <code>Farenheit a == Farenheit b</code>. If you compiled with <code>-Wall</code> it would tell you that you have non-exhaustive patterns too."}, {"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "edited": false, "score": 0, "creation_date": 1560272015, "post_id": 56548218, "comment_id": 99678683, "body": "See also <a href=\"https://stackoverflow.com/q/2737650/791604\">better exception for non-exhaustive patterns in case</a>."}, {"owner": {"reputation": 94553, "user_id": 775806, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/XNd2C.png?s=128&g=1", "display_name": "n. &#39;pronouns&#39; m.", "link": "https://stackoverflow.com/users/775806/n-pronouns-m"}, "edited": false, "score": 0, "creation_date": 1560274008, "post_id": 56548218, "comment_id": 99679572, "body": "It&#39;s a rather unfortunate design. How many cases do you need to implement a temperature difference,or an average, or pretty much any operation?"}, {"owner": {"reputation": 57, "user_id": 9164115, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Hhs2G.png?s=128&g=1", "display_name": "juancho", "link": "https://stackoverflow.com/users/9164115/juancho"}, "reply_to_user": {"reputation": 94553, "user_id": 775806, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/XNd2C.png?s=128&g=1", "display_name": "n. &#39;pronouns&#39; m.", "link": "https://stackoverflow.com/users/775806/n-pronouns-m"}, "edited": false, "score": 0, "creation_date": 1560274096, "post_id": 56548218, "comment_id": 99679630, "body": "@n.m. what do you mean?"}, {"owner": {"reputation": 94553, "user_id": 775806, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/XNd2C.png?s=128&g=1", "display_name": "n. &#39;pronouns&#39; m.", "link": "https://stackoverflow.com/users/775806/n-pronouns-m"}, "edited": false, "score": 0, "creation_date": 1560311884, "post_id": 56548218, "comment_id": 99689958, "body": "You need a lot of cases to compare two temperatures, then you need a lot of cases to subtract two temperatures, then you need a lot of cases to average two temperatures, then you need to revise all your code when someone asks you to add Rankine degrees."}], "answers": [{"comments": [{"owner": {"reputation": 57, "user_id": 9164115, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Hhs2G.png?s=128&g=1", "display_name": "juancho", "link": "https://stackoverflow.com/users/9164115/juancho"}, "edited": false, "score": 0, "creation_date": 1560273208, "post_id": 56548411, "comment_id": 99679230, "body": "I like the idea of the toY function instead of xToY. I don&#39;t understand, however, why you wouldn&#39;t make it Temp -&gt; Temp. I suppose you do this with the . operator in normalizeX? Kelvin . toKelvin in english would be &quot;apply the Kelvin constructor to the result of toKelvin X&quot;, correct?"}, {"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "reply_to_user": {"reputation": 57, "user_id": 9164115, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Hhs2G.png?s=128&g=1", "display_name": "juancho", "link": "https://stackoverflow.com/users/9164115/juancho"}, "edited": false, "score": 2, "creation_date": 1560273470, "post_id": 56548411, "comment_id": 99679331, "body": "@juancho I like your English pronunciation of <code>Kelvin . toKelvin</code>. I think I addressed why I prefer returning <code>Float</code> to <code>Temp</code> from <code>toKelvin</code> in the answer, but I&#39;ll try to expand on it a bit. I think of <code>Temp</code> as the type of a temperature in some scale that may not be known until runtime. But we <i>know</i> the scale used in the return value of <code>toKelvin</code> at compile time, so using the type that says we don&#39;t is misleading. 1/2"}, {"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "reply_to_user": {"reputation": 57, "user_id": 9164115, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Hhs2G.png?s=128&g=1", "display_name": "juancho", "link": "https://stackoverflow.com/users/9164115/juancho"}, "edited": false, "score": 2, "creation_date": 1560273574, "post_id": 56548411, "comment_id": 99679386, "body": "You could imagine a more advanced version of this that had separate types for &quot;we know it&#39;s Kelvin&quot;, &quot;we know it&#39;s Celsius&quot;, and &quot;we know it&#39;s Fahrenheit&quot;. I&#39;d be fine with that too. Going down this road quickly leads to fairly advanced type-level topics, though; the simpler version gets you much of the benefit with little cost. I definitely would want to keep <code>normalizeKelvin</code> as a separate operation, though: its use should be viewed as an explicit declaration by the programmer that they are willing to throw away compile-time information about what scale is used. 2/2"}, {"owner": {"reputation": 94553, "user_id": 775806, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/XNd2C.png?s=128&g=1", "display_name": "n. &#39;pronouns&#39; m.", "link": "https://stackoverflow.com/users/775806/n-pronouns-m"}, "edited": false, "score": 1, "creation_date": 1560274251, "post_id": 56548411, "comment_id": 99679698, "body": "Once you have <code>fromX</code> and <code>toY</code>, you don&#39;t really need three data constructors. Just keep everything in Kelvins, always."}, {"owner": {"reputation": 57, "user_id": 9164115, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Hhs2G.png?s=128&g=1", "display_name": "juancho", "link": "https://stackoverflow.com/users/9164115/juancho"}, "edited": false, "score": 0, "creation_date": 1560274377, "post_id": 56548411, "comment_id": 99679752, "body": "Great explanation. So the recursive definition for the Eq instance is a problem, and the conversion from X to a float is what avoids this recursion, concluding in a (==) check between floats."}, {"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "reply_to_user": {"reputation": 57, "user_id": 9164115, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Hhs2G.png?s=128&g=1", "display_name": "juancho", "link": "https://stackoverflow.com/users/9164115/juancho"}, "edited": false, "score": 0, "creation_date": 1560274644, "post_id": 56548411, "comment_id": 99679869, "body": "@juancho Making <code>(==)</code> recursive as you did is not a problem, necessarily; you just didn&#39;t write enough cases in your <code>(==)</code> implementation. But my proposed way results in many fewer cases to have to consider, so it&#39;s easier to get it right. =)"}, {"owner": {"reputation": 57, "user_id": 9164115, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Hhs2G.png?s=128&g=1", "display_name": "juancho", "link": "https://stackoverflow.com/users/9164115/juancho"}, "edited": false, "score": 0, "creation_date": 1560274678, "post_id": 56548411, "comment_id": 99679890, "body": "I see. So how about this for an Ord instance:  instance Ord Temp where     t <code>compare</code> t&#39; = (toKelvin t) <code>compare</code> (toKelvin t&#39;)"}, {"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "reply_to_user": {"reputation": 57, "user_id": 9164115, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Hhs2G.png?s=128&g=1", "display_name": "juancho", "link": "https://stackoverflow.com/users/9164115/juancho"}, "edited": false, "score": 0, "creation_date": 1560274699, "post_id": 56548411, "comment_id": 99679901, "body": "@juancho Makes sense to me!"}, {"owner": {"reputation": 57, "user_id": 9164115, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Hhs2G.png?s=128&g=1", "display_name": "juancho", "link": "https://stackoverflow.com/users/9164115/juancho"}, "edited": false, "score": 0, "creation_date": 1560274728, "post_id": 56548411, "comment_id": 99679918, "body": "Great! Thanks a lot mate. Cheers."}], "tags": [], "owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "is_accepted": true, "score": 11, "last_activity_date": 1560272166, "last_edit_date": 1560272166, "creation_date": 1560271792, "answer_id": 56548411, "question_id": 56548218, "link": "https://stackoverflow.com/questions/56548218/instance-of-eq-for-redefinition/56548411#56548411", "title": "Instance of Eq for (==) redefinition", "body": "<p>I recommend that you <em>never</em> write an incomplete pattern match. Thinking about what this means for your <code>xToY</code> functions, it means they should be able to handle any input -- and so their names should change to just <code>toY</code>.</p>\n\n<p>I would also represent the guarantee that we know which constructor is used by returning a <code>Float</code> (which clearly cannot be labeled by the wrong constructor) rather than a <code>Temp</code> (which could). So:</p>\n\n<pre><code>toKelvin :: Temp -&gt; Float\ntoKelvin (Fahrenheit f) = (5/9)*(f-32)+273.15\ntoKelvin (Celsius c) = c+273.15\ntoKelvin (Kelvin k) = k\n</code></pre>\n\n<p>Similarly for <code>toCelsius</code> and <code>toFahrenheit</code>. If you really wanted to, you could then separately write something like</p>\n\n<pre><code>normalizeKelvin :: Temp -&gt; Temp\nnormalizeKelvin = Kelvin . toKelvin\n</code></pre>\n\n<p>but whether this is sensible or not depends a lot on how you plan to use this code.</p>\n\n<p>Given that, we can now write an <code>Eq</code> instance which isn't recursive by just choosing one of the scales as the natural one and converting to it<sup>*</sup>. So:</p>\n\n<pre><code>instance Eq Temp where\n    t == t' = toKelvin t == toKelvin t'\n</code></pre>\n\n<p>Note that here we are dispatching from the <code>Temp</code> instance to the <code>Float</code> instance of <code>Eq</code> when we call <code>(==)</code>, unlike your code, which dispatched from the <code>Temp</code> instance back to another call to the <code>Temp</code> instance of <code>Eq</code>.</p>\n\n<p><sup>*</sup>If you are paranoid about rounding, you could first check whether a conversion is needed at all. So:</p>\n\n<pre><code>instance Eq Temp where\n    Fahrenheit f == Fahrenheit f' = f == f'\n    Celsius c == Celsius c' = c == c'\n    t == t' = toKelvin t == toKelvin t'\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "is_accepted": false, "score": 0, "last_activity_date": 1560327168, "creation_date": 1560327168, "answer_id": 56557521, "question_id": 56548218, "link": "https://stackoverflow.com/questions/56548218/instance-of-eq-for-redefinition/56557521#56557521", "title": "Instance of Eq for (==) redefinition", "body": "<p>I would recommend you <em>avoid</em> having three different possible representations of a temperature. This just leads to lots of runtime branching and conversion. It does make sense to have a dedicated type for temperatures, and it makes sense to keep the scale used a private implementation detail, but sticking to one convention simplifies things.</p>\n\n<pre><code>module Physics.Quantities.Temperature (Temperature) where\nnewtype Temp = KelvinTemp { getKelvinTemperature :: Double }\n  deriving (Eq, Ord)\n</code></pre>\n\n<p>Note that I don't export the Kelvin-specific constructor, so for anybody using this type it <em>can't</em> matter which temperature scale is used. And because the internal representation is fixed, the compiler can figure out the <code>Eq</code> and <code>Ord</code> instances by itself.</p>\n\n<p>Now ok, obviously you'll still need to be able to actually <em>get stuff done</em>, so you will need accessors. One way is simple read-in-this-scale like</p>\n\n<pre><code>toCelsius :: Temp -&gt; Double\ntoCelsius (KelvinTemp tK) = tK - waterTriplePointInK\n</code></pre>\n\n<p>But those would be one-way, not allowing you to <em>create</em> temperature values again. An elegant way of achieving this is to use <em>bidirectional functions</em> \u2013 isomorphisms. The most popular representation is the one from the <a href=\"http://hackage.haskell.org/package/lens-4.17.1/docs/Control-Lens-Iso.html\" rel=\"nofollow noreferrer\">lens library</a>:</p>\n\n<pre><code>import Control.Lens\n\nkelvin :: Iso' Temp Double\nkelvin = iso getKelvinTemperature KelvinTemp\n\ncelsius :: Iso' Temp Double\ncelsius = iso (\\(Temp tK) -&gt; tK - waterTriplePointInK)\n              (\\tC -&gt; Temp $ tC + waterTriplePointInK)\n where waterTriplePointInK = 273.15\n\nfahrenheit :: Iso' Temp Double\nfahrenheit = iso (\\(Temp tK) -&gt; (tK - fahrZeroInK)/fahrScaleFact)\n                 (\\tF -&gt; Temp $ tF*fahrScaleFact + fahrZeroInK)\n where fahrZeroInK = 255.372\n       fahrScaleFact = 5/9\n</code></pre>\n\n<p>Now you can do stuff like</p>\n\n<pre><code>*Main&gt; let tBoil :: Temp; tBoil = 100^.from celsius\n*Main&gt; tBoil^.fahrenheit\n212.00039999999993\n\n*Main&gt; 37^.from celsius.fahrenheit\n98.60039999999992\n\n*Main&gt; 4000^.from kelvin.celsius\n3726.85\n</code></pre>\n\n<p>If you really want to have different representations for the different scales, here's another approach that's both more well-typed and will avoid runtime branching:</p>\n\n<pre><code>{-# LANGUAGE DataKinds, KindSignatures, MultiParamTypeClasses #-}\n\ndata TemperatureScale = KelvinSc | CelsiusSc | FahrenheitSc\n\nnewtype     KelvinTemperature = Kelvin     {getKelvinTemperature    ::Double}\nnewtype    CelsiusTemperature = Celsius    {getCelsiusTemperature   ::Double}\nnewtype FahrenheitTemperature = Fahrenheit {getFahrenheitTemperature::Double}\n\ntype family Temperature (sc :: TemperatureScale) where\n  Temperature 'KelvinSc     = KelvinTemperature\n  Temperature 'CelsiusSc    = CelsiusTemperature\n  Temperature 'FahrenheitSc = FahrenheitTemperature\n\nclass ConvTemperature t t' where\n  convTemperature :: Temperature t -&gt; Temperature t'\n\ninstance ConvTemperature KelvinSc  KelvinSc        where convTemperature = id\ninstance ConvTemperature CelsiusSc CelsiusSc       where convTemperature = id\ninstance ConvTemperature FahrenheitSc FahrenheitSc where convTemperature = id\ninstance ConvTemperature KelvinSc FahrenheitSc where\n  ...\n...\n</code></pre>\n\n<p>If you're really serious about it, check out the <a href=\"http://hackage.haskell.org/package/units\" rel=\"nofollow noreferrer\">units package</a>, which does all of this and much more.</p>\n"}], "owner": {"reputation": 57, "user_id": 9164115, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Hhs2G.png?s=128&g=1", "display_name": "juancho", "link": "https://stackoverflow.com/users/9164115/juancho"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 104, "favorite_count": 0, "accepted_answer_id": 56548411, "answer_count": 2, "score": 0, "last_activity_date": 1560327168, "creation_date": 1560271115, "question_id": 56548218, "link": "https://stackoverflow.com/questions/56548218/instance-of-eq-for-redefinition", "title": "Instance of Eq for (==) redefinition", "body": "<p>I have the following data declaration to represent temperatures:</p>\n\n<pre><code>data Temp = Kelvin Float | Celsius Float | Fahrenheit Float deriving Show\n\n-- Functions for conversion between temperatures\nkelvToCels :: Temp -&gt; Temp\nkelvToCels (Kelvin k) = Celsius (k-273.15)\n\nkelvToFahr :: Temp -&gt; Temp\nkelvToFahr (Kelvin k) = Fahrenheit (((9/5)*(k-273.15))+32)\n\ncelsToKelv :: Temp -&gt; Temp\ncelsToKelv (Celsius c) = Kelvin (c+273.15)\n\ncelsToFahr :: Temp -&gt; Temp\ncelsToFahr (Celsius c) = Fahrenheit (((9/5)*c)+32)\n\nfahrToKelv :: Temp -&gt; Temp\nfahrToKelv (Fahrenheit f) = Kelvin ((5/9)*(f-32)+273.15) \n\nfahrToCels :: Temp -&gt; Temp\nfahrToCels (Fahrenheit f) = Celsius ((f-32)/(9/5))\n</code></pre>\n\n<p>I want to be able to compare temperatures, such that </p>\n\n<p><code>&gt; (Celsius 100) == (Fahrenheit 212.0)</code>\nevaluates to true.</p>\n\n<p>Here are my attempts:</p>\n\n<pre><code>instance Eq Temp where\n   Celsius c == Fahrenheit f = \n    (celsToFahr c) == f\n</code></pre>\n\n<p>Result: ghci error because the c and f on the RHS are Floats instead of Temps, so heres a 'fix':</p>\n\n<pre><code>instance Eq Temp where\n   Celsius c == Fahrenheit f = \n    (celsToFahr (Celsius c)) == (Fahrenheit f)\n</code></pre>\n\n<p>This compiles with no errors, however <code>(Celsius 100) == (Fahrenheit 212.0)</code>\nthrows an exception: Non-exhaustive patterns in function ==</p>\n\n<p>I would also like to make an instance of Ord, to redefine <code>compare</code> in a similar manner.</p>\n\n<p>I've reached a dead end, and I can't find any examples similar to mine, so any piece of advice is greatly appreciated. Thanks in advance.</p>\n"}, {"tags": ["haskell"], "comments": [{"owner": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "edited": false, "score": 0, "creation_date": 1560269839, "post_id": 56547679, "comment_id": 99677630, "body": "How would you implement <code>(++)</code> yourself?"}, {"owner": {"reputation": 179, "user_id": 9841669, "user_type": "registered", "profile_image": "https://graph.facebook.com/10206384512924293/picture?type=large", "display_name": "Simone Masiero", "link": "https://stackoverflow.com/users/9841669/simone-masiero"}, "reply_to_user": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "edited": false, "score": 0, "creation_date": 1560270265, "post_id": 56547679, "comment_id": 99677848, "body": "@WillemVanOnsem, yes, you can do something like that but i wonder if it can be done without it. <code>(++)                    :: [a] -&gt; [a] -&gt; [a] </code>   <code>[]     ++ ys            =  ys</code>   <code>(x:xs) ++ ys            =  x : (xs++ys)</code>"}], "answers": [{"tags": [], "owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "is_accepted": true, "score": 11, "last_activity_date": 1560272234, "last_edit_date": 1560272234, "creation_date": 1560270477, "answer_id": 56548077, "question_id": 56547679, "link": "https://stackoverflow.com/questions/56547679/concatmap-in-haskell-without/56548077#56548077", "title": "ConcatMap in haskell without ++", "body": "<p>Here's a way that makes the state of the computation explicit:</p>\n\n<pre><code>concatMap :: (a -&gt; [b]) -&gt; [a] -&gt; [b]\nconcatMap f = go []\n  where\n    -- We have b values; use one.\n    go (b:bs) as = b : go bs as\n    -- No bs left; get some more.\n    go [] (a:as) = go (f a) as\n    -- Nothing left; we're done.\n    go [] [] = []\n</code></pre>\n\n<p>This maintains the current list of <code>b</code>s, filling it up whenever it's empty.</p>\n"}, {"comments": [{"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 1, "creation_date": 1560273088, "post_id": 56548496, "comment_id": 99679168, "body": "Or, for that matter, <code>concatMap f xs = [y | x &lt;- xs, y &lt;- f x]</code>, which I believe is how it&#39;s actually defined in the <code>base</code> package. But the comprehension has to be translated to something else under the hood."}, {"owner": {"reputation": 1782, "user_id": 10548514, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-Hky6xOH08T4/AAAAAAAAAAI/AAAAAAAABSM/Tw8IuIniovs/photo.jpg?sz=128", "display_name": "Juan Carlos Ramirez", "link": "https://stackoverflow.com/users/10548514/juan-carlos-ramirez"}, "reply_to_user": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 0, "creation_date": 1560275257, "post_id": 56548496, "comment_id": 99680182, "body": "I like that, it has a very math-like quality."}], "tags": [], "owner": {"reputation": 1782, "user_id": 10548514, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-Hky6xOH08T4/AAAAAAAAAAI/AAAAAAAABSM/Tw8IuIniovs/photo.jpg?sz=128", "display_name": "Juan Carlos Ramirez", "link": "https://stackoverflow.com/users/10548514/juan-carlos-ramirez"}, "is_accepted": false, "score": 4, "last_activity_date": 1560272581, "last_edit_date": 1560272581, "creation_date": 1560272135, "answer_id": 56548496, "question_id": 56547679, "link": "https://stackoverflow.com/questions/56547679/concatmap-in-haskell-without/56548496#56548496", "title": "ConcatMap in haskell without ++", "body": "<p>This might be cheating, but how about:</p>\n\n<pre><code>myConcatMap f s = concat (map f s)\n</code></pre>\n\n<p>The <code>concat</code> function uses some sort of <code>++</code> in its source code, so that is why you might not like it. You can try to use an alternative <code>concat</code> that does list comprehensions, it has a more \"from scratch\" feeling.</p>\n\n<pre><code>myconcat ll = [y | x &lt;- ll, y &lt;- x]\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 1706, "user_id": 1840613, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c2dfd4d21060ccd9b972864e0f6cb8c4?s=128&d=identicon&r=PG", "display_name": "Jeremy List", "link": "https://stackoverflow.com/users/1840613/jeremy-list"}, "is_accepted": false, "score": 1, "last_activity_date": 1560306876, "last_edit_date": 1560306876, "creation_date": 1560301589, "answer_id": 56553399, "question_id": 56547679, "link": "https://stackoverflow.com/questions/56547679/concatmap-in-haskell-without/56553399#56553399", "title": "ConcatMap in haskell without ++", "body": "<p>You can use the fact that <code>foldr (:)</code> = <code>flip (++)</code></p>\n\n<pre><code>concatMap f = foldr (flip (foldr (:)) . f) []\n</code></pre>\n\n<p>Or pointfree:</p>\n\n<pre><code>concatMap = flip foldr [] . (flip (foldr (:)) .)\n</code></pre>\n"}], "owner": {"reputation": 179, "user_id": 9841669, "user_type": "registered", "profile_image": "https://graph.facebook.com/10206384512924293/picture?type=large", "display_name": "Simone Masiero", "link": "https://stackoverflow.com/users/9841669/simone-masiero"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 224, "favorite_count": 0, "accepted_answer_id": 56548077, "answer_count": 3, "score": 6, "last_activity_date": 1560306876, "creation_date": 1560268901, "last_edit_date": 1560270744, "question_id": 56547679, "link": "https://stackoverflow.com/questions/56547679/concatmap-in-haskell-without", "title": "ConcatMap in haskell without ++", "body": "<p>I'm trying to write the code for Haskell concatmap without using the <code>++</code> operator where</p>\n\n<pre><code>concatMap :: (a -&gt; [b]) -&gt; [a] -&gt; [b]\n</code></pre>\n\n<p>and producing the same result of</p>\n\n<pre><code>concatMap f = foldr ((++) . f) []\n</code></pre>\n\n<p>I'm quite new to Haskell and this was just an exercise I found. Actually, I do not even know if this can be done.</p>\n"}, {"tags": ["haskell", "aeson"], "comments": [{"owner": {"reputation": 24028, "user_id": 383200, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/a9dc722f936cb1059adaae4fe39c07f0?s=128&d=identicon&r=PG", "display_name": "Carl", "link": "https://stackoverflow.com/users/383200/carl"}, "edited": false, "score": 0, "creation_date": 1560264896, "post_id": 56544356, "comment_id": 99674664, "body": "Have you compared against the JSON that is generated by <code>toJSON</code>? It&#39;s most likely expecting a different data format than you&#39;re anticipating."}, {"owner": {"reputation": 62421, "user_id": 216164, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/786f224adbe0784cdf7d0f15476061fe?s=128&d=identicon&r=PG", "display_name": "Thomas M. DuBuisson", "link": "https://stackoverflow.com/users/216164/thomas-m-dubuisson"}, "edited": false, "score": 1, "creation_date": 1560267800, "post_id": 56544356, "comment_id": 99676501, "body": "It&#39;s expecting an explicit null.  Why it&#39;s expecting that in this case could be determined by <code>-ddump-deriv</code> and comparing the Generic instances of each type and if needed looking at the Generic JSON decoding in Aeson."}, {"owner": {"reputation": 33166, "user_id": 7509065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/RZLo7.png?s=128&g=1", "display_name": "Joseph Sible-Reinstate Monica", "link": "https://stackoverflow.com/users/7509065/joseph-sible-reinstate-monica"}, "reply_to_user": {"reputation": 62421, "user_id": 216164, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/786f224adbe0784cdf7d0f15476061fe?s=128&d=identicon&r=PG", "display_name": "Thomas M. DuBuisson", "link": "https://stackoverflow.com/users/216164/thomas-m-dubuisson"}, "edited": false, "score": 0, "creation_date": 1560267906, "post_id": 56544356, "comment_id": 99676560, "body": "@ThomasM.DuBuisson That doesn&#39;t seem to explain the difference though. Both <code>Foo (Maybe String)</code> and <code>Bar String</code> contain a <code>Maybe String</code>. Both of them output a null payload when they encode. But only <code>Foo</code> requires a null payload when it decodes."}], "answers": [{"tags": [], "owner": {"reputation": 34158, "user_id": 7203016, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/ybAMw.png?s=128&g=1", "display_name": "K. A. Buhr", "link": "https://stackoverflow.com/users/7203016/k-a-buhr"}, "is_accepted": true, "score": 7, "last_activity_date": 1560297104, "last_edit_date": 1560297104, "creation_date": 1560296640, "answer_id": 56552950, "question_id": 56544356, "link": "https://stackoverflow.com/questions/56544356/when-parsing-json-with-aeson-why-is-maybe-treated-differently-when-its-in-a-ty/56552950#56552950", "title": "When parsing JSON with Aeson, why is Maybe treated differently when it&#39;s in a type parameter?", "body": "<p><em>Updated:</em> with a simple solution at the bottom.</p>\n\n<p>This is confusing, but it's working more or less as designed.  You could try submitting it as an <code>aeson</code> issue, but I suspect it will be closed as \"won't fix\".</p>\n\n<p>What's happening is that the generic instance generated for <code>FromJSON (Bar a)</code> is equivalent to:</p>\n\n<pre><code>instance FromJSON a =&gt; FromJSON (Bar a) where\n  parseJSON = withObject \"Bar\" $ \\v -&gt; Bar\n    &lt;$&gt; v .:? \"payload\"\n</code></pre>\n\n<p>Note the use of the <code>(.:?)</code> operator generated because of the <code>Maybe a</code> field in <code>Bar</code>.  In a structure with a mixture of <code>Maybe</code> and non-<code>Maybe</code> fields, there would be a corresponding mixture of <code>(.:?)</code> and <code>(.:)</code> operators.</p>\n\n<p>Note that this instance is generated once and for all for every possible <code>a</code>.  The reason it's polymorphic is that the <code>(.:?)</code> implementation can dispatch to the <code>parseJSON</code> method in the <code>FromJSON a</code> dictionary supplied by the instance constraint.  Also note that the only reason we can use <code>(.:?)</code> is that it's known at compile time that for all possible types <code>a</code>, the field <code>payload</code> in the <code>Bar</code> object has type <code>Maybe a</code> and so use of the <code>(.:?)</code> operator will typecheck.</p>\n\n<p>Now, consider the instance generated for <code>FromJSON (Foo a)</code>.  This will be equivalent to:</p>\n\n<pre><code>instance FromJSON a =&gt; FromJSON (Foo a) where\n  parseJSON = withObject \"Foo\" $ \\v -&gt; Foo\n    &lt;$&gt; v .: \"payload\"\n</code></pre>\n\n<p>It's exactly analogous to the <code>Bar a</code> instance above, except it uses the <code>(.:)</code> operator.  Again, it has a single implementation at compile time that works for every possible <code>a</code> by dispatching to <code>parseJSON</code> in the <code>FromJSON a</code> dictionary.  There's no way that this instance can use the <code>(.:?)</code> operator, since general <code>a</code> and <code>Maybe t</code> can't unify, and there's no way that it can somehow \"inspect\" the type <code>a</code>, whether at compile time or runtime, to see if it's a <code>Maybe</code>, for much the same reason that you can't write a total polymorphic function with type <code>a -&gt; a</code> that's anything other than the identity.</p>\n\n<p>Therefore, this <code>Foo a</code> instance can't make the <code>payload</code> field optional!  Instead, it has to treat <code>payload</code> as mandatory and -- when used to parse a <code>Foo (Maybe String)</code> -- dispatch to a <code>FromJSON t =&gt; FromJSON (Maybe t)</code> instance (which allows <code>null</code> but otherwise dispatches to the <code>FromJSON String</code> instance).</p>\n\n<p>Now, why does it seemingly work fine for <code>ToJSON</code>?  Well, the instances for both <code>ToJSON (Foo a)</code> and <code>ToJSON (Bar a)</code> generate the same sort of (monomorphic) <code>Value</code> representation:</p>\n\n<pre><code>&gt; toJSON (Foo (Nothing :: Maybe String))\nObject (fromList [(\"payload\",Null)])\n&gt; toJSON (Bar (Nothing :: Maybe String))\nObject (fromList [(\"payload\",Null)])\n</code></pre>\n\n<p>and the removal of null fields takes place uniformly when this value is encoded to JSON.</p>\n\n<p>This leads to an unfortunate asymmetry in the <code>FromJSON</code> and <code>ToJSON</code> instances, but that's what's going on.</p>\n\n<p>And I just realized I forgot to share the simple solution for fixing it.  Just define two generic instances for <code>Foo</code>, one overlapping instance to handle <code>Maybes</code> and the other for other types:</p>\n\n<pre><code>instance {-# OVERLAPPING #-} FromJSON a =&gt; FromJSON (Foo (Maybe a))\ninstance FromJSON a =&gt; FromJSON (Foo a)\n</code></pre>\n"}], "owner": {"reputation": 642, "user_id": 6244464, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0302fb471429b870d56e2e953381ceab?s=128&d=identicon&r=PG&f=1", "display_name": "vozman", "link": "https://stackoverflow.com/users/6244464/vozman"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 417, "favorite_count": 0, "accepted_answer_id": 56552950, "answer_count": 1, "score": 5, "last_activity_date": 1560297104, "creation_date": 1560258041, "last_edit_date": 1560268225, "question_id": 56544356, "link": "https://stackoverflow.com/questions/56544356/when-parsing-json-with-aeson-why-is-maybe-treated-differently-when-its-in-a-ty", "title": "When parsing JSON with Aeson, why is Maybe treated differently when it&#39;s in a type parameter?", "body": "<p>Suppose we have some data classes</p>\n\n<pre><code>{-# LANGUAGE DeriveGeneric, DuplicateRecordFields #-}\n\nimport Data.Aeson\nimport Data.ByteString.Lazy.Char8\nimport GHC.Generics\n\ndata Foo a = Foo { payload :: a }\n    deriving (Show, Generic)\n\ninstance ToJSON a =&gt; ToJSON (Foo a)\ninstance FromJSON a =&gt; FromJSON (Foo a)\n\ndata Bar a = Bar { payload :: Maybe a }\n    deriving (Show, Generic)\n\ninstance ToJSON a =&gt; ToJSON (Bar a)\ninstance FromJSON a =&gt; FromJSON (Bar a)\n</code></pre>\n\n<p>Then we try to decode as following:</p>\n\n<pre><code>*Main &gt; decode $ pack \"{}\" :: Maybe (Bar String)\nJust (Foo {payload = Nothing})\n*Main &gt; decode $ pack \"{}\" :: Maybe (Foo (Maybe String))\nNothing\n</code></pre>\n\n<p>So why can't we decode JSON in the last try? The data classes seem to be the same, and they both work the same way with <code>toJSON</code>:</p>\n\n<pre><code>*Main &gt; toJSON $ Foo (Nothing :: Maybe String)\nObject (fromList [(\"payload\",Null)])\n*Main &gt; toJSON $ Bar (Nothing :: Maybe String)\nObject (fromList [(\"payload\",Null)])\n</code></pre>\n"}, {"tags": ["haskell", "types", "polymorphism"], "answers": [{"comments": [{"owner": {"reputation": 1474, "user_id": 8025936, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/Kue08.png?s=128&g=1", "display_name": "schuelermine", "link": "https://stackoverflow.com/users/8025936/schuelermine"}, "edited": false, "score": 0, "creation_date": 1560253163, "post_id": 56542747, "comment_id": 99667301, "body": "It doesn&#39;t, what version of GHCi are you using?"}, {"owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "reply_to_user": {"reputation": 1474, "user_id": 8025936, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/Kue08.png?s=128&g=1", "display_name": "schuelermine", "link": "https://stackoverflow.com/users/8025936/schuelermine"}, "edited": false, "score": 0, "creation_date": 1560253436, "post_id": 56542747, "comment_id": 99667454, "body": "Hm, I&#39;m a bit behind with my go-to compiler version again. Do you use a newer compiler and it doesn&#39;t work?"}, {"owner": {"reputation": 1474, "user_id": 8025936, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/Kue08.png?s=128&g=1", "display_name": "schuelermine", "link": "https://stackoverflow.com/users/8025936/schuelermine"}, "edited": false, "score": 0, "creation_date": 1560253772, "post_id": 56542747, "comment_id": 99667632, "body": "Yes, I use 8.6.5, and GHC has several complaints. 1) Enable ScopedTypeVariables so you can use forall and write type signatures to let bindings 2) It doesn&#39;t work because &quot;GHC doesn&#39;t support impredicative Polymorphism&quot;"}, {"owner": {"reputation": 1474, "user_id": 8025936, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/Kue08.png?s=128&g=1", "display_name": "schuelermine", "link": "https://stackoverflow.com/users/8025936/schuelermine"}, "edited": false, "score": 0, "creation_date": 1560253827, "post_id": 56542747, "comment_id": 99667663, "body": "Yet <code>(x == y) :: Bool</code>"}], "tags": [], "owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "is_accepted": false, "score": 1, "last_activity_date": 1560253257, "last_edit_date": 1560253257, "creation_date": 1560252729, "answer_id": 56542747, "question_id": 56542595, "link": "https://stackoverflow.com/questions/56542595/can-the-type-of-a-b-be-derived-to-be-polymorphic/56542747#56542747", "title": "Can the type of (a == b) be derived to be polymorphic?", "body": "<p>Actually this just works \u2013 in GHC-8.2 and 8.3 at least.</p>\n\n<pre><code>GHCi, version 8.2.1: http://www.haskell.org/ghc/  :? for help\nPrelude&gt; :set -XRank2Types -XUnicodeSyntax\nPrelude&gt; let x, y :: \u2200 a . a; (x,y) = (undefined,undefined)\nPrelude&gt; :set -XAllowAmbiguousTypes \nPrelude&gt; let p :: \u2200 a . Eq a =&gt; Bool; p = x==y\n\nPrelude&gt; :set -XTypeApplications \n\nPrelude&gt; p @Int\n*** Exception: Prelude.undefined\nCallStack (from HasCallStack):\n  error, called at libraries/base/GHC/Err.hs:79:14 in base:GHC.Err\n  undefined, called at &lt;interactive&gt;:3:36 in interactive:Ghci1\n\nPrelude&gt; p @(String -&gt; Double)\n&lt;interactive&gt;:11:1: error:\n    \u2022 No instance for (Eq (String -&gt; Double)) arising from a use of \u2018p\u2019\n        (maybe you haven't applied a function to enough arguments?)\n    \u2022 In the expression: p @(String -&gt; Double)\n      In an equation for \u2018it\u2019: it = p @(String -&gt; Double)\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "is_accepted": true, "score": 4, "last_activity_date": 1560267527, "last_edit_date": 1560267527, "creation_date": 1560265173, "answer_id": 56546576, "question_id": 56542595, "link": "https://stackoverflow.com/questions/56542595/can-the-type-of-a-b-be-derived-to-be-polymorphic/56546576#56546576", "title": "Can the type of (a == b) be derived to be polymorphic?", "body": "<p>This is all about the type of <code>(==)</code>:</p>\n\n<pre><code>(==) :: forall a. Eq a =&gt; a -&gt; a -&gt; Bool\n</code></pre>\n\n<p><code>(==)</code> takes four arguments, <em>in order</em>:</p>\n\n<ol>\n<li>A type, <code>a</code>, of kind <code>Type</code> (AKA <code>*</code>),</li>\n<li>A dictionary of type <code>Eq a</code>,</li>\n<li>A value of type <code>a</code>.</li>\n<li>A value of type <code>a</code>.</li>\n</ol>\n\n<p>As usual, partial application only works <em>in order</em>, and dictionary arguments cannot be passed explicitly. Furthermore, type arguments can only be introduced before they're used. So when you write <code>a == b</code>, this actually means</p>\n\n<pre><code>(==) @_ @{dict} a b\n</code></pre>\n\n<p>The type argument and dictionary argument are inferred, and you get a value of type <code>Bool</code>.</p>\n\n<p>What you're after has a rather different type from <code>(==)</code>:</p>\n\n<pre><code>numLitEq\n  :: (forall a. (Num a, Eq a) =&gt; a)\n  -&gt; (forall b. (Num b, Eq b) =&gt; b)\n  -&gt; forall c. (Num c, Eq c) =&gt; Bool\nnumLitEq a b = (==) @c a b\n</code></pre>\n\n<p>You can't write exactly this, though, because there's no way to get the <code>c</code> type variable into scope. The best you can do is</p>\n\n<pre><code>numLitEq\n  :: forall c.\n     (forall a. (Num a, Eq a) =&gt; a)\n  -&gt; (forall b. (Num b, Eq b) =&gt; b)\n  -&gt; (Num c, Eq c) =&gt; Bool\nnumLitEq a b = (==) @c a b\n</code></pre>\n\n<p>which isn't any better than just using <code>(==)</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 34158, "user_id": 7203016, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/ybAMw.png?s=128&g=1", "display_name": "K. A. Buhr", "link": "https://stackoverflow.com/users/7203016/k-a-buhr"}, "is_accepted": false, "score": 1, "last_activity_date": 1560361921, "creation_date": 1560361921, "answer_id": 56567849, "question_id": 56542595, "link": "https://stackoverflow.com/questions/56542595/can-the-type-of-a-b-be-derived-to-be-polymorphic/56567849#56567849", "title": "Can the type of (a == b) be derived to be polymorphic?", "body": "<p>Note that if you're just asking if the expression <code>3 == 5</code> can be made polymorphic in the type of <code>3</code> and <code>5</code>, the answer is yes.  The signature must be given explicitly with the help of some language extensions, but the following definition is polymorphic:</p>\n\n<pre><code>{-# LANGUAGE AllowAmbiguousTypes #-}\n{-# LANGUAGE ScopedTypeVariables #-}\nmodule ThreeFive where\n\neq35 :: forall a . (Num a, Eq a) =&gt; Bool\neq35 = (3 :: a) == 5\n</code></pre>\n\n<p>Alternatively, you could use <code>TypeApplications</code>:</p>\n\n<pre><code>eq35' :: forall a . (Num a, Eq a) =&gt; Bool\neq35' = (==) @a 3 5\n</code></pre>\n\n<p>Now, GHCi <em>reports</em> the type of <code>eq35</code> as <code>Bool</code>, but that's a lie, as you can see by adding the <code>+v</code> flag:</p>\n\n<pre><code>&gt; :type eq35\neq35 :: Bool\n&gt; :type +v eq35\neq35 :: (Num a, Eq a) =&gt; Bool\n</code></pre>\n\n<p>or by proving it:</p>\n\n<pre><code>{-# LANGUAGE TypeApplications #-}\n{-# LANGUAGE GeneralizedNewtypeDeriving #-}\n\n-- Holistic number are all equal\nnewtype Holistic = Holistic Int deriving (Num)\ninstance Eq Holistic where\n  _ == _ = True\n\nmain = do print (eq35 @Int)\n          print (eq35 @Holistic)\n</code></pre>\n\n<p>and running this will print <code>False</code> and <code>True</code>.</p>\n\n<p>I don't see any sort of combination of language extensions that would allow GHC to <em>automatically</em> infer a more general type for <code>3 == 5</code> than <code>True</code> in the absence of explicit type signatures.  Similarly, however polymorphic <code>x</code> and <code>y</code> might be, <code>x == y</code> will be either defaulted to a monomorphic type or rejected unless you use an explicit signature like the one above.</p>\n"}], "owner": {"reputation": 1474, "user_id": 8025936, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/Kue08.png?s=128&g=1", "display_name": "schuelermine", "link": "https://stackoverflow.com/users/8025936/schuelermine"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 111, "favorite_count": 0, "accepted_answer_id": 56546576, "answer_count": 3, "score": 2, "last_activity_date": 1560361921, "creation_date": 1560252082, "last_edit_date": 1560254827, "question_id": 56542595, "link": "https://stackoverflow.com/questions/56542595/can-the-type-of-a-b-be-derived-to-be-polymorphic", "title": "Can the type of (a == b) be derived to be polymorphic?", "body": "<p>Since <code>(==) :: Eq a =&gt; a -&gt; a -&gt; Bool</code>, I'd expect</p>\n\n<pre><code>a == b :: Eq a =&gt; Bool\n-- assuming a :: forall a. a\n-- derived type\n</code></pre>\n\n<p>but (according to GHCi <code>:t</code>)</p>\n\n<pre><code>a == b :: Bool\n</code></pre>\n\n<p>Now of course, this requires <code>TypeApplications</code>, so it shouldn't be enabled by default, but is there a <code>LANGUAGE</code> option that enables this?</p>\n\n<p><code>NoMonomorphismRestriction</code> doesn't work.</p>\n\n<p>EDIT: Since you may say, \"well, GHC(i) already knows the type of <code>a</code> and <code>b</code> in any practical example\", no, for example, you could have <code>(5 == 5) :: (Num a, Eq a) =&gt; Bool</code>.<br>\nEDIT: It seems <code>a :: forall a. a</code> isn't possible, so let's assume something like <code>x = 5 :: Num a =&gt; a</code></p>\n\n<p>EDIT: Explicitly declaring the type <em>works</em>, so the question is really \"Can GHC infer this type to be polymorphic\", so I'm looking for something like <code>DeriveAmbiguousTypes</code>.</p>\n"}, {"tags": ["haskell", "functional-programming", "higher-order-functions"], "comments": [{"owner": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "edited": false, "score": 4, "creation_date": 1560180796, "post_id": 56529302, "comment_id": 99642057, "body": "Both functions are equivalent, what is the problem?"}, {"owner": {"reputation": 78982, "user_id": 1848654, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/84180c0f3c9c04f8b8f0613fc0129dac?s=128&d=identicon&r=PG", "display_name": "melpomene", "link": "https://stackoverflow.com/users/1848654/melpomene"}, "edited": false, "score": 7, "creation_date": 1560181224, "post_id": 56529302, "comment_id": 99642278, "body": "I have no idea what the author is trying to say there either."}, {"owner": {"reputation": 384463, "user_id": 1126841, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fa05233b2357f8d11c22ef4cfc7bb85c?s=128&d=identicon&r=PG", "display_name": "chepner", "link": "https://stackoverflow.com/users/1126841/chepner"}, "edited": false, "score": 0, "creation_date": 1560181297, "post_id": 56529302, "comment_id": 99642313, "body": "Possibly confusion over <code>f</code> being used in the definition of <code>g</code>, since it&#39;s not an argument of <code>g</code>?"}], "answers": [{"tags": [], "owner": {"reputation": 384463, "user_id": 1126841, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fa05233b2357f8d11c22ef4cfc7bb85c?s=128&d=identicon&r=PG", "display_name": "chepner", "link": "https://stackoverflow.com/users/1126841/chepner"}, "is_accepted": false, "score": 3, "last_activity_date": 1560182014, "last_edit_date": 1560182014, "creation_date": 1560181614, "answer_id": 56529571, "question_id": 56529302, "link": "https://stackoverflow.com/questions/56529302/definition-of-the-flip-function-in-haskell/56529571#56529571", "title": "Definition of the flip function in Haskell", "body": "<p><code>flip</code> takes a function and returns the flipped version of the function. One way to define <code>flip'</code> is to include the application in the definition itself, since</p>\n\n<pre><code>flip' f y x = f x y  ===&gt; flip' f y = \\x -&gt; f x y\n                     ===&gt; flip' f = \\y -&gt; \\x -&gt; f x y\n</code></pre>\n\n<p>That is, <code>flip' f</code> is a function that applies <code>f</code> to its own arguments in reverse order.</p>\n\n<p>The second definition simply gives the anonymous function <code>\\y -&gt; \\x -&gt; f x y</code> a name first, then uses that name as the definition of <code>flip' f x y</code>.</p>\n\n<pre><code>                     ===&gt; flip' f = g where g = \\y -&gt; \\x -&gt; f x y\n                     ===&gt; flip' f = g where g y = \\x -&gt; f x y\n                     ===&gt; flip' f = g where g y x = f x y\n</code></pre>\n\n<p>That is, <code>flip' f</code> is some function <code>g</code>, where <code>g</code> is defined to apply <code>f</code> to the arguments of <code>g</code> in reverse order.</p>\n\n<p>The definitions <code>g x y = f y x</code> and <code>g y x = f x y</code> are equivalent up to <a href=\"https://wiki.haskell.org/Alpha_conversion\" rel=\"nofollow noreferrer\">alpha conversion</a>. In both cases, <code>f</code> is a free variable in the definition of <code>g</code>; <code>g</code> is as a closure over the <code>f</code> argument to <code>flip'</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "is_accepted": true, "score": 8, "last_activity_date": 1560185850, "creation_date": 1560185850, "answer_id": 56530519, "question_id": 56529302, "link": "https://stackoverflow.com/questions/56529302/definition-of-the-flip-function-in-haskell/56530519#56530519", "title": "Definition of the flip function in Haskell", "body": "<p>I think the argument the author has in his head got wildly abbreviated to the point that it's not even sensical. But here is my guess about the reasoning. We start with the first definition:</p>\n\n<pre><code>flip f = g where g x y = f y x\n</code></pre>\n\n<p>Now we observe that this is a curried thing, and we use all the discussion of associativity of <code>(-&gt;)</code> and junk to write the same thing, but with two extra arguments to <code>f</code>. Like this:</p>\n\n<pre><code>flip f <b>x y</b> = g <b>x y</b> where g x y = f y x</code></pre>\n\n<p>Now we have the equation that he called out as going both ways: <code>g x y = f y x</code> and vice versa. We can rewrite the body of the <code>flip</code> using this equation, like this:</p>\n\n<pre><code>flip f x y = <b>f y x</b> where g x y = f y x</code></pre>\n\n<p>Since the body of the definition no longer mentions <code>g</code>, we can delete it.</p>\n\n<pre><code>flip f x y = f y x\n</code></pre>\n\n<p>And now we're pretty much there. In the final definition, the author has swapped the names <code>x</code> and <code>y</code> everywhere. I don't know why they chose to do so, but it is a legal move that you can make in equational reasoning, so no problem there. Doing so gives us their final equation:</p>\n\n<pre><code>flip f y x = f x y\n</code></pre>\n"}], "owner": {"reputation": 109, "user_id": 10023505, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/32faef3700576568a16dd77e4aa7e30c?s=128&d=identicon&r=PG", "display_name": "Daniel Simon", "link": "https://stackoverflow.com/users/10023505/daniel-simon"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 183, "favorite_count": 0, "accepted_answer_id": 56530519, "answer_count": 2, "score": 2, "last_activity_date": 1560185850, "creation_date": 1560180543, "last_edit_date": 1560181038, "question_id": 56529302, "link": "https://stackoverflow.com/questions/56529302/definition-of-the-flip-function-in-haskell", "title": "Definition of the flip function in Haskell", "body": "<p>Currently I am trying to learn Haskell with the book 'Learn You a Haskell' and I'm trying to understand the implementations of the <code>flip</code> function in <a href=\"http://learnyouahaskell.com/higher-order-functions\" rel=\"nofollow noreferrer\">chapter 5</a>. The problem is that the author states that if <code>g x y = f y x</code> is valid, then <code>f y x = g x y</code> must be also true. But how and why does this reversal affects the two function definitions?</p>\n\n<p>I know how currying works and I also know that the <code>-&gt;</code> operator is right-associative by default so the type declarations are in fact the same. I also understand the functions apart from each other but not how the reversal of <code>g x y = f y x</code> is in relation with this.</p>\n\n<p>first flip function</p>\n\n<pre><code>flip' :: (a -&gt; b -&gt; c) -&gt; (b -&gt; a -&gt; c)\nflip' f = g\n    where g x y = f y x\n</code></pre>\n\n<p>second flip function</p>\n\n<pre><code>flip' :: (a -&gt; b -&gt; c) -&gt; b -&gt; a -&gt; c\nflip' f y x = f x y\n</code></pre>\n"}, {"tags": ["haskell", "bytestring", "haskell-spock"], "answers": [{"tags": [], "owner": {"reputation": 115, "user_id": 3680029, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c2f9062247d1bcf616e8a6cf493c00fc?s=128&d=identicon&r=PG&f=1", "display_name": "user3680029", "link": "https://stackoverflow.com/users/3680029/user3680029"}, "is_accepted": false, "score": 0, "last_activity_date": 1572005221, "creation_date": 1572005221, "answer_id": 58558222, "question_id": 56528176, "link": "https://stackoverflow.com/questions/56528176/print-bytestrings-on-spock-web-server/58558222#58558222", "title": "Print bytestrings on Spock Web Server", "body": "<p>So finally I achieve what I was looking for - woua I am really proud of me ...\nOkay for those who will look for the same thing, what I've manage to do, to recap my main problem was to escape the IO monad (my choice may be not clever but still) in which I was stuck due to the use of request parsers from HTTP.simple library. \nMy code change a little bit but the general idea stays the same:</p>\n\n<p>building a Response query:</p>\n\n<pre><code>getResponseMethod  :: RequestPath -&gt; RequestBody -&gt; IO (Maybe Value) \n\n</code></pre>\n\n<p>from which thanks to the decode function (aeson package) a Maybe Value is obtained (wrapped in IO but that's okay)</p>\n\n<p>then my little spock server:</p>\n\n<pre><code>main :: IO ()\nmain = do\n    spockCfg &lt;- defaultSpockCfg () PCNoDatabase ()\n    runSpock 8080 (spock spockCfg app)\n\n</code></pre>\n\n<p>I work a lot to have the right <code>app -&gt; SpockM () () () ()</code> \nI started with the simplest app we could imagine:</p>\n\n<p><code>app = do get root $ text \"Hello!\"</code></p>\n\n<p>noticing that the text function is producing a <code>MonadIO m =&gt; ActionCtxT cxt m a monad</code> so my thought was that if I 'sprinkle' some clever LiftIO thing it should do the job.</p>\n\n<p>I create a helper function:</p>\n\n<pre><code>extrct :: MonadIO m =&gt; ActionCtxT ctx m Text \nextrct = liftIO $ do\n     a &lt;-  getResponseMethod \"GetProperties\" r1\n     return (pack $ show a)\n</code></pre>\n\n<p>and with a twist of hand adjust my app</p>\n\n<pre><code>app :: SpockM () () () ()\napp = do get root $ do\n            a &lt;- extrct\n            text a\n\n</code></pre>\n\n<p>and finally I was able to see the string representation of the Maybe Value :: JSON on my spock local webserver. That's what I was looking for. Now I can work on cleaning my code. From what I understand using liftIO will place the IO monad in the rigth place in the Monad Stack that's because IO is always at the bottom? </p>\n"}], "owner": {"reputation": 115, "user_id": 3680029, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c2f9062247d1bcf616e8a6cf493c00fc?s=128&d=identicon&r=PG&f=1", "display_name": "user3680029", "link": "https://stackoverflow.com/users/3680029/user3680029"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 28, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1614141976, "creation_date": 1560176178, "last_edit_date": 1614141976, "question_id": 56528176, "link": "https://stackoverflow.com/questions/56528176/print-bytestrings-on-spock-web-server", "title": "Print bytestrings on Spock Web Server", "body": "<p>Visualize a bytestring body on a webserver run on Spock (localhost for instance)</p>\n\n<p>My goal : create website and view a bytestring (converted to text)\nFramework: Http Simple for performing request to restAPI\n           Spock for my server\nI don't want for instance to create a JSON as I need to manipulate/inspect my response before creating a JSON structure. General idea is that I want to use the response body to construct a JSON query structure (the user will be able to compose his question) that will be sent to the restAPI website. </p>\n\n<p>I manage to build a request like this:</p>\n\n<pre><code>    connect = do\n        request' &lt;- (parseRequest \"http://localhost\")\n        let request = setRequestMethod \"POST\"\n                    $ setRequestHost (S8.pack (\"xx.xxx.xxx.xxx\"))\n                    $ setRequestPath \"/api/Integration/Login\"\n                    $ setRequestBodyJSON me\n                    $ setRequestPort 1000\n                    $ request'\n        response &lt;- httpJSON request\n        return (getResponseBody response :: Auth)\n</code></pre>\n\n<p>then I used it to query the API page</p>\n\n<pre><code>getRequest :: RequestPath -&gt; HtmlT IO L.ByteString\ngetRequest rpath = do\n        atoken &lt;- liftIO connect\n        request' &lt;-  liftIO (parseRequest \"http://localhost\")\n        let request = setRequestMethod \"POST\"\n                    $ setRequestHost (S8.pack (\"xx.xxx.xxx.xxx\"))\n                    $ setRequestPort 1000\n                    $ setRequestPath (S8.pack (\"/api/Integration/\" ++ rpath))\n                    $ addRequestHeader hAuthorization (S8.pack (unpack (token_type (atoken)) ++ \" \" ++ unpack (access_token (atoken))))\n                    $ setRequestBodyJSON r1\n                    $ request'\n        response &lt;- httpLBS request\n        return (getResponseBody (response))\n</code></pre>\n\n<p>then I follow with a short SpockM monad:</p>\n\n<pre><code>app1 = do get root $ text \"root\"\n          fct \n</code></pre>\n\n<p>with fct equal to</p>\n\n<pre><code>fct = do get \"/further\" $ lucidIO ( fmap TL.decodeUtf8 (getRequest \"GetProperties\"))\n</code></pre>\n\n<p>Everything compile fine I am even able to see the result in GHCI with invocation like : <code>connect &gt;&gt;= (\\ x -&gt; print x)</code> (same with getRequest \"GetProperties\" )\nWhat I don't understand is that lucidIO should give me a ActionCtxtT ctx m b type, which perfectly fit the type of a handler (for example like the text function in the <code>do get ... $ text  -&gt; ActionCtxT ctx m a</code>) and should be processed by the spock function in main() ie <code>runSpock 8080 (spock spockCfg app1)</code>\nI tried to get rid of the ByteString 'ending' type replacing it with a () in order to mimic as close as possible the <code>Html ()</code> type which shows up and work in lot of examples I studied.\nAll parsing and request building is done with the HTTP.Simple (it's not very elegant I know for instance it just have to work) which pulls me from start in a monad (due to the first function 'parseRequest' -> m Request) from which I cannot escape until lucidIO - may be I am choosing the wrong Monad (ie IO : but with IO I am able to check everything in ghci). Could you give me some hints on how to get this ByteString printed in my browser?</p>\n"}, {"tags": ["haskell", "recursion", "types", "containers"], "comments": [{"owner": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "edited": false, "score": 3, "creation_date": 1560174242, "post_id": 56527603, "comment_id": 99638683, "body": "Exactly what would be the use of this data structure? What &quot;problems&quot; would it solve efficiently/elegantly?"}, {"owner": {"reputation": 123, "user_id": 3157312, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1c6fa3ce9887621fc1f64ad20a8ee9dc?s=128&d=identicon&r=PG", "display_name": "asianirish", "link": "https://stackoverflow.com/users/3157312/asianirish"}, "reply_to_user": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "edited": false, "score": 0, "creation_date": 1560174525, "post_id": 56527603, "comment_id": 99638809, "body": "@WillemVanOnsem For example, it can be a set of operations, which can be treated as an operation and set of these operations also as one operation"}, {"owner": {"reputation": 384463, "user_id": 1126841, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fa05233b2357f8d11c22ef4cfc7bb85c?s=128&d=identicon&r=PG", "display_name": "chepner", "link": "https://stackoverflow.com/users/1126841/chepner"}, "edited": false, "score": 5, "creation_date": 1560174620, "post_id": 56527603, "comment_id": 99638870, "body": "This looks somewhat like a tree with optional data attached to each node. It should be equivalent to <code>data Container k = EmptyContainer | Node (Either k (Container k)) (Container k)</code>, though I don&#39;t know what purpose that kind of constrained branching would serve. Would <code>data Tree k = Empty | Node (Maybe k) (Container k) (Container k)</code> suffice? (All this to say, Haskell doesn&#39;t even have the more general <code>Tree</code> type in its standard library, let alone your more specialized version.)"}, {"owner": {"reputation": 123, "user_id": 3157312, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1c6fa3ce9887621fc1f64ad20a8ee9dc?s=128&d=identicon&r=PG", "display_name": "asianirish", "link": "https://stackoverflow.com/users/3157312/asianirish"}, "reply_to_user": {"reputation": 384463, "user_id": 1126841, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fa05233b2357f8d11c22ef4cfc7bb85c?s=128&d=identicon&r=PG", "display_name": "chepner", "link": "https://stackoverflow.com/users/1126841/chepner"}, "edited": false, "score": 0, "creation_date": 1560175156, "post_id": 56527603, "comment_id": 99639172, "body": "@chepner something like this thanks. It seems I have to do it myself"}, {"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 0, "creation_date": 1560188503, "post_id": 56527603, "comment_id": 99645489, "body": "It&#39;s hard to prove a negative, but I&#39;d guess there&#39;s no such a thing in the libraries. It looks quit specific to your task rather than something general."}, {"owner": {"reputation": 57219, "user_id": 33796, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/08727b23ba62e634b32988cdff082663?s=128&d=identicon&r=PG", "display_name": "luqui", "link": "https://stackoverflow.com/users/33796/luqui"}, "reply_to_user": {"reputation": 384463, "user_id": 1126841, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fa05233b2357f8d11c22ef4cfc7bb85c?s=128&d=identicon&r=PG", "display_name": "chepner", "link": "https://stackoverflow.com/users/1126841/chepner"}, "edited": false, "score": 3, "creation_date": 1560232045, "post_id": 56527603, "comment_id": 99656489, "body": "Hm, I might phrase this as <code>newtype Container k = Container [Either k (Container k)]</code> (same as @chepner&#39;s, but using the standard list type instead of explicit conses)."}], "owner": {"reputation": 123, "user_id": 3157312, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1c6fa3ce9887621fc1f64ad20a8ee9dc?s=128&d=identicon&r=PG", "display_name": "asianirish", "link": "https://stackoverflow.com/users/3157312/asianirish"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 110, "favorite_count": 0, "answer_count": 0, "score": 0, "last_activity_date": 1560174122, "creation_date": 1560174122, "question_id": 56527603, "link": "https://stackoverflow.com/questions/56527603/is-there-a-type-in-standard-haskell-libraries-implementing-the-following-idea", "title": "Is there a type in standard Haskell libraries implementing the following idea:", "body": "<pre><code>data Container k = EmptyContainer| PrimContainer k (Container k) | FullContainer (Container k) (Container k) deriving (Show)\n\n{-\n*Main&gt; let cont1 = PrimContainer 3 EmptyContainer\n*Main&gt; cont1\nPrimContainer 3 EmptyContainer\n*Main&gt; let cont2 = PrimContainer 4 cont1\n*Main&gt; cont2\nPrimContainer 4 (PrimContainer 3 EmptyContainer)\n*Main&gt; let cont3 = FullContainer cont1 cont2\n*Main&gt; cont3\nFullContainer (PrimContainer 3 EmptyContainer) (PrimContainer 4 (PrimContainer 3 EmptyContainer))\n-}\n</code></pre>\n\n<p>? Just not to reinvent the wheel.</p>\n\n<p>That is, the general idea is to have a container type that can be either an empty container, a container of primitives or a container of this same type recursively</p>\n\n<p>For example, it can be a set of operations, which can be treated as an operation and so on...</p>\n"}, {"tags": ["haskell"], "comments": [{"owner": {"reputation": 384463, "user_id": 1126841, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fa05233b2357f8d11c22ef4cfc7bb85c?s=128&d=identicon&r=PG", "display_name": "chepner", "link": "https://stackoverflow.com/users/1126841/chepner"}, "edited": false, "score": 3, "creation_date": 1560173576, "post_id": 56519413, "comment_id": 99638361, "body": "One distinction you can make is that a <code>Sequence</code> is a data <i>structure</i>: it describes how things are laid out in memory (within some level of abstraction, anyway), but doesn&#39;t impose any meaning to the contents. A <code>Queue</code>, on the other hand, is a data <i>type</i>, which imposes meaning (e.g., if <code>insert(a)</code> precedes <code>insert(b)</code>, then <code>remove</code> will return <code>a</code> before it returns <code>b</code>), but without specifying how that is managed. Your data type can be implemented in terms of a <code>Sequence</code> or some other data structure."}], "answers": [{"comments": [{"owner": {"reputation": 57219, "user_id": 33796, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/08727b23ba62e634b32988cdff082663?s=128&d=identicon&r=PG", "display_name": "luqui", "link": "https://stackoverflow.com/users/33796/luqui"}, "edited": false, "score": 4, "creation_date": 1560130383, "post_id": 56519583, "comment_id": 99624226, "body": "In addition, if you ever want to change representations, this kind of wrapping makes it really easy, since you have already explicitly marked everywhere in the code that depends on the representation with the constructor"}], "tags": [], "owner": {"reputation": 1275, "user_id": 11571245, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/vkCkX.png?s=128&g=1", "display_name": "typedfern", "link": "https://stackoverflow.com/users/11571245/typedfern"}, "is_accepted": false, "score": 10, "last_activity_date": 1560129868, "creation_date": 1560129868, "answer_id": 56519583, "question_id": 56519413, "link": "https://stackoverflow.com/questions/56519413/is-there-anything-wrong-with-wrapping-data-sequence-in-my-own-queue-type/56519583#56519583", "title": "Is there anything wrong with wrapping Data.Sequence in my own Queue type?", "body": "<p>Nothing wrong at all - in fact, that's precisely what <code>newtype</code> is for!</p>\n\n<p>Ideally, your types should reflect your intentions - whoever reads your code (including yourself, in the future, when you have forgotten what you did and why) should be able to tell what a type is <em>for</em></p>\n\n<p>So, even if your queue is merely a <code>Sequence</code>, wrapping it into your own <code>Queue</code> newtype will tell the (human) readers \"this particular sequence is to be used for queuing\" - besides the benefits of hiding non-required functionality, and preventing mixing up your values (i.e. no accidentally passing another <code>Sequence</code> that is <em>not</em> supposed to be a queue to a function that expects a queue).</p>\n"}], "owner": {"reputation": 1185, "user_id": 3228230, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/m9lny.jpg?s=128&g=1", "display_name": "paperduck", "link": "https://stackoverflow.com/users/3228230/paperduck"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 123, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1560129868, "creation_date": 1560127519, "question_id": 56519413, "link": "https://stackoverflow.com/questions/56519413/is-there-anything-wrong-with-wrapping-data-sequence-in-my-own-queue-type", "title": "Is there anything wrong with wrapping Data.Sequence in my own Queue type?", "body": "<p>I want a queue for my application. From what I've read, <a href=\"http://hackage.haskell.org/package/containers-0.6.0.1/docs/Data-Sequence.html\" rel=\"nofollow noreferrer\">Data.Sequence</a> is the best option for production code. In order to keep my code elegant, idiomatic, and overall Haskelly, is there anything wrong with wrapping Data.Sequence up in my own Queue data type in order to hide the functionality I don't need?</p>\n"}, {"tags": ["windows", "haskell", "windows-10", "haskell-stack", "pkg-config"], "comments": [{"owner": {"reputation": 22091, "user_id": 5684257, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ea5090cde8ea066a1fda67ed52dd5084?s=128&d=identicon&r=PG&f=1", "display_name": "HTNW", "link": "https://stackoverflow.com/users/5684257/htnw"}, "edited": false, "score": 0, "creation_date": 1560141145, "post_id": 56519313, "comment_id": 99625719, "body": "There&#39;s SDL2 the actual library, which is written in C, <code>sdl2</code> the Haskell interface to the actual library, and <code>pkg-config</code> the tool the second one uses to find the first one. You have <code>pkg-config</code> installed, but did you install SDL2 the C library before trying to build <code>sdl2</code> the Haskell interface? You can find SDL2 <a href=\"https://www.libsdl.org/download-2.0.php\" rel=\"nofollow noreferrer\">on its website</a>."}, {"owner": {"reputation": 101, "user_id": 10515870, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-zSliZh5bm6g/AAAAAAAAAAI/AAAAAAAAAVU/c4vXo_Dxovg/photo.jpg?sz=128", "display_name": "Another Sad balloon", "link": "https://stackoverflow.com/users/10515870/another-sad-balloon"}, "reply_to_user": {"reputation": 22091, "user_id": 5684257, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ea5090cde8ea066a1fda67ed52dd5084?s=128&d=identicon&r=PG&f=1", "display_name": "HTNW", "link": "https://stackoverflow.com/users/5684257/htnw"}, "edited": false, "score": 0, "creation_date": 1565145483, "post_id": 56519313, "comment_id": 101256061, "body": "@HTNW I have sdl2 set to path with codeblocks. It still doesn&#39;t work"}], "owner": {"reputation": 101, "user_id": 10515870, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-zSliZh5bm6g/AAAAAAAAAAI/AAAAAAAAAVU/c4vXo_Dxovg/photo.jpg?sz=128", "display_name": "Another Sad balloon", "link": "https://stackoverflow.com/users/10515870/another-sad-balloon"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 291, "favorite_count": 1, "answer_count": 0, "score": 1, "last_activity_date": 1560126231, "creation_date": 1560126231, "question_id": 56519313, "link": "https://stackoverflow.com/questions/56519313/i-setup-pkg-config-to-path-and-stack-still-gives-me-file-not-found-error-window", "title": "I setup pkg-config to path and stack still gives me file not found error. windows 10", "body": "<p>For sdl2 for Haskell, I went here <a href=\"https://stackoverflow.com/questions/1710922/how-to-install-pkg-config-in-windows#22363820\">How to install pkg config in windows?</a> and downloaded the pkg pkg-config-lite. I set it to path and it gives me this error <code>Configuring sdl2-2.4.1.0...\n    Cabal-simple_Z6RU0evB_2.4.0.1_ghc-8.6.5.exe: The pkg-config package 'sdl2'\n    version &gt;=2.0.4 is required but it could not be found.</code></p>\n\n<p>I tried to find a new replacement and failed to find one that worked.</p>\n\n<pre><code>      C:\\sr\\setup-exe-cache\\x86_64-windows\\Cabal-simple_Z6RU0evB_2.4.0.1_ghc-8.6.5.exe --builddir=.stack-work\\dist\\e626a42b configure --with-ghc=C:\\Users\\d\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.6.5\\bin\\ghc.EXE --with-ghc-pkg=C:\\Users\\d\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.6.5\\bin\\ghc-pkg.EXE --user --package-db=clear --package-db=global --package-db=C:\\sr\\snapshots\\a6aa7628\\pkgdb --libdir=C:\\sr\\snapshots\\a6aa7628\\lib --bindir=C:\\sr\\snapshots\\a6aa7628\\bin --datadir=C:\\sr\\snapshots\\a6aa7628\\share --libexecdir=C:\\sr\\snapshots\\a6aa7628\\libexec --sysconfdir=C:\\sr\\snapshots\\a6aa7628\\etc --docdir=C:\\sr\\snapshots\\a6aa7628\\doc\\sdl2-2.4.1.0 --htmldir=C:\\sr\\snapshots\\a6aa7628\\doc\\sdl2-2.4.1.0 --haddockdir=C:\\sr\\snapshots\\a6aa7628\\doc\\sdl2-2.4.1.0 --dependency=StateVar=StateVar-1.1.1.1-2ewTKofpCGhC2np5dyFIaR --dependency=base=base-4.12.0.0 --dependency=bytestring=bytestring-0.10.8.2 --dependency=exceptions=exceptions-0.10.2-965Nx9KftkgCsZ4B7Zhuyu --dependency=linear=linear-1.20.9-8i87OQRLMk19j5jCRXHfj4 --dependency=text=text-1.2.3.1 --dependency=transformers=transformers-0.5.6.2 --dependency=vector=vector-0.12.0.3-2LEYu9M2i7lERDtz76XG3n --extra-include-dirs=C:\\Users\\d\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20180531\\mingw64\\include --extra-lib-dirs=C:\\Users\\d\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20180531\\mingw64\\bin --extra-lib-dirs=C:\\Users\\d\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20180531\\mingw64\\lib\n    Process exited with code: ExitFailure 1\n    Logs have been written to: C:\\sr\\global-project\\.stack-work\\logs\\sdl2-2.4.1.0.log\n\n    Configuring sdl2-2.4.1.0...\n    Cabal-simple_Z6RU0evB_2.4.0.1_ghc-8.6.5.exe: The pkg-config package 'sdl2'\n    version &gt;=2.0.4 is required but it could not be found.```\n\nthe output should be it downloads sdl2 into my computer\n</code></pre>\n"}, {"tags": ["haskell", "tree", "traversable"], "comments": [{"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "edited": false, "score": 0, "creation_date": 1560129567, "post_id": 56519199, "comment_id": 99624115, "body": "You can definitely do the effects of the traversal in a different order for the two. Although it might be a bit tricky to reconstruct the tree at the end! It should definitely be possible, though."}], "answers": [{"comments": [{"owner": {"reputation": 939, "user_id": 11140945, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/j5Esk.png?s=128&g=1", "display_name": "Listerone", "link": "https://stackoverflow.com/users/11140945/listerone"}, "edited": false, "score": 0, "creation_date": 1560141382, "post_id": 56519573, "comment_id": 99625768, "body": "What I mean is that the output of <code>Traversable</code> for both <code>Depth</code> and <code>Breadth</code> should be the same shouldn&#39;t it? It simply processes the elements in a different order."}, {"owner": {"reputation": 22091, "user_id": 5684257, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ea5090cde8ea066a1fda67ed52dd5084?s=128&d=identicon&r=PG&f=1", "display_name": "HTNW", "link": "https://stackoverflow.com/users/5684257/htnw"}, "reply_to_user": {"reputation": 939, "user_id": 11140945, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/j5Esk.png?s=128&g=1", "display_name": "Listerone", "link": "https://stackoverflow.com/users/11140945/listerone"}, "edited": false, "score": 4, "creation_date": 1560150671, "post_id": 56519573, "comment_id": 99628234, "body": "Absolutely not! <code>traverse</code> turns a collection of actions producing values into an action producing a collection of values. The order in which the actions are executed changes from <code>Depth</code> to <code>Breadth</code>, so the values they produce may change or the actions they execute may change. E.g. <code>traverse print</code> and <code>traverse (const $ get &lt;* modify (+1))</code>. Heck: <code>depth = getConst . traverse (Const . return) . Depth</code> and <code>breadth = getConst . traverse (Const . return) . Breadth</code>"}, {"owner": {"reputation": 57219, "user_id": 33796, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/08727b23ba62e634b32988cdff082663?s=128&d=identicon&r=PG", "display_name": "luqui", "link": "https://stackoverflow.com/users/33796/luqui"}, "reply_to_user": {"reputation": 939, "user_id": 11140945, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/j5Esk.png?s=128&g=1", "display_name": "Listerone", "link": "https://stackoverflow.com/users/11140945/listerone"}, "edited": false, "score": 2, "creation_date": 1560239291, "post_id": 56519573, "comment_id": 99659665, "body": "@Listerone though you are correct that <code>traverse</code> will be the same if you use it on an Applicative which is order independent such as <code>Identity</code> or <code>(r -&gt;)</code>.  But in general the order of effects absolutely matters."}], "tags": [], "owner": {"reputation": 22091, "user_id": 5684257, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ea5090cde8ea066a1fda67ed52dd5084?s=128&d=identicon&r=PG&f=1", "display_name": "HTNW", "link": "https://stackoverflow.com/users/5684257/htnw"}, "is_accepted": false, "score": 6, "last_activity_date": 1560179399, "last_edit_date": 1560179399, "creation_date": 1560129683, "answer_id": 56519573, "question_id": 56519199, "link": "https://stackoverflow.com/questions/56519199/is-traversable-different-for-breadth-first-and-depth-first-trees/56519573#56519573", "title": "Is Traversable different for breadth-first and depth-first trees?", "body": "<p><code>Traversable</code> has to agree with <code>Foldable</code>. Specifically, if <code>Monoid m</code>, then <code>Applicative (Const m)</code>, causing a consistency law <code>foldMap f = getConst . traverse (Const . f)</code>. It is thus <em>impossible</em> for <code>Breadth</code> and <code>Depth</code> to share a <code>Traversable</code>. There is either a different implementation for <code>Traversable Breadth</code> that agrees with its <code>Foldable</code>, or there is none at all. I can cook up an implementation that I believe does agree, but I haven't verified the other laws.</p>\n\n<pre><code>instance Traversable Breadth where\n  traverse f (Breadth t) = Breadth &lt;$&gt; head &lt;$&gt; go [t]\n    where\n      go [] = pure []\n      go ts = zipWith Tree &lt;$&gt; traverse f rs\n                           &lt;*&gt; (fmap (rebuild css) $ go $ concat css)\n        where\n          (rs, css) = unzip $ map (\\(Tree r cs) -&gt; (r, cs)) ts\n          -- rebuild s d = evalState (traverse (state splitAt') d) s\n          -- I think, but let's keep the dependencies down, shall we?\n          rebuild [] [] = []\n          rebuild (struct : structs) destruct\n            = let (cs, destruct') = splitAt' struct destruct\n              in  cs : rebuild structs destruct'\n          -- ignoring the as in a [a] makes it look like a number\n          splitAt' [] xs = ([], xs)\n          splitAt' (_ : n) (x : xs)\n            = let (pre, suf) = splitAt' n xs\n              in  (x : pre, suf)\n</code></pre>\n\n<p>This is pretty hairy, and there's non-totality everywhere, but it should work out fine.</p>\n"}], "owner": {"reputation": 939, "user_id": 11140945, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/j5Esk.png?s=128&g=1", "display_name": "Listerone", "link": "https://stackoverflow.com/users/11140945/listerone"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 162, "favorite_count": 1, "answer_count": 1, "score": 3, "last_activity_date": 1560179399, "creation_date": 1560124625, "last_edit_date": 1560125232, "question_id": 56519199, "link": "https://stackoverflow.com/questions/56519199/is-traversable-different-for-breadth-first-and-depth-first-trees", "title": "Is Traversable different for breadth-first and depth-first trees?", "body": "<p>I have a Rose Tree structure and I wanted to write a <a href=\"https://hackage.haskell.org/package/base/docs/Data-Traversable.html\" rel=\"nofollow noreferrer\"><code>Traversable</code></a> instance for it. So I started with the following:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>data Tree a = Tree a [Tree a] deriving (Show)\n\ninstance Functor Tree where\n  fmap f (Tree x subs) = Tree (f x) (fmap (fmap f) subs)\n</code></pre>\n\n<p>I did the depth-first variant of it:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>newtype Depth a = Depth (Tree a) deriving (Show)\n\ndepth :: Tree a -&gt; [a]\ndepth (Tree x subs) = x : concatMap depth subs\n\ninstance Functor Depth where\n  fmap f (Depth t) = Depth $ fmap f t\n\ninstance Foldable Depth where\n  foldMap f (Depth t) = mconcat $ f &lt;$&gt; depth t\n\ninstance Traversable Depth where\n  traverse f (Depth t) = Depth &lt;$&gt; go t\n    where go (Tree x subs) = Tree &lt;$&gt; f x &lt;*&gt; traverse go subs\n</code></pre>\n\n<p>Then I tried the breadth-first variant:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>newtype Breadth a = Breadth (Tree a) deriving (Show)\n\nbreadth :: Tree a -&gt; [a]\nbreadth tree = go [tree]\n  where\n    go [] = []\n    go (Tree x subs:q) = x : go (q &lt;&gt; subs)\n\ninstance Functor Breadth where\n  fmap f (Breadth t) = Breadth $ fmap f t\n\ninstance Foldable Breadth where\n  foldMap f (Breadth t) = mconcat $ f &lt;$&gt; breadth t\n\ninstance Traversable Breadth where\n  traverse f (Breadth t) = ???\n</code></pre>\n\n<p>And I realized that the breadth and depth first variants of <code>Traversable</code> for this should be the same. Is this the case? I don't believe I've actually read this anywhere but traversal is independent of the order of the elements?</p>\n\n<p>If so, this gets a little weird because <code>Traversable</code> can then be implemented directly for <code>Tree</code>, which means that <code>Foldable</code> needs to be implemented for <code>Tree</code>, but there are obviously multiple ways that <code>Foldable</code> can be implemented.</p>\n"}, {"tags": ["haskell"], "comments": [{"owner": {"reputation": 81794, "user_id": 9859, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/KEZOL.jpg?s=128&g=1", "display_name": "rampion", "link": "https://stackoverflow.com/users/9859/rampion"}, "edited": false, "score": 0, "creation_date": 1560108547, "post_id": 56517712, "comment_id": 99620861, "body": "Consider your base cases, and write down what <code>evaluates</code> should output for the following inputs: <code>[]</code>, <code>[] : xs</code>, <code>(y:ys) : xs</code>.  Your current implementation only considers one of these cases, and depends on <code>ys</code> matching <code>_ : _</code>, as <code>head</code> is not defined on <code>[]</code>."}], "answers": [{"comments": [{"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "edited": false, "score": 2, "creation_date": 1560177193, "post_id": 56517783, "comment_id": 99640180, "body": "<code>evaluate = any and</code>?"}, {"owner": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "reply_to_user": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "edited": false, "score": 0, "creation_date": 1560177346, "post_id": 56517783, "comment_id": 99640268, "body": "@DanielWagner: yes, somehow I did not think about that :s."}], "tags": [], "owner": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "is_accepted": true, "score": 11, "last_activity_date": 1560177332, "last_edit_date": 1560177332, "creation_date": 1560108655, "answer_id": 56517783, "question_id": 56517712, "link": "https://stackoverflow.com/questions/56517712/given-a-list-of-list-of-booleans-return-a-boolean/56517783#56517783", "title": "Given a list of list of Booleans, return a Boolean", "body": "<p>You try to do <em>too</em> much in a single function. Let us solve the problem in three steps:</p>\n\n<ol>\n<li>create a function that takes a list of <code>Bool</code>s, and returns the logical AND of these <code>Bool</code>s;</li>\n<li>create a function that takes a list of <code>Bool</code>s and returns the logical OR of these <code>Bool</code>s; and</li>\n<li>create a function that takes a list of <code>[Bool]</code>s, first maps it with the first function, and then performs the second function on that.</li>\n</ol>\n\n<p>We can implement the first function with a <a href=\"https://hackage.haskell.org/package/base-4.12.0.0/docs/Prelude.html#v:foldr\" rel=\"nofollow noreferrer\"><strong><code>foldr :: Foldable t =&gt; (a -&gt; b -&gt; b) -&gt; b -&gt; t a -&gt; b</code></strong></a>:</p>\n\n<pre><code>_and :: [Bool] -&gt; Bool\n_and = foldr (&amp;&amp;) True\n</code></pre>\n\n<p>in fact, the Haskell prelude already <em>has</em> an <a href=\"https://hackage.haskell.org/package/base-4.12.0.0/docs/Prelude.html#v:and\" rel=\"nofollow noreferrer\"><strong><code>and :: Foldable f =&gt; f Bool -&gt; Bool</code></strong></a> function.</p>\n\n<p>The second function can be implemented with a <code>foldr</code> as well:</p>\n\n<pre><code>_or :: [Bool] -&gt; Bool\n_or = foldr (||) False\n</code></pre>\n\n<p>The Haskell prelude already <em>has</em> an <a href=\"https://hackage.haskell.org/package/base-4.12.0.0/docs/Prelude.html#v:or\" rel=\"nofollow noreferrer\"><strong><code>or :: Foldable f =&gt; f Bool -&gt; Bool</code></strong></a> function.</p>\n\n<p>Now we can define <code>evaluate</code> with <a href=\"https://hackage.haskell.org/package/base-4.12.0.0/docs/Prelude.html#v:map\" rel=\"nofollow noreferrer\"><strong><code>map :: (a -&gt; b) -&gt; [a] -&gt; [b]</code></strong></a>:</p>\n\n<pre><code>evaluate :: [[Bool]] -&gt; Bool\nevaluate = _or . map _and\n</code></pre>\n\n<p>We can even generalize the above to work with two (possibly different) <code>Foldable</code>s:</p>\n\n<pre><code>evaluate :: (Foldable f, Foldable g) =&gt; f (g Bool) -&gt; Bool\nevaluate = foldr ((||) . and) False\n</code></pre>\n\n<p>or like <a href=\"https://stackoverflow.com/questions/56517712/given-a-list-of-list-of-booleans-return-a-boolean/56517783?noredirect=1#comment99640180_56517783\">@DanielWagner</a> says, we can use <a href=\"https://hackage.haskell.org/package/base-4.12.0.0/docs/Prelude.html#v:any\" rel=\"nofollow noreferrer\"><strong><code>any :: Foldable f =&gt; (a -&gt; Bool) -&gt; f a -&gt; Bool</code></strong></a>:</p>\n\n<pre><code>evaluate :: (Foldable f, Foldable g) =&gt; f (g Bool) -&gt; Bool\nevaluate = any and\n</code></pre>\n\n<p>For example:</p>\n\n<pre><code>Prelude&gt; evaluate [[True, False, True], [True], [False, False]]\nTrue\nPrelude&gt; evaluate [Just False, Just False, Nothing]\nTrue\nPrelude&gt; evaluate [Just False, Just False, Just False]\nFalse\nPrelude&gt; evaluate (Just [True, False, True])\nFalse\nPrelude&gt; evaluate (Just [True, True, True])\nTrue\n</code></pre>\n"}], "owner": {"reputation": 71, "user_id": 10699624, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7e8c6db35ab391a9383c3a33d0f3e13d?s=128&d=identicon&r=PG&f=1", "display_name": "Skinper", "link": "https://stackoverflow.com/users/10699624/skinper"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 875, "favorite_count": 0, "accepted_answer_id": 56517783, "answer_count": 1, "score": 3, "last_activity_date": 1560177332, "creation_date": 1560108118, "last_edit_date": 1560115174, "question_id": 56517712, "link": "https://stackoverflow.com/questions/56517712/given-a-list-of-list-of-booleans-return-a-boolean", "title": "Given a list of list of Booleans, return a Boolean", "body": "<p>I have a function, defined as follows, that is given a list of lists of Booleans and returns a Boolean:</p>\n\n<pre><code>evaluates :: [[Bool]] -&gt; Bool\n</code></pre>\n\n<p>I tried the following way:</p>\n\n<pre><code>evaluates  :: [[Bool]] -&gt; Bool\nevaluates  ((y:ys):xs) = (y &amp;&amp; (head ys)) || evaluates (tail xs)\n</code></pre>\n\n<p>but this doesn't work.</p>\n\n<p>The result I expect is:</p>\n\n<pre><code>[True &amp;&amp; False &amp;&amp; True] ||  [True] || [False &amp;&amp; False]] = True\n</code></pre>\n\n<p>For an entry of: <code>[[True, False, True], [True], [False, False]]</code></p>\n"}, {"tags": ["haskell", "io", "typechecking"], "comments": [{"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 3, "creation_date": 1560079843, "post_id": 56513719, "comment_id": 99614416, "body": "This is a common instance of &quot;boolean blindness&quot;, i.e. reducing the information you know to a boolean even when you have more information at hand. <code>isRPS</code> returns a boolean (carrying true or false) instead of a more informative type (carrying the RPS value or an error). In this case <code>Maybe RPS</code> suffices. Sometimes you want <code>Either SomeError RPS</code>, if you have multiple errors to return. <code>Bool</code> is not used so frequently in Haskell as in some other languages."}], "answers": [{"comments": [{"owner": {"reputation": 878, "user_id": 4136114, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/PkUs6.jpg?s=128&g=1", "display_name": "RichardForrester", "link": "https://stackoverflow.com/users/4136114/richardforrester"}, "edited": false, "score": 2, "creation_date": 1560077880, "post_id": 56513767, "comment_id": 99614070, "body": "Thanks, perfect use case for Maybe - I should have seen that. I just noticed that rps and Rock need to switched for the game to work right."}], "tags": [], "owner": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "is_accepted": true, "score": 11, "last_activity_date": 1560090138, "last_edit_date": 1560090138, "creation_date": 1560075717, "answer_id": 56513767, "question_id": 56513719, "link": "https://stackoverflow.com/questions/56513719/haskell-how-do-you-check-runtime-types-on-io/56513767#56513767", "title": "Haskell: how do you check runtime types on IO?", "body": "<p>You did not transform the <code>choice</code> (which is a <code>String</code>) to an <code>RPS</code>, or even better a <code>Maybe RPS</code>:</p>\n\n<pre><code>readRPS :: String -&gt; Maybe RPS\nreadRPS &quot;rock&quot; = Just Rock\nreadRPS &quot;paper&quot; = Just Paper\nreadRPS &quot;scissors&quot; = Just Scissors\nreadRPS _ = Nothing</code></pre>\n\n<p>Here we thus return a <code>Just x</code> given the input is valid (with <code>x</code> the corresponding <code>RPS</code> item), or <code>Nothing</code> if the string is not a valid option.</p>\n\n<p>We can then implement this as:</p>\n\n<pre><code>import Data.Char(toLower)\n\nmain :: IO ()\nmain = do\n    putStrLn &quot;Rock, Paper, or Scissors?&quot;\n    choice &lt;- getLine\n    case <b>readRPS (map toLower choice)</b> of\n        <b>Just rps</b> -&gt; putStrLn (_shoot rps Rock) \n        Nothing -&gt; putStrLn &quot;Invalid choice.&quot;\n    main</code></pre>\n"}, {"comments": [{"owner": {"reputation": 878, "user_id": 4136114, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/PkUs6.jpg?s=128&g=1", "display_name": "RichardForrester", "link": "https://stackoverflow.com/users/4136114/richardforrester"}, "edited": false, "score": 1, "creation_date": 1560077214, "post_id": 56513774, "comment_id": 99613947, "body": "Thanks, using the Maybe type seems to make more sense to me, but it\u2019s nice to know that there are different ways to do things."}], "tags": [], "owner": {"reputation": 14030, "user_id": 8475054, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/edbf41c4b5aecb1a949936e06368a7c2?s=128&d=identicon&r=PG&f=1", "display_name": "Robin Zigmond", "link": "https://stackoverflow.com/users/8475054/robin-zigmond"}, "is_accepted": false, "score": 5, "last_activity_date": 1560075771, "creation_date": 1560075771, "answer_id": 56513774, "question_id": 56513719, "link": "https://stackoverflow.com/questions/56513719/haskell-how-do-you-check-runtime-types-on-io/56513774#56513774", "title": "Haskell: how do you check runtime types on IO?", "body": "<p>You're nearly there, you just need the <a href=\"https://hackage.haskell.org/package/base-4.12.0.0/docs/Prelude.html#v:read\" rel=\"noreferrer\">read</a> function to convert the user's string to your <code>RPS</code> data type.</p>\n\n<p>The first thing you need to do is to make <code>RPS</code> an instance of the <code>Read</code> typeclass. This can be done easily by amending your <code>data</code> declaration to:</p>\n\n<pre><code>data RPS = Rock | Paper | Scissors deriving Read\n</code></pre>\n\n<p>what <code>deriving Read</code> does is give <code>RPS</code> a default instance of the <code>Read</code> typeclass, which works in the obvious way: <code>read \"Rock\"</code> will become <code>Rock</code> and so on, provided the compiler knows you're using <code>read</code> in a context where a value of type <code>RPS</code> is expected.</p>\n\n<p>Then all you need to do, in your <code>main</code> function, is change this:</p>\n\n<pre><code>putStrLn (_shoot choice Rock)\n</code></pre>\n\n<p>to</p>\n\n<pre><code>putStrLn (_shoot (read choice) Rock)\n</code></pre>\n\n<p>Since <code>_shoot</code> has a type signature telling GHC that its first argument must be an <code>RPS</code> value, it will know to use the instance of <code>read</code> defined for your <code>RPS</code> type, and all should be well, since you've already restricted the valid user choices to those 3 specific strings.</p>\n\n<p>(Note that for larger programs there are safer and better ways of handling things like this - see Willem's answer for one simple approach - but this is fine for a basic learning exercise.)</p>\n"}], "owner": {"reputation": 878, "user_id": 4136114, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/PkUs6.jpg?s=128&g=1", "display_name": "RichardForrester", "link": "https://stackoverflow.com/users/4136114/richardforrester"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 166, "favorite_count": 0, "accepted_answer_id": 56513767, "answer_count": 2, "score": 6, "last_activity_date": 1560090138, "creation_date": 1560075209, "question_id": 56513719, "link": "https://stackoverflow.com/questions/56513719/haskell-how-do-you-check-runtime-types-on-io", "title": "Haskell: how do you check runtime types on IO?", "body": "<p>I'm making my way through some introductory material on Haskell and trying to complete this silly Rock, Paper, Scissors implementation for the command line.</p>\n\n<p>I would think that a type guard on the input would be good enough to convince the compiler that the input is of the type <code>RPS</code>, but alas, it is not.</p>\n\n<p>How does one go about telling the compiler that input data is of one type or another?</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>\ndata RPS = Rock | Paper | Scissors\n\n_shoot :: RPS -&gt; RPS -&gt; String\n_shoot Rock Paper = \"Paper beats rock, you win!\"\n_shoot Paper Rock = \"Paper beats rock, you loose.\"\n_shoot Rock Scissors = \"Rock beats scissors, you loose.\"\n_shoot Scissors Rock = \"Rock beats scissors, you win!\"\n_shoot Paper Scissors = \"Scissors beats paper, you win!\"\n_shoot Scissors Paper = \"Scissors beats paper, you loose!\"\n_shoot Rock Rock = \"Tie!\"\n_shoot Scissors Scissors = \"Tie!\"\n_shoot Paper Paper = \"Tie!\"\n\nisRPS :: String -&gt; Bool\nisRPS s = elem s [\"Rock\", \"Paper\", \"Scissors\"]\n\nmain :: IO ()\nmain = do\n  putStrLn \"Rock, Paper, or Scissors?\"\n  choice &lt;- getLine\n  if isRPS choice -- this was my idea but is apparently not good enough\n    then putStrLn (_shoot choice Rock) \n--                        ^^^^^^\n-- Couldn't match type \u2018[Char]\u2019 with \u2018RPS\u2019 Expected type: RPS Actual type: String\n    else putStrLn \"Invalid choice.\"\n</code></pre>\n"}, {"tags": ["list", "haskell", "lazy-evaluation", "map-function", "lazy-sequences"], "comments": [{"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "edited": false, "score": 2, "creation_date": 1560064123, "post_id": 56512596, "comment_id": 99611691, "body": "What function is it <i>exactly</i> that you claim is being applied when you write &quot;after applying the function the first time&quot;?"}, {"owner": {"reputation": 14030, "user_id": 8475054, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/edbf41c4b5aecb1a949936e06368a7c2?s=128&d=identicon&r=PG&f=1", "display_name": "Robin Zigmond", "link": "https://stackoverflow.com/users/8475054/robin-zigmond"}, "edited": false, "score": 0, "creation_date": 1560064644, "post_id": 56512596, "comment_id": 99611776, "body": "&quot;Why is this recursive map function only being applied to the last two elements in the list?&quot;. It&#39;s being applied to every element in the list, but only once - your version seems to apply it to 0 and 10 twice and I can&#39;t figure out why you would think it should. Also the list is infinite so it doesn&#39;t have a &quot;last 2 elements&quot;"}, {"owner": {"reputation": 384463, "user_id": 1126841, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fa05233b2357f8d11c22ef4cfc7bb85c?s=128&d=identicon&r=PG", "display_name": "chepner", "link": "https://stackoverflow.com/users/1126841/chepner"}, "edited": false, "score": 0, "creation_date": 1560089649, "post_id": 56512596, "comment_id": 99616366, "body": "You never have a list <code>[0, 10]</code>; you have a list that <i>begins</i> with <code>0</code> and <code>10</code>, followed by... something. Conceptually, you have to distinguish between appending to a finite list &quot;forever&quot;, and applying some function to each element of an initially infinite list."}], "answers": [{"tags": [], "owner": {"reputation": 14030, "user_id": 8475054, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/edbf41c4b5aecb1a949936e06368a7c2?s=128&d=identicon&r=PG&f=1", "display_name": "Robin Zigmond", "link": "https://stackoverflow.com/users/8475054/robin-zigmond"}, "is_accepted": false, "score": 4, "last_activity_date": 1560066028, "creation_date": 1560066028, "answer_id": 56512817, "question_id": 56512596, "link": "https://stackoverflow.com/questions/56512596/why-is-this-recursive-map-function-only-being-applied-to-the-last-two-elements-i/56512817#56512817", "title": "Why is this recursive map function only being applied to the last two elements in the list?", "body": "<p>Let's just work through it, using the recursive definition of <code>map</code>:</p>\n\n<pre><code>map _ [] = []\nmap f (x:xs) = f x : map f xs\n</code></pre>\n\n<p>Since we have</p>\n\n<pre><code>mystery = 0:10:(map (+1) mystery)\n</code></pre>\n\n<p>we already know that</p>\n\n<pre><code>mystery = [0, 10, ...]\n</code></pre>\n\n<p>and the <code>...</code> stands for <code>map (+1) mystery</code>. So let's use the definition above to calculate it.</p>\n\n<p>The list we're applying it to clearly isn't empty - it starts with 0 and 10. So we use the second line, with <code>x</code> as 0 and <code>xs</code> as <code>10:(map (+1) mystery)</code>:</p>\n\n<pre><code>map (+1) mystery = 1:(map (+1) (10:(map (+1) mystery)))\n</code></pre>\n\n<p>or, using the formula again for the first level of nesting:</p>\n\n<pre><code>map (+1) mystery = 1:11:(map (+1) (map (+1) mystery))\n</code></pre>\n\n<p>So, going back to <code>mystery</code> itself, we now know its first 4 elements:</p>\n\n<pre><code>mystery = [0, 10, 1, 11, ...]\n</code></pre>\n\n<p>and the <code>...</code> stands for the contents of <code>map (+1) (map (+1) mystery)</code>. That is, based on the result above:</p>\n\n<pre><code>map (+1) (1:11:(map (+1) (map (+1) mystery)))\n</code></pre>\n\n<p>I'll spare you the details of the evaluation here, because it should be clear by now what happens: the first 2 elements (which will be the 5th and 6th in <code>mystery</code>) will be 2 and 12, and the rest will be <code>map (+1) ((map (+1) (map (+1) mystery)))</code>. Which, by exactly the same process, will start with 3 and 13. And so it goes on, as far as you could ever care to calculate it.</p>\n"}, {"comments": [{"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 0, "creation_date": 1560268406, "post_id": 56515446, "comment_id": 99676857, "body": "Great explanation. It should be mentioned that this explains why <code>mystery</code> has the value it has, but it does <i>not</i> explain how <code>mystery</code> is actually evaluated. In particular, <code>map (+1) mystery</code> is only calculated <i>once</i>, not once for every two elements."}], "tags": [], "owner": {"reputation": 384463, "user_id": 1126841, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fa05233b2357f8d11c22ef4cfc7bb85c?s=128&d=identicon&r=PG", "display_name": "chepner", "link": "https://stackoverflow.com/users/1126841/chepner"}, "is_accepted": false, "score": 6, "last_activity_date": 1560096577, "last_edit_date": 1560096577, "creation_date": 1560090679, "answer_id": 56515446, "question_id": 56512596, "link": "https://stackoverflow.com/questions/56512596/why-is-this-recursive-map-function-only-being-applied-to-the-last-two-elements-i/56515446#56515446", "title": "Why is this recursive map function only being applied to the last two elements in the list?", "body": "<p>Before diving into the definition of <code>mystery</code>, let's take a look at one of the laws <code>map</code> obeys:</p>\n\n<pre><code>map f (map g xs) == map (f . g) xs\n</code></pre>\n\n<p>A rather informal proof of this law is easy to follow:</p>\n\n<pre><code>map f (map g [x1, x2, ..., xn]) == map f [g x1, g x2, ..., g xn]\n                                == [f (g x1), f (g x2), ..., f (g xn)]\n                                == [(f.g) x1, (f.g) x2, ..., (f.g) xn]\n                                == map (f.g) [x1, x2, ..., xn]\n</code></pre>\n\n<hr>\n\n<p>With that in mind, let's expand <code>mystery</code> step by step:</p>\n\n<pre><code>mystery == 0 : 10 : map (+1) mystery\n        -- by definition of mystery\n        == 0 : 10 : map (+1) (0 : 10 : map (+1) mystery)\n        -- by definition of map and the fact that  0 + 1 == 1\n        == 0 : 10 : 1 : map (+1) (10 : map (+1) mystery)\n        -- by definition of map and the fact that 10 + 1 == 11\n        == 0 : 10 : 1 : 11 : map (+1) (map (+1) mystery)\n        -- using the law above, and the fact that (+1) . (+1) == (+2)\n        == 0 : 10 : 1 : 11 : map (+2) mystery\n        == 0 : 10 : 1 : 11 : map (+2) (0 : 10 : map (+1) mystery)\n        == 0 : 10 : 1 : 11 : 2 : map (+2) (10 : map (+1) mystery)\n        == 0 : 10 : 1 : 11 : 2 : 12 : map (+2) (map (+1) mystery)\n        == 0 : 10 : 1 : 11 : 2 : 12 : map (+3) mystery\n        -- etc\n</code></pre>\n\n<p>You don't start with a finite list <code>[0, 10]</code>; you start with an infinite list that <em>begins</em> with 0 and 10, with the remaining elements defined recursively. </p>\n\n<p>In some sense, there is no closed form for the list, but that doesn't matter; laziness means that you only apply <code>map</code> to <code>mystery</code> as needed to get requested items. For example, neither <code>head mystery</code> nor <code>head (tail mystery)</code> ever need to evaluate the call to <code>map</code>, and <code>head (tail (tail mystery))</code> only needs to map <code>(+1)</code> to the <code>head mystery</code>, not the entire infinite list.</p>\n\n<p>Laziness blurs the distinction between the list and the algorithm to <em>compute</em> the list.</p>\n"}, {"tags": [], "owner": {"reputation": 61419, "user_id": 849891, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/MbEO3.png?s=128&g=1", "display_name": "Will Ness", "link": "https://stackoverflow.com/users/849891/will-ness"}, "is_accepted": false, "score": 1, "last_activity_date": 1575016806, "last_edit_date": 1575016806, "creation_date": 1560093661, "answer_id": 56515822, "question_id": 56512596, "link": "https://stackoverflow.com/questions/56512596/why-is-this-recursive-map-function-only-being-applied-to-the-last-two-elements-i/56515822#56515822", "title": "Why is this recursive map function only being applied to the last two elements in the list?", "body": "<p>Since</p>\n\n<pre><code>mystery = 0 : 10 : map (+1) mystery\n</code></pre>\n\n<p>by the definitions of <code>(!!)</code> and <code>(:)</code> and <code>map</code> it is the case that</p>\n\n<pre><code>mystery !! 0 = 0          -- pseudocode\nmystery !! 1 = 10\nmystery !! n | n &gt; 1\n             = (0 : 10 : map (+1) mystery) !! n\n             = (10 : map (+1) mystery) !! (n-1)\n             = (map (1+) mystery) !! (n-2)\n             = 1 + (mystery !! (n-2))\n</code></pre>\n\n<p>and there's your answer. </p>\n\n<p>An illustration:</p>\n\n<pre><code>--         0   1  2   3  4   5  6        -- n\nmystery = [0, 10, 1, 11, 2, 12, 3, ...\n--               /   /  /   /  /         -- (+1)\n--              [0, 10, 1, 11, 2, ...\n--               0   1  2   3  4         -- n-2\n</code></pre>\n\n<p>so all this is, is each element being defined with the reference to a previous one, two positions prior. </p>\n\n<p>Thus another way to write the same thing down, making the pairing up (nay <em>zipping</em>) explicit, is</p>\n\n<pre><code>mystery = 0 : 10 : zipWith (+) (repeat 1)\n                               mystery\n-- and in general,\n-- map (f y) xs  ==  zipWith f (repeat y) xs \n</code></pre>\n\n<p>Translated into an imperative pseudocode, the program </p>\n\n<pre><code>main = print mystery\n</code></pre>\n\n<p>is actually the same as</p>\n\n<pre><code>main :\n    a = 0\n    b = 10\n    print \"[\" \n    while( True ) :\n       print a , \n       print b ,\n       a += 1\n       b += 1\n</code></pre>\n\n<hr>\n\n<p>A <em>principled</em> approach to tackle such problems is to <em>name</em> all your <em>interim entities,</em> the inner <em>thunks</em> behind lazy data constructors (here, <code>:</code>), as they come into being, forced into WHNF by the demands of lazy evaluation. Then the mystery disappears:</p>\n\n<pre><code>mystery = 0  : 10 : map (+1) mystery\n        = x1 : t1 \n  where \n  x1 = 0\n  t1 = 10 : map (+1) mystery\n     = x2 : t2\n    where\n    x2 = 10\n    t2 = map (+1) mystery\n       = map (+1) (x1 : t1)\n       = x1 + 1 : map (1+) t1         -- by definition of map\n       = x3     : t3\n      where\n      x3 = x1 + 1 = 0 + 1 = 1\n      t3 = map (1+) t1 = map (1+) (x2 : t2)\n         = x2 + 1 : map (1+) t2       --    = x_{n} + 1 : ...\n         = x4     : t4                --    = x_{n+2}   : ...\n        where\n        ....\n</code></pre>\n\n<p>At no point do we get any function other than <code>(1+)</code> in this reduction process, nor do we ever get more than one of them stacked up in a row. </p>\n\n<p>All we get is <code>x<sub><b>n</b></sub> := 1 + x<sub><b>n-2</b></sub></code>, repeatedly, for all <code>n</code> above <code>1</code>.</p>\n"}], "owner": {"reputation": 35, "user_id": 11620722, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b29301aa7ba92a498f2194439aab831b?s=128&d=identicon&r=PG&f=1", "display_name": "aquaman9", "link": "https://stackoverflow.com/users/11620722/aquaman9"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 133, "favorite_count": 0, "answer_count": 3, "score": 1, "last_activity_date": 1575016806, "creation_date": 1560063528, "last_edit_date": 1560092703, "question_id": 56512596, "link": "https://stackoverflow.com/questions/56512596/why-is-this-recursive-map-function-only-being-applied-to-the-last-two-elements-i", "title": "Why is this recursive map function only being applied to the last two elements in the list?", "body": "<p>This is the problem given: What are the first 8 elements in the following list?</p>\n\n<pre><code>mystery = 0 : 10 : (map(+1)mystery)\n</code></pre>\n\n<p>The answer is <code>[0,10,1,11,2,12,3,13...]</code></p>\n\n<p>But in my opinion the answer should be <code>[0,10,1,11,1,11,2,12]</code>. The following steps show why:</p>\n\n<p>1) We are given ;list <code>[0,10]</code> so after applying the function the first time we have the list [<code>0,10,1, 11]</code>\n2) Now we have a list [<code>0,10,1,11]</code> so after applying the function again the resulting list should be <code>[0,10,1,11,1,11,2,12]</code></p>\n\n<p>Apparently that is not the case. Can anyone explain why?</p>\n"}, {"tags": ["c", "haskell", "interop", "ffi"], "comments": [{"owner": {"reputation": 22091, "user_id": 5684257, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ea5090cde8ea066a1fda67ed52dd5084?s=128&d=identicon&r=PG&f=1", "display_name": "HTNW", "link": "https://stackoverflow.com/users/5684257/htnw"}, "edited": false, "score": 0, "creation_date": 1560065408, "post_id": 56512208, "comment_id": 99611882, "body": "Why is there code in an <code>.h</code> file? What commands are you using to compile the code?"}], "answers": [{"comments": [{"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 0, "creation_date": 1560112088, "post_id": 56515849, "comment_id": 99621487, "body": "I&#39;d also suggest to write a proper header c file <code>lib.h</code> with the prototype. It is unusual to <code>foreign import</code> a <code>.c</code> file."}, {"owner": {"reputation": 34158, "user_id": 7203016, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/ybAMw.png?s=128&g=1", "display_name": "K. A. Buhr", "link": "https://stackoverflow.com/users/7203016/k-a-buhr"}, "reply_to_user": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 1, "creation_date": 1560192066, "post_id": 56515849, "comment_id": 99646944, "body": "Fair enough.  I&#39;ve added &quot;lib.h&quot; to the example."}], "tags": [], "owner": {"reputation": 34158, "user_id": 7203016, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/ybAMw.png?s=128&g=1", "display_name": "K. A. Buhr", "link": "https://stackoverflow.com/users/7203016/k-a-buhr"}, "is_accepted": true, "score": 4, "last_activity_date": 1560192053, "last_edit_date": 1560192053, "creation_date": 1560093892, "answer_id": 56515849, "question_id": 56512208, "link": "https://stackoverflow.com/questions/56512208/how-to-use-c-library-from-haskell/56515849#56515849", "title": "How to use C library from Haskell?", "body": "<p>Okay, there are several things to do here:</p>\n\n<ul>\n<li>Rename \"lib.h\" to \"lib.c\".  It's a C source file (containing code), not a C header file.</li>\n<li>Ideally, add a separate \"lib.h\" header file with the prototype for <code>getSize</code>.</li>\n<li>Fix the bug in \"lib.c\".  You want \"%lf\" in place of \"$f\" to read in a double.</li>\n<li>Compile the program with <code>ghc</code> instead of running it with <code>runghc</code>.  A single <code>ghc</code> command can compile and link both Haskell modules and C code.</li>\n</ul>\n\n<p>In other words, your files should look like:</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>// lib.c\n#include \"lib.h\"\n#include &lt;stdio.h&gt;\ndouble getSize() {\n    double size = 0;\n    scanf(\"%lf\", &amp;size);\n    return size;\n}\n</code></pre>\n\n<pre class=\"lang-c prettyprint-override\"><code>// lib.h\ndouble getSize(void);\n</code></pre>\n\n<pre class=\"lang-hs prettyprint-override\"><code>-- Ffi.hs\n{-# LANGUAGE ForeignFunctionInterface #-}\nmodule Ffi where\nimport Foreign\nimport Foreign.C.Types\nforeign import ccall \"lib.h getSize\" c_size :: IO Double\n</code></pre>\n\n<pre class=\"lang-hs prettyprint-override\"><code>-- Main.hs\nmodule Main where\nimport Ffi\nmain :: IO ()\nmain = do a &lt;- getLine\n          b &lt;- c_size\n          print $ \"got from C: \" ++ show b\n</code></pre>\n\n<p>and you should compile it with:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ ghc Main.hs lib.c\n[1 of 2] Compiling Ffi              ( Ffi.hs, Ffi.o )\n[2 of 2] Compiling Main             ( Main.hs, Main.o )\nLinking Main ...\n</code></pre>\n\n<p>Then you can run it, supply a line for the Haskell <code>getLine</code> and a second line for the C <code>scanf</code>, and it should work fine:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ ./Main\nhello world!!   -- line for Haskell\n135.0           -- line for C\n\"got from C: 135.0\"\n</code></pre>\n"}], "owner": {"reputation": 6267, "user_id": 1913744, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/5bAQS.jpg?s=128&g=1", "display_name": "Bercovici Adrian", "link": "https://stackoverflow.com/users/1913744/bercovici-adrian"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 388, "favorite_count": 1, "accepted_answer_id": 56515849, "answer_count": 1, "score": 1, "last_activity_date": 1560192053, "creation_date": 1560057990, "last_edit_date": 1560087942, "question_id": 56512208, "link": "https://stackoverflow.com/questions/56512208/how-to-use-c-library-from-haskell", "title": "How to use C library from Haskell?", "body": "\n\n<p>I am trying to call a C function from Haskell using the FFI and I keep getting this error :</p>\n\n<blockquote>\n  <p>ghc.exe: ^^ Could not load 'getSize', dependency unresolved. See top\n  entry above.</p>\n  \n  <p>main: ByteCodeLink: can't find label During interactive linking, GHCi\n  couldn't find the following symbol:   getSize This may be due to you\n  not asking GHCi to load extra object files, archives or DLLs needed by\n  your current session.  Restart GHCi, specifying the missing library\n  using the -L/path/to/object/dir and -lmissinglibname flags, or simply\n  by naming the relevant files on the GHCi command line. Alternatively,\n  this link failure might indicate a bug in GHCi. If you suspect the\n  latter, please send a bug report to:<br>\n  glasgow-haskell-bugs@haskell.org</p>\n</blockquote>\n\n<p>I am using the <code>stdio.h</code> library in my C library:</p>\n\n<p><strong>C library</strong></p>\n\n<pre class=\"lang-c prettyprint-override\"><code>// lib.h\n#include &lt;stdio.h&gt;\n\ndouble getSize() {\n    double size = 0;\n    scanf(\"$f\", &amp;size);\n    return size;\n}\n</code></pre>\n\n<p><strong>FFI module</strong></p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>{-# LANGUAGE ForeignFunctionInterface #-}\nmodule Ffi where\n\nimport Foreign\nimport Foreign.C.Types\n\nforeign import ccall \"lib.h getSize\" c_size :: IO Double\n</code></pre>\n\n<p><strong>Main</strong></p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>module Main where\nimport Ffi\n\nmain :: IO ()\nmain = do a &lt;- getLine\n          b &lt;- c_size\n          print $ \"got from C: \" ++ show b\n</code></pre>\n\n<p><strong>Running script</strong></p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>gcc -o lib -lib.h\nrunghc main\n</code></pre>\n\n<p><strong>P.S.</strong> Could this be because I somehow have to specify the dependency <code>stdio.h</code> somewhere else too?</p>\n"}, {"tags": ["haskell", "functional-programming"], "comments": [{"owner": {"reputation": 57219, "user_id": 33796, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/08727b23ba62e634b32988cdff082663?s=128&d=identicon&r=PG", "display_name": "luqui", "link": "https://stackoverflow.com/users/33796/luqui"}, "edited": false, "score": 3, "creation_date": 1560046160, "post_id": 56511447, "comment_id": 99609626, "body": "Yep.  Yes. Uh huh. For sure."}], "answers": [{"tags": [], "owner": {"reputation": 7817, "user_id": 7345298, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/9477d048c5c29b16307b3356146d497a?s=128&d=identicon&r=PG&f=1", "display_name": "bradrn", "link": "https://stackoverflow.com/users/7345298/bradrn"}, "is_accepted": true, "score": 2, "last_activity_date": 1560046616, "creation_date": 1560046616, "answer_id": 56511481, "question_id": 56511447, "link": "https://stackoverflow.com/questions/56511447/haskell-finding-the-type-of-an-expression-involving-map/56511481#56511481", "title": "Haskell: Finding the type of an expression involving map", "body": "<p>Yes, that is the type of the function which is returned.</p>\n\n<p>But how does GHC figure this out? Well, let's look at the type of just plain <code>map</code>:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>map :: (a -&gt; b) -&gt; [a] -&gt; [b]\n</code></pre>\n\n<p>And now let's look at the type of <code>\\x -&gt; x + 1</code>:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>(\\x -&gt; x + 1) :: Num n =&gt; n -&gt; n\n</code></pre>\n\n<p>(In case you don't know yet, this means that it converts <code>n</code> to <code>n</code>, where <code>n</code> can be any type which is an instance of <code>Num</code> i.e. <code>n</code> is any number type.)</p>\n\n<p>So matching up the types, we get:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>map           ::         (a -&gt; b) -&gt; [a] -&gt; [b]\n(\\x -&gt; x + 1) :: Num n =&gt; n -&gt; n\n</code></pre>\n\n<p>So:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>map (\\x -&gt; x + 1) :: Num n =&gt; [n] -&gt; [n]\n</code></pre>\n\n<p>Which is the same as what GHCi reports.</p>\n"}], "owner": {"reputation": 1905, "user_id": 8713450, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ed61e21ec072346277da9569f1c9f966?s=128&d=identicon&r=PG&f=1", "display_name": "ceno980", "link": "https://stackoverflow.com/users/8713450/ceno980"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 54, "favorite_count": 0, "accepted_answer_id": 56511481, "answer_count": 1, "score": 0, "last_activity_date": 1560046616, "creation_date": 1560045882, "question_id": 56511447, "link": "https://stackoverflow.com/questions/56511447/haskell-finding-the-type-of-an-expression-involving-map", "title": "Haskell: Finding the type of an expression involving map", "body": "<p>I am trying to find the type of the following Haskell expression:</p>\n\n<pre><code>map (\\x -&gt; x + 1)\n</code></pre>\n\n<p>Since the map function is partially applied, it will return another function. </p>\n\n<p>In GHCI, the type of the function that is returned is:</p>\n\n<pre><code>let res = map (\\x -&gt; x + 1)\n:t res\nmap (\\x -&gt; x + 1) :: Num b =&gt; [b] -&gt; [b]\n</code></pre>\n\n<p>Would the type of the above expression be the type of the function that is returned? Any insights are appreciated.</p>\n"}, {"tags": ["haskell", "functional-programming"], "comments": [{"owner": {"reputation": 67060, "user_id": 783743, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/835bdcdab3e4bf466f0d59f809c50035?s=128&d=identicon&r=PG", "display_name": "Aadit M Shah", "link": "https://stackoverflow.com/users/783743/aadit-m-shah"}, "edited": false, "score": 0, "creation_date": 1560045516, "post_id": 56511365, "comment_id": 99609580, "body": "The <code>foldl</code> function is equivalent to a for loop. For example, <code>foldl (\\acc x -&gt; acc + x) 0 xs</code> is equivalent to <code>acc = 0; for (x of xs) { acc = acc + x; } return acc;</code>."}], "answers": [{"comments": [{"owner": {"reputation": 44043, "user_id": 1565698, "user_type": "registered", "accept_rate": 38, "profile_image": "https://www.gravatar.com/avatar/7dace33805b9dcdec5aa63308daf88dc?s=128&d=identicon&r=PG", "display_name": "Sylwester", "link": "https://stackoverflow.com/users/1565698/sylwester"}, "edited": false, "score": 1, "creation_date": 1560047035, "post_id": 56511492, "comment_id": 99609716, "body": "Closest thing to <code>foldl</code> in JavaScript is <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\" rel=\"nofollow noreferrer\"><code>Array.prototype.reduce</code></a>"}], "tags": [], "owner": {"reputation": 67060, "user_id": 783743, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/835bdcdab3e4bf466f0d59f809c50035?s=128&d=identicon&r=PG", "display_name": "Aadit M Shah", "link": "https://stackoverflow.com/users/783743/aadit-m-shah"}, "is_accepted": false, "score": 1, "last_activity_date": 1560046786, "creation_date": 1560046786, "answer_id": 56511492, "question_id": 56511365, "link": "https://stackoverflow.com/questions/56511365/haskell-understanding-the-foldl-function/56511492#56511492", "title": "Haskell: Understanding the foldl function", "body": "<p>It would be helpful to look at how the <code>foldl</code> function is defined:</p>\n\n<p></p>\n\n<pre><code>foldl :: (b -&gt; a -&gt; b) -&gt; b -&gt; [a] -&gt; b\nfoldl f a []     = a\nfoldl f a (x:xs) = foldl f (f a x) xs\n</code></pre>\n\n<p>So, if the input list is empty then we just return the accumulator value <code>a</code>. However, if it's not empty then we loop. Within the loop, we update the accumulator value to <code>f a x</code> (i.e. we apply the lambda function <code>f</code> to the current accumulator value and the current element of the list). The result is the new accumulator value.</p>\n\n<p>We also update the value of the list in the loop by removing its first element (because we just processed the first element). We keep processing the remaining elements of the list until there are no elements left, at which point we return the value of the accumulator.</p>\n\n<p>The <code>foldl</code> function is equivalent to a for loop in imperative languages. For example, here's how we could implement <code>foldl</code> in JavaScript:</p>\n\n\n\n<pre class=\"lang-js prettyprint-override\"><code>const result = foldl((acc, x) =&gt; acc + x, 0, [3,5,2,1]);\n\nconsole.log(result);\n\nfunction foldl(f, a, xs) {\n    for (const x of xs) a = f(a, x);\n    return a;\n}\n</code></pre>\n\n\n\n<p>Hope that elucidates the <code>foldl</code> function.</p>\n"}, {"tags": [], "owner": {"reputation": 7817, "user_id": 7345298, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/9477d048c5c29b16307b3356146d497a?s=128&d=identicon&r=PG&f=1", "display_name": "bradrn", "link": "https://stackoverflow.com/users/7345298/bradrn"}, "is_accepted": true, "score": 2, "last_activity_date": 1560047107, "creation_date": 1560047107, "answer_id": 56511514, "question_id": 56511365, "link": "https://stackoverflow.com/questions/56511365/haskell-understanding-the-foldl-function/56511514#56511514", "title": "Haskell: Understanding the foldl function", "body": "<p>Recall the definition of <code>foldl</code>:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>foldl f acc []     = acc\nfoldl f acc (x:xs) = foldl f (f acc x) xs\n</code></pre>\n\n<p>Now, the best way to understand folds is to walk through the evaluation. So let's start with:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>sum [3,5,2,1]\n== foldl (\\acc x -&gt; acc + x) 0 [3,5,2,1]\n</code></pre>\n\n<p>The second line of the definition of the <code>foldl</code> function means this is equivalent to the following:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>== foldl (\\acc x -&gt; acc + x) ((\\acc x -&gt; acc + x) 0 3) [5,2,1]\n</code></pre>\n\n<p>Now since the lambda expression is applied to parameters, <code>0</code> and <code>3</code> are passed in as <code>acc</code> and <code>x</code>:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>== foldl (\\acc x -&gt; acc + x) (0+3) [5,2,1]\n</code></pre>\n\n<p>And the process repeats:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>== foldl (\\acc x -&gt; acc + x) ((\\acc x -&gt; acc + x) (0+3) 5) [2,1]\n== foldl (\\acc x -&gt; acc + x) ((0+3)+5) [2,1]\n== foldl (\\acc x -&gt; acc + x) ((\\acc x -&gt; acc + x) ((0+3)+5) 2) [1]\n== foldl (\\acc x -&gt; acc + x) (((0+3)+5)+2) [1]\n== foldl (\\acc x -&gt; acc + x) ((\\acc x -&gt; acc + x) (((0+3)+5)+2) 1) []\n== foldl (\\acc x -&gt; acc + x) ((((0+3)+5)+2)+1) []\n</code></pre>\n\n<p>At this point, evaluation continues according to the first line of the <code>foldl</code> definition:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>== ((((0+3)+5)+2)+1)\n</code></pre>\n\n<p>So to answer your question directly: the function knows the values of <code>acc</code> and <code>x</code> simply because the definition of <code>foldl</code> passes their values to the function as parameters.</p>\n"}], "owner": {"reputation": 1905, "user_id": 8713450, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ed61e21ec072346277da9569f1c9f966?s=128&d=identicon&r=PG&f=1", "display_name": "ceno980", "link": "https://stackoverflow.com/users/8713450/ceno980"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 81, "favorite_count": 0, "accepted_answer_id": 56511514, "answer_count": 2, "score": 2, "last_activity_date": 1560047107, "creation_date": 1560044560, "question_id": 56511365, "link": "https://stackoverflow.com/questions/56511365/haskell-understanding-the-foldl-function", "title": "Haskell: Understanding the foldl function", "body": "<p>I am learning about folds from 'Learn You a Haskell for Great Good!' by Miran Lipovaca.</p>\n\n<p>For the following example which uses <code>foldl</code>:</p>\n\n<pre><code>sum' :: (Num a) =&gt; [a] -&gt; a\nsum' xs = foldl (\\acc x -&gt; acc + x) 0 xs \n\nghci&gt; sum' [3,5,2,1]\n11\n</code></pre>\n\n<p>I understand that <code>acc</code> is the accumulator and <code>x</code> is the starting value (the first value from the list <code>xs</code>). I don't quite understand how 0 and xs are passed into the lambda function as parameters - how does the function know that the value of <code>acc</code> is 0 and the value of <code>x</code> is 3? Any insights are appreciated.</p>\n"}, {"tags": ["haskell"], "comments": [{"owner": {"reputation": 33166, "user_id": 7509065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/RZLo7.png?s=128&g=1", "display_name": "Joseph Sible-Reinstate Monica", "link": "https://stackoverflow.com/users/7509065/joseph-sible-reinstate-monica"}, "edited": false, "score": 1, "creation_date": 1560046701, "post_id": 56511190, "comment_id": 99609682, "body": "Note that you don&#39;t actually need <code>Eq (f t)</code>. Just <code>deriving instance Eq (f (f t)) =&gt; Eq (B f t)</code> will work. (It still needs <code>UndecidableInstances</code> though.)"}, {"owner": {"reputation": 4681, "user_id": 1264328, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/786f8275d9fa334bc27630e0fc7f0d22?s=128&d=identicon&r=PG", "display_name": "bwroga", "link": "https://stackoverflow.com/users/1264328/bwroga"}, "reply_to_user": {"reputation": 33166, "user_id": 7509065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/RZLo7.png?s=128&g=1", "display_name": "Joseph Sible-Reinstate Monica", "link": "https://stackoverflow.com/users/7509065/joseph-sible-reinstate-monica"}, "edited": false, "score": 0, "creation_date": 1560094878, "post_id": 56511190, "comment_id": 99617552, "body": "@JosephSible I was unable to get it to compile without both <code>Eq (f (f t))</code> and <code>Eq (f t)</code>"}, {"owner": {"reputation": 34158, "user_id": 7203016, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/ybAMw.png?s=128&g=1", "display_name": "K. A. Buhr", "link": "https://stackoverflow.com/users/7203016/k-a-buhr"}, "edited": false, "score": 1, "creation_date": 1560095483, "post_id": 56511190, "comment_id": 99617686, "body": "Are you sure?  See my answer -- it worked for me."}, {"owner": {"reputation": 4681, "user_id": 1264328, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/786f8275d9fa334bc27630e0fc7f0d22?s=128&d=identicon&r=PG", "display_name": "bwroga", "link": "https://stackoverflow.com/users/1264328/bwroga"}, "reply_to_user": {"reputation": 33166, "user_id": 7509065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/RZLo7.png?s=128&g=1", "display_name": "Joseph Sible-Reinstate Monica", "link": "https://stackoverflow.com/users/7509065/joseph-sible-reinstate-monica"}, "edited": false, "score": 0, "creation_date": 1560107594, "post_id": 56511190, "comment_id": 99620657, "body": "@JosephSible, @K. A. Buhr, Oops, my mistake. This was a simplified example and in the original version it was <code>data B f t = B (f (f t)) (f t)</code>. That one required the extra <code>(f t)</code> in the context."}], "answers": [{"tags": [], "owner": {"reputation": 34158, "user_id": 7203016, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/ybAMw.png?s=128&g=1", "display_name": "K. A. Buhr", "link": "https://stackoverflow.com/users/7203016/k-a-buhr"}, "is_accepted": true, "score": 3, "last_activity_date": 1560095468, "creation_date": 1560095468, "answer_id": 56516065, "question_id": 56511190, "link": "https://stackoverflow.com/questions/56511190/instances-for-type-with-nested-parameter/56516065#56516065", "title": "Instances for type with nested parameter", "body": "<p>This exact example appears in the GHC manual in the section <a href=\"https://downloads.haskell.org/~ghc/8.6.4/docs/html/users_guide/glasgow_exts.html#inferred-context-for-deriving-clauses\" rel=\"nofollow noreferrer\">Inferred context for deriving clauses</a>.  As documented there, GHC takes a conservative position when inferring contexts for deriving instances by requiring that each constraint in the inferred context must consist only of type variables with no repetitions.  Since <code>(f (f t))</code> has the repeated type variable <code>f</code>, it is rejected.  Note that the following would be accepted:</p>\n\n<pre><code>data C f g t = C (f (g t)) deriving (Eq)\n</code></pre>\n\n<p>The solution given in the manual is to use a standalone deriving clause, as you've done.  As pointed out in a comment, the following is sufficient:</p>\n\n<pre><code>deriving instance Eq (f (f t)) =&gt; Eq (B f t)\n</code></pre>\n\n<p>However, because the type variable <code>f</code> appears more often in the constraint than in the \"instance head\" <code>Eq  (B f t)</code>, it violates the rules documented in <a href=\"https://downloads.haskell.org/~ghc/8.6.4/docs/html/users_guide/glasgow_exts.html#instance-termination-rules\" rel=\"nofollow noreferrer\">Instance termination rules</a> (specifically, the first Paterson Condition) which guarantee the type checker won't loop.  Because these rules are sufficient but not necessary, there are many instance declarations that work fine even though they violate the rules.  Turning on <code>UndecidableInstances</code> allows them.</p>\n\n<p>There's no particular reason not to turn on <code>UndecidableInstances</code>.  In a worst case, you'll create an instance that causes the type checker to loop, and compilation will fail with an error advising you to increase the stack depth with <code>-freduction-depth={n}</code> (which won't help if you have a genuine loop).  Note that this is only a compile-time issue.  If code compiles with <code>UndecidableInstances</code>, you don't have to worry about some future runtime danger.</p>\n\n<p>Note that I didn't need to turn on <code>FlexibleContexts</code>.  The following works fine:</p>\n\n<pre><code>{-# LANGUAGE StandaloneDeriving #-}\n{-# LANGUAGE UndecidableInstances #-}\n\ndata B f t = B (f (f t))\nderiving instance Eq (f (f t)) =&gt; Eq (B f t)\nderiving instance Read (f (f t)) =&gt; Read (B f t)\nderiving instance Show (f (f t)) =&gt; Show (B f t)\n</code></pre>\n\n<p>For manually derived instances, the following seems to work and doesn't require <code>NFData1</code> or similar:</p>\n\n<pre><code>instance NFData (f (f t)) =&gt; NFData (B f t) where\n  rnf (B fft) = rnf fft\n</code></pre>\n"}], "owner": {"reputation": 4681, "user_id": 1264328, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/786f8275d9fa334bc27630e0fc7f0d22?s=128&d=identicon&r=PG", "display_name": "bwroga", "link": "https://stackoverflow.com/users/1264328/bwroga"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 71, "favorite_count": 0, "accepted_answer_id": 56516065, "answer_count": 1, "score": 1, "last_activity_date": 1560095468, "creation_date": 1560041587, "last_edit_date": 1560093951, "question_id": 56511190, "link": "https://stackoverflow.com/questions/56511190/instances-for-type-with-nested-parameter", "title": "Instances for type with nested parameter", "body": "<p>I can derive Eq in this example:</p>\n\n<pre><code>data A f t = A (f t) deriving (Eq)\n</code></pre>\n\n<p>But in this example:</p>\n\n<pre><code>data B f t = B (f (f t)) deriving (Eq)\n</code></pre>\n\n<p>I get this error:</p>\n\n<pre><code>&gt; No instance for (Eq (f (f t)))\n&gt;   arising from the first field of \u2018B\u2019 (type \u2018f (f t)\u2019)\n&gt; Possible fix:\n&gt;   use a standalone 'deriving instance' declaration,\n&gt;     so you can specify the instance context yourself\n</code></pre>\n\n<p>This works:</p>\n\n<pre><code>{-# LANGUAGE FlexibleContexts #-}\n{-# LANGUAGE UndecidableInstances #-}\n{-# LANGUAGE StandaloneDeriving #-}\n...\ndata B f t = B (f (f t))\nderiving instance (Eq (f (f t)), Eq (f t)) =&gt; Eq (B f t)\n</code></pre>\n\n<p>but I've read that using <code>UndecidableInstances</code> can be a bad idea, and I'm not sure when it's ok and when it's not.</p>\n\n<p>I tried this, and it works:</p>\n\n<pre><code>data B f t = B (f (f t))\n\ninstance (Eq1 f, Eq t) =&gt; (Eq (B f t)) where\n  (B x) == (B y) = eq1 x y\n</code></pre>\n\n<p>but I also want to make <code>B</code> an instance of <code>NFData</code>, <code>Read</code> and <code>Show</code> and I don't want to write the <code>Read</code>, <code>Show</code> and <code>NFData</code> instances as well as <code>Eq1</code>, <code>Show1</code>, and <code>NFData1</code> instances and a class for <code>NFData1</code>.</p>\n\n<p>I have 3 questions:</p>\n\n<ol>\n<li>Why does the first example compile but the second doesn't?</li>\n<li>Is this a bad time to use UndecidableInstances?</li>\n<li>Is there any way to do what I want without writing all those instances?</li>\n</ol>\n"}, {"tags": ["haskell"], "comments": [{"owner": {"reputation": 14030, "user_id": 8475054, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/edbf41c4b5aecb1a949936e06368a7c2?s=128&d=identicon&r=PG&f=1", "display_name": "Robin Zigmond", "link": "https://stackoverflow.com/users/8475054/robin-zigmond"}, "edited": false, "score": 0, "creation_date": 1560033061, "post_id": 56510549, "comment_id": 99608168, "body": "I&#39;m not familiar with that warning and can&#39;t immediately see what&#39;s causing it, but from a point of view of succinct code, the most idiomatic way to write the function (imo) is simply <code>intSqrt = truncate . sqrt . fromIntegral</code>"}], "answers": [{"tags": [], "owner": {"reputation": 7817, "user_id": 7345298, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/9477d048c5c29b16307b3356146d497a?s=128&d=identicon&r=PG&f=1", "display_name": "bradrn", "link": "https://stackoverflow.com/users/7345298/bradrn"}, "is_accepted": true, "score": 10, "last_activity_date": 1560034286, "creation_date": 1560034286, "answer_id": 56510688, "question_id": 56510549, "link": "https://stackoverflow.com/questions/56510549/succinct-code-format-when-coercing-data-types-in-haskell/56510688#56510688", "title": "Succinct code format when coercing data types in Haskell", "body": "<p>What's happening here is that you're using <code>fromIntegral</code> to convert an <code>Int</code> to some type <code>a</code>, you're using <code>sqrt</code> to convert <code>a</code> to <code>a</code>, and you're using <code>truncate</code> to convert <code>a</code> back to <code>Int</code>. From the constraints on those functions, GHC knows that <code>a</code> must be <code>Floating</code> and <code>RealFrac</code>, but it <strong>doesn't know what <code>a</code> is</strong>. To solve this, GHC maintains a set of <em>defaulting rules</em>; in this case, they state that any ambiguous type which is <code>Floating</code> or <code>RealFrac</code> is defaulted to <code>Double</code>. Defaulting may not be the intended behaviour in all cases though, so GHC also prints a warning.</p>\n\n<p>When you add the type signature, the ambiguity is removed, which is why the message disappears. Adding a type signature is a bit clunky though; is there a better way? Actually, there is! First, you need to enable the <code>TypeApplications</code> extension by putting the following pragma at the top of your file:</p>\n\n<pre><code>{-# LANGUAGE TypeApplications #-}\n</code></pre>\n\n<p>This extension enables you to use the syntax <code>@SomeType</code> as the first parameter of any function; if the function has any type variables in its signature, this <em>specialises</em> the first to <code>SomeType</code>. (Subsequent uses specialise the second, third, fourth etc. type variable.) In this case, we have a choice of places to put the type application. We could put it on <code>fromIntegral</code>:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>intSqrt x = truncate $ sqrt $ fromIntegral @_ @Double x\n</code></pre>\n\n<p>(Note that <code>fromIntegral</code> has two type variables, so we leave the first one to be inferred as <code>Int</code> and only specialise the second one.)</p>\n\n<p>Or we can put it on <code>sqrt</code>:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>intSqrt x = truncate $ sqrt @Double $ fromIntegral x\n</code></pre>\n\n<p>Or on <code>truncate</code>:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>intSqrt x = truncate @Double $ sqrt $ fromIntegral x\n</code></pre>\n\n<p>Any of these variants will solve the problem concisely.</p>\n"}], "owner": {"reputation": 1914, "user_id": 1511037, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/3P5Qq.png?s=128&g=1", "display_name": "Penguino", "link": "https://stackoverflow.com/users/1511037/penguino"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 63, "favorite_count": 0, "accepted_answer_id": 56510688, "answer_count": 1, "score": 4, "last_activity_date": 1560034286, "creation_date": 1560032744, "question_id": 56510549, "link": "https://stackoverflow.com/questions/56510549/succinct-code-format-when-coercing-data-types-in-haskell", "title": "Succinct code format when coercing data types in Haskell", "body": "<p>As a raw beginner in Haskell I am attempting to get all my exercise code to compile without warning while using the -Wall option in the ghc compiler. I am also trying to understand the use of '$' and '.' to avoid excessive parentheses.</p>\n\n<p>In the following code</p>\n\n<pre><code>module Helpers (intSqrt1, intSqrt2)  where \n\nintSqrt1 :: Int -&gt; Int\nintSqrt1 x = truncate $ sqrt $ fromIntegral x\n\nintSqrt2 :: Int -&gt; Int\nintSqrt2 x = truncate ( sqrt (fromIntegral x) :: Double)\n</code></pre>\n\n<p>intSqrt1 gives the warning <em>Defaulting the following constraints to type `Double'</em>. I can suppress the warning by coercing the result from sqrt to Double (see intSqrt2), but only at the cost of adding two pairs of parentheses.</p>\n\n<p>Is there a way to get the best of both worlds in this function: i.e. both succinct code and suppression of warnings? </p>\n"}, {"tags": ["haskell", "gloss", "juicy-pixels"], "comments": [{"owner": {"reputation": 31243, "user_id": 2751851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/4ddc0.png?s=128&g=1", "display_name": "duplode", "link": "https://stackoverflow.com/users/2751851/duplode"}, "edited": false, "score": 1, "creation_date": 1560033810, "post_id": 56508882, "comment_id": 99608278, "body": "I suggest you to post the solution you discovered as an answer."}], "answers": [{"tags": [], "owner": {"reputation": 51, "user_id": 8290386, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3c0ce10d02ea6bb64f8604c701f7603f?s=128&d=identicon&r=PG&f=1", "display_name": "Merzhase", "link": "https://stackoverflow.com/users/8290386/merzhase"}, "is_accepted": false, "score": 2, "last_activity_date": 1560326001, "last_edit_date": 1560326001, "creation_date": 1560073348, "answer_id": 56513550, "question_id": 56508882, "link": "https://stackoverflow.com/questions/56508882/why-doesnt-gloss-render-in-native-resolution/56513550#56513550", "title": "Why doesn&#39;t Gloss render in native resolution?", "body": "<p>Gloss can be used with native resolution under OSX with hdpi-display when the default window management backend GLUT is exchanged for GLFW. To do this rebuild Gloss with the appropriate flags:</p>\n\n<p><code>cabal install -f -GLUT -f GLFW</code></p>\n\n<p>(Note: With GLFW I could not use some modules in Gloss anymore, e.g. Gloss.Data.Picture or maybe more importantly Graphics.Gloss.Juicy. Using only Graphics.Gloss.Rendering works though. Related to the resolution: make sure to draw your pictures in the size of the framebuffer, not the window size as those may differ.)</p>\n"}], "owner": {"reputation": 51, "user_id": 8290386, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3c0ce10d02ea6bb64f8604c701f7603f?s=128&d=identicon&r=PG&f=1", "display_name": "Merzhase", "link": "https://stackoverflow.com/users/8290386/merzhase"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 181, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1560326001, "creation_date": 1560016629, "last_edit_date": 1560031743, "question_id": 56508882, "link": "https://stackoverflow.com/questions/56508882/why-doesnt-gloss-render-in-native-resolution", "title": "Why doesn&#39;t Gloss render in native resolution?", "body": "<p>On OSX (with 2560 x 1600 native resolution), Gloss displays everything at zoom-factor 2x. \nGiving a window size of 300 x 300 to the display function creates a window of 600 x 600. All content in that window is also twice as big (in each dimension), regardless of whether drawn with Gloss or loaded as a sprite (I'm using Juicy for that). Scaling the content down does not give the same clean result as when displayed in the actual native resolution.\nIs there a way to make Gloss render in full native resolution?</p>\n\n<p>I'm still new to Gloss and hope I haven't missed anything obvious.</p>\n\n<p>Here is the code...</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>module Main where\n\nimport Graphics.Gloss\nimport Graphics.Gloss.Juicy\nimport Codec.Picture\n\nmain :: IO ()\nmain = loadJuicy \"someimg.png\" &gt;&gt;= maybe ( print \"Nope\" ) displayImg\n\ndisplayImg :: Picture -&gt; IO () \ndisplayImg p = display ( InWindow \"Image\" ( 300, 300 ) ( 100, 100 ) ) white ( pictures [ p, translate 32 32 $ circleSolid 4 ] )\n</code></pre>\n\n<p>... and the corresponding render:</p>\n\n<p><a href=\"https://i.stack.imgur.com/q8Nns.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/q8Nns.png\" alt=\"Screenshot of the render\"></a></p>\n\n<p><strong>Update:</strong>\nThis seems to be a general issue with OpenGL and retina displays (actually the way OSX pixels are calculated internally). Since, as I understand, Gloss doesn't really allow low-level access my guess is that this is not fixable.</p>\n\n<p><strong>Update 2:</strong>\nThis seems to be a particular issue with GLUT as the underlying backend for Gloss. Rebuilding Gloss enabling GLFW and disabling GLUT should fix the issue.</p>\n"}, {"tags": ["list", "haskell", "types", "implementation"], "comments": [{"owner": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "edited": false, "score": 1, "creation_date": 1560014932, "post_id": 56508641, "comment_id": 99604452, "body": "The type is indeed <code>List (List a)</code>, but tha tis for the <i>type</i>, not the value."}, {"owner": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "edited": false, "score": 1, "creation_date": 1560015098, "post_id": 56508641, "comment_id": 99604487, "body": "If you want to make a list of lists that contains one <code>1</code> for example, the <i>value</i> is <code>Cons (Cons 1 Empty) Empty</code>."}, {"owner": {"reputation": 57219, "user_id": 33796, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/08727b23ba62e634b32988cdff082663?s=128&d=identicon&r=PG", "display_name": "luqui", "link": "https://stackoverflow.com/users/33796/luqui"}, "edited": false, "score": 1, "creation_date": 1560032566, "post_id": 56508641, "comment_id": 99608071, "body": "Also FYI <code>data type LIst a = ...</code> is invalid syntax.  This looks like a <code>data</code> declaration, there is also a <code>type</code> declaration for other purposes.  But not both."}], "answers": [{"comments": [{"owner": {"reputation": 11, "user_id": 11619059, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5216e46eaca79a7d3d8d72f4e1430161?s=128&d=identicon&r=PG&f=1", "display_name": "Tempro43", "link": "https://stackoverflow.com/users/11619059/tempro43"}, "edited": false, "score": 0, "creation_date": 1560017323, "post_id": 56508722, "comment_id": 99604961, "body": "Thank you! Been stuck on concatL for this data type for too long... any helpful hints? lol"}, {"owner": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "reply_to_user": {"reputation": 11, "user_id": 11619059, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5216e46eaca79a7d3d8d72f4e1430161?s=128&d=identicon&r=PG&f=1", "display_name": "Tempro43", "link": "https://stackoverflow.com/users/11619059/tempro43"}, "edited": false, "score": 0, "creation_date": 1560017391, "post_id": 56508722, "comment_id": 99604985, "body": "@Tempro43: it typically helps to split up into cases that are either base-cases or recursive ones. What would be the <code>concatL Empty Empty = ...</code>? or <code>concatL Empty (Cons x xs) = ...</code>?, etc."}, {"owner": {"reputation": 11, "user_id": 11619059, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5216e46eaca79a7d3d8d72f4e1430161?s=128&d=identicon&r=PG&f=1", "display_name": "Tempro43", "link": "https://stackoverflow.com/users/11619059/tempro43"}, "edited": false, "score": 0, "creation_date": 1560017480, "post_id": 56508722, "comment_id": 99605004, "body": "Okay, thanks to your response, I got  &quot;concatL (Cons x xs) Empty ) = (Cons x xs) But this seems off. maybe recurse down xs? but what if xs is not of type (List (List a)) and breaks the type signature?? ahhh"}, {"owner": {"reputation": 11, "user_id": 11619059, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5216e46eaca79a7d3d8d72f4e1430161?s=128&d=identicon&r=PG&f=1", "display_name": "Tempro43", "link": "https://stackoverflow.com/users/11619059/tempro43"}, "edited": false, "score": 0, "creation_date": 1560017874, "post_id": 56508722, "comment_id": 99605096, "body": "meant &quot;conatL (Cons (Cons x xs) Empty(or xss?)) = (Cons x xs) as to act as a function that takes away the list of lists to single list but then i have to append (or something) those lists together to be one list?"}, {"owner": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "reply_to_user": {"reputation": 11, "user_id": 11619059, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5216e46eaca79a7d3d8d72f4e1430161?s=128&d=identicon&r=PG&f=1", "display_name": "Tempro43", "link": "https://stackoverflow.com/users/11619059/tempro43"}, "edited": false, "score": 0, "creation_date": 1560018001, "post_id": 56508722, "comment_id": 99605124, "body": "@Tempro43: <code>concatL (Cons x xs) Empty = Cons x xs</code> is correct. No need to recurse on that one. For <code>concatL (Cons x xs) (Cons y ys)</code> of course the situationis more complex."}, {"owner": {"reputation": 11, "user_id": 11619059, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5216e46eaca79a7d3d8d72f4e1430161?s=128&d=identicon&r=PG&f=1", "display_name": "Tempro43", "link": "https://stackoverflow.com/users/11619059/tempro43"}, "edited": false, "score": 0, "creation_date": 1560018259, "post_id": 56508722, "comment_id": 99605198, "body": "Awesome, thanks! The input has helped my understanding."}], "tags": [], "owner": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "is_accepted": false, "score": 4, "last_activity_date": 1560015362, "creation_date": 1560015362, "answer_id": 56508722, "question_id": 56508641, "link": "https://stackoverflow.com/questions/56508641/how-to-represent-a-list-of-list-via-this-data-type-representation/56508722#56508722", "title": "How to represent a List of List via this data type representation", "body": "<p>The <em>type</em> of a list of lists of <code>a</code> is indeed <code>List (List a))</code>. But we do not construct a <em>value</em> with this.</p>\n\n<p>If we for example want to construct a list with a singleton list that contains <code>1</code>, we can write this as:</p>\n\n<pre><code>oneList1 :: List (List Int)\noneList1 = Cons (Cons 1 Empty) Empty</code></pre>\n\n<p>The outer <code>Cons</code> is the cons of the outer list, as first (and only) element it has a <code>Cons 1 Empty</code>, this is the inner list. A <code>Cons h t</code> represents a list with <code>h</code> (here <code>1</code>) the head (first element) and <code>Empty</code> the tail (remaining elements). So <code>Cons 1 Empty</code> is a singleton list with <code>1</code> as only value.</p>\n\n<p>We wrap that in the outer cons <code>Cons (Cons 1 Empty) Empty</code> that thus specifies that the outer list is a singleton list as well. The <code>oneList1</code> is thus equivalent to <code>[[1]]</code>.</p>\n"}], "owner": {"reputation": 11, "user_id": 11619059, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5216e46eaca79a7d3d8d72f4e1430161?s=128&d=identicon&r=PG&f=1", "display_name": "Tempro43", "link": "https://stackoverflow.com/users/11619059/tempro43"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 120, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1560015362, "creation_date": 1560014800, "last_edit_date": 1560014891, "question_id": 56508641, "link": "https://stackoverflow.com/questions/56508641/how-to-represent-a-list-of-list-via-this-data-type-representation", "title": "How to represent a List of List via this data type representation", "body": "<p>using:</p>\n\n<pre><code>data type List a = Empty | Cons a (List a)\n</code></pre>\n\n<p>How can one represent <code>[[a]]</code>? This has to have a simple solution that I'm just blind to so somebody's input would be greatly appreciated, thanks! </p>\n\n<p>I was trying to use <code>List (List a)</code> or <code>List (Cons x xs)</code> but that responds with 'List' not in scope which kinda makes sense to me.</p>\n"}, {"tags": ["haskell"], "answers": [{"tags": [], "owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "is_accepted": false, "score": 2, "last_activity_date": 1560016686, "creation_date": 1560016686, "answer_id": 56508890, "question_id": 56508482, "link": "https://stackoverflow.com/questions/56508482/generic-implementation-of-function-that-convert-between-kilo-mega-giga-in-haskel/56508890#56508890", "title": "Generic implementation of function that convert between Kilo Mega Giga in Haskell", "body": "<p>I am generally in favor of enforcing things like unit equivalency at the type level. But you haven't done any of that here (yet), so I think your current approach is much too complicated for the level of guarantee you're getting.</p>\n\n<p>You get a similar level of guarantee from the following significantly simpler code:</p>\n\n<pre><code>someFunc :: IO ()\nsomeFunc = do\n         putStrLn \"Gime the amount of data:\"\n         dat &lt;- readLn\n         putStrLn \"Gime 1 for KB 2 for MB 3 for GB:\"\n         datunit &lt;- readLn\n         putStrLn \"Gime speed of data:\"\n         speed &lt;- readLn\n         putStrLn \"Gime 1 for KB/s 2 for MB/s 3 for GB/s:\"\n         speedunit &lt;- readLn\n         let result = (dat * 1000^datunit) / (speed * 1000^speedunit)\n         putStrLn $ \"You need \" ++ show result ++ \" seconds\"\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 2659, "user_id": 581085, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/5ef2ca8729e462595f1500b554ef95e0?s=128&d=identicon&r=PG", "display_name": "Dragno", "link": "https://stackoverflow.com/users/581085/dragno"}, "edited": false, "score": 0, "creation_date": 1560363513, "post_id": 56534367, "comment_id": 99715605, "body": "your answer is great. But in the beginning you said that this is not the proper way to do that. This is also the conclusion of your answer. What would be a good solution to that problem without the restriction that it must be done with generics. Just a brief comment. Thanks again."}, {"owner": {"reputation": 34158, "user_id": 7203016, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/ybAMw.png?s=128&g=1", "display_name": "K. A. Buhr", "link": "https://stackoverflow.com/users/7203016/k-a-buhr"}, "reply_to_user": {"reputation": 2659, "user_id": 581085, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/5ef2ca8729e462595f1500b554ef95e0?s=128&d=identicon&r=PG", "display_name": "Dragno", "link": "https://stackoverflow.com/users/581085/dragno"}, "edited": false, "score": 0, "creation_date": 1560823694, "post_id": 56534367, "comment_id": 99852518, "body": "Well, a brief comment won&#39;t cut it, so I&#39;ll post it as a second (very long) answer."}], "tags": [], "owner": {"reputation": 34158, "user_id": 7203016, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/ybAMw.png?s=128&g=1", "display_name": "K. A. Buhr", "link": "https://stackoverflow.com/users/7203016/k-a-buhr"}, "is_accepted": false, "score": 1, "last_activity_date": 1560206570, "creation_date": 1560206570, "answer_id": 56534367, "question_id": 56508482, "link": "https://stackoverflow.com/questions/56508482/generic-implementation-of-function-that-convert-between-kilo-mega-giga-in-haskel/56534367#56534367", "title": "Generic implementation of function that convert between Kilo Mega Giga in Haskell", "body": "<p>Be warned, this isn't a very good way of approaching this problem.</p>\n\n<p>However, if you <em>really</em> want to use GHC.Generics to define a generic <code>convertToK</code>, here's how you do it.</p>\n\n<p>We'll need a lot of extensions and some modules:</p>\n\n<pre><code>{-# LANGUAGE DefaultSignatures #-}\n{-# LANGUAGE DeriveGeneric #-}\n{-# LANGUAGE FlexibleContexts #-}\n{-# LANGUAGE FlexibleInstances #-}\n{-# LANGUAGE TypeOperators #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n{-# OPTIONS_GHC -Wall #-}\n\nimport Control.Applicative\nimport Data.Maybe\nimport Generics.Deriving.ConNames\nimport GHC.Generics\n</code></pre>\n\n<p>We'll define a <code>Prefix</code> data type given by:</p>\n\n<pre><code>data Prefix = K | M | G deriving (Show, Read, Eq)\n</code></pre>\n\n<p>Our goal will be to define a generic conversion function for the <code>Scalable</code> type class that makes use of three generic functions: (1) <code>prefix</code> to get the unit <code>Prefix</code> of a term; (2) <code>value</code> to get the <code>Double</code> hidden inside, whatever the prefix; and (3) <code>makeK</code> to build a kilo value of the right type.  The generic conversion is easily defined in terms of these generic functions:</p>\n\n<pre><code>convertToK :: (Scalable a) =&gt; a -&gt; a\nconvertToK x = case prefix x of\n  K -&gt; x\n  M -&gt; makeK (1000 * v)\n  G -&gt; makeK (1000000 * v)\n  where v = value x\n</code></pre>\n\n<p>and here's the class with those functions and their signatures.</p>\n\n<pre><code>class Scalable a where\n  prefix :: a -&gt; Prefix   -- get the unit prefix\n  value  :: a -&gt; Double   -- get value regardless of prefix\n  makeK  :: Double -&gt; a   -- create a \"kilo\" value (i.e., the \"kilo\" constructor)\n</code></pre>\n\n<p>We can cheat a bit with <code>prefix</code>, since <code>generic-deriving</code> already provides a <code>conNameOf</code> function to get the name of a term's constructor.  We can just pull off the first character and <code>read</code> it into a <code>Prefix</code> value using the following default implementation in this class:</p>\n\n<pre><code>  -- within class Scalable\n  default prefix :: (Generic a, ConNames (Rep a)) =&gt; a -&gt; Prefix\n  prefix = read . take 1 . conNameOf\n</code></pre>\n\n<p>The <code>value</code> function will dispatch to the <code>value' :: f x -&gt; Double</code> function (defined in the  <code>Value'</code> type class below) in the usual way for <code>GHC.Generics</code> generic functions:</p>\n\n<pre><code>  -- within class Scalable\n  default value :: (Generic a, Value' (Rep a)) =&gt; a -&gt; Double\n  value = value' . from\n</code></pre>\n\n<p>The <code>makeK</code> function is a little more complicated.  Its generic version in the <code>MakeK'</code> type class has signature <code>Double -&gt; Maybe (f x)</code>, indicating that it <em>might</em> create a kilo value, if it's recursively found the correct constructor.  So, this default definition just adapts <code>makeK</code> to that signature.  It'll be clearer below.</p>\n\n<pre><code>  -- within class Scalable\n  default makeK :: (Generic a, MakeK' (Rep a)) =&gt; Double -&gt; a\n  makeK = to . fromJust . makeK'\n</code></pre>\n\n<p>The <code>Value'</code> class is a relatively straightforward generic function:</p>\n\n<pre><code>class Value' f where\n  value' :: f x -&gt; Double\n</code></pre>\n\n<p>We handle sum types by recursing along whatever branch this term represents:</p>\n\n<pre><code>instance (Value' f, Value' g) =&gt; Value' (f :+: g) where\n  value' (L1 x) = value' x\n  value' (R1 x) = value' x\n</code></pre>\n\n<p>Eventually, we'll recurse into the <code>Double</code> and return it:</p>\n\n<pre><code>instance Value' (K1 c Double) where\n  value' (K1 x) = x\n</code></pre>\n\n<p>Of course, we don't need any meta information, but we need an instance to skip it:</p>\n\n<pre><code>instance (Value' f) =&gt; Value' (M1 i t f) where\n  value' (M1 x) = value' x\n</code></pre>\n\n<p>Note that we've left out instances for V1, U1, and K1s other than <code>Double</code>.  We've also left out <code>(:*:)</code> product types.  We don't intend to use this class with types that include any of those forms.</p>\n\n<p>Now, we move to the definition for the <code>MakeK'</code> class.  This one is structured quite differently, because instead of having a concrete term that we're deconstructing, we're trying to <em>build</em> a concrete term from a <code>Double</code> by finding the constructor that starts with \"K\" and using it.</p>\n\n<pre><code>class MakeK' f where\n  makeK' :: Double -&gt; Maybe (f x)\n</code></pre>\n\n<p>The first key point is how sum types are handled.  We try to build a \"K\" term as a sum type by trying to build it as the left branch of the sum.  If that succeeds (by returning a \"Just\" value), we know we've found and used the \"K\" constructor; otherwise, we try the right branch instead.  (If that fails, too, there must be some higher level branch in the recursion that will succeed, so we just return \"Nothing\" to let it do its work.)</p>\n\n<pre><code>instance (MakeK' f, MakeK' g) =&gt; MakeK' (f :+: g) where\n  makeK' n = L1 &lt;$&gt; makeK' n &lt;|&gt; R1 &lt;$&gt; makeK' n\n</code></pre>\n\n<p>The second key point is how we find the \"K\" constructor.  We peek into constructor metadata at \"C1\" nodes using the following instance.  It's set as overlapping as it should take precedence over the general metadata instance that ignores non-constructor metadata.  You can see that <code>makeK'</code> depends on the boolean <code>isK</code> indicating that we found the \"K\" constructor.  If <code>isK</code> is false, we stop the search and return <code>Nothing</code>.  Otherwise, we recurse into the contents.  Basically, the constructor metadata acts as a kind of gatekeeper that only lets through the <code>Double</code> from the \"K\" constructor and makes all the other constructors <code>Nothing</code>.  That's how we end up with the right \"K\"-based term at the end.  It might look a little backwards, but it seems like the right way to do it:</p>\n\n<pre><code>instance {-# OVERLAPPING #-} (Constructor c, MakeK' f) =&gt; MakeK' (C1 c f) where\n  makeK' n | isK = M1 &lt;$&gt; makeK' n\n           | otherwise = Nothing\n</code></pre>\n\n<p>The function <code>isK</code> itself is a little tricky.  Remember that we aren't deconstructing an actual term.  Instead, we're considering whether or not to build one, so we use an <code>undefined</code> placeholder here just for its type so we can call <code>conName</code> on it to get the constructor name for this branch.  If its first letter is \"K\", we set <code>isK</code> true.</p>\n\n<pre><code>    where isK = head (conName (undefined :: C1 c f x)) == 'K'\n</code></pre>\n\n<p>As mentioned above, we need to ignore non-constructor metadata:</p>\n\n<pre><code>instance MakeK' f =&gt; MakeK' (M1 i t f) where\n  makeK' n = M1 &lt;$&gt; makeK' n\n</code></pre>\n\n<p>and we need to handle the <code>Double</code> when we find it.  Note that we unconditionally construct it here.  The constructor metadata further up in the recursion has already made the decision that we're the <code>Double</code> for the right constructor.</p>\n\n<pre><code>instance MakeK' (K1 c Double) where\n  makeK' n = Just $ K1 n\n</code></pre>\n\n<p>Anyway, after all that, we can define our data types and make them instances of the <code>Scalable</code> class:</p>\n\n<pre><code>data DataAmount = KB Double | MB Double | GB Double deriving (Generic, Show)\ndata Speed = KBs Double | MBs Double | GBs Double deriving (Generic, Show)\ninstance Scalable DataAmount\ninstance Scalable Speed\n</code></pre>\n\n<p>and the rest of your program looks like:</p>\n\n<pre><code>timeDiv (KB x) (KBs z) | z&gt;0 = x/z\nsomeFunc :: IO ()\nsomeFunc = do\n  putStrLn \"Gime the amount of data:\"\n  dat &lt;- readLn\n  putStrLn \"Gime 1 for KB 2 for MB 3 for GB:\"\n  unit &lt;- readLn\n  let dataAmount = case unit of\n                     1 -&gt; KB dat\n                     2 -&gt; MB dat\n                     3 -&gt; GB dat\n                     _ -&gt; KB dat\n  putStrLn \"Gime speed of data:\"\n  speed &lt;- readLn\n  putStrLn \"Gime 1 for KB/s 2 for MB/s 3 for GB/s:\"\n  speedunit &lt;- readLn\n  let speedAmount = case speedunit of\n                         1 -&gt; KBs speed\n                         2 -&gt; MBs speed\n                         3 -&gt; GBs speed\n                         _ -&gt; KBs speed\n  let speedAmountKBs = convertToK speedAmount\n  let dataAmountKB = convertToK dataAmount\n  let result = timeDiv dataAmountKB speedAmountKBs\n  putStrLn $ \"You need \" ++ show result ++ \" seconds\"\n</code></pre>\n\n<p>There's clearly a lot wrong with this approach, though:</p>\n\n<ul>\n<li>It's messy and complicated to write.  You'd need a <em>lot</em> of instances to make this worthwhile.</li>\n<li>It's pretty inefficient, as conversions require several passes through the representation tree.</li>\n<li>It's not type safe.  First, if we define a <code>Scalable</code> instance on a data type that doesn't obey the naming conventions, it'll cause a runtime error.  Second, in your program, there's no type safety in the different units being passed around.  If you remove one or both <code>convertToK</code> calls, the program will still type check but may generate a runtime error when <code>timeDiv</code> fails on a pattern match while trying to work with an unconverted value.</li>\n</ul>\n\n<p>Anyway, the full program for reference is:</p>\n\n<pre><code>{-# LANGUAGE DefaultSignatures #-}\n{-# LANGUAGE DeriveGeneric #-}\n{-# LANGUAGE FlexibleContexts #-}\n{-# LANGUAGE FlexibleInstances #-}\n{-# LANGUAGE TypeOperators #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n{-# OPTIONS_GHC -Wall #-}\n\nimport Control.Applicative\nimport Data.Maybe\nimport Generics.Deriving.ConNames\nimport GHC.Generics\n\ndata Prefix = K | M | G deriving (Show, Read, Eq)\n\nconvertToK :: (Scalable a) =&gt; a -&gt; a\nconvertToK x = case prefix x of\n  K -&gt; x\n  M -&gt; makeK (1000 * v)\n  G -&gt; makeK (1000000 * v)\n  where v = value x\n\nclass Scalable a where\n\n  prefix :: a -&gt; Prefix   -- get the unit prefix\n  default prefix :: (Generic a, ConNames (Rep a)) =&gt; a -&gt; Prefix\n  prefix = read . take 1 . conNameOf\n\n  value  :: a -&gt; Double   -- get value regardless of prefix\n  default value :: (Generic a, Value' (Rep a)) =&gt; a -&gt; Double\n  value = value' . from\n\n  makeK  :: Double -&gt; a   -- create a \"kilo\" value (i.e., the \"kilo\" constructor)\n  default makeK :: (Generic a, MakeK' (Rep a)) =&gt; Double -&gt; a\n  makeK = to . fromJust . makeK'\n\nclass Value' f where\n  value' :: f x -&gt; Double\ninstance (Value' f, Value' g) =&gt; Value' (f :+: g) where\n  value' (L1 x) = value' x\n  value' (R1 x) = value' x\ninstance Value' (K1 c Double) where\n  value' (K1 x) = x\ninstance (Value' f) =&gt; Value' (M1 i t f) where\n  value' (M1 x) = value' x\n\nclass MakeK' f where\n  makeK' :: Double -&gt; Maybe (f x)\ninstance (MakeK' f, MakeK' g) =&gt; MakeK' (f :+: g) where\n  makeK' n = L1 &lt;$&gt; makeK' n &lt;|&gt; R1 &lt;$&gt; makeK' n\ninstance {-# OVERLAPPING #-} (Constructor c, MakeK' f) =&gt; MakeK' (C1 c f) where\n  makeK' n | isK = M1 &lt;$&gt; makeK' n\n           | otherwise = Nothing\n    where isK = head (conName (undefined :: C1 c f x)) == 'K'\ninstance MakeK' f =&gt; MakeK' (M1 i t f) where\n  makeK' n = M1 &lt;$&gt; makeK' n\ninstance MakeK' (K1 c Double) where\n  makeK' n = Just $ K1 n\n\ndata DataAmount = KB Double | MB Double | GB Double deriving (Generic, Show)\ndata Speed = KBs Double | MBs Double | GBs Double deriving (Generic, Show)\ninstance Scalable DataAmount\ninstance Scalable Speed\n\ntimeDiv (KB x) (KBs z) | z&gt;0 = x/z\n\nsomeFunc :: IO ()\nsomeFunc = do\n  putStrLn \"Gime the amount of data:\"\n  dat &lt;- readLn\n  putStrLn \"Gime 1 for KB 2 for MB 3 for GB:\"\n  unit &lt;- readLn\n  let dataAmount = case unit of\n                     1 -&gt; KB dat\n                     2 -&gt; MB dat\n                     3 -&gt; GB dat\n                     _ -&gt; KB dat\n  putStrLn \"Gime speed of data:\"\n  speed &lt;- readLn\n  putStrLn \"Gime 1 for KB/s 2 for MB/s 3 for GB/s:\"\n  speedunit &lt;- readLn\n  let speedAmount = case speedunit of\n                         1 -&gt; KBs speed\n                         2 -&gt; MBs speed\n                         3 -&gt; GBs speed\n                         _ -&gt; KBs speed\n  let speedAmountKBs = convertToK speedAmount\n  let dataAmountKB = convertToK dataAmount\n  let result = timeDiv dataAmountKB speedAmountKBs\n  putStrLn $ \"You need \" ++ show result ++ \" seconds\"\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 34158, "user_id": 7203016, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/ybAMw.png?s=128&g=1", "display_name": "K. A. Buhr", "link": "https://stackoverflow.com/users/7203016/k-a-buhr"}, "is_accepted": true, "score": 1, "last_activity_date": 1560824321, "creation_date": 1560824321, "answer_id": 56640954, "question_id": 56508482, "link": "https://stackoverflow.com/questions/56508482/generic-implementation-of-function-that-convert-between-kilo-mega-giga-in-haskel/56640954#56640954", "title": "Generic implementation of function that convert between Kilo Mega Giga in Haskell", "body": "<p>Okay, here's a second \"answer\" that tries to offer what I think are some better approaches to this problem.  Solution #2 is probably worth taking seriously.  Solutions #3-#5 show increasingly complex (and increasingly type-safe) ways of representing prefixes in your data types.</p>\n\n<p>Anyway, here's my understanding of your requirements.</p>\n\n<ol>\n<li>You want to represent a variety of physical measurements (e.g., amount of data, and transmission speed) in a variety of base units (e.g., bytes and bytes per second), with a variety of \"metric prefixes\" (kilo, mega, giga).</li>\n<li><p>For calculations (e.g., calculating transmission time), you want to be able to handle any mixture of metric prefixes on the input arguments in a simple, uniform way.  For example, you don't want to have to write:</p>\n\n<pre><code>timeDiv (KB x) (KBs z) | z &gt; 0 = x / z\ntimeDiv (MB x) (KBs z) | z &gt; 0 = x*1000 / z\n...all 9 combinations...\ntimeDiv (GB x) (GBs z) | z &gt; 0 = x / z\n</code></pre></li>\n<li><p>You also don't want to have to write a <code>convertToKXXX</code> function separately for every possible unit.</p></li>\n</ol>\n\n<p>In addition, though it wasn't explicitly part of your requirements, I would add that:</p>\n\n<ol start=\"4\">\n<li>You want to make it type safe in the base units, meaning that <code>timeDiv</code> shouldn't be able to divide two <code>DataAmounts</code> or get the division backwards (e.g., dividing <code>Speed</code> by `DataAmount).'</li>\n<li>You want to make it type safe in the <em>prefixes</em>, meaning that you shoudn't be able to get a wrong answer or crash your program by forgetting to convert a <code>GB</code> before passing it to <code>timeDiv</code>.</li>\n</ol>\n\n<p>Note that your current approach fails on point 3 (which is why you asked the question in the first place), but it also fails on point 5.  For example, nothing prevents you from writing:</p>\n\n<pre><code>badMain = print $ timeDiv (GB 1000) (MBs 100)\n</code></pre>\n\n<p>which compiles fine and then gives a non-exhaustive pattern error at runtime because the two arguments haven't been converted to kilos.</p>\n\n<p>So, what are some better solutions?</p>\n\n<h2>Solution 1: Uniform Representation in Base Units</h2>\n\n<p>This is such an obvious solution it's easy to overlook.  It's possible that you don't actually need to represent the metric prefixes as part of the data type, if you only need them at the input and output \"boundaries\" of your core logic.  That is, consider if you might represent values of different physical quantities in a standard unit with only a single real constructor per type:</p>\n\n<pre><code>newtype DataAmount = B Double  -- in bytes\nnewtype Speed = Bs Double      -- in bytes per second\n</code></pre>\n\n<p>This makes it easy to define a type-safe <code>timeDiv</code> (well, relatively type-safe, as we reject negative speeds still).  In fact, we ought to introduce a type for time as well:</p>\n\n<pre><code>newtype Time = S Double deriving (Show)    -- in seconds\n\ntimeDiv :: DataAmount -&gt; Speed -&gt; Time\ntimeDiv (B x) (Bs z) | z &gt; 0     = S (x / z)\n                     | otherwise = error \"timeDiv: non-positive Speed\"\n</code></pre>\n\n<p>For scaling, let's introduce a type for prefixes (with <code>I</code> for the \"identity\" indicating no prefix):</p>\n\n<pre><code>data Prefix = I | K | M | G deriving (Show, Read)\n</code></pre>\n\n<p>and a type class for handling input and output from values in prefixed units.  The type class will only need to convert to and from the <code>Double</code> value presumed to be in non-prefixed units:</p>\n\n<pre><code>class Scalable a where\n  toScalable :: Double -&gt; a\n  fromScalable :: a -&gt; Double\n</code></pre>\n\n<p>and some tedious boilerplate for the instances:</p>\n\n<pre><code>instance Scalable DataAmount where\n  toScalable = B\n  fromScalable (B x) = x\ninstance Scalable Speed where\n  toScalable = Bs\n  fromScalable (Bs x) = x\ninstance Scalable Time where\n  toScalable = S\n  fromScalable (S x) = x\n</code></pre>\n\n<p>Then, we can define:</p>\n\n<pre><code>fromPrefix :: (Scalable a) =&gt; Prefix -&gt; Double -&gt; a\nfromPrefix I x = toScalable x\nfromPrefix K x = toScalable (1e3 * x)\nfromPrefix M x = toScalable (1e6 * x)\nfromPrefix G x = toScalable (1e9 * x)\n\ntoPrefix :: (Scalable a) =&gt; Prefix -&gt; a -&gt; Double\ntoPrefix I x = fromScalable x\ntoPrefix K x = fromScalable x / 1e3\ntoPrefix M x = fromScalable x / 1e6\ntoPrefix G x = fromScalable x / 1e9\n</code></pre>\n\n<p>allowing us to write things like:</p>\n\n<pre><code>-- what is time in kiloseconds to transfer 100G over 10MB/s?\ndoStuff = print $ toPrefix K $ timeDiv (fromPrefix G 100) (fromPrefix M 10)\n</code></pre>\n\n<p>and we rewrite your main program as follows (with modifications to take advantage of the <code>Read</code> instance for <code>Prefix</code>:</p>\n\n<pre><code>someFunc :: IO ()\nsomeFunc = do\n         putStrLn \"Gime the amount of data:\"\n         dat &lt;- readLn\n         putStrLn \"Gime K for KB, M for MB, G for GB:\"\n         unit &lt;- readLn\n         let dataAmount = fromPrefix unit dat\n         putStrLn \"Gime speed of data:\"\n         speed &lt;- readLn\n         putStrLn \"Gime K for KB/s M for MB/s G for GB/s:\"\n         speedunit &lt;- readLn\n         let speedAmount = fromPrefix speedunit speed\n         let S result = timeDiv dataAmount speedAmount\n         putStrLn $ \"You need \" ++ show result ++ \" seconds\"\n</code></pre>\n\n<h2>Solution 2: Forget the type class</h2>\n\n<p>In fact, even the above solution may be over-engineered.  You can do it all without a type class.  Try defining the types and prefixes and <code>timeDiv</code> as before:</p>\n\n<pre><code>newtype DataAmount = B Double deriving (Show)  -- in bytes\nnewtype Speed = Bs Double deriving (Show)      -- in bytes per second\nnewtype Time = S Double deriving (Show)        -- in seconds\ndata Prefix = I | K | M | G deriving (Show, Read)\ntimeDiv :: DataAmount -&gt; Speed -&gt; Time\ntimeDiv (B x) (Bs z) | z &gt; 0     = S (x / z)\n                     | otherwise = error \"timeDiv: non-positive Speed\"\n</code></pre>\n\n<p>but use:</p>\n\n<pre><code>fromPrefix :: Double -&gt; Prefix -&gt; (Double -&gt; a) -&gt; a\nfromPrefix x p u = u (scale p x)\n  where scale I = id\n        scale K = (1e3*)\n        scale M = (1e6*)\n        scale G = (1e9*)\n</code></pre>\n\n<p>This allows:</p>\n\n<pre><code>neatFunc :: IO ()\n-- divide 100 GB by 100 MB/s\nneatFunc = print $ timeDiv (fromPrefix 100 G B) (fromPrefix 10 M Bs)\n</code></pre>\n\n<p>and you can rewrite your <code>someFunc</code> as:</p>\n\n<pre><code>someFunc :: IO ()\nsomeFunc = do\n         putStrLn \"Gime the amount of data:\"\n         dat &lt;- readLn\n         putStrLn \"Gime K for KB, M for MB, G for GB:\"\n         unit &lt;- readLn\n         let dataAmount = fromPrefix dat unit B\n         putStrLn \"Gime speed of data:\"\n         speed &lt;- readLn\n         putStrLn \"Gime K for KB/s M for MB/s G for GB/s:\"\n         speedunit &lt;- readLn\n         let speedAmount = fromPrefix speed speedunit Bs\n         let S result = timeDiv dataAmount speedAmount\n         putStrLn $ \"You need \" ++ show result ++ \" seconds\"\n</code></pre>\n\n<p>Writing <code>toPrefix</code> is harder without a type class (e.g., that provides <code>fromScalable</code>), but maybe it's enough to have:</p>\n\n<pre><code>unPrefix :: Prefix -&gt; Double -&gt; Double\nunPrefix I x = x\nunPrefix K x = x/1e3\nunPrefix M x = x/1e6\nunPrefix G x = x/1e9\n</code></pre>\n\n<p>so you can calculate kiloseconds by manually pattern matching on the <code>S</code> constructor with:</p>\n\n<pre><code>example1 = print $ ks  -- answer in kiloseconds\n  where ks = let S s = timeDiv (fromPrefix 100 G B) (fromPrefix 10 M Bs)\n             in  unPrefix K s\n</code></pre>\n\n<h2>Solution 3: Shared Representation for Prefixes</h2>\n\n<p>If you decide you really do want the prefixes as part of the data representation, then the simplest way of avoiding a lot of unnecessary boilerplate is to separate the types representing the physical quantities from the type representing the prefixed values.  That is, let's define a unitless but prefixed <code>Value</code> type that can be shared across different physical quanities, like so:</p>\n\n<pre><code>data Value = Value Prefix Double deriving (Show)\ndata Prefix = I | K | M | G deriving (Show, Read)\n</code></pre>\n\n<p>Then, our physical quantities are wrappers around <code>Value</code> instead of <code>Double</code>.  We can name the constructors after the base units (<code>B</code> for bytes, etc.):</p>\n\n<pre><code>newtype DataAmount = B Value\nnewtype Speed = Bs Value\nnewtype Time = S Value deriving (Show)\n</code></pre>\n\n<p>Define <code>convertToK</code> (or to keep things simple, <code>convertToI</code> to convert to base units) for <code>Value</code> types, instead of <code>DataAmount</code> and <code>Speed</code>:</p>\n\n<pre><code>convertToI :: Value -&gt; Value\nconvertToI v@(Value I _) = v\nconvertToI   (Value K x) = Value I (x*1e3)\nconvertToI   (Value M x) = Value I (x*1e6)\nconvertToI   (Value G x) = Value I (x*1e9)\n</code></pre>\n\n<p>Now, we can define a version of <code>timeDivI</code> that can operate on prefix-less units only:</p>\n\n<pre><code>timeDivI :: DataAmount -&gt; Speed -&gt; Time\ntimeDivI (B (Value I x)) (Bs (Value I z))\n  | z &gt; 0      = S (Value I (x/z))\n  | otherwise = error \"timeDiv: non-positive Speed\"\n</code></pre>\n\n<p>as well as a more general version that can handle any prefixes:</p>\n\n<pre><code>timeDiv :: DataAmount -&gt; Speed -&gt; Time\ntimeDiv (B bytes) (Bs bps) = timeDivI (B (convertToI bytes)) (Bs (convertToI bps))\n</code></pre>\n\n<p>and we can rewrite your <code>someFunc</code> as:</p>\n\n<pre><code>someFunc :: IO ()\nsomeFunc = do\n  putStrLn \"Gime the amount of data:\"\n  dat &lt;- readLn\n  putStrLn \"Gime K for KB, M for MB, G for GB:\"\n  unit &lt;- readLn\n  let dataAmount = B (Value unit dat)\n  putStrLn \"Gime speed of data:\"\n  speed &lt;- readLn\n  putStrLn \"Gime K for KB/s M for MB/s G for GB/s:\"\n  speedunit &lt;- readLn\n  let speedAmount = Bs (Value speedunit speed)\n  let s = timeDiv dataAmount speedAmount\n  putStrLn $ \"You need time \" ++ show s\n</code></pre>\n\n<p>This is pretty good.  It meets requirements 1-4, and it comes quite close on requirement 5.  <code>timeDivI</code> isn't type safe (same problem as <code>badMain</code> above), but we can hide it in a <code>where</code> clause under the type safe <code>timeDiv</code> function which handles all possible inputs.  Basically, this provides good type safety for <strong>users</strong> of our functions but doesn't provide much type safety for developing them.</p>\n\n<h2>Solution 4: Representing Prefixes with Types using DataKinds</h2>\n\n<p>We can increase type safety by raising the prefixes to the type level using <code>DataKinds</code>.  This comes at the expense of a <em>significant</em> increase in complexity.</p>\n\n<p>With the help of some extensions:</p>\n\n<pre><code>{-# LANGUAGE DataKinds, KindSignatures #-}\n</code></pre>\n\n<p>we can define a family of prefixed <code>Value</code> types:</p>\n\n<pre><code>newtype Value (p :: Prefix) = Value Double\n</code></pre>\n\n<p>indexed by type \"tags\" for prefixes:</p>\n\n<pre><code>data Prefix = I | K | M | G deriving (Show, Read)\n</code></pre>\n\n<p>This allows us to define our previous set of physical quantities:</p>\n\n<pre><code>newtype DataAmount p = B (Value p)\nnewtype Speed p = Bs (Value p)\nnewtype Time p = S (Value p)\n</code></pre>\n\n<p>Now, the type <code>DataAmount G</code> is an amount of data in gigabytes, and <code>Time I</code> is a time value in (prefixless) seconds.</p>\n\n<p>The equivalent of your original <code>timeDiv</code> function is, more or less:</p>\n\n<pre><code>timeDiv :: DataAmount K -&gt; Speed K -&gt; Time I\ntimeDiv (B (Value kb)) (Bs (Value kbs)) = S (Value (kb/kbs))\n</code></pre>\n\n<p>This is type safe.  You can't accidentally call it on gigabytes of data amount or kilobytes per second of speed, and you can't misuse the return value as kiloseconds -- all that will fail at compile time.  However, while it's easy to define individual conversion functions like:</p>\n\n<pre><code>convertMToK :: Value M -&gt; Value K\nconvertMToK (Value m) = Value (1e3*m)\n</code></pre>\n\n<p>trying to define a general <code>convertToK</code> that handles all prefixes:</p>\n\n<pre><code>convertToK :: Value p -&gt; Value K\n</code></pre>\n\n<p>ends up being difficult (i.e., impossible).</p>\n\n<p>Instead, we need to define <code>Value</code> in such a way that we can extract prefix information at runtime, but in a type-safe manner.  This calls for the use of GADTs, so let's try again with more extensions:</p>\n\n<pre><code>{-# LANGUAGE DataKinds, GADTs, KindSignatures, RankNTypes, StandaloneDeriving #-}\n</code></pre>\n\n<p>and define <code>Value</code> as a GADT with a constructor for each prefix:</p>\n\n<pre><code>data Value (p :: Prefix) where\n  IValue :: Double -&gt; Value I\n  KValue :: Double -&gt; Value K\n  MValue :: Double -&gt; Value M\n  GValue :: Double -&gt; Value G\ndata Prefix = I | K | M | G deriving (Show, Read)\nderiving instance Show (Value p)\n</code></pre>\n\n<p>Our physical quantities are defined as before:</p>\n\n<pre><code>newtype DataAmount p = B (Value p)\nnewtype Speed p = Bs (Value p)\nnewtype Time p = S (Value p) deriving (Show)\n</code></pre>\n\n<p>but this GADT allows us to define a <code>convertToI</code> function like so:</p>\n\n<pre><code>convertToI :: Value p -&gt; Value I\nconvertToI i@(IValue _) = i   -- no conversion needed\nconvertToI   (KValue x) = IValue (1e3*x)\nconvertToI   (MValue x) = IValue (1e6*x)\nconvertToI   (GValue x) = IValue (1e9*x)\n</code></pre>\n\n<p>and now we can define a type-safe <code>timeDivI</code> that works for any base (unprefixed) division of <code>DataAmount</code> by <code>Speed</code>:</p>\n\n<pre><code>timeDivI :: DataAmount I -&gt; Speed I -&gt; Time I\ntimeDivI (B (IValue bytes)) (Bs (IValue bps))\n  | bps &gt; 0   = S (IValue (bytes / bps))\n  | otherwise = error \"TODO: replace with enterprisey exception\"\n</code></pre>\n\n<p>and a general (and type-safe) <code>timeDiv</code> that can handle any input prefixes with <code>convertToI</code> <strong>and</strong> any output prefix with <code>convertFromI</code> (and see below for the meaning of <code>KnownPrefix</code>):</p>\n\n<pre><code>timeDiv :: (KnownPrefix p3) =&gt; DataAmount p1 -&gt; Speed p2 -&gt; Time p3\ntimeDiv (B bytes) (Bs bps)\n  = let S v = timeDivI (B (convertToI bytes)) (Bs (convertToI bps))\n    in  S (convertFromI v)\n</code></pre>\n\n<p>It turns out that <code>convertFromI</code> is tough to write.  It requires the use of a singleton.  (To see why, try writing a function <code>convertFromI :: Value I -&gt; Value p</code> and see how far you can get...)</p>\n\n<p>Anyway, the singleton is defined as a GADT:</p>\n\n<pre><code>data SPrefix p where\n  SI :: SPrefix I\n  SK :: SPrefix K\n  SM :: SPrefix M\n  SG :: SPrefix G\nderiving instance Show (SPrefix p)\n</code></pre>\n\n<p>and we can write a <code>convertFromI'</code> version that accepts an explicit singleton to perform the correct conversion:</p>\n\n<pre><code>convertFromI' :: SPrefix p -&gt; Value I -&gt; Value p\nconvertFromI' SI v = v\nconvertFromI' SK (IValue base) = KValue (base/1e3)\nconvertFromI' SM (IValue base) = MValue (base/1e6)\nconvertFromI' SG (IValue base) = GValue (base/1e9)\n</code></pre>\n\n<p>Then, we can avoid the need to actually supply explicit singletons by using a standard type class trick:</p>\n\n<pre><code>class    KnownPrefix p where singPrefix :: SPrefix p\ninstance KnownPrefix I where singPrefix = SI\ninstance KnownPrefix K where singPrefix = SK\ninstance KnownPrefix M where singPrefix = SM\ninstance KnownPrefix G where singPrefix = SG\n</code></pre>\n\n<p>to write:</p>\n\n<pre><code>convertFromI :: (KnownPrefix p) =&gt; Value I -&gt; Value p\nconvertFromI = convertFromI' singPrefix\n</code></pre>\n\n<p>This infrastructure is awesome (some irony intended).  Observe:</p>\n\n<pre><code>awesomeFunc = do\n  let dat   = B (GValue 1000) :: DataAmount G  -- 1000 gigabytes\n      speed = Bs (MValue 100) :: Speed M       -- 100 megabytes\n      -- timeDiv takes args w/ arbitrary prefixes...\n      time1 = timeDiv dat speed :: Time I  -- seconds\n      -- ...and can return values w/ arbitrary prefixes.\n      time2 = timeDiv dat speed :: Time K  -- kiloseconds\n      -- ...\n  print (time1, time2)\n</code></pre>\n\n<p>This prints:</p>\n\n<pre><code>&gt; awesomeFunc\n(S (IValue 10000.0),S (KValue 10.0))\n</code></pre>\n\n<p>It's also extraordinarily typesafe.  Just try to break it...</p>\n\n<p>Seriously, though, while this looks complicated, this is probably the best <strong>type safe</strong> way of dealing with representations of unit prefixes in production code.  The type safety and reusable conversion functions are big benefits.</p>\n\n<p>Unfortunately, this works best when the prefixes are known at compile time.  To rewrite your <code>someFunc</code>, we need a way of representing a <code>Value</code> whose prefix isn't known until runtime.  The standard method is an existential type that contains both the prefix (as a singeton) and the value:</p>\n\n<pre><code>data SomeValue where\n  SomeValue :: SPrefix p -&gt; Value p -&gt; SomeValue\nderiving instance Show SomeValue\n</code></pre>\n\n<p>To work with <code>SomeValue</code> terms, we'll want a way to create a value of this type from a <code>Double</code> and <code>Prefix</code>:</p>\n\n<pre><code>someValue :: Double -&gt; Prefix -&gt; SomeValue\nsomeValue x I = SomeValue SI (IValue x)\nsomeValue x K = SomeValue SK (KValue x)\nsomeValue x M = SomeValue SM (MValue x)\nsomeValue x G = SomeValue SG (GValue x)\n</code></pre>\n\n<p>and we'll find it helpful to define a function that makes it convenient to use a <code>SomeValue</code> where we need a <code>Value</code>:</p>\n\n<pre><code>withSomeValue :: SomeValue -&gt; (forall p . Value p -&gt; a) -&gt; a\nwithSomeValue sv f = case sv of\n  SomeValue SI v -&gt; f v\n  SomeValue SK v -&gt; f v\n  SomeValue SM v -&gt; f v\n  SomeValue SG v -&gt; f v\n</code></pre>\n\n<p>And now we can write:</p>\n\n<pre><code>someFunc :: IO ()\nsomeFunc = do\n  putStrLn \"Gime the amount of data:\"\n  dat &lt;- readLn\n  putStrLn \"Gime K for KB, M for MB, G for GB:\"\n  unit &lt;- readLn\n  let dataAmount = someValue dat unit :: SomeValue\n  putStrLn \"Gime speed of data:\"\n  speed &lt;- readLn\n  putStrLn \"Gime K for KB/s M for MB/s G for GB/s:\"\n  speedunit &lt;- readLn\n  let speedAmount = someValue speed speedunit :: SomeValue\n  withSomeValue dataAmount $ \\d -&gt; withSomeValue speedAmount $ \\s -&gt; do\n    let S (KValue ks) = timeDiv (B d) (Bs s) :: Time K\n    putStrLn $ \"You need \" ++ show ks ++ \" kiloseconds\"\n</code></pre>\n\n<p>One drawback of this solution is that we can't parse <code>dataAmount</code> directly into a <code>DataAmount</code> type because there's no <code>SomeDataAmount</code> existential equivalent to <code>SomeValue</code>.  As a result, there's a type safety \"gap\" between when we define <code>dataAmount</code> as an arbitrary <code>SomeValue</code> and when we wrap it with the <code>B</code> constructor just before passing it to <code>timeDiv</code>.  In other words, we aren't doing a good job with requirement #4.  One solution would be to define <code>SomeDataAmount</code> and <code>SomeSpeed</code> and so on, but that would be very tedious.  Another solution is to lift more information to \"tags\" at the type level...</p>\n\n<h2>Solution 5: Lifting Quantities and Units to the type level</h2>\n\n<p>If everything above seems too simple then the truly industrial-strength, \"enterprise\" solution will be to represent physical quanitites, their units, and their prefixes at type level in a single universal <code>Value</code> type.</p>\n\n<p>With a bunch of language extensions:</p>\n\n<pre><code>{-# LANGUAGE DataKinds, GADTs, KindSignatures, PolyKinds, RankNTypes, StandaloneDeriving, TypeFamilies #-}\n</code></pre>\n\n<p>we'll define a family of <code>Value</code> types that's tagged by physical quantity and prefix.  The <code>Value</code> will be a GADT to allow runtime inspection of prefixes:</p>\n\n<pre><code>data Value (q :: Quantity) (p :: Prefix) where\n  IValue :: Double -&gt; Value q I\n  KValue :: Double -&gt; Value q K\n  MValue :: Double -&gt; Value q M\n  GValue :: Double -&gt; Value q G\ndata Quantity = DataAmount | Speed | Time | FileSize\ndata Prefix = I | K | M | G deriving (Show, Read)\nderiving instance Show (Value q p)\n</code></pre>\n\n<p>Where are the units?  Well, because the physical quantity determines its unit, we'll use a type family to map <code>Quantity</code> to <code>Unit</code>.  This does allow different physical quantity types (e.g., <code>DataAmount</code> and <code>FileSize</code>) to share units:</p>\n\n<pre><code>data Unit = B | Bs | S deriving (Show)\ntype family QuantityUnit q where\n  QuantityUnit DataAmount = B\n  QuantityUnit FileSize = B\n  QuantityUnit Speed = Bs\n  QuantityUnit Time = S\n</code></pre>\n\n<p>As before, the <code>Value</code> GADT allows us to define a <code>convertToI</code> to convert to base units:</p>\n\n<pre><code>convertToI :: Value q p -&gt; Value q I\nconvertToI i@(IValue _) = i   -- no conversion needed\nconvertToI   (KValue x) = IValue (1e3*x)\nconvertToI   (MValue x) = IValue (1e6*x)\nconvertToI   (GValue x) = IValue (1e9*x)\n</code></pre>\n\n<p>and now we can define a type-safe <code>timeDivI</code> that works for any base (unprefixed) division of bytes by seconds, regardless of which physical quanitites are involved (as long as their units are correct):</p>\n\n<pre><code>timeDivI :: (QuantityUnit bytes ~ B, QuantityUnit bps ~ Bs, QuantityUnit secs ~ S)\n         =&gt; Value bytes I -&gt; Value bps I -&gt; Value secs I\ntimeDivI (IValue bytes) (IValue bps)\n  | bps &gt; 0   = IValue (bytes / bps)\n  | otherwise = error \"TODO: replace with enterprisey exception\"\n</code></pre>\n\n<p>In addition, here's a general, type-safe <code>timeDiv</code> that can handle any input and output prefixes:</p>\n\n<pre><code>timeDiv :: (QuantityUnit bytes ~ B, QuantityUnit bps ~ Bs, QuantityUnit secs ~ S, KnownPrefix p3)\n         =&gt; Value bytes p1 -&gt; Value bps p2 -&gt; Value secs p3\ntimeDiv bytes bps = convertFromI $ timeDivI (convertToI bytes) (convertToI bps)\n</code></pre>\n\n<p>As before, <code>convertFromI</code> requires a singleton approach:</p>\n\n<pre><code>data SPrefix p where\n  SI :: SPrefix I\n  SK :: SPrefix K\n  SM :: SPrefix M\n  SG :: SPrefix G\nderiving instance Show (SPrefix p)\nconvertFromI' :: SPrefix p -&gt; Value q I -&gt; Value q p\nconvertFromI' SI v = v\nconvertFromI' SK (IValue base) = KValue (base/1000)\nconvertFromI' SM (IValue base) = MValue (base/1000)\nconvertFromI' SG (IValue base) = GValue (base/1000)\n\nclass    KnownPrefix p where singPrefix :: SPrefix p\ninstance KnownPrefix I where singPrefix = SI\ninstance KnownPrefix K where singPrefix = SK\ninstance KnownPrefix M where singPrefix = SM\ninstance KnownPrefix G where singPrefix = SG\n\nconvertFromI :: (KnownPrefix p) =&gt; Value q I -&gt; Value q p\nconvertFromI = convertFromI' singPrefix\n</code></pre>\n\n<p>This infrastructure is even more awesome than before:</p>\n\n<pre><code>awesomerFunc = do\n  let dat   = GValue 1000 :: Value DataAmount G  -- 1000 gigabytes of data\n      fs    = MValue 15   :: Value FileSize M    -- 15 megabytes in file\n      speed = MValue 100  :: Value Speed M       -- 100 MB/s\n      -- timeDiv works with DataAmount...\n      time1 = timeDiv dat speed :: Value Time I  -- seconds\n      -- ...and FileSize, with args having arbitrary prefixes...\n      time2 = timeDiv fs speed  :: Value Time K  -- kiloseconds\n      -- ...and can return values w/ arbitrary prefixes.\n  print (time1, time2)\n</code></pre>\n\n<p>This prints:</p>\n\n<pre><code>&gt; awesomerFunc\n(IValue 10000.0,KValue 1.5e-4)\n&gt;\n</code></pre>\n\n<p>Again, to rewrite your <code>someFunc</code>, we need an existential version:</p>\n\n<pre><code>data SomeValue q where\n  SomeValue :: SPrefix p -&gt; Value q p -&gt; SomeValue q\nderiving instance Show (SomeValue q)\n\nsomeValue :: Double -&gt; Prefix -&gt; SomeValue q\nsomeValue x I = SomeValue SI (IValue x)\nsomeValue x K = SomeValue SK (KValue x)\nsomeValue x M = SomeValue SM (MValue x)\nsomeValue x G = SomeValue SG (GValue x)\n\nwithSomeValue :: SomeValue q -&gt; (forall p . Value q p -&gt; a) -&gt; a\nwithSomeValue sv f = case sv of\n  SomeValue SI v -&gt; f v\n  SomeValue SK v -&gt; f v\n  SomeValue SM v -&gt; f v\n  SomeValue SG v -&gt; f v\n</code></pre>\n\n<p>And now we can write:</p>\n\n<pre><code>someFunc :: IO ()\nsomeFunc = do\n  putStrLn \"Gime the amount of data:\"\n  dat &lt;- readLn\n  putStrLn \"Gime K for KB, M for MB, G for GB:\"\n  unit &lt;- readLn\n  let dataAmount = someValue dat unit :: SomeValue DataAmount\n  putStrLn \"Gime speed of data:\"\n  speed &lt;- readLn\n  putStrLn \"Gime K for KB/s M for MB/s G for GB/s:\"\n  speedunit &lt;- readLn\n  let speedAmount = someValue speed speedunit :: SomeValue Speed\n  withSomeValue dataAmount $ \\d -&gt; withSomeValue speedAmount $ \\s -&gt; do\n    let KValue ks = timeDiv d s :: Value Time K\n    putStrLn $ \"You need \" ++ show ks ++ \" kiloseconds\"\n</code></pre>\n\n<h2>Program Listings</h2>\n\n<p>Here are the program listings for the simplest (#2) and most complex (#5) solutions:</p>\n\n<pre><code>-- Solution 2: skipping the typeclass\n\nnewtype DataAmount = B Double deriving (Show)  -- in bytes\nnewtype Speed = Bs Double deriving (Show)      -- in bytes per second\nnewtype Time = S Double deriving (Show)        -- in seconds\n\ndata Prefix = I | K | M | G deriving (Show, Read)\n\ntimeDiv :: DataAmount -&gt; Speed -&gt; Time\ntimeDiv (B x) (Bs z) | z &gt; 0     = S (x / z)\n                     | otherwise = error \"timeDiv: non-positive Speed\"\n\nfromPrefix :: Double -&gt; Prefix -&gt; (Double -&gt; a) -&gt; a\nfromPrefix x p u = u (scale p x)\n  where scale I = id\n        scale K = (1e3*)\n        scale M = (1e6*)\n        scale G = (1e9*)\n\nneatFunc :: IO ()\n-- divide 100 GB by 100 MB/s\nneatFunc = print $ timeDiv (fromPrefix 100 G B) (fromPrefix 10 M Bs)\n\nsomeFunc :: IO ()\nsomeFunc = do\n         putStrLn \"Gime the amount of data:\"\n         dat &lt;- readLn\n         putStrLn \"Gime K for KB, M for MB, G for GB:\"\n         unit &lt;- readLn\n         let dataAmount = fromPrefix dat unit B\n         putStrLn \"Gime speed of data:\"\n         speed &lt;- readLn\n         putStrLn \"Gime K for KB/s M for MB/s G for GB/s:\"\n         speedunit &lt;- readLn\n         let speedAmount = fromPrefix speed speedunit Bs\n         let S result = timeDiv dataAmount speedAmount\n         putStrLn $ \"You need \" ++ show result ++ \" seconds\"\n\nunPrefix :: Prefix -&gt; Double -&gt; Double\nunPrefix I x = x\nunPrefix K x = x/1e3\nunPrefix M x = x/1e6\nunPrefix G x = x/1e9\n\nexample1 = print $ ks  -- answer in kiloseconds\n  where ks = let S s = timeDiv (fromPrefix 100 G B) (fromPrefix 10 M Bs)\n             in  unPrefix K s\n</code></pre>\n\n<pre><code>-- Solution 5: \"Enterprise\" solution\n\n{-# LANGUAGE DataKinds, GADTs, KindSignatures, PolyKinds, RankNTypes, StandaloneDeriving, TypeFamilies #-}\n\ndata Value (q :: Quantity) (p :: Prefix) where\n  IValue :: Double -&gt; Value q I\n  KValue :: Double -&gt; Value q K\n  MValue :: Double -&gt; Value q M\n  GValue :: Double -&gt; Value q G\ndata Quantity = DataAmount | Speed | Time | FileSize\ndata Prefix = I | K | M | G deriving (Show, Read)\nderiving instance Show (Value q p)\n\ndata Unit = B | Bs | S deriving (Show)\ntype family QuantityUnit q where\n  QuantityUnit DataAmount = B\n  QuantityUnit FileSize = B\n  QuantityUnit Speed = Bs\n  QuantityUnit Time = S\n\nconvertToI :: Value q p -&gt; Value q I\nconvertToI i@(IValue _) = i   -- no conversion needed\nconvertToI   (KValue x) = IValue (1e3*x)\nconvertToI   (MValue x) = IValue (1e6*x)\nconvertToI   (GValue x) = IValue (1e9*x)\n\ntimeDivI :: (QuantityUnit bytes ~ B, QuantityUnit bps ~ Bs, QuantityUnit secs ~ S)\n         =&gt; Value bytes I -&gt; Value bps I -&gt; Value secs I\ntimeDivI (IValue bytes) (IValue bps)\n  | bps &gt; 0   = IValue (bytes / bps)\n  | otherwise = error \"TODO: replace with enterprisey exception\"\n\ntimeDiv :: (QuantityUnit bytes ~ B, QuantityUnit bps ~ Bs, QuantityUnit secs ~ S, KnownPrefix p3)\n         =&gt; Value bytes p1 -&gt; Value bps p2 -&gt; Value secs p3\ntimeDiv bytes bps = convertFromI $ timeDivI (convertToI bytes) (convertToI bps)\n\ndata SPrefix p where\n  SI :: SPrefix I\n  SK :: SPrefix K\n  SM :: SPrefix M\n  SG :: SPrefix G\nderiving instance Show (SPrefix p)\nconvertFromI' :: SPrefix p -&gt; Value q I -&gt; Value q p\nconvertFromI' SI v = v\nconvertFromI' SK (IValue base) = KValue (base/1000)\nconvertFromI' SM (IValue base) = MValue (base/1000)\nconvertFromI' SG (IValue base) = GValue (base/1000)\n\nclass    KnownPrefix p where singPrefix :: SPrefix p\ninstance KnownPrefix I where singPrefix = SI\ninstance KnownPrefix K where singPrefix = SK\ninstance KnownPrefix M where singPrefix = SM\ninstance KnownPrefix G where singPrefix = SG\n\nconvertFromI :: (KnownPrefix p) =&gt; Value q I -&gt; Value q p\nconvertFromI = convertFromI' singPrefix\n\nawesomerFunc = do\n  let dat   = GValue 1000 :: Value DataAmount G  -- 1000 gigabytes of data\n      fs    = MValue 15   :: Value FileSize M    -- 15 megabytes in file\n      speed = MValue 100  :: Value Speed M       -- 100 MB/s\n      -- timeDiv works with DataAmount...\n      time1 = timeDiv dat speed :: Value Time I  -- seconds\n      -- ...and FileSize, with args having arbitrary prefixes...\n      time2 = timeDiv fs speed  :: Value Time K  -- kiloseconds\n      -- ...and can return values w/ arbitrary prefixes.\n  print (time1, time2)\n\ndata SomeValue q where\n  SomeValue :: SPrefix p -&gt; Value q p -&gt; SomeValue q\nderiving instance Show (SomeValue q)\n\nsomeValue :: Double -&gt; Prefix -&gt; SomeValue q\nsomeValue x I = SomeValue SI (IValue x)\nsomeValue x K = SomeValue SK (KValue x)\nsomeValue x M = SomeValue SM (MValue x)\nsomeValue x G = SomeValue SG (GValue x)\n\nwithSomeValue :: SomeValue q -&gt; (forall p . Value q p -&gt; a) -&gt; a\nwithSomeValue sv f = case sv of\n  SomeValue SI v -&gt; f v\n  SomeValue SK v -&gt; f v\n  SomeValue SM v -&gt; f v\n  SomeValue SG v -&gt; f v\n\nsomeFunc :: IO ()\nsomeFunc = do\n  putStrLn \"Gime the amount of data:\"\n  dat &lt;- readLn\n  putStrLn \"Gime K for KB, M for MB, G for GB:\"\n  unit &lt;- readLn\n  let dataAmount = someValue dat unit :: SomeValue DataAmount\n  putStrLn \"Gime speed of data:\"\n  speed &lt;- readLn\n  putStrLn \"Gime K for KB/s M for MB/s G for GB/s:\"\n  speedunit &lt;- readLn\n  let speedAmount = someValue speed speedunit :: SomeValue Speed\n  withSomeValue dataAmount $ \\d -&gt; withSomeValue speedAmount $ \\s -&gt; do\n    let KValue ks = timeDiv d s :: Value Time K\n    putStrLn $ \"You need \" ++ show ks ++ \" kiloseconds\"\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 2659, "user_id": 581085, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/5ef2ca8729e462595f1500b554ef95e0?s=128&d=identicon&r=PG", "display_name": "Dragno", "link": "https://stackoverflow.com/users/581085/dragno"}, "is_accepted": false, "score": 0, "last_activity_date": 1564168896, "creation_date": 1564168896, "answer_id": 57225949, "question_id": 56508482, "link": "https://stackoverflow.com/questions/56508482/generic-implementation-of-function-that-convert-between-kilo-mega-giga-in-haskel/57225949#57225949", "title": "Generic implementation of function that convert between Kilo Mega Giga in Haskell", "body": "<p>This is not a full answer but food for thought. I was inspired from @K.A.Buhr to use a common type for denoting the Kilo, Mega etc and then I used SYB for creating a general convert. But I don't think it's totally type-safe here's my code:</p>\n\n<pre><code>{-# LANGUAGE DeriveDataTypeable #-}\nmodule Lib\n( someFunc\n) where\nimport Data.Generics.SYB\nimport Data.Generics.Uniplate.Data\nimport Data.Typeable\nimport Data.Data\nsomeFunc :: IO ()\nsomeFunc = do\n        let speed = Sp (M 11.0)\n        let (Sp c) = convert speed\n        let k = case c of\n                 K x -&gt; x\n                 M x -&gt; x\n                 G x -&gt; x\n        print k\n data KMBG = K Double|M Double | G Double deriving(Data,Typeable)\n\n data Speed = Sp KMBG deriving(Data,Typeable)\n data Size = Ss Double deriving (Data,Typeable)\n\n\n baseConvert (K x) = K x\n baseConvert (M x) = K (1000*x)\n baseConvert (G x) = K (1000000*x)\n\n\n convert :: (Data a)=&gt;a-&gt;a\n convert = everywhere (mkT baseConvert)\n</code></pre>\n\n<p>Can we restrict <code>convert</code> to be used only on types that use KMBG as their scaling prefix?</p>\n"}], "owner": {"reputation": 2659, "user_id": 581085, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/5ef2ca8729e462595f1500b554ef95e0?s=128&d=identicon&r=PG", "display_name": "Dragno", "link": "https://stackoverflow.com/users/581085/dragno"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 107, "favorite_count": 0, "accepted_answer_id": 56640954, "answer_count": 4, "score": 0, "last_activity_date": 1564168896, "creation_date": 1560013560, "question_id": 56508482, "link": "https://stackoverflow.com/questions/56508482/generic-implementation-of-function-that-convert-between-kilo-mega-giga-in-haskel", "title": "Generic implementation of function that convert between Kilo Mega Giga in Haskell", "body": "<p>Suppose that I have the following code:</p>\n\n<pre><code>{-# LANGUAGE DeriveGeneric #-}\n{-# LANGUAGE DefaultSignatures #-}\n{-# LANGUAGE TypeOperators #-}\nmodule Lib\n( someFunc\n) where\nimport GHC.Generics\ndata DataAmount = KB Double | MB Double | GB Double deriving Generic\ndata Speed = KBs Double | MBs Double | GBs Double deriving Generic\n\nconvertToKB x = case x of\n            (KB _ )-&gt; x\n            (MB k )-&gt; KB (1000.0*k)            \n            (GB k )-&gt; KB (1000000.0*k)\nconvertToKBs x = case x of\n             (KBs _) -&gt; x\n             (MBs k) -&gt; KBs (1000.0*k)\n             (GBs k) -&gt; KBs (1000000.0*k)\nclass ConvertToK a where\n convertToK :: a-&gt;a\n\nclass ConvertToK' f where\n convertToK' :: f p -&gt; ?\n\ninstance (ConvertToK' f,ConvertToK' g) =&gt; ConvertToK' (f :+: g) where\n convertToK' (L1 x) = ?\n convertToK' (R1 x) = ?\n\ntimeDiv (KB x) (KBs z) | z&gt;0 = x/z\nsomeFunc :: IO ()\nsomeFunc = do\n         putStrLn \"Gime the amount of data:\"\n         dat &lt;- readLn\n         putStrLn \"Gime 1 for KB 2 for MB 3 for GB:\"\n         unit &lt;- readLn \n         let dataAmount = case unit of\n                            1 -&gt; KB dat\n                            2 -&gt; MB dat\n                            3 -&gt; GB dat\n                            _ -&gt; KB dat\n         putStrLn \"Gime speed of data:\"\n         speed &lt;- readLn\n         putStrLn \"Gime 1 for KB/s 2 for MB/s 3 for GB/s:\"\n         speedunit &lt;- readLn \n         let speedAmount = case speedunit of\n                                1 -&gt; KBs speed\n                                2 -&gt; MBs speed\n                                3 -&gt; GBs speed\n                                _ -&gt; KBs speed\n         let speedAmountKBs = convertToKBs speedAmount\n         let dataAmountKB = convertToKB dataAmount\n         let result = timeDiv dataAmountKB speedAmountKBs\n         putStrLn $ \"You need \" ++ show result ++ \" seconds\"\n</code></pre>\n\n<p>Notice that there are 3 question marks to denote that I don't know what to write there. I just want to create one convert function to convert between Kilo,Mega and Giga provided that everything will be converted to Kilo. For example if I have 1 GB/sec this will become 1 000 000 KB per second. I have created two such functions convertToKB for KiloBytes and convertToKBs for Kilobytes per second. The logic is the same for both, if something is Kilo do nothing, if something is Mega multiply by 1000 if is Giga multiply by 1000000. I tried to do this with Generics but I can't because I need to take the name of the data constructor if the name begins with \"K\" then do nothing  if with \"M\" ... etc . All the examples and in the paper that introduced Generics and in the hackage documentation have to do with an encode function that converts a type to Bit or Bool. In this example the whole data structure is traversed and the encode function is applied everywhere without distinction. I found also in generics-deriving package a ConNames function but there is no an example of how to use it. Please help.</p>\n"}, {"tags": ["haskell", "quickcheck"], "answers": [{"tags": [], "owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "is_accepted": true, "score": 4, "last_activity_date": 1560011556, "last_edit_date": 1560011556, "creation_date": 1560011141, "answer_id": 56508164, "question_id": 56507810, "link": "https://stackoverflow.com/questions/56507810/whats-the-difference-between-orderedlist-and-sortedlist/56508164#56508164", "title": "What&#39;s the difference between OrderedList and SortedList", "body": "<p>tl;dr: I think <code>OrderedList</code> should be deprecated, and its <code>shrink</code> implementation ported to <code>SortedList</code>.</p>\n\n<p>They are both defined as</p>\n\n<pre><code>newtype FooList a = Foo { getFoo :: [a] }\n</code></pre>\n\n<p>but with different choices of <code>Foo</code>. (As an aside: this explains why the documentation says <code>Sorted xs</code> and <code>Ordered xs</code> not <code>SortedList xs</code> and <code>OrderedList xs</code> -- these are computation-level terms, not type-level ones, so the documentation is correct!)</p>\n\n<p>There are no special helper functions available other than instances, so if there is a difference it must be in the instances. Both derive <code>(Eq, Ord, Read, Show, Typeable)</code>, so no difference there.</p>\n\n<p><code>OrderedList</code> has a <code>Functor</code> instance while <code>SortedList</code> doesn't, but I think <code>OrderedList</code> shouldn't have one either: its <code>fmap</code> does not preserve the invariant promised by the documentation of being ordered. This fact is my desiderata for whether to deprecate <code>SortedList</code> or <code>OrderedList</code>: deprecate the one with the bad <code>Functor</code> instance, so that you have just one backwards-incompatible change of removing a type, rather than deprecating one and removing a bad <code>Functor</code> instance from the other.</p>\n\n<p>The <code>Arbitrary</code> instances are nearly identical:</p>\n\n<pre><code>instance (Ord a, Arbitrary a) =&gt; Arbitrary (OrderedList a) where\n  arbitrary = Ordered `fmap` orderedList\n\n  shrink (Ordered xs) =\n    [ Ordered xs'\n    | xs' &lt;- shrink xs\n    , sort xs' == xs'\n    ]\n\norderedList :: (Ord a, Arbitrary a) =&gt; Gen [a]\norderedList = sort `fmap` arbitrary\n\ninstance (Arbitrary a, Ord a) =&gt; Arbitrary (SortedList a) where\n  arbitrary = fmap (Sorted . sort) arbitrary\n\n  shrink (Sorted xs) =\n    [ Sorted xs'\n    | xs' &lt;- map sort (shrink xs)\n    ]\n</code></pre>\n\n<p>So the only difference in behavior is that <code>OrderedList</code> does an equality check while <code>SortedList</code> doesn't. This means that the <code>SortedList</code> instance does less work inside <code>shrink</code> but produces more duplicate elements. The <code>OrderedList</code> choice is a better tradeoff if an equality check is cheaper than checking the property you are currently trying to find a minimal case for; that seems likely to be the case in most situations to me.</p>\n\n<p>(One can almost certainly produce a more efficient <code>shrink</code> implementation than either of these.)</p>\n"}], "owner": {"reputation": 12213, "user_id": 671703, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/96ac349a9c65277e304401ea92a62ff4?s=128&d=identicon&r=PG", "display_name": "pat", "link": "https://stackoverflow.com/users/671703/pat"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 170, "favorite_count": 0, "accepted_answer_id": 56508164, "answer_count": 1, "score": 4, "last_activity_date": 1560011556, "creation_date": 1560008479, "last_edit_date": 1560010111, "question_id": 56507810, "link": "https://stackoverflow.com/questions/56507810/whats-the-difference-between-orderedlist-and-sortedlist", "title": "What&#39;s the difference between OrderedList and SortedList", "body": "<p><a href=\"http://hackage.haskell.org/package/QuickCheck-2.13.1/docs/Test-QuickCheck-Modifiers.html\" rel=\"nofollow noreferrer\"><code>Test.QuickCheck.Modifiers</code></a> provides both <code>OrderedList</code> and <code>SortedList</code>.  </p>\n\n<p>The documentation for <code>SortedList</code> says:</p>\n\n<blockquote>\n  <p><code>Sorted xs</code>: guarantees that <code>xs</code> is sorted.</p>\n</blockquote>\n\n<p>The documentation for <code>OrderedList</code> says:</p>\n\n<blockquote>\n  <p><code>Ordered xs</code>: guarantees that <code>xs</code> is ordered.</p>\n</blockquote>\n\n<p>(I'm guessing those should say <code>SortedList xs</code> and <code>OrderedList xs</code> respectively).</p>\n\n<p>What is the difference between a list that is ordered and a list that is sorted?</p>\n"}, {"tags": ["haskell", "space-leak"], "answers": [{"comments": [{"owner": {"reputation": 1550, "user_id": 519380, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/X6q0h.jpg?s=128&g=1", "display_name": "David Costa", "link": "https://stackoverflow.com/users/519380/david-costa"}, "edited": false, "score": 0, "creation_date": 1561961244, "post_id": 56508070, "comment_id": 100213504, "body": "Thank you for the suggestions! I didn&#39;t notice I was abstracting over only one possible concrete type!"}, {"owner": {"reputation": 1550, "user_id": 519380, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/X6q0h.jpg?s=128&g=1", "display_name": "David Costa", "link": "https://stackoverflow.com/users/519380/david-costa"}, "edited": false, "score": 0, "creation_date": 1561961556, "post_id": 56508070, "comment_id": 100213580, "body": "After making Op strict I still have issue but in constant space. I changed the lambda to concat elementwise instead of concat-ing the matrices and it now ends in much less time. Specs are still not passing, but that&#39;s another issue"}], "tags": [], "owner": {"reputation": 22091, "user_id": 5684257, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ea5090cde8ea066a1fda67ed52dd5084?s=128&d=identicon&r=PG&f=1", "display_name": "HTNW", "link": "https://stackoverflow.com/users/5684257/htnw"}, "is_accepted": true, "score": 5, "last_activity_date": 1560011939, "last_edit_date": 1560011939, "creation_date": 1560010415, "answer_id": 56508070, "question_id": 56507414, "link": "https://stackoverflow.com/questions/56507414/debug-memory-issue-in-haskell/56508070#56508070", "title": "Debug memory issue in Haskell", "body": "<p>I would strongly suggest not using a typeclass. Typeclasses are supposed to have laws, and they should be \"rare\", in the sense that each type has only a few valid implementations. I <em>would</em> suggest taking <code>initialState</code> and <code>toggle</code> as arguments, but even that is overkill, because the given instructions simply do not make sense with any type that isn't <code>Bool</code>. Just operate on a <code>Matrix Bool</code> directly and you can cut out a good chunk of the code you've written. However, I won't change anything for my answer.</p>\n\n<p>In any case, I think the issue may be laziness. 1000 * 1000 = 1000000, so each <code>Matrix</code> will be several megabytes in size. On a 64-bit machine, a pointer is 8 bytes, so each Matrix is at least 8 MB, plus a few more for the data behind it. You are <code>mconcat</code>ing 300 of them (that's what I get from the site) together, but, because you are doing it lazily, <em>all 300</em> matrices are resident simultaneously, so it's at <em>least</em> 2.4 GB, just for the structures themselves. The cost of filling each of those 300 million pointers with thunks also makes itself known\u2014a thunk is at least one pointer (8 bytes, pointing to code in static memory, making another 2.4 GB), plus its payload, which, here, means more pointers, each one bestowing your computer with another 2.4 GB of memory pressure. I suggest <code>deepseq</code>:</p>\n\n<pre><code>instance NFData Op where\n  rnf Off = ()\n  rnf On = ()\n  rnf Toggle = ()\n  rnf Nop = ()\n  -- rnf x = x `seq` () but I like to be explicit\nallStepsMatrix :: [Instruction] -&gt; Matrix Op\nallStepsMatrix = foldl' (\\x y -&gt; force (x &lt;&gt; y)) mempty . map stepGenerator\n</code></pre>\n\n<p>Usnig <code>foldl'</code> lets this operate in constant stack space, but <code>foldl</code> or <code>foldr</code> would also work, because a stack depth on the order of 300 is nothing. The <code>force</code> means that all the elements of each <code>Matrix</code> are evaluated. Before, each matrix kept the previous one alive by holding references to it, but now the references are removed when the elements are evaluated, so the GC can throw them out in a timely manner. I have tested this and it terminates in reasonable time with much better space usage.</p>\n"}], "owner": {"reputation": 1550, "user_id": 519380, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/X6q0h.jpg?s=128&g=1", "display_name": "David Costa", "link": "https://stackoverflow.com/users/519380/david-costa"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 89, "favorite_count": 0, "accepted_answer_id": 56508070, "answer_count": 1, "score": 6, "last_activity_date": 1560011939, "creation_date": 1560005267, "question_id": 56507414, "link": "https://stackoverflow.com/questions/56507414/debug-memory-issue-in-haskell", "title": "Debug memory issue in Haskell", "body": "<p>I'm trying to solve the whole Advent of Code series in Haskell.</p>\n\n<p>I'm encountering a memory issue while solving the <a href=\"https://adventofcode.com/2015/day/6\" rel=\"noreferrer\">2015/06 exercise</a> where there is a bunch of instructions to turn on, off and toggle lights on a grid. The goal is to count the number of lit lights at the end.</p>\n\n<p>Given instructions are parsed and stored in a <code>Instruction</code> type, this is the type definition:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>data Instruction = Instruction Op Range deriving Show\ndata Op = Off | On | Toggle | Nop deriving Show\ndata Range = Range Start End deriving Show\ntype Start = Point\ntype End = Start\ndata Point = Point Int Int deriving Show\n</code></pre>\n\n<p>This is the code that calculates the result. I'm trying to abstract over the fact that a light is a Boolean by using a typeclass</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>gridWidth, gridHeight :: Int\ngridWidth = 1000\ngridHeight = 1000\n\ninitialGrid :: Togglable a =&gt; Matrix a\ninitialGrid = matrix gridWidth gridHeight (const initialState)\n\ninstance Monoid Op where\n  mempty = Nop\n\ninstance Semigroup Op where\n  _ &lt;&gt; On = On\n  _ &lt;&gt; Off = Off\n  x &lt;&gt; Nop = x\n  Off &lt;&gt; Toggle = On\n  On &lt;&gt; Toggle = Off\n  Toggle &lt;&gt; Toggle = Nop\n  Nop &lt;&gt; Toggle = Toggle\n\nclass Togglable a where\n  initialState :: a\n  apply :: Op -&gt; a -&gt; a\n\ninstance Togglable Bool where\n  initialState = False\n  apply On = const True\n  apply Off = const False\n  apply Toggle = not\n  apply Nop = id\n\n-- Does the Range of the instruction apply to this matrix coordinate?\n(&lt;?) :: Range -&gt; (Int, Int) -&gt; Bool\n(&lt;?) (Range start end) (x, y) = let\n  (Point x1 y1) = start\n  (Point x2 y2) = end\n  (mx, my) = (x-1, y-1) -- translate from matrix coords (they start from 1!)\n  in and [\n    mx &gt;= min x1 x2, mx &lt;= max x1 x2,\n    my &gt;= min y1 y2, my &lt;= max y1 y2\n  ]\n\nstepGenerator :: Instruction -&gt; Matrix Op\nstepGenerator (Instruction op r) = let\n  g coord = if r &lt;? coord then op else Nop\n  in matrix gridWidth gridHeight g\n\nallStepsMatrix :: [Instruction] -&gt; Matrix Op\nallStepsMatrix = mconcat.map stepGenerator\n\nfinalGrid :: Togglable a =&gt; Matrix a -&gt; Matrix Op -&gt; Matrix a\nfinalGrid z op = fmap apply op &lt;*&gt; z\n\ncountOn :: Matrix Bool -&gt; Integer\ncountOn = toInteger.foldr (\\x -&gt; if x then (+1) else id) 0\n\npartA :: Challenge (String -&gt; Integer)\npartA = Challenge $ countOn.finalGrid initialGrid.allStepsMatrix.parse\n</code></pre>\n\n<p>The solution will be the Integer returned by what's inside <code>partA</code>. <code>parse</code> works and has type <code>parse :: String -&gt; [Instruction]</code></p>\n\n<p>The code compiles and runs with small matrices (e.g. 10x10), as soon as I turn <code>gridWidth</code> and <code>gridHeight</code> to 1000 I'm faced with a <code>out of memory</code> error, apparently generating from the <code>allStepsMatrix</code> function.</p>\n\n<p>Any hint of what could be wrong here? Full code is <a href=\"https://github.com/zarelit/advent-of-code\" rel=\"noreferrer\">on GitHub</a></p>\n"}, {"tags": ["haskell", "functional-programming", "higher-order-functions"], "comments": [{"owner": {"reputation": 18798, "user_id": 4543207, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8ed6f11c827fa7cef811f141a84cc14b?s=128&d=identicon&r=PG&f=1", "display_name": "Redu", "link": "https://stackoverflow.com/users/4543207/redu"}, "edited": false, "score": 1, "creation_date": 1560013754, "post_id": 56506833, "comment_id": 99604189, "body": "Basically <code>flip</code> is sometimes unnecessary if you could use an infix notation of a function. Such as <code>`subtract` 20</code>. So you may do <code>map  (`subtract` 20) [1,2,3,4]</code>. Or better <code>map ((-) 20) [1,2,3,4]</code>"}, {"owner": {"reputation": 54864, "user_id": 404970, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/o6X94.jpg?s=128&g=1", "display_name": "molbdnilo", "link": "https://stackoverflow.com/users/404970/molbdnilo"}, "edited": false, "score": 0, "creation_date": 1560018318, "post_id": 56506833, "comment_id": 99605207, "body": "The parentheses are important \u2013 you can&#39;t &quot;decompose&quot; <code>(flip subtract 20)</code>."}], "answers": [{"tags": [], "owner": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "is_accepted": true, "score": 8, "last_activity_date": 1560027468, "last_edit_date": 1560027468, "creation_date": 1560001118, "answer_id": 56506943, "question_id": 56506833, "link": "https://stackoverflow.com/questions/56506833/understanding-the-map-function-when-the-first-argument-uses-flip/56506943#56506943", "title": "Understanding the map function when the first argument uses flip", "body": "<p>No, here the function <a href=\"https://hackage.haskell.org/package/base-4.12.0.0/docs/Prelude.html#v:map\" rel=\"nofollow noreferrer\"><strong><code>map :: (a -&gt; b) -&gt; [a] -&gt; [b]</code></strong></a> takes is <code>(flip subtract 20)</code>, this is the parameter you pass to <code>map</code>. So that means that:</p>\n\n<pre><code>map (flip subtract 20) [1,2,3,4]\n</code></pre>\n\n<p>is equivalent to:</p>\n\n<pre><code>[flip subtract 20 1, flip subtract 20 2, flip subtract 20 3, flip subtract 20 4]\n</code></pre>\n\n<p><a href=\"https://hackage.haskell.org/package/base-4.12.0.0/docs/Prelude.html#v:flip\" rel=\"nofollow noreferrer\"><strong><code>flip :: (a -&gt; b -&gt; c) -&gt; b -&gt; a -&gt; c</code></strong></a> is a function that takes a function and flips the parameters. So <code>flip subtract 20</code> is semantically equivalent to <code>\\x -&gt; subtract x 20</code>. Our list is thus equivalent to:</p>\n\n<pre><code>[subtract 1 20, subtract 2 20, subtract 3 20, subtract 4 20]\n</code></pre>\n\n<p><a href=\"https://hackage.haskell.org/package/base-4.12.0.0/docs/Prelude.html#v:subtract\" rel=\"nofollow noreferrer\"><strong><code>subtract :: Num a =&gt; a -&gt; a -&gt; a</code></strong></a> is the \"flipped\" version of <code>(-)</code>, so it is equivalent to:</p>\n\n<pre><code>[20 - 1, 20 - 2, 20 - 3, 20 - 4]\n</code></pre>\n\n<p>and thus equivalent to:</p>\n\n<pre><code>Prelude&gt; map (flip subtract 20) [1,2,3,4]\n[19,18,17,16]\n</code></pre>\n\n<p>A shorter version of the above expression is thus:</p>\n\n<pre><code>map (20 -) [1,2,3,4]\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 2347, "user_id": 1335237, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e6f508f7c24482fc0a3b2546ccfb8075?s=128&d=identicon&r=PG", "display_name": "snwflk", "link": "https://stackoverflow.com/users/1335237/snwflk"}, "is_accepted": false, "score": 3, "last_activity_date": 1560020554, "last_edit_date": 1560020554, "creation_date": 1560001168, "answer_id": 56506947, "question_id": 56506833, "link": "https://stackoverflow.com/questions/56506833/understanding-the-map-function-when-the-first-argument-uses-flip/56506947#56506947", "title": "Understanding the map function when the first argument uses flip", "body": "<p><code>flip</code> has the following functionality: it applies a given function on the two given parameters in reverse order (\"flipped\").</p>\n\n<pre><code>Prelude&gt; :t flip\nflip :: (a -&gt; b -&gt; c) -&gt; b -&gt; a -&gt; c\n</code></pre>\n\n<p>That's how <code>(flip subtract 20)</code> becomes the function f(x) = 20-x, where <code>(subtract 20)</code> corresponded to g(x) = x-20.</p>\n\n<p>Then, f is applied to each list item using the map function.</p>\n"}, {"tags": [], "owner": {"reputation": 14030, "user_id": 8475054, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/edbf41c4b5aecb1a949936e06368a7c2?s=128&d=identicon&r=PG&f=1", "display_name": "Robin Zigmond", "link": "https://stackoverflow.com/users/8475054/robin-zigmond"}, "is_accepted": false, "score": 3, "last_activity_date": 1560011018, "last_edit_date": 1560011018, "creation_date": 1560001228, "answer_id": 56506958, "question_id": 56506833, "link": "https://stackoverflow.com/questions/56506833/understanding-the-map-function-when-the-first-argument-uses-flip/56506958#56506958", "title": "Understanding the map function when the first argument uses flip", "body": "<blockquote>\n  <p>But since flip is the function map takes...</p>\n</blockquote>\n\n<p>No. <code>map</code> takes the function as its first parameter - which here is <code>flip subtract 20</code>. This is indeed a function, as we'll now see (if it wasn't, the compiler would raise an error because it's expecting a function here).</p>\n\n<p>We'll start with <a href=\"https://hackage.haskell.org/package/base-4.12.0.0/docs/Prelude.html#v:subtract\" rel=\"nofollow noreferrer\">subtract</a> - which is actually defined as <code>flip (-)</code>. This means <code>flip subtract</code> is simply <code>(-)</code>, or:</p>\n\n<pre><code>flip subtract = \\a b -&gt; a - b\n</code></pre>\n\n<p>as opposed to</p>\n\n<pre><code>subtract = \\a b -&gt; b - a\n</code></pre>\n\n<p>So, by currying:</p>\n\n<pre><code>flip subtract a = \\b -&gt; a - b\n</code></pre>\n\n<p>and substituting in 20:</p>\n\n<pre><code>flip subtract 20 = \\b -&gt; 20 - b\n</code></pre>\n\n<p>So <code>flip subtract 20</code> is indeed a function, which returns the result of subtracting its argument from 20. <code>map</code>ping this function over the list given gives the result shown.</p>\n"}], "owner": {"reputation": 1905, "user_id": 8713450, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ed61e21ec072346277da9569f1c9f966?s=128&d=identicon&r=PG&f=1", "display_name": "ceno980", "link": "https://stackoverflow.com/users/8713450/ceno980"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 209, "favorite_count": 0, "accepted_answer_id": 56506943, "answer_count": 3, "score": 4, "last_activity_date": 1560027468, "creation_date": 1560000257, "last_edit_date": 1560010930, "question_id": 56506833, "link": "https://stackoverflow.com/questions/56506833/understanding-the-map-function-when-the-first-argument-uses-flip", "title": "Understanding the map function when the first argument uses flip", "body": "<p>I am learning about higher-order functions from 'Learn You a Haskell for Great Good!' by Miran Lipovaca. I know that the flip function takes a function and returns a function like the original, but with the first two arguments flipped.</p>\n\n<p>I don't fully understand how the following example with the map function works.</p>\n\n<pre><code>ghci&gt; map (flip subtract 20) [1,2,3,4]\n[19,18,17,16]\n</code></pre>\n\n<p>Map takes a function and applies it to each element of the list, resulting in a new list. But since flip is the function map takes, with parameters <code>subtract 20 [1,2,3,4]</code>, would the resulting function be <code>20 subtract [1,2,3,4]</code>?</p>\n\n<p>I don't think this is correct since a value such as 19 is only produced if you type <code>subtract 1 20</code>. I am not sure how subtract would work in the above example to produce the output list.</p>\n"}, {"tags": ["haskell", "functional-programming"], "comments": [{"owner": {"reputation": 14030, "user_id": 8475054, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/edbf41c4b5aecb1a949936e06368a7c2?s=128&d=identicon&r=PG&f=1", "display_name": "Robin Zigmond", "link": "https://stackoverflow.com/users/8475054/robin-zigmond"}, "edited": false, "score": 1, "creation_date": 1559997766, "post_id": 56506398, "comment_id": 99600432, "body": "This code won&#39;t even compile, I assume that by <code>function</code> you mean <code>&quot;function&quot;</code>. And, while it&#39;s valid code, please leave spaces between operators and their operands, <code>putStrLn$show$map</code> is much harder to mentally parse than <code>putStrLn $ show $ map</code>"}], "answers": [{"tags": [], "owner": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "is_accepted": true, "score": 4, "last_activity_date": 1559997876, "last_edit_date": 1559997876, "creation_date": 1559997485, "answer_id": 56506435, "question_id": 56506398, "link": "https://stackoverflow.com/questions/56506398/what-does-the-mean-when-used-as-the-argument-to-the-map-function/56506435#56506435", "title": "What does the `$` mean when used as the argument to the map function?", "body": "<p><a href=\"https://hackage.haskell.org/package/base-4.12.0.0/docs/Prelude.html#v:-36-\" rel=\"nofollow noreferrer\"><strong><code>($) :: (a -&gt; b) -&gt; a -&gt; b</code></strong></a> is a function that takes a function as first parameter, and a value as second and returns the value applied to that function.</p>\n\n<p>For example:</p>\n\n<pre><code>Prelude&gt; (1+) $ 2\n3\n</code></pre>\n\n<p>The expression <code>($ 3)</code> is an example of <a href=\"https://wiki.haskell.org/Section_of_an_infix_operator\" rel=\"nofollow noreferrer\"><em>infix operator sectioning</em> [Haskell-wiki]</a>. <code>($ 3)</code> is short for <code>\\f -&gt; f $ 3</code>, or simpler <code>\\f -&gt; f 3</code>. It thus is a function that takes a function and applies <code>3</code> to that function.</p>\n\n<p>For your expression:</p>\n\n<pre><code>map ($ 3) [(+),(-),(/),(*)]\n</code></pre>\n\n<p>the output is thus equivalent to:</p>\n\n<pre><code>[(3+), (3-), (3/), (3*)] :: Fractional a =&gt; [a -&gt; a]\n</code></pre>\n\n<p>Since <code>(+), (-), (*) :: Num a =&gt; a -&gt; a -&gt; a</code> work with types that are members of the <code>Num</code> typeclass, and <code>(/) :: Fractional a =&gt; a -&gt; a -&gt; a</code> works with types that are members of the <code>Fractional</code> type class, and all <code>Fractional</code> types are num types as well, <code>3</code> is here a <code>Fractional</code> type, and the list thus contains functions that are all of the type <code>a -&gt; a</code> with <code>a</code> a member of <code>Fractional</code>.</p>\n\n<blockquote>\n  <p>How can I display more helpful output?</p>\n</blockquote>\n\n<p>The compiler does not keep track of the expressions, as specified in the Haskell wiki page on <a href=\"https://wiki.haskell.org/Show_instance_for_functions\" rel=\"nofollow noreferrer\"><em><code>Show</code> instance for functions</em> [Haskell-wiki]</a>.</p>\n\n<blockquote>\n  <p>The Haskell compiler doesn't maintain the expressions as they are, but translates them to machine code or some other low-level representation. The function <code>\\x -&gt; x - x + x :: Int -&gt; Int</code> might have been optimized to <code>\\x -&gt; x :: Int -&gt; Int</code>. If it's used anywhere, it might have been inlined and optimized to nothing. The variable name x is not stored anywhere. (...)</p>\n</blockquote>\n\n<p>So we can not \"look inside\" the function and derive an expression that is human-readable.</p>\n"}], "owner": {"reputation": 53, "user_id": 10485405, "user_type": "registered", "profile_image": "https://graph.facebook.com/884977638557039/picture?type=large", "display_name": "Alexander", "link": "https://stackoverflow.com/users/10485405/alexander"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 86, "favorite_count": 0, "accepted_answer_id": 56506435, "answer_count": 1, "score": 1, "last_activity_date": 1560419042, "creation_date": 1559997187, "last_edit_date": 1560419042, "question_id": 56506398, "link": "https://stackoverflow.com/questions/56506398/what-does-the-mean-when-used-as-the-argument-to-the-map-function", "title": "What does the `$` mean when used as the argument to the map function?", "body": "<p>I understand that the $ operator is for avoiding parentheses. Anything appearing after it will take precedence over anything that comes before.</p>\n\n<p>I am trying to understand what it means in this context: </p>\n\n<pre><code>map ($ 3) [(+),(-),(/),(*)]\n</code></pre>\n\n<p>With the following code:</p>\n\n<pre><code>instance Show (a -&gt; b) where\n  show a = function\n\nmain = putStrLn $ show $ map ($ 3) [(+),(-),(/),(*)]\n</code></pre>\n\n<p>The output is</p>\n\n<pre><code>[\"function\", \"function\", \"function\", \"function\"]\n</code></pre>\n\n<p>This doesn't help me understand the meaning of the $ here.\nHow can I display more helpful output?</p>\n"}, {"tags": ["haskell", "types", "typeclass"], "comments": [{"owner": {"reputation": 18798, "user_id": 4543207, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8ed6f11c827fa7cef811f141a84cc14b?s=128&d=identicon&r=PG&f=1", "display_name": "Redu", "link": "https://stackoverflow.com/users/4543207/redu"}, "edited": false, "score": 1, "creation_date": 1559995543, "post_id": 56505720, "comment_id": 99599869, "body": "Dont get intimidated by complicated looking error messages. The error message literally tells you what is wrong. <code>Couldn&#39;t match expected type \u2018a\u2019 with actual type \u2018Int\u2019 ... In the second argument of \u2018(&#47;)\u2019, namely \u2018(length list)\u2019</code>"}], "answers": [{"tags": [], "owner": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "is_accepted": true, "score": 2, "last_activity_date": 1560025364, "last_edit_date": 1560025364, "creation_date": 1559992055, "answer_id": 56505769, "question_id": 56505720, "link": "https://stackoverflow.com/questions/56505720/how-to-understand-this-type-class-error-of-telling-me-i-use-the-wrong-type/56505769#56505769", "title": "How to understand this type class error of telling me I use the wrong type?", "body": "<p>The type of <a href=\"https://hackage.haskell.org/package/base-4.12.0.0/docs/Prelude.html#v:-47-\" rel=\"nofollow noreferrer\"><strong><code>(/) :: Fractional a =&gt; a -&gt; a -&gt; a</code></strong></a> means that the numerator and denominator need to be both need to have the same <a href=\"https://hoogle.haskell.org/?hoogle=Fractional\" rel=\"nofollow noreferrer\"><strong><code>Fractional</code></strong></a> type.</p>\n\n<p><a href=\"https://hackage.haskell.org/package/base-4.12.0.0/docs/Prelude.html#v:length\" rel=\"nofollow noreferrer\"><strong><code>length :: [a] -&gt; Int</code></strong></a> however maps a foldable to an <code>Int</code>. An <code>Int</code> is <em>not</em> a <code>Fractional</code> type.</p>\n\n<p>You can use <a href=\"https://hackage.haskell.org/package/base-4.12.0.0/docs/Prelude.html#v:fromIntegral\" rel=\"nofollow noreferrer\"><strong><code>fromIntegral :: (Integral a, Num b) :: a -&gt; b</code></strong></a> here to convert the <code>Int</code> to an type that is a member of the <a href=\"https://hackage.haskell.org/package/base-4.12.0.0/docs/Prelude.html#t:Num\" rel=\"nofollow noreferrer\"><strong><code>Num</code></strong></a> typeclass.</p>\n\n<pre><code>arithMean :: (Fractional a, Foldable f) =&gt; f a -&gt; a\narithMean list = sum list / <b>fromIntegral</b> (length list)</code></pre>\n\n<p>Instead of using <code>foldr (+) 0 list</code> here, we can use <a href=\"https://hackage.haskell.org/package/base-4.12.0.0/docs/Prelude.html#v:sum\" rel=\"nofollow noreferrer\"><strong><code>sum :: (Foldable f, Num a) =&gt; f a -&gt; a</code></strong></a> here.</p>\n"}], "owner": {"reputation": 43, "user_id": 11317200, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-zCLtRpEok2Q/AAAAAAAAAAI/AAAAAAAAAAQ/IgO_UXtgiuM/photo.jpg?sz=128", "display_name": "kyrie rao", "link": "https://stackoverflow.com/users/11317200/kyrie-rao"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 66, "favorite_count": 0, "accepted_answer_id": 56505769, "answer_count": 1, "score": 2, "last_activity_date": 1560025364, "creation_date": 1559991612, "last_edit_date": 1560001944, "question_id": 56505720, "link": "https://stackoverflow.com/questions/56505720/how-to-understand-this-type-class-error-of-telling-me-i-use-the-wrong-type", "title": "How to understand this type class error of telling me I use the wrong type?", "body": "<p>This is my function of calculating the average of a list of numbers</p>\n\n<pre><code>arithMean :: (Fractional a) =&gt; [a] -&gt; a\narithMean list = (foldr (+) 0 list)/ (length list)\n</code></pre>\n\n<p>However, it raised an error below</p>\n\n<pre><code>HigherOrder.hs:10:39: error:\n? Couldn't match expected type \u2018a\u2019 with actual type \u2018Int\u2019\n  \u2018a\u2019 is a rigid type variable bound by\n    the type signature for:\n      arithMean :: forall a. Fractional a =&gt; [a] -&gt; a\n    at HigherOrder.hs:9:1-39\n? In the second argument of \u2018(/)\u2019, namely \u2018(length list)\u2019\n  In the expression: (foldr (+) 0 list) / (length list)\n  In an equation for \u2018arithMean\u2019:\n      arithMean list = (foldr (+) 0 list) / (length list)\n? Relevant bindings include\n    list :: [a] (bound at HigherOrder.hs:10:11)\n    arithMean :: [a] -&gt; a (bound at HigherOrder.hs:10:1)\n</code></pre>\n\n<p>About this error, I am very confused about why it forces me to change the \"list\" to [Int], I think no matter what types of it is, it should work</p>\n\n<p>besides, I think maybe something happened when I try to use the \"length\" function because when I wrote this code below, it works</p>\n\n<pre><code>arithMean :: (Fractional a) =&gt; [a] -&gt; a\narithMean list = (foldr (+) 0 list)\n</code></pre>\n"}, {"tags": ["haskell", "state-monad"], "comments": [{"owner": {"reputation": 31243, "user_id": 2751851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/4ddc0.png?s=128&g=1", "display_name": "duplode", "link": "https://stackoverflow.com/users/2751851/duplode"}, "edited": false, "score": 6, "creation_date": 1559970257, "post_id": 56503556, "comment_id": 99595538, "body": "You aren&#39;t actually using a transformer here. Compare your <code>State</code> type with <a href=\"http://hackage.haskell.org/package/transformers-0.5.6.2/docs/Control-Monad-Trans-State-Lazy.html#t:StateT\" rel=\"nofollow noreferrer\"><code>StateT</code> from transformers</a>."}, {"owner": {"reputation": 7817, "user_id": 7345298, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/9477d048c5c29b16307b3356146d497a?s=128&d=identicon&r=PG&f=1", "display_name": "bradrn", "link": "https://stackoverflow.com/users/7345298/bradrn"}, "edited": false, "score": 3, "creation_date": 1559973290, "post_id": 56503556, "comment_id": 99595960, "body": "Not too important, but some notes on code formatting: 1) Most Haskellers put spaces around <code>::</code> and <code>=</code>, and 2) You don&#39;t need to indent after the first <code>module</code> line"}, {"owner": {"reputation": 61419, "user_id": 849891, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/MbEO3.png?s=128&g=1", "display_name": "Will Ness", "link": "https://stackoverflow.com/users/849891/will-ness"}, "edited": false, "score": 0, "creation_date": 1560004537, "post_id": 56503556, "comment_id": 99602073, "body": "to disambiguate, you could always use &quot;state-transforming function&quot; instead of &quot;state transformer&quot;, so there&#39;s no possibility of confusing it as being about monad transformers."}], "answers": [{"comments": [{"owner": {"reputation": 61419, "user_id": 849891, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/MbEO3.png?s=128&g=1", "display_name": "Will Ness", "link": "https://stackoverflow.com/users/849891/will-ness"}, "edited": false, "score": 1, "creation_date": 1560004609, "post_id": 56504839, "comment_id": 99602087, "body": "@ OP: here <code>actions</code> is not an <code>IO</code> &quot;action&quot; value representing an I/O computation. being bound via <code>let</code>, as far as the IO <code>do</code> block is concerned it is a &quot;pure&quot; value, a State Monad &quot;action&quot;, a <i>state--transforming</i> pure function wrapped inside a State Monad type. then <code>evalState actions</code> <i>treats</i> it as a State Monad action and <i>runs</i> it by supplying it with the initial state, the pure value <code>env</code>. <code>initEnv :: IO Env</code> so it follows <code>env :: Env</code> (since it is bound with the <code>&lt;-</code> construct, not <code>let</code>). This means <code>actions :: State Env String</code>. it is also the type of <code>toStats</code>, so, all is OK."}, {"owner": {"reputation": 61419, "user_id": 849891, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/MbEO3.png?s=128&g=1", "display_name": "Will Ness", "link": "https://stackoverflow.com/users/849891/will-ness"}, "edited": false, "score": 1, "creation_date": 1560004785, "post_id": 56504839, "comment_id": 99602133, "body": "(contd.) so, the direct answer to your question &quot;How do you supply both the state and the state transformer?&quot; is, <i>by using <code>evalState</code></i> as shown in this answer."}, {"owner": {"reputation": 6267, "user_id": 1913744, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/5bAQS.jpg?s=128&g=1", "display_name": "Bercovici Adrian", "link": "https://stackoverflow.com/users/1913744/bercovici-adrian"}, "edited": false, "score": 0, "creation_date": 1560010190, "post_id": 56504839, "comment_id": 99603319, "body": "Yes i couldn&#39;t picture how do you couple together forming the initial state and then supplying it to the state monad.In @melpomene &#39;s example i understood that you can define a group of actions that use the state <b>BEFORE</b> you actually call the <code>evalState</code> with the initial state."}], "tags": [], "owner": {"reputation": 78982, "user_id": 1848654, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/84180c0f3c9c04f8b8f0613fc0129dac?s=128&d=identicon&r=PG", "display_name": "melpomene", "link": "https://stackoverflow.com/users/1848654/melpomene"}, "is_accepted": true, "score": 5, "last_activity_date": 1559983205, "creation_date": 1559983205, "answer_id": 56504839, "question_id": 56503556, "link": "https://stackoverflow.com/questions/56503556/cannot-use-state-monad-in-io-context/56504839#56504839", "title": "Cannot use state monad in IO context", "body": "<p>Your code doesn't use any monad transformers. I think you're just looking for</p>\n\n<pre><code>useEnv :: IO ()\nuseEnv = do\n    env &lt;- initEnv\n    name &lt;- getLine\n    let actions = do\n            changeName name\n            toStats\n    let str = evalState actions env\n    putStrLn str\n</code></pre>\n\n<p>i.e. run the <code>State</code> actions from inside an <code>IO</code> do block.</p>\n"}], "owner": {"reputation": 6267, "user_id": 1913744, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/5bAQS.jpg?s=128&g=1", "display_name": "Bercovici Adrian", "link": "https://stackoverflow.com/users/1913744/bercovici-adrian"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 85, "favorite_count": 0, "accepted_answer_id": 56504839, "answer_count": 1, "score": 2, "last_activity_date": 1559983205, "creation_date": 1559969853, "last_edit_date": 1559982651, "question_id": 56503556, "link": "https://stackoverflow.com/questions/56503556/cannot-use-state-monad-in-io-context", "title": "Cannot use state monad in IO context", "body": "<p>I am trying to use the State monad to do some computations while also altering it. I have implemented the instances of <code>Applicative</code>, <code>Monad</code> and <code>Functor</code> as well as <code>get</code> and <code>put</code> ,<code>modify</code>, etc.\nI do not understand the desugaring of the <code>do</code> block. How do you supply both the state and the state transformer?</p>\n\n<p><strong>Utils</strong></p>\n\n<pre><code>    get::State s s\n    get=State $ \\s -&gt;(s,s) \n\n    put::s-&gt;State s ()\n    put x=State $ \\_ -&gt; ((),x)\n\n    modify::(s-&gt;s)-&gt;State s ()\n    modify f=get&gt;&gt;= \\x -&gt; put (f x)\n\n    evalState::State s a-&gt;s-&gt;a\n    evalState act =fst . run act\n\n    execState::State s a-&gt;s-&gt;s\n    execState act=snd.run act\n</code></pre>\n\n<p><strong>Code</strong></p>\n\n<pre><code>module Env where\n    import State \n    import System.Directory\n    import Control.Monad\n    data Env=Env{\n        envName::String,\n        fileNames::[String]\n    }\n    instance Show Env where \n        show Env{envName=x,fileNames=xs} = \"{ envName:\"++x++\" , files: [\"++foldr (\\t y-&gt; t++\",\"++y) \"\" xs ++\"] }\"\n\n    initEnv::IO Env\n    initEnv=do\n        name&lt;- getLine\n        names&lt;- getCurrentDirectory&gt;&gt;=listDirectory\n        return Env{envName=name,fileNames=names}\n\n    changeName::String-&gt;State Env ()\n    changeName (y:ys)=State $ \\ (Env (x:xs) ls) -&gt; ((),Env (y:xs) ls)\n\n    toStats::State Env String\n    toStats= State $ \\env -&gt; (show env,env)\n\n    useEnv::IO (State Env String)\n    useEnv=do\n        liftM put initEnv   --passes state transformer\n        liftM changeName getLine  --passes strate transformer\n        print . evalState . toStats         --how do i supply both ?\n        return toStats\n</code></pre>\n\n<p>As you can see, in my last line I am initializing the state transformer and passing it for further altering... until i reach <code>evalState</code> and I want to use it. In this case i do not know how to supply the state and the transformer.</p>\n\n<p><strong>P.S</strong> By transformer i mean the wrapper over the <code>s-&gt;(a,s)</code></p>\n"}, {"tags": ["haskell", "emacs", "haskell-mode"], "comments": [{"owner": {"reputation": 28248, "user_id": 2415684, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/e0fb12778bde5d0dddddd3b8b619681b?s=128&d=identicon&r=PG", "display_name": "Rorschach", "link": "https://stackoverflow.com/users/2415684/rorschach"}, "edited": false, "score": 3, "creation_date": 1559941460, "post_id": 56501112, "comment_id": 99591493, "body": "that tutorial is 12 years old!  I would look for something more recent (checking out the spacemacs config for haskell could be a useful starter if you&#39;re new to emacs)"}, {"owner": {"reputation": 7817, "user_id": 7345298, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/9477d048c5c29b16307b3356146d497a?s=128&d=identicon&r=PG&f=1", "display_name": "bradrn", "link": "https://stackoverflow.com/users/7345298/bradrn"}, "edited": false, "score": 0, "creation_date": 1559953326, "post_id": 56501112, "comment_id": 99593733, "body": "If you&#39;re using <code>stack</code>, try using <a href=\"https://haskell-lang.org/intero\" rel=\"nofollow noreferrer\">Intero</a> - it&#39;s much newer and vastly easier to set up. I use it and it works well."}, {"owner": {"reputation": 162, "user_id": 1817682, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/aOgfC.jpg?s=128&g=1", "display_name": "Andreas Abel", "link": "https://stackoverflow.com/users/1817682/andreas-abel"}, "edited": false, "score": 0, "creation_date": 1602676254, "post_id": 56501112, "comment_id": 113794610, "body": "Looks like Intero was a mayfly."}], "answers": [{"tags": [], "owner": {"reputation": 571, "user_id": 8116829, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/11b845cc234d7941bc6538d2d8079b9e?s=128&d=identicon&r=PG&f=1", "display_name": "D. Gillis", "link": "https://stackoverflow.com/users/8116829/d-gillis"}, "is_accepted": true, "score": 1, "last_activity_date": 1559977873, "creation_date": 1559977873, "answer_id": 56504302, "question_id": 56501112, "link": "https://stackoverflow.com/questions/56501112/haskell-emacs-haskell-mode-run-c-h-f-haskell-mode-for-instruction-how-to-setu/56504302#56504302", "title": "Haskell Emacs haskell-mode: Run &#39;C-h f haskell-mode&#39; for instruction how to setup a Haskell interaction mode", "body": "<p>The minor-mode <code>interactive-haskell-mode</code> must be enabled to open an interactive session between your Haskell code buffer and a Haskell interpreter. You can enable this mode for the current buffer with the command <code>M-x interactive-haskell-mode</code>.</p>\n\n<p>To have this mode enabled for every Haskell file you open, you can set a <code>haskell-mode</code> hook that will run this command (i.e. will enable <code>interactive-haskell-mode</code>) every time <code>haskell-mode</code> is enabled. The following line should be added to your .emacs file:</p>\n\n<pre><code>(add-hook 'haskell-mode-hook 'interactive-haskell-mode)\n</code></pre>\n"}], "owner": {"reputation": 999, "user_id": 4051748, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3d012d2cf5c02a4b9de7ef6c5fb6f3d8?s=128&d=identicon&r=PG", "display_name": "Mochan", "link": "https://stackoverflow.com/users/4051748/mochan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 525, "favorite_count": 0, "accepted_answer_id": 56504302, "answer_count": 1, "score": 1, "last_activity_date": 1559977873, "creation_date": 1559940853, "question_id": 56501112, "link": "https://stackoverflow.com/questions/56501112/haskell-emacs-haskell-mode-run-c-h-f-haskell-mode-for-instruction-how-to-setu", "title": "Haskell Emacs haskell-mode: Run &#39;C-h f haskell-mode&#39; for instruction how to setup a Haskell interaction mode", "body": "<p>I am following the tutorial in <a href=\"https://learnhaskell.blogspot.com/2007/09/lesson-1-hello-world.html\" rel=\"nofollow noreferrer\">https://learnhaskell.blogspot.com/2007/09/lesson-1-hello-world.html</a></p>\n\n<p>I followed all the instructions but on emacs when I type in <code>C-c C-l</code>, I get <code>Run 'C-h f haskell-mode' for instruction how to setup a Haskell interaction mode</code></p>\n\n<p>When I type that it takes me a page which is not very helpful. </p>\n\n<p>What do I do next? I followed the steps exactly in the tutorial except for removing the version numbers for <code>ghi, emacs</code> for <code>apt</code>. </p>\n\n<p>My <code>.emacs</code> file is as follows, exactly like in the blog.</p>\n\n<pre><code>;; Font Locking, Programming Modes, and Compilation settings\n;;\n\n(global-font-lock-mode 1)\n;; maximum colors\n(setq font-lock-maximum-decoration t)\n\n;; extra key bindings\n(global-set-key \"\\M-C\" 'compile)\n(global-set-key \"\\C-^\" 'next-error)\n(global-set-key \"\\C-\\M-g\" 'goto-line)\n\n;; use spaces instead of tabs\n(setq-default indent-tabs-mode nil)\n\n;; haskell mode configuration\n(setq auto-mode-alist\n      (append auto-mode-alist\n              '((\"\\\\.[hg]s$\"  . haskell-mode)\n                (\"\\\\.hic?$\"     . haskell-mode)\n                (\"\\\\.hsc$\"     . haskell-mode)\n  (\"\\\\.chs$\"    . haskell-mode)\n                (\"\\\\.l[hg]s$\" . literate-haskell-mode))))\n(autoload 'haskell-mode \"haskell-mode\"\n   \"Major mode for editing Haskell scripts.\" t)\n(autoload 'literate-haskell-mode \"haskell-mode\"\n   \"Major mode for editing literate Haskell scripts.\" t)\n\n;adding the following lines according to which modules you want to use:\n(require 'inf-haskell)\n\n(add-hook 'haskell-mode-hook 'turn-on-font-lock)\n;(add-hook 'haskell-mode-hook 'turn-off-haskell-decl-scan)\n;(add-hook 'haskell-mode-hook 'turn-off-haskell-doc-mode)\n(add-hook 'haskell-mode-hook 'turn-on-haskell-indent)\n;(add-hook 'haskell-mode-hook 'turn-on-haskell-simple-indent)\n;(add-hook 'haskell-mode-hook 'turn-on-haskell-hugs)\n(add-hook 'haskell-mode-hook 'turn-on-haskell-ghci)\n(add-hook 'haskell-mode-hook \n   (function\n    (lambda ()\n      (setq haskell-program-name \"ghci\")\n      (setq haskell-ghci-program-name \"ghci6\"))))\n\n</code></pre>\n"}, {"tags": ["haskell", "ghc", "compiler-warnings", "data-kinds"], "comments": [{"owner": {"reputation": 78982, "user_id": 1848654, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/84180c0f3c9c04f8b8f0613fc0129dac?s=128&d=identicon&r=PG", "display_name": "melpomene", "link": "https://stackoverflow.com/users/1848654/melpomene"}, "edited": false, "score": 6, "creation_date": 1559932415, "post_id": 56499518, "comment_id": 99588333, "body": "<a href=\"https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#distinguishing-between-types-and-constructors\" rel=\"nofollow noreferrer\">downloads.haskell.org/~ghc/latest/docs/html/users_guide/&hellip;</a> &quot;<i>As a convenience, GHC allows you to omit the quote mark when the name is unambiguous. However, our experience has shown that the quote mark helps to make code more readable and less error-prone.</i>&quot;"}, {"owner": {"reputation": 7012, "user_id": 834176, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/jsN88.png?s=128&g=1", "display_name": "Keith Pinson", "link": "https://stackoverflow.com/users/834176/keith-pinson"}, "reply_to_user": {"reputation": 78982, "user_id": 1848654, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/84180c0f3c9c04f8b8f0613fc0129dac?s=128&d=identicon&r=PG", "display_name": "melpomene", "link": "https://stackoverflow.com/users/1848654/melpomene"}, "edited": false, "score": 0, "creation_date": 1559934210, "post_id": 56499518, "comment_id": 99589028, "body": "@melpomene Thanks for pointing that out. I would be curious to hear more detail on &quot;more readable and less error-prone&quot; (is readability here a matter of background---more readable for Haskellers, but perhaps not more so for Idris folks, etc? what kind of errors can occur? etc.)"}, {"owner": {"reputation": 78982, "user_id": 1848654, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/84180c0f3c9c04f8b8f0613fc0129dac?s=128&d=identicon&r=PG", "display_name": "melpomene", "link": "https://stackoverflow.com/users/1848654/melpomene"}, "edited": false, "score": 0, "creation_date": 1559937632, "post_id": 56499518, "comment_id": 99590336, "body": "Yeah. Unfortunately that is all I was able to find in the manual."}, {"owner": {"reputation": 81794, "user_id": 9859, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/KEZOL.jpg?s=128&g=1", "display_name": "rampion", "link": "https://stackoverflow.com/users/9859/rampion"}, "edited": false, "score": 4, "creation_date": 1559939086, "post_id": 56499518, "comment_id": 99590830, "body": "Given <code>data Proxy (t :: k)</code> and <code>newtype Identity a = Identity a</code>, <code>Proxy Identity</code> and <code>Proxy &#39;Identity</code> aren&#39;t the same type. I find using <code>&#39;</code> uniformly even when unambiguous makes it easier for me to read data kinds."}, {"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 2, "creation_date": 1559939087, "post_id": 56499518, "comment_id": 99590831, "body": "I guess it&#39;s also due to <code>data T = T</code> being legal in Haskell, unlike Agda. Hence we need to disambiguate between <code>F T</code> and <code>F &#39;T</code> when <code>F</code> is polykinded and can accept both <code>T :: *</code> and <code>&#39;T :: T</code>."}], "owner": {"reputation": 7012, "user_id": 834176, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/jsN88.png?s=128&g=1", "display_name": "Keith Pinson", "link": "https://stackoverflow.com/users/834176/keith-pinson"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 157, "favorite_count": 1, "answer_count": 0, "score": 4, "last_activity_date": 1559931796, "creation_date": 1559931796, "question_id": 56499518, "link": "https://stackoverflow.com/questions/56499518/what-kind-of-problems-might-result-from-unquoted-lifted-constructors", "title": "What kind of problems might result from unquoted lifted constructors?", "body": "<p>I am using the GHC extension <code>-XDataKinds</code> and have <code>-Wall</code> turned on in a Haskell library I am writing. I am getting a warning about using unticked promoted constructors because <code>-Wall</code> implies <a href=\"https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/using-warnings.html#ghc-flag--Wunticked-promoted-constructors\" rel=\"nofollow noreferrer\"><code>-Wunticked-promoted-constructors</code></a>. I'm wondering why this warning is important; if I am allowed to write in an unticked style in the default syntax, what's the harm?</p>\n\n<p>Most of the dependently typed code I've written has been in Idris (and a little in Agda) and so I'm used to a unified namespace of types and values. As such it feels natural to me to write in an unticked style. However, if there is potential harm in it, I will add the ticks. But I don't want to do that without understanding why.</p>\n\n<p>So for example, if I have a data type like this:</p>\n\n<pre><code>data HasDefault = IsDefaulted | NotDefaulted\n</code></pre>\n\n<p>that is used in a function signature like this:</p>\n\n<pre><code>setDefault :: a -&gt; T p NotDefaulted a -&gt; T p IsDefaulted a\n</code></pre>\n\n<p>then I get a warning like this (with <code>-Werror</code> also set):</p>\n\n<pre><code>C:\\path-to-my-lib\\src\\Lib.hs:103:46: error: [-Wunticked-promoted-constructors, -Werror=unticked-promoted-constructors]\n    Unticked promoted constructor: `IsDefaulted'.\n    Use 'IsDefaulted instead of `IsDefaulted'.\n    |\n103 | setDefault :: a -&gt; T p NotDefaulted a -&gt; T p IsDefaulted a\n    |                                              ^^^^^^^^^^^\n</code></pre>\n\n<p>Should I worry about this, and make sure to be diligent about the ticking lifted constructors? Or should I turn the warning off?</p>\n"}, {"tags": ["haskell", "category-theory"], "comments": [{"owner": {"reputation": 4854, "user_id": 446357, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/2374e43485f6caeb3302e66c327608e2?s=128&d=identicon&r=PG", "display_name": "MTilsted", "link": "https://stackoverflow.com/users/446357/mtilsted"}, "edited": false, "score": 8, "creation_date": 1559917706, "post_id": 56496177, "comment_id": 99581385, "body": "If a=4 and b=5 then it is not true that &quot;b &lt;= a&quot;"}, {"owner": {"reputation": 25967, "user_id": 1743843, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/8ea2c1d9051e40332376a07bc166d9d5?s=128&d=identicon&r=PG&f=1", "display_name": "softshipper", "link": "https://stackoverflow.com/users/1743843/softshipper"}, "reply_to_user": {"reputation": 4854, "user_id": 446357, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/2374e43485f6caeb3302e66c327608e2?s=128&d=identicon&r=PG", "display_name": "MTilsted", "link": "https://stackoverflow.com/users/446357/mtilsted"}, "edited": false, "score": 0, "creation_date": 1559917824, "post_id": 56496177, "comment_id": 99581439, "body": "But why does he mention <code>le</code> instead of <code>eq</code>?"}, {"owner": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "edited": false, "score": 1, "creation_date": 1559917888, "post_id": 56496177, "comment_id": 99581475, "body": "@zero_coding: because we are defining a (partial) <i>order</i> relation, not an <i>equality</i> relation."}, {"owner": {"reputation": 25967, "user_id": 1743843, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/8ea2c1d9051e40332376a07bc166d9d5?s=128&d=identicon&r=PG&f=1", "display_name": "softshipper", "link": "https://stackoverflow.com/users/1743843/softshipper"}, "edited": false, "score": 0, "creation_date": 1559917943, "post_id": 56496177, "comment_id": 99581505, "body": "Explain me about relation. I did not get the context."}, {"owner": {"reputation": 314794, "user_id": 67579, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/BJXub.png?s=128&g=1", "display_name": "Willem Van Onsem", "link": "https://stackoverflow.com/users/67579/willem-van-onsem"}, "edited": false, "score": 1, "creation_date": 1559918040, "post_id": 56496177, "comment_id": 99581566, "body": "A relation <i>~</i> on a set <i>S</i> is a subset on <i>S x S</i>, so we say <i>x ~ y</i> given <i>(x,y)</i> is in the subset. See: <a href=\"https://en.wikipedia.org/wiki/Binary_relation\" rel=\"nofollow noreferrer\">en.wikipedia.org/wiki/Binary_relation</a>"}, {"owner": {"reputation": 181215, "user_id": 82294, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/5c5f910416e2b92bb73fa59c56fe695d?s=128&d=identicon&r=PG", "display_name": "Dietrich Epp", "link": "https://stackoverflow.com/users/82294/dietrich-epp"}, "edited": false, "score": 1, "creation_date": 1559918515, "post_id": 56496177, "comment_id": 99581853, "body": "You can think of a relation as a function, like <code>Int -&gt; Int -&gt; Bool</code>. That defines a relation between <code>Int</code>."}, {"owner": {"reputation": 8440, "user_id": 402428, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b17015101f2649d332c389337897816b?s=128&d=identicon&r=PG", "display_name": "michid", "link": "https://stackoverflow.com/users/402428/michid"}, "edited": false, "score": 0, "creation_date": 1559920767, "post_id": 56496177, "comment_id": 99583070, "body": "See also this answer, where I tried to capture the intuition behind those relations:  <a href=\"https://stackoverflow.com/a/55918071/402428\">stackoverflow.com/a/55918071/402428</a>"}, {"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 0, "creation_date": 1560261709, "post_id": 56496177, "comment_id": 99672547, "body": "FYI: general questions about relations, partial orders, total orders, equivalence relations, etc., are probably better directed to <a href=\"https://math.stackexchange.com\">Mathematics</a>. This particular question, though, would probably have been better posed as an Internet search."}], "answers": [{"comments": [{"owner": {"reputation": 61419, "user_id": 849891, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/MbEO3.png?s=128&g=1", "display_name": "Will Ness", "link": "https://stackoverflow.com/users/849891/will-ness"}, "edited": false, "score": 0, "creation_date": 1560182688, "post_id": 56496501, "comment_id": 99642999, "body": "that&#39;s still only a preorder, because it&#39;s not antisymmetric for conjugates (e.g. (2,3) and (2,-3) )."}, {"owner": {"reputation": 384463, "user_id": 1126841, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fa05233b2357f8d11c22ef4cfc7bb85c?s=128&d=identicon&r=PG", "display_name": "chepner", "link": "https://stackoverflow.com/users/1126841/chepner"}, "reply_to_user": {"reputation": 61419, "user_id": 849891, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/MbEO3.png?s=128&g=1", "display_name": "Will Ness", "link": "https://stackoverflow.com/users/849891/will-ness"}, "edited": false, "score": 0, "creation_date": 1560183457, "post_id": 56496501, "comment_id": 99643341, "body": "Ugh, right. Sigh. I&#39;m too lazy to come up with a good total order; any suggestions?"}, {"owner": {"reputation": 61419, "user_id": 849891, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/MbEO3.png?s=128&g=1", "display_name": "Will Ness", "link": "https://stackoverflow.com/users/849891/will-ness"}, "edited": false, "score": 1, "creation_date": 1560184789, "post_id": 56496501, "comment_id": 99643922, "body": "lexicographic on <code>abs</code> and <code>arg</code> (with <code>arg</code> limited to <code>[0,2pi)</code>; special casing the <code>0</code>) ...? better &quot;leave it as an exercise to a reader&quot;, heh. :)"}, {"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 1, "creation_date": 1560261524, "post_id": 56496501, "comment_id": 99672432, "body": "The reason we say the complex numbers are not ordered is more specific than that: there&#39;s no total order that makes them an <a href=\"https://en.wikipedia.org/wiki/Ordered_ring\" rel=\"nofollow noreferrer\">ordered ring</a>."}, {"owner": {"reputation": 61419, "user_id": 849891, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/MbEO3.png?s=128&g=1", "display_name": "Will Ness", "link": "https://stackoverflow.com/users/849891/will-ness"}, "edited": false, "score": 0, "creation_date": 1560631526, "post_id": 56496501, "comment_id": 99802548, "body": "btw the simple lexicographical ordering on <code>real</code> and <code>imag</code> works too."}], "tags": [], "owner": {"reputation": 384463, "user_id": 1126841, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fa05233b2357f8d11c22ef4cfc7bb85c?s=128&d=identicon&r=PG", "display_name": "chepner", "link": "https://stackoverflow.com/users/1126841/chepner"}, "is_accepted": false, "score": 4, "last_activity_date": 1560228953, "last_edit_date": 1560228953, "creation_date": 1559918617, "answer_id": 56496501, "question_id": 56496177, "link": "https://stackoverflow.com/questions/56496177/what-is-partial-order/56496501#56496501", "title": "What is partial order?", "body": "<p>To understand the distinction, you need to look at sets other than integers. Consider the complex numbers. A valid preorder on the complex numbers could say <code>z1 &lt;= z2</code> if and only if <code>real(z1) &lt;= real(z2)</code>. Thus, <code>(3, 5) &lt;= (3, 6)</code> and <code>(3, 6) &lt;= (3, 5)</code>. This is not a <em>partial</em> order, though, because <code>(3, 5) != (3, 6)</code>.</p>\n\n<p>Adding the condition that <code>z1 &lt;= z2</code> also requires <code>imag(z1) &lt;= imag(z2)</code> makes this a preorder, since now <code>(3, 5) &lt;= (3, 6)</code> but not vice versa. It's still not a <em>total</em> order, because neither <code>(2, 3) &lt;= (3, 2)</code> nor <code>(3, 2) &lt;=(2, 3)</code> is true.</p>\n\n<p>Instead, one could say <code>z1 &lt;= z2</code> if and only if <strike><code>real(z1) &lt;= real(z2)</code> and <code>abs(z1) &lt;= abs(z2)</code>. Now <code>(3, 5) &lt;= (3, 6)</code> is still true, but <code>(3, 6) &lt;= (3, 5)</code> is not because <code>sqrt(3**2 + 6**2) &gt; sqrt(3**2 + 5**2)</code>. But we can say that <code>(2, 3) &lt;= (3, 2)</code> because <code>2 &lt;= 3</code> and <code>sqrt(13) &lt;= sqrt(13)</code></strike>. This makes the <code>&lt;=</code> operator a total order. (Update: checking whether  lexicographical ordering on <code>abs</code> and <code>arg</code> -- with <code>arg</code> limited to <code>(-pi,pi]</code> while special casing the <code>0</code> -- <em>is</em> a proper total order, is left as an exercise to a reader.)</p>\n\n<p>(Normally, we say the complex numbers are <em>not</em> ordered because there are several ways one could define a total order, but no single \"natural\" ordering.)</p>\n"}, {"tags": [], "owner": {"reputation": 46777, "user_id": 1100107, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/8789d3da0b482bcd8e562bfdf3687c74?s=128&d=identicon&r=PG", "display_name": "St&#233;phane Laurent", "link": "https://stackoverflow.com/users/1100107/st%c3%a9phane-laurent"}, "is_accepted": false, "score": 5, "last_activity_date": 1560261208, "last_edit_date": 1560261208, "creation_date": 1559919096, "answer_id": 56496630, "question_id": 56496177, "link": "https://stackoverflow.com/questions/56496177/what-is-partial-order/56496630#56496630", "title": "What is partial order?", "body": "<p>The divisibility of a positive natural number by another positive natural number is an example of partial order which is not a total order (x divides y if y/x is a natural number).</p>\n\n<p>1) If x divides y and if y divides z, then x divides z (transitivity).</p>\n\n<p>2) If x divides y and y divides x, then x = y (antisymmetry).</p>\n\n<p>3) x divides x (reflexivity).</p>\n\n<p>These are the three properties of a partial order.</p>\n\n<p>But this is not a total order, because you can find two natural numbers x and y such that x does not divide y and y does not divide x.</p>\n"}, {"comments": [{"owner": {"reputation": 7030, "user_id": 3032349, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/3cd8d19756aa9bc73d8045ae988ae728?s=128&d=identicon&r=PG&f=1", "display_name": "ThreeFx", "link": "https://stackoverflow.com/users/3032349/threefx"}, "edited": false, "score": 1, "creation_date": 1560092737, "post_id": 56496857, "comment_id": 99617075, "body": "A partial order also requires transitivity, if I recall correctly."}], "tags": [], "owner": {"reputation": 55059, "user_id": 212858, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1166c87b6f3fc2e6746da96b60fefb46?s=128&d=identicon&r=PG", "display_name": "Useless", "link": "https://stackoverflow.com/users/212858/useless"}, "is_accepted": true, "score": 9, "last_activity_date": 1560170177, "last_edit_date": 1592644375, "creation_date": 1559919821, "answer_id": 56496857, "question_id": 56496177, "link": "https://stackoverflow.com/questions/56496177/what-is-partial-order/56496857#56496857", "title": "What is partial order?", "body": "<blockquote>\n<p><strong>if</strong> a &lt;= b ...</p>\n</blockquote>\n<p>so <code>a = 4</code> and <code>b = 5</code>  satisfy the first inequality</p>\n<blockquote>\n<p><strong>and</strong> b &lt;= a</p>\n</blockquote>\n<p>but they don't satisfy the second inequality. So, your counterexample is invalid.</p>\n<p>Let's forget <code>&lt;=</code> because I suspect it's tricking you into thinking about integers or some other set of numbers you're familiar with. So, we'll re-write it with some arbitrary relation, say \u00a4</p>\n<blockquote>\n<p><strong>if</strong> a \u00a4 b is true</p>\n<p><strong>and</strong> b \u00a4 a is true</p>\n<p><strong>and</strong> this always implies that a is the same entity as b</p>\n<p><em>then</em> we call relation \u00a4 a &quot;partial order&quot; (over whatever set a, b are drawn from)</p>\n</blockquote>\n<p>All the author is saying is that for some relation, <strong>if</strong> the given rule is true, <strong>then</strong> we call that relation a partial order. This is the author's <em>definition</em> of a partial order. If you find some situation where the rule doesn't hold - that just means you found a type of relation that is <em>not</em> a partial order.</p>\n<p>Anyway, the reason for defining a <em>partial</em> order is that sometimes we have collections of objects, and we can't compare all of them to each other.</p>\n<p>For example, a set of grades for different subjects: perhaps I can decide whether one student is better at English than another, and I can decide whether one student is better at Music than another, but it doesn't make sense to discuss whether one student's English is better than another's Music.</p>\n<p>The last quote just means that if we have a relation which is <em>at least</em> a partial order (it satisfies the rule given) <em>and</em> it can be applied to your whole set (say we're only discussing English grades), <em>then</em> we can call it a total order over that set.</p>\n<hr />\n<p>PS. As it happens the rule <em>does</em> hold for the usual <code>&lt;=</code> with integers: hence, we can call the relation <code>&lt;=</code> a partial order over \u2124. Since it is <em>also</em> defined for every pair of integers, we can <em>also</em> call <code>&lt;=</code> a total order on \u2124.</p>\n<p>PPS. Yes, a partial order also requires transitivity: my answer really only addresses the fairly informal definition quoted in the question. You can find more complete definitions at <a href=\"http://mathworld.wolfram.com/PartialOrder.html\" rel=\"nofollow noreferrer\">Wolfram MathWorld</a>, <a href=\"https://en.wikipedia.org/wiki/Partially_ordered_set\" rel=\"nofollow noreferrer\">Wikipedia</a> or wherever.</p>\n"}, {"comments": [{"owner": {"reputation": 7030, "user_id": 3032349, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/3cd8d19756aa9bc73d8045ae988ae728?s=128&d=identicon&r=PG&f=1", "display_name": "ThreeFx", "link": "https://stackoverflow.com/users/3032349/threefx"}, "edited": false, "score": 0, "creation_date": 1560092816, "post_id": 56497299, "comment_id": 99617102, "body": "<code>c</code> and <code>e</code> look very similar, at least on my monitor. Maybe a higher resolution would help?"}, {"owner": {"reputation": 16362, "user_id": 49220, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/431cd43aaf713caa80316e852a87a840?s=128&d=identicon&r=PG", "display_name": "Paul Johnson", "link": "https://stackoverflow.com/users/49220/paul-johnson"}, "reply_to_user": {"reputation": 7030, "user_id": 3032349, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/3cd8d19756aa9bc73d8045ae988ae728?s=128&d=identicon&r=PG&f=1", "display_name": "ThreeFx", "link": "https://stackoverflow.com/users/3032349/threefx"}, "edited": false, "score": 1, "creation_date": 1560095023, "post_id": 56497299, "comment_id": 99617584, "body": "@ThreeFx Agreed. Done."}, {"owner": {"reputation": 61419, "user_id": 849891, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/MbEO3.png?s=128&g=1", "display_name": "Will Ness", "link": "https://stackoverflow.com/users/849891/will-ness"}, "edited": false, "score": 1, "creation_date": 1560185115, "post_id": 56497299, "comment_id": 99644085, "body": "the relation in 2nd para is a <i>transitive closure</i> of the one in the 1st (i.e. not the same). your discussion in 3rd para is also off. if you say y&lt;=x it already means x <i>is</i> reachable from y; but, if they weren&#39;t the same, it&#39;d violate the DAG presupposition. that&#39;s why they must be the same (or it wouldn&#39;t be a DAG)."}], "tags": [], "owner": {"reputation": 16362, "user_id": 49220, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/431cd43aaf713caa80316e852a87a840?s=128&d=identicon&r=PG", "display_name": "Paul Johnson", "link": "https://stackoverflow.com/users/49220/paul-johnson"}, "is_accepted": false, "score": 3, "last_activity_date": 1560183809, "last_edit_date": 1560183809, "creation_date": 1559921333, "answer_id": 56497299, "question_id": 56496177, "link": "https://stackoverflow.com/questions/56496177/what-is-partial-order/56497299#56497299", "title": "What is partial order?", "body": "<p>Consider this <a href=\"https://en.wikipedia.org/wiki/Directed_acyclic_graph\" rel=\"nofollow noreferrer\">Directed Acyclic Graph</a>:</p>\n\n<p><a href=\"https://i.stack.imgur.com/cwlpP.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/cwlpP.png\" alt=\"Example DAG from Wikipedia\"></a></p>\n\n<p>If we say that an arrow on this graph stands for the <code>&lt;=</code> relation then we can see that <code>a &lt;= c</code> and <code>c&lt;=d</code>. But it is not the case that <code>b&lt;=c</code> nor does <code>c&lt;=b</code> hold. Hence we have an order, but it is only partial because it only exists for some pairs of items in the domain.</p>\n\n<p>In general a DAG defines a partial order on its members. Even if the arrow from <code>a</code> to <code>e</code> were not included we could still say that <code>a&lt;=c</code> and <code>c&lt;=e</code>, so therefore <code>a&lt;=e</code>.</p>\n\n<p>Bear in mind that we are not interpreting \"x &lt;= y\" as meaning anything other than \"I can get from x to y by following arrows on the diagram\". Now suppose we have two letters x and y, and we know that x &lt;= y and y &lt;= x. If x and y are different and you can get from x to y then you can't get from y to x. Hence it is not possible for x and y to be different items, so they must both be the same item.</p>\n\n<p>A total order, on the other hand, exists for all pairs of items. The integers, for instance, have a total order.</p>\n"}], "owner": {"reputation": 25967, "user_id": 1743843, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/8ea2c1d9051e40332376a07bc166d9d5?s=128&d=identicon&r=PG&f=1", "display_name": "softshipper", "link": "https://stackoverflow.com/users/1743843/softshipper"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 304, "favorite_count": 0, "accepted_answer_id": 56496857, "answer_count": 4, "score": 2, "last_activity_date": 1560261208, "creation_date": 1559917546, "last_edit_date": 1559917789, "question_id": 56496177, "link": "https://stackoverflow.com/questions/56496177/what-is-partial-order", "title": "What is partial order?", "body": "<p>I am reading category theory for programmers from Bartosz Milewski and I did not get the idea of <a href=\"https://bartoszmilewski.com/2014/12/05/categories-great-and-small/\" rel=\"nofollow noreferrer\">partial order</a>. </p>\n\n<p>I did not get the context of the following sentences: </p>\n\n<blockquote>\n  <p>You can also have a stronger relation, that satisfies an additional\n  condition that, if a &lt;= b and b &lt;= a then a must be the same as b.\n  That\u2019s called a partial order.</p>\n</blockquote>\n\n<p>Why <code>a</code> must be the same as <code>b</code>? For example, <code>a = 4</code> and <code>b = 5</code>, so it is not the same at all. If he would mention </p>\n\n<blockquote>\n  <p>....if a = b and b = a....</p>\n</blockquote>\n\n<p>Then yes, I would agree. </p>\n\n<p>The second part, that I also do not understand: </p>\n\n<blockquote>\n  <p>Finally, you can impose the condition that any two objects are in a\n  relation with each other, one way or another; and that gives you a\n  linear order or total order.</p>\n</blockquote>\n\n<p>What does he mean?</p>\n"}, {"tags": ["haskell", "types", "typeclass", "language-extension"], "comments": [{"owner": {"reputation": 1963, "user_id": 2840542, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/eO77F.jpg?s=128&g=1", "display_name": "AntC", "link": "https://stackoverflow.com/users/2840542/antc"}, "edited": false, "score": 3, "creation_date": 1559885610, "post_id": 56487391, "comment_id": 99566079, "body": "This is an example of the harm GHC&#39;s error messages are causing. Your original class <code>Table</code> would not compile. GHC issued a message saying <code>AllowAmbiguousTypes</code> might help. So I see you switched it on. Terrible idea, and GHC should never have mentioned it. Functional Dependencies, per @typedfern&#39;s answer is a much better approach. Grr. I am trying to fix GHC to stop making ridiculous suggestions -- esp for newbies."}, {"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "reply_to_user": {"reputation": 1963, "user_id": 2840542, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/eO77F.jpg?s=128&g=1", "display_name": "AntC", "link": "https://stackoverflow.com/users/2840542/antc"}, "edited": false, "score": 1, "creation_date": 1559892130, "post_id": 56487391, "comment_id": 99568401, "body": "@AntC I agree and disagree. In general, <code>AllowAmbiguousTypes</code> is perfectly fine if you are then prepared to use <code>TypeApplications</code> to disambiguate. I prefer that to using proxies. OTOH, in this specific case, it is not the right solution, and the GHC suggestion is not appropriate. Here, fundeps (or type families) should be used."}, {"owner": {"reputation": 1963, "user_id": 2840542, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/eO77F.jpg?s=128&g=1", "display_name": "AntC", "link": "https://stackoverflow.com/users/2840542/antc"}, "edited": false, "score": 1, "creation_date": 1559947813, "post_id": 56487391, "comment_id": 99592933, "body": "People who know what they&#39;re doing/plan to use <code>TypeApplications</code> probably have <code>AllowAmbiguousTypes</code> switched on. So the message should be appropriate for people who make a mistake in their method sigs. It should mention all the possible approaches/corrections, not favour an advanced feature (which it doesn&#39;t actually name) and keep otherwise silent. This is the type astronauts taking over the hen-house."}], "answers": [{"comments": [{"owner": {"reputation": 56659, "user_id": 450128, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/2f72b3fdc99fe9fd1bbeb2f9da1d2c0a?s=128&d=identicon&r=PG", "display_name": "Ben", "link": "https://stackoverflow.com/users/450128/ben"}, "edited": false, "score": 1, "creation_date": 1559887020, "post_id": 56487518, "comment_id": 99566487, "body": "If you can&#39;t use <code>FunctionalDependencies</code> (because you need to support two different <code>Table a b c</code> for the same <code>a</code> and different <code>b</code> and/or <code>c</code>), you can split <code>decrement</code> off into a separate class, and have <code>class Decrement a =&gt; Table a b c where evaluate :: a -&gt; b -&gt; c</code>. This means every <code>Table</code> sharing an <code>a</code> must <code>decrement</code> its <code>a</code>s the same way, but they can still <code>evaluate</code> differently, unlike <code>class Table a b c | a -&gt; b c</code> where if two <code>Table</code> instances share an <code>a</code> they must actually be the same instance."}], "tags": [], "owner": {"reputation": 1275, "user_id": 11571245, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/vkCkX.png?s=128&g=1", "display_name": "typedfern", "link": "https://stackoverflow.com/users/11571245/typedfern"}, "is_accepted": true, "score": 7, "last_activity_date": 1559877355, "creation_date": 1559877355, "answer_id": 56487518, "question_id": 56487391, "link": "https://stackoverflow.com/questions/56487391/multiparamtypeclasses-why-is-this-type-variable-ambiguous/56487518#56487518", "title": "MultiParamTypeClasses - Why is this type variable ambiguous?", "body": "<p>The problem is that, since <code>decrement</code> only requires the <code>a</code> type, there is no way to figure out which types <code>b</code> and <code>c</code> should be, even at the point where the function is called (thus solving the polymorphism into a specific type) - therefore, GHC would be unable to decide which instance to use.</p>\n\n<p>For example: let's suppose you have two instances of Table: <code>Table Int String Bool</code>, and Table <code>Int Bool Float</code>; you call your function <code>d</code> in a context where it is supposed to map an Int to another Int - problem is, that matches <em>both</em> instances! (<code>a</code> is Int for both).</p>\n\n<p>Notice how, if you make your function equal to <code>evalutate</code>:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>d = evalutate\n</code></pre>\n\n<p>then the compiler accepts it. This is because, since <code>evalutate</code> depends on the three type parameters a, b, and c, the context at the call site would allow for non-ambiguous instance resolution - just check which are the types for a, b, and c at the place where it is called.</p>\n\n<p>This is, of course, not usually a problem for single-parameter type classes - only one type to resolve; it is when we deal with multiple parameters that things get complicated...</p>\n\n<p>One common solution is to use <a href=\"https://wiki.haskell.org/Functional_dependencies\" rel=\"noreferrer\">functional dependencies</a> - make <code>b</code> and <code>c</code> depend on <code>a</code>:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code> class Table a b c | a -&gt; b c where\n  decrement :: a -&gt; a\n  evalutate :: a -&gt; b -&gt; c\n</code></pre>\n\n<p>This tells the compiler that, for every instance of Table for a given type <code>a</code>, there will be one, and only one, instance (<code>b</code> and <code>c</code> will be uniquely determined by <code>a</code>); so it will know that there won't be any ambiguities and accept your <code>d = decrement</code> happily.</p>\n"}], "owner": {"reputation": 693, "user_id": 7564554, "user_type": "registered", "accept_rate": 82, "profile_image": "https://lh3.googleusercontent.com/-h7KkTmgJty0/AAAAAAAAAAI/AAAAAAAAAAo/ZFEGeg_bQ6Y/photo.jpg?sz=128", "display_name": "Eben Kadile", "link": "https://stackoverflow.com/users/7564554/eben-kadile"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 450, "favorite_count": 1, "accepted_answer_id": 56487518, "answer_count": 1, "score": 6, "last_activity_date": 1574461954, "creation_date": 1559875775, "last_edit_date": 1574461954, "question_id": 56487391, "link": "https://stackoverflow.com/questions/56487391/multiparamtypeclasses-why-is-this-type-variable-ambiguous", "title": "MultiParamTypeClasses - Why is this type variable ambiguous?", "body": "<p>Suppose I define a <a href=\"https://wiki.haskell.org/Multi-parameter_type_class\" rel=\"nofollow noreferrer\">multi-parameter type class</a>:</p>\n\n<pre><code>{-# LANGUAGE MultiParamTypeClasses, AllowAmbiguousTypes, FlexibleContexts, FlexibleInstances #-}\n\nclass Table a b c where\n  decrement :: a -&gt; a\n  evalutate :: a -&gt; b -&gt; c\n</code></pre>\n\n<p>Then I define a function that uses <code>decrement</code>, for simplicity:</p>\n\n<pre><code>d = decrement\n</code></pre>\n\n<p>When I try to load this in <code>ghci</code> (version 8.6.3):</p>\n\n<pre><code>\u2022 Could not deduce (Table a b0 c0)\n    arising from a use of \u2018decrement\u2019\n  from the context: Table a b c\n    bound by the type signature for:\n               d :: forall a b c. Table a b c =&gt; a -&gt; a\n    at Thing.hs:13:1-28\n  The type variables \u2018b0\u2019, \u2018c0\u2019 are ambiguous\n  Relevant bindings include d :: a -&gt; a (bound at Thing.hs:14:1)\n  These potential instance exist:\n    instance Table (DummyTable a b) a b\n</code></pre>\n\n<p>This is confusing to me because the type of <code>d</code> is exactly the type of <code>decrement</code>, which is denoted in the class declaration.</p>\n\n<p>I thought of the following workaround:</p>\n\n<pre><code>data Table a b = Table (a -&gt; b) ((Table a b) -&gt; (Table a b))\n</code></pre>\n\n<p>But this seems notationally inconvenient, and I also just wanted to know why I was getting this error message in the first place.</p>\n"}, {"tags": ["haskell"], "comments": [{"owner": {"reputation": 11366, "user_id": 3922954, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/76ba47d2fdd24ab56b0b273cce2075e5?s=128&d=identicon&r=PG&f=1", "display_name": "AJF", "link": "https://stackoverflow.com/users/3922954/ajf"}, "edited": false, "score": 0, "creation_date": 1559874390, "post_id": 56486856, "comment_id": 99564152, "body": "The compiler just happened to figure out that <code>b</code> had a contradictory type first. This is completely arbitrary, but probably because it works backwards through function application (<code>f a b = (f a) b</code>.) As for why it doesn&#39;t complain about <code>a</code>,\u2014why should it go further when it already knows there&#39;s a mistake?"}, {"owner": {"reputation": 181, "user_id": 3186072, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/54637aeab7e6de256d7d4dac5efc1edb?s=128&d=identicon&r=PG&f=1", "display_name": "MonkeySeeMonkeyCode", "link": "https://stackoverflow.com/users/3186072/monkeyseemonkeycode"}, "reply_to_user": {"reputation": 11366, "user_id": 3922954, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/76ba47d2fdd24ab56b0b273cce2075e5?s=128&d=identicon&r=PG&f=1", "display_name": "AJF", "link": "https://stackoverflow.com/users/3922954/ajf"}, "edited": false, "score": 0, "creation_date": 1559875046, "post_id": 56486856, "comment_id": 99564251, "body": "Thanks @AJFarmar, the fact that its arbitrary is already enough justification for me. I had a feeling that was either the case or that the recursive stack was starting with <code>b</code> instead of <code>a</code>. All good. I&#39;m still confused about why I see <code>[(Int, Double)]</code> however."}, {"owner": {"reputation": 11366, "user_id": 3922954, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/76ba47d2fdd24ab56b0b273cce2075e5?s=128&d=identicon&r=PG&f=1", "display_name": "AJF", "link": "https://stackoverflow.com/users/3922954/ajf"}, "edited": false, "score": 0, "creation_date": 1559876509, "post_id": 56486856, "comment_id": 99564437, "body": "For the same reason. It probably works either forwards or backwards through the functions. <code>ai</code> is the first to be applied to in <code>\\ (ai, bi) -&gt; ai * (x ** bi)</code>, so it only makes sense that that&#39;s the type that should be affected. Once again, this is just as arbitrary as complaining about <code>b</code>."}, {"owner": {"reputation": 181, "user_id": 3186072, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/54637aeab7e6de256d7d4dac5efc1edb?s=128&d=identicon&r=PG&f=1", "display_name": "MonkeySeeMonkeyCode", "link": "https://stackoverflow.com/users/3186072/monkeyseemonkeycode"}, "reply_to_user": {"reputation": 11366, "user_id": 3922954, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/76ba47d2fdd24ab56b0b273cce2075e5?s=128&d=identicon&r=PG&f=1", "display_name": "AJF", "link": "https://stackoverflow.com/users/3922954/ajf"}, "edited": false, "score": 0, "creation_date": 1559877675, "post_id": 56486856, "comment_id": 99564587, "body": "@AJFarmar Thanks. So, is the idea here that the compiler catches <code>b</code> first, for whatever reason, and since it has not yet gotten to <code>a</code>, it has assumed that it would be, if correct, a <code>Double</code>, not knowing that if it processed <code>a</code> it would also be wrong (because there is no reason to go any further once we find an error)?"}, {"owner": {"reputation": 11366, "user_id": 3922954, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/76ba47d2fdd24ab56b0b273cce2075e5?s=128&d=identicon&r=PG&f=1", "display_name": "AJF", "link": "https://stackoverflow.com/users/3922954/ajf"}, "edited": false, "score": 0, "creation_date": 1559879470, "post_id": 56486856, "comment_id": 99564901, "body": "That&#39;s exactly correct. Not only is there no good reason to continue since there&#39;s already an irreparable error, but continuing would have to take into account the two possibilities of <code>Int</code> or <code>Double</code> for that particular case, so type inference becomes twice as complex."}, {"owner": {"reputation": 56659, "user_id": 450128, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/2f72b3fdc99fe9fd1bbeb2f9da1d2c0a?s=128&d=identicon&r=PG", "display_name": "Ben", "link": "https://stackoverflow.com/users/450128/ben"}, "edited": false, "score": 1, "creation_date": 1559880223, "post_id": 56486856, "comment_id": 99565034, "body": "But it doesn&#39;t catch <code>b</code> first. It catches <code>zip a</code>. Then it keeps going and also catches <code>b</code>."}], "answers": [{"comments": [{"owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "edited": false, "score": 0, "creation_date": 1559898382, "post_id": 56487588, "comment_id": 99571435, "body": "Could you elaborate what you mean by preferring <code>_ $ _ $ _ $ _</code> over <code>_ . _ . _ $ _</code> style? I daresay the latter is rather more idiomatic Haskell style, as a general tendency."}, {"owner": {"reputation": 22091, "user_id": 5684257, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ea5090cde8ea066a1fda67ed52dd5084?s=128&d=identicon&r=PG&f=1", "display_name": "HTNW", "link": "https://stackoverflow.com/users/5684257/htnw"}, "reply_to_user": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "edited": false, "score": 0, "creation_date": 1559923834, "post_id": 56487588, "comment_id": 99584704, "body": "Because <code>zip a b</code> is one conceptual unit, but you&#39;ve split it into two distant parts: <code>(_ . (_ . zip a)) $ b</code>. You end up needing two <code>_</code> holes to cover the error, and even then  you get weird output like <code>_ :: a0 -&gt; [(Double, Double)]</code>. The new <code>a0</code> variable is &quot;glue&quot;: it&#39;s a name to show the relationship between the two holes. You use one hole and you get a nicer <code>_ :: [(Double, Double)]</code>."}, {"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "edited": false, "score": 0, "creation_date": 1559929354, "post_id": 56487588, "comment_id": 99587160, "body": "@HTNW If you think of <code>zip a b</code> as one conceptual chunk, it&#39;s easy to retain that in the <code>_ . _ . _ $ _</code> style via <code>sum . map foo $ zip a b</code>. (Though of course in this case <code>sum $ zipWith foo a b</code> would be even better, and is in both styles!)"}, {"owner": {"reputation": 22091, "user_id": 5684257, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ea5090cde8ea066a1fda67ed52dd5084?s=128&d=identicon&r=PG&f=1", "display_name": "HTNW", "link": "https://stackoverflow.com/users/5684257/htnw"}, "reply_to_user": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "edited": false, "score": 0, "creation_date": 1564039869, "post_id": 56487588, "comment_id": 100901557, "body": "@DanielWagner But then you&#39;re back to where you started! If the error is actually in <code>foo</code>, or maybe you aren&#39;t supposed to use <code>map</code>, then the error messages devolve again. To me, the simple fact is that there is a linear structure here: <code>zip</code> <code>a</code> and <code>b</code>, then <code>map</code> <code>foo</code> over that, then <code>sum</code> it. This is reflected by <code>_ $ _ $ _</code>, while <code>_ . _ $ _</code> always introduces that artificial branch: apply (<code>sum</code> after <code>map foo</code>) to (<code>zip a b</code>)."}], "tags": [], "owner": {"reputation": 22091, "user_id": 5684257, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ea5090cde8ea066a1fda67ed52dd5084?s=128&d=identicon&r=PG&f=1", "display_name": "HTNW", "link": "https://stackoverflow.com/users/5684257/htnw"}, "is_accepted": false, "score": 5, "last_activity_date": 1559878112, "creation_date": 1559878112, "answer_id": 56487588, "question_id": 56486856, "link": "https://stackoverflow.com/questions/56486856/how-does-haskells-type-system-generate-this-error/56487588#56487588", "title": "How does Haskell&#39;s type system generate this error?", "body": "<blockquote>\n  <p>Why is it complaining about <code>b</code> when <code>a</code> comes before it in the expression and is equally wrong?</p>\n</blockquote>\n\n<p>...why not? You've said yourself that they are both wrong. GHC has also figured out they are both wrong. It's telling you they are both wrong. Also, <code>a</code> doesn't really come \"before\", because there is no real concept of \"before\" and \"after\" in Haskell. If anything, it's \"in-out\", not \"left-right\", and then <code>b</code> (underneath only a <code>($)</code>) is \"before\" the <code>a</code> (underneath <code>zip</code>, <code>(.)</code>, <em>and</em> <code>($)</code>). It doesn't matter, anyway.</p>\n\n<blockquote>\n  <p>In the top-most error, the expected type is <code>[(Double, Double)]</code>. Cool, makes sense. But how come the actual type is <code>[(Int, Double)]</code>? How did the double emerge if both <code>a</code> and <code>b</code> are <code>[Int]</code>?</p>\n</blockquote>\n\n<p><code>sum . map _etc . zip a</code> is expected to have type <code>[Int] -&gt; Double</code>, because of the type signature and because it's the left side of a <code>($)</code>. Drilling deeper, <code>zip a</code> is supposed to be <code>[Int] -&gt; [(Double, Double)]</code>. It is actually <code>forall b. [b] -&gt; [(Int, b)]</code>. Using the argument type, we can choose to set <code>b ~ Int</code>, thereby deducing that <code>zip a</code> is actually <code>[Int] -&gt; [(Int, Int)]</code> (which is true) where a <code>[Double] -&gt; [(Double, Double)]</code> was expected, or we can choose to set <code>b ~ Double</code> (from the return type) and decide that, actually, <code>zip a :: [Double] -&gt; [(Int, Double)]</code> (which is <em>also</em> true). Both ways you get an error. In fact, I think GHC is doing this in a third way, similar to the first, but I'll spare you the details.</p>\n\n<p>The core of the issue is this: in a Haskell program, there are multiple ways to figure out the type of an expression if you know the types of the stuff around or in it. In a well-typed program, all these derivations agree with each other, and, in an ill-typed program, they disagree, usually in multiple ways. GHC simply chooses two of them, calls them \"expected\" and \"actual\" in a way that hopefully makes sense, and complains that they disagree. Here, you found a third derivation that is also in conflict with the \"expected\" derivation, but GHC, for whatever reason, chose not to use your derivation for the \"actual type\". Choosing which derivation to show is not easy, especially in Haskell, where everything is allowed to affect the type of everything else, though it could definitely be better. Some years ago, one of GHC's leaders did <a href=\"https://www.microsoft.com/en-us/research/wp-content/uploads/2017/08/sherrloc-toplas.pdf\" rel=\"noreferrer\">some work</a> on much better error messages, but it appears to have link-rotted slightly\u2014the Haskell-analyzer bridge seems to have link-rotted off the Internet.</p>\n\n<p>If you're faced with an error like this, I would recommend, first of all, not writing in the <code>_ . _ . ... $ _</code> style. It's easier to follow my main advice if you write that as <code>_ $ _ $ ... $ _</code>. I won't change it here, but you should keep that in mind.</p>\n\n<pre><code>poly :: [Int] -&gt; [Int] -&gt; Double -&gt; Double\npoly a b x = sum . map (\\(ai, bi) -&gt; ai * (x ** bi)) . zip a $ b\n</code></pre>\n\n<p>You see an error and it's not immediately obvious what to change. Very well, simply give up trying to decipher the hieroglyphs and replace part(s) of the RHS with <code>_</code>. The more of the RHS you delete, the better your chance of catching the error, going to ~95% if you erase all of it:</p>\n\n<pre><code>poly a b x = sum . map (\\(ai, bi) -&gt; ai * (x ** bi)) . _ $ _\n-- personally, I'd nuke the scary-looking map _lambda, too,\n-- but I'm also trying to keep this short\n</code></pre>\n\n<p>GHC will tell you that the left <code>_</code> is meant to be <code>_a -&gt; [(Double, Double)]</code>, and the right one <code>_a</code>. Add the <code>zip</code>:</p>\n\n<pre><code>poly a b x = sum . map (\\(ai, bi) -&gt; ai * (x ** bi)) . zip _ $ _\n</code></pre>\n\n<p>and you'll be told you need two <code>[Double]</code>s, and you'll realize that using <code>a</code> and <code>b</code> didn't work because <code>a, b :: [Int]</code> (and GHC actually says <code>a :: [Int]; b :: [Int]</code> in the error message, because sometimes it isn't clear). You then figure out how to fix it:</p>\n\n<pre><code>poly a b x = sum . map (\\(ai, bi) -&gt; ai * (x ** bi)) . zip (fromIntegral &lt;$&gt; a) $ fromIntegral &lt;$&gt; b\n</code></pre>\n\n<p>All is well.</p>\n"}, {"comments": [{"owner": {"reputation": 181, "user_id": 3186072, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/54637aeab7e6de256d7d4dac5efc1edb?s=128&d=identicon&r=PG&f=1", "display_name": "MonkeySeeMonkeyCode", "link": "https://stackoverflow.com/users/3186072/monkeyseemonkeycode"}, "edited": false, "score": 0, "creation_date": 1560229048, "post_id": 56488555, "comment_id": 99655712, "body": "This is a wonderfully in-depth answer. The description of how the error may have been generated is great, but the latter half really helps with cementing my general understanding of the issue."}], "tags": [], "owner": {"reputation": 56659, "user_id": 450128, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/2f72b3fdc99fe9fd1bbeb2f9da1d2c0a?s=128&d=identicon&r=PG", "display_name": "Ben", "link": "https://stackoverflow.com/users/450128/ben"}, "is_accepted": true, "score": 2, "last_activity_date": 1559919294, "last_edit_date": 1559919294, "creation_date": 1559886137, "answer_id": 56488555, "question_id": 56486856, "link": "https://stackoverflow.com/questions/56486856/how-does-haskells-type-system-generate-this-error/56488555#56488555", "title": "How does Haskell&#39;s type system generate this error?", "body": "<blockquote>\n  <ol>\n  <li>Why is it complaining about <code>b</code> when a comes before it in the expression and is equally wrong?</li>\n  </ol>\n</blockquote>\n\n<p>Well, there are two errors. It complains about <code>zip a</code>, and it complains about <code>b</code>. And it issues those errors in the order they appear in the source.</p>\n\n<blockquote>\n  <ol start=\"2\">\n  <li>In the top-most error, the expected type is <code>[(Double, Double)]</code>. Cool, makes sense. But how come the actual type is <code>[(Int, Double)]</code>? How did the double emerge if both <code>a</code> and <code>b</code> are <code>[Int]</code>?</li>\n  </ol>\n</blockquote>\n\n<p>Not so fast. The actual type in that error is not <code>[(Int, Double)]</code>. It says that <code>zip a</code> is wrong, and its says the expected type is <code>[Double] -&gt; [(Double, Double)]</code>, while the actual type is <code>[Double] -&gt; [(Int, Double)]</code>. That's not the same thing as there being an expression which is expected to be of type <code>[(Double, Double)]</code> and actually is of type <code>[(Int, Double)]</code>.</p>\n\n<p><code>zip a</code> is a function. We know it's supposed to return <code>[(Double, Double)]</code> (because the rest of the composition chain processes that to return the final <code>Double</code> result from <code>poly</code>.</p>\n\n<p>The remaining parameter of the function <code>zip a</code> needs to be of type <code>[Double]</code> (by the type of <code>zip</code>) in order for the return type to fit <code>[(Double, Double)]</code>, and that's fine; <code>zip a</code> <em>can</em> take a <code>[Double]</code> argument.</p>\n\n<p>The problem is that <code>zip a</code> is not a function of type <code>[Double] -&gt; [(Double, Double)]</code>; the closest it could manage is <code>[Double] -&gt; [(Int, Double)]</code>, because of the use of <code>a</code> in the expression <code>zip a</code>. So that's what the error complains about.</p>\n\n<p>You're asking why it doesn't complain about <code>[(Int, Int)]</code> instead of <code>[(Int, Double)]</code>, since that's what you'd get if you applied <code>zip a</code> to <code>b</code>. But nowhere in your code do you do that! You apply the whole function <code>sum . map (\\(ai, bi) -&gt; ai * (x ** bi)) . zip a</code> to <code>b</code> (via the <code>$</code> operator). The type error is not complaining about <code>zip a b</code> being the wrong type of list, it's complaining about <code>zip a</code> being the wrong type of function.</p>\n\n<p>It then separately complains that the second argument of the <code>$</code> operator is <em>also</em> the wrong type to be passed as an argument to the whole function (of which <code>zip a</code> is a small part), but that's quite a separate issue from the other error.</p>\n\n<hr>\n\n<p>What Haskell is doing during type checking is looking at every expression (including sub-expressions, at every level of nesting), and comparing:</p>\n\n<ol>\n<li>The type the expression <em>must</em> have, in order to fit into its context (it calls this the \"expected type\")</li>\n<li>The type the expression <em>would</em> have based on its components (it calls this the \"actual type\")</li>\n</ol>\n\n<p>You can think of the process in this example roughly as follows:</p>\n\n<ol>\n<li><code>sum . map (\\(ai, bi) -&gt; ai * (x ** bi)) . zip a $ b</code> must result in <code>Double</code>, because of the type signature for <code>poly</code></li>\n<li>The first sub-expression is <code>$</code> applied to <code>sum . map (\\(ai, bi) -&gt; ai * (x ** bi)) . zip a</code>\n\n<ol>\n<li><code>$</code> has type <code>(a -&gt; b) -&gt; a -&gt; b</code> (actual type)<sup>1</sup></li>\n<li>We know that <code>b</code> above must be <code>Double</code> by the final expected return type of <code>poly</code>, so <code>$</code> should be something of the form <code>(a -&gt; Double) -&gt; a &gt; Double</code> (expected type)</li>\n<li>Expected and actual types of <code>$</code> unify with no problems</li>\n</ol></li>\n<li>Now we know the expected type of <code>sum . map (\\(ai, bi) -&gt; ai * (x ** bi)) . zip a</code> is something of the form <code>a -&gt; Double</code>. Lets check its actual type:\n\n<ol>\n<li>The first sub-expression in that composition chain is <code>.</code> applied to <code>sum</code> (<code>(sum .)</code> in operator-section notation, or <code>(.) sum</code> in prefix notation):\n\n<ol>\n<li><code>.</code> has type <code>(b -&gt; c) -&gt; (a -&gt; b) -&gt; a -&gt; c</code>; its expected type in this position is something of the form <code>(b -&gt; Double) -&gt; (a -&gt; b) -&gt; a -&gt; Double</code></li>\n<li><code>sum</code> has type <code>(Foldable t, Num a) =&gt; t a -&gt; a</code>; its expected type in this position is something of the form <code>b -&gt; Double</code> (needs <code>Num Double</code>:  \u2714 )</li>\n<li>So <code>(sum .)</code> has type <code>Foldable t =&gt; (a -&gt; t Double) -&gt; a -&gt; Double</code></li>\n</ol></li>\n<li>The next sub-expression in the composition chain is <code>(sum .)</code> applied to <code>map (\\(ai, bi) -&gt; ai * (x ** bi)) . zip a</code>\n\n<ol>\n<li><code>map (\\(ai, bi) -&gt; ai * (x ** bi)) . zip a</code> is expected to fit <code>Foldable t =&gt; a -&gt; t Double</code>. Lets check its actual type:\n\n<ol>\n<li>The first sub expression of that is <code>.</code> applied to <code>map (\\(ai, bi) -&gt; ai * (x ** bi))</code></li>\n<li><code>.</code> has type <code>(b -&gt; c) -&gt; (a -&gt; b) -&gt; a -&gt; c</code>; its expected type in this position is something of the form <code>Foldable t =&gt; (b -&gt; t Double) -&gt; (a -&gt; b) -&gt; a -&gt; t Double</code></li>\n<li>So <code>map (\\(ai, bi) -&gt; ai * (x ** bi))</code> is expected to fit <code>b -&gt; t Double</code></li>\n<li>Skipping over the details, <code>map (\\(ai, bi) -&gt; ai * (x ** bi))</code> actually has type <code>[(Double, Double)] -&gt; [Double]</code> (because <code>x</code> is known to have type <code>Double</code> from the signature of <code>poly</code>).</li>\n<li>This fits the expected type <code>b -&gt; t Double</code>, and informs us that <code>b</code> is actually <code>[(Double, Double)]</code> and <code>t</code> is actually <code>[]</code> (needs <code>Foldable []</code>: \u2714 )</li>\n</ol></li>\n<li>So now we know that the actual type of <code>.</code> applied to <code>map (\\(ai, bi) -&gt; ai * (x ** bi))</code> is <code>(a -&gt; [(Double, Double)]) -&gt; [Double]</code>, which means the second argument of the <code>.</code>, which is <code>zip a</code>, is expected to be of the form <code>a -&gt; [(Double, Double)]</code>. Lets check its actual type:\n\n<ol>\n<li><code>zip</code> is of type <code>[a] -&gt; [b] -&gt; [(a, b)]</code></li>\n<li><code>a</code> is of type <code>[Int]</code> from the type signature of <code>poly</code></li>\n<li>So <code>zip a</code> has a type like <code>[b] -&gt; [(Int, b)]</code>. Trying to unify the expected and actual type forces us to instantiate <code>b</code> to be <code>Double</code>, leaving the actual type of <code>zip a</code> being <code>[Double] -&gt; [(Int, Double)]</code>. But now there are no more type variables to instantiate. This is the first place we've found where the actual type doesn't match the expected type. So we emit a type error. In reporting the type error, we keep the fact that <code>b</code> was instantiated to <code>Double</code>, because nothing was wrong with that. So the expected type is shown as <code>[Double] -&gt; [(Double, Double)]</code> and the actual type is shown as <code>[Double] -&gt; [(Int, Double)]</code></li>\n<li>There's not much point drilling down further into <code>zip a</code>, because there is no meaningful expected type for the sub-components, because <strong>we don't know whether the issue we just reported was that the expected type is wrong or that the actual type was wrong</strong> (we just know that they can't be both right). We cannot say whether the problem is that <code>zip</code> doesn't fit <code>[Int] -&gt; [Double] -&gt; [(Double, Double])</code>, or that <code>a</code> doesn't fit <code>[Double]</code>, or whether <code>zip a</code> is actually correct and the problem is that the context was expecting <code>[Double] -&gt; [(Double, Double)]</code>.</li>\n</ol></li>\n<li>But going back out and pretending that <code>zip a</code> actually did fit its expected type, we establish that <code>map (\\(ai, bi) -&gt; ai * (x ** bi)) . zip a</code> has \"actual type\" <code>[Double] -&gt; [Double]</code>, which does unify with our expected type of <code>Foldable t =&gt; a -&gt; t Double</code></li>\n</ol></li>\n<li>And that means that <code>sum . map (\\(ai, bi) -&gt; ai * (x ** bi)) . zip a</code> has actual type <code>[Double] -&gt; Double</code>, which does unify with our expected type of <code>a -&gt; Double</code> (and we now know that <code>a</code> is <code>Double</code>).</li>\n</ol></li>\n<li>Which <em>finally</em> allows us to get to the next top-level expression, which is <code>(sum . map (\\(ai, bi) -&gt; ai * (x ** bi)) . zip a $)</code> applied to <code>b</code>.\n\n<ol>\n<li><code>b</code> is expected to have type <code>[Double]</code></li>\n<li><code>b</code> actually has type <code>[Int]</code> (by the signature for <code>poly</code>)</li>\n<li>This is our second place where actual and expected type do not match, so we report the second type error.</li>\n</ol></li>\n</ol>\n\n<p><sup>1</sup> But not its <em>actual</em> actual type. Saying <code>$</code> is simply a function with type <code>(a -&gt; b) -&gt; a -&gt; b</code> is actually a simplification, because <code>$</code> needs to support things like unlifted types, which ordinary type variables can't support. But I'm not going to get into that here. The simplification works 99% of the time.</p>\n\n<hr>\n\n<p>You can see that there are a huge number of steps to follow in working out how the type system generates these errors. So I don't really find that's a helpful process to follow in trying to understand type errors.</p>\n\n<p>The compiler pinpoints the exact expression its talking about: both in terms of the descent of the parse tree with all those \"<code>in the second argument of (.)</code>\" lines, and (usually more helpfully) with the graphical indication using <code>^^^^</code> characters underneath.</p>\n\n<p>So step one is to think about \"why would that expression be expected to have that type\", looking at the surroundings. In this case it's reasonably clear why <code>zip a</code> <em>should</em> have type <code>[Double] -&gt; [(Double, Double)]</code>; the result is feeding into mathematical operations that eventually produce <code>Double</code>, so both elements of the tuples in the list have to be <code>Double</code>, and the parameter of <code>zip a</code> must also be <code>[Double]</code>.</p>\n\n<p>Step 2 is to think about \"why would that expression actually have that type\". Again, that's even more obvious. If <code>a :: [Int]</code>, then there's no way that <code>zip a</code> can result in something fitting <code>_ -&gt; [(Double, _)]</code>.</p>\n\n<p>The finicky details the compiler goes through to verify everything else in the context leading up to these errors is mostly irrelevant; it effectively told you that was all fine (by not emitting any type errors there).</p>\n\n<p>It's also irrelevant why it discovers <code>zip a</code> first and not <code>b</code>, or why it complains about <code>zip a</code> being a function that results in <code>[(Int, Double)]</code> instead of complaining about <code>a</code> being of type <code>[Int]</code>. Fundamentally it's just going to find a place where the expected and actual type are inconsistent, without any way to tell which one is correct (often neither of them are).</p>\n\n<p>These things <em>are</em> understandable, and they become reasonably intuitive as you work with the compiler for longer, but these facts very rarely actually help you understand and fix the error. Just pick the first error it reports, focus on the expression it's talking about, think about why the context would cause it to have the reported \"expected type\", and why the sub-parts of the expression would cause it to have the reported \"actual type\".</p>\n\n<p>Contrary to GHC's reputation for inscrutable error messages, I actually find them to be much higher quality that those I typically get when working with other languages. When you aren't familiar with them they contain a lot of information in a new format, and so they're confusing. But once you are familiar with them they are actually very good.</p>\n\n<p>In fact, this particular error message is <em>exactly</em> along the lines of the <code>function foo expects an argument of type int, but received string</code> that you were expecting! It's just that the \"function foo\" is the <code>.</code> operator (which you've used twice on the same line so it identifies exactly which one it's talking about) and the argument it's expecting is another function with a complex type. The only reason it looks more complicated than the type of error message you compare it to is that it splits the expected/actual part onto two lines for readability (and points out exactly which part of those two types doesn't match!) and gives you a lot of detail about exactly which sub-expression contains the error, instead of just saying <code>line 11: function (.) expects an argument of type [Double] -&gt; [(Double, Double)], but received [Double] -&gt; [(Int, Double)]</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 61419, "user_id": 849891, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/MbEO3.png?s=128&g=1", "display_name": "Will Ness", "link": "https://stackoverflow.com/users/849891/will-ness"}, "is_accepted": false, "score": 0, "last_activity_date": 1559902612, "creation_date": 1559902612, "answer_id": 56492411, "question_id": 56486856, "link": "https://stackoverflow.com/questions/56486856/how-does-haskells-type-system-generate-this-error/56492411#56492411", "title": "How does Haskell&#39;s type system generate this error?", "body": "<p>Having</p>\n\n<pre><code>poly :: [Int] -&gt; [Int] -&gt; Double -&gt; Double\npoly a b x = sum . map (\\(ai, bi) -&gt; ai * (x ** bi)) . zip a $ b\n</code></pre>\n\n<p>, on the one hand,</p>\n\n<pre><code>    a ::        [ Int]\nzip a :: [t] -&gt; [(Int,t)]\nx :: Double\nx ** bi :: Double\n     bi :: Double\n                      t ::    Double\nzip a   :: [Double] -&gt; [(Int, Double)]                     derived\n</code></pre>\n\n<p>, but on the other,</p>\n\n<pre><code>poly a b x          ::                      Double\nsum                 ::          [Double] -&gt; Double\n    ai * (x ** bi)  ::           Double\n   (ai ,       bi)  ::  (Double, Double)\nzip a   :: [Double] -&gt; [(Double, Double)]                  expected\n</code></pre>\n"}], "owner": {"reputation": 181, "user_id": 3186072, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/54637aeab7e6de256d7d4dac5efc1edb?s=128&d=identicon&r=PG&f=1", "display_name": "MonkeySeeMonkeyCode", "link": "https://stackoverflow.com/users/3186072/monkeyseemonkeycode"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 194, "favorite_count": 2, "accepted_answer_id": 56488555, "answer_count": 3, "score": 8, "last_activity_date": 1559919294, "creation_date": 1559870181, "question_id": 56486856, "link": "https://stackoverflow.com/questions/56486856/how-does-haskells-type-system-generate-this-error", "title": "How does Haskell&#39;s type system generate this error?", "body": "<p>In my ventures through Haskell, I find that when I make a mistake with types in my code, I have a tough time trying to parse what it is that I did wrong and the compiler is complaining about. I think this is because of partial type inference before the compiler finds something wrong.</p>\n\n<p>Of course, I'm used to languages where the type mismatches are very obvious. e.g. something along the lines of <code>function foo expects an argument of type int, but received string</code>. It's obvious what this means, I passed in a string but the signature demands an int.</p>\n\n<p>So here's some relatively simple code, it is a function that evaluates a polynomial given a list of coefficients and powers:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>poly :: [Int] -&gt; [Int] -&gt; Double -&gt; Double\npoly a b x = sum . map (\\(ai, bi) -&gt; ai * (x ** bi)) . zip a $ b\n</code></pre>\n\n<p>This produces the following compiler error output:</p>\n\n<pre><code>[1 of 1] Compiling Main             ( solution.hs, solution.o )\n\nsolution.hs:11:56: error:\n    \u2022 Couldn't match type \u2018Int\u2019 with \u2018Double\u2019\n      Expected type: [Double] -&gt; [(Double, Double)]\n        Actual type: [Double] -&gt; [(Int, Double)]\n    \u2022 In the second argument of \u2018(.)\u2019, namely \u2018zip a\u2019\n      In the second argument of \u2018(.)\u2019, namely\n        \u2018map (\\ (ai, bi) -&gt; ai * (x ** bi)) . zip a\u2019\n      In the expression: sum . map (\\ (ai, bi) -&gt; ai * (x ** bi)) . zip a\n   |\n11 | poly a b x = sum . map (\\(ai, bi) -&gt; ai * (x ** bi)) . zip a $ b\n   |                                                        ^^^^^\n\nsolution.hs:11:64: error:\n    \u2022 Couldn't match type \u2018Int\u2019 with \u2018Double\u2019\n      Expected type: [Double]\n        Actual type: [Int]\n    \u2022 In the second argument of \u2018($)\u2019, namely \u2018b\u2019\n      In the expression:\n        sum . map (\\ (ai, bi) -&gt; ai * (x ** bi)) . zip a $ b\n      In an equation for \u2018poly\u2019:\n          poly a b x = sum . map (\\ (ai, bi) -&gt; ai * (x ** bi)) . zip a $ b\n   |\n11 | poly a b x = sum . map (\\(ai, bi) -&gt; ai * (x ** bi)) . zip a $ b\n   |                                                                ^\n</code></pre>\n\n<p>So I already <em>know</em> what's wrong here. <code>a</code> and <code>b</code> are of type <code>[Int]</code>, but I need them to be of type <code>[Double]</code>. However, what I don't understand is why the compiler is saying what it is:</p>\n\n<ol>\n<li>Why is it complaining about <code>b</code> when <code>a</code> comes before it in the expression and is equally wrong?</li>\n<li>In the top-most error, the expected type is <code>[(Double, Double)]</code>. Cool, makes sense. But how come the <em>actual</em> type is <code>[(Int, Double)]</code>? How did the double emerge if both <code>a</code> and <code>b</code> are <code>[Int]</code>?</li>\n</ol>\n\n<p>In either case, I think what I really need is someone to walk me through how the type system eventually gets to generating these errors, so I can better understand why the error messages are what they are.</p>\n"}, {"tags": ["haskell", "polymorphism", "monoids"], "answers": [{"tags": [], "owner": {"reputation": 75362, "user_id": 625403, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/786eed7da67079cb5d63a49d469af25b?s=128&d=identicon&r=PG", "display_name": "amalloy", "link": "https://stackoverflow.com/users/625403/amalloy"}, "is_accepted": true, "score": 9, "last_activity_date": 1559865202, "creation_date": 1559865202, "answer_id": 56486408, "question_id": 56486314, "link": "https://stackoverflow.com/questions/56486314/how-to-turn-a-function-returning-a-into-a-function-returning-a-monoid/56486408#56486408", "title": "How to turn a function returning [a] into a function returning a Monoid?", "body": "<p>As you note, you can't turn an arbitrary <code>a</code> into a member of any specific Monoid <code>m</code> without a function of type <code>a -&gt; m</code> available. But there is no such function that works for <em>all</em> Monoid instances - if there were, it'd have to be in the typeclass definition, and you can see it doesn't exist.</p>\n\n<p>Therefore, you have to either specialize <code>f</code> to a particular Monoid, as you did here for the <code>[a]</code> Monoid; or else accept a transforming function <code>a -&gt; m</code> in addition to the <code>[a]</code>. That is, your type could become:</p>\n\n<pre><code>combine :: Monoid m =&gt; (a -&gt; m) -&gt; [a] -&gt; m\n</code></pre>\n\n<p>And if we <a href=\"https://hoogle.haskell.org/?hoogle=Monoid+m+%3D%3E+%28a+-%3E+m%29+-%3E+%5Ba%5D+-%3E+m&amp;scope=set%3Astackage\" rel=\"noreferrer\">ask Hoogle about this type</a>, we see that your function is already defined (generalizing list to Foldable):</p>\n\n<pre><code>foldMap :: (Foldable t, Monoid m) =&gt; (a -&gt; m) -&gt; t a -&gt; m\n</code></pre>\n\n<p>You may find it a useful exercise to implement <code>foldMap</code>, either for Foldables in general or specialized to lists.</p>\n"}, {"tags": [], "owner": {"reputation": 1275, "user_id": 11571245, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/vkCkX.png?s=128&g=1", "display_name": "typedfern", "link": "https://stackoverflow.com/users/11571245/typedfern"}, "is_accepted": false, "score": 3, "last_activity_date": 1559898957, "last_edit_date": 1559898957, "creation_date": 1559867515, "answer_id": 56486637, "question_id": 56486314, "link": "https://stackoverflow.com/questions/56486314/how-to-turn-a-function-returning-a-into-a-function-returning-a-monoid/56486637#56486637", "title": "How to turn a function returning [a] into a function returning a Monoid?", "body": "<p>As <a href=\"https://stackoverflow.com/users/625403/amalloy\">@amalloy</a> said, you need a way to put your list's contents into your \"monoid container\" - the Monoid class does not define such a thing, so either your list's contents need to already constitute a monoid (in which case, your function is just <code>mconcat</code>):</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>f :: Monoid m =&gt; [m] -&gt; m\nf = mconcat\n</code></pre>\n\n<p>or you provide a converter function (in which case you transform the list's contents into your monoid, <em>then</em> do mconcat:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>f :: Monoid m =&gt; (a -&gt; m) -&gt; [a] -&gt; m\nf converter = mconcat . fmap converter\n</code></pre>\n"}], "owner": {"reputation": 939, "user_id": 11140945, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/j5Esk.png?s=128&g=1", "display_name": "Listerone", "link": "https://stackoverflow.com/users/11140945/listerone"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 88, "favorite_count": 0, "accepted_answer_id": 56486408, "answer_count": 2, "score": 1, "last_activity_date": 1559898957, "creation_date": 1559864303, "last_edit_date": 1559868938, "question_id": 56486314, "link": "https://stackoverflow.com/questions/56486314/how-to-turn-a-function-returning-a-into-a-function-returning-a-monoid", "title": "How to turn a function returning [a] into a function returning a Monoid?", "body": "<p>I'm playing with Haskell return-type polymorphism using the following function:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>f :: [a] -&gt; [a]\nf [] = mempty\nf (x:xs) = [x] &lt;&gt; f xs\n</code></pre>\n\n<p>Obviously it does nothing. What I'd like to do is to modify the type so that it takes a list and returns a Monoid container, one of which could be a list. I'm stuck here because <code>Monoid</code> takes one type argument. I have no idea what the type could be: <code>f :: Monoid m =&gt; [a] -&gt; ?</code></p>\n\n<p>Is this possible?</p>\n"}, {"tags": ["haskell", "category-abstractions"], "answers": [{"comments": [{"owner": {"reputation": 1069, "user_id": 2153280, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/zkQvQ.jpg?s=128&g=1", "display_name": "Alberto Capitani", "link": "https://stackoverflow.com/users/2153280/alberto-capitani"}, "edited": false, "score": 0, "creation_date": 1559887785, "post_id": 56485897, "comment_id": 99566736, "body": "I found your answer very informative. However, being a very different approach to the problem than I had set up, I need time to &quot;digest&quot; it. The Enum and Bounded limitations leave me very perplexed (even if they are a logical consequence of your approach); so I wonder if there are no other less restrictive approaches."}, {"owner": {"reputation": 1069, "user_id": 2153280, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/zkQvQ.jpg?s=128&g=1", "display_name": "Alberto Capitani", "link": "https://stackoverflow.com/users/2153280/alberto-capitani"}, "edited": false, "score": 0, "creation_date": 1559925784, "post_id": 56485897, "comment_id": 99585566, "body": "I integrated the code following the error messages of Wall. I was therefore inspired by the fact that in the definition of Fractional Double &quot;not all elements of Double have an multiplicative inverse&quot;. Considering that the identity for Relation only has a formal function, I hypothesized that the problems related to IdRMS could be solved using &quot;undefined&quot; when necessary, and therefore I completed the code in this sense. Since for &quot;the Wall&quot; no longer produces error messages, could an instance of Foldable.Constrained be formulated which is simpler and less restrictive than the one you proposed?"}, {"owner": {"reputation": 81794, "user_id": 9859, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/KEZOL.jpg?s=128&g=1", "display_name": "rampion", "link": "https://stackoverflow.com/users/9859/rampion"}, "reply_to_user": {"reputation": 1069, "user_id": 2153280, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/zkQvQ.jpg?s=128&g=1", "display_name": "Alberto Capitani", "link": "https://stackoverflow.com/users/2153280/alberto-capitani"}, "edited": false, "score": 0, "creation_date": 1559928634, "post_id": 56485897, "comment_id": 99586887, "body": "<code>Double</code> has the excuse of needing to be compatible with <a href=\"https://en.wikipedia.org/wiki/IEEE_754\" rel=\"nofollow noreferrer\">IEEE floats</a>. Using <code>undefined</code> or <code>error</code> to satisfy a typeclass is generally frowned on. <code>fmap</code> producing an exception would be EXTREMELY surprising. If my solution is too complex, then simplify by looking at what you need from your relation. If you don&#39;t need the category interface, then you can drop <code>Identity</code>/<code>Inf</code> and just use the <code>Map a (Set b)</code> representation. If you don&#39;t need to enumerate inputs (e.g. for <code>Foldable</code>), drop the <code>Map a (Set b)</code> representation and just use <code>a -&gt; Set b</code>."}, {"owner": {"reputation": 31243, "user_id": 2751851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/4ddc0.png?s=128&g=1", "display_name": "duplode", "link": "https://stackoverflow.com/users/2751851/duplode"}, "reply_to_user": {"reputation": 1069, "user_id": 2153280, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/zkQvQ.jpg?s=128&g=1", "display_name": "Alberto Capitani", "link": "https://stackoverflow.com/users/2153280/alberto-capitani"}, "edited": false, "score": 0, "creation_date": 1559968766, "post_id": 56485897, "comment_id": 99595353, "body": "On <code>Enum</code> and <code>Bounded</code>: this looks like a good fit for <a href=\"http://hackage.haskell.org/package/universe-1.1/docs/Data-Universe.html#t:Finite\" rel=\"nofollow noreferrer\"><code>Finite</code> from <i>universe</i></a> (cc @AlbertoCapitani )."}, {"owner": {"reputation": 1069, "user_id": 2153280, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/zkQvQ.jpg?s=128&g=1", "display_name": "Alberto Capitani", "link": "https://stackoverflow.com/users/2153280/alberto-capitani"}, "reply_to_user": {"reputation": 31243, "user_id": 2751851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/4ddc0.png?s=128&g=1", "display_name": "duplode", "link": "https://stackoverflow.com/users/2751851/duplode"}, "edited": false, "score": 0, "creation_date": 1559984901, "post_id": 56485897, "comment_id": 99597785, "body": "@duplode A bit off topic: is it right to think of Data.Universe a version of G&#246;del&#39;s numbering system?"}, {"owner": {"reputation": 81794, "user_id": 9859, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/KEZOL.jpg?s=128&g=1", "display_name": "rampion", "link": "https://stackoverflow.com/users/9859/rampion"}, "edited": false, "score": 0, "creation_date": 1559990231, "post_id": 56485897, "comment_id": 99598845, "body": "It\u2019s more like proofs that the rationals or Z^2 has the same cardinality as N"}, {"owner": {"reputation": 31243, "user_id": 2751851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/4ddc0.png?s=128&g=1", "display_name": "duplode", "link": "https://stackoverflow.com/users/2751851/duplode"}, "reply_to_user": {"reputation": 1069, "user_id": 2153280, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/zkQvQ.jpg?s=128&g=1", "display_name": "Alberto Capitani", "link": "https://stackoverflow.com/users/2153280/alberto-capitani"}, "edited": false, "score": 0, "creation_date": 1560001791, "post_id": 56485897, "comment_id": 99601443, "body": "@AlbertoCapitani <code>Universe</code> instances are recursively enumerable. (A G&#246;del numbering would be one possible of achieving that.)"}, {"owner": {"reputation": 1069, "user_id": 2153280, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/zkQvQ.jpg?s=128&g=1", "display_name": "Alberto Capitani", "link": "https://stackoverflow.com/users/2153280/alberto-capitani"}, "edited": false, "score": 0, "creation_date": 1560008460, "post_id": 56485897, "comment_id": 99602941, "body": "Thank you all for letting me discover and start connecting very interesting topics. I will have a lot to study. I will still take advantage of this &quot;out of topic&quot; to ask you if Data.Singletons is in some way similar to Data.Universe and, if so, if they are two libraries created for two different Haskells (Data.Singletons, if I I have not misunderstood, it serves to prepare the transition of Haskel to Dependent Types)."}], "tags": [], "owner": {"reputation": 81794, "user_id": 9859, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/KEZOL.jpg?s=128&g=1", "display_name": "rampion", "link": "https://stackoverflow.com/users/9859/rampion"}, "is_accepted": true, "score": 2, "last_activity_date": 1559902802, "last_edit_date": 1559902802, "creation_date": 1559860663, "answer_id": 56485897, "question_id": 56482798, "link": "https://stackoverflow.com/questions/56482798/how-to-define-an-instance-of-data-foldable-constrained/56485897#56485897", "title": "How to define an instance of Data.Foldable.Constrained?", "body": "<p>You need <code>FL.foldMap (FL.foldMap f) r</code> in your definition so that you fold over the <code>Map</code> <em>and</em> the <code>Set</code>.</p>\n\n<p>However, there's a critical error in your <code>Functor</code> instance; your <code>fmap</code> is partial. It's not defined on <code>IdRMS</code>.</p>\n\n<p>I suggest using <code>-Wall</code> to have the compiler warn you about such issues.</p>\n\n<p>The problem comes down to you need to be able to represent relations with finite and infinite domains.  <code>IdRMS :: RelationRMS a a</code> can already be used to represent <em>some</em> relations of infinite domain, it isn't powerful enough to represent a relation like <code>fmap (\\x -&gt; [x]) IdRMS</code>.</p>\n\n<p>One approach is to use <code>Map a (Set b)</code> for finite relations and <code>a -&gt; Set b</code> for infinite relations.</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>data Relation a b where\n   Fin :: Map a (Set b) -&gt; Relation a b\n   Inf :: (a -&gt; Set b) -&gt; Relation a b\n\nimage :: Relation a b -&gt; a -&gt; Set b\nimage (Fin f) a = M.findWithDefault (S.empty) a f\nimage (Inf f) a = f a\n</code></pre>\n\n<p>This changes the category instance accordingly:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>instance Category Relation where\n  type Object Relation a = Ord a\n\n  id = Inf S.singleton\n\n  f . Fin g = Fin $ M.mapMaybe (nonEmptySet . concatMapSet (image f)) g\n  f . Inf g = Inf $ concatMapSet (image f) . g\n\nnonEmptySet :: Set a -&gt; Maybe (Set a)\nnonEmptySet | S.null s = Nothing\n            | otherwise = Just s\n\nconcatMapSet :: Ord b =&gt; (a -&gt; Set b) -&gt; Set a -&gt; Set b\nconcatMapSet f = S.unions . fmap f . S.toList\n</code></pre>\n\n<p>And now you can define a total <code>Functor</code> instance:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>instance Functor (Relation a) (Ord \u22a2 (-&gt;)) Hask where\n  fmap (ConstrainedMorphism f) = ConstrainedMorphism $ \\case -- using {-# LANGUAGE LambdaCase #-}\n    Fin g -&gt; Fin $ fmap (S.map f) g\n    Inf g -&gt; Inf $ fmap (S.map f) g\n</code></pre>\n\n<p>But a new issue raises its head when defining the <code>Foldable</code> instance:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>instance Foldable (Relation a) (Ord \u22a2 (-&gt;)) Hask where\n  foldMap (ConstrainedMorphism f) = ConstrainedMorphism $ \\case\n    Fin g -&gt; Prelude.foldMap (Prelude.foldMap f) g\n    Inf g -&gt; -- uh oh...problem!\n</code></pre>\n\n<p>We have <code>f :: b -&gt; m</code> and <code>g :: a -&gt; Set b</code>. <code>Monoid m</code> gives us <code>append :: m -&gt; m -&gt; m</code>, and we know <code>Ord a</code>, but in order to generate all the <code>b</code> values in the image of the relation, we need all the possible <code>a</code> values!</p>\n\n<p>One way you could try to salvage this is to use <code>Bounded</code> and <code>Enum</code> as additional constraints on the relation's domain. Then you could try to enumerate all the possible <code>a</code> values with <code>[minBound..maxBound]</code> (this may not be list every value for all types; I'm not sure if that's a law for <code>Bounded</code> and <code>Enum</code>).</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>instance (Enum a, Bounded a) =&gt; Foldable (Relation a) (Ord \u22a2 (-&gt;)) Hask where\n  foldMap (ConstrainedMorphism f) = ConstrainedMorphism $ \\case\n    Fin g -&gt; Prelude.foldMap (Prelude.foldMap f) g\n    Inf g -&gt; Prelude.foldMap (Prelude.foldMap f . g) [minBound .. maxBound]\n</code></pre>\n"}], "owner": {"reputation": 1069, "user_id": 2153280, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/zkQvQ.jpg?s=128&g=1", "display_name": "Alberto Capitani", "link": "https://stackoverflow.com/users/2153280/alberto-capitani"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 94, "favorite_count": 0, "accepted_answer_id": 56485897, "answer_count": 1, "score": 1, "last_activity_date": 1559902802, "creation_date": 1559843768, "question_id": 56482798, "link": "https://stackoverflow.com/questions/56482798/how-to-define-an-instance-of-data-foldable-constrained", "title": "How to define an instance of Data.Foldable.Constrained?", "body": "<p>I've successfully defined Category, Functor, Semigroup, Monoid constrained. Now I'm stuck with Data.Foldable.Constrained. More precisely, I seem to have correctly defined the unconstrained functions fldl and fldMp, but I can't get them to be accepted as Foldable.Constrained instances.\nMy definition attempt is inserted as a comment.</p>\n\n<pre><code>{-# LANGUAGE OverloadedLists, GADTs, TypeFamilies, ConstraintKinds, \nFlexibleInstances, MultiParamTypeClasses, StandaloneDeriving, TypeApplications #-}\n\nimport Prelude ()\n\nimport Control.Category.Constrained.Prelude\nimport qualified Control.Category.Hask as Hask\n-- import Data.Constraint.Trivial\nimport Data.Foldable.Constrained\nimport Data.Map as M\nimport Data.Set as S\nimport qualified Data.Foldable as FL\n\nmain :: IO ()\nmain = print $ fmap (constrained @Ord (+1))\n             $ RMS ([(1,[11,21]),(2,[31,41])])\n\ndata RelationMS a b where\n  IdRMS :: RelationMS a a\n  RMS :: Map a (Set b) -&gt; RelationMS a b \nderiving instance (Show a, Show b) =&gt; Show (RelationMS a b)\n\ninstance Category RelationMS where\n    type Object RelationMS o = Ord o\n    id = IdRMS\n    RMS mp2 . RMS mp1\n      | M.null mp2 || M.null mp1 = RMS M.empty\n      | otherwise = RMS $ M.foldrWithKey \n            (\\k s acc -&gt; M.insert k (S.foldr (\\x acc2 -&gt; case M.lookup x mp2 of\n                                                        Nothing -&gt; acc2\n                                                        Just s2 -&gt; S.union s2 acc2\n                                             ) S.empty s\n                                    ) acc\n            ) M.empty mp1\n\n(\u00b0) :: (Object k a, Object k b, Object k c, Category k) =&gt; k a b -&gt; k b c -&gt; k a c\nr1 \u00b0 r2 = r2 . r1\n\ninstance (Ord a, Ord b) =&gt; Semigroup (RelationMS a b) where\n    RMS r1 &lt;&gt; RMS r2 = RMS $ M.foldrWithKey (\\k s acc -&gt; M.insertWith S.union k s acc) r1  r2 \n\ninstance (Ord a, Ord b) =&gt; Monoid (RelationMS a b) where\n    mempty = RMS M.empty\n    mappend = (&lt;&gt;)\n\ninstance Functor (RelationMS a) (ConstrainedCategory (-&gt;) Ord) Hask where\n    fmap (ConstrainedMorphism f) = ConstrainedMorphism $\n            \\(RMS r) -&gt; RMS $ M.map (S.map f) r\n\n\nfldl :: (a -&gt; Set b -&gt; a) -&gt; a -&gt; RelationMS k b -&gt; a\nfldl f acc (RMS r) = M.foldl f acc r\n\nfldMp :: Monoid b1 =&gt; (Set b2 -&gt; b1) -&gt; RelationMS k b2 -&gt; b1\nfldMp m (RMS r) = M.foldr (mappend . m) mempty r\n\n\n-- instance Foldable (RelationMS a) (ConstrainedCategory (-&gt;) Ord) Hask where\n    -- foldMap f (RMS r)\n        -- | M.null r = mempty\n        -- | otherwise = FL.foldMap f r\n    -- ffoldl f = uncurry $ M.foldl (curry f)\n</code></pre>\n"}, {"tags": ["haskell", "functor", "function-composition"], "comments": [{"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 1, "creation_date": 1559827039, "post_id": 56477752, "comment_id": 99547176, "body": "As your last instance implies, <code>Yoneda f</code> is a functor even when <code>f</code> is not. <code>lowerYo</code> does not require <code>Functor f</code>. So, you can think of <code>Yoneda f</code> as a way to &quot;force&quot; <code>f</code> to become a functor, a sort of &quot;completion&quot;, if you wish."}, {"owner": {"reputation": 3831, "user_id": 5536315, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/38Cjm.png?s=128&g=1", "display_name": "scriptum", "link": "https://stackoverflow.com/users/5536315/scriptum"}, "reply_to_user": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 0, "creation_date": 1559830111, "post_id": 56477752, "comment_id": 99549160, "body": "Yes, <code>lowerYo</code> is wrong and the code comes from a gist. Funnily enough I didn&#39;t wind up with a functor constraint when I translated the code into Javascript <code>yoCata = tx =&gt; tx.runYoneda(id)</code>."}, {"owner": {"reputation": 3831, "user_id": 5536315, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/38Cjm.png?s=128&g=1", "display_name": "scriptum", "link": "https://stackoverflow.com/users/5536315/scriptum"}, "reply_to_user": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 0, "creation_date": 1559830152, "post_id": 56477752, "comment_id": 99549185, "body": "So when I have a type without a functor instance instead of defining one I can just write a lambda with the mapping logic and pass it to the <code>Yoneda</code> constructor - is that what you mean?"}, {"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 0, "creation_date": 1559835068, "post_id": 56477752, "comment_id": 99551987, "body": "I don&#39;t have a clear practical application in mind, but for certain data constructors <code>F</code> it is impossible to define a lawful <code>Functor</code> instance, while <code>Yoneda F</code> would be a functor nevertheless. (However, in such case, defining a value of type <code>Yoneda F a</code> might be hard.)"}], "answers": [{"tags": [], "owner": {"reputation": 22091, "user_id": 5684257, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ea5090cde8ea066a1fda67ed52dd5084?s=128&d=identicon&r=PG&f=1", "display_name": "HTNW", "link": "https://stackoverflow.com/users/5684257/htnw"}, "is_accepted": true, "score": 16, "last_activity_date": 1559839095, "creation_date": 1559839095, "answer_id": 56481790, "question_id": 56477752, "link": "https://stackoverflow.com/questions/56477752/is-the-yoneda-lemma-only-useful-from-a-theoretical-point-of-view/56481790#56481790", "title": "Is the Yoneda Lemma only useful from a theoretical point of view?", "body": "<p>Well, <em>in this case</em> you could have done fusion by hand, because the two <code>fmap</code>s are \"visible\" in the source code, but the point is that <code>Yoneda</code> does the transformation at runtime. It's a dynamic thing, most useful when you <em>don't know</em> how many times you will need to <code>fmap</code> over a structure. E.g. consider lambda terms:</p>\n\n<pre><code>data Term v = Var v | App (Term v) (Term v) | Lam (Term (Maybe v))\n</code></pre>\n\n<p>The <code>Maybe</code> under <code>Lam</code> represents the variable bound by the abstraction; in the body of a <code>Lam</code>, the variable <code>Nothing</code> refers to the bound variable, and all variables <code>Just v</code> represent the ones bound in the environment. <code>(&gt;&gt;=) :: Term v -&gt; (v -&gt; Term v') -&gt; Term v'</code> represents substitution\u2014each <code>v</code>ariable can be replaced with a <code>Term</code>. However, when replacing a variable inside a <code>Lam</code>, all the variables in the produced <code>Term</code> need to be wrapped in <code>Just</code>. E.g.</p>\n\n<pre><code>Lam $ Lam $ Var $ Just $ Just $ ()\n  &gt;&gt;= \\() -&gt; App (Var \"f\") (Var \"x\")\n=\nLam $ Lam $ App (Var $ Just $ Just \"f\") (Var $ Just $ Just \"x\")\n</code></pre>\n\n<p>The naive implementation of <code>(&gt;&gt;=)</code> goes like this:</p>\n\n<pre><code>(&gt;&gt;=) :: Term v -&gt; (v -&gt; Term v') -&gt; Term v'\nVar x &gt;&gt;= f = f x\nApp l r &gt;&gt;= f = App (l &gt;&gt;= f) (r &gt;&gt;= f)\nLam b &gt;&gt;= f = Lam (b &gt;&gt;= maybe (Var Nothing) (fmap Just . f))\n</code></pre>\n\n<p>But, written like this, every <code>Lam</code> that <code>(&gt;&gt;=)</code> goes under adds an <code>fmap Just</code> to <code>f</code>. If I had a <code>Var v</code> buried under 1000 <code>Lam</code>s, then I would end up calling <code>fmap Just</code> and iterating over the new <code>f v</code> term 1000 times! I can't just pull your trick and fuse multiple <code>fmap</code>s into one, by hand, because there's only one <code>fmap</code> in the source code being called multiple times.</p>\n\n<p><code>Yoneda</code> can ease the pain:</p>\n\n<pre><code>bindTerm :: Term v -&gt; (v -&gt; Yoneda Term v') -&gt; Term v'\nbindTerm (Var x) f = lowerYoneda (f x)\nbindTerm (App l r) f = App (bindTerm l f) (bindTerm r f)\nbindTerm (Lam b) f =\n  Lam (bindTerm b (maybe (liftYoneda $ Var Nothing) (fmap Just . f)))\n\n(&gt;&gt;=) :: Term v -&gt; (v -&gt; Term v') -&gt; Term v'\nt &gt;&gt;= f = bindTerm t (liftYoneda . f)\n</code></pre>\n\n<p>Now, the <code>fmap Just</code> is free; it's just a wonky function composition. The actual iteration over the produced <code>Term</code> is in the <code>lowerYoneda</code>, which is only called once for each <code>Var</code>. To reiterate: the source code nowhere contains anything of the form <code>fmap f (fmap g x)</code>. Such forms only arise at runtime, dynamically, depending on the argument to <code>(&gt;&gt;=)</code>. <code>Yoneda</code> can rewrite that, <em>at runtime</em>, to <code>fmap (f . g) x</code>, even though you can't rewrite it like that in the source code. Further, you can add <code>Yoneda</code> to existing code with minimal changes to it. (There is, however, a drawback: <code>lowerYoneda</code> is <em>always</em> called exactly once for each <code>Var</code>, which means e.g. <code>Var v &gt;&gt;= f = fmap id (f v)</code> where it was just <code>f v</code>, before.)</p>\n"}, {"tags": [], "owner": {"reputation": 31243, "user_id": 2751851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/4ddc0.png?s=128&g=1", "display_name": "duplode", "link": "https://stackoverflow.com/users/2751851/duplode"}, "is_accepted": false, "score": 6, "last_activity_date": 1559938152, "last_edit_date": 1559938152, "creation_date": 1559873260, "answer_id": 56487132, "question_id": 56477752, "link": "https://stackoverflow.com/questions/56477752/is-the-yoneda-lemma-only-useful-from-a-theoretical-point-of-view/56487132#56487132", "title": "Is the Yoneda Lemma only useful from a theoretical point of view?", "body": "<p>There is an example similar in spirit to <a href=\"https://stackoverflow.com/a/56481790/2751851\">the one described by HTNW</a> in <em>lens</em>. A look at (a paraphrased version of) <a href=\"http://hackage.haskell.org/package/lens-4.17.1/docs/Control-Lens-Lens.html#v:lens\" rel=\"nofollow noreferrer\">the <code>lens</code> function</a> illustrates what a typical van Laarhoven lens looks like:</p>\n\n<pre><code>-- type Lens s t a b = forall f. Functor f =&gt; (a -&gt; f b) -&gt; s -&gt; f t\nlens :: (s -&gt; a) -&gt; (s -&gt; b -&gt; t) -&gt; Lens s t a b\nlens getter setter = \\f -&gt; \\s -&gt; fmap (setter s) (f (getter s))\n</code></pre>\n\n<p>The occurrence of <code>fmap</code> in there means that composing lenses will, in principle, lead to consecutive uses of <code>fmap</code>. Now, most of the time this doesn't actually matter: the implementations in <em>lens</em> use a lot of inlining and newtype coercion so that, when using the <em>lens</em> combinators (<code>view</code>, <code>over</code>, and so forth), the involved functor (typically <code>Const</code> or <code>Identity</code>) is generally optimised away. In a few situations, however, it is not possible to do that (for instance, if the lens is used in such a way that a concrete choice of functor isn't done in compile time). As compensation, <em>lens</em> offers a helper function called <a href=\"http://hackage.haskell.org/package/lens-4.17.1/docs/Control-Lens-Lens.html#v:fusing\" rel=\"nofollow noreferrer\"><code>fusing</code></a>, which makes it possible to have <code>fmap</code> fusion in those special cases. Its implementation is:</p>\n\n<pre><code>-- type LensLike f s t a b = (a -&gt; f b) -&gt; s -&gt; f t\nfusing :: Functor f =&gt; LensLike (Yoneda f) s t a b -&gt; LensLike f s t a b\nfusing t = \\f -&gt; lowerYoneda . t (liftYoneda . f)\n</code></pre>\n\n<p>That being so, if you write <code>fusing (foo . bar)</code>, <code>Yoneda f</code> is picked as the functor to be used by <code>foo . bar</code>, which guarantees <code>fmap</code> fusion.</p>\n\n<p>(This answer was inspired by <a href=\"https://reddit.com/r/haskell/comments/5715b3/when_can_i_expect_overhead_for_lens/d8o3e8t/\" rel=\"nofollow noreferrer\">a comment by Edward Kmett</a>, which I happened to stumble upon right before seeing this question.) </p>\n"}], "owner": {"reputation": 3831, "user_id": 5536315, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/38Cjm.png?s=128&g=1", "display_name": "scriptum", "link": "https://stackoverflow.com/users/5536315/scriptum"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 498, "favorite_count": 8, "accepted_answer_id": 56481790, "answer_count": 2, "score": 16, "last_activity_date": 1559938152, "creation_date": 1559824622, "last_edit_date": 1559839943, "question_id": 56477752, "link": "https://stackoverflow.com/questions/56477752/is-the-yoneda-lemma-only-useful-from-a-theoretical-point-of-view", "title": "Is the Yoneda Lemma only useful from a theoretical point of view?", "body": "<p>For instance, loop fusion can be obtained with Yoneda:</p>\n\n<pre><code>newtype Yoneda f a =\n    Yoneda (forall b. (a -&gt; b) -&gt; f b)\n\nliftYo :: (Functor f) =&gt; f a -&gt; Yoneda f a\nliftYo x = Yoneda $ \\f -&gt; fmap f x\n\nlowerYo :: (Functor f) =&gt; Yoneda f a -&gt; f a\nlowerYo (Yoneda y) = y id\n\ninstance Functor (Yoneda f) where\n    fmap f (Yoneda y) = Yoneda $ \\g -&gt; y (g . f)\n\nloopFusion = lowerYo . fmap f . fmap g . liftYo\n</code></pre>\n\n<p>But I could have just written <code>loopFusion = fmap (f . g)</code>. Why would I use <code>Yoneda</code> at all? Are there other use cases?</p>\n"}, {"tags": ["haskell"], "comments": [{"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 1, "creation_date": 1559817160, "post_id": 56475090, "comment_id": 99541743, "body": "Your closure does not look like a transitive closure: we have <code>(&#39;a&#39;,&#39;c&#39;)</code> and <code>(&#39;c&#39;,&#39;b&#39;)</code> but no <code>(&#39;a&#39;,&#39;b&#39;)</code> ?"}, {"owner": {"reputation": 203, "user_id": 9952780, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9a2469a9716383b916f6db1205853858?s=128&d=identicon&r=PG&f=1", "display_name": "Patrick Browne", "link": "https://stackoverflow.com/users/9952780/patrick-browne"}, "reply_to_user": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 0, "creation_date": 1559825883, "post_id": 56475090, "comment_id": 99546457, "body": "@chi Yes. I will edit the question"}, {"owner": {"reputation": 2158, "user_id": 9991455, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2ff5d55afd5d829849efbf27962dd320?s=128&d=identicon&r=PG&f=1", "display_name": "Lorenzo", "link": "https://stackoverflow.com/users/9991455/lorenzo"}, "edited": false, "score": 1, "creation_date": 1559834148, "post_id": 56475090, "comment_id": 99551461, "body": "If the closure is symmetric but not transitive, then you&#39;ll never need to use a tuple you already eliminated"}, {"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "edited": false, "score": 1, "creation_date": 1559841840, "post_id": 56475090, "comment_id": 99555063, "body": "In your recursive call, you change the value you&#39;re searching for; if a thing is equivalent to multiple other things, this means only the first match in the list is considered. One fix would be to recurse <i>twice</i> (once continuing with the current value and once with the newly discovered equivalent value) and combine the results somehow."}, {"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "edited": false, "score": 1, "creation_date": 1559842097, "post_id": 56475090, "comment_id": 99555174, "body": "Side note: you may like to Google the phrase &quot;union find&quot;."}, {"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "edited": false, "score": 1, "creation_date": 1559843043, "post_id": 56475090, "comment_id": 99555579, "body": "So I coded up a solution myself as a precursor to writing an answer. It leads me to this question: why do you demand that <code>allEqual &#39;a&#39; symm</code> be <code>&quot;bcd&quot;</code> instead of <code>&quot;abcd&quot;</code>? After all, <code>&#39;a&#39;</code> is related to <code>&#39;c&#39;</code> and <code>&#39;c&#39;</code> is related to <code>&#39;a&#39;</code>, so the transitive closure of <code>symm</code> should relate <code>&#39;a&#39;</code> to itself."}, {"owner": {"reputation": 203, "user_id": 9952780, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9a2469a9716383b916f6db1205853858?s=128&d=identicon&r=PG&f=1", "display_name": "Patrick Browne", "link": "https://stackoverflow.com/users/9952780/patrick-browne"}, "reply_to_user": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "edited": false, "score": 0, "creation_date": 1559843604, "post_id": 56475090, "comment_id": 99555838, "body": "@Dan The reason I want &quot;bcd&quot; is that I am trying to replicate code from a <a href=\"https://www.researchgate.net/publication/2352686_Qualitative_Temporal_Reasoning_in_GIS_-_Ordered_Time_Scales\" rel=\"nofollow noreferrer\">paper</a>, which requires all elements deemed equivalent (equal?) to a given element."}, {"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "edited": false, "score": 1, "creation_date": 1559848335, "post_id": 56475090, "comment_id": 99557703, "body": "@PatrickBrowne At a quick glance, nothing in that paper seems to suggest to me that <code>&quot;bcd&quot;</code> would be a better answer than <code>&quot;abcd&quot;</code> to this query. If you believe it does, can you be specific about where (and why), please?"}, {"owner": {"reputation": 203, "user_id": 9952780, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9a2469a9716383b916f6db1205853858?s=128&d=identicon&r=PG&f=1", "display_name": "Patrick Browne", "link": "https://stackoverflow.com/users/9952780/patrick-browne"}, "reply_to_user": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "edited": false, "score": 0, "creation_date": 1559848882, "post_id": 56475090, "comment_id": 99557929, "body": "@Dan Yes you are correct.. My interpretation of sets and a recursive data structure used in the paper is incorrect. But I could not get the code as written to work."}], "answers": [{"comments": [{"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "edited": false, "score": 1, "creation_date": 1559841636, "post_id": 56480784, "comment_id": 99554969, "body": "In the question, it is specified that <code>allEqual &#39;a&#39; symms</code> should be <code>&quot;bcd&quot;</code>. All of your solutions produce just <code>&quot;c&quot;</code>."}, {"owner": {"reputation": 2158, "user_id": 9991455, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2ff5d55afd5d829849efbf27962dd320?s=128&d=identicon&r=PG&f=1", "display_name": "Lorenzo", "link": "https://stackoverflow.com/users/9991455/lorenzo"}, "reply_to_user": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "edited": false, "score": 1, "creation_date": 1559841801, "post_id": 56480784, "comment_id": 99555042, "body": "@Daniel Didn&#39;t read that, but to get &quot;bcd&quot; you need a transitive group, op said only symmetric"}, {"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "edited": false, "score": 1, "creation_date": 1559841897, "post_id": 56480784, "comment_id": 99555090, "body": "Demanding that you be given a transitive relation is one possible solution. Computing the transitive closure inside <code>allEqual</code> is another (analogous to the way your final proposal computes the symmetric closure inside <code>allEqual</code>). To me, computing the transitive closure seems to be the goal/intent of the question."}, {"owner": {"reputation": 203, "user_id": 9952780, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9a2469a9716383b916f6db1205853858?s=128&d=identicon&r=PG&f=1", "display_name": "Patrick Browne", "link": "https://stackoverflow.com/users/9952780/patrick-browne"}, "edited": false, "score": 0, "creation_date": 1559845788, "post_id": 56480784, "comment_id": 99556720, "body": "@Lorenzo The inputs are an element and a symmetric closure. The output should be a list of elements that are equivalent to the input element."}, {"owner": {"reputation": 2158, "user_id": 9991455, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2ff5d55afd5d829849efbf27962dd320?s=128&d=identicon&r=PG&f=1", "display_name": "Lorenzo", "link": "https://stackoverflow.com/users/9991455/lorenzo"}, "reply_to_user": {"reputation": 203, "user_id": 9952780, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9a2469a9716383b916f6db1205853858?s=128&d=identicon&r=PG&f=1", "display_name": "Patrick Browne", "link": "https://stackoverflow.com/users/9952780/patrick-browne"}, "edited": false, "score": 1, "creation_date": 1559846136, "post_id": 56480784, "comment_id": 99556865, "body": "@patrick again, if it&#39;s a symmetric closure, &#39;a&#39; only relates to &#39;c&#39;"}, {"owner": {"reputation": 2158, "user_id": 9991455, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2ff5d55afd5d829849efbf27962dd320?s=128&d=identicon&r=PG&f=1", "display_name": "Lorenzo", "link": "https://stackoverflow.com/users/9991455/lorenzo"}, "edited": false, "score": 0, "creation_date": 1559846171, "post_id": 56480784, "comment_id": 99556884, "body": "But I&#39;ll post the function for a transitive one as well"}], "tags": [], "owner": {"reputation": 2158, "user_id": 9991455, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2ff5d55afd5d829849efbf27962dd320?s=128&d=identicon&r=PG&f=1", "display_name": "Lorenzo", "link": "https://stackoverflow.com/users/9991455/lorenzo"}, "is_accepted": false, "score": 0, "last_activity_date": 1559841370, "last_edit_date": 1559841370, "creation_date": 1559835016, "answer_id": 56480784, "question_id": 56475090, "link": "https://stackoverflow.com/questions/56475090/how-do-i-find-all-equivalent-elements-from-a-symmetric-closure-using-haskell/56480784#56480784", "title": "How do I find all equivalent elements from a Symmetric Closure using Haskell?", "body": "<p>If the closure is <strong>symmetric but not transitive</strong>, you'll never need to look at a tuple you already eliminated.</p>\n\n<p>Also, I'd split the question in two cases: all permutations are present vs not all are.</p>\n\n<h3>All permutations are present:</h3>\n\n<p>What I mean is, if <code>('a','b')</code> is present, then so is <code>('b','a')</code>. This is the case in your example.</p>\n\n<p>In this case, you can simplify your algorithm by only looking at one element of the pair:</p>\n\n<pre><code>import qualified Data.List as L\n\nallEqual :: Eq t =&gt;  t -&gt; [(t,t)]  -&gt;  [t]\nallEqual x = L.nub . allEqual' x\n  where\n    allEqual' x  [] = []\n    allEqual' x  (y:ys)\n      | x == fst y = snd y : allEqual' x ys\n      | otherwise  =         allEqual' x ys\n</code></pre>\n\n<p>Note that using <code>nub</code> is more efficient (<code>O(nlogn)</code>) than filtering every element in the list (<code>O(n2)</code>)</p>\n\n<p>Furthermore, you can make this function a bit more readable (in my opinion) by using filter and map</p>\n\n<pre><code>allEqual :: Eq t =&gt;  t -&gt; [(t,t)]  -&gt;  [t]\nallEqual x ys = L.nub . map snd . filter ((==x) . fst) $ ys\n</code></pre>\n\n<h3>Not all permutations are present</h3>\n\n<p>This is similar to your version, only difference is again I'd use <code>nub</code> instead of your <code>deleteSymPairs</code>:</p>\n\n<pre><code>allEqual  :: Eq t =&gt;  t -&gt; [(t,t)]  -&gt;  [t]\nallEqual x = L.nub . allEqual' x\n  where\n    allEqual' x  [] = []\n    allEqual' x  (y:ys)\n      | x == fst y = snd y : allEqual' x ys\n      | x == snd y = fst y : allEqual' x ys\n      | otherwise =  allEqual' x  ys\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 203, "user_id": 9952780, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9a2469a9716383b916f6db1205853858?s=128&d=identicon&r=PG&f=1", "display_name": "Patrick Browne", "link": "https://stackoverflow.com/users/9952780/patrick-browne"}, "edited": false, "score": 0, "creation_date": 1559858118, "post_id": 56484008, "comment_id": 99561167, "body": "Thank you for the help.  With input  <code>&quot;c&quot;</code> the output contains duplicates. I add   <code>(L.nub frontier) ++  ts</code> which seems to fix this,"}], "tags": [], "owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "is_accepted": true, "score": 2, "last_activity_date": 1559849606, "creation_date": 1559849606, "answer_id": 56484008, "question_id": 56475090, "link": "https://stackoverflow.com/questions/56475090/how-do-i-find-all-equivalent-elements-from-a-symmetric-closure-using-haskell/56484008#56484008", "title": "How do I find all equivalent elements from a Symmetric Closure using Haskell?", "body": "<p>The naive solution (i.e. not using the standard union-find data structure) is to just do depth-first search. As usual with depth-first search, we'll keep track of a \"set\" of nodes that we know are equivalent and have already thoroughly explored for neighbors together with a \"set\" of frontier nodes that we have just discovered are equivalent but haven't yet searched for neighbors. We need to keep track of both for the usual cycle-avoidance reasons. We'll know we're done with the search when the frontier is empty.</p>\n\n<p>That's the big picture. Now the nitty-gritty. Let's start with a helper function to compute the unadorned, un-transitively-closed neighbor function of the relation.</p>\n\n<pre><code>related :: Eq t =&gt; t -&gt; [(t, t)] -&gt; [t]\nrelated t rel = [t'' | (t', t'') &lt;- rel, t == t']\n</code></pre>\n\n<p>Now we can do our DFS. Initially we don't know of any equivalent nodes, and our frontier is the immediate neighbors of our input value.</p>\n\n<pre><code>transitivelyRelated :: Eq t =&gt; t -&gt; [(t,t)] -&gt; [t]\ntransitivelyRelated t rel = go (related t rel) [] where\n    go [] ts = ts\n    go frontier ts = go frontier' ts' where\n        ts' = frontier ++ ts\n        frontier' = [ t'\n                    | t &lt;- frontier\n                    , t' &lt;- related t rel\n                    , t' `notElem` ts'\n                    ]\n</code></pre>\n\n<p>If we wanted the reflexive transitive closure instead, we could start with the simpler <code>go [t] []</code> instead of <code>go (related t rel) []</code>.</p>\n\n<p>However, this is quite inefficient -- something like O(n^3), I think -- compared to the standard way of computing the reflexive symmetric transitive closure which is basically as close to O(n) as it is possible to get without actually being O(n), so I strongly recommend that you step away from only using lists.</p>\n"}], "owner": {"reputation": 203, "user_id": 9952780, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9a2469a9716383b916f6db1205853858?s=128&d=identicon&r=PG&f=1", "display_name": "Patrick Browne", "link": "https://stackoverflow.com/users/9952780/patrick-browne"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 311, "favorite_count": 0, "accepted_answer_id": 56484008, "answer_count": 2, "score": 0, "last_activity_date": 1559859628, "creation_date": 1559814783, "last_edit_date": 1559859628, "question_id": 56475090, "link": "https://stackoverflow.com/questions/56475090/how-do-i-find-all-equivalent-elements-from-a-symmetric-closure-using-haskell", "title": "How do I find all equivalent elements from a Symmetric Closure using Haskell?", "body": "<p>I am trying to find all equivalent elements from symmetric closure using the Haskell code in <strong>Listing 1</strong> .</p>\n\n<p><code>symm</code> is a list of tuples representing a set of equivalences on the set <em>{a,b,c,d,l,m}</em>. The equivalences are symmetric, if we have <em>(x,y)</em> then we have <em>(y,x)</em>. </p>\n\n<pre><code>[('d','c'),('c','d'),('c','b'),('c','a'),('l','m'),('b','c'),('a','c'),('m','l')]\n</code></pre>\n\n<p>This relation partitions into two equivalence classes (<em>a=b=c=d</em>) and (<em>l=m</em>). \nI wish to create a list of elements that are equivalent to a given element. For example, <code>allEqual 'a' symm</code> should give <code>\"bcd\"</code> and <code>allEqual 'l' symm</code> should give <code>\"m\"</code>. </p>\n\n<p><strong>Listing 1</strong>  works for  <code>allEqual x symm</code> when x='l' and x='m', but not for the other cases.</p>\n\n<p>My current incorrect thinking behind the code is as follows: </p>\n\n<p>If <code>x</code> is equal to the first or second element in the current tuple then find a tuple containing the next element from <code>symm</code> with the current tuple and its inverse removed</p>\n\n<p>else</p>\n\n<p>continue searching <code>symm</code> with the first tuple removed.</p>\n\n<p>I think that the continued search with the removed leading tuple (the else above) is not a good idea as that tuple may be required later in the search. However, I cannot think of another way of moving through the list of tuples. </p>\n\n<p><strong>Listing 1</strong> </p>\n\n<pre><code>import Data.List as L\n\nsymm = [('d','c'),('c','d'),('c','b'),('c','a'),('l','m'),('b','c'),('a','c'),('m','l')]\n\ndeleteSymPairs (x,y) xs =  L.delete (x,y) (L.delete (y,x) xs)\n\nallEqual  :: Eq t =&gt;  t -&gt; [(t,t)]  -&gt;  [t]\nallEqual x  [] = []\nallEqual x  (y:xs) | (x == (fst y)) = ((snd y) : (allEqual (snd y)  (deleteSymPairs y xs))) \n                   | (x == (snd y)) = ((fst y) : (allEqual (fst y)  (deleteSymPairs y xs)))\n                   | otherwise =  (allEqual x  xs)\n\ntest1 = allEqual 'a' symm \ntest2 = allEqual 'm' symm \ntest3 = allEqual 'l' symm\n</code></pre>\n\n<p>If possible I would like to keep to vanilla Haskell using lists, though maybe sets are needed?</p>\n\n<p>Any advice appreciated.</p>\n"}, {"tags": ["haskell", "type-families", "deriving", "quantified-constraints"], "comments": [{"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 1, "creation_date": 1559816713, "post_id": 56470600, "comment_id": 99541507, "body": "Ouch. I thought that <code>(forall a. Show a =&gt; Show (HKD f a))</code> was disallowed when <code>HKD</code> is not a constructor, but I was wrong. Note that if we assume that quantified constraint, to resolve e.g. <code>HKD f b</code> we can&#39;t simply check <code>Show b</code>. Indeed if that fails, we can&#39;t report failure since it is possible that <code>HKD f b = HKD f c</code> holds (because of non-injectivity), and <code>Show c</code> is true. So, committing to <code>a=b</code> does not lead to a complete resolution method."}, {"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 1, "creation_date": 1559816853, "post_id": 56470600, "comment_id": 99541574, "body": "Again, <code>instance C a =&gt; C (HKD f a) where</code> is rejected by GHC, so I don&#39;t understand why the quantified constraint <code>(forall a. C a =&gt; C (HKD f a))</code> is accepted. How can we provide that constraint later on?"}, {"owner": {"reputation": 24509, "user_id": 6863749, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/UyoQv.jpg?s=128&g=1", "display_name": "Li-yao Xia", "link": "https://stackoverflow.com/users/6863749/li-yao-xia"}, "edited": false, "score": 0, "creation_date": 1591385041, "post_id": 56470600, "comment_id": 110046750, "body": "The answer to this question may be buried in this wholly relevant thread: <a href=\"https://gitlab.haskell.org/ghc/ghc/issues/14860\" rel=\"nofollow noreferrer\">gitlab.haskell.org/ghc/ghc/issues/14860</a>"}, {"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 1, "creation_date": 1591394405, "post_id": 56470600, "comment_id": 110050337, "body": "My general view has always been that the <code>HKD</code> trick is a Bad Idea\u2122 because it makes the easy things easier and the hard things harder."}, {"owner": {"reputation": 24509, "user_id": 6863749, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/UyoQv.jpg?s=128&g=1", "display_name": "Li-yao Xia", "link": "https://stackoverflow.com/users/6863749/li-yao-xia"}, "edited": false, "score": 1, "creation_date": 1591400216, "post_id": 56470600, "comment_id": 110051828, "body": "The core issue is independent and comes up outside of HKD."}], "answers": [{"tags": [], "owner": {"reputation": 8621, "user_id": 1848029, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qfjAy.jpg?s=128&g=1", "display_name": "lehins", "link": "https://stackoverflow.com/users/1848029/lehins"}, "is_accepted": false, "score": 5, "last_activity_date": 1559798943, "last_edit_date": 1559798943, "creation_date": 1559793215, "answer_id": 56470683, "question_id": 56470600, "link": "https://stackoverflow.com/questions/56470600/quantified-constraints-vs-closed-type-families/56470683#56470683", "title": "Quantified constraints vs. (closed) type families", "body": "<p>I don't think you can do such thing, but I could certainly be wrong. In your example you are missing an extra constraint <code>Show (f a)</code> in order for it to be complete:</p>\n\n<pre><code>deriving instance (forall a. (Show a, Show (f a)) =&gt; \n   Show (HKD f a)) =&gt; Show (Result f)\n</code></pre>\n\n<p>But that would mean that <code>Show</code> instance for <code>f a</code> cannot depend on <code>a</code>, which can be true for specific <code>f</code>, but not in general.</p>\n\n<p><strong>Edit</strong></p>\n\n<p>But at the same time it is possible to write something like that without the <code>TypeFamilies</code>:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>data Bar f = MkBar (f Int)\n\nderiving instance (forall a . Show a =&gt; Show (f a)) =&gt; Show (Bar f)\n</code></pre>\n\n<p>So, I am not sure why GHC can't figure it out.</p>\n\n<p><strong>Edit 2</strong></p>\n\n<p>Here is an interesting observation, this compiles:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>type family HKD f a where\n    -- HKD Identity a = a\n    HKD f Int = Int\n    HKD f a = f a\n\ndata Result f = MkResult\n    { foo :: HKD f Int\n    , bar :: HKD f Bool\n    }\n\nderiving instance (forall a. Show a =&gt; Show (f a)) =&gt; Show (Result f)\n</code></pre>\n\n<p>and works as expected:</p>\n\n<pre><code>\u03bb&gt; show $ MkResult 5 (Just True)\n\"MkResult {foo = 5, bar = Just True}\"\n</code></pre>\n\n<p>So, it looks like matching on <code>f</code> somehow messes up the type checker.</p>\n\n<p>Worth noting, that restricting to <code>Show (HDK f a)</code> even for the simplified example also gives the same compile time error as in the question:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>deriving instance (forall a. Show a =&gt; Show (HKD f a)) =&gt; Show (Result f)\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 24509, "user_id": 6863749, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/UyoQv.jpg?s=128&g=1", "display_name": "Li-yao Xia", "link": "https://stackoverflow.com/users/6863749/li-yao-xia"}, "is_accepted": false, "score": 7, "last_activity_date": 1591453662, "last_edit_date": 1591453662, "creation_date": 1591392809, "answer_id": 62224425, "question_id": 56470600, "link": "https://stackoverflow.com/questions/56470600/quantified-constraints-vs-closed-type-families/62224425#62224425", "title": "Quantified constraints vs. (closed) type families", "body": "<p>tl;dr, gist: <a href=\"https://gist.github.com/Lysxia/7f955fe5f2024529ba691785a0fe4439\" rel=\"nofollow noreferrer\">https://gist.github.com/Lysxia/7f955fe5f2024529ba691785a0fe4439</a></p>\n\n<h2>Boilerplate constraints</h2>\n\n<p>First, if the question is about avoiding repetitive code, this is mostly addressed by generics alone, without <code>QuantifiedConstraints</code>. The constraint <code>(Show (HKD f Int), Show (HKD f Bool))</code> can be computed from the generic representation <code>Rep (Result f)</code>. The generic-data package (disclaimer: that I wrote) implements this:</p>\n\n<pre><code>data Result f = MkResult (HKD f Int) (HKD f Bool)\n  deriving Generic\n\n-- GShow0 and gshowsPrec from Generic.Data\ninstance GShow0 (Rep (Result f)) =&gt; Show (Result f) where\n  showsPrec = gshowsPrec\n</code></pre>\n\n<p>or with <code>DerivingVia</code>:</p>\n\n<pre><code>-- Generically and GShow0 from Generic.Data\nderiving via Generically (Result f) instance GShow0 (Rep (Result f)) =&gt; Show (Result f)\n</code></pre>\n\n<h2>Quantified constraints with type families</h2>\n\n<p>Nevertheless, the constraint <code>(Show (HKD f Int), Show (HKD f Bool))</code> may be less than ideal for various reasons. The <code>QuantifiedConstraints</code> extension may seem to provide a more natural constraint <code>forall x. Show (HKD f x)</code>:</p>\n\n<ul>\n<li><p>it would entail the tuple <code>(Show (HKD f Int), Show (HKD f Bool))</code>;</p></li>\n<li><p>contrary to that tuple, it does not blow up in size when the record gets big, and does not leak the field types of <code>Result</code> as they may be subject to change.</p></li>\n</ul>\n\n<p>Unfortunately, that constraint is actually not well-formed. The following GHC issue discusses the problem in detail: <a href=\"https://gitlab.haskell.org/ghc/ghc/issues/14840\" rel=\"nofollow noreferrer\">https://gitlab.haskell.org/ghc/ghc/issues/14840</a> I don't understand all of the reasons yet, but in brief:</p>\n\n<ul>\n<li><p>Quantified constraints won't work directly with type families for the foreseeable future, for reasons both theoretical and practical;</p></li>\n<li><p>But there is a workaround for most use cases.</p></li>\n</ul>\n\n<p>A quantified constraint should be viewed as a sort of \"local <code>instance</code>\". The general rule then is that type families are not allowed in the head of any instance (\"instance head\" = the <code>HEAD</code> in the following <code>instance ... =&gt; HEAD where</code>). So <code>forall a. Show (HKD f a)</code> (viewed as a \"local\" <code>instance Show (HKD f a)</code>) is illegal.</p>\n\n<h3>Quantified constraint smuggler</h3>\n\n<p>The following solution is credited to Icelandjack (Source: <a href=\"https://gitlab.haskell.org/ghc/ghc/issues/14860#note_188736\" rel=\"nofollow noreferrer\">this comment from the ticket linked earlier</a>; thanks also to Ryan Scott for relaying it.)</p>\n\n<p>We can define another class that's equivalent to <code>Show (HKD f a)</code>:</p>\n\n<pre><code>class    Show (HKD f a) =&gt; ShowHKD f a\ninstance Show (HKD f a) =&gt; ShowHKD f a\n</code></pre>\n\n<p>Now <code>forall x. ShowHKD f x</code> is a legal constraint that morally expresses the intended <code>forall x. Show (HKD f x)</code>. But it's not at all obvious how to use it. For example, the following snippet fails to type check (note: we can easily ignore the ambiguity issues):</p>\n\n<pre><code>showHKD :: forall f. (forall x. ShowHKD f x) =&gt; HKD f Int -&gt; String\nshowHKD = show\n\n-- Error:\n-- Could not deduce (Show (HKD f Int)) from the context (forall x. ShowHKD f x)\n</code></pre>\n\n<p>This is counterintuitive, because <code>ShowHKD f x</code> is equivalent to <code>Show (HKD f x)</code> which can of course be instantiated with <code>Show (HKD f Int)</code>. So why is that rejected? The constraint solver reasons backwards: the use of <code>show</code> first requires a constraint <code>Show (HKD f Int)</code>, but the solver is immediately stuck. It sees <code>forall x. ShowHKD f x</code> in the context, but there is no clue for the solver to know that it should instantiate <code>x</code> to <code>Int</code>. You should imagine that at this point, the constraint solver has no idea of any relationship between <code>Show</code> and <code>ShowHKD</code>. It just wants a <code>Show</code> constraint, and there is none in the context.</p>\n\n<p>We can help the constraint solver as follows, by annotating the body of the function with the needed instantiation(s) of <code>ShowHKD f x</code>, here <code>ShowHKD f Int</code>:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>showHKD :: forall f. (forall x. ShowHKD f x) =&gt; HKD f Int -&gt; String\nshowHKD = show :: ShowHKD f Int =&gt; HKD f Int -&gt; String\n</code></pre>\n\n<p>This annotation <em>provides</em> the constraint <code>ShowHKD f Int</code> to the body <code>show</code>, which in turn makes the superclass available <code>Show (HKD f Int)</code> so <code>show</code> can be immediately satisfied. On the other side, the annotation <em>requires</em> the constraint <code>ShowHKD f Int</code> from its context, which provides <code>forall x. ShowHKD f x</code>. Those constraints <em>match</em>, and that leads the constraint solver to instantiate <code>x</code> appropriately.</p>\n\n<h3>Deriving Show with quantified constraints</h3>\n\n<p>With this, we can implement <code>Show</code> with a quantified constraint, using generics to fill out the body, and with some annotations to instantiate the quantified constraint,\n<code>(ShowHKD f Int, ShowHKD f Bool)</code>:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>instance (forall a. Show a =&gt; ShowHKD f a) =&gt; Show (Result f) where\n  showsPrec = gshowsPrec :: (ShowHKD f Int, ShowHKD f Bool) =&gt; Int -&gt; Result f -&gt; ShowS\n</code></pre>\n\n<p>As before, those constraints can be automated with generics, so the only thing that changes in this implementation from one type to another is the name <code>Result</code>:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>instance (forall a. Show a =&gt; ShowHKD f a) =&gt; Show (Result f) where\n  showsPrec = gshowsPrec :: ShowHKDFields f (Rep (Result HKDTag)) =&gt; Int -&gt; Result f -&gt; ShowS\n\n-- New definitions: ShowHKDFields and HKDTag; see gist at the end.\n</code></pre>\n\n<p>And with a bit more effort, we can have <code>DerivingVia</code> too:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>deriving via GenericallyHKD Result f instance (forall a. Show a =&gt; ShowHKD f a) =&gt; Show (Result f)\n\n-- New definition: GenericallyHKD; see gist.\n</code></pre>\n\n<hr>\n\n<p>Full gist: <a href=\"https://gist.github.com/Lysxia/7f955fe5f2024529ba691785a0fe4439\" rel=\"nofollow noreferrer\">https://gist.github.com/Lysxia/7f955fe5f2024529ba691785a0fe4439</a></p>\n"}], "owner": {"reputation": 25144, "user_id": 477476, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/Qf4TT.png?s=128&g=1", "display_name": "Cactus", "link": "https://stackoverflow.com/users/477476/cactus"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 236, "favorite_count": 1, "answer_count": 2, "score": 8, "last_activity_date": 1591453662, "creation_date": 1559792305, "question_id": 56470600, "link": "https://stackoverflow.com/questions/56470600/quantified-constraints-vs-closed-type-families", "title": "Quantified constraints vs. (closed) type families", "body": "<p>I am trying to use <a href=\"https://reasonablypolymorphic.com/blog/higher-kinded-data/\" rel=\"noreferrer\">this blogpost's approach to higher-kinded data without dangling <code>Identity</code> functors for the trival case</a> together with quantified-constraint deriving:</p>\n\n<pre><code>{-# LANGUAGE TypeFamilies #-}\n{-# LANGUAGE QuantifiedConstraints, StandaloneDeriving, UndecidableInstances #-}\nmodule HKD2 where\n\nimport Control.Monad.Identity\n\ntype family HKD f a where\n    HKD Identity a = a\n    HKD f        a = f a\n\ndata Result f = MkResult\n    { foo :: HKD f Int\n    , bar :: HKD f Bool\n    }\n\nderiving instance (forall a. Show a =&gt; Show (HKD f a)) =&gt; Show (Result f)\n</code></pre>\n\n<p>This results in the infuriatingly self-contradicting error message:</p>\n\n<blockquote>\n  <p>Could not deduce <code>Show (HKD f a)</code>\n    from the context: <code>forall a. Show a =&gt; Show (HKD f a)</code></p>\n</blockquote>\n\n<p>Is there a way to do this without being long-winded about it and doing</p>\n\n<pre><code>deriving instance (Show (HKD f Int), Show (HKD f Bool)) =&gt; Show (Result f)\n</code></pre>\n\n<p>?</p>\n"}, {"tags": ["haskell"], "comments": [{"owner": {"reputation": 57219, "user_id": 33796, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/08727b23ba62e634b32988cdff082663?s=128&d=identicon&r=PG", "display_name": "luqui", "link": "https://stackoverflow.com/users/33796/luqui"}, "edited": false, "score": 5, "creation_date": 1559786150, "post_id": 56470015, "comment_id": 99531242, "body": "Please post the error.  (always)"}], "answers": [{"comments": [{"owner": {"reputation": 75362, "user_id": 625403, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/786eed7da67079cb5d63a49d469af25b?s=128&d=identicon&r=PG", "display_name": "amalloy", "link": "https://stackoverflow.com/users/625403/amalloy"}, "edited": false, "score": 7, "creation_date": 1559809539, "post_id": 56470115, "comment_id": 99537756, "body": "There is a somewhat tidier solution by splitting the problem up into two parts and composing those, instead of doing it all at once. <code>incDec = map (\\x -&gt; x + signum x) . filter (&#47;= 0)</code>. To get very fancy you could replace the lambda with <code>((+) &lt;*&gt; signum)</code> - normally I&#39;m not a fan of <code>&lt;*&gt;</code> for functions, but here it&#39;s almost readable: &quot;add the signum&quot;."}, {"owner": {"reputation": 61, "user_id": 4360704, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1b13b095f0db76a623ca6b1140092cee?s=128&d=identicon&r=PG&f=1", "display_name": "thekevin", "link": "https://stackoverflow.com/users/4360704/thekevin"}, "edited": false, "score": 0, "creation_date": 1560594967, "post_id": 56470115, "comment_id": 99794106, "body": "I really appreciate the help everyone. This one was really doing my head in."}], "tags": [], "owner": {"reputation": 22377, "user_id": 2288659, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bBg8v.png?s=128&g=1", "display_name": "Silvio Mayolo", "link": "https://stackoverflow.com/users/2288659/silvio-mayolo"}, "is_accepted": false, "score": 4, "last_activity_date": 1559786899, "creation_date": 1559786899, "answer_id": 56470115, "question_id": 56470015, "link": "https://stackoverflow.com/questions/56470015/increment-positive-numbers-and-decrement-negative-number-all-by-1/56470115#56470115", "title": "Increment positive numbers and decrement negative number all by 1", "body": "<p><code>$</code> is going to bind looser than any other operator, so you need explicit parentheses. Also, you don't need to deconstruct the list since you're just putting it back together (the <code>x:xs</code> pattern is unnecessary and breaks your function on the empty list)</p>\n\n<pre><code>incDec xs = (map (+1) $ filter (&gt;0) xs) ++\n            (map (subtract 1) $ filter (&lt;0) xs)\n</code></pre>\n\n<p>(See <a href=\"https://hackage.haskell.org/package/base-4.12.0.0/docs/Prelude.html#v:subtract\" rel=\"nofollow noreferrer\">here</a> for why I use <code>subtract</code> and not <code>-</code>  above)</p>\n\n<p>However, this still doesn't do what you want. Since you're filtering and mapping twice, you're going to end up with all the positive numbers at the beginning and the negatives at the end, so you lose the original order of the list. Instead, we'll use <a href=\"https://hackage.haskell.org/package/base-4.12.0.0/docs/Prelude.html#v:concatMap\" rel=\"nofollow noreferrer\"><code>concatMap</code></a>, which can be used as a sort of hybrid filter / map.</p>\n\n<pre><code>incDec :: (Ord a, Num a) =&gt; [a] -&gt; [a]\nincDec = concatMap go                  -- Do the map / filter combination\n    where go x = case x `compare` 0 of -- Compare the number to 0\n                   LT -&gt; [x - 1]       -- If negative, subtract one\n                   GT -&gt; [x + 1]       -- If positive, add one\n                   EQ -&gt; []            -- If zero, eliminate\n</code></pre>\n\n<p>Example usage:</p>\n\n<pre><code>*Main&gt; incDec [2, -4, 0, 66, -1]\n[3,-5,67,-2]\n</code></pre>\n"}], "owner": {"reputation": 61, "user_id": 4360704, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1b13b095f0db76a623ca6b1140092cee?s=128&d=identicon&r=PG&f=1", "display_name": "thekevin", "link": "https://stackoverflow.com/users/4360704/thekevin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 900, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1559820874, "creation_date": 1559785779, "last_edit_date": 1559785978, "question_id": 56470015, "link": "https://stackoverflow.com/questions/56470015/increment-positive-numbers-and-decrement-negative-number-all-by-1", "title": "Increment positive numbers and decrement negative number all by 1", "body": "<p>Declare the type and define a function that takes a list of numbers and returns a list that all the positive elements are incremented (increased by one) and negative numbers are decrement (subtracted by one). Also if there are 0 in the list it would be eliminated.    </p>\n\n<p>For example     fun [2, -4, 0, 66, -1]  would returns   [3, -5, 67, -2]</p>\n\n<p>I've tried (++) between the two filter and map statements and zipWith (++)</p>\n\n<p>Here is the code I have which gives a compile error.</p>\n\n<pre><code>incDec (x:xs) = map (+1) $ filter (&gt;0) (x:xs) (++)\n                map (-1) $ filter (&lt;0) (x:xs)\n</code></pre>\n"}]