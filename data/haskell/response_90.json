[{"tags": ["haskell", "dependent-type"], "comments": [{"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 0, "creation_date": 1475104609, "post_id": 39758994, "comment_id": 66814126, "body": "For what its worth, you aren&#39;t the first to have stumbled on this. <a href=\"https://blog.jle.im/entry/fixed-length-vector-types-in-haskell-2015.html\" rel=\"nofollow noreferrer\">This</a> post (which makes instance for most of the classes you mentioned) also has <code>Vec :: Nat -&gt; Type -&gt; Type</code>."}, {"owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "edited": false, "score": 0, "creation_date": 1475105153, "post_id": 39758994, "comment_id": 66814286, "body": "<code>Type -&gt; Nat -&gt; Type</code> is just the generally-more common order, in maths (<code>\u211d&#179;</code> etc.) and currying-oblivious languages (<code>std::array&lt;double, 3&gt;</code>). Currying is what makes the Haskell order useful."}, {"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 0, "creation_date": 1477768056, "post_id": 39758994, "comment_id": 67900974, "body": "<a href=\"http://stackoverflow.com/a/40252235/3072788\">This</a> sort of trick with <code>Bump</code> isn&#39;t possible if the <code>Nat</code> doesn&#39;t occur in the last position."}, {"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "reply_to_user": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 0, "creation_date": 1477769115, "post_id": 39758994, "comment_id": 67901279, "body": "@Alec, it&#39;s a bit less convenient, but it&#39;s still quite possible. You can either make <code>Bump</code> take an extra parameter or use <code>newtype Flip f x y = Flip { unFlip :: f y x }</code> to match things up."}], "answers": [{"comments": [{"owner": {"reputation": 42094, "user_id": 828361, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/6a82397672dcc1fca31c32508ef0798b?s=128&d=identicon&r=PG", "display_name": "pigworker", "link": "https://stackoverflow.com/users/828361/pigworker"}, "edited": false, "score": 3, "creation_date": 1475120968, "post_id": 39759975, "comment_id": 66817629, "body": "Just that, yes. And vexing it often is, too. In Haskell, I put the length first...or generalise to funxtors on indexed sets."}, {"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 0, "creation_date": 1475129288, "post_id": 39759975, "comment_id": 66820275, "body": "Do you know <i>why</i> Agda behaves like that? Is it too expensive to check whether each argument is a parameter or an index (as GHC does)?"}, {"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "reply_to_user": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 2, "creation_date": 1475134728, "post_id": 39759975, "comment_id": 66823298, "body": "@dfeuer I guess GHC does not have to generate the associated induction principle form an inductive type, but Agda has to. Above, <code>A</code> can be chosen to be a parameter or an index, and each choice generates a different induction principle. There&#39;s no &quot;right&quot; choice, I think, which can be made by Agda, so it&#39;s better to let the use decide."}, {"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "reply_to_user": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 0, "creation_date": 1475258571, "post_id": 39759975, "comment_id": 66887801, "body": "@chi, why would you ever want to treat a parameter as an index?"}, {"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 1, "creation_date": 1475259588, "post_id": 39759975, "comment_id": 66888289, "body": "I&#39;m not enough experienced to assess which one is better. But the generated induction principles are different, and that might matter. Even if one principle implies the other one, maybe the user wants to obtain the weaker one for some convenience reason (?). Anyway, autodeduction would make <code>a</code> in <code>data T a = B | K (T a)</code> as a parameter, and in <code>data T a = B  | K (T (F a))</code> as an index, AFAICS. I&#39;d like the generated induction principles to be more consistent: if there are two options, make me choose which one."}, {"owner": {"reputation": 6694, "user_id": 2555037, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c62b3037add2dde3cb8dd935f7ca9fe7?s=128&d=identicon&r=PG", "display_name": "Toxaris", "link": "https://stackoverflow.com/users/2555037/toxaris"}, "edited": false, "score": 2, "creation_date": 1475277090, "post_id": 39759975, "comment_id": 66894959, "body": "The induction principle is part of the exposed interface of the type, so maybe the user plans to add more constructors that turn a parameter into an index, and wants to avoid changing the induction principle then."}], "tags": [], "owner": {"reputation": 6694, "user_id": 2555037, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c62b3037add2dde3cb8dd935f7ca9fe7?s=128&d=identicon&r=PG", "display_name": "Toxaris", "link": "https://stackoverflow.com/users/2555037/toxaris"}, "is_accepted": true, "score": 7, "last_activity_date": 1475126566, "last_edit_date": 1475126566, "creation_date": 1475112455, "answer_id": 39759975, "question_id": 39758994, "link": "https://stackoverflow.com/questions/39758994/order-of-type-arguments-in-indexed-vectors/39759975#39759975", "title": "Order of type arguments in indexed vectors", "body": "<p>I think this is not just conventional, but related to parameters vs. indexes in some dependently-typed languages. For example, Agda and Coq both require that parameters come before indexes in data type definitions. We would write</p>\n\n<pre><code>data Vec (A : Set) : Nat -&gt; Set where ...\n</code></pre>\n\n<p>in Agda, because we want the <code>Set</code> argument to be treated as a parameter. If we would swap the argument order and write</p>\n\n<pre><code>data Vec : Nat -&gt; Set -&gt; Set where ...\n</code></pre>\n\n<p>instead, the <code>Set</code> argument would be treated as an index. We would still use it as a parameter in the constructor signatures, of course, but the Agda type checker would miss the information that it is a parameter.</p>\n\n<p>In Haskell, the parameter order doesn't matter, so using an order that works well with currying is a good idea.</p>\n\n<p>In Agda, I sometimes use the following work-around to get the currying right:</p>\n\n<pre><code>data Vec' (A : Set) : Nat -&gt; Set\n\nVec : Nat -&gt; Set -&gt; Set\nVec n A = Vec' A n\n\n{-# DISPLAY Vec' A n = Vec n A #-}\n\ndata Vec' A where\n  nil : Vec zero A\n  cons : {n : Nat} -&gt; A -&gt; Vec n A -&gt; Vec (succ n) A\n</code></pre>\n\n<p>But I'm not sure the extra burden on the readers of the code is worth it.</p>\n"}], "owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 94, "favorite_count": 0, "accepted_answer_id": 39759975, "answer_count": 1, "score": 4, "last_activity_date": 1475126566, "creation_date": 1475104197, "question_id": 39758994, "link": "https://stackoverflow.com/questions/39758994/order-of-type-arguments-in-indexed-vectors", "title": "Order of type arguments in indexed vectors", "body": "<p>It seems conventional in dependently-typed programming to define</p>\n\n<pre><code>data Vec :: Type -&gt; Nat -&gt; Type where\n  Nil :: Vec a 'Z\n  Cons :: a -&gt; Vec a n -&gt; Vec a ('S n)\n</code></pre>\n\n<p>In Haskell, however, the <code>Functor</code>, <code>Applicative</code>, <code>Foldable</code>, <code>Traversable</code>, <code>Eq1</code>, <code>Ord1</code>, etc., classes seem to make a good case for flipping the arguments around, to <code>Vec :: Nat -&gt; Type -&gt; Type</code>.</p>\n\n<p>Is there some important reason for the usual convention? Or is it just what people happen to use in languages not based substantially on type classes?</p>\n"}, {"tags": ["haskell", "hakyll"], "comments": [{"owner": {"reputation": 507143, "user_id": 1048572, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/7f2c4de95e8f4f8f5a71c3aaf0ed312a?s=128&d=identicon&r=PG", "display_name": "Bergi", "link": "https://stackoverflow.com/users/1048572/bergi"}, "edited": false, "score": 0, "creation_date": 1475107152, "post_id": 39758570, "comment_id": 66814696, "body": "What is &quot;the generated webpage&quot;? Does it create the paginated files? And what does &quot;show nothing&quot; mean, is each file empty?"}, {"owner": {"reputation": 2337, "user_id": 3595992, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a8fc8a00391b1282338f66de57e3fea0?s=128&d=identicon&r=PG&f=1", "display_name": "JeanJouX", "link": "https://stackoverflow.com/users/3595992/jeanjoux"}, "reply_to_user": {"reputation": 507143, "user_id": 1048572, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/7f2c4de95e8f4f8f5a71c3aaf0ed312a?s=128&d=identicon&r=PG", "display_name": "Bergi", "link": "https://stackoverflow.com/users/1048572/bergi"}, "edited": false, "score": 0, "creation_date": 1475177643, "post_id": 39758570, "comment_id": 66851463, "body": "I have added some precisions. The generated pages supposed to show 3 posts are nearly empty. Only the link to the next and previous pages appear."}, {"owner": {"reputation": 507143, "user_id": 1048572, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/7f2c4de95e8f4f8f5a71c3aaf0ed312a?s=128&d=identicon&r=PG", "display_name": "Bergi", "link": "https://stackoverflow.com/users/1048572/bergi"}, "edited": false, "score": 0, "creation_date": 1475179529, "post_id": 39758570, "comment_id": 66852438, "body": "Does the <code>for</code> loop run and create some whitespaces (empty lines) in the resulting file, or is <code>tools</code> itself empty?"}, {"owner": {"reputation": 2337, "user_id": 3595992, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a8fc8a00391b1282338f66de57e3fea0?s=128&d=identicon&r=PG&f=1", "display_name": "JeanJouX", "link": "https://stackoverflow.com/users/3595992/jeanjoux"}, "reply_to_user": {"reputation": 507143, "user_id": 1048572, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/7f2c4de95e8f4f8f5a71c3aaf0ed312a?s=128&d=identicon&r=PG", "display_name": "Bergi", "link": "https://stackoverflow.com/users/1048572/bergi"}, "edited": false, "score": 0, "creation_date": 1475182253, "post_id": 39758570, "comment_id": 66853744, "body": "I think the <code>for</code> loop is not working because when I put some text in the loop, this text doesn&#39;t appear. How can I know if <code>tools</code> is empty or not ?"}, {"owner": {"reputation": 507143, "user_id": 1048572, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/7f2c4de95e8f4f8f5a71c3aaf0ed312a?s=128&d=identicon&r=PG", "display_name": "Bergi", "link": "https://stackoverflow.com/users/1048572/bergi"}, "edited": false, "score": 0, "creation_date": 1475182563, "post_id": 39758570, "comment_id": 66853902, "body": "Yes, putting text inside the loop is enough, it would show for sure. So if <code>tools</code> is empty, that suggests <code>loadAll</code> doesn&#39;t match anything (which is weird given that the paginator seems to know the entries and their number). Do you have a <code>compile</code> rule for all of the tool posts?"}, {"owner": {"reputation": 2337, "user_id": 3595992, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a8fc8a00391b1282338f66de57e3fea0?s=128&d=identicon&r=PG&f=1", "display_name": "JeanJouX", "link": "https://stackoverflow.com/users/3595992/jeanjoux"}, "reply_to_user": {"reputation": 507143, "user_id": 1048572, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/7f2c4de95e8f4f8f5a71c3aaf0ed312a?s=128&d=identicon&r=PG", "display_name": "Bergi", "link": "https://stackoverflow.com/users/1048572/bergi"}, "edited": false, "score": 0, "creation_date": 1475183908, "post_id": 39758570, "comment_id": 66854565, "body": "I don&#39;t know. This code snippet is the only one I use for pagination. What do you mean by <code>compile rule</code>?"}, {"owner": {"reputation": 507143, "user_id": 1048572, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/7f2c4de95e8f4f8f5a71c3aaf0ed312a?s=128&d=identicon&r=PG", "display_name": "Bergi", "link": "https://stackoverflow.com/users/1048572/bergi"}, "edited": false, "score": 1, "creation_date": 1475184297, "post_id": 39758570, "comment_id": 66854717, "body": "Iirc, <code>loadAll</code> doesn&#39;t find anything that is not already <code>match</code>ed by a general rule elsewhere. So if you don&#39;t do anything else (like rendering each on its own page) with the <code>&#47;tools&#47;*</code> posts that&#39;s likely the reason"}, {"owner": {"reputation": 2337, "user_id": 3595992, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a8fc8a00391b1282338f66de57e3fea0?s=128&d=identicon&r=PG&f=1", "display_name": "JeanJouX", "link": "https://stackoverflow.com/users/3595992/jeanjoux"}, "reply_to_user": {"reputation": 507143, "user_id": 1048572, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/7f2c4de95e8f4f8f5a71c3aaf0ed312a?s=128&d=identicon&r=PG", "display_name": "Bergi", "link": "https://stackoverflow.com/users/1048572/bergi"}, "edited": false, "score": 0, "creation_date": 1475185297, "post_id": 39758570, "comment_id": 66855122, "body": "It Works ! You where right ! I created a basic compile rule to create standalone pages for tools and the pagination work as I want."}], "answers": [{"comments": [{"owner": {"reputation": 507143, "user_id": 1048572, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/7f2c4de95e8f4f8f5a71c3aaf0ed312a?s=128&d=identicon&r=PG", "display_name": "Bergi", "link": "https://stackoverflow.com/users/1048572/bergi"}, "edited": false, "score": 1, "creation_date": 1475185834, "post_id": 39780508, "comment_id": 66855318, "body": "You don&#39;t even need to <code>route</code> it - <code>compile</code>ing it should be enough (like for templates)"}], "tags": [], "owner": {"reputation": 2337, "user_id": 3595992, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a8fc8a00391b1282338f66de57e3fea0?s=128&d=identicon&r=PG&f=1", "display_name": "JeanJouX", "link": "https://stackoverflow.com/users/3595992/jeanjoux"}, "is_accepted": true, "score": 1, "last_activity_date": 1475185418, "creation_date": 1475185418, "answer_id": 39780508, "question_id": 39758570, "link": "https://stackoverflow.com/questions/39758570/multi-posts-per-pages/39780508#39780508", "title": "Multi posts per pages", "body": "<p>This basic compile rule must be run before pagination : </p>\n\n<pre><code>tools = do\n  match \"tools/*\" $ do\n    route $ setExtension \"html\"\n    compile $ compiler\n      &gt;&gt;= loadAndApplyTemplate \"templates/tools.html\"    postCtx\n      &gt;&gt;= relativizeUrls\n</code></pre>\n\n<p>And then, it Work!</p>\n"}], "owner": {"reputation": 2337, "user_id": 3595992, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a8fc8a00391b1282338f66de57e3fea0?s=128&d=identicon&r=PG&f=1", "display_name": "JeanJouX", "link": "https://stackoverflow.com/users/3595992/jeanjoux"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 111, "favorite_count": 1, "accepted_answer_id": 39780508, "answer_count": 1, "score": 1, "last_activity_date": 1496559917, "creation_date": 1475101296, "last_edit_date": 1496559917, "question_id": 39758570, "link": "https://stackoverflow.com/questions/39758570/multi-posts-per-pages", "title": "Multi posts per pages", "body": "<p>I'm making a website with Hakyll and I would like to gather some posts in the same page. I find somes example on websites such as <a href=\"https://github.com/dannysu/hakyll-blog/blob/master/site.hs\" rel=\"nofollow noreferrer\">dannysu</a> or <a href=\"http://www.eanalytica.com/site/\" rel=\"nofollow noreferrer\">EAnalytica</a>, but my code is not working and I don't understand why.</p>\n\n<p>My code compile fine, the <code>trace</code> function show that all the posts are loaded, the compilation is successfull but all the webpages supposed to contain 3 posts are empty. Only the text before the loop and the links to the next and previous pages are visible.</p>\n\n<p><img src=\"https://i.stack.imgur.com/iqfu6.png\" alt=\"enter image description here\"></p>\n\n<p>My Hakyll code is the following. </p>\n\n<pre><code>toolsPages = do\n  pag &lt;- buildPaginateWith grouper \"tools/*\" makeId\n  paginateRules pag $ \\pageNum pattern -&gt; trace (show pag) $ do\n      route idRoute\n      compile $ do\n          posts &lt;- recentFirst =&lt;&lt; loadAll pattern\n          let paginateCtx = paginateContext pag pageNum\n              ctx =\n                  constField \"title\" (\"Tools - Page \" ++ (show pageNum)) &lt;&gt;\n                  listField \"tools\" (postCtx) (return posts) &lt;&gt;\n                  paginateCtx &lt;&gt;\n                  defaultContext\n          makeItem \"\"\n              &gt;&gt;= loadAndApplyTemplate \"templates/outils-pag.html\" ctx\n              &gt;&gt;= relativizeUrls\n\ngrouper ids = (liftM (paginateEvery 3) . sortRecentFirst) ids\n\nmakeId pageNum = fromFilePath $ \"blog/page/\" ++ (show pageNum) ++ \"/index.html\"\n\npostCtx :: Context String\npostCtx =\n  dateField \"date\" \"%d / %m / %Y\"\n  `mappend` bodyField \"body\"\n  `mappend` defaultContext\n</code></pre>\n\n<p>The templates/outils-pag.html template contains the following. </p>\n\n<pre><code>some text before the loop\n$for(tool)$\nsome text inside the loop\n$date$\n$teaser$\n$body$\n$endfor$\n\n$if(previousPageNum)$\n&lt;a href=\"$previousPageUrl$\"&gt;previous&lt;/a&gt;\n$else$\n$endif$\n&amp;mdash;\n$currentPageNum$ of $numPages$\n&amp;mdash;\n$if(nextPageNum)$\n&lt;a href=\"$nextPageUrl$\"&gt;next&lt;/a&gt;\n$else$\n$endif$\n</code></pre>\n\n<p>Do you have an idea of what is wrong with my code?<br>\nDo you know another example of pagination with Hakyll?</p>\n"}, {"tags": ["haskell"], "answers": [{"tags": [], "owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "is_accepted": true, "score": 5, "last_activity_date": 1475134307, "last_edit_date": 1475134307, "creation_date": 1475104966, "answer_id": 39759094, "question_id": 39757567, "link": "https://stackoverflow.com/questions/39757567/avoiding-mutable-state-to-update-string/39759094#39759094", "title": "Avoiding mutable state to update String", "body": "<p>Use recursion:</p>\n\n<pre><code>test :: IO () \ntest = let\n   loop \"eee\" = putStrLn \"ending\"    -- end of the \"loop\"\n   loop l = do                       -- \"loop\" iteration\n      int &lt;- randomRIO (1, 10) :: IO Int\n      if int &lt; 5\n       then do\n         putStrLn \"less\"\n         loop l                -- same value for l\n       else do\n         putStrLn \"greater\"\n         loop ('e':l)          -- updated value for l\n   in loop \"\"                  -- \"loop\" start with initial value for l\n</code></pre>\n\n<p>The idea is that <code>loop l</code> takes as a parameter the current value of the \"mutable\" <code>l</code>. When we recurse, we pass the new value of <code>l</code>. In the <code>then</code> branch above we pass the same value since we don't want to modify it. In the <code>else</code> branch we prepend an <code>'e'</code> character.</p>\n"}], "owner": {"reputation": 45345, "user_id": 470184, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/DzXRW.jpg?s=128&g=1", "display_name": "blue-sky", "link": "https://stackoverflow.com/users/470184/blue-sky"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 101, "favorite_count": 0, "accepted_answer_id": 39759094, "answer_count": 1, "score": 0, "last_activity_date": 1475134307, "creation_date": 1475096400, "question_id": 39757567, "link": "https://stackoverflow.com/questions/39757567/avoiding-mutable-state-to-update-string", "title": "Avoiding mutable state to update String", "body": "<p>I'm attempting to write a function that will continually loop checking if a randomly generated int is less than 5, if it is less than 5 then \"e\" is appended to a string, once \"eee\" is generated then exit out of the loop.</p>\n\n<p>This Haskell code prints if a random value between 1 - 10 is less than 5 : </p>\n\n<pre><code>useInt :: Int -&gt; Int \nuseInt x = x\n\ntest :: IO () \ntest = do \n   let l = \"eee\";\n   int &lt;- randomRIO (1, 10) :: IO Int\n   if(int &lt; 5) then         \n       putStrLn \"less\"\n   else\n       putStrLn \"greater\"\n\ntest\n</code></pre>\n\n<p>But I'm unsure how to modify a string without introducing mutable state.</p>\n\n<p>To achieve this using pseudo haskell code can use : </p>\n\n<pre><code>var mutableString = \"\" :\n\nuseInt :: Int -&gt; Int \nuseInt x = x\n\ntest :: IO () \ntest = do \n   let l = \"eee\";\n   int &lt;- randomRIO (1, 10) :: IO Int\n   while(mutableString != \"eee\"){\n   if(mutableString == \"eee\")\n       break out of loop\n   else   \n       if(int &lt; 5) then \n           mutableString = mutableString + \"e\" \n           putStrLn \"less\"\n       else\n           putStrLn \"greater\"\n   }\ntest\n</code></pre>\n\n<p>Any pointers to translate above pseudo code to valid Haskell ?</p>\n"}, {"tags": ["haskell"], "answers": [{"comments": [{"owner": {"reputation": 732, "user_id": 4036668, "user_type": "registered", "accept_rate": 72, "profile_image": "https://i.stack.imgur.com/uXyvB.jpg?s=128&g=1", "display_name": "Anton Savelyev", "link": "https://stackoverflow.com/users/4036668/anton-savelyev"}, "edited": false, "score": 0, "creation_date": 1475095047, "post_id": 39756653, "comment_id": 66810366, "body": "Thank you for your response. This might work for the foo function but I would need to print at each of the step functions (not just at the end like in your example) . So I would have to change the output type of step1 and step2, which would cause some binding issues inside of the foo function. Ideas?   EDIT: Never mind. I see now that your solution works perfectly. Thank you very much."}], "tags": [], "owner": {"reputation": 16405, "user_id": 6776093, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/heFeh.png?s=128&g=1", "display_name": "redneb", "link": "https://stackoverflow.com/users/6776093/redneb"}, "is_accepted": true, "score": 8, "last_activity_date": 1475093666, "last_edit_date": 1495540028, "creation_date": 1475092887, "answer_id": 39756653, "question_id": 39756410, "link": "https://stackoverflow.com/questions/39756410/how-do-i-print-variables-from-inside-a-function/39756653#39756653", "title": "How do I print variables from inside a function?", "body": "<p>You have to change <code>foo</code> and make it operate in the <code>IO</code> monad. Effectively this \"tags\" the function as being impure (i.e. it has side effect, such as printing on <code>stdout</code>) which allows it to call functions such as <code>print</code>. Here's an example:</p>\n\n<pre><code>foo :: Integer -&gt; Integer -&gt; Integer -&gt; IO (Integer, Integer)\nfoo count a1 a2 = do\n    print (count, a1, a2)\n    case count of\n        0 -&gt; do\n            print (a1,a2)\n            return (a1,a2)\n        _ -&gt; do\n            let (count'', a1'', a2'') = step1 count a1 a2\n                (count', a1', a2') = step2 count'' a1'' a2''\n            foo count' a1' a2'\n</code></pre>\n\n<p><strong>Note</strong>: If you want to print these values for debugging purposes, then you can use <code>Debug.Trace</code> as shown in <a href=\"https://stackoverflow.com/a/39756675/6776093\">chepner's answer</a>. You should do that for debugging purposes only and for no other reason.</p>\n"}, {"tags": [], "owner": {"reputation": 384463, "user_id": 1126841, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fa05233b2357f8d11c22ef4cfc7bb85c?s=128&d=identicon&r=PG", "display_name": "chepner", "link": "https://stackoverflow.com/users/1126841/chepner"}, "is_accepted": false, "score": 8, "last_activity_date": 1475093364, "last_edit_date": 1475093364, "creation_date": 1475092954, "answer_id": 39756675, "question_id": 39756410, "link": "https://stackoverflow.com/questions/39756410/how-do-i-print-variables-from-inside-a-function/39756675#39756675", "title": "How do I print variables from inside a function?", "body": "<p>For debugging purposes only, you can use <code>Debug.Trace</code>. For example:</p>\n\n<pre><code>import Debug.Trace\n\n-- adds a2 to a1. How to print out count, a1 and a2' here?\nstep1 :: Integer -&gt; Integer -&gt; Integer -&gt; (Integer, Integer, Integer)\nstep1 count a1 a2 = traceShowID (count, a1, a2')\n    where\n        a2' = a1 + a2\n\n-- decrements count by 1. How to print out count', a1 and a2 here? Or can I do these prints somewhere in the `foo` function? \nstep2 :: Integer -&gt; Integer -&gt; Integer -&gt; (Integer, Integer, Integer)\nstep2 count a1 a2 = traceShowID (count', a1, a2)\n    where\n        count' = count - 1\n</code></pre>\n\n<p><code>traceShowID :: Show a =&gt; a -&gt; a</code> is basically <code>id</code> with the (<strong>unannounced</strong>) side effect of also printing the argument's string representation according to <code>show</code>.</p>\n"}], "owner": {"reputation": 732, "user_id": 4036668, "user_type": "registered", "accept_rate": 72, "profile_image": "https://i.stack.imgur.com/uXyvB.jpg?s=128&g=1", "display_name": "Anton Savelyev", "link": "https://stackoverflow.com/users/4036668/anton-savelyev"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5923, "favorite_count": 1, "accepted_answer_id": 39756653, "answer_count": 2, "score": 8, "last_activity_date": 1493764622, "creation_date": 1475091973, "last_edit_date": 1493764622, "question_id": 39756410, "link": "https://stackoverflow.com/questions/39756410/how-do-i-print-variables-from-inside-a-function", "title": "How do I print variables from inside a function?", "body": "<p>So I have a main function (foo) that recursively calls two other functions (step1 &amp; step2). foo will add a1 to a2 a <code>count</code> amount of times and then return (a1, a2). How can I print the variables count, a1, and a2 at each step?</p>\n\n<pre><code>-- adds a1 to a2 a `count` number of times\n-- returns (a1, a2) once count reaches 0\nfoo :: Integer -&gt; Integer -&gt; Integer -&gt; (Integer, Integer)\nfoo count a1 a2 | count == 0 = (a1,a2)\n                | otherwise = foo count' a1' a2'\n                where (count', a1', a2') = let (count'', a1'', a2'') = step1 count a1 a2\n                                           in step2 count'' a1'' a2''\n\n-- adds a2 to a1. How to print out count, a1 and a2' here?\nstep1 :: Integer -&gt; Integer -&gt; Integer -&gt; (Integer, Integer, Integer)\nstep1 count a1 a2 = (count, a1, a2')\n    where\n        a2' = a1 + a2\n\n-- decrements count by 1. How to print out count', a1 and a2 here? Or can I do these prints somewhere in the `foo` function? \nstep2 :: Integer -&gt; Integer -&gt; Integer -&gt; (Integer, Integer, Integer)\nstep2 count a1 a2 = (count', a1, a2)\n    where\n        count' = count - 1\n</code></pre>\n\n<p>This is a simplified version of code from a larger code base. I am open to using a different approach. The example output that I am looking for is:</p>\n\n<p>$> foo 3 4 5</p>\n\n<p>3 4 5</p>\n\n<p>3 4 9</p>\n\n<p>2 4 9</p>\n\n<p>2 4 13</p>\n\n<p>1 4 13</p>\n\n<p>1 4 17</p>\n\n<p>0 4 17</p>\n\n<p>(4, 17)</p>\n\n<p>EDIT: I just realized I could probably store intermediary results in a list and then print from that list. But am I correct to think that I would have to pass the list as an argument to the functions?</p>\n"}, {"tags": ["haskell", "dependent-type", "quickcheck"], "answers": [{"tags": [], "owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "is_accepted": true, "score": 4, "last_activity_date": 1475103182, "last_edit_date": 1475103182, "creation_date": 1475102510, "answer_id": 39758751, "question_id": 39755675, "link": "https://stackoverflow.com/questions/39755675/quickchecking-a-property-about-length-indexed-lists/39758751#39758751", "title": "Quickchecking a property about length indexed lists", "body": "<p>There are two instances of the same problems here. The first instance is the one causing the error message. The second instance shows up only after you solve the first problem, and will be much harder to solve.</p>\n\n<p>The error message comes from a common problem when your types are too general. A simpler example of the same error is the function:</p>\n\n<pre><code>-- Ambiguous type variable \u2018a0\u2019 arising from a use of \u2018read\u2019\nshowRead :: String -&gt; String\nshowRead = show . read\n</code></pre>\n\n<p>In a nutshell, GHC knows that there is an intermediate value of some type <code>a</code> you will create (with <code>read :: Read a =&gt; String -&gt; a</code>) which you then immediately convert back to a <code>String</code> (with <code>show :: Show a =&gt; a -&gt; String</code>). The problem is that to run this, GHC does need to know what is the type of the thing you are reading and showing - yet it has no way of figuring that out.</p>\n\n<h3>The type variable <code>a</code> is ambiguous</h3>\n\n<p>GHC is telling you it has no way of telling vectors of what type you want <code>quickCheck</code> to be testing against when it uses <code>toList_correct</code>. One fix is to add a type annotation (or use <code>TypeApplications</code>) and tell GHC what type of vector you want:</p>\n\n<pre><code>    quickCheck (toList_correct :: Vec n () -&gt; Bool)\n</code></pre>\n\n<h3>The type variable <code>n</code> is ambiguous</h3>\n\n<p>However, not only is <code>a</code> ambiguous, so is <code>n</code>! Because you are encoding into the type of the vector its length, you will only be able to quickcheck your property for vectors of a particular length. The easy fix is to settle on a particular length (or several lengths).</p>\n\n<pre><code>    quickCheck (toList_correct :: Vec Z () -&gt; Bool)\n    quickCheck (toList_correct :: Vec (S Z) () -&gt; Bool)\n    quickCheck (toList_correct :: Vec (S (S Z)) () -&gt; Bool)\n</code></pre>\n\n<p>That said, this feels (and so it should) a bit pointless - you want to test vectors of any length. The solution to this is to make an existential type <code>BoxVector</code> around your vector:</p>\n\n<pre><code>    data BoxVector a where\n      box :: Vec n a -&gt; BoxVector a\n\n    deriving instance Show a =&gt; Show (BoxVector a)\n</code></pre>\n\n<p>Now that we have this existential type, we can make an <code>Arbitrary</code> instance of it which is arbitrary even over the length of the vector:</p>\n\n<pre><code>    instance (Show a, Arbitrary a) =&gt; Arbitrary (BoxVector a) where\n      arbitrary = fromList &lt;$&gt; arbitrary\n        where\n          fromList :: [a] -&gt; BoxVector a\n          fromList = foldr (\\e (Box es) -&gt; Box (e :&gt; es)) (Box Nil)\n</code></pre>\n\n<p>We can compare this arbitrary instance with your previous one (which we won't be needing) at GHCi:</p>\n\n<pre><code>    ghci&gt; sample (arbitrary :: Gen (Vec (S (S Z)) Int)) -- must specify length\n    (:&gt;) 0 ((:&gt;) 0 Nil)\n    (:&gt;) 1 ((:&gt;) 1 Nil)\n    (:&gt;) 0 ((:&gt;) (-2) Nil)\n    (:&gt;) (-4) ((:&gt;) (-6) Nil)\n    (:&gt;) (-1) ((:&gt;) 2 Nil)\n    (:&gt;) (-8) ((:&gt;) (-5) Nil)\n    (:&gt;) (-11) ((:&gt;) 4 Nil)\n    (:&gt;) (-8) ((:&gt;) 2 Nil)\n    (:&gt;) (-8) ((:&gt;) (-16) Nil)\n    (:&gt;) (-16) ((:&gt;) (-11) Nil)\n    (:&gt;) 19 ((:&gt;) (-6) Nil)\n\n    ghci&gt; sample (arbitrary :: Gen (BoxVector Int)) -- all lengths generated\n    Box Nil\n    Box ((:&gt;) (-2) ((:&gt;) 0 Nil))\n    Box ((:&gt;) (-4) Nil)\n    Box ((:&gt;) 0 ((:&gt;) (-2) ((:&gt;) (-6) ((:&gt;) (-3) ((:&gt;) (-6) Nil)))))\n    Box ((:&gt;) 8 Nil)\n    Box ((:&gt;) 6 ((:&gt;) (-6) ((:&gt;) 9 Nil)))\n    Box ((:&gt;) 5 ((:&gt;) 4 ((:&gt;) 4 ((:&gt;) (-6) ((:&gt;) (-6) ((:&gt;) (-4) Nil))))))\n    Box ((:&gt;) (-4) ((:&gt;) 10 ((:&gt;) (-10) ((:&gt;) 2 ((:&gt;) 6 ((:&gt;) 3 ((:&gt;) 4 ((:&gt;) 1 ((:&gt;) 3 Nil)))))))))\n    Box ((:&gt;) 10 ((:&gt;) (-16) ((:&gt;) (-14) ((:&gt;) 15 ((:&gt;) 4 ((:&gt;) (-7) ((:&gt;) (-5) ((:&gt;) 5 ((:&gt;) 6 ((:&gt;) (-1) ((:&gt;) 1 ((:&gt;) (-14) ((:&gt;) (-4) ((:&gt;) 15 Nil))))))))))))))\n    Box ((:&gt;) (-2) ((:&gt;) 9 ((:&gt;) 0 ((:&gt;) 7 ((:&gt;) 5 ((:&gt;) 17 Nil))))))\n    Box ((:&gt;) (-19) ((:&gt;) (-7) ((:&gt;) (-17) ((:&gt;) (-8) ((:&gt;) (-16) ((:&gt;) 16 ((:&gt;) (-4) ((:&gt;) 16 ((:&gt;) 13 ((:&gt;) (-7) ((:&gt;) (-3) ((:&gt;) 4 ((:&gt;) (-6) ((:&gt;) (-8) ((:&gt;) (-14) Nil)))))))))))))))\n</code></pre>\n\n<p>Now, we are finally ready to make your test run. Since we want the test to run for all possible lengths, we need to change it to take a <code>BoxVector</code> instead of <code>Vec</code>.</p>\n\n<pre><code>    toList_correct :: Show a =&gt; BoxVector a -&gt; Bool\n    toList_correct (Box v) = vlength v == length (toList v)\n</code></pre>\n\n<p>Finally, we will still need to specify what our vectors will contain for the test. For this test, since we don't care about distinguishing elements of the vector from each other, might as well make them vectors of <code>()</code>.</p>\n\n<pre><code>    main :: IO ()\n    main = quickCheck (toList_correct :: BoxVector () -&gt; Bool)\n</code></pre>\n"}], "owner": {"reputation": 2970, "user_id": 2928766, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/3c5d36ca80eccb125ee34991165d481e?s=128&d=identicon&r=PG", "display_name": "Rodrigo Ribeiro", "link": "https://stackoverflow.com/users/2928766/rodrigo-ribeiro"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 218, "favorite_count": 0, "accepted_answer_id": 39758751, "answer_count": 1, "score": 3, "last_activity_date": 1475103182, "creation_date": 1475089355, "question_id": 39755675, "link": "https://stackoverflow.com/questions/39755675/quickchecking-a-property-about-length-indexed-lists", "title": "Quickchecking a property about length indexed lists", "body": "<p>I'm trying to use QuickCheck to test properties about length-indexed lists (a.k.a vectors) in Haskell. My trouble is that GHC is complaining about an ambiguous variable appearing on a <code>Show</code> constraint on <code>main</code> function. </p>\n\n<p>I've defined vectors in a standard way</p>\n\n<pre><code>data Nat = Z | S Nat\n\ndata Vec :: Nat -&gt; * -&gt; * where\n   Nil :: Vec 'Z a\n   (:&gt;) :: a -&gt; Vec n a -&gt; Vec ('S n) a\n\nvlength :: Vec n a -&gt; Int\nvlength Nil = 0\nvlength (_ :&gt; xs) = 1 + vlength xs \n</code></pre>\n\n<p>and I have defined a function that converts it to a list</p>\n\n<pre><code>toList :: Vec n a -&gt; [a]\ntoList Nil = []\ntoList (x :&gt; xs) = x : (toList xs)\n</code></pre>\n\n<p>such conversion function should preserve length, that has an immediate encoding as a property:</p>\n\n<pre><code>toList_correct :: Show a =&gt; Vec n a -&gt; Bool\ntoList_correct v = vlength v == length (toList v)\n</code></pre>\n\n<p>I've defined <code>Arbitrary</code> instances for <code>Vec</code> as:</p>\n\n<pre><code>instance (Show a, Arbitrary a) =&gt; Arbitrary (Vec 'Z a) where\n   arbitrary = return Nil\n\ninstance (Show a, Arbitrary a, Arbitrary (Vec n a)) =&gt; Arbitrary (Vec ('S n) a) where\n   arbitrary\n      = (:&gt;) &lt;$&gt; arbitrary &lt;*&gt; arbitrary\n</code></pre>\n\n<p>The trouble happens when I call the quickCheck function on <code>main</code>:</p>\n\n<pre><code>main :: IO ()\nmain = quickCheck toList_correct\n</code></pre>\n\n<p>and GHC gives me the following message:</p>\n\n<pre><code> Ambiguous type variable \u2018a0\u2019 arising from a use of \u2018quickCheck\u2019\n  prevents the constraint \u2018(Show a0)\u2019 from being solved.\n  Probable fix: use a type annotation to specify what \u2018a0\u2019 should be.\n  These potential instances exist:\n    instance [safe] Show Args -- Defined in \u2018Test.QuickCheck.Test\u2019\n    instance [safe] Show Result -- Defined in \u2018Test.QuickCheck.Test\u2019\n    instance (Show a, Show b) =&gt; Show (Either a b)\n      -- Defined in \u2018Data.Either\u2019\n    ...plus 27 others\n    ...plus 65 instances involving out-of-scope types\n    (use -fprint-potential-instances to see them all)\n\u2022 In the expression: quickCheck toList_correct\n  In an equation for \u2018main\u2019: main = quickCheck toList_correct\n</code></pre>\n\n<p>I have no idea on how could I fix this error. Any tip is highly welcome. </p>\n\n<p>The complete code is available <a href=\"https://gist.github.com/rodrigogribeiro/8708eb2a71a64b192f37f1c0b6b60281\" rel=\"nofollow\">here</a>.</p>\n"}, {"tags": ["haskell"], "comments": [{"owner": {"reputation": 29966, "user_id": 637669, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0227e5d5eaceb8ae2f751df38d421764?s=128&d=identicon&r=PG", "display_name": "arrowd", "link": "https://stackoverflow.com/users/637669/arrowd"}, "edited": false, "score": 0, "creation_date": 1475087816, "post_id": 39755060, "comment_id": 66806517, "body": "<a href=\"http://www.haskellforall.com/2012/06/you-could-have-invented-free-monads.html\" rel=\"nofollow noreferrer\">haskellforall.com/2012/06/&hellip;</a>"}, {"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 0, "creation_date": 1475088670, "post_id": 39755060, "comment_id": 66807006, "body": "What does <code>MyState</code> look like, by the way?"}, {"owner": {"reputation": 2565, "user_id": 1108505, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/a7e091fdb18efecace362189bc5f0bf5?s=128&d=identicon&r=PG", "display_name": "Tanner Swett", "link": "https://stackoverflow.com/users/1108505/tanner-swett"}, "edited": false, "score": 2, "creation_date": 1475089295, "post_id": 39755060, "comment_id": 66807347, "body": "Can you define your own monad, <code>MSM</code>, with an instance that&#39;s something along the lines of <code>MonadState (MyState MSM A) MSM</code>?"}, {"owner": {"reputation": 18999, "user_id": 825637, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/825a58fde1ef99db42c5354dab6cd472?s=128&d=identicon&r=PG", "display_name": "MasterMastic", "link": "https://stackoverflow.com/users/825637/mastermastic"}, "reply_to_user": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 0, "creation_date": 1475091717, "post_id": 39755060, "comment_id": 66808456, "body": "@dfeuer <code>MyState m a</code> looks like a record of <code>{msValue :: a, msValidate :: m Bool}</code> (in the actual code it&#39;s authentication data)."}], "answers": [{"comments": [{"owner": {"reputation": 18999, "user_id": 825637, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/825a58fde1ef99db42c5354dab6cd472?s=128&d=identicon&r=PG", "display_name": "MasterMastic", "link": "https://stackoverflow.com/users/825637/mastermastic"}, "edited": false, "score": 0, "creation_date": 1475091619, "post_id": 39755842, "comment_id": 66808406, "body": "That&#39;s great! I couldn&#39;t get the form correctly; thank you so much! P.S. <code>GeneralizedNewtypeDeriving</code> was enough to derive the instance."}, {"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "reply_to_user": {"reputation": 18999, "user_id": 825637, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/825a58fde1ef99db42c5354dab6cd472?s=128&d=identicon&r=PG", "display_name": "MasterMastic", "link": "https://stackoverflow.com/users/825637/mastermastic"}, "edited": false, "score": 0, "creation_date": 1475093108, "post_id": 39755842, "comment_id": 66809254, "body": "@MasterMastic, I swapped the argument order just now to get a <code>MonadTrans</code> instance. I&#39;m not at my computer, so I don&#39;t know if GND can derive that too."}, {"owner": {"reputation": 18999, "user_id": 825637, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/825a58fde1ef99db42c5354dab6cd472?s=128&d=identicon&r=PG", "display_name": "MasterMastic", "link": "https://stackoverflow.com/users/825637/mastermastic"}, "edited": false, "score": 0, "creation_date": 1475098561, "post_id": 39755842, "comment_id": 66812139, "body": "Yeah, <code>MonadTrans</code> usually doesn&#39;t work out for me with generalized newtype deriving, but that&#39;s the only one. And it&#39;s good that you did flip it; now there&#39;s the usual order."}, {"owner": {"reputation": 18999, "user_id": 825637, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/825a58fde1ef99db42c5354dab6cd472?s=128&d=identicon&r=PG", "display_name": "MasterMastic", "link": "https://stackoverflow.com/users/825637/mastermastic"}, "edited": false, "score": 0, "creation_date": 1475106198, "post_id": 39755842, "comment_id": 66814503, "body": "I&#39;m actually still facing an issue: how can you &quot;run&quot; this your inner-monad? e.g. <code>s -&gt; MS s m a -&gt; m (a,s)</code>."}, {"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "reply_to_user": {"reputation": 18999, "user_id": 825637, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/825a58fde1ef99db42c5354dab6cd472?s=128&d=identicon&r=PG", "display_name": "MasterMastic", "link": "https://stackoverflow.com/users/825637/mastermastic"}, "edited": false, "score": 0, "creation_date": 1475106739, "post_id": 39755842, "comment_id": 66814623, "body": "@MasterMastic, Given <code>runMyState s (MS m) = runStateT m s</code>, GHC infers <code>runMyState :: MyState (MS t m) t -&gt; MS t m a -&gt; m (a, MyState (MS t m) t)</code>, which seems reasonable. I kind of wonder if you could simplify things by refraining from bundling the authentication action with the state object, but I don&#39;t know nearly enough about your application to say."}, {"owner": {"reputation": 18999, "user_id": 825637, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/825a58fde1ef99db42c5354dab6cd472?s=128&d=identicon&r=PG", "display_name": "MasterMastic", "link": "https://stackoverflow.com/users/825637/mastermastic"}, "edited": false, "score": 0, "creation_date": 1475107745, "post_id": 39755842, "comment_id": 66814797, "body": "Fair enough; I found it much more usable after making sure to only use it on the first inner <code>m</code> occurrence (it was on both initially because of an already existing newtype). I was literally stuck inside the monad :P. Now it&#39;s completely fine after I noticed that. Thanks again!"}], "tags": [], "owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "is_accepted": true, "score": 4, "last_activity_date": 1475093041, "last_edit_date": 1475093041, "creation_date": 1475089959, "answer_id": 39755842, "question_id": 39755060, "link": "https://stackoverflow.com/questions/39755060/what-to-do-when-a-type-contains-itself/39755842#39755842", "title": "What to do when a type contains itself?", "body": "<p><code>newtype</code> to the rescue! A <code>newtype</code> or <code>data</code> declaration can break a loop.</p>\n\n<pre><code>newtype MS s m a = MS\n  {getMS :: StateT (MyState (MS s m) s) m a}\n  deriving (Functor, Applicative, Monad)\n\nderiving instance Monad m =&gt;\n  MonadState (MyState (MS s m) s) (MS s m)\n\ninstance MonadTrans (MS s) where\n  lift = MS . lift\n</code></pre>\n"}], "owner": {"reputation": 18999, "user_id": 825637, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/825a58fde1ef99db42c5354dab6cd472?s=128&d=identicon&r=PG", "display_name": "MasterMastic", "link": "https://stackoverflow.com/users/825637/mastermastic"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 118, "favorite_count": 0, "accepted_answer_id": 39755842, "answer_count": 1, "score": 6, "last_activity_date": 1475093041, "creation_date": 1475087284, "question_id": 39755060, "link": "https://stackoverflow.com/questions/39755060/what-to-do-when-a-type-contains-itself", "title": "What to do when a type contains itself?", "body": "<p>I have code that works for a monad that's constrained to have some state.\nI'm having a problem because the state has a type variable that requires the monad.</p>\n\n<p>It looks like:</p>\n\n<pre><code>myget :: MonadState (MyState m A) m =&gt; m A\n</code></pre>\n\n<p>Now when I try to make it more specific, there's a problem. E.g. just with <code>StateT</code> (on some inner-monad <code>im</code>):</p>\n\n<pre><code>myget' :: StateT &lt;loops here&gt; im A\nmyget' :: StateT (MyState &lt;loop&gt; A) im A\nmyget' :: StateT (MyState (MyState &lt;loop&gt; A) A) im A\nmyget' :: StateT (MyState (MyState (MyState &lt;loop&gt; A) A) A) im A\n...\nmyget' = myget\n</code></pre>\n\n<p>So obviously I can't write this type signature; I can't even leave it for type-inference.</p>\n\n<p>How can I solve this?<br>\nI did kind of solve it by making <code>myget</code> (the first, general definition) work on a monad transformer instead, and it did work, but then the code doesn't play nicely with anything else (because usually people work with monads transformers as just monads), so it's not a really good solution.</p>\n\n<p>Any ideas?</p>\n"}, {"tags": ["haskell", "operator-precedence"], "comments": [{"owner": {"reputation": 4039, "user_id": 667147, "user_type": "registered", "accept_rate": 72, "profile_image": "https://i.stack.imgur.com/1iNND.png?s=128&g=1", "display_name": "jarandaf", "link": "https://stackoverflow.com/users/667147/jarandaf"}, "edited": false, "score": 0, "creation_date": 1475074735, "post_id": 39750651, "comment_id": 66798356, "body": "function application is a special case, but in general, you can check this right on <code>ghci</code> using the <code>:i</code> command. For instance, <code>:i (.)</code> would tell function composition is right associative with a precedence level equal to 9 (<code>infixr 9</code>)."}], "answers": [{"tags": [], "owner": {"reputation": 10246, "user_id": 762363, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8cec6320f5a5a8253b3dbfbb8177e001?s=128&d=identicon&r=PG", "display_name": "Tarmil", "link": "https://stackoverflow.com/users/762363/tarmil"}, "is_accepted": true, "score": 6, "last_activity_date": 1475073997, "creation_date": 1475073997, "answer_id": 39750864, "question_id": 39750651, "link": "https://stackoverflow.com/questions/39750651/where-is-the-source-for-function-application-has-higher-precedence-than-infix/39750864#39750864", "title": "Where is the source for: &quot;Function application has higher precedence than infix operators&quot; [Haskell]", "body": "<p>You can find it <a href=\"https://www.haskell.org/onlinereport/exps.html\">here</a> in the EBNF:</p>\n\n<pre><code>exp^10 -&gt; ...\n        | fexp\n\nfexp -&gt; [fexp] aexp\n</code></pre>\n\n<p>which basically means that function application has precedence 10, higher than any you are allowed to give to an operator.</p>\n"}, {"comments": [{"owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "edited": false, "score": 1, "creation_date": 1475080611, "post_id": 39750875, "comment_id": 66802332, "body": "Right, though the specific Report quote in the OP seems to refer to <i>type operators</i> rather than value-level infix operators."}, {"owner": {"reputation": 181215, "user_id": 82294, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/5c5f910416e2b92bb73fa59c56fe695d?s=128&d=identicon&r=PG", "display_name": "Dietrich Epp", "link": "https://stackoverflow.com/users/82294/dietrich-epp"}, "reply_to_user": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "edited": false, "score": 0, "creation_date": 1475082658, "post_id": 39750875, "comment_id": 66803522, "body": "Yes, I noticed that... the information might be most helpful to OP rather than to me, however."}], "tags": [], "owner": {"reputation": 181215, "user_id": 82294, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/5c5f910416e2b92bb73fa59c56fe695d?s=128&d=identicon&r=PG", "display_name": "Dietrich Epp", "link": "https://stackoverflow.com/users/82294/dietrich-epp"}, "is_accepted": false, "score": 6, "last_activity_date": 1475074023, "creation_date": 1475074023, "answer_id": 39750875, "question_id": 39750651, "link": "https://stackoverflow.com/questions/39750651/where-is-the-source-for-function-application-has-higher-precedence-than-infix/39750875#39750875", "title": "Where is the source for: &quot;Function application has higher precedence than infix operators&quot; [Haskell]", "body": "<p>The <em>Haskell Report</em> is itself a definitive reference, so the quote you found is sufficient.</p>\n\n<p>You can also find the same information in the grammar.</p>\n\n<pre><code>fexp -&gt; [fexp] aexp\nexp_10 -&gt; ... | fexp\n</code></pre>\n\n<p>You can see that function application has precedence \"10\" whereas all the infix / prefix operators are 9 or lower.</p>\n"}], "owner": {"reputation": 2264, "user_id": 1213041, "user_type": "registered", "accept_rate": 40, "profile_image": "https://i.stack.imgur.com/MZL5c.jpg?s=128&g=1", "display_name": "cdosborn", "link": "https://stackoverflow.com/users/1213041/cdosborn"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 157, "favorite_count": 0, "accepted_answer_id": 39750864, "answer_count": 2, "score": 2, "last_activity_date": 1475074023, "creation_date": 1475073508, "question_id": 39750651, "link": "https://stackoverflow.com/questions/39750651/where-is-the-source-for-function-application-has-higher-precedence-than-infix", "title": "Where is the source for: &quot;Function application has higher precedence than infix operators&quot; [Haskell]", "body": "<p>I'm learning about operator precedence in Haskell. Several places across the web mention that function application has <em>higher</em> precedence than operators, but I couldn't find a definitive source for that. </p>\n\n<p>Here is one such mention from <a href=\"https://www.haskell.org/tutorial/index.html\" rel=\"nofollow\" title=\"a gentle intro\">A Gentle Introduction To Haskell</a>:</p>\n\n<blockquote>\n  <p>Function application has higher precedence than any infix operator</p>\n</blockquote>\n\n<p>There is a section in the <a href=\"https://www.haskell.org/onlinereport/decls.html\" rel=\"nofollow\">Haskell 98 Report</a> that alludes to it:</p>\n\n<blockquote>\n  <p>normal constructor application has higher precedence than infix constructor application</p>\n</blockquote>\n\n<p>Where is a definitive source? I would expect it to be included in the Haskell 98 Report, perhaps I'm not reading it correctly.</p>\n"}, {"tags": ["haskell", "algebraic-data-types"], "comments": [{"owner": {"reputation": 384463, "user_id": 1126841, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fa05233b2357f8d11c22ef4cfc7bb85c?s=128&d=identicon&r=PG", "display_name": "chepner", "link": "https://stackoverflow.com/users/1126841/chepner"}, "edited": false, "score": 0, "creation_date": 1475074748, "post_id": 39750492, "comment_id": 66798366, "body": "Strictly speaking, <code>1 != 1*1</code>, so it would be more correct to write <code>Nat = 1 + 1*1 + 1*1*1 + ...</code>."}, {"owner": {"reputation": 781, "user_id": 1163717, "user_type": "registered", "accept_rate": 45, "profile_image": "https://www.gravatar.com/avatar/cbba7289a669e4ca1fcf1064d0cf22fd?s=128&d=identicon&r=PG&f=1", "display_name": "The Red Fox", "link": "https://stackoverflow.com/users/1163717/the-red-fox"}, "reply_to_user": {"reputation": 384463, "user_id": 1126841, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fa05233b2357f8d11c22ef4cfc7bb85c?s=128&d=identicon&r=PG", "display_name": "chepner", "link": "https://stackoverflow.com/users/1126841/chepner"}, "edited": false, "score": 0, "creation_date": 1475075249, "post_id": 39750492, "comment_id": 66798730, "body": "@chepner can you please explain why? The way I understood it, types form a semiring, where <code>1</code> is the identity of <code>*</code>. In other words <code>x * 1 = 1</code> for any x. So <code>1</code> and <code>1*1</code> are equivalent."}, {"owner": {"reputation": 384463, "user_id": 1126841, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fa05233b2357f8d11c22ef4cfc7bb85c?s=128&d=identicon&r=PG", "display_name": "chepner", "link": "https://stackoverflow.com/users/1126841/chepner"}, "edited": false, "score": 0, "creation_date": 1475075748, "post_id": 39750492, "comment_id": 66799065, "body": "They are <i>isomorphic</i>, not equivalent. The ordered pair <code>((), ())</code> is distinct from the <code>()</code>. <code>x * 1 == x</code> because you can losslessly convert a value <code>(a, ()) :: (x,())</code> to <code>a :: x</code> and vice versa."}, {"owner": {"reputation": 14485, "user_id": 190376, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cd8280c5e1491b8cf55760750ed97dec?s=128&d=identicon&r=PG", "display_name": "Reid Barton", "link": "https://stackoverflow.com/users/190376/reid-barton"}, "reply_to_user": {"reputation": 384463, "user_id": 1126841, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fa05233b2357f8d11c22ef4cfc7bb85c?s=128&d=identicon&r=PG", "display_name": "chepner", "link": "https://stackoverflow.com/users/1126841/chepner"}, "edited": false, "score": 3, "creation_date": 1475076041, "post_id": 39750492, "comment_id": 66799282, "body": "@chepner, all these kinds of manipulations are (at best) up to isomorphism anyways. Just read <code>=</code> as &quot;is isomorphic to&quot; if you like."}, {"owner": {"reputation": 14485, "user_id": 190376, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cd8280c5e1491b8cf55760750ed97dec?s=128&d=identicon&r=PG", "display_name": "Reid Barton", "link": "https://stackoverflow.com/users/190376/reid-barton"}, "edited": false, "score": 0, "creation_date": 1475076097, "post_id": 39750492, "comment_id": 66799335, "body": "I think the answer is probably that you only did manipulations that you also could have done with List(x), but writing 1 instead of x. But it&#39;s not clear to me that there is a real question here."}], "answers": [{"comments": [{"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 0, "creation_date": 1475086872, "post_id": 39752030, "comment_id": 66806009, "body": "Not with this sort, no, but with more careful sorts (difference calculus stuff) you surely can."}], "tags": [], "owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "is_accepted": false, "score": 1, "last_activity_date": 1475077703, "last_edit_date": 1475077703, "creation_date": 1475077199, "answer_id": 39752030, "question_id": 39750492, "link": "https://stackoverflow.com/questions/39750492/abusing-the-algebra-of-algebraic-data-types-even-further-why-does-this-work/39752030#39752030", "title": "Abusing the algebra of algebraic data types even further - why does this work?", "body": "<p>Since <code>Nat</code> is infinite, you can't really use <code>Nat - Nat = Nat \u22c5 (1 - 1) = Nat \u22c5 0 = 0</code>. The difference <code>Nat - Nat</code> is <em>some finite number</em>, as it were, whereas <code>Nat</code> is obviously infinite. So this <code>1 - 1</code> isn't really zero, it's rather like an infinitesimally small value in <a href=\"https://en.wikipedia.org/wiki/Non-standard_analysis\" rel=\"nofollow\">nonstandard analysis</a>. If you divide something by an infinitesimal, you get something divergingly big (infinite, indeed... duh), but you don't exactly run into division-by zero.</p>\n\n<p>In fact, I think that paradox you asked about could be seen as a \u201cproof that <code>Nat</code> is infinite\u201d \u2013 because if it were finite, you <em>would</em> be dividing by zero.</p>\n\n<p>Except of course you can't really <em>prove</em> anything with this kind of type arithmetic... it's an entertaining pastime, but not really sound mathematics.</p>\n"}], "owner": {"reputation": 781, "user_id": 1163717, "user_type": "registered", "accept_rate": 45, "profile_image": "https://www.gravatar.com/avatar/cbba7289a669e4ca1fcf1064d0cf22fd?s=128&d=identicon&r=PG&f=1", "display_name": "The Red Fox", "link": "https://stackoverflow.com/users/1163717/the-red-fox"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 178, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1475077703, "creation_date": 1475073097, "last_edit_date": 1495541357, "question_id": 39750492, "link": "https://stackoverflow.com/questions/39750492/abusing-the-algebra-of-algebraic-data-types-even-further-why-does-this-work", "title": "Abusing the algebra of algebraic data types even further - why does this work?", "body": "<p>So I have been reading, how you can convert ADTs into what resembles Real numbers and manipulating them, on pages like <a href=\"https://stackoverflow.com/questions/9190352/\">this SO question</a> and <a href=\"http://chris-taylor.github.io/blog/2013/02/10/the-algebra-of-algebraic-data-types/\" rel=\"nofollow noreferrer\">this 3 part series</a> and <a href=\"https://codewords.recurse.com/issues/three/algebra-and-calculus-of-algebraic-data-types\" rel=\"nofollow noreferrer\">especially this</a>.</p>\n\n<p>The \"Trouble\" section of the last link caught my eyes and I tried to solve for <code>Nat</code> in it even though the article states it's impossible.</p>\n\n<pre><code>Nat = 1 + Nat\nNat - Nat = 1\nNat(1 - 1) = 1\nNat = 1 / (1 - 1)\n</code></pre>\n\n<p>This might seem like total nonsense since I just divided by 0 (and you might be right), but if you read any of those links or something similar, then you'll notice that it looks very similar to a definition of a list.</p>\n\n<pre><code>List(x) = 1 / (1 - x)\n</code></pre>\n\n<p>So you could write Nat like <code>Nat = List(1) = 1 + 1 + 1 + ...</code>, which is exactly what you would get by repeated substitution in the starting equation. This is also equivalent to defining Natural numbers like this in Haskell:</p>\n\n<pre><code>type Nat = [()]\n</code></pre>\n\n<p>Which is definitely a valid encoding of Natural numbers, where <code>0 = []</code> and <code>S(N) = () : N</code>.</p>\n\n<hr>\n\n<p>So my question is how come did I get a valid result out of this? I just divided by zero. Not to mention the starting equation itself is pretty much a contradiction.</p>\n\n<p>So how come I got something that makes sense at the end of this? Is this just pure coincidence or is the division by 0 somehow defined in this context that makes sense?</p>\n"}, {"tags": ["haskell", "ghc", "compiler-optimization", "algebraic-data-types"], "comments": [{"owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "edited": false, "score": 0, "creation_date": 1475055444, "post_id": 39742720, "comment_id": 66783813, "body": "I&#39;m reasonably sure that GHC can&#39;t do this without help (e.g. <code>RULES</code> pragmas). Anyway the overhead of matching on the GADT constructor won&#39;t matter as long as you have expensive <code>IO</code> operations like printing going on."}, {"owner": {"reputation": 653, "user_id": 2236092, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/8e95a9d73105658172c8932d5a920751?s=128&d=identicon&r=PG", "display_name": "schernichkin", "link": "https://stackoverflow.com/users/2236092/schernichkin"}, "reply_to_user": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "edited": false, "score": 0, "creation_date": 1475058298, "post_id": 39742720, "comment_id": 66786012, "body": "Thank your for suggestion. This is not for printing integers, real code read memory in tight loop and pattern matching introduces up to 60% overhead comparing to baseline code without pattern matching. I will try to optimize it with <code>RULES</code>"}, {"owner": {"reputation": 6694, "user_id": 2555037, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c62b3037add2dde3cb8dd935f7ca9fe7?s=128&d=identicon&r=PG", "display_name": "Toxaris", "link": "https://stackoverflow.com/users/2555037/toxaris"}, "edited": false, "score": 1, "creation_date": 1475063754, "post_id": 39742720, "comment_id": 66789766, "body": "Note that this optimization would also have to interact with strictness analysis. Consider <code>printMyMyGADT (undefined :: MyGADT IntConstructor)</code>."}], "answers": [{"comments": [{"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 0, "creation_date": 1475083370, "post_id": 39751386, "comment_id": 66803889, "body": "I don&#39;t <i>think</i> specialization will help without a class. It might work to use <code>class MyPrint a where myPrint :: MyGADT a -&gt; IO ()</code>, effectively splitting the two cases into two functions with a uniform API."}], "tags": [], "owner": {"reputation": 14485, "user_id": 190376, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cd8280c5e1491b8cf55760750ed97dec?s=128&d=identicon&r=PG", "display_name": "Reid Barton", "link": "https://stackoverflow.com/users/190376/reid-barton"}, "is_accepted": false, "score": 3, "last_activity_date": 1475075452, "creation_date": 1475075452, "answer_id": 39751386, "question_id": 39742720, "link": "https://stackoverflow.com/questions/39742720/eliminating-pattern-matching-on-gadt-when-constructor-known-statically/39751386#39751386", "title": "Eliminating pattern matching on GADT when constructor known statically", "body": "<p>Well when GHC compiles <code>printMyMyGADT</code> the type index <code>a</code> is not known of course (it's a variable) and information about <code>a</code> is not available at runtime either, so <code>printMyMyGADT</code> has to do a branch on which constructor it was passed.</p>\n\n<p>If you have instead</p>\n\n<pre><code>printMyMyGADT' :: MyGADT IntConstructor -&gt; IO ()\nprintMyMyGADT' (MyInt i) = printInteger i\n</code></pre>\n\n<p>then GHC is able to propagate the information that only the <code>MyInt</code> constructor is possible to the generated code and avoid a branch on the constructor.</p>\n\n<p>If you call the original <code>printMyMyGADT</code> in a context where its type variable <code>a</code> is known to be <code>IntConstructor</code> and <em>if it is inlined</em> then GHC will simplify the inlined expression to something like <code>printMyMyGADT'</code> and again the branch will be avoided. This might also work for specialization, I'm not sure.</p>\n\n<p>All of this is somewhat irrelevant in practice because in all cases <code>printMyMyGADT</code> needs to handle the case of being passed an unevaluated expression. The cost of branching on which of two constructors we see is not more than the cost of checking whether we have been passed a constructor in the first place.</p>\n"}], "owner": {"reputation": 653, "user_id": 2236092, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/8e95a9d73105658172c8932d5a920751?s=128&d=identicon&r=PG", "display_name": "schernichkin", "link": "https://stackoverflow.com/users/2236092/schernichkin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 156, "favorite_count": 1, "answer_count": 1, "score": 2, "last_activity_date": 1475075452, "creation_date": 1475053415, "last_edit_date": 1475053846, "question_id": 39742720, "link": "https://stackoverflow.com/questions/39742720/eliminating-pattern-matching-on-gadt-when-constructor-known-statically", "title": "Eliminating pattern matching on GADT when constructor known statically", "body": "<p>Let's say I have promoted data type: </p>\n\n<pre><code>data GADTConstructor = IntConstructor | StringConstructor\n</code></pre>\n\n<p>Then I create GADT:</p>\n\n<pre><code>data MyGADT (a :: GADTConstructor) where\n    MyInt    :: Int -&gt; MyGADT IntConstructor\n    MyString :: String -&gt; MyGADT StringConstructor\n</code></pre>\n\n<p>And pattern matching function:</p>\n\n<pre><code>printMyMyGADT :: MyGADT a -&gt; IO ()\nprintMyMyGADT (MyInt i) = printInteger i\nprintMyMyGADT (MyString s) = printString s\n</code></pre>\n\n<p>Here actual GADT's constructor is uniquely determined by the GADT's type index which is known at compile time. Is it possible to force GHC to omit any pattern matching in runtime and generate code assuming that the actual branch is known statically?</p>\n"}, {"tags": ["haskell"], "comments": [{"owner": {"reputation": 384, "user_id": 4098149, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/4eff262713ed007414ceb4e35f6b63f5?s=128&d=identicon&r=PG&f=1", "display_name": "Schoon", "link": "https://stackoverflow.com/users/4098149/schoon"}, "edited": false, "score": 0, "creation_date": 1475049797, "post_id": 39739375, "comment_id": 66780036, "body": "You might also have a look at <code>-XMultiWayIf</code> syntax extension. <a href=\"https://downloads.haskell.org/~ghc/7.6.2/docs/html/users_guide/syntax-extns.html#multi-way-if\" rel=\"nofollow noreferrer\">downloads.haskell.org/~ghc/7.6.2/docs/html/users_guide/&hellip;</a>"}], "answers": [{"tags": [], "owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "is_accepted": true, "score": 7, "last_activity_date": 1475087054, "last_edit_date": 1475087054, "creation_date": 1475046769, "answer_id": 39740450, "question_id": 39739375, "link": "https://stackoverflow.com/questions/39739375/clean-up-if-else-control-flow-in-haskell/39740450#39740450", "title": "Clean up if else control flow in haskell", "body": "<p>Your outermost <code>do</code> in <code>turn</code> doesn't actually do anything. So you should nix it. Next, use pattern matching and guards to begin to clean things up.</p>\n\n<pre><code>turn _number _attempt 0 = putStrLn \"You lose\"\nturn number attempt attempts\n  | attempt == number = putStrLn \"You got it!\"\n  | attempt == 0 = guess number attempt attempts\n  | attempt &lt; number = do\n      putStrLn \"The number is greater\"\n      guess number attempt attempts\n  | otherwise = do\n      putStrLn \"The number is lesser\"\n      guess number attempt attempts\n</code></pre>\n\n<p>The final step to clean up <code>turn</code> will be factoring out the pattern \"Do something, then call <code>guess</code>\". I'll let you try that on your own. I used a pattern match for the first case to demonstrate that technique, which is very often the right one. In this <em>particular</em> case you might be better off just using guards.</p>\n\n<p>For <code>guess</code>, the easy bit is just to combine some expressions.</p>\n\n<pre><code>guess :: Int -&gt; Int -&gt; Int -&gt; IO ()\nguess number attempt attempts = do\n  putStr \"Try and guess number \"\n  g &lt;- getLine\n  let attempts' = if read g == number\n                  then attempts\n                  else attempts - 1\n  turn number number' attempts'\n</code></pre>\n\n<p>Note, however, that <code>read</code> generally shouldn't be used to process user input, as it will crash your program on bad input. Import <code>Text.Read</code> and use <code>readMaybe</code>, perhaps.</p>\n"}], "owner": {"reputation": 21618, "user_id": 11755, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/5b9872f3076db04cb2ffb516091d80d0?s=128&d=identicon&r=PG", "display_name": "dagda1", "link": "https://stackoverflow.com/users/11755/dagda1"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 123, "favorite_count": 1, "accepted_answer_id": 39740450, "answer_count": 1, "score": 0, "last_activity_date": 1475087054, "creation_date": 1475043495, "question_id": 39739375, "link": "https://stackoverflow.com/questions/39739375/clean-up-if-else-control-flow-in-haskell", "title": "Clean up if else control flow in haskell", "body": "<p>I have the following simple number guess program</p>\n\n<pre><code>import System.Random\n\nturn :: Int -&gt; Int -&gt; Int -&gt; IO ()\nturn number attempt attempts =\n  do\n    if attempts == 0\n       then putStrLn \"You lose\"\n       else if attempt==number\n               then putStrLn \"You got it!\"\n               else if attempt==0\n                       then guess number attempt attempts\n               else if attempt &lt; number\n                       then do\n                            putStrLn \"The number is greater\"\n                            guess number attempt attempts\n               else\n                      do\n                        putStrLn \"The number is lesser\"\n                        guess number attempt attempts\n\nguess :: Int -&gt; Int -&gt; Int -&gt; IO ()\nguess number attempt attempts =\n  do\n    putStr \"Try and guess number \"\n    g &lt;- getLine\n    let number' = read g :: Int\n    let check = (number'==number)\n    let attempts' = if check then attempts else attempts - 1\n    turn number number' attempts'\n\nnumberGuess :: IO ()\nnumberGuess = do\n  let attempts = 5\n  number &lt;- randomRIO (0, 10) :: IO Int\n  turn number 0 attempts\n</code></pre>\n\n<p>How can I clean up the ugly if else or what techniques are available in haskell?</p>\n"}, {"tags": ["haskell", "hakyll"], "comments": [{"owner": {"reputation": 4630, "user_id": 160386, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/b6044f355342bb055fbb03804d9673e3?s=128&d=identicon&r=PG", "display_name": "Jan Tojnar", "link": "https://stackoverflow.com/users/160386/jan-tojnar"}, "edited": false, "score": 0, "creation_date": 1475008483, "post_id": 39733399, "comment_id": 66765470, "body": "You can also store the teaser as metadata. Since Hakyll switched to YAML, multi-line strings should be supported."}], "answers": [{"tags": [], "owner": {"reputation": 64805, "user_id": 286871, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/xNBpr.png?s=128&g=1", "display_name": "Tikhon Jelvis", "link": "https://stackoverflow.com/users/286871/tikhon-jelvis"}, "is_accepted": true, "score": 4, "last_activity_date": 1475008131, "creation_date": 1475008131, "answer_id": 39733735, "question_id": 39733399, "link": "https://stackoverflow.com/questions/39733399/remove-teaser-from-pages/39733735#39733735", "title": "Remove teaser from pages", "body": "<p>I don't believe there is a method to do that built into Hakyll.</p>\n\n<p>As I see it you have two options:</p>\n\n<ul>\n<li><p>write a pass that strips the teaser from the document before rendering it on its own page</p></li>\n<li><p>keep the teaser in the actual page, but use CSS to hide it</p></li>\n</ul>\n\n<p>The first option is probably better, but requires mussing about with string manipulation and Hakyll compilers. If you want a place to start, take a look at the implementation of <a href=\"https://jaspervdj.be/hakyll/reference/src/Hakyll-Web-Template-Context.html#teaserFieldWithSeparator\" rel=\"nofollow\"><code>teaserFieldWithSeparator</code></a> which uses the <a href=\"https://jaspervdj.be/hakyll/reference/src/Hakyll-Core-Util-String.html#needlePrefix\" rel=\"nofollow\"><code>needlePrefix</code></a> function from <a href=\"https://jaspervdj.be/hakyll/reference/Hakyll-Core-Util-String.html\" rel=\"nofollow\"><code>Hakyll.Core.Util.String</code></a> to extract the teaser from the document body. You'll have to do the opposite: extract everything <em>but</em> the teaser.</p>\n\n<p>If you do take this approach, you could contribute it back into Hakyll, saving the effort for people who want to do the same thing in the future.</p>\n\n<p>The other option is hackier but easier. You can wrap all your teasers in a div with some CSS class:</p>\n\n<pre><code>&lt;div class=\"teaser\"&gt;\nSome text.\n&lt;/div&gt;\n&lt;!--more--&gt;\n</code></pre>\n\n<p>Then, in your page template, add a CSS rule that hides the teaser paragraph:</p>\n\n<pre><code>.teaser {\n  display : none;\n}\n</code></pre>\n\n<p>The text is still in the page's HTML so this is not an <em>ideal</em> solution, but you can make it work without needing to write any Hakyll code.</p>\n"}, {"tags": [], "owner": {"reputation": 163, "user_id": 1726711, "user_type": "registered", "accept_rate": 20, "profile_image": "https://www.gravatar.com/avatar/5ee3c84885f5344315b2c555454433e3?s=128&d=identicon&r=PG", "display_name": "Dahan", "link": "https://stackoverflow.com/users/1726711/dahan"}, "is_accepted": false, "score": 0, "last_activity_date": 1503867862, "creation_date": 1503867862, "answer_id": 45909346, "question_id": 39733399, "link": "https://stackoverflow.com/questions/39733399/remove-teaser-from-pages/45909346#45909346", "title": "Remove teaser from pages", "body": "<p>Maybe it could be easier if you just put this teaser text in a separate metadata field? Like</p>\n\n<pre><code>---\ntitle: My Post\nauthor: JeanJouX\ndate: 2016-09-06\ntags: Haskell\ndescription: The teaser of my post to be shown in the RSS feed. Not in the full page.\n---\n\nThe rest of the post to be shown in the full page of my website\n</code></pre>\n\n<p>Then you don't need to make that <code>teaserField</code> any more. You already have all you need in <code>$description$</code>, which you can use in rss, in html meta tags, anywhere.</p>\n"}], "owner": {"reputation": 2337, "user_id": 3595992, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a8fc8a00391b1282338f66de57e3fea0?s=128&d=identicon&r=PG&f=1", "display_name": "JeanJouX", "link": "https://stackoverflow.com/users/3595992/jeanjoux"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 112, "favorite_count": 0, "accepted_answer_id": 39733735, "answer_count": 2, "score": 3, "last_activity_date": 1518811115, "creation_date": 1475006756, "last_edit_date": 1496559974, "question_id": 39733399, "link": "https://stackoverflow.com/questions/39733399/remove-teaser-from-pages", "title": "Remove teaser from pages", "body": "<p>I'm making a website with Hakyll. I successfully created a RSS feed showing showing for each post the teaser section delimited by <code>&lt;!--more--&gt;</code>. </p>\n\n<p>My problem is that this teaser section is shown in the full (templated) pages of these posts. And I would like only that is after <code>&lt;!--more--&gt;</code> and not before. </p>\n\n<pre><code>---\ntitle: My Post\nauthor: JeanJouX\ndate: 2016-09-06\ntags: Haskell\n---\n\nThe teaser of my post to be shown in the RSS feed. Not in the full page.\n\n&lt;!--more--&gt;\n\nThe rest of the post to be shown in the full page of my website\n</code></pre>\n\n<p>Is it possible to do that with Hakyll?</p>\n"}, {"tags": ["list", "sorting", "haskell"], "answers": [{"comments": [{"owner": {"reputation": 374, "user_id": 4064933, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/xMi10.jpg?s=128&g=1", "display_name": "rspears69", "link": "https://stackoverflow.com/users/4064933/rspears69"}, "edited": false, "score": 0, "creation_date": 1475007037, "post_id": 39733363, "comment_id": 66764710, "body": "Wow, that&#39;s so simple. I haven&#39;t gotten to list comprehensions yet, but tell me if I have this right: this creates a list of <code>msg</code> for each element of the sorted list <code>xs</code> if it matches the LogMessage etc pattern and the <code>code &gt; 50</code>. It&#39;s also blazingly fast compared to my function."}, {"owner": {"reputation": 384463, "user_id": 1126841, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fa05233b2357f8d11c22ef4cfc7bb85c?s=128&d=identicon&r=PG", "display_name": "chepner", "link": "https://stackoverflow.com/users/1126841/chepner"}, "reply_to_user": {"reputation": 374, "user_id": 4064933, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/xMi10.jpg?s=128&g=1", "display_name": "rspears69", "link": "https://stackoverflow.com/users/4064933/rspears69"}, "edited": false, "score": 0, "creation_date": 1475008266, "post_id": 39733363, "comment_id": 66765344, "body": "That&#39;s right; the pattern match filters out <code>Info</code> and <code>Warning</code> messages, and the guard filters out the low-numbered errors."}], "tags": [], "owner": {"reputation": 384463, "user_id": 1126841, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fa05233b2357f8d11c22ef4cfc7bb85c?s=128&d=identicon&r=PG", "display_name": "chepner", "link": "https://stackoverflow.com/users/1126841/chepner"}, "is_accepted": true, "score": 3, "last_activity_date": 1475008325, "last_edit_date": 1475008325, "creation_date": 1475006599, "answer_id": 39733363, "question_id": 39733254, "link": "https://stackoverflow.com/questions/39733254/haskell-function-sort-input-list-then-do-stuff-with-sorted-list/39733363#39733363", "title": "Haskell function sort input list then do stuff with sorted list", "body": "<p>You really just need a one-line list comprehension:</p>\n\n<pre><code>whatWentWrong xs = [ msg | (LogMessage (Error code) _ msg) &lt;- inOrder (build xs), code &gt; 50]\n</code></pre>\n\n<p>If you are sorting the list to see if the list is sorted, you may as well just work directly on the sorted list. Once you've done that, the list comprehension will automatically filter out the elements that don't pattern match, and the <code>code &gt; 50</code> filters the rest.</p>\n\n<hr>\n\n<p>If you want to fix your current code as an exercise, you just need to define a helper function that assumes its input is sorted.</p>\n\n<pre><code>whatWentWrong :: [LogMessage] -&gt; [String]\nwhatWentWrong ys = www (inOrder (build ys))\n                   where www [] = []\n                         www ((LogMessage (Error code) _ msg):xs) | code &gt; 50 = msg : www xs\n                                                                  | otherwise = www xs\n                         www (_:xs) = www xs\n</code></pre>\n\n<p>However, you should recognize that <code>www</code> is the combination of\na <code>map</code> and a <code>filter</code>.</p>\n\n<pre><code>whatWentWrong ys = map f $ filter p (inOrder (build ys))\n                   where p (LogMessage (Error code) _ _) = code &gt; 50\n                         p _ = False\n                         f (LogMessage _ _ msg) = msg\n</code></pre>\n\n<p>or, in point-free style</p>\n\n<pre><code>whatWentWrong = map f . filter p . inOrder . build\n                where p (LogMessage (Error code) _ _) = code &gt; 50\n                      p _ = False\n                      f (LogMessage _ _ msg) = msg\n</code></pre>\n"}], "owner": {"reputation": 374, "user_id": 4064933, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/xMi10.jpg?s=128&g=1", "display_name": "rspears69", "link": "https://stackoverflow.com/users/4064933/rspears69"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 733, "favorite_count": 0, "accepted_answer_id": 39733363, "answer_count": 1, "score": 2, "last_activity_date": 1475008325, "creation_date": 1475006209, "question_id": 39733254, "link": "https://stackoverflow.com/questions/39733254/haskell-function-sort-input-list-then-do-stuff-with-sorted-list", "title": "Haskell function sort input list then do stuff with sorted list", "body": "<p>Short version:</p>\n\n<p>I want to sort a list, and then perform operations on that sorted list that filter/extract data to form a new list, all in one function.</p>\n\n<p>Long version:</p>\n\n<p>I am teaching myself Haskell using <a href=\"http://cis.upenn.edu/~cis194/fall14/spring13/lectures.html\" rel=\"nofollow\">these lessons</a>. I'm currently on <a href=\"http://cis.upenn.edu/~cis194/fall14/spring13/hw/02-ADTs.pdf\" rel=\"nofollow\">Homework 2</a> Exercise 5.</p>\n\n<p>I am required to write a function <code>whatWentWrong</code> that takes an <em>unsorted</em> list of LogMessages and returns a list of Strings. The strings are the String portion of LogMessages that were constructed with Error in which the Error code is > 50. They are supposed to be sorted by the TimeStamp portion of LogMessage.</p>\n\n<p>I have a function written for <code>whatWentWrong</code> that works, but it's really really slow (you'll see why).</p>\n\n<pre><code>whatWentWrong :: [LogMessage] -&gt; [String]\nwhatWentWrong [] = []\nwhatWentWrong ys@((LogMessage (Error code) _ msg):xs)\n    | ys /= inOrder (build ys)\n      = whatWentWrong (inOrder (build ys))\n    | code &gt; 50\n      = [msg] ++ whatWentWrong xs\n    | otherwise\n      = whatWentWrong xs\nwhatWentWrong (_:xs) = [] ++ whatWentWrong xs\n</code></pre>\n\n<p>The functions <code>inOrder (build x)</code> will return a sorted version of x (where x is a list of LogMessages). Obviously I have to either sort the list before I begin processing it with <code>whatWentWrong</code>, or I have to filter out all non relevant messages (Messages which are not Errors or which don't have Error codes above 50), sort, and then grab the strings from each one.</p>\n\n<p>If I wasn't following this example, I would just define another function or something, or just send <code>whatWentWrong</code> an already sorted list. But I imagine there's some reason to do it this way (which I can't figure out).</p>\n\n<p>Anyways, what I've done, and why the program is so slow is this:\nThe line <code>ys /= inOrder (build ys)</code> is checking that the LogMessage list is sorted <em>every single time it encounters a LogMessage that matches the Error pattern</em>, even though, after the first time that check fails, the list is sorted for good.</p>\n\n<p>That's the only way I could think to do it. Really, what I want to do it sort it once, but I have no idea how to make the function sort the list using my sorting functions and then not do that step ever again. I'm obviously not thinking about this correctly and any help is appreciated. Thanks.</p>\n"}, {"tags": ["function", "haskell"], "answers": [{"comments": [{"owner": {"reputation": 78982, "user_id": 1848654, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/84180c0f3c9c04f8b8f0613fc0129dac?s=128&d=identicon&r=PG", "display_name": "melpomene", "link": "https://stackoverflow.com/users/1848654/melpomene"}, "edited": false, "score": 0, "creation_date": 1475002470, "post_id": 39732193, "comment_id": 66762244, "body": "The <code>replicate</code> version doesn&#39;t work with infinite strings."}, {"owner": {"reputation": 54533, "user_id": 94559, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ab13b7f135315a91b9ef13e073354d90?s=128&d=identicon&r=PG&f=1", "display_name": "user94559", "link": "https://stackoverflow.com/users/94559/user94559"}, "reply_to_user": {"reputation": 78982, "user_id": 1848654, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/84180c0f3c9c04f8b8f0613fc0129dac?s=128&d=identicon&r=PG", "display_name": "melpomene", "link": "https://stackoverflow.com/users/1848654/melpomene"}, "edited": false, "score": 0, "creation_date": 1475002505, "post_id": 39732193, "comment_id": 66762263, "body": "True. I imagine that&#39;s not a possibility here."}, {"owner": {"reputation": 13734, "user_id": 938694, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/b6678a430a805dd78366d6e135b49f2d?s=128&d=identicon&r=PG", "display_name": "Cubic", "link": "https://stackoverflow.com/users/938694/cubic"}, "reply_to_user": {"reputation": 78982, "user_id": 1848654, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/84180c0f3c9c04f8b8f0613fc0129dac?s=128&d=identicon&r=PG", "display_name": "melpomene", "link": "https://stackoverflow.com/users/1848654/melpomene"}, "edited": false, "score": 0, "creation_date": 1475003407, "post_id": 39732193, "comment_id": 66762733, "body": "@melpomene No, but neither does <code>==</code> which is used in the turn function. Infinite lists aren&#39;t really a concern here."}, {"owner": {"reputation": 14582, "user_id": 2225384, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f30b04ed4d0b3fc4bc791a28815f34ca?s=128&d=identicon&r=PG", "display_name": "Rein Henrichs", "link": "https://stackoverflow.com/users/2225384/rein-henrichs"}, "edited": false, "score": 0, "creation_date": 1475030171, "post_id": 39732193, "comment_id": 66772236, "body": "A more accurate alternative would be <code>map (\\_ -&gt; &#39;-&#39;) word</code> or, equivalently, <code>map (const &#39;-&#39;) word</code>."}], "tags": [], "owner": {"reputation": 54533, "user_id": 94559, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ab13b7f135315a91b9ef13e073354d90?s=128&d=identicon&r=PG&f=1", "display_name": "user94559", "link": "https://stackoverflow.com/users/94559/user94559"}, "is_accepted": true, "score": 5, "last_activity_date": 1475002363, "last_edit_date": 1475002363, "creation_date": 1475002050, "answer_id": 39732193, "question_id": 39732140, "link": "https://stackoverflow.com/questions/39732140/explanation-of-haskell-function/39732193#39732193", "title": "explanation of haskell function", "body": "<p>The full line is:</p>\n\n<pre><code>starman word n = turn word ['-' | x &lt;- word] n\n</code></pre>\n\n<p><code>turn</code> is called with three parameters:</p>\n\n<pre><code>word\n['-' | x &lt;- word]\nn\n</code></pre>\n\n<p>The middle one is the one you're having trouble with. It can be read as: \"a hyphen for each character in word.\"</p>\n\n<p>So <code>['-' | x &lt;- \"hello\"]</code> is <code>\"-----\"</code>.</p>\n\n<p>This construct is known as <a href=\"https://wiki.haskell.org/List_comprehension\" rel=\"nofollow\">list comprehension</a>.</p>\n\n<p><strong>EDIT</strong></p>\n\n<p>The list comprehension does the same thing as this, which is perhaps clearer in intent?</p>\n\n<pre><code>replicate (length word) '-'\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 339851, "user_id": 149392, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7a561ec0875fcbbe3066ea8fe288ec77?s=128&d=identicon&r=PG", "display_name": "sepp2k", "link": "https://stackoverflow.com/users/149392/sepp2k"}, "is_accepted": false, "score": 2, "last_activity_date": 1475002162, "creation_date": 1475002162, "answer_id": 39732224, "question_id": 39732140, "link": "https://stackoverflow.com/questions/39732140/explanation-of-haskell-function/39732224#39732224", "title": "explanation of haskell function", "body": "<p><code>word</code> is the first argument to the <code>turn</code> function.</p>\n\n<p><code>['-' | x &lt;- word]</code> is the second argument and it's a list containing one <code>'-'</code> for each letter <code>x</code> in <code>word</code>. The fact that we give each letter the name <code>x</code> accomplishes nothing though, as we never refer to it, so we might as well write <code>['-' | _ &lt;- word]</code>.</p>\n\n<p>This syntax is known as a list comprehension and is meant to look similar to set notation.</p>\n"}, {"tags": [], "owner": {"reputation": 16405, "user_id": 6776093, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/heFeh.png?s=128&g=1", "display_name": "redneb", "link": "https://stackoverflow.com/users/6776093/redneb"}, "is_accepted": false, "score": 1, "last_activity_date": 1475003974, "last_edit_date": 1475003974, "creation_date": 1475002533, "answer_id": 39732322, "question_id": 39732140, "link": "https://stackoverflow.com/questions/39732140/explanation-of-haskell-function/39732322#39732322", "title": "explanation of haskell function", "body": "<p>Actually, in the following expression</p>\n\n<pre><code>turn word ['-' | x &lt;- word] n\n</code></pre>\n\n<p>there a function (<code>turn</code>) call, with three arguments: <code>word</code>, <code>['-' | x &lt;- word]</code>, and <code>n</code>. So <code>['-' | x &lt;- word]</code> is independent of <code>word</code>.</p>\n\n<p>Now, what is the meaning of <code>['-' | x &lt;- word]</code>? This is a list comprehension, so it's an expression that constructs a list. In order to understand this, you have to remember that strings in haskell are just lists of characters. So <code>word</code> is a list. The <code>x &lt;- word</code> means: take each element of the list <code>word</code>, call it that element <code>x</code> and then for each such element, evaluate the expression <code>'-'</code> and collect all those values into a list. In this case, the expression <code>'-'</code> does not reference <code>x</code>, so it will always evaluate to <code>'-'</code>. So in other words, we are taking the list of characters <code>word</code> and creating a list where each element-character is replaces by <code>'-'</code>.</p>\n\n<p>Here are some equivalent ways to do the same thing:</p>\n\n<pre><code>['-' | _ &lt;- word]              -- use the anonymous variable, we don't need the element\nmap (\\_ -&gt; '-') word\nmap (const '-') word\n'-' &lt;$ word                    -- my favorite one!\nreplicate (length word) '-'    -- the least preferrable way\n</code></pre>\n"}], "owner": {"reputation": 21618, "user_id": 11755, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/5b9872f3076db04cb2ffb516091d80d0?s=128&d=identicon&r=PG", "display_name": "dagda1", "link": "https://stackoverflow.com/users/11755/dagda1"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 84, "favorite_count": 0, "accepted_answer_id": 39732193, "answer_count": 3, "score": 1, "last_activity_date": 1475029101, "creation_date": 1475001827, "last_edit_date": 1475029101, "question_id": 39732140, "link": "https://stackoverflow.com/questions/39732140/explanation-of-haskell-function", "title": "explanation of haskell function", "body": "<p>The code I am looking at contains this top level function:</p>\n\n<pre><code>starman :: String -&gt; Int -&gt; IO ()\nstarman word n = turn word ['-' | x &lt;- word] n\n</code></pre>\n\n<p>I can see that this is a function that takes 2 arguments and then calls the turn function that looks like this:</p>\n\n<pre><code>turn :: String -&gt; String -&gt; Int -&gt; IO ()\nturn word display n =\n  do if n==0\n       then putStrLn \"You lose\"\n       else if word==display\n              then putStrLn \"You win!\"\n              else mkguess word display n\n</code></pre>\n\n<p>What I don't understand is what this means:</p>\n\n<pre><code>word ['-' | x &lt;- word]\n</code></pre>\n"}, {"tags": ["haskell", "typeclass"], "comments": [{"owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "edited": false, "score": 4, "creation_date": 1474991697, "post_id": 39728821, "comment_id": 66755777, "body": "I agree, these instances seem to make no sense whatsoever. Clear case of \u201cbecause we can\u201d."}, {"owner": {"reputation": 51584, "user_id": 839246, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9b0573c2b936b12828dd1e4cc04206dc?s=128&d=identicon&r=PG&f=1", "display_name": "bheklilr", "link": "https://stackoverflow.com/users/839246/bheklilr"}, "edited": false, "score": 1, "creation_date": 1474992141, "post_id": 39728821, "comment_id": 66756054, "body": "I don&#39;t have access to GHCi right now, but is it possible that they could be used for doing something like <code>x :: Sum Int; x = do { 1; 2; 3; 4; 5 }</code>?"}, {"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "reply_to_user": {"reputation": 51584, "user_id": 839246, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9b0573c2b936b12828dd1e4cc04206dc?s=128&d=identicon&r=PG&f=1", "display_name": "bheklilr", "link": "https://stackoverflow.com/users/839246/bheklilr"}, "edited": false, "score": 2, "creation_date": 1474992552, "post_id": 39728821, "comment_id": 66756345, "body": "@bheklilr It &quot;works&quot;, and returns <code>Sum 5</code> since <code>Sum</code> is the identity monad."}, {"owner": {"reputation": 1972, "user_id": 1747134, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/696bad3bd2c5e16ded04f3cdf436623f?s=128&d=identicon&r=PG", "display_name": "user1747134", "link": "https://stackoverflow.com/users/1747134/user1747134"}, "edited": false, "score": 0, "creation_date": 1475086836, "post_id": 39728821, "comment_id": 66805988, "body": "It seems that it&#39;s possible to do something similar: <code>x :: Sum Int; x = do {Sum 1; Sum 2}</code>) and get the actual sum with -XRebindableSyntax  by saying <code>(&gt;&gt;) = mappend </code> <a href=\"https://ocharles.org.uk/blog/guest-posts/2014-12-06-rebindable-syntax.html\" rel=\"nofollow noreferrer\">ocharles.org.uk/blog/guest-posts/&hellip;</a>"}], "answers": [{"comments": [{"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 4, "creation_date": 1474992716, "post_id": 39729501, "comment_id": 66756467, "body": "<code>Sum 5 * Sum 10</code> also works, because of the <code>Num</code> instance."}], "tags": [], "owner": {"reputation": 384463, "user_id": 1126841, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fa05233b2357f8d11c22ef4cfc7bb85c?s=128&d=identicon&r=PG", "display_name": "chepner", "link": "https://stackoverflow.com/users/1126841/chepner"}, "is_accepted": false, "score": 3, "last_activity_date": 1474992565, "creation_date": 1474992565, "answer_id": 39729501, "question_id": 39728821, "link": "https://stackoverflow.com/questions/39728821/what-is-the-use-of-applicative-monad-instances-for-sum-and-product/39729501#39729501", "title": "What is the use of Applicative/Monad instances for Sum and Product?", "body": "<p>Values like this typically result from partial application of binary operators. Assuming <code>Functor</code> and <code>Applicative</code> instances like</p>\n\n<pre><code>import Control.Applicative\nimport Data.Monoid\n\ninstance Functor Sum where\n    fmap f (Sum x) = Sum (f x)\n\ninstance Applicative Sum where\n    pure = Sum\n    (Sum f) &lt;*&gt; (Sum x) = Sum (f x)\n</code></pre>\n\n<p>then you can see how a value of <code>Sum (a -&gt; b)</code> would arise.</p>\n\n<pre><code>&gt; :t (*) &lt;$&gt; (Sum 5)\n(*) &lt;$&gt; (Sum 5) :: Num a =&gt; Sum (a -&gt; a)\n\n&gt; (*) &lt;$&gt; (Sum 5) &lt;*&gt; (Sum 10)\nSum {getSum = 50}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "edited": false, "score": 0, "creation_date": 1474995458, "post_id": 39730248, "comment_id": 66758142, "body": "Yes, but that&#39;s arguably an abuse of the <code>Applicative</code> class. It&#39;s much better to use <a href=\"http://hackage.haskell.org/package/lens-4.14/docs/Control-Lens-Iso.html\" rel=\"nofollow noreferrer\"><code>Iso</code> combinators</a> for this purpose."}, {"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "reply_to_user": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "edited": false, "score": 1, "creation_date": 1474995664, "post_id": 39730248, "comment_id": 66758258, "body": "@leftaroundabout Can you say carefully what is better about the <code>Iso</code> combinators? Naively, they look like a strange tradeoff: it&#39;s a very heavy dependency (certainly not one that should be rolled into base), and the syntax for lifting two- or more-argument functions looks verbose compared to a single application of <code>liftA2</code>."}, {"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "reply_to_user": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "edited": false, "score": 1, "creation_date": 1474995741, "post_id": 39730248, "comment_id": 66758298, "body": "@leftaroundabout, when I look at <code>au</code> and <code>auf</code>, mine eyes glazeth over."}, {"owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "edited": false, "score": 0, "creation_date": 1475002056, "post_id": 39730248, "comment_id": 66761996, "body": "@DanielWagner well, I didn&#39;t particularly suggest using <code>lenses</code> to accomplish <code>liftA2 (.&amp;.)</code> on <code>Sum</code>. That is certainly not sensible. What I actually meant is that it doesn&#39;t do much good to keep <code>Sum</code> wrapped values around at all and combine them like that \u2013 these newtypes are intended so you can inject them into a single algorithm that works on monoids but that you want to use with numbers, but not to actually get an result of type <code>Sum Int</code>. In other words, I understand <code>Sum</code> more as a tag you can pass to functions to explain what to do with numbers, not as an actual type constructor."}, {"owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "edited": false, "score": 0, "creation_date": 1475002087, "post_id": 39730248, "comment_id": 66762008, "body": "...hence I also don&#39;t find it reasonable to give them any instances at all apart from the <code>Monoid</code> one which these newtypes are all about. \u2014 The iso combinators make it easier to \u201ctag-wrap\u201d a number into a <code>Sum</code> in for a single operation, without needing to manually wrap and unwrap again. If <code>lens</code> is to much of a dependency you can also use them <a href=\"http://hackage.haskell.org/package/newtype-0.2/docs/Control-Newtype.html\" rel=\"nofollow noreferrer\">from the original package</a>."}], "tags": [], "owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "is_accepted": true, "score": 11, "last_activity_date": 1474995026, "creation_date": 1474995026, "answer_id": 39730248, "question_id": 39728821, "link": "https://stackoverflow.com/questions/39728821/what-is-the-use-of-applicative-monad-instances-for-sum-and-product/39730248#39730248", "title": "What is the use of Applicative/Monad instances for Sum and Product?", "body": "<p>Such instances are convenient for lifting arbitrary functions to work on things that happen to currently be living inside a <code>Sum</code> or <code>Product</code>. For example, one might imagine wanting to do some bitwise operations on something that is nevertheless more convenient in a <code>Sum</code> than bare; then <code>liftA2 (.&amp;.) :: Sum Int -&gt; Sum Int -&gt; Sum Int</code> (for example).</p>\n\n<p>One could also provide this operation by giving a <code>Bits</code> instance for <code>Sum</code>, but generalizing that technique would require the implementors of <code>Sum</code> to predict every operation one might ever want to do, which seems like a tall order. Providing <code>Applicative</code> and <code>Monad</code> instances give a once-and-for-all translation for users to lift any function they like -- including ones the implementors of <code>Sum</code> did not predict being useful.</p>\n"}], "owner": {"reputation": 1972, "user_id": 1747134, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/696bad3bd2c5e16ded04f3cdf436623f?s=128&d=identicon&r=PG", "display_name": "user1747134", "link": "https://stackoverflow.com/users/1747134/user1747134"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 478, "favorite_count": 0, "accepted_answer_id": 39730248, "answer_count": 2, "score": 10, "last_activity_date": 1474995026, "creation_date": 1474990594, "question_id": 39728821, "link": "https://stackoverflow.com/questions/39728821/what-is-the-use-of-applicative-monad-instances-for-sum-and-product", "title": "What is the use of Applicative/Monad instances for Sum and Product?", "body": "<p>My understanding of <code>Sum</code> and <code>Product</code> newtypes is that they serve as monoidial wrappers for numeric types. I would understand <code>Functor</code> instance on them, but why there are also <code>Applicative</code>, <code>Monad</code> any many other seemingly useless instances? I understand that they are mathemathically OK (isomorphic to <code>Identity</code> modad, right?) But what is the use case? If there is an <code>Applicative Sum</code> instance, for example, I would expect to encounter a value of type <code>Sum (a -&gt; b)</code> somewhere. I can't imagine where this could possibly be useful.</p>\n"}, {"tags": ["haskell", "testing", "smallcheck"], "comments": [{"owner": {"reputation": 13807, "user_id": 2407038, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/538f6f4a9aa43841841de7d8e8b169fc?s=128&d=identicon&r=PG&f=1", "display_name": "user2407038", "link": "https://stackoverflow.com/users/2407038/user2407038"}, "edited": false, "score": 0, "creation_date": 1474988440, "post_id": 39727844, "comment_id": 66753494, "body": "I&#39;m fairly certain it is referring to the fact that false implies anything, so if <code>is_parent s</code> is false it won&#39;t even look at the rest. This is useful information if you are using an <code>==&gt;</code> to &#39;filter&#39; values from a bigger set. Technically your tests passed, but in every case (ie 9000/9000) it did not evaluate the RHS of <code>==&gt;</code>. Seems to imply it never tests a node with parents? But I&#39;m not certain how this number interacts with the <code>forAll</code>."}, {"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 2, "creation_date": 1474996326, "post_id": 39727844, "comment_id": 66758617, "body": "Very generally, yes, you should worry when a large majority of your tests do not meet the <code>==&gt;</code> condition. Either your test is structured wrong or you&#39;re not generating all the test cases you mean to."}, {"owner": {"reputation": 2334, "user_id": 2397162, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/665b976c79d0c9c842b131a2df510c3c?s=128&d=identicon&r=PG", "display_name": "niceman", "link": "https://stackoverflow.com/users/2397162/niceman"}, "reply_to_user": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 0, "creation_date": 1475010889, "post_id": 39727844, "comment_id": 66766711, "body": "@dfeuer that was actually the real code, thanks you showed me a typo , I&#39;ll edit my question :)"}, {"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 0, "creation_date": 1475015962, "post_id": 39727844, "comment_id": 66768644, "body": "8340 out of 9000 isn&#39;t <i>nearly</i> as bad as 9000 out of 9000. In fact, you might consider that acceptable!"}, {"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 0, "creation_date": 1475017737, "post_id": 39727844, "comment_id": 66769123, "body": "FYI, the relationship you call &quot;parent&quot; is conventionally called &quot;ancestor&quot;. You should probably change your terminology to avoid confusion."}, {"owner": {"reputation": 2334, "user_id": 2397162, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/665b976c79d0c9c842b131a2df510c3c?s=128&d=identicon&r=PG", "display_name": "niceman", "link": "https://stackoverflow.com/users/2397162/niceman"}, "reply_to_user": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 0, "creation_date": 1475040247, "post_id": 39727844, "comment_id": 66774885, "body": "@dfeuer I agree with you :)"}], "owner": {"reputation": 2334, "user_id": 2397162, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/665b976c79d0c9c842b131a2df510c3c?s=128&d=identicon&r=PG", "display_name": "niceman", "link": "https://stackoverflow.com/users/2397162/niceman"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 65, "favorite_count": 1, "answer_count": 0, "score": 1, "last_activity_date": 1475041433, "creation_date": 1474987934, "last_edit_date": 1475041433, "question_id": 39727844, "link": "https://stackoverflow.com/questions/39727844/smallcheck-what-does-but-n-did-not-meet-and-how-do-i-know-which", "title": "smallcheck what does &quot;but n did not meet ==&gt;&quot; and how do I know which", "body": "<p>I wrote this property </p>\n\n<pre><code>prop_lookupsymbol = forAll $ \\name table scope -&gt; case lookupsymbol name table scope of\n                                                  Just (s,_) -&gt; property $ is_ancestor s scope\n                                                  Nothing -&gt;  forAll $ \\s-&gt;is_ancestor s ==&gt; (lookupsymbol name table s) == Nothing\n</code></pre>\n\n<p>and ran it with <code>smallCheck 3 prop_lookupsymbol</code>, the results are : </p>\n\n<blockquote>\n  <p>Completed 9000 tests without failure.<br>\n  But 9000 did not meet ==> condition.</p>\n</blockquote>\n\n<p>I know it refers to <code>==&gt;</code> call in the property but what does it mean by <code>did not meet</code> ? Should I worry about this ? and if yes then how do I get the tests that didn't meet the condition ?</p>\n\n<h2>Edit</h2>\n\n<p>I had a mistake where <code>is_ancestor</code> was lacking a second parameter, so the property is this now : </p>\n\n<pre><code>   prop_lookupsymbol = forAll $ \\name table scope -&gt; case lookupsymbol name table scope of\n                                                  Just (s,_) -&gt; property $ is_ancestor s scope\n                                                  Nothing -&gt;  forAll $ \\s-&gt;is_ancestor s scope ==&gt; (lookupsymbol name table s) == Nothing\n</code></pre>\n\n<p>But from 9000 there are 8340 which didn't meet the condition.  </p>\n\n<h1>Here is explanation of the types and functions above :</h1>\n\n<p><code>SymbolTable</code> is a type synonym for <code>HashMap (Scope,String) Symbol</code> (<code>HashMap.Strict</code> from unordered-containers package), this is simply for building a compiler :).</p>\n\n<p>Symbol has variety of constructors(variable,function,type,etc) and <code>Scope</code>defines in what scope the symbol is defined, we have file,class,function,method(function in class),interface.</p>\n\n<p>Scope has name(file name, class name , etc) and upper scope, for a class it also has the parent scope(parent as in inheritance) and a list of interfaces scopes(which the class implements), the interface scope has a parent scope along with its upper scope.  </p>\n\n<p>The function <code>is_ancestor s1 s2</code> returns whether s1 is an upperscope of s2 (or upper-upperscope or upper-upper-upper...) or is a parent scope(or parent-parent or parent-parent-...) or one of the interfaces(or the parent's interfaces or etc), I should mention that <code>is_ancestor s s</code> is always true.  </p>\n\n<p>Finally <code>lookupsymbol name table scope</code> tries to find a symbol whose name is <code>name</code> and scope is <code>s</code> where <code>is_ancestor s scope</code> is true, its return type is <code>Maybe (Scope,Symbol)</code> meaning that it returns the found symbol along with the scope the symbol is defined in(and Nothing when nothing is found).</p>\n\n<p>My property states this : for any name table scope, if lookupsymbol returns <code>Just (s,_)</code> then <code>s</code> must be <code>is_ancestor</code> of <code>scope</code>, but if it returns nothing then it will return nothing for any scope that <code>is_ancestor</code> of <code>scope</code>.</p>\n"}, {"tags": ["haskell", "monads", "hindley-milner"], "comments": [{"owner": {"reputation": 22266, "user_id": 649287, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7c0ea0055b84020bf860c05f53ba53d5?s=128&d=identicon&r=PG", "display_name": "augustss", "link": "https://stackoverflow.com/users/649287/augustss"}, "edited": false, "score": 6, "creation_date": 1474983869, "post_id": 39725024, "comment_id": 66750020, "body": "Yes, you can add <code>runST</code> as a special typing rule which does the needed checks."}, {"owner": {"reputation": 978, "user_id": 1753545, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/p8AyY.png?s=128&g=1", "display_name": "max", "link": "https://stackoverflow.com/users/1753545/max"}, "reply_to_user": {"reputation": 22266, "user_id": 649287, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7c0ea0055b84020bf860c05f53ba53d5?s=128&d=identicon&r=PG", "display_name": "augustss", "link": "https://stackoverflow.com/users/649287/augustss"}, "edited": false, "score": 0, "creation_date": 1540643112, "post_id": 39725024, "comment_id": 92946022, "body": "Actually the answer is described in the original paper <a href=\"https://dl.acm.org/citation.cfm?id=178246\" rel=\"nofollow noreferrer\">dl.acm.org/citation.cfm?id=178246</a>"}], "answers": [{"tags": [], "owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "is_accepted": true, "score": 2, "last_activity_date": 1479021735, "creation_date": 1479021735, "answer_id": 40571524, "question_id": 39725024, "link": "https://stackoverflow.com/questions/39725024/runst-with-hindley-milner-type-system/40571524#40571524", "title": "runST with Hindley-Milner type system", "body": "<p>Just in case the comments to the question are not entirely clear, the judgement you would need is</p>\n\n<p><a href=\"https://i.stack.imgur.com/joWo0.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/joWo0.png\" alt=\"{\\Gamma \\vdash e \\colon \\forall s.\\, {\\tt ST}\\, s\\, a ~~~~ s \\not\\in \\text{free}(a)\\over \\Gamma \\vdash {\\tt runST}\\, e \\colon a} ~~\\text{[runST]}\"></a></p>\n\n<p>This is of course in conjunction with the other usual typing judgments that come with <a href=\"https://en.wikipedia.org/wiki/Hindley%E2%80%93Milner_type_system\" rel=\"nofollow noreferrer\">Hindley-Milner</a>. Interestingly enough, we don't end up needing to make special rules for anything <em>introducing</em> an <code>ST</code> type, since none of these require type signatures of rank 2:</p>\n\n<pre><code>newSTRef :: a -&gt; ST s (STRef s a)\nreadSTRef :: STRef s a -&gt; ST s a\nwriteSTRef :: STRef s a -&gt; a -&gt; ST s () \n...\n</code></pre>\n"}], "owner": {"reputation": 978, "user_id": 1753545, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/p8AyY.png?s=128&g=1", "display_name": "max", "link": "https://stackoverflow.com/users/1753545/max"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 226, "favorite_count": 3, "accepted_answer_id": 40571524, "answer_count": 1, "score": 9, "last_activity_date": 1479021735, "creation_date": 1474980182, "question_id": 39725024, "link": "https://stackoverflow.com/questions/39725024/runst-with-hindley-milner-type-system", "title": "runST with Hindley-Milner type system", "body": "<p>If I understand the ST monad in Haskell correctly, <code>runST</code> uses rank-2 types in a clever way to ensure that a computation does not reference any other thread when escaping the monad.</p>\n\n<p>I have a toy language with a Hindley-Milner type system, and my question is the following: is it possible to extend the HM type system with an ad-hoc rule for typing <code>runST</code> applications so that the ST monad is safely escapable, <strong>without introducing rank-2 types?</strong></p>\n\n<p>More precisely, <code>runST</code> would have type <code>forall s a. ST s a -&gt; a</code> (i.e. rank-1) and the typing rule would first try to generalize the computation type in the same way HM generalizes types in let-expressions, but raise a type error if the <code>s</code> type variable is found to be bound.</p>\n\n<p>The above only restricts accepted programs compared to vanilla HM, so it seems sound, but I am unsure. Would this work?</p>\n"}, {"tags": ["haskell", "types"], "comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user824425"}, "edited": false, "score": 4, "creation_date": 1474968926, "post_id": 39721081, "comment_id": 66739775, "body": "First off: what does it mean to add <code>1</code> to a <code>Users</code>? What result do you expect?"}, {"owner": {"reputation": 2691, "user_id": 5477287, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/yKMgF.jpg?s=128&g=1", "display_name": "Babra Cunningham", "link": "https://stackoverflow.com/users/5477287/babra-cunningham"}, "edited": false, "score": 0, "creation_date": 1474969100, "post_id": 39721081, "comment_id": 66739900, "body": "@Rhymoid I want to add 1 to the value, i.e Age 44 become Age 45"}, {"owner": {"reputation": 13807, "user_id": 2407038, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/538f6f4a9aa43841841de7d8e8b169fc?s=128&d=identicon&r=PG&f=1", "display_name": "user2407038", "link": "https://stackoverflow.com/users/2407038/user2407038"}, "edited": false, "score": 0, "creation_date": 1474977983, "post_id": 39721081, "comment_id": 66745805, "body": "@barbrac A <code>User</code> can be a <code>Height</code>, not only an <code>Age</code>. You must specify what happens to <code>(x :: User) + 1</code> if it is either <code>Height</code> or <code>Age</code>."}], "answers": [{"comments": [{"owner": {"reputation": 384463, "user_id": 1126841, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fa05233b2357f8d11c22ef4cfc7bb85c?s=128&d=identicon&r=PG", "display_name": "chepner", "link": "https://stackoverflow.com/users/1126841/chepner"}, "edited": false, "score": 0, "creation_date": 1474976430, "post_id": 39721814, "comment_id": 66744796, "body": "For the purposes of this answer, <code>data User = User Int Int</code> would be simpler. You aren&#39;t making any use of record syntax."}, {"owner": {"reputation": 384, "user_id": 4098149, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/4eff262713ed007414ceb4e35f6b63f5?s=128&d=identicon&r=PG&f=1", "display_name": "Schoon", "link": "https://stackoverflow.com/users/4098149/schoon"}, "reply_to_user": {"reputation": 384463, "user_id": 1126841, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fa05233b2357f8d11c22ef4cfc7bb85c?s=128&d=identicon&r=PG", "display_name": "chepner", "link": "https://stackoverflow.com/users/1126841/chepner"}, "edited": false, "score": 0, "creation_date": 1474977398, "post_id": 39721814, "comment_id": 66745394, "body": "Yes. I used it as a kind of documentation. <code>data Users = Height Int | Age Int</code> seems semantically not right and <code>User Int Int</code> a bit to generic."}], "tags": [], "owner": {"reputation": 384, "user_id": 4098149, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/4eff262713ed007414ceb4e35f6b63f5?s=128&d=identicon&r=PG&f=1", "display_name": "Schoon", "link": "https://stackoverflow.com/users/4098149/schoon"}, "is_accepted": true, "score": 8, "last_activity_date": 1474978287, "last_edit_date": 1474978287, "creation_date": 1474970694, "answer_id": 39721814, "question_id": 39721081, "link": "https://stackoverflow.com/questions/39721081/performing-operations-on-custom-data-types/39721814#39721814", "title": "Performing operations on custom data types?", "body": "<p>First, the error message tells you that you are using the <code>(+)</code> function on <code>Users</code>, for which it is not defined. </p>\n\n<p>So you could make <code>Users</code> an instance of <code>Num</code>, meaning that you also need to define <code>(-)</code>, <code>(*)</code>, <code>negate</code>,.. for <code>Users</code>, which seems odd.</p>\n\n<p>Maybe you need something like this:</p>\n\n<pre><code>data User = User {height :: Int, age :: Int } deriving (Show)\n\naddToHeight :: Int -&gt; User -&gt; User\naddToHeight x (User h a) = User (h+x) a\n</code></pre>\n\n<p>then use:</p>\n\n<pre><code>let users = [User 180 20, User 185 22]\nfmap (addToHeight 1) users\n</code></pre>\n\n<p>--</p>\n\n<p>to leave semantics aside:</p>\n\n<pre><code>plus :: Int -&gt; Users -&gt; Users\nplus x (Age a) = Age (a+x)\nplus x (Height h) = Height (h+x)\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 384, "user_id": 4098149, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/4eff262713ed007414ceb4e35f6b63f5?s=128&d=identicon&r=PG&f=1", "display_name": "Schoon", "link": "https://stackoverflow.com/users/4098149/schoon"}, "edited": false, "score": 0, "creation_date": 1474977606, "post_id": 39723542, "comment_id": 66745539, "body": "Use <code>:set -W</code> in ghci and you&#39;ll see that the pattern matching in <code>older</code> is not complete. And adding the Height case in older doesn&#39;t make sense semantically."}, {"owner": {"reputation": 1668, "user_id": 4050960, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2433d3125076f5789fe82a2eae87fdd1?s=128&d=identicon&r=PG&f=1", "display_name": "Chuck Aguilar", "link": "https://stackoverflow.com/users/4050960/chuck-aguilar"}, "reply_to_user": {"reputation": 384, "user_id": 4098149, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/4eff262713ed007414ceb4e35f6b63f5?s=128&d=identicon&r=PG&f=1", "display_name": "Schoon", "link": "https://stackoverflow.com/users/4098149/schoon"}, "edited": false, "score": 0, "creation_date": 1474979445, "post_id": 39723542, "comment_id": 66746758, "body": "I know, I just wanted to give an answer as he wanted. Of course, the pattern matching in older isn&#39;t complete and adding the height case doesn&#39;t make sense, but it&#39;s how he wanted to do it. Now he can see, how it works, even if that&#39;s not the best practice. If I did it, I would do it differently."}], "tags": [], "owner": {"reputation": 1668, "user_id": 4050960, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2433d3125076f5789fe82a2eae87fdd1?s=128&d=identicon&r=PG&f=1", "display_name": "Chuck Aguilar", "link": "https://stackoverflow.com/users/4050960/chuck-aguilar"}, "is_accepted": false, "score": 1, "last_activity_date": 1474979755, "last_edit_date": 1474979755, "creation_date": 1474975876, "answer_id": 39723542, "question_id": 39721081, "link": "https://stackoverflow.com/questions/39721081/performing-operations-on-custom-data-types/39723542#39723542", "title": "Performing operations on custom data types?", "body": "<p>@Schoon is right. </p>\n\n<p>But if you want to make it on <em>your way</em> you can do this:</p>\n\n<p><code>data Users = Height Int | Age Int deriving (Show)</code> you have to \"derive\" show ;)</p>\n\n<p>then: </p>\n\n<pre><code>older :: Users -&gt; Users\nolder (Age a) = Age (a+1)\nolder _       = error \"not Age\" --Now it's better ;)\n</code></pre>\n\n<p>and your function: </p>\n\n<pre><code>everyOneOlder :: [Users] -&gt; [Users]\neveryOneOlder li = [older x | x &lt;- li]\n</code></pre>\n\n<p>And then, you become this: </p>\n\n<pre><code>*Main&gt; :l test.hs \n[1 of 1] Compiling Main             ( test.hs, interpreted )\nOk, modules loaded: Main.\n*Main&gt; let x = Age 5\n*Main&gt; x\nAge 5\n*Main&gt; let y = older x\n*Main&gt; y\nAge 6\n*Main&gt; let z = [Age 1, Age 2]    \n*Main&gt; everyOneOlder z\n[Age 2,Age 3]\n*Main&gt; \n</code></pre>\n\n<p>Nice, isn't it? :) </p>\n"}, {"tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 2, "last_activity_date": 1474979918, "creation_date": 1474979918, "answer_id": 39724914, "question_id": 39721081, "link": "https://stackoverflow.com/questions/39721081/performing-operations-on-custom-data-types/39724914#39724914", "title": "Performing operations on custom data types?", "body": "<p>In your case I think you don't really want a new data type</p>\n\n<pre><code>data Users = Height Int | Age Int \n</code></pre>\n\n<p><a href=\"https://wiki.haskell.org/Type_synonym\" rel=\"nofollow\">Type synonyms</a> should suffice; they will work nicely with standard operators:</p>\n\n<pre><code>type Age = Int\ntype Height = Int\n\nmyList :: [Age]\nmyList = [44, 54, 21, 34, 22]\n\nmyFunction :: [Age] -&gt; [Age]\nmyFunction li = [x + 1 | x &lt;- li]\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 384, "user_id": 4098149, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/4eff262713ed007414ceb4e35f6b63f5?s=128&d=identicon&r=PG&f=1", "display_name": "Schoon", "link": "https://stackoverflow.com/users/4098149/schoon"}, "edited": false, "score": 2, "creation_date": 1475176244, "post_id": 39770956, "comment_id": 66850695, "body": "May I ask you if you are really sure that this is what you want?"}, {"owner": {"reputation": 2691, "user_id": 5477287, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/yKMgF.jpg?s=128&g=1", "display_name": "Babra Cunningham", "link": "https://stackoverflow.com/users/5477287/babra-cunningham"}, "reply_to_user": {"reputation": 384, "user_id": 4098149, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/4eff262713ed007414ceb4e35f6b63f5?s=128&d=identicon&r=PG&f=1", "display_name": "Schoon", "link": "https://stackoverflow.com/users/4098149/schoon"}, "edited": false, "score": 0, "creation_date": 1475178923, "post_id": 39770956, "comment_id": 66852130, "body": "@Schoon how so?"}, {"owner": {"reputation": 384, "user_id": 4098149, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/4eff262713ed007414ceb4e35f6b63f5?s=128&d=identicon&r=PG&f=1", "display_name": "Schoon", "link": "https://stackoverflow.com/users/4098149/schoon"}, "edited": false, "score": 0, "creation_date": 1475179396, "post_id": 39770956, "comment_id": 66852379, "body": "it doesn&#39;t seem to compile . . <code>Conflicting definitions for \u2018pure\u2019</code>"}, {"owner": {"reputation": 384, "user_id": 4098149, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/4eff262713ed007414ceb4e35f6b63f5?s=128&d=identicon&r=PG&f=1", "display_name": "Schoon", "link": "https://stackoverflow.com/users/4098149/schoon"}, "edited": false, "score": 0, "creation_date": 1475179598, "post_id": 39770956, "comment_id": 66852470, "body": "and why did you add a type variable to Users. Height &quot;Foo&quot; is now a legal term. Shouldn&#39;t Height always be an <code>Int</code>?"}, {"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "reply_to_user": {"reputation": 384, "user_id": 4098149, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/4eff262713ed007414ceb4e35f6b63f5?s=128&d=identicon&r=PG&f=1", "display_name": "Schoon", "link": "https://stackoverflow.com/users/4098149/schoon"}, "edited": false, "score": 0, "creation_date": 1475205606, "post_id": 39770956, "comment_id": 66860210, "body": "@Schoon, you&#39;re using a newer version of GHC, which causes the <code>pure</code> conflict. I&#39;m still quite convinced your answer is correct and this one is lousy."}], "tags": [], "owner": {"reputation": 2691, "user_id": 5477287, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/yKMgF.jpg?s=128&g=1", "display_name": "Babra Cunningham", "link": "https://stackoverflow.com/users/5477287/babra-cunningham"}, "is_accepted": false, "score": -1, "last_activity_date": 1475153731, "creation_date": 1475153731, "answer_id": 39770956, "question_id": 39721081, "link": "https://stackoverflow.com/questions/39721081/performing-operations-on-custom-data-types/39770956#39770956", "title": "Performing operations on custom data types?", "body": "<p>I've found the best solution using Applicative Functors.</p>\n\n<p>Code:</p>\n\n<pre><code>data Users a = Height a | Age a deriving (Show, Eq, Ord)\n\nmyList = [Age 44, Age 65, Age 21, Age 87]\n\ninstance Functor Users where\n   fmap f (Age a) = Age (f a)\n   fmap f (Height a) = Height (f a)\n\ninstance Applicative Users where\n   pure a = (Age a)\n   (&lt;*&gt;) (Age a) = fmap a\n   pure a = (Height a)\n   (&lt;*&gt;) (Height a) = fmap a\n\nmain = do\n   let increaseAgesByOne = pure (\\x -&gt; pure (+1) &lt;*&gt; x) &lt;*&gt; myList\n   print $ increaseAgesByOne\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>[Age 45, Age 66, Age 22, Age 88]\n</code></pre>\n\n<p>Hope this helps anyone with a similar problem.</p>\n"}], "owner": {"reputation": 2691, "user_id": 5477287, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/yKMgF.jpg?s=128&g=1", "display_name": "Babra Cunningham", "link": "https://stackoverflow.com/users/5477287/babra-cunningham"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 227, "favorite_count": 0, "accepted_answer_id": 39721814, "answer_count": 4, "score": 1, "last_activity_date": 1475153731, "creation_date": 1474968712, "question_id": 39721081, "link": "https://stackoverflow.com/questions/39721081/performing-operations-on-custom-data-types", "title": "Performing operations on custom data types?", "body": "<p>I have the following data type:</p>\n\n<pre><code>data Users = Height Int | Age Int \n</code></pre>\n\n<p>I then have a list of ages:</p>\n\n<pre><code>myList = [Age 44, Age 54, Age 21, Age 34, Age 22]\n</code></pre>\n\n<p>Which I want to apply to this function:</p>\n\n<pre><code>myFunction :: [Users] -&gt; [Users]\nmyFunction li = [x + 1 | x &lt;- li]\n</code></pre>\n\n<p>However this causes the following error:</p>\n\n<pre><code>\"No instance for (Num Users) arising from a use of \u2018+\u2019\"\n</code></pre>\n\n<p>How can I make this work? Do I need to separate 'Age' from each of the values? </p>\n"}, {"tags": ["haskell", "polymorphism"], "comments": [{"owner": {"reputation": 23816, "user_id": 572606, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/c20a126ad0dce40e8fc4a43456107919?s=128&d=identicon&r=PG", "display_name": "shang", "link": "https://stackoverflow.com/users/572606/shang"}, "edited": false, "score": 1, "creation_date": 1474968119, "post_id": 39719073, "comment_id": 66739179, "body": "Can you give a more complete example of what you are trying to do? Why not just have <code>transduce :: Foldable t =&gt; Transducer a b -&gt; Reducer r a -&gt; r -&gt; t b -&gt; r</code> ?"}, {"owner": {"reputation": 13807, "user_id": 2407038, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/538f6f4a9aa43841841de7d8e8b169fc?s=128&d=identicon&r=PG&f=1", "display_name": "user2407038", "link": "https://stackoverflow.com/users/2407038/user2407038"}, "edited": false, "score": 1, "creation_date": 1474977893, "post_id": 39719073, "comment_id": 66745742, "body": "Clearly the type <code>Foldable t =&gt; Transducer a b -&gt; t1 -&gt; b -&gt; t a -&gt; b</code> is the wrong one for the given implementation. <code>xform</code> has type <code>Transducer a b</code> which is a function taking a <code>Reducer r0 a</code> for some <code>r0</code>, but you apply <code>xform</code> to <code>f</code> which has type <code>t1</code> (a rigid type!), which obviously doesn&#39;t make sense. The inferred type <code>Foldable t =&gt; (t1 -&gt; b -&gt; a -&gt; b) -&gt; t1 -&gt; b -&gt; t a -&gt; b</code> is probably what you actually want - the first argument isn&#39;t a transducer, but you can pass something which is a transducer. If you want inference to guess polytypes, wrap <code>Transducer</code> in a newtype."}], "answers": [{"comments": [{"owner": {"reputation": 2364, "user_id": 2226753, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/9f4aaabdbd6fc131a2d3503c07d94f6b?s=128&d=identicon&r=PG", "display_name": "Seneca", "link": "https://stackoverflow.com/users/2226753/seneca"}, "edited": false, "score": 0, "creation_date": 1475051455, "post_id": 39731312, "comment_id": 66781009, "body": "Thanks, I understand now :)"}], "tags": [], "owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "is_accepted": true, "score": 1, "last_activity_date": 1474998896, "last_edit_date": 1495540108, "creation_date": 1474998896, "answer_id": 39731312, "question_id": 39719073, "link": "https://stackoverflow.com/questions/39719073/haskell-rank-n-types-type-classes-syntax/39731312#39731312", "title": "Haskell rank n types &amp; type classes syntax", "body": "<p>It looks to me like you probably meant something like</p>\n\n<pre><code>transduce :: Foldable t =&gt; Transducer a b -&gt; Reducer r a -&gt; r -&gt; t b -&gt; r\n</code></pre>\n\n<p>As <a href=\"https://stackoverflow.com/questions/39719073/haskell-rank-n-types-type-classes-syntax#comment66745742_39719073\">user2407038 suggested</a>, you only need such a fancy type if you want to force the caller to supply a <code>Transducer</code>. Otherwise, you can simplify it to</p>\n\n<pre><code>transduce :: Foldable t =&gt; (x -&gt; Reducer r b) -&gt; x -&gt; r -&gt; t b -&gt; r\n</code></pre>\n"}], "owner": {"reputation": 2364, "user_id": 2226753, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/9f4aaabdbd6fc131a2d3503c07d94f6b?s=128&d=identicon&r=PG", "display_name": "Seneca", "link": "https://stackoverflow.com/users/2226753/seneca"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 139, "favorite_count": 1, "accepted_answer_id": 39731312, "answer_count": 1, "score": 0, "last_activity_date": 1474998896, "creation_date": 1474962731, "last_edit_date": 1474963216, "question_id": 39719073, "link": "https://stackoverflow.com/questions/39719073/haskell-rank-n-types-type-classes-syntax", "title": "Haskell rank n types &amp; type classes syntax", "body": "<p>While learning Haskell I'm trying to understand the types of clojure's transducers in Haskell.</p>\n\n<pre><code>{-# LANGUAGE RankNTypes #-}\n\nmodule Transducers where\n\n-- r = reduced\ntype Reducer r a = r -&gt; a -&gt; r\n\ntype Transducer a b = forall r . Reducer r a -&gt; Reducer r b\n</code></pre>\n\n<p>I'm having trouble understanding how to type the following function:</p>\n\n<pre><code>-- type inference\ntransduce :: Foldable t =&gt; (t1 -&gt; b -&gt; a -&gt; b) -&gt; t1 -&gt; b -&gt; t a -&gt; b\n-- what I actually want\ntransduce :: forall t1 . Foldable t =&gt; Transducer a b -&gt; t1 -&gt; b -&gt; t a -&gt; b\ntransduce xform f init coll = foldl (xform f) init coll\n</code></pre>\n\n<p>This gives me trouble, it won't compile. Am I missing something syntax-wise? Or isn't this possible?</p>\n"}, {"tags": ["haskell", "cabal", "preprocessor"], "comments": [{"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 3, "creation_date": 1474958425, "post_id": 39717613, "comment_id": 66732892, "body": "Cabal has its own (primitive) support for conditionals. (Search for &quot;conditionals&quot; in <a href=\"https://www.haskell.org/cabal/users-guide/developing-packages.html\" rel=\"nofollow noreferrer\">the user guide</a> and take a look at the <code>flag(name)</code> option in particular.)"}, {"owner": {"reputation": 375, "user_id": 5287908, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/w0QJd.png?s=128&g=1", "display_name": "QSpider", "link": "https://stackoverflow.com/users/5287908/qspider"}, "reply_to_user": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 0, "creation_date": 1474978891, "post_id": 39717613, "comment_id": 66746381, "body": "Thank you. I implemented it."}], "owner": {"reputation": 375, "user_id": 5287908, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/w0QJd.png?s=128&g=1", "display_name": "QSpider", "link": "https://stackoverflow.com/users/5287908/qspider"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 124, "favorite_count": 0, "answer_count": 0, "score": 1, "last_activity_date": 1474958122, "creation_date": 1474958122, "question_id": 39717613, "link": "https://stackoverflow.com/questions/39717613/preprocessor-in-cabal-file", "title": "Preprocessor in cabal file", "body": "<p>I need to use the preprocessor in the cabal file of Haskell project.\nLike this:</p>\n\n<pre><code>library\n  hs-source-dirs:      src\n\n  exposed-modules:     Application\n                     , ApplicationData\n#ifdef ModFest\n                     , Foundation \n#endif\n                     , EConsole.Coloring\n                     , EConsole.Marking\n                     , Import\n</code></pre>\n\n<p>How is it possible to use preprocessor in cabal file?</p>\n\n<p>Thank you!</p>\n"}, {"tags": ["haskell", "types", "functional-programming"], "comments": [{"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 4, "creation_date": 1474944549, "post_id": 39715244, "comment_id": 66728312, "body": "The usual way to do this in Haskell is through a smart constructor <code>a :: Tmp -&gt; Tmp -&gt; Maybe Test</code>."}], "answers": [{"comments": [{"owner": {"reputation": 55, "user_id": 4541585, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ab8da05d3383d2acda08064420e87355?s=128&d=identicon&r=PG&f=1", "display_name": "eaglemute", "link": "https://stackoverflow.com/users/4541585/eaglemute"}, "edited": false, "score": 0, "creation_date": 1474949244, "post_id": 39715551, "comment_id": 66729420, "body": "Thank you for such a detailed answer!"}], "tags": [], "owner": {"reputation": 6694, "user_id": 2555037, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c62b3037add2dde3cb8dd935f7ca9fe7?s=128&d=identicon&r=PG", "display_name": "Toxaris", "link": "https://stackoverflow.com/users/2555037/toxaris"}, "is_accepted": true, "score": 13, "last_activity_date": 1474947258, "creation_date": 1474947258, "answer_id": 39715551, "question_id": 39715244, "link": "https://stackoverflow.com/questions/39715244/how-can-i-restrict-types-based-on-input-values-in-haskell/39715551#39715551", "title": "How can I restrict types based on input values in Haskell?", "body": "<p>The answer depends on how you want your restriction to be enforced: At runtime or at compile time.</p>\n\n<p><strong>To enforce the restriction at runtime</strong>, you can add a function (say, <code>makeA</code>) that checks the restriction and then calls the constructor. Such a function that does a bit of stuff and then calls a constructor is also called a <em>smart constructor</em>. If you only export the smart constructor <code>makeA</code> but not the real constructor <code>A</code> from a module, you can be sure that other modules use the smart constructor, so the restriction is always checked.</p>\n\n<p>Example:</p>\n\n<pre><code>module Test (Tmp (Foo, Bar, Baz), Test (), makeA) where\n  data Tmp\n     = Foo Int\n     | Bar Int\n     | Baz Int\n\n  data Test = A Tmp Tmp\n\n  makeA :: Tmp -&gt; Tmp -&gt; Tmp\n  makeA (Baz _) (Baz _) = error \"makeA: two baz problem\"\n  makeA tmp1 tmp2 = A tmp1 tmp2\n</code></pre>\n\n<p>The benefit of this technique is that you don't have to change your data types at all. The drawback is that the restriction is only enforced at run time.</p>\n\n<p><strong>To enforce the restriction at compile time</strong>, you need to change your data types somehow. The problem with your current data types is that the type checker cannot distinguish values constructed by <code>Foo</code> and <code>Bar</code> and values constructed by <code>Baz</code>. To the type checker, these are all <code>Tmp</code> values, so the type checker cannot enforce that some <code>Tmp</code> values are ok and others aren't. So we have to change the data types to encode \"Bazness\" of a <code>Tmp</code> value in the types.</p>\n\n<p><strong>One option for encoding the Bazness in the type</strong> would be to restructure <code>Tmp</code> as follows:</p>\n\n<pre><code>data TmpNotBaz\n  = Foo Int\n  | Bar Int\n\ndata Tmp\n  = NotBaz TmpNotBaz\n  | Baz Int\n</code></pre>\n\n<p>Now it is clear that a value of type <code>TmpNotBaz</code> cannot be <code>Baz</code>, but a value of type <code>Tmp</code> can be <code>Baz</code>. The benefit of this idea is that it only uses basic Haskell features. A minor drawback is that you need to put calls to <code>NotBaz</code> into your code. A major drawback is that we still cannot directly express the idea of \"one of the arguments of <code>A</code> can be <code>Baz</code> if the other isn't\". We would have to write multiple versions of <code>A</code>:</p>\n\n<pre><code>data Test\n  = A1 TmpNotBaz Tmp\n  | A2 Tmp TmpNotBaz\n</code></pre>\n\n<p>Now we can express all the values we want by choosing <code>A1</code> or <code>A2</code> as necessary, and we cannot express <code>A (Baz ...) (Baz ...)</code> anymore, as required. A problem with this solution is that there are multiple representations for what used to be, for example, <code>A (Foo 1) (Foo 2)</code> : Both <code>A1 (Foo 1) (NotBaz (Foo 2))</code> and <code>A2 (NotBaz (Foo 1)) (Foo 2)</code> represent this value.</p>\n\n<p>You can try to play around with the structure of the datatypes like this and create a version that works for your situation.</p>\n\n<p><strong>Another option for encoding the Bazness in the type</strong> would be to annotate a bit of type-level information to the <code>Tmp</code> type and use type-level programming to reason about this type-level information. The drawback of this idea is that it uses more advanced Haskell features. Actually, there are many emerging ways to do this sort thing, and it is not clear which of these will end up being considered \"standard\" advanced Haskell. That said, here is one approach:</p>\n\n<pre><code>{-# LANGUAGE GADTs, TypeFamilies, DataKinds #-}\n\ndata Bazness = IsBaz | NotBaz\n\ndata BothBazOrNot = BothBaz | NotBothBaz\n\ntype family AreBothBaz (b1 :: Bazness) (b2 :: Bazness) :: BothBazOrNot where\n  AreBothBaz 'IsBaz 'IsBaz = 'BothBaz\n  AreBothBaz _ _ = 'NotBothBaz\n\ndata Tmp (b :: Bazness) :: * where\n  Foo :: Int -&gt; Tmp 'NotBaz\n  Bar :: Int -&gt; Tmp 'NotBaz\n  Baz :: Int -&gt; Tmp 'IsBaz\n\ndata Test where\n  A :: AreBothBaz b1 b2 ~ 'NotBothBaz =&gt; Tmp b1 -&gt; Tmp b2 -&gt; Test\n</code></pre>\n\n<p>Note how the type signatures of the constructors <code>Foo</code>, <code>Bar</code> and <code>Baz</code> talk about whether the constructor creates something that <code>IsBaz</code> or <code>NotBaz</code>. And how the type signature for <code>A</code> talks about some <code>b1</code> and <code>b2</code> choices so that <code>NotBothBaz</code>.</p>\n\n<p>Using this code, we can write the following expressions:</p>\n\n<ul>\n<li><code>A (Foo 1) (Bar 2)</code></li>\n<li><code>A (Foo 1) (Baz 2)</code></li>\n<li><code>A (Baz 1) (Bar 2)</code></li>\n</ul>\n\n<p>But if we try to write  <code>A (Baz 1) (Baz 2)</code>, the type checker complains:</p>\n\n<pre><code>Couldn't match type 'BothBaz with 'NotBothBaz\n    arising from a use of A\n In the expression: A (Baz 1) (Baz 2)\n</code></pre>\n\n<p>So the type checker figured out that in this case, the arguments to <code>A</code> are <code>BothBaz</code>, but we annotated the type of <code>A</code> to only accept arguments that are <code>NotBothBaz</code>, so the type checker complains that <code>BothBaz</code> differs from <code>NotBothBaz</code>.</p>\n"}], "owner": {"reputation": 55, "user_id": 4541585, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ab8da05d3383d2acda08064420e87355?s=128&d=identicon&r=PG&f=1", "display_name": "eaglemute", "link": "https://stackoverflow.com/users/4541585/eaglemute"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 340, "favorite_count": 0, "accepted_answer_id": 39715551, "answer_count": 1, "score": 4, "last_activity_date": 1474947258, "creation_date": 1474944456, "last_edit_date": 1474944665, "question_id": 39715244, "link": "https://stackoverflow.com/questions/39715244/how-can-i-restrict-types-based-on-input-values-in-haskell", "title": "How can I restrict types based on input values in Haskell?", "body": "<p>I'm new to Haskell. Sorry if this question has an obvious answer.</p>\n\n<p>I have</p>\n\n<pre><code>data Tmp = Foo Int\n         | Bar Int\n         | Baz Int\n</code></pre>\n\n<p>and</p>\n\n<pre><code>data Test = A Tmp Tmp\n</code></pre>\n\n<p>The constructor <code>A Tmp Tmp</code> can take any constructor for <code>Tmp</code> except for\n<code>A (Baz i) (Baz j)</code> where <code>i</code> and <code>j</code> are arbitrary <code>Int</code>s. Is there any way I can\nrestrict the second <code>Tmp</code> in <code>A Tmp Tmp</code> from being <code>Baz</code> if the first <code>Tmp</code> is already <code>Baz</code>?</p>\n"}, {"tags": ["haskell", "eval", "interpreter"], "answers": [{"tags": [], "owner": {"reputation": 25144, "user_id": 477476, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/Qf4TT.png?s=128&g=1", "display_name": "Cactus", "link": "https://stackoverflow.com/users/477476/cactus"}, "is_accepted": true, "score": 2, "last_activity_date": 1474944410, "creation_date": 1474944410, "answer_id": 39715242, "question_id": 39714447, "link": "https://stackoverflow.com/questions/39714447/language-haskell-interpreter-is-this-the-right-tool-for-the-job-at-hand/39715242#39715242", "title": "Language.Haskell.Interpreter: is this the right tool for the job at hand?", "body": "<p>As for #2, you need to add <code>\"Grammar\"</code> to the <code>setImports</code> list as well:</p>\n\n<pre><code>runInterpreter $ do\n    loadModules [\"HintDefs\"]\n    setImports [\"Prelude\", \"HintDefs\"]\n    interpret \"ran\" (as :: String -&gt; Bool)\n</code></pre>\n\n<p>As for #3, it is because <a href=\"https://hackage.haskell.org/package/hint-0.6.0/docs/Language-Haskell-Interpreter.html#v:runInterpreter\" rel=\"nofollow\"><code>runInterpreter</code></a> is monomorphic in the choice of monad to run it in:</p>\n\n<blockquote>\n<pre><code>runInterpreter :: (MonadIO m, MonadMask m) \n               =&gt; InterpreterT m a \n               -&gt; m (Either InterpreterError a)\n</code></pre>\n</blockquote>\n\n<p>So you'll need to choose a particular <code>m</code> by running it in e.g. <code>IO</code>:</p>\n\n<pre><code>main :: IO ()\nmain = do\n    ran &lt;- runInterpreter $ do\n        loadModules [\"HintDefs\"]\n        setImports [\"Prelude\", \"HintDefs\"]\n        interpret \"ran\" (as :: String -&gt; Bool)\n    print $ ran &lt;*&gt; pure \"John\"\n</code></pre>\n\n<p>Now, as for #1, I am not convinced you need something as stupidly powerful as HInt here. You could just maintain a dictionary of <code>String -&gt; Bool</code> functions keyed by a <code>String</code> key, something simple like a <code>Map String (String -&gt; Bool)</code>, and then use that to look up <code>ran</code> etc.</p>\n"}], "owner": {"reputation": 569, "user_id": 4430994, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/d692c01775d04391f9377575d05f2e9f?s=128&d=identicon&r=PG&f=1", "display_name": "Reuben", "link": "https://stackoverflow.com/users/4430994/reuben"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 55, "favorite_count": 0, "accepted_answer_id": 39715242, "answer_count": 1, "score": 1, "last_activity_date": 1474944410, "creation_date": 1474937219, "last_edit_date": 1474943145, "question_id": 39714447, "link": "https://stackoverflow.com/questions/39714447/language-haskell-interpreter-is-this-the-right-tool-for-the-job-at-hand", "title": "Language.Haskell.Interpreter: is this the right tool for the job at hand?", "body": "<p>I have a little toy semantics for natural language, with words like:</p>\n\n<pre><code>ran :: String -&gt; Bool\nran = (`elem` [\"Bart\", \"Homer\", \"Marge\"])\n</code></pre>\n\n<p>and:</p>\n\n<pre><code>bart :: String\nbart = \"Bart\"\n</code></pre>\n\n<p>So for example, I can have <code>(ran bart) :: Bool</code>, and so on.</p>\n\n<p>I want to write a parser which, for example takes the string <code>\"Bart ran\"</code> and returns <code>True</code>. I'd probably use Parsec for this.</p>\n\n<p>However, the problem is being able to call functions via strings. E.g. getting from <code>\"ran\"</code> to the function <code>ran</code>. For this, I thought <a href=\"https://hackage.haskell.org/package/hint\" rel=\"nofollow\"><code>Language.Haskell.Interpreter</code></a>'s <code>interpret</code> function might be appropriate.</p>\n\n<p>So my questions are:</p>\n\n<ol>\n<li><p>Is this a sensible way to do what I want to do?</p></li>\n<li><p>If so, why doesn't the following work, entered into GHCi, given a module called <code>Grammar.hs</code> in the same directory with <code>ran</code> defined as above:</p>\n\n<pre><code>let a = runInterpreter $ do\n          loadModules [\"Grammar\"]\n          setImports [\"Prelude\"]\n          interpret \"ran\" (as :: String -&gt; Bool)\nlet b = do\n          x &lt;- a\n          return $ x &lt;*&gt; pure \"John\"\nb\n</code></pre></li>\n</ol>\n\n<p>I get the error: </p>\n\n<pre><code>\"Left (WontCompile [GhcError {errMsg = \"&lt;interactive&gt;:2:1:\\n    Not in scope: \\8216ran\\8217\\n    Perhaps you meant \\8216tan\\8217 (imported from Prelude)\"}])\"\n</code></pre>\n\n<p>which suggests that the import isn't working, and indeed, if I try something similar with a Prelude function, everything works.</p>\n\n<ol start=\"3\">\n<li>Why do I get the following type error (among many others) if I try to compile the same code as in Q2, (minus the <code>let</code>):</li>\n</ol>\n\n<blockquote>\n  <p>No instance for <code>MonadIO m0</code> arising from a use of <code>runInterpreter</code></p>\n</blockquote>\n"}, {"tags": ["haskell"], "answers": [{"comments": [{"owner": {"reputation": 34692, "user_id": 356440, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/d16fc2844c1d9f8f815f318734554266?s=128&d=identicon&r=PG", "display_name": "Stephane Rolland", "link": "https://stackoverflow.com/users/356440/stephane-rolland"}, "edited": false, "score": 0, "creation_date": 1474988699, "post_id": 39715075, "comment_id": 66753696, "body": "Nice. I could launch <code>stack solver --update-config</code> afterwards. And now the project compile nicely."}], "tags": [], "owner": {"reputation": 30377, "user_id": 369198, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/71596bb1ca3ba3aa4400c3f407baec9f?s=128&d=identicon&r=PG", "display_name": "Michael Snoyman", "link": "https://stackoverflow.com/users/369198/michael-snoyman"}, "is_accepted": true, "score": 9, "last_activity_date": 1474943120, "creation_date": 1474943120, "answer_id": 39715075, "question_id": 39713267, "link": "https://stackoverflow.com/questions/39713267/trying-to-solve-a-stack-error-library-must-match-0-10-but-the-stack-configur/39715075#39715075", "title": "Trying to solve a stack error: library must match &gt;=0.10, but the stack configuration has no specified version (latest applicable is 0.10)", "body": "<p>I think the cabal executable is choking in this case. Try running stack build cabal-install to get the matching cabal executable for your snapshot.</p>\n\n<p>If that fixes things, can you open a bug report?</p>\n"}], "owner": {"reputation": 34692, "user_id": 356440, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/d16fc2844c1d9f8f815f318734554266?s=128&d=identicon&r=PG", "display_name": "Stephane Rolland", "link": "https://stackoverflow.com/users/356440/stephane-rolland"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2977, "favorite_count": 0, "accepted_answer_id": 39715075, "answer_count": 1, "score": 11, "last_activity_date": 1474943120, "creation_date": 1474928191, "last_edit_date": 1474932718, "question_id": 39713267, "link": "https://stackoverflow.com/questions/39713267/trying-to-solve-a-stack-error-library-must-match-0-10-but-the-stack-configur", "title": "Trying to solve a stack error: library must match &gt;=0.10, but the stack configuration has no specified version (latest applicable is 0.10)", "body": "<p>I'm trying to use <code>brick</code> in a stack project.</p>\n\n<p>Here's the error output:</p>\n\n<blockquote>\n  <p>brick must match >=0.10, but the stack configuration has no specified version (latest applicable is 0.10)</p>\n</blockquote>\n\n<p>It suggests:</p>\n\n<blockquote>\n  <p>Recommended action: try adding the following to your extra-deps in /my-project-path/stack.yaml:\n  - brick-0.10</p>\n</blockquote>\n\n<p>Which I have done, but it doesn't help: same error message.</p>\n\n<pre><code>packages:\n- '.'\n# Dependency packages to be pulled from upstream that are not in the resolver\n# (e.g., acme-missiles-0.3)\nextra-deps: \n- brick-0.10\n</code></pre>\n\n<p>Then launching <code>stack solver</code> gives us:</p>\n\n<blockquote>\n  <p>Using resolver: lts-7.1\n  Using compiler: ghc-8.0.1\n  Asking cabal to calculate a build plan...\n  Trying with packages from lts-7.1 as hard constraints...\n  Could not parse cabal-install errors:</p>\n</blockquote>\n\n<pre><code>&gt;&gt;&gt;&gt; Cabal errors begin\ncabal: failed to parse output of 'ghc-pkg dump'\n&lt;&lt;&lt;&lt; Cabal errors end\n</code></pre>\n\n<p>What is strange is that the <code>stack.yaml</code> was originally pointing to resolver <code>lts-6.2</code>, but <code>stack solver</code> used <code>lts-7.1</code> all the same.</p>\n\n<p>My first two questions are:</p>\n\n<ul>\n<li>I'm wondering whether my <code>stack.yaml</code> file is read at all ?</li>\n<li>Is there something I can do to know what <code>ghc-pkg dump</code> failed exactly ?</li>\n</ul>\n\n<p>And finally, do you know what could solve the issue ?</p>\n"}, {"tags": ["haskell", "ghci", "winghci"], "answers": [{"tags": [], "owner": {"reputation": 10045, "user_id": 1306132, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/kVX7T.png?s=128&g=1", "display_name": "Andrey Bushman", "link": "https://stackoverflow.com/users/1306132/andrey-bushman"}, "is_accepted": false, "score": 1, "last_activity_date": 1474921147, "creation_date": 1474921147, "answer_id": 39711691, "question_id": 39710654, "link": "https://stackoverflow.com/questions/39710654/how-to-change-the-command-prompt-of-winghci/39711691#39711691", "title": "How to change the command prompt of WinGHCi?", "body": "<p>I think I have this problem: <a href=\"https://github.com/haskell/winghci/issues/7\" rel=\"nofollow\">https://github.com/haskell/winghci/issues/7</a></p>\n\n<p>Also:</p>\n\n<blockquote>\n  <p>The original author is no longer active with the project, but the code\n  is still maintained. Please submit your pull requests here.</p>\n</blockquote>\n\n<p>Therefore I will not learn this tool now.</p>\n"}], "owner": {"reputation": 10045, "user_id": 1306132, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/kVX7T.png?s=128&g=1", "display_name": "Andrey Bushman", "link": "https://stackoverflow.com/users/1306132/andrey-bushman"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 322, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1474921147, "creation_date": 1474917401, "last_edit_date": 1592644375, "question_id": 39710654, "link": "https://stackoverflow.com/questions/39710654/how-to-change-the-command-prompt-of-winghci", "title": "How to change the command prompt of WinGHCi?", "body": "<p>Windows 10 x64, Haskell</p>\n<p>I created <code>%appdata%\\ghc\\ghci.conf</code> file and added into it the command for prompt changing:</p>\n<pre><code>:set prompt &quot;\\x03BB&quot;\n</code></pre>\n<p>I see it was applied only for <code>ghci.exe</code> and <code>ghci-8.0.1.exe</code>, but <code>WinGHCi</code> prompt wasn't changed:</p>\n<p><a href=\"https://i.stack.imgur.com/zl6ZI.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/zl6ZI.png\" alt=\"enter image description here\" /></a></p>\n<p>How can I fix it?</p>\n"}, {"tags": ["haskell"], "comments": [{"owner": {"reputation": 384463, "user_id": 1126841, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fa05233b2357f8d11c22ef4cfc7bb85c?s=128&d=identicon&r=PG", "display_name": "chepner", "link": "https://stackoverflow.com/users/1126841/chepner"}, "edited": false, "score": 1, "creation_date": 1474918400, "post_id": 39710307, "comment_id": 66719757, "body": "The implementation you show here isn&#39;t really relevant; your question is really just &quot;How do I write <code>insertionSort</code> using <code>foldr</code>?&quot;"}], "answers": [{"tags": [], "owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "is_accepted": false, "score": 4, "last_activity_date": 1474918190, "creation_date": 1474918190, "answer_id": 39710871, "question_id": 39710307, "link": "https://stackoverflow.com/questions/39710307/how-do-i-write-insertionsort-using-foldr/39710871#39710871", "title": "How do I write insertionSort using foldr?", "body": "<p>Here is the <a href=\"https://hackage.haskell.org/package/base-4.9.0.0/docs/src/GHC.Base.html#foldr\" rel=\"nofollow\">definition of <code>foldr</code> used in GHC</a>:</p>\n\n<pre><code>foldr k z = go\n          where\n            go []     = z\n            go (y:ys) = y `k` go ys\n</code></pre>\n\n<p>Just for simplicity, let's inline <code>go</code>, and use a bit less fancy syntax:</p>\n\n<pre><code>foldr k z [] = z\nfoldr k z (x:xs) = k x (foldr k z xs)\n</code></pre>\n\n<p>For comparison, here is your function:</p>\n\n<pre><code>insertionSort [] = []\ninsertionSort (x:xs) = myInsert x (insertionSort xs)\n</code></pre>\n\n<p>Notice how similar they are! Can you figure out what <code>k</code> and <code>z</code> would need to be in the <code>foldr</code> equations to be equal to your implementation of <code>insertionSort</code>?</p>\n"}], "owner": {"reputation": 155, "user_id": 5862063, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/475941d36d48a7793b89b9ebafba95b8?s=128&d=identicon&r=PG&f=1", "display_name": "JORGE", "link": "https://stackoverflow.com/users/5862063/jorge"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1304, "favorite_count": 0, "answer_count": 1, "score": -3, "last_activity_date": 1475162266, "creation_date": 1474916099, "last_edit_date": 1475162266, "question_id": 39710307, "link": "https://stackoverflow.com/questions/39710307/how-do-i-write-insertionsort-using-foldr", "title": "How do I write insertionSort using foldr?", "body": "<p>I wrote the following Haskell functions:</p>\n\n<pre><code>myInsert :: Ord a =&gt; a -&gt; [a] -&gt; [a]\nmyInsert x [] = [x]\nmyInsert x (y:ys) = if x &lt; y then x:y:ys else y:myInsert x ys\n\ninsertionSort :: Ord a =&gt; [a] -&gt; [a]\ninsertionSort [] = []\ninsertionSort [x] = [x]\ninsertionSort (x:xs) = myInsert x (insertionSort xs)\n</code></pre>\n\n<p>As you can see, \"insertionSort\" depends on \"myInsert\", and they work fine. Now I am asked to use \"foldr\" in \"insertioSort\" but I have not been able to get a successful result.</p>\n\n<p>I will appreciate your feedback.</p>\n"}, {"tags": ["haskell", "threepenny-gui"], "comments": [{"owner": {"reputation": 11009, "user_id": 403805, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/bcf3c21ce05cfb6788e25dcc3821b3c7?s=128&d=identicon&r=PG", "display_name": "Heinrich Apfelmus", "link": "https://stackoverflow.com/users/403805/heinrich-apfelmus"}, "edited": false, "score": 0, "creation_date": 1474978483, "post_id": 39710155, "comment_id": 66746111, "body": "That looks fine to me. It appears to me that you have answered your own question?"}, {"owner": {"reputation": 51, "user_id": 1344678, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e6bea992f68ef7f30221aca8717f8fa3?s=128&d=identicon&r=PG", "display_name": "kaoskorobase", "link": "https://stackoverflow.com/users/1344678/kaoskorobase"}, "reply_to_user": {"reputation": 11009, "user_id": 403805, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/bcf3c21ce05cfb6788e25dcc3821b3c7?s=128&d=identicon&r=PG", "display_name": "Heinrich Apfelmus", "link": "https://stackoverflow.com/users/403805/heinrich-apfelmus"}, "edited": false, "score": 0, "creation_date": 1474980523, "post_id": 39710155, "comment_id": 66747579, "body": "Yes, but maybe the answer is helpful for others, too. Thanks for threepenny-gui btw, well designed and extremely useful!"}, {"owner": {"reputation": 11009, "user_id": 403805, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/bcf3c21ce05cfb6788e25dcc3821b3c7?s=128&d=identicon&r=PG", "display_name": "Heinrich Apfelmus", "link": "https://stackoverflow.com/users/403805/heinrich-apfelmus"}, "edited": false, "score": 0, "creation_date": 1474999341, "post_id": 39710155, "comment_id": 66760416, "body": "Of course. :-) But could you cut the answer and paste it below? That would make it easier for others to understand later. And thank you, I&#39;m glad you like it. :-)"}, {"owner": {"reputation": 51, "user_id": 1344678, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e6bea992f68ef7f30221aca8717f8fa3?s=128&d=identicon&r=PG", "display_name": "kaoskorobase", "link": "https://stackoverflow.com/users/1344678/kaoskorobase"}, "reply_to_user": {"reputation": 11009, "user_id": 403805, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/bcf3c21ce05cfb6788e25dcc3821b3c7?s=128&d=identicon&r=PG", "display_name": "Heinrich Apfelmus", "link": "https://stackoverflow.com/users/403805/heinrich-apfelmus"}, "edited": false, "score": 0, "creation_date": 1475175939, "post_id": 39710155, "comment_id": 66850539, "body": "There doesn&#39;t seem to be an option for answering my own question, I can just add comments. Could you maybe add the answer? Thanks!"}, {"owner": {"reputation": 51, "user_id": 1344678, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e6bea992f68ef7f30221aca8717f8fa3?s=128&d=identicon&r=PG", "display_name": "kaoskorobase", "link": "https://stackoverflow.com/users/1344678/kaoskorobase"}, "reply_to_user": {"reputation": 11009, "user_id": 403805, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/bcf3c21ce05cfb6788e25dcc3821b3c7?s=128&d=identicon&r=PG", "display_name": "Heinrich Apfelmus", "link": "https://stackoverflow.com/users/403805/heinrich-apfelmus"}, "edited": false, "score": 0, "creation_date": 1475176114, "post_id": 39710155, "comment_id": 66850629, "body": "Sorry, forget it, I hadn&#39;t seen the big blue button at the bottom ;)"}], "answers": [{"tags": [], "owner": {"reputation": 51, "user_id": 1344678, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e6bea992f68ef7f30221aca8717f8fa3?s=128&d=identicon&r=PG", "display_name": "kaoskorobase", "link": "https://stackoverflow.com/users/1344678/kaoskorobase"}, "is_accepted": false, "score": 1, "last_activity_date": 1475176079, "creation_date": 1475176079, "answer_id": 39778178, "question_id": 39710155, "link": "https://stackoverflow.com/questions/39710155/how-to-return-jsobject-from-jsfunction/39778178#39778178", "title": "How to return JSObject from JSFunction?", "body": "<p>It's actually much simpler: Just return a JSObject from JSFunction and it will be marshalled correctly:</p>\n\n<pre><code>polyLine :: [[Double]] -&gt; Value -&gt; UI JSObject\npolyLine points = callFunction . f points\n  where\n    f :: [[Double]] -&gt; Value -&gt; JSFunction JSObject\n    f = ffi \"L.polyline(%1, %2).addTo(map)\"\n</code></pre>\n"}], "owner": {"reputation": 51, "user_id": 1344678, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e6bea992f68ef7f30221aca8717f8fa3?s=128&d=identicon&r=PG", "display_name": "kaoskorobase", "link": "https://stackoverflow.com/users/1344678/kaoskorobase"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 69, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1475176129, "creation_date": 1474915545, "last_edit_date": 1475176129, "question_id": 39710155, "link": "https://stackoverflow.com/questions/39710155/how-to-return-jsobject-from-jsfunction", "title": "How to return JSObject from JSFunction?", "body": "<p>I'd like to return a reference to a Javascript object from an FFI function definition in order to be able to manipulate the object later on:</p>\n\n<pre><code>import           Data.Aeson\nimport           Foreign.JavaScript (JSObject, NewJSObject, unsafeCreateJSObject)\nimport           Foreign.RemotePtr (RemotePtr)\nimport           Graphics.UI.Threepenny.Core hiding (text)\n\nmkJSObject :: JSFunction NewJSObject -&gt; UI JSObject\nmkJSObject f = askWindow &gt;&gt;= liftIO . flip unsafeCreateJSObject f\n\npolyLine :: [[Double]] -&gt; Value -&gt; UI JSObject\npolyLine points = mkJSObject . f points\n  where\n    f :: [[Double]] -&gt; Value -&gt; JSFunction NewJSObject\n    f = ffi \"L.polyline(%1, %2).addTo(map)\"\n</code></pre>\n\n<p>But the underlying Javascript Window doesn't seem to be publicly accessible. Is there another way for creating references to Javascript objects?</p>\n"}, {"tags": ["haskell", "higher-order-functions"], "comments": [{"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 6, "creation_date": 1474914191, "post_id": 39709648, "comment_id": 66717351, "body": "If you think you will have some use for calling <code>myFunction</code> with something other than <code>(+++)</code> as the last argument, then passing as a parameter is the right thing. Otherwise, it is pointless."}, {"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 8, "creation_date": 1474914243, "post_id": 39709648, "comment_id": 66717388, "body": "I&#39;m not sure if these can really be compared. It&#39;s like comparing <code>\\x y -&gt; x + y</code> and <code>\\x -&gt; x + 7</code>. The first one is strictly more general. The second one might be exactly what you want in a given context."}, {"owner": {"reputation": 2789, "user_id": 1101776, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/gM3dK.jpg?s=128&g=1", "display_name": "Balraj Singh", "link": "https://stackoverflow.com/users/1101776/balraj-singh"}, "edited": false, "score": 0, "creation_date": 1474914604, "post_id": 39709648, "comment_id": 66717587, "body": "Passing a function as a parameter is required if you want to avoid specifying concrete implementation of that function and leave that when its been used. Were as if your function doesn&#39;t require any external dependencies passing function is of no point."}, {"owner": {"reputation": 57219, "user_id": 33796, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/08727b23ba62e634b32988cdff082663?s=128&d=identicon&r=PG", "display_name": "luqui", "link": "https://stackoverflow.com/users/33796/luqui"}, "edited": false, "score": 0, "creation_date": 1474925447, "post_id": 39709648, "comment_id": 66723468, "body": "I think of this as largely the aesthetic/artistic aspect of coding -- how general do you make your definitions?  To me, there is a level of generally that &quot;feels right&quot; -- I&#39;d say as general as possible before making things more general becomes unbearably complicated for the problem being solved, where bearability is also a felt sense..."}], "answers": [{"tags": [], "owner": {"reputation": 6694, "user_id": 2555037, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c62b3037add2dde3cb8dd935f7ca9fe7?s=128&d=identicon&r=PG", "display_name": "Toxaris", "link": "https://stackoverflow.com/users/2555037/toxaris"}, "is_accepted": true, "score": 1, "last_activity_date": 1474948405, "creation_date": 1474948405, "answer_id": 39715691, "question_id": 39709648, "link": "https://stackoverflow.com/questions/39709648/higher-order-functions-or-pass-by-reference/39715691#39715691", "title": "Higher Order Functions or pass by reference?", "body": "<p>I think that <strong>by default</strong>, you should hardcode all function calls. In this example, <code>myFunction</code> should just call <code>+++</code>.</p>\n\n<p>However, I know of <strong>three exceptions to this rule</strong>:</p>\n\n<ol>\n<li>Your code becomes clearer by not hardcoding the function call.</li>\n<li>Your code uses the parametric version more than once with different parameters.</li>\n<li>You have reason to believe that future code will use the parametric version more than once with different parameters.</li>\n</ol>\n\n<p>Note that the \"future code\" in point 3 can mean your own code (you plan to add another module next week that uses the parametric version with a different parameter, so you already add the parametric version today) or somebody else's code (you export the parametric version in a library and you guess that the users of the library will want to call the parametric version with different parameters).</p>\n\n<p>While points 1 and 2 are reasonably clear-cut, point 3 requires lots of guesswork about your future needs or the needs of other people. Consequently, there are different schools of thought as to how much your code today should be prepared to meet future needs. I guess that many Haskell programmers end up a bit more on the parametric side of things.</p>\n"}], "owner": {"reputation": 2691, "user_id": 5477287, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/yKMgF.jpg?s=128&g=1", "display_name": "Babra Cunningham", "link": "https://stackoverflow.com/users/5477287/babra-cunningham"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 119, "favorite_count": 0, "accepted_answer_id": 39715691, "answer_count": 1, "score": 0, "last_activity_date": 1474961023, "creation_date": 1474913708, "question_id": 39709648, "link": "https://stackoverflow.com/questions/39709648/higher-order-functions-or-pass-by-reference", "title": "Higher Order Functions or pass by reference?", "body": "<p>I'm confused over when I should be using Higher Order functions over using function references.</p>\n\n<p>Consider the below:</p>\n\n<p>Reference external function:</p>\n\n<pre><code>(+++) :: Int -&gt; Int -&gt; Int\n(+++) a b = a + b\n\nmyFunction :: [Int] -&gt; [Int] -&gt; [Int]\nmyFunction (x : xs) (y : ys) = result : myFunction xs ys\n     where\n       result = x +++ y \n</code></pre>\n\n<p>Pass function as parameter:</p>\n\n<pre><code>(+++) :: Int -&gt; Int -&gt; Int\n(+++) a b = a + b\n\nmyFunction :: [Int] -&gt; [Int] -&gt; (Int -&gt; Int -&gt; Int) -&gt; [Int] \nmyFunction (x : xs) (y : ys) func = result : myFunction xs ys\n    where\n       result = func x y\n</code></pre>\n\n<p>What are the pros/cons of the different approaches?</p>\n\n<p><strong>N.B.I am aware of the Prelude zipWith - this is purely for illustration</strong></p>\n"}, {"tags": ["haskell"], "answers": [{"tags": [], "owner": {"reputation": 2565, "user_id": 1108505, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/a7e091fdb18efecace362189bc5f0bf5?s=128&d=identicon&r=PG", "display_name": "Tanner Swett", "link": "https://stackoverflow.com/users/1108505/tanner-swett"}, "is_accepted": false, "score": 6, "last_activity_date": 1474907561, "creation_date": 1474907561, "answer_id": 39707950, "question_id": 39707890, "link": "https://stackoverflow.com/questions/39707890/haskell-list-of-lists-multiplication/39707950#39707950", "title": "Haskell list of lists multiplication", "body": "<p>Use <code>zipWith</code> twice.</p>\n\n<pre><code>multListt xss yss = zipWith (zipWith (*)) xss yss\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 16405, "user_id": 6776093, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/heFeh.png?s=128&g=1", "display_name": "redneb", "link": "https://stackoverflow.com/users/6776093/redneb"}, "is_accepted": false, "score": 3, "last_activity_date": 1474907577, "creation_date": 1474907577, "answer_id": 39707955, "question_id": 39707890, "link": "https://stackoverflow.com/questions/39707890/haskell-list-of-lists-multiplication/39707955#39707955", "title": "Haskell list of lists multiplication", "body": "<p>You can do using two nested calls to <code>zipWith</code> like this:</p>\n\n<pre><code>zipWith (zipWith (*)) [[1,1,1],[3,4,6],[1,2,3]] [[3,2,2],[3,4,5],[5,4,3]]\n</code></pre>\n\n<p>Or can use parallalel list comprehensions like that:</p>\n\n<pre><code>[zipWith (*) xs ys | xs &lt;- [[1,1,1],[3,4,6],[1,2,3]] | ys &lt;- [[3,2,2],[3,4,5],[5,4,3]]]\n</code></pre>\n\n<p>The last solution requires the <code>ParallelListComp</code> language extension.</p>\n"}], "owner": {"reputation": 155, "user_id": 5862063, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/475941d36d48a7793b89b9ebafba95b8?s=128&d=identicon&r=PG&f=1", "display_name": "JORGE", "link": "https://stackoverflow.com/users/5862063/jorge"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 871, "favorite_count": 0, "answer_count": 2, "score": 0, "last_activity_date": 1474907577, "creation_date": 1474907362, "question_id": 39707890, "link": "https://stackoverflow.com/questions/39707890/haskell-list-of-lists-multiplication", "title": "Haskell list of lists multiplication", "body": "<p>If I have 2 lists of lists in Haskell like the following:</p>\n\n<pre><code>[[1,1,1],[3,4,6],[1,2,3]] [[3,2,2],[3,4,5],[5,4,3]]\n</code></pre>\n\n<p>I must multiply the first lists, second lists, and so on.</p>\n\n<p>The example above should result in</p>\n\n<pre><code>[[3,2,2],[9,16,30],[5,8,9]]\n</code></pre>\n\n<p>This is what I have done:</p>\n\n<pre><code>multListt xss yss = [zipWith (*) xs ys | xs &lt;- xss, ys &lt;- yss]\n</code></pre>\n\n<p>My result is:</p>\n\n<pre><code>[[3,2,2],[3,4,5],[5,4,3],[9,8,12],[9,16,30],[15,16,18],[3,4,6],[3,8,15],\n[5,8,9]]\n</code></pre>\n\n<p>This means that my process takes 1 element of first list and multiplies it by all of the elements in list 2, and so on.</p>\n\n<p>Can you please provide a clue to solve my issue?</p>\n\n<p>Respectfully,<br/>\nJorge Maldonado</p>\n"}, {"tags": ["haskell", "lambda"], "comments": [{"owner": {"reputation": 16405, "user_id": 6776093, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/heFeh.png?s=128&g=1", "display_name": "redneb", "link": "https://stackoverflow.com/users/6776093/redneb"}, "edited": false, "score": 0, "creation_date": 1474905360, "post_id": 39707255, "comment_id": 66712546, "body": "It&#39;s actually a prepend, not an append."}, {"owner": {"reputation": 16233, "user_id": 4253229, "user_type": "registered", "accept_rate": 83, "profile_image": "https://lh4.googleusercontent.com/-e2FAQvlj5CQ/AAAAAAAAAAI/AAAAAAAAAqM/TlSnekirgNE/photo.jpg?sz=128", "display_name": "Eugene Sh.", "link": "https://stackoverflow.com/users/4253229/eugene-sh"}, "edited": false, "score": 2, "creation_date": 1474905502, "post_id": 39707255, "comment_id": 66712640, "body": "That&#39;s the list notation <i>&lt;head : tail&gt;</i>. Not much to do with the lambda."}, {"owner": {"reputation": 61419, "user_id": 849891, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/MbEO3.png?s=128&g=1", "display_name": "Will Ness", "link": "https://stackoverflow.com/users/849891/will-ness"}, "edited": false, "score": 2, "creation_date": 1474905826, "post_id": 39707255, "comment_id": 66712829, "body": "it might be a bit clearer with redundant parentheses, <code>(\\x acc -&gt; if (x &lt; 10) then (x : acc) else acc)</code>."}], "answers": [{"tags": [], "owner": {"reputation": 384463, "user_id": 1126841, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fa05233b2357f8d11c22ef4cfc7bb85c?s=128&d=identicon&r=PG", "display_name": "chepner", "link": "https://stackoverflow.com/users/1126841/chepner"}, "is_accepted": true, "score": 7, "last_activity_date": 1474906406, "creation_date": 1474906406, "answer_id": 39707611, "question_id": 39707255, "link": "https://stackoverflow.com/questions/39707255/colon-in-a-lambda-function/39707611#39707611", "title": "Colon in a lambda function?", "body": "<p><code>:</code> is a data constructor. It prepends a value of type <code>a</code> to an existing (possibly empty) list of type <code>[a]</code>.</p>\n\n<pre><code>let x = 1 : [2,3,4]  -- x == [1,2,3,4]\n</code></pre>\n\n<p>You can picture the list type constructor as being defined like this:</p>\n\n<pre><code>data [] a = [] | a : [] a     -- : as an infix operator\ndata [] a = [] | (:) a ([] a) -- : in prefix positino\n</code></pre>\n\n<p>which might read more easily as</p>\n\n<pre><code>-- [] == List\n-- (:) == Cons\ndata List a = EmptyList | Cons a (List a)\n</code></pre>\n\n<p>By \"recursive action\", I assume you mean you see it being used in a pattern matching situation like</p>\n\n<pre><code>head (a:as) = a\n</code></pre>\n\n<p>This is not unique to <code>(:)</code>; pattern matching can be done with <em>any</em> data constructor.</p>\n"}], "owner": {"reputation": 2691, "user_id": 5477287, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/yKMgF.jpg?s=128&g=1", "display_name": "Babra Cunningham", "link": "https://stackoverflow.com/users/5477287/babra-cunningham"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 235, "favorite_count": 0, "accepted_answer_id": 39707611, "answer_count": 1, "score": 1, "last_activity_date": 1474906406, "creation_date": 1474905227, "last_edit_date": 1474905399, "question_id": 39707255, "link": "https://stackoverflow.com/questions/39707255/colon-in-a-lambda-function", "title": "Colon in a lambda function?", "body": "<p>I don't understand the role of the colon in the following lambda expression:</p>\n\n<pre><code>myFunction :: [Int] -&gt; [Int]\nmyFunction li = foldr (\\x acc -&gt; if x &lt; 10 then x : acc else acc) [last li] li\n</code></pre>\n\n<p>I'm used to seeing the colon for recursive actions, however it looks like this colon is effectively saying <strong>prepend</strong> to current accumulator list, is that right? </p>\n"}, {"tags": ["haskell", "ghc", "type-families"], "comments": [{"owner": {"reputation": 13807, "user_id": 2407038, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/538f6f4a9aa43841841de7d8e8b169fc?s=128&d=identicon&r=PG&f=1", "display_name": "user2407038", "link": "https://stackoverflow.com/users/2407038/user2407038"}, "edited": false, "score": 0, "creation_date": 1474912534, "post_id": 39707115, "comment_id": 66716474, "body": "I thought that <a href=\"https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#constraints-in-kinds\" rel=\"nofollow noreferrer\">this</a> could be done with data families and not type families, but it doesn&#39;t even work with data families - you can declare such a data family but attempting to declare any instances causes an error."}, {"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "reply_to_user": {"reputation": 13807, "user_id": 2407038, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/538f6f4a9aa43841841de7d8e8b169fc?s=128&d=identicon&r=PG&f=1", "display_name": "user2407038", "link": "https://stackoverflow.com/users/2407038/user2407038"}, "edited": false, "score": 0, "creation_date": 1474913215, "post_id": 39707115, "comment_id": 66716847, "body": "@user2407038 I&#39;m not sure I understand - the example obviously works with type families (as the link you&#39;ve given says), and I can also get it to work with data families, but I don&#39;t see the benefit. (<code>data family T :: a -&gt; *; data instance T 42 = MkNat; data instance T &quot;Don&#39;t panic!&quot; = MkSymbol</code>)"}, {"owner": {"reputation": 13807, "user_id": 2407038, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/538f6f4a9aa43841841de7d8e8b169fc?s=128&d=identicon&r=PG&f=1", "display_name": "user2407038", "link": "https://stackoverflow.com/users/2407038/user2407038"}, "edited": false, "score": 1, "creation_date": 1474915687, "post_id": 39707115, "comment_id": 66718225, "body": "Those are different type altogether; the example in the user guide is about the equality constraint (<code>IsTypeLit a ~ True</code>) in the <i>type</i> constructor (not value constructor). You cannot have any constraints on the types of a type family, and you can declare <code>data family T :: forall a. (IsTypeLit a ~ &#39;True) =&gt; a -&gt; *</code> but never any instances of <code>T</code>."}, {"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 1, "creation_date": 1474944796, "post_id": 39707115, "comment_id": 66728371, "body": "I suspect the best way to find something data families can do and type families can&#39;t is to dig into why type families can be promoted with <code>TypeInType</code> but data families can&#39;t."}], "answers": [{"comments": [{"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 0, "creation_date": 1474939631, "post_id": 39714614, "comment_id": 66727308, "body": "Thank you, this is a very interesting example (in fact I&#39;d love to see where you ended up with these ideas)! That said, I&#39;m still not sure I see from a technical perspective why <code>Ref</code> could not have been a type family (presumably, although not necessarily) with a new <code>data</code> or <code>newtype</code> for every instance."}, {"owner": {"reputation": 24028, "user_id": 383200, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/a9dc722f936cb1059adaae4fe39c07f0?s=128&d=identicon&r=PG", "display_name": "Carl", "link": "https://stackoverflow.com/users/383200/carl"}, "reply_to_user": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 0, "creation_date": 1474939965, "post_id": 39714614, "comment_id": 66727386, "body": "At some level, there&#39;s no difference between a data family and a regular type family, except that the data types pointed to by the data family have no other names.  It&#39;s not like you can do GADT-like pattern matching on constructors from different data instances, or something.  Sometimes, you just want to enforce that the data family name is the only name for the type, though."}, {"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 0, "creation_date": 1474946146, "post_id": 39714614, "comment_id": 66728643, "body": "Well that &#39;s sort of the point of this question - I&#39;m not so sure that there is no other difference between data families and type families + data/newtype declarations. I suspect there is something more here than meets the eye."}], "tags": [], "owner": {"reputation": 24028, "user_id": 383200, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/a9dc722f936cb1059adaae4fe39c07f0?s=128&d=identicon&r=PG", "display_name": "Carl", "link": "https://stackoverflow.com/users/383200/carl"}, "is_accepted": false, "score": 5, "last_activity_date": 1474938732, "creation_date": 1474938732, "answer_id": 39714614, "question_id": 39707115, "link": "https://stackoverflow.com/questions/39707115/data-families-vs-injective-type-families/39714614#39714614", "title": "Data families vs Injective type families", "body": "<p>You're missing one other detail - data families create new types.  Type families can only refer to other types.  In particular, every instance of a data family declares new constructors.  And it's nicely generic.  You can create a data instance with <code>newtype instance</code> if you want newtype semantics.  Your instance can be a record.  It can have multiple constructors.  It can even be a GADT if you want.</p>\n\n<p>It's exactly the difference between the <code>type</code> and <code>data</code>/<code>newtype</code> keywords. Injective type families don't give you new types, rendering them useless in the case where you need that.</p>\n\n<p>I understand where you're coming from.  I had this same issue with the difference initially.  Then I finally ran into a use case where they're useful, even without a type class getting involved.</p>\n\n<p>I wanted to write an api for dealing with mutable cells in a few different contexts, without using classes. I knew I wanted to do it with a free monad with interpreters in <code>IO</code>, <code>ST</code>, and maybe some horrible hacks with <code>unsafeCoerce</code> to even go so far as shoehorning it into <code>State</code>.  This wasn't for any practical purpose, of course - I was just exploring API designs.</p>\n\n<p>So I had something like this:</p>\n\n<pre><code>data MutableEnv (s :: k) a ...\n\nnewRef :: a -&gt; MutableEnv s (Ref s a)\nreadRef :: Ref s a -&gt; MutableEnv s a\nwriteRef :: Ref s a -&gt; a -&gt; MutableEnv s ()\n</code></pre>\n\n<p>The definition of <code>MutableEnv</code> wasn't important.  Just standard free/operational monad stuff with constructors matching the three functions in the api.</p>\n\n<p>But I was stuck on what to define Ref as.  I didn't want some sort of class, I wanted it to be a concrete type as far as the type system was concerned.</p>\n\n<p>Then late one night I was out for a walk and it hit me - what I essentially want is a type whose constructors are indexed by an argument type.  But it had to be open, unlike a GADT - new interpreters could be added at will.  And then it hit me.  That's exactly what a data family is.  An open, type-indexed family of data values.  I could complete the api with just the following:</p>\n\n<pre><code>data family Ref (s :: k) :: * -&gt; *\n</code></pre>\n\n<p>Then, dealing with the underlying representation for a Ref was no big deal.  Just create a data instance (or newtype instance, more likely) whenever an interpreter for <code>MutableEnv</code> is defined.</p>\n\n<p>This exact example isn't really useful.  But it clearly illustrates something data families can do that injective type families can't.</p>\n"}, {"comments": [{"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 0, "creation_date": 1474949266, "post_id": 39715512, "comment_id": 66729429, "body": "Aha! This is the piece I was missing. Thank you so much - this actually ends up bridging together a lot of confusion I&#39;ve been having about generativity (and &quot;matchability&quot; in Richard Eisenberg&#39;s thesis)."}], "tags": [], "owner": {"reputation": 14485, "user_id": 190376, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cd8280c5e1491b8cf55760750ed97dec?s=128&d=identicon&r=PG", "display_name": "Reid Barton", "link": "https://stackoverflow.com/users/190376/reid-barton"}, "is_accepted": true, "score": 18, "last_activity_date": 1474946906, "creation_date": 1474946906, "answer_id": 39715512, "question_id": 39707115, "link": "https://stackoverflow.com/questions/39707115/data-families-vs-injective-type-families/39715512#39715512", "title": "Data families vs Injective type families", "body": "<pre><code>type family T a = r | r -&gt; a\ndata family D a\n</code></pre>\n\n<p>An injective type family <code>T</code> satisfies the injectivity axiom</p>\n\n<blockquote>\n  <p>if <code>T a ~ T b</code> then <code>a ~ b</code></p>\n</blockquote>\n\n<p>But a data family satisfies the much stronger generativity axiom</p>\n\n<blockquote>\n  <p>if <code>D a ~ g b</code> then <code>D ~ g</code> and <code>a ~ b</code></p>\n</blockquote>\n\n<p>(If you like: Because the instances of <code>D</code> define new types that are different from any existing types.)</p>\n\n<p>In fact <code>D</code> itself is a legitimate type in the type system, unlike a type family like <code>T</code>, which can only ever appear in a fully saturated application like <code>T a</code>. This means</p>\n\n<ul>\n<li><p><code>D</code> can be the argument to another type constructor, like <code>MaybeT D</code>. (<code>MaybeT T</code> is illegal.)</p></li>\n<li><p>You can define instances for <code>D</code>, like <code>instance Functor D</code>. (You can't define instances for a type family <code>Functor T</code>, and it would be unusable anyway because instance selection for, e.g., <code>map :: Functor f =&gt; (a -&gt; b) -&gt; f a -&gt; f b</code> relies on the fact that from the type <code>f a</code> you can determine both <code>f</code> and <code>a</code>; for this to work <code>f</code> cannot be allowed to vary over type families, even injective ones.)</p></li>\n</ul>\n"}, {"tags": [], "owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "is_accepted": false, "score": 3, "last_activity_date": 1474951102, "last_edit_date": 1495539931, "creation_date": 1474951102, "answer_id": 39716064, "question_id": 39707115, "link": "https://stackoverflow.com/questions/39707115/data-families-vs-injective-type-families/39716064#39716064", "title": "Data families vs Injective type families", "body": "<p>The <a href=\"https://stackoverflow.com/a/39715512/3072788\">answer by Reid Barton</a> explains the distinction between my two examples perfectly. It has reminded me of something I read in Richard Eisenberg's <a href=\"http://cs.brynmawr.edu/~rae/papers/2016/thesis/eisenberg-thesis-draft.pdf\" rel=\"nofollow noreferrer\">thesis</a> about adding dependent types to Haskell and I thought that since the heart of this question is injectivity and generativity, it would be worth mentioning how <code>DependentHaskell</code> will deal with this (when it eventually gets implemented, and if the quantifiers proposed now are the ones eventually implemented).</p>\n\n<p>What follows is based on pages 56 and 57 (4.3.4 Matchability) of the aforementioned <a href=\"http://cs.brynmawr.edu/~rae/papers/2016/thesis/eisenberg-thesis-draft.pdf\" rel=\"nofollow noreferrer\">thesis</a>:</p>\n\n<blockquote>\n  <p><strong>Definition</strong> (Generativity)<strong>.</strong>  <em>If <code>f</code> and <code>g</code> are generative, then <code>f a ~ g b</code> implies <code>f ~ g</code></em></p>\n  \n  <p><strong>Definition</strong> (Injectivity)<strong>.</strong>  <em>If <code>f</code> is injective, then <code>f a ~ f b</code> implies <code>a ~ b</code></em></p>\n  \n  <p><strong>Definition</strong> (Matchability)<strong>.</strong> <em>A function <code>f</code> is matchable iff it is generative and injective</em></p>\n</blockquote>\n\n<p>In Haskell as we know it now (8.0.1) the matchable (type-level) functions consist exactly of newtype, data, and data family type constructors. In the future, under <code>DependentHaskell</code>, one of the new quantifiers we will get will be <code>'-&gt;</code> and this will be used to denote matchable functions. In other words, there will be a way to inform the compiler a type-level function is generative (which currently can only be done by making sure that function is a type constructor).</p>\n"}], "owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1776, "favorite_count": 10, "accepted_answer_id": 39715512, "answer_count": 3, "score": 20, "last_activity_date": 1474951102, "creation_date": 1474904804, "last_edit_date": 1495542259, "question_id": 39707115, "link": "https://stackoverflow.com/questions/39707115/data-families-vs-injective-type-families", "title": "Data families vs Injective type families", "body": "<p>Now that we have injective type families, is there any remaining use case for using data families over type families?</p>\n\n<p>Looking at past StackOverflow questions about data families, there is <a href=\"https://stackoverflow.com/questions/20870432/type-family-vs-data-family-in-brief-haskell\">this question</a> from a couple years ago discussing the difference between type families and data families, and <a href=\"https://stackoverflow.com/a/14196921/3072788\">this answer</a> about use cases of data families. Both say that the injectivity of data families is their greatest strength.</p>\n\n<p>Looking at the <a href=\"https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#data-families\" rel=\"noreferrer\">docs on data families</a>, I see reason not to rewrite all uses of data families using <a href=\"https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#injective-type-families\" rel=\"noreferrer\">injective type families</a>.</p>\n\n<p>For example, say I have a data family (I've merged some examples from the docs to try to squeeze in all the features of data families)</p>\n\n<pre><code>data family G a b\ndata instance G Int Bool = G11 Int | G12 Bool deriving (Eq)\nnewtype instance G () a = G21 a\ndata instance G [a] b where\n   G31 :: c -&gt; G [Int] b\n   G32 :: G [a] Bool\n</code></pre>\n\n<p>I might as well rewrite it as</p>\n\n<pre><code>type family G a b = g | g -&gt; a b\ntype instance G Int Bool = G_Int_Bool\ntype instance G () a = G_Unit_a a\ntype instance G [a] b = G_lal_b a b\n\ndata G_Int_Bool = G11 Int | G12 Bool  deriving (Eq)\nnewtype G_Unit_a a = G21 a\ndata G_lal_b a b where\n   G31 :: c -&gt; G_lal_b [Int] b\n   G32 :: G_lal_b [a] Bool\n</code></pre>\n\n<p>It goes without saying that associated instances for data families correspond to associated instances with type families in the same way. Then is the only remaining difference that we have less things in the type-namespace?</p>\n\n<p>As a followup, is there any benefit to having less things in the type-namespace? All I can think of is that this will become debugging hell for someone playing with this on <code>ghci</code> - the types of the constructors all seem to indicate that the constructors are all under one GADT...</p>\n"}, {"tags": ["haskell", "typeclass", "overlap", "type-families"], "comments": [{"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 0, "creation_date": 1474903912, "post_id": 39704799, "comment_id": 66711627, "body": "<a href=\"https://hackage.haskell.org/package/mtl-2.2.1/docs/src/Control-Monad-State-Class.html#state\" rel=\"nofollow noreferrer\">There is a similar problem in <code>mtl</code> with a bunch of instances that are just itching to be grouped together and have <i>exactly</i> the same code.</a> If Edward Kmett hasn&#39;t found a nicer way to do this, I don&#39;t expect to either..."}, {"owner": {"reputation": 9772, "user_id": 3963, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/9pDQ8.png?s=128&g=1", "display_name": "hao", "link": "https://stackoverflow.com/users/3963/hao"}, "edited": false, "score": 0, "creation_date": 1474906700, "post_id": 39704799, "comment_id": 66713324, "body": "This doesn&#39;t address the main question, but as to why Haskell compilers only look at the head for instance resolution, see Kmett&#39;s comments about the open-world assumption and compiler progress in <a href=\"https://www.reddit.com/r/haskell/comments/4mrgeb/how_do_you_avoid_repeating_mtlstyle_instances/\" rel=\"nofollow noreferrer\">reddit.com/r/haskell/comments/4mrgeb/&hellip;</a>"}], "answers": [{"comments": [{"owner": {"reputation": 2231, "user_id": 1027321, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/KkFZC.jpg?s=128&g=1", "display_name": "jakubdaniel", "link": "https://stackoverflow.com/users/1027321/jakubdaniel"}, "edited": false, "score": 0, "creation_date": 1474960449, "post_id": 39710117, "comment_id": 66734076, "body": "thanks, this looks it might do what i need, except <code>MyClass</code> already defines some default implementations of various functions (which I forgot to mention), I am not sure how to keep those... while still having defaults for the default signature"}, {"owner": {"reputation": 2231, "user_id": 1027321, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/KkFZC.jpg?s=128&g=1", "display_name": "jakubdaniel", "link": "https://stackoverflow.com/users/1027321/jakubdaniel"}, "edited": false, "score": 0, "creation_date": 1474963445, "post_id": 39710117, "comment_id": 66736050, "body": "Also I think it does not resolve my problem, I should have made it clearer though. Some of my &quot;reasonable instances&quot; are also transformers which define their own <code>MyType</code> synonyms (such as <code>type MyType1 (MyCoolTrans m) = [MyType1 m]</code>) ... with this approach I run into <code>Couldn&#39;t match type &#39;MyType1 m&#39; with &#39;[MyType1 m]&#39;</code> with the (non-default) instance for <code>MyCoolTrans m</code>"}, {"owner": {"reputation": 13807, "user_id": 2407038, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/538f6f4a9aa43841841de7d8e8b169fc?s=128&d=identicon&r=PG&f=1", "display_name": "user2407038", "link": "https://stackoverflow.com/users/2407038/user2407038"}, "reply_to_user": {"reputation": 2231, "user_id": 1027321, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/KkFZC.jpg?s=128&g=1", "display_name": "jakubdaniel", "link": "https://stackoverflow.com/users/1027321/jakubdaniel"}, "edited": false, "score": 0, "creation_date": 1474977114, "post_id": 39710117, "comment_id": 66745226, "body": "Set a default for <code>UseDef</code> which selects the &#39;default&#39; default (so to speak) and place a constraint like <code>UseDef m ~ &quot;..&quot;</code> in the existing defaults. (Unless you mean default function implementations, but no default signatures - in which case you don&#39;t have to do anything special, it will just work). There isn&#39;t nearly enough information to tell what causes the error, but it isn&#39;t inherent to the design, simply a programmer error - there is nothing about this approach which would prevent you from declaring such an instance."}], "tags": [], "owner": {"reputation": 13807, "user_id": 2407038, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/538f6f4a9aa43841841de7d8e8b169fc?s=128&d=identicon&r=PG&f=1", "display_name": "user2407038", "link": "https://stackoverflow.com/users/2407038/user2407038"}, "is_accepted": false, "score": 2, "last_activity_date": 1474915397, "creation_date": 1474915397, "answer_id": 39710117, "question_id": 39704799, "link": "https://stackoverflow.com/questions/39704799/resolving-overlap-of-instances-with-type-families/39710117#39710117", "title": "Resolving overlap of instances with type families", "body": "<p>You could use <code>DefaultSignatures</code>, which is supposed to solve exactly this problem: </p>\n\n<pre><code>class Monad m =&gt; MyClass m where\n\n  type MyType m :: * \n  type MyType m = MyTypeDef m \n\n  val :: m (MyType m)\n  default val :: (MyClassDef m) =&gt; m (MyTypeDef m) \n  val = defVal \n</code></pre>\n\n<p>The variants of <code>MyClass</code>, <code>MyType</code> are just a copy of the above, essentially:</p>\n\n<pre><code>class MyClassDef m where \n  type MyTypeDef m :: * \n  defVal :: m (MyTypeDef m)\n\ninstance \n  (MonadTrans t, Monad n, MyClass n\n  ) =&gt; MyClassDef (t (n :: * -&gt; *)) where \n  type MyTypeDef (t n) = MyType n \n  defVal = lift val \n</code></pre>\n\n<p>Note that an instance is only really needed to cleanly pattern match on the <code>t n</code> constructor. Overlap isn't an issue, because this will only be used in default signatures.</p>\n\n<p>Then your instances are simply:</p>\n\n<pre><code>instance (MyClass m) =&gt; MyClass (ReaderT r m)  \ninstance (MyClass m, Monoid r) =&gt; MyClass (WriterT r m)  \ninstance (MyClass m) =&gt; MyClass (StateT r m)  \n</code></pre>\n\n<p>Of course it may be desirable to have multiple options for a default implementation, but this isn't much harder than the above - you simply add another type to the class:</p>\n\n<pre><code>class MyClassDef (ix :: Symbol) m where \n  type MyTypeDef ix m :: * \n  defVal :: m (MyTypeDef ix m)\n\ninstance \n  (MonadTrans t, Monad n, MyClass n\n  ) =&gt; MyClassDef \"Monad Transformer\" (t (n :: * -&gt; *)) where \n  type MyTypeDef \"Monad Transformer\" (t n) = MyType n \n  defVal = lift val \n</code></pre>\n\n<p>Note that <code>ix</code> is ambiguous in <code>defVal</code>, but I'll use <code>TypeApplications</code> to get around it. You can accomplish the same with <code>Proxy</code>. </p>\n\n<p>The additional parameter is determined when you write the instance, and assuming you don't use overlapping instances (which you shouldn't if you want good type inference, esp. if you want type inference to work with other mtl-style libraries) you can just add it as an associated type:</p>\n\n<pre><code>class Monad m =&gt; MyClass m where\n  type UseDef m :: Symbol \n\n  type MyType m :: * \n  type MyType m = MyTypeDef (UseDef m) m \n\n  val :: m (MyType m)\n  default val :: (MyClassDef (UseDef m) m) =&gt; m (MyTypeDef (UseDef m) m) \n  val = defVal @(UseDef m) \n</code></pre>\n\n<p>If you forget to implement <code>UseDef</code>, you will get an error like:</p>\n\n<pre><code>* Could not deduce (MyClassDef (UseDef (StateT r m)) (StateT r m))\n    arising from a use of `Main.$dmval'\n</code></pre>\n\n<p>but you can provide your own custom error for a missing default if you want:</p>\n\n<pre><code>instance (TypeError (Text (\"No default selected\"))) =&gt; MyClassDef \"\" m\n\nclass Monad m =&gt; MyClass m where\n  type UseDef m :: Symbol \n  type UseDef m = \"\"\n</code></pre>\n\n<p>and if you implement all the methods and types, you get no error, as <code>UseDef</code> isn't used anywhere - only in an instantiated default signature, which won't even exist if the implementation is given. </p>\n\n<p>Your instances incur the cost of an additional line of boilerplate, but it isn't much (esp. with copy-paste):</p>\n\n<pre><code>instance (MyClass m) =&gt; MyClass (ReaderT r m) where \n  type UseDef (ReaderT r m) = \"Monad Transformer\" \n\ninstance (MyClass m, Monoid r) =&gt; MyClass (WriterT r m) where \n  type UseDef (WriterT r m) = \"Monad Transformer\" \n\ninstance (MyClass m) =&gt; MyClass (StateT r m) where \n  type UseDef (StateT r m) = \"Monad Transformer\" \n</code></pre>\n\n<p>Note that you do have to supply the required contexts for each instance.</p>\n\n<hr>\n\n<p>Note that all this is really necessary if you only care about avoiding overlapping instances. If you don't, then use the simple solution and just write </p>\n\n<pre><code>instance {-# OVERLAPS #-} (AutoLiftMyClass a, MyClass m) =&gt; MyClass (a m)\n</code></pre>\n\n<p>or turn on <code>OverlappingInstances</code>. </p>\n"}], "owner": {"reputation": 2231, "user_id": 1027321, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/KkFZC.jpg?s=128&g=1", "display_name": "jakubdaniel", "link": "https://stackoverflow.com/users/1027321/jakubdaniel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 195, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1474917030, "creation_date": 1474897998, "last_edit_date": 1474917030, "question_id": 39704799, "link": "https://stackoverflow.com/questions/39704799/resolving-overlap-of-instances-with-type-families", "title": "Resolving overlap of instances with type families", "body": "<p>I have a class</p>\n\n<pre><code>class Monad m =&gt; MyClass m where\n    type MyType1 m\n    type MyType2 m\n    ...\n\n    a :: m (MyType1 m)\n    b :: m (MyType2 m)\n    c :: m (MyType3 m)\n    ...\n</code></pre>\n\n<p>and I also have bunch of instances that implement the functions (<code>a</code> ... ) reasonably</p>\n\n<pre><code>instance MyClass A where\n    type MyType1 A = Int\n    ...\n\n    a = ...\n    ...\n\ninstance MyClass (B a) where\n    type MyType1 (B a) = Char\n    ...\n\n    a = ...\n    ...\n\n...\n</code></pre>\n\n<p>but I also have a lot of instances that don't do anything useful apart from lifting the implementation through transformers:</p>\n\n<pre><code> instance MyClass m =&gt; MyClass (MyTransA m)\n    type MyType1 (MyTransA m) = MyType1 m\n    ...\n\n    a = lift a\n    ...\n\n instance MyClass m =&gt; MyClass (MyTransB m)\n    type MyType1 (MyTransB m) = MyType1 m\n    ...\n\n    a = lift a\n    ...\n\n ...\n</code></pre>\n\n<p>and this turns out to be a lot of boilerplate to write, so I wanted to replace these repetitive uninteresting instances with simply</p>\n\n<pre><code>class MonadTrans t =&gt; AutoLiftMyClass t\n\ninstance (AutoLiftMyClass a, MyClass m) =&gt; MyClass (a m)\n    type MyType1 (a m) = MyType1 m\n    ...\n\n    a = lift a\n    ...\n</code></pre>\n\n<p>which would allow me to write only</p>\n\n<pre><code>instance AutoLiftMyClass MyTransA\ninstance AutoLiftMyClass MyTransB\n...\n</code></pre>\n\n<p>to get the lifting for free, avoiding the enumeration of all the lifted <code>a</code>, <code>b</code>, ... for every <code>MyTransA</code>, <code>MyTransB</code>, ...</p>\n\n<p>The problem is that for whatever reason (I really don't know why) GHC considers only the RHS of instance declarations, thus my <code>AutoLiftMyClass</code> collides on type family instances for <code>MyType1</code>, ... with all the reasonable instances <code>A</code>, <code>B</code>, ... (those that don't declare an instance of <code>AutoLiftMyClass</code>)</p>\n\n<p>I have seen some posts and articles on wiki about closed type families but they do not make much sense to me. Is there any way how to make this idea work?</p>\n"}, {"tags": ["haskell", "monads"], "comments": [{"owner": {"reputation": 4039, "user_id": 667147, "user_type": "registered", "accept_rate": 72, "profile_image": "https://i.stack.imgur.com/1iNND.png?s=128&g=1", "display_name": "jarandaf", "link": "https://stackoverflow.com/users/667147/jarandaf"}, "edited": false, "score": 3, "creation_date": 1474884809, "post_id": 39700015, "comment_id": 66698440, "body": "Hint: use ghci <code>:t</code> command and find out yourself :-) i.e. <code>:t do 0</code> or <code>:t do return 0</code> have different types. In the end <code>do</code> is syntactic sugar, see <a href=\"https://en.wikibooks.org/wiki/Haskell/do_notation\" rel=\"nofollow noreferrer\">en.wikibooks.org/wiki/Haskell/do_notation</a>"}, {"owner": {"reputation": 5911, "user_id": 1688785, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/07b2da937aa23792045dff6ff19556eb?s=128&d=identicon&r=PG", "display_name": "Caramiriel", "link": "https://stackoverflow.com/users/1688785/caramiriel"}, "edited": false, "score": 0, "creation_date": 1474884821, "post_id": 39700015, "comment_id": 66698447, "body": "Related: <a href=\"http://stackoverflow.com/questions/11323300/using-return-vs-not-using-return-in-the-list-monad\" title=\"using return vs not using return in the list monad\">stackoverflow.com/questions/11323300/&hellip;</a>"}, {"owner": {"reputation": 3967, "user_id": 3853711, "user_type": "registered", "accept_rate": 63, "profile_image": "https://i.stack.imgur.com/SwXly.png?s=128&g=1", "display_name": "Rahn", "link": "https://stackoverflow.com/users/3853711/rahn"}, "reply_to_user": {"reputation": 4039, "user_id": 667147, "user_type": "registered", "accept_rate": 72, "profile_image": "https://i.stack.imgur.com/1iNND.png?s=128&g=1", "display_name": "jarandaf", "link": "https://stackoverflow.com/users/667147/jarandaf"}, "edited": false, "score": 0, "creation_date": 1474884960, "post_id": 39700015, "comment_id": 66698552, "body": "@jarandaf <code>do return 0 :: (Num a, Monad m) =&gt; m a</code>, where does <code>m</code> gone?"}], "answers": [{"tags": [], "owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "is_accepted": true, "score": 19, "last_activity_date": 1474886123, "creation_date": 1474886123, "answer_id": 39700580, "question_id": 39700015, "link": "https://stackoverflow.com/questions/39700015/when-do-do-x-and-do-return-x-evaluate-differently/39700580#39700580", "title": "When do [do x] and [do return x] evaluate differently?", "body": "<p><code>do</code> on a single expression accomplishes nothing whatsoever: it's just a syntactic herald indicating that you <em>could</em> use action sequencing here (which would require a monad), but if you don't do that then it has just the same effect as wrapping an expression in layers of redundant parentheses.</p>\n\n<p>So your example session is equivalent to this:</p>\n\n<pre><code>Prelude&gt; 0\n0\nPrelude&gt; return 0\n0\nPrelude&gt; Just 0\nJust 0\nPrelude&gt; return (Just 0)\nJust 0\nPrelude&gt; Nothing\nNothing\nPrelude&gt; return Nothing\nNothing\n</code></pre>\n\n<p>Now the question is <em>why does <code>return</code> not accomplish anything here</em>. Well, actually it does, you just don't see it because GHCi is hiding implementation details. GHCi has two fundamentally different modes of interactive evaluation:</p>\n\n<ol>\n<li><code>IO</code> actions are <em>executed</em>, then the result <a href=\"http://hackage.haskell.org/package/base-4.9.0.0/docs/Prelude.html#v:print\"><code>print</code></a>ed.</li>\n<li>Everything else is <code>print</code>ed as it is.</li>\n</ol>\n\n<p>Crucially, GHCi tries rather hard to interpret everything as an <code>IO</code> action before proceeding with 2. So if you give it an ambiguous expression like <code>return 0</code>, it notices that one possible instantiation is <code>IO Integer</code>. It immediately defaults to that, executes this side-effect free action and all you see in the result is thus <code>0</code>. This only happens for <code>IO</code> though, not for any other monads:</p>\n\n<pre><code>Prelude&gt; return 0 :: IO Integer\n0\nPrelude&gt; return 0 :: Maybe Integer\nJust 0\nPrelude&gt; return 0 :: [] Integer\n[0]\n</code></pre>\n\n<p>GHCi just happens to default to <code>IO</code> when the monad in ambiguous, but that wouldn't happen otherwise in Haskell as such.</p>\n"}, {"comments": [{"owner": {"reputation": 13807, "user_id": 2407038, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/538f6f4a9aa43841841de7d8e8b169fc?s=128&d=identicon&r=PG&f=1", "display_name": "user2407038", "link": "https://stackoverflow.com/users/2407038/user2407038"}, "edited": false, "score": 1, "creation_date": 1474892440, "post_id": 39702595, "comment_id": 66703494, "body": "Strictly speaking this is an answer to the converse: &quot;when do .. and .. evaluate the <i>same</i>?&quot;"}], "tags": [], "owner": {"reputation": 607, "user_id": 2436412, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/07531356cc096dc9551e1ac5983f651d?s=128&d=identicon&r=PG", "display_name": "Heimdell", "link": "https://stackoverflow.com/users/2436412/heimdell"}, "is_accepted": false, "score": -1, "last_activity_date": 1474892252, "creation_date": 1474892252, "answer_id": 39702595, "question_id": 39700015, "link": "https://stackoverflow.com/questions/39700015/when-do-do-x-and-do-return-x-evaluate-differently/39702595#39702595", "title": "When do [do x] and [do return x] evaluate differently?", "body": "<p>Good answer: never, Since <code>return :: Monad m =&gt; a -&gt; m a</code> takes an object and puts it into a box.</p>\n\n<p>Right, but unusable answer: when the x is a fixpoint of <code>return</code> from given monad.</p>\n"}], "owner": {"reputation": 3967, "user_id": 3853711, "user_type": "registered", "accept_rate": 63, "profile_image": "https://i.stack.imgur.com/SwXly.png?s=128&g=1", "display_name": "Rahn", "link": "https://stackoverflow.com/users/3853711/rahn"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 196, "favorite_count": 0, "accepted_answer_id": 39700580, "answer_count": 2, "score": 5, "last_activity_date": 1474892252, "creation_date": 1474884513, "last_edit_date": 1495541957, "question_id": 39700015, "link": "https://stackoverflow.com/questions/39700015/when-do-do-x-and-do-return-x-evaluate-differently", "title": "When do [do x] and [do return x] evaluate differently?", "body": "<pre><code>*Main&gt; do 0\n</code></pre>\n\n<blockquote>\n  <p>0</p>\n</blockquote>\n\n<pre><code>*Main&gt; do return 0\n</code></pre>\n\n<blockquote>\n  <p>0</p>\n</blockquote>\n\n<pre><code>*Main&gt; do (Just 0)\n</code></pre>\n\n<blockquote>\n  <p>Just 0</p>\n</blockquote>\n\n<pre><code>*Main&gt; do return (Just 0)\n</code></pre>\n\n<blockquote>\n  <p>Just 0</p>\n</blockquote>\n\n<pre><code>*Main&gt; do Nothing\n</code></pre>\n\n<blockquote>\n  <p>Nothing</p>\n</blockquote>\n\n<pre><code>*Main&gt; do return Nothing\n</code></pre>\n\n<blockquote>\n  <p>Nothing</p>\n</blockquote>\n\n<pre><code>bareDo :: a -&gt; a\nbareDo x = do x\n\ndoReturn :: Monad m =&gt; a -&gt; m a\ndoReturn x = do return x\n</code></pre>\n\n<p>Why would <code>do x</code> and <code>do return x</code> evaluate the same, and when would they don't?</p>\n\n<p>I'm trying to understand <code>Monad</code>, it has been enough tutorial and <a href=\"https://stackoverflow.com/questions/44965/what-is-a-monad\">discussion</a> there yet I couldn't figure it out.</p>\n\n<p>That is even an <a href=\"http://dev.stephendiehl.com/hask/#monads\" rel=\"nofollow noreferrer\">post</a> writing</p>\n\n<blockquote>\n  <p>Don't read the monad tutorials.</p>\n</blockquote>\n\n<p>So, I guess getting my hand dirty might help.</p>\n\n<p>I really appreciate whoever help me out of here (I mean <code>do</code> and <code>return</code>, not <code>Monad</code>. I know that would take some days).</p>\n"}, {"tags": ["haskell"], "answers": [{"comments": [{"owner": {"reputation": 13807, "user_id": 2407038, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/538f6f4a9aa43841841de7d8e8b169fc?s=128&d=identicon&r=PG&f=1", "display_name": "user2407038", "link": "https://stackoverflow.com/users/2407038/user2407038"}, "edited": false, "score": 0, "creation_date": 1474892654, "post_id": 39693004, "comment_id": 66703656, "body": "If you could derive <code>Generic</code> for an abstract type, you would be able to trivially break any abstraction barriers, so the compiler strictly prohibits it."}], "tags": [], "owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "is_accepted": true, "score": 3, "last_activity_date": 1474852244, "last_edit_date": 1474852244, "creation_date": 1474847998, "answer_id": 39693004, "question_id": 39692772, "link": "https://stackoverflow.com/questions/39692772/instance-binary-of-psqueue/39693004#39693004", "title": "Instance Binary of PSQueue", "body": "<p>You unfortunately will need to actually write your own <code>Binary</code> instance for this. On the plus side, that is pretty easy in this case:</p>\n\n<pre><code>import Data.Binary (put, get)\nimport Data.PSQueue (toAscList, fromAscList, (:-&gt;))\n\ninstance (Binary a, Binary b, Ord a, Ord b) =&gt; Binary (PSQ a b) where\n  put = put . fmap (\\(k :-&gt; v) -&gt; (k,v)) . toAscList \n  get = fromAscList . fmap (\\(k,v) -&gt; k :-&gt; v) &lt;$&gt; get\n</code></pre>\n\n<p>All this does is convert the priority queue to an ascending list of key-value tuples before/after converting it to/from binary.</p>\n\n<h2>Why can't GHC do the work for me?</h2>\n\n<p>For GHC to work its magic of deriving the right <code>Binary</code> instance for you, it relies on a special class called <a href=\"https://hackage.haskell.org/package/base-4.9.0.0/docs/GHC-Generics.html#t:Generic\" rel=\"nofollow\"><code>Generic</code></a> that supplies high level information about the data contained in the different constructors. This class is derived (like <code>Read</code>, <code>Show</code>, <code>Eq</code>, etc.) with the <a href=\"https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#ghc-flag--XDeriveGeneric\" rel=\"nofollow\"><code>DeriveGeneric</code></a> flag enabled. However, since <code>PSQ</code> does <em>not</em> derive <code>Generic</code>, we might be stuck.</p>\n\n<p>Normally though, there is another trick we can pull: enabling <a href=\"https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#stand-alone-deriving-declarations\" rel=\"nofollow\"><code>StandaloneDeriving</code></a> lets us derive as usual, but seperately from the <code>data</code> definition:</p>\n\n<pre><code>deriving instance (Generic (PSQ k v))\n</code></pre>\n\n<p>But that does require that the constructors of <code>PSQ k v</code> be public (which they are not in this case), so we really can do nothing to derive <code>Generic (PSQ k v)</code>. At this point, it is so much simpler to simply write the instance.</p>\n"}], "owner": {"reputation": 417, "user_id": 6119326, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2272c3c353d86eb717ca0ceed6ad7ee6?s=128&d=identicon&r=PG&f=1", "display_name": "Karl", "link": "https://stackoverflow.com/users/6119326/karl"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 61, "favorite_count": 0, "accepted_answer_id": 39693004, "answer_count": 1, "score": 0, "last_activity_date": 1474852244, "creation_date": 1474845895, "question_id": 39692772, "link": "https://stackoverflow.com/questions/39692772/instance-binary-of-psqueue", "title": "Instance Binary of PSQueue", "body": "<p>I have want to make a Binary instance for a Priority Sorted Queue from containers. I am using lts-7.0</p>\n\n<p>If Test.hs is</p>\n\n<pre><code>import Data.Binary\nimport Data.PSQueue\n\ninstance Binary a =&gt; Binary (PSQ a Int)\n</code></pre>\n\n<p>running</p>\n\n<pre><code>stack ghci\n:set -XFlexibleInstances\n:load Test.hs\n</code></pre>\n\n<p>results in confusing error messages.</p>\n\n<pre><code>~&gt; :load Test.hs \n[1 of 1] Compiling Main             ( Test.hs, interpreted )\n\nTest.hs:4:10: warning: [-Wdeferred-type-errors]\n    \u2022 Could not deduce (GHC.Generics.Generic (PSQ a Int))\n        arising from a use of \u2018binary-0.8.3.0:Data.Binary.Class.$dmput\u2019\n      from the context: Binary a\n        bound by the instance declaration at Test.hs:4:10-39\n    \u2022 In the expression: binary-0.8.3.0:Data.Binary.Class.$dmput\n      In an equation for \u2018put\u2019:\n          put = binary-0.8.3.0:Data.Binary.Class.$dmput\n      In the instance declaration for \u2018Binary (PSQ a Int)\u2019\n\nTest.hs:4:10: warning: [-Wdeferred-type-errors]\n    \u2022 Could not deduce (GHC.Generics.Generic (PSQ a Int))\n        arising from a use of \u2018binary-0.8.3.0:Data.Binary.Class.$dmget\u2019\n      from the context: Binary a\n        bound by the instance declaration at Test.hs:4:10-39\n    \u2022 In the expression: binary-0.8.3.0:Data.Binary.Class.$dmget\n      In an equation for \u2018get\u2019:\n          get = binary-0.8.3.0:Data.Binary.Class.$dmget\n      In the instance declaration for \u2018Binary (PSQ a Int)\u2019\nOk, modules loaded: Main\n</code></pre>\n\n<p>How can I get GHC to automatically derive the Binary instance of PSQ a Int?</p>\n"}, {"tags": ["haskell"], "comments": [{"owner": {"reputation": 13807, "user_id": 2407038, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/538f6f4a9aa43841841de7d8e8b169fc?s=128&d=identicon&r=PG&f=1", "display_name": "user2407038", "link": "https://stackoverflow.com/users/2407038/user2407038"}, "edited": false, "score": 0, "creation_date": 1474837967, "post_id": 39691788, "comment_id": 66683041, "body": "<code>substructs</code> is a value, but you use it as if it were a function (the error you posted states this - perhaps you should read those more closely). Furthermore <code>sortBy (compare `on` fst)</code> does not have the correct type to be applied to a list of <code>SubStruct</code> - it is <code>Ord a =&gt; [(a, b)] -&gt; [(a,b)]</code>."}], "answers": [{"tags": [], "owner": {"reputation": 16405, "user_id": 6776093, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/heFeh.png?s=128&g=1", "display_name": "redneb", "link": "https://stackoverflow.com/users/6776093/redneb"}, "is_accepted": true, "score": 6, "last_activity_date": 1474838467, "last_edit_date": 1474838467, "creation_date": 1474837626, "answer_id": 39691847, "question_id": 39691788, "link": "https://stackoverflow.com/questions/39691788/haskell-find-the-minimum-in-custom-data-type/39691847#39691847", "title": "Haskell: Find the minimum in custom data type", "body": "<p>Why not use the <code>unzip</code> function. If we define an auxiliary function:</p>\n\n<pre><code>unSubStruct :: SubStruct -&gt; (Int, Int)\nunSubStruct (SubStruct p) = p\n</code></pre>\n\n<p>Then the function that returns the element that you want can be written as:</p>\n\n<pre><code>getMin :: Struct -&gt; SubStruct\ngetMin (Struct l) = SubStruct (minimum xs, minimum ys)\n  where\n    (xs, ys) = unzip $ map unSubStruct l\n</code></pre>\n\n<p>Note that this will traverse the list twice. You can avoid that if you define your own version <code>minimum</code> that works on pairs:</p>\n\n<pre><code>getMin :: Struct -&gt; SubStruct\ngetMin (Struct l) =\n    SubStruct $ foldr1 minPair $ map unSubStruct l\n  where\n    minPair (x0, y0) (x, y) = (min x0 x, min y0 y)\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 1947, "user_id": 1475898, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/09d3a80a2c8bf17d4a755fcfd955efd8?s=128&d=identicon&r=PG", "display_name": "Comforse", "link": "https://stackoverflow.com/users/1475898/comforse"}, "edited": false, "score": 0, "creation_date": 1474838728, "post_id": 39691955, "comment_id": 66683245, "body": "Thanks for your answer. I marked @redneb&#39;s answer for now as it looks more efficient, but maybe I am wrong :)"}, {"owner": {"reputation": 34889, "user_id": 86604, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/329af917389e6cf8e146c03012f5319a?s=128&d=identicon&r=PG", "display_name": "Ingo", "link": "https://stackoverflow.com/users/86604/ingo"}, "reply_to_user": {"reputation": 1947, "user_id": 1475898, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/09d3a80a2c8bf17d4a755fcfd955efd8?s=128&d=identicon&r=PG", "display_name": "Comforse", "link": "https://stackoverflow.com/users/1475898/comforse"}, "edited": false, "score": 0, "creation_date": 1474838892, "post_id": 39691955, "comment_id": 66683300, "body": "You can mark what you like most, I&#39;m not envying @redneb"}], "tags": [], "owner": {"reputation": 34889, "user_id": 86604, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/329af917389e6cf8e146c03012f5319a?s=128&d=identicon&r=PG", "display_name": "Ingo", "link": "https://stackoverflow.com/users/86604/ingo"}, "is_accepted": false, "score": 0, "last_activity_date": 1474838444, "creation_date": 1474838444, "answer_id": 39691955, "question_id": 39691788, "link": "https://stackoverflow.com/questions/39691788/haskell-find-the-minimum-in-custom-data-type/39691955#39691955", "title": "Haskell: Find the minimum in custom data type", "body": "<p>You have a list of <code>SubStruct</code>, which is basically the same as a list of tuples.</p>\n\n<p>So, one solution using only common functions would be:</p>\n\n<pre><code>result = SubStruct (min1, min2) where\n    min1 = minimum (map fst . list)\n    min2 = minimum (map snd . list)\n    list = case substructs of\n         Struct this -&gt; map (\\(SubStruct t) -&gt; t) this\n</code></pre>\n"}], "owner": {"reputation": 1947, "user_id": 1475898, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/09d3a80a2c8bf17d4a755fcfd955efd8?s=128&d=identicon&r=PG", "display_name": "Comforse", "link": "https://stackoverflow.com/users/1475898/comforse"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 531, "favorite_count": 0, "accepted_answer_id": 39691847, "answer_count": 2, "score": 1, "last_activity_date": 1474838467, "creation_date": 1474837190, "question_id": 39691788, "link": "https://stackoverflow.com/questions/39691788/haskell-find-the-minimum-in-custom-data-type", "title": "Haskell: Find the minimum in custom data type", "body": "<p>So I have a custom data type, let's call it <code>Struct</code>, defined like this:</p>\n\n<pre><code>data Struct = Struct  [SubStruct] deriving (Read, Show)\ndata SubStruct = SubStruct (Int, Int) deriving (Read, Show)\n</code></pre>\n\n<p>What I need to do is to go through all the elements in <code>Struct</code> and find the minimum based on<code>fst</code> and then based on the <code>snd</code>. How do I do that?\nMore specifically, I want to get another <code>SubStruct</code> such as:</p>\n\n<p><code>SubStruct (-2,-5)</code>, based on the example in the code.</p>\n\n<p>Currently, i started by doing this:</p>\n\n<pre><code>import Data.List\nimport Data.Function (on)\nimport Data.List (sortBy)\n\ndata Struct = Struct  [SubStruct] deriving (Read, Show)\ndata SubStruct = SubStruct (Int, Int) deriving (Read, Show  )\n\nstruct s sx = Struct(s:sx)\n\nsubStruct :: (Int, Int) -&gt; SubStruct\nsubStruct (x, y) = SubStruct (x, y)\n\nsubstructs = Struct $ [subStruct (0,1), subStruct (-2, 3), subStruct (4,-5)]\n\nresults xs = sortBy (compare `on` fst) (substructs xs)\n</code></pre>\n\n<p>But I get this error:</p>\n\n<pre><code>Couldn't match expected type `t -&gt; [(a, b)]'\n            with actual type `Struct'\nRelevant bindings include\n  xs :: t (bound at bbox.hs:15:9)\n  results :: t -&gt; [(a, b)] (bound at file.hs:15:1)\nThe function `substructs' is applied to one argument,\nbut its type `Struct' has none\nIn the second argument of `sortBy', namely `(substructs xs)'\nIn the expression: sortBy (compare `on` fst) (substructs xs)\n</code></pre>\n"}, {"tags": ["haskell", "ghc"], "comments": [{"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 1, "creation_date": 1474835173, "post_id": 39691402, "comment_id": 66682222, "body": "<code>copyByteArrayToAddr# :: ByteArray# -&gt; Int# -&gt; Addr# -&gt; Int# -&gt; State# s -&gt; State# s</code> looks promising. The documentation seems to be missing some words, though, making it a bit unclear when it&#39;s valid.  &quot;Copy a range of the ByteArray. The ByteArray must fully contain the specified ranges, but this is not checked. The Addr# must not point into the ByteArray were pinned), but this is not checked either.&quot;"}, {"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 2, "creation_date": 1474835421, "post_id": 39691402, "comment_id": 66682303, "body": "Ah, that&#39;s just a Haddock problem. The source says &quot;The Addr# must not   point into the MutableByteArray# (e.g. if the MutableByteArray# were  pinned), but this is not checked either.&quot;"}, {"owner": {"reputation": 3032, "user_id": 1405768, "user_type": "registered", "accept_rate": 78, "profile_image": "https://i.stack.imgur.com/WnFhY.jpg?s=128&g=1", "display_name": "Andrew Thaddeus Martin", "link": "https://stackoverflow.com/users/1405768/andrew-thaddeus-martin"}, "reply_to_user": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 0, "creation_date": 1474836355, "post_id": 39691402, "comment_id": 66682578, "body": "Excellent. That seems like it should be safe then. If you would like convert your comment into an answer, I&#39;ll accept it. If not, I&#39;ll convert it tomorrow and accept it."}, {"owner": {"reputation": 14485, "user_id": 190376, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cd8280c5e1491b8cf55760750ed97dec?s=128&d=identicon&r=PG", "display_name": "Reid Barton", "link": "https://stackoverflow.com/users/190376/reid-barton"}, "edited": false, "score": 1, "creation_date": 1475076191, "post_id": 39691402, "comment_id": 66799406, "body": "FWIW, your understanding of what&#39;s going on is correct also."}, {"owner": {"reputation": 3032, "user_id": 1405768, "user_type": "registered", "accept_rate": 78, "profile_image": "https://i.stack.imgur.com/WnFhY.jpg?s=128&g=1", "display_name": "Andrew Thaddeus Martin", "link": "https://stackoverflow.com/users/1405768/andrew-thaddeus-martin"}, "reply_to_user": {"reputation": 14485, "user_id": 190376, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cd8280c5e1491b8cf55760750ed97dec?s=128&d=identicon&r=PG", "display_name": "Reid Barton", "link": "https://stackoverflow.com/users/190376/reid-barton"}, "edited": false, "score": 0, "creation_date": 1475080305, "post_id": 39691402, "comment_id": 66802144, "body": "@ReidBarton Thanks! Always nice to double check assumptions."}], "answers": [{"comments": [{"owner": {"reputation": 3032, "user_id": 1405768, "user_type": "registered", "accept_rate": 78, "profile_image": "https://i.stack.imgur.com/WnFhY.jpg?s=128&g=1", "display_name": "Andrew Thaddeus Martin", "link": "https://stackoverflow.com/users/1405768/andrew-thaddeus-martin"}, "edited": false, "score": 3, "creation_date": 1474850603, "post_id": 39691893, "comment_id": 66685593, "body": "From its use in <code>Data.ByteString.Short.Internal</code>, I was able to discern that the first <code>Int#</code> is the start index and the second one is the length. The docs really should be improved though."}], "tags": [], "owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "is_accepted": true, "score": 6, "last_activity_date": 1474928659, "last_edit_date": 1474928659, "creation_date": 1474837880, "answer_id": 39691893, "question_id": 39691402, "link": "https://stackoverflow.com/questions/39691402/copying-ghc-bytearray-to-ptr/39691893#39691893", "title": "Copying GHC ByteArray# to Ptr", "body": "<pre><code>copyByteArrayToAddr# :: ByteArray# -&gt; Int# -&gt; Addr# -&gt; Int# -&gt; State# s -&gt; State# s\n</code></pre>\n\n<p>looks like the right primop. You just need to be sure not to try to copy it into memory it occupies. So you should probably be safe with</p>\n\n<pre><code>copyByteArrayToPtr :: ByteArray# -&gt; Int -&gt; Ptr a -&gt; Int -&gt; ST s ()\ncopyByteArrayToPtr ba (I# x) (Ptr p) (I# y) = ST $ \\ s -&gt;\n  (# copyByteArrayToAddr# ba x p y s, () #)\n</code></pre>\n\n<p>Unfortunately, the documentation gives me no clue what each <code>Int#</code> is supposed to mean, but I imagine you can figure that out through trial and segfault.</p>\n"}], "owner": {"reputation": 3032, "user_id": 1405768, "user_type": "registered", "accept_rate": 78, "profile_image": "https://i.stack.imgur.com/WnFhY.jpg?s=128&g=1", "display_name": "Andrew Thaddeus Martin", "link": "https://stackoverflow.com/users/1405768/andrew-thaddeus-martin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 243, "favorite_count": 0, "accepted_answer_id": 39691893, "answer_count": 1, "score": 3, "last_activity_date": 1474928659, "creation_date": 1474834595, "last_edit_date": 1495542791, "question_id": 39691402, "link": "https://stackoverflow.com/questions/39691402/copying-ghc-bytearray-to-ptr", "title": "Copying GHC ByteArray# to Ptr", "body": "<p>I am trying to write the following function:</p>\n\n<pre><code>memcpyByteArrayToPtr :: \n     ByteArray# -- ^ source\n  -&gt; Int -- ^ start\n  -&gt; Int -- ^ length\n  -&gt; Ptr a -- ^ destination\n  -&gt; IO ()\n</code></pre>\n\n<p>The behavior should be to internally use <code>memcpy</code> to copy the contents of a <code>ByteArray#</code> to the <code>Ptr</code>. There are two techniques I have seen for doing something like this, but it's difficult for me to reason about their safety.</p>\n\n<p>The first is found in the <a href=\"http://hackage.haskell.org/package/memory\" rel=\"nofollow noreferrer\">memory</a> package. There is an auxiliary function <a href=\"http://hackage.haskell.org/package/memory-0.13/docs/src/Data-ByteArray-Bytes.html#withPtr\" rel=\"nofollow noreferrer\">withPtr</a> defined as:</p>\n\n<pre><code>data Bytes = Bytes (MutableByteArray# RealWorld)\n\nwithPtr :: Bytes -&gt; (Ptr p -&gt; IO a) -&gt; IO a\nwithPtr b@(Bytes mba) f = do\n    a &lt;- f (Ptr (byteArrayContents# (unsafeCoerce# mba)))\n    touchBytes b\n    return a\n</code></pre>\n\n<p>But, I'm pretty sure that this is only safe because the only way to construct <code>Bytes</code> is by using a smart constructor that calls <code>newAlignedPinnedByteArray#</code>. <a href=\"https://stackoverflow.com/a/18432589/1405768\">An answer given to a similar question</a> and the <a href=\"http://hackage.haskell.org/package/ghc-prim-0.5.0.0/docs/GHC-Prim.html#v:byteArrayContents-35-\" rel=\"nofollow noreferrer\">docs for <code>byteArrayContents#</code></a> indicate that it is only safe when dealing with pinned <code>ByteArray#</code>s. In my situation, I'm dealing with the <code>ByteArray#</code>s that the <code>text</code> library <a href=\"http://hackage.haskell.org/package/text-1.2.2.1/docs/Data-Text-Array.html\" rel=\"nofollow noreferrer\">uses internally</a>, and they are not pinned, so I believe this would be unsafe.</p>\n\n<p>The second possibility I've stumbled across is in <code>text</code> itself. At the bottom of the <a href=\"http://hackage.haskell.org/package/text-1.2.2.1/docs/src/Data-Text-Array.html\" rel=\"nofollow noreferrer\">Data.Text.Array source code</a>, there is an ffi function <code>memcpyI</code>:</p>\n\n<pre><code>foreign import ccall unsafe \"_hs_text_memcpy\" memcpyI\n  :: MutableByteArray# s -&gt; CSize -&gt; ByteArray# -&gt; CSize -&gt; CSize -&gt; IO ()\n</code></pre>\n\n<p>This is backed by the following c code:</p>\n\n<pre><code>void _hs_text_memcpy(void *dest, size_t doff, const void *src, size_t soff, size_t n)\n{\n  memcpy(dest + (doff&lt;&lt;1), src + (soff&lt;&lt;1), n&lt;&lt;1);\n}\n</code></pre>\n\n<p>Because its a part of <code>text</code>, I trust that this is safe. It looks like it's dangerous because is that it's getting a memory location from an unpinned <code>ByteArray#</code>, the very thing that the <code>byteArrayContents#</code> documentation warns against. I suspect that it's ok because the ffi call is marked as unsafe, which I think prevents the GC from moving the <code>ByteArray#</code> during the ffi call.</p>\n\n<p>That's the research I've done far. So far, my best guess is that I can just copy what's been done in <code>text</code>. The big difference would be that, instead of passing in <code>MutableByteArray#</code> and <code>ByteArray#</code> as the two pointers, I would be passing in <code>ByteArray#</code> and <code>Ptr a</code> (or maybe <code>Addr#</code>, I'm not sure which of those you typically use with the ffi).</p>\n\n<p>Is what I have suggested safe? Is there a better way that would allow me to avoid using the ffi? Is there something in <code>base</code> that does this? Feel free to correct any incorrect assumptions I've made, and thanks for any suggestions or guidance.</p>\n"}, {"tags": ["haskell", "applicative", "alternative-functor"], "comments": [{"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "edited": false, "score": 0, "creation_date": 1474866660, "post_id": 39690844, "comment_id": 66688876, "body": "The truly dumb way is <code>zot f = sequenceA [f, f] &lt;|&gt; sequenceA [f] &lt;|&gt; sequenceA []</code>."}], "answers": [{"comments": [{"owner": {"reputation": 75362, "user_id": 625403, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/786eed7da67079cb5d63a49d469af25b?s=128&d=identicon&r=PG", "display_name": "amalloy", "link": "https://stackoverflow.com/users/625403/amalloy"}, "edited": false, "score": 1, "creation_date": 1474833225, "post_id": 39691146, "comment_id": 66681614, "body": "I&#39;d rather flip the two cases: <code>go 0 = pure []; go n = ...</code>"}, {"owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "edited": false, "score": 4, "creation_date": 1474842111, "post_id": 39691146, "comment_id": 66684001, "body": "I&#39;d keep it this way \u2013 checking <code>n &gt; 0</code> prevents infinite descent at invalid input \u2013 and <i>not</i> wrap <code>go 2</code> but export it directly as <code>atMost :: Int -&gt; f a -&gt; f [a]</code>."}, {"owner": {"reputation": 1237, "user_id": 3416536, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/33e660f9b48e97aa96c9029e9645f15d?s=128&d=identicon&r=PG&f=1", "display_name": "user3416536", "link": "https://stackoverflow.com/users/3416536/user3416536"}, "edited": false, "score": 0, "creation_date": 1474865579, "post_id": 39691146, "comment_id": 66688614, "body": "Thank you @redneb, that&#39;s exactly what I was trying for, but somehow couldn&#39;t make it work.  Many thanks."}, {"owner": {"reputation": 1237, "user_id": 3416536, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/33e660f9b48e97aa96c9029e9645f15d?s=128&d=identicon&r=PG&f=1", "display_name": "user3416536", "link": "https://stackoverflow.com/users/3416536/user3416536"}, "reply_to_user": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "edited": false, "score": 1, "creation_date": 1474865718, "post_id": 39691146, "comment_id": 66688638, "body": "@leftaroundabout yes, that&#39;s what I will go for, indeed my ultimate goal - but I couldn&#39;t even make the 0..2 case work initially.  Though is there any reason we couldn&#39;t or shouldn&#39;t use Natural rather than Int to eliminate at least one class of error?"}, {"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "edited": false, "score": 0, "creation_date": 1474866729, "post_id": 39691146, "comment_id": 66688894, "body": "Reuse library functions for <code>go</code>! <code>upTo n a = asum [replicateA m a | m &lt;- [0..n]]</code>. Now if only <code>replicateA</code> were a library function... (why isn&#39;t it??)"}, {"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "reply_to_user": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "edited": false, "score": 1, "creation_date": 1474870829, "post_id": 39691146, "comment_id": 66690406, "body": "@DanielWagner, <code>Control.Monad.replicateM</code> only needs an <code>Applicative</code> now."}, {"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "reply_to_user": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "edited": false, "score": 0, "creation_date": 1474893547, "post_id": 39691146, "comment_id": 66704303, "body": "@DanielWagner, won&#39;t that sum-of-products approach be inefficient for some important <code>Alternative</code> instances?"}, {"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "reply_to_user": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "edited": false, "score": 0, "creation_date": 1474928163, "post_id": 39691146, "comment_id": 66724500, "body": "@DanielWagner, it&#39;s certainly no good for <code>Maybe</code>, which (without optimization, at least) will case match on the same sequences over and over until it locates the failure point."}, {"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "reply_to_user": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 0, "creation_date": 1474928714, "post_id": 39691146, "comment_id": 66724689, "body": "@dfeuer I conclude the exact opposite, that it&#39;s very good for <code>Maybe</code>: <code>asum (replicateM 0 undefined : undefined) = Just []</code>."}], "tags": [], "owner": {"reputation": 16405, "user_id": 6776093, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/heFeh.png?s=128&g=1", "display_name": "redneb", "link": "https://stackoverflow.com/users/6776093/redneb"}, "is_accepted": false, "score": 8, "last_activity_date": 1474832954, "creation_date": 1474832954, "answer_id": 39691146, "question_id": 39690844, "link": "https://stackoverflow.com/questions/39690844/haskell-how-do-i-create-a-function-that-allows-none-one-or-two-applicatives/39691146#39691146", "title": "Haskell: How do I create a function that allows none, one or two Applicatives?", "body": "<p>How about this one:</p>\n\n<pre><code>zeroOneOrTwo :: Alternative f =&gt; f a -&gt; f [a]\nzeroOneOrTwo a = go (2 :: Int)\n  where\n    go n\n      | n &gt; 0 = ((:) &lt;$&gt; a &lt;*&gt; go (n - 1)) &lt;|&gt; pure []\n      | otherwise = pure []\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "edited": false, "score": 0, "creation_date": 1474842270, "post_id": 39691727, "comment_id": 66684043, "body": "That&#39;s possible, but IMO it&#39;s more reasonable to stay with lists as the result and make the maximum length an extra parameter."}, {"owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "edited": false, "score": 1, "creation_date": 1474843304, "post_id": 39691727, "comment_id": 66684250, "body": "Huh! <i>I</i> surpressed the impetus to remark that it could also be done with a full dependent-type approach, but it was kind of clear that this would turn up anyway..."}, {"owner": {"reputation": 1237, "user_id": 3416536, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/33e660f9b48e97aa96c9029e9645f15d?s=128&d=identicon&r=PG&f=1", "display_name": "user3416536", "link": "https://stackoverflow.com/users/3416536/user3416536"}, "edited": false, "score": 0, "creation_date": 1474865886, "post_id": 39691727, "comment_id": 66688687, "body": "Thank you very much @dfeuer.  I had briefly considered this, and was even going to mention it in the question - but given that I couldn&#39;t get the list-based version working, this was clearly beyond my noggin.  But now you have given me something to cogitate on and learn how it works.  That&#39;s much appreciated."}, {"owner": {"reputation": 29966, "user_id": 637669, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0227e5d5eaceb8ae2f751df38d421764?s=128&d=identicon&r=PG", "display_name": "arrowd", "link": "https://stackoverflow.com/users/637669/arrowd"}, "edited": false, "score": 0, "creation_date": 1474870044, "post_id": 39691727, "comment_id": 66690077, "body": "Am i right that if i wanted <code>atMost</code> return type to be <code>f [a]</code>, i wouldn&#39;t need <code>data AtMost</code>?"}, {"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "reply_to_user": {"reputation": 29966, "user_id": 637669, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0227e5d5eaceb8ae2f751df38d421764?s=128&d=identicon&r=PG", "display_name": "arrowd", "link": "https://stackoverflow.com/users/637669/arrowd"}, "edited": false, "score": 0, "creation_date": 1474870936, "post_id": 39691727, "comment_id": 66690454, "body": "@arrowd, redneb&#39;s answer shows how to do that. My aim was to allow the consumer of the result to use the known size bound to avoid unreachable errors and such."}, {"owner": {"reputation": 29966, "user_id": 637669, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0227e5d5eaceb8ae2f751df38d421764?s=128&d=identicon&r=PG", "display_name": "arrowd", "link": "https://stackoverflow.com/users/637669/arrowd"}, "edited": false, "score": 0, "creation_date": 1474871735, "post_id": 39691727, "comment_id": 66690805, "body": "@dfeuer I meant, i want to retain bounds in the type, but have the result type to lose this information. But i&#39;ve already figured this out."}, {"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "reply_to_user": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "edited": false, "score": 0, "creation_date": 1475015778, "post_id": 39691727, "comment_id": 66768593, "body": "@leftaroundabout, you can get away without the fancy stuff if you really want; see my latest edit."}], "tags": [], "owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "is_accepted": false, "score": 5, "last_activity_date": 1475015719, "last_edit_date": 1475015719, "creation_date": 1474836663, "answer_id": 39691727, "question_id": 39690844, "link": "https://stackoverflow.com/questions/39690844/haskell-how-do-i-create-a-function-that-allows-none-one-or-two-applicatives/39691727#39691727", "title": "Haskell: How do I create a function that allows none, one or two Applicatives?", "body": "<p>If you're going to the trouble of restricting the result like that, you might as well make its type reflect that.</p>\n\n<pre><code>data ZOT a = Zero | One a | Two a a\n\nform :: a -&gt; Maybe a -&gt; ZOT a\nform a Nothing = One a\nform a (Just b) = Two a b\n\nzeroOneOrTwo :: Alternative f =&gt; f a -&gt; f (ZOT a)\nzeroOneOrTwo a = (form &lt;$&gt; a &lt;*&gt; optional a) &lt;|&gt; pure Zero\n</code></pre>\n\n<p>What if you want up to three? Or up to four? You can cover all such cases at once with a couple language extensions.</p>\n\n<pre><code>{-# LANGUAGE DataKinds, GADTs #-}\n\ndata Nat = Z | S Nat\n\ndata Natty n where\n  Zy :: Natty 'Z\n  Sy :: Natty n -&gt; Natty ('S n)\n\ndata AtMost n a where\n  Nil :: AtMost n a\n  Cons :: a -&gt; AtMost n a -&gt; AtMost ('S n) a\n\natMost :: Alternative f =&gt; Natty n -&gt; f a -&gt; f (AtMost n a)\natMost Zy _ = pure Nil\natMost (Sy n) a = (Cons &lt;$&gt; a &lt;*&gt; atMost n a) &lt;|&gt; pure Nil\n</code></pre>\n\n<hr>\n\n<p>What if you don't want to use any fancy extensions? Well, it won't look quite so pretty, but you can still do it if you like, taking a page from Ralf Hinze's \"Numerical Representations as Higher-Order Nested Datatypes\".</p>\n\n<pre><code>data Z a = Z deriving (Show)\ndata S f a = Nil | Cons a (f a) deriving (Show)\n\nclass AtMost g where\n  atMost :: Alternative f =&gt; f a -&gt; f (g a)\n\ninstance AtMost Z where\n  atMost _ = pure Z\ninstance AtMost g =&gt; (AtMost (S g)) where\n  atMost m = (Cons &lt;$&gt; m &lt;*&gt; atMost m) &lt;|&gt; pure Nil\n</code></pre>\n\n<p>Note that there are now two different ways to construct an empty result, <code>Z</code> and <code>Nil</code>, with different types. <code>Z</code> is used when the result is as large as requested, while <code>Nil</code> is used when it comes up short.</p>\n\n<pre><code>*AtMost&gt; atMost (Just 3) :: Maybe ((S (S (S Z))) Int)\nJust (Cons 3 (Cons 3 (Cons 3 Z)))\n\n*AtMost&gt; atMost Nothing :: Maybe ((S (S (S Z))) Int)\nJust Nil\n\n*AtMost&gt; atMost undefined :: Maybe (Z Int)\nJust Z\n</code></pre>\n"}], "owner": {"reputation": 1237, "user_id": 3416536, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/33e660f9b48e97aa96c9029e9645f15d?s=128&d=identicon&r=PG&f=1", "display_name": "user3416536", "link": "https://stackoverflow.com/users/3416536/user3416536"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 162, "favorite_count": 0, "answer_count": 2, "score": 6, "last_activity_date": 1614318043, "creation_date": 1474831112, "last_edit_date": 1614318043, "question_id": 39690844, "link": "https://stackoverflow.com/questions/39690844/haskell-how-do-i-create-a-function-that-allows-none-one-or-two-applicatives", "title": "Haskell: How do I create a function that allows none, one or two Applicatives?", "body": "<p>Control.Applicative.optional allows to handle zero or one Applicatives.\nmany &amp; some allow for 0 or more, or 1 or more, respectively.\nI'd like to create a function that handles zero, one or two, specifically.\nThe signature could be as for many/some, that is</p>\n\n<pre><code>zeroOneOrTwo :: Alternative f =&gt; f a -&gt; f [a]\n</code></pre>\n\n<p>I feel this should be pretty straightforward, but I've been playing around with it for a while and cannot make it work.  Any pointers would be greatly appreciated.</p>\n"}, {"tags": ["haskell"], "comments": [{"owner": {"reputation": 69207, "user_id": 1440565, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/ec430cc01ef4cf4ae63ebbe9e8596f72?s=128&d=identicon&r=PG", "display_name": "Code-Apprentice", "link": "https://stackoverflow.com/users/1440565/code-apprentice"}, "edited": false, "score": 0, "creation_date": 1474836344, "post_id": 39690217, "comment_id": 66682573, "body": "xPos and yPos are identical except the name. This is completely unnecessary and avoids the whole point of functions. When you find yourself coding with copy and paste, there is almost always a better way."}, {"owner": {"reputation": 1385, "user_id": 4464551, "user_type": "registered", "accept_rate": 52, "profile_image": "https://graph.facebook.com/10206253300199979/picture?type=large", "display_name": "Felix Ros&#233;n", "link": "https://stackoverflow.com/users/4464551/felix-ros%c3%a9n"}, "reply_to_user": {"reputation": 69207, "user_id": 1440565, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/ec430cc01ef4cf4ae63ebbe9e8596f72?s=128&d=identicon&r=PG", "display_name": "Code-Apprentice", "link": "https://stackoverflow.com/users/1440565/code-apprentice"}, "edited": false, "score": 0, "creation_date": 1474836537, "post_id": 39690217, "comment_id": 66682641, "body": "@Code-Apprentice Yeah. I noticed it to, Change it to one <code>pos</code> function instead. And calls transpose on the list I send in for the Y position"}, {"owner": {"reputation": 69207, "user_id": 1440565, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/ec430cc01ef4cf4ae63ebbe9e8596f72?s=128&d=identicon&r=PG", "display_name": "Code-Apprentice", "link": "https://stackoverflow.com/users/1440565/code-apprentice"}, "edited": false, "score": 0, "creation_date": 1474840918, "post_id": 39690217, "comment_id": 66683754, "body": "One small comment... in <code>(yPos (transpose (xs))</code> you don&#39;t need the parentheses around <code>xs</code>. Remember that in Haskell, function application is a simple space. Parentheses are used for specifying operator precedence. This is unlike the use of parentheses in other languages when calling a function. You may already know this. I just wanted to point it out for future readers."}], "answers": [{"tags": [], "owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "is_accepted": true, "score": 8, "last_activity_date": 1474828761, "creation_date": 1474828761, "answer_id": 39690450, "question_id": 39690217, "link": "https://stackoverflow.com/questions/39690217/assign-the-return-value-of-two-functions-to-two-variables-in-a-do-block/39690450#39690450", "title": "Assign the return value of two functions, to two variables, in a do block", "body": "<p>Why <code>do</code>? There are no monads there. A <code>let..in</code> suffices:</p>\n\n<pre><code>findFive :: [[Int]] -&gt; (Int, Int)\nfindFive rs = let\n    x = xPos rs 0\n    y = yPos rs 0\n    in (x,y)\n</code></pre>\n\n<p>Alternatively, use <code>where</code>:</p>\n\n<pre><code>findFive :: [[Int]] -&gt; (Int, Int)\nfindFive rs = (x, y)\n    where\n    x = xPos rs 0\n    y = yPos rs 0\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 9485, "user_id": 20371, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/32c7a412ad0caf812ae974df5eb8ffcd?s=128&d=identicon&r=PG", "display_name": "Yawar", "link": "https://stackoverflow.com/users/20371/yawar"}, "is_accepted": false, "score": 0, "last_activity_date": 1474831164, "creation_date": 1474831164, "answer_id": 39690850, "question_id": 39690217, "link": "https://stackoverflow.com/questions/39690217/assign-the-return-value-of-two-functions-to-two-variables-in-a-do-block/39690850#39690850", "title": "Assign the return value of two functions, to two variables, in a do block", "body": "<p>You can't use a <code>do</code> block this way because in <code>do</code> blocks you have to (1) bind names to the 'contents' of monadic values, and (2) return a value wrapped in the same monadic type as used in (1). In this case the monadic type would be the list. It's appropriate to return a list of (row, column) pairs because that automatically handles both the cases of not finding the number, or finding it multiple times. So we could do something like</p>\n\n<pre><code>import Control.Monad\n\nfindFive ::\n  [[Int]] -&gt;   -- ^ a matrix of numbers.\n  [(Int, Int)] -- ^ the (zero-indexed) rows and columns of the number\n               -- ^ @5@, if any (otherwise empty list).\nfindFive xss =\n  do\n    (xs, rowIdx) &lt;- xss `zip` [0 ..]\n    (x, colIdx) &lt;- xs `zip` [0 ..]\n    guard $ x == 5\n\n    return (rowIdx, colIdx)\n\ninput :: [[Int]]\ninput = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n-- Should print \"row: 1, col: 1\".\nmain :: IO ()\nmain =\n  forM_ (findFive input) $ \\(rowIdx, colIdx) -&gt;\n    do\n      putStr \"row: \"\n      putStr $ show rowIdx\n      putStr \", col: \"\n      print colIdx\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 384463, "user_id": 1126841, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fa05233b2357f8d11c22ef4cfc7bb85c?s=128&d=identicon&r=PG", "display_name": "chepner", "link": "https://stackoverflow.com/users/1126841/chepner"}, "is_accepted": false, "score": 0, "last_activity_date": 1474913044, "creation_date": 1474913044, "answer_id": 39709468, "question_id": 39690217, "link": "https://stackoverflow.com/questions/39690217/assign-the-return-value-of-two-functions-to-two-variables-in-a-do-block/39709468#39709468", "title": "Assign the return value of two functions, to two variables, in a do block", "body": "<p>Let's say <code>pos</code> is defined this way:</p>\n\n<pre><code>pos :: Eq =&gt;    a          -- A value to find\n             -&gt; [[a]]      -- A 2d matrix\n             -&gt; Maybe Int  -- Index of first row containing the value, if any\npos k rows = pos' rows 0\n             where pos' [] _ = Nothing\n                   pos' (x:xs) n | elem k x = n\n                                 | otherwise = pos' xs (n+1)\n</code></pre>\n\n<p>There are several changes here:</p>\n\n<ol>\n<li>It will work for lists of any type on which equality is defined, not just <code>Int</code>.</li>\n<li>It is generalized to find any value <code>k :: a</code>, not just 5.</li>\n<li>It can deal with failure to find <em>any</em> row containing <code>k</code>.</li>\n</ol>\n\n<p>With this definition, we could define <code>findFive</code> as</p>\n\n<pre><code>findFive :: [[Int]] -&gt; (Maybe Int, Maybe Int)\nfindFive xs = (pos 5 xs, pos 5 (transpose xs))\n</code></pre>\n\n<hr>\n\n<p>Using <code>Control.Lens</code>, you can factor out the function <code>pos 5</code> so that it only needs to be written once. Think of <code>over both</code> as a version of <code>map</code> for pairs instead of lists.</p>\n\n<pre><code>import Control.Lens\nfindFive xs = over both (pos 5) (xs, transpose xs)\n</code></pre>\n\n<p>Using <code>Control.Arrow</code>, you can factor out the argument <code>xs</code> so that <em>it</em> only needs to be written once.</p>\n\n<pre><code>import Control.Lens\nimport Control.Arrow\nfindFive xs = over both (pos 5) ((id &amp;&amp;&amp; transpose) xs)\n-- id &amp;&amp;&amp; transpose = \\x -&gt; (id x, transpose x)\n</code></pre>\n\n<p>Once you've done that, you can easily write <code>findFive</code> in point-free style, by composing <code>over both (pos 5)</code> and <code>id &amp;&amp;&amp; transpose</code>:</p>\n\n<pre><code>findFive = over both (pos 5) . (id &amp;&amp;&amp; transpose)\n</code></pre>\n"}], "owner": {"reputation": 1385, "user_id": 4464551, "user_type": "registered", "accept_rate": 52, "profile_image": "https://graph.facebook.com/10206253300199979/picture?type=large", "display_name": "Felix Ros&#233;n", "link": "https://stackoverflow.com/users/4464551/felix-ros%c3%a9n"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 166, "favorite_count": 0, "accepted_answer_id": 39690450, "answer_count": 3, "score": 2, "last_activity_date": 1474913044, "creation_date": 1474827476, "question_id": 39690217, "link": "https://stackoverflow.com/questions/39690217/assign-the-return-value-of-two-functions-to-two-variables-in-a-do-block", "title": "Assign the return value of two functions, to two variables, in a do block", "body": "<p>Sorry for the title gore (if you can suggest a better, please do). But my problem is that I dont quite understand how to get this do block to work. I have a code that returns the position of <code>5</code> in a list of lists. Like such:</p>\n\n<pre><code>findFive :: [[Int]] -&gt; (Int, Int)\nfindFive rs = do\n    x &lt;- xPos rs 0\n    y &lt;- yPos rs 0\n    return ( (x,y) )\n\nxPos :: [[Int]] -&gt; Int -&gt; Int\nxPos (rs:[[]]) n             = n\nxPos (rs:rss)  n | elem 5 rs = n\n                 | otherwise = xPos rss (n+1)\n\nyPos :: [[Int]] -&gt; Int -&gt; Int\nyPos (rs:[[]]) n              = n\nyPos (rs:rss)  n | elem 5 rs  = n\n                 | otherwise  = yPos rss (n+1)\n</code></pre>\n\n<p>I</p>\n\n<p>But I cant use my do block this way. I can get it to work by doing</p>\n\n<pre><code>findFive :: [[Int]] -&gt; (Int, Int)\nfindFive xs = ( (xPos xs 0), (yPos (transpose (xs)) 0) )\n</code></pre>\n\n<p>But that looks kinda ugly.</p>\n\n<p>Also, is there a way to get this to work without sending in <code>0</code> to <code>xPos</code> and <code>yPos</code> ?</p>\n"}, {"tags": ["haskell", "monads", "functor", "monad-transformers"], "comments": [{"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 0, "creation_date": 1474826842, "post_id": 39689887, "comment_id": 66679491, "body": "At the cost of using <a href=\"https://hackage.haskell.org/package/bifunctors-3.2.0.1/docs/Data-Bifunctor.html\" rel=\"nofollow noreferrer\"><code>Data.Bifunctor</code></a> (from <code>bifunctors</code>), you can map over both sides of the <code>Either</code> at once using <code>bimap</code>. That leaves you with <code>createTenant newTenant &gt;&gt;= bimap pure (\\y -&gt; activateTenant (y ^. key))</code> (and of course you can make the last lambda point-free too, at the cost of making things even less readable: <code>createTenant newTenant &gt;&gt;= bimap pure (activateTenant . (^. key))</code>)."}, {"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "reply_to_user": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 0, "creation_date": 1474827218, "post_id": 39689887, "comment_id": 66679632, "body": "@Alec Naively, that doesn&#39;t look like it type-checks. Won&#39;t <code>bimap</code> return an <code>Either</code> with some <code>AppM</code>s inside, when what you want is an <code>AppM</code> with an <code>Either</code> inside?"}, {"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 0, "creation_date": 1474827753, "post_id": 39689887, "comment_id": 66679785, "body": "Ah yes. So you would. There there is <a href=\"http://hackage.haskell.org/package/adjunctions-4.3/docs/Data-Functor-Adjunction.html#v:uncozipL\" rel=\"nofollow noreferrer\"><code>uncozipL</code></a>  for this in one of Edward Kmett&#39;s package... :)"}, {"owner": {"reputation": 5657, "user_id": 534481, "user_type": "registered", "accept_rate": 31, "profile_image": "https://www.gravatar.com/avatar/60df8c1a366ab1bf4378154e71a93367?s=128&d=identicon&r=PG", "display_name": "Saurabh Nanda", "link": "https://stackoverflow.com/users/534481/saurabh-nanda"}, "edited": false, "score": 0, "creation_date": 1474828000, "post_id": 39689887, "comment_id": 66679865, "body": "I have no clue about what was said above :)"}, {"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "reply_to_user": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "edited": false, "score": 0, "creation_date": 1474844311, "post_id": 39689887, "comment_id": 66684454, "body": "@DanielWagner I believe that what I was initially looking for was actually <a href=\"https://hackage.haskell.org/package/bifunctors-3.2.0.1/docs/Data-Bitraversable.html\" rel=\"nofollow noreferrer\"><code>bitraverse</code></a> not <code>bimap</code> - not that it matters too much."}], "answers": [{"comments": [{"owner": {"reputation": 5657, "user_id": 534481, "user_type": "registered", "accept_rate": 31, "profile_image": "https://www.gravatar.com/avatar/60df8c1a366ab1bf4378154e71a93367?s=128&d=identicon&r=PG", "display_name": "Saurabh Nanda", "link": "https://stackoverflow.com/users/534481/saurabh-nanda"}, "edited": false, "score": 0, "creation_date": 1474826904, "post_id": 39690023, "comment_id": 66679514, "body": "So, you&#39;re suggesting getting rid of <code>Either</code> altogether?"}, {"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "reply_to_user": {"reputation": 5657, "user_id": 534481, "user_type": "registered", "accept_rate": 31, "profile_image": "https://www.gravatar.com/avatar/60df8c1a366ab1bf4378154e71a93367?s=128&d=identicon&r=PG", "display_name": "Saurabh Nanda", "link": "https://stackoverflow.com/users/534481/saurabh-nanda"}, "edited": false, "score": 0, "creation_date": 1474826990, "post_id": 39690023, "comment_id": 66679547, "body": "@SaurabhNanda Not at all! The <code>Either</code> is just hiding, not gone: <code>ExceptT e m a</code> is isomorphic to <code>m (Either e a)</code>. The reason <code>ExceptT e m a</code> is nicer than <code>m (Either e a)</code> is because its <code>Monad</code> instance&#39;s <code>(&gt;&gt;=)</code> operation takes care of destructing and reconstructing the <code>Either</code>s for you, and takes care of short-circuiting when a <code>Left</code> appears."}, {"owner": {"reputation": 5657, "user_id": 534481, "user_type": "registered", "accept_rate": 31, "profile_image": "https://www.gravatar.com/avatar/60df8c1a366ab1bf4378154e71a93367?s=128&d=identicon&r=PG", "display_name": "Saurabh Nanda", "link": "https://stackoverflow.com/users/534481/saurabh-nanda"}, "edited": false, "score": 0, "creation_date": 1474827292, "post_id": 39690023, "comment_id": 66679655, "body": "But, if I make <code>ExceptT</code> part of my based <code>AppM</code> monad, won&#39;t that force ALL my functions to return a <code>Left</code> or <code>Right</code>? Even if they can&#39;t really result in an error case?"}, {"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "reply_to_user": {"reputation": 5657, "user_id": 534481, "user_type": "registered", "accept_rate": 31, "profile_image": "https://www.gravatar.com/avatar/60df8c1a366ab1bf4378154e71a93367?s=128&d=identicon&r=PG", "display_name": "Saurabh Nanda", "link": "https://stackoverflow.com/users/534481/saurabh-nanda"}, "edited": false, "score": 0, "creation_date": 1474827534, "post_id": 39690023, "comment_id": 66679720, "body": "@SaurabhNanda It will indeed. Whether that makes sense or not is a question to care about, for sure. One solution is the <code>mtl</code> way: you could make your actions polymorphic over the effects they have rather than declaring them to be in the <code>AppM</code> monad; then make sure the <code>AppM</code> monad has all the desired effects. This lets you declare in the type signature that some things will never error, yet build a top-level <code>AppM</code> action of appropriately monomorphic type. Otherwise you could use a local <code>ExceptT</code> just for its instances. Which approach sounds most interesting to you?"}, {"owner": {"reputation": 5657, "user_id": 534481, "user_type": "registered", "accept_rate": 31, "profile_image": "https://www.gravatar.com/avatar/60df8c1a366ab1bf4378154e71a93367?s=128&d=identicon&r=PG", "display_name": "Saurabh Nanda", "link": "https://stackoverflow.com/users/534481/saurabh-nanda"}, "edited": false, "score": 0, "creation_date": 1474827749, "post_id": 39690023, "comment_id": 66679781, "body": "Are you referring to <a href=\"https://hackage.haskell.org/package/mtl-2.2.1/docs/Control-Monad-Except.html\" rel=\"nofollow noreferrer\">hackage.haskell.org/package/mtl-2.2.1/docs/&hellip;</a> ? Can it be mixed and matched with <a href=\"https://hackage.haskell.org/package/exceptions-0.8.3/docs/Control-Monad-Catch.html\" rel=\"nofollow noreferrer\">hackage.haskell.org/package/exceptions-0.8.3/docs/&hellip;</a> easily? I was warming up to the latter based on my own research."}, {"owner": {"reputation": 5657, "user_id": 534481, "user_type": "registered", "accept_rate": 31, "profile_image": "https://www.gravatar.com/avatar/60df8c1a366ab1bf4378154e71a93367?s=128&d=identicon&r=PG", "display_name": "Saurabh Nanda", "link": "https://stackoverflow.com/users/534481/saurabh-nanda"}, "edited": false, "score": 0, "creation_date": 1474827867, "post_id": 39690023, "comment_id": 66679823, "body": "<code>This lets you declare in the type signature that some things will never error, yet build a top-level AppM action of appropriately monomorphic type. Otherwise you could use a local ExceptT just for its instances. Which approach sounds most interesting to you?</code> I&#39;m not sure I understand both the options. Possible to spell out both as alternative answers?"}, {"owner": {"reputation": 5657, "user_id": 534481, "user_type": "registered", "accept_rate": 31, "profile_image": "https://www.gravatar.com/avatar/60df8c1a366ab1bf4378154e71a93367?s=128&d=identicon&r=PG", "display_name": "Saurabh Nanda", "link": "https://stackoverflow.com/users/534481/saurabh-nanda"}, "edited": false, "score": 0, "creation_date": 1474827915, "post_id": 39690023, "comment_id": 66679838, "body": "If I understand correctly, the underlying approach is to convert (or &quot;lift&quot;) the function to the same monad, right?"}, {"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "reply_to_user": {"reputation": 5657, "user_id": 534481, "user_type": "registered", "accept_rate": 31, "profile_image": "https://www.gravatar.com/avatar/60df8c1a366ab1bf4378154e71a93367?s=128&d=identicon&r=PG", "display_name": "Saurabh Nanda", "link": "https://stackoverflow.com/users/534481/saurabh-nanda"}, "edited": false, "score": 0, "creation_date": 1474830293, "post_id": 39690023, "comment_id": 66680631, "body": "@SaurabhNanda I have expanded on the two approaches I mentioned briefly."}], "tags": [], "owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "is_accepted": false, "score": 3, "last_activity_date": 1474830873, "last_edit_date": 1474830873, "creation_date": 1474826375, "answer_id": 39690023, "question_id": 39689887, "link": "https://stackoverflow.com/questions/39689887/how-to-compose-functions-operating-with-readert-and-either/39690023#39690023", "title": "How to compose functions operating with ReaderT and Either?", "body": "<p>Probably the best way will be to include <code>ExceptT</code> or similar in your <code>AppM</code> monad. Then you will give new types to <code>createTenant</code> and <code>activateTenant</code>:</p>\n\n<pre><code>createTenant :: NewTenant -&gt; AppM Tenant\nactivateTenant :: TenantId -&gt; AppM Tenant\n\naction :: NewTenant -&gt; AppM Tenant\naction = activateTenant . view key &lt;=&lt; createTenant\n</code></pre>\n\n<p>You can convert your old functions to the new monad stack with <code>ExceptT</code> (for <code>createTenant</code>) and <code>lift</code> (for <code>activateTenant</code>).</p>\n\n<p>If for some reason this approach is not possible, then you could make your code suitably unreadable instead:</p>\n\n<pre><code>action = createTenant &gt;=&gt; either (return . Left) (\\y -&gt; Right &lt;$&gt; activateTenant (y ^. key))\n</code></pre>\n\n<p>One downside of putting <code>ExceptT</code> in your <code>AppM</code> monad is that then you have no way to distinguish between actions that can and cannot fail. If this matters to you, you have a couple choices.</p>\n\n<ol>\n<li><p>Use <code>ExcepT</code> locally just for its instances. You would keep <code>AppM</code> as-is and the types of <code>createTenant</code> and <code>activateTenant</code> as-is, but write</p>\n\n<pre><code>action newTenant = runExceptT $ do\n    y &lt;- ExcepT (createTenant newTenant)\n    lift (activateTenant (y ^. key))\n</code></pre>\n\n<p>or its one-line equivalent:</p>\n\n<pre><code>action n = runExcepT (ExceptT (createTenant n) &gt;&gt;= lift . activateTenant . view key)\n</code></pre></li>\n<li><p>Make your actions polymorphic over their effects. You would still include <code>ExceptT</code> in the <code>AppM</code> monad, but the types of <code>createTenant</code> and <code>activateTenant</code> would now be</p>\n\n<pre><code>createTenant :: (MonadReader AppConfig m, MonadIO m, MonadThrow TenantCreationError m)\n             =&gt; NewTenant -&gt; m Tenant\nactivateTenant :: (MonadReader AppConfig m, MonadIO m)\n               =&gt; TenantId -&gt; m Tenant\n\naction :: (MonadReader AppConfig m, MonadIO m, MonadThrow TenantCreationError m)\n       =&gt; NewTenant =&gt; m Tenant\naction = activateTenant . view key &lt;=&lt; createTenant\n</code></pre>\n\n<p>You would then in particular be able to give <code>action</code> the monomorphic type <code>AppM Tenant</code>; and it would still be clear from the type of <code>activateTenant</code> that it cannot fail. Moreover it would give you the opportunity to say things you couldn't say before; e.g. if <code>newTenant</code> doesn't need to do <code>IO</code> you could indicate that by removing <code>MonadIO m</code> from the constraints in its type. You can recover short type signatures by defining a type synonym for whichever combination(s) you expect to be used most often, e.g.</p>\n\n<pre><code>type ConfigIO m = (MonadReader AppConfig m, MonadIO m)\ntype Failable m = (ConfigIO m, MonadThrow TenantCreationError m)\ncreateTenant :: Failable m =&gt; NewTenant -&gt; m Tenant\nactivateTenant :: ConfigIO m =&gt; TenantId -&gt; m Tenant\n</code></pre></li>\n</ol>\n"}], "owner": {"reputation": 5657, "user_id": 534481, "user_type": "registered", "accept_rate": 31, "profile_image": "https://www.gravatar.com/avatar/60df8c1a366ab1bf4378154e71a93367?s=128&d=identicon&r=PG", "display_name": "Saurabh Nanda", "link": "https://stackoverflow.com/users/534481/saurabh-nanda"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 182, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1474830873, "creation_date": 1474825571, "question_id": 39689887, "link": "https://stackoverflow.com/questions/39689887/how-to-compose-functions-operating-with-readert-and-either", "title": "How to compose functions operating with ReaderT and Either?", "body": "<p>Is it possible to rewrite the following function as a one-liner?</p>\n\n<pre><code>action :: NewTenant -&gt; AppM (Either TenantCreationError Tenant)\naction newTenant = (createTenant newTenant) &gt;&gt;= \\case\n  Left x -&gt; return $ Left x\n  Right y -&gt; do\n    t &lt;- activateTenant $ (y ^. key)\n    return $ Right t\n\ntype AppM = ReaderT AppConfig IO\ncreateTenant :: NewTenant -&gt; AppM (Either TenantCreationError Tenant)\nactivateTenant :: TenantId -&gt; AppM Tenant\n</code></pre>\n"}, {"tags": ["haskell", "recursive-datastructures"], "answers": [{"tags": [], "owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "is_accepted": false, "score": 1, "last_activity_date": 1474825138, "creation_date": 1474825138, "answer_id": 39689839, "question_id": 39689774, "link": "https://stackoverflow.com/questions/39689774/using-binary-search-tree-with-custom-data-types/39689839#39689839", "title": "Using binary search tree with custom data types?", "body": "<p>Probably the biggest problem you have is this one:</p>\n\n<pre><code>   | x &gt; a      = Node a left (insertTreeElements x left)\n</code></pre>\n\n<p>Notice that you write <code>left</code> twice -- presumably one of them should be <code>right</code>.</p>\n"}], "owner": {"reputation": 2691, "user_id": 5477287, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/yKMgF.jpg?s=128&g=1", "display_name": "Babra Cunningham", "link": "https://stackoverflow.com/users/5477287/babra-cunningham"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 187, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1474825207, "creation_date": 1474824712, "last_edit_date": 1474825207, "question_id": 39689774, "link": "https://stackoverflow.com/questions/39689774/using-binary-search-tree-with-custom-data-types", "title": "Using binary search tree with custom data types?", "body": "<p>I've create a binary search tree:</p>\n\n<pre><code>data SearchTree a = Empty | Node a (SearchTree a) (SearchTree a) deriving (Show, Eq, Ord)\n\ninsertTreeElements :: (Ord a) =&gt; a -&gt; SearchTree a -&gt; SearchTree a --Create    binary tree input method\ninsertTreeElements x Empty = Node x Empty Empty\ninsertTreeElements x (Node a left right)\n   | x == a     = Node x left right\n   | x &lt; a  = Node a (insertTreeElements x left) right\n   | x &gt; a      = Node a left (insertTreeElements x right)\n\nmakeTree :: (Ord a) =&gt; (a -&gt; SearchTree a -&gt; SearchTree a) -&gt; SearchTree a -&gt; [a] -&gt; SearchTree a --Create binary tree\nmakeTree iTE Empty li = foldr iTE Empty li\n</code></pre>\n\n<p>I'm trying to pass in the following list:</p>\n\n<pre><code>Type Age = Int\nmylist = [Age 12, Age 100, Age 2, Age 3, Age 43]\n</code></pre>\n\n<p>However the output is not correct, it does not order the tree based on the size of the ages? How do I need to edit the insertTreeElements to allow it to work with 'Age x'? </p>\n"}, {"tags": ["haskell"], "answers": [{"tags": [], "owner": {"reputation": 384463, "user_id": 1126841, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fa05233b2357f8d11c22ef4cfc7bb85c?s=128&d=identicon&r=PG", "display_name": "chepner", "link": "https://stackoverflow.com/users/1126841/chepner"}, "is_accepted": true, "score": 2, "last_activity_date": 1474818959, "last_edit_date": 1474818959, "creation_date": 1474814205, "answer_id": 39688051, "question_id": 39687155, "link": "https://stackoverflow.com/questions/39687155/how-do-i-give-the-argument-to-a-function-which-is-used-inside-other-function-in/39688051#39688051", "title": "How do I give the argument to a function which is used inside other function in haskell", "body": "<p><code>numList'</code> isn't a function; it's simply the list resulting from a call to <code>take</code>. As such, you can't pass a different argument to it; the function has already been called. The simplest thing to do is define a function <code>digits</code> that takes <code>k</code> as an argument and returns the desired subset of integers.</p>\n\n<pre><code>digits k = [0..k-1]\nlistsList k = [] : [new : old | old &lt;- listsList k, new &lt;- digits k] -- list of all possible binary numbers (infinite)\nlistsList' k = take 10000 $ listsList k -- just to not stuck because of infinite list\n\nfinalList n k = [ x | x &lt;- listsList' k, length x == n] -- taking n-sized lists\n</code></pre>\n"}], "owner": {"reputation": 13, "user_id": 6877864, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/db4da76cbbcff6afd22d03174d5666b7?s=128&d=identicon&r=PG&f=1", "display_name": "Michiru", "link": "https://stackoverflow.com/users/6877864/michiru"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 76, "favorite_count": 0, "accepted_answer_id": 39688051, "answer_count": 1, "score": 0, "last_activity_date": 1474818959, "creation_date": 1474808731, "last_edit_date": 1474809147, "question_id": 39687155, "link": "https://stackoverflow.com/questions/39687155/how-do-i-give-the-argument-to-a-function-which-is-used-inside-other-function-in", "title": "How do I give the argument to a function which is used inside other function in haskell", "body": "<p>So basically I have:</p>\n\n<pre><code>numList = [0,1..]\nnumList' = take 2 numList\nlistsList = [] : [new : old | old &lt;- listsList, new &lt;- numList'] -- list of all possible binary numbers (infinite)\nlistsList' = take 10000 listsList -- just to not stuck because of infinite list\n\nfinalList n = [ x | x &lt;- listsList', length x == n] -- taking n-sized lists\n</code></pre>\n\n<p>and it is working (even if I change 2 to a different number in the second line) but I need last function to have two arguments like this:</p>\n\n<pre><code>finalList n k\n</code></pre>\n\n<p>where k should be given to the numList' to be something like</p>\n\n<pre><code>numList' = take k numList\n</code></pre>\n\n<p>I also can not make </p>\n\n<pre><code>numList' k = take k numList\n</code></pre>\n\n<p>because then the function listsList do not work.\nHow can I solve this?</p>\n"}, {"tags": ["haskell", "functional-programming"], "comments": [{"owner": {"reputation": 94553, "user_id": 775806, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/XNd2C.png?s=128&g=1", "display_name": "n. &#39;pronouns&#39; m.", "link": "https://stackoverflow.com/users/775806/n-pronouns-m"}, "edited": false, "score": 5, "creation_date": 1474807080, "post_id": 39686879, "comment_id": 66673208, "body": "This is perfectly OK. <code>let x =</code> is not an assignment, there&#39;s no cheating (you can&#39;t cheat in Haskell), use it as much as you want."}, {"owner": {"reputation": 45534, "user_id": 106104, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/c88b9310b92a937108ec4336c2832f92?s=128&d=identicon&r=PG", "display_name": "user253751", "link": "https://stackoverflow.com/users/106104/user253751"}, "reply_to_user": {"reputation": 94553, "user_id": 775806, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/XNd2C.png?s=128&g=1", "display_name": "n. &#39;pronouns&#39; m.", "link": "https://stackoverflow.com/users/775806/n-pronouns-m"}, "edited": false, "score": 0, "creation_date": 1474851783, "post_id": 39686879, "comment_id": 66685831, "body": "@n.m. Well, you can cheat if you use any functions with &quot;unsafe&quot; in their name."}, {"owner": {"reputation": 94553, "user_id": 775806, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/XNd2C.png?s=128&g=1", "display_name": "n. &#39;pronouns&#39; m.", "link": "https://stackoverflow.com/users/775806/n-pronouns-m"}, "reply_to_user": {"reputation": 45534, "user_id": 106104, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/c88b9310b92a937108ec4336c2832f92?s=128&d=identicon&r=PG", "display_name": "user253751", "link": "https://stackoverflow.com/users/106104/user253751"}, "edited": false, "score": 0, "creation_date": 1474864170, "post_id": 39686879, "comment_id": 66688297, "body": "@immibis they are arguably not Haskell... actually you can cheat with <code>seq</code>,, in a different way."}, {"owner": {"reputation": 45534, "user_id": 106104, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/c88b9310b92a937108ec4336c2832f92?s=128&d=identicon&r=PG", "display_name": "user253751", "link": "https://stackoverflow.com/users/106104/user253751"}, "reply_to_user": {"reputation": 94553, "user_id": 775806, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/XNd2C.png?s=128&g=1", "display_name": "n. &#39;pronouns&#39; m.", "link": "https://stackoverflow.com/users/775806/n-pronouns-m"}, "edited": false, "score": 0, "creation_date": 1474864292, "post_id": 39686879, "comment_id": 66688328, "body": "@n.m. A new Haskell user wouldn&#39;t know they&#39;re &quot;not Haskell&quot;, would they?"}, {"owner": {"reputation": 94553, "user_id": 775806, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/XNd2C.png?s=128&g=1", "display_name": "n. &#39;pronouns&#39; m.", "link": "https://stackoverflow.com/users/775806/n-pronouns-m"}, "reply_to_user": {"reputation": 45534, "user_id": 106104, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/c88b9310b92a937108ec4336c2832f92?s=128&d=identicon&r=PG", "display_name": "user253751", "link": "https://stackoverflow.com/users/106104/user253751"}, "edited": false, "score": 0, "creation_date": 1474868395, "post_id": 39686879, "comment_id": 66689453, "body": "@immibis they are not in the language report, and they have &quot;unsafe&quot; in their names. Should be enough to infer they are no different from inline assembly."}, {"owner": {"reputation": 45534, "user_id": 106104, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/c88b9310b92a937108ec4336c2832f92?s=128&d=identicon&r=PG", "display_name": "user253751", "link": "https://stackoverflow.com/users/106104/user253751"}, "reply_to_user": {"reputation": 94553, "user_id": 775806, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/XNd2C.png?s=128&g=1", "display_name": "n. &#39;pronouns&#39; m.", "link": "https://stackoverflow.com/users/775806/n-pronouns-m"}, "edited": false, "score": 1, "creation_date": 1474883146, "post_id": 39686879, "comment_id": 66697348, "body": "@n.m. Just today someone asked what <code>mov $0, %eax</code> does in C."}], "answers": [{"tags": [], "owner": {"reputation": 507143, "user_id": 1048572, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/7f2c4de95e8f4f8f5a71c3aaf0ed312a?s=128&d=identicon&r=PG", "display_name": "Bergi", "link": "https://stackoverflow.com/users/1048572/bergi"}, "is_accepted": false, "score": 2, "last_activity_date": 1474807498, "creation_date": 1474807498, "answer_id": 39686974, "question_id": 39686879, "link": "https://stackoverflow.com/questions/39686879/passing-method-results-the-functional-way/39686974#39686974", "title": "Passing method results the functional way?", "body": "<p>Relying on variables is not a bad thing, declaring names for your values helps a lot to make code readable (if you use a more descriptive name than \"x\").</p>\n\n<p>You can of course write your functions in <a href=\"https://en.wikipedia.org/wiki/Tacit_programming\" rel=\"nofollow\">point-free style</a> as well:</p>\n\n<pre><code>main = print (myOtherFunction (myFunction myList))\n-- or\nmain = print $ myOtherFunction $ myFunction myList\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 507143, "user_id": 1048572, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/7f2c4de95e8f4f8f5a71c3aaf0ed312a?s=128&d=identicon&r=PG", "display_name": "Bergi", "link": "https://stackoverflow.com/users/1048572/bergi"}, "edited": false, "score": 1, "creation_date": 1474808991, "post_id": 39687040, "comment_id": 66673748, "body": "No. 3: function parameters"}], "tags": [], "owner": {"reputation": 76, "user_id": 5930115, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7622418483bed23e57e7aa4ef0a9a30b?s=128&d=identicon&r=PG&f=1", "display_name": "D-Y", "link": "https://stackoverflow.com/users/5930115/d-y"}, "is_accepted": true, "score": 4, "last_activity_date": 1474807906, "creation_date": 1474807906, "answer_id": 39687040, "question_id": 39686879, "link": "https://stackoverflow.com/questions/39686879/passing-method-results-the-functional-way/39687040#39687040", "title": "Passing method results the functional way?", "body": "<p>In haskell, there are two usual ways to define a local variable.</p>\n\n<ol>\n<li><p>The let-in binding</p>\n\n<pre><code>main = do\n  let x = myFunction myList\n    in print $ myOtherFunction x\n</code></pre></li>\n<li><p>the where clause</p>\n\n<pre><code>main = do\n  print $ myOtherFunction x\n  where x = myFunction myList\n</code></pre></li>\n</ol>\n\n<p>They are quite simple and consistent with natural language. Just remenber to be careful with the indention.</p>\n"}, {"tags": [], "owner": {"reputation": 384463, "user_id": 1126841, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fa05233b2357f8d11c22ef4cfc7bb85c?s=128&d=identicon&r=PG", "display_name": "chepner", "link": "https://stackoverflow.com/users/1126841/chepner"}, "is_accepted": false, "score": 3, "last_activity_date": 1474812879, "creation_date": 1474812879, "answer_id": 39687804, "question_id": 39686879, "link": "https://stackoverflow.com/questions/39686879/passing-method-results-the-functional-way/39687804#39687804", "title": "Passing method results the functional way?", "body": "<p><code>do</code> notation <em>looks</em> like imperative programming, but it's just syntactic sugar for purely function expressions. In this case, a <code>let</code> \"statement\" is simply the start of a regular <code>let</code> expression which has the remainder of the <code>do</code> expression as the body. </p>\n\n<pre><code>main = do let x = myFunction myList\n          in print $ myOtherFunction x\n</code></pre>\n\n<p>In a short expression like this, you might want to simply compose all three functions into one function called on <code>myList</code>:</p>\n\n<pre><code>main = print . myOtherFunction . myFunction $ myList\n</code></pre>\n"}], "owner": {"reputation": 2691, "user_id": 5477287, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/yKMgF.jpg?s=128&g=1", "display_name": "Babra Cunningham", "link": "https://stackoverflow.com/users/5477287/babra-cunningham"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 80, "favorite_count": 0, "accepted_answer_id": 39687040, "answer_count": 3, "score": 0, "last_activity_date": 1474812879, "creation_date": 1474806933, "question_id": 39686879, "link": "https://stackoverflow.com/questions/39686879/passing-method-results-the-functional-way", "title": "Passing method results the functional way?", "body": "<p>I have the following code:</p>\n\n<pre><code>myFunction :: [Int] -&gt; [Int]\nmyFunction (x : xs) = [\\x + 1 | x &lt;- xs]\n\nmyList = [1,2,3,4,5]\n\nmyOtherFunction :: [...]\n\nmain = do\n  let x = myFunction myList\n  print $ myOtherFunction x --Is this right for FP?\n</code></pre>\n\n<p>If I was to pass the result of myFunction into myOtherFunction, what is the standard way in haskell? </p>\n\n<p>Passing 'x' seems to me like cheating, as i'm relying on variables?</p>\n"}, {"tags": ["haskell", "hunit", "hspec"], "answers": [{"tags": [], "owner": {"reputation": 4538, "user_id": 499478, "user_type": "registered", "accept_rate": 63, "profile_image": "https://www.gravatar.com/avatar/791526e67831fbd70e3d179a6c585b44?s=128&d=identicon&r=PG", "display_name": "Wizek", "link": "https://stackoverflow.com/users/499478/wizek"}, "is_accepted": true, "score": 5, "last_activity_date": 1474807109, "last_edit_date": 1474807109, "creation_date": 1474806782, "answer_id": 39686854, "question_id": 39686692, "link": "https://stackoverflow.com/questions/39686692/is-it-possible-with-hspec-or-hunit-to-attach-further-information-to-assertions/39686854#39686854", "title": "Is it possible with HSpec (or HUnit) to attach further information to assertions that get printed in and only in case of failure?", "body": "<p>Yes, it seems to be possible:</p>\n\n<pre><code>import Control.Exception\nimport Test.HUnit.Lang (HUnitFailure(..))\n\nfailDetails details assert = do\n  assert `catch` \\(HUnitFailure loc msg) -&gt; do\n    throw $ HUnitFailure loc $ msg ++ \"\\n\" ++ details\n</code></pre>\n\n<p>We catch the exception thrown by <code>shouldBe</code>, amend the message, and rethrow it.</p>\n\n<p>We can even use it like:</p>\n\n<pre><code>1 `shouldBe` 2\n  $&gt; failDetails \"foobar\"\n</code></pre>\n\n<p>if we define:</p>\n\n<pre><code>($&gt;) = flip ($)\ninfixl 0 $&gt;\n{-# INLINE ($&gt;) #-}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 6218, "user_id": 962696, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c93e1ec07b42606f1efd7d7414f3c21d?s=128&d=identicon&r=PG&f=1", "display_name": "JonnyRaa", "link": "https://stackoverflow.com/users/962696/jonnyraa"}, "is_accepted": false, "score": 1, "last_activity_date": 1562328035, "creation_date": 1562328035, "answer_id": 56902673, "question_id": 39686692, "link": "https://stackoverflow.com/questions/39686692/is-it-possible-with-hspec-or-hunit-to-attach-further-information-to-assertions/56902673#56902673", "title": "Is it possible with HSpec (or HUnit) to attach further information to assertions that get printed in and only in case of failure?", "body": "<p>Inspired by @Wizek's answer, here's a version works with a newer version of HUnit and that is suitable for use with Selenium/WebDriver.</p>\n\n<p>It unpacks and repacks FailureReason's different constructors appropriately</p>\n\n<p>The key difference is the use of Control.Monad.Catch which lets you work with WD as opposed to IO.  </p>\n\n<p>Also there's no need to write the <code>$&gt;</code> operator - there's already <code>&amp;</code> from Data.Function</p>\n\n<pre><code>import Test.HUnit.Lang\nimport Control.Monad.Catch\nimport qualified Data.Text as Text\nimport Data.Function ((&amp;))\n\nfailDetails :: Text -&gt; WD () -&gt; WD ()\nfailDetails textMessage expectation =\n  expectation `catch` \\(HUnitFailure loc reason) -&gt;\n    throwM $ HUnitFailure loc $ addMessageTo reason\n  where\n  message :: String \n  message = Text.unpack textMessage\n\n  addMessageTo :: FailureReason -&gt; FailureReason\n  addMessageTo (Reason reason) = Reason $ reason ++ \"\\n\" ++ message\n  addMessageTo (ExpectedButGot preface expected actual) = \n    ExpectedButGot newPreface expected actual\n    where\n    newPreface = \n      case preface of \n      Nothing -&gt; Just message\n      Just existingMessage -&gt; Just $ existingMessage ++ \"\\n\" ++ message\n</code></pre>\n"}], "owner": {"reputation": 4538, "user_id": 499478, "user_type": "registered", "accept_rate": 63, "profile_image": "https://www.gravatar.com/avatar/791526e67831fbd70e3d179a6c585b44?s=128&d=identicon&r=PG", "display_name": "Wizek", "link": "https://stackoverflow.com/users/499478/wizek"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 213, "favorite_count": 0, "accepted_answer_id": 39686854, "answer_count": 2, "score": 3, "last_activity_date": 1562328035, "creation_date": 1474805744, "last_edit_date": 1474841245, "question_id": 39686692, "link": "https://stackoverflow.com/questions/39686692/is-it-possible-with-hspec-or-hunit-to-attach-further-information-to-assertions", "title": "Is it possible with HSpec (or HUnit) to attach further information to assertions that get printed in and only in case of failure?", "body": "<p>Similarly to how quickcheck supports counterexamples:</p>\n\n<pre><code>property \\x -&gt;\n  counterexample (\"Foo failed with: \" ++ ...) $\n    foo x\n</code></pre>\n\n<p>but in a way that it works with <code>shouldBe</code>, e.g.</p>\n\n<pre><code>failDetails (\" details: \" ++ baz a) $\n  a `shouldBe` 2\n</code></pre>\n\n<p>And I would like it to print something along the lines of:</p>\n\n<pre><code>expected: 2\n but got: 3\n details: ...\n</code></pre>\n"}, {"tags": ["haskell", "concurrency", "parallel-processing", "strictness"], "answers": [{"tags": [], "owner": {"reputation": 6159, "user_id": 754705, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/942fe51aac5dc523f0305439fa9a6e3d?s=128&d=identicon&r=PG&f=1", "display_name": "Michael", "link": "https://stackoverflow.com/users/754705/michael"}, "is_accepted": false, "score": 1, "last_activity_date": 1474826457, "creation_date": 1474826457, "answer_id": 39690038, "question_id": 39686633, "link": "https://stackoverflow.com/questions/39686633/is-evaluate-or-sufficient-to-whnf-force-a-value-in-a-multithreaded-monadic-co/39690038#39690038", "title": "Is evaluate or $! sufficient to WHNF-force a value in a multithreaded monadic context, or do I need pseq?", "body": "<p>If I'm not totally wrong, evaluating <code>last [0..]</code> to WHNF would take an infinite amount of time, because WHNF for an <code>Int</code> means that you know the exact number.</p>\n\n<p><code>putMVar</code> will not start executing before <code>last [0..]</code> is evaluated to WHNF (which as we know takes forever), because <code>putMVar</code> will need the <code>RealWorld</code>-token (<code>s</code>) returned by the call to <code>evaluate</code>. (Or to put it more simply: <code>evaluate</code> works. It finishes only after evaluating its argument to WHNF.)</p>\n\n<pre><code>evaluate :: a -&gt; IO a\nevaluate a = IO $ \\s -&gt; seq# a s\n--                     this    ^\n\nputMVar (MVar mvar#) x = IO $ \\ s# -&gt;\n--           which is used here ^^\n    case putMVar# mvar# x s# of\n--         is needed here ^^\n        s2# -&gt; (# s2#, () #)\n</code></pre>\n\n<p>where <code>seq#</code> is a GHC-prim function that guarantees to return <code>(# a, s #)</code> only after evaluating <code>a</code> to WHNF (that's its purpose). That is, only after <code>a</code> is evaluated to WHNF, <code>s</code> can be used in the call to <code>putMVar</code>. Although these tokens are purely imaginative (\"RealWorld is deeply magical...\"), they are respected by the compiler, and the whole IO-monad is built on top of it.</p>\n\n<p>So yes, <code>evaluate</code> is enough in this case. <code>evaluate</code> is more than <code>seq</code>: it combines IO-monadic sequencing with <code>seq#</code>-sequencing to produce its effect.</p>\n\n<hr>\n\n<p>In fact, the <code>pseq</code> version looks a bit fishy to me, because it ultimately depends on <code>lazy</code>, where <code>evaluate</code> ultimately depends on <code>seq#</code> and monadic token-passing. And I trust <code>seq#</code> a bit more.</p>\n"}, {"tags": [], "owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "is_accepted": true, "score": 0, "last_activity_date": 1474838741, "creation_date": 1474838741, "answer_id": 39691996, "question_id": 39686633, "link": "https://stackoverflow.com/questions/39686633/is-evaluate-or-sufficient-to-whnf-force-a-value-in-a-multithreaded-monadic-co/39691996#39691996", "title": "Is evaluate or $! sufficient to WHNF-force a value in a multithreaded monadic context, or do I need pseq?", "body": "<p>The point of <code>pseq</code> is to ensure that after the parent thread sparks a computation with <code>par</code>, it does not immediately proceed to try to evaluate the result of the sparked computation itself, but instead does its own job first. See <a href=\"https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/parallel.html#annotating-pure-code-for-parallelism\" rel=\"nofollow\">the documentation</a> for an example. When you're working more explicitly with concurrency, you shouldn't need <code>pseq</code>.</p>\n"}], "owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 101, "favorite_count": 0, "accepted_answer_id": 39691996, "answer_count": 2, "score": 1, "last_activity_date": 1474838741, "creation_date": 1474805366, "question_id": 39686633, "link": "https://stackoverflow.com/questions/39686633/is-evaluate-or-sufficient-to-whnf-force-a-value-in-a-multithreaded-monadic-co", "title": "Is evaluate or $! sufficient to WHNF-force a value in a multithreaded monadic context, or do I need pseq?", "body": "<p>The following seems to work (as in: it keeps saying <code>Surely tomorrow</code> every second)</p>\n\n<pre><code>import Control.Concurrent\nimport Control.Concurrent.MVar\n\nimport Control.Exception (evaluate)\n\nmain :: IO ()\nmain = do\n    godot &lt;- newEmptyMVar\n    forkIO $ do\n        g &lt;- evaluate $ last [0..]\n        putMVar godot g\n    let loop = do\n        threadDelay $ 10^6\n        g &lt;- tryTakeMVar godot\n        case g of\n            Just g -&gt; return ()\n            Nothing -&gt; putStrLn \"Surely tomorrow.\" &gt;&gt; loop\n    loop\n</code></pre>\n\n<p>This uses <a href=\"http://hackage.haskell.org/package/base-4.9.0.0/docs/Control-Exception-Base.html#v:evaluate\" rel=\"nofollow\"><code>evaluate</code></a> to ensure <code>last [0..]</code> is actually forced to WHFN before filling the <code>MVar</code> \u2013 if I change the forked thread to</p>\n\n<pre><code>    forkIO $ do\n        let g = last [0..]\n        putMVar godot g\n</code></pre>\n\n<p>then the program terminates.</p>\n\n<p>However, <code>evaluate</code> uses <code>seq</code>. In the context of deterministic parallelism, it's always emphasized that <code>seq</code> is not sufficient to actually guarantee evaluation order. Does this problem not arise in a monadic context, or should I better use</p>\n\n<pre><code>    forkIO $ do\n        let g = last [0..]\n        g `pseq` putMVar godot g\n</code></pre>\n\n<p>to ensure the compiler can't reorder the evaluation so <code>tryTakeMVar</code> succeeds prematurely?</p>\n"}, {"tags": ["haskell", "ghc", "type-level-computation"], "answers": [{"tags": [], "owner": {"reputation": 13807, "user_id": 2407038, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/538f6f4a9aa43841841de7d8e8b169fc?s=128&d=identicon&r=PG&f=1", "display_name": "user2407038", "link": "https://stackoverflow.com/users/2407038/user2407038"}, "is_accepted": true, "score": 3, "last_activity_date": 1474837749, "creation_date": 1474837749, "answer_id": 39691868, "question_id": 39686354, "link": "https://stackoverflow.com/questions/39686354/how-do-i-deconstruct-uncons-a-symbol/39691868#39691868", "title": "How do I deconstruct/uncons a Symbol?", "body": "<p>You can't - a type level <code>Symbol</code> is not a string composed of characters. <code>Symbol</code> is an infinite set of nominally distinct types which syntactically look like value level strings, but they have none of the properties of strings. In fact, other than being nominally distinct (and comparable) they have no other properties at all.</p>\n"}, {"comments": [{"owner": {"reputation": 25144, "user_id": 477476, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/Qf4TT.png?s=128&g=1", "display_name": "Cactus", "link": "https://stackoverflow.com/users/477476/cactus"}, "edited": false, "score": 0, "creation_date": 1474878792, "post_id": 39693226, "comment_id": 66694580, "body": "I&#39;d love to accept this answer since it is exactly what I&#39;d need for what I&#39;m trying to do; but unfortunately it&#39;s not yet in GHC. I&#39;ll make sure to change the accepted answer to this if it lands in GHC one day."}], "tags": [], "owner": {"reputation": 866, "user_id": 2872507, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/49ebde219395d677c399d8e950f5a48c?s=128&d=identicon&r=PG&f=1", "display_name": "Alexander Vieth", "link": "https://stackoverflow.com/users/2872507/alexander-vieth"}, "is_accepted": false, "score": 2, "last_activity_date": 1474850417, "creation_date": 1474850417, "answer_id": 39693226, "question_id": 39686354, "link": "https://stackoverflow.com/questions/39686354/how-do-i-deconstruct-uncons-a-symbol/39693226#39693226", "title": "How do I deconstruct/uncons a Symbol?", "body": "<p>Not possible in any released GHC, but if you want to do this, you can use my patch and join the discussion <a href=\"https://ghc.haskell.org/trac/ghc/ticket/11342\" rel=\"nofollow\">here</a>.</p>\n"}], "owner": {"reputation": 25144, "user_id": 477476, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/Qf4TT.png?s=128&g=1", "display_name": "Cactus", "link": "https://stackoverflow.com/users/477476/cactus"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 202, "favorite_count": 0, "accepted_answer_id": 39691868, "answer_count": 2, "score": 3, "last_activity_date": 1474850417, "creation_date": 1474803321, "question_id": 39686354, "link": "https://stackoverflow.com/questions/39686354/how-do-i-deconstruct-uncons-a-symbol", "title": "How do I deconstruct/uncons a Symbol?", "body": "<p>Given a type <code>s :: Symbol</code>, is there a way to define a type family by recursing over its characters one by one? I.e. as one would define a recursive function over a term-level string?</p>\n"}, {"tags": ["haskell", "recursion", "monads", "recursion-schemes"], "comments": [{"owner": {"reputation": 29966, "user_id": 637669, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0227e5d5eaceb8ae2f751df38d421764?s=128&d=identicon&r=PG", "display_name": "arrowd", "link": "https://stackoverflow.com/users/637669/arrowd"}, "edited": false, "score": 1, "creation_date": 1474799498, "post_id": 39685494, "comment_id": 66671169, "body": "You can place <code>_</code> instead any expression to ask GHC about its type."}, {"owner": {"reputation": 29966, "user_id": 637669, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0227e5d5eaceb8ae2f751df38d421764?s=128&d=identicon&r=PG", "display_name": "arrowd", "link": "https://stackoverflow.com/users/637669/arrowd"}, "edited": false, "score": 0, "creation_date": 1474799774, "post_id": 39685494, "comment_id": 66671244, "body": "And wrt. escaping: <code>t</code> is of <code>Recursive</code> class, which means it has <code>* -&gt; *</code> kind. This hints that gpospro return type isn&#39;t escaping anything and is wrapped into something. Which is probably a monad."}, {"owner": {"reputation": 10378, "user_id": 2476735, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/39e9447bbc32246fcd23b76b5e946618?s=128&d=identicon&r=PG&f=1", "display_name": "David Young", "link": "https://stackoverflow.com/users/2476735/david-young"}, "reply_to_user": {"reputation": 29966, "user_id": 637669, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0227e5d5eaceb8ae2f751df38d421764?s=128&d=identicon&r=PG", "display_name": "arrowd", "link": "https://stackoverflow.com/users/637669/arrowd"}, "edited": false, "score": 1, "creation_date": 1474813822, "post_id": 39685494, "comment_id": 66675237, "body": "@arrowd The above type signature would be impossible if that was the case because you cannot have a return type that has kind <code>* -&gt; *</code>."}], "answers": [{"comments": [{"owner": {"reputation": 29966, "user_id": 637669, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0227e5d5eaceb8ae2f751df38d421764?s=128&d=identicon&r=PG", "display_name": "arrowd", "link": "https://stackoverflow.com/users/637669/arrowd"}, "edited": false, "score": 0, "creation_date": 1474825259, "post_id": 39687068, "comment_id": 66678908, "body": "Mark your own answer as answer, then."}], "tags": [], "owner": {"reputation": 29209, "user_id": 495796, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/86637c99f25d60157aa0f2e7eab90148?s=128&d=identicon&r=PG", "display_name": "Robin Green", "link": "https://stackoverflow.com/users/495796/robin-green"}, "is_accepted": true, "score": 2, "last_activity_date": 1474864758, "last_edit_date": 1474864758, "creation_date": 1474808044, "answer_id": 39687068, "question_id": 39685494, "link": "https://stackoverflow.com/questions/39685494/how-does-gpostpro-escape-from-the-monad/39687068#39687068", "title": "How does gpostpro &quot;escape from the monad&quot;?", "body": "<p>I managed to get ghci to tell me what the types of subexpressions were by surrounding them in <code>(</code>...<code>:: _)</code>.</p>\n\n<p>Turns out, the trick is, the \"distributive law\" <code>k</code> allows you to shove the monad inside the temporary <code>Base</code> type, and then the <code>embed</code> method allows you to dispense with the temporary <code>Base</code> type and get back to <code>t</code>. If indeed the concrete type <code>t</code> doesn't mention <code>IO</code>, then it would be impossible to write such a <code>k</code> (safely) for the IO monad, for example. So there is no magic here - i.e. no way to use this function to escape from monads which would otherwise be unescapable, like IO.</p>\n"}], "owner": {"reputation": 29209, "user_id": 495796, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/86637c99f25d60157aa0f2e7eab90148?s=128&d=identicon&r=PG", "display_name": "Robin Green", "link": "https://stackoverflow.com/users/495796/robin-green"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 277, "favorite_count": 0, "accepted_answer_id": 39687068, "answer_count": 1, "score": 2, "last_activity_date": 1474864758, "creation_date": 1474796943, "question_id": 39685494, "link": "https://stackoverflow.com/questions/39685494/how-does-gpostpro-escape-from-the-monad", "title": "How does gpostpro &quot;escape from the monad&quot;?", "body": "<p>I am trying to understand how this very abstract recursive function from the Haskell <code>recursion-schemes</code> package works (or, indeed, what it does!) - from <a href=\"https://github.com/ekmett/recursion-schemes/blob/74ccfaea0e336e84978e47fca35b94e0c5f476f2/Data/Functor/Foldable.hs\" rel=\"nofollow\">this file</a>:</p>\n\n<pre><code>class Functor (Base t) =&gt; Corecursive t where\n\n  [...]\n\n  -- | A generalized postpromorphism\n  gpostpro\n    :: (Recursive t, Monad m)\n    =&gt; (forall b. m (Base t b) -&gt; Base t (m b)) -- distributive law\n    -&gt; (forall c. Base t c -&gt; Base t c)         -- natural transformation\n    -&gt; (a -&gt; Base t (m a))                      -- a (Base t)-m-coalgebra\n    -&gt; a                                        -- seed\n    -&gt; t\n  gpostpro k e g = a . return where a = embed . fmap (ana (e . project) . a . join) . k . liftM g\n</code></pre>\n\n<p>In particular, what I want to understand is: how does it apply the <code>g</code> function which mentions the monad type constructor <code>m</code>, but then return a value of the <code>t</code> type, which doesn't mention or depend on <code>m</code>? I thought escaping from arbitrary monads was impossible in Haskell!</p>\n\n<p>I first loaded the source file into Intero to try to use its type-at-point feature, but that attempt <a href=\"https://github.com/commercialhaskell/intero/issues/264\" rel=\"nofollow\">failed</a>.</p>\n\n<p>I then loaded it into GHCi using <code>cabal repl</code>, and tried to follow the types through the composed functions one at a time, using GHCi to help with type inference, by commenting out various bits of the definition. However, when I got to the <code>fmap</code>, I couldn't work out what to comment out, because if I uncommented the recursive <code>a</code> invocation but commented out other stuff, I thought it probably wouldn't even compile because the partially-commented-out <em>definition</em> of <code>a</code> wouldn't have the right type.</p>\n"}, {"tags": ["haskell", "types"], "answers": [{"comments": [{"owner": {"reputation": 2691, "user_id": 5477287, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/yKMgF.jpg?s=128&g=1", "display_name": "Babra Cunningham", "link": "https://stackoverflow.com/users/5477287/babra-cunningham"}, "edited": false, "score": 0, "creation_date": 1474793620, "post_id": 39685016, "comment_id": 66669721, "body": "In an imperative lang, like c++, some compilers would interpret &#39;x == Age&#39; as &#39;x is of type Age&#39;, thats the madness behind the method.."}, {"owner": {"reputation": 12941, "user_id": 292731, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/e3f90adedab79538799e2375a9731920?s=128&d=identicon&r=PG", "display_name": "Justin L.", "link": "https://stackoverflow.com/users/292731/justin-l"}, "reply_to_user": {"reputation": 2691, "user_id": 5477287, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/yKMgF.jpg?s=128&g=1", "display_name": "Babra Cunningham", "link": "https://stackoverflow.com/users/5477287/babra-cunningham"}, "edited": false, "score": 1, "creation_date": 1474793733, "post_id": 39685016, "comment_id": 66669757, "body": "I don&#39;t quite think that that&#39;s a property of imperative languages :o  That&#39;s just how the language treats <code>==</code>, but it&#39;s not a particularly imperative thing. could be just as likely in a functional language :)"}, {"owner": {"reputation": 12941, "user_id": 292731, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/e3f90adedab79538799e2375a9731920?s=128&d=identicon&r=PG", "display_name": "Justin L.", "link": "https://stackoverflow.com/users/292731/justin-l"}, "reply_to_user": {"reputation": 2691, "user_id": 5477287, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/yKMgF.jpg?s=128&g=1", "display_name": "Babra Cunningham", "link": "https://stackoverflow.com/users/5477287/babra-cunningham"}, "edited": false, "score": 0, "creation_date": 1474793786, "post_id": 39685016, "comment_id": 66669777, "body": "Also, remember that <code>x</code> is never &quot;of type <code>Age</code>&quot;, here, because <code>Age</code> is not a type.  <code>x</code> is always of type <code>MyData</code>."}, {"owner": {"reputation": 2691, "user_id": 5477287, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/yKMgF.jpg?s=128&g=1", "display_name": "Babra Cunningham", "link": "https://stackoverflow.com/users/5477287/babra-cunningham"}, "edited": false, "score": 0, "creation_date": 1474794305, "post_id": 39685016, "comment_id": 66669905, "body": "Thank you, helpful answer! Also, your blog looks interesting :)"}, {"owner": {"reputation": 780, "user_id": 4647583, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8ed29ba29164901d431c9755a8fc9a14?s=128&d=identicon&r=PG", "display_name": "Otomo", "link": "https://stackoverflow.com/users/4647583/otomo"}, "edited": false, "score": 1, "creation_date": 1474802939, "post_id": 39685016, "comment_id": 66672061, "body": "Your statement about C++ is wrong ... That doesn&#39;t work that way in C++ either"}], "tags": [], "owner": {"reputation": 12941, "user_id": 292731, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/e3f90adedab79538799e2375a9731920?s=128&d=identicon&r=PG", "display_name": "Justin L.", "link": "https://stackoverflow.com/users/292731/justin-l"}, "is_accepted": true, "score": 5, "last_activity_date": 1474794004, "last_edit_date": 1474794004, "creation_date": 1474793442, "answer_id": 39685016, "question_id": 39684914, "link": "https://stackoverflow.com/questions/39684914/extracting-values-from-list-based-on-their-type/39685016#39685016", "title": "Extracting values from list based on their type?", "body": "<p>You can't really have <code>x == Age</code> ... that doesn't make sense.  You can only compare <code>x</code> to other values of type <code>MyData</code>, like <code>Age 10</code>, or <code>DOB 40</code>, or <code>Name \"John\"</code>.  <code>Age</code> doesn't have type <code>MyData</code> ... it has type <code>Int -&gt; MyData</code>.</p>\n\n<p>You can check what constructor a value has by using case statements:</p>\n\n<pre><code>myFunction :: [MyData] -&gt; MyData\nmyFunction (x:xs) = case x of\n                      Age _     -&gt; ...\n                      DOB _     -&gt; ...\n                      Name _    -&gt; ...\n                      Address _ -&gt; ...\n</code></pre>\n\n<p>Or if you only care about the <code>Age</code> constructor, you can wildcard everything else:</p>\n\n<pre><code>myFunction :: [MyData] -&gt; MyData\nmyFunction (x:xs) = case x of\n                      Age _ -&gt; ...\n                      _     -&gt; ...\n</code></pre>\n\n<p>Also note that you might actually be wanting to return a <code>[MyData]</code>, not a <code>MyData</code>.</p>\n\n<p>For what it's worth, a nicer way to write this function might be</p>\n\n<pre><code>myFunction :: [MyData] -&gt; [MyData]\nmyFunction xs = [ x | x@(Age _) &lt;- xs ]\n</code></pre>\n\n<p>Or you can use a higher order function instead of explicit recursion, which tends to be more prone to bugs:</p>\n\n<pre><code>myFunction :: [MyData] -&gt; [MyData]\nmyFunction = mapMaybe (\\x -&gt; case x of Age _ -&gt; Just x; _ -&gt; Nothing)\n</code></pre>\n\n<p><strong>EDIT</strong>: Be careful of the language you're using here in the question -- all values of <code>x</code> have the <em>same</em> type, here -- <code>MyData</code>.  <code>Age 10</code> has the same type as <code>DOB 40</code>.  They are all values of the same type, just created using different constructors.  So this isn't filtering a list for values of a certain type -- it's filtering it for values created by a certain constructor.</p>\n"}], "owner": {"reputation": 2691, "user_id": 5477287, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/yKMgF.jpg?s=128&g=1", "display_name": "Babra Cunningham", "link": "https://stackoverflow.com/users/5477287/babra-cunningham"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 41, "favorite_count": 0, "accepted_answer_id": 39685016, "answer_count": 1, "score": 0, "last_activity_date": 1474794004, "creation_date": 1474792662, "question_id": 39684914, "link": "https://stackoverflow.com/questions/39684914/extracting-values-from-list-based-on-their-type", "title": "Extracting values from list based on their type?", "body": "<p>Im trying to iterate over a list of custom data types, and exact the value of a specific type. In this case, I want the <strong>ages</strong> from the list:</p>\n\n<pre><code>data MyData = Age Int | DOB Int | Name String | Address String\n\nmyList = [Age 89, DOB 13, Age 33, Name \"Barbra\", Address \"103 Lane\"]\n\nmyFunction :: [MyData] -&gt; MyData\nmyFunction (x : xs) = if x == Age then x : myFunction xs else myFunction xs\n</code></pre>\n\n<p>Error: </p>\n\n<pre><code>\"Age is applied to too few arguments\"\n</code></pre>\n\n<p>Whats the best solution for this?</p>\n"}, {"tags": ["haskell", "import", "module", "haskell-stack"], "answers": [{"comments": [{"owner": {"reputation": 21417, "user_id": 925978, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/06e4467a5bd1538a92cefb20db07897a?s=128&d=identicon&r=PG&f=1", "display_name": "crockeea", "link": "https://stackoverflow.com/users/925978/crockeea"}, "reply_to_user": {"reputation": 986, "user_id": 6819040, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/IJDZr.jpg?s=128&g=1", "display_name": "AurevoirXavier", "link": "https://stackoverflow.com/users/6819040/aurevoirxavier"}, "edited": false, "score": 0, "creation_date": 1474827241, "post_id": 39684170, "comment_id": 66679638, "body": "I&#39;m not sure what you&#39;re asking. Create a cabal file <code>xxxx.cabal</code>, add a library/executable section, and add <code>containers</code> in the <code>build-depends</code> section. See <a href=\"http://stackoverflow.com/a/12305972/925978\">this answer</a>."}], "tags": [], "owner": {"reputation": 21417, "user_id": 925978, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/06e4467a5bd1538a92cefb20db07897a?s=128&d=identicon&r=PG&f=1", "display_name": "crockeea", "link": "https://stackoverflow.com/users/925978/crockeea"}, "is_accepted": true, "score": 18, "last_activity_date": 1474785772, "creation_date": 1474785772, "answer_id": 39684170, "question_id": 39683998, "link": "https://stackoverflow.com/questions/39683998/could-not-find-module-data-map-it-is-a-member-of-the-hidden-package/39684170#39684170", "title": "Could not find module `Data.Map&#39; -- It is a member of the hidden package", "body": "<p>The reason you can import <code>Data.Char</code> and <code>Data.List</code> is that they are part of the package <code>base</code>, which is included with GHC and is always loaded with GHCi. By contrast, <code>Data.Map</code> is in the external library <code>containers</code>. One way to load it with <code>stack ghci</code> is to add a cabal file with a <code>build-depends</code> on <code>containers</code>. This will install it in the stack environment for <code>xxxx</code>, so it will then be accessible.</p>\n"}, {"comments": [{"owner": {"reputation": 3985, "user_id": 387527, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/2ee4bf552ca59c2f324e666a3de008bd?s=128&d=identicon&r=PG", "display_name": "agam", "link": "https://stackoverflow.com/users/387527/agam"}, "edited": false, "score": 5, "creation_date": 1521695499, "post_id": 49291575, "comment_id": 85842948, "body": "Thanks for the explanation! (the previous answer &quot;gave me a fish&quot; instead of &quot;showing me how to fish&quot;)"}, {"owner": {"reputation": 4004, "user_id": 1498178, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/2a7f53f1d991f2ab18a4957a1f192960?s=128&d=identicon&r=PG", "display_name": "toraritte", "link": "https://stackoverflow.com/users/1498178/toraritte"}, "reply_to_user": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 1, "creation_date": 1542388070, "post_id": 49291575, "comment_id": 93563724, "body": "@dfeuer Thanks a lot for the edit! I just realized how inaccessible it was with the image..."}, {"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 1, "creation_date": 1542388360, "post_id": 49291575, "comment_id": 93563855, "body": "@toraritte, you&#39;re welcome. Hopefully we&#39;ll be able to make some progress towards accessibility."}], "tags": [], "owner": {"reputation": 4004, "user_id": 1498178, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/2a7f53f1d991f2ab18a4957a1f192960?s=128&d=identicon&r=PG", "display_name": "toraritte", "link": "https://stackoverflow.com/users/1498178/toraritte"}, "is_accepted": false, "score": 39, "last_activity_date": 1554736659, "last_edit_date": 1554736659, "creation_date": 1521087966, "answer_id": 49291575, "question_id": 39683998, "link": "https://stackoverflow.com/questions/39683998/could-not-find-module-data-map-it-is-a-member-of-the-hidden-package/49291575#49291575", "title": "Could not find module `Data.Map&#39; -- It is a member of the hidden package", "body": "<p><a href=\"https://github.com/commercialhaskell/stack/wiki/New-to-Haskell#general-usage\" rel=\"noreferrer\">These general steps</a> were helpful for me to resolve similar issues:</p>\n\n<ol>\n<li><p><strong>Use <a href=\"https://www.haskell.org/hoogle/\" rel=\"noreferrer\">Hoogle</a> or <a href=\"https://www.stackage.org/\" rel=\"noreferrer\">Stackage</a> to find the package where the module resides</strong></p>\n\n<p>Note that <a href=\"https://www.haskell.org/hoogle/\" rel=\"noreferrer\">Hoogle</a> and <a href=\"https://www.stackage.org/\" rel=\"noreferrer\">Stackage</a> are <em>case-sensitive</em>. Looking up <code>Data.Map</code> in <a href=\"https://www.haskell.org/hoogle/\" rel=\"noreferrer\">Hoogle</a> yields a list similar to the one below. <a href=\"https://www.stackage.org/\" rel=\"noreferrer\">Stackage</a> has a slightly different style, but the basics are the same (mostly because it also uses Hoogle for lookup).</p></li>\n</ol>\n\n<p>The lines in green under the result headings show the name(s) of the containing</p>\n\n<p>(1) package(s) (in small caps) and</p>\n\n<p>(2) module(s) (capitalized).</p>\n\n<p><a href=\"https://i.stack.imgur.com/VsPR7.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/VsPR7.png\" alt=\"Hoogle result for Data.Map\"></a></p>\n\n<ol start=\"2\">\n<li><p><strong>Open</strong> <code>project-name.cabal</code> <strong>in project root and add required package under</strong> <code>build-depends:</code></p>\n\n<pre><code>library\n  hs-source-dirs:\n      src\n\n  build-depends:\n      base &gt;= 4.7 &amp;&amp; &lt; 5\n    , containers\n\n  exposed-modules:\n      Lib\n</code></pre></li>\n<li><p><strong>Issue</strong> <code>stack build</code> <strong>to download and build dependencies</strong></p>\n\n<p>(or <code>stack ghci</code> if you plan to use it in the REPL)</p></li>\n</ol>\n"}], "owner": {"reputation": 986, "user_id": 6819040, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/IJDZr.jpg?s=128&g=1", "display_name": "AurevoirXavier", "link": "https://stackoverflow.com/users/6819040/aurevoirxavier"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 11475, "favorite_count": 5, "accepted_answer_id": 39684170, "answer_count": 2, "score": 24, "last_activity_date": 1560805134, "creation_date": 1474784071, "last_edit_date": 1560805134, "question_id": 39683998, "link": "https://stackoverflow.com/questions/39683998/could-not-find-module-data-map-it-is-a-member-of-the-hidden-package", "title": "Could not find module `Data.Map&#39; -- It is a member of the hidden package", "body": "<p>First, I created a new workspace:</p>\n\n<pre><code>stack new xxxx\nstack init\nstack build\n</code></pre>\n\n<p>then</p>\n\n<pre><code>cd xxx\\app\nstack ghci\nimport Data.Map\n</code></pre>\n\n<p>I can import other modules like <code>Data.Char</code> and <code>Data.List</code>, but I can't import <code>Data.Map</code>. GHCi told me:</p>\n\n<pre><code>Could not find module 'Data.Map'\n It is a member of the hidden package 'containers-0.5.7.1@containers-0.5.7.1'.`\n</code></pre>\n"}, {"tags": ["haskell", "haskell-stack"], "comments": [{"owner": {"reputation": 2831, "user_id": 183792, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9ddcfbc6c31012fd25384f6301363347?s=128&d=identicon&r=PG&f=1", "display_name": "Michael", "link": "https://stackoverflow.com/users/183792/michael"}, "edited": false, "score": 0, "creation_date": 1474750548, "post_id": 39680087, "comment_id": 66661993, "body": "<code>module Example () where</code> should read <code>module Example where</code> or <code>module Example (get,getCode) where</code>. As it is you are exporting nothing from <code>Example</code> (Any class instances you defined would nevertheless be exported because of the special way classes work.)"}, {"owner": {"reputation": 1947, "user_id": 1475898, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/09d3a80a2c8bf17d4a755fcfd955efd8?s=128&d=identicon&r=PG", "display_name": "Comforse", "link": "https://stackoverflow.com/users/1475898/comforse"}, "reply_to_user": {"reputation": 2831, "user_id": 183792, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9ddcfbc6c31012fd25384f6301363347?s=128&d=identicon&r=PG&f=1", "display_name": "Michael", "link": "https://stackoverflow.com/users/183792/michael"}, "edited": false, "score": 0, "creation_date": 1474750809, "post_id": 39680087, "comment_id": 66662058, "body": "@Michael thanks! However, that does not fix the issue."}], "answers": [{"comments": [{"owner": {"reputation": 1947, "user_id": 1475898, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/09d3a80a2c8bf17d4a755fcfd955efd8?s=128&d=identicon&r=PG", "display_name": "Comforse", "link": "https://stackoverflow.com/users/1475898/comforse"}, "edited": false, "score": 0, "creation_date": 1474745814, "post_id": 39680164, "comment_id": 66660753, "body": "Tried every option, got the same error. Do I need to run anything else other than <code>stack build</code> ?"}, {"owner": {"reputation": 2831, "user_id": 183792, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9ddcfbc6c31012fd25384f6301363347?s=128&d=identicon&r=PG&f=1", "display_name": "Michael", "link": "https://stackoverflow.com/users/183792/michael"}, "edited": false, "score": 0, "creation_date": 1474754359, "post_id": 39680164, "comment_id": 66662923, "body": "Did you move <code>Example.hs</code> into <code>src</code> and strike it from the stanza about <code>slack-client-exe</code>?  You need to add <code>HTTP</code> to the <code>build-depends</code> for the library since <code>Example</code> uses it. The error message is saying that it knowns about a module <code>Network.HTTP</code> but isn&#39;t permitted to look at it since the <code>HTTP</code> library is not mentioned."}], "tags": [], "owner": {"reputation": 29966, "user_id": 637669, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0227e5d5eaceb8ae2f751df38d421764?s=128&d=identicon&r=PG", "display_name": "arrowd", "link": "https://stackoverflow.com/users/637669/arrowd"}, "is_accepted": true, "score": 1, "last_activity_date": 1474749388, "last_edit_date": 1474749388, "creation_date": 1474745368, "answer_id": 39680164, "question_id": 39680087, "link": "https://stackoverflow.com/questions/39680087/stack-fails-to-build/39680164#39680164", "title": "Stack fails to build", "body": "<p>If you want your `Example module to be a part of executable, add to this section</p>\n\n<pre><code>executable slack-client-exe\n  hs-source-dirs:      app\n  main-is:             Main.hs\n</code></pre>\n\n<p>this line: <code>other-modules: Example</code>.</p>\n\n<p>If you want it to be a part of the library, change</p>\n\n<pre><code>library\n  hs-source-dirs:      src\n  exposed-modules:     Lib\n</code></pre>\n\n<p>to</p>\n\n<pre><code>library\n  hs-source-dirs:      src\n  exposed-modules:     Lib, Example\n</code></pre>\n\n<p>And take a look at <a href=\"https://www.haskell.org/cabal/users-guide/developing-packages.html\" rel=\"nofollow\">cabal documentation</a>.</p>\n"}], "owner": {"reputation": 1947, "user_id": 1475898, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/09d3a80a2c8bf17d4a755fcfd955efd8?s=128&d=identicon&r=PG", "display_name": "Comforse", "link": "https://stackoverflow.com/users/1475898/comforse"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 435, "favorite_count": 0, "accepted_answer_id": 39680164, "answer_count": 1, "score": 1, "last_activity_date": 1483470249, "creation_date": 1474744880, "last_edit_date": 1483470249, "question_id": 39680087, "link": "https://stackoverflow.com/questions/39680087/stack-fails-to-build", "title": "Stack fails to build", "body": "<p>I am trying to learn haskell here (don't ask why), and I am starting with a very simple code, that i even copied from github.</p>\n\n<p>So the code is this:</p>\n\n<pre><code>module Example () where\n\nimport Network.HTTP\n\n-- Non HTTPS\n\n-- 1. Perform a basic HTTP get request and return the body\nget :: String -&gt; IO String\nget url = simpleHTTP (getRequest url) &gt;&gt;= getResponseBody\n\n-- 2. Get the response code\ngetCode :: String -&gt; IO ResponseCode\ngetCode url = simpleHTTP req &gt;&gt;= getResponseCode\n    where req = getRequest url\n</code></pre>\n\n<p>However, when I run <code>stack build</code> I get this:</p>\n\n<pre><code>slack-client-0.1.0.0: build\nPreprocessing library slack-client-0.1.0.0...\n[2 of 2] Compiling Example          ( src\\Example.hs, .stack-work\\dist\\b7fec021\\\nbuild\\Example.o )\n\nD:\\haskell\\slack-client\\src\\Example.hs:3:1: error:\n    Failed to load interface for `Network.HTTP'\n    It is a member of the hidden package `HTTP-4000.3.3'.\n    Perhaps you need to add `HTTP' to the build-depends in your .cabal file.\n    Use -v to see a list of the files searched for.\n\n--  While building package slack-client-0.1.0.0 using:\n      C:\\Users\\Mihai\\AppData\\Roaming\\stack\\setup-exe-cache\\x86_64-windows\\setup-\nSimple-Cabal-1.24.0.0-ghc-8.0.1.exe --builddir=.stack-work\\dist\\b7fec021 build l\nib:slack-client exe:slack-client-exe --ghc-options \" -ddump-hi -ddump-to-file\"\n    Process exited with code: ExitFailure 1\n</code></pre>\n\n<p>This is my <code>.cabal</code> file:</p>\n\n<pre><code>name:                slack-client\nversion:             0.1.0.0\nsynopsis:            Initial project template from stack\ndescription:         Please see README.md\nhomepage:            https://github.com/githubuser/slack-client#readme\nlicense:             BSD3\nlicense-file:        LICENSE\nauthor:              Author name here\nmaintainer:          example@example.com\ncopyright:           2016 Author name here\ncategory:            Web\nbuild-type:          Simple\n-- extra-source-files:\ncabal-version:       &gt;=1.10\n\nlibrary\n  hs-source-dirs:      src\n  exposed-modules:     Lib\n  other-modules:       Example\n  build-depends:       base &gt;= 4.7 &amp;&amp; &lt; 5\n  default-language:    Haskell2010\n\nexecutable slack-client-exe\n  hs-source-dirs:      app\n  main-is:             Main.hs\n  other-modules:       Example\n  ghc-options:         -threaded -rtsopts -with-rtsopts=-N\n  build-depends:       base\n                     , HTTP\n                     , HTTP-Simple\n                     , slack-client\n  default-language:    Haskell2010\n\ntest-suite slack-client-test\n  type:                exitcode-stdio-1.0\n  hs-source-dirs:      test\n  main-is:             Spec.hs\n  build-depends:       base\n                     , HTTP-Simple\n                     , slack-client\n  ghc-options:         -threaded -rtsopts -with-rtsopts=-N\n  default-language:    Haskell2010\n\nsource-repository head\n  type:     git\n  location: https://github.com/githubuser/slack-client\n</code></pre>\n\n<p>What am i doing wrong? </p>\n"}, {"tags": ["haskell"], "comments": [{"owner": {"reputation": 78982, "user_id": 1848654, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/84180c0f3c9c04f8b8f0613fc0129dac?s=128&d=identicon&r=PG", "display_name": "melpomene", "link": "https://stackoverflow.com/users/1848654/melpomene"}, "edited": false, "score": 0, "creation_date": 1474747464, "post_id": 39679842, "comment_id": 66661234, "body": "Try <code>notify subs ev = do { forM_ subs $ \\s -&gt; s ev; return (length subs) }</code>."}, {"owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "reply_to_user": {"reputation": 78982, "user_id": 1848654, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/84180c0f3c9c04f8b8f0613fc0129dac?s=128&d=identicon&r=PG", "display_name": "melpomene", "link": "https://stackoverflow.com/users/1848654/melpomene"}, "edited": false, "score": 0, "creation_date": 1474748133, "post_id": 39679842, "comment_id": 66661400, "body": "@melpomene Not compiling, unfortunately: <code>Main.hs:14:41: error:     * Couldn&#39;t match expected type `m b0&#39; with actual type `t1&#39;       `t1&#39; is a rigid type variable bound by         the type signature for:           notify :: forall (m :: * -&gt; *) (t :: * -&gt; *) a1 a t1.                     (Monad m, Foldable t, Num a1) =&gt;                     t (RxEvent a -&gt; t1) -&gt; RxEvent a -&gt; m a1         at Main.hs:13:11 .. </code>"}, {"owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "reply_to_user": {"reputation": 78982, "user_id": 1848654, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/84180c0f3c9c04f8b8f0613fc0129dac?s=128&d=identicon&r=PG", "display_name": "melpomene", "link": "https://stackoverflow.com/users/1848654/melpomene"}, "edited": false, "score": 0, "creation_date": 1474759666, "post_id": 39679842, "comment_id": 66663951, "body": "4 hours after posting the question still nothing but a down vote and an explanatory answer, yet no solution. I would assume this is an easy question for experienced haskell users. Hence, I cannot see, why no one has mercy on me and helps me out with this. Is there some magical mystical fairy buried inside my question? Some implications which make it so hard?"}, {"owner": {"reputation": 78982, "user_id": 1848654, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/84180c0f3c9c04f8b8f0613fc0129dac?s=128&d=identicon&r=PG", "display_name": "melpomene", "link": "https://stackoverflow.com/users/1848654/melpomene"}, "edited": false, "score": 0, "creation_date": 1474759935, "post_id": 39679842, "comment_id": 66663993, "body": "My code works if you remove your type signature."}, {"owner": {"reputation": 78982, "user_id": 1848654, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/84180c0f3c9c04f8b8f0613fc0129dac?s=128&d=identicon&r=PG", "display_name": "melpomene", "link": "https://stackoverflow.com/users/1848654/melpomene"}, "edited": false, "score": 1, "creation_date": 1474760170, "post_id": 39679842, "comment_id": 66664037, "body": "Alternatively, if you want to keep using a fold: <code>notify subs ev = foldM (\\c s -&gt; s ev &gt;&gt; return (c+1)) 0 subs</code>"}, {"owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "reply_to_user": {"reputation": 78982, "user_id": 1848654, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/84180c0f3c9c04f8b8f0613fc0129dac?s=128&d=identicon&r=PG", "display_name": "melpomene", "link": "https://stackoverflow.com/users/1848654/melpomene"}, "edited": false, "score": 0, "creation_date": 1474765325, "post_id": 39679842, "comment_id": 66664894, "body": "@melpomene Thank you so much - this is very much compatible with the way my non-monadic brain works ;) I still ponder about the change of the signature of <code>notify</code> but I think the way it looks now is okay for me."}], "answers": [{"comments": [{"owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "edited": false, "score": 0, "creation_date": 1474747359, "post_id": 39680326, "comment_id": 66661197, "body": "Can you show how that looks inside the lambda of the foldl call?"}], "tags": [], "owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "is_accepted": false, "score": 5, "last_activity_date": 1474746531, "creation_date": 1474746531, "answer_id": 39680326, "question_id": 39679842, "link": "https://stackoverflow.com/questions/39679842/functions-o1-o3-never-called-despite-best-efforts/39680326#39680326", "title": "Functions o1 .. o3 never called despite best efforts", "body": "<p><code>seq</code> ensures that <code>IO</code> actions are evaluated, but not executed. For instance</p>\n\n<pre><code>print (seq (print 45) 12)\n</code></pre>\n\n<p>prints \"12\", not \"45 12\". The <code>print 45</code> part is evaluated so to to produce an <code>IO ()</code> value, which however is never executed.</p>\n\n<p>To run an IO action, you have to use <code>&gt;&gt;=</code>, directly or indirectly.</p>\n"}, {"comments": [{"owner": {"reputation": 1706, "user_id": 1840613, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c2dfd4d21060ccd9b972864e0f6cb8c4?s=128&d=identicon&r=PG", "display_name": "Jeremy List", "link": "https://stackoverflow.com/users/1840613/jeremy-list"}, "edited": false, "score": 0, "creation_date": 1474947258, "post_id": 39686164, "comment_id": 66728896, "body": "<code>foldM</code> isn&#39;t magic: I think in <code>Control.Monad</code> it&#39;s implemented as a recursive function but you can also implement it with <code>foldr</code> (<code>foldl</code> also kind of works but not for infinite lists)"}, {"owner": {"reputation": 1706, "user_id": 1840613, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c2dfd4d21060ccd9b972864e0f6cb8c4?s=128&d=identicon&r=PG", "display_name": "Jeremy List", "link": "https://stackoverflow.com/users/1840613/jeremy-list"}, "edited": false, "score": 0, "creation_date": 1474947761, "post_id": 39686164, "comment_id": 66729023, "body": "Specifically: <code>foldM f b l = foldr (\\a n o -&gt; f o a &gt;&gt;= n) return l b</code> works fine"}], "tags": [], "owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "is_accepted": false, "score": 1, "last_activity_date": 1474802285, "last_edit_date": 1474802285, "creation_date": 1474801854, "answer_id": 39686164, "question_id": 39679842, "link": "https://stackoverflow.com/questions/39679842/functions-o1-o3-never-called-despite-best-efforts/39686164#39686164", "title": "Functions o1 .. o3 never called despite best efforts", "body": "<p>I had been aware that the invocation of the target functions should be in a monadic context. So, remembering the cryptically meaningful <code>_</code> functions and the functions ending in an <code>M</code> I saw now and then, I tried in ghci stuff like <code>:t foldlM</code> and <code>:t foldlM_</code> but of course they were not in scope because they are within <code>Control.Monad</code> package. A package I had not referenced...</p>\n\n<p>Grace to the comments to my question, the working version of my code snippet looks like this:</p>\n\n<pre><code>module Main(main) where \n\nimport Text.Printf\nimport Control.Monad\n\ndata RxEvent a =\n    Value a\n    | Error String\n    | Done\n    deriving (Show,Eq)\n\nnotify :: (Foldable t, Num b, Monad m) =&gt; t (RxEvent t1 -&gt; m a) -&gt; RxEvent t1 -&gt; m b\nnotify subs ev = foldM (\\ c s -&gt; s ev &gt;&gt; return (c+1)) 0 subs\n\no name ev = do\n    putStrLn name\n    print ev\n    return 0\n\no1 = o \"o1:\"\no2 = o \"o2:\"\no3 = o \"o3:\"\n\nmain = do\n    nNotified &lt;- notify [o1,o2,o3] (Value 42) :: IO Int\n    printf \"%d subscribers notified\\n\" nNotified\n    return ()\n</code></pre>\n\n<p>Lesson learned: For someone trying to learn Haskell alone in an empirical manner without spending hours to learn what a random number of packages hold, getting stuck on such quite easy things is to be expected.</p>\n\n<p>What I still don't quite understand is, why the contents of Control.Monad is in an extra package and not part of Prelude, since without those functions, it is quite impossible to get anything simple going...</p>\n\n<p>Here, finally the hoped for output:</p>\n\n<pre><code>o1:\nValue 42\no2:\nValue 42\no3:\nValue 42\n3 subscribers notified\n</code></pre>\n"}], "owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 78, "favorite_count": 0, "answer_count": 2, "score": -2, "last_activity_date": 1474802285, "creation_date": 1474743094, "question_id": 39679842, "link": "https://stackoverflow.com/questions/39679842/functions-o1-o3-never-called-despite-best-efforts", "title": "Functions o1 .. o3 never called despite best efforts", "body": "<pre><code>module Main(main) where \n\nimport Text.Printf\n\ndata RxEvent a =\n    Value a\n    | Error String\n    | Done\n    deriving (Show,Eq)\n\nnotify :: (Monad m, Foldable t, Num a1) =&gt; t (RxEvent a -&gt; t1) -&gt; RxEvent a -&gt; m a1\nnotify subs ev =\n    return $ Prelude.foldl (\\ c s -&gt; seq (s ev) (c+1) ) 0 subs\n\no name ev = do\n    putStrLn name\n    print ev\n    return 0\n\no1 = o \"o1:\"\no2 = o \"o2:\"\no3 = o \"o3:\"\n\nmain = do\n    nNotified &lt;- notify [o1,o2,o3] (Value 42) :: IO Int\n    printf \"%d subscribers notified\\n\" nNotified\n    return ()\n</code></pre>\n\n<p>It appears, the <code>seq</code> fails on me in the above code snippet. The <code>foldl</code> function visits all 3 members of the list and yet, no output is visible from functions <code>o1 o2 o3</code>. What did I do wrong this time? :)</p>\n\n<p>Run within ghci with <code>:main</code> produces only \"3 subscribers notified\" but no output from the functions it was supposed to notify.</p>\n"}, {"tags": ["haskell", "char"], "comments": [{"owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "edited": false, "score": 2, "creation_date": 1474741331, "post_id": 39679576, "comment_id": 66659438, "body": "<i>Always use type signatures</i>. What type do you want the result of <code>nRaizes</code> to be?"}, {"owner": {"reputation": 39, "user_id": 6875547, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/9F7xI.png?s=128&g=1", "display_name": "62random", "link": "https://stackoverflow.com/users/6875547/62random"}, "reply_to_user": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "edited": false, "score": 0, "creation_date": 1474742287, "post_id": 39679576, "comment_id": 66659707, "body": "Sorry, i don&#39;t know what signatures are, i am really just starting x). I want the result of nRaizes to be either the number 2, 1 or 0. Thanks."}, {"owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "edited": false, "score": 0, "creation_date": 1474742476, "post_id": 39679576, "comment_id": 66659752, "body": "A type signature specifies what sorts of objects a function takes as arguments, and which sorts of objects the result are supposed to be. For example, <code>length :: [a] -&gt; Int</code> specifies that <code>length</code> takes a list of arbitrary-typed arguments and yields a machine-size integer as the result."}], "answers": [{"comments": [{"owner": {"reputation": 39, "user_id": 6875547, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/9F7xI.png?s=128&g=1", "display_name": "62random", "link": "https://stackoverflow.com/users/6875547/62random"}, "edited": false, "score": 0, "creation_date": 1474747284, "post_id": 39680160, "comment_id": 66661173, "body": "Wow.. thanks a lot!! I had no idea of how bad this was, and your answer is definitely going to help me a lot! Thanks man."}, {"owner": {"reputation": 9485, "user_id": 20371, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/32c7a412ad0caf812ae974df5eb8ffcd?s=128&d=identicon&r=PG", "display_name": "Yawar", "link": "https://stackoverflow.com/users/20371/yawar"}, "reply_to_user": {"reputation": 39, "user_id": 6875547, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/9F7xI.png?s=128&g=1", "display_name": "62random", "link": "https://stackoverflow.com/users/6875547/62random"}, "edited": false, "score": 0, "creation_date": 1474832629, "post_id": 39680160, "comment_id": 66681418, "body": "@Jos&#233;PedroPinto, the best way to learn is to make lots of mistakes and learn how to fix them! So keep learning. You got really lucky with this answer, but then again people who put in the effort make their own luck :-)"}], "tags": [], "owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "is_accepted": false, "score": 8, "last_activity_date": 1474747705, "last_edit_date": 1474747705, "creation_date": 1474745352, "answer_id": 39680160, "question_id": 39679576, "link": "https://stackoverflow.com/questions/39679576/could-not-deduce-num-char-arising-from-the-literal/39680160#39680160", "title": "Could not deduce (Num [Char]) arising from the literal", "body": "<p>As I already commented, you should always have a type signature, before even writing any actual code. First make it clear what the <em>purpose</em> of your code is, before actually implementing anything!</p>\n\n<p>So, <code>valid</code> takes three numbers and checks them in some way, yielding <code>False</code> or <code>True</code> \u2013 i.e., a boolean. Hence, a valid signature would be</p>\n\n<pre><code>valid :: Int -&gt; Int -&gt; Int -&gt; Bool\n</code></pre>\n\n<p>This would limit the arguments to machine-sized integers \u2013 fast but not overflow-safe. It could also be</p>\n\n<pre><code>valid :: Integer -&gt; Integer -&gt; Integer -&gt; Bool\n</code></pre>\n\n<p>or, for floating-point real numbers,</p>\n\n<pre><code>valid :: Double -&gt; Double -&gt; Double -&gt; Bool\n</code></pre>\n\n<p>In fact, you don't need to settle on a particular type: it can be <em>any</em> number type, it just needs to support equality comparison. The \u201ccorrect\u201d signature would be</p>\n\n<pre><code>valid :: (Num a, Eq a) =&gt; a -&gt; a -&gt; a -&gt; Bool\n</code></pre>\n\n<p>That's indeed also what GHC infers if you just give it the code without a type signature:</p>\n\n<pre><code>Prelude&gt; :t valid\nvalid :: (Eq a, Num a) =&gt; a -&gt; a -&gt; a -&gt; Bool\n</code></pre>\n\n<p>But the compiler can only get this right by itself because the function <code>valid</code> happens to be type-correct. If you put in some mistake, then the compiler has no idea what the type <em>should</em> be, and hence likely infer some nonsensical type that leads to a cryptic error message. (This is only one of the reasons why you should write the signature first.)</p>\n\n<p>That's what happened in <code>nraized</code>. This also takes three numbers and gives one number. Let's keep it simple:</p>\n\n<pre><code>valid :: Double -&gt; Double -&gt; Double -&gt; Int\n</code></pre>\n\n<p>That should certainly be ok (though you can certainly make it more generic).</p>\n\n<p>Now the error message is much clearer:</p>\n\n<pre><code>&lt;interactive&gt;:16:87:\n    Couldn't match expected type \u2018Int\u2019 with actual type \u2018[Char]\u2019\n    In the expression: \"not a valid eq\"\n    In the expression:\n      if valid a b c == False then\n          \"not a valid eq\"\n      else\n          (if (b ^ 2 - 4 * a * c) &gt; 0 then\n               2\n           else\n               (if ((b ^ 2 - 4 * a * c) == 0) then 1 else 0))\n</code></pre>\n\n<p>What this tells you is that <code>\"not a valid eq\"</code> is incompatible with the type <code>Int</code>. Pretty obvious actually, isn't it? A function that's supposed to return <code>0</code>, <code>1</code> or <code>2</code> shouldn't be able to return a <em>string</em>!</p>\n\n<p>If you really want this to be an error case, you should mark it as such:</p>\n\n<pre><code>nRaizes a b c = if valid a b c == False then error \"not a valid eq\"\n     ...\n</code></pre>\n\n<p>Here, the string is <em>not</em> a result: if that case is encountered, the program will simply be aborted and the error message prompted at the user, instead of trying to pass it on to further functions (which couldn't possibly give meaningful results anymore, just yet stranger errors).</p>\n\n<hr>\n\n<h2>A couple of stylistic notes</h2>\n\n<ul>\n<li><p>Generally avoid nesting <code>if</code> with explicit mention of <code>True</code> and <code>False</code> \u2013 this is needlessly complicated: comparisons yield booleans anyway. <code>valid</code> just gives false if <em>any</em> of the equalities hold; this could be written</p>\n\n<pre><code>valid a b c = if [a,b,c] == [0,0,0]\n               || [a,b] == [0,0]\n               || a == 0\n              then False \n              else True\n</code></pre>\n\n<p>...but that's just the same as</p>\n\n<pre><code>valid a b c = not ([a,b,c] == [0,0,0] || [a,b] == [0,0] || a == 0)\n</code></pre>\n\n<p>or indeed</p>\n\n<pre><code>valid a b c = [a,b,c] /= [0,0,0] &amp;&amp; [a,b] /= [0,0] &amp;&amp; a /= 0\n</code></pre></li>\n<li><p>Anyway, these checks are heavily redundant. If <code>a</code> is not <code>0</code> then the list equalities can't possibly hold either! So,</p>\n\n<pre><code>valid a b c = a /= 0\n</code></pre>\n\n<p>would work just as well. Actually you're not even using the <code>b</code> and <code>c</code> argument, so just write</p>\n\n<pre><code>valid a _ _ = a /= 0\n</code></pre>\n\n<p>...or just don't define <code>valid</code> by itself at all: simply inline the condition <code>a /= 0</code>.</p>\n\n<pre><code>nRaizes a b c = if (a /= 0) == False then error \"not a valid eq\" \n      ...\n</code></pre>\n\n<p>which is of course again completely roundabout: simply use</p>\n\n<pre><code>nRaizes a b c = if a == 0 then error \"not a valid eq\" \n      ...\n</code></pre></li>\n<li><p>That still leaves you with some ugly nested <code>if</code>s in nasty nested parens. Haskellers don't like that, the preferred style is to use <em>guards</em>:</p>\n\n<pre><code>nRaizes a b c\n   | a == 0            = error \"not a valid eq\" \n   | b^2 - 4*a*c &gt; 0   = 2\n   | b^2 - 4*a*c == 0  = 1 \n   | otherwise         = 0\n</code></pre></li>\n<li><p>Still not optimal: you're computing the discriminant twice. Why not:</p>\n\n<pre><code>nRaizes a b c\n   | a == 0     = error \"not a valid eq\" \n   | d &gt; 0      = 2\n   | d == 0     = 1 \n   | otherwise  = 0\n where d = b^2 - 4*a*c\n</code></pre></li>\n</ul>\n\n<p>While <code>error</code> <em>can</em> be used like that, I wonder why you check this anyway at that point. If <code>a==0</code> then it's not really a second-order polynomial, but so what? It still has a number of solutions. Really the error case should probably if <em>all</em> the coefficients are zero (because the number of solutions would be infinite). Hence I think the code you really want is probably the following:</p>\n\n<pre><code>nRaizes :: (Eq a, Floating a) =&gt; a -&gt; a -&gt; a -&gt; Int\nnRaizes a b c\n  | all (==0) [a,b,c]  = error \"Equation has infinite solutions\" \n  | d &gt; 0              = 2\n  | d == 0             = 1 \n  | otherwise          = 0\n where d = b^2 - 4*a*c\n</code></pre>\n"}], "owner": {"reputation": 39, "user_id": 6875547, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/9F7xI.png?s=128&g=1", "display_name": "62random", "link": "https://stackoverflow.com/users/6875547/62random"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 885, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1474747705, "creation_date": 1474741230, "question_id": 39679576, "link": "https://stackoverflow.com/questions/39679576/could-not-deduce-num-char-arising-from-the-literal", "title": "Could not deduce (Num [Char]) arising from the literal", "body": "<p>guys, i just started learning haskell (and to code) and i have ran into a problem that i can't figure out. So there is this exercise in which i have to present the number of solutions for a 2nd degree equation. </p>\n\n<pre><code>valid a b c = if [a,b,c] == [0,0,0] then False\n     else (if [a,b] == [0,0] then False\n     else (if a == 0 then False \n     else True)) --function to make sure it is a 2nd degree eq\n\nnRaizes a b c = if valid a b c == False then \"not a valid eq\" \n     else (if (b^2 - 4 * a * c) &gt; 0 then 2\n     else (if ((b^2 - 4 * a * c) == 0) then 1 \n     else 0)) \n</code></pre>\n\n<p>Everything looked fine to me, but when i try to load the script in GHCI i get the error message:</p>\n\n<pre><code>Could not deduce (Num [Char]) arising from the literal \u20182\u2019\n    from the context (Num a, Ord a)\n      bound by the inferred type of\n               nRaizes :: (Num a, Ord a) =&gt; a -&gt; a -&gt; a -&gt; [Char]\n      at ficha1.hs:(18,1)-(21,13)\n    In the expression: 2\n    In the expression:\n      (if (b * b - 4 * a * c) &gt; 0 then\n       2\n       else\n           (if ((b * b - 4 * a * c) == 0) then 1 else 0))\n    In the expression:\n      if valid a b c == False then\n          \"not a valid eq\"\n      else\n          (if (b * b - 4 * a * c) &gt; 0 then\n           2\n           else\n               (if ((b * b - 4 * a * c) == 0) then 1 else 0))\nFailed, modules loaded: none.\n</code></pre>\n\n<p>Can someone explain to me what is wrong with this code? And how can i fix it? Thanks</p>\n"}, {"tags": ["haskell"], "comments": [{"owner": {"reputation": 29966, "user_id": 637669, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0227e5d5eaceb8ae2f751df38d421764?s=128&d=identicon&r=PG", "display_name": "arrowd", "link": "https://stackoverflow.com/users/637669/arrowd"}, "edited": false, "score": 0, "creation_date": 1474738170, "post_id": 39679040, "comment_id": 66658449, "body": "I don&#39;t want <code>Green</code> of my <code>data Color = Red | Green | Blue</code> to be equal to <code>True</code>. At least, implicitly."}, {"owner": {"reputation": 2585, "user_id": 6701918, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/fBOp9.jpg?s=128&g=1", "display_name": "V. Semeria", "link": "https://stackoverflow.com/users/6701918/v-semeria"}, "reply_to_user": {"reputation": 29966, "user_id": 637669, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0227e5d5eaceb8ae2f751df38d421764?s=128&d=identicon&r=PG", "display_name": "arrowd", "link": "https://stackoverflow.com/users/637669/arrowd"}, "edited": false, "score": 1, "creation_date": 1474738320, "post_id": 39679040, "comment_id": 66658494, "body": "The compiler can tell they&#39;re not equal : they don&#39;t have the same type."}, {"owner": {"reputation": 339851, "user_id": 149392, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7a561ec0875fcbbe3066ea8fe288ec77?s=128&d=identicon&r=PG", "display_name": "sepp2k", "link": "https://stackoverflow.com/users/149392/sepp2k"}, "edited": false, "score": 7, "creation_date": 1474738346, "post_id": 39679040, "comment_id": 66658501, "body": "&quot;Since all functions can pattern match their arguments&quot; They can&#39;t if the argument&#39;s type does not export its constructors."}, {"owner": {"reputation": 384463, "user_id": 1126841, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fa05233b2357f8d11c22ef4cfc7bb85c?s=128&d=identicon&r=PG", "display_name": "chepner", "link": "https://stackoverflow.com/users/1126841/chepner"}, "edited": false, "score": 2, "creation_date": 1474738362, "post_id": 39679040, "comment_id": 66658506, "body": "You broke the abstraction by comparing <code>x</code>, not <code>Mod4 x</code>, to 20."}, {"owner": {"reputation": 22266, "user_id": 649287, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7c0ea0055b84020bf860c05f53ba53d5?s=128&d=identicon&r=PG", "display_name": "augustss", "link": "https://stackoverflow.com/users/649287/augustss"}, "edited": false, "score": 0, "creation_date": 1474785860, "post_id": 39679040, "comment_id": 66668022, "body": "The proper way to do this is to make Mod4 an abstract type.  In the module defining Mod4 you can look at the representation, and make functions like f (but you shouldn&#39;t). Outside the defining module you can&#39;t cheat, the the equality is the one you want.  This is just an example of how abstract data types work, and why Eq is just the right thing.  It allows you to defining equality for abstract types, that behaves properly."}, {"owner": {"reputation": 45534, "user_id": 106104, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/c88b9310b92a937108ec4336c2832f92?s=128&d=identicon&r=PG", "display_name": "user253751", "link": "https://stackoverflow.com/users/106104/user253751"}, "edited": false, "score": 0, "creation_date": 1474853225, "post_id": 39679040, "comment_id": 66686120, "body": "Should <code>f x = True</code> and <code>f x = (x &lt; 0) || (x &gt;= 0)</code> be equal? (given <code>f :: Integer -&gt; Bool</code>)"}, {"owner": {"reputation": 2585, "user_id": 6701918, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/fBOp9.jpg?s=128&g=1", "display_name": "V. Semeria", "link": "https://stackoverflow.com/users/6701918/v-semeria"}, "reply_to_user": {"reputation": 45534, "user_id": 106104, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/c88b9310b92a937108ec4336c2832f92?s=128&d=identicon&r=PG", "display_name": "user253751", "link": "https://stackoverflow.com/users/106104/user253751"}, "edited": false, "score": 0, "creation_date": 1474879471, "post_id": 39679040, "comment_id": 66695007, "body": "@immibis : this remark is already covered in chi&#39;s answer below."}], "answers": [{"comments": [{"owner": {"reputation": 2585, "user_id": 6701918, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/fBOp9.jpg?s=128&g=1", "display_name": "V. Semeria", "link": "https://stackoverflow.com/users/6701918/v-semeria"}, "edited": false, "score": 0, "creation_date": 1474753258, "post_id": 39680209, "comment_id": 66662646, "body": "&quot;When the equality predicate is not computable&quot; does this apply to function types like <code>Int -&gt; Bool</code> ? Indeed we have functions of functions. Or maybe a more complicated case like <a href=\"https://en.wikipedia.org/wiki/Presentation_of_a_group\" rel=\"nofollow noreferrer\">group presentation</a> ? I believe it is very hard to compute if two group presentations are isomorphic."}, {"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "reply_to_user": {"reputation": 2585, "user_id": 6701918, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/fBOp9.jpg?s=128&g=1", "display_name": "V. Semeria", "link": "https://stackoverflow.com/users/6701918/v-semeria"}, "edited": false, "score": 0, "creation_date": 1474755205, "post_id": 39680209, "comment_id": 66663092, "body": "@V.Semeria Yes, given arbitrary <code>f, g :: Integer -&gt; Bool</code> we can&#39;t decide whether they are the same function. See any computability / recursion theory book/course. Note that e.g. <code>\\x -&gt; 2*x</code> and <code>\\x -&gt; x+x</code> are the same function, even if they likely have a different in-memory representation."}, {"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "reply_to_user": {"reputation": 2585, "user_id": 6701918, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/fBOp9.jpg?s=128&g=1", "display_name": "V. Semeria", "link": "https://stackoverflow.com/users/6701918/v-semeria"}, "edited": false, "score": 6, "creation_date": 1474762378, "post_id": 39680209, "comment_id": 66664373, "body": "@V.Semeria, the <code>Data.Set</code> example chi gives here represents a very common case. <i>Most</i> interesting data structures have some amount of &quot;redundancy&quot;, allowing more than one concrete representation of the same abstract object. <code>Data.Set</code>, <code>Data.Map</code>, <code>Data.Sequence</code>, the graph types in <code>fgl</code>, ropes, heaps, vector slices, B-tree variants of all sorts, functional queues, deques, output-restricted deques, catenable deques, monoidal finger trees, etc., all have non-structural equality."}], "tags": [], "owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "is_accepted": true, "score": 10, "last_activity_date": 1475132726, "last_edit_date": 1475132726, "creation_date": 1474745668, "answer_id": 39680209, "question_id": 39679040, "link": "https://stackoverflow.com/questions/39679040/why-does-the-eq-class-exist/39680209#39680209", "title": "Why does the Eq class exist?", "body": "<blockquote>\n  <p>Why didn't Haskell just took the representation in memory as the definition of equality ? This way all types become trivially equatable.</p>\n</blockquote>\n\n<p>Nope. You can't compare values of type <code>Integer -&gt; Bool</code>. Functions can not be compared, in general.</p>\n\n<p>Back to the blackboard. How to design equality in a typed language?</p>\n\n<p>One option is to let <code>(==) :: a -&gt; a -&gt; Bool</code>, and throw an exception if <code>a</code> is a function. See e.g. Ocaml.</p>\n\n<p>Another option is to partition types in equatable/not equatable. This is <code>eqtype</code> in SML.</p>\n\n<p>Another, but related, option is to express \"eq-ability\" as a constraint on the polymorphism. <code>Eq</code> in Haskell.</p>\n\n<p>Now, <code>Eq</code> might have been more special. E.g. you can't define its instances by yourself, and you must use <code>deriving Eq</code>, similarly to how <code>Typeable</code> works now.\nThe Haskell designers instead to allow users to define their own comparison function. The users might know some \"smarter\" way. E.g. to compare a 10-field record, start by comparing the usually-different fields, and compare usually-equal ones later, trying to improve efficiency.</p>\n\n<p>Note that, if we don't export the data type constructor, we can make equality to be an equivalence and still be useful. E.g. <code>Data.Set.Set</code> equates different (balanced) trees when they represent the same set, yet the exported interface never breaks the equivalence, so equality looks like equality from outside.</p>\n\n<blockquote>\n  <p>So it makes little sense to speak of a function on a type that is not equatable.</p>\n</blockquote>\n\n<p>True, when \"not equatable\" is interpreted in a mathematical sense. However. when it is interpreted as \"the equality predicate is not computable\", it makes a lot of sense. We can speak of a function working on values whose type has undecidable equality.</p>\n"}], "owner": {"reputation": 2585, "user_id": 6701918, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/fBOp9.jpg?s=128&g=1", "display_name": "V. Semeria", "link": "https://stackoverflow.com/users/6701918/v-semeria"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 217, "favorite_count": 1, "accepted_answer_id": 39680209, "answer_count": 1, "score": -2, "last_activity_date": 1475132726, "creation_date": 1474737918, "question_id": 39679040, "link": "https://stackoverflow.com/questions/39679040/why-does-the-eq-class-exist", "title": "Why does the Eq class exist?", "body": "<p>Suppose I want to define the type <code>Mod4</code> of integers modulo 4. After all, Int is <code>Mod2^64</code>. One obvious way I could go is</p>\n\n<pre><code>data Mod4 = ZeroMod4 | OneMod4 | TwoMod4 | ThreeMod4 \n</code></pre>\n\n<p>However I could also do this</p>\n\n<pre><code>data Mod4 = Mod4 Integer\n\ninstance Eq Mod4 where\n  (Mod4 x) == (Mod4 y) = (x-y) `mod` 4 == 0\n</code></pre>\n\n<p>But then this function is problematic :</p>\n\n<pre><code>f :: Mod4 -&gt; Mod4\nf (Mod4 x) = if x &lt; 20 then Mod4 0 else Mod4 1\n</code></pre>\n\n<p><code>f (Mod4 16)</code> is different from <code>f (Mod4 20)</code>, whereas those two arguments are <code>==</code>. So I end up with two sorts of equality : representation in memory (\n<code>Mod4 16</code> is different from <code>Mod4 20</code>) and <code>==</code>.</p>\n\n<p>Since all functions can pattern match their arguments, they can always bypass any <code>==</code> operator. Why didn't Haskell just took the representation in memory as the definition of equality ? This way all types become trivially equatable.</p>\n\n<p>Actually, equality is implied by the very concept of function : a graph that produces equal outputs when given equal inputs. So it makes little sense to speak of a function on a type that is not equatable.</p>\n"}, {"tags": ["haskell", "phantom-types"], "comments": [{"owner": {"reputation": 7872, "user_id": 440302, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e785baf6d4a2626b8649d5b538c51858?s=128&d=identicon&r=PG", "display_name": "Rufflewind", "link": "https://stackoverflow.com/users/440302/rufflewind"}, "edited": false, "score": 0, "creation_date": 1474736121, "post_id": 39678258, "comment_id": 66657825, "body": "Maybe you could use <code>coerce</code>?"}], "answers": [{"tags": [], "owner": {"reputation": 8237, "user_id": 2900502, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/R1OjD.jpg?s=128&g=1", "display_name": "Shersh", "link": "https://stackoverflow.com/users/2900502/shersh"}, "is_accepted": false, "score": 1, "last_activity_date": 1474735789, "last_edit_date": 1495542794, "creation_date": 1474735789, "answer_id": 39678728, "question_id": 39678258, "link": "https://stackoverflow.com/questions/39678258/remove-phantom-type-variable/39678728#39678728", "title": "Remove phantom type variable", "body": "<p>You're probably looking for <code>undefined</code> at type level to make a stub for types. This was already discussed here:\n<a href=\"https://stackoverflow.com/questions/9036554/undefined-at-the-type-level\">Undefined at the type level</a></p>\n\n<p>So you can define your own data type and make instances for it of any type classes you use. If you want to lower number of instances you need to implement, you can use some standard data types like <code>Void</code> or even <code>Proxy ()</code>. The latter is better because it has more instances. </p>\n\n<p><a href=\"http://hackage.haskell.org/package/base-4.9.0.0/docs/Data-Void.html\" rel=\"nofollow noreferrer\">http://hackage.haskell.org/package/base-4.9.0.0/docs/Data-Void.html</a></p>\n\n<p><a href=\"http://hackage.haskell.org/package/base-4.9.0.0/docs/Data-Proxy.html\" rel=\"nofollow noreferrer\">http://hackage.haskell.org/package/base-4.9.0.0/docs/Data-Proxy.html</a></p>\n"}, {"tags": [], "owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "is_accepted": true, "score": 3, "last_activity_date": 1474746605, "creation_date": 1474746605, "answer_id": 39680335, "question_id": 39678258, "link": "https://stackoverflow.com/questions/39678258/remove-phantom-type-variable/39680335#39680335", "title": "Remove phantom type variable", "body": "<p>One option is to use an existential type:</p>\n\n<pre><code>data UnrestrictedFoo b where\n  Unrestricted :: Foo a b -&gt; UnrestrictedFoo b\n</code></pre>\n\n<p>In some other contexts, it may make sense to use a rank 2 type instead.</p>\n\n<pre><code>newtype UnrestrictedFoo b = UnrestrictedFoo (forall a . Foo a b)\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 9485, "user_id": 20371, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/32c7a412ad0caf812ae974df5eb8ffcd?s=128&d=identicon&r=PG", "display_name": "Yawar", "link": "https://stackoverflow.com/users/20371/yawar"}, "is_accepted": false, "score": 1, "last_activity_date": 1474832976, "creation_date": 1474832976, "answer_id": 39691150, "question_id": 39678258, "link": "https://stackoverflow.com/questions/39678258/remove-phantom-type-variable/39691150#39691150", "title": "Remove phantom type variable", "body": "<p>I agree that <code>()</code> is the best type to use here, as it conveys that you don't care about the type, but if you want it to satisfy your code constraints, you could <code>newtype</code> it and derive the needed instances trivially when you need them.</p>\n"}], "owner": {"reputation": 1972, "user_id": 1747134, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/696bad3bd2c5e16ded04f3cdf436623f?s=128&d=identicon&r=PG", "display_name": "user1747134", "link": "https://stackoverflow.com/users/1747134/user1747134"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 114, "favorite_count": 0, "accepted_answer_id": 39680335, "answer_count": 3, "score": 0, "last_activity_date": 1474832976, "creation_date": 1474732639, "last_edit_date": 1474733768, "question_id": 39678258, "link": "https://stackoverflow.com/questions/39678258/remove-phantom-type-variable", "title": "Remove phantom type variable", "body": "<p>Suppose i have some type like:</p>\n\n<pre><code>newtype Foo a b = Foo { getFoo :: SomeStructure b }\n</code></pre>\n\n<p>I.e. <code>a</code> is a phantom type used only for compile-time checks.</p>\n\n<p>However, I don't want to use the phantom type everywhere. It's not universally useful in my code. So I would like to do something like:</p>\n\n<pre><code>type FooUnrestricted b = Foo Anything b\n</code></pre>\n\n<p>What should I use in place of <code>Anything</code>? Do I need some language extensions?</p>\n\n<p>Edit: I realized I could simply use <code>()</code> and it would answer my question. But the actual point is that I have functions that place constraints on <code>a</code> and I would like them to be always satisfied.</p>\n"}, {"tags": ["haskell", "recursion", "typeclass", "some-and-many", "alternative-functor"], "comments": [{"owner": {"reputation": 78982, "user_id": 1848654, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/84180c0f3c9c04f8b8f0613fc0129dac?s=128&d=identicon&r=PG", "display_name": "melpomene", "link": "https://stackoverflow.com/users/1848654/melpomene"}, "edited": false, "score": 0, "creation_date": 1474711401, "post_id": 39674640, "comment_id": 66650537, "body": "<code>many Nothing</code> and <code>some Nothing</code> work fine. What did you expect <code>some (Just 2)</code> to do?"}, {"owner": {"reputation": 2334, "user_id": 2397162, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/665b976c79d0c9c842b131a2df510c3c?s=128&d=identicon&r=PG", "display_name": "niceman", "link": "https://stackoverflow.com/users/2397162/niceman"}, "reply_to_user": {"reputation": 78982, "user_id": 1848654, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/84180c0f3c9c04f8b8f0613fc0129dac?s=128&d=identicon&r=PG", "display_name": "melpomene", "link": "https://stackoverflow.com/users/1848654/melpomene"}, "edited": false, "score": 0, "creation_date": 1474711744, "post_id": 39674640, "comment_id": 66650650, "body": "@melpomene well <code>Just [2]</code> or <code>exception : unimplemented</code>"}, {"owner": {"reputation": 78982, "user_id": 1848654, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/84180c0f3c9c04f8b8f0613fc0129dac?s=128&d=identicon&r=PG", "display_name": "melpomene", "link": "https://stackoverflow.com/users/1848654/melpomene"}, "edited": false, "score": 0, "creation_date": 1474711844, "post_id": 39674640, "comment_id": 66650679, "body": "<code>Just [2]</code> is semantically wrong. It would have to be <code>Just [2, 2, 2, 2, 2, 2, ...]</code> but that computation never finishes."}, {"owner": {"reputation": 2334, "user_id": 2397162, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/665b976c79d0c9c842b131a2df510c3c?s=128&d=identicon&r=PG", "display_name": "niceman", "link": "https://stackoverflow.com/users/2397162/niceman"}, "reply_to_user": {"reputation": 78982, "user_id": 1848654, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/84180c0f3c9c04f8b8f0613fc0129dac?s=128&d=identicon&r=PG", "display_name": "melpomene", "link": "https://stackoverflow.com/users/1848654/melpomene"}, "edited": false, "score": 3, "creation_date": 1474711984, "post_id": 39674640, "comment_id": 66650732, "body": "@melpomene hmmm if it is <code>Just [2,2,2,2,...]</code> then wouldn&#39;t <code>take 2 &lt;$&gt; (some (Just 2))</code> return some results ? (it hanged with me)"}, {"owner": {"reputation": 78982, "user_id": 1848654, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/84180c0f3c9c04f8b8f0613fc0129dac?s=128&d=identicon&r=PG", "display_name": "melpomene", "link": "https://stackoverflow.com/users/1848654/melpomene"}, "edited": false, "score": 0, "creation_date": 1474712437, "post_id": 39674640, "comment_id": 66650881, "body": "No, because it can&#39;t actually return that (at least with the current definition it has to &quot;run actions&quot; until <code>v</code> turns <code>empty</code> at some point).  Hmm."}, {"owner": {"reputation": 60057, "user_id": 1333025, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/79ab43010f900324ac5e2de19a2916cb?s=128&d=identicon&r=PG", "display_name": "Petr", "link": "https://stackoverflow.com/users/1333025/petr"}, "edited": false, "score": 0, "creation_date": 1474719936, "post_id": 39674640, "comment_id": 66652923, "body": "Related: <a href=\"http://stackoverflow.com/q/18108608/1333025\">What are Alternative&#39;s \u201csome\u201d and \u201cmany\u201d useful for?</a>"}], "answers": [{"tags": [], "owner": {"reputation": 24211, "user_id": 1364288, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/JVtNl.png?s=128&g=1", "display_name": "danidiaz", "link": "https://stackoverflow.com/users/1364288/danidiaz"}, "is_accepted": true, "score": 1, "last_activity_date": 1474712349, "last_edit_date": 1474712349, "creation_date": 1474711606, "answer_id": 39675127, "question_id": 39674640, "link": "https://stackoverflow.com/questions/39674640/why-alternatives-some-and-many-are-infinite-recursive-functions-in-haskell/39675127#39675127", "title": "why Alternative&#39;s some and many are infinite recursive functions in haskell", "body": "<p>The Alternative instance for Maybe is as follows:</p>\n\n<pre><code>instance Alternative Maybe where\n    empty = Nothing\n    Nothing &lt;|&gt; r = r\n    l       &lt;|&gt; _ = l\n</code></pre>\n\n<p>It defines <code>empty</code> and <code>(&lt;|&gt;)</code>, leaving <code>some</code> and <code>many</code> as their default implementations.</p>\n\n<p>Using <code>many</code> and <code>some</code> makes sense when the <code>Alternative</code> can succeed or fail for \"external reasons\" not contained in the value itself. The typical example is parsers: you try to parse integers repeatedly from an input stream, until an integer isn't found and <code>empty</code> is returned.</p>\n\n<p>But with <code>Just 2</code>, the Alternative \"always succeeds\", so to speak. There's nothing external to the value that can make it \"fail\" and finish the computation. So it goes into an infinite loop.</p>\n"}], "owner": {"reputation": 2334, "user_id": 2397162, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/665b976c79d0c9c842b131a2df510c3c?s=128&d=identicon&r=PG", "display_name": "niceman", "link": "https://stackoverflow.com/users/2397162/niceman"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 341, "favorite_count": 1, "accepted_answer_id": 39675127, "answer_count": 1, "score": 4, "last_activity_date": 1613785229, "creation_date": 1474708435, "last_edit_date": 1613785229, "question_id": 39674640, "link": "https://stackoverflow.com/questions/39674640/why-alternatives-some-and-many-are-infinite-recursive-functions-in-haskell", "title": "why Alternative&#39;s some and many are infinite recursive functions in haskell", "body": "<p>I was looking at <code>Alternative</code> typeclass in haskell and I was playing with it in ghci when I issued this </p>\n\n<pre><code>some (Just 2)\n</code></pre>\n\n<p>It hanged, I looked in the source code of Alternative, Alternative's some and many default definition is this :</p>\n\n<pre><code>some :: f a -&gt; f [a]\nsome v = some_v\n  where\n    many_v = some_v &lt;|&gt; pure []\n    some_v = (fmap (:) v) &lt;*&gt; many_v\n\n-- | Zero or more.\nmany :: f a -&gt; f [a]\nmany v = many_v\n  where\n    many_v = some_v &lt;|&gt; pure []\n    some_v = (fmap (:) v) &lt;*&gt; many_v\n</code></pre>\n\n<p>It's obvious that <code>some_v</code> and <code>many_v</code> are indirectly infinitely recursive, and they aren't defined in terms of <code>empty</code> and <code>&lt;|&gt;</code>. </p>\n\n<p>If they must be defined by the instance then they shouldn't have default definition, right ? and since <code>Maybe</code> doesn't define them my statement above hanged which seems strange to me since it isn't mentioned in the docs.</p>\n\n<p>So why were they defined like that ? is There something I'm missing ?</p>\n"}, {"tags": ["haskell", "dependent-type", "monoids"], "comments": [{"owner": {"reputation": 42094, "user_id": 828361, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/6a82397672dcc1fca31c32508ef0798b?s=128&d=identicon&r=PG", "display_name": "pigworker", "link": "https://stackoverflow.com/users/828361/pigworker"}, "edited": false, "score": 5, "creation_date": 1474708497, "post_id": 39674555, "comment_id": 66649763, "body": "Kitchen-sink Haskell does have enough dependent types to keep the modulus as a type-level number, then make addition a monoid for each positive modulus. Of course, you need to make sure you keep a value-level copy of the modulus if you want to normalize representatives by division."}, {"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 0, "creation_date": 1474763182, "post_id": 39674555, "comment_id": 66664513, "body": "An alternative to dependent types for this particular purpose is the <code>reflection</code> package. You&#39;ll work under a <code>Reifies s Natural</code> context, within which a newtype around <code>Integer</code> with an <code>s</code> phantom will have all the expected instances. <code>reify</code> will toss a modulus into the air, while <code>reflect</code> will pull one out of the air."}], "answers": [{"comments": [{"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "reply_to_user": {"reputation": 4605, "user_id": 1067339, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/3479b6831ccaa6263ed5ca7dab3ba972?s=128&d=identicon&r=PG", "display_name": "Qqwy", "link": "https://stackoverflow.com/users/1067339/qqwy"}, "edited": false, "score": 1, "creation_date": 1474763852, "post_id": 39675234, "comment_id": 66664636, "body": "@Qqwy, you can avoid <code>FlexibleInstances</code> here if you wish, by using <code>class Mon n where monempty :: Mod n; monappend :: Mod n -&gt; Mod n -&gt; Mod n</code> with instances for <code>&#39;Z</code> and <code>&#39;S n</code>, and then <code>instance Mon n =&gt; Monoid (Mod n) where ...</code>."}], "tags": [], "owner": {"reputation": 42094, "user_id": 828361, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/6a82397672dcc1fca31c32508ef0798b?s=128&d=identicon&r=PG", "display_name": "pigworker", "link": "https://stackoverflow.com/users/828361/pigworker"}, "is_accepted": true, "score": 17, "last_activity_date": 1474713294, "last_edit_date": 1474713294, "creation_date": 1474712338, "answer_id": 39675234, "question_id": 39674555, "link": "https://stackoverflow.com/questions/39674555/haskell-how-to-write-a-monoid-instance-for-something-that-depends-on-paramete/39675234#39675234", "title": "Haskell: How to write a `Monoid` instance for something that depends on parameters", "body": "<p>Expanding on my comment, here's a first crack. The modulus is enforced by type, but not the canonical choice of representative: that's just done by computation, so would necessitate an abstraction barrier. Types of bounded numbers are also available, but they take a bit more work.</p>\n\n<p>Enter, <code>{-# LANGUAGE KitchenSink #-}</code>. I mean (actually the not too bad)</p>\n\n<pre><code>{-# LANGUAGE DataKinds, GADTs, KindSignatures, FlexibleInstances #-}\n</code></pre>\n\n<p>and let's get cracking.</p>\n\n<p>Firstly, just by reflex, I introduce the Hasochistic natural numbers:</p>\n\n<pre><code>data Nat = Z | S Nat              -- type-level numbers\ndata Natty :: Nat -&gt; * where      -- value-level representation of Nat\n  Zy :: Natty Z\n  Sy :: Natty n -&gt; Natty (S n)\nclass NATTY n where               -- value-level representability\n  natty :: Natty n\ninstance NATTY Z where\n  natty = Zy\ninstance NATTY n =&gt; NATTY (S n) where\n  natty = Sy natty\n</code></pre>\n\n<p>To my mind, that's just what you do when you want to declare a datatype and then allow other types to depend on its values. Richard Eisenberg's \"singletons\" library automates the construction.</p>\n\n<p>(If the example goes on to use numbers to index vectors, some people point out that vectors of <code>()</code> can also serve as singletons for <code>Nat</code>. They're technically correct, of course, but misguided. When we think of <code>Natty</code> and <code>NATTY</code> as systematically generated from <code>Nat</code>, they're an entitlement we can exploit or not as we see fit, not an extra to justify. This example does not involve vectors, and it would be perverse to introduce vectors just to have singletons for <code>Nat</code>.)</p>\n\n<p>I hand-roll a bunch of conversion functions and <code>Show</code> instances, so we can see what we're doing, apart from anything else.</p>\n\n<pre><code>int :: Nat -&gt; Integer\nint Z = 0\nint (S n) = 1 + int n\n\ninstance Show Nat where\n  show = show . int\n\nnat :: Natty n -&gt; Nat\nnat Zy = Z\nnat (Sy n) = S (nat n)\n\ninstance Show (Natty n) where\n  show = show . nat\n</code></pre>\n\n<p>Now we're ready to declare <code>Mod</code>.</p>\n\n<pre><code>data Mod :: Nat -&gt; * where\n  (:%) :: Integer -&gt; Natty n -&gt; Mod (S n)\n</code></pre>\n\n<p>The type carries the modulus. The values carry an unnormalized representative of the equivalence class, but we had better figure out how to normalize it. Division for unary numbers is a peculiar sport which I learned as a child.</p>\n\n<pre><code>remainder :: Natty n   -- predecessor of modulus\n          -&gt; Integer   -- any representative\n          -&gt; Integer   -- canonical representative\n  -- if candidate negative, add the modulus\nremainder n x | x &lt; 0 = remainder n (int (nat (Sy n)) + x)\n  -- otherwise get dividing\nremainder n x = go (Sy n) x x where\n  go :: Natty m  -- divisor countdown (initially the modulus)\n     -&gt; Integer  -- our current guess at the representative\n     -&gt; Integer  -- dividend countdown\n     -&gt; Integer  -- the canonical representative\n    -- when we run out of dividend the guessed representative is canonical\n  go _      c 0 = c\n    -- when we run out of divisor but not dividend,\n    --   the current dividend countdown is a better guess at the rep,\n    --   but perhaps still too big, so start again, counting down\n    --   from the modulus (conveniently still in scope)\n  go Zy     _ y = go (Sy n) y y\n    -- otherwise, decrement both countdowns\n  go (Sy m) c y = go m c (y - 1)\n</code></pre>\n\n<p>Now we can make a smart constructor.</p>\n\n<pre><code>rep :: NATTY n                 -- we pluck the modulus rep from thin air\n    =&gt; Integer -&gt; Mod (S n)    -- when we see the modulus we want\nrep x = remainder n x :% n where n = natty\n</code></pre>\n\n<p>And then the <code>Monoid</code> instance is easy:</p>\n\n<pre><code>instance NATTY n =&gt; Monoid (Mod (S n)) where\n  mempty                    = rep 0\n  mappend (x :% _) (y :% _) = rep (x + y)\n</code></pre>\n\n<p>I chucked in some other things, too:</p>\n\n<pre><code>instance Show (Mod n) where\n  show (x :% n) = concat [\"(\", show (remainder n x), \" :% \", show (Sy n), \")\"]\ninstance Eq (Mod n) where\n  (x :% n) == (y :% _) = remainder n x == remainder n y\n</code></pre>\n\n<p>With a little convenience...</p>\n\n<pre><code>type Four = S (S (S (S Z)))\n</code></pre>\n\n<p>we get</p>\n\n<pre><code>&gt; foldMap rep [1..5] :: Mod Four\n(3 :% 4)\n</code></pre>\n\n<p>So yes, you do need dependent types, but Haskell is dependently typed enough.</p>\n"}, {"comments": [{"owner": {"reputation": 42094, "user_id": 828361, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/6a82397672dcc1fca31c32508ef0798b?s=128&d=identicon&r=PG", "display_name": "pigworker", "link": "https://stackoverflow.com/users/828361/pigworker"}, "edited": false, "score": 2, "creation_date": 1474958428, "post_id": 39684360, "comment_id": 66732894, "body": "True, I didn&#39;t have to do as much unary arithmetic as I used in my answer (I copped out of enforcing the range of the integer because I was in a hurry). The Natty NATTY stuff I see as the output of the translation my preprocessor does... Meanwhile, mind that Mod 0 arithmetic, and be aware that division is a tad more entertaining: 1/3 = 11 (mod 16)."}, {"owner": {"reputation": 22266, "user_id": 649287, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7c0ea0055b84020bf860c05f53ba53d5?s=128&d=identicon&r=PG", "display_name": "augustss", "link": "https://stackoverflow.com/users/649287/augustss"}, "edited": false, "score": 1, "creation_date": 1474967767, "post_id": 39684360, "comment_id": 66738919, "body": "I didn&#39;t bother making a division that is the inverse of multiplication.  That&#39;s just too much work. :)"}, {"owner": {"reputation": 22266, "user_id": 649287, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7c0ea0055b84020bf860c05f53ba53d5?s=128&d=identicon&r=PG", "display_name": "augustss", "link": "https://stackoverflow.com/users/649287/augustss"}, "edited": false, "score": 1, "creation_date": 1474983760, "post_id": 39684360, "comment_id": 66749939, "body": "Also, I believe my <code>quotRem</code> obeys the law that the Haskell docs specifies. :)"}], "tags": [], "owner": {"reputation": 22266, "user_id": 649287, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7c0ea0055b84020bf860c05f53ba53d5?s=128&d=identicon&r=PG", "display_name": "augustss", "link": "https://stackoverflow.com/users/649287/augustss"}, "is_accepted": false, "score": 13, "last_activity_date": 1475033152, "last_edit_date": 1475033152, "creation_date": 1474787672, "answer_id": 39684360, "question_id": 39674555, "link": "https://stackoverflow.com/questions/39674555/haskell-how-to-write-a-monoid-instance-for-something-that-depends-on-paramete/39684360#39684360", "title": "Haskell: How to write a `Monoid` instance for something that depends on parameters", "body": "<p>This is the same answer as given by @pigworker, but written in a less painful (more efficient, nicer syntax) way.</p>\n\n<pre><code>{-# LANGUAGE DataKinds, KindSignatures, ScopedTypeVariables #-}\nmodule Mod(Mod) where\nimport Data.Proxy\nimport GHC.TypeLits\n\ndata Mod (n :: Nat) = Mod Integer\n\ninstance (KnownNat n) =&gt; Show (Mod n) where\n    showsPrec p (Mod i) = showParen (p &gt; 0) $\n      showsPrec 0 i . showString \" :% \" . showsPrec 0 (natVal (Proxy :: Proxy n))\n\ninstance Eq (Mod n) where\n    Mod x == Mod y = x == y\n\ninstance forall n . (KnownNat n) =&gt; Num (Mod n) where\n    Mod x + Mod y = Mod $ (x + y) `mod` natVal (Proxy :: Proxy n)\n    Mod x - Mod y = Mod $ (x - y) `mod` natVal (Proxy :: Proxy n)\n    Mod x * Mod y = Mod $ (x * y) `mod` natVal (Proxy :: Proxy n)\n    fromInteger i = Mod $ i `mod` natVal (Proxy :: Proxy n)\n    abs x = x\n    signum x = if x == 0 then 0 else 1\n\ninstance (KnownNat n) =&gt; Monoid (Mod n) where\n    mempty = 0\n    mappend = (+)\n\ninstance Ord (Mod n) where\n    Mod x `compare` Mod y = x `compare` y\n\ninstance (KnownNat n) =&gt; Real (Mod n) where\n    toRational (Mod n) = toRational n\n\ninstance (KnownNat n) =&gt; Enum (Mod n) where\n    fromEnum = fromIntegral\n    toEnum = fromIntegral\n\ninstance (KnownNat n) =&gt; Integral (Mod n) where\n    quotRem (Mod x) (Mod y) = (Mod q, Mod r) where (q, r) = quotRem x y\n    toInteger (Mod i) = i\n</code></pre>\n\n<p>And we get</p>\n\n<pre><code>&gt; foldMap fromInteger [1..5] :: Mod 4\n3 :% 4\n&gt; toInteger (88 * 23 :: Mod 17)\n1\n&gt; (3 :: Mod 4) == 7\nTrue\n</code></pre>\n\n<p>This module also illustrates the point I made in a comment in your question about Eq.  Outside the Mod module you can't cheat and use the representation.</p>\n"}, {"comments": [{"owner": {"reputation": 22266, "user_id": 649287, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7c0ea0055b84020bf860c05f53ba53d5?s=128&d=identicon&r=PG", "display_name": "augustss", "link": "https://stackoverflow.com/users/649287/augustss"}, "edited": false, "score": 1, "creation_date": 1474893842, "post_id": 39696602, "comment_id": 66704506, "body": "Very nice!  Now I don&#39;t have to make a package."}], "tags": [], "owner": {"reputation": 23816, "user_id": 572606, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/c20a126ad0dce40e8fc4a43456107919?s=128&d=identicon&r=PG", "display_name": "shang", "link": "https://stackoverflow.com/users/572606/shang"}, "is_accepted": false, "score": 5, "last_activity_date": 1474873444, "creation_date": 1474873444, "answer_id": 39696602, "question_id": 39674555, "link": "https://stackoverflow.com/questions/39674555/haskell-how-to-write-a-monoid-instance-for-something-that-depends-on-paramete/39696602#39696602", "title": "Haskell: How to write a `Monoid` instance for something that depends on parameters", "body": "<p>In addition to the previous answers, you might be interested in the <a href=\"https://hackage.haskell.org/package/modular-arithmetic-1.2.1.1/docs/Data-Modular.html\">modular-arithmetic</a> package which implements this as a library with a very nice syntax.</p>\n\n<pre><code>&gt;&gt;&gt; import Data.Modular\n&gt;&gt;&gt; 10 * 11 :: \u2124/7\n5\n</code></pre>\n"}], "owner": {"reputation": 4605, "user_id": 1067339, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/3479b6831ccaa6263ed5ca7dab3ba972?s=128&d=identicon&r=PG", "display_name": "Qqwy", "link": "https://stackoverflow.com/users/1067339/qqwy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 571, "favorite_count": 6, "accepted_answer_id": 39675234, "answer_count": 3, "score": 9, "last_activity_date": 1475033152, "creation_date": 1474707837, "question_id": 39674555, "link": "https://stackoverflow.com/questions/39674555/haskell-how-to-write-a-monoid-instance-for-something-that-depends-on-paramete", "title": "Haskell: How to write a `Monoid` instance for something that depends on parameters", "body": "<p>I am working on a small library for the university that does integer calculations in a <a href=\"https://en.wikipedia.org/wiki/Cyclic_group\">cyclic group</a>; Things like:</p>\n\n<pre><code>(3 (% 11)) + (10 (% 11))\n--&gt; (2 (% 11))\n</code></pre>\n\n<p><em>'Integers (% n)'</em> clearly form a monoid under addition with <em>'0 (% n)'</em> as identity element. However, addition only makes sense when the modulo of the two operands being added is the same: <code>a (% n) + b (% n)</code> makes sense, while <code>a (% n) + b (% m)</code> does not.</p>\n\n<p>Is there any way to enforce this with Haskell's type system? The same of course holds true for the <code>mempty</code> identity element: How can <code>0 (% n)</code> be constructed? Can <code>n</code> be kept somehow in the type system?</p>\n\n<p>Or do structures like these require the usage of dependent types?</p>\n"}, {"tags": ["haskell"], "comments": [{"owner": {"reputation": 2966, "user_id": 315302, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/1d57a52c98eee46fb4bc92e0b4ffe163?s=128&d=identicon&r=PG", "display_name": "Javran", "link": "https://stackoverflow.com/users/315302/javran"}, "edited": false, "score": 0, "creation_date": 1474676824, "post_id": 39671245, "comment_id": 66644015, "body": "it might be helpful if you can describe what this function does and what each of its argument means.."}], "answers": [{"tags": [], "owner": {"reputation": 384463, "user_id": 1126841, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fa05233b2357f8d11c22ef4cfc7bb85c?s=128&d=identicon&r=PG", "display_name": "chepner", "link": "https://stackoverflow.com/users/1126841/chepner"}, "is_accepted": false, "score": 1, "last_activity_date": 1474676909, "creation_date": 1474676909, "answer_id": 39671303, "question_id": 39671245, "link": "https://stackoverflow.com/questions/39671245/how-can-i-call-this-function-in-haskell/39671303#39671303", "title": "How can I call this function in haskell?", "body": "<p>The type is so general that it's hard to reason about what the function actually does. However, since <code>a</code>, <code>b</code>, <code>c</code>, and <code>d</code> have few constraints, let's provide an example where they all happen to satisfy <code>Int</code>:</p>\n\n<pre><code>function (3::Int) (+) 5 [(1,2), (3,4)]\n</code></pre>\n\n<p>The first argument has to be type <code>a</code>, with the only constraint being that it be an instance of <code>Eq</code>. <code>3 :: Int</code> satisfies that requirement.</p>\n\n<p>The second argument just needs to be a two-argument function returning an <code>Int</code>. <code>(+)</code> satisfies that requirement, while fixing <code>b ~ c ~ Int</code> as well.</p>\n\n<p>The third argument must be of type <code>b ~ Int</code> as well.</p>\n\n<p>The last argument just needs to be a list of type <code>[(d, Int)</code>] for any type <code>d</code>. We'll just pass a list of pairs of <code>Int</code>s.</p>\n"}, {"tags": [], "owner": {"reputation": 96, "user_id": 4486553, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4c99ff6104ff95b2b679f029c54c4b95?s=128&d=identicon&r=PG", "display_name": "jakzale", "link": "https://stackoverflow.com/users/4486553/jakzale"}, "is_accepted": true, "score": 1, "last_activity_date": 1474692378, "creation_date": 1474692378, "answer_id": 39672614, "question_id": 39671245, "link": "https://stackoverflow.com/questions/39671245/how-can-i-call-this-function-in-haskell/39672614#39672614", "title": "How can I call this function in haskell?", "body": "<p>It looks like you have somewhat complicated function that checks for a membership in an association list using a helper function.</p>\n\n<p>The function you provided:</p>\n\n<pre><code>function :: Eq a =&gt; a -&gt; (b -&gt; c -&gt; a) -&gt; b -&gt; [(d,c)] -&gt; Bool\n</code></pre>\n\n<p>Takes three arguments:</p>\n\n<ul>\n<li>an element to compare <code>a</code>, </li>\n<li>a helper function <code>b -&gt; c -&gt; a</code>,</li>\n<li>an argument for the helper function <code>b</code>,</li>\n<li>a list of tuples <code>[(d, c)]</code>.</li>\n</ul>\n\n<p>Then, one possible function of the type you provided is:</p>\n\n<pre><code>function :: Eq a =&gt; a -&gt; (b -&gt; c -&gt; a) -&gt; b -&gt; [(d,c)] -&gt; Bool\nfunction a f b ((_,c):rest) = ((f b c) == a) || (function a f b rest\nfunction a f b rest         = False\n</code></pre>\n\n<p>Which checks for an membership in the list, by ignoring the first element of the tuple and applying the helper function to the second argument of the tuple.</p>\n\n<p>While the function may seem complicated, you could run it on a fairly simple example</p>\n\n<pre><code>function True (==) 0 [(\"a\", 0), (\"b\",1)]\n</code></pre>\n\n<p>In the above example, we are looking for <code>0</code> using the <code>(==)</code> helper function, and we check if the helper function returns <code>True</code>.</p>\n"}], "owner": {"reputation": 1, "user_id": 5237178, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fd5d45695655844eed7db4830e52d536?s=128&d=identicon&r=PG&f=1", "display_name": "Xtreme", "link": "https://stackoverflow.com/users/5237178/xtreme"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 101, "favorite_count": 1, "accepted_answer_id": 39672614, "answer_count": 2, "score": -2, "last_activity_date": 1474692378, "creation_date": 1474676195, "last_edit_date": 1474676327, "question_id": 39671245, "link": "https://stackoverflow.com/questions/39671245/how-can-i-call-this-function-in-haskell", "title": "How can I call this function in haskell?", "body": "<p>I have a type function like this</p>\n\n<pre><code>function :: Eq a =&gt; a -&gt; (b -&gt; c -&gt; a) -&gt; b -&gt; [(d,c)] -&gt; Bool\n</code></pre>\n\n<p>But I cannot call it. Can anyone give me an example: for example function a b c with an example?</p>\n"}, {"tags": ["haskell", "types", "type-kinds"], "comments": [{"owner": {"reputation": 37219, "user_id": 1523776, "user_type": "moderator", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/b3e0b5c8e42a8c38009ef2d969f8dabb?s=128&d=identicon&r=PG", "display_name": "Benjamin Hodgson", "link": "https://stackoverflow.com/users/1523776/benjamin-hodgson"}, "edited": false, "score": 4, "creation_date": 1474670550, "post_id": 39670539, "comment_id": 66642621, "body": "I suspect it&#39;s inferring <code>interpretationSize :: *</code>. You need to turn on <code>PolyKinds</code> or give <code>interpretationSize</code> a kind annotation."}, {"owner": {"reputation": 1972, "user_id": 1747134, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/696bad3bd2c5e16ded04f3cdf436623f?s=128&d=identicon&r=PG", "display_name": "user1747134", "link": "https://stackoverflow.com/users/1747134/user1747134"}, "reply_to_user": {"reputation": 37219, "user_id": 1523776, "user_type": "moderator", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/b3e0b5c8e42a8c38009ef2d969f8dabb?s=128&d=identicon&r=PG", "display_name": "Benjamin Hodgson", "link": "https://stackoverflow.com/users/1523776/benjamin-hodgson"}, "edited": false, "score": 0, "creation_date": 1474670738, "post_id": 39670539, "comment_id": 66642657, "body": "Thanks, adding PolyKinds helped. :-)"}, {"owner": {"reputation": 4072, "user_id": 4400060, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/9g6QZ.png?s=128&g=1", "display_name": "radrow", "link": "https://stackoverflow.com/users/4400060/radrow"}, "edited": false, "score": 0, "creation_date": 1552561355, "post_id": 39670539, "comment_id": 97060669, "body": "This should be marked as solved"}], "answers": [{"tags": [], "owner": {"reputation": 4072, "user_id": 4400060, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/9g6QZ.png?s=128&g=1", "display_name": "radrow", "link": "https://stackoverflow.com/users/4400060/radrow"}, "is_accepted": true, "score": 0, "last_activity_date": 1570981922, "last_edit_date": 1570981922, "creation_date": 1552561334, "answer_id": 55160828, "question_id": 39670539, "link": "https://stackoverflow.com/questions/39670539/expected-a-type-but-i-has-kind-nat/55160828#55160828", "title": "Expected a type, but \u2018i\u2019 has kind \u2018Nat\u2019", "body": "<p>You need to turn on <code>PolyKinds</code> extension or give <code>interpretationSize</code> a kind annotation.</p>\n"}], "owner": {"reputation": 1972, "user_id": 1747134, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/696bad3bd2c5e16ded04f3cdf436623f?s=128&d=identicon&r=PG", "display_name": "user1747134", "link": "https://stackoverflow.com/users/1747134/user1747134"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 947, "favorite_count": 0, "accepted_answer_id": 55160828, "answer_count": 1, "score": 2, "last_activity_date": 1570981922, "creation_date": 1474670478, "question_id": 39670539, "link": "https://stackoverflow.com/questions/39670539/expected-a-type-but-i-has-kind-nat", "title": "Expected a type, but \u2018i\u2019 has kind \u2018Nat\u2019", "body": "<p>I want to implement simple propositional logic with type-bounded size of the interpretation. But somhow I fail to convert type-level numbers to values using <code>natVal</code>. Sample code:</p>\n\n<pre><code>import GHC.TypeLits\nimport Data.Proxy\n\nnewtype PropositionalVariable (interpretationSize) = PropositionalVariable {\n  getVariable :: Int\n} deriving (Show, Eq)\n\ninstance KnownNat i =&gt; Enum (PropositionalVariable i) where\n  fromEnum = getVariable\n  toEnum e | e &lt;= 0 = error \"Variable must be positive integer\"\n           | (toInteger e) &gt; (natVal (Proxy :: Proxy i)) = error \"Variable index overflow\"\n           | otherwise = PropositionalVariable e\n</code></pre>\n\n<p>Gives me errors like:</p>\n\n<pre><code>\u2022 Expected a type, but \u2018i\u2019 has kind \u2018Nat\u2019\n\u2022 In the first argument of \u2018PropositionalVariable\u2019, namely \u2018i\u2019\n  In the first argument of \u2018Enum\u2019, namely \u2018PropositionalVariable i\u2019\n  In the instance declaration for \u2018Enum (PropositionalVariable i)\u2019\n</code></pre>\n\n<p>What is the correct way to convert types level integers to values in this case?</p>\n"}, {"tags": ["xml", "haskell", "serialization", "aeson"], "answers": [{"tags": [], "owner": {"reputation": 158, "user_id": 2512259, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1a349b2b2439bbd5e39f6944fa1f5bdf?s=128&d=identicon&r=PG", "display_name": "Sebastiaan", "link": "https://stackoverflow.com/users/2512259/sebastiaan"}, "is_accepted": true, "score": 1, "last_activity_date": 1474666788, "creation_date": 1474666788, "answer_id": 39669936, "question_id": 39669581, "link": "https://stackoverflow.com/questions/39669581/convert-data-type-to-xml-via-generics/39669936#39669936", "title": "Convert data type to xml via generics?", "body": "<p>I think <a href=\"https://github.com/finnsson/Text.XML.Generic\" rel=\"nofollow\">https://github.com/finnsson/Text.XML.Generic</a> is what you're looking for. It's also in hackage, where it's called <code>text-xml-generic</code></p>\n"}, {"tags": [], "owner": {"reputation": 14449, "user_id": 105678, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/859da59b3e4097fa659aabb55412de10?s=128&d=identicon&r=PG", "display_name": "Sean Clark Hess", "link": "https://stackoverflow.com/users/105678/sean-clark-hess"}, "is_accepted": false, "score": 0, "last_activity_date": 1474667357, "creation_date": 1474667357, "answer_id": 39670040, "question_id": 39669581, "link": "https://stackoverflow.com/questions/39669581/convert-data-type-to-xml-via-generics/39670040#39670040", "title": "Convert data type to xml via generics?", "body": "<p>I found <a href=\"https://hackage.haskell.org/package/tofromxml\" rel=\"nofollow\">tofromxml</a>, which also solves the problem. It's a little newer and has a few more downloads than <a href=\"https://hackage.haskell.org/package/text-xml-generic\" rel=\"nofollow\">text-xml-generic</a>, but otherwise they look like they both work. </p>\n"}], "owner": {"reputation": 14449, "user_id": 105678, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/859da59b3e4097fa659aabb55412de10?s=128&d=identicon&r=PG", "display_name": "Sean Clark Hess", "link": "https://stackoverflow.com/users/105678/sean-clark-hess"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 217, "favorite_count": 1, "accepted_answer_id": 39669936, "answer_count": 2, "score": 2, "last_activity_date": 1474667357, "creation_date": 1474664904, "last_edit_date": 1474665781, "question_id": 39669581, "link": "https://stackoverflow.com/questions/39669581/convert-data-type-to-xml-via-generics", "title": "Convert data type to xml via generics?", "body": "<p>Is there a library somewhere that can convert data types to xml via generics? Basically like <a href=\"https://hackage.haskell.org/package/aeson-1.0.1.0/docs/Data-Aeson.html\" rel=\"nofollow\">Data.Aeson</a> but for XML. Or a function that converts a Data.Aeson.Value into xml in some generic way?</p>\n\n<p>If that doesn't exist, how would you convert a custom data type to xml by hand? Most of my googling is showing me how to convert away from XML, rather than to it. </p>\n"}, {"tags": ["haskell", "typeclass", "type-level-computation"], "comments": [{"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 1, "creation_date": 1474661026, "post_id": 39668667, "comment_id": 66639016, "body": "Why not try <code>instance b ~ (2*a) =&gt; Clz (Foo a b c)</code>?"}], "answers": [{"comments": [{"owner": {"reputation": 1972, "user_id": 1747134, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/696bad3bd2c5e16ded04f3cdf436623f?s=128&d=identicon&r=PG", "display_name": "user1747134", "link": "https://stackoverflow.com/users/1747134/user1747134"}, "edited": false, "score": 1, "creation_date": 1474670504, "post_id": 39668746, "comment_id": 66642608, "body": "Thanks, i did not know this usage of <code>~</code>."}], "tags": [], "owner": {"reputation": 64805, "user_id": 286871, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/xNBpr.png?s=128&g=1", "display_name": "Tikhon Jelvis", "link": "https://stackoverflow.com/users/286871/tikhon-jelvis"}, "is_accepted": true, "score": 3, "last_activity_date": 1474661148, "last_edit_date": 1495541969, "creation_date": 1474661148, "answer_id": 39668746, "question_id": 39668667, "link": "https://stackoverflow.com/questions/39668667/typeclass-instance-with-arithmetic-constraints-on-types/39668746#39668746", "title": "Typeclass instance with arithmetic constraints on types", "body": "<p>You can use a type equivalence constraint (by enabling GADTs or type families):</p>\n\n<pre><code>instance (b ~ (2 * a)) =&gt; Clz (Foo a b c) where\n</code></pre>\n\n<p>This is a common technique for working with type families as seen in this <a href=\"https://stackoverflow.com/a/2591220/286871\">other answer</a>. That answer has a bit more explanation: this constraint doesn't mean <em>exactly</em> the same thing as the version you wanted, but will probably still work for your purposes.</p>\n"}], "owner": {"reputation": 1972, "user_id": 1747134, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/696bad3bd2c5e16ded04f3cdf436623f?s=128&d=identicon&r=PG", "display_name": "user1747134", "link": "https://stackoverflow.com/users/1747134/user1747134"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 89, "favorite_count": 0, "accepted_answer_id": 39668746, "answer_count": 1, "score": 1, "last_activity_date": 1474661148, "creation_date": 1474660807, "question_id": 39668667, "link": "https://stackoverflow.com/questions/39668667/typeclass-instance-with-arithmetic-constraints-on-types", "title": "Typeclass instance with arithmetic constraints on types", "body": "<p>Basically, I would like to be able to do something like this:</p>\n\n<pre><code>{-# LANGUAGE KindSignatures #-}\n{-# LANGUAGE DataKinds #-}\n{-# LANGUAGE TypeOperators #-}\n{-# LANGUAGE FlexibleInstances #-}\nimport GHC.TypeLits\n\nnewtype Foo (a::Nat) (b::Nat) c = Foo {getFoo :: c}\n\nclass Clz a where\n\ninstance Clz (Foo a (2*a) c) where\n</code></pre>\n\n<p>I.e., to make <code>Foo a b</code> instance of <code>Clz</code> only when <code>a = 2*b</code>.</p>\n\n<p>I understand that the problem is in the <code>(2*a)</code> expression on the last line. When I try to compile it, I get:</p>\n\n<pre><code>\u2022 Illegal type synonym family application in instance:\n    Foo a (2 * a) c\n\u2022 In the instance declaration for \u2018Clz (Foo a (2 * a) c)\u2019\n</code></pre>\n\n<p>Is there a way to overcome this? How would I need to change the syntax? Do I need more language extensions? I am using latest GHC (8.0.1).</p>\n"}, {"tags": ["haskell", "types", "polymorphism", "maybe"], "comments": [{"owner": {"reputation": 61419, "user_id": 849891, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/MbEO3.png?s=128&g=1", "display_name": "Will Ness", "link": "https://stackoverflow.com/users/849891/will-ness"}, "edited": false, "score": 0, "creation_date": 1474657381, "post_id": 39667785, "comment_id": 66637297, "body": "<a href=\"http://hackage.haskell.org/package/base-4.9.0.0/docs/Prelude.html#t:Num\" rel=\"nofollow noreferrer\">hackage.haskell.org/package/base-4.9.0.0/docs/&hellip;</a>"}, {"owner": {"reputation": 40537, "user_id": 465378, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/c03b8d34978563858020eff0d14cc17b?s=128&d=identicon&r=PG", "display_name": "Alexis King", "link": "https://stackoverflow.com/users/465378/alexis-king"}, "edited": false, "score": 0, "creation_date": 1474657399, "post_id": 39667785, "comment_id": 66637308, "body": "Haskell numeric literals are polymorphic, so they can be used to represent any type that implements the <code>Num</code> typeclass. Therefore, the type of any numeric literal is actually of type <code>Num a =&gt; a</code>."}, {"owner": {"reputation": 61419, "user_id": 849891, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/MbEO3.png?s=128&g=1", "display_name": "Will Ness", "link": "https://stackoverflow.com/users/849891/will-ness"}, "edited": false, "score": 0, "creation_date": 1474657433, "post_id": 39667785, "comment_id": 66637331, "body": "try <code>Prelude&gt; :i Num</code> and see the list of its instances. In addition to <code>Int</code>, there&#39;s the <code>Integer</code>, <code>Float</code> and <code>Double</code>, at least."}], "answers": [{"tags": [], "owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "is_accepted": true, "score": 4, "last_activity_date": 1474657379, "creation_date": 1474657379, "answer_id": 39667857, "question_id": 39667785, "link": "https://stackoverflow.com/questions/39667785/different-maybe-types-when-inspecting-in-ghci/39667857#39667857", "title": "Different Maybe Types When Inspecting in GHCI", "body": "<p>Because <code>54</code> can be of <em>any</em> numeric type. Try e.g. <code>Just 54 :: Maybe Float</code>.</p>\n\n<p>If you don't specify any, and the compiler can not pick a precise one, it will keep the most general type for it -- <code>Num a =&gt; Maybe a</code> means that it can be any type of the form <code>Maybe a</code>, as long as <code>a</code> is numeric.</p>\n\n<p>Note that, when you try to print it, GHCi plays some tricks and chooses <code>a</code> for you. This is called \"defaulting\". Otherwise, entering <code>54</code> and pressing enter, we would get <code>Ambiguous type error: (which numeric type?)</code>, which is inconvenient.</p>\n"}], "owner": {"reputation": 1180, "user_id": 6302962, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/efdfc3bfc2651aebff7bcf20170edae6?s=128&d=identicon&r=PG&f=1", "display_name": "clo_jur", "link": "https://stackoverflow.com/users/6302962/clo-jur"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 64, "favorite_count": 0, "accepted_answer_id": 39667857, "answer_count": 1, "score": 2, "last_activity_date": 1474657715, "creation_date": 1474657098, "last_edit_date": 1474657715, "question_id": 39667785, "link": "https://stackoverflow.com/questions/39667785/different-maybe-types-when-inspecting-in-ghci", "title": "Different Maybe Types When Inspecting in GHCI", "body": "<p>I'm new to Haskell and trying to teach myself the ropes, so forgive me if this is a basic question.</p>\n\n<p>If I open up the interpreter (ghci), why do I get different types as below:</p>\n\n<p><code>Just 54</code>\nthe type is\n<code>Just 54 :: Num a =&gt; Maybe a</code></p>\n\n<p><code>Just 54 :: Maybe Int</code>\nthe type is\n<code>Just 54 :: Maybe Int</code></p>\n\n<p><code>Just \"Stack\"</code>\nthe type is\n<code>Maybe [Char]</code></p>\n\n<p>I don't understand why the first example above yields a type other than <code>Maybe Int</code></p>\n"}, {"tags": ["haskell", "megaparsec"], "comments": [{"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 1, "creation_date": 1474664533, "post_id": 39667592, "comment_id": 66640551, "body": "<a href=\"https://mrkkrp.github.io/megaparsec/tutorials/fun-with-the-recovery-feature.html\" rel=\"nofollow noreferrer\">Here&#39;s</a> a blog post about the introduction of <code>withRecovery</code>."}, {"owner": {"reputation": 2334, "user_id": 2397162, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/665b976c79d0c9c842b131a2df510c3c?s=128&d=identicon&r=PG", "display_name": "niceman", "link": "https://stackoverflow.com/users/2397162/niceman"}, "reply_to_user": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 0, "creation_date": 1474692163, "post_id": 39667592, "comment_id": 66646197, "body": "@Alec thanks , I saw it but it makes ParseError part of the result of the parser, when you call <code>runParser</code> it will return <code>Either (ParseError ...) (Either (ParseError ...) a)</code> which seems kind of ugly to me ?!!"}], "answers": [{"tags": [], "owner": {"reputation": 108, "user_id": 6476589, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-OHBMKOvbfng/AAAAAAAAAAI/AAAAAAAADjw/5ye5MX8Sbzo/photo.jpg?sz=128", "display_name": "Brendan Murphy", "link": "https://stackoverflow.com/users/6476589/brendan-murphy"}, "is_accepted": true, "score": 0, "last_activity_date": 1474860099, "creation_date": 1474860099, "answer_id": 39694250, "question_id": 39667592, "link": "https://stackoverflow.com/questions/39667592/multiple-errors-with-different-positions-using-megaparsec/39694250#39694250", "title": "multiple errors with different positions using megaparsec", "body": "<p>If you're sure about Alec's suggestion, but don't want to have <code>Either (ParseError ...) (Either (ParseError ...) a)</code>, you can just use Control.Monad.join on that value to turn it into an <code>Either (ParseError ...) a</code>. Sorry if this wasn't too helpful </p>\n"}], "owner": {"reputation": 2334, "user_id": 2397162, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/665b976c79d0c9c842b131a2df510c3c?s=128&d=identicon&r=PG", "display_name": "niceman", "link": "https://stackoverflow.com/users/2397162/niceman"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 119, "favorite_count": 1, "accepted_answer_id": 39694250, "answer_count": 1, "score": 3, "last_activity_date": 1474860099, "creation_date": 1474656218, "question_id": 39667592, "link": "https://stackoverflow.com/questions/39667592/multiple-errors-with-different-positions-using-megaparsec", "title": "multiple errors with different positions using megaparsec", "body": "<p>I'm going to use megaparsec for parsing a programming language for university project. However, I searched for finding a way to report multiple errors.  </p>\n\n<p>I know about withRecovery and I saw <a href=\"https://github.com/mrkkrp/megaparsec/issues/43\" rel=\"nofollow\">this</a> issue but I didn't find about the case where errors happen on different positions.  </p>\n\n<p>for example in this java code : </p>\n\n<pre><code>class A\n{ \n    public get() // line 3 column 10\n    {\n        return x // line 5 column 22\n    }\n}\n</code></pre>\n\n<p>There are error1 \"expected type at line 3 column 10\" and error2 \"missing semicolon at line 5 column 22\"</p>\n\n<p>I know I can combine error messages with <code>failure</code> but how about multiple positions ? How do I do that ?</p>\n"}, {"tags": ["haskell", "ghc", "typeclass", "type-families"], "comments": [{"owner": {"reputation": 14485, "user_id": 190376, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cd8280c5e1491b8cf55760750ed97dec?s=128&d=identicon&r=PG", "display_name": "Reid Barton", "link": "https://stackoverflow.com/users/190376/reid-barton"}, "edited": false, "score": 0, "creation_date": 1474655746, "post_id": 39666813, "comment_id": 66636435, "body": "Presumably GHC is selecting an instance for <code>C</code> early on, which it&#39;s entitled to do since the instance it selects is marked <code>INCOHERENT</code>."}, {"owner": {"reputation": 3975, "user_id": 1031627, "user_type": "registered", "accept_rate": 72, "profile_image": "https://i.stack.imgur.com/yamFN.jpg?s=128&g=1", "display_name": "Luka Horvat", "link": "https://stackoverflow.com/users/1031627/luka-horvat"}, "reply_to_user": {"reputation": 14485, "user_id": 190376, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cd8280c5e1491b8cf55760750ed97dec?s=128&d=identicon&r=PG", "display_name": "Reid Barton", "link": "https://stackoverflow.com/users/190376/reid-barton"}, "edited": false, "score": 0, "creation_date": 1474657406, "post_id": 39666813, "comment_id": 66637312, "body": "@ReidBarton Wouldn&#39;t that make incoherent instances pointless since it basically means &quot;always pick this instance&quot;?"}, {"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 0, "creation_date": 1474657993, "post_id": 39666813, "comment_id": 66637618, "body": "Incoherent instances are useful when you want <code>instance C X y</code> and <code>instance C x Y</code>, and you don&#39;t care which instance is chosen for <code>C X Y</code>. Overlapping instances are useful for making me look at your code like a dog turd on my shoe."}, {"owner": {"reputation": 3975, "user_id": 1031627, "user_type": "registered", "accept_rate": 72, "profile_image": "https://i.stack.imgur.com/yamFN.jpg?s=128&g=1", "display_name": "Luka Horvat", "link": "https://stackoverflow.com/users/1031627/luka-horvat"}, "reply_to_user": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 0, "creation_date": 1474658041, "post_id": 39666813, "comment_id": 66637644, "body": "@dfeuer Apparently you also have to not care which one is chosen for <code>C Z W</code> either."}, {"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 2, "creation_date": 1474658184, "post_id": 39666813, "comment_id": 66637722, "body": "No, that is quite irrelevant. Your <code>INCOHERENT</code> instance is completely general; you have no type constructors in it."}, {"owner": {"reputation": 3975, "user_id": 1031627, "user_type": "registered", "accept_rate": 72, "profile_image": "https://i.stack.imgur.com/yamFN.jpg?s=128&g=1", "display_name": "Luka Horvat", "link": "https://stackoverflow.com/users/1031627/luka-horvat"}, "reply_to_user": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 0, "creation_date": 1474658517, "post_id": 39666813, "comment_id": 66637893, "body": "@dfeuer That&#39;s not how the process is supposed to work. If two instances match then the more specific one gets picked. If there&#39;s more than one most specific instance then <code>INCOHERENT</code> pragma has an effect."}, {"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 0, "creation_date": 1474659075, "post_id": 39666813, "comment_id": 66638135, "body": "I don&#39;t think that&#39;s right, no. I believe only the overlapping stuff and not the incoherent stuff cares about specificity. But I can&#39;t say I&#39;m sure, because the documentation is horribly complicated and simultaneously vague. These are just awful extensions that should really be ripped out like invasive ivy."}, {"owner": {"reputation": 3975, "user_id": 1031627, "user_type": "registered", "accept_rate": 72, "profile_image": "https://i.stack.imgur.com/yamFN.jpg?s=128&g=1", "display_name": "Luka Horvat", "link": "https://stackoverflow.com/users/1031627/luka-horvat"}, "reply_to_user": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 0, "creation_date": 1474659707, "post_id": 39666813, "comment_id": 66638425, "body": "@dfeuer I&#39;d agree that <a href=\"https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html?highlight=incoherentinstances#ghc-flag--XIncoherentInstances\" rel=\"nofollow noreferrer\">downloads.haskell.org/~ghc/latest/docs/html/users_guide/&hellip;</a> leaves things a bit open to interpretation but I&#39;m pretty sure that one of these instances should get eliminated before any of these pragmas become relevant."}, {"owner": {"reputation": 14485, "user_id": 190376, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cd8280c5e1491b8cf55760750ed97dec?s=128&d=identicon&r=PG", "display_name": "Reid Barton", "link": "https://stackoverflow.com/users/190376/reid-barton"}, "edited": false, "score": 0, "creation_date": 1474661021, "post_id": 39666813, "comment_id": 66639012, "body": "Like I said earlier, I think instance resolution for <code>C</code> is happening before GHC knows anything about the type <code>t</code> of <code>v</code> will be. So the instance <code>C Int</code> is not even a candidate since it does not match <code>C t</code>. Since there is an instance <code>C a</code> to select that is incoherent, GHC does not care about the fact that <code>t</code> might later turn out to be a type for which there is a more specific instance available. This is documented in the section you linked to."}, {"owner": {"reputation": 3975, "user_id": 1031627, "user_type": "registered", "accept_rate": 72, "profile_image": "https://i.stack.imgur.com/yamFN.jpg?s=128&g=1", "display_name": "Luka Horvat", "link": "https://stackoverflow.com/users/1031627/luka-horvat"}, "reply_to_user": {"reputation": 14485, "user_id": 190376, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cd8280c5e1491b8cf55760750ed97dec?s=128&d=identicon&r=PG", "display_name": "Reid Barton", "link": "https://stackoverflow.com/users/190376/reid-barton"}, "edited": false, "score": 0, "creation_date": 1474661583, "post_id": 39666813, "comment_id": 66639260, "body": "@ReidBarton I don&#39;t think it&#39;s sensible that adding a type annotation to something for which GHC already knows the type should change if the code compiles. Ultimately what I&#39;d want is to have an instance that gets picked if the type is polymorphic so it&#39;s not possible to determine which concrete instance to pick. What I get here is GHC giving up before it absolutely has to. I guess it just doesn&#39;t work like that but it sure seems like a bug."}], "answers": [{"comments": [{"owner": {"reputation": 3975, "user_id": 1031627, "user_type": "registered", "accept_rate": 72, "profile_image": "https://i.stack.imgur.com/yamFN.jpg?s=128&g=1", "display_name": "Luka Horvat", "link": "https://stackoverflow.com/users/1031627/luka-horvat"}, "edited": false, "score": 0, "creation_date": 1474834729, "post_id": 39671006, "comment_id": 66682077, "body": "You are completely right. Seems that GHC immediately solves as much as it can when it gets to <code>f c</code> when <code>x</code> is yet to be applied. In fact, if I switch the order of arguments of <code>f</code> then my code works and the second instance is selected."}], "tags": [], "owner": {"reputation": 13807, "user_id": 2407038, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/538f6f4a9aa43841841de7d8e8b169fc?s=128&d=identicon&r=PG&f=1", "display_name": "user2407038", "link": "https://stackoverflow.com/users/2407038/user2407038"}, "is_accepted": true, "score": 1, "last_activity_date": 1474675287, "last_edit_date": 1474675287, "creation_date": 1474674021, "answer_id": 39671006, "question_id": 39666813, "link": "https://stackoverflow.com/questions/39666813/strange-interaction-between-type-families-and-incoherent-instances/39671006#39671006", "title": "Strange interaction between type families and incoherent instances", "body": "<p>GHC is completely correct to reject this code. You have a <code>C (F a)</code> constraint which arises from </p>\n\n<pre><code>f c :: C (F a) =&gt; [a] -&gt; ()\n</code></pre>\n\n<p>When you turn on <code>INCOHERENT</code> , GHC will immediately reduce this to </p>\n\n<pre><code>f c :: Monoid (F a) =&gt; [a] -&gt; ()\n</code></pre>\n\n<p><em>without even considering the type of the argument</em>. That is what incoherence means - an instantiation could provide a more specific instance, but an incoherent instance matches anyways. And of course the instance <code>... =&gt; C a</code> matches <em>every</em> type, so if your <code>C</code> constraint appears anywhere, that instance will be matched immediately.</p>\n\n<p>With <code>OVERLAPPABLE</code> or the like, the <code>C (F a)</code> constraint <em>cannot</em> be reduced by selecting the <code>Monoid a =&gt; C a</code> instance, because the <code>C Int</code> instance could match as well (this is coherence, the opposite of incoherence).</p>\n\n<p>If you want to see yourself, ask GHC for the inferred type of <code>f c</code> with <code>INCOHERENT</code> and <code>OVERLAPPABLE</code>. </p>\n"}], "owner": {"reputation": 3975, "user_id": 1031627, "user_type": "registered", "accept_rate": 72, "profile_image": "https://i.stack.imgur.com/yamFN.jpg?s=128&g=1", "display_name": "Luka Horvat", "link": "https://stackoverflow.com/users/1031627/luka-horvat"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 106, "favorite_count": 0, "accepted_answer_id": 39671006, "answer_count": 1, "score": 2, "last_activity_date": 1474675287, "creation_date": 1474653276, "question_id": 39666813, "link": "https://stackoverflow.com/questions/39666813/strange-interaction-between-type-families-and-incoherent-instances", "title": "Strange interaction between type families and incoherent instances", "body": "<p>This code sample doesn't compile.</p>\n\n<pre><code>{-# LANGUAGE TypeFamilies, FlexibleInstances, UndecidableInstances, ScopedTypeVariables #-}\nmodule IncoherentBug where\n\ntype family F a where\n    F () = Int\n    F a = a\n\nclass C a where\n    c :: a -&gt; Int\n\ninstance C Int where\n    c y = y\n\ninstance {-# INCOHERENT #-} Monoid a =&gt; C a where\n    c _ = 0\n\nclass TwoPossible a where\n    x :: a\n\ninstance a ~ () =&gt; TwoPossible [a] where\n    x = []\n\ninstance TwoPossible Bool where\n    x = False\n\nf :: (F a -&gt; Int) -&gt; [a] -&gt; ()\nf _ _ = ()\n\n\ntest = f (\\v -&gt; c v) x\n</code></pre>\n\n<p>Basically what's happening here is the signature of <code>f</code> requests that the type of <code>x</code> gets resolved to <code>[()]</code>, then the type of <code>v</code> is <code>F ()</code> which is <code>Int</code>, and finally the first instance of <code>C</code> should be picked. What happens instead is that I get a missing <code>Monoid Int</code> instance error.</p>\n\n<p>The code compiles fine when I change the <code>INCOHERENT</code> instance to an <code>OVERLAPPABLE</code> one. It also works if I annotate <code>v</code> with either <code>Int</code> or <code>F ()</code>. It also works if I annotate <code>x</code> (as the parameter to f) with <code>[()]</code>.</p>\n\n<p>Is this a bug or am I misunderstanding something here? ghc-mod reports the type <code>F ()</code> for <code>v</code> even if I don't annotate it as such. Besides the fact that the error message mentions an <code>Int</code> means that the type checker figured out the correct type for <code>v</code> but for some reason didn't pick the more specific instance.</p>\n\n<p>I should also maybe note that I'm using GHC 8. I don't know if this issue appears in the earlier versions.</p>\n"}, {"tags": ["haskell", "monoids"], "comments": [{"owner": {"reputation": 2585, "user_id": 6701918, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/fBOp9.jpg?s=128&g=1", "display_name": "V. Semeria", "link": "https://stackoverflow.com/users/6701918/v-semeria"}, "edited": false, "score": 0, "creation_date": 1474644544, "post_id": 39663982, "comment_id": 66630575, "body": "An important use of adjoint functors in Haskell is monads (en.wikipedia.org/wiki/Monad_(category_theory)) : a monad is the composition of two such functors."}], "answers": [{"tags": [], "owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "is_accepted": false, "score": 9, "last_activity_date": 1474644001, "last_edit_date": 1474644001, "creation_date": 1474643577, "answer_id": 39664151, "question_id": 39663982, "link": "https://stackoverflow.com/questions/39663982/what-does-adjoining-mean-in-practical-uses/39664151#39664151", "title": "What does adjoining mean in practical uses?", "body": "<p>Sometimes \"adjoining\" means \"adding something new\", as in the semigroup-related sentence you quote. E.g. someone might say that using <code>Maybe a</code> means adding/adjoining a new element <code>Nothing</code> to the type <code>a</code>. Personally, I would only use \"adding\" for this, though.</p>\n\n<p>This has nothing to do with adjoints in the categorical sense, which are a tricky concept.</p>\n\n<p>Roughly put, assume you have a functional type of the form</p>\n\n<pre><code>F a -&gt; b\n</code></pre>\n\n<p>where <code>F</code> is some mapping from types to types (more precisely, a functor). Sometimes, you can express an isomorphic type to the above one having the form</p>\n\n<pre><code>a -&gt; G b\n</code></pre>\n\n<p>where \"magically\" the function <code>F</code> on the left side moved to the right side, changing into <code>G</code>.</p>\n\n<p>The canonical example is currying: Let e.g. </p>\n\n<pre><code>F T = (T, Int)\nG T = Int -&gt; T\n</code></pre>\n\n<p>Then we have</p>\n\n<pre><code>   (F a) -&gt; b \n-- definition of F\n=  (a, Int) -&gt; b\n-- currying\n=~ a -&gt; (Int -&gt; b)\n-- definition of G\n=  a -&gt; G b\n</code></pre>\n\n<p>In such case, we write <code>F -| G</code> which is read as \"<code>F</code> is left adjoint to <code>G</code>\".</p>\n\n<p>Every time you can \"nicely move\" an operation on the input type on the other side of the arrow, changing it into another operation on the output type, you have an adjoint. (Technically, \"nicely\" means we have a natural isomorphism)</p>\n"}], "owner": {"reputation": 4471, "user_id": 3858142, "user_type": "registered", "accept_rate": 46, "profile_image": "https://www.gravatar.com/avatar/4c27dead2edf0b6dc28833a694c42ba1?s=128&d=identicon&r=PG&f=1", "display_name": "sevo", "link": "https://stackoverflow.com/users/3858142/sevo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 92, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1474644001, "creation_date": 1474643037, "question_id": 39663982, "link": "https://stackoverflow.com/questions/39663982/what-does-adjoining-mean-in-practical-uses", "title": "What does adjoining mean in practical uses?", "body": "<p>I often run into term \"adjoin\" when trying to understand some concepts. Those things are too abstract for me to understand as I'm neither expert in field nor category theory.</p>\n\n<p>The simplest case I found is a <code>Monoid Maybe a</code> instance which often behaves not as I would sometimes expect with regard to <code>Nothing</code>.</p>\n\n<p>From <a href=\"https://en.wikipedia.org/wiki/Monoid\" rel=\"nofollow\">Wikipedia</a> we can learn that by \"adjoining\" an element to a semigroup we can get a different <code>Monoid</code> instance. I don't understand the sentence but the equations given suggest it's exactly what I need (and is not default for some reason):</p>\n\n<blockquote>\n  <p>Any semigroup S may be turned into a monoid simply by adjoining an element e not in S and defining e \u2022 s = s = s \u2022 e for all s \u2208 S.</p>\n</blockquote>\n\n<ul>\n<li>Doe \"adjoining\" mean the same as \"adding\" at least in this case?</li>\n<li>Are there other simple examples of this concept? </li>\n<li>What would be simplest possible instance of something that is \"left-adjoint\"?</li>\n</ul>\n"}, {"tags": ["opencv", "haskell", "image-processing"], "comments": [{"owner": {"reputation": 62421, "user_id": 216164, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/786f224adbe0784cdf7d0f15476061fe?s=128&d=identicon&r=PG", "display_name": "Thomas M. DuBuisson", "link": "https://stackoverflow.com/users/216164/thomas-m-dubuisson"}, "edited": false, "score": 1, "creation_date": 1474648581, "post_id": 39661287, "comment_id": 66632790, "body": "Can you provide a minimum complete example?  The fragment you provided isn&#39;t anything someone can paste into a file and try to compile themselves."}, {"owner": {"reputation": 1668, "user_id": 4050960, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2433d3125076f5789fe82a2eae87fdd1?s=128&d=identicon&r=PG&f=1", "display_name": "Chuck Aguilar", "link": "https://stackoverflow.com/users/4050960/chuck-aguilar"}, "reply_to_user": {"reputation": 62421, "user_id": 216164, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/786f224adbe0784cdf7d0f15476061fe?s=128&d=identicon&r=PG", "display_name": "Thomas M. DuBuisson", "link": "https://stackoverflow.com/users/216164/thomas-m-dubuisson"}, "edited": false, "score": 0, "creation_date": 1474881153, "post_id": 39661287, "comment_id": 66695988, "body": "Here&#39;s a gist: <a href=\"https://gist.github.com/Chuck-Aguilar/2a4a0506c2924c4d72134a45dc19935c\" rel=\"nofollow noreferrer\">gist</a>  I saw that the problem was with the type of &quot;depth&quot; and added this: <code>(depth </code>In` &#39;[Word8, Word16, Float], channels <code>In</code> &#39;[1, 3, 4]) =&gt;<code>. However, it still not working. I get this error: </code> Couldn&#39;t match type \u2018IO\u2019 with \u2018Either CV.CvException\u2019 Expected type: Either CV.CvException () Actual type: IO ()` And that&#39;s weird, &#39;cause I should be able to show the image."}], "answers": [{"comments": [{"owner": {"reputation": 113, "user_id": 1663197, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b7c055b7bb6a0bbbbd3e71fd90e1a346?s=128&d=identicon&r=PG", "display_name": "AleXoundOS", "link": "https://stackoverflow.com/users/1663197/alexoundos"}, "edited": false, "score": 0, "creation_date": 1549213328, "post_id": 39747523, "comment_id": 95814246, "body": "Quite difficult to read such long lines. Usually, the maximum line length is kept <a href=\"https://github.com/tibbe/haskell-style-guide/blob/master/haskell-style.md#line-length\" rel=\"nofollow noreferrer\">below 80 chars</a>."}], "tags": [], "owner": {"reputation": 1668, "user_id": 4050960, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2433d3125076f5789fe82a2eae87fdd1?s=128&d=identicon&r=PG&f=1", "display_name": "Chuck Aguilar", "link": "https://stackoverflow.com/users/4050960/chuck-aguilar"}, "is_accepted": true, "score": 2, "last_activity_date": 1475065684, "creation_date": 1475065684, "answer_id": 39747523, "question_id": 39661287, "link": "https://stackoverflow.com/questions/39661287/gaussianblurimage-in-haskell-opencv-haskell-binding-to-opencv-3-1/39747523#39747523", "title": "GaussianBlurImage in haskell-opencv (Haskell binding to OpenCV-3.1)", "body": "<p><a href=\"https://github.com/LumiGuide/haskell-opencv\" rel=\"nofollow\">haskell-opencv</a> is an excellent library, but sometimes it's difficult to use because there are a lot of documentation, but difficult to understand, and there are no many examples.</p>\n\n<p>There, every Blur function need a <code>(M.Mat shape ('S channels) ('S depth))</code> matrix, but the matrix are usually so: <code>(M.Mat shape channels depth)</code>, where <code>'S</code> tells it's static. </p>\n\n<p>I use this function: </p>\n\n<p><code>M.coerceMat</code> to have such a Matrix. </p>\n\n<pre><code>coerceMAt :: (ToShapeDS (Proxy shapeOut), ToChannelsDS (Proxy \n    channelsOut), ToDepthDS (Proxy depthOut))    \n    =&gt; Mat shapeIn channelsIn depthIn    \n    -&gt; CvExcept (Mat shapeOut channelsOut depthOut)\n</code></pre>\n\n<p>As it returns <code>CVExcept</code>, I use <code>exceptError :: CvExcept a -&gt; a</code> to get just the image. </p>\n\n<p>But the most important is the definition of the function. There was the problem in my code. \n<code>depth</code> cannot be ambiguous, that's why I wrote:</p>\n\n<pre><code>forall height0 width0 channels depth . ( depth `In` '[Word8, Word16, Float, Double] , channels `In` '[1, 3, 4]) =&gt; M.Mat ('S '[height0, width0]) ('S channels) ('S depth) -&gt; IO (M.Mat ('S '[height0, width0]) ('S channels) ('S depth))\n</code></pre>\n\n<p>Here's a complete example. I get an image, resize it, blur it and show it. </p>\n\n<p>Main:</p>\n\n<pre><code>module Main where\n\nimport Lib\nimport qualified OpenCV.Internal.Core.Types.Mat as M\nimport Control.Monad ( void )\nimport qualified OpenCV as CV\nimport qualified Data.ByteString as B\n\nmain :: IO ()\nmain = do\n    test &lt;- controller\n    CV.withWindow \"test\" $ \\window -&gt; do\n        CV.imshow window test  \n        void $ CV.waitKey 10000\n</code></pre>\n\n<p>Lib:</p>\n\n<pre><code>{-# LANGUAGE TypeFamilies #-}\n\nmodule Lib\n    ( controller\n    ) where\n\nimport BlurImage\nimport ResizeImage\nimport Utils\nimport Control.Monad ( void )\nimport Data.Word\nimport qualified OpenCV.Internal.Core.Types.Mat as M\nimport qualified OpenCV as CV\nimport qualified Data.ByteString as B\n\ncontroller :: IO (CV.Mat (CV.S '[CV.D, CV.D]) (CV.S 1) (CV.S Word8))\ncontroller = do\n    file &lt;- B.readFile \"path/to/image.jpg\"\n    img &lt;- return $ CV.imdecode CV.ImreadGrayscale file\n    resized_little_img &lt;- resizeImage img --little image for making a blur in and find the receipt\n    blurImage ((CV.exceptError $ M.coerceMat resized_little_img) :: M.Mat (CV.S '[ CV.D, CV.D]) (CV.S 1) (CV.S Word8))\n</code></pre>\n\n<p>ResizeImage:</p>\n\n<pre><code>{-# LANGUAGE TypeFamilies #-}\n{-# LANGUAGE FlexibleContexts #-}\n{-# LANGUAGE AllowAmbiguousTypes #-}\n\nmodule ResizeImage\n    ( \n    resizeImage\n    ) where\n\nimport Utils\nimport Control.Monad ( void )\nimport Control.Monad.Except\nimport Data.Functor.Identity\nimport Data.Word\nimport Data.Proxy\nimport qualified OpenCV as CV\nimport Linear.V2\nimport OpenCV.TypeLevel\nimport qualified OpenCV.Internal.Core.Types.Mat as M\nimport qualified OpenCV.Core.Types.Size as S\nimport qualified OpenCV.ImgProc.GeometricImgTransform as GIT\nimport GHC.Int (Int32)\n\nresizingImage :: (M.Mat (CV.S [CV.D, CV.D]) CV.D CV.D) -&gt; CV.CvExcept (M.Mat (CV.S [CV.D, CV.D]) CV.D CV.D)\nresizingImage image = GIT.resize (GIT.ResizeAbs $ S.toSize $ (getSize w h Nothing (Just 500))) CV.InterCubic image\n    where\n        [h, w] = getHandW image\n\nresizeImage :: (M.Mat (S '[CV.D, CV.D]) CV.D CV.D) -&gt; IO(M.Mat (CV.S [CV.D, CV.D]) CV.D CV.D)\nresizeImage image = do        \n    resized &lt;- return $ resizingImage image\n    return $ CV.exceptError $ resized\n</code></pre>\n\n<p>BlurImage:</p>\n\n<pre><code>{-# LANGUAGE TypeFamilies #-}\n{-# LANGUAGE FlexibleContexts #-}\n{-# LANGUAGE AllowAmbiguousTypes #-}\n\nmodule BlurImage\n    ( \n    blurImage\n    ) where\n\nimport Utils\nimport Control.Monad ( void )\nimport Control.Monad.Except\nimport qualified Data.ByteString as B\nimport Data.Word\nimport Data.Proxy\nimport qualified OpenCV as CV\nimport Linear.V2\nimport OpenCV.TypeLevel\nimport qualified OpenCV.Internal.Core.Types.Mat as M\nimport qualified OpenCV.Core.Types.Size as S\nimport qualified OpenCV.ImgProc.GeometricImgTransform as GIT\nimport GHC.Int (Int32)\n\n\nmedianBlurImage :: (depth `In` '[Word8, Word16, Float], channels `In` '[1, 3, 4]) =&gt; (M.Mat shape ('S channels) ('S depth)) -&gt; CV.CvExcept (M.Mat shape ('S channels) ('S depth)) \nmedianBlurImage image = CV.medianBlur image 13 \n\ngaussianBlurImage :: (depth `In` '[Word8, Word16, Float, Double], channels `In` '[1, 3, 4]) =&gt; (M.Mat shape ('S channels) ('S depth)) -&gt; CV.CvExcept (M.Mat shape ('S channels) ('S depth)) \ngaussianBlurImage image = CV.gaussianBlur (V2 13 13 :: V2 Int32) 0 0 image\n\nblurImage :: forall height0 width0 channels depth . ( depth `In` '[Word8, Word16, Float, Double] , channels `In` '[1, 3, 4]) =&gt; M.Mat ('S '[height0, width0]) ('S channels) ('S depth) -&gt; IO (M.Mat ('S '[height0, width0]) ('S channels) ('S depth))\nblurImage image = do\n    gaussianBlurred   &lt;- return $ gaussianBlurImage image     \n    return $ CV.exceptError $ gaussianBlurred\n</code></pre>\n\n<p>And that's it. :) I hope it can help someone. </p>\n"}], "owner": {"reputation": 1668, "user_id": 4050960, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2433d3125076f5789fe82a2eae87fdd1?s=128&d=identicon&r=PG&f=1", "display_name": "Chuck Aguilar", "link": "https://stackoverflow.com/users/4050960/chuck-aguilar"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 140, "favorite_count": 1, "accepted_answer_id": 39747523, "answer_count": 1, "score": 1, "last_activity_date": 1475065684, "creation_date": 1474635175, "question_id": 39661287, "link": "https://stackoverflow.com/questions/39661287/gaussianblurimage-in-haskell-opencv-haskell-binding-to-opencv-3-1", "title": "GaussianBlurImage in haskell-opencv (Haskell binding to OpenCV-3.1)", "body": "<p>H!</p>\n\n<p>I'm using <a href=\"https://github.com/LumiGuide/haskell-opencv\" rel=\"nofollow\">haskell-opencv</a> library. I don't know if another one is using it, or know something about it. </p>\n\n<p>I was trying to use gaussianBlurImage, but there's an error that I can't recognize.</p>\n\n<p>I have this: </p>\n\n<pre><code>cropped image = do \n     resized &lt;- resizeImage image\n     gaussianBlurred &lt;- gaussianBlurImage ((M.unsafeCoerceMat . getImageFromEither) resized)\n</code></pre>\n\n<p>Where <strong>resized</strong> is an <em>Either CV.Exception (M.Mat shape channels depth)</em> And I get from here <code>((M.unsafeCoerceMat . getImageFromEither) resized)</code> a <code>Mat shape (S channels) (S depth)</code> as gaussianBlurImage function needs.</p>\n\n<p>The I defined gaussianBlurImage so:</p>\n\n<p><code>gaussianBlurImage image = runExceptT $ CV.pureExcept $ CV.gaussianBlur (V2 13 13 :: V2 Int32) 0 0 image</code></p>\n\n<p>And for me, it looks fine. Similar as here: <a href=\"http://lumiguide.github.io/haskell-opencv/doc/OpenCV-ImgProc-ImgFiltering.html#v:blur\" rel=\"nofollow\">blur</a>. But I get this error:</p>\n\n<blockquote>\n  <p>Couldn't match expected type \u2018'True\u2019 with actual type \u2018Elem depth0\n  '[Word8, Word16, Float, Double]\u2019</p>\n</blockquote>\n\n<p>I noticed, that my gaussianBlurImage has this type:</p>\n\n<pre><code>gaussianBlurImage :: (M.Mat shape0 ('S channels0) ('S depth0)) -&gt; Either CV.CvException (Either CV.CvException (M.Mat shape0 ('S channels0) ('S depth0)))\n</code></pre>\n\n<p>And I liked this one:</p>\n\n<pre><code>gaussianBlurImage :: (M.Mat shape0 ('S channels0) ('S depth0)) -&gt; Either CV.CvException (M.Mat shape0 ('S channels0) ('S depth0))\n</code></pre>\n\n<p>Maybe it has something to do.</p>\n\n<p>I tried it with medianBlur, blur and with gaussianBlur. I used a not resized image, and an image with three channels and another with 2 (color and gray), and I always get the same error. I'm wondering if the error is in <code>M.unsafeCoerceMat image</code>. And why <code>'True</code> as expected type? I don't have idea </p>\n"}, {"tags": ["xml", "haskell", "filter", "xml-conduit"], "answers": [{"tags": [], "owner": {"reputation": 2585, "user_id": 6701918, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/fBOp9.jpg?s=128&g=1", "display_name": "V. Semeria", "link": "https://stackoverflow.com/users/6701918/v-semeria"}, "is_accepted": false, "score": 2, "last_activity_date": 1474637832, "creation_date": 1474637832, "answer_id": 39662223, "question_id": 39661098, "link": "https://stackoverflow.com/questions/39661098/haskell-xml-filtering-a-subtree/39662223#39662223", "title": "haskell: xml filtering a subtree", "body": "<p>I don't know about <code>Text.XML</code>, but here is a solution with <code>Text.XML.Light</code> :</p>\n\n<pre><code>module Minimal where\n\nimport Data.Maybe(catMaybes)\nimport Text.XML.Light.Input\nimport Text.XML.Light.Output\nimport Text.XML.Light.Types\n\nmain :: IO ()\nmain = do\n  test &lt;- parseXML &lt;$&gt; readFile \"./test.xml\"\n  mapM_ (putStrLn . ppContent) . catMaybes $ map cutTables test\n\ncutTables :: Content -&gt; Maybe Content\ncutTables (Elem e) = if qName (elName e) == \"table\" then Nothing else\n  Just . Elem $ e { elContent = catMaybes . map cutTables $ elContent e }\ncutTables x = Just x\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 363, "user_id": 2618122, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4e87c7136315e1392460f7293fc333d9?s=128&d=identicon&r=PG", "display_name": "robert", "link": "https://stackoverflow.com/users/2618122/robert"}, "edited": false, "score": 0, "creation_date": 1474731298, "post_id": 39677667, "comment_id": 66656320, "body": "From a little stufy of the book and the haddocks it seems that for this use case a simple recursive function like above is the easiest way for solving your problem. Cursors seem to be mostly about extracting data from xml, not so much about modifying an xml - at least in my understanding."}], "tags": [], "owner": {"reputation": 363, "user_id": 2618122, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4e87c7136315e1392460f7293fc333d9?s=128&d=identicon&r=PG", "display_name": "robert", "link": "https://stackoverflow.com/users/2618122/robert"}, "is_accepted": true, "score": 2, "last_activity_date": 1474728642, "creation_date": 1474728642, "answer_id": 39677667, "question_id": 39661098, "link": "https://stackoverflow.com/questions/39661098/haskell-xml-filtering-a-subtree/39677667#39677667", "title": "haskell: xml filtering a subtree", "body": "<p>This code seems to do what you want, based on xml-conduit. I started from the yesod web book <a href=\"http://www.yesodweb.com/book/xml\" rel=\"nofollow\">example</a> and implemented the transformation by a simple recursive function.</p>\n\n<pre><code>{-# LANGUAGE OverloadedStrings #-}\nimport qualified Data.Map        as M\nimport           Prelude         hiding (readFile, writeFile)\nimport           Text.XML\n\nmain :: IO ()\nmain = do\n    Document prologue root epilogue &lt;- readFile def \"test.xml\"\n\n    let root' = transform root\n\n    writeFile def\n        { rsPretty = True\n        } \"output.html\" $ Document prologue root' epilogue\n\ntransform :: Element -&gt; Element\ntransform (Element _name attrs children) = \n  Element _name attrs (filterChildren children)\n\nfilterChildren :: [Node] -&gt; [Node]\nfilterChildren = concatMap kickTable\n  where\n    kickTable :: Node -&gt; [Node]\n    kickTable (NodeElement (Element \"table\" attrs children)) = -- Drop it\n      [  ]\n    kickTable (NodeElement (Element n attrs children)) = -- Recurse on\n      [ NodeElement (Element n attrs (filterChildren children)) ]\n    kickTable n = -- ok - whatever\n      [ n ]\n</code></pre>\n\n<p>My lens-foo is not strong enough to tell why your solution does not work, but from the docs - you have to be careful with <code>filtered</code> not to violate the traversal laws, although I don't know what happens when you violate them.</p>\n\n<p>Hope that helps.</p>\n"}], "owner": {"reputation": 14781, "user_id": 630160, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/4445f21326af525a8ad19af7e3ae41a8?s=128&d=identicon&r=PG", "display_name": "epsilonhalbe", "link": "https://stackoverflow.com/users/630160/epsilonhalbe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 209, "favorite_count": 1, "accepted_answer_id": 39677667, "answer_count": 2, "score": 2, "last_activity_date": 1474728642, "creation_date": 1474634656, "last_edit_date": 1474635029, "question_id": 39661098, "link": "https://stackoverflow.com/questions/39661098/haskell-xml-filtering-a-subtree", "title": "haskell: xml filtering a subtree", "body": "<p>I am struggling to remove a Element with all its children with haskell.\nThe task is to strip all table-tags from a given xml document (maybe I have not understood the concept of a cursor or it is something else I am missing).</p>\n\n<p>I have tried three different approaches:</p>\n\n<ul>\n<li>lenses with traversing/filtering and setting the filtered value with a new element - <em>here only the tag is replaced but not the contents</em></li>\n<li>accessing the table element with a cursor - resetting the content there and obtaining the document root again by traversing the cursor up to the document root - <em>nothing is filtered</em></li>\n<li>filtering the children of the document root recursively - <em>nothing is filtered</em></li>\n</ul>\n\n<h2>Tools</h2>\n\n<ul>\n<li><code>xml-conduit</code></li>\n<li><code>xml-lens</code></li>\n<li><code>ghc-8.0.1</code></li>\n</ul>\n\n<h2>Input (<code>test.xml</code>)/output</h2>\n\n<pre><code> INPUT                                     EXPECTED OUTPUT (for the filtered cases)\n&lt;?xml version=\"1.0\"?&gt;                 |  &lt;?xml version=\"1.0\"?&gt;                   \n&lt;root&gt;                                |  &lt;root&gt;                                  \n    &lt;a&gt;                               |      &lt;a&gt;                                 \n        ...                           |          ...                             \n    &lt;/a&gt;                              |      &lt;/a&gt;                                \n    &lt;b&gt;                               |      &lt;b&gt;                                 \n        &lt;table&gt;                       |          &lt;bb&gt;                            \n            &lt;!--table entries--&gt;      |              ...                         \n        &lt;/table&gt;                      |          &lt;/bb&gt;                           \n        &lt;bb&gt;                          |      &lt;/b&gt;                                \n            ...                       |      &lt;c&gt;                                 \n        &lt;/bb&gt;                         |          &lt;cc&gt;                            \n    &lt;/b&gt;                              |              ...                         \n    &lt;c&gt;                               |          &lt;/cc&gt;                           \n        &lt;cc&gt;                          |      &lt;/c&gt;                                \n            ...                       |  &lt;/root&gt;                                 \n        &lt;/cc&gt;\n    &lt;/c&gt;\n&lt;/root&gt;\n</code></pre>\n\n<h2>Minimal-non-working-example</h2>\n\n<pre><code>{-# LANGUAGE OverloadedStrings #-}\n\nmodule Minimal where\n\nimport           Control.Lens\nimport           Data.Conduit.Text as CT\nimport           Data.Default\nimport qualified Data.Text.Lazy.IO as TIO\nimport           Text.XML\nimport           Text.XML.Cursor\nimport qualified Text.XML.Lens     as L\nimport           Data.Maybe (isNothing, isJust)\n\nmain :: IO ()\nmain = do test &lt;- Text.XML.readFile def \"./test.xml\"\n          pput $ filterDocument test\n\n          let cursor = fromDocument test\n\n          pput $ docUp $ elemUp $ getRoot ((head $ cursor $// checkName (== \"table\")) {child = []} )\n\n          pput $ docUp $ elemUp $ filterChildren (checkName (/= \"table\")) cursor\n          return ()\n\n\nfilterChildren :: Axis -&gt; Cursor -&gt; Cursor\nfilterChildren pred c = c {child = map (filterChildren pred) (c $/ pred) }\n\nfilterDocument :: Document -&gt; Document\nfilterDocument doc = doc &amp; (L.root.L.entire.filtered (\\e -&gt; isJust $ e^?L.named \"table\") .~ emptyElemt)\n  where emptyElemt = Element \"empty\" mempty []\n\n-- helper functions --\n\ndocUp :: Element -&gt; Document\ndocUp e = Document {documentRoot = e, documentPrologue = Prologue [] Nothing [], documentEpilogue = [] }\n\nelemUp :: Cursor -&gt; Element\nelemUp cursor = Element {elementName = \"DOC\", elementAttributes = mempty , elementNodes = [node cursor]}\n\nelemUp' :: [Cursor] -&gt; Element\nelemUp' cursors = Element {elementName = \"DOC\", elementAttributes = mempty , elementNodes = map node cursors}\n\ngetRoot :: Cursor -&gt; Cursor\ngetRoot c = let p = (c $| parent)\n            in if null p then c else getRoot $ head p\n\npput :: Document -&gt; IO ()\npput = TIO.putStrLn . renderText pretty\n  where pretty = def {rsPretty = True}\n</code></pre>\n\n<h2>Output</h2>\n\n<pre><code>&gt; stack ghci\n. . .\nOk, modules loaded: Minimal.\n\u03bb &gt; main\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;root&gt;\n    &lt;a&gt;\n        ...\n    &lt;/a&gt;\n    &lt;b&gt;\n        &lt;empty&gt;\n            &lt;!-- table entries --&gt;\n        &lt;/empty&gt;\n        &lt;bb&gt;\n            ...\n        &lt;/bb&gt;\n    &lt;/b&gt;\n    &lt;c&gt;\n        &lt;cc&gt;\n            ...\n        &lt;/cc&gt;\n    &lt;/c&gt;\n&lt;/root&gt;\n\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;DOC&gt;\n    &lt;root&gt;\n        &lt;a&gt;\n            ...\n        &lt;/a&gt;\n        &lt;b&gt;\n            &lt;table&gt;\n                &lt;!-- table entries --&gt;\n            &lt;/table&gt;\n            &lt;bb&gt;\n                ...\n            &lt;/bb&gt;\n        &lt;/b&gt;\n        &lt;c&gt;\n            &lt;cc&gt;\n                ...\n            &lt;/cc&gt;\n        &lt;/c&gt;\n    &lt;/root&gt;\n&lt;/DOC&gt;\n\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;DOC&gt;\n    &lt;root&gt;\n        &lt;a&gt;\n            ...\n        &lt;/a&gt;\n        &lt;b&gt;\n            &lt;table&gt;\n                &lt;!-- table entries --&gt;\n            &lt;/table&gt;\n            &lt;bb&gt;\n                ...\n            &lt;/bb&gt;\n        &lt;/b&gt;\n        &lt;c&gt;\n            &lt;cc&gt;\n                ...\n            &lt;/cc&gt;\n        &lt;/c&gt;\n    &lt;/root&gt;\n&lt;/DOC&gt;\n</code></pre>\n"}, {"tags": ["parsing", "haskell", "monads", "monad-transformers", "state-monad"], "comments": [{"owner": {"reputation": 94713, "user_id": 1139697, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/5f136ddb684f39aaee1c028ee1950f6f?s=128&d=identicon&r=PG", "display_name": "Zeta", "link": "https://stackoverflow.com/users/1139697/zeta"}, "edited": false, "score": 0, "creation_date": 1474633209, "post_id": 39659969, "comment_id": 66622886, "body": "Always add the error message."}, {"owner": {"reputation": 13807, "user_id": 2407038, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/538f6f4a9aa43841841de7d8e8b169fc?s=128&d=identicon&r=PG&f=1", "display_name": "user2407038", "link": "https://stackoverflow.com/users/2407038/user2407038"}, "edited": false, "score": 0, "creation_date": 1474639023, "post_id": 39659969, "comment_id": 66626958, "body": "<code>basicItem</code> is a <code>Parser1</code> but you use it in a context (<code>do { c &lt;- basicItem; ...  }</code>) which expects a <code>StateT</code>. You cannot have two <code>MonadState</code> instances for a single type."}], "owner": {"reputation": 371, "user_id": 5738619, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/489ffbc19dae2212663f027806a6a95f?s=128&d=identicon&r=PG&f=1", "display_name": "Zubair", "link": "https://stackoverflow.com/users/5738619/zubair"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 37, "favorite_count": 0, "answer_count": 0, "score": 0, "last_activity_date": 1474640327, "creation_date": 1474631066, "last_edit_date": 1474640327, "question_id": 39659969, "link": "https://stackoverflow.com/questions/39659969/parser-error-reporting-deriving-the-right-instances", "title": "Parser Error Reporting deriving the right instances", "body": "<p>I am trying to build an error reporting parser in haskell. Currently I have been looking at a tutorial and this is what I have so far.</p>\n\n<pre><code>type Position = (Int, Int)\ntype Err = (String, Position)\nnewtype Parser1 a = Parser1 {parse1 :: StateT String (StateT Position (MaybeT\n(Either Err))) a} deriving (Monad, MonadState String, Applicative, Functor)\n\nrunParser :: Parser1 a -&gt; String -&gt; Either Err (Maybe ((a, String), Position))\nrunParser p ts = runMaybeT $ runStateT (runStateT (parse1 p) ts) (0, 0)\n\n\nbasicItem = Parser1 $ do\n  state &lt;- get\n  case state of\n    (x:xs) -&gt; do {put xs; return x}\n    [] -&gt; empty\n\nitem = Parser1 $ do\n  c &lt;- basicItem\n  pos &lt;- lift get\n  lift (put (f pos))\n  return c\n\n\nf :: Char -&gt; Position -&gt; Position\nf d (ln, c) = (ln + 1, 0)\nf _ (ln, c) = (ln , c + 1)\n</code></pre>\n\n<p>This piece of code does not compile, I think it is to do with my item parser and the fact that I am trying to access the inner state  namely position. I was wondering how in the deriving clause do I make Haskell derive the instances for both states in my parser type, so then I can access the inner state?</p>\n\n<p>Edit 1:</p>\n\n<p>I initially tried declaring basicItem as:</p>\n\n<pre><code>basicItem :: (MonadState String m, Alternative m) =&gt; m t\nbasicItem = do\n state &lt;- get\n case state of\n   (x:xs) -&gt; do {put xs; return x}\n   [] -&gt; empty`\n</code></pre>\n\n<p>However, I kept getting the error:\n<a href=\"https://i.stack.imgur.com/E7muy.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/E7muy.png\" alt=\"Error2\"></a></p>\n\n<p>I was wondering why it cannot deduce context of get from MonadState String m,\nwhen in my deriving clause I have MonadState String. </p>\n\n<p>The error for my initial question is here:\n<a href=\"https://i.stack.imgur.com/DmwqG.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/DmwqG.png\" alt=\"Error1\"></a></p>\n"}, {"tags": ["list", "haskell"], "comments": [{"owner": {"reputation": 19480, "user_id": 2491900, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/W8FMW.jpg?s=128&g=1", "display_name": "shree.pat18", "link": "https://stackoverflow.com/users/2491900/shree-pat18"}, "edited": false, "score": 1, "creation_date": 1474614694, "post_id": 39654660, "comment_id": 66611930, "body": "Sure there is. Have you tried anything?"}, {"owner": {"reputation": 1385, "user_id": 4464551, "user_type": "registered", "accept_rate": 52, "profile_image": "https://graph.facebook.com/10206253300199979/picture?type=large", "display_name": "Felix Ros&#233;n", "link": "https://stackoverflow.com/users/4464551/felix-ros%c3%a9n"}, "reply_to_user": {"reputation": 19480, "user_id": 2491900, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/W8FMW.jpg?s=128&g=1", "display_name": "shree.pat18", "link": "https://stackoverflow.com/users/2491900/shree-pat18"}, "edited": false, "score": 1, "creation_date": 1474615297, "post_id": 39654660, "comment_id": 66612312, "body": "@shree.pat18 yeah. <code>catThird (xs:xss) = xs ++ take 9 (catThird xss)</code> But it only works on the first 3 lists"}], "answers": [{"comments": [{"owner": {"reputation": 1385, "user_id": 4464551, "user_type": "registered", "accept_rate": 52, "profile_image": "https://graph.facebook.com/10206253300199979/picture?type=large", "display_name": "Felix Ros&#233;n", "link": "https://stackoverflow.com/users/4464551/felix-ros%c3%a9n"}, "edited": false, "score": 0, "creation_date": 1474616173, "post_id": 39655092, "comment_id": 66612871, "body": "Nice. Didnt know you could pattern match like this <code>(x:y:z:zs)</code> but now when I see it, it makes sense!"}], "tags": [], "owner": {"reputation": 19480, "user_id": 2491900, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/W8FMW.jpg?s=128&g=1", "display_name": "shree.pat18", "link": "https://stackoverflow.com/users/2491900/shree-pat18"}, "is_accepted": true, "score": 3, "last_activity_date": 1474615783, "creation_date": 1474615783, "answer_id": 39655092, "question_id": 39654660, "link": "https://stackoverflow.com/questions/39654660/concatenating-every-third-list/39655092#39655092", "title": "Concatenating every third list", "body": "<p>You could try something like this:</p>\n\n<pre><code>someFunk :: [[a]] -&gt; [[a]]\nsomeFunk (x:y:z:zs) = (x ++ y ++ z) : someFunk zs\nsomeFunk (x:y:ys) = (x ++ y) : someFunk ys\nsomeFunk (x:xs) = x : someFunk xs\nsomeFunk _ = []\n</code></pre>\n\n<p>Using pattern matching, you check for a list with at least three lists, join them and recursively call it on the remainder of the list. If the list count is not an exact multiple of 3, the subsequent patterns still allow you to concatenate the next 3 while available.</p>\n\n<p><a href=\"http://rextester.com/YKQW8567\" rel=\"nofollow\">Demo</a></p>\n"}, {"tags": [], "owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "is_accepted": false, "score": 11, "last_activity_date": 1474616788, "creation_date": 1474616788, "answer_id": 39655417, "question_id": 39654660, "link": "https://stackoverflow.com/questions/39654660/concatenating-every-third-list/39655417#39655417", "title": "Concatenating every third list", "body": "<p>Just for bikeshedding purposes, I think I would write something like this:</p>\n\n<pre><code>import Data.List.Split\nsomeFunk = map concat . chunksOf 3\n</code></pre>\n\n<p>It's concise, and I think it also reads a lot like your English description. It uses the <a href=\"http://hackage.haskell.org/package/split\">split</a> package.</p>\n"}], "owner": {"reputation": 1385, "user_id": 4464551, "user_type": "registered", "accept_rate": 52, "profile_image": "https://graph.facebook.com/10206253300199979/picture?type=large", "display_name": "Felix Ros&#233;n", "link": "https://stackoverflow.com/users/4464551/felix-ros%c3%a9n"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 80, "favorite_count": 1, "accepted_answer_id": 39655092, "answer_count": 2, "score": 0, "last_activity_date": 1474616877, "creation_date": 1474614372, "last_edit_date": 1474616877, "question_id": 39654660, "link": "https://stackoverflow.com/questions/39654660/concatenating-every-third-list", "title": "Concatenating every third list", "body": "<p>I have a big list of lists. And I want to <code>concat</code> every third list into each other. Like such</p>\n\n<pre><code>let xss = [[1,2,3],[1,2,3],[1,2,3],\n           [4,5,6],[4,5,6],[4,5,6],\n           [7,8,9],[7,8,9],[7,8,9]]\n\nsomeFunk xss = [[1,2,3,1,2,3,1,2,3],\n                [4,5,6,4,5,6,4,5,6],\n                [7,8,9,7,8,9,7,8,9]]\n</code></pre>\n\n<p>Is there a way of doing this?</p>\n"}, {"tags": ["haskell", "typeclass"], "answers": [{"comments": [{"owner": {"reputation": 4421, "user_id": 1173529, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/4f64aeede68ff9de9a5100ece80e3a87?s=128&d=identicon&r=PG", "display_name": "Midiparse", "link": "https://stackoverflow.com/users/1173529/midiparse"}, "edited": false, "score": 0, "creation_date": 1474584903, "post_id": 39649872, "comment_id": 66603592, "body": "Thanks for your prompt answer. Now there is another problem: How can I match the type of <code>x</code> to the type of <code>y</code> ? I wrote the implementation as <code>norm (Point x y) = realToFrac $ sqrt $ (x * x) + (y * y)</code>  (adding the Real constraint to both types in the instance header), but now it complains that it cannot match <code>x</code> with <code>y</code>"}, {"owner": {"reputation": 16405, "user_id": 6776093, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/heFeh.png?s=128&g=1", "display_name": "redneb", "link": "https://stackoverflow.com/users/6776093/redneb"}, "reply_to_user": {"reputation": 4421, "user_id": 1173529, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/4f64aeede68ff9de9a5100ece80e3a87?s=128&d=identicon&r=PG", "display_name": "Midiparse", "link": "https://stackoverflow.com/users/1173529/midiparse"}, "edited": false, "score": 0, "creation_date": 1474585007, "post_id": 39649872, "comment_id": 66603623, "body": "Try something like  <code>instance (Real x, Floating x) =&gt; Euclidean (Point x x) where</code>"}, {"owner": {"reputation": 4421, "user_id": 1173529, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/4f64aeede68ff9de9a5100ece80e3a87?s=128&d=identicon&r=PG", "display_name": "Midiparse", "link": "https://stackoverflow.com/users/1173529/midiparse"}, "edited": false, "score": 0, "creation_date": 1474585114, "post_id": 39649872, "comment_id": 66603660, "body": "It complains that it needs distinct type variables there, and to add FlexibleConstraints to permit this"}, {"owner": {"reputation": 16405, "user_id": 6776093, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/heFeh.png?s=128&g=1", "display_name": "redneb", "link": "https://stackoverflow.com/users/6776093/redneb"}, "reply_to_user": {"reputation": 4421, "user_id": 1173529, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/4f64aeede68ff9de9a5100ece80e3a87?s=128&d=identicon&r=PG", "display_name": "Midiparse", "link": "https://stackoverflow.com/users/1173529/midiparse"}, "edited": false, "score": 1, "creation_date": 1474585474, "post_id": 39649872, "comment_id": 66603765, "body": "You could enable the <code>FlexibleConstraints</code> language extension but it would be better to change the definition of <code>Point</code>: <code>data Point a = Point a a</code>. This forces both coordinates to have the same type. The define an instance: <code>instance (Real x, Floating x) =&gt; Euclidean (Point x)</code>"}, {"owner": {"reputation": 4421, "user_id": 1173529, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/4f64aeede68ff9de9a5100ece80e3a87?s=128&d=identicon&r=PG", "display_name": "Midiparse", "link": "https://stackoverflow.com/users/1173529/midiparse"}, "edited": false, "score": 0, "creation_date": 1474585668, "post_id": 39649872, "comment_id": 66603808, "body": "Another solution I found: convert with <code>realToFrac</code> before applying <code>(+)</code>: <code>norm (Point x y) = sqrt $ realToFrac (x * x) + realToFrac (y * y)</code>"}, {"owner": {"reputation": 4421, "user_id": 1173529, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/4f64aeede68ff9de9a5100ece80e3a87?s=128&d=identicon&r=PG", "display_name": "Midiparse", "link": "https://stackoverflow.com/users/1173529/midiparse"}, "edited": false, "score": 0, "creation_date": 1474585774, "post_id": 39649872, "comment_id": 66603832, "body": "But your approach is cleaner, so I will go with that. Thanks!"}], "tags": [], "owner": {"reputation": 16405, "user_id": 6776093, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/heFeh.png?s=128&g=1", "display_name": "redneb", "link": "https://stackoverflow.com/users/6776093/redneb"}, "is_accepted": true, "score": 3, "last_activity_date": 1474583968, "last_edit_date": 1474583968, "creation_date": 1474583519, "answer_id": 39649872, "question_id": 39649806, "link": "https://stackoverflow.com/questions/39649806/could-not-match-expected-type-in-instance/39649872#39649872", "title": "Could not match expected type in instance", "body": "<p>Let's look carefully at the types referenced in definition of the class:</p>\n\n<pre><code>class Euclidean a where\n    norm :: (Euclidean a, Floating b) =&gt; a -&gt; b\n</code></pre>\n\n<p>The <code>a</code> in the second line is bound by the <code>a</code> in the first line. But the <code>b</code> is not bound by anything, so it is implicitly universally quantified. In other words the above definition is equivalent to</p>\n\n<pre><code>class Euclidean a where\n    norm :: forall b. (Euclidean a, Floating b) =&gt; a -&gt; b\n</code></pre>\n\n<p>So for every <code>Euclidean</code> type <code>a</code>, <code>norm</code> is function that takes an <code>a</code> value and returns a <code>b</code> value for <em>any</em> <code>Floating b</code>.</p>\n\n<p>So in the example with <code>Point</code>, the dummy definition of <code>norm</code> that you provided, always returns of value of type <code>x</code> whereas the compiler expects you to provide an implementation that returns values of arbitrary <code>Floating</code> types.</p>\n\n<p>So how do you solve this? On solution is to do something like that:</p>\n\n<pre><code>instance (Real x, Floating x, Floating y) =&gt; Euclidean (Point x y) where\n    norm (Point x y) = realToFrac x\n</code></pre>\n\n<p>I've added a <code>Real x</code> constraint, so that I can call <code>realToFrac</code> on <code>x</code> to get an arbitrary floating value. Note that probably it would make more sense to replace your <code>Floating</code> constraint with <code>RealFrac</code>.</p>\n"}], "owner": {"reputation": 4421, "user_id": 1173529, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/4f64aeede68ff9de9a5100ece80e3a87?s=128&d=identicon&r=PG", "display_name": "Midiparse", "link": "https://stackoverflow.com/users/1173529/midiparse"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 169, "favorite_count": 0, "accepted_answer_id": 39649872, "answer_count": 1, "score": 0, "last_activity_date": 1474620009, "creation_date": 1474583083, "last_edit_date": 1474620009, "question_id": 39649806, "link": "https://stackoverflow.com/questions/39649806/could-not-match-expected-type-in-instance", "title": "Could not match expected type in instance", "body": "<p>I am writing a 'simple' example for implementing type classes however I am having a hard time figuring out why this does not compile:</p>\n\n<pre><code>class Euclidean a where\n  norm :: (Euclidean a, Floating b) =&gt; a -&gt; b\n\ndata Point a b = Point a b\n\ninstance (Floating x, Floating y) =&gt; Euclidean (Point x y) where\n  norm (Point x y) = x\n</code></pre>\n\n<p>It fails with:</p>\n\n<pre><code>Couldn't match expected type \u2018b\u2019 with actual type \u2018x\u2019\n  \u2018x\u2019 is a rigid type variable bound by\n      the instance declaration at src/Simple.hs:10:10\n  \u2018b\u2019 is a rigid type variable bound by\n      the type signature for\n        norm :: (Euclidean (Point x y), Floating b) =&gt; Point x y -&gt; b\n      at src/Simple.hs:11:3\nRelevant bindings include\n  x :: x (bound at src/Simple.hs:11:15)\n  norm :: Point x y -&gt; b (bound at src/Simple.hs:11:3)\nIn the expression: x\nIn an equation for \u2018norm\u2019: norm (Point x y) = x\n</code></pre>\n\n<p>Note: The desired function implementation would be of course\n<code>sqrt $ (x * x) + (y * y)</code>.</p>\n"}, {"tags": ["haskell", "functional-programming", "monads", "functor", "category-theory"], "comments": [{"owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "edited": false, "score": 2, "creation_date": 1474581943, "post_id": 39649497, "comment_id": 66602587, "body": "Side question: Do you have some useful piece of code which demonstrates the usefulness of this?"}, {"owner": {"reputation": 2845, "user_id": 593934, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/nPK3i.jpg?s=128&g=1", "display_name": "winitzki", "link": "https://stackoverflow.com/users/593934/winitzki"}, "reply_to_user": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "edited": false, "score": 1, "creation_date": 1474582427, "post_id": 39649497, "comment_id": 66602745, "body": "@BitTickler Not yet. Before writing any code, I want to understand the the properties of the functors I&#39;m going to use. It&#39;s much easier and faster to work with types than with actual code."}, {"owner": {"reputation": 507143, "user_id": 1048572, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/7f2c4de95e8f4f8f5a71c3aaf0ed312a?s=128&d=identicon&r=PG", "display_name": "Bergi", "link": "https://stackoverflow.com/users/1048572/bergi"}, "edited": false, "score": 0, "creation_date": 1474583118, "post_id": 39649497, "comment_id": 66602977, "body": "How did you show that every bindable functor is pointed?"}, {"owner": {"reputation": 15757, "user_id": 176841, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/45a168cb9eb8454d66c78f18e29d9342?s=128&d=identicon&r=PG", "display_name": "jberryman", "link": "https://stackoverflow.com/users/176841/jberryman"}, "edited": false, "score": 1, "creation_date": 1474583328, "post_id": 39649497, "comment_id": 66603040, "body": "I think you&#39;ve invented <code>Traversable</code>, but can&#39;t check right now"}, {"owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "reply_to_user": {"reputation": 15757, "user_id": 176841, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/45a168cb9eb8454d66c78f18e29d9342?s=128&d=identicon&r=PG", "display_name": "jberryman", "link": "https://stackoverflow.com/users/176841/jberryman"}, "edited": false, "score": 0, "creation_date": 1474583594, "post_id": 39649497, "comment_id": 66603119, "body": "@jberryman: it&#39;s certainly not <i>equivalent</i> to <code>Traversable</code> (e.g. you can easily traverse <code>Const</code>), but it does seem related."}, {"owner": {"reputation": 37219, "user_id": 1523776, "user_type": "moderator", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/b3e0b5c8e42a8c38009ef2d969f8dabb?s=128&d=identicon&r=PG", "display_name": "Benjamin Hodgson", "link": "https://stackoverflow.com/users/1523776/benjamin-hodgson"}, "reply_to_user": {"reputation": 15757, "user_id": 176841, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/45a168cb9eb8454d66c78f18e29d9342?s=128&d=identicon&r=PG", "display_name": "jberryman", "link": "https://stackoverflow.com/users/176841/jberryman"}, "edited": false, "score": 0, "creation_date": 1474583661, "post_id": 39649497, "comment_id": 66603153, "body": "@jberryman I think it&#39;s actually the &quot;opposite&quot; of <code>Traversable</code> in some sense. <code>sequenceA</code> would be able to yank <code>-&gt;</code> to the <i>outside</i> of a <code>Traversable</code> (using <code>(-&gt;) r</code>&#39;s <code>Applicative</code> instance) but not the other way round. IOW <code>sequenceA :: Traversable t =&gt; t (a -&gt; b) -&gt; a -&gt; t b</code>"}, {"owner": {"reputation": 2845, "user_id": 593934, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/nPK3i.jpg?s=128&g=1", "display_name": "winitzki", "link": "https://stackoverflow.com/users/593934/winitzki"}, "reply_to_user": {"reputation": 507143, "user_id": 1048572, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/7f2c4de95e8f4f8f5a71c3aaf0ed312a?s=128&d=identicon&r=PG", "display_name": "Bergi", "link": "https://stackoverflow.com/users/1048572/bergi"}, "edited": false, "score": 1, "creation_date": 1474584096, "post_id": 39649497, "comment_id": 66603300, "body": "@Bergi To show that <code>inject</code> implies <code>point</code>, first we set a = F t in <code>inject</code> and get <code>inject :: (F t -&gt; F t) -&gt; F(F t -&gt; t)</code>. We then apply this to the identity morphism <code>id :: F t -&gt; F t</code>. We obtain a (naturally defined) value of <code>F(F t -&gt; t)</code>. Now, we apply the &quot;strength&quot; of the functor: <code>x -&gt; F y -&gt; F (x,y)</code> and project this to obtain the morhpism <code>x -&gt; F y -&gt; F x</code>. Now we set x = t and y = F t -&gt; t in this morphism. We obtain <code>t -&gt; F(F t -&gt; t) -&gt; F t</code>. Since we already have a natural value of <code>F (F t -&gt; t)</code>, we thus obtain a natural transformation <code>t -&gt; F t</code>."}, {"owner": {"reputation": 2845, "user_id": 593934, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/nPK3i.jpg?s=128&g=1", "display_name": "winitzki", "link": "https://stackoverflow.com/users/593934/winitzki"}, "reply_to_user": {"reputation": 37219, "user_id": 1523776, "user_type": "moderator", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/b3e0b5c8e42a8c38009ef2d969f8dabb?s=128&d=identicon&r=PG", "display_name": "Benjamin Hodgson", "link": "https://stackoverflow.com/users/1523776/benjamin-hodgson"}, "edited": false, "score": 3, "creation_date": 1474584416, "post_id": 39649497, "comment_id": 66603417, "body": "@BenjaminHodgson I think the property <code>F (a-&gt;b) -&gt; a -&gt; F b</code> holds for any functor F, not only for traversable."}, {"owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "edited": false, "score": 1, "creation_date": 1474584448, "post_id": 39649497, "comment_id": 66603425, "body": "<a href=\"http://stackoverflow.com/questions/13765324/haskell-function-from-a-b-a-b\" title=\"haskell function from a b a b\">stackoverflow.com/questions/13765324/&hellip;</a>"}, {"owner": {"reputation": 507143, "user_id": 1048572, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/7f2c4de95e8f4f8f5a71c3aaf0ed312a?s=128&d=identicon&r=PG", "display_name": "Bergi", "link": "https://stackoverflow.com/users/1048572/bergi"}, "edited": false, "score": 0, "creation_date": 1474584640, "post_id": 39649497, "comment_id": 66603495, "body": "@winitzki Ah, so basically <code>point x = fmap (const x) (inject id)</code>?"}, {"owner": {"reputation": 2845, "user_id": 593934, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/nPK3i.jpg?s=128&g=1", "display_name": "winitzki", "link": "https://stackoverflow.com/users/593934/winitzki"}, "reply_to_user": {"reputation": 507143, "user_id": 1048572, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/7f2c4de95e8f4f8f5a71c3aaf0ed312a?s=128&d=identicon&r=PG", "display_name": "Bergi", "link": "https://stackoverflow.com/users/1048572/bergi"}, "edited": false, "score": 0, "creation_date": 1474585123, "post_id": 39649497, "comment_id": 66603664, "body": "@Bergi Right. This question has been closed as duplicate, but the other question does not really have a satisfactory answer as to what properties characterize F such that <code>inject</code> exists."}, {"owner": {"reputation": 37219, "user_id": 1523776, "user_type": "moderator", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/b3e0b5c8e42a8c38009ef2d969f8dabb?s=128&d=identicon&r=PG", "display_name": "Benjamin Hodgson", "link": "https://stackoverflow.com/users/1523776/benjamin-hodgson"}, "edited": false, "score": 0, "creation_date": 1474586234, "post_id": 39649497, "comment_id": 66603955, "body": "@winitzki Ah, yes, you&#39;re right. Thanks!"}, {"owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "edited": false, "score": 1, "creation_date": 1474586518, "post_id": 39649497, "comment_id": 66604037, "body": "@winitzki: agreed, I reverted the closing for this reason. I <i>reckon</i> that this property is much stronger than <code>Monad</code> and in fact any such functor <code>F</code> is equivalent to the function functor <code>(Log F -&gt;)</code>, where <code>Log</code> basically counts the number of times that <code>t</code> appears in <code>F t</code>, which must be fixed and &gt;0. But I don&#39;t have a proof for this, and in fact I doubt that <code>Log</code> would be actually computable, at least not in Haskell types. It might be possible mathematically, but I wouldn&#39;t be surprised if it required the axiom of choice or something."}, {"owner": {"reputation": 2845, "user_id": 593934, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/nPK3i.jpg?s=128&g=1", "display_name": "winitzki", "link": "https://stackoverflow.com/users/593934/winitzki"}, "reply_to_user": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "edited": false, "score": 0, "creation_date": 1474586788, "post_id": 39649497, "comment_id": 66604097, "body": "@leftaroundabout Thank you! Let&#39;s hope someone has a better answer."}, {"owner": {"reputation": 2845, "user_id": 593934, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/nPK3i.jpg?s=128&g=1", "display_name": "winitzki", "link": "https://stackoverflow.com/users/593934/winitzki"}, "reply_to_user": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "edited": false, "score": 0, "creation_date": 1474588519, "post_id": 39649497, "comment_id": 66604469, "body": "@leftaroundabout I guess what you are saying is that F must be representable with a constant type: that is, there must be a constant type b such that F t is isomorphic to b -&gt; t. But, so far, I have some examples of a &quot;bindable&quot; F that are not of this form. Namely, if A is a profunctor then A t -&gt; t is bindable. An example is the &quot;writer&quot; contrafunctor A t = (t -&gt; r). Then F t = (t -&gt; r) -&gt; t  is bindable but not of the form b -&gt; t for a constant b."}, {"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 3, "creation_date": 1474588897, "post_id": 39649497, "comment_id": 66604573, "body": "This looks way stronger than a monad to me. From a purely practical point of view, there&#39;s no way we can construct something like <code>inject id :: IO (IO a -&gt; a)</code>. That would be very dangerous, effectively providing access to <code>unsafePerformIO</code> in pure code with the mild requirement that eventually this is being called from IO (which always happens, since we start from <code>main</code>). Basically we only have to do <code>main = do upIO &lt;- inject id ; print (pureF upIO 12) ; ...</code> to allow the purely typed <code>pureF</code> to run side-effects. Scary."}, {"owner": {"reputation": 4328, "user_id": 1473927, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/AO6Ui.jpg?s=128&g=1", "display_name": "Jonathan Cast", "link": "https://stackoverflow.com/users/1473927/jonathan-cast"}, "edited": false, "score": 3, "creation_date": 1474589749, "post_id": 39649497, "comment_id": 66604730, "body": "Note that I asked this question: <a href=\"http://stackoverflow.com/questions/26264411/what-is-the-general-case-of-quickchecks-promote-function\" title=\"what is the general case of quickchecks promote function\">stackoverflow.com/questions/26264411/&hellip;</a> a while ago, and as far as anyone could find, the only functors with this property are <code>Identity</code> and <code>(-&gt;) a</code>.  So I suspect it&#39;s <i>much</i> stronger than <code>Monad</code>."}, {"owner": {"reputation": 2845, "user_id": 593934, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/nPK3i.jpg?s=128&g=1", "display_name": "winitzki", "link": "https://stackoverflow.com/users/593934/winitzki"}, "reply_to_user": {"reputation": 4328, "user_id": 1473927, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/AO6Ui.jpg?s=128&g=1", "display_name": "Jonathan Cast", "link": "https://stackoverflow.com/users/1473927/jonathan-cast"}, "edited": false, "score": 0, "creation_date": 1474589988, "post_id": 39649497, "comment_id": 66604785, "body": "@jcast Thank you for linking to your older question. So it&#39;s called <code>promote</code> and not <code>inject</code>. I found a wider class of examples within exponential-polynomial functors, as I detailed in my question. You can construct these functors from Identity, by taking pairs, and by mapping from a contrafunctor."}, {"owner": {"reputation": 4328, "user_id": 1473927, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/AO6Ui.jpg?s=128&g=1", "display_name": "Jonathan Cast", "link": "https://stackoverflow.com/users/1473927/jonathan-cast"}, "edited": false, "score": 0, "creation_date": 1474590250, "post_id": 39649497, "comment_id": 66604830, "body": "@winitzki Oh, can you? Your question was hard for me to read :).  Would you mind summarizing your construction as an answer on my question, so I can switch my accepted answer?"}, {"owner": {"reputation": 14485, "user_id": 190376, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cd8280c5e1491b8cf55760750ed97dec?s=128&d=identicon&r=PG", "display_name": "Reid Barton", "link": "https://stackoverflow.com/users/190376/reid-barton"}, "edited": false, "score": 0, "creation_date": 1474590500, "post_id": 39649497, "comment_id": 66604875, "body": "How about <code>F = Maybe</code>, <code>inject _ = Nothing</code>, or any other functor <code>F</code> with <code>F Void</code> nonempty? Surely you want some kind of condition on <code>inject</code>."}, {"owner": {"reputation": 2845, "user_id": 593934, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/nPK3i.jpg?s=128&g=1", "display_name": "winitzki", "link": "https://stackoverflow.com/users/593934/winitzki"}, "reply_to_user": {"reputation": 14485, "user_id": 190376, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cd8280c5e1491b8cf55760750ed97dec?s=128&d=identicon&r=PG", "display_name": "Reid Barton", "link": "https://stackoverflow.com/users/190376/reid-barton"}, "edited": false, "score": 0, "creation_date": 1474591498, "post_id": 39649497, "comment_id": 66605080, "body": "@ReidBarton Indeed, I want a condition that would prohibit trivial <code>inject</code> instances for nontrivial functors. Perhaps <code>eject . inject = id</code> or vice versa, where <code>eject :: F (a-&gt;b) -&gt; a -&gt; F b</code>."}, {"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 4, "creation_date": 1474594094, "post_id": 39649497, "comment_id": 66605607, "body": "<a href=\"https://hackage.haskell.org/package/distributive-0.5.0.2/docs/Data-Distributive.html#t:Distributive\" rel=\"nofollow noreferrer\"><code>Distributive f</code></a> gets you <code>distribute :: Functor g =&gt; g (f a) -&gt; f (g a)</code>, which from a Haskell type standpoint is more powerful than your function. I don&#39;t know if it satisfies your category-theoretic laws. Every <code>Representable</code> functor is distributive, and the documentation says the other way round holds mathematically."}, {"owner": {"reputation": 14485, "user_id": 190376, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cd8280c5e1491b8cf55760750ed97dec?s=128&d=identicon&r=PG", "display_name": "Reid Barton", "link": "https://stackoverflow.com/users/190376/reid-barton"}, "edited": false, "score": 0, "creation_date": 1474596709, "post_id": 39649497, "comment_id": 66606232, "body": "If I calculated correctly, for your <code>F t = (t -&gt; r) -&gt; t</code> example, <code>eject . inject</code> is the identity but <code>inject . eject</code> isn&#39;t the identity."}, {"owner": {"reputation": 2845, "user_id": 593934, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/nPK3i.jpg?s=128&g=1", "display_name": "winitzki", "link": "https://stackoverflow.com/users/593934/winitzki"}, "reply_to_user": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 0, "creation_date": 1474600252, "post_id": 39649497, "comment_id": 66607014, "body": "@dfeuer Thank you! This link is very useful, I will read that documentation."}, {"owner": {"reputation": 2845, "user_id": 593934, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/nPK3i.jpg?s=128&g=1", "display_name": "winitzki", "link": "https://stackoverflow.com/users/593934/winitzki"}, "reply_to_user": {"reputation": 14485, "user_id": 190376, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cd8280c5e1491b8cf55760750ed97dec?s=128&d=identicon&r=PG", "display_name": "Reid Barton", "link": "https://stackoverflow.com/users/190376/reid-barton"}, "edited": false, "score": 0, "creation_date": 1474600259, "post_id": 39649497, "comment_id": 66607018, "body": "@ReidBarton Interesting! I will try to check your calculations."}, {"owner": {"reputation": 2845, "user_id": 593934, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/nPK3i.jpg?s=128&g=1", "display_name": "winitzki", "link": "https://stackoverflow.com/users/593934/winitzki"}, "reply_to_user": {"reputation": 14485, "user_id": 190376, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cd8280c5e1491b8cf55760750ed97dec?s=128&d=identicon&r=PG", "display_name": "Reid Barton", "link": "https://stackoverflow.com/users/190376/reid-barton"}, "edited": false, "score": 0, "creation_date": 1474611330, "post_id": 39649497, "comment_id": 66610145, "body": "@ReidBarton I checked and got the same result. For &quot;bindable&quot; polynomial functors F, both <code>eject . inject</code> and <code>inject . eject</code> are identity. The non-identity appears only as <code>inject . eject</code> and only for &quot;bindable&quot; functors F of the form F t = A t -&gt; G t where A is a contrafunctor and G is bindable. The reason is that the chain of morphisms <code>A (a-&gt;t) -&gt; A t -&gt; A (a-&gt;t)</code> does not yield identity, while <code>A t -&gt; A (a-&gt;t) -&gt; A t</code> does."}, {"owner": {"reputation": 15757, "user_id": 176841, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/45a168cb9eb8454d66c78f18e29d9342?s=128&d=identicon&r=PG", "display_name": "jberryman", "link": "https://stackoverflow.com/users/176841/jberryman"}, "reply_to_user": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 0, "creation_date": 1474724767, "post_id": 39649497, "comment_id": 66654285, "body": "@dfeuer I think you should make that an answer"}, {"owner": {"reputation": 2845, "user_id": 593934, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/nPK3i.jpg?s=128&g=1", "display_name": "winitzki", "link": "https://stackoverflow.com/users/593934/winitzki"}, "edited": false, "score": 1, "creation_date": 1474766878, "post_id": 39649497, "comment_id": 66665131, "body": "I&#39;d like to ruminate on this a bit more, and at the same time wait for other people to say something. Then, if no one wants to, perhaps I would write an answer, summarizing what everyone said here: 0) improved definition of &quot;bindable&quot; with the law <code>eject . inject = id</code> 1) &quot;bindable&quot; is strictly stronger than monad, and strictly weaker than &quot;distributive&quot;. 2) specific examples of bindable and non-bindable functors, as well as bindable that is not distributive."}, {"owner": {"reputation": 7947, "user_id": 997606, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/b6117f6630078d6612afa75fb8e5bc9a?s=128&d=identicon&r=PG", "display_name": "Tom Ellis", "link": "https://stackoverflow.com/users/997606/tom-ellis"}, "edited": false, "score": 0, "creation_date": 1568093346, "post_id": 39649497, "comment_id": 102154412, "body": "@leftroundabout: Isn&#39;t <code>Log f = forall a. f a -&gt; a</code>?"}, {"owner": {"reputation": 2845, "user_id": 593934, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/nPK3i.jpg?s=128&g=1", "display_name": "winitzki", "link": "https://stackoverflow.com/users/593934/winitzki"}, "reply_to_user": {"reputation": 7947, "user_id": 997606, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/b6117f6630078d6612afa75fb8e5bc9a?s=128&d=identicon&r=PG", "display_name": "Tom Ellis", "link": "https://stackoverflow.com/users/997606/tom-ellis"}, "edited": false, "score": 0, "creation_date": 1568759057, "post_id": 39649497, "comment_id": 102374600, "body": "@TomEllis This <code>Log</code> will not always work as a &quot;logarithm&quot;. It&#39;s a weird type function that does not have any of the properties of the usual logarithm except for a single example: if <code>f a = r -&gt; a</code> then <code>Log f = r</code>. Ordinary logarithm has properties such as <code>log(a*b) = log(a)+log(b)</code>, which this <code>Log</code> does not have."}, {"owner": {"reputation": 7947, "user_id": 997606, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/b6117f6630078d6612afa75fb8e5bc9a?s=128&d=identicon&r=PG", "display_name": "Tom Ellis", "link": "https://stackoverflow.com/users/997606/tom-ellis"}, "edited": false, "score": 0, "creation_date": 1568908537, "post_id": 39649497, "comment_id": 102433630, "body": "@winitzki Firstly, I&#39;m not claiming it has any properties besides the one @leftroundabout speculated about: <code>Log F -&gt;</code> is isomorphic to <code>F</code> (for the class of <code>F</code> under consideration).  Secondly, it&#39;s not clear to me that it <i>doesn&#39;t</i> have the property you claim (where we use <code>Product f g a = Product (f a) (g a)</code> and <code>Sum f g a = Sum (Either (f a) (g a))</code>, of course)."}, {"owner": {"reputation": 2845, "user_id": 593934, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/nPK3i.jpg?s=128&g=1", "display_name": "winitzki", "link": "https://stackoverflow.com/users/593934/winitzki"}, "reply_to_user": {"reputation": 7947, "user_id": 997606, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/b6117f6630078d6612afa75fb8e5bc9a?s=128&d=identicon&r=PG", "display_name": "Tom Ellis", "link": "https://stackoverflow.com/users/997606/tom-ellis"}, "edited": false, "score": 0, "creation_date": 1569444948, "post_id": 39649497, "comment_id": 102603580, "body": "@TomEllis Many examples of using <code>Log</code> show properties very different from what you would expect. 1) We have <code>Log (Sum F G) = Product (Log F) (Log G)</code> instead of <code>log(a*b) = log(a)+log(b)</code>. 2) Defining a functor <code>g</code> as <code>type g a = (Int, a, a)</code>, what would you expect <code>Log g</code> to be? Calculations show <code>Log g = Int -&gt; Bool</code>. 3) What would you expect <code>Log Maybe</code> to be? Calculations show that <code>Log Maybe</code> is a recursive type equivalent to natural numbers, <code>data Nat = One | Succ Nat</code>. I&#39;d say all of these examples show quite unexpected results, showing that <code>Log</code> is not at all similar to a logarithm."}, {"owner": {"reputation": 2845, "user_id": 593934, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/nPK3i.jpg?s=128&g=1", "display_name": "winitzki", "link": "https://stackoverflow.com/users/593934/winitzki"}, "edited": false, "score": 0, "creation_date": 1569454474, "post_id": 39649497, "comment_id": 102605931, "body": "Correction: Calculations show that <code>Log Maybe</code> is void.  I mixed it up with <code>Log h</code> where <code>h</code> is defined by <code>type h a = (Maybe a) -&gt; a</code>. For that type constructor, <code>Log h</code> is equivalent to the natural numbers type <code>Nat</code> defined by <code>data Nat = One | Succ Nat</code>."}, {"owner": {"reputation": 7947, "user_id": 997606, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/b6117f6630078d6612afa75fb8e5bc9a?s=128&d=identicon&r=PG", "display_name": "Tom Ellis", "link": "https://stackoverflow.com/users/997606/tom-ellis"}, "edited": false, "score": 0, "creation_date": 1569479644, "post_id": 39649497, "comment_id": 102611556, "body": "@winitzki It&#39;s interesting.  It does seem to have some bizarre properties.  It would be nice to see them written down somewhere bigger than a tiny text box."}, {"owner": {"reputation": 2845, "user_id": 593934, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/nPK3i.jpg?s=128&g=1", "display_name": "winitzki", "link": "https://stackoverflow.com/users/593934/winitzki"}, "reply_to_user": {"reputation": 7947, "user_id": 997606, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/b6117f6630078d6612afa75fb8e5bc9a?s=128&d=identicon&r=PG", "display_name": "Tom Ellis", "link": "https://stackoverflow.com/users/997606/tom-ellis"}, "edited": false, "score": 1, "creation_date": 1569959655, "post_id": 39649497, "comment_id": 102762241, "body": "@TomEllis All of that, and much more, will hopefully be in the book I&#39;m writing now. <a href=\"https://github.com/winitzki/sofp\" rel=\"nofollow noreferrer\">github.com/winitzki/sofp</a>"}, {"owner": {"reputation": 43134, "user_id": 1726343, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/55744f355c4714fd473c50e799165a70?s=128&d=identicon&r=PG", "display_name": "Asad Saeeduddin", "link": "https://stackoverflow.com/users/1726343/asad-saeeduddin"}, "edited": false, "score": 0, "creation_date": 1583761346, "post_id": 39649497, "comment_id": 107214292, "body": "Apologies if this has already been answered somewhere, but what exactly is the instance for <code>(a -&gt; (b, b)) -&gt; (a, a) -&gt; (b, b)</code>? Does it throw away some data? Maybe all the instances are obvious to the folks in the discussion, but it would be helpful for the slowpokes among us if you could just explicitly write out the instances you&#39;re suggesting in your question/answer @winitzki."}, {"owner": {"reputation": 43134, "user_id": 1726343, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/55744f355c4714fd473c50e799165a70?s=128&d=identicon&r=PG", "display_name": "Asad Saeeduddin", "link": "https://stackoverflow.com/users/1726343/asad-saeeduddin"}, "edited": false, "score": 0, "creation_date": 1583761492, "post_id": 39649497, "comment_id": 107214373, "body": "Assuming <code>Whatever f =&gt; (f a, f a)</code> is <i>not</i> an instance I probably know what this is, but it&#39;s hard to say without knowing what the actual instance should look like."}], "answers": [{"comments": [{"owner": {"reputation": 2845, "user_id": 593934, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/nPK3i.jpg?s=128&g=1", "display_name": "winitzki", "link": "https://stackoverflow.com/users/593934/winitzki"}, "edited": false, "score": 0, "creation_date": 1475645946, "post_id": 39736535, "comment_id": 67019963, "body": "The functor <code>W r</code> defined as <code>type W r t = (t-&gt;r) -&gt; t</code> is actually a monad. The definition of <code>join</code> is  <code>join :: W r (W r t) -&gt; W r t;</code> <code>join ww = \\y -&gt; ww (\\w -&gt; y (w y)) y)</code> and I checked that all monad laws hold. More generally, if <code>M</code> is a monad then the functor <code>g t = (M t -&gt; r) -&gt; M t</code> is also a monad, as are the functors <code>r -&gt; M t</code> and <code>M(r -&gt; t)</code>."}, {"owner": {"reputation": 9455, "user_id": 1172541, "user_type": "registered", "accept_rate": 30, "profile_image": "https://i.stack.imgur.com/LROoN.png?s=128&g=1", "display_name": "PyRulez", "link": "https://stackoverflow.com/users/1172541/pyrulez"}, "edited": false, "score": 0, "creation_date": 1511997101, "post_id": 39736535, "comment_id": 82084678, "body": "Is the continuation monad rigid?"}, {"owner": {"reputation": 2845, "user_id": 593934, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/nPK3i.jpg?s=128&g=1", "display_name": "winitzki", "link": "https://stackoverflow.com/users/593934/winitzki"}, "reply_to_user": {"reputation": 9455, "user_id": 1172541, "user_type": "registered", "accept_rate": 30, "profile_image": "https://i.stack.imgur.com/LROoN.png?s=128&g=1", "display_name": "PyRulez", "link": "https://stackoverflow.com/users/1172541/pyrulez"}, "edited": false, "score": 0, "creation_date": 1519710134, "post_id": 39736535, "comment_id": 85008487, "body": "@PyRulez No, the continuation monad is not rigid, despite what I said in the answer above. The required type for <code>inject</code> is not inhabitable for the continuation monad. In my answer to <a href=\"https://stackoverflow.com/questions/26264411/what-is-the-general-case-of-quickchecks-promote-function\" title=\"what is the general case of quickchecks promote function\">stackoverflow.com/questions/26264411/&hellip;</a>  I have detailed some constructions of rigid functors, and the continuation monad does not fit there."}], "tags": [], "owner": {"reputation": 2845, "user_id": 593934, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/nPK3i.jpg?s=128&g=1", "display_name": "winitzki", "link": "https://stackoverflow.com/users/593934/winitzki"}, "is_accepted": true, "score": 17, "last_activity_date": 1561603661, "last_edit_date": 1561603661, "creation_date": 1475025133, "answer_id": 39736535, "question_id": 39649497, "link": "https://stackoverflow.com/questions/39649497/is-this-property-of-a-functor-stronger-than-a-monad/39736535#39736535", "title": "Is this property of a functor stronger than a monad?", "body": "<p>To improve terminology a little bit, I propose to call these functors \"rigid\" instead of \"bindable\". The motivation for saying \"rigid\" will be explained below.</p>\n\n<h2>Definition</h2>\n\n<p>A functor <code>f</code> is called <strong>rigid</strong> if it has the <code>inject</code> method as shown. Note that every functor has the <code>eject</code> method.</p>\n\n<pre><code>class (Functor f) =&gt; Rigid f where\n  inject :: (a -&gt; f b) -&gt; f(a -&gt; b)\n\n  eject :: f(a -&gt; b) -&gt; a -&gt; f b\n  eject fab x = fmap (\\ab -&gt; ab x) fab\n</code></pre>\n\n<p>The law of \"nondegeneracy\" must hold:</p>\n\n<pre><code>eject . inject = id\n</code></pre>\n\n<h2>Properties</h2>\n\n<p>A rigid functor is always pointed:</p>\n\n<pre><code>instance (Rigid f) =&gt; Pointed f where\n  point :: t -&gt; f t\n  point x = fmap (const x) (inject id)\n</code></pre>\n\n<p>If a rigid functor is applicative then it is automatically monadic:</p>\n\n<pre><code>instance (Rigid f, Applicative f) =&gt; Monad f where\n  bind :: f a -&gt; (a -&gt; f b) -&gt; f b\n  bind fa afb = (inject afb) &lt;*&gt; fa\n</code></pre>\n\n<p>The property of being rigid is not comparable (neither weaker nor stronger) than the property of being monadic: If a functor is rigid, it does not seem to follow that it is automatically monadic (although I don't know specific counterexamples for this case). If a functor is monadic, it does not follow that it is rigid (there are counterexamples).</p>\n\n<p>Basic counterexamples of monadic functors that are not rigid are <code>Maybe</code> and <code>List</code>. These are functors that have more than one constructor: such functors cannot be rigid.</p>\n\n<p>The problem with implementing <code>inject</code> for <code>Maybe</code> is that <code>inject</code> must transform a function of type <code>a -&gt; Maybe b</code> into <code>Maybe(a -&gt; b)</code> while <code>Maybe</code> has two constructors. A function of type <code>a -&gt; Maybe b</code> could return different constructors for different values of <code>a</code>. However, we are supposed to construct a value of type <code>Maybe(a -&gt; b)</code>. If for some <code>a</code> the given function produces <code>Nothing</code>, we don't have a <code>b</code> so we can't produce a total function <code>a-&gt;b</code>. Thus we cannot return <code>Just(a-&gt;b)</code>; we are forced to return <code>Nothing</code> as long as the given function produces <code>Nothing</code> even for one value of <code>a</code>. But we cannot check that a given function of type <code>a -&gt; Maybe b</code> produces <code>Just(...)</code> for all values of <code>a</code>. Therefore we are forced to return <code>Nothing</code> in all cases. This will not satisfy the law of nondegeneracy.</p>\n\n<p>So, we can implement <code>inject</code> if <code>f t</code> is a container of \"fixed shape\" (having only one constructor). Hence the name \"rigid\".</p>\n\n<p>Another explanation as to why rigidity is more restrictive than monadicity is to consider the naturally defined expression</p>\n\n<pre><code>(inject id) :: f(f a -&gt; a) \n</code></pre>\n\n<p>where <code>id :: f a -&gt; f a</code>. This shows that we can have an f-algebra <code>f a -&gt; a</code> for any type <code>a</code>, as long as it is wrapped inside <code>f</code>. It is not true that any monad has an algebra; for example, the various \"future\" monads as well as the <code>IO</code> monad describe computations of type <code>f a</code> that do not allow us to extract values of type <code>a</code> - we shouldn't be able to have a method of type <code>f a -&gt; a</code> even if wrapped inside an <code>f</code>-container. This shows that the \"future\" monads and the <code>IO</code> monad are not rigid.</p>\n\n<p>A property that is <em>strictly stronger</em> than rigidity is <a href=\"https://hackage.haskell.org/package/distributive-0.5.0.2/docs/Data-Distributive.html#t:Distributive\" rel=\"noreferrer\">distributivity</a> from one of E. Kmett's packages. A functor <code>f</code> is distributive if we can interchange the order as in <code>p (f t) -&gt; f (p t)</code> for <em>any</em> functor <code>p</code>. Rigidity is the same as being able to interchange the order only with respect to the \"reader\" functor <code>r t = a -&gt; t</code>. So, all distributive functors are rigid.</p>\n\n<p>All distributive functors are necessarily representable, which means they are equivalent to the \"reader\" functor <code>c -&gt; t</code> with some fixed type <code>c</code>. However, not all rigid functors are representable. An example is the functor <code>g</code> defined by</p>\n\n<pre><code>type g t = (t -&gt; r) -&gt; t\n</code></pre>\n\n<p>The functor <code>g</code> are not equivalent to <code>c -&gt; t</code> with a fixed type <code>c</code>.</p>\n\n<h2>Constructions and examples</h2>\n\n<p>Further examples of rigid functors that are not representable (i.e. not \"distributive\") are functors of the form <code>a t -&gt; f t</code> where <code>a</code> is <em>any</em> contrafunctor and <code>f</code> is a rigid functor. Also, the Cartesian product and the composition of two rigid functors is again rigid. In this way, we can produce many examples of rigid functors within the exponential-polynomial class of functors.</p>\n\n<p>My answer to <a href=\"https://stackoverflow.com/questions/26264411/what-is-the-general-case-of-quickchecks-promote-function\">What is the general case of QuickCheck&#39;s promote function?</a> also lists the constructions of rigid functors:</p>\n\n<ol>\n<li><code>f = Identity</code></li>\n<li>if <code>f</code> and <code>g</code> are both rigid then the functor product <code>h t = (f t, g t)</code> is also rigid</li>\n<li>if <code>f</code> and <code>g</code> are both rigid then the composition <code>h t = f (g t)</code> is also rigid</li>\n<li>if <code>f</code> is rigid and <code>g</code> is any contravariant functor then the functor <code>h t = g t -&gt; f t</code> is rigid</li>\n</ol>\n\n<p>One other property of rigid functors is that the type <code>r ()</code> is equivalent to <code>()</code>, i.e. there is only one distinct value of the type <code>r ()</code>. This value is <code>point ()</code>, where <code>point</code> is defined above for any rigid functor <code>r</code>. (I have a proof but I will not write it here, because I could not find an easy one-line proof.) A consequence is that a rigid functor must have only one constructor. This immediately shows that <code>Maybe</code>, <code>Either</code>, <code>List</code> etc. cannot be rigid.</p>\n\n<h2>Connection with monads</h2>\n\n<p>If <code>f</code> is a monad that has a monad transformer of the \"composed-outside\" kind, <code>t m a = f (m a)</code>, then <code>f</code> is a rigid functor.</p>\n\n<p>The \"rigid monads\" are possibly a subset of rigid functors because construction 4 only yields a rigid monad if <code>f</code> is also a rigid monad rather than an arbitrary rigid functor (but the contravariant functor <code>g</code> can still be arbitrary). However, I do not have any examples of a rigid functor that is not also a monad.</p>\n\n<p>The simplest example of a rigid monad is <code>type r a = (a -&gt; p) -&gt; a</code>, the \"search monad\". (Here <code>p</code> is a fixed type.)  </p>\n\n<p>To prove that a monad <code>f</code> with the \"composed-outside\" transformer <code>t m a = f (m a)</code> also has an <code>inject</code> method, we consider the transformer <code>t m a</code> with the foreign monad <code>m</code> chosen as the reader monad, <code>m a = r -&gt; a</code>. Then the function <code>inject</code> with the correct type signature is defined as</p>\n\n<pre><code> inject = join @t . return @r . (fmap @m (fmap @f return @m))\n</code></pre>\n\n<p>with appropriate choices of type parameters.</p>\n\n<p>The non-degeneracy law follows from the monadic naturality of <code>t</code>: the monadic morphism <code>m -&gt; Identity</code> (substituting a value of type <code>r</code> into the reader) is lifted to the monadic morphism <code>t m a -&gt; t Id a</code>. I omit the details of this proof.</p>\n\n<h2>Use cases</h2>\n\n<p>Finally, I found two use cases for rigid functors.</p>\n\n<p>The first use case was the original motivation for considering rigid functors: we would like to return several monadic results at once. If <code>m</code> is a monad and we want to have <code>fbind</code> as shown in the question, we need <code>f</code> to be rigid. Then we can implement <code>fbind</code> as</p>\n\n<pre><code>fbind :: m a -&gt; (a -&gt; f (m b)) -&gt; f (m b)\nfbind ma afmb = fmap (bind ma) (inject afmb)\n</code></pre>\n\n<p>We can use <code>fbind</code> to have monadic operations that return more than one monadic result (or, more generally, a rigid functor-ful of monadic results), for any monad <code>m</code>.</p>\n\n<p>The second use case grows out of the following consideration. Suppose we have a program <code>p :: a</code> that internally uses a function <code>f :: b -&gt; c</code>. Now, we notice that the function <code>f</code> is very slow, and we would like to refactor the program by replacing <code>f</code> with a monadic \"future\" or \"task\", or generally with a Kleisli arrow <code>f' :: b -&gt; m c</code> for some monad <code>m</code>. We, of course, expect that the program <code>p</code> will become monadic as well: <code>p' :: m a</code>. Our task is to refactor <code>p</code> into <code>p'</code>.</p>\n\n<p>The refactoring proceeds in two steps: First, we refactor the program <code>p</code> so that the function <code>f</code> is explicitly an argument of <code>p</code>. Assume that this has been done, so that now we have <code>p = q f</code> where</p>\n\n<pre><code>q :: (b -&gt; c) -&gt; a\n</code></pre>\n\n<p>Second, we replace <code>f</code> by <code>f'</code>. We now assume that <code>q</code> and <code>f'</code> are given. We would like to construct the new program <code>q'</code> of the type</p>\n\n<pre><code>q' :: (b -&gt; m c) -&gt; m a\n</code></pre>\n\n<p>so that <code>p' = q' f'</code>. The question is whether we can define a general combinator that will refactor <code>q</code> into <code>q'</code>,</p>\n\n<pre><code>refactor :: ((b -&gt; c) -&gt; a) -&gt; (b -&gt; m c) -&gt; m a\n</code></pre>\n\n<p>It turns out that <code>refactor</code> can be constructed only if <code>m</code> is a rigid functor. In trying to implement <code>refactor</code>, we find essentially the same problem as when we tried to implement <code>inject</code> for <code>Maybe</code>: we are given a function <code>f' :: b -&gt; m c</code> that could return different monadic effects <code>m c</code> for different <code>b</code>, but we are required to construct <code>m a</code>, which must represent the same monadic effect for all <code>b</code>. This cannot work, for instance, if <code>m</code> is a monad with more than one constructor.</p>\n\n<p>If <code>m</code> is rigid (and we do not need to require that <code>m</code> be a monad), we can implement <code>refactor</code>:</p>\n\n<pre><code>refactor bca bmc = fmap bca (inject bmc)\n</code></pre>\n\n<p>If <code>m</code> is not rigid, we cannot refactor arbitrary programs. So far we have seen that the continuation monad is rigid, but the \"future\"-like monads and the <code>IO</code> monad are not rigid. This again shows that rigidity is, in a sense, a stronger property than monadicity.</p>\n"}, {"comments": [{"owner": {"reputation": 2845, "user_id": 593934, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/nPK3i.jpg?s=128&g=1", "display_name": "winitzki", "link": "https://stackoverflow.com/users/593934/winitzki"}, "edited": false, "score": 0, "creation_date": 1561864921, "post_id": 56822105, "comment_id": 100197125, "body": "It is very interesting to see that <code>Rigid</code> has one fewer law than <code>Distributive</code>. Two questions: 1) Is <code>Traversable</code> similar in that it has two laws, and we can omit one law to have a weaker typeclass (your conjectured &quot;co-Rigid&quot;)? 2)  What exactly is the usefulness of <code>Distributive</code> functors, and are there any examples of <code>Distributive</code> other than the <code>Reader</code> monad?"}, {"owner": {"reputation": 31243, "user_id": 2751851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/4ddc0.png?s=128&g=1", "display_name": "duplode", "link": "https://stackoverflow.com/users/2751851/duplode"}, "reply_to_user": {"reputation": 2845, "user_id": 593934, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/nPK3i.jpg?s=128&g=1", "display_name": "winitzki", "link": "https://stackoverflow.com/users/593934/winitzki"}, "edited": false, "score": 0, "creation_date": 1561868121, "post_id": 56822105, "comment_id": 100197430, "body": "[1/3] (1) Indeed. Implementation details aside, the <code>Traversable</code> isomorphism amounts to a <code>clear</code> function, which empties the traversable structure giving out its shape and a list of its contents, and a <code>fill</code> function, which remakes the structure from shape and contents. <code>fill . clear = id</code> is equivalent to the identity law of <code>Traversable</code>, and adding <code>clear . fill = id</code> amounts to adding the composition law. A pseudo-traversable class with only the identity law is conceivable, but I suspect it wouldn&#39;t see much use -- the main problem being that traversals wouldn&#39;t compose cleanly."}, {"owner": {"reputation": 31243, "user_id": 2751851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/4ddc0.png?s=128&g=1", "display_name": "duplode", "link": "https://stackoverflow.com/users/2751851/duplode"}, "reply_to_user": {"reputation": 2845, "user_id": 593934, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/nPK3i.jpg?s=128&g=1", "display_name": "winitzki", "link": "https://stackoverflow.com/users/593934/winitzki"}, "edited": false, "score": 0, "creation_date": 1561868145, "post_id": 56822105, "comment_id": 100197433, "body": "[2/3] (2a) All distributive functors are isomorphic to <code>Reader r</code> for some <code>r</code>, though working with the non-function form can be more convenient depending on what one wants to do. Examples include infinite streams, fixed length vectors, and more generally any data structure with a fixed shape."}, {"owner": {"reputation": 31243, "user_id": 2751851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/4ddc0.png?s=128&g=1", "display_name": "duplode", "link": "https://stackoverflow.com/users/2751851/duplode"}, "reply_to_user": {"reputation": 2845, "user_id": 593934, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/nPK3i.jpg?s=128&g=1", "display_name": "winitzki", "link": "https://stackoverflow.com/users/593934/winitzki"}, "edited": false, "score": 0, "creation_date": 1561868182, "post_id": 56822105, "comment_id": 100197440, "body": "[3/3] (2b) While there are some nifty things one might do with the <code>Distributive</code> methods (for instance, with a vector type like <code>Duo a = Duo a a</code>, <code>cotraverse @Duo @[]</code> can be used to zip a list of vectors with a fold), the class has a rather tiny interface. The real power comes with <code>Representable</code>, which gives direct access to the isomorphism, thus making it possible to do with the functorial values almost anything you&#39;d do with a function. (<code>Distributive</code> and <code>Representable</code> are separate classes mostly for the sake of packaging a simpler subset of the interface separately.)"}, {"owner": {"reputation": 31243, "user_id": 2751851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/4ddc0.png?s=128&g=1", "display_name": "duplode", "link": "https://stackoverflow.com/users/2751851/duplode"}, "reply_to_user": {"reputation": 2845, "user_id": 593934, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/nPK3i.jpg?s=128&g=1", "display_name": "winitzki", "link": "https://stackoverflow.com/users/593934/winitzki"}, "edited": false, "score": 0, "creation_date": 1561868804, "post_id": 56822105, "comment_id": 100197513, "body": "@winitzki Beyond <code>Distributive</code> and <code>Representable</code>, there is still a further layer of bells and whistles that can be added to the interface, resulting in <code>Adjunction</code>, the class of Hask/Hask adjunctions. <a href=\"https://stackoverflow.com/a/56704938/2751851\">The answer I wrote about it the other day</a> is somewhat relevant when it comes to what <code>Distributive</code>-like things can do."}, {"owner": {"reputation": 2845, "user_id": 593934, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/nPK3i.jpg?s=128&g=1", "display_name": "winitzki", "link": "https://stackoverflow.com/users/593934/winitzki"}, "edited": false, "score": 0, "creation_date": 1561878247, "post_id": 56822105, "comment_id": 100198754, "body": "What about a traversable that has <code>clear . fill = id</code> but not <code>fill . clear = id</code>? Would that be useful?"}, {"owner": {"reputation": 31243, "user_id": 2751851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/4ddc0.png?s=128&g=1", "display_name": "duplode", "link": "https://stackoverflow.com/users/2751851/duplode"}, "reply_to_user": {"reputation": 2845, "user_id": 593934, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/nPK3i.jpg?s=128&g=1", "display_name": "winitzki", "link": "https://stackoverflow.com/users/593934/winitzki"}, "edited": false, "score": 0, "creation_date": 1561880102, "post_id": 56822105, "comment_id": 100199044, "body": "[1/2] @winitzki I believe a pseudo-traversable with only the composition law would be able to violate identity through rearrangements, as long as the rearrangements were idempotent. A traversal that only visits a certain number of elements from the structure might be a reasonable example."}, {"owner": {"reputation": 31243, "user_id": 2751851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/4ddc0.png?s=128&g=1", "display_name": "duplode", "link": "https://stackoverflow.com/users/2751851/duplode"}, "reply_to_user": {"reputation": 2845, "user_id": 593934, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/nPK3i.jpg?s=128&g=1", "display_name": "winitzki", "link": "https://stackoverflow.com/users/593934/winitzki"}, "edited": false, "score": 0, "creation_date": 1561880160, "post_id": 56822105, "comment_id": 100199051, "body": "[2/2] @winitzki Also, I am beginning to suspect that <a href=\"https://hackage.haskell.org/package/witherable-0.3.1/docs/Data-Witherable.html#t:Witherable\" rel=\"nofollow noreferrer\"><code>Witherable</code></a> might have something to do with that idea (even though it is not exactly the same situation, as the rearrangements there are element-dependent): filtering is idempotent, and the witherable laws include a weakened identity and an unchanged composition law. So yes, it sounds like this other notion might be more fruitful."}], "tags": [], "owner": {"reputation": 31243, "user_id": 2751851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/4ddc0.png?s=128&g=1", "display_name": "duplode", "link": "https://stackoverflow.com/users/2751851/duplode"}, "is_accepted": false, "score": 6, "last_activity_date": 1568066904, "last_edit_date": 1568066904, "creation_date": 1561863281, "answer_id": 56822105, "question_id": 39649497, "link": "https://stackoverflow.com/questions/39649497/is-this-property-of-a-functor-stronger-than-a-monad/56822105#56822105", "title": "Is this property of a functor stronger than a monad?", "body": "<p>I have been doing some experiments lately to better understand <code>Distributive</code>. Happily enough, my results appear closely related to <a href=\"https://stackoverflow.com/a/39736535/2751851\">your rigid functors</a>, in a way that clarifies them both.</p>\n\n<p>To begin with, here is one possible presentation of rigid functors. I have taken the liberty to bikeshed your names a bit, for reasons I'll soon get to:</p>\n\n<pre><code>flap :: Functor f =&gt; f (a -&gt; b) -&gt; a -&gt; f b\nflap u a = ($ a) &lt;$&gt; u \n\nclass Functor g =&gt; Rigid g where\n    fflip :: (a -&gt; g b) -&gt; g (a -&gt; b)\n    fflip f = (. f) &lt;$&gt; extractors\n\n    extractors :: g (g a -&gt; a)\n    extractors = fflip id\n\n-- \"Left inverse\"/non-degeneracy law: flap . fflip = id\n\ninstance Rigid ((-&gt;) r) where\n    fflip = flip\n</code></pre>\n\n<p>Some remarks on my phrasing:</p>\n\n<ul>\n<li><p>I have changed the names of <code>inject</code> and <code>eject</code> to <code>fflip</code> and <code>flap</code>, mainly because, to my eyes, <code>flap</code> looks more like injecting, due to things like this:</p>\n\n<pre><code>sweep :: Functor f =&gt; f a -&gt; b -&gt; f (a, b)\nsweep u b = flap ((,) &lt;$&gt; u) b\n</code></pre></li>\n<li><p>I took the <code>flap</code> name <a href=\"http://hackage.haskell.org/package/relude-0.5.0/docs/Relude-Functor-Fmap.html#v:flap\" rel=\"nofollow noreferrer\">from <em>protolude</em></a>. It is a play on <code>flip</code>, which is fitting because it is one of two symmetrical ways of generalising it. (We can either pull the function outside of an arbitrary <code>Functor</code>, as in <code>flap</code>, or pull a <code>Rigid</code> functor outside of a function, as in <code>fflip</code>.)</p></li>\n<li><p>I first realised the significance of <code>extractors</code> while playing with <code>Distributive</code>, but it hadn't occured to me that it might make sense as part of a different class. <code>extractors</code> and <code>fflip</code> are interdefinable, making it possible to write, for example, this rather neat instance for the search/selection monad:</p>\n\n<pre><code>newtype Sel r a = Sel { runSel :: (a -&gt; r) -&gt; a }\n    deriving (Functor, Applicative, Monad) via SelectT r Identity\n\ninstance Rigid (Sel r) where\n    -- Sel r (Sel r a -&gt; a) ~ ((Sel r a -&gt; a) -&gt; r) -&gt; Sel r a -&gt; a\n    extractors = Sel $ \\k m -&gt; m `runSel` \\a -&gt; k (const a)\n</code></pre></li>\n</ul>\n\n<p>Every distributive functor is rigid:</p>\n\n<pre><code>fflipDistrib :: Distributive g =&gt; (a -&gt; g b) -&gt; g (a -&gt; b)\nfflipDistrib = distribute @_ @((-&gt;) _)\n-- From this point on, I will pretend Rigid is a superclass of Distributive.\n-- There would be some tough questions about interface ergonomics if we were\n-- writing this into a library. We don't have to worry about that right now,\n-- though.\n</code></pre>\n\n<p>From the other direction, we can write a function which imitates the signature of <code>distribute</code> using <code>Rigid</code>:</p>\n\n<pre><code>infuse :: (Rigid g, Functor f) =&gt; f (g a) -&gt; g (f a)\ninfuse u = (&lt;$&gt; u) &lt;$&gt; extractors\n</code></pre>\n\n<p><code>infuse</code>, however, is not <code>distribute</code>. As you note, there are rigid functors that are not distributive, such as <code>Sel</code>. Therefore, we have to conclude that <code>infuse</code>, in the general case, does not follow the distributive laws.</p>\n\n<p>(An aside: that <code>infuse</code> is not a lawful <code>distribute</code> in the case of <code>Sel</code> can be established by a cardinality argument. If <code>infuse</code> followed the distributive laws, we would have <code>infuse . infuse = id</code> for any two rigid functors. However, something like <code>infuse @((-&gt;) Bool) @(Sel r)</code> leads to a result type with fewer inhabitants than the argument type; therefore, there is no way it can have a left inverse.)</p>\n\n<h2>A place in the constellation</h2>\n\n<p>At this point, it would be relevant to sharpen our picture of exactly what distinguishes <code>Distributive</code> from <code>Rigid</code>. Given that your rigid law is <code>flap . fflip = id</code>, intuition suggests the other half of an isomorphism, <code>fflip . flap = id</code>, might hold in the case of <code>Distributive</code>. Checking that hypothesis requires a detour through <code>Distributive</code>.</p>\n\n<p>There is an alternative presentation of <code>Distributive</code> (and <code>Rigid</code>) in which <code>distribute</code> (or <code>fflip</code>) is factored through the function functor. More specifically, any functorial value of type <code>g a</code> can be converted into a CPS suspension that takes a <code>forall x. g x -&gt; x</code> extractor:</p>\n\n<pre><code>-- The existential wrapper is needed to prevent undue specialisation by GHC.\n-- With pen and paper, we can leave it implicit.\n-- Note this isn't necessarily the best implementation available; see also\n-- https://stackoverflow.com/q/56826733/2751851\ndata Ev g a where\n    Ev :: ((g x -&gt; x) -&gt; a) -&gt; Ev g a\n\n-- Existential aside, this is ultimately just a function type.\nderiving instance Functor (Ev g)\n\n-- Morally, evert = flip id\nevert :: g a -&gt; Ev g a\nevert u = Ev $ \\e -&gt; e u\n</code></pre>\n\n<p>If <code>g</code> is <code>Rigid</code>, we can go in the other direction and recover the functorial value from the suspension:</p>\n\n<pre><code>-- Morally, revert = flip fmap extractors\nrevert :: Rigid g =&gt; Ev g a -&gt; g a\nrevert (Ev s) = s &lt;$&gt; extractors\n</code></pre>\n\n<p><code>Ev g</code> itself is <code>Distributive</code>, regardless of what <code>g</code> is -- after all, it is just a function:</p>\n\n<pre><code>-- We need unsafeCoerce (yikes!) because GHC can't be persuaded that we aren't\n-- doing anything untoward with the existential.\n-- Note that flip = fflip @((-&gt;) _)\ninstance Rigid (Ev g) where\n    fflip = Ev . flip . fmap (\\(Ev s) -&gt; unsafeCoerce s)\n\n-- Analogously, flap = distribute @((-&gt;) _)\ninstance Distributive (Ev g) where\n    distribute = Ev . flap . fmap (\\(Ev s) -&gt; unsafeCoerce s) \n</code></pre>\n\n<p>Further, <code>fflip</code> and <code>distribute</code> for arbitrary <code>Rigid</code>/<code>Distributive</code> functors can be routed through <code>evert</code> and <code>revert</code>:</p>\n\n<pre><code>-- fflip @(Ev g) ~ flip = distribute @((-&gt;) _) @((-&gt;) _)\nfflipEv :: Rigid g =&gt; (a -&gt; g b) -&gt; g (a -&gt; b)\nfflipEv = revert . fflip . fmap evert\n\n-- distribute @(Ev g) ~ flap = distribute @((-&gt;) _) _\ndistributeEv :: (Rigid g, Functor f) =&gt; f (g a) -&gt; g (f a) \ndistributeEv = revert . distribute . fmap evert\n</code></pre>\n\n<p><code>revert</code>, in fact, would be enough for implementing <code>Distributive</code>. In such terms, the distributive laws amount to requiring <code>evert</code> and <code>revert</code> being inverses:</p>\n\n<pre><code>revert . evert = id  -- \"home\" roundtrip, right inverse law\nevert . revert = id  -- \"away\" roundtrip, left inverse law\n</code></pre>\n\n<p>The two roundtrips correspond, respectively, to the two non-free distributive laws:</p>\n\n<pre><code>fmap runIdentity . distribute = runIdentity                               -- identity\nfmap getCompose . distribute = distribute . fmap distribute . getCompose  -- composition\n</code></pre>\n\n<p>(The <code>distribute . distribute = id</code> requirement stated in the <code>Data.Distributive</code> docs ultimately amounts to those two laws, plus naturality.)</p>\n\n<p>Earlier on, I speculated about an isomorphism involving <code>fflip</code>:</p>\n\n<pre><code>flap . fflip = id  -- \"home\" roundtrip, left inverse Rigid law  \nfflip . flap = id  -- \"away\" roundtrip, would-be right inverse law\n</code></pre>\n\n<p>It can be verified directly that the rigid law, <code>flap . fflip = id</code>, is equivalent to the other \"home\" roundtrip, <code>revert . evert = id</code>. The other direction is trickier. The purported isomorphisms can be chained like this:</p>\n\n<pre><code>                        g (a -&gt; b)        \n    {fflip =&gt; &lt;= flap}              {evert =&gt; &lt;= revert}\na -&gt; g b                                                   Ev g (a -&gt; b)\n    {fmap evert =&gt; &lt;= fmap revert} {distribute =&gt; &lt;= distribute}\n                             a -&gt; Ev g b\n</code></pre>\n\n<p>Let's assume the rigid law holds. We want to prove that <code>fflip . flap = id</code> if and only if <code>evert . revert = id</code>, so we must handle both directions:</p>\n\n<ul>\n<li><p>Firstly, let's assume <code>evert . revert = id</code>. The counterclockwise way of going around the square from <code>a -&gt; g b</code> to <code>g (a -&gt; b)</code> amounts to <code>fflip</code> (see the definition of <code>fflipEv</code> above). As the conterclockwise way is made out of three isomorphisms, it follows that <code>fflip</code> has an inverse. Since <code>flap</code> is its left inverse (by the rigid law), it must also be its inverse. Therefore <code>fflip . flap = id</code>.</p></li>\n<li><p>Secondly, let's assume <code>fflip . flap = id</code>. Again, the counterclockwise way from <code>a -&gt; g b</code> to <code>g (a -&gt; b)</code> is <code>fflip</code>, but now we know that it has an inverse, namely <code>flap</code>. It follows that each of the functions composed to make up the counterclockwise way must have an inverse. In particular, <code>revert</code> must have an inverse. Since <code>evert</code> is its right inverse (by the rigid law), it must also be its inverse. Therefore, <code>evert . revert = id</code>.</p></li>\n</ul>\n\n<p>The results above allow us to precisely situate where <code>Rigid</code> stands in relation to <code>Distributive</code>. A rigid functor is a would-be distributive, except that it only follows the identity law of distributive, and not the composition one. Making <code>fflip</code> an isomorphism, with <code>flap</code> as its inverse, amounts to upgrading <code>Rigid</code> to <code>Distributive</code>.</p>\n\n<h2>Miscellaneous remarks</h2>\n\n<ul>\n<li><p>Looking at <code>fflip</code> and <code>flap</code> from a monadic point of view, we might say that rigid monads are equipped with an injective conversion from Kleisli arrows to <a href=\"https://hackage.haskell.org/package/semigroupoids-5.3.2/docs/Data-Semigroupoid-Static.html\" rel=\"nofollow noreferrer\">static arrows</a>. With distributive monads, the conversion is upgraded to an isomorphism, which is a generalisation of how <a href=\"https://stackoverflow.com/a/40136614/2751851\"><code>Applicative</code> and <code>Monad</code> are equivalent for <code>Reader</code></a>. </p></li>\n<li><p><code>extractors</code> condenses much of what <code>Distributive</code> is about. For any distributive functor <code>g</code>, there is a <code>g (g a -&gt; a)</code> value in which each position is filled with a matching <code>g a -&gt; a</code> extractor function. It seems accurate to say that when we move from <code>Distributive</code> to <code>Rigid</code> we lose this guarantee that position and extractor will match, and, with it, the ability to reconstruct an adequate functorial shape out of nothing. In this context, it is worth having a second look at the <code>extractors</code> implementation for <code>Sel</code> early in this answer. Any <code>a -&gt; r</code> function corresponds to a <code>Sel r a -&gt; a</code> extractor, which means there generally will be a myriad of extractors we can't enumerate, so we have to satisfy ourselves with non-isomorphic <code>fflip</code> and <code>infuse</code> (in hindsight, the <code>const</code> that shows up in the implementation of <code>extractors</code> already gives the game away). This feels a bit like the lack of a <code>Traversable</code> instance for functions. (In that case, though, there is a way to cheat if the domain type of the function is enumerable, <a href=\"http://hackage.haskell.org/package/universe-1.1/docs/Data-Universe.html\" rel=\"nofollow noreferrer\"><code>Data.Universe</code></a> style. I'm not sure if there actually is such a workaround, however impractical, for <code>Sel</code>.)</p></li>\n<li><p>I obtained the results about the <code>revert</code> isomorphism for <code>Distributive</code> largely by mirroring how the <a href=\"https://stackoverflow.com/a/21083521/2751851\">shape-and-contents decomposition</a> of <code>Traversable</code>, the dual class, works. (A very readable paper that explores the shape-and-contents theme is <a href=\"https://www.cs.ox.ac.uk/jeremy.gibbons/publications/uitbaf.pdf\" rel=\"nofollow noreferrer\"><em>Understanding Idiomatic Traversals Backwards and Forwards</em></a>, by Bird et. al.). While covering that in more detail would probably be better left for a separate post, there is at least one question worth posing here: does a notion analogous to <code>Rigid</code> make sense for <code>Traversable</code>? I believe it does, albeit my feeling is that it sounds less useful than <code>Rigid</code> might be. One example of a \"co-rigid\" pseudo-traversable would be a data structure equipped with a traversal that duplicates effects, but then discards the corresponding duplicate elements upon rebuilding the structure under the applicative layer, so that the identity law is followed -- but not the composition one.</p></li>\n<li><p>Speaking of <code>revert</code>, the <code>Ev</code> construction is in itself quite meaningful: it is an encoding of the free distributive functor. In particular, <code>evert</code> and <code>revert</code> are comparable to <a href=\"http://hackage.haskell.org/package/free-5.1.1/docs/Control-Monad-Free.html#v:liftF\" rel=\"nofollow noreferrer\"><code>liftF</code></a> and <a href=\"http://hackage.haskell.org/package/free-5.1.1/docs/src/Control.Monad.Free.html#retract\" rel=\"nofollow noreferrer\"><code>retract</code></a> for free monads, as well as to similar functions for other free constructions. (In such a context, <code>revert</code> being a full inverse to <code>evert</code> hints at how strong <code>Distributive</code> is. It is more usual for the retraction to discard information in some cases, as it happens in the general case of <code>Rigid</code>.)</p></li>\n<li><p>Last, but not least, there is another way still of making sense of <code>Ev</code>: it means the polymorphic extractor type represents the distributive functor, in the <a href=\"https://hackage.haskell.org/package/adjunctions-4.4/docs/Data-Functor-Rep.html\" rel=\"nofollow noreferrer\"><code>Representable</code></a> sense, with <code>evert</code> corresponding to <code>index</code>, and <code>revert</code>, to <code>tabulate</code>. Unfortunately, the quantification makes it very awkward to express that in Haskell with the actual <code>Representable</code> interface. (It is symptomatic that I had to reach for <code>unsafeCoerce</code> to give <code>Ev</code> its natural <code>Rigid</code> and <code>Distributive</code> instances.) If it serves as solace, it wouldn't be a terribly practical representation anyway: if I already have a polymorphic extractor in hands, I don't actually need <code>index</code> for extracting values.</p></li>\n</ul>\n"}, {"tags": [], "owner": {"reputation": 43134, "user_id": 1726343, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/55744f355c4714fd473c50e799165a70?s=128&d=identicon&r=PG", "display_name": "Asad Saeeduddin", "link": "https://stackoverflow.com/users/1726343/asad-saeeduddin"}, "is_accepted": false, "score": 0, "last_activity_date": 1583882455, "last_edit_date": 1583882455, "creation_date": 1583874121, "answer_id": 60625879, "question_id": 39649497, "link": "https://stackoverflow.com/questions/39649497/is-this-property-of-a-functor-stronger-than-a-monad/60625879#60625879", "title": "Is this property of a functor stronger than a monad?", "body": "<p>We are all familiar with the <code>Traversable</code> typeclass, which can be boiled down to the following:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>class Functor t =&gt; Traversable t\n  where\n  sequenceA :: Applicative f =&gt; t (f a) -&gt; f (t a)\n</code></pre>\n\n<p>This makes use of the concept of an <code>Applicative</code> functor. There is a laws-only <a href=\"https://stackoverflow.com/questions/60596097/are-all-fixed-size-containers-strong-monoidal-functors-and-or-vice-versa\">strengthening</a> of the categorical concept underlying <code>Applicative</code> that goes like this:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>-- Laxities of a lax monoidal endofunctor on Hask under (,)\nzip :: Applicative f =&gt; (f a, f b) -&gt; f (a, b)\nzip = uncurry $ liftA2 (,)\n\nhusk :: Applicative f =&gt; () -&gt; f ()\nhusk = pure\n\n-- Oplaxities of an oplax monoidal endofunctor on ... (this is trivial for all endofunctors on Hask)\nunzip :: Functor f =&gt; f (a, b) -&gt; (f a, f b)\nunzip fab = (fst &lt;$&gt; fab, snd &lt;$&gt; fab)\n\nunhusk :: f () -&gt; ()\nunhusk = const ()\n\n-- The class\nclass Applicative f =&gt; StrongApplicative f\n\n-- The laws\n-- zip . unzip = id\n-- unzip . zip = id\n-- husk . unhusk = id\n-- unhusk . husk = id -- this one is trivial\n</code></pre>\n\n<p>The linked question and its answers have more details, but the gist is that <code>StrongApplicative</code>s model some notion of \"fixed size\" for functors. This typeclass has an interesting connection to <code>Representable</code> functors. For reference, <code>Representable</code> is:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>class Functor f =&gt; Representable x f | f -&gt; x\n  where\n  rep :: f a -&gt; (x -&gt; a)\n  unrep :: (x -&gt; a) -&gt; f a\n\ninstance Representable a ((-&gt;) a)\n  where\n  rep = id\n  unrep = id\n</code></pre>\n\n<p>An <a href=\"https://stackoverflow.com/a/60610625/1726343\">argument by @Daniel Wagner</a> shows that <code>StrongApplicative</code> is a generalization of <code>Representable</code>, in that every <code>Representable</code> is <code>StrongApplicative</code>. Whether there are any <code>StrongApplicative</code>s that are not <code>Representable</code> is not yet clear.</p>\n\n<p>Now, we know that <code>Traversable</code> is formulated in terms of <code>Applicative</code>, and runs in one direction. Since <code>StrongApplicative</code> promotes the <code>Applicative</code> laxities to isomorphisms, perhaps we want to use this extra equiment to invert the distributive law that <code>Traversable</code> supplies:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>class Functor f =&gt; Something f\n  where\n  unsequence :: StrongApplicative f =&gt; f (t a) -&gt; t (f a)\n</code></pre>\n\n<p>It just so happens that <code>(-&gt;) a</code> is a <code>StrongApplicative</code>, and in fact a representative specimen (if you'll pardon the pun) of the genus of <code>Representable</code> <code>StrongApplicative</code> functors. Hence we can write your <code>inject</code>/<code>promote</code> operation as:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>promote :: Something f =&gt; (a -&gt; f b) -&gt; f (a -&gt; b)\npromote = unsequence\n</code></pre>\n\n<p>We mentioned before that <code>StrongApplicative</code> is a superclass of the family of <code>Representative</code> functors. From examining the type of <code>unsequence</code>, it is obvious that the stronger a constraint we place on the polymorphic applicative, the easier it will be to implement <code>unsequence</code> (and hence the more instances of the resulting class).</p>\n\n<p>So in a sense there is a hierarchy of \"detraversable\" functors that flows in the opposite direction to a hierarchy of applicative effects with respect to which you might wish to detraverse them. The hierarchy of \"inner\" functors would go like this:</p>\n\n<pre><code>Functor f =&gt; Applicative f =&gt; StrongApplicative f =&gt; Representable x f\n</code></pre>\n\n<p>And the corresponding hierarchy of detraversable/distributive functors might go like this:</p>\n\n<pre><code>Distributive t &lt;= ADistributive t &lt;= SADistributive t &lt;= RDistributive t\n</code></pre>\n\n<p>With definitions:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>class RDistributive t\n  where\n  rdistribute :: Representable x f =&gt; f (t a) -&gt; t (f a)\n\n  default rdistribute :: (SADistributive t, StrongApplicative f) =&gt; f (t a) -&gt; t (f a)\n  rdistribute = sadistribute\n\nclass RDistributive t =&gt; SADistributive t\n  where\n  sadistribute :: StrongApplicative f =&gt; f (t a) -&gt; t (f a)\n\n  default sadistribute :: (ADistributive t, Applicative f) =&gt; f (t a) -&gt; t (f a)\n  sadistribute = adistribute\n\nclass SADistributive t =&gt; ADistributive t\n  where\n  adistribute :: Applicative f =&gt; f (t a) -&gt; t (f a)\n\n  default adistribute :: (Distributive t, Functor f) =&gt; f (t a) -&gt; t (f a)\n  adistribute = distribute\n\nclass ADistributive t =&gt; Distributive t\n  where\n  distribute :: Functor f =&gt; f (t a) -&gt; t (f a)\n\n</code></pre>\n\n<p>Our definition of <code>promote</code> can be generalized to depend on <code>RDistributive</code> (since <code>(-&gt;) a</code> itself is indeed a representable functor):</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>promote :: RDistributive f =&gt; (a -&gt; f b) -&gt; f (a -&gt; b)\npromote = rdistribute\n</code></pre>\n\n<p>In a strange turn of events, once you get down to the bottom of this hierarchy (i.e. to <code>Distributive</code>), your promise of detraversability has become so strong relative to your demands that the only functors for which you can implement it are themselves <code>Representable</code>. An example of such a distributive, representable (and hence rigid) functor is that of pairs:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>data Pair a = Pair { pfst :: a, psnd :: a }\n  deriving Functor\n\ninstance RDistributive Pair\ninstance SADistributive Pair\ninstance ADistributive Pair\ninstance Distributive Pair\n  where\n  distribute x = Pair (pfst &lt;$&gt; x) (psnd &lt;$&gt; x)\n</code></pre>\n\n<p>Of course if you make a strong demand of the polymorphic \"inner functor\", for example <code>Representable x f</code> in <code>RDistributive</code>, instances like this become possible:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>newtype Weird r a = Weird { runWeird :: (a -&gt; r) -&gt; a }\n  deriving Functor\n\ninstance RDistributive (Weird r)\n  where\n  rdistribute = fmap unrep . promoteWeird . rep\n    where\n    promoteWeird :: (x -&gt; Weird r a) -&gt; Weird r (x -&gt; a)\n    promoteWeird f = fmap (. f) $ Weird $ \\k m -&gt; m `runWeird` \\a -&gt; k (const a)\n</code></pre>\n\n<p>TODO: Check where (if anywhere) in the hierarchy all the other examples of rigid functors fall.</p>\n\n<p>As I said I haven't thought about it super carefully, so maybe the folks here that have devoted some thought to the rigid functor concept can immediately poke holes in it. Alternately, maybe it makes things fall into place that I can't yet see.</p>\n\n<p>It's probably worthwhile thinking about some laws for these untraversing typeclasses. An obvious one that suggests itself is <code>sequence . unsequence = id</code> and <code>unsequence . sequence = id</code> wherever the functor supports both <code>Traversable</code> and <code>Untraverse</code>.</p>\n\n<p>It's also worth mentioning that the interaction of \"distributive law\"s of functors with monads and comonads is quite well studied, so that might have some relevance to the monad related discussion in your posts.</p>\n"}], "owner": {"reputation": 2845, "user_id": 593934, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/nPK3i.jpg?s=128&g=1", "display_name": "winitzki", "link": "https://stackoverflow.com/users/593934/winitzki"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1089, "favorite_count": 15, "accepted_answer_id": 39736535, "answer_count": 3, "score": 26, "last_activity_date": 1583882455, "creation_date": 1474581387, "last_edit_date": 1474591745, "question_id": 39649497, "link": "https://stackoverflow.com/questions/39649497/is-this-property-of-a-functor-stronger-than-a-monad", "title": "Is this property of a functor stronger than a monad?", "body": "<p>While thinking about how to generalize monads, I came up with the following property of a functor F:</p>\n\n<pre><code>inject :: (a -&gt; F b) -&gt; F(a -&gt; b) \n</code></pre>\n\n<p>-- which should be a natural transformation in both a and b.</p>\n\n<p>In absence of a better name, I call the functor F <strong>bindable</strong> if there exists a natural transformation <code>inject</code> shown above.</p>\n\n<p>The main question is, whether this property is already known and has a name, and how is it related to other well-known properties of functors (such as, being applicative, monadic, pointed, traversable, etc.)</p>\n\n<p>The motivation for the name \"bindable\" comes from the following consideration: Suppose M is a monad and F is a \"bindable\" functor. Then one has the following natural morphism:</p>\n\n<pre><code>fbind :: M a -&gt; (a -&gt; F(M b)) -&gt; F(M b)\n</code></pre>\n\n<p>This is similar to the monadic \"bind\",</p>\n\n<pre><code>bind :: M a -&gt; (a -&gt; M b) -&gt; M b\n</code></pre>\n\n<p>except the result is decorated with the functor F.</p>\n\n<p>The idea behind <code>fbind</code> was that a generalized monadic operation can produce not just a single result M b but a \"functor-ful\" F of such results. I want to express the situation when a monadic operation yields several \"strands of computation\" rather than just one; each \"strand of computation\" being again a monadic computation.</p>\n\n<p>Note that every functor F has the morphism</p>\n\n<pre><code>eject :: F(a -&gt; b) -&gt; a -&gt; F b\n</code></pre>\n\n<p>which is converse to \"inject\". But not every functor F has \"inject\".</p>\n\n<p>Examples of functors that have \"inject\": <code>F t = (t,t,t)</code>  or <code>F t = c -&gt; (t,t)</code> where c is a constant type. Functors <code>F t = c</code> (constant functor) or <code>F t = (c,t)</code> are not \"bindable\" (i.e. do not have \"inject\"). The continuation functor <code>F t = (t -&gt; r) -&gt; r</code> also does not seem to have <code>inject</code>.</p>\n\n<p>The existence of \"inject\" can be formulated in a different way. Consider the \"reader\" functor <code>R t = c -&gt; t</code> where c is a constant type. (This functor is applicative and monadic, but that's beside the point.) The \"inject\" property then means <code>R (F t) -&gt; F (R t)</code>, in other words, that R commutes with F. Note that this is not the same as the requirement that F be traversable; that would have been <code>F (R t) -&gt; R (F t)</code>, which is always satisfied for any functor F with respect to R.</p>\n\n<p>So far, I was able to show that \"inject\" implies \"fbind\" for any monad M.</p>\n\n<p>In addition, I showed that every functor F that has \"inject\" will also have these additional properties:</p>\n\n<ul>\n<li>it is pointed </li>\n</ul>\n\n<p><code>point ::  t -&gt; F t</code></p>\n\n<ul>\n<li><p>if F is \"bindable\" and applicative then F is also a monad</p></li>\n<li><p>if F and G are \"bindable\" then so is the pair functor F * G  (but not F + G)</p></li>\n<li><p>if F is \"bindable\" and A is any profunctor then the (pro)functor <code>G t = A t -&gt; F t</code> is bindable</p></li>\n<li><p>the identity functor is bindable.</p></li>\n</ul>\n\n<p>Open questions:</p>\n\n<ul>\n<li><p>is the property of being \"bindable\" equivalent to some other well-known properties, or is it a new property of a functor that is not usually considered?</p></li>\n<li><p>are there any other properties of the functor \"F\" that follow from the existence of \"inject\"?</p></li>\n<li><p>do we need any laws for \"inject\", would that be useful? For instance, we could require that R (F t) be isomorphic to F (R t) in one or both directions.</p></li>\n</ul>\n"}, {"tags": ["list", "haskell", "error-handling"], "comments": [{"owner": {"reputation": 37219, "user_id": 1523776, "user_type": "moderator", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/b3e0b5c8e42a8c38009ef2d969f8dabb?s=128&d=identicon&r=PG", "display_name": "Benjamin Hodgson", "link": "https://stackoverflow.com/users/1523776/benjamin-hodgson"}, "edited": false, "score": 1, "creation_date": 1474582254, "post_id": 39649028, "comment_id": 66602691, "body": "It kinda works already. Remember that <code>join</code> for lists takes the Cartesian product of the inner lists, so if any one of the lists is empty then the resulting list will be empty"}, {"owner": {"reputation": 19307, "user_id": 1663462, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/c30e0fa0f3a065c038c633a95066d299?s=128&d=identicon&r=PG", "display_name": "Chris Stryczynski", "link": "https://stackoverflow.com/users/1663462/chris-stryczynski"}, "reply_to_user": {"reputation": 37219, "user_id": 1523776, "user_type": "moderator", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/b3e0b5c8e42a8c38009ef2d969f8dabb?s=128&d=identicon&r=PG", "display_name": "Benjamin Hodgson", "link": "https://stackoverflow.com/users/1523776/benjamin-hodgson"}, "edited": false, "score": 0, "creation_date": 1474613596, "post_id": 39649028, "comment_id": 66611270, "body": "Correct, though instead of an empty list being returned I&#39;d like an list of <code>functions</code> that did return a list with at least 1 <code>Axis</code>.  So the end goals is to identify which &#39;filter` caused the entire &#39;pipe&#39;line&#39; to return <code>[]</code>."}, {"owner": {"reputation": 94713, "user_id": 1139697, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/5f136ddb684f39aaee1c028ee1950f6f?s=128&d=identicon&r=PG", "display_name": "Zeta", "link": "https://stackoverflow.com/users/1139697/zeta"}, "edited": false, "score": 0, "creation_date": 1474624353, "post_id": 39649028, "comment_id": 66617603, "body": "You should add this to your question."}], "answers": [{"tags": [], "owner": {"reputation": 2585, "user_id": 6701918, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/fBOp9.jpg?s=128&g=1", "display_name": "V. Semeria", "link": "https://stackoverflow.com/users/6701918/v-semeria"}, "is_accepted": true, "score": 3, "last_activity_date": 1474630228, "creation_date": 1474630228, "answer_id": 39659708, "question_id": 39649028, "link": "https://stackoverflow.com/questions/39649028/how-can-i-add-error-handling-to-the-list-monad-what-data-type-do-i-need/39659708#39659708", "title": "How can I add error handling to the list monad? What data type do I need?", "body": "<p>If it's for quick debugging, just use <code>Debug.Trace</code>. Otherwise you're asking for combining monads <code>List</code> and <code>Either String</code> : that's a <a href=\"http://book.realworldhaskell.org/read/monad-transformers.html\" rel=\"nofollow\">monad transformer</a>. Consider this simpler example on integers instead of XML trees :</p>\n\n<pre><code>plusOne :: Int -&gt; [Int]\nplusOne x = [x+1]\n\nvoid :: Int -&gt; [Int]\nvoid x = if x &lt;= 2 then [x] else []\n\nlistPipe :: [Int]\nlistPipe = [1,2,3] &gt;&gt;= plusOne &gt;&gt;= void\n</code></pre>\n\n<p>Some of the values in <code>listPipe</code> were cut by <code>void</code> and you'd like to know when this happens at runtime. Then your types become :</p>\n\n<pre><code>plusOne :: Int -&gt; Either String [Int]\nvoid :: Int -&gt; Either String [Int]\nlistPipe :: Either String [Int]\n</code></pre>\n\n<p>which is isomorphic to the type <code>ListT (Either String) Int</code>. With wrapping it gives you :</p>\n\n<pre><code>import Control.Monad.Trans.List\n\nvoid :: Int -&gt; ListT (Either String) Int\nvoid x = ListT $ if x &lt;= 2 then Right [x] else Left \"errorVoid\"\n\nplusOne :: Int -&gt; ListT (Either String) Int\nplusOne x = ListT $ Right [x+1]\n\nlistPipe :: Either String [Int]\nlistPipe = runListT $ ListT (Right [1,2,3]) &gt;&gt;= plusOne &gt;&gt;= void\n</code></pre>\n\n<p>and <code>listPipe = Left \"errorVoid\"</code>.</p>\n"}], "owner": {"reputation": 19307, "user_id": 1663462, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/c30e0fa0f3a065c038c633a95066d299?s=128&d=identicon&r=PG", "display_name": "Chris Stryczynski", "link": "https://stackoverflow.com/users/1663462/chris-stryczynski"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 101, "favorite_count": 0, "accepted_answer_id": 39659708, "answer_count": 1, "score": 2, "last_activity_date": 1474630228, "creation_date": 1474579025, "last_edit_date": 1474616421, "question_id": 39649028, "link": "https://stackoverflow.com/questions/39649028/how-can-i-add-error-handling-to-the-list-monad-what-data-type-do-i-need", "title": "How can I add error handling to the list monad? What data type do I need?", "body": "<pre><code>let test2 =\n        (fromDocument (doc :: Document) $/ element \"body\")\n        &gt;&gt;= ($/ element \"div\")\n        &gt;&gt;= (attributeIs \"id\" \"content\")\n        &gt;&gt;= ($/ element \"div\")\n        &gt;&gt;= (attributeIs \"class\" \"box\")\n</code></pre>\n\n<p>I'm using the <code>xml-conduit</code> library, I've get the above code which essentially filters a tree (an XML tree).</p>\n\n<p>I'd like to add functionality to \"error\" if any of the binds (<code>&gt;&gt;=</code>) (if that is the correct word to use) return an empty list.</p>\n\n<hr>\n\n<p><strong>What I've thought of doing:</strong></p>\n\n<p>Both <code>element</code> and <code>attributeIs</code> return <code>Axis</code> which is <code>Cursor -&gt; [Cursor]</code></p>\n\n<p>I'm finding it difficult to formulate the data type I need to use.\nI was thinking of using <code>Either</code> to return <code>Left a</code> (<code>a</code> would be a function like <code>attributeIs \"id\" \"content\"</code>) or <code>Right Axis</code>. </p>\n\n<p>But I wouldn't be able to return a <code>Either</code> type within the list monad if my understanding is correct.</p>\n"}, {"tags": ["haskell", "strictness"], "comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user824425"}, "edited": false, "score": 1, "creation_date": 1474565018, "post_id": 39645184, "comment_id": 66593879, "body": "If you look at the <a href=\"https://wiki.haskell.org/Seq\" rel=\"nofollow noreferrer\">(very poorly formatted) definition of <code>foldl&#39;</code></a>, you see that you often just want to strictly evaluate some let-bound variable in <code>a</code> that you feed into your <code>b</code> value."}], "answers": [{"comments": [{"owner": {"reputation": 1258, "user_id": 1612190, "user_type": "registered", "accept_rate": 15, "profile_image": "https://www.gravatar.com/avatar/34f5fd6ee400ab531f50e37dbf7bb672?s=128&d=identicon&r=PG", "display_name": "George", "link": "https://stackoverflow.com/users/1612190/george"}, "edited": false, "score": 0, "creation_date": 1474568511, "post_id": 39645252, "comment_id": 66595774, "body": "I am now thinking the dependency created by <code>seq</code> is redundant at least in the case of <code>foldl</code> as described above since the regular <code>foldl</code> already impose such a dependency constraint on <code>z&#39;</code> by virtue of using it...it seems."}, {"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "reply_to_user": {"reputation": 1258, "user_id": 1612190, "user_type": "registered", "accept_rate": 15, "profile_image": "https://www.gravatar.com/avatar/34f5fd6ee400ab531f50e37dbf7bb672?s=128&d=identicon&r=PG", "display_name": "George", "link": "https://stackoverflow.com/users/1612190/george"}, "edited": false, "score": 2, "creation_date": 1474568781, "post_id": 39645252, "comment_id": 66595932, "body": "@George <code>foldl (\\x y -&gt; 1) undefined [2]</code> evaluates to 1, instead of trying to evaluate the <code>undefined</code>. By comparison, using <code>foldl&#39;</code> errors out, since it does evaluate it."}, {"owner": {"reputation": 126897, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "reply_to_user": {"reputation": 1258, "user_id": 1612190, "user_type": "registered", "accept_rate": 15, "profile_image": "https://www.gravatar.com/avatar/34f5fd6ee400ab531f50e37dbf7bb672?s=128&d=identicon&r=PG", "display_name": "George", "link": "https://stackoverflow.com/users/1612190/george"}, "edited": false, "score": 8, "creation_date": 1474575437, "post_id": 39645252, "comment_id": 66599652, "body": "@George One of the characteristics you are used to in other languages that does not apply to Haskell is this: a function application does not obviously &quot;use&quot; all the arguments in the application. In particular, just because the application <code>foldl&#39; f z&#39; xs</code> has <code>z&#39;</code> as an argument does not <i>necessarily</i> (i.e. without inspecting the definition of <code>foldl&#39;</code>) mean that <code>z&#39;</code> gets used. This is where your argument about <code>z&#39;</code> being used falls down: <code>z&#39;</code> is an argument to a function, hence not necessarily used."}], "tags": [], "owner": {"reputation": 64805, "user_id": 286871, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/xNBpr.png?s=128&g=1", "display_name": "Tikhon Jelvis", "link": "https://stackoverflow.com/users/286871/tikhon-jelvis"}, "is_accepted": false, "score": 18, "last_activity_date": 1474565460, "last_edit_date": 1474565460, "creation_date": 1474565038, "answer_id": 39645252, "question_id": 39645184, "link": "https://stackoverflow.com/questions/39645184/how-is-haskells-seq-used/39645252#39645252", "title": "How is Haskell&#39;s seq used?", "body": "<p>The way to think about <code>a `seq` b</code> is not that it \"evaluates <code>a</code>\" but that it creates a dependency between <code>a</code> and <code>b</code>, so that when you go to evaluate <code>b</code> you evaluate <code>a</code> as well.</p>\n\n<p>This means, for example, that <code>a `seq` a</code> is completely redundant: you're telling Haskell to evaluate <code>a</code> when you evaluate <code>a</code>. By the same logic, <code>seq a</code> with just one argument would not be any different than simply writing <code>a</code> by itself.</p>\n\n<p>Just having <code>seq a</code> that somehow evaluates <code>a</code> would not work. The problem is that <code>seq a</code> is itself an expression that might not be evaluated\u2014it might be deep inside some nested thunks, for example. So it would only become relevant when you get to evaluating the whole <code>seq a</code> expression\u2014at which point you would have been evaluating <code>a</code> by itself anyhow.</p>\n\n<p>@Rhymoid's example of how it's used in a strict fold (<code>foldl'</code>) is good. Our goal is to write a fold such that its intermediate accumulated value (<code>acc</code>) is completely evaluated at each step as soon as we evaluate the final result. This is done by adding a <code>seq</code> between the accumulated value and the recursive call:</p>\n\n<pre><code>foldl' f z (x:xs) = \n  let z' = f z x in z' `seq` foldl' f z' xs\n</code></pre>\n\n<p>You can visualize this as a long chain of <code>seq</code> between each application of <code>f</code> in the  fold, connecting all of them to the final result. This way when you evaluate the final expression (ie the number you get by by summing a list), it evaluates the intermediate values (ie partial sums as you fold through the list) strictly.</p>\n"}], "owner": {"reputation": 1258, "user_id": 1612190, "user_type": "registered", "accept_rate": 15, "profile_image": "https://www.gravatar.com/avatar/34f5fd6ee400ab531f50e37dbf7bb672?s=128&d=identicon&r=PG", "display_name": "George", "link": "https://stackoverflow.com/users/1612190/george"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1026, "favorite_count": 0, "answer_count": 1, "score": 6, "last_activity_date": 1619139237, "creation_date": 1474564792, "last_edit_date": 1618883290, "question_id": 39645184, "link": "https://stackoverflow.com/questions/39645184/how-is-haskells-seq-used", "title": "How is Haskell&#39;s seq used?", "body": "<p>So, Haskell <code>seq</code> function forces the evaluation of it's first argument and returns the second. Consequently it is an infix operator. If you want to force the evaluation of an expression, intuitively such a feature would be a unary operator. So, instead of</p>\n<pre><code>seq :: a -&gt; b -&gt; b\n</code></pre>\n<p>it would be</p>\n<pre><code>seq :: a -&gt; a\n</code></pre>\n<p>Consequently, if the value you want is <code>a</code>, why return <code>b</code> and how do you construct for the return of <code>b</code>. Clearly, I am not thinking Haskell. :)</p>\n"}, {"tags": ["haskell", "types"], "comments": [{"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 0, "creation_date": 1474563255, "post_id": 39644717, "comment_id": 66592955, "body": "It makes it easy to define type-safe <a href=\"https://hackage.haskell.org/package/base-4.9.0.0/docs/Prelude.html#t:Eq\" rel=\"nofollow noreferrer\">equality</a>, ordering, etc.  and that isn&#39;t even getting into the fact that type-classes can be over higher kinded types (like <a href=\"https://hackage.haskell.org/package/base-4.9.0.0/docs/Prelude.html#t:Monad\" rel=\"nofollow noreferrer\">monads</a> or arrows)"}, {"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 0, "creation_date": 1474569583, "post_id": 39644717, "comment_id": 66596394, "body": "Well, that&#39;s true but one would normally use two different functions. Or define two same-name functions in different modules. In the vast majority of cases, we don&#39;t need dynamic dispatch as in OOP. Still, your example is technically correct, but I find e.g. <code>Ord, Eq, Show, Monoid, ...</code> far more interesting and general. You may want to look at them."}, {"owner": {"reputation": 34889, "user_id": 86604, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/329af917389e6cf8e146c03012f5319a?s=128&d=identicon&r=PG", "display_name": "Ingo", "link": "https://stackoverflow.com/users/86604/ingo"}, "edited": false, "score": 0, "creation_date": 1474582941, "post_id": 39644717, "comment_id": 66602929, "body": "Yes, one possible goal is to find common uses for different data types. This may well be uses the original author of said data types didn&#39;t even imagine. That being said, I&#39;m not convinced that the example constitutes a nice data model."}], "answers": [{"tags": [], "owner": {"reputation": 16362, "user_id": 49220, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/431cd43aaf713caa80316e852a87a840?s=128&d=identicon&r=PG", "display_name": "Paul Johnson", "link": "https://stackoverflow.com/users/49220/paul-johnson"}, "is_accepted": false, "score": 0, "last_activity_date": 1474625447, "creation_date": 1474625447, "answer_id": 39658181, "question_id": 39644717, "link": "https://stackoverflow.com/questions/39644717/data-type-instances/39658181#39658181", "title": "Data type instances?", "body": "<p>First, your instances don't need to list all the cases because they don't make any difference. You can write</p>\n\n<pre><code>instance IndicatorTest HealthIndicators where\n   indicatortest _ = True\n</code></pre>\n\n<p>Or if you prefer, the second line can be</p>\n\n<pre><code>   indicatortest = const True\n</code></pre>\n\n<p>This might be useful if you are writing a function like this:</p>\n\n<pre><code>foo :: (IndicatorTest h) =&gt; h -&gt; String\n</code></pre>\n\n<p>and you need the result to vary depending on whether the type <code>h</code> is a useful indicator or not. But in that case you would probably have made \"foo\" a function in the <code>IndicatorTest</code> class anyway.</p>\n\n<p>Its a bit difficult to advise further without knowing what you are actually trying to achieve.</p>\n"}], "owner": {"reputation": 2691, "user_id": 5477287, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/yKMgF.jpg?s=128&g=1", "display_name": "Babra Cunningham", "link": "https://stackoverflow.com/users/5477287/babra-cunningham"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 63, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1474625447, "creation_date": 1474563042, "last_edit_date": 1474563076, "question_id": 39644717, "link": "https://stackoverflow.com/questions/39644717/data-type-instances", "title": "Data type instances?", "body": "<p>Am I right in saying below is an illustration (a tediously simple one) of the use of data type instances? i.e. allows you to define different behaviors for different data. </p>\n\n<p>If not, how else can these be used?</p>\n\n<p>Code: </p>\n\n<pre><code>data HealthIndicators = Weight | Age | BloodPressure deriving (Show)\ndata IrrelevantIndicators = Starsign | BirthMonth | IQ deriving (Show)\n\nclass IndicatorTest a where\n   indicatortest :: a -&gt; Bool\n\ninstance IndicatorTest HealthIndicators where\n   indicatortest Weight = True\n   indicatortest Age = True\n   indicatortest BloodPressure = True\n\ninstance IndicatorTest IrrelevantIndicators where\n   indicatortest Starsign = False\n   indicatortest BirthMonth = False\n   indicatortest IQ = False\n</code></pre>\n"}, {"tags": ["haskell", "input", "non-exhaustive-patterns"], "answers": [{"tags": [], "owner": {"reputation": 34669, "user_id": 34409, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/4dfdadcd9bb62300eb1a54f02fe5dc18?s=128&d=identicon&r=PG", "display_name": "Chad Gilbert", "link": "https://stackoverflow.com/users/34409/chad-gilbert"}, "is_accepted": true, "score": 3, "last_activity_date": 1474563094, "creation_date": 1474563094, "answer_id": 39644733, "question_id": 39644700, "link": "https://stackoverflow.com/questions/39644700/non-exhaustive-patterns-in-function/39644733#39644733", "title": "Non Exhaustive Patterns in function", "body": "<p>When you pattern match on <code>(x:xs)</code>, it will only match if there is at least one item in the list.</p>\n\n<p>You need to handle the case of an empty <code>Table</code> parameter.</p>\n\n\n\n<pre class=\"lang-haskell prettyprint-override\"><code>printTable [] = ...\n</code></pre>\n"}], "owner": {"reputation": 137, "user_id": 2843415, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/58ac1c408c45bc187eed4b57b020034b?s=128&d=identicon&r=PG&f=1", "display_name": "Felix", "link": "https://stackoverflow.com/users/2843415/felix"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3709, "favorite_count": 0, "closed_date": 1474567377, "accepted_answer_id": 39644733, "answer_count": 1, "score": 2, "last_activity_date": 1474563094, "creation_date": 1474562996, "last_edit_date": 1474563025, "question_id": 39644700, "link": "https://stackoverflow.com/questions/39644700/non-exhaustive-patterns-in-function", "closed_reason": "Duplicate", "title": "Non Exhaustive Patterns in function", "body": "<p>I'm writing a program in Haskell that can pretty print a table and do basic queries on it. The following function is a snippet of the code which prints a table:</p>\n\n<pre><code>printTable :: Table -&gt; [String]\nprintTable table@(header:rows) = [addLine] ++ addHeader ++ [addLine] ++ addRows rows ++ [addLine]\n    where widthList            = columnWidths table\n      makeTupleList []         = []\n      makeTupleList (x:xs)     = zip widthList x : makeTupleList (xs)\n      addRows line             = map printRow (makeTupleList line)\n      addLine                  = printLine widthList\n      addHeader                = addRows [(map.map) toUpper header]\n</code></pre>\n\n<p>Note: <code>Table == [[String]]</code></p>\n\n<p>After calling this function with the 'unlines' function, the table is printed.</p>\n\n<p>If I test this function, giving it a <code>[[String]]</code> argument, it works correctly. However, if I test this function in my 'main' code, I get the error:</p>\n\n<pre><code>Non-exhaustive patterns in function printTable\n</code></pre>\n\n<p>The only difference is that in my main code, the user of the program can give a text file as an input:</p>\n\n<pre><code>main :: IO()\nmain = interact (lines &gt;&gt;&gt; exercise &gt;&gt;&gt; unlines)\n\nexercise :: [String] -&gt; [String]\nexercise = parseTable &gt;&gt;&gt; select \"gender\" \"male\" \n                  &gt;&gt;&gt; project [\"last\", \"first\", \"salary\"] &gt;&gt;&gt; printTable\n</code></pre>\n\n<p>Any help to solve this problem is more than welcome!</p>\n"}, {"tags": ["haskell", "types"], "answers": [{"comments": [{"owner": {"reputation": 4039, "user_id": 667147, "user_type": "registered", "accept_rate": 72, "profile_image": "https://i.stack.imgur.com/1iNND.png?s=128&g=1", "display_name": "jarandaf", "link": "https://stackoverflow.com/users/667147/jarandaf"}, "edited": false, "score": 0, "creation_date": 1474556051, "post_id": 39642339, "comment_id": 66588116, "body": "This does not explain the error, just slaps down the compiler :-)"}, {"owner": {"reputation": 2985, "user_id": 135202, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/WfMeK.jpg?s=128&g=1", "display_name": "Adam Bell", "link": "https://stackoverflow.com/users/135202/adam-bell"}, "reply_to_user": {"reputation": 4039, "user_id": 667147, "user_type": "registered", "accept_rate": 72, "profile_image": "https://i.stack.imgur.com/1iNND.png?s=128&g=1", "display_name": "jarandaf", "link": "https://stackoverflow.com/users/667147/jarandaf"}, "edited": false, "score": 0, "creation_date": 1474556476, "post_id": 39642339, "comment_id": 66588434, "body": "added some explanation"}], "tags": [], "owner": {"reputation": 2985, "user_id": 135202, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/WfMeK.jpg?s=128&g=1", "display_name": "Adam Bell", "link": "https://stackoverflow.com/users/135202/adam-bell"}, "is_accepted": false, "score": 2, "last_activity_date": 1474556371, "last_edit_date": 1474556371, "creation_date": 1474555843, "answer_id": 39642339, "question_id": 39642159, "link": "https://stackoverflow.com/questions/39642159/haskell-combining-datatypes/39642339#39642339", "title": "Haskell - Combining datatypes?", "body": "<p>Try this:</p>\n\n<pre><code>exampleFunction :: Characteristics String Int Int -&gt; User\nexampleFunction (Characteristics a b c) = (Person (Name a) (Age b) (Height c))\n</code></pre>\n\n<p>The reason this works, and yours does not, is that Name, Age and Height require specific types where your example function took completely generic arguments.  </p>\n\n<p>The a,b and c in this line of your example defines the type of the arguments, not the name of them.  </p>\n\n<pre><code> exampleFunction :: Characteristics a b c \n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 2691, "user_id": 5477287, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/yKMgF.jpg?s=128&g=1", "display_name": "Babra Cunningham", "link": "https://stackoverflow.com/users/5477287/babra-cunningham"}, "edited": false, "score": 0, "creation_date": 1474556552, "post_id": 39642558, "comment_id": 66588481, "body": "Thanks, I just updated my question at the same time with pretty much this :p"}], "tags": [], "owner": {"reputation": 384463, "user_id": 1126841, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fa05233b2357f8d11c22ef4cfc7bb85c?s=128&d=identicon&r=PG", "display_name": "chepner", "link": "https://stackoverflow.com/users/1126841/chepner"}, "is_accepted": true, "score": 6, "last_activity_date": 1474556795, "last_edit_date": 1474556795, "creation_date": 1474556492, "answer_id": 39642558, "question_id": 39642159, "link": "https://stackoverflow.com/questions/39642159/haskell-combining-datatypes/39642558#39642558", "title": "Haskell - Combining datatypes?", "body": "<p><code>exampleFunction</code> is too general. You are claiming it can take a <code>Characteristics a b c</code> value for <em>any</em> types <code>a</code>, <code>b</code>, and <code>c</code>. However, the value of type <code>a</code> is passed to <code>Name</code>, which can <em>only</em> take a value of type <code>String</code>. The solution is to be specific about what types the characteristics can actually be.</p>\n\n<pre><code>exampleFunction :: Characteristics String Int Int -&gt; User\nexampleFunction (Characteristics a b c) = (Person (Name a) (Age b) (Height c))\n</code></pre>\n\n<p>Consider, though, that you may not even need <code>newtype</code>s here; simple type aliases may suffice.</p>\n\n<pre><code>type Name = String\ntype Age = Int\ntype Height = Int\n\ntype Characteristics = (,,)\n\nexampleFunction :: Characteristics Name Age Height -&gt; User\nexampleFunction (Charatersics n a h) = Person n a h\n</code></pre>\n"}], "owner": {"reputation": 2691, "user_id": 5477287, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/yKMgF.jpg?s=128&g=1", "display_name": "Babra Cunningham", "link": "https://stackoverflow.com/users/5477287/babra-cunningham"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 911, "favorite_count": 0, "accepted_answer_id": 39642558, "answer_count": 2, "score": 1, "last_activity_date": 1474556795, "creation_date": 1474555330, "last_edit_date": 1474556514, "question_id": 39642159, "link": "https://stackoverflow.com/questions/39642159/haskell-combining-datatypes", "title": "Haskell - Combining datatypes?", "body": "<p>I'm new to Haskell, I've looked around for an answer to the below but had no luck.</p>\n\n<p>Why doesn't this code compile?</p>\n\n<pre><code>newtype Name = Name String deriving (Show, Read)\nnewtype Age = Age Int deriving (Show, Read)\nnewtype Height = Height Int deriving (Show, Read)\n\ndata User = Person Name Age Height deriving (Show, Read)\n\ndata Characteristics a b c = Characteristics a b c\n\nexampleFunction :: Characteristics a b c -&gt; User\nexampleFunction (Characteristics a b c) = (Person (Name a) (Age b) (Height c))\n</code></pre>\n\n<p>Error: </p>\n\n<pre><code>\"Couldn't match expected type \u2018String\u2019 with actual type \u2018a\u2019,\u2018a\u2019 is a rigid type, variable bound by the type signature\"\n</code></pre>\n\n<p>However, this compiles just fine:</p>\n\n<pre><code>exampleFunction :: String -&gt; Int -&gt; Int -&gt; User\nexampleFunction a b c = (Person (Name a) (Age b) (Height c))\n</code></pre>\n\n<p>I realize there's simpler ways of doing the above, but I'm just testing the different uses of custom data types.</p>\n\n<p><strong>Update:</strong></p>\n\n<p>My inclination is that the compiler doesn't like 'exampleFunction ::Characteristics  a b c' because its not type safe. i.e. I'm providing no guarantee of: a == Name String, b == Age Int, c == Height Int.</p>\n"}, {"tags": ["haskell", "concurrency", "ioref", "global-state"], "answers": [{"comments": [{"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 0, "creation_date": 1474556286, "post_id": 39640635, "comment_id": 66588306, "body": "So, had it been <code>atomicModifyIORef :: IORef a -&gt; (a -&gt; a) -&gt; IO a</code>, returning the old value, would have served the same purpose (and be simpler, IMO). Interesting."}, {"owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "edited": false, "score": 0, "creation_date": 1474557417, "post_id": 39640635, "comment_id": 66589077, "body": "What I don&#39;t understand is, why would I need this feature for <code>atomicModifyIORef</code> but not for <code>modifyIORef</code>?"}, {"owner": {"reputation": 16405, "user_id": 6776093, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/heFeh.png?s=128&g=1", "display_name": "redneb", "link": "https://stackoverflow.com/users/6776093/redneb"}, "reply_to_user": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "edited": false, "score": 0, "creation_date": 1474557765, "post_id": 39640635, "comment_id": 66589315, "body": "@leftaroundabout Well, <code>modifyIORef</code> doesn&#39;t provide any atomicity guarantees anyway, so it wouldn&#39;t be that useful for it."}, {"owner": {"reputation": 16405, "user_id": 6776093, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/heFeh.png?s=128&g=1", "display_name": "redneb", "link": "https://stackoverflow.com/users/6776093/redneb"}, "reply_to_user": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 0, "creation_date": 1474557926, "post_id": 39640635, "comment_id": 66589442, "body": "@chi That would have been simpler, but the current solution can do more things. For example, you could implement some form of atomic compare-and-swap that returns a boolean flag that indicates if the swap did happen."}, {"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 0, "creation_date": 1474560648, "post_id": 39640635, "comment_id": 66591399, "body": "Well, instead of <code>atomicModifyIORef ref (\\old -&gt; if swap old then (new, True) else (old, False)</code> you could do <code>swap &lt;$&gt; simplerAtomicModifyIORef ref (\\old -&gt;  if swap old then new else old)</code> -- the only downside is that you need to compute the pure predicate <code>swap old</code> twice. But this should be equivalent to your compare-and-swap (I think?)"}, {"owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "edited": false, "score": 1, "creation_date": 1474568785, "post_id": 39640635, "comment_id": 66595936, "body": "So the point is, without concurrency I might as well use <code>old &lt;- readIORef r; writeIORef r $ f old</code> if I want to keep the old value, whereas in the multithreaded case I <i>must</i> use <code>old &lt;- atomicModify r (\\x -&gt; (f x, x))</code> to ensure the new value actually corresponds to <code>f</code> applied to the old value, of which I get a copy in <code>old</code>. Have I understood that correctly?"}, {"owner": {"reputation": 16405, "user_id": 6776093, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/heFeh.png?s=128&g=1", "display_name": "redneb", "link": "https://stackoverflow.com/users/6776093/redneb"}, "reply_to_user": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "edited": false, "score": 0, "creation_date": 1474570024, "post_id": 39640635, "comment_id": 66596609, "body": "@leftaroundabout Exactly."}, {"owner": {"reputation": 1227, "user_id": 239337, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/2830f6613a8829adc3562e7a603d5e22?s=128&d=identicon&r=PG", "display_name": "safsaf32", "link": "https://stackoverflow.com/users/239337/safsaf32"}, "reply_to_user": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "edited": false, "score": 0, "creation_date": 1474669829, "post_id": 39640635, "comment_id": 66642414, "body": "@leftaroundabout Did this post answer your question?"}, {"owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "reply_to_user": {"reputation": 1227, "user_id": 239337, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/2830f6613a8829adc3562e7a603d5e22?s=128&d=identicon&r=PG", "display_name": "safsaf32", "link": "https://stackoverflow.com/users/239337/safsaf32"}, "edited": false, "score": 0, "creation_date": 1474726894, "post_id": 39640635, "comment_id": 66654928, "body": "@safsaf32: well, eventually yes, though to be honest I think the point isn&#39;t explained very incisively here \u2013 if you can phrase a better answer, I&#39;ll accept it."}], "tags": [], "owner": {"reputation": 16405, "user_id": 6776093, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/heFeh.png?s=128&g=1", "display_name": "redneb", "link": "https://stackoverflow.com/users/6776093/redneb"}, "is_accepted": false, "score": 12, "last_activity_date": 1474551397, "creation_date": 1474551397, "answer_id": 39640635, "question_id": 39640377, "link": "https://stackoverflow.com/questions/39640377/what-is-the-purpose-of-the-extra-result-parameter-of-atomicmodifyioref/39640635#39640635", "title": "What is the purpose of the extra result parameter of atomicModifyIORef?", "body": "<p>The extra parameter is used to provide a return value. For example, you may want to be able to atomically replace the value stored in a <code>IORef</code> and return the old value. You can do that like so:</p>\n\n<pre><code>atomicModifyIORef ref (\\old -&gt; (new, old))\n</code></pre>\n\n<p>If you don't have a value to return, you can use the following:</p>\n\n<pre><code>atomicModifyIORef_ :: IORef a -&gt; (a -&gt; a) -&gt; IO ()\natomicModifyIORef_ ref f =\n    atomicModifyIORef ref (\\val -&gt; (f val, ()))\n</code></pre>\n\n<p>which has the same signature as <code>modifyIORef</code>.</p>\n"}, {"comments": [{"owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "edited": false, "score": 0, "creation_date": 1474799648, "post_id": 39680874, "comment_id": 66671210, "body": "Interesting comparison. I&#39;ll nevertheless accept <a href=\"http://stackoverflow.com/a/39682119/745903\">dfeuer&#39;s answer</a> now since the \u201cwhy is this needed for <code>atomicModify</code> but for <code>modify</code>\u201d part was what this question was mainly about."}], "tags": [], "owner": {"reputation": 1227, "user_id": 239337, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/2830f6613a8829adc3562e7a603d5e22?s=128&d=identicon&r=PG", "display_name": "safsaf32", "link": "https://stackoverflow.com/users/239337/safsaf32"}, "is_accepted": false, "score": 2, "last_activity_date": 1474750461, "creation_date": 1474750461, "answer_id": 39680874, "question_id": 39640377, "link": "https://stackoverflow.com/questions/39640377/what-is-the-purpose-of-the-extra-result-parameter-of-atomicmodifyioref/39680874#39680874", "title": "What is the purpose of the extra result parameter of atomicModifyIORef?", "body": "<p>Here's how I understand this. Think of functions that follow the bracket idiom, e.g.</p>\n\n<pre><code>withFile :: FilePath -&gt; IOMode -&gt; (Handle -&gt; IO r) -&gt; IO r\n</code></pre>\n\n<p>These function take a function as argument and return the return value of that function. <code>atomicModifyIORef</code> is similar to that. It takes a function as an argument, and the intention is to return the return value of that function. There is just one complication: the argument function, has also to return a new value to be stored in the <code>IORef</code>. Because of that, <code>atomicModifyIORef</code> requires from that function to return two values. Of course, this case is not completely similar with the bracket case (e.g. there is no <code>IO</code> involved, we are not dealing with exception safety, etc), but this analogy gives you an idea.</p>\n"}, {"tags": [], "owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "is_accepted": true, "score": 2, "last_activity_date": 1474761793, "creation_date": 1474761793, "answer_id": 39682119, "question_id": 39640377, "link": "https://stackoverflow.com/questions/39640377/what-is-the-purpose-of-the-extra-result-parameter-of-atomicmodifyioref/39682119#39682119", "title": "What is the purpose of the extra result parameter of atomicModifyIORef?", "body": "<p>As you stated in a comment, without concurrency you'd be able to just write something like</p>\n\n<pre><code>modifyAndReturn ref f = do\n  old &lt;- readIORef ref\n  let !(new, r) = f old\n  writeIORef r new\n  return r\n</code></pre>\n\n<p>But in a concurrent context, someone else could change the reference between the read and the write.</p>\n"}, {"tags": [], "owner": {"reputation": 60057, "user_id": 1333025, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/79ab43010f900324ac5e2de19a2916cb?s=128&d=identicon&r=PG", "display_name": "Petr", "link": "https://stackoverflow.com/users/1333025/petr"}, "is_accepted": false, "score": 1, "last_activity_date": 1516453917, "creation_date": 1516453917, "answer_id": 48356548, "question_id": 39640377, "link": "https://stackoverflow.com/questions/39640377/what-is-the-purpose-of-the-extra-result-parameter-of-atomicmodifyioref/48356548#48356548", "title": "What is the purpose of the extra result parameter of atomicModifyIORef?", "body": "<p>The way I like to view this is via the <a href=\"https://hackage.haskell.org/package/mtl-2.2.1/docs/Control-Monad-State-Lazy.html#t:State\" rel=\"nofollow noreferrer\"><code>State</code></a> monad. A stateful operation modifies some internal state and additionally yields an output. Here the state is inside an <code>IORef</code> and the result is returned as part of the <code>IO</code> operation. So we can reformulate the function using <code>State</code> as follows:</p>\n\n<pre><code>import Control.Monad.State\nimport Data.IORef\nimport Data.Tuple (swap)\n\n-- | Applies a stateful operation to a reference and returns its result.\natomicModifyIORefState :: IORef s -&gt; State s a -&gt; IO a\natomicModifyIORefState ref state = atomicModifyIORef ref (swap . runState state)\n</code></pre>\n"}], "owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 339, "favorite_count": 1, "accepted_answer_id": 39682119, "answer_count": 4, "score": 9, "last_activity_date": 1526823530, "creation_date": 1474550752, "last_edit_date": 1526823530, "question_id": 39640377, "link": "https://stackoverflow.com/questions/39640377/what-is-the-purpose-of-the-extra-result-parameter-of-atomicmodifyioref", "title": "What is the purpose of the extra result parameter of atomicModifyIORef?", "body": "<p>The signature of <code>modifyIORef</code> is straightforward enough:</p>\n\n<pre><code>modifyIORef :: IORef a -&gt; (a -&gt; a) -&gt; IO ()\n</code></pre>\n\n<p>Unfortunately, this is not thread safe. There is an alternative that adresses this issue:</p>\n\n<pre><code>atomicModifyIORef :: IORef a -&gt; (a -&gt; (a,b)) -&gt; IO b\n</code></pre>\n\n<p>What exactly are the differences between these two functions? How am I supposed to use the <code>b</code> parameter when modifying an <code>IORef</code> that might be read from another thread?</p>\n"}, {"tags": ["haskell", "typeclass"], "comments": [{"owner": {"reputation": 37219, "user_id": 1523776, "user_type": "moderator", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/b3e0b5c8e42a8c38009ef2d969f8dabb?s=128&d=identicon&r=PG", "display_name": "Benjamin Hodgson", "link": "https://stackoverflow.com/users/1523776/benjamin-hodgson"}, "edited": false, "score": 0, "creation_date": 1474549994, "post_id": 39639892, "comment_id": 66583743, "body": "Well, you must know <code>(Show b, Show c)</code> in order to construct the dictionary <code>Show (b, c)</code>. So at the point where you construct the <code>Pair</code> you could instead just extract the first element"}, {"owner": {"reputation": 133611, "user_id": 152602, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7f370b4bd787fc68f9f62d9c6781cb79?s=128&d=identicon&r=PG", "display_name": "Lee", "link": "https://stackoverflow.com/users/152602/lee"}, "edited": false, "score": 0, "creation_date": 1474550119, "post_id": 39639892, "comment_id": 66583826, "body": "Your question implies you have the context <code>Show a, Show b =&gt; ...</code> but your code only has <code>Show a =&gt; ...</code> hence the error about not being able to deduce <code>Show b</code>."}, {"owner": {"reputation": 13807, "user_id": 2407038, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/538f6f4a9aa43841841de7d8e8b169fc?s=128&d=identicon&r=PG&f=1", "display_name": "user2407038", "link": "https://stackoverflow.com/users/2407038/user2407038"}, "edited": false, "score": 4, "creation_date": 1474552677, "post_id": 39639892, "comment_id": 66585638, "body": "You are mixing up the meaning of typeclass entailment. <code>Show a, Show b =&gt; Show (a,b)</code> means that <code>Show a</code> and <code>Show b</code> together give rise to a <code>Show (a,b)</code> but it doesn&#39;t necessarily mean the opposite holds. For example, consider two types <code>X, Y</code>, with an <code>instance Show (X, Y)</code> - you don&#39;t <i>necessarily</i> have an <code>instance (Show X)</code> here, because <code>show</code> could be <code>const &quot;&quot;</code>. What your <code>unpair</code> function is doing is giving a proof of the property you want, which is exactly what you must do if you want to use said property."}, {"owner": {"reputation": 4418, "user_id": 1103705, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/fa36ad5f4b3bda5f6975bd21773f032c?s=128&d=identicon&r=PG", "display_name": "enobayram", "link": "https://stackoverflow.com/users/1103705/enobayram"}, "reply_to_user": {"reputation": 13807, "user_id": 2407038, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/538f6f4a9aa43841841de7d8e8b169fc?s=128&d=identicon&r=PG&f=1", "display_name": "user2407038", "link": "https://stackoverflow.com/users/2407038/user2407038"}, "edited": false, "score": 0, "creation_date": 1474552864, "post_id": 39639892, "comment_id": 66585787, "body": "@user2407038 Maybe I&#39;m looking at it from the wrong mental framework, if <code>Z</code> is true if and only if <code>X</code> and <code>Y</code>, doesn&#39;t <code>Z</code> imply both <code>X</code> and <code>Y</code>? Maybe I shouldn&#39;t be thinking of it at it as a logic statement."}, {"owner": {"reputation": 4418, "user_id": 1103705, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/fa36ad5f4b3bda5f6975bd21773f032c?s=128&d=identicon&r=PG", "display_name": "enobayram", "link": "https://stackoverflow.com/users/1103705/enobayram"}, "reply_to_user": {"reputation": 13807, "user_id": 2407038, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/538f6f4a9aa43841841de7d8e8b169fc?s=128&d=identicon&r=PG&f=1", "display_name": "user2407038", "link": "https://stackoverflow.com/users/2407038/user2407038"}, "edited": false, "score": 3, "creation_date": 1474553042, "post_id": 39639892, "comment_id": 66585933, "body": "@user2407038 I see, so, if <code>OverlappingInstances</code> were turned on, someone could define a rogue <code>instance Show (X, Y)</code> without <code>Show X</code> or <code>Show Y</code>."}, {"owner": {"reputation": 13807, "user_id": 2407038, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/538f6f4a9aa43841841de7d8e8b169fc?s=128&d=identicon&r=PG&f=1", "display_name": "user2407038", "link": "https://stackoverflow.com/users/2407038/user2407038"}, "edited": false, "score": 0, "creation_date": 1474553097, "post_id": 39639892, "comment_id": 66585988, "body": "@enobayram The logical statement <code>A &#47;\\ B =&gt; C</code> means that both <code>A</code> and <code>B</code> together are a sufficient condition for <code>C</code>, which says <i>nothing</i> about what occurs in regards to <code>A</code> and <code>B</code> when <code>C</code> definitely holds. It does not state that <code>C</code> holds if and only if <code>A &#47;\\ B</code>. What you are describing is usually written <code>A &#47;\\ B &lt;=&gt; C</code> or <code>A &#47;\\ B == C</code>."}, {"owner": {"reputation": 4418, "user_id": 1103705, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/fa36ad5f4b3bda5f6975bd21773f032c?s=128&d=identicon&r=PG", "display_name": "enobayram", "link": "https://stackoverflow.com/users/1103705/enobayram"}, "reply_to_user": {"reputation": 133611, "user_id": 152602, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7f370b4bd787fc68f9f62d9c6781cb79?s=128&d=identicon&r=PG", "display_name": "Lee", "link": "https://stackoverflow.com/users/152602/lee"}, "edited": false, "score": 0, "creation_date": 1474553247, "post_id": 39639892, "comment_id": 66586102, "body": "@Lee You&#39;re mistaken, I have the context <code>(Show a, a ~ (b,c))</code> and I need <code>Show b</code>"}, {"owner": {"reputation": 4418, "user_id": 1103705, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/fa36ad5f4b3bda5f6975bd21773f032c?s=128&d=identicon&r=PG", "display_name": "enobayram", "link": "https://stackoverflow.com/users/1103705/enobayram"}, "reply_to_user": {"reputation": 37219, "user_id": 1523776, "user_type": "moderator", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/b3e0b5c8e42a8c38009ef2d969f8dabb?s=128&d=identicon&r=PG", "display_name": "Benjamin Hodgson", "link": "https://stackoverflow.com/users/1523776/benjamin-hodgson"}, "edited": false, "score": 0, "creation_date": 1474553317, "post_id": 39639892, "comment_id": 66586163, "body": "@BenjaminHodgson Sure, but that means I have to modify the data definition"}, {"owner": {"reputation": 13807, "user_id": 2407038, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/538f6f4a9aa43841841de7d8e8b169fc?s=128&d=identicon&r=PG&f=1", "display_name": "user2407038", "link": "https://stackoverflow.com/users/2407038/user2407038"}, "edited": false, "score": 0, "creation_date": 1474553427, "post_id": 39639892, "comment_id": 66586225, "body": "@enobayram Yes, I believe you would need <code>OverlappingInstances</code> somewhere for the specific example I gave - but the point is that the compiler <i>cannot</i> assume that <code>Show (a,b)</code> came from <code>(Show a, Show b)</code> no matter what you do, because this assumption is simply not sound. This is just the open world assumption for typeclasses in a somewhat sneaky form."}, {"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "reply_to_user": {"reputation": 13807, "user_id": 2407038, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/538f6f4a9aa43841841de7d8e8b169fc?s=128&d=identicon&r=PG&f=1", "display_name": "user2407038", "link": "https://stackoverflow.com/users/2407038/user2407038"}, "edited": false, "score": 0, "creation_date": 1474556766, "post_id": 39639892, "comment_id": 66588632, "body": "@user2407038 Well, if the compiler could assume both open-world and no-overlaps, it could infer <code>Show a</code> from <code>Show (a,b)</code>. But Haskell wants to allow the possibility of overlaps, hence it must disallow this unsound inference."}, {"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "reply_to_user": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 0, "creation_date": 1474659792, "post_id": 39639892, "comment_id": 66638463, "body": "@chi, GHC Haskell wants to allow the possibility of open overlaps. Some Haskellers, like myself, think it&#39;s a horrible idea. However, there are good implementation reasons to refrain from offering entailment based on instance constraints. The constraint dictionary (for a class constraint) can be inlined into the instance dictionary and not passed around at runtime. GHC Core seems to represent an instance with context as a function from dictionaries to a dictionary. Given <code>f x y</code>, you can&#39;t expect to recover <code>x</code> or <code>y</code>."}], "answers": [{"comments": [{"owner": {"reputation": 4418, "user_id": 1103705, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/fa36ad5f4b3bda5f6975bd21773f032c?s=128&d=identicon&r=PG", "display_name": "enobayram", "link": "https://stackoverflow.com/users/1103705/enobayram"}, "edited": false, "score": 0, "creation_date": 1474553134, "post_id": 39640735, "comment_id": 66586014, "body": "I don&#39;t know why your answer was downvoted, after all I indicated that I&#39;m open to different solutions, and this solution isn&#39;t any more intrusive than my own solution. I intrude the type class, you intrude the data definition."}, {"owner": {"reputation": 2863, "user_id": 2297560, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/948d4a17494b3c616a0873453b74670c?s=128&d=identicon&r=PG", "display_name": "user2297560", "link": "https://stackoverflow.com/users/2297560/user2297560"}, "reply_to_user": {"reputation": 4418, "user_id": 1103705, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/fa36ad5f4b3bda5f6975bd21773f032c?s=128&d=identicon&r=PG", "display_name": "enobayram", "link": "https://stackoverflow.com/users/1103705/enobayram"}, "edited": false, "score": 0, "creation_date": 1474553411, "post_id": 39640735, "comment_id": 66586214, "body": "Thanks. The downvote was probably because adding constraints to constructors is generally frowned upon."}, {"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 3, "creation_date": 1474556977, "post_id": 39640735, "comment_id": 66588792, "body": "@user2297560 No it is not frowned upon, AFAIK. What is frowned upon is constraining data type constructors, like <code>data Show a =&gt; T a =  ...</code> since that has a questionable, inconvenient semantics. (It is true, though, that by doing <code>Pair :: Show b =&gt; ...</code> we make the constructor to operationally pack one more pointer, increasing the memory footprint of the value representation)"}, {"owner": {"reputation": 84731, "user_id": 510937, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/70b13a9ae1aae1ca1aa6ac8dab4643f2?s=128&d=identicon&r=PG", "display_name": "Bakuriu", "link": "https://stackoverflow.com/users/510937/bakuriu"}, "edited": false, "score": 1, "creation_date": 1474628684, "post_id": 39640735, "comment_id": 66620175, "body": "@user2297560 No, That&#39;s the whole point of GADTs: having a good way of adding constraints to value constructors."}], "tags": [], "owner": {"reputation": 2863, "user_id": 2297560, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/948d4a17494b3c616a0873453b74670c?s=128&d=identicon&r=PG", "display_name": "user2297560", "link": "https://stackoverflow.com/users/2297560/user2297560"}, "is_accepted": false, "score": 2, "last_activity_date": 1474551629, "creation_date": 1474551629, "answer_id": 39640735, "question_id": 39639892, "link": "https://stackoverflow.com/questions/39639892/obtaining-show-a-from-the-context-show-a-b/39640735#39640735", "title": "Obtaining `Show a` from the context `Show (a,b)`", "body": "<p>If you don't mind the restriction that <code>b</code> must always be an instance of <code>Show</code>, then this is a simple solution:</p>\n\n<pre><code>data PairOrNot a where\n  Pair :: Show b =&gt; (b,c) -&gt; PairOrNot (b,c)\n  Not :: a -&gt; PairOrNot a\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 4418, "user_id": 1103705, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/fa36ad5f4b3bda5f6975bd21773f032c?s=128&d=identicon&r=PG", "display_name": "enobayram", "link": "https://stackoverflow.com/users/1103705/enobayram"}, "reply_to_user": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 0, "creation_date": 1474686034, "post_id": 39660423, "comment_id": 66645323, "body": "@dfeuer Yes, it&#39;s working. <code>noOverlap _ = Dict</code> won&#39;t work, because the fundep in <code>:=&gt;</code> is not enough to convince GHC for an equality, but we&#39;re asserting the equality with the <code>unsafeCoerce</code> in <code>basedOn</code> ourselves. I guess it&#39;d be quite hard to violate that <code>unsafeCoerce</code> even if you tried."}, {"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "edited": false, "score": 0, "creation_date": 1475086683, "post_id": 39660423, "comment_id": 66805881, "body": "Argh! I misread what you were doing. I thought you were coercing something else. Sorry! You might want to consider using this type, for clarity: <code>basedOn :: forall k a b. (k :=&gt; Show&#39; a, b :=&gt; Show&#39; a) =&gt; proxy a -&gt; Dict k -&gt; Dict b</code>. Since this coerces the dictionary based on the assumption that the fundep actually holds (not an entirely safe assumption), you could even go further and use <code>assertThin :: forall k l c. (k :=&gt; c, l :=&gt; c) =&gt; proxy c -&gt; k :~: l</code> without (I believe) any further loss of safety."}], "tags": [], "owner": {"reputation": 4418, "user_id": 1103705, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/fa36ad5f4b3bda5f6975bd21773f032c?s=128&d=identicon&r=PG", "display_name": "enobayram", "link": "https://stackoverflow.com/users/1103705/enobayram"}, "is_accepted": false, "score": 1, "last_activity_date": 1474632502, "creation_date": 1474632502, "answer_id": 39660423, "question_id": 39639892, "link": "https://stackoverflow.com/questions/39639892/obtaining-show-a-from-the-context-show-a-b/39660423#39660423", "title": "Obtaining `Show a` from the context `Show (a,b)`", "body": "<p>I've kept trying to see if I can come up with something better, and here's the best I could come up with:</p>\n\n<p>In my original attempt, I've coupled the <code>Show'</code> type class with the instance declaration for pairs. Even though I couldn't find a way around modifying the type class, I've at least managed to generalize this for any instance declaration.</p>\n\n<p>As pointed out in the question's comments <code>instance (Show a, Show b) =&gt; Show (a,b)</code> is a one-way implication, but I assumed it could be applied in the other direction as well, given the absence of overlapping instances. Unfortunately GHC doesn't rely on that, but we can assert that ourselves. My intuition can be translated into code: (<code>:=&gt;</code> is from <code>Data.Constraint</code> from the <code>constraints</code> package, and <code>a :=&gt; b</code> means that there is an <code>instance a =&gt; b</code> somewhere)</p>\n\n<pre><code>class Show' a where\n  show' :: a -&gt; String\n  noOverlap :: (b :=&gt; Show' a) =&gt; Proxy a -&gt; Dict b\n</code></pre>\n\n<p>Here, the <code>noOverlap</code> function is a promise that if you can find a constraint <code>b</code> which gives rise to an instance <code>Show' a</code>, I can prove <code>b</code> given <code>Show' a</code>. This promise is equivalent to stating that there will be no overlapping instances for <code>Show'</code></p>\n\n<p>Now, we need a helper function to actually implement <code>noOverlap</code></p>\n\n<pre><code>basedOn :: forall k a. (k :=&gt; Show' a, k) =&gt; \n             (forall b. (b :=&gt; Show' a) =&gt; Proxy a -&gt; Dict b)\nbasedOn _ = unsafeCoerce (Dict :: Dict k)\n</code></pre>\n\n<p>What this function does is that, if you call it in a context where you have an instance <code>k :=&gt; Show' a</code>, it will return a function that will return <code>Dict b</code> for <strong>any</strong> instance <code>b :=&gt; Show' a</code>. We have to use <code>unsafeCoerce</code> to convince GHC that <code>Dict k</code> and <code>Dict b</code> are the same, but as far as I can see, this is a safe use of unsafeCoerce, since the functional dependency <code>a :=&gt; b | b -&gt; a</code> makes sure that there can be only one instance of <code>k :=&gt; Show' a</code> for a given <code>Show' a</code>.</p>\n\n<p>Now, given this helper, here's how you define instances</p>\n\n<pre><code>-- An example non-pair instance\ninstance () :=&gt; Show' Int where ins = Sub Dict \ninstance        Show' Int where\n  show' i = \"\"\n  noOverlap = basedOn\n\ninstance (Show' a, Show' b) :=&gt; Show' (a,b) where ins = Sub Dict\ninstance (Show' a, Show' b)  =&gt; Show' (a,b) where\n  show' (a,b) = \"\"\n  noOverlap = basedOn -- GHC does all the plumbing here\n</code></pre>\n\n<p>We have to define the <code>:=&gt;</code> instances manually, since GHC doesn't do it automatically, but there's no room for error there. If we give a too weak constraint on the left of a manually defined <code>:=&gt;</code>, <code>ins = Sub Dict</code> will fail to compile and if we give a too strong constraint, then <code>noOverlap = basedOn</code> will fail to compile, so that boilerplate is forced by the compiler.</p>\n\n<p>We can then use <code>noOverlap</code> as follows:</p>\n\n<pre><code>showFirstIfPair :: Show' a =&gt; PairOrNot a -&gt; String\nshowFirstIfPair (Not a) = show' a\nshowFirstIfPair (Pair a@(b,c)) = \n  -- In this context we have (Show' b, Show' c) :=&gt; Show' a\n  case noOverlap Proxy of -- This is a Proxy a\n    Dict -&gt; show' b -- This is a Dict (Show' b, Show' c)\n</code></pre>\n\n<p>The nice thing is that, now we can also go from, say, <code>Show' [a]</code> to <code>Show' a</code>, or any other instance declaration.</p>\n\n<p>Note: You'll need <code>{-# LANGUAGE FlexibleContexts, TypeOperators, RankNTypes, ConstraintKinds, AllowAmbiguousTypes #-}</code> to compile these.</p>\n"}, {"comments": [{"owner": {"reputation": 4418, "user_id": 1103705, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/fa36ad5f4b3bda5f6975bd21773f032c?s=128&d=identicon&r=PG", "display_name": "enobayram", "link": "https://stackoverflow.com/users/1103705/enobayram"}, "edited": false, "score": 0, "creation_date": 1474633423, "post_id": 39660574, "comment_id": 66623010, "body": "That&#39;s better, but it&#39;s still coupling a concrete type <code>PairOrNot cl a</code> with the set <code>cl</code> of constraints passed to it. In my case, I do need <code>PairOrNot a</code> to be parametric for <code>a</code> without any constrains. I just need <code>(Show b, Show c)</code> from <code>Show (b,c)</code> in those contexts where I know <code>Show a</code>."}, {"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "reply_to_user": {"reputation": 4418, "user_id": 1103705, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/fa36ad5f4b3bda5f6975bd21773f032c?s=128&d=identicon&r=PG", "display_name": "enobayram", "link": "https://stackoverflow.com/users/1103705/enobayram"}, "edited": false, "score": 0, "creation_date": 1474664210, "post_id": 39660574, "comment_id": 66640394, "body": "@enobayram, if you only care about <code>Show</code>, then you can show the pair and then try to extract the relevant portion of the string. It&#39;s horrible, of course."}], "tags": [], "owner": {"reputation": 100892, "user_id": 745903, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/50933f6638836741e620669b3940410e?s=128&d=identicon&r=PG", "display_name": "leftaroundabout", "link": "https://stackoverflow.com/users/745903/leftaroundabout"}, "is_accepted": false, "score": 1, "last_activity_date": 1474633014, "last_edit_date": 1495541798, "creation_date": 1474633014, "answer_id": 39660574, "question_id": 39639892, "link": "https://stackoverflow.com/questions/39639892/obtaining-show-a-from-the-context-show-a-b/39660574#39660574", "title": "Obtaining `Show a` from the context `Show (a,b)`", "body": "<p>Here's a generalisation of <a href=\"https://stackoverflow.com/a/39640735/745903\">user2297560</a> that's doesn't require hard-coding <code>Show</code> in the GADT:</p>\n\n<pre><code>{-# LANGUAGE ConstraintKinds, KindSignatures #-}\nimport GHC.Exts (Constraint)\n\ndata PairOrNot (cl :: * -&gt; Constraint) (a :: *) where\n  Pair :: (cl b, cl c) =&gt; (b,c) -&gt; PairOrNot (b,c)\n  Not :: cl a =&gt; a -&gt; PairOrNot a\n</code></pre>\n\n<p>Then you can</p>\n\n<pre><code>showFirstIfPair :: PairOrNot Show a -&gt; String\nshowFirstIfPair (Not a) = show a\nshowFirstIfPair (Pair (b,c)) = show b\n</code></pre>\n"}], "owner": {"reputation": 4418, "user_id": 1103705, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/fa36ad5f4b3bda5f6975bd21773f032c?s=128&d=identicon&r=PG", "display_name": "enobayram", "link": "https://stackoverflow.com/users/1103705/enobayram"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 153, "favorite_count": 0, "answer_count": 3, "score": 8, "last_activity_date": 1474633014, "creation_date": 1474549410, "question_id": 39639892, "link": "https://stackoverflow.com/questions/39639892/obtaining-show-a-from-the-context-show-a-b", "title": "Obtaining `Show a` from the context `Show (a,b)`", "body": "<p>As the title says, I'm interested in using <code>Show a</code> in a context where I have <code>Show (a,b)</code>. This problem easily arises with GADTs as follows:</p>\n\n<pre><code>data PairOrNot a where\n  Pair :: (b,c) -&gt; PairOrNot (b,c)\n  Not :: a -&gt; PairOrNot a\n\nshowFirstIfPair :: Show a =&gt; PairOrNot a -&gt; String\nshowFirstIfPair (Not a) = show a\nshowFirstIfPair (Pair (b,c)) = show b\n</code></pre>\n\n<p>The error is:</p>\n\n<pre><code>Could not deduce (Show b) arising from a use of \u2018show\u2019\nfrom the context (Show a)\n  bound by the type signature for\n             showFirstIfPair :: Show a =&gt; PairOrNot a -&gt; String\n  at app/Main.hs:24:20-50\nor from (a ~ (b, c))\n  bound by a pattern with constructor\n             Pair :: forall b c. (b, c) -&gt; PairOrNot (b, c),\n           in an equation for \u2018showFirstIfPair\u2019\n  at app/Main.hs:26:18-27\nPossible fix:\n  add (Show b) to the context of the data constructor \u2018Pair\u2019\nIn the expression: show b\nIn an equation for \u2018showFirstIfPair\u2019:\n    showFirstIfPair (Pair (b, c)) = show b\n</code></pre>\n\n<p>I'd think the instance declaration <code>instance (Show a, Show b) =&gt; Show (a,b)</code> proves <code>Show element</code>, but I can also imagine that the problem also has something to do with how the typeclass machinery is implemented at runtime.</p>\n\n<p>I've discovered that if we can modify the class definition it's possible to solve this via: </p>\n\n<pre><code>class Show' a where\n  show' :: a -&gt; String\n  unpair :: a -&gt; Dict (a ~ (b,c)) -&gt; Dict (Show' b, Show' c)\n\n-- An example non-pair instance\ninstance Show' Int where\n  show' i = \"\"\n  unpair = undefined -- This is OK, since no one can construct Dict (Int ~ (b,c))\n\ninstance (Show' a, Show' b) =&gt; Show' (a,b) where\n  show' (a,b) = \"\"\n  unpair _ Dict = Dict -- In this context we have access to Show' for elems\n</code></pre>\n\n<p>Then at the use site, we fetch the dictionary explicitly:</p>\n\n<pre><code>showFirstIfPair :: Show' a =&gt; PairOrNot a -&gt; String\nshowFirstIfPair (Not a) = show' a\nshowFirstIfPair (Pair a@(b,c)) = \n  case unpair a Dict of -- This is a Dict (a~(b,c))\n    Dict -&gt; show' b -- This is Dict (Show' b,Show' c)\n</code></pre>\n\n<p>I was wondering if there is a non-intrusive (or just different) way of obtaining <code>Show element</code>. If not, could you explain why exactly this problem is arising?</p>\n"}, {"tags": ["python", "haskell", "functional-programming", "decorator"], "comments": [{"owner": {"reputation": 868, "user_id": 1767808, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/KfCkc.jpg?s=128&g=1", "display_name": "Christoph W.", "link": "https://stackoverflow.com/users/1767808/christoph-w"}, "edited": false, "score": 2, "creation_date": 1474549372, "post_id": 39639554, "comment_id": 66583325, "body": "What exactly should your logging do? In imperative languages logging is used for tracking the sequential execution and/or to store computation results based on some input. In imperative languages these two purposes are quite the same, but in Haskell not."}, {"owner": {"reputation": 13807, "user_id": 2407038, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/538f6f4a9aa43841841de7d8e8b169fc?s=128&d=identicon&r=PG&f=1", "display_name": "user2407038", "link": "https://stackoverflow.com/users/2407038/user2407038"}, "edited": false, "score": 1, "creation_date": 1474551664, "post_id": 39639554, "comment_id": 66584909, "body": "<code>\\f x -&gt; print x &gt;&gt; f x &gt;&gt;= \\r -&gt; print r &gt;&gt; return r</code>"}, {"owner": {"reputation": 428, "user_id": 1520657, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/599f6ac58a187b4e89ad8cb576304166?s=128&d=identicon&r=PG", "display_name": "MichaelO", "link": "https://stackoverflow.com/users/1520657/michaelo"}, "reply_to_user": {"reputation": 13807, "user_id": 2407038, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/538f6f4a9aa43841841de7d8e8b169fc?s=128&d=identicon&r=PG&f=1", "display_name": "user2407038", "link": "https://stackoverflow.com/users/2407038/user2407038"}, "edited": false, "score": 4, "creation_date": 1474553112, "post_id": 39639554, "comment_id": 66586000, "body": "Pure code? Monadic code? IO monad only? Lazy/strict semantics? There are a lot of options to think about. The code from @user2407038 is valid, but only works in the IO monad. A solution working in pure code with more lazy semantics would be something along Debug.Trace or [<a href=\"http://hackage.haskell.org/package/TraceUtils-0.1.0.2/docs/Debug-TraceUtils.html][TraceUtils]\" rel=\"nofollow noreferrer\">hackage.haskell.org/package/TraceUtils-0.1.0.2/docs/&hellip;</a>. Still, these are for debugging and tracing only, as these functions are not referentially transparent, so the output may be at very unexpected places."}, {"owner": {"reputation": 1393, "user_id": 2535843, "user_type": "registered", "accept_rate": 76, "profile_image": "https://i.stack.imgur.com/ijgr5.png?s=128&g=1", "display_name": "Mahdi", "link": "https://stackoverflow.com/users/2535843/mahdi"}, "reply_to_user": {"reputation": 13807, "user_id": 2407038, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/538f6f4a9aa43841841de7d8e8b169fc?s=128&d=identicon&r=PG&f=1", "display_name": "user2407038", "link": "https://stackoverflow.com/users/2407038/user2407038"}, "edited": false, "score": 0, "creation_date": 1474555579, "post_id": 39639554, "comment_id": 66587775, "body": "@user2407038 does this code work even if f has multiple inputs? What does x represent?"}, {"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 1, "creation_date": 1474557456, "post_id": 39639554, "comment_id": 66589113, "body": "This is far more complex in Haskell. E.g. <code>f n = [n..]</code>, what do you want to log here, precisely? For debugging reasons, I&#39;d temporarily use <code>Debug.Trace</code>. For more serious stuff, you need to work in some logging monad, so that you don&#39;t break purity."}, {"owner": {"reputation": 13807, "user_id": 2407038, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/538f6f4a9aa43841841de7d8e8b169fc?s=128&d=identicon&r=PG&f=1", "display_name": "user2407038", "link": "https://stackoverflow.com/users/2407038/user2407038"}, "reply_to_user": {"reputation": 428, "user_id": 1520657, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/599f6ac58a187b4e89ad8cb576304166?s=128&d=identicon&r=PG", "display_name": "MichaelO", "link": "https://stackoverflow.com/users/1520657/michaelo"}, "edited": false, "score": 1, "creation_date": 1474568049, "post_id": 39639554, "comment_id": 66595527, "body": "@mahdix If you want such a function to be poly-variadic, that is a different story. In general, such things are more trouble than they are worth. If you really must, just define <code>log1, log2, log3</code> etc for different arities. <code>x</code> is a parameter bound by a lambda in <code>\\f x -&gt; ...</code> - I suppose I should have called it <code>input</code>. @MichaelO Naturally, the pseudo-code is imperative so the corresponding real Haskell code will have to be inside IO (for there to be any hope of saying what &quot;this&quot; even is in Haskell)"}, {"owner": {"reputation": 1393, "user_id": 2535843, "user_type": "registered", "accept_rate": 76, "profile_image": "https://i.stack.imgur.com/ijgr5.png?s=128&g=1", "display_name": "Mahdi", "link": "https://stackoverflow.com/users/2535843/mahdi"}, "reply_to_user": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 0, "creation_date": 1474581117, "post_id": 39639554, "comment_id": 66602319, "body": "@chi I want to log all the inputs and outputs of function &#39;X&#39; when it is called."}, {"owner": {"reputation": 5428, "user_id": 482382, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/9fe6eecd0900f0e779711f091fec8b3b?s=128&d=identicon&r=PG", "display_name": "Steven Shaw", "link": "https://stackoverflow.com/users/482382/steven-shaw"}, "edited": false, "score": 1, "creation_date": 1474611832, "post_id": 39639554, "comment_id": 66610360, "body": "Please post an example of Python decorators for logging."}], "owner": {"reputation": 1393, "user_id": 2535843, "user_type": "registered", "accept_rate": 76, "profile_image": "https://i.stack.imgur.com/ijgr5.png?s=128&g=1", "display_name": "Mahdi", "link": "https://stackoverflow.com/users/2535843/mahdi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 147, "favorite_count": 0, "answer_count": 0, "score": 0, "last_activity_date": 1474615004, "creation_date": 1474548575, "last_edit_date": 1474615004, "question_id": 39639554, "link": "https://stackoverflow.com/questions/39639554/haskell-how-can-we-define-a-general-purpose-logging-wrapper-function", "title": "Haskell: How can we define a general purpose logging wrapper function?", "body": "<p>Suppose that we want to have a function <code>log</code> which accepts any function, wraps around the function and does logging for input/output of the function. Something like this pseudo-code:</p>\n\n<pre><code>func log(func f, input) {\n  var output = f(input);\n  log_data(input);\n  log_data(output);\n}\n</code></pre>\n\n<p>How is this possible in Haskell? How can we define a general function pointer with a general list of inputs in a function call? This could be something similar to Python decorators for loggin.</p>\n\n<p><strong>To be more specific</strong>, I want a general mechanism to add logging for input/output of all functions in my application. Of course this is possible by adding two lines of code for each function to log input and output but I want a general-purpose solution which works for all functions with any input.</p>\n\n<p>A sample logging decorator in Python:</p>\n\n<pre><code>def logged(f):\n    @wraps(f)\n    def wrapped(*args, **kwargs):\n        print \"Logging...\"\n        r = f(*args, **kwargs)\n        print \"Call finished\"\n        return r\n    return wrapped\n\n@logged\ndef myfunc(myarg):\n    print \"my function\", myarg\n    return \"return value\"\n</code></pre>\n"}, {"tags": ["haskell", "monad-transformers", "lifting"], "answers": [{"comments": [{"owner": {"reputation": 371, "user_id": 5738619, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/489ffbc19dae2212663f027806a6a95f?s=128&d=identicon&r=PG&f=1", "display_name": "Zubair", "link": "https://stackoverflow.com/users/5738619/zubair"}, "edited": false, "score": 0, "creation_date": 1474551085, "post_id": 39639017, "comment_id": 66584538, "body": "So if we had something like <code>MaybeT (State Int) String</code> and then we used get on this, what happens, I think I am having trouble understanding how the actual lifting is working. What is being passed to the lift function?"}, {"owner": {"reputation": 36513, "user_id": 752976, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/j7Uis.jpg?s=128&g=1", "display_name": "Bartek Banachewicz", "link": "https://stackoverflow.com/users/752976/bartek-banachewicz"}, "reply_to_user": {"reputation": 371, "user_id": 5738619, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/489ffbc19dae2212663f027806a6a95f?s=128&d=identicon&r=PG&f=1", "display_name": "Zubair", "link": "https://stackoverflow.com/users/5738619/zubair"}, "edited": false, "score": 0, "creation_date": 1474628352, "post_id": 39639017, "comment_id": 66619965, "body": "@Zubair <code>lift</code> takes an action directed to the inner monad and returns it wrapped in the outer monad. IOW, in this particular case, <code>lift :: State Int String -&gt; MaybeT (State Int) String</code>."}], "tags": [], "owner": {"reputation": 36513, "user_id": 752976, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/j7Uis.jpg?s=128&g=1", "display_name": "Bartek Banachewicz", "link": "https://stackoverflow.com/users/752976/bartek-banachewicz"}, "is_accepted": false, "score": 1, "last_activity_date": 1474547448, "last_edit_date": 1474547448, "creation_date": 1474547111, "answer_id": 39639017, "question_id": 39638546, "link": "https://stackoverflow.com/questions/39638546/monad-transformers-lift/39639017#39639017", "title": "Monad Transformers lift", "body": "<blockquote>\n  <p>but you can use functions like get,put,tell etc without actually doing any lifting</p>\n</blockquote>\n\n<p>This is because those functions are actually defined on e.g. the <code>MonadState</code> typeclass, not <code>State</code> type. </p>\n\n<pre><code>class Monad m =&gt; MonadState s m | m -&gt; s where\n    get :: m s\n    put :: s -&gt; m ()\n</code></pre>\n\n<p>Then, both <code>State</code> and <code>StateT</code> are made an instance of that class, which makes using those possible<sup>1</sup></p>\n\n<p>In your example instance, if we know that the inner monad of <code>MaybeT m</code> is (fulfills) <code>MonadState s</code>, we can treat the whole outer monad as <code>MonadState s</code> provided we lift the operations directed to the inner monad so that they fit the outer one, which done with <code>lift</code>.</p>\n\n<p>In plain english, that would sound something like \"<em>If the MaybeT transformer transforms (wraps) over some monad <code>m</code> that is a stateful (<code>MonadState</code>) monad for type <code>s</code>, the resulting type also is a stateful monad for that type</em>\".</p>\n\n<hr>\n\n<p><sup>1</sup>This is actually just one instance, because <code>State s a</code> is actually implemented as <code>StateT s Identity a</code>. <a href=\"https://hackage.haskell.org/package/mtl-2.2.1/docs/src/Control-Monad-State-Class.html#MonadState\" rel=\"nofollow\">Refer to the sources</a> for the implementation details.</p>\n"}], "owner": {"reputation": 371, "user_id": 5738619, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/489ffbc19dae2212663f027806a6a95f?s=128&d=identicon&r=PG&f=1", "display_name": "Zubair", "link": "https://stackoverflow.com/users/5738619/zubair"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 333, "favorite_count": 2, "answer_count": 1, "score": 4, "last_activity_date": 1474547448, "creation_date": 1474545802, "last_edit_date": 1474546624, "question_id": 39638546, "link": "https://stackoverflow.com/questions/39638546/monad-transformers-lift", "title": "Monad Transformers lift", "body": "<p>I was just looking into monad transformers in real world Haskell.\nThe book said that to make something a monad transformer, you need to make it an instance of the MonadTrans type class.</p>\n\n<p>So the book defined a new Transformer, the <code>MaybeT m a</code> transformer.</p>\n\n<p>They defined the monadTrans type class for this new transformer:</p>\n\n<pre><code>instance MonadTrans MaybeT where\n  lift m = MaybeT (Just `liftM` m)\n</code></pre>\n\n<p>Then they made an instance of MonadState for this transformer:</p>\n\n<pre><code>instance (MonadState s m) =&gt; MonadState s (MaybeT m) where\n  get = lift get\n  put k = lift (put k)\n</code></pre>\n\n<p>From what I understand the lift function is taking the underlying monad and wrapping it in the right constructor. However, I do not get the implementation of get or put in the MonadState type class, I would like some help in understanding what the lift is actually doing here. I have also heard that in the mtl package because of how the type classes are defined, you can have a stack of monad transformers with WriterT, StateT etc but you can use functions like get,put,tell etc without actually doing any lifting. I was wondering how does this work, I strongly suspect its to do with these type classes but I am not sure?</p>\n"}, {"tags": ["c#", "scala", "haskell", "functional-programming"], "comments": [{"owner": {"reputation": 37219, "user_id": 1523776, "user_type": "moderator", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/b3e0b5c8e42a8c38009ef2d969f8dabb?s=128&d=identicon&r=PG", "display_name": "Benjamin Hodgson", "link": "https://stackoverflow.com/users/1523776/benjamin-hodgson"}, "edited": false, "score": 3, "creation_date": 1474542245, "post_id": 39637099, "comment_id": 66578391, "body": "Yes. <code>implicit</code> is how Scala does type classes. The main difference is that <code>implicit</code> works by looking for values in scope, whereas classes work with a global database of unique instances"}, {"owner": {"reputation": 1174, "user_id": 2936106, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/XS85r.jpg?s=128&g=1", "display_name": "barakcaf", "link": "https://stackoverflow.com/users/2936106/barakcaf"}, "reply_to_user": {"reputation": 37219, "user_id": 1523776, "user_type": "moderator", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/b3e0b5c8e42a8c38009ef2d969f8dabb?s=128&d=identicon&r=PG", "display_name": "Benjamin Hodgson", "link": "https://stackoverflow.com/users/1523776/benjamin-hodgson"}, "edited": false, "score": 0, "creation_date": 1474542371, "post_id": 39637099, "comment_id": 66578455, "body": "When you say classes you mean haskell&#39;s type classes? so in compilation haskell searches the global instances db to find a matching instance?)"}, {"owner": {"reputation": 37219, "user_id": 1523776, "user_type": "moderator", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/b3e0b5c8e42a8c38009ef2d969f8dabb?s=128&d=identicon&r=PG", "display_name": "Benjamin Hodgson", "link": "https://stackoverflow.com/users/1523776/benjamin-hodgson"}, "edited": false, "score": 0, "creation_date": 1474542536, "post_id": 39637099, "comment_id": 66578577, "body": "That&#39;s correct."}, {"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 2, "creation_date": 1474543193, "post_id": 39637099, "comment_id": 66579024, "body": "Implicits are very, very similar to type classes. Probably the only key difference is that you can, IIRC, pass the implicit argument is you so desire, when using typeclasses (at least in Haskell) you can not. I think in Scala you can have two, but then (of course) the compiler can not chose the implicit automatically for you, yet you can pass it explicitly (I think). In Agda implicits work in that way: if you have only one value in scope, that&#39;s it, otherwise you have to be explicit to disambiguate."}, {"owner": {"reputation": 2863, "user_id": 2297560, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/948d4a17494b3c616a0873453b74670c?s=128&d=identicon&r=PG", "display_name": "user2297560", "link": "https://stackoverflow.com/users/2297560/user2297560"}, "edited": false, "score": 3, "creation_date": 1474548746, "post_id": 39637099, "comment_id": 66582867, "body": "Implicits enable type classes, but (in my opinion) higher kinded types would be required to make them most useful."}, {"owner": {"reputation": 335867, "user_id": 2988, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ed181f8c80df53d2b67a4f4fff088ed4?s=128&d=identicon&r=PG", "display_name": "J&#246;rg W Mittag", "link": "https://stackoverflow.com/users/2988/j%c3%b6rg-w-mittag"}, "reply_to_user": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 3, "creation_date": 1474550345, "post_id": 39637099, "comment_id": 66583995, "body": "@chi: Scala does have a search priority for implicits, so you can have higher-priority implicits override lower-priority ones, but you cannot have more than one applicable implicit. That&#39;s an error. However, as you mentioned, you can simply pass an explicit argument for an implicit parameter, in which case implicit search isn&#39;t even attempted and thus there won&#39;t be an error."}], "answers": [{"tags": [], "owner": {"reputation": 335867, "user_id": 2988, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ed181f8c80df53d2b67a4f4fff088ed4?s=128&d=identicon&r=PG", "display_name": "J&#246;rg W Mittag", "link": "https://stackoverflow.com/users/2988/j%c3%b6rg-w-mittag"}, "is_accepted": true, "score": 2, "last_activity_date": 1474550094, "creation_date": 1474550094, "answer_id": 39640135, "question_id": 39637099, "link": "https://stackoverflow.com/questions/39637099/understanding-type-classes-scala-implicit-and-c/39640135#39640135", "title": "Understanding Type Classes, Scala implicit and C#", "body": "<p>Yes, this is exactly how type classes are implemented in Scala. It is a general design principle in Scala to add general and re-usable features to the language that can be used to implement higher-level constructs as library constructs, if at all possible. In this particular case, type classes can be implemented using objects and implicits, but both objects and implicits have uses beyond merely implementing type classes, so it makes more sense to include those more general building blocks in the language and allow the users to build higher-level constructs (like type classes) on top.</p>\n\n<p>The canonical paper on implementing type classes as objects and implicits is the aptly named <a href=\"http://ropas.snu.ac.kr/~bruno/papers/TypeClasses.pdf\" rel=\"nofollow\"><em>Type Classes as Objects and Implicits</em> by Bruno C. d. S. Oliveira, Adriaan Moors, and Martin Odersky</a>. There's a nice <a href=\"http://lambda-the-ultimate.org/node/4039\" rel=\"nofollow\">discussion of this paper on Lambda-the-Ultimate</a>.</p>\n\n<p>Note that just adding implicits to the language would probably not be enough. You could implement type classes that way, but a lot of \"interesting\" type classes (such as <code>Monad</code>) cannot be expresses in C\u266f: <code>Monad</code> is higher-kinded, but C\u266f's type system is not.</p>\n"}], "owner": {"reputation": 1174, "user_id": 2936106, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/XS85r.jpg?s=128&g=1", "display_name": "barakcaf", "link": "https://stackoverflow.com/users/2936106/barakcaf"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 152, "favorite_count": 0, "accepted_answer_id": 39640135, "answer_count": 1, "score": 0, "last_activity_date": 1475132858, "creation_date": 1474541711, "last_edit_date": 1475132858, "question_id": 39637099, "link": "https://stackoverflow.com/questions/39637099/understanding-type-classes-scala-implicit-and-c", "title": "Understanding Type Classes, Scala implicit and C#", "body": "<p>I read this blog post by <a href=\"http://joeduffyblog.com/2010/02/28/on-haskell-type-classes-and-c-interfaces/\" rel=\"nofollow\">Joe Duffy</a> about Haskell type classes and C# interfaces.</p>\n\n<p>I'm trying to understand what could have enabled c# to have type classes,\nand I wonder whether a feature like scala's <strong><em>implicits</em></strong> could solve it?</p>\n\n<p>having this kind of feature would enable writing something like this:</p>\n\n<pre><code>public interface IReducableOf&lt;T&gt;\n{\n   T Append(T a, T b);\n   T Empty();\n}\n\npublic T Reduce(this IEnumerable&lt;T&gt; vals, **implicit** IReducerOf&lt;T&gt; reducer )\n{\n  Enumerable.Aggregate(vals, reducer.Append);\n}\n</code></pre>\n\n<p>making sure that we have in our context an implementation of <code>IReducerOf&lt;T&gt;</code>\nthan the compiler could \"just\" pick the reducer and use it to execute the code.</p>\n\n<p>of course, this code cannot compile.</p>\n\n<p>But my questions are:</p>\n\n<ol>\n<li><p>Can this enable implementing type classes?</p></li>\n<li><p>Is this similar to what is happening in scala?</p></li>\n</ol>\n\n<p>I'm asking this for general understanding and not for a particular problem.</p>\n\n<p><strong>UPDATE</strong></p>\n\n<p>I've encountered this <a href=\"https://github.com/CaptainHayashi/roslyn/blob/master/concepts/docs/concepts.md\" rel=\"nofollow\">GitHub repo</a> on possible implementation of type classes in c#</p>\n"}, {"tags": ["haskell", "types", "algebraic-data-types", "recursive-datastructures"], "comments": [{"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 1, "creation_date": 1474542906, "post_id": 39636588, "comment_id": 66578818, "body": "It is very similar to the list type (which is recursive as well), except it recurses twice (two branches of a node in a tree) instead of once (in a list, a cell has only one tail)."}, {"owner": {"reputation": 384463, "user_id": 1126841, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fa05233b2357f8d11c22ef4cfc7bb85c?s=128&d=identicon&r=PG", "display_name": "chepner", "link": "https://stackoverflow.com/users/1126841/chepner"}, "edited": false, "score": 0, "creation_date": 1474544522, "post_id": 39636588, "comment_id": 66579870, "body": "Technically, <code>TreeNode</code> <i>takes</i> two <code>BinarySearchTree</code> value (and an <code>a</code> value) and <i>returns</i> a new <code>BinarySearchTree</code> value. The <i>type</i> is defined recursively."}, {"owner": {"reputation": 45534, "user_id": 106104, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/c88b9310b92a937108ec4336c2832f92?s=128&d=identicon&r=PG", "display_name": "user253751", "link": "https://stackoverflow.com/users/106104/user253751"}, "edited": false, "score": 0, "creation_date": 1474855776, "post_id": 39636588, "comment_id": 66686663, "body": "TreeNode does not <i>create</i> anything."}], "answers": [{"tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 5, "last_activity_date": 1474540973, "last_edit_date": 1474540973, "creation_date": 1474540648, "answer_id": 39636766, "question_id": 39636588, "link": "https://stackoverflow.com/questions/39636588/haskell-algebraic-data-types-that-use-recursion/39636766#39636766", "title": "Haskell - Algebraic data types that use recursion?", "body": "<p>Yes, this is a recursive data type.</p>\n\n<p>I recommend a relevant chapter in <a href=\"http://learnyouahaskell.com/making-our-own-types-and-typeclasses#recursive-data-structures\" rel=\"nofollow\">Learn You A Haskell For Great Good</a> - it is very beginner-friendly. It describes your exact case, too:</p>\n\n<blockquote>\n  <p>Here's what we're going to say: a tree is either an empty tree or it's\n  an element that contains some value and two trees. Sounds like a\n  perfect fit for an algebraic data type!</p>\n</blockquote>\n"}], "owner": {"reputation": 2691, "user_id": 5477287, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/yKMgF.jpg?s=128&g=1", "display_name": "Babra Cunningham", "link": "https://stackoverflow.com/users/5477287/babra-cunningham"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 254, "favorite_count": 0, "accepted_answer_id": 39636766, "answer_count": 1, "score": 0, "last_activity_date": 1474543774, "creation_date": 1474540087, "last_edit_date": 1474543774, "question_id": 39636588, "link": "https://stackoverflow.com/questions/39636588/haskell-algebraic-data-types-that-use-recursion", "title": "Haskell - Algebraic data types that use recursion?", "body": "<p>I've followed a guide to creating a binary search tree which uses the following datatype:</p>\n\n<pre><code>data BinarySearchTree a = EmptyTree | TreeNode a (BinarySearchTree a) (BinarySearchTree a) deriving (Show, Read, Eq)\n</code></pre>\n\n<p>Am I correct in saying 'TreeNode' is using recursion, i.e. creates 2 elements of its own data type '(BinarySearchTree a) (BinarySearchTree a)'?</p>\n\n<p>I've never seen a datatype like this, any brief explanation would be great! </p>\n"}, {"tags": ["haskell", "foldable", "classy-prelude"], "comments": [{"owner": {"reputation": 13734, "user_id": 938694, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/b6678a430a805dd78366d6e135b49f2d?s=128&d=identicon&r=PG", "display_name": "Cubic", "link": "https://stackoverflow.com/users/938694/cubic"}, "edited": false, "score": 0, "creation_date": 1474536697, "post_id": 39634504, "comment_id": 66574756, "body": "It requires <code>TypeFamilies</code> while <code>Foldable</code> doesn&#39;t for one?"}, {"owner": {"reputation": 37219, "user_id": 1523776, "user_type": "moderator", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/b3e0b5c8e42a8c38009ef2d969f8dabb?s=128&d=identicon&r=PG", "display_name": "Benjamin Hodgson", "link": "https://stackoverflow.com/users/1523776/benjamin-hodgson"}, "edited": false, "score": 4, "creation_date": 1474536975, "post_id": 39634504, "comment_id": 66574943, "body": "Not directly an answer, but <code>MonoFoldable</code>&#39;s cousin <a href=\"https://hackage.haskell.org/package/mono-traversable-1.0.0.1/docs/Data-MonoTraversable.html#t:MonoFunctor\" rel=\"nofollow noreferrer\"><code>MonoFunctor</code></a> is inferior to <code>Functor</code> in that you can&#39;t change the type of the things inside it. Same goes for <code>MonoTraversable</code>"}, {"owner": {"reputation": 30377, "user_id": 369198, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/71596bb1ca3ba3aa4400c3f407baec9f?s=128&d=identicon&r=PG", "display_name": "Michael Snoyman", "link": "https://stackoverflow.com/users/369198/michael-snoyman"}, "reply_to_user": {"reputation": 37219, "user_id": 1523776, "user_type": "moderator", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/b3e0b5c8e42a8c38009ef2d969f8dabb?s=128&d=identicon&r=PG", "display_name": "Benjamin Hodgson", "link": "https://stackoverflow.com/users/1523776/benjamin-hodgson"}, "edited": false, "score": 5, "creation_date": 1474541776, "post_id": 39634504, "comment_id": 66578096, "body": "I believe <code>MonoFoldable</code> fully generalizes <code>Foldable</code>, with the caveats around error messages and type extensions you mentioned. As @BenjaminHodgson mentions, the other classes in the hierarchy don&#39;t fulfill this. I&#39;d be interested if someone has a counter-example to this, as I have no proof that this belief is correct."}, {"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "reply_to_user": {"reputation": 30377, "user_id": 369198, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/71596bb1ca3ba3aa4400c3f407baec9f?s=128&d=identicon&r=PG", "display_name": "Michael Snoyman", "link": "https://stackoverflow.com/users/369198/michael-snoyman"}, "edited": false, "score": 0, "creation_date": 1475264220, "post_id": 39634504, "comment_id": 66890567, "body": "@MichaelSnoyman, see my answer regarding polymorphic recursion."}], "answers": [{"tags": [], "owner": {"reputation": 2019, "user_id": 5800895, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0cab3b0361b7e54267c70c02754f21de?s=128&d=identicon&r=PG&f=1", "display_name": "Derek Elkins left SE", "link": "https://stackoverflow.com/users/5800895/derek-elkins-left-se"}, "is_accepted": false, "score": 3, "last_activity_date": 1475178522, "creation_date": 1475178522, "answer_id": 39778802, "question_id": 39634504, "link": "https://stackoverflow.com/questions/39634504/is-there-anything-we-lose-with-monofoldable/39778802#39778802", "title": "Is there anything we lose with MonoFoldable?", "body": "<p>You lose parametricity.</p>\n\n<p>A type <code>(Foldable f) =&gt; f a -&gt; [a]</code> provides significantly different guarantees than <code>(MonoFoldable c) =&gt; c -&gt; [Element c]</code>.</p>\n\n<p>You can play with a free theorem generator to get some ideas of the properties, but as a simple example the former type provides the property that any element in the output <em>must</em> occur in the input.  This property is in no way guaranteed by the latter type.</p>\n"}, {"tags": [], "owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "is_accepted": false, "score": 2, "last_activity_date": 1475275696, "last_edit_date": 1475275696, "creation_date": 1475182301, "answer_id": 39779800, "question_id": 39634504, "link": "https://stackoverflow.com/questions/39634504/is-there-anything-we-lose-with-monofoldable/39779800#39779800", "title": "Is there anything we lose with MonoFoldable?", "body": "<p>The biggest thing you lose is polymorphic recursion. Consider Okasaki's catenable lists:</p>\n\n<pre><code>data Cat q a = Empty | Cat a (q (Cat q a))\n</code></pre>\n\n<p>We can write</p>\n\n<pre><code>instance Foldable q =&gt; Foldable (Cat q) where\n   foldMap _ Empty = mempty\n   foldMap f (Cat a q) = f a &lt;&gt; foldMap (foldMap f) q\n</code></pre>\n\n<p>But if we try to use just <code>MonoFoldable</code>, we're stuck. The necessary instance constraint on <code>q</code>, <code>forall x . (MonoFoldable (q x), Element (q x) ~ x)</code>, can't be expressed in any usual fashion. It's probably possible to work around that with <code>Data.Constraint.Forall</code>, but it gets pretty ugly.</p>\n\n<hr>\n\n<p>A smaller problem is that code may get more complex type signatures. For example,</p>\n\n<pre><code>osum :: (MonoFoldable c, Num (Element c)) =&gt; c -&gt; Element c\n</code></pre>\n\n<p>strikes me as inferior to</p>\n\n<pre><code>sum :: (Foldable f, Num n) =&gt; f n -&gt; n\n</code></pre>\n\n<p>The fix is easy: change the definition of <code>MonoFoldable</code> to</p>\n\n<pre><code>class (a ~ Element c) =&gt; MonoFoldable' a c where ...\n</code></pre>\n\n<p>which would give you</p>\n\n<pre><code>osum' :: (MonoFoldable' n c, Num n) =&gt; c -&gt; n\n</code></pre>\n\n<p>Alternatively, scrap <code>Element</code> altogether, and use</p>\n\n<pre><code>class MonoFoldable'' a c | c -&gt; a\n</code></pre>\n\n<p>which gives a similarly simplified signature.</p>\n\n<p>Unfortunately, Michael Snoyman disagrees with me on this point. I may write my own wrapper package some time to expose my preferred API.</p>\n"}], "owner": {"reputation": 20310, "user_id": 525980, "user_type": "registered", "accept_rate": 48, "profile_image": "https://www.gravatar.com/avatar/8dafe66793ee2f32192e9fcefb389a12?s=128&d=identicon&r=PG", "display_name": "Clinton", "link": "https://stackoverflow.com/users/525980/clinton"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 257, "favorite_count": 3, "answer_count": 2, "score": 6, "last_activity_date": 1555463032, "creation_date": 1474534583, "last_edit_date": 1555463032, "question_id": 39634504, "link": "https://stackoverflow.com/questions/39634504/is-there-anything-we-lose-with-monofoldable", "title": "Is there anything we lose with MonoFoldable?", "body": "<p><a href=\"https://hackage.haskell.org/package/mono-traversable-1.0.0.1/docs/Data-MonoTraversable.html#t:MonoFoldable\" rel=\"noreferrer\">MonoFoldable</a> in the <a href=\"https://hackage.haskell.org/package/mono-traversable-1.0.0.1\" rel=\"noreferrer\">mono-traversable</a> package seems to be able to implement all of the usual Foldable containers and more, for example, things like <code>Bytestring</code> and homogeneous tuples can be made <code>MonoFoldable</code> but not <code>Foldable</code>. My question is, do we lose anything from <code>MonoFoldable</code> that we don't have in <code>Foldable</code>, aside from requiring some advanced GHC features, making it slightly more tricky for instance writers and perhaps getting uglier error messages?</p>\n\n<p>For example, is there some code which when using <code>Foldable</code> compiles but with <code>MonoFoldable</code> types are not inferred for example? Or anything else that makes client (not instance writer code) significantly simpler with <code>Foldable</code> than <code>MonoFoldable</code>? </p>\n"}, {"tags": ["haskell", "instance", "category-theory"], "comments": [{"owner": {"reputation": 37219, "user_id": 1523776, "user_type": "moderator", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/b3e0b5c8e42a8c38009ef2d969f8dabb?s=128&d=identicon&r=PG", "display_name": "Benjamin Hodgson", "link": "https://stackoverflow.com/users/1523776/benjamin-hodgson"}, "edited": false, "score": 0, "creation_date": 1474537159, "post_id": 39632798, "comment_id": 66575069, "body": "&quot;I tried writing: <code>instance Category (MooreT a)</code>, but I didn&#39;t work&quot;. That&#39;s the correct way to do it. Please give the actual code you tried and the error message you encountered, and we can help you fix it"}, {"owner": {"reputation": 35, "user_id": 5762027, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2394851f4e8f258ac490a3dd16a230d1?s=128&d=identicon&r=PG&f=1", "display_name": "Reddog", "link": "https://stackoverflow.com/users/5762027/reddog"}, "reply_to_user": {"reputation": 37219, "user_id": 1523776, "user_type": "moderator", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/b3e0b5c8e42a8c38009ef2d969f8dabb?s=128&d=identicon&r=PG", "display_name": "Benjamin Hodgson", "link": "https://stackoverflow.com/users/1523776/benjamin-hodgson"}, "edited": false, "score": 0, "creation_date": 1474537810, "post_id": 39632798, "comment_id": 66575540, "body": "Here the error:     * The type synonym <code>MooreT&#39; should have 3 arguments, but has been given 1     * In the instance declaration for </code>Category (MooreT a)&#39;"}, {"owner": {"reputation": 13807, "user_id": 2407038, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/538f6f4a9aa43841841de7d8e8b169fc?s=128&d=identicon&r=PG&f=1", "display_name": "user2407038", "link": "https://stackoverflow.com/users/2407038/user2407038"}, "edited": false, "score": 0, "creation_date": 1474547573, "post_id": 39632798, "comment_id": 66581952, "body": "@Reddog The compiler told you exactly what the problem was (you should read the errors it gives you) - <code>MooreT</code> is a type synonym, which means it must be fully applied when used (i.e., it mus be applied to 3 arguments) and in <code>instance Category (MooreT a)</code> it is clearly applied to only one."}, {"owner": {"reputation": 35, "user_id": 5762027, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2394851f4e8f258ac490a3dd16a230d1?s=128&d=identicon&r=PG&f=1", "display_name": "Reddog", "link": "https://stackoverflow.com/users/5762027/reddog"}, "reply_to_user": {"reputation": 13807, "user_id": 2407038, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/538f6f4a9aa43841841de7d8e8b169fc?s=128&d=identicon&r=PG&f=1", "display_name": "user2407038", "link": "https://stackoverflow.com/users/2407038/user2407038"}, "edited": false, "score": 0, "creation_date": 1474551813, "post_id": 39632798, "comment_id": 66585002, "body": "@user2407038 Well, if it was fully applied, it would be missing the two free parameters it needs to be an instance of <code>Category</code>. I replied to Benjamin Hodgson, since he stated: &quot;That&#39;s the correct way to do it&quot;. I <b>do</b> read the GHCI errors."}, {"owner": {"reputation": 13807, "user_id": 2407038, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/538f6f4a9aa43841841de7d8e8b169fc?s=128&d=identicon&r=PG&f=1", "display_name": "user2407038", "link": "https://stackoverflow.com/users/2407038/user2407038"}, "edited": false, "score": 0, "creation_date": 1474552428, "post_id": 39632798, "comment_id": 66585443, "body": "@Reddog Precisely, which is why you cannot typically make type synonyms into instances of type classes - you must wrap the type in a <code>newtype</code> or <code>data</code>."}], "answers": [{"comments": [{"owner": {"reputation": 35, "user_id": 5762027, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2394851f4e8f258ac490a3dd16a230d1?s=128&d=identicon&r=PG&f=1", "display_name": "Reddog", "link": "https://stackoverflow.com/users/5762027/reddog"}, "edited": false, "score": 0, "creation_date": 1474541767, "post_id": 39634253, "comment_id": 66578093, "body": "Of course you are right! Couldn&#39;t see the forest for the trees :) Still wondering, however, why <code>instance Category (MooreT a) where ...</code> produces an error."}], "tags": [], "owner": {"reputation": 23444, "user_id": 414413, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/6de2113f01432aa844dc85070ff33e89?s=128&d=identicon&r=PG", "display_name": "Cirdec", "link": "https://stackoverflow.com/users/414413/cirdec"}, "is_accepted": true, "score": 2, "last_activity_date": 1474533861, "creation_date": 1474533861, "answer_id": 39634253, "question_id": 39632798, "link": "https://stackoverflow.com/questions/39632798/in-haskell-how-do-i-derive-instance-category-moore-a-b-moore-b-c/39634253#39634253", "title": "in Haskell, how do I derive: instance Category (Moore a b -&gt; Moore b c)", "body": "<p><code>MooreT a</code> is a <code>type</code> synonym for a subtype of <code>(-&gt;)</code>. <code>(-&gt;)</code> already has a <code>Category</code> instance, so <code>MooreT a</code> does too.</p>\n\n<p><code>ghci</code> can check to see if <code>MooreT</code>s already compose with <code>.</code>. Start with your definitions and the imports for <code>Category</code>, checking that we have the right <code>.</code> imported</p>\n\n<pre><code>Prelude&gt; data Moore a b = Moore b (a -&gt; Moore a b)\nPrelude&gt; type MooreT a b c = (Moore a b -&gt; Moore a c)\nPrelude&gt; :t (.)\n(.) :: (b -&gt; c) -&gt; (a -&gt; b) -&gt; a -&gt; c\nPrelude&gt; import Control.Category\nPrelude Control.Category&gt; import Prelude hiding ((.), id)\nControl.Category Prelude&gt; :t (.)\n(.) :: Category cat =&gt; cat b c -&gt; cat a b -&gt; cat a c\n</code></pre>\n\n<p>Make a couple dummy <code>MooreT</code> values, <code>f</code> and <code>g</code></p>\n\n<pre><code>Control.Category Prelude&gt; data A = A\nControl.Category Prelude&gt; data B = B\nControl.Category Prelude&gt; data C = C\nControl.Category Prelude&gt; data D = D\nControl.Category Prelude&gt; f = undefined :: MooreT A B C\nControl.Category Prelude&gt; :t f\nf :: MooreT A B C\nControl.Category Prelude&gt; g = undefined :: MooreT A C D\n</code></pre>\n\n<p>Check that composition works</p>\n\n<pre><code>Control.Category Prelude&gt; :t g . f\ng . f :: Moore A B -&gt; Moore A D\n</code></pre>\n"}], "owner": {"reputation": 35, "user_id": 5762027, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2394851f4e8f258ac490a3dd16a230d1?s=128&d=identicon&r=PG&f=1", "display_name": "Reddog", "link": "https://stackoverflow.com/users/5762027/reddog"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 110, "favorite_count": 0, "accepted_answer_id": 39634253, "answer_count": 1, "score": 1, "last_activity_date": 1531180280, "creation_date": 1474529221, "last_edit_date": 1531180280, "question_id": 39632798, "link": "https://stackoverflow.com/questions/39632798/in-haskell-how-do-i-derive-instance-category-moore-a-b-moore-b-c", "title": "in Haskell, how do I derive: instance Category (Moore a b -&gt; Moore b c)", "body": "<p>I am trying to derive a Category instance for Moore automaton transformers, where:</p>\n\n<pre><code>data Moore a b = Moore b (a -&gt; Moore a b)\ntype MooreT a b c = (Moore a b -&gt; Moore a c)\n</code></pre>\n\n<p>The problem is, that <code>MooreT</code> has 3 parameters, whereas <code>Category</code> has only 2. I tried writing: <code>instance Category (MooreT a)</code>, but I didn't work.</p>\n\n<p>The thing is, that the parameter <code>a</code> really doesn't matter for the definition of <code>id</code> and <code>(.)</code>. E.g:</p>\n\n<pre><code>id :: MooreT a b b\nid x = x\n</code></pre>\n\n<p>Is there a way to define such an instance? Or do I have to define <code>MooreT</code> for a specific type <code>a</code>, like <code>type IntMooreT a b = MooreT Int a b</code>?</p>\n\n<p>I am still new to Haskell, so I'm sorry, if this is a dumb question.</p>\n"}, {"tags": ["haskell", "constraints", "constraint-kinds"], "comments": [{"owner": {"reputation": 13734, "user_id": 938694, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/b6678a430a805dd78366d6e135b49f2d?s=128&d=identicon&r=PG", "display_name": "Cubic", "link": "https://stackoverflow.com/users/938694/cubic"}, "edited": false, "score": 1, "creation_date": 1474534962, "post_id": 39632680, "comment_id": 66573635, "body": "I assume you mean polymorphic in the constraints the function argument can have, because otherwise you could simply write <code>(Show a, Show b) =&gt; (forall x. Show x =&gt; x -&gt; String) -&gt; a -&gt; b -&gt; (String,String)</code>? That only requires <code>RankNTypes</code>."}, {"owner": {"reputation": 4418, "user_id": 1103705, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/fa36ad5f4b3bda5f6975bd21773f032c?s=128&d=identicon&r=PG", "display_name": "enobayram", "link": "https://stackoverflow.com/users/1103705/enobayram"}, "reply_to_user": {"reputation": 13734, "user_id": 938694, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/b6678a430a805dd78366d6e135b49f2d?s=128&d=identicon&r=PG", "display_name": "Cubic", "link": "https://stackoverflow.com/users/938694/cubic"}, "edited": false, "score": 0, "creation_date": 1474541512, "post_id": 39632680, "comment_id": 66577939, "body": "That&#39;s true, I want no mention of <code>Show</code>."}], "answers": [{"comments": [{"owner": {"reputation": 4418, "user_id": 1103705, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/fa36ad5f4b3bda5f6975bd21773f032c?s=128&d=identicon&r=PG", "display_name": "enobayram", "link": "https://stackoverflow.com/users/1103705/enobayram"}, "edited": false, "score": 0, "creation_date": 1474541769, "post_id": 39636239, "comment_id": 66578095, "body": "I see, thanks a lot; that also explains what GHC means by <code>To defer the ambiguity check to use sites, enable AllowAmbiguousTypes</code>, because I&#39;d normally expect that check to happen on the call site. Of course, thinking of it now, Haskell&#39;s type system always tries to catch the problems locally, unlike, say, C++ templates that defer almost everything to the instantiation."}, {"owner": {"reputation": 34864, "user_id": 237428, "user_type": "registered", "accept_rate": 78, "profile_image": "https://i.stack.imgur.com/ThNhZ.jpg?s=128&g=1", "display_name": "Antal Spector-Zabusky", "link": "https://stackoverflow.com/users/237428/antal-spector-zabusky"}, "edited": false, "score": 2, "creation_date": 1474569430, "post_id": 39636239, "comment_id": 66596320, "body": "With GHC8, using <code>-XAllowAmbiguousTypes</code> and <code>-XTypeApplications</code> offers another solution; the <code>Proxy</code> argument vanishes, and you then have <code>myFunc f a b = (f a, f b)</code> and <code>myFunc @Show show a b</code> at the call site."}], "tags": [], "owner": {"reputation": 23816, "user_id": 572606, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/c20a126ad0dce40e8fc4a43456107919?s=128&d=identicon&r=PG", "display_name": "shang", "link": "https://stackoverflow.com/users/572606/shang"}, "is_accepted": true, "score": 5, "last_activity_date": 1474539093, "creation_date": 1474539093, "answer_id": 39636239, "question_id": 39632680, "link": "https://stackoverflow.com/questions/39632680/receiving-as-argument-functions-with-constrained-existentials-in-haskell/39636239#39636239", "title": "Receiving as Argument Functions with Constrained Existentials in Haskell", "body": "<p>The problem is that just passing the function <code>(forall c . k c =&gt; c -&gt; d)</code> as an argument is not enough for the type-checker to unambiguously determine what <code>k</code> really is. Passing the constraint explicitly works and you don't even need the outer <code>forall</code> or explicit kinds:</p>\n\n<pre><code>import Data.Proxy\n\nmyFunc :: (k a, k b) =&gt; Proxy k -&gt; (forall c. k c =&gt; c -&gt; d) -&gt; a -&gt; b -&gt; (d, d)\nmyFunc _ f a b = (f a, f b)\n</code></pre>\n\n<p>and then</p>\n\n<pre><code>let (c, d) = myFunc (Proxy :: Proxy Show) show a b\n</code></pre>\n"}], "owner": {"reputation": 4418, "user_id": 1103705, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/fa36ad5f4b3bda5f6975bd21773f032c?s=128&d=identicon&r=PG", "display_name": "enobayram", "link": "https://stackoverflow.com/users/1103705/enobayram"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 154, "favorite_count": 0, "accepted_answer_id": 39636239, "answer_count": 1, "score": 5, "last_activity_date": 1474539093, "creation_date": 1474528833, "question_id": 39632680, "link": "https://stackoverflow.com/questions/39632680/receiving-as-argument-functions-with-constrained-existentials-in-haskell", "title": "Receiving as Argument Functions with Constrained Existentials in Haskell", "body": "<p>I've been playing with some GHC extensions to define a function that can do the following:</p>\n\n<pre><code>let a = A :: A  -- Show A\n    b = B :: B  -- Show B\n  in\n    myFunc show a b -- This should return (String, String)\n</code></pre>\n\n<p><code>myFunc</code> should be fully polymorphic in the signature of <code>show</code>, so that it can accept <code>a</code> and <code>b</code> with different types satisfying <code>Show</code>.</p>\n\n<p>Here's my attempt with the GHC extensions <code>RankNTypes</code>, <code>ConstraintKinds</code>, <code>KindSignatures</code>:</p>\n\n<pre><code>myFunc :: forall (k :: * -&gt; Constraint) a b d. (k a, k b) \n            =&gt; (forall c. k c =&gt; c -&gt; d) -&gt; a -&gt; b -&gt; (d, d)\n</code></pre>\n\n<p>My main purpose is to understand how these extensions work; but to my eyes, it seems like I'm telling GHC that there's a constraint <code>k</code> that some <code>a</code> and <code>b</code> satisfy, and there's also a function <code>(forall c. k c =&gt; c -&gt; d)</code> that can take any type <code>c</code> satisfying <code>k</code> and return a specific <code>d</code>, now, under these conditions, I want to apply the function to <code>a</code> and <code>b</code> to obtain a tuple <code>(d,d)</code></p>\n\n<p>Here's how GHC complains:</p>\n\n<pre><code>Could not deduce (k0 a, k0 b)\nfrom the context (k a, k b)\n  bound by the type signature for\n             myFunc :: (k a, k b) =&gt;\n                       (forall c. k c =&gt; c -&gt; d) -&gt; a -&gt; b -&gt; (d, d)\n  at app/Main.hs:(15,11)-(16,56)\nIn the ambiguity check for the type signature for \u2018myFunc\u2019:\n  myFunc :: forall (k :: * -&gt; Constraint) a b d.\n            (k a, k b) =&gt;\n            (forall c. k c =&gt; c -&gt; d) -&gt; a -&gt; b -&gt; (d, d)\nTo defer the ambiguity check to use sites, enable AllowAmbiguousTypes\nIn the type signature for \u2018myFunc\u2019:\n  myFunc :: forall (k :: * -&gt; Constraint) a b d. (k a, k b) =&gt;\n            (forall c. k c =&gt; c -&gt; d) -&gt; a -&gt; b -&gt; (d, d)\n\n...\n\nCould not deduce (k c)\nfrom the context (k a, k b)\n  bound by the type signature for\n             myFunc :: (k a, k b) =&gt;\n                       (forall c. k c =&gt; c -&gt; d) -&gt; a -&gt; b -&gt; (d, d)\n  at app/Main.hs:(15,11)-(16,56)\nor from (k0 c)\n  bound by the type signature for myFunc :: k0 c =&gt; c -&gt; d\n  at app/Main.hs:(15,11)-(16,56)\nIn the ambiguity check for the type signature for \u2018myFunc\u2019:\n  myFunc :: forall (k :: * -&gt; Constraint) a b d.\n            (k a, k b) =&gt;\n            (forall c. k c =&gt; c -&gt; d) -&gt; a -&gt; b -&gt; (d, d)\nTo defer the ambiguity check to use sites, enable AllowAmbiguousTypes\nIn the type signature for \u2018myFunc\u2019:\n  myFunc :: forall (k :: * -&gt; Constraint) a b d. (k a, k b) =&gt;\n            (forall c. k c =&gt; c -&gt; d) -&gt; a -&gt; b -&gt; (d, d)\napp/Main.hs15:40\n</code></pre>\n\n<p>What am I missing?</p>\n"}, {"tags": ["performance", "haskell", "io", "linked-list"], "answers": [{"comments": [{"owner": {"reputation": 398, "user_id": 1351182, "user_type": "registered", "accept_rate": 22, "profile_image": "https://www.gravatar.com/avatar/a19ea4f2204cb5ccc2745fcdf8cda84c?s=128&d=identicon&r=PG", "display_name": "Myridium", "link": "https://stackoverflow.com/users/1351182/myridium"}, "edited": false, "score": 0, "creation_date": 1474528865, "post_id": 39632171, "comment_id": 66569900, "body": "Right you are about the <code>data</code>. Hadn&#39;t thought about that when writing the pseudocode."}], "tags": [], "owner": {"reputation": 1780, "user_id": 4168972, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fc92e82d2eb21eb030d4c133c70ff554?s=128&d=identicon&r=PG&f=1", "display_name": "David Fletcher", "link": "https://stackoverflow.com/users/4168972/david-fletcher"}, "is_accepted": true, "score": 3, "last_activity_date": 1474527206, "creation_date": 1474527206, "answer_id": 39632171, "question_id": 39631657, "link": "https://stackoverflow.com/questions/39631657/haskell-writing-array-to-file-without-square-brackets/39632171#39632171", "title": "Haskell - Writing array to file without square brackets", "body": "<p>What you have is fine, but I think a neater way is not to use <code>show</code> on the list, but to show each element and put in the commas yourself, like this:</p>\n\n<pre><code>writeFile \"data.txt\" . intercalate \",\" . map show $ [1, 2, 3]\n</code></pre>\n\n<p><code>intercalate</code> is from <code>Data.List</code>.</p>\n\n<p>(by the way: you can't call a variable <code>data</code>, because that's a keyword)</p>\n"}, {"comments": [{"owner": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 1, "creation_date": 1474534939, "post_id": 39632953, "comment_id": 66573621, "body": "Nice. Note that the fold approach will generate a trailing comma, while intercalate does not."}, {"owner": {"reputation": 448, "user_id": 6782635, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/vi3AT.jpg?s=128&g=1", "display_name": "Mathieu Kerjouan", "link": "https://stackoverflow.com/users/6782635/mathieu-kerjouan"}, "reply_to_user": {"reputation": 100185, "user_id": 3234959, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/93bb12ca0f93dfddb33880316f7e66c2?s=128&d=identicon&r=PG&f=1", "display_name": "chi", "link": "https://stackoverflow.com/users/3234959/chi"}, "edited": false, "score": 0, "creation_date": 1474535711, "post_id": 39632953, "comment_id": 66574106, "body": "Yep, sorry, Solution here: <code>Data.List.tail $ Data.List.foldl (\\x y -&gt; x ++ &quot;,&quot; ++ show y) &quot;&quot; data</code>."}, {"owner": {"reputation": 1780, "user_id": 4168972, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fc92e82d2eb21eb030d4c133c70ff554?s=128&d=identicon&r=PG&f=1", "display_name": "David Fletcher", "link": "https://stackoverflow.com/users/4168972/david-fletcher"}, "edited": false, "score": 2, "creation_date": 1474539124, "post_id": 39632953, "comment_id": 66576397, "body": "<code>foldl</code> is a bad choice here.  Try it in ghci on <code>[1..1000000]</code> and watch it crawl.  You&#39;re forcing <code>(++)</code> to associate to the left and that makes it do quadratic work repeatedly traversing <code>&quot;1&quot;</code> then <code>&quot;1,2&quot;</code> then <code>&quot;1,2,3&quot;</code> etc.  Use <code>foldr</code>."}, {"owner": {"reputation": 448, "user_id": 6782635, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/vi3AT.jpg?s=128&g=1", "display_name": "Mathieu Kerjouan", "link": "https://stackoverflow.com/users/6782635/mathieu-kerjouan"}, "edited": false, "score": 0, "creation_date": 1474539783, "post_id": 39632953, "comment_id": 66576818, "body": "and if I do something like that? <code>Data.List.foldr (\\x y -&gt; &quot;,&quot; ++ show x ++ y ) &quot;&quot; data</code>"}], "tags": [], "owner": {"reputation": 448, "user_id": 6782635, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/vi3AT.jpg?s=128&g=1", "display_name": "Mathieu Kerjouan", "link": "https://stackoverflow.com/users/6782635/mathieu-kerjouan"}, "is_accepted": false, "score": 2, "last_activity_date": 1474535880, "last_edit_date": 1495541703, "creation_date": 1474529656, "answer_id": 39632953, "question_id": 39631657, "link": "https://stackoverflow.com/questions/39631657/haskell-writing-array-to-file-without-square-brackets/39632953#39632953", "title": "Haskell - Writing array to file without square brackets", "body": "<p>You have lot of way for doing this! Your data are converted to strings, and, you can now use them:</p>\n\n<p>In your case, you can write your code like this (each element of the list is read one time and directly converted)</p>\n\n<pre class=\"lang-haskell prettyprint-override\"><code>writeFile \"data.txt\" $ Data.List.foldl (\\x y -&gt; x ++ show y ++ \",\") \"\" data\n</code></pre>\n\n<p>and without last comma:</p>\n\n<pre class=\"lang-haskell prettyprint-override\"><code>writeFile \"data.txt\" $ Data.List.tail $ Data.List.foldl (\\x y -&gt; x ++ \",\" ++ show y) \"\" data\n</code></pre>\n\n<p>or using intercalate from Data.List</p>\n\n<pre class=\"lang-haskell prettyprint-override\"><code> Data.List.intercalate \",\" $ Data.List.map (\\x -&gt; show x) data\n</code></pre>\n\n<p>Similar questions are on stackoverflow:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/9220986/is-there-any-haskell-function-to-concatenate-list-with-separator\">Is there any haskell function to concatenate list with separator?</a></li>\n</ul>\n"}], "owner": {"reputation": 398, "user_id": 1351182, "user_type": "registered", "accept_rate": 22, "profile_image": "https://www.gravatar.com/avatar/a19ea4f2204cb5ccc2745fcdf8cda84c?s=128&d=identicon&r=PG", "display_name": "Myridium", "link": "https://stackoverflow.com/users/1351182/myridium"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 825, "favorite_count": 0, "accepted_answer_id": 39632171, "answer_count": 2, "score": 1, "last_activity_date": 1474535880, "creation_date": 1474525278, "last_edit_date": 1474525609, "question_id": 39631657, "link": "https://stackoverflow.com/questions/39631657/haskell-writing-array-to-file-without-square-brackets", "title": "Haskell - Writing array to file without square brackets", "body": "<p>In my program, I generate a list of numbers:</p>\n\n<pre><code>data = [2,3,2,5,2,7,2,3,2,11 ... ]\n</code></pre>\n\n<p>Now I want to write this list of numbers as a single-line comma-separated string in a file. I know I can use <code>writeFile</code> combined with <code>Show</code>:</p>\n\n<pre><code>writeFile \"data.txt\" $ show $ data\n</code></pre>\n\n<p>However, this will also print the square brackets at the beginning and end. Now I could remove the first and last characters from the string <code>Show data</code> by using <code>reverse</code>, but this is inefficient. At some point, the program is already traversing the list in order to write the characters to the file, so how can I make sure it doesn't write the first and last characters without doing an unnecessary traversal?</p>\n\n<p>Will this do the job most efficiently?</p>\n\n<pre><code>writeFile \"data.txt\" $ drop 1 $ takeWhile (\\c -&gt; c/= ']') $ show data\n</code></pre>\n"}, {"tags": ["haskell"], "comments": [{"owner": {"reputation": 8697, "user_id": 1055165, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/d7c25776b0ca1c13212eea512370102d?s=128&d=identicon&r=PG", "display_name": "zoran119", "link": "https://stackoverflow.com/users/1055165/zoran119"}, "edited": false, "score": 2, "creation_date": 1474515423, "post_id": 39629627, "comment_id": 66564823, "body": "Long shot but could you use DataKinds to create your own &#39;length-indexed vectors&#39; and then use those to constrain your function parameters? <a href=\"https://downloads.haskell.org/~ghc/7.8.4/docs/html/users_guide/promotion.html\" rel=\"nofollow noreferrer\">downloads.haskell.org/~ghc/7.8.4/docs/html/users_guide/&hellip;</a>"}, {"owner": {"reputation": 8697, "user_id": 1055165, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/d7c25776b0ca1c13212eea512370102d?s=128&d=identicon&r=PG", "display_name": "zoran119", "link": "https://stackoverflow.com/users/1055165/zoran119"}, "edited": false, "score": 0, "creation_date": 1474516080, "post_id": 39629627, "comment_id": 66564979, "body": "Or use this: <a href=\"https://hackage.haskell.org/package/fixed-list-0.1.6/docs/Data-FixedList.html\" rel=\"nofollow noreferrer\">hackage.haskell.org/package/fixed-list-0.1.6/docs/&hellip;</a>"}, {"owner": {"reputation": 8697, "user_id": 1055165, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/d7c25776b0ca1c13212eea512370102d?s=128&d=identicon&r=PG", "display_name": "zoran119", "link": "https://stackoverflow.com/users/1055165/zoran119"}, "edited": false, "score": 0, "creation_date": 1474516281, "post_id": 39629627, "comment_id": 66565019, "body": "I suspect neither of the two above are general enough :("}, {"owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "reply_to_user": {"reputation": 8697, "user_id": 1055165, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/d7c25776b0ca1c13212eea512370102d?s=128&d=identicon&r=PG", "display_name": "zoran119", "link": "https://stackoverflow.com/users/1055165/zoran119"}, "edited": false, "score": 0, "creation_date": 1474522703, "post_id": 39629627, "comment_id": 66566855, "body": "@zoran119, I see nothing wrong with using length-indexed vectors."}, {"owner": {"reputation": 4418, "user_id": 1103705, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/fa36ad5f4b3bda5f6975bd21773f032c?s=128&d=identicon&r=PG", "display_name": "enobayram", "link": "https://stackoverflow.com/users/1103705/enobayram"}, "edited": false, "score": 0, "creation_date": 1474523000, "post_id": 39629627, "comment_id": 66566957, "body": "This is not really an answer, but here&#39;s a nice article describing something along similar lines: <a href=\"https://blog.jle.im/entry/practical-dependent-types-in-haskell-1.html\" rel=\"nofollow noreferrer\">blog.jle.im/entry/practical-dependent-types-in-haskell-1.htm&zwnj;&#8203;l</a>"}, {"owner": {"reputation": 20862, "user_id": 376113, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/d3a5bd12fe6d876527a3cf4ac0de5fc6?s=128&d=identicon&r=PG", "display_name": "mb14", "link": "https://stackoverflow.com/users/376113/mb14"}, "edited": false, "score": 0, "creation_date": 1474529740, "post_id": 39629627, "comment_id": 66570468, "body": "Another option to consider is to accept a list of tuples instead. It conveys the idea that you need as many Xs as Ys and it&#39;s probably the simplest to deal with."}], "answers": [{"tags": [], "owner": {"reputation": 44013, "user_id": 1477667, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/trgKM.jpg?s=128&g=1", "display_name": "dfeuer", "link": "https://stackoverflow.com/users/1477667/dfeuer"}, "is_accepted": true, "score": 4, "last_activity_date": 1474522655, "creation_date": 1474522655, "answer_id": 39631033, "question_id": 39629627, "link": "https://stackoverflow.com/questions/39629627/type-safe-equal-tuple-sizes/39631033#39631033", "title": "Type safe equal tuple sizes.", "body": "<p>As zoran119 suggests, length-indexed vectors are the classic way to do this.</p>\n\n<pre><code>{-# LANGUAGE GADTs, DataKinds #-}\n\ndata Nat = Z | S Nat\n\ndata Vec n a where\n  Nil :: Vec 'Z a\n  Cons :: a -&gt; Vec n a -&gt; Vec ('S n) a\n</code></pre>\n\n<p>Now you can easily write</p>\n\n<pre><code>f :: Vec n X -&gt; [Vec n Y] -&gt; Z\n</code></pre>\n"}], "owner": {"reputation": 20310, "user_id": 525980, "user_type": "registered", "accept_rate": 48, "profile_image": "https://www.gravatar.com/avatar/8dafe66793ee2f32192e9fcefb389a12?s=128&d=identicon&r=PG", "display_name": "Clinton", "link": "https://stackoverflow.com/users/525980/clinton"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 71, "favorite_count": 1, "accepted_answer_id": 39631033, "answer_count": 1, "score": 3, "last_activity_date": 1474522655, "creation_date": 1474513725, "question_id": 39629627, "link": "https://stackoverflow.com/questions/39629627/type-safe-equal-tuple-sizes", "title": "Type safe equal tuple sizes.", "body": "<p>How can I write best write a type signature in Haskell that best encapsulates the idea that a function must be passed a tuple of any length with all elements X, and a list of tuples (of the same length) with all elements Y?</p>\n\n<p>I don't mind if the type passed is a \"real\" tuple some alternate data type, as long as I can enforce at compile time that both the tuple and the list of tuples have the same length. </p>\n\n<pre><code>Tuple N X -&gt; [Tuple N Y] -&gt; Z\n</code></pre>\n"}]